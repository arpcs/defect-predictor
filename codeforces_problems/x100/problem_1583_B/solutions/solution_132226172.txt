{
    "id": 132226172,
    "contestId": 1583,
    "creationTimeSeconds": 1634470377,
    "relativeTimeSeconds": 1677,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "kirek"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 48,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1536000,
    "source": "#include <bits/stdc++.h>\r\n#define all(X) X.begin(), X.end()\r\n#define rall(X) X.rbegin(), X.rend()\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#define sz(x) ((int)x.size())\r\n#define fr first\r\n#define sc second\r\n#define endl '\\n'\r\n#define pb push_back\r\n#define pf push_front\r\n#define pw(x) (1ll << x)\r\n#define sqr(x) ((ll)(x)*(ll)(x))\r\n\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef unsigned long long ull;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair <int, int> pii;\r\ntypedef pair <ll, ll> pll;\r\n\r\ninline bool valid (int x, int y, int n, int m) {\r\n    return x >= 0 && y >= 0 && x < n && y < m;\r\n}\r\n\r\ntemplate <typename T>\r\nusing ordered_set = tree<T, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\nconst int N = 1e5 + 100;\r\nconst ll mod = 1e9 + 7;\r\n\r\nbool is_prime (int x) {\r\n    if (x < 2) return false;\r\n    for (int i = 2; i * i <= x; i++) {\r\n        if (x % i == 0) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvector <int> g[N];\r\nbool lf[N], used[N];\r\n\r\nvoid clean (int n) {\r\n    for (int i = 0; i <= n; i++) {\r\n        g[i].clear();\r\n        lf[i] = used[i] = 0;\r\n    }\r\n}\r\n\r\nvoid dfs (int v, int p) {\r\n    bool lff = true;\r\n    used[v] = true;\r\n    for (auto u : g[v]) {\r\n        if (u != p) {\r\n            dfs(u, v);\r\n            lff = false;\r\n        }\r\n    }\r\n    lf[v] = lff;\r\n}\r\n\r\nvoid solve () {\r\n    int n, m; cin >> n >> m;\r\n    clean(n);\r\n    set <pair <int, int>> edge;\r\n    for (int i = 0; i < m; i++) {\r\n        int a, b, c; cin >> a >> b >> c;\r\n        a--; b--; c--;\r\n        g[a].push_back(c);\r\n        g[c].push_back(a);\r\n        edge.insert({min(a, c), max(a, c)});\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        if (!used[i]) {\r\n            dfs(i, -1);\r\n            for (int j = 0; j < n; j++) {\r\n                if (lf[j]) {\r\n                    for (int k = 0; k < n; k++) {\r\n                        if (!used[k]) {\r\n                            dfs(k, -1);\r\n                            edge.insert({min(k, j), max(k, j)});\r\n                        }\r\n                    }\r\n                    cout << sz(edge) << endl;\r\n                    for (auto i : edge) {\r\n                        cout << i.fr + 1 << \" \" << i.sc + 1 << endl;\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << sz(edge) << endl;\r\n    for (auto i : edge) {\r\n        cout << i.fr + 1 << \" \" << i.sc + 1 << endl;\r\n    }\r\n}\r\n\r\nsigned main ()\r\n{\r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    int t = 1; cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}