{
    "id": 132227772,
    "contestId": 1583,
    "creationTimeSeconds": 1634470586,
    "relativeTimeSeconds": 1886,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "lioshik_"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 7,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 468,
    "memoryConsumedBytes": 3379200,
    "source": "#include <iostream>\r\n#include <set>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <random>\r\n#include <ctime>\r\n#include <map>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#include <cassert>\r\n#include <queue>\r\n#include <deque>\r\n#include <bitset>\r\n#include <stack>\r\n#include <iomanip>\r\n\r\nusing namespace std;\r\n//#pragma GCC optimize(\"O3\")\r\n#define int long long\r\n//#define ld long double\r\n\r\nint findlst(const vector<pair<int, int>> mas, int d) {\r\n    int l = 0;\r\n    int r = mas.size() - 1;\r\n    if (mas[0].first > d) return -1;\r\n    if (mas[r].first < d) return r;\r\n    while (r - l > 1) {\r\n        int m = (l + r) / 2;\r\n        if (mas[m].first < d) {\r\n            l = m;\r\n        } else {\r\n            r = m;\r\n        }\r\n    }\r\n    return l;\r\n}\r\n\r\nsigned main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n, m;\r\n        cin >> n >> m;\r\n        set<int> qu;\r\n        for (int i = 0; i < n; i++) qu.insert(i + 1);\r\n        for (int i = 0; i < m; i++) {\r\n            int a, b, c;\r\n            cin >> a >> b >> c;\r\n            qu.erase(b);\r\n        }\r\n        int c = *qu.begin();\r\n        for (int i = 1; i <= n; i++) {\r\n            if (i != c) {\r\n                cout << i << ' ' << c << '\\n';\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}