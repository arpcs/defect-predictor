{
    "id": 193680929,
    "contestId": 1583,
    "creationTimeSeconds": 1676441901,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "Simon_Ghiwot"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "/* stuff you should look for\r\n * int overflow, array bounds\r\n * special cases (n=1?)\r\n * do smth instead of nothing and stay organized\r\n * WRITE STUFF DOWN\r\n * DON'T GET STUCK ON ONE APPROACH\r\n */\r\n#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconstexpr char ln = '\\n';\r\nconstexpr int mod = 1e9 + 7;\r\nconstexpr long long MxN = 1e18;\r\n\r\nint n, m, k;\r\nstring s, t;\r\nvoid dfs(vector<vector<int>> & edges, vector<bool> & visited, int cur){\r\n\tif(visited[cur])\r\n\t\treturn;\r\n\tvisited[cur] = true;\r\n\tfor(auto neighbor : edges[cur]){\r\n\t\tdfs(edges, visited, neighbor);\r\n\t}\r\n}\r\nvoid run_test_case(){\r\n\tcin >> n >> m;\r\n\tvector<vector<int>> edges(n);\r\n\tfor(int i = 0; i < m; i++){\r\n\t\tint x, y, z;\r\n\t\tcin >> x >> y >> z, z--, x--, y--;\r\n\t\tedges[x].push_back(z);\r\n\t\tedges[z].push_back(x);\r\n\t\t// cout << x << \" x \" << z << \" \" << ln; \r\n\t}\r\n\tvector<bool> visited(n);\r\n\tvector<int> compenent;\r\n\tfor(int i = 0; i < n; i++){\r\n\t\tif(!visited[i]){\r\n\t\t\tcompenent.push_back(i);\r\n\t\t\tdfs(edges, visited, i);\r\n\t\t\t// cout << \"here only once\" << ln;\r\n\t\t}\r\n\t}\r\n\tfor(int i = 0; i < compenent.size() - 1; i++){\r\n\t\tedges[compenent[i]].push_back(compenent[i + 1]);\r\n\t\tedges[compenent[i + 1]].push_back(compenent[i]);\r\n\t}\r\n\tvector<bool> vis(n);\r\n\tfor(int i = 0; i < n; i++){\r\n\t\tfor(auto neighbor : edges[i]){\r\n\t\t\tif(vis[neighbor])\tcontinue;\r\n\t\t\tcout << i + 1 << \" \" << neighbor + 1 << ln;\r\n\t\t\t// vis[neighbor] = true;\r\n\t\t}\r\n\t\tvis[i] = true;\r\n\t}\r\n}\t\r\n\r\nint main(){\r\n\tint test = 1;\r\n\tcin >> test;\r\n\twhile(test--){\r\n\t\trun_test_case();\r\n\t}\r\n}\r\n"
}