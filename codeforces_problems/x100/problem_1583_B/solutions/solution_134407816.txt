{
    "id": 134407816,
    "contestId": 1583,
    "creationTimeSeconds": 1636121665,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "Ehraz_Hasan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1024000,
    "source": "#include <bits/stdc++.h> \r\n//#include <ext/pb_ds/assoc_container.hpp>\r\n//#include <ext/pb_ds/tree_policy.hpp>\r\n \r\nusing namespace std;\r\n//using namespace __gnu_pbds;\r\n \r\ntypedef long long ll;\r\ntypedef long double ld;\r\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\r\n#define db1(x) cout<<#x<<\"=\"<<x<<\"\\n\"\r\n#define db2(x,y) cout<<#x<<\"=\"<<x<<\",\"<<#y<<\"=\"<<y<<'\\n'\r\n#define db3(x,y,z) cout<<#x<<\"=\"<<x<<\",\"<<#y<<\"=\"<<y<<\",\"<<#z<<\"=\"<<z<<'\\n'\r\n#define rep(i,n) for(int i=0;i<(n);++i)\r\n#define repA(i,a,n) for(int i=a;i<=(n);++i)\r\n#define repD(i,a,n) for(int i=a;i>=(n);--i)\r\n#define MOD 1000000007\r\n#define gcd(a,b) __gcd(a,b)\r\n#define tolowecase(s1) transform(s1.begin(),s1.end(),s1.begin(), ::tolower)\r\n#define touppercase(s1) transform(s1.begin(),s1.end(),s1.begin(), ::toupper)\r\n#define MOD1 = 998244353;\r\ndouble eps = 1e-12;\r\n#define INF 2e18\r\n#define all(x) (x).begin(), (x).end()\r\n#define sz(x) ((ll)(x).size())\r\n#define PI 3.141592653589793238462\r\n#define total_set_bits __builtin_popcountll\r\n\r\n\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\n/*vector<ll> prime(10000000, 1);\r\nvector<ll> ans(10000000, 0);\r\nvoid isPrime()\r\n{\r\n\r\n    ll c = 0;\r\n    for (ll p = 2; p * p <= 10000000; p++)\r\n\r\n        if (prime[p] == 1)\r\n\r\n            for (ll i = p * 2; i <= 10000000; i += p)\r\n            {\r\n                prime[i] = 0;\r\n            }\r\n\r\n    for (ll p = 2; p <= 10000000; p++)\r\n    {\r\n        ans[p] = ans[p - 1] + prime[p];\r\n    }\r\n}\r\n*/                    \r\n                /*******************************************************************************/\r\n\r\n\r\n\r\nint main(){\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        \r\n        int n, m;\r\n        cin >> n >> m;\r\n\r\n        int totalEdges = n - 1;\r\n        vector<bool> visited(n + 1);\r\n\r\n        int lastNode;\r\n        rep(i, m){\r\n\r\n        \tint a, b , c;\r\n        \tcin >> a >> b >> c;\r\n\r\n        \tif(totalEdges > 0 and (!visited[a] or !visited[c])){\r\n        \t\tcout << a << \" \" << c << endl;\r\n        \t\ttotalEdges--;\r\n        \t}\r\n\r\n        \tif(totalEdges > 0 and (!visited[a] or !visited[b])){\r\n        \t\tcout << a << \" \" << b << endl;\r\n        \t\ttotalEdges--;\r\n        \t}\r\n\r\n        \tlastNode = c;\r\n\r\n        }\r\n\r\n        if(totalEdges > 0){\r\n\r\n        \tfor(int i = 1; i <= n; i++){\r\n\r\n        \t\tif(!visited[i]){\r\n\r\n        \t\t\tcout << lastNode << \" \" << i << endl;\r\n        \t\t}\r\n        \t}\r\n        }\r\n    }\r\n    return 0;\r\n}"
}