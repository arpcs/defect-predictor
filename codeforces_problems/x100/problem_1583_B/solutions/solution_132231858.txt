{
    "id": 132231858,
    "contestId": 1583,
    "creationTimeSeconds": 1634471162,
    "relativeTimeSeconds": 2462,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "welleyth"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 33,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define pb push_back\r\n#define int long long\r\n#define uint __int128\r\n#define mp make_pair\r\n#define left left_compile\r\n#define right right_compile\r\n\r\n#pragma GCC optimize(\"O3\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n\r\nconst int INF = (int)1e15;\r\nconst int md = (int)1e9 + 7;\r\nconst int MAXN = (int)1e18;\r\nconst int N = (int)1e5 + 111;\r\n//const int L = 20;\r\nconst int debug = 0;\r\nconst long double eps = 1e-7;\r\n//const int P[2] = {29,31};\r\n\r\nmt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());\r\n\r\nstruct DSU{\r\n    int n;\r\n    vector<int> parent;\r\n    vector<int> sz;\r\n    vector<int> deep;\r\n    DSU(int nn){\r\n        n = nn;\r\n        parent.resize(n+1);\r\n        sz.resize(n+1,1);\r\n        deep.resize(n+1,1);\r\n        for(int i = 0; i <= n; i++)\r\n            parent[i] = i, sz[i] = 1, deep[i] = 1;\r\n    }\r\n    int find_parent(int x){\r\n        if(parent[x] == x)\r\n            return x;\r\n        return parent[x] = find_parent(parent[x]);\r\n    }\r\n    void union_sets(int a,int b){\r\n        a = find_parent(a);\r\n        b = find_parent(b);\r\n        if(a == b)\r\n            return;\r\n        if(deep[a] <= deep[b])\r\n            parent[a] = b, sz[b] += sz[a], deep[b] = max(deep[b],deep[a]+1);\r\n        else\r\n            parent[b] = a, sz[a] += sz[b], deep[a] = max(deep[a],deep[b]+1);\r\n    }\r\n    bool connected(int a,int b){\r\n        return find_parent(a) == find_parent(b);\r\n    }\r\n};\r\n\r\n//typedef tree<\r\n//int,\r\n//null_type,\r\n//less_equal<int>,\r\n//rb_tree_tag,\r\n//tree_order_statistics_node_update>\r\n//ordered_set;\r\n\r\n//int bpow(int a,int b){\r\n//    if(b <= 0)\r\n//        return 1ll;\r\n//    if(b % 2 == 0){\r\n//        int t = bpow(a,b/2) % md;\r\n//        return (t * t) % md;\r\n//    }\r\n//    return (a * bpow(a,b-1)) % md;\r\n//}\r\n\r\n//int inv(int a){ /// return 1/a by PRIME modulo md\r\n//    return bpow(a,md-2);\r\n//}\r\n\r\n//void myerase(ordered_set& st, int t){\r\n//    int r = st.order_of_key(t);\r\n//    ordered_set::iterator it = st.find_by_order(r);\r\n//    st.erase(it);\r\n//    return;\r\n//}\r\n\r\nvoid init(){\r\n    return;\r\n}\r\n\r\n//void add(int& a,int b){\r\n//    a = (a + b >= md ? a + b - md : a + b);\r\n//}\r\n//\r\n//void sub(int& a,int b){\r\n//    a = (a < b ? a - b + md : a - b);\r\n//}\r\n\r\nvoid solve(){\r\n    int n;\r\n    cin >> n;\r\n\r\n    int m;\r\n    cin >> m;\r\n\r\n    DSU d(n+1);\r\n    vector<pair<int,int>> edges;\r\n    for(int i = 0; i < m; i++){\r\n        int a,b,c;\r\n        cin >> a >> b >> c;\r\n        if(!d.connected(a,c)){\r\n            edges.pb(mp(a,c));\r\n            d.union_sets(a,c);\r\n        }\r\n    }\r\n\r\n    for(int i = 1; i <= n; i++){\r\n        if(!d.connected(1,i)){\r\n            d.union_sets(1,i);\r\n            edges.pb(mp(1,i));\r\n        }\r\n    }\r\n\r\n    for(auto&[x,y] : edges)\r\n        cout << x << \" \" << y << \"\\n\";\r\n\r\n    return;\r\n}\r\n\r\n/**\r\n\r\n**/\r\n\r\nsigned main(){\r\n    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n//    freopen(\"input.txt\",\"r\",stdin);\r\n//    freopen(\"output.txt\",\"w\",stdout);\r\n\r\n    init();\r\n\r\n    int tests = 1;\r\n    cin >> tests;\r\n\r\n    for(int _ = 1; _ <= tests; _++){\r\n        solve();\r\n    }\r\n\r\n//    #ifdef __WIN32\r\n//        cerr << endl << \"finished in \" << clock() * 1.0 / CLOCKS_PER_SEC << \" sec\" << endl;\r\n//    #endif\r\n\r\n    return 0;\r\n}\r\n/***\r\n\r\n***/\r\n"
}