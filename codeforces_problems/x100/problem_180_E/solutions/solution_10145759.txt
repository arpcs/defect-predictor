{
    "id": 10145759,
    "contestId": 180,
    "creationTimeSeconds": 1425467536,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "renegade_warrior"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 6144000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nvector<int> pos[100001];\r\nvector<int> dp[100001];\r\n\r\nint main()\r\n{\r\n    int n,m,k;\r\n    scanf(\"%d%d%d\",&n,&m,&k);\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int temp;\r\n        scanf(\"%d\",&temp);\r\n        pos[temp].push_back(i);\r\n    }\r\n\r\n    for(int i=1;i<=100000;i++)\r\n    {\r\n        if(pos[i].size()==0)\r\n        {\r\n            continue;\r\n        }\r\n        else if(pos[i].size()==1)\r\n        {\r\n            dp[i].push_back(0);\r\n        }\r\n        else\r\n        {\r\n            dp[i].push_back(0);\r\n            //printf(\"0 \");\r\n            for(int j=1;j<pos[i].size();j++)\r\n            {\r\n                dp[i].push_back(pos[i][j]-pos[i][j-1]-1);\r\n                //printf(\"%d \",dp[i][j]);\r\n            }\r\n            //printf(\"\\n\");\r\n        }\r\n    }\r\n\r\n    int ans=-1;\r\n\r\n    for(int i=1;i<=100000;i++)\r\n    {\r\n        if(dp[i].size()==0)\r\n        {\r\n            continue;\r\n        }\r\n        int l=0;\r\n        int r=0;\r\n        int cost1=0;\r\n        int ans1=0;\r\n        int ans2=1;\r\n\r\n        while(r<dp[i].size())\r\n        {\r\n            int cost2=cost1+dp[i][r];\r\n            if(cost2>k)\r\n            {\r\n                l++;\r\n                cost1=cost1-dp[i][l];\r\n                r=max(r,l);\r\n            }\r\n            else\r\n            {\r\n                cost1=cost1+dp[i][r];\r\n                ans2=max(ans2,r-l+1);\r\n                r++;\r\n            }\r\n            //printf(\"(%d,%d->%d) \",l,r,cost1);\r\n        }\r\n        //printf(\"\\n\");\r\n\r\n        ans=max(ans,ans2);\r\n    }\r\n\r\n    printf(\"%d\\n\",ans);\r\nreturn 0;}"
}