{
    "id": 1612986,
    "contestId": 180,
    "creationTimeSeconds": 1335090136,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "trickShuffle"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "Java 6",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 90,
    "memoryConsumedBytes": 43315200,
    "source": "import java.io.PrintWriter;\r\nimport java.util.ArrayDeque;\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) {\r\n        new Main().run();\r\n    }\r\n\r\n    Scanner in;\r\n    PrintWriter out;\r\n\r\n    void run() {\r\n        in = new Scanner(System.in);\r\n        out = new PrintWriter(System.out);\r\n        try {\r\n            solve();\r\n        } finally {\r\n            out.close();\r\n        }\r\n    }\r\n\r\n    class Block {\r\n        int left;\r\n        int right;\r\n        int val;\r\n        int color;\r\n\r\n        Block(int left, int right, int val, int c) {\r\n            this.left = left;\r\n            this.val = val;\r\n            this.right = right;\r\n            color = c;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return (left + 1) + \" \" + (right + 1) + \" \" + val;\r\n        }\r\n    }\r\n\r\n    class BlockList extends ArrayList<Block> {\r\n\r\n    }\r\n\r\n    int len(Block b1, Block b2) {\r\n        return b2.left - b1.right - 1;\r\n    }\r\n\r\n    void solve() {\r\n        int n = in.nextInt();\r\n        int m = in.nextInt();\r\n        int k = in.nextInt();\r\n        int[] a = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            a[i] = in.nextInt() - 1;\r\n        }\r\n        int len = 1;\r\n        int pos = 0;\r\n        int cur = a[0];\r\n        ArrayList<Block> block = new ArrayList<Block>();\r\n        for (int i = 1; i < n; i++) {\r\n            if (a[i] == cur) {\r\n                len++;\r\n            } else {\r\n                block.add(new Block(pos, pos + len - 1, len, cur));\r\n                len = 1;\r\n                cur = a[i];\r\n                pos = i;\r\n            }\r\n        }\r\n        block.add(new Block(pos, pos + len - 1, len, cur));\r\n        BlockList[] color = new BlockList[m];\r\n        for (int i = 0; i < m; i++) {\r\n            color[i] = new BlockList();\r\n        }\r\n        for (Block el : block) {\r\n            color[el.color].add(el);\r\n        }\r\n        int maxLen = 0;\r\n        int curLen = 0;\r\n        ArrayDeque<Block> q = new ArrayDeque<Block>();\r\n        for (int c = 0; c < m; c++) {\r\n            q.clear();\r\n            BlockList list = color[c];\r\n            Block b = list.get(0);\r\n            int curK = 0;\r\n            q.add(b);\r\n            curLen = b.val;\r\n            if (curLen > maxLen) {\r\n                maxLen = curLen;\r\n            }\r\n            for (int i = 1; i < list.size(); i++) {\r\n                Block i1 = list.get(i - 1);\r\n                Block i2 = list.get(i);\r\n                q.add(i2);\r\n                curK += len(i1, i2);\r\n                if (curK > k) {\r\n                    while (q.size() > 1 && curK > k) {\r\n                        Block b1 = q.pop();\r\n                        Block b2 = q.peek();\r\n                        curK -= len(b1, b2);\r\n                        curLen -= b1.val;\r\n                    }\r\n                }\r\n                curLen += i2.val;\r\n                if (curLen > maxLen)\r\n                    maxLen = curLen;\r\n            }\r\n\r\n        }\r\n        out.println(maxLen);\r\n    }\r\n}"
}