{
    "id": 15751967,
    "contestId": 180,
    "creationTimeSeconds": 1454422832,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "sahasumit288"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 3993600,
    "source": "#include <cctype>\r\n#include <cmath>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <sstream>\r\n#include <iomanip>\r\n#include <string>\r\n#include <vector>\r\n#include <set>\r\n#include <map>\r\n#include <queue>\r\n#include <stack>\r\n#include <list>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\n#define nln        puts(\"\")                         ///prLLInewline\r\n#define getLLI(a)  scanf(\"%d\",&a);\r\n#define max3(a,b,c) max(a,max(b,c))                  ///3 ta theke max\r\n#define min3(a,b,c) min(a,min(b,c))                  ///3 ta theke min\r\n\r\n#define FOR1(i,n)  for(LLI i=1;i<=n;i++)\r\n#define FOR0(i,n)  for(LLI i=0;i<n;i++)                 ///looping\r\n#define FORR(i,n)  for(LLI i=n-1;i>=0;i--)\r\n#define ALL(p)     p.begin(),p.end()\r\n\r\n#define SET(p)     memset(p,-1,sizeof(p))\r\n#define CLR(p)     memset(p,0,sizeof(p))            ///memset\r\n#define MEM(p,v)   memset(p,v,sizeof(p))\r\n\r\n#define READ(f)    freopen(f, \"r\", stdin)           /// file\r\n#define WRITE(f)   freopen(f, \"w\", stdout)\r\n\r\n#define SZ(c)      (LLI)c.size()\r\n#define PB(x)      push_back(x)                     ///STL defines\r\n#define MP(x,y)    make_pair(x,y)\r\n#define ff         first\r\n#define ss         second\r\n\r\n#define LI         long LLI\r\n#define LLI        long long\r\n#define f64        long double\r\n#define PI         acos(-1.0)                        ///PI er value\r\n\r\nLLI Set(LLI N,LLI pos)\r\n{\r\n    return N=N | (1<<pos);\r\n}\r\nLLI reset(LLI N,LLI pos)\r\n{\r\n    return N= N & ~(1<<pos);\r\n}\r\nbool check(LLI N,LLI pos)\r\n{\r\n    return (bool)(N & (1<<pos));\r\n}\r\nvoid CI(int &_x)\r\n{\r\n    scanf(\"%d\",&_x);\r\n}\r\n\r\nvoid CO(LLI &_x)\r\n{\r\n    cout<<_x;\r\n}\r\n\r\ntemplate<typename T> void getarray(T a[],LLI n)\r\n{\r\n    for(LLI i=0; i<n; i++) cin>>a[i];\r\n}\r\ntemplate<typename T> void prLLIarray(T a[],LLI n)\r\n{\r\n    for(LLI i=0; i<n-1; i++) cout<<a[i]<<\" \";\r\n    cout<<a[n-1]<<endl;\r\n}\r\n\r\nconst double EPS=1e-9;                              ///constatnts\r\nconst LLI INF=0x7f7f7f7f;\r\n\r\nLLI dr8[8]= {1,-1,0,0,1,-1,-1,1};            ///8 direction move\r\nLLI dc8[8]= {0,0,-1,1,1,1,-1,-1};\r\nLLI dr4[4]= {0,0,1,-1};                      ///4 direction move\r\nLLI dc4[4]= {-1,1,0,0};                      ///or adjacent dir.\r\nLLI kn8r[8]= {1,2,2,1,-1,-2,-2,-1};          ///knight moves\r\nLLI kn8c[8]= {2,1,-1,-2,-2,-1,1,2};\r\n#define mx 200005\r\n#define nn 200000\r\nint ar[mx];\r\n\r\nint tree[mx*4];\r\nint query(int node,int b,int e,int x,int y)\r\n{\r\n    if(x>e||b>y)\r\n        return 0;\r\n\r\n    if(b>=x&&e<=y)\r\n        return tree[node];\r\n    int left=node*2;\r\n    int right=left+1;\r\n    int mid=(b+e)/2;\r\n    int p1=query(left,b,mid,x,y);\r\n    int p2=query(right,mid+1,e,x,y);\r\n    return max(p1,p2);\r\n\r\n\r\n}\r\nvoid update(int node,int b,int e,int in,int newvalue)\r\n{\r\n    if(in>e||in<b)\r\n        return;\r\n    if(b==e)\r\n    {\r\n        tree[node]+=newvalue;\r\n        return;\r\n    }\r\n\r\n    int left=node*2;\r\n    int right=left+1;\r\n    int mid=(b+e)/2;\r\n    update(left,b,mid,in,newvalue);\r\n    update(right,mid+1,e,in,newvalue);\r\n    tree[node]=max(tree[left],tree[right]);\r\n\r\n}\r\nint main()\r\n{\r\n    int n,m,k;\r\n    CI(n);\r\n    CI(m);\r\n    CI(k);\r\n    FOR1(i,n)\r\n    {\r\n        CI(ar[i]);\r\n\r\n    }\r\n    int ans=0;\r\n    int maxi=0,num;\r\n\r\n    int total=0;\r\n    for(int i=1,j=1; j<=n&&i<=n; i++)\r\n    {\r\n\r\n  total++;\r\n        update(1,1,nn,ar[i],1);\r\n        int maxi=query(1,1,nn,1,nn);\r\n\r\n        while(total-maxi>k&&j<=n)\r\n        {\r\n\r\n            total--;\r\n            update(1,1,nn,ar[j],-1);\r\n            maxi=query(1,1,nn,1,nn);\r\nj++;\r\n        }\r\n        ans=max(ans,maxi);\r\n    }\r\n\r\n    cout<<ans<<\"\\n\";\r\n\r\n}\r\n"
}