{
    "id": 1619996,
    "contestId": 180,
    "creationTimeSeconds": 1335275579,
    "relativeTimeSeconds": 7079,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "Quick_Coder"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1335268500
    },
    "programmingLanguage": "Java 7",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 44851200,
    "source": "import java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.math.BigInteger;\nimport java.io.InputStream;\n\n\npublic class Defragment\n{\n        public static void main(String[] Args)\n        {\n                InputStream inputStream = System.in;\n                OutputStream outputStream = System.out;\n                InputReader in = new InputReader(inputStream);\n                PrintWriter out = new PrintWriter(outputStream);\n                CodeDefragment solver = new CodeDefragment();\n                solver.solve(1, in, out);\n                out.close();\n        }\n}\n\nclass CodeDefragment\n{\n\tpublic void solve(int testNumber, InputReader in, PrintWriter out)\n\t{\n\t\tint n=in.nextInt();\n\t\tint m=in.nextInt();\n\t\tint arr[]=new int[n];\n\t\tArrays.fill(arr,0);\n\t\tfor(int i=0;i<m;i++)\n\t\t{\n\t\t\tint k=in.nextInt();\n\t\t\tfor(int j=0;j<k;j++)\n\t\t\t{\n\t\t\t\tint ind=in.nextInt();\n\t\t\t\tarr[ind-1]=i+1;\n\t\t\t}\n\t\t}\n\t\t//printArray(arr,out);\n\t\tint ans[][]=new int[500][2];\n\t\tint len=0;\n\t\tif(arr[n-1]!=0)\n\t\t{\n\t\t\tfor(int i=n-2;i>=0;i--)\n\t\t\t{\n\t\t\t\tif(arr[i]==0)\n\t\t\t\t{\n\t\t\t\t\tans[len][0]=n;\n\t\t\t\t\tans[len][1]=i+1;\n\t\t\t\t\tlen++;\n\t\t\t\t\tint temp=arr[n-1];\n\t\t\t\t\tarr[n-1]=arr[i];\n\t\t\t\t\tarr[i]=temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint t=0;\n\t\tfor(int i=1;i<=m;i++)\n\t\t{\n\t\t\tint count=getCount(i,arr);\n\t\t\tfor(int j=0;j<count;j++)\n\t\t\t{\n\t\t\t\tint ind=search(arr,i,t);\n\t\t\t\tif(ind!=t)\n\t\t\t\t{\n\t\t\t\t\tans[len][0]=t+1;\n\t\t\t\t\tans[len][1]=n;\n\t\t\t\t\tlen++;\n\t\t\t\t\tans[len][0]=ind+1;\n\t\t\t\t\tans[len][1]=t+1;\n\t\t\t\t\tlen++;\n\t\t\t\t\tans[len][0]=n;\n\t\t\t\t\tans[len][1]=ind+1;\n\t\t\t\t\tlen++;\n\t\t\t\t\tint temp=arr[t];\n\t\t\t\t\tarr[t]=arr[ind];\n\t\t\t\t\tarr[ind]=temp;\n\t\t\t\t}\n\t\t\t\tt++;\n\t\t\t}\n\t\t}\n\t\tout.println(len);\n\t\tfor(int i=0;i<len;i++)\n\t\t{\n\t\t\tout.println(ans[i][0]+\" \"+ans[i][1]);\n\t\t}\n\t\t//printArray(arr,out);\n\t}\n\tpublic int getCount(int x, int[] arr)\n\t{\n\t\tint c=0;\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tif(arr[i]==x)\n\t\t\t{\n\t\t\t\tc++;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\tpublic int search(int[] arr,int x,int t)\n\t{\n\t\tfor(int i=t;i<arr.length;i++)\n\t\t{\n\t\t\tif(arr[i]==x)\n\t\t\t{\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\t\n\tpublic void printArray(int arr[],PrintWriter out)\n\t{\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tout.print(arr[i]+\" \");\n\t\t}\n\t}\n\tpublic void printArray(long arr[],PrintWriter out)\n\t{\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tout.println(arr[i]);\n\t\t}\n\t}\n\tpublic void printArray(double arr[],PrintWriter out)\n\t{\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tout.println(arr[i]);\n\t\t}\n\t}\n\tpublic void printArray(String arr[],PrintWriter out)\n\t{\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tout.println(arr[i]);\n\t\t}\n\t}\n}\n\n\n\n\n\n\n\n\nclass InputReader\n{\n    private BufferedReader reader;\n    private StringTokenizer tokenizer;\n\n    public InputReader(InputStream stream)\n    {\n        reader = new BufferedReader(new InputStreamReader(stream));\n        tokenizer = null;\n    }\n\n    public String next()\n    {\n        while (tokenizer == null || !tokenizer.hasMoreTokens())\n        {\n            try\n            {\n                tokenizer = new StringTokenizer(reader.readLine());\n            }\n            catch (IOException e)\n            {\n                throw new RuntimeException(e);\n            }\n        }\n        return tokenizer.nextToken();\n    }\n\n    public int nextInt()\n    {\n        return Integer.parseInt(next());\n    }\n\n    public long nextLong()\n    {\n        return Long.parseLong(next());\n    }\n    public double nextDouble()\n    {\n        return Double.parseDouble(next());\n    }\n    public void getArray(int arr[])\n    {\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tarr[i]=nextInt();\n\t\t}\n\t}\n\tpublic void getArray(double arr[])\n    {\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tarr[i]=nextDouble();\n\t\t}\n\t}\n\tpublic void getArray(String arr[])\n    {\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tarr[i]=next();\n\t\t}\n\t}\n\tpublic void getArray2D(String arr[][])\n    {\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tfor(int j=0;j<arr[i].length;j++)\n\t\t\t{\n\t\t\t\tarr[i][j]=next();\n\t\t\t}\n\t\t}\n\t}\n\tpublic void getArray2D(int arr[][])\n    {\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tfor(int j=0;j<arr[i].length;j++)\n\t\t\t{\n\t\t\t\tarr[i][j]=nextInt();\n\t\t\t}\n\t\t}\n\t}\n\tpublic void getArray2D(double arr[][])\n    {\n\t\tfor(int i=0;i<arr.length;i++)\n\t\t{\n\t\t\tfor(int j=0;j<arr[i].length;j++)\n\t\t\t{\n\t\t\t\tarr[i][j]=nextDouble();\n\t\t\t}\n\t\t}\n\t}\n}\n"
}