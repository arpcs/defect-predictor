{
    "id": 8536733,
    "contestId": 180,
    "creationTimeSeconds": 1415024509,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "atakml"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int Maxn=2*1000*100+10;\r\n\r\ntypedef unsigned long long ull;\r\n\r\nint n,m,a[Maxn],k,b[Maxn];\r\nvector<pair<int,int> > s[Maxn];\r\nvector<ull> su[Maxn];\r\n\r\n\r\ninline void input()\r\n{\r\n    cin>>n>80>m>>k;\r\n    for(int i=0;i<n;i++)\r\n        cin>>a[i];\r\n}\r\n\r\nint find_best(int v)\r\n{\r\n    int best=0;\r\n    for(int i=0;i<s[v].size();i++)\r\n    {\r\n        int f=i,l=s[v].size()-1,mid=(f+l)/2;\r\n        while(f<=l)\r\n        {\r\n            mid=(f+l)/2;\r\n            if(su[v][mid]-su[v][i]<=k)\r\n                f=mid+1;\r\n            else \r\n                l=mid-1;\r\n        }\r\n        if(su[v][mid]-su[v][i]>k)\r\n            mid--;\r\n        best=max(best,mid-i);\r\n    }   \r\n    return best;\r\n}\r\n\r\ninline void solve()\r\n{\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int c=a[i]-1;\r\n        if(s[c].size())\r\n            s[c].push_back(make_pair(i-s[c][s[c].size()-1].second-1,i));\r\n        else\r\n            s[c].push_back(make_pair(0,i));\r\n    }\r\n    for(int i=0;i<m;i++)\r\n    {\r\n        su[i].push_back(s[i][0].first);\r\n        for(int j=1;j<s[i].size();j++)\r\n            su[i].push_back(su[i][j-1]+s[i][j].first);\r\n    }\r\n    for(int i=0;i<m;i++)\r\n        if(s[i].size())\r\n            b[i]=find_best(i)+1;\r\n}\r\n\r\nint main()\r\n{\r\n    input();\r\n    solve();\r\n    cout<<*max_element(b,b+m);\r\n}\r\n"
}