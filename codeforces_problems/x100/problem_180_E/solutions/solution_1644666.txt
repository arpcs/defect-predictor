{
    "id": 1644666,
    "contestId": 180,
    "creationTimeSeconds": 1335721235,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "2xces"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "MS C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 22,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 2457600,
    "source": "#include <cstdio>\r\n#include <cmath>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <vector>\r\n#include <queue>\r\n#include <string>\r\n#include <set>\r\n#include <map>\r\n#include <algorithm>\r\n#include <sstream>\r\n#include <iostream>\r\n#include <numeric>\r\nusing namespace std;\r\n\r\nint nextInt() {\r\n    int x;\r\n    scanf(\"%d\", &x);\r\n    return x;\r\n}\r\n\r\nlong long nextLong() {\r\n    long long x;\r\n    scanf(\"%I64d\", &x);\r\n    return x;\r\n}\r\n\r\ndouble nextDouble() {\r\n    double x;\r\n    scanf(\"%lf\", &x);\r\n    return x;\r\n}\r\n\r\nconst int BUFSIZE = 1000000;\r\nchar buf[BUFSIZE + 1];\r\nstring nextString() {\r\n    scanf(\"%s\", buf);\r\n    return buf;\r\n}\r\n\r\nstruct Point {\r\n    typedef double T;\r\n    T x, y;\r\n    Point () : x(0), y(0) {}\r\n    Point (T x, T y) : x(x), y(y) {}\r\n    Point operator - (Point op) const { return Point(x - op.x, y - op.y); }\r\n    Point operator + (Point op) const { return Point(x + op.x, y + op.y); }\r\n    Point operator * (T op) const { return Point(x * op, y * op); }\r\n    T operator * (Point op) const { return x * op.x + y * op.y; }\r\n    T operator % (Point op) const { return x * op.y - y * op.x; }\r\n    T length2() { return x * x + y * y; }\r\n    double lengt() { return sqrt(length2()); }\r\n};\r\n\r\nPoint nextPoint() {\r\n    double x = nextDouble();\r\n    double y = nextDouble();\r\n    return Point(x, y);\r\n}\r\n\r\nstruct Segment\r\n{\r\n    int begin;\r\n    int end;\r\n    Segment(int b, int e) : begin(b), end(e) {}\r\n    int len(){return end - begin;}\r\n};\r\n\r\nint FindMaxScore2(vector<Segment>& v, int k)\r\n{\r\n    int res = 0;\r\n\r\n    for (int i = 0; i < (int)v.size()-1; ++i)\r\n    {\r\n        int badSteps = k;\r\n        int goodSteps = v[i].len();\r\n        for(int r = i+1; r < (int)v.size(); ++r)\r\n        {\r\n            int step = v[r].begin - v[r-1].end;\r\n            if (badSteps >= step)\r\n            {\r\n                badSteps -= step;\r\n                goodSteps += v[r].len();\r\n                res = max(res, goodSteps);\r\n            }\r\n            else\r\n                break;\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nint FindMaxScore(vector<Segment>& v, int k)\r\n{\r\nif(v.empty()) return 0;\r\n    int res = 0;\r\n\r\n    int badSteps = k;\r\n    int goodSteps = v[0].len();\r\n    for (int i = 0; i < (int)v.size()-1; ++i)\r\n    {\r\n        int r = i+1;\r\n        int firstStep = 0;\r\n        for(; r < (int)v.size(); ++r)\r\n        {\r\n            int step = v[r].begin - v[r-1].end;\r\n            if (badSteps >= step)\r\n            {\r\n                if (firstStep == 0)\r\n                {\r\n                    firstStep = step;\r\n                }\r\n                badSteps -= step;\r\n                goodSteps += v[r].len();\r\n                res = max(res, goodSteps);\r\n            }\r\n            else\r\n                break;\r\n        }\r\n        if (firstStep != 0)\r\n        {\r\n            goodSteps -= v[i].len();\r\n            badSteps += firstStep;\r\n            i = r-2;\r\n        }\r\n        else\r\n        {\r\n            badSteps = k;\r\n            goodSteps = v[i+1].len();\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nint main() {\r\n    int n = nextInt();\r\n    int m = nextInt();\r\n    int k = nextInt();\r\n\r\n    vector<int> line;\r\n    for (int i = 0; i < n; ++i)\r\n    {\r\n        line.push_back(nextInt()-1);\r\n    }\r\n\r\n//  10 3 2\r\n//  1 2 1 1 3 2 1 1 2 2\r\n    int score = 0;\r\n\r\n    vector<vector<Segment> > v(m);\r\n    int begin = 0;\r\n    for (int i = 0; i < n; ++i)\r\n    {\r\n        if (i == 0 || line[i-1] != line[i])\r\n        {\r\n            begin = i;\r\n        }\r\n        if (i == n-1 || line[i] != line[i+1])\r\n        {\r\n            Segment s(begin, i+1);\r\n            v[line[i]].push_back(s);\r\n            score = max(score, s.len());\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i < m; ++i)\r\n    {\r\n        score = max(score, FindMaxScore(v[i], k));\r\n    }\r\n\r\n    cout << score << endl;\r\n    return 0;\r\n}"
}