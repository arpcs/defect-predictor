{
    "id": 86416997,
    "contestId": 180,
    "creationTimeSeconds": 1594376083,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "sumit18cs"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 3891200,
    "source": "#include<bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp> // Common file\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\nusing namespace std;\ntypedef long long int ll;\nusing namespace __gnu_pbds;\ntypedef tree<ll, null_type, less_equal<ll>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;\n#define MOD 1000000007\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define fast ios_base::sync_with_stdio(false); cin.tie(NULL);\n//*s.find_by_order(p)   returns the value of pth largest starting from 0 \n//s.order_of_key(p)   returns no. of items that are strictly < p \n//string bin = bitset<64>(m).to_string();     convert decimal m to binary\nint main()\n{\n      fast;ll t;t=1;\n      while(t--)\n      {\n            ll m,n,k,l,r,i,ans,a,p;\n            cin>>n>>m>>k;\n            vector<ll>v[m+2];\n            for(i=0;i<n;i++){\n                  cin>>a;\n                  v[a].pb(i);\n            }\n            ans=1;\n            for(i=1;i<=m;i++){\n                  l=0;r=0;p=0;\n                  //cout<<v[i].size()<<\" \"; \n                  //p=v[i][l+1]-v[i][l]-1;\n                  while(1){\n                        r++;\n                        if(r==v[i].size() || l>r){break;}\n                        p=p+(v[i][r]-v[i][r-1]-1);\n                        while(p>k){\n                              p=p-(v[i][l+1]-v[i][l]-1);\n                              l++;\n                        }\n                        ans=max(ans,v[i][r]-v[i][l]+1-p);\n                  }\n            }\n            cout<<ans<<\"\\n\";\n      }\n}"
}