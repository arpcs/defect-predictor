{
    "id": 1611952,
    "contestId": 180,
    "creationTimeSeconds": 1335084828,
    "relativeTimeSeconds": 6828,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "Niko"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "Java 7",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 80,
    "memoryConsumedBytes": 44851200,
    "source": "import java.io.*;\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\n\r\npublic class MinCost {\r\n\tpublic static void main(String[] args) {\r\n\t\tnew MinCost().run();\r\n\t}\r\n\r\n\tBufferedReader br;\r\n\tStringTokenizer in;\r\n\tPrintWriter out;\r\n\r\n\tpublic String nextToken() throws IOException {\r\n\t\twhile (in == null || !in.hasMoreTokens()) {\r\n\t\t\tin = new StringTokenizer(br.readLine());\r\n\t\t}\r\n\t\treturn in.nextToken();\r\n\t}\r\n\r\n\tpublic int nextInt() throws IOException {\r\n\t\treturn Integer.parseInt(nextToken());\r\n\t}\r\n\r\n\tpublic long nextLong() throws IOException {\r\n\t\treturn Long.parseLong(nextToken());\r\n\t}\r\n\r\n\tpublic double nextDouble() throws IOException {\r\n\t\treturn Double.parseDouble(nextToken());\r\n\t}\r\n\r\n\tvoid solve() throws IOException {\r\n\t\tint n = nextInt();\r\n\t\tint m = nextInt();\r\n\t\tint[] a = new int[n + 1];\r\n\t\tint k = nextInt();\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\ta[i] = nextInt() - 1;\r\n\t\t}\r\n\t\tint[] next = new int[n + 1];\r\n\t\tint[] pos = new int[m];\r\n\t\tint[] num = new int[n + 1];\r\n\t\ta[n] = -2;\r\n\t\tArrays.fill(pos, n);\r\n\t\tfor (int i = n - 1; i >= 0; i--) {\r\n\t\t\tnext[i] = pos[a[i]];\r\n\t\t\tnum[i] = num[next[i]] + 1;\r\n\t\t\tpos[a[i]] = i;\r\n\t\t}\r\n\t\tint l = 1;\r\n\t\tint r = 2000000;\r\n\t\twhile (l < r - 1) {\r\n\t\t\tint x = (l + r) / 2;\r\n\t\t\tboolean fl = false;\r\n\t\t\tint[] left = new int[m];\r\n\t\t\tArrays.fill(left, -1);\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\twhile (left[a[i]] == -1 || num[left[a[i]]] - num[i] + 1 > x) {\r\n\t\t\t\t\tif (left[a[i]] == -1) {\r\n\t\t\t\t\t\tleft[a[i]] = i;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tleft[a[i]] = next[left[a[i]]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif ((num[left[a[i]]] - num[i] + 1 == x)\r\n\t\t\t\t\t\t&& (left[a[i]] - num[i] + 1 - x <= k)) {\r\n\t\t\t\t\tfl = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (fl) {\r\n\t\t\t\tl = x;\r\n\t\t\t} else {\r\n\t\t\t\tr = x;\r\n\t\t\t}\r\n\t\t}\r\n\t\tout.println(l);\r\n\r\n\t}\r\n\r\n\tpublic void run() {\r\n\t\ttry {\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tout = new PrintWriter(System.out);\r\n\t\t\tsolve();\r\n\t\t\tout.close();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\tSystem.exit(1);\r\n\t\t}\r\n\t}\r\n}"
}