{
    "id": 1609858,
    "contestId": 180,
    "creationTimeSeconds": 1335080992,
    "relativeTimeSeconds": 2992,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "sunmeng94"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 50,
    "memoryConsumedBytes": 7680000,
    "source": "#include <cstdio>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\n\r\nconst int N=120001,inf=999999999;\r\nint n,m,k,a[N],ans=0;\r\n\r\nstruct Xnode\r\n  {\r\n    Xnode *lch,*rch;\r\n    int l,r,Max,rest;\r\n    inline void update(){Max=max(lch->Max,rch->Max);}\r\n    inline void add(int x) {Max+=x;rest+=x;}\r\n    inline void pass() {lch->add(rest);rch->add(rest);rest=0;}\r\n    inline void cover(int left,int right,int x)\r\n      {\r\n        if (left<=l && right>=r) {add(x);return;}\r\n        pass();int mid=(l+r)>>1;\r\n        if (left<=mid) lch->cover(left,right,x);\r\n        if (right>mid) rch->cover(left,right,x);\r\n        update();\r\n      }\r\n    inline int ask(int left,int right)\r\n      {\r\n        if (left<=l && right>=r) return Max;\r\n        pass();int mid=(l+r)>>1,ans=-inf;\r\n        if (left<=mid) ans=max(ans,lch->ask(left,right));\r\n        if (right>mid) ans=max(ans,rch->ask(left,right));\r\n        return ans;\r\n      }\r\n  } X[N*2],*P=X,*root;\r\ninline void build(Xnode *&node,int left,int right)\r\n  {\r\n    node=P++;node->l=left;node->r=right;\r\n    int mid=(left+right)>>1;\r\n    if (left==right) {node->Max=node->rest=0;return;}\r\n    build(node->lch,left,mid);\r\n    build(node->rch,mid+1,right);\r\n    node->update();\r\n  }\r\n\r\nint main()\r\n  {\r\n    scanf(\"%d%d%d\",&n,&m,&k);\r\n    for (int i=1;i<=n;++i) scanf(\"%d\",&a[i]);\r\n    int t=0;build(root,1,m);\r\n    for (int i=1;i<=n;++i) \r\n      {\r\n        root->cover(a[i],a[i],1);\r\n        while (i-t-root->ask(1,m)>k) ++t,root->cover(a[t],a[t],-1);\r\n        ans=max(ans,root->ask(1,m));\r\n      }\r\n    printf(\"%d\\n\",ans);\r\n  }"
}