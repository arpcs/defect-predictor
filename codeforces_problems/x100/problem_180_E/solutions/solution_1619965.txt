{
    "id": 1619965,
    "contestId": 180,
    "creationTimeSeconds": 1335274749,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "demon2030"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "Java 6",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 130,
    "memoryConsumedBytes": 43212800,
    "source": "import java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Created by Andrey_Demidenko\r\n * Date: 23.04.12\r\n * Time: 15:53\r\n */\r\npublic class Contest180E {\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        solve(in, out);\r\n        in.close();\r\n        out.close();\r\n    }\r\n\r\n    private static void solve(Scanner in, PrintWriter out) {\r\n        int n = in.nextInt();\r\n        int m = in.nextInt();\r\n        int k = in.nextInt();\r\n        int maxColorLength = n / 2 + 1;\r\n        int[][] a = new int[n][2];\r\n        int[] lastColorIndex = new int[m+1];\r\n        int[] colorGroupCount = new int[m+1];\r\n        int[][][] colors = new int[m][maxColorLength][2];\r\n        Arrays.fill(lastColorIndex, -1);\r\n        int pos = -1;\r\n        int lastColor = -1;\r\n        for (int i = 0; i <= n; i++) {\r\n            int color;\r\n            color = (i != n) ? (in.nextInt() - 1) : m;\r\n            if (i == 0 || color != lastColor || i == n) {\r\n                if (pos > -1) {\r\n                    int lastIndex = lastColor != -1 ? lastColorIndex[lastColor] : -1;\r\n                    int weight;\r\n                    if (lastIndex == -1) {\r\n                        weight = 0;\r\n                    } else {\r\n                        weight = getWeight(a, lastIndex, pos);\r\n                    }\r\n                    colors[lastColor][colorGroupCount[lastColor]++] = new int[]{weight/*\u0440\u0430\u0437\u043c\u0435\u0440 \u0432\u044b\u0440\u0435\u0437\u0430\u043d\u0438\u044f*/, a[pos][1]/*\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u0442\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430*/};\r\n                    lastColorIndex[lastColor] = pos;\r\n                }\r\n                //new item\r\n                pos++;\r\n                a[pos][0] = color;\r\n                a[pos][1] = 1;\r\n            } else {\r\n                a[pos][1]++;\r\n            }\r\n            lastColor = color;\r\n        }\r\n        int maxLength = 0;\r\n        for (int[][] list : colors) {\r\n            int startIndex = 0;\r\n            int currLength = 0;\r\n            int currK = 0;\r\n            for (int[] aList : list) {\r\n                if (currK + aList[0] > k) {\r\n                    while (currK + aList[0] > k) {\r\n                        currK -= list[startIndex + 1][0];\r\n                        currLength -= list[startIndex][1];\r\n                        startIndex++;\r\n                    }\r\n                }\r\n                currK += aList[0];\r\n                currLength += aList[1];\r\n                if (maxLength < currLength) maxLength = currLength;\r\n            }\r\n        }\r\n        out.print(maxLength);\r\n    }\r\n\r\n    private static int getWeight(int[][] a, int begin, int end) {\r\n        int count = 0;\r\n        for (int i = begin + 1; i < end; i++) {\r\n            count += a[i][1];\r\n        }\r\n        return count;\r\n    }\r\n}\r\n"
}