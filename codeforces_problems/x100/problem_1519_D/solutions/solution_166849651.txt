{
    "id": 166849651,
    "contestId": 1519,
    "creationTimeSeconds": 1659555728,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "20ucs233"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\n\r\n// zero-indexed Segment Tree\r\nstruct segTree\r\n{\r\n\r\n    // default value for empty tree nodes\r\n    static constexpr ll default_unit = 0;\r\n\r\n    // (any associative function)\r\n    ll merge(ll a, ll b) { return max(a, b); }\r\n\r\n    vector<ll> Tree;\r\n    ll n;\r\n\r\n    segTree(ll n = 0, ll def = default_unit) : Tree(2 * n, def), n(n) {}\r\n\r\n    // queries [b,e)\r\n    ll query(ll start, ll end)\r\n    {\r\n        ll right_a = default_unit, right_b = default_unit;\r\n        for (start += n, end += n; start < end; start /= 2, end /= 2)\r\n        {\r\n            if (start % 2)\r\n                right_a = merge(right_a, Tree[start++]);\r\n            if (end % 2)\r\n                right_b = merge(Tree[--end], right_b);\r\n        }\r\n        return merge(right_a, right_b);\r\n    }\r\n\r\n    void update(ll index, ll Value_of_range)\r\n    {\r\n        for (Tree[index += n] = Value_of_range; index /= 2;)\r\n            Tree[index] = merge(Tree[index * 2], Tree[index * 2 + 1]);\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    ios_base ::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    // int m;\r\n    // cin>>m;\r\n    // segTree t(m, 0);\r\n\r\n    // for (ll i = 0; i < m; ++i)\r\n    // {\r\n    //     cin >> blocked[i];\r\n    //     t.update(i, blocked[i]);\r\n    // }\r\n\r\n    ll n;\r\n    cin >> n;\r\n    vector<ll> a(n), b(n);\r\n\r\n    for (auto &it : a)\r\n    {\r\n        cin >> it;\r\n    }\r\n    for (auto &it : b)\r\n    {\r\n        cin >> it;\r\n    }\r\n    ll ans = 0, temp = 0;\r\n    bool flag = true;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        temp += a[i] * b[i];\r\n        if (i > 0)\r\n        {\r\n            if (a[i] < a[i - 1] || b[i] < b[i - 1])\r\n            {\r\n                flag = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (flag)\r\n    {\r\n        cout << temp << endl;\r\n    }\r\n\r\n    else\r\n    {\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n\r\n            int l, r;\r\n            ll op = temp;\r\n            l = i - 1;\r\n            r = i + 1;\r\n            while (l >= 0 && r < n)\r\n            {\r\n                ans = max(ans, op - a[l] * b[l] - a[r] * b[r] + a[l] * b[r] + a[r] * b[l]);\r\n                l--;\r\n                r++;\r\n            }\r\n\r\n            l = i;\r\n            r = i + 1;\r\n\r\n            while (l >= 0 && r < n)\r\n            {\r\n                ans = max(ans, op - a[l] * b[l] - a[r] * b[r] + a[l] * b[r] + a[r] * b[l]);\r\n                l--;\r\n                r++;\r\n            }\r\n        }\r\n\r\n        cout << ans << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n",
    "suggested_categories": [
        "c++",
        "algorithm",
        "data structure",
        "segment tree",
        "code optimization",
        "input/output handling",
        "associative function",
        "variable naming",
        "conditional statements",
        "looping",
        "integer manipulation",
        "vector manipulation",
        "standard template library",
        "bit manipulation",
        "coding style",
        "debugging",
        "code commenting",
        "math operations",
        "performance optimization",
        "error handling"
    ]
}