{
    "id": 172925501,
    "contestId": 1519,
    "creationTimeSeconds": 1663754543,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "megaspazz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class MaximumSumOfProducts {\r\n\tpublic static void solve(FastIO io) {\r\n\t\tfinal int N = io.nextInt();\r\n\t\tfinal long[] A = io.nextLongArray(N);\r\n\t\tfinal long[] B = io.nextLongArray(N);\r\n\t\t\r\n\t\tlong[] sumAB = new long[N + 1];\r\n\t\tfor (int i = 0; i < N; ++i) {\r\n\t\t\tsumAB[i + 1] = sumAB[i] + A[i] * B[i];\r\n\t\t}\r\n\t\t\r\n\t\tlong best = sumAB[N];\r\n\t\tfor (int m = 0; m < N; ++m) {\r\n\t\t\tlong reversePartOdd = A[m] * B[m];\r\n\t\t\tfor (int d = 1; m - d >= 0 && m + d < N; ++d) {\r\n\t\t\t\tint lo = m - d;\r\n\t\t\t\tint hi = m + d;\r\n\t\t\t\treversePartOdd += A[lo] * B[hi] + A[hi] * B[lo];\r\n\t\t\t\tbest = Math.max(best, sumAB[lo] + sumAB[N] - sumAB[hi + 1] + reversePartOdd);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tlong reversePartEven = 0;\r\n\t\t\tfor (int i = m, j = m + 1; i >= 0 && j < N; --i, ++j) {\r\n\t\t\t\treversePartEven += A[i] * B[j] + A[j] * B[i];\r\n\t\t\t\tbest = Math.max(best, sumAB[i] + sumAB[N] - sumAB[j + 1] + reversePartEven);\r\n\t\t\t}\r\n\t\t}\r\n\t\tio.println(best);\r\n\t}\r\n\r\n\tpublic static class FastIO {\r\n\t\tprivate InputStream reader;\r\n\t\tprivate PrintWriter writer;\r\n\r\n\t\tprivate byte[] buf = new byte[1024];\r\n\t\tprivate int curChar;\r\n\t\tprivate int numChars;\r\n\r\n\t\tpublic FastIO(InputStream r, OutputStream w) {\r\n\t\t\treader = r;\r\n\t\t\twriter = new PrintWriter(new BufferedWriter(new OutputStreamWriter(w)));\r\n\t\t}\r\n\r\n\t\tpublic int read() {\r\n\t\t\tif (numChars == -1)\r\n\t\t\t\tthrow new InputMismatchException();\r\n\t\t\tif (curChar >= numChars) {\r\n\t\t\t\tcurChar = 0;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tnumChars = reader.read(buf);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\t}\r\n\t\t\t\tif (numChars <= 0)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn buf[curChar++];\r\n\t\t}\r\n\r\n\t\tpublic String nextLine() {\r\n\t\t\tint c = read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc = read();\r\n\t\t\tStringBuilder res = new StringBuilder();\r\n\t\t\tdo {\r\n\t\t\t\tres.appendCodePoint(c);\r\n\t\t\t\tc = read();\r\n\t\t\t} while (!isEndOfLine(c));\r\n\t\t\treturn res.toString();\r\n\t\t}\r\n\r\n\t\tpublic String nextString() {\r\n\t\t\tint c = read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc = read();\r\n\t\t\tStringBuilder res = new StringBuilder();\r\n\t\t\tdo {\r\n\t\t\t\tres.appendCodePoint(c);\r\n\t\t\t\tc = read();\r\n\t\t\t} while (!isSpaceChar(c));\r\n\t\t\treturn res.toString();\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() {\r\n\t\t\tint c = read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc = read();\r\n\t\t\tint sgn = 1;\r\n\t\t\tif (c == '-') {\r\n\t\t\t\tsgn = -1;\r\n\t\t\t\tc = read();\r\n\t\t\t}\r\n\t\t\tlong res = 0;\r\n\t\t\tdo {\r\n\t\t\t\tif (c < '0' || c > '9')\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\tres *= 10;\r\n\t\t\t\tres += c - '0';\r\n\t\t\t\tc = read();\r\n\t\t\t} while (!isSpaceChar(c));\r\n\t\t\treturn res * sgn;\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() {\r\n\t\t\tint c = read();\r\n\t\t\twhile (isSpaceChar(c))\r\n\t\t\t\tc = read();\r\n\t\t\tint sgn = 1;\r\n\t\t\tif (c == '-') {\r\n\t\t\t\tsgn = -1;\r\n\t\t\t\tc = read();\r\n\t\t\t}\r\n\t\t\tint res = 0;\r\n\t\t\tdo {\r\n\t\t\t\tif (c < '0' || c > '9')\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\tres *= 10;\r\n\t\t\t\tres += c - '0';\r\n\t\t\t\tc = read();\r\n\t\t\t} while (!isSpaceChar(c));\r\n\t\t\treturn res * sgn;\r\n\t\t}\r\n\r\n\t\t// TODO: read this byte-by-byte like the other read functions.\r\n\t\tpublic double nextDouble() {\r\n\t\t\treturn Double.parseDouble(nextString());\r\n\t\t}\r\n\r\n\t\tpublic int[] nextIntArray(int n) {\r\n\t\t\treturn nextIntArray(n, 0);\r\n\t\t}\r\n\r\n\t\tpublic int[] nextIntArray(int n, int off) {\r\n\t\t\tint[] arr = new int[n + off];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i + off] = nextInt();\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tpublic long[] nextLongArray(int n) {\r\n\t\t\treturn nextLongArray(n, 0);\r\n\t\t}\r\n\r\n\t\tpublic long[] nextLongArray(int n, int off) {\r\n\t\t\tlong[] arr = new long[n + off];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i + off] = nextLong();\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tprivate boolean isSpaceChar(int c) {\r\n\t\t\treturn c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\r\n\t\t}\r\n\r\n\t\tprivate boolean isEndOfLine(int c) {\r\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\r\n\t\t}\r\n\r\n\t\tpublic void print(Object... objects) {\r\n\t\t\tfor (int i = 0; i < objects.length; i++) {\r\n\t\t\t\tif (i != 0) {\r\n\t\t\t\t\twriter.print(' ');\r\n\t\t\t\t}\r\n\t\t\t\twriter.print(objects[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void println(Object... objects) {\r\n\t\t\tprint(objects);\r\n\t\t\twriter.println();\r\n\t\t}\r\n\r\n\t\tpublic void printArray(int[] arr) {\r\n\t\t\tfor (int i = 0; i < arr.length; i++) {\r\n\t\t\t\tif (i != 0) {\r\n\t\t\t\t\twriter.print(' ');\r\n\t\t\t\t}\r\n\t\t\t\twriter.print(arr[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void printArray(long[] arr) {\r\n\t\t\tfor (int i = 0; i < arr.length; i++) {\r\n\t\t\t\tif (i != 0) {\r\n\t\t\t\t\twriter.print(' ');\r\n\t\t\t\t}\r\n\t\t\t\twriter.print(arr[i]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic void printlnArray(int[] arr) {\r\n\t\t\tprintArray(arr);\r\n\t\t\twriter.println();\r\n\t\t}\r\n\r\n\t\tpublic void printlnArray(long[] arr) {\r\n\t\t\tprintArray(arr);\r\n\t\t\twriter.println();\r\n\t\t}\r\n\r\n\t\tpublic void printf(String format, Object... args) {\r\n\t\t\tprint(String.format(format, args));\r\n\t\t}\r\n\r\n\t\tpublic void flush() {\r\n\t\t\twriter.flush();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFastIO io = new FastIO(System.in, System.out);\r\n\t\tsolve(io);\r\n\t\tio.flush();\r\n\t}\r\n}"
}