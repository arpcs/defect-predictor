{
    "id": 191661699,
    "contestId": 1519,
    "creationTimeSeconds": 1675317007,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "Muqeeth7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 268390400,
    "source": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n#define int long long\r\n#define pb push_back\r\n#define ft first\r\n#define sd second\r\n#define MOD 1000000007\r\n\r\n/*bool prime[10000002];\r\nvector<int>primes;\r\n//vector<int>fpf(10000002);\r\nint gcd(int a,int b)\r\n{\r\n if(a%b==0) return b;\r\n else return gcd(b,a%b);\r\n}/*\r\nvoid sieve(int n)\r\n{//complexity=O(n log(log n))\r\n memset(prime,1,sizeof(prime));\r\n prime[0]=0;\r\n //fpf[0]=1;\r\n prime[1]=0;\r\n //fpf[1]=1;\r\n for(int i=0;i<=n;i++)\r\n {\r\n  fpf[i]=i;\r\n }\r\n for(int i=2;i*i<=n;i++)\r\n {\r\n  if(prime[i]==1)\r\n  {\r\n   //fpf[i]=i;\r\n   for(int j=i*i;j<=n;j+=i)\r\n   {\r\n    //if(prime[j]==1) fpf[j]=i;\r\n     prime[j]=0;\r\n   }\r\n  }\r\n }\r\n for(int i=2;i<=n;i++)\r\n {\r\n  if(prime[i]==1)\r\n  {\r\n   primes.pb(i);\r\n  }\r\n }\r\n}\r\nint power(int a,int b)//gives ans in less multiplications with mod\r\n{\r\n a=a%MOD;\r\n if(b==0) return 1;\r\n int x=power(a,b/2)%MOD;\r\n if(b%2==0) return (x*x)%MOD;\r\n else return(((x*x)%MOD)*a)%MOD;\r\n}\r\n\r\nvector<int>fact;\r\nvoid facmod(int n)//call void inside solve if needed.clear it after each test case\r\n{\r\n int x=1;\r\n fact.pb(x);//0!\r\n for(int i=1;i<=n;i++)\r\n {\r\n  x=(x*i)%MOD;\r\n  fact.pb(x);\r\n }\r\n}\r\n\r\nint mod_inv(int b,int p)//modular inverse given p is prime\r\n{\r\n b=b%p;\r\n return power(b,p-2);\r\n}\r\n\r\nint nCr(int n,int r)//if we need modular of MOD\r\n{\r\n int x=(((fact[n]*mod_inv(fact[r],MOD))%MOD)*mod_inv(fact[n-r],MOD))%MOD;\r\n return x;\r\n}*/\r\nvoid solve(int o)\r\n{\r\n int n,s=0;\r\n cin>>n;\r\n int a[n],b[n];\r\n for(int i=0;i<n;i++) cin>>a[i];\r\n for(int i=0;i<n;i++) cin>>b[i];\r\n for(int i=0;i<n;i++)\r\n {\r\n  s+=a[i]*b[i];\r\n }\r\n int c[n][n];\r\n for(int i=0;i<n;i++)\r\n {\r\n  for(int j=i;j<n;j++)\r\n  {\r\n   c[i][j]=a[i]*b[j]+a[j]*b[i]-a[i]*b[i]-a[j]*b[j];\r\n  }\r\n }\r\n int d[n][n]={0};\r\n for(int i=0;i<n;i++)\r\n {\r\n  for(int j=0;j<=i;j++)\r\n  {\r\n   if(i+j>=n) break;\r\n   if(j==0) d[i][i]=0;\r\n   else\r\n   {\r\n    d[i-j][i+j]=d[i-j+1][i+j-1]+c[i-j][i+j];\r\n   }\r\n   //cout<<d[i-j][i+j]<<\" \"<<i-j<<\" \"<<i+j<<endl;\r\n  }\r\n }\r\n for(int i=0;i<n-1;i++)\r\n {\r\n  for(int j=0;j<=i;j++)\r\n  {\r\n   if(i+j+1>=n) break;\r\n   if(j==0) d[i][i+1]=c[i][i+1];\r\n   else\r\n   {\r\n    d[i-j][i+j+1]=d[i-j+1][i+j]+c[i-j][i+j+1];\r\n   }\r\n  }\r\n }\r\n int x=0;\r\n for(int i=0;i<n;i++)\r\n {\r\n  for(int j=i;j<n;j++)\r\n  {\r\n   x=max(x,d[i][j]);\r\n  }\r\n }\r\n cout<<s+x<<endl;\r\n}\r\n\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n    int t=1;//cin>>t;\r\n   // sieve(1000001);\r\n    for(int i=1;i<=t;i++)\r\n    {\r\n     solve(i);\r\n    }\r\n    return 0;\r\n}\r\n"
}