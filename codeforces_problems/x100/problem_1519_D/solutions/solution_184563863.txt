{
    "id": 184563863,
    "contestId": 1519,
    "creationTimeSeconds": 1670671913,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "Chaitanya_Aggarwal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\nint main(){\n    long long int n;\n    cin >> n;\n    long long int *a = new long long int[n];\n    long long int *b = new long long int[n];\n    long long int sum = 0;\n    for ( long long int i = 0 ; i < n ; i++ ){\n        cin >> a[i];\n    }\n    for ( long long int i = 0 ; i < n ; i++ ){\n        cin >> b[i];\n        sum += a[i]*b[i];\n    }\n\n    long long int max_ = 0;\n    for ( long long int k = 0 ; k < n ; k++ ){\n        long long int s1 = 0;\n        long long int s2 = 0;\n        for ( long long int breadth = 0 ; breadth <= min( k , (n-1)-k ) ; breadth++ ){\n            s1 += a[k-breadth]*b[k-breadth] + a[k+breadth]*b[k+breadth];\n            s2 += a[k-breadth]*b[k+breadth] + a[k+breadth]*b[k-breadth];\n            max_ = max ( s2-s1 , max_ );\n        }\n    }\n    for ( long long int k = 1 ; k < n ; k++ ){\n            long long int s1 = 0;\n            long long int s2 = 0;\n            for ( long long int breadth = 1 ; breadth <= min( k , n-k ) ; breadth++ ){\n                s1 += a[k-breadth]*b[k-breadth] + a[k+breadth-1]*b[k+breadth-1];\n                s2 += a[k-breadth]*b[k+breadth-1] + a[k+breadth-1]*b[k-breadth];\n                max_ = max ( s2-s1 , max_ );\n            }\n            \n        }\n    cout << sum+max_ << endl;\n}"
}