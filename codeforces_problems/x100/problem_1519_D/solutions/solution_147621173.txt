{
    "id": 147621173,
    "contestId": 1519,
    "creationTimeSeconds": 1645758504,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "wab"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef vector<int> vi;\n#define pb push_back\n#define fi first\n#define se second\n#define all(x) (x).begin(), (x).end()\n#define int long long\nint n, mx, a[5005], b[5005], psa[5005];\n// if you reverse a range x, y, then you can easily calculate x-1, y+1 (addition)\n// use a psa to count other stuff in o(1);\nsigned test(int x) { // test all ranges centered at x\n    int ans, mxo, mxe, l, r;\n    // odd \"range\"\n    l = r = x;\n    mxo = ans = a[x]*b[x]; mxo += psa[l-1] + psa[n] - psa[r];\n    // cout << l << \" \" << r << \" \" << ans << \" \" << mxo << endl;\n    while (--l >= 1 && ++r <= n)    {\n        ans += a[l]*b[r] + a[r]*b[l];\n        mxo = max(mxo, ans + psa[l-1] + psa[n] - psa[r]);\n        // cout << l << \" \" << r << \" \" << ans << \" \" << mxo << endl;\n    }\n    l = r = x; ++r;\n    if (r <= n) {\n        mxe = ans = a[x+1]*b[x] + a[x]*b[x+1]; mxe += psa[l-1] + psa[n] - psa[r];\n        // cout << l << \" \" << r << \" \" << ans << \" \" << mxe << endl;\n    }\n    while (--l >= 1 && ++r <= n)    {\n        ans += a[l]*b[r] + a[r]*b[l];\n        mxe = max(mxe, ans + psa[l-1] + psa[n] - psa[r]);\n        // cout << l << \" \" << r << \" \" << ans << \" \" << mxe << endl;\n    }\n    return max(mxo, mxe);\n}\nint main()  {\n    cin >> n;\n    for (int i = 1; i <= n; i++)    cin >> a[i];\n    for (int i = 1; i <= n; i++)    cin >> b[i];\n    for (int i = 1; i <= n; i++)    psa[i] += psa[i-1] + a[i]*b[i];\n    for (int i = 1; i <= n; i++)    mx = max(mx, test(i));\n    cout << max(mx, psa[n]) << endl;\n}\n"
}