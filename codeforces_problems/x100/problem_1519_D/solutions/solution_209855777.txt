{
    "id": 209855777,
    "contestId": 1519,
    "creationTimeSeconds": 1686915975,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "_HOME_LANDER"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 499,
    "memoryConsumedBytes": 201523200,
    "source": "// all hail Infront of almighty lord krishna (jai shri krishna ji)\r\n#include<bits/stdc++.h>\r\n#ifndef  ONLINE_JUDGE\r\n#include \"debug.h\"\r\n#else\r\n#define print(...) 1;\r\n#endif\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n#define pb push_back\r\n#define int long long \r\nconst long long  mod =1e9+7; \r\n#define min_priority_queue(a)  priority_queue<int, vector<int>, greater<int> >a;\r\ntemplate<class T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;\r\ntemplate<typename T> \r\nusing ordered_multiset = tree<T, null_type,less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;\r\n\r\nint calculate(int l,int r,vector<vector<int>>&dp,vector<int>&a,vector<int>&b)\r\n{\r\n    if(l>r)\r\n    return 0;\r\n  if(l==r)\r\n  {\r\n    return dp[l][r]=a[l]*b[r];\r\n\r\n  }\r\n  if(dp[l][r]!=-1)\r\n   return dp[l][r];\r\n\r\n  return dp[l][r]=a[l]*b[r]+a[r]*b[l]+calculate(l+1,r-1,dp,a,b);\r\n\r\n}\r\nvoid solve()\r\n{\r\n  int n;\r\n  cin>>n;\r\n  vector<int>a(n),b(n);\r\n  for(int i=0;i<n;i++)\r\n  {\r\n    cin>>a[i];\r\n  }\r\n  int ans=0;\r\n  for(int i=0;i<n;i++)\r\n  {\r\n    cin>>b[i];\r\n    ans+=(a[i]*b[i]);\r\n  }\r\n  vector<int>psum(n,0);\r\n  int curr=0;\r\n  for(int i=0;i<n;i++)\r\n  {\r\n    curr+=(a[i]*b[i]);\r\n    psum[i]=curr;\r\n  }\r\n  vector<vector<int>>dp(n,vector<int>(n,-1));\r\n  for(int i=0;i<n;i++)\r\n  {\r\n    for(int j=i;j<n;j++)\r\n    {\r\n      if(dp[i][j]==-1)\r\n      {\r\n        calculate(i,j,dp,a,b);\r\n      }\r\n       int curr=0;\r\n       curr+=dp[i][j];\r\n      curr+=(psum[n-1]-psum[j]);\r\n      if(i>0)\r\n      curr+=psum[i-1];\r\n        \r\n        ans=max(ans,curr);\r\n    \r\n    }\r\n  }\r\n  cout<<ans<<\"\\n\";\r\n}\r\n\r\nsigned main()\r\n{ \r\n    ios_base::sync_with_stdio(false);\r\n     cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    cout.precision(20);\r\n    cout.setf(ios::fixed);\r\n    auto start = chrono::high_resolution_clock::now();\r\n\r\n   int t=1;\r\n   // cin>>t;\r\n  while(t--)\r\n{\r\nsolve();\r\n}\r\n    auto stop = chrono::high_resolution_clock::now();\r\n   auto duration = chrono::duration_cast<chrono::milliseconds>(stop - start);\r\n   // cout << duration.count() << \" ms\\n\";\r\n   return 0;   \r\n}\r\n"
}