{
    "id": 162420910,
    "contestId": 1519,
    "creationTimeSeconds": 1656669068,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "modernbeast02"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long int\n#define endl '\\n'\nvoid solve()\n{\n    ll n;\n    cin >> n;\n    vector<ll> a(n), b(n);\n    for (int i = 0; i < n; i++)\n    {\n        cin >> a[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n        cin >> b[i];\n    }\n    ll ans = 0;\n    for (int i = 0; i < n; i++)\n    {\n        ans += a[i] * b[i];\n    }\n    // we can solve this problem just like the palindrome one.\n    // two cases, one centre and one with no center but between\n    ll best = ans;\n    for (int center = 0; center < n; center++)\n    {\n        ll curr_sum = ans;\n        for (int left = center - 1, right = center + 1; left >= 0 && right < n; left--, right++)\n        {\n            curr_sum -= ((a[left] * b[left]) + (a[right] * b[right]));\n            curr_sum += ((a[left] * b[right]) + (a[right] * b[left]));\n            best = max(best, curr_sum);\n        }\n    }\n    for (int between = 0; between < n - 1; between++)\n    {\n        ll curr_sum = ans;\n        for (int left = between, right = between + 1; left >= 0 && right < n; left--, right++)\n        {\n            curr_sum -= ((a[left] * b[left]) + (a[right] * b[right]));\n            curr_sum += ((a[left] * b[right]) + (a[right] * b[left]));\n            best = max(best, curr_sum);\n        }\n    }\n    cout << best << endl;\n}\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    int t = 1;\n    // cin >> t;\n    while (t--)\n        solve();\n    return 0;\n}"
}