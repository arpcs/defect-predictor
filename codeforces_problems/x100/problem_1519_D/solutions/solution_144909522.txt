{
    "id": 144909522,
    "contestId": 1519,
    "creationTimeSeconds": 1643786298,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "pratyushChamola"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 1740800,
    "source": "#include<bits/stdc++.h>\r\n// #include<ext/pb_ds/assoc_container.hpp>\r\n// #include<ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace chrono;\r\n// using namespace __gnu_pbds;\r\n\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define MOD 1000000007\r\n#define MOD1 998244353\r\n#define INF 1e18\r\n#define endl \"\\n\"\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define mp make_pair\r\n#define ff first\r\n#define ss second\r\n#define PI 3.141592653589793238462\r\n#define set_bits __builtin_popcountll\r\n#define sz(x) ((int)(x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#define fo(i,a,b) for(int i=a;i<b;i++)\r\n#define dtb(n,x) bitset<n>(x).to_string()\r\n\r\n\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\r\n#else\r\n#define debug(x);\r\n#endif\r\n\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\n// typedef tree<pair<ll, ll>, null_type, less<pair<ll, ll>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key\r\n\r\nvoid _print(ll t) {cerr << t;}\r\nvoid _print(int t) {cerr << t;}\r\nvoid _print(string t) {cerr << t;}\r\nvoid _print(char t) {cerr << t;}\r\nvoid _print(lld t) {cerr << t;}\r\nvoid _print(double t) {cerr << t;}\r\nvoid _print(ull t) {cerr << t;}\r\n\r\ntemplate <class T, class V> void _print(pair <T, V> p);\r\ntemplate <class T> void _print(vector <T> v);\r\ntemplate <class T> void _print(set <T> v);\r\ntemplate <class T, class V> void _print(map <T, V> v);\r\ntemplate <class T> void _print(multiset <T> v);\r\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\r\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\n// void _print(pbds v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------*/\r\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nbool revsort(ll a, ll b) {return a > b;}\r\nvoid swap(int &x, int &y) {int temp = x; x = y; y = temp;}\r\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\nvoid precision(int a) {cout << setprecision(a) << fixed;}\r\n/*--------------------------------------------------------------------------------------------------------------------------*/\r\n\r\n\r\n\r\n#define int long long\r\n#define vl vector<int>\r\n#define vll vector<pair<int,int>>\r\n\r\n// Sieve\r\nint N = 1e6 + 7;\r\nvector<int> pr; // store all primes till N\r\n//vector<int> fcnt; // factor count of each number\r\nvector<bool> prime; // true for prime numbers\r\nvector<int> spf; // smallest prime factor\r\n \r\nvoid sieve() {\r\n    prime.assign(N, true);\r\n    spf.resize(N);\r\n//    fcnt.resize(N);\r\n \r\n    prime[1] = false;\r\n    for (int p = 2; p < N; p++) {\r\n        if (prime[p]) {\r\n            spf[p] = p;\r\n            for (int i = p + p; i <= N; i += p) {\r\n                prime[i] = false; // not prime\r\n                if (spf[i] == 0) {\r\n                    spf[i] = p; // first divisor of i\r\n                }\r\n            }\r\n        }\r\n    }\r\n \r\n    // for (int p = 2; p <= N; p++) { // storing primes\r\n    //     if (prime[p]) {\r\n    //         pr.pb(p);\r\n    //     }\r\n    // }\r\n//\r\n//    for (int i = 2; i < N; ++i) { // counting factors of i\r\n//        fcnt[i] = fcnt[i / spf[i]] + 1;\r\n//    }\r\n//\r\n//    for (int i = 1; i < N; ++i) {\r\n//        fcnt[i] += fcnt[i - 1];\r\n//    }\r\n}\r\n\r\nlong long inverse(long long i){\r\n    if(i==1) return 1;\r\n    return (MOD - ((MOD/i)*inverse(MOD%i))%MOD+MOD)%MOD;\r\n}\r\n\r\nvl fact(2e5 + 5,1);\r\n\r\nlong long lcmcal(int a, int b, int curggcd) {\r\n    int temp = (a * b) % MOD;\r\n    // ll temp2 = gcd(a,b);\r\n\r\n    // return (int)(temp / curggcd);\r\n    return temp / curggcd;\r\n}\r\n\r\nstruct DSU\r\n{\r\n    ll n;\r\n    vector<int> p;\r\n    vector<int> sz;\r\n    DSU(int N)\r\n    {\r\n        n = N;\r\n        p.assign(n + 1,-1);\r\n        sz.assign(n+1,1);\r\n        for (int i = 0;i<=n;i++)p[i] = i;\r\n    }\r\n    ll Find(int i)\r\n    {\r\n        if (p[i] == i)return i;\r\n        return p[i] = Find(p[i]);\r\n    }\r\n    void Merge(int a,int b)\r\n    {\r\n        a = Find(a),b = Find(b);\r\n        if (a != b)p[b] = a;\r\n    }\r\nint getSize(int x)\r\n    {\r\n        return sz[x] = sz[Find(x)];\r\n    }\r\n};\r\n\r\nint binPow(int a,int b)\r\n{\r\n    if (b == 0)return 1;\r\n    if (b == 1)return a;\r\n    ll ret = binPow(a,b/2);\r\n    if (b%2 == 0)return (ret * ret)%MOD;\r\n    return ((ret * ret)%MOD * a)%MOD;\r\n}\r\n\r\nint inv(int a)\r\n{\r\n    return (binPow(a,MOD - 2)%MOD + MOD)%MOD;\r\n}\r\n\r\nint binom(int a,int b)\r\n{\r\n    if (b < 0 or a < 0)return 0;\r\n    return (((fact[a] * inv(fact[b]))%MOD * inv(fact[a - b]))%MOD + MOD)%MOD;\r\n}\r\n\r\nll moduloMultiplication(int a, int b)\r\n{\r\n    int res = 0; \r\n    a %= MOD;\r\n\r\n    while (b)\r\n    {\r\n        if (b & 1)\r\n            res = (res + a) % MOD;\r\n\r\n        a = (2 * a) % MOD;\r\n\r\n        b >>= 1; // b = b / 2\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n\r\nlong long power(int base, int n, int mod)\r\n{\r\n    long long ans = 1;\r\n    while (n != 0)\r\n    {\r\n        if (n & 1)\r\n        {\r\n            ans = (ans * base) % mod;\r\n            n = n - 1;\r\n        }\r\n        else\r\n        {\r\n            base = (base * base) % mod;\r\n            n = n / 2;\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n\r\n\r\nvoid solve() {\r\n\r\n//   for (int i = 1;i<=2e5;i++)fact[i] = (i * fact[i - 1])%MOD;\r\n//   int t;\r\n//   cin >> t;\r\n//   while (t--)\r\n//   {\r\n   ll n;\r\n   cin >> n;\r\n\r\n   vector<ll> a(n),b(n);\r\n\r\n   for(ll i=0;i<n;i++)cin >> a[i];\r\n\r\n   for(ll i=0;i<n;i++)cin >> b[i];\r\n\r\n   vector<ll> preproduct(n+1,0);\r\n\r\n   for(ll i=0;i<n;i++){\r\n       preproduct[i+1] = preproduct[i] + a[i]*b[i];\r\n   } \r\n\r\n   ll ans = preproduct[n];\r\n   for(ll c=0;c<n;c++){\r\n       ll cur = a[c]*b[c];\r\n\r\n       for(ll i=c-1, j= c+1;i>=0 && j<n;i--,j++){\r\n           cur += a[i]*b[j];\r\n           cur += a[j]*b[i];\r\n\r\n           ans = max(ans, (cur + preproduct[i] + preproduct[n] - preproduct[j+1]));\r\n       }\r\n\r\n       cur = 0;\r\n\r\n       for(ll i = c,j=c+1;i>=0 && j<n;i--,j++){\r\n           cur += a[i]*b[j];\r\n           cur += a[j]*b[i];\r\n\r\n           ans = max(ans, (cur + preproduct[i] + preproduct[n] - preproduct[j+1]));\r\n       }\r\n   }\r\n\r\n   cout << ans << endl;\r\n//   }\r\n}\r\n\r\nint32_t main() {\r\n  fastio();\r\n  auto start1 = high_resolution_clock::now();\r\n  solve();\r\n  auto stop1 = high_resolution_clock::now();\r\n  auto duration = duration_cast<microseconds>(stop1 - start1);\r\n#ifndef ONLINE_JUDGE\r\n  cerr << \"Time: \" << duration . count() / 1000 << endl;\r\n#endif\r\n}\r\n\r\n/*\r\nOn getting WA:\r\n* Check if implementation is correct and NOTHING overflows.\r\n* Start thinking about counter cases for your logic as well as implementation.\r\n* Try removing redundancy (any additon you might have done for ease of \r\nimplementation or thought process) and putting asserts.\r\n* Make a generator, an unoptimized but correct soln and run it against wrong soln.\r\n* When there a few values and we have to perform certain operations (mostly in game \r\ntheory), start looking for patterns in the answer in small values\r\n\r\nIf nothing comes to mind:\r\n* Binary search over the ans\r\n* Think about more strong greedy\r\n* Think about bipartition, levels, adding/removing edges/nodes, degree \r\nin trees and graphs\r\n* Try reducing the constraints or chaning the frame of reference and \r\nthen solving (mostly useful in DP/combinatorics) \r\n*/\r\n",
    "defect_evaluation_v4": {
        "good solution": 70,
        "wrong solution": 20,
        "compilation error": 10,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 30,
        "dynamic programming": 90,
        "bit manipulation": 10,
        "greedy": 30,
        "brute force": 70,
        "graphs": 20,
        "sortings": 50,
        "search": 40,
        "trees": 10,
        "strings": 20,
        "number theory": 10,
        "combinatorics": 20,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 30,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 100,
        "self-documenting": 70,
        "complex": 50,
        "readable": 70,
        "well-named": 100,
        "efficient": 90,
        "reusable": 70,
        "documented": 100,
        "good error-handling": 50,
        "good solution": 90,
        "compilation error": 0,
        "runtime error": 0
    }
}