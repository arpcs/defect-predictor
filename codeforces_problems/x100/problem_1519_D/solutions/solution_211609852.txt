{
    "id": 211609852,
    "contestId": 1519,
    "creationTimeSeconds": 1688127570,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "LahsivK4070"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define int long long\r\nconst int MAX = 1e6 + 1;\r\nconst int MOD = 1000000007;\r\n\r\n// find_by_order()\r\n// order_of_key()\r\n// store duplicates set int to pair<int, int>\r\ntypedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag,\r\n             tree_order_statistics_node_update>\r\n    PBDS;\r\n\r\nclass DisjointSet{\r\npublic:\r\n    vector<int> rank, parent, size;\r\n\r\n    DisjointSet(int n){\r\n        rank.resize(n + 1, 0);\r\n        size.resize(n + 1, 1);\r\n        parent.resize(n + 1);\r\n        for (int i = 0; i <= n; i++){\r\n            parent[i] = i;\r\n        }\r\n    }\r\n\r\n    int findUPar(int node){\r\n        if (node == parent[node]){\r\n            return node;\r\n        }\r\n\r\n        return parent[node] = findUPar(parent[node]);\r\n    }\r\n\r\n    void unionByRank(int u, int v){\r\n        int up = findUPar(u), vp = findUPar(v);\r\n        if (up == vp){\r\n            return;\r\n        }\r\n\r\n        if (rank[up] < rank[vp]){\r\n            parent[up] = parent[vp];\r\n        }\r\n        else if (rank[vp] < rank[up]){\r\n            parent[vp] = parent[up];\r\n        }\r\n        else{\r\n            parent[v] = parent[u];\r\n            rank[u]++;\r\n        }\r\n    }\r\n\r\n    void unionBySize(int u, int v){\r\n        int up = findUPar(u), vp = findUPar(v);\r\n        if (up == vp){\r\n            return;\r\n        }\r\n\r\n        if (size[up] < size[vp]){\r\n            parent[up] = vp;\r\n            size[vp] += size[up];\r\n        }\r\n        else{\r\n            parent[vp] = up;\r\n            size[up] += size[vp];\r\n        }\r\n    }\r\n};\r\n\r\nsigned main(){\r\n\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    // freopen(\"input.txt\", \"r\", stdin);\r\n    // freopen(\"output.txt\", \"w\", stdout);\r\n    // cout.flush()\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    vector<int> a(n), b(n);\r\n\r\n    for (int i = 0; i<n; i++){\r\n        cin >> a[i];\r\n    }\r\n\r\n    for (int i = 0; i < n; i++){\r\n        cin >> b[i];\r\n    }\r\n\r\n    int ans = 0;\r\n    for (int i = 0; i < n; i++){\r\n        ans += (a[i] * b[i]);\r\n    }\r\n\r\n    int res = ans;\r\n    int temp = ans;\r\n    int i = 0, j = 0;\r\n    while(j < n-1){\r\n        if(a[j] <= a[j+1]){\r\n            while(j < n-1 && a[j] <= a[j+1] && b[j] >= b[j+1]){\r\n                j++;\r\n            }\r\n        }else if(a[j] >= a[j+1]){\r\n            while(j < n-1 && a[j] >= a[j+1] && b[j] <= b[j+1]){\r\n                j++;\r\n            }\r\n        }\r\n        \r\n        if(i != j){\r\n            // cout << i << \" \" << j << endl;\r\n            for (int k = i; k <= j; k++){\r\n                ans -= (a[k] * b[k]);\r\n                ans += (a[k] * b[j - (k - i)]);\r\n            }\r\n            res = max(res, ans);\r\n            ans = temp;\r\n            i = j;\r\n        }else{\r\n            i++;\r\n            j++;\r\n        }\r\n    }   \r\n\r\n    cout << res << endl;\r\n\r\n    return 0;\r\n} \r\n\r\n"
}