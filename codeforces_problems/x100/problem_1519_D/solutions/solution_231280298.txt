{
    "id": 231280298,
    "contestId": 1519,
    "creationTimeSeconds": 1699076137,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "kingsman007"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 102400,
    "source": "// Problem: D. Maximum Sum of Products\r\n// Contest: Codeforces - Educational Codeforces Round 108 (Rated for Div. 2)\r\n// URL: https://codeforces.com/problemset/problem/1519/D\r\n// Memory Limit: 256 MB\r\n// Time Limit: 2000 ms\r\n// \r\n// Powered by CP Editor (https://cpeditor.org)\r\n// Author: kingsman007\r\n\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n\r\n#include <bits/stdc++.h>  \r\n using namespace std;\r\n \r\n#define int long long\r\nconst long long mod = 1000000007;\r\n \r\nint32_t main(){\r\n    ios::sync_with_stdio(false);\r\n    // taking input\r\n    int n;\r\n    cin >> n;\r\n    int a[n], b[n];\r\n    for(int i = 0; i < n; i++)\tcin >> a[i];\r\n    for(int i = 0; i < n; i++)\tcin >> b[i];\r\n    // now, what we'll do is using bruteforce\r\n    // as, n = 5000, we can apply O(n ^ 2) solution, so, first precompute\r\n    // product so, as to find in O(1), then, using method like max. len. palindromic\r\n    // substring method\r\n    // firstly, computing prefix array\r\n    int pre[n + 1];\r\n    pre[0] = 0;\r\n    for(int i = 0; i < n; i++) {\r\n    \tpre[i + 1] = pre[i] + a[i] * b[i];\r\n    }\r\n    // now, main method\r\n    int ret = pre[n];\r\n    // for odd length subarray reversal\r\n    for(int i = 0; i < n; i++) {\r\n    \tint curr = a[i] * b[i];\r\n    \tint rem;\r\n    \tint l = i - 1, r = i + 1;\r\n    \twhile(l >= 0 and r < n) {\r\n    \t\tcurr += a[l] * b[r] + a[r] * b[l];\r\n    \t\trem = pre[l] + (pre[n] - pre[r + 1]);\r\n    \t\tret = max(ret, curr + rem);\r\n    \t\tl--;\r\n    \t\tr++;\r\n    \t}\r\n    }\r\n    // now, for even length subarray reversal\r\n    for(int i = 0; i < n - 1; i++) {\r\n    \tint curr = 0, rem;\r\n    \tint l = i, r = i + 1;\r\n    \twhile(l >= 0 and r < n) {\r\n    \t\tcurr += a[l] * b[r] + a[r] * b[l];\r\n    \t\trem = pre[l] + (pre[n] - pre[r + 1]);\r\n    \t\tret = max(ret, curr + rem);\r\n    \t\tl--;\r\n    \t\tr++;\r\n    \t}\r\n    }\r\n    cout << ret;\r\n    return 0;\r\n}\r\n",
    "suggested_categories": [
        "algorithm",
        "dynamic programming",
        "optimization",
        "codeforces",
        "competitive programming",
        "contest",
        "brute force",
        "prefix sum",
        "array manipulation",
        "c++",
        "performance optimization",
        "complexity analysis",
        "data structures",
        "mathematical computation",
        "memory management",
        "input/output handling",
        "programming language features",
        "time complexity",
        "code quality",
        "code optimization"
    ]
}