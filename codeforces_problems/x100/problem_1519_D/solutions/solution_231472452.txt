{
    "id": 231472452,
    "contestId": 1519,
    "creationTimeSeconds": 1699193111,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "vstiff"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Rust 2021",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 307200,
    "source": "fn readstr() -> String {\r\n    let mut s = String::new();\r\n    std::io::stdin().read_line(&mut s).unwrap();\r\n    return s.trim().to_string();\r\n}\r\n\r\nfn readints() -> Vec<i128> {\r\n    return readstr()\r\n        .split_whitespace()\r\n        .map(|x| x.parse::<i128>())\r\n        .collect::<Result<Vec<i128>, _>>()\r\n        .unwrap();\r\n}\r\n\r\nfn su(x: &i128) -> usize {\r\n    usize::try_from(*x).unwrap()\r\n}\r\n\r\nfn main() {\r\n    readstr();\r\n    let aa = readints();\r\n    let bb = readints();\r\n\r\n    let baseline = std::iter::zip(aa.iter(), bb.iter())\r\n        .map(|(a, b)| a * b)\r\n        .sum::<i128>();\r\n    let mut best = baseline;\r\n    for c in 0..aa.len() - 1 {\r\n        let mut oc = baseline;\r\n        let mut ec = baseline;\r\n        for w in 1..std::cmp::min(c, aa.len() - c) {\r\n            if c > 0 {\r\n                oc += bb[c - w] * (aa[c + w] - aa[c - w]) + bb[c + w] * (aa[c - w] - aa[c + w]);\r\n                best = std::cmp::max(best, oc);\r\n            }\r\n            ec += bb[c - w + 1] * (aa[c + w] - aa[c - w + 1])\r\n                + bb[c + w] * (aa[c - w + 1] - aa[c + w]);\r\n            best = std::cmp::max(best, ec);\r\n        }\r\n    }\r\n\r\n    std::println!(\"{:?}\", best);\r\n}\r\n"
}