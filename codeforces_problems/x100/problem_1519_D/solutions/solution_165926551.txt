{
    "id": 165926551,
    "contestId": 1519,
    "creationTimeSeconds": 1658947206,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "saptyadeep"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 216473600,
    "source": "// XXXXXX-------------------It's Me----------------XXXXXX\r\n//\r\n// Codeforces ID: saptyadeep\r\n// CodeChef ID: saptyadeep\r\n// Official Website: https://saptyadeep.netlify.app/\r\n// LinkedinProfile: www.linkedin.com/in/saptyadeep-bhattacharjee-247a58202/\r\n//\r\n// XXXXXX---------------Solution Here--------------XXXXXX\r\n\r\n#include <bits/stdc++.h>\r\n#define ll long long\r\n#define uint unsigned int\r\n#define vred(a, n) vector<int> a(n); for(int i=0;i<n;i++) cin>>a[i];\r\nusing namespace std;\r\nuint br[5001][5001];\r\nuint cr[5001][5001];\r\nll a[(ll)(2*10e5)+50LL];\r\n \r\nll intCeil(ll x, ll y) {\r\n    return x / y + (x % y > 0);\r\n}     \r\n \r\nll gcd(ll a, ll b)\r\n{\r\n    return b == 0 ? a : gcd(b, a % b);   \r\n}\r\n \r\nbool isPowerOfTwo(ll n)\r\n{\r\n   if(n==0)\r\n   return false;\r\n   return (ceil(log2(n)) == floor(log2(n)));\r\n}\r\n \r\nvector<ll> SieveOfEratosthenes(ll n)\r\n{\r\n\tvector<ll> a;\r\n    bool prime[n+1];\r\n    memset(prime, true, sizeof(prime));\r\n  \r\n    for (ll p=2; p*p<=n; p++)\r\n    {\r\n        if (prime[p] == true)\r\n        {\r\n            for (ll i=p*2; i<=n; i += p)\r\n                prime[i] = false;\r\n        }\r\n    }\r\n \r\n    for (ll p=2; p<=n; p++)\r\n       if (prime[p])\r\n          a.push_back(p);\r\n    return a;\r\n}\r\n \r\nvoid addEdge(vector<ll> adj[], ll u, ll v)\r\n{\r\n    adj[u].push_back(v);\r\n    adj[v].push_back(u);\r\n}\r\n \r\nvoid graphBFS(vector<ll> adj[], ll n, ll s)\r\n{\r\n\tqueue<ll> q;\r\n\tbool used[n]={false};\r\n\tq.push(s);\r\n\tused[s]=true;\r\n\twhile(!q.empty())\r\n\t{\r\n\t\tll v=q.front();\r\n\t\tcout<<v<<\" \";\r\n\t\tq.pop();\r\n\t\tfor(ll u: adj[v])\r\n\t\t{\r\n\t\t\tif(!used[u])\r\n\t\t\t{\r\n\t\t\t\tused[u]=true;\r\n\t\t\t\tq.push(u);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n \r\nll quadraticSolve(ll z)\r\n{\r\n\tz=sqrt(4*z-1);\r\n\tz=(z+1)/2;\r\n\treturn z;\r\n}\r\n\r\nvoid primeFactors(vector<ll>& fact,ll n)\r\n{\r\n    while (n % 2 == 0)\r\n    {\r\n        fact.push_back(2);\r\n        n = n/2;\r\n    }\r\n \r\n    for (int i = 3; i <= sqrt(n); i = i + 2)\r\n    {\r\n        while (n % i == 0)\r\n        {\r\n            fact.push_back(i);\r\n            n = n/i;\r\n        }\r\n    }\r\n \r\n    if (n > 2)\r\n        fact.push_back(n);\r\n}\r\n\r\n// subSequence(nums, 0, ans, space);\r\nvector<vector<ll>> subSequence(vector<ll>& nums, ll index, vector<vector<ll>>& ans, vector<ll>& space)\r\n{\r\n    if(index==nums.size())\r\n    {\r\n        ans.push_back(space);\r\n        return ans;\r\n    }\r\n    space.push_back(nums[index]);\r\n    subSequence(nums, index+1, ans, space);\r\n    space.pop_back();\r\n    subSequence(nums, index+1, ans, space);\r\n    return ans;   \r\n}\r\n\r\nunsigned ll onesComplement(unsigned ll n)\r\n{\r\n   // Find number of bits in the given integer\r\n   ll number_of_bits = floor(log2(n))+1;\r\n  \r\n   // XOR the given integer with poe(2, \r\n   // number_of_bits-1 and print the result \r\n   return ((1 << number_of_bits) - 1) ^ n;\r\n}\r\n\r\nll next(ll arr[], ll target, ll end)\r\n{\r\n    ll start = 0;\r\n \r\n    ll ans = -1;\r\n    while (start <= end)\r\n    {\r\n        ll mid = (start + end) / 2;  \r\n        if (arr[mid] < target)\r\n            start = mid + 1;\r\n \r\n        // Move left side.\r\n        else\r\n        {\r\n            ans = mid;\r\n            end = mid - 1;\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n\r\nll highestPowerOf2(ll n)\r\n{\r\n    return (n & (~(n - 1)));\r\n}\r\n\r\nbool cellExists(int x, int y, int n)\r\n{\r\n\tif(x<0||y<0||x>=n||y>=n)\r\n\treturn false;\r\n\telse\r\n\treturn true;\r\n}\r\n\r\nbool cellExists(int x, int n)\r\n{\r\n\tif(x<0||x>=n)\r\n\treturn false;\r\n\telse\r\n\treturn true;\r\n}\r\n\r\nvoid solve()\r\n{\r\n\tuint i,n,j,z,x,ans;\r\n\tcin>>n;\r\n\tuint a[n]={0};\r\n\tuint b[n]={0};\r\n\tuint c[n]={0};\r\n\tfor(i=0;i<n;i++)\r\n\tcin>>a[i];\r\n\tfor(i=0;i<n;i++)\r\n\tcin>>b[i];\r\n\tfor(i=0;i<n;i++)\r\n\tc[i]=a[i]*b[i];\r\n\tfor(i=1;i<n;i++)\r\n\tc[i]+=c[i-1];\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tfor(j=0;j<n;j++)\r\n\t\tbr[i][j]=b[i]*a[j];\r\n\t}\r\n\tfor(i=1;i<n;i++)\r\n\t{\r\n\t\tfor(j=n-1-i;j>=0;j--)\r\n\t\tbr[j][i]+=br[j+1][i-1];\r\n\t}\r\n\tfor(i=n-2;i>0;i--)\r\n\t{\r\n\t\tfor(j=n-i;j<n;j++)\r\n\t\tbr[i][j]+=br[i+1][j-1];\r\n\t}\r\n\t// for(i=0;i<n;i++)\r\n\t// {\r\n\t\t// for(j=0;j<n;j++)\r\n\t\t// cout<<br[i][j]<<\" \";\r\n\t\t// cout<<endl;\r\n\t// }\r\n\t// for(i=0;i<n;i++)\r\n\t// cout<<c[i]<<\" \";\r\n\tans=c[n-1];\r\n\tfor(i=0;i<n-1;i++)\r\n\t{\r\n\t\tfor(j=i+1;j<n;j++)\r\n\t\t{\r\n\t\t\tif(cellExists(i-1,n))\r\n\t\t\tz=c[i-1];\r\n\t\t\telse\r\n\t\t\tz=0;\r\n\t\t\tz+=c[n-1]-c[j];\r\n\t\t\tif(cellExists(j+1, i-1, n))\r\n\t\t\tx=br[j+1][i-1];\r\n\t\t\telse \r\n\t\t\tx=0;\r\n\t\t\t//cout<<i<<\" \"<<j<<\" \"<<x<<\" \"<<br[i][j]-x<<endl;\r\n\t\t\t//cout<<i<<\" \"<<\" \"<<j<<\" \"<<z<<endl;\r\n\t\t\tans=max(ans, z+br[i][j]-x);\r\n\t\t}\r\n\t}\r\n\tcout<<ans<<endl;\r\n}\r\n\r\n\r\nint main()\r\n{\r\n\tios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\t// ll t;\r\n\t// cin>>t;\r\n\t// while(t--)\r\n\tsolve();\r\n\treturn 0;\r\n}"
}