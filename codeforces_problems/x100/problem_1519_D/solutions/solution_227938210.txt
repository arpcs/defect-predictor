{
    "id": 227938210,
    "contestId": 1519,
    "creationTimeSeconds": 1697134440,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "BobinMM"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 102400,
    "source": "#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n\r\n    // Read the values of arrays a and b\r\n    vector<ll> a(n), b(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> a[i];\r\n    }\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> b[i];\r\n    }\r\n\r\n    // Calculate prefix sums of the products a[i] * b[i]\r\n    vector<ll> prefixSums(n + 1, 0);\r\n    for (int i = 0; i < n; ++i) {\r\n        prefixSums[i + 1] = prefixSums[i] + a[i] * b[i];\r\n    }\r\n\r\n    ll maxProduct = prefixSums[n];\r\n\r\n    // Iterate over the center of the reversed segment and its length\r\n    for (int c = 0; c < n; ++c) {\r\n        ll currentProduct = a[c] * b[c];\r\n\r\n        // Expand the segment around the center\r\n        for (int l = c - 1, r = c + 1; l >= 0 && r < n; --l, ++r) {\r\n            currentProduct += a[l] * b[r];\r\n            currentProduct += a[r] * b[l];\r\n\r\n            // Update the maximum product if necessary\r\n            maxProduct = max(maxProduct, currentProduct + prefixSums[l] + (prefixSums[n] - prefixSums[r + 1]));\r\n        }\r\n\r\n        currentProduct = 0;\r\n\r\n        // Expand the segment without considering the center element\r\n        for (int l = c, r = c + 1; l >= 0 && r < n; --l, ++r) {\r\n            currentProduct += a[l] * b[r];\r\n            currentProduct += a[r] * b[l];\r\n\r\n            // Update the maximum product if necessary\r\n            maxProduct = max(maxProduct, currentProduct + prefixSums[l] + (prefixSums[n] - prefixSums[r + 1]));\r\n        }\r\n    }\r\n\r\n    // Output the maximum product\r\n    cout << maxProduct << endl;\r\n\r\n    return 0;\r\n}\r\n"
}