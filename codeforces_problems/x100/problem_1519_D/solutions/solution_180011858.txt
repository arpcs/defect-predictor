{
    "id": 180011858,
    "contestId": 1519,
    "creationTimeSeconds": 1667849990,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "NewbiePupil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 264,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main {\r\n    static int[] parent, size, b;\r\n    static long[] arr;\r\n    static long[][][] memo;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        int n = sc.nextInt();\r\n        int[] a = sc.nextIntArray(n);\r\n        b = sc.nextIntArray(n);\r\n        arr = new long[n + 1];\r\n        for (int i = 0; i < b.length; i++) {\r\n            arr[i + 1] = a[i] * b[i];\r\n        }\r\n        for (int i = 1; i < arr.length; i++) {\r\n            arr[i] = arr[i - 1] + arr[i];\r\n        }\r\n\r\n        long ans = 0;\r\n        for (int i = 0; i < a.length; i++) {\r\n            ans = Math.max(ans, get(i, a, b));\r\n        }\r\n\r\n        pw.println(ans + arr[n]);\r\n        pw.close();\r\n    }\r\n\r\n    static long query(int l, int r) {\r\n        return arr[r] - arr[l - 1];\r\n    }\r\n\r\n    static long get(int idx, int[] a, int[] b) {\r\n        long max = 0;\r\n        int l = idx - 1;\r\n        int r = idx + 1;\r\n        long sum = a[idx] * b[idx];\r\n        while (l >= 0 && r < a.length) {\r\n            sum += 1l * a[l] * b[r] + 1l * a[r] * b[l];\r\n            max = Math.max(max, sum - query(l + 1, r + 1));\r\n            l--;\r\n            r++;\r\n        }\r\n        l = idx;\r\n        r = idx + 1;\r\n        sum = 0;\r\n        while (l >= 0 && r < a.length) {\r\n            sum += 1l * a[l] * b[r] + 1l * a[r] * b[l];\r\n            max = Math.max(max, sum - query(l + 1, r + 1));\r\n            l--;\r\n            r++;\r\n        }\r\n        return max;\r\n    }\r\n\r\n    static int find(int a) {\r\n        if (a == parent[a])\r\n            return a;\r\n        return parent[a] = find(parent[a]);\r\n    }\r\n\r\n    static void union(int a, int b) {\r\n        a = find(a);\r\n        b = find(b);\r\n        if (a == b)\r\n            return;\r\n        if (size[a] < size[b])\r\n            parent[a] = b;\r\n        else\r\n            parent[b] = a;\r\n\r\n    }\r\n\r\n    static long[] HashStr(char[] arr) {\r\n        long[] hash = new long[arr.length];\r\n        int p = 31;\r\n        int m = 1000000007;\r\n        long hashValue = 0;\r\n        long power = 1;\r\n        for (int i = 0; i < arr.length; i++) {\r\n            hashValue = (hashValue + (arr[i] - 'a' + 1) * power) % m;\r\n            power = (power * p) % m;\r\n            hash[i] = hashValue;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    static int toInt(boolean flag) {\r\n        return flag ? 1 : 0;\r\n    }\r\n\r\n    static int log2(int n) {\r\n        return (int) (Math.log(n) / Math.log(2));\r\n    }\r\n\r\n    static int[] sieve() {\r\n        int n = (int) 1e5;\r\n        int[] arr = new int[n];\r\n        for (int i = 2; i < arr.length; i++) {\r\n            for (int j = i; j < arr.length; j += i) {\r\n                if (arr[j] == 0)\r\n                    arr[j] = i;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    static void shuffle(int[] arr) {\r\n        int n = arr.length;\r\n        for (int i = 0; i < n; i++) {\r\n            int r = i + (int) (Math.random() * (n - i));\r\n            int tmp = arr[i];\r\n            arr[i] = arr[r];\r\n            arr[r] = tmp;\r\n        }\r\n    }\r\n\r\n    static void sort(int[] arr) {\r\n        shuffle(arr);\r\n        Arrays.sort(arr);\r\n    }\r\n\r\n    static long getSum(int[] arr) {\r\n        long sum = 0;\r\n        for (int i = 0; i < arr.length; i++) {\r\n            sum += arr[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static int getMin(int[] arr) {\r\n        int min = Integer.MAX_VALUE;\r\n        for (int i = 0; i < arr.length; i++) {\r\n            min = Math.min(min, arr[i]);\r\n        }\r\n        return min;\r\n    }\r\n\r\n    static int getMax(int[] arr) {\r\n        int max = Integer.MIN_VALUE;\r\n        for (int i = 0; i < arr.length; i++) {\r\n            max = Math.max(max, arr[i]);\r\n        }\r\n        return max;\r\n    }\r\n\r\n    static boolean isEqual(int[] a, int[] b) {\r\n        if (a.length != b.length)\r\n            return false;\r\n        for (int i = 0; i < b.length; i++) {\r\n            if (a[i] != b[i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static void reverse(int[] arr, int start, int end) {\r\n        while (start < end) {\r\n            int temp = arr[start];\r\n            arr[start] = arr[end];\r\n            arr[end] = temp;\r\n            start++;\r\n            end--;\r\n        }\r\n    }\r\n\r\n    static boolean isSorted(int[] arr) {\r\n        for (int i = 0; i < arr.length - 1; i++) {\r\n            if (arr[i] > arr[i + 1])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static int gcd(int x, int y) {\r\n        if (x == 0)\r\n            return y;\r\n        return gcd(y % x, x);\r\n    }\r\n\r\n    static HashMap<Integer, Integer> Hash(int[] arr) {\r\n        HashMap<Integer, Integer> map = new HashMap<>();\r\n        for (int i : arr) {\r\n            map.put(i, map.getOrDefault(i, 0) + 1);\r\n\r\n        }\r\n        return map;\r\n    }\r\n\r\n    static HashMap<Character, Integer> Hash(char[] arr) {\r\n        HashMap<Character, Integer> map = new HashMap<>();\r\n        for (char i : arr) {\r\n            map.put(i, map.getOrDefault(i, 0) + 1);\r\n\r\n        }\r\n        return map;\r\n    }\r\n\r\n    static boolean isPrime(int n) {\r\n        if (n <= 1)\r\n            return false;\r\n\r\n        for (int i = 2; i <= Math.sqrt(n); i++)\r\n            if (n % i == 0)\r\n                return false;\r\n        return true;\r\n    }\r\n\r\n    public static long combination(long n, long r) {\r\n        return factorial(n) / (factorial(n - r) * factorial(r));\r\n    }\r\n\r\n    static long factorial(Long n) {\r\n        if (n == 0)\r\n            return 1;\r\n        return (n % mod) * (factorial(n - 1) % mod) % mod;\r\n    }\r\n\r\n    static boolean isPalindrome(char[] str, int i, int j) {\r\n        while (i < j) {\r\n            if (str[i] != str[j])\r\n                return false;\r\n            i++;\r\n            j--;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static int setBit(int mask, int idx) {\r\n        return mask | (1 << idx);\r\n    }\r\n\r\n    public static boolean checkBit(int mask, int idx) {\r\n        return (mask & (1 << idx)) != 0;\r\n    }\r\n\r\n    static class Scanner {\r\n        StringTokenizer st;\r\n        BufferedReader br;\r\n\r\n        public Scanner(InputStream s) {\r\n            br = new BufferedReader(new InputStreamReader(s));\r\n        }\r\n\r\n        public Scanner(FileReader r) {\r\n            br = new BufferedReader(r);\r\n        }\r\n\r\n        public String next() throws IOException {\r\n            while (st == null || !st.hasMoreTokens())\r\n                st = new StringTokenizer(br.readLine());\r\n            return st.nextToken();\r\n        }\r\n\r\n        public int nextInt() throws IOException {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        public String nextLine() throws IOException {\r\n            return br.readLine();\r\n        }\r\n\r\n        public double nextDouble() throws IOException {\r\n            String x = next();\r\n            StringBuilder sb = new StringBuilder(\"0\");\r\n            double res = 0, f = 1;\r\n            boolean dec = false, neg = false;\r\n            int start = 0;\r\n            if (x.charAt(0) == '-') {\r\n                neg = true;\r\n                start++;\r\n            }\r\n            for (int i = start; i < x.length(); i++)\r\n                if (x.charAt(i) == '.') {\r\n                    res = Long.parseLong(sb.toString());\r\n                    sb = new StringBuilder(\"0\");\r\n                    dec = true;\r\n                } else {\r\n                    sb.append(x.charAt(i));\r\n                    if (dec)\r\n                        f *= 10;\r\n                }\r\n            res += Long.parseLong(sb.toString()) / f;\r\n            return res * (neg ? -1 : 1);\r\n        }\r\n\r\n        public long[] nextlongArray(int n) throws IOException {\r\n            long[] a = new long[n];\r\n            for (int i = 0; i < n; i++)\r\n                a[i] = nextLong();\r\n            return a;\r\n        }\r\n\r\n        public Long[] nextLongArray(int n) throws IOException {\r\n            Long[] a = new Long[n];\r\n            for (int i = 0; i < n; i++)\r\n                a[i] = nextLong();\r\n            return a;\r\n        }\r\n\r\n        public int[] nextIntArray(int n) throws IOException {\r\n            int[] a = new int[n];\r\n            for (int i = 0; i < n; i++)\r\n                a[i] = nextInt();\r\n            return a;\r\n        }\r\n\r\n        public int[] nextIntCharArray(int n) throws IOException {\r\n            int[] a = new int[n];\r\n            char[] b = sc.next().toCharArray();\r\n            for (int i = 0; i < n; i++)\r\n                a[i] = b[i] - '0';\r\n            return a;\r\n        }\r\n\r\n        public int[] NextIntArray(int n) throws IOException {\r\n            int[] arr = new int[n + 1];\r\n            for (int i = 1; i < arr.length; i++) {\r\n                arr[i] = nextInt();\r\n            }\r\n            return arr;\r\n        }\r\n\r\n        public Integer[] nextIntegerArray(int n) throws IOException {\r\n            Integer[] a = new Integer[n];\r\n            for (int i = 0; i < n; i++)\r\n                a[i] = nextInt();\r\n            return a;\r\n        }\r\n\r\n        public ArrayList<Integer>[] directedGraph(int n, int m) throws IOException {\r\n            ArrayList<Integer>[] graph = new ArrayList[n];\r\n            for (int i = 0; i < graph.length; i++) {\r\n                graph[i] = new ArrayList<>();\r\n            }\r\n            while (m-- > 0) {\r\n                int a = nextInt();\r\n                int b = nextInt();\r\n                graph[a].add(b);\r\n            }\r\n            return graph;\r\n        }\r\n\r\n        public ArrayList<Integer>[] undirectedGraph(int n, int m) throws IOException {\r\n            ArrayList<Integer>[] graph = new ArrayList[n];\r\n            for (int i = 0; i < graph.length; i++) {\r\n                graph[i] = new ArrayList<>();\r\n            }\r\n            while (m-- > 0) {\r\n                int a = nextInt();\r\n                int b = nextInt();\r\n                graph[a].add(b);\r\n                graph[b].add(a);\r\n            }\r\n            return graph;\r\n        }\r\n\r\n        public boolean ready() throws IOException {\r\n            return br.ready();\r\n        }\r\n\r\n    }\r\n\r\n    static class pair implements Comparable<pair> {\r\n        long x;\r\n        long y;\r\n\r\n        public pair(long x, long y) {\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n\r\n        public String toString() {\r\n            return x + \" \" + y;\r\n        }\r\n\r\n        public boolean equals(Object o) {\r\n            if (o instanceof pair) {\r\n                pair p = (pair) o;\r\n                return p.x == x && p.y == y;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        public int hashCode() {\r\n            return new Long(x).hashCode() * 31 + new Long(y).hashCode();\r\n        }\r\n\r\n        public int compareTo(pair other) {\r\n            if (this.x == other.x) {\r\n                return Long.compare(this.y, other.y);\r\n            }\r\n            return Long.compare(this.x, other.x);\r\n        }\r\n    }\r\n\r\n    public static void print(int[] arr) {\r\n        for (int i = 0; i < arr.length; i++) {\r\n            pw.print(arr[i] + \" \");\r\n        }\r\n        pw.println();\r\n    }\r\n\r\n    public static void print(int[] arr, String separator) {\r\n        for (int i = 0; i < arr.length; i++) {\r\n            pw.print(arr[i] + separator);\r\n        }\r\n        pw.println();\r\n\r\n    }\r\n\r\n    public static void print(long[] arr) {\r\n        for (int i = 0; i < arr.length; i++) {\r\n            pw.print(arr[i] + \" \");\r\n        }\r\n        pw.println();\r\n    }\r\n\r\n    public static void print(ArrayList arr) {\r\n        for (int i = 0; i < arr.size(); i++) {\r\n            pw.print(arr.get(i) + \" \");\r\n        }\r\n    }\r\n\r\n    public static void print(int[][] arr) {\r\n        for (int[] i : arr) {\r\n            print(i);\r\n        }\r\n    }\r\n\r\n    public static void print(boolean[] arr) {\r\n        for (int i = 0; i < arr.length; i++) {\r\n            pw.print(arr[i] + \" \");\r\n        }\r\n        pw.println();\r\n    }\r\n\r\n    public static void print(char[] arr) {\r\n        for (int i = 0; i < arr.length; i++) {\r\n            pw.print(arr[i] + \" \");\r\n        }\r\n        pw.println();\r\n    }\r\n\r\n    static int inf = Integer.MAX_VALUE;\r\n    static long mod = 1000000007;\r\n    static Random rn = new Random();\r\n    static Scanner sc = new Scanner(System.in);\r\n    static PrintWriter pw = new PrintWriter(System.out);\r\n\r\n}"
}