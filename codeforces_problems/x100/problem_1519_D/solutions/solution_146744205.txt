{
    "id": 146744205,
    "contestId": 1519,
    "creationTimeSeconds": 1645106957,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "krishxD"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 100659200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n#define mod 1000000007\r\n#define pb push_back\r\n#define all(x) (x).begin(),(x).end()\r\n\r\n\r\nll powerMod(ll base,ll pow){\r\n    ll  ans=1;\r\n\twhile(pow>0){\r\n\t   if(pow%2!=0)\r\n\t        ans=(ans*base)%mod;\r\n\t        pow/=2;\r\n\t        base=(base*base)%mod;\r\n\t}\r\n\treturn ans;\r\n}\r\nll  inverse_mod(ll  a,ll b){\r\n\treturn (a*powerMod(b,mod-2))%mod;\r\n}\r\n\r\nll fac(ll a){\r\n    if(a == 0 || a==1) return 1;\r\n    ll fact[a+1];\r\n    fact[0] = 1;\r\n    fact[1] = 1;\r\n    for(int i=2;i<=a;i++)\r\n        fact[i] = (fact[i - 1]%mod * i%mod) % mod;\r\n    return fact[a];\r\n}\r\nbool comp(pair<ll,ll>&a,pair<ll,ll>&b)\r\n{\r\n    if(a.first!=b.first)\r\n        return a.first>b.first;\r\n    return a.second>b.second;\r\n}\r\n\r\nbool isPrime (ll n){\r\n    for(int i=2;i*i <= n; i++){\r\n        if(n%i==0) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvector<int> primes;\r\n\r\nvoid sieve(){\r\n    int n = 1e6;\r\n    bool prime[n+1];\r\n    memset(prime, true, sizeof(prime));\r\n  \r\n    for (int p=2; p*p<=n; p++)  {\r\n        if (prime[p] == true){\r\n            for (int i=p*2; i<=n; i += p)\r\n                prime[i] = false;\r\n        }\r\n    }\r\n    for (int p=2; p<=n; p++)\r\n       if (prime[p])\r\n          primes.pb(p);\r\n}\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    int tt=1;\r\n    // cin>>tt;\r\n    \r\n    while(tt--){\r\n        ll n;\r\n        cin>>n;\r\n\t\tvector<int> A(n + 1), B(n + 1), pref(n + 2, 0), suf(n + 2, 0);\r\n        for (int i = 1; i <= n; i++) cin >> A[i];\r\n        for (int i = 1; i <= n; i++) cin >> B[i];\r\n    \r\n        for (int i = 1, j = n; i <= n; i++, j--) {\r\n            pref[i] = pref[i - 1] + A[i] * B[i];\r\n            suf[j] = suf[j + 1] + A[j] * B[j];\r\n        }\r\n    \r\n        vector<vector<int>> dp(n + 1, vector<int>(n + 1, 0));\r\n        for (int i = 1; i <= n; i++) dp[i][i] = A[i] * B[i];\r\n    \r\n        for (int i = 1; i <= n; i++) {\r\n            for (int j = 1; j < i; j++) {\r\n                dp[i][j] = dp[i - 1][j + 1] + A[i] * B[j] + A[j] * B[i];\r\n            }\r\n        }\r\n    \r\n        int ans = 0;\r\n        for (int i = 1; i <= n; i++)\r\n            for (int j = 1; j <= i; j++)\r\n                ans = max(ans, dp[i][j] + pref[j - 1] + suf[i + 1]);\r\n    \r\n        cout << ans;\r\n    }\r\n    return 0;\r\n}",
    "defect_evaluation_v4": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 80,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 0,
        "sortings": 0,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 10,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 50,
        "self-documenting": 0,
        "complex": 0,
        "readable": 20,
        "well-named": 20,
        "efficient": 60,
        "reusable": 30,
        "documented": 10,
        "good error-handling": 0,
        "good solution": 40,
        "compilation error": 0,
        "runtime error": 0
    }
}