{
    "id": 226687078,
    "contestId": 1519,
    "creationTimeSeconds": 1696484232,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "FU_ALPHA"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define read(type) readInt<type>() // Fast read\r\n#define ll long long\r\n#define nl \"\\n\"\r\n\r\nvoid solve()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    ll arr[n + 1];\r\n    ll brr[n + 1];\r\n    for(int i =1;i<=n;i++)\r\n    {\r\n        cin>>arr[i];\r\n    }\r\n    for(int i =1;i<=n;i++)\r\n    {\r\n        cin>>brr[i];\r\n    }\r\n    arr[0] = 0, brr[0] = 0;\r\n    ll hash[n + 1];\r\n    memset(hash, 0, sizeof(hash));\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        hash[i] = (hash[i - 1] + (arr[i] * brr[i]));\r\n    }\r\n    ll ans = hash[n];\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        int l = i, r = i;\r\n        ll curr = arr[l] * brr[r];\r\n        l--, r++;\r\n        while (l > 0 && r <= n)\r\n        { /* code */\r\n\r\n            curr += ((arr[l] * brr[r]) + (arr[r] * brr[l]));\r\n\r\n            ans = max(ans, curr + (hash[n] - hash[r] + hash[l - 1]));\r\n            l--, r++;\r\n        }\r\n    }\r\n    //\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        int l = i, r = i + 1;\r\n        ll curr = 0;\r\n\r\n        while (l > 0 && r <= n)\r\n        {\r\n\r\n            curr += ((arr[l] * brr[r]) + (arr[r] * brr[l]));\r\n\r\n            ans = max(ans, curr + (hash[n] - hash[r] + hash[l - 1]));\r\n            l--, r++;\r\n        }\r\n    }\r\n    cout << ans << nl;\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    solve();\r\n\r\n    return 0;\r\n}\r\n// check constraints\r\n// at first try a brute force way to solve\r\n// then optimization\r\n\r\n//  if its array:\r\n//  1. try greedy\r\n//  2. if it is a result of subproblems try dp\r\n//  3. if it is showing for  a range minimum or maximum\r\n//    3.1 tttttffffff\r\n//    else\r\n//    3.2 ffffftttttt\r\n//    try binary search"
}