{
    "id": 212076536,
    "contestId": 1519,
    "creationTimeSeconds": 1688472556,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "pokhriyalsachin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "/*\r\n \r\n****************************************************************************************\r\n*                                Jai Bajrangbali                                       *\r\n*                             codechef-smartsachin                                   *\r\n*                             cf-pokhriyalsachin                                    *\r\n*                         email-:[email\u00a0protected]                            *\r\n****************************************************************************************                                                                         \r\n \r\n \r\n \r\n*/\r\n \r\n \r\n \r\n \r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n \r\n \r\n#define all(x) x.begin(),x.end()\r\n// const ll mod = 1e9+7 ;//998244353;\r\nconst long long N=2e5+5;\r\n//  typedef long long long long;\r\n\r\n// long long fact(long long n)\r\n// {\r\n//       if(n==0)\r\n//       return 1;\r\n//     long long res = 1;\r\n//     for (long long i = 2; i <= n; i++)\r\n//         res = res * i;\r\n//     return res;\r\n// }\r\n// long long nCr(long long n, long long r)\r\n// {\r\n//     return fact(n) / (fact(r) * fact(n - r));\r\n// }\r\n \r\n// // Returns factorial of n\r\n\r\n// double distance(long long x1,long long y1,long long x2,long long y2) {\r\n//     double dx = x1 - x2;\r\n//     double dy = y1 - y2;\r\n//     return sqrt(dx * dx + dy * dy);\r\n// }\r\n// pair<long long, long long> findEatenCookie(vector<vector<char>>& grid) {\r\n//     long long H = grid.size();\r\n//     long long W = grid[0].size();\r\n    \r\n//     // Count the number of cookies in each row and column\r\n//     vector<long long> rowCount(H, 0);\r\n//     vector<long long> colCount(W, 0);\r\n    \r\n//     for (long long i = 0; i < H; i++) {\r\n//         for (long long j = 0; j < W; j++) {\r\n//             if (grid[i][j] == '#') {\r\n//                 rowCount[i]++;\r\n//                 colCount[j]++;\r\n//             }\r\n//         }\r\n//     }\r\n    \r\n//     // Find the row and column indices of the eaten cookie\r\n//     long long eatenRow = -1;\r\n//     long long eatenCol = -1;\r\n    \r\n//     for (long long i = 0; i < H-1; i++) {\r\n//         if (rowCount[i]>0&&rowCount[i+1]>0&&rowCount[i]<rowCount[i+1]) {\r\n//             eatenRow = i;\r\n//             break;\r\n//         }\r\n//          if (rowCount[i]>0&&rowCount[i+1]>0&&rowCount[i]>rowCount[i+1]) {\r\n//             eatenRow = i+1;\r\n//             break;\r\n//         }\r\n//     }\r\n    \r\n//     for (long long j = 0; j < W-1; j++) {\r\n//         if (colCount[j]>0&&colCount[j+1]>0&&colCount[j]<colCount[j+1]) {\r\n//             eatenCol = j;\r\n//             break;\r\n//         }\r\n//          if (colCount[j]>0&&colCount[j+1]>0&&colCount[j]>colCount[j+1]) {\r\n//             eatenCol = j+1;\r\n//             break;\r\n//         }\r\n//     }\r\n    \r\n//     return make_pair(eatenRow, eatenCol);\r\n// }\r\n// long long getsum(string s){\r\n//     map<char,long long>mpp;\r\n//       mpp['A']=1;\r\n//       mpp['B']=10;\r\n//       mpp['C']=100;\r\n//       mpp['D']=1000;\r\n//       mpp['E']=10000;\r\n//     long long n=s.size();\r\n//     long long ans=0;\r\n//     char maxc=' ';\r\n//       for(long long i=s.size()-1;i>=0;i--){\r\n//         if(maxc==' '){\r\n//             maxc=s[i];\r\n//         }else{\r\n//             if(mpp[s[i]]>mpp[maxc]){\r\n//                 maxc=s[i];\r\n//             }\r\n//         }\r\n//         if(mpp[s[i]]<mpp[maxc]){\r\n//             ans-=mpp[s[i]];\r\n//         }else{\r\n//             ans+=mpp[s[i]];\r\n//         }\r\n//     }\r\n//     return ans;\r\n// }\r\nlong long dfs(long long node,vector<vector<long long>>&adj,vector<long long>&vis,vector<long long>&cnt){\r\n    vis[node]=1;\r\n    long long c=1;\r\n    long long cnt1=0;\r\n    for(auto it:adj[node]){\r\n        if(vis[it]==0){\r\n           cnt1+=dfs(it,adj,vis,cnt);\r\n        }\r\n    }\r\n    if(cnt1==0) return cnt[node]=1;\r\n    return cnt[node]=cnt1; \r\n}\r\nbool isPalindrome(const std::string& str) {\r\n    int i = 0;\r\n    int j = str.length() - 1;\r\n\r\n    while (i < j) {\r\n        if (str[i] != str[j])\r\n            return false;\r\n        i++;\r\n        j--;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nbool hasPalindromeConcatenation(const std::vector<std::string>& strings) {\r\n    int n = strings.size();\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n            if (i != j) {\r\n                std::string concatenated = strings[i] + strings[j];\r\n                if (isPalindrome(concatenated))\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nbool checkCutOut(vector<string>& cutOut,vector<string>& X, int startX, int startY) {\r\n    int HX = X.size();\r\n    int WX = X[0].size();\r\n\r\n    for (int i = 0; i < HX; i++) {\r\n        for (int j = 0; j < WX; j++) {\r\n            if (cutOut[startX + i][startY + j] != X[i][j]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nbool canAchieveGoal(vector<string>& A,  vector<string>& B,vector<string>& X) {\r\n    int HA = A.size();\r\n    int WA = A[0].size();\r\n    int HB = B.size();\r\n    int WB = B[0].size();\r\n    int HX = X.size();\r\n    int WX = X[0].size();\r\n\r\n    vector<string> C(1000, string(1000, '.'));\r\n\r\n    // Try all possible positions to paste sheets A and B onto sheet C\r\n    for (int startX = 0; startX <= HB; startX++) {\r\n        for (int startY = 0; startY <= WB; startY++) {\r\n            for (int i = 0; i < HA; i++) {\r\n                // cout<<\"eye\";\r\n                for (int j = 0; j < WA; j++) {\r\n                    C[startX + i][startY + j] = A[i][j];\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i < HB; i++) {\r\n                for (int j = 0; j < WB; j++) {\r\n                    C[startX + HA + i][startY + WA + j] = B[i][j];\r\n                }\r\n            }\r\n\r\n            // Check if the cut-out area matches sheet X\r\n            if (HX <= HA + HB && WX <= WA + WB) {\r\n                vector<string> cutOut(HX, string(WX, '.'));\r\n                for (int i = 0; i < HX; i++) {\r\n                    for (int j = 0; j < WX; j++) {\r\n                        cutOut[i][j] = C[startX + i][startY + j];\r\n                    }\r\n                }\r\n// return false;\r\n                if (checkCutOut(cutOut, X, 0, 0)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n        \r\n// int32_t main(){\r\n//     // long long t;\r\n//     long long t=1;\r\n//     // cin>>t;\r\n//     while(t--){\r\n//         int HA, WA;\r\n//         cin >> HA >> WA;\r\n//         vector<string> A(HA);\r\n//         for (int i = 0; i < HA; i++) {\r\n//             cin >> A[i];\r\n//         }\r\n\r\n//         int HB, WB;\r\n//         cin >> HB >> WB;\r\n//         vector<string> B(HB);\r\n//         for (int i = 0; i < HB; i++) {\r\n//             cin >> B[i];\r\n//         }\r\n\r\n//         int HX, WX;\r\n//         cin >> HX >> WX;\r\n//         vector<string> X(HX);\r\n//         for (int i = 0; i < HX; i++) {\r\n//             cin >> X[i];\r\n//         }\r\n\r\n//         if (canAchieveGoal(A, B, X)) {\r\n//             cout << \"Yes\" << endl;\r\n//         }\r\n//          else {\r\n//             cout << \"No\" << endl;\r\n//         }\r\n        \r\n\r\n//     }    \r\n    \r\n// }\r\nconst int MOD = 998244353;\r\n#define int long long\r\nint f(int i,int m,int n,vector<int>dp){\r\n    if(i==n){\r\n        return 1;\r\n    }\r\n    \r\n}\r\nint f(int i,vector<int>&a,vector<int>&dp){\r\n    if(i==a.size()) return 0;\r\n    if(dp[i]!=-1) return dp[i];\r\n    int cnt=1;\r\n    int ans=f(i+1,a,dp);\r\n    for(int j=i+1;j<a.size();j++){\r\n        cnt++;\r\n        if(a[j]==a[i]){\r\n            ans=max(ans,cnt+f(j+1,a,dp));\r\n        }\r\n        \r\n    }\r\n\r\n    return dp[i]=ans;\r\n}\r\nvoid solve(){\r\n    // int ans=0;\r\n    int n;\r\n    cin>>n;\r\n    vector<long long>a(n);\r\n    vector<long long>b(n);\r\n   \r\n vector<long long>pre(n+1,0);\r\n    for(int i = 0; i < n; ++ i)\r\n\t\t{\r\n\t\t\tcin >> a[i]; \r\n\t\t\t\r\n\t\t}\r\n    for(int i = 0; i < n; ++ i)\r\n\t\t{\r\n\t\t\tcin >> b[i]; \r\n\t\t\t\r\n\t\t}\r\n        // pre\r\n    for(int i = 0; i < n; ++ i)\r\n\t\t{\r\n\t\t\tpre[i+1]=pre[i]+a[i]*b[i];\r\n\t\t\t\r\n\t\t} \r\n        int ans=0;\r\n    for(int i=0;i<n;i++){\r\n       int crr=a[i]*b[i];\r\n        for(int l=i-1,r=i+1;l>=0&&r<n;l--,r++){\r\n            crr+=a[l]*b[r];\r\n            crr+=a[r]*b[l];\r\n            ans=max(ans,crr+pre[l]+pre[n]-pre[r+1]);\r\n        }\r\n        crr=0;\r\n        for(int l=i,r=i+1;l>=0&&r<n;l--,r++){\r\n            crr+=a[l]*b[r];\r\n            crr+=a[r]*b[l];\r\n            ans=max(ans,crr+pre[l]+pre[n]-pre[r+1]);\r\n        }\r\n    }\r\n    cout<<ans<<endl;\r\n           \r\n        \r\n    \r\n \r\n}\r\nint32_t main(){\r\n    int t=1;\r\n    // cin>>t;\r\n    while(t--){\r\n       solve();\r\n    }\r\n\r\n}"
}