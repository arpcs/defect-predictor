{
    "id": 231472709,
    "contestId": 1519,
    "creationTimeSeconds": 1699193231,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Java 17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 716800,
    "source": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.*;\npublic class Vjudge implements Runnable{\n\n    //FOR PRIME NUMBERS     TIME COMPLEXITY : N * log(log(N))\n    public static void PrimeNumber(int n){\n        boolean [] arr = new boolean [n+1];\n        for (int i = 2; i <= n; i++) {\n            if(arr[i]){\n            } else {\n                int st = 2 * i;\n                while (st <= n){\n                    arr[st] = true;\n                    st += i;\n                }\n            }\n        }\n    }\n\n    //FOR  FACTORS OF THE NUMBER        TIME COMPLEXITY : O(sqrt(N))\n    public static void Factors(int n){\n        ArrayList<Integer> factors = new ArrayList<>();\n        for (int i = 1; i <= Math.sqrt(n); i++) {\n            if(n % i == 0){\n                factors.add(i);\n                if((n / i) != i) {\n                    factors.add(n/i);\n                }\n            }\n        }\n    }\n\n    //GCD OF TWO NUMBERS\n    public static int gcd(int a, int b){\n        if(a == 0){\n            return b;\n        }\n\n        return gcd(b % a, a);\n    }\n\n    //LCM OF TWO NUMBERS\n    public static int LCM(int a, int b){\n        return (a * b) / gcd(a, b);\n    }\n\n    //Odd or Even\n    public static boolean OddEven(int n){\n        return (n & 1) == 1;\n    }\n\n    //    ith Bit of Binary Number\n    public static int ithBit(int n){\n        return n & (1 << n);\n    }\n\n    @Override\n    public void run() {\n\n    }\n\n    //    FOR TAKING FASTER INPUTS\n    static class FastReader {\n        BufferedReader br;\n        StringTokenizer st;\n\n        public FastReader()\n        {\n            br = new BufferedReader(\n                    new InputStreamReader(System.in));\n        }\n\n        String next()\n        {\n            while (st == null || !st.hasMoreElements()) {\n                try {\n                    st = new StringTokenizer(br.readLine());\n                }\n                catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            return st.nextToken();\n        }\n\n        int nextInt() { return Integer.parseInt(next()); }\n\n        long nextLong() { return Long.parseLong(next()); }\n\n        double nextDouble()\n        {\n            return Double.parseDouble(next());\n        }\n\n        String nextLine()\n        {\n            String str = \"\";\n            try {\n                if(st.hasMoreTokens()){\n                    str = st.nextToken(\"\\n\");\n                }\n                else{\n                    str = br.readLine();\n                }\n            }\n            catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n    }\n\n    //    Gives PRIME DIVISORS\n    public static void PrimeDivisors(int n, ArrayList<Integer> primes){\n        for(int i=2; i <= n; i++){\n            while (n % i == 0){\n                primes.add(i);\n                n /= i;\n            }\n        }\n    }\n\n    public static long nPr (int n, int r){\n        if (r>n) return 0;\n        long p =1;\n        long i=n-r+1;\n        while (i<=n) p*= i++;\n        return p;\n    }\n\n    public static class Pair implements Comparable<Pair>{\n        int idx;\n        long diff;\n        int hashCode;\n\n        public Pair(int i, long d){\n            this.idx = i;\n            this.diff = d;\n            this.hashCode = Objects.hash(this.idx, this.diff);\n        }\n        @Override\n        public int compareTo(Pair o) {\n            if(this.diff < o.diff){\n                return -1;\n            } else if(this.diff > o.diff){\n                return 1;\n            }\n\n            return Integer.compare(this.idx, o.idx);\n        }\n\n        public int getHashCode(){\n            return this.hashCode;\n        }\n    }\n\n    static long addOn = 0L;\n\n    public static void SolveOdd(int idx, long [] prefix, long [] a, long [] b){\n        long tempSum = a[idx] * b[idx];\n\n        int s = idx-1, e = idx + 1;\n\n        while (s >= 0 && e <= a.length-1){\n            tempSum += a[e] * b[s];\n            tempSum += a[s] * b[e];\n            s--;\n            e++;\n            long origSum = prefix[e-1];\n            if(s + 1 != 0){\n                origSum -= prefix[s];\n            }\n            addOn = Math.max(addOn, tempSum - origSum);\n        }\n        long origSum = prefix[e-1];\n        if(s + 1 != 0){\n            origSum -= prefix[s];\n        }\n        addOn = Math.max(addOn, tempSum - origSum);\n    }\n\n    public static void SolveEven(int idx, int idx2,long [] prefix, long [] a, long [] b){\n        long tempSum = a[idx] * b[idx2];\n        tempSum += a[idx2] * b[idx];\n\n        int s = idx-1, e = idx2 + 1;\n\n        while (s >= 0 && e <= a.length-1){\n            tempSum += a[e] * b[s];\n            tempSum += a[s] * b[e];\n            s--;\n            e++;\n            long origSum = prefix[e-1];\n            if(s + 1 != 0){\n                origSum -= prefix[s];\n            }\n            addOn = Math.max(addOn, tempSum - origSum);\n        }\n\n        long origSum = prefix[e-1];\n        if(s + 1 != 0){\n            origSum -= prefix[s];\n        }\n\n\n        addOn = Math.max(addOn, tempSum - origSum);\n    }\n    public static void main(String args[]){\n        FastReader fr = new FastReader();\n        PrintWriter out = new PrintWriter(System.out);\n        int n = fr.nextInt();\n\n        long [] a = new long[n];\n        long [] b = new long[n];\n\n        for (int i = 0; i < n; i++) {\n            a[i] = fr.nextLong();\n        }\n        long Sum = 0L;\n        long prefix [] = new long[n];\n        for (int i = 0; i < n; i++) {\n            b[i] = fr.nextLong();\n            Sum += a[i] * b[i];\n            prefix[i] = Sum;\n        }\n\n        for (int i = 0; i < n; i++) {\n            SolveOdd(i, prefix, a, b);\n            if(i != n-1) {\n                SolveEven(i, i+1, prefix, a, b);\n            }\n        }\n        Sum += addOn;\n\n        out.println(Sum);\n        out.flush();\n    }\n}\n\t   \t \t\t   \t\t\t\t \t\t\t\t \t  \t\t\t   \t"
}