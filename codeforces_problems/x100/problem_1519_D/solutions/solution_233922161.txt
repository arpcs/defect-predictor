{
    "id": 233922161,
    "contestId": 1519,
    "creationTimeSeconds": 1700746226,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "Sig0001"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 201216000,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    int n;\n    cin >> n;\n\n    vector<int> a(n), b(n);\n    for (auto &x: a) {\n        cin >> x;\n    }\n    for (auto &x: b) {\n        cin >> x;\n    }\n\n    vector<ll> prods(n), pref(n + 1);\n    for (int i = 0; i < n; ++i) {\n        prods[i] = 1LL * a[i] * b[i];\n        pref[i + 1] = prods[i] + pref[i];\n    }\n\n    auto get = [&](int l, int r) {\n        if (l > r) return 0LL;\n        return pref[r + 1] - pref[l];\n    };\n\n    vector dp(n, vector(n, 0LL));\n    // Reverse from [l, r] is same as reverse from [l+1, r-1] and then reverse\n\n    // d = 0  =>  dp[i][i]\n    for (int i = 0; i < n; ++i) {\n        dp[i][i] = prods[i];\n    }\n    for (int i = 0; i + 1 < n; ++i) {\n        dp[i][i+1] = 1LL * a[i] * b[i+1] + 1LL * a[i+1] * b[i];\n    }\n\n    for (int d = 2; d < n; ++d) {\n        for (int i = 0; i + d < n; ++i) {\n            dp[i][i+d] = dp[i+1][i+d-1] + 1LL * a[i] * b[i+d] + 1LL * a[i+d] * b[i];\n        }\n    }\n\n    ll ans = get(0, n-1);\n    for (int i = 0; i < n; ++i) {\n        for (int j = i; j < n; ++j) {\n            ans = max(ans, get(0, i-1) + dp[i][j] + get(j+1, n-1));\n        }\n    }\n\n    cout << ans;\n\n    return 0;\n}\n"
}