{
    "id": 161534726,
    "contestId": 1519,
    "creationTimeSeconds": 1655972270,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "sky"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 1123,
    "memoryConsumedBytes": 262144000,
    "source": "fun main() {\n    var n = readln().toInt()\n    val a = readln().split(\" \").map { it.toLong() }\n    val b = readln().split(\" \").map { it.toLong() }\n    var sum = LongArray(n) {0}\n    for (i in 0 until n) {\n        sum[i] += a[i] * b[i]\n        if (i > 0) {\n            sum[i] += sum[i - 1]\n        }\n    }\n    val dp = Array(n){ LongArray(n){ -1 } }\n    fun go (i: Int, j: Int): Long  {\n        if (i == j) {\n            return a[i] * b[i]\n        }\n        if (i + 1 == j) {\n            return a[i] * b[j] + a[j] * b[i]\n        }\n        if (dp[i][j] == -1L) {\n            dp[i][j] = a[i] * b[j] + a[j] * b[i] + go(i + 1, j - 1)\n        }\n        return dp[i][j]\n    }\n    var ret = sum.last()\n    fun getSum(i: Int): Long {\n        if (i < 0 || i >= n) {\n            return 0\n        }\n        return sum[i]\n    }\n    fun getSumRange(i: Int, j: Int): Long {\n        return getSum(j) - getSum(i - 1)\n    }\n//    println(sum.joinToString(\" \"))\n    for (i in 0 until n) {\n        for (j in ( i + 1) until n) {\n            val current = getSumRange(0,i - 1) + go(i, j) + getSumRange(j + 1, n - 1)\n            if (current > ret) {\n                ret = current\n//                println(\"$i $j $ret=${getSum(i - 1)} + ${go(i, j)} + ${getSum(j + 1)}\")\n            }\n        }\n    }\n    println(ret)\n}\n// 2 3 2 1 3\n// 1 3 2 4 2\n//\n// 1 (3 2 4) 2 - > 1 (4 2 3) 2\n// 1 (3 2 4 2) - > 1 (2 4 2 3)\n// (1 3 2 4 2) - > (2 4 2 3 1)\n// 1 (3 2 4) 2 - > 1 (4 2 3) 2"
}