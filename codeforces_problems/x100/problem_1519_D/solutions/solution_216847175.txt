{
    "id": 216847175,
    "contestId": 1519,
    "creationTimeSeconds": 1690979643,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "D",
        "name": "Maximum Sum of Products",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "dp",
            "implementation",
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "abhinav4279"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\n#define all(x) x.begin(), x.end()\n\nint n;\nvector<ll> a, b;\n\nconst int N = 5005;\n// ll dp[N][N][2];\n\nll rec(int i, int j, bool rev) {\n  if (i > j)\n    return 0;\n\n  // ll &res = dp[i][j][rev];\n  ll res = 0;\n  if (res != -1)\n    return res;\n\n  if (rev) {\n    res = a[j] * b[i] + rec(i + 1, j - 1, rev);\n    if (i != j)\n      res += (a[i] * b[j]);\n  }\n\n  else {\n    ll here = a[i] * b[i] + max(rec(i + 1, j, 0), rec(i + 1, j, 1));\n    here = max(here, a[j] * b[j] + max(rec(i, j - 1, 0), rec(i, j - 1, 1)));\n    res = max(res, here);\n  }\n\n  return res;\n}\n\nint main() {\n  ios::sync_with_stdio(0);\n  cin.tie(0);\n\n  cin >> n;\n\n  a.resize(n);\n  b.resize(n);\n\n  // memset(dp, -1, sizeof(dp));\n  for (auto& i : a) cin >> i;\n  for (auto& i : b) cin >> i;\n\n  ll dp[n][3][2];\n  memset(dp, 0, sizeof(dp));\n\n  for (int len = 1; len <= n; len++) {\n    for (int i = 0; i < n; i++) {\n      for (int rev = 0; rev < 2; rev++) {\n        int j = i + len - 1;\n\n        ll& res = dp[i][2][rev];\n\n        if (i == j) {\n          res = a[i]*b[i];\n          continue;\n        }\n\n        if (rev) {\n          res = a[j] * b[i] + dp[i + 1][0][rev];\n          if (i != j)\n            res += (a[i] * b[j]);\n        }\n\n        else {\n          ll here = a[i] * b[i] + max(dp[i + 1][1][0], dp[i + 1][1][1]);\n          here = max(here, a[j] * b[j] + max(dp[i][1][0], dp[i][1][1]));\n          res = max(res, here);\n        }\n      }\n    }\n\n    for(int i = 0; i < n; i++) {\n      for(int j = 0; j < 2; j++) {\n        for(int k = 0; k < 2; k++) {\n          dp[i][j][k] = dp[i][j + 1][k];\n        }\n      }\n    }\n  }\n\n  cout << max(dp[0][2][0], dp[0][2][1]);\n}\n\n// int main() {\n//    vector<array<ll, 2>> dp2(n), dp1(n), dp0(n);\n\n//   // len 1\n//   for(int i = 0; i < n; i++) {\n//     dp2[i][0] = dp2[i][1] = a[i]*b[i];\n//   }\n\n//   // len 2\n//   for(int i = 0; i < n; i++) {\n//     dp1[i][0] = dp2[i][0];\n//     dp1[i][1] = dp2[i][1];\n\n//     ll here = a[i]*b[i];\n//     if(i + 1 < n)\n//       here +=a[i + 1]*b[i + 1];\n//     dp1[i][0] = max(dp1[i][0], here);\n\n//     here = 0;\n//     if(i + 1 < n)\n//       here +=(a[i]*b[i + 1] + a[i + 1]*b[i]);\n//     dp1[i][1] = max(dp1[i][1], here);\n//   }\n\n//   for(int len = 3; len <= n; len++) {\n//     for(int i = 0; i < n; i++) {\n//       dp0[i][0] = dp1[i][0];\n//       dp0[i][1] = dp1[i][1];\n\n//       int j = i + len - 1;\n//       if(j < n) {\n//         dp0[i][0] = max(dp0[i][0], a[i]*b[i] + max(dp1[i + 1][0], dp1[i + 1][1]));\n//         dp1[i][1] = max({dp[i][1], })\n//       }\n//     }\n//   }\n\n//   // cout << max(rec(0, n - 1, 0), rec(0, n - 1, 1));\n// }"
}