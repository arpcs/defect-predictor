{
    "id": 138109106,
    "contestId": 5,
    "creationTimeSeconds": 1638716607,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "A",
        "name": "Chat Servers Outgoing Traffic",
        "type": "PROGRAMMING",
        "rating": 1000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "Hildegunst"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "Haskell",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import           Data.List.Split (splitOn)\nimport           Data.Set        (Set, delete, empty, insert, size)\n\nsolution :: String -> String\nsolution = show . go empty . lines\n    where\n        go :: Set String -> [String] -> Int\n        go _ []              = 0\n        go s (('+':name):xs) = go (insert name s) xs\n        go s (('-':name):xs) = go (delete name s) xs\n        go s (x:xs) =\n            let n = length (last (splitOn \":\" x)) in\n                (n*size s) + go s xs\n\nmain :: IO ()\nmain = interact solution\n"
}