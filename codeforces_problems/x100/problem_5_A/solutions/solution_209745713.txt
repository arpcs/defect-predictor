{
    "id": 209745713,
    "contestId": 5,
    "creationTimeSeconds": 1686821967,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "A",
        "name": "Chat Servers Outgoing Traffic",
        "type": "PROGRAMMING",
        "rating": 1000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "Ranaessam03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#define FIO ios_base::sync_with_stdio(0); cin.tie(0);\r\n#define ll long long\r\n#define fr(n)  for(int i = 0 ; i < n ; i++)\r\n#define fr2(n)  for(int j = 0 ; j < n ; j++)\r\nusing namespace std;\r\n//map<pair<int, int>, bool>mp\r\n\r\n\r\n\r\nbool SieveOfEratosthenes(int n, bool isPrime[])\r\n{\r\n    // Initialize all entries of boolean array as true. A\r\n    // value in isPrime[i] will finally be false if i is Not\r\n    // a prime, else true bool isPrime[n+1];\r\n    isPrime[0] = isPrime[1] = false;\r\n    for (int i = 2; i <= n; i++)\r\n        isPrime[i] = true;\r\n\r\n    for (int p = 2; p * p <= n; p++) {\r\n        // If isPrime[p] is not changed, then it is a prime\r\n        if (isPrime[p] == true) {\r\n            // Update all multiples of p\r\n            for (int i = p * p; i <= n; i += p)\r\n                isPrime[i] = false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid getDiv(ll num, vector<ll>&v){\r\n\r\n    for(ll i = 1 ; i <= sqrt(num); i++){\r\n        if(num%i == 0){\r\n            v.push_back(i);\r\n            if(num/i!= i){\r\n                v.push_back(num/i);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nbool is_prime(ll n)\r\n{\r\n    for(ll i=2;i*i<=n;i++)if(n%i==0){return 0;break;} return 1;\r\n}\r\n\r\nint countFreq(string pat, string txt)\r\n{\r\n    int M = pat.length();\r\n    int N = txt.length();\r\n    int res = 0;\r\n\r\n    /* A loop to slide pat[] one by one */\r\n    for (int i = 0; i <= N - M; i++) {\r\n        /* For current index i, check for\r\n           pattern match */\r\n        int j;\r\n        for (j = 0; j < M; j++)\r\n            if (txt[i + j] != pat[j])\r\n                break;\r\n\r\n        // if pat[0...M-1] = txt[i, i+1, ...i+M-1]\r\n        if (j == M) {\r\n            res++;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n\r\nvector<int>nums;\r\n\r\nvoid toBinary(unsigned ll n)\r\n{\r\n    if (n / 2 != 0) {\r\n        toBinary(n / 2);\r\n    }\r\n\r\n    nums.push_back( n % 2);\r\n}\r\n\r\nbool isValid(string s ){\r\n    stack <char>st;\r\n    fr(s.size()){\r\n        if(s[i] == '('){\r\n            st.push('(');\r\n        }\r\n        else{\r\n            if(st.empty()){\r\n                return 0;\r\n            }\r\n            else{\r\n                st.pop();\r\n            }\r\n        }\r\n    }\r\n    if(st.empty()){\r\n        return true;\r\n    }\r\n    else{\r\n        return false;\r\n    }\r\n}\r\nvoid solve(){\r\n  string str;\r\n  cin >> str;\r\n  int mx = 0, cnt=0;\r\n  stack<int>st;\r\n  string s, temp;\r\n  fr(str.size()){\r\n      if(str[i] == '('){\r\n          st.push(str[i]);\r\n          s+= '(';\r\n      }\r\n      else{\r\n          if(st.empty()){\r\n              mx = max(cnt, mx);\r\n              temp = cnt >= mx ? s   : temp;\r\n              s = \"\";\r\n              cnt =0;\r\n          }\r\n          else{\r\n              cnt++;\r\n              s+= ')';\r\n              st.pop();\r\n          }\r\n      }\r\n  }\r\n    temp = cnt >= mx ? s   : temp;\r\n    mx = max(cnt, mx);\r\n\r\n  if(mx==0){\r\n      cout << 0 << ' ' << 1;\r\n  }\r\n  else{\r\n      int ans = 0;\r\n\r\n      for(int i = 0 ; i <= str.size()-mx*2; i++){\r\n          string y =str.substr(i, mx*2);\r\n\r\n          if(isValid(y)) {\r\n              ans ++;\r\n          }\r\n      }\r\n      cout << mx *2 << ' ' << ans;\r\n\r\n  }\r\n\r\n}\r\n\r\nint main(){\r\n    int T = 1;\r\n//    cin>>T;\r\n    while(T--) {\r\n        solve();\r\n    }\r\n}\r\n\r\n\r\n"
}