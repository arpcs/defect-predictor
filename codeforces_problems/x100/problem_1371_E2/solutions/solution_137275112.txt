{
    "id": 137275112,
    "contestId": 1371,
    "creationTimeSeconds": 1638125164,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "toniskrijelj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 25907200,
    "source": "#include <bits/stdc++.h>\r\n#include <iostream>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double ld;\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\ntypedef tree<ll,null_type,less_equal<ll>,rb_tree_tag,tree_order_statistics_node_update> order_set;\r\n\r\nconst int mxN = 5e5+5;\r\nconst int mod = 1e9+7;\r\nconst int mxlogN = 20;\r\nconst int mxK = 10;\r\n\r\nint a[mxN], b[mxN];\r\norder_set os;\r\nint lessequal(int x)\r\n{\r\n    return os.order_of_key(x+1);\r\n}\r\nvector<int> where[mxN];\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    int n, p; cin >> n >> p;\r\n    int mx = 0;\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        int x; cin >> x; os.insert(x);\r\n        mx = max(mx, x);\r\n    }\r\n    for(int i = max(1, mx-n+1); i <= mx-1+n-1; i++)\r\n    {\r\n        where[((i-lessequal(i))%p+p)%p].push_back(i);\r\n    }\r\n    vector<int> ans;\r\n    for(int x = max(1, mx-n+1); x < mx; x++)\r\n    {\r\n        int rem = x%p;\r\n        auto it = lower_bound(where[rem].begin(), where[rem].end(), x);\r\n        if(it==where[rem].end()||*it>x+n-1) ans.push_back(x);\r\n    }\r\n    cout << ans.size() << \"\\n\";\r\n    for(int i : ans) cout << i << \" \";\r\n    cout << \"\\n\";\r\n}\r\n"
}