{
    "id": 158684890,
    "contestId": 1371,
    "creationTimeSeconds": 1653729972,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "Kritzan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n\r\nint n, p;\r\nint num[100001];\r\n\r\nbool okup(int x) {\r\n  int point = 1;\r\n  if (x < num[point]) {\r\n    return false;\r\n  }\r\n  \r\n  for(int i = 1; i <= n; i++) {\r\n    while(point + 1 <= n && num[point + 1] <= x) {\r\n      point++;\r\n    }\r\n    \r\n    if (point - i + 1 >= p) {\r\n      return false;\r\n    }\r\n    \r\n    x++;\r\n  }\r\n  return true;\r\n}\r\n\r\nbool okbot(int x) {\r\n  int point = 1;\r\n  if (x < num[point]) {\r\n    return false;\r\n  }\r\n  \r\n  for(int i = 1; i <= n; i++) {\r\n    while(point + 1 <= n && num[point + 1] <= x) {\r\n      point++;\r\n    }\r\n    \r\n    if (point - i + 1 <= 0) {\r\n      return false;\r\n    }\r\n    \r\n    x++;\r\n  }\r\n  return true;\r\n}\r\n\r\nint main() {\r\n  cin >> n >> p;\r\n  for(int i = 1; i <= n; i++) {\r\n    cin >> num[i];\r\n  }\r\n  \r\n  sort(num + 1, num + 1 + n);\r\n  \r\n  int l = 1, r = 1e9, up = 0;\r\n  while(l <= r) {\r\n    int mid = (l + r) / 2;\r\n    if (okup(mid)) {\r\n      l = mid + 1;\r\n      up = mid;\r\n    }\r\n    else {\r\n      r = mid - 1;\r\n    }\r\n  }\r\n  //cout << up << endl;\r\n  l = 1;\r\n  r = 1e9;\r\n  int bot = 0;\r\n  while(l <= r) {\r\n    int mid = (l + r) / 2;\r\n    if (okbot(mid)){\r\n      r = mid - 1;\r\n      bot = mid;\r\n    }\r\n    else{\r\n      l = mid + 1;\r\n    }\r\n  }\r\n  \r\n  //cout << bot << endl;\r\n  \r\n  if (bot == 0 || up == 0) {\r\n    cout << 0 << endl;\r\n    return 0;\r\n  }\r\n  \r\n  cout << up << \" \" << bot << endl;\r\n  \r\n  int ans = up - bot + 1;\r\n  \r\n  if (ans <= 0) {\r\n    cout << 0 << endl;\r\n    return 0;\r\n  }\r\n  \r\n  cout << ans << endl;\r\n  \r\n  for(int i = bot; i <= up; i++) {\r\n    cout << i << \" \";\r\n  }\r\n  cout << endl;\r\n  \r\n}\r\n"
}