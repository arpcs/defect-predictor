{
    "id": 151292231,
    "contestId": 1371,
    "creationTimeSeconds": 1648525273,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "Tdyx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "C# 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 102400,
    "source": "\ufeffusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\n\r\nnamespace CodeForces\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var p = Int32.Parse(Console.ReadLine().Split(' ')[1]);\r\n            var nums = Console.ReadLine().Split(' ').Select(item => Int32.Parse(item)).ToArray();\r\n            var res = GetGoodNum(nums,p);\r\n            Console.WriteLine(res.Length);\r\n            Console.WriteLine(string.Join(' ', res));\r\n        }\r\n\r\n        static int[] GetGoodNum(int[] nums, int p)\r\n        {\r\n            var numMap = new Dictionary<int,int>();\r\n            foreach(var num in nums)\r\n            {\r\n                if(numMap.ContainsKey(num))\r\n                {\r\n                    numMap[num]++;\r\n                }\r\n                else\r\n                {\r\n                    numMap[num]=1;\r\n                }\r\n            }\r\n            var sortedUniqueNums = numMap.Keys.ToArray();\r\n            Array.Sort(sortedUniqueNums);\r\n            var m = sortedUniqueNums.Length;\r\n            var n = nums.Length;\r\n            var cntArr = new int[m+1];\r\n            for(var i = 0;i<m;i++)\r\n            {\r\n                cntArr[i+1] = cntArr[i] + numMap[sortedUniqueNums[i]];\r\n            }\r\n            var s = 0;\r\n            for(var i = 0;i<m;i++)\r\n            {\r\n                if(sortedUniqueNums[i] - cntArr[i]  > s)\r\n                {\r\n                    s = sortedUniqueNums[i] - cntArr[i];\r\n                }\r\n            }\r\n            var t = sortedUniqueNums[m-1];\r\n            var v = cntArr[m-1];\r\n            var index = 0;\r\n            var index1 = m-1;\r\n            while(index < n)\r\n            {\r\n                if(v < p)\r\n                {\r\n                    index++;\r\n                    v--;\r\n                    if(index1+1< m && sortedUniqueNums[index1+1]  == t+index)\r\n                    {\r\n                        index1++;\r\n                        v+=sortedUniqueNums[index1];\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    t--;\r\n                    if(index1>=0 && t+index < sortedUniqueNums[index1])\r\n                    {\r\n                        v-=sortedUniqueNums[index1];\r\n                        index1--;\r\n                    }\r\n                }\r\n            }\r\n            if(t <= s)\r\n            {\r\n                return new int[0];\r\n            }\r\n            var res = new int[t-s];\r\n            for(var i = s;i<t;i++)\r\n            {\r\n                res[i-s]=i;\r\n            }\r\n            return res;\r\n        }\r\n        \r\n        \r\n    }\r\n}\r\n"
}