{
    "id": 223303592,
    "contestId": 1371,
    "creationTimeSeconds": 1694670511,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "BoaHancock"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 921600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nclass fastIO {\r\nprivate:\r\n    char ibuf[50007], *p1 = ibuf, *p2 = ibuf, obuf[50007], *p3 = obuf, sta[50];\r\n    bool file_end = false;\r\n    char get() {\r\n        return p1 == p2 && (p2 = (p1 = ibuf) + fread(ibuf, 1, 50007, stdin), p1 == p2) ? (file_end = true), char(EOF): *p1++;\r\n    }\r\n    void put(const char x) {\r\n        p3 - obuf < 50007 ? *p3 ++ = x : (fwrite(obuf, p3 - obuf, 1, stdout), p3 = obuf, *p3++ = x);\r\n    }\r\npublic:\r\n    explicit operator bool() { return !file_end; }\r\n    size_t flush() {\r\n        size_t f = fwrite(obuf, p3 - obuf, 1, stdout);\r\n        p3 = obuf;\r\n        *p3 = 0;\r\n        return f;\r\n    }\r\n    fastIO &operator>>(char &t) {\r\n        for (t = get(); !isgraph(t); t = get());\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<is_same<any, char>::value, any>::type tpval() {\r\n        char t;\r\n        for (t = get(); !isgraph(t); t = get());\r\n        return t;\r\n    }\r\n    fastIO &operator>>(char *t) {\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())*t = c, t++;\r\n        *t = 0;\r\n        return *this;\r\n    }\r\n    fastIO &operator>>(string &t) {\r\n        t.clear();\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())t += c;\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<is_same<any, string>::value, any>::type tpval() {\r\n        string t;\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())t += c;\r\n        return t;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_signed<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __int128_t>::value, fastIO>::type &operator>>(any &t) {\r\n        t = 0;\r\n        bool y = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get())if (c == 45)y = true;\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        if (y == 1)t = -t;\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_signed<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __int128_t>::value, any>::type tpval() {\r\n        any t = 0;\r\n        bool y = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get())if (c == 45)y = true;\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        if (y == 1)t = -t;\r\n        return t;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_unsigned<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __uint128_t>::value, fastIO>::type &operator>>(any &t) {\r\n        t = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get());\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_unsigned<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __uint128_t>::value, any>::type tpval() {\r\n        any t = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get());\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        return t;\r\n    }\r\n    template<typename any1, typename any2>\r\n    fastIO &operator>>(pair<any1, any2> &t) { return *this >> t.first >> t.second; }\r\n    template<typename any1, typename any2>\r\n    pair<any1, any2> tpval() { return pair<any1, any2>(tpval<any1>(), tpval<any2>()); }\r\n    template<typename any>\r\n    fastIO &read(any &t) { return *this >> t; }\r\n    fastIO &read(char *t) {\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())*t = c, t++;\r\n        *t = 0;\r\n        return *this;\r\n    }\r\n    template<typename any, typename...args>\r\n    fastIO &read(any &t1, args &...t2) { return (*this >> t1).read(t2...); }\r\n    fastIO &operator<<(const char t) {\r\n        put(t);\r\n        return *this;\r\n    }\r\n    fastIO &operator<<(const char *t) {\r\n        for (; *t; t++)put(*t);\r\n        return *this;\r\n    }\r\n    fastIO &operator<<(const string &t) {\r\n        for (const char it: t)put(it);\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_signed<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __int128_t>::value, fastIO>::type &operator<<(any t) {\r\n        if (!t) {\r\n            put(48);\r\n            return *this;\r\n        }\r\n        int len = 0;\r\n        if (t < 0)t = -t, put(45);\r\n        while (t)sta[len++] = char(t % 10 + 48), t /= 10;\r\n        while (len--)put(sta[len]);\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_unsigned<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __uint128_t>::value, fastIO>::type &operator<<(any t) {\r\n        if (!t) {\r\n            put(48);\r\n            return *this;\r\n        }\r\n        int len = 0;\r\n        while (t)sta[len++] = char(t % 10 + 48), t /= 10;\r\n        while (len--)put(sta[len]);\r\n        return *this;\r\n    }\r\n    template<typename any1, typename any2>\r\n    fastIO &operator<<(const pair<any1, any2> &t) { return *this << t.first << ' ' << t.second; }\r\n    template<typename any>\r\n    fastIO &write(const any &t) { return *this << t; }\r\n    template<typename any, typename...args>\r\n    fastIO &write(const any &t1, const args &...t2) { return (*this << t1).write(t2...); }\r\n\r\n    ~fastIO() { fwrite(obuf, p3 - obuf, 1, stdout); }\r\n}FastIO;\r\n#define cin FastIO\r\n#define cout FastIO\r\nconst int N = 3e5 + 5;\r\nmap<int,int> mp;\r\nbool check(int mid)\r\n{\r\n\r\n}\r\nvoid solve() {\r\n    int n, p;\r\n    cin >> n >> p;\r\n    vector<int> v(n + 1);\r\n    for(int i = 1; i <= n; ++ i) {\r\n        cin >> v[i];\r\n    }\r\n    sort(v.begin() + 1, v.begin() + n + 1);\r\n    int low = -1, maxN = 1e18;\r\n    for(int i = 1; i <= n; ++ i) {\r\n        low = max(low, v[i] - i + 1);\r\n        if(i + p - 1 <= n) {\r\n            maxN = min(maxN, v[i + p - 1] - i);\r\n        }\r\n    }\r\n    cout << max(0ll, maxN - low + 1) << '\\n';\r\n    for(int i = low; i <= maxN; ++ i) {\r\n        cout << i << ' ';\r\n    }\r\n    cout << '\\n';\r\n}\r\nint32_t main() {\r\n#ifdef ONLINE_JUDGE\r\n#else\r\n    freopen(\"FuDiWeiU.in\", \"r\", stdin);\r\n    freopen(\"FuDiWeiU.out\", \"w\", stdout);\r\n#endif\r\n    int T = 1;\r\n    //cin >> T;\r\n    while(T --) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}