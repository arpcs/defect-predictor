{
    "id": 134395614,
    "contestId": 1371,
    "creationTimeSeconds": 1636113986,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "Igorfardoc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 17510400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef vector<int> vi;\r\ntypedef vector<vector<int>> vvi;\r\n\r\nbool cmp(const pair<int, int>& a, const pair<int, int>& b) {\r\n    if(a.first < b.first) {\r\n        return true;\r\n    }\r\n    if(a.first > b.first) {\r\n        return false;\r\n    }\r\n    return a.second > b.second;\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    #ifdef _FILE\r\n        freopen(\"input.txt\", \"r\", stdin);\r\n        freopen(\"output.txt\", \"w\", stdout);\r\n    #endif\r\n    int n, p;\r\n    cin >> n >> p;\r\n    vi a(n);\r\n    for(int i = 0; i < n; i++) {\r\n        cin >> a[i];\r\n    }\r\n    sort(a.begin(), a.end());\r\n    if(a[0] == a[n - 1]) {\r\n        cout << \"0\\n0\";\r\n        return 0;\r\n    }\r\n    vector<vector<pair<int, int>>> ost(p);\r\n    vector<set<pair<int, int>>> ost1(p);\r\n    int xmax = a[n - 1] - 1;\r\n    int r1 = xmax;\r\n    int l1 = 0;\r\n    while(r1 - l1 > 1) {\r\n        int mid = (l1 + r1) / 2;\r\n        int now = 0;\r\n        bool ok = false;\r\n        for(int i = 0; i < n; i++) {\r\n            while(now < n && a[now] <= i + mid) {\r\n                ++now;\r\n            }\r\n            if(now - i <= 0) {\r\n                ok = true;\r\n                l1 = mid;\r\n                break;\r\n            }\r\n        }\r\n        if(!ok) {\r\n            r1 = mid;\r\n        }\r\n    }\r\n    int xmin = r1;\r\n    int now = 0;\r\n    for(int sum = xmin; sum < n + xmax; sum++) {\r\n        while(now < n && a[now] <= sum) {\r\n            ++now;\r\n        }\r\n        int iost = now % p;\r\n        int xost = (sum % p - iost + p) % p;\r\n        int maxi = min(n - 1, sum - 1);\r\n        if(maxi % p > iost) {\r\n            maxi -= maxi % p - iost;\r\n        } else {\r\n            maxi -= maxi % p;\r\n            --maxi;\r\n            if(maxi > 0) {\r\n                maxi -= maxi % p - iost;\r\n            }\r\n        }\r\n        int mini = iost;\r\n        if(maxi >= mini) {\r\n            ost[xost].push_back({sum - maxi, sum - mini});\r\n        }\r\n    }\r\n    for(int i = 0; i < p; i++) {\r\n        sort(ost[i].begin(), ost[i].end(), cmp);\r\n        if(ost[i].empty()) {\r\n            continue;\r\n        }\r\n        int l = ost[i][0].first;\r\n        int r = ost[i][0].second;\r\n        for(int j = 1; j < ost[i].size(); j++) {\r\n            if(ost[i][j].first > r) {\r\n                ost1[i].insert({l, r});\r\n                l = ost[i][j].first;\r\n                r = ost[i][j].second;\r\n            } else {\r\n                r = max(r, ost[i][j].second);\r\n            }\r\n        }\r\n        ost1[i].insert({l, r});\r\n    }\r\n\r\n    vi ans;\r\n    for(int x = xmin; x <= xmax; x++) {\r\n        auto it = ost1[x % p].upper_bound({x + 1, -100});\r\n        if(it == ost1[x % p].begin() || ((*(--it)).second < x)) {\r\n            ans.push_back(x);\r\n        }\r\n    }\r\n    cout << ans.size() << '\\n';\r\n    for(auto& el : ans) {\r\n        cout << el << ' ';\r\n    }\r\n}"
}