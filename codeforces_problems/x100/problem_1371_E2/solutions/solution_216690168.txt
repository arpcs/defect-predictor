{
    "id": 216690168,
    "contestId": 1371,
    "creationTimeSeconds": 1690883708,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "wizardleen"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "Java 17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 22937600,
    "source": "import java.io.*;\r\nimport java.util.*;\r\nimport java.util.function.Function;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class _1371E2 {\r\n\r\n    public static void main(String[] args) {\r\n        FastScanner scanner = new FastScanner(System.in);\r\n        PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out, 8 * 1024 * 1024));\r\n        int n = scanner.nextInt(), p = scanner.nextInt();\r\n        int[] a = scanner.nextArray(n);\r\n        var ans = solve(a, p);\r\n        out.println(ans.size());\r\n        out.println(ans.stream().map(i -> i.toString()).collect(Collectors.joining(\" \")));\r\n        out.flush();\r\n    }\r\n\r\n    static List<Integer> solve(int[] a, int p) {\r\n        int n = a.length;\r\n        Arrays.sort(a);\r\n        int l = Integer.MIN_VALUE;\r\n        for (int i = 0; i < n; i++) {\r\n            l = Math.max(l, a[i] - i);\r\n        }\r\n        int h = a[p - 1];\r\n        if (l >= h) return List.of();\r\n        Map<Integer, Integer> r = new HashMap<>();\r\n        int j = 0;\r\n        while (a[j] < l) j++;\r\n        for (int i = j; i < n; i++) {\r\n            r.compute((i + 1 - a[i] + l) % p, (k, v) -> v == null ? 1 : v + 1);\r\n        }\r\n        List<Integer> ans = new ArrayList<>();\r\n        if (!r.containsKey(0)) ans.add(l);\r\n        for (int x = l + 1; x < h; x++) {\r\n            while (x >= a[j]) {\r\n                r.compute((j + 1 - a[j] + l) % p, (k, v) -> v == 1 ? null : v - 1);\r\n                j++;\r\n            }\r\n            if (!r.containsKey((p - (x - l) % p) % p)) {\r\n                ans.add(x);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    private static String indicesToString(int[] indices) {\r\n        return Arrays.stream(indices).mapToObj(i -> Integer.toString(i + 1)).collect(Collectors.joining(\" \"));\r\n    }\r\n\r\n    private static String arrayToString(int[] a) {\r\n        return Arrays.stream(a).mapToObj(Integer::toString).collect(Collectors.joining(\" \"));\r\n    }\r\n\r\n    private static <T> String arrayToString(T[] a, Function<T, String> mapper) {\r\n        return Arrays.stream(a).map(mapper).collect(Collectors.joining(\" \"));\r\n    }\r\n\r\n    private static class FastScanner {\r\n        private final BufferedReader in;\r\n        private StringTokenizer st;\r\n\r\n        public FastScanner(InputStream stream) {\r\n            in = new BufferedReader(new InputStreamReader(stream));\r\n        }\r\n\r\n        public String next() {\r\n            while (st == null || !st.hasMoreTokens()) {\r\n                try {\r\n                    st = new StringTokenizer(in.readLine());\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        public int[] nextArray(int n) {\r\n            int[] a = new int[n];\r\n            for (int i = 0; i < n; i++) a[i] = nextInt();\r\n            return a;\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"
}