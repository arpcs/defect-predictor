{
    "id": 127698469,
    "contestId": 1371,
    "creationTimeSeconds": 1630591170,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "paimon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 8601600,
    "source": "// https://codeforces.com/problemset/problem/1371/E2\n\n#include <algorithm>\n#include <iostream>\n#include <set>\n#include <vector>\n\nvoid erase_one(int item, std::multiset<int>& multiset) {\n    auto it = multiset.find(item);\n    multiset.erase(it);\n}\n\nstd::vector<int> solve(int prime, std::vector<int>& vector) {\n    std::sort(vector.begin(), vector.end());\n    auto get_mod = [&] (int x) {\n        const auto count = std::upper_bound(vector.begin(), vector.end(), x) - vector.begin();\n        const int rem = (x - count) % prime;\n        return (rem < 0) ? rem + prime : rem;\n    };\n    std::vector<int> result;\n    std::multiset<int> mod_window;\n    const int min = std::max<int>(1, vector.back() - vector.size());\n    for (int first = min, last = min; first <= vector.back(); ++first) {\n        for (; last < first + vector.size(); ++last) {\n            mod_window.insert(get_mod(last));\n        }\n        if (mod_window.count(first % prime) == 0) {\n            result.push_back(first);\n        }\n        erase_one(get_mod(first), mod_window);\n    }\n    return result;\n}\n\nint main() {\n    std::ios::sync_with_stdio(false);\n\n    int size, prime;\n    std::cin >> size >> prime;\n    std::vector<int> vector(size);\n    for (auto& x: vector) {\n        std::cin >> x;\n    }\n\n    const auto result = solve(prime, vector);\n    std::cout << result.size() << '\\n';\n    for (auto x: result) {\n        std::cout << x << ' ';\n    }\n    std::cout << '\\n';\n\n    return 0;\n}"
}