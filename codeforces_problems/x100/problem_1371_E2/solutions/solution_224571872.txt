{
    "id": 224571872,
    "contestId": 1371,
    "creationTimeSeconds": 1695366827,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "raresmihai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 1638400,
    "source": "#include <iostream>\r\n#include <deque>\r\n#include <algorithm>\r\n\r\n#define MAXN 100000\r\n#define INF 1000000000\r\nusing namespace std;\r\n\r\nint v[MAXN];\r\ndeque <int> q;\r\nint reminder[MAXN];\r\nint nullReminder;\r\n\r\nbool isGood(int n, int startVal) {\r\n  int nrGood, i, auxPos;\r\n\r\n  nrGood = 0;\r\n  auxPos = 0;\r\n  for ( i = 0; i < n; i++ ) {\r\n    while ( auxPos < n && v[auxPos] <= startVal ) {\r\n      auxPos++;\r\n      nrGood++;\r\n    }\r\n    startVal++;\r\n    if ( nrGood <= 0 ) {\r\n      return false;\r\n    }\r\n    nrGood--;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nint findFirstGood(int n) {\r\n  int st, dr, mij;\r\n\r\n  st = v[0] - 1;\r\n  dr = INF;\r\n  while ( dr - st > 1 ) {\r\n    mij = (dr + st) / 2;\r\n    if ( isGood(n, mij) ) {\r\n      dr = mij;\r\n    } else {\r\n      st = mij;\r\n    }\r\n  }\r\n\r\n  return dr;\r\n}\r\n\r\nint ans[MAXN];\r\nint ansSize;\r\n\r\nint main() {\r\n  int n, p, i, fPos, nrGood, aux, auxPos;\r\n\r\n  scanf(\"%d%d\", &n, &p);\r\n\r\n  for ( i = 0; i < n; i++ ) {\r\n    scanf(\"%d\", &v[i]);\r\n  }\r\n\r\n  sort(v, v + n);\r\n\r\n  fPos = findFirstGood(n);\r\n  aux = fPos;\r\n\r\n  nrGood = 0;\r\n  auxPos = 0;\r\n  for ( i = 0; i < n; i++ ) {\r\n    while ( auxPos < n && v[auxPos] <= aux ) {\r\n      auxPos++;\r\n      nrGood++;\r\n    }\r\n\r\n    q.push_back(nrGood);\r\n    aux++;\r\n    reminder[nrGood % p]++;\r\n    nrGood--;\r\n  }\r\n\r\n  auxPos = 0;\r\n  ansSize = 0;\r\n  nullReminder = 0;\r\n  for ( i = 0; i < n; i++ ) {\r\n    while ( auxPos < n  && v[auxPos] <= fPos + i ) {\r\n      auxPos++;\r\n    }\r\n\r\n    if ( auxPos % p && !reminder[nullReminder] ) {\r\n      ans[ansSize] = fPos + i;\r\n      ansSize++;\r\n    }\r\n    reminder[q.front()]--;\r\n    reminder[(nullReminder + 1) % p]++;\r\n    q.pop_front();\r\n    nullReminder = (nullReminder + p - 1) % p;\r\n  }\r\n\r\n  printf(\"%d\\n\", ansSize);\r\n\r\n  for ( i = 0; i < ansSize; i++ ) {\r\n    printf(\"%d \", ans[i]);\r\n  }\r\n  printf(\"\\n\");\r\n\r\n  return 0;\r\n}\r\n"
}