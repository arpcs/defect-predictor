{
    "id": 146681297,
    "contestId": 1371,
    "creationTimeSeconds": 1645060357,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "Acfboy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nnamespace Qiaoqia { \r\nconstexpr int N = 10'0005;\r\nint n, p, a[N];\r\nbool check(int x, int lim) {\r\n    int p = 1;\r\n    for (int i = 1; i <= n; i++) {\r\n        while (p <= n && a[p] + 1 - x <= i) p++;\r\n        if ((p - i) % lim == 0) return false;\r\n    }\r\n    return true;\r\n}\r\nvoid main() {\r\n\tstd::cin >> n >> p;\r\n\tfor (int i = 1; i <= n; i++) std::cin >> a[i];\r\n\tstd::sort(a + 1, a + 1 + n);\r\n\tint max = 1, an = 1, fst = std::lower_bound(a + 1, a + 1 + n, a[p]) - a;\r\n    for (int i = fst + 1; i <= n; i++) \r\n        an = an - (a[i] - a[i - 1]) + 1, max = std::max(max, an);\r\n    int cnt = fst - 1 + max - p + 1;\r\n\tint l = a[n] - n + 1, r = a[p] - cnt, ans = a[p] - cnt + 1;\r\n\twhile (l <= r) {\r\n\t    int mid = l + (r - l) / 2;\r\n\t    if (check(mid, p)) r = mid - 1, ans = mid;\r\n\t    else l = mid + 1;\r\n\t}\r\n\tstd::cout << a[p] - cnt - ans + 1 << '\\n';\r\n\tfor (int i = ans; i <= a[p] - cnt; i++)\r\n\t    std::cout << i << ' ';\r\n}\r\n}\r\nvoid _() { std::ios::sync_with_stdio(false), std::cin.tie(nullptr); }\r\nint main() { _(); Qiaoqia::main(); }"
}