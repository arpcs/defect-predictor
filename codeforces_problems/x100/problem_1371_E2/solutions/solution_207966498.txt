{
    "id": 207966498,
    "contestId": 1371,
    "creationTimeSeconds": 1685539491,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "jiangqiao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "Java 17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 295,
    "memoryConsumedBytes": 921600,
    "source": "import java.io.*;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n    static class IntMath {\r\n        public static int gcd(int a, int b) {\r\n            return b == 0 ? a : gcd(b, a % b);\r\n        }\r\n\r\n        public static long gcd(long a, long b) {\r\n            return b == 0 ? a : gcd(b, a % b);\r\n        }\r\n\r\n        public static long get(long a, int b, int p) {\r\n            long ans = 1;\r\n            while (b > 0) {\r\n                if ((b & 1) == 1) ans = ans * a % p;\r\n                b >>= 1;\r\n                a = a * a % p;\r\n            }\r\n            return ans;\r\n        }\r\n    }\r\n\r\n    static class in extends PrintWriter {\r\n        BufferedReader r;\r\n        StringTokenizer st;\r\n\r\n        // \u6807\u51c6 IO\r\n        in() {\r\n            this(System.in, System.out);\r\n        }\r\n\r\n        in(InputStream i, OutputStream o) {\r\n            super(o);\r\n            r = new BufferedReader(new InputStreamReader(i));\r\n        }\r\n\r\n        // \u6587\u4ef6 IO\r\n        in(String input, String output) throws IOException {\r\n            super(output);\r\n            r = new BufferedReader(new FileReader(input));\r\n        }\r\n\r\n        // \u5728\u6ca1\u6709\u5176\u4ed6\u8f93\u5165\u65f6\u8fd4\u56de null\r\n        public String next() {\r\n            try {\r\n                while (st == null || !st.hasMoreTokens()) {\r\n                    st = new StringTokenizer(r.readLine());\r\n                }\r\n                return st.nextToken();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        public long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n    }\r\n\r\n\r\n    static in in = new in();\r\n\r\n\r\n    public static void main(String[] arg) throws Exception {\r\n        int t = 1;\r\n//        t = in.nextInt();\r\n        while (t-- > 0) {\r\n            solve();\r\n        }\r\n        in.close();\r\n    }\r\n\r\n\r\n    public static void solve() throws IOException {\r\n        int n = in.nextInt();\r\n        int p = in.nextInt();\r\n        int[] a = new int[n];\r\n        for (int i = 0; i < n; i++)\r\n            a[i] = in.nextInt();\r\n        Arrays.sort(a);\r\n        int min = a[0];\r\n        int max = (int) 2e9;\r\n//        in.println(max);\r\n        for (int i = 0; i < n; i++) {\r\n            min = Math.max(min, a[i] - i);\r\n            if (i - p + 1 >= 0) {\r\n                max = Math.min(max, a[i] - (i - p + 1));\r\n//                System.out.println(a[i] - (i - p + 1));\r\n            }\r\n        }\r\n        if (max <= min) {\r\n            in.println(0);\r\n            return;\r\n        }\r\n        in.println(max - min);\r\n        for (int i = min; i < max; i++) {\r\n            in.print(i + \" \");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n"
}