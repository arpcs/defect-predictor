{
    "id": 157372869,
    "contestId": 1371,
    "creationTimeSeconds": 1652690198,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1371,
        "index": "E2",
        "name": "Asterism (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1371,
        "members": [
            {
                "handle": "mailo102"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1593610500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1228800,
    "source": "#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n#define ll long long\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define forn(i, n) for (int i = 0; i < n; i++)\n#define from(i,j,n) for (int i = j; i < n; i++)\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int n, p;\n  cin >> n >> p;\n  vector<ll> vec(n);\n  forn(i, n) {\n    cin >> vec[i];\n  } \n  vector<ll> answer;\n  sort(vec.begin(), vec.end());\n  ll l = 0, r = 1e9;\n  while (r - l > 1) {\n    auto mid = (r + l) / 2;\n    \n    ll cnt = 0;\n    ll pos = 0;\n    while (pos < vec.size() && vec[pos] < mid) {\n      cnt++;\n      pos++;\n    }\n    bool flag = false, less = false; \n    for (int i = mid; i < mid + n; i++) {\n      while (pos < vec.size() && vec[pos] == i) {\n        cnt++;\n        pos++;\n      }\n      if (cnt <= 0)\n        less = true;\n      if (cnt % p == 0) {\n        flag = true; \n      }\n      cnt--;\n    }\n    \n    if (less) \n      l = mid;\n    else\n      r = mid;\n  }\n  vector<ll> curr;\n  multiset<ll> ss;\n  ll cnt = 0;\n  ll pos = 0;\n  while (pos < vec.size() && vec[pos] < r) {\n    cnt++;\n    pos++;\n  }\n  for (int i = r; i < r + n; i++) {\n    while (pos < vec.size() && vec[pos] == i) {\n      cnt++;\n      pos++;\n    }\n    curr.pb(cnt % p);\n    ss.insert(cnt % p);\n    cnt--;\n  } \n  cout << \"DEBUG: L: \" << r << endl;\n  forn(i, curr.size()) {\n    cout << curr[i] << \" \";\n  }\n  cout << endl;\n  \n  ll balance = 0;\n  for (int i = r; i < r + p; i++) {\n    //cout << \"I: \" << i << endl;\n    if (ss.find((p - balance) % p) == ss.end()) {\n      answer.pb(i);\n    }\n    ss.erase(ss.find(curr[i - r]));\n    balance++;\n  }\n  cout << answer.size() << endl;\n  forn(i, answer.size()) {\n    cout << answer[i] << \" \";\n  }\n  return 0;\n}\n"
}