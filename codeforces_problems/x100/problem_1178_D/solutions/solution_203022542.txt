{
    "id": 203022542,
    "contestId": 1178,
    "creationTimeSeconds": 1682151580,
    "relativeTimeSeconds": 3700,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "kitsune"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1682147880
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing i64 = long long;\r\n\r\nint main() {\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr);\r\n    \r\n    int n;\r\n    std::cin >> n;\r\n    \r\n    if (n == 3) {\r\n        std::cout << \"3\\n\";\r\n        std::cout << \"1 2\\n\";\r\n        std::cout << \"1 3\\n\";\r\n        std::cout << \"2 3\\n\";\r\n        return 0;\r\n    }\r\n    \r\n    std::vector<std::pair<int, int>> ans;\r\n    \r\n    int cur = 1;\r\n    while (n >= 8) {\r\n        for (int i = 0; i < 4; i++) {\r\n            for (int j = i + 1; j < 4; j++) {\r\n                ans.emplace_back(cur + i, cur + j);\r\n            }\r\n        }\r\n        cur += 4;\r\n        n -= 4;\r\n    }\r\n    \r\n    if (n == 4) {\r\n        ans.emplace_back(cur + 0, cur + 1);\r\n        ans.emplace_back(cur + 1, cur + 2);\r\n        ans.emplace_back(cur + 2, cur + 3);\r\n        ans.emplace_back(cur + 3, cur + 0);\r\n        ans.emplace_back(cur + 0, cur + 2);\r\n    } else if (n == 5) {\r\n        ans.emplace_back(cur + 0, cur + 1);\r\n        ans.emplace_back(cur + 1, cur + 2);\r\n        ans.emplace_back(cur + 2, cur + 3);\r\n        ans.emplace_back(cur + 3, cur + 4);\r\n        ans.emplace_back(cur + 4, cur + 0);\r\n    } else if (n == 6) {\r\n        ans.emplace_back(cur + 0, cur + 1);\r\n        ans.emplace_back(cur + 1, cur + 2);\r\n        ans.emplace_back(cur + 2, cur + 3);\r\n        ans.emplace_back(cur + 3, cur + 4);\r\n        ans.emplace_back(cur + 4, cur + 5);\r\n        ans.emplace_back(cur + 5, cur + 0);\r\n        ans.emplace_back(cur + 0, cur + 2);\r\n    } else {\r\n        ans.emplace_back(cur + 0, cur + 1);\r\n        ans.emplace_back(cur + 1, cur + 2);\r\n        ans.emplace_back(cur + 2, cur + 3);\r\n        ans.emplace_back(cur + 3, cur + 4);\r\n        ans.emplace_back(cur + 4, cur + 5);\r\n        ans.emplace_back(cur + 5, cur + 6);\r\n        ans.emplace_back(cur + 6, cur + 0);\r\n    }\r\n    \r\n    std::cout << ans.size() << \"\\n\";\r\n    for (auto [x, y] : ans) {\r\n        std::cout << x << \" \" << y << \"\\n\";\r\n    }\r\n    \r\n    return 0;\r\n}\r\n"
}