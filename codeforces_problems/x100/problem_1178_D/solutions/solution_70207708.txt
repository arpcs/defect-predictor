{
    "id": 70207708,
    "contestId": 1178,
    "creationTimeSeconds": 1580799696,
    "relativeTimeSeconds": 8316,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "shubham732"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1580791380
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 10137600,
    "source": "#include<bits/stdc++.h>\r\n#include<iostream>\r\n#include<stdio.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define fr(i,j,n)   for(int i=j;i<(n);++i)\r\n#define bk(i,j,n)   for(int i=j;i>=n;--i)\r\n#define pb push_back\r\n#define mp make_pair\r\n#define F first\r\n#define S second\r\n#define endl \"\\n\"\r\n#define MOD 1000000007\r\n#define run ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)\r\n#define ordered_set tree<ll , null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>\r\n\r\ntypedef long long ll;\r\n\r\nll modpower(ll a,ll b,ll c)\r\n{\r\n\tll res=1;\r\n\twhile(b)\r\n\t{\r\n\t\tif(b&1LL)\r\n\t\t\tres=(res*a)%c;\r\n\t\ta=(a*a)%c;\r\n\t\tb>>=1;\r\n\t}\r\n\treturn res;\r\n}\r\nvector<ll> pp;\r\nbool prime[10000009];\r\nvoid SieveOfEratosthenes()\r\n{\r\n    // Create a boolean array \"prime[0..n]\" and initialize\r\n    // all entries it as true. A value in prime[i] will\r\n    // finally be false if i is Not a prime, else true.\r\n   // bool prime[n+1];\r\n    //memset(prime, true, sizeof(prime));\r\n\r\n    for (int p=2; p*p<=10000009; p++)\r\n    {\r\n        // If prime[p] is not changed, then it is a prime\r\n        if (prime[p] == false)\r\n        {\r\n            pp.pb(p);\r\n            if(pp.size()>10005)\r\n                break;\r\n            // Update all multiples of p greater than or\r\n            // equal to the square of it\r\n            // numbers which are multiple of p and are\r\n            // less than p^2 are already been marked.\r\n            for (int i=p*p; i<=10000009; i += p)\r\n                prime[i] = true;\r\n        }\r\n    }\r\n\r\n}\r\nll deg[10005];\r\n\r\n\r\nint main()\r\n{\r\n    run;\r\n    ll n;\r\n    cin>>n;\r\n    if(n==3)\r\n    {\r\n        cout<<3<<endl;\r\n        cout<<1<<\" \"<<2<<endl;\r\n        cout<<1<<\" \"<<3<<endl;\r\n        cout<<3<<\" \"<<2<<endl;\r\n        return 0;\r\n    }\r\n\r\n    SieveOfEratosthenes();\r\n\r\n    ll oi=lower_bound(pp.begin(),pp.end(),n)-pp.begin();\r\n    ll nodes=pp[oi];\r\n    cout<<nodes<<endl;\r\n    //return 0;\r\n    fr(i,1,n)\r\n    {\r\n        cout<<i<<\" \"<<i+1<<endl;\r\n    }\r\n    cout<<1<<\" \"<<n<<endl;\r\n\r\n    nodes-=n;\r\n    ll j=1;\r\n    fr(i,0,nodes)\r\n    {\r\n        cout<<j<<\" \"<<j+n/2<<endl;\r\n        j++;\r\n    }\r\n\r\n\r\n\r\n    return 0;\r\n}\r\n"
}