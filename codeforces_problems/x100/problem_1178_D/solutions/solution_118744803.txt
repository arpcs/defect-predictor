{
    "id": 118744803,
    "contestId": 1178,
    "creationTimeSeconds": 1623085464,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "unknown_user_spotted"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Stack3 {\r\n\r\n    static class Reader {\r\n        final private int BUFFER_SIZE = 1 << 16;\r\n        private DataInputStream din;\r\n        private byte[] buffer;\r\n        private int bufferPointer, bytesRead;\r\n\r\n        public Reader() {\r\n            din = new DataInputStream(System.in);\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        public Reader(String file_name) throws IOException {\r\n            din = new DataInputStream(new FileInputStream(file_name));\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        public String readLine() throws IOException {\r\n            byte[] buf = new byte[64]; // line length\r\n            int cnt = 0, c;\r\n            while ((c = read()) != -1) {\r\n                if (c == '\\n')\r\n                    break;\r\n                buf[cnt++] = (byte) c;\r\n            }\r\n            return new String(buf, 0, cnt);\r\n        }\r\n\r\n        public int nextInt() throws IOException {\r\n            int ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            long ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            }\r\n            while ((c = read()) >= '0' && c <= '9');\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public double nextDouble() throws IOException {\r\n            double ret = 0, div = 1;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            }\r\n            while ((c = read()) >= '0' && c <= '9');\r\n            if (c == '.') {\r\n                while ((c = read()) >= '0' && c <= '9') {\r\n                    ret += (c - '0') / (div *= 10);\r\n                }\r\n            }\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        private void fillBuffer() throws IOException {\r\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\r\n            if (bytesRead == -1)\r\n                buffer[0] = -1;\r\n        }\r\n\r\n        private byte read() throws IOException {\r\n            if (bufferPointer == bytesRead)\r\n                fillBuffer();\r\n            return buffer[bufferPointer++];\r\n        }\r\n\r\n        public void close() throws IOException {\r\n            if (din == null)\r\n                return;\r\n            din.close();\r\n        }\r\n    }\r\n\r\n    static Reader sc = new Reader();\r\n    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\r\n\r\n\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        //subsequence(\"abcdefghij\");\r\n\r\n        /*\r\n         * For integer input: int n=inputInt();\r\n         * For long input: long n=inputLong();\r\n         * For double input: double n=inputDouble();\r\n         * For String input: String s=inputString();\r\n         * Logic goes here\r\n         * For printing without space: print(a+\"\"); where a is a variable of any datatype\r\n         * For printing with space: printSp(a+\"\"); where a is a variable of any datatype\r\n         * For printing with new line: println(a+\"\"); where a is a variable of any datatype\r\n         */\r\n        Scanner sc = new Scanner(System.in);\r\n        int n = sc.nextInt();\r\n        if(n==1||n==2){\r\n            System.out.println(-1);\r\n        }\r\n\r\n        int nextp=n;\r\n        while (!checkPrime(nextp)){\r\n            nextp++;\r\n        }\r\n        System.out.println(nextp);\r\n        for(int i=1;i<n;i++){\r\n            System.out.println(i+\" \"+(i+1));\r\n        }\r\n        System.out.println(n+\" \"+1);\r\n\r\n        for(int i=1;i<=(nextp-n);i++){\r\n            System.out.println(i+\" \"+(i+n/2));\r\n        }\r\n\r\n\r\n\r\n\r\n        bw.flush();\r\n        bw.close();\r\n\r\n\r\n    }\r\n    public static boolean checkPrime(int n){\r\n        if(n==0||n==1){\r\n            return false;\r\n        }\r\n        for(int j=2;j*j<=n;j++){\r\n            if(n%j==0){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n\r\n    public static void dfs1(List<List<Integer>> g, boolean[] visited, Stack<Integer> stack, int num) {\r\n        visited[num] = true;\r\n        for (Integer integer : g.get(num)) {\r\n            if (!visited[integer]) {\r\n                dfs1(g, visited, stack, integer);\r\n            }\r\n        }\r\n        stack.push(num);\r\n    }\r\n\r\n    public static void dfs2(List<List<Integer>> g, boolean[] visited, List<Integer> list, int num, int c,\r\n                            int[] raj) {\r\n        visited[num] = true;\r\n\r\n        for (Integer integer : g.get(num)) {\r\n            if (!visited[integer]) {\r\n                dfs2(g, visited, list, integer, c, raj);\r\n            }\r\n        }\r\n        raj[num] = c;\r\n        list.add(num);\r\n\r\n    }\r\n\r\n    public static int inputInt() throws IOException {\r\n        return sc.nextInt();\r\n    }\r\n\r\n    public static long inputLong() throws IOException {\r\n        return sc.nextLong();\r\n    }\r\n\r\n    public static double inputDouble() throws IOException {\r\n        return sc.nextDouble();\r\n    }\r\n\r\n    public static String inputString() throws IOException {\r\n        return sc.readLine();\r\n    }\r\n\r\n    public static void print(String a) throws IOException {\r\n        bw.write(a);\r\n    }\r\n\r\n    public static void printSp(String a) throws IOException {\r\n        bw.write(a + \" \");\r\n    }\r\n\r\n    public static void println(String a) throws IOException {\r\n        bw.write(a + \"\\n\");\r\n    }\r\n\r\n\r\n    public static long getAns(int[] ar, int c, long[][] dp, int i, int sign) {\r\n        if (i < 0) {\r\n            return 1;\r\n        }\r\n\r\n        if (c <= 0) {\r\n            return 1;\r\n        }\r\n\r\n        dp[i][c] = Math.max(dp[i][c], Math.max(ar[i] * getAns(ar, c - 1, dp, i - 1, sign), getAns(ar, c, dp, i - 1, 1)));\r\n        return dp[i][c];\r\n    }\r\n\r\n\r\n    public static long power(long a, long b, long c) {\r\n        long ans = 1;\r\n        while (b != 0) {\r\n            if (b % 2 == 1) {\r\n                ans = ans * a;\r\n                ans %= c;\r\n            }\r\n            a = a * a;\r\n            a %= c;\r\n            b /= 2;\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    public static long power1(long a, long b, long c) {\r\n        long ans = 1;\r\n        while (b != 0) {\r\n            if (b % 2 == 1) {\r\n                ans = multiply(ans, a, c);\r\n            }\r\n            a = multiply(a, a, c);\r\n            b /= 2;\r\n\r\n        }\r\n        return ans;\r\n\r\n    }\r\n\r\n    public static long multiply(long a, long b, long c) {\r\n        long res = 0;\r\n        a %= c;\r\n        while (b > 0) {\r\n            if (b % 2 == 1) {\r\n                res = (res + a) % c;\r\n            }\r\n            a = (a + a) % c;\r\n            b /= 2;\r\n        }\r\n\r\n        return res % c;\r\n\r\n    }\r\n\r\n    public static long totient(long n) {\r\n        long result = n;\r\n        for (long i = 2; i * i <= n; i++) {\r\n            if (n % i == 0) {\r\n                //sum=sum+2*i;\r\n                while (n % i == 0) {\r\n                    n /= i;\r\n                    // sum=sum+n;\r\n                }\r\n                result -= result / i;\r\n\r\n            }\r\n        }\r\n        if (n > 1) {\r\n            result -= result / n;\r\n\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    public static long gcd(long a, long b) {\r\n        if (b == 0) {\r\n            return a;\r\n        } else {\r\n            return gcd(b, a % b);\r\n        }\r\n    }\r\n\r\n    public int sumOfFlooredPairs(int[] nums) {\r\n        // long sum=0;\r\n        long mod = (long) (1e9 + 7);\r\n        Arrays.sort(nums);\r\n        long[] numerator = new long[nums.length];\r\n        long[] denominator = new long[nums.length];\r\n\r\n        long[] numerator1 = new long[nums.length];\r\n        long[] denominator1 = new long[nums.length];\r\n\r\n        long num = 1;\r\n        long den = nums[0];\r\n        numerator[0] = 1;\r\n        denominator[0] = den;\r\n        long num1 = 1;\r\n        long den1 = nums[nums.length - 1];\r\n        numerator1[nums.length - 1] = 1;\r\n        denominator1[nums.length - 1] = den1;\r\n\r\n\r\n        for (int i = 1; i < nums.length; i++) {\r\n\r\n            long gcd1 = gcd(denominator[i - 1], nums[i]);\r\n            long lcm = (denominator[i - 1] * nums[i]) / gcd1;\r\n            long n1 = lcm / denominator[i - 1] * numerator[i - 1] + lcm / nums[i];\r\n            numerator[i] = n1;\r\n            denominator[i] = lcm;\r\n\r\n            long gcd2 = gcd(denominator1[nums.length - i], nums[nums.length - 1 - i]);\r\n            long lcm1 = (denominator1[nums.length - i] * nums[nums.length - 1 - i]) / gcd2;\r\n            long n2 = lcm1 / denominator1[nums.length - i] * numerator1[nums.length - i] + lcm1 / nums[nums.length - 1 - i];\r\n            numerator1[nums.length - 1 - i] = n2;\r\n            denominator1[nums.length - 1 - i] = lcm1;\r\n\r\n\r\n\r\n\r\n           /* prefix[i]=sum;\r\n            sum12+=1d/nums[nums.length-1-i];\r\n            prefix2[nums.length-1-i]=sum12;*/\r\n\r\n        }\r\n        /*System.out.println(Arrays.toString(numerator));\r\n         System.out.println(Arrays.toString(denominator));*/\r\n        int sum2 = 0;\r\n        for (int i = 0; i < nums.length; i++) {\r\n            //float d1=(float)(numerator[i]/(double)denominator[i]);\r\n            sum2 += (int) (Math.floor((numerator[i] * nums[i]) / (double) denominator[i]));\r\n            sum2 %= mod;\r\n            if (i + 1 < nums.length) {\r\n                // float d2=(float)(numerator1[i+1]/(double)denominator1[i+1]);\r\n                sum2 += (int) (Math.floor((numerator1[i + 1] * nums[i]) / (double) denominator1[i + 1]));\r\n                sum2 %= mod;\r\n            }\r\n        }\r\n        return sum2;\r\n\r\n\r\n    }\r\n\r\n    public static boolean[] primes(int n) {\r\n        boolean[] p = new boolean[n + 1];\r\n        p[0] = false;\r\n        p[1] = false;\r\n        for (int i = 2; i <= n; i++) {\r\n            p[i] = true;\r\n        }\r\n\r\n        for (int i = 2; i * i <= n; i++) {\r\n            if (p[i]) {\r\n                for (int j = i * i; j <= n; j += i) {\r\n                    p[j] = false;\r\n                }\r\n            }\r\n\r\n        }\r\n        return p;\r\n    }\r\n\r\n    public String LargestEven(String S) {\r\n        //  char[] ar=S.toCharArray();\r\n        int[] count = new int[10];\r\n        for (int i = 0; i < S.length(); i++) {\r\n            count[S.charAt(i) - '0']++;\r\n        }\r\n        int num = -1;\r\n        for (int i = 0; i <= 8; i += 2) {\r\n            if (count[i] > 0) {\r\n                num = i;\r\n                break;\r\n            }\r\n        }\r\n        StringBuilder ans = new StringBuilder();\r\n        for (int i = 9; i >= 0; i--) {\r\n            if (i != num) {\r\n                for (int j = 1; j <= count[i]; j++) {\r\n                    ans.append(i);\r\n                }\r\n            } else {\r\n                for (int j = 1; j <= count[num] - 1; j++) {\r\n                    ans.append(num);\r\n                }\r\n\r\n            }\r\n        }\r\n        if (num != -1 && count[num] > 0) {\r\n            ans.append(num);\r\n        }\r\n        return ans.toString();\r\n    }\r\n\r\n}"
}