{
    "id": 158000324,
    "contestId": 1178,
    "creationTimeSeconds": 1653227192,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "dominique38"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 1024000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define TEST int tt; cin>>tt; while(tt--)\r\n#define FOR(v,s,e) for(int v=int(s);v<int(e);v++)\r\n#define FF first\r\n#define SS second\r\n#define newline cout<<\"\\n\"; \r\n#define vt vector\r\n#define SZ(v) (int)v.size() \r\n#define all(a) (a).begin(),(a).end()\r\n#define rall(a) (a).rbegin(),(a).rend()\r\n#define LOWB(a,i,j,x) ( lower_bound((a).begin()+(i), (a).begin()+(j), (x)) - (a).begin())\r\n#define UPPB(a,i,j,x) ( upper_bound((a).begin()+(i), (a).begin()+(j), (x)) - (a).begin())\r\n#define  SUM(a,i,j)   ( accumulate ((a).begin()+(i), (a).begin()+(j), 0ll))\r\n#define pb push_back\r\n// // #pragma GCC optimize (\"trapv\")\r\n// -----------------------------------debugging and IO --------------------------------------\r\nbool __DEBUGG=false;\r\ntemplate<typename T>\r\nvoid debug(const T&single){\r\n    if(!__DEBUGG)cout<<\"{\";\r\n    cout<<single<<\"}\"; flush(cout);\r\n    __DEBUGG=false;\r\n}\r\ntemplate<typename T,typename...Paras>\r\nvoid debug(const T& single,const Paras&...vals){\r\n    if(!__DEBUGG)cout<<\"{\",__DEBUGG=true; \r\n    cout<<single<<\", \";\r\n    debug(vals...);\r\n}\r\n// ----------------------------------- cuiaoxiang ---------------------------------------------\r\ntemplate<class T> \r\nostream& operator<<(ostream& outv,vector<T>&vec){for(auto x:vec){outv<<x<<\" \";}return outv;}\r\ntemplate<class T>\r\nistream& operator>>(istream& inpv,vector<T>&vec){for(auto &x:vec){inpv>>x;}return inpv;}\r\ntemplate<class T> \r\nostream& operator<<(ostream& outv,set<T>&vec){for(auto x:vec){outv<<x<<\" \";}return outv;}\r\n\r\ntemplate<class T,class U>\r\nostream& operator<<(ostream& outpr,pair<T,U>&prhr){outpr<<prhr.FF<<\" \"<<prhr.SS; return outpr;}\r\ntemplate<class T,class U>\r\nistream& operator>>(istream& inpr,pair<T,U>&prhr){inpr>>prhr.FF>>prhr.SS; return inpr;}\r\n\r\ntemplate <class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\r\ntemplate <class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\r\n\r\ntemplate <class T> auto vect(const T& v, int n) { return vector<T>(n, v); } // base case of 1D vector\r\ntemplate <class T, class... D> auto vect(const T& v, int n, D... m) {       // v remains same as init value\r\n  return vector<decltype(vect(v, m...))>(n, vect(v, m...));\r\n}\r\nstruct NFS {\r\n  NFS() {\r\n    cin.tie(nullptr);   ios::sync_with_stdio(false);    cout << fixed << setprecision(10);\r\n  };\r\n} nfs;\r\ntemplate <class T> static constexpr T inf = numeric_limits<T>::max() / 2;\r\ntemplate<class T> \r\nusing PQ = priority_queue<T, vector<T>, greater<T>>;\r\ntypedef long long int int64;\r\ntypedef long double longd;\r\ntypedef std::pair<int,int> pii;\r\ntypedef std::pair<int64,int64> pii64;\r\ntypedef std::pair<double,double> pdd;\r\nconst int INF = inf<int>,MOD=1e9+7,MOD0=998244353, MOD32 = 2147483647;// (1<<31)-1 \r\nconst int64 INFF = inf<int64>,MOD64=1000000000000000003;;\r\nconst int N=1e5+1,LOG9=31,LOG6=21;\r\nconst double EPS = 1e-6;\r\n// ------------------------------------------------------------------------------------------\r\nstd::vector <int> prime;\r\nbool is_composite[1000000];\r\nvoid linearsieve (int n) {\r\n  std::fill (is_composite, is_composite + n, false);\r\n  for (int i = 2; i < n; ++i) {\r\n    if (!is_composite[i]) prime.push_back (i);\r\n    for (int j = 0; j < SZ(prime) && i * prime[j] < n; ++j) {\r\n      is_composite[i * prime[j]] = true;\r\n      if (i % prime[j] == 0) break;\r\n    }\r\n  }\r\n}\r\nint main(){\r\n    \r\n    linearsieve(2001);\r\n    int n;  cin>>n;\r\n    int nn = prime[LOWB(prime,0,SZ(prime),n)];\r\n    vt<pii> ans;\r\n    FOR(i,1,n)ans.pb({i,i+1});\r\n    ans.pb({1,n});\r\n    FOR(i,0,nn-n){\r\n        int u = i+1,v = i+n/2+1;\r\n        ans.pb({u,v});\r\n    }\r\n    cout<<SZ(ans);newline;\r\n    for(auto p : ans)cout<<p,newline;\r\n    return 0;\r\n}\r\n"
}