{
    "id": 108319913,
    "contestId": 1178,
    "creationTimeSeconds": 1614095915,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "rw6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n public class Solution {\r\n\t public static void main(String[] args) throws Exception\r\n    {\r\n\t\t     FastReader fr=new FastReader();\r\n             int n=fr.nextInt();\r\n             int i=1;\r\n             int j=2;\r\n             ArrayList<Pair> list=new ArrayList<>();\r\n             while(j<=n) {\r\n            \t //System.out.println(i+\" \"+j);\r\n            \t list.add(new Pair(i,j));\r\n            \t i++;\r\n            \t j++;\r\n             }\r\n           //  System.out.println(n+\" \"+1);\r\n             list.add(new Pair(n,1));\r\n             boolean p=isPrime(n);\r\n            // System.out.println(p);\r\n             if(p==false) {\r\n            \tint temp=n;\r\n            \t while(true) {\r\n            \t\t if(isPrime(temp)) {\r\n            \t\t\t break;\r\n            \t\t }\r\n            \t\t temp++;\r\n            \t }\r\n            \t int req=temp-n;\r\n            \t int k=1;\r\n            \t int l=n-1;\r\n            \t while(req>0) {\r\n            \t\t //System.out.println(k+\" \"+l);\r\n            \t\t list.add(new Pair(k,l));\r\n            \t\t k++;\r\n            \t\t l--;\r\n            \t\t if(k>l)\r\n            \t\t\t break;\r\n            \t\t req--;\r\n            \t }\r\n            \t \r\n            \t\t \r\n            \t \r\n             }\r\n             System.out.println(list.size());\r\n             for(Pair pair:list) {\r\n            \t System.out.println(pair.x+\" \"+pair.y);\r\n             }\r\n             \r\n            \r\n    }\r\n\t public static boolean isPrime(int n) {\r\n\t\t \r\n\t\t for(int i=2;(i*i)<=n;i++) {\r\n\t\t\t if(n%i==0)\r\n\t\t\t\t return false;\r\n\t\t }\r\n\t\t return true;\r\n\t }\r\n            \t  \r\n             \r\n             \r\n    }\r\n class Pair{\r\n\t int x;\r\n\t int y;\r\n\t Pair(int x,int y){\r\n\t\t this.x=x;\r\n\t\t this.y=y;\r\n\t }\r\n }\r\n\t\r\n\t \r\n\t\r\n\t\r\n\r\n\t \r\n \r\n  \r\n\r\nclass FastReader\r\n{\r\n    BufferedReader br;\r\n    StringTokenizer st;\r\n \r\n    public FastReader()\r\n    {\r\n        br = new BufferedReader(new\r\n                InputStreamReader(System.in));\r\n    }\r\n \r\n    String next()\r\n    {\r\n        while (st == null || !st.hasMoreElements())\r\n        {\r\n            try\r\n            {\r\n                st = new StringTokenizer(br.readLine());\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return st.nextToken();\r\n    }\r\n \r\n    int nextInt()\r\n    {\r\n        return Integer.parseInt(next());\r\n    }\r\n \r\n    long nextLong()\r\n    {\r\n        return Long.parseLong(next());\r\n    }\r\n \r\n    double nextDouble()\r\n    {\r\n        return Double.parseDouble(next());\r\n    }\r\n \r\n    String nextLine()\r\n    {\r\n        String str = \"\";\r\n        try\r\n        {\r\n            str = br.readLine();\r\n        }\r\n        catch (IOException e)\r\n        {\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n    }\r\n}\r\n\r\n"
}