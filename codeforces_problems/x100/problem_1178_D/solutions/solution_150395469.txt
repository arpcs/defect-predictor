{
    "id": 150395469,
    "contestId": 1178,
    "creationTimeSeconds": 1647890220,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "mfctanzim_00"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 7168000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define bug(a) cerr<<#a<<\" : \"<<a<<endl\r\nconst int mx=1e6;\r\nint sz[1010], nxtPrime[mx+10];\r\nbool isPrime[mx+10], hasEdge[1010][1010];\r\n\r\nvoid pre()\r\n{\r\n    memset(isPrime, true, sizeof(isPrime));\r\n    isPrime[0]=isPrime[1]=false;\r\n\r\n    vector<int>prime;\r\n    for(int i=1; i<=mx; i++){\r\n           if(!isPrime[i])continue;\r\n           prime.push_back(i);\r\n           for(int j=i+i; j<=mx; j+=i){\r\n                isPrime[j]=false;\r\n           }\r\n    }\r\n    int cur=0;\r\n    for(int i=0; i<=mx; i++){\r\n           if(i==prime[cur])cur++;\r\n           if(cur==prime.size())break;\r\n           nxtPrime[i]=prime[cur];\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n    int t=1, n, m, k;\r\n    //cin >> t;\r\n\r\n    pre();\r\n    while(t--){\r\n            cin >> n;\r\n            vector<pair<int, int> >edge;\r\n            vector<int>tmp;\r\n\r\n            for(int i=1; i<=n; i++)tmp.push_back(i);\r\n\r\n            bool ok=false;\r\n            while(!ok){\r\n                    sort(tmp.begin(), tmp.end(), [&](int p, int q){\r\n                         if(isPrime[sz[p]] && isPrime[sz[q]])return sz[p]<sz[q];\r\n                         return isPrime[sz[p]]<isPrime[sz[q]];\r\n                    });\r\n                    int u=tmp[0];\r\n\r\n                    int nxt=nxtPrime[sz[u]];\r\n                    for(auto v: tmp){\r\n                          if(sz[u]==nxt || nxt>n)break;\r\n                          if(u==v || hasEdge[u][v] || hasEdge[v][u])continue;\r\n                          hasEdge[u][v]=true;\r\n                          edge.push_back({u, v});\r\n                          sz[u]++;\r\n                          sz[v]++;\r\n                    }\r\n                    if(sz[u]!=nxt)break;\r\n\r\n                    ok=(isPrime[edge.size()]);\r\n                    for(int j=1; j<=n; j++)ok&=isPrime[sz[j]];\r\n\r\n            }\r\n            if(!ok) cout << \"-1\\n\";\r\n            else {\r\n                    cout << edge.size() << '\\n';\r\n                    for(auto x: edge)cout << x.first << \" \" << x.second << '\\n';\r\n            }\r\n    }\r\n    return 0;\r\n}\r\n"
}