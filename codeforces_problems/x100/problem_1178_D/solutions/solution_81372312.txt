{
    "id": 81372312,
    "contestId": 1178,
    "creationTimeSeconds": 1590402540,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "TheDarkKnight03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\nimport com.sun.media.sound.AlawCodec;\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputReader in = new InputReader(System.in);\n\t\tPrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)),true);\n\t\tTaskB solver = new TaskB();\n\t\tsolver.solve(1, in, out);\n\t\tout.flush();\n\t\tout.close();\n\t}\n}\n\nclass TaskB {\n    public void solve(int testNumber, InputReader in, PrintWriter pw) {\n    \tint n=in.nextInt();\n    \tArrayList<Pair<Integer,Integer>> pairs=new ArrayList<Pair<Integer,Integer>>();\n    \tpairs.add(new Pair<Integer,Integer>(n,1));\n    \tfor(int i=0;i<n-1;i++) {\n    \t\tint a=i+1;\n    \t\tint b=i+2;\n    \t\tpairs.add(new Pair<Integer,Integer>(a,b));\n    \t}\n    \tboolean sieve[]=new boolean[1001];\n    \tArrays.fill(sieve, true);\n    \tint m=(int)Math.sqrt(1001);\n    \tsieve[0]=false;\n    \tsieve[1]=false;\n    \tfor(int i=2;i<=m;i++) {\n    \t\tif(sieve[i]) {\n    \t\t\tfor(int j=i*i;j<=1000;j+=i) {\n    \t\t\t\tsieve[j]=false;\n    \t\t\t}\n    \t\t}\n    \t}\n    \tif(!sieve[n]) {\n    \t\tint k=n/2;\n    \t\tfor(int i=1;i<=k;i++) {\n//    \t\t\tpw.println(sieve[n]);\n    \t\t\tif(sieve[n]) {\n    \t\t\t\tbreak;\n    \t\t\t}\n//    \t\t\tpw.println(n);\n    \t\t\tint a=i;\n    \t\t\tint b=i+n/2;\n    \t\t\tpairs.add(new Pair<Integer,Integer>(a,b));\n    \t\t\tn++;\n    \t\t}\n    \t}\n    \tpw.println(pairs.size());\n    \tfor(Pair<Integer,Integer> pair:pairs) {\n    \t\tpw.println(pair.first+\" \"+pair.second);\n    \t}\n}\n}\nclass Pair<A,B>{\t\n\tA first;\n\tB second;\n\tPair(A first,B second){\n\t\tthis.first=first;\n\t\tthis.second=second;\n\t}\n}\n\n\nclass InputReader{\n    BufferedReader br;\n    StringTokenizer st;\n    public InputReader(InputStream in){\n        br=new BufferedReader(new InputStreamReader(in));\n        st=null;\n    }\n    public String next(){\n    while(st==null||!st.hasMoreTokens()){\n        try{\n            st=new StringTokenizer(br.readLine());\n        }catch(IOException e){\n            throw new RuntimeException(e);\n        }\n    }\n   return st.nextToken();\n    }\n    public int nextInt(){\n        return Integer.parseInt(next());\n    }\n    public long nextLong() {\n    \treturn Long.parseLong(next());\n    }\n    public double nextDouble() {\n    \treturn Double.parseDouble(next());\n    }\n}\n\n"
}