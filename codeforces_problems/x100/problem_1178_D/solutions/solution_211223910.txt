{
    "id": 211223910,
    "contestId": 1178,
    "creationTimeSeconds": 1687858089,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "1d36jkhk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner;\r\n\r\npublic class CombinationLock {\r\n\tpublic int solution(String s1, String s2) {\r\n\t\tint moves = 0;\r\n\t\tfor(int i=0; i<s1.length(); i++) {\r\n\t\t\tint pos1 = Character.getNumericValue(s1.charAt(i));\r\n\t\t\tint pos2 = Character.getNumericValue(s2.charAt(i));\r\n\t\t\t\r\n\t\t\tint moveUp = pos2 - pos1;\r\n\t\t\tint moveDown = pos1 - pos2;\r\n\t\t\t\r\n\t\t\tmoveUp = (moveUp<0) ? moveUp+10 : moveUp;\r\n\t\t\tmoveDown = (moveDown<0) ? moveDown+10 : moveDown;\r\n\t\t\t\r\n\t\t\tmoves += Math.min(moveUp, moveDown);\r\n\t\t}\r\n\t\treturn moves;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tCombinationLock cl = new CombinationLock();\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t\r\n\t\tint n = in.nextInt();\r\n\t\tString s1 = in.next();\r\n\t\tString s2 = in.next();\r\n\t\tSystem.out.println(cl.solution(s1, s2));\r\n\t\t\r\n\t\tin.close();\r\n\t}\r\n}"
}