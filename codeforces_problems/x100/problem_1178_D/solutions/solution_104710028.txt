{
    "id": 104710028,
    "contestId": 1178,
    "creationTimeSeconds": 1610991653,
    "relativeTimeSeconds": 7853,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "spiralJava_"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1610983800
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n/**\r\n *\r\n * @author Dstoical\r\n */\r\n\r\npublic class D {\r\n\r\n\tprivate static long INF = 2000000000L, M = 1000000007, MM = 998244353;\r\n\tprivate static int N = 0;\r\n\t\r\n\tpublic static int[] generatePrimes(int n) {\r\n\t    boolean[] prime = new boolean[n + 1];\r\n\t    Arrays.fill(prime, 2, n + 1, true);\r\n\t    for (int i = 2; i * i <= n; i++)\r\n\t      if (prime[i])\r\n\t        for (int j = i * i; j <= n; j += i)\r\n\t          prime[j] = false;\r\n\t    int[] primes = new int[n + 1];\r\n\t    int cnt = 0;\r\n\t    for (int i = 0; i < prime.length; i++)\r\n\t      if (prime[i])\r\n\t        primes[cnt++] = i;\r\n\r\n \t    return Arrays.copyOf(primes, cnt);\r\n\t  }\r\n\tpublic static void process() throws IOException {\r\n\t\tint n = sc.nextInt();\r\n\t\tint arr[] = generatePrimes(n+100);\r\n\t\tTreeSet<Integer> lis = new TreeSet<Integer>();\r\n\t\tfor(int e : arr)lis.add(e);\r\n\t\tint val = lis.ceiling(n);\r\n\t\tint extra = val-n;\r\n\t\tprintln(n+extra);\r\n\t\tfor(int i=1; i<=n; i++) {\r\n\t\t\tprintln(i+\" \"+((i)%n+1));\r\n\t\t}\r\n\t\tint ff = 1;\r\n\t\tint ss = n/2+1;\r\n\t\twhile(extra-- != 0) {\r\n\t\t\tprintln((ff)+\" \"+(ss));\r\n\t\t\tff++;\r\n\t\t\tss++;\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\r\n\t}\r\n\r\n\t//=============================================================================\r\n\t//--------------------------The End---------------------------------\r\n\t//=============================================================================\r\n\r\n\tstatic FastScanner sc;\r\n\tstatic PrintWriter out;\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tboolean oj = true;\r\n\t\tif (oj) {\r\n\t\t\tsc = new FastScanner();\r\n\t\t\tout = new PrintWriter(System.out);\r\n\t\t} else {\r\n\t\t\tsc = new FastScanner(100);\r\n\t\t\tout = new PrintWriter(\"output.txt\");\r\n\t\t}\r\n\t\tint t = 1;\r\n//\t\tt = sc.nextInt();\r\n\t\twhile (t-- > 0) {\r\n\t\t\tprocess();\r\n\t\t}\r\n\t\tout.flush();\r\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic class Pair implements Comparable<Pair> {\r\n\t\tint x, y;\r\n\r\n\t\tPair(int x, int y) {\r\n\t\t\tthis.x = x;\r\n\t\t\tthis.y = y;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic int compareTo(Pair o) {\r\n\t\t\treturn Integer.compare(this.x, o.x);\r\n\t\t}\r\n\t}\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\tstatic void println(Object o) {\r\n\t\tout.println(o);\r\n\t}\r\n\r\n\tstatic void println() {\r\n\t\tout.println();\r\n\t}\r\n\r\n\tstatic void print(Object o) {\r\n\t\tout.print(o);\r\n\t}\r\n\r\n\tstatic void pflush(Object o) {\r\n\t\tout.println(o);\r\n\t\tout.flush();\r\n\t}\r\n\r\n\tstatic int ceil(int x, int y) {\r\n\t\treturn (x % y == 0 ? x / y : (x / y + 1));\r\n\t}\r\n\r\n\tstatic long ceil(long x, long y) {\r\n\t\treturn (x % y == 0 ? x / y : (x / y + 1));\r\n\t}\r\n\r\n\tstatic int max(int x, int y) {\r\n\t\treturn Math.max(x, y);\r\n\t}\r\n\r\n\tstatic int min(int x, int y) {\r\n\t\treturn Math.min(x, y);\r\n\t}\r\n\r\n\tstatic int abs(int x) {\r\n\t\treturn Math.abs(x);\r\n\t}\r\n\r\n\tstatic long abs(long x) {\r\n\t\treturn Math.abs(x);\r\n\t}\r\n\r\n\tstatic int log2(int N) {\r\n\t\tint result = (int) (Math.log(N) / Math.log(2));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tstatic long max(long x, long y) {\r\n\t\treturn Math.max(x, y);\r\n\t}\r\n\r\n\tstatic long min(long x, long y) {\r\n\t\treturn Math.min(x, y);\r\n\t}\r\n\r\n\tpublic static int gcd(int a, int b) {\r\n\t\tBigInteger b1 = BigInteger.valueOf(a);\r\n\t\tBigInteger b2 = BigInteger.valueOf(b);\r\n\t\tBigInteger gcd = b1.gcd(b2);\r\n\t\treturn gcd.intValue();\r\n\t}\r\n\r\n\tpublic static long gcd(long a, long b) {\r\n\t\tBigInteger b1 = BigInteger.valueOf(a);\r\n\t\tBigInteger b2 = BigInteger.valueOf(b);\r\n\t\tBigInteger gcd = b1.gcd(b2);\r\n\t\treturn gcd.longValue();\r\n\t}\r\n\r\n\t/////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\tstatic class FastScanner {\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tFastScanner() throws FileNotFoundException {\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t}\r\n\r\n\t\tFastScanner(int a) throws FileNotFoundException {\r\n\t\t\tbr = new BufferedReader(new FileReader(\"input.txt\"));\r\n\t\t}\r\n\r\n\t\tString next() throws IOException {\r\n\t\t\twhile (st == null || !st.hasMoreElements()) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tint nextInt() throws IOException {\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\r\n\t\tlong nextLong() throws IOException {\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\r\n\t\tdouble nextDouble() throws IOException {\r\n\t\t\treturn Double.parseDouble(next());\r\n\t\t}\r\n\r\n\t\tString nextLine() throws IOException {\r\n\t\t\tString str = \"\";\r\n\t\t\ttry {\r\n\t\t\t\tstr = br.readLine();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\treturn str;\r\n\t\t}\r\n\r\n\t\tint[] readArray(int n) throws IOException {\r\n\t\t\tint[] A = new int[n];\r\n\t\t\tfor (int i = 0; i != n; i++) {\r\n\t\t\t\tA[i] = sc.nextInt();\r\n\t\t\t}\r\n\t\t\treturn A;\r\n\t\t}\r\n\r\n\t\tlong[] readArrayLong(int n) throws IOException {\r\n\t\t\tlong[] A = new long[n];\r\n\t\t\tfor (int i = 0; i != n; i++) {\r\n\t\t\t\tA[i] = sc.nextLong();\r\n\t\t\t}\r\n\t\t\treturn A;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic void ruffleSort(int[] a) {\r\n\t\tRandom get = new Random();\r\n\t\tfor (int i = 0; i < a.length; i++) {\r\n\t\t\tint r = get.nextInt(a.length);\r\n\t\t\tint temp = a[i];\r\n\t\t\ta[i] = a[r];\r\n\t\t\ta[r] = temp;\r\n\t\t}\r\n\t\tArrays.sort(a);\r\n\t}\r\n\r\n\tstatic void ruffleSort(long[] a) {\r\n\t\tRandom get = new Random();\r\n\t\tfor (int i = 0; i < a.length; i++) {\r\n\t\t\tint r = get.nextInt(a.length);\r\n\t\t\tlong temp = a[i];\r\n\t\t\ta[i] = a[r];\r\n\t\t\ta[r] = temp;\r\n\t\t}\r\n\t\tArrays.sort(a);\r\n\t}\r\n}\r\n"
}