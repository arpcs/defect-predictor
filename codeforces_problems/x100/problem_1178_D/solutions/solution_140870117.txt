{
    "id": 140870117,
    "contestId": 1178,
    "creationTimeSeconds": 1640678230,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "lp191"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "view code#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef pair<int,int> PII;\r\nconst int maxn=100010;\r\n#define MP make_pair\r\n#define PB push_back\r\n#define lson o<<1,l,mid\r\n#define rson o<<1|1,mid+1,r\r\n#define FOR(i,a,b) for(int i=(a);i<=(b);i++)\r\n#define ROF(i,a,b) for(int i=(a);i>=(b);i--)\r\n#define MEM(x,v) memset(x,v,sizeof(x))\r\ninline ll read(){\r\n    char ch=getchar();ll x=0,f=0;\r\n    while(ch<'0' || ch>'9') f|=ch=='-',ch=getchar();\r\n    while(ch>='0' && ch<='9') x=x*10+ch-'0',ch=getchar();\r\n    return f?-x:x;\r\n}\r\nint n,m,cnt;\r\nbool use[maxn];\r\nbool check(int x){\r\n    if(x==1) return false;\r\n    for(int i=2;i*i<=x;i++) if(x%i==0) return false;\r\n    return true;\r\n}\r\nint main(){\r\n    n=m=read();\r\n    while(!check(m)) m++;\r\n    cnt=m-n;\r\n    printf(\"%d\\n\",m);\r\n    FOR(i,1,n){\r\n        printf(\"%d %d\\n\",i,i%n+1);\r\n        if(cnt && !use[i]){\r\n            int to=i%n+1;\r\n            to=to%n+1;\r\n            while(use[to]) to=to%n+1;\r\n            use[i]=use[to]=true;\r\n            printf(\"%d %d\\n\",i,to);\r\n            cnt--;\r\n        }\r\n    }\r\n}"
}