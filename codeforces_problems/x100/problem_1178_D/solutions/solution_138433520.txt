{
    "id": 138433520,
    "contestId": 1178,
    "creationTimeSeconds": 1638961639,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 7987200,
    "source": "#include <iostream>\n#include<bits/stdc++.h>\n#define all(x) (x).begin(), (x).end()\n#define endl \"\\n\"\n#define vi vector<int>\n#define vii vector<pair<int,int>>\n#define pb push_back\nusing namespace std;\nusing ll = long long;\nconst ll mod = 1e9+7;\n\nll fac[1000001];\n\nvoid pre(){\n    fac[0]=fac[1]=1;\n    for(int i=2;i<=1000001;i++)\n{\n\n    fac[i]=(fac[i-1]*1LL*i)%mod;\n}\n}\n\nll binpower(ll a,ll n){\n    ll res=1;\n    while(n){\n\n    if(n%2)\n        res = (res*1LL*a)%mod;\n\n        n/=2;\n        a=(a*1LL*a)%mod;\n\n    }\n    return res;\n\n}\n\nll nCrmod(ll n,ll r){\n\n\nll res= fac[n];\nres = (res*1LL*binpower(fac[r],mod-2))%mod;\nres= (res*1LL*binpower(fac[n-r],mod-2))%mod;\nreturn res;\n\n}\n\nlong long ncr(int n, int r) {\n    if(r > n - r) r = n - r; // because C(n, r) == C(n, n - r)\n    long long ans = 1;\n    int i;\n\n    for(i = 1; i <= r; i++) {\n        ans *= n - r + i;\n        ans /= i;\n    }\n\n    return ans;\n}\nll modexp(ll a,ll b,ll m){\n    if(b==0)return 1;\n    if(b%2==0){\n        ll y =  modexp(a,b/2,m);\n        return (y*y)%m;\n    }\n    else{\n        return ((a%m)*modexp(a,b-1,m))%m;\n    }\n}\n\nll modinv(ll a,ll m){\nreturn modexp(a,m-2,m);\n//works only for prime m.\n//else calculate phi(m)-1.\n}\n\nvoid SieveOfEratosthenes(ll n)\n{\n    // Create a boolean array \"prime[0..n]\" and initialize\n    // all entries it as true. A value in prime[i] will\n    // finally be false if i is Not a prime, else true.\n    bool prime[n+1];\n    memset(prime, true, sizeof(prime));\n\n    for (ll p=2; p*p<=n; p++)\n    {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true)\n        {\n            // Update all multiples of p greater than or\n            // equal to the square of it\n            // numbers which are multiple of p and are\n            // less than p^2 are already been marked.\n            for (ll i=p*p; i<=n; i += p)\n                prime[i] = false;\n        }\n    }\n\n    // Print all prime numbers\n    for (ll p=2; p<=n; p++)\n       if (prime[p])\n          cout << p << \" \";\n}\n\nvector<int> Centroid(vector<int>g[],int n) {\n\n        vector<int> centroid;\n        vector<int> sz(n+1);\n        function<void (int, int)> dfs = [&](int u, int prev) {\n                sz[u] = 1;\n                bool is_centroid = true;\n                for (auto v : g[u]) if (v != prev) {\n                        dfs(v, u);\n                        sz[u] += sz[v];\n                        if (sz[v] > n / 2) is_centroid = false;\n                }\n                if (n - sz[u] > n / 2) is_centroid = false;\n                if (is_centroid) centroid.push_back(u);\n        };\n        dfs(1, 0);\n        return centroid;\n}\nbool is_prime(int n){\n    if(n==2)return 1;\n    if(n<2)return 0;\n    for(int i=2;i*i<=n;i++){\n        if(n%i==0)return 0;\n    }\n    return 1;\n}\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    int n;\n    cin>>n;\n    vector<pair<int,int>>v;\n    for(int i=1;i<=n-1;i++){\n        v.pb({i,i+1});\n\n    }\n    v.pb({n,1});\n    int cnt=n;\n    int cur=1;\n   if(!is_prime(n)){\n    for(int i=n+1;i<=n+n-1;i++){\n        v.pb({cur,cur+2});\n        cnt++;\n        if(is_prime(i))break;\n    }\n   }\n   cout<<cnt<<endl;\n   for(auto x:v)\n  {\n      cout<<x.first<<\" \"<<x.second<<endl;\n  }\n\n\n\n    return 0;\n}\n\n\t    \t \t\t\t \t\t     \t \t \t\t   \t \t\t"
}