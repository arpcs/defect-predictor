{
    "id": 154016386,
    "contestId": 1178,
    "creationTimeSeconds": 1650302888,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "aman76520"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long int ll;\r\ntypedef long double ld;\r\n#define fo(i, n) for (i = 0; i < n; i++)\r\n#define pb push_back\r\n#define all(v) v.begin(),v.end()\r\n#define m_p make_pair\r\n// const ll M = 1e6;\r\n// // Boolean array to store\r\n// // if a number is prime or not\r\n// bool isPrime[M];\r\n// // vector<int> primes;\r\n// //---------------------------------------------------------------------------------------------\r\n// inline ll ceil_div(ll a, ll b) \r\n// { \r\n//     return a / b + ((a ^ b) > 0 && a % b); \r\n// }\r\n// void SieveOfEratosthenes()\r\n// {\r\n//     // assigh value false\r\n//     // to the boolean array isprime\r\n//     memset(isPrime, true, sizeof(isPrime));\r\n//     for (int i = 2; i * i <= M; i++) {\r\n//         // If isPrime[i] is not changed,\r\n//         // then it is a prime\r\n//         if (isPrime[i]) {\r\n//             // Update all multiples of i greater than or\r\n//             // equal to the square of it numbers which are\r\n//             // multiple of i and are less than i^2 are\r\n//             // already been marked.\r\n//             for (int j = i * i; j < M; j += i)\r\n//                 isPrime[j] = false;\r\n//         }\r\n//     }\r\n// }\r\n//---------------------------------------------------------------------------------------------\r\n// // vector<int> primes;\r\n \r\n// // Utility function of Sieve of Sundaram\r\n// void Sieve()\r\n// {\r\n//     ll n = 1e10;\r\n \r\n//     // In general Sieve of Sundaram, produces primes\r\n//     // smaller than (2*x + 2) for a number given\r\n//     // number x\r\n//     ll nNew = sqrt(n);\r\n \r\n//     // This array is used to separate numbers of the\r\n//     // form i+j+2ij from others where  1 <= i <= j\r\n//     ll marked[n/2+500] = {0};\r\n \r\n//     // eliminate indexes which does not produce primes\r\n//     for (ll i=1; i<=(nNew-1)/2; i++)\r\n//         for (ll j=(i*(i+1))<<1; j<=n/2; j=j+2*i+1)\r\n//             marked[j] = 1;\r\n \r\n//     // Since 2 is a prime number\r\n//     primes.push_back(2);\r\n \r\n//     // Remaining primes are of the form 2*i + 1 such\r\n//     // that marked[i] is false.\r\n//     for (ll i=1; i<=n/2; i++)\r\n//         if (marked[i] == 0)\r\n//             primes.push_back(2*i + 1);\r\n// }\r\n \r\n// // modified binary search to find nearest prime less than N\r\n//       ll binarySearch(ll left,ll right,ll n)\r\n// {\r\n//     if (left<=right)\r\n//     {\r\n//         ll mid = (left + right)/2;\r\n \r\n//         // base condition is, if we are reaching at left\r\n//         // corner or right corner of primes[] array then\r\n//         // return that corner element because before or\r\n//         // after that we don't have any prime number in\r\n//         // primes array\r\n//         if (mid == 0 || mid == primes.size()-1)\r\n//             return primes[mid];\r\n \r\n//         // now if n is itself a prime so it will be present\r\n//         // in primes array and here we have to find nearest\r\n//         // prime less than n so we will return primes[mid-1]\r\n//         if (primes[mid] == n)\r\n//             return primes[mid-1];\r\n \r\n//         // now if primes[mid]<n and primes[mid+1]>n that\r\n//         // mean we reached at nearest prime\r\n//         if (primes[mid] < n && primes[mid+1] > n)\r\n//             return primes[mid];\r\n//         if (n < primes[mid])\r\n//             return binarySearch(left, mid-1, n);\r\n//         else\r\n//             return binarySearch(mid+1, right, n);\r\n//     }\r\n//     return 0;\r\n// }\r\n//---------------------------------------------------------------------------------------------\r\nbool isPrime(ll n)\r\n{\r\n    // Corner cases\r\n    if (n <= 1)  return false;\r\n    if (n <= 3)  return true;\r\n   \r\n    // This is checked so that we can skip \r\n    // middle five numbers in below loop\r\n    if (n%2 == 0 || n%3 == 0) return false;\r\n   \r\n    for (ll i=5; i*i<=n; i=i+6)\r\n        if (n%i == 0 || n%(i+2) == 0)\r\n          return false;\r\n   \r\n    return true;\r\n}\r\n \r\n// Function to return the smallest\r\n// prime number greater than N\r\nint nextPrime(ll N)\r\n{\r\n \r\n    // Base case\r\n    if (N <= 1)\r\n        return 2;\r\n \r\n    int prime = N;\r\n    bool found = false;\r\n \r\n    // Loop continuously until isPrime returns\r\n    // true for a number greater than n\r\n    while (!found) {\r\n        prime++;\r\n \r\n        if (isPrime(prime))\r\n            found = true;\r\n    }\r\n \r\n    return prime;\r\n}\r\n//-------------------------------------------------------------------------------------\r\nvoid solve()\r\n{\r\n    ll n;\r\n    cin>>n;\r\n    ll p=nextPrime(n-1);\r\n    ll i;\r\n    vector<pair<ll,ll>>pp;\r\n    fo(i,n-1)\r\n    pp.pb({i+1,i+2});\r\n    pp.pb({n,1});\r\n    if(p==n)\r\n    {\r\n        cout<<pp.size()<<\"\\n\";\r\n        for(auto num:pp)\r\n        {\r\n            cout<<num.first<<\" \"<<num.second<<\"\\n\";\r\n        }\r\n        return;\r\n    }\r\n    ll x=p-n;\r\n    // cout<<x<<\"\\n\";\r\n    for(i=1;i<=x;i++)\r\n    {\r\n        pp.pb({i,i+x});\r\n    }\r\n    cout<<pp.size()<<\"\\n\";\r\n        for(auto num:pp)\r\n        {\r\n            cout<<num.first<<\" \"<<num.second<<\"\\n\";\r\n        }\r\n}\r\nint main()\r\n{ \r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);cout.tie(0);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    ll t;\r\n    // cin>>t;\r\n    t=1;\r\n    while(t--)\r\n    {\r\n        solve();\r\n    }\r\n}"
}