{
    "id": 105060446,
    "contestId": 1178,
    "creationTimeSeconds": 1611316363,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "honeysingh18"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\npublic class Main {\r\n    public static void main(String args[])\r\n    {\r\n        FastReader input=new FastReader();\r\n        PrintWriter out=new PrintWriter(System.out);\r\n        int T=1;\r\n        while(T-->0)\r\n        {\r\n            int n=input.nextInt();\r\n            int v=n;\r\n            while(!isPrime(v))\r\n            {\r\n                v++;\r\n            }\r\n            int d=v-n;\r\n            out.println(v);\r\n            for(int i=1;i<=n;i++)\r\n            {\r\n                if(i<n)\r\n                {\r\n                    out.println(i+\" \"+(i+1));\r\n                }\r\n                else\r\n                {\r\n                    out.println(i+\" \"+1);\r\n                }\r\n            }\r\n            int x=n/2+1;\r\n            int y=1;\r\n            for(int i=0;i<d;i++)\r\n            {\r\n                out.println(y+\" \"+x);\r\n                y++;\r\n                x++;\r\n            }\r\n        }\r\n        out.close();\r\n    }\r\n    static boolean isPrime(int n)\r\n    {\r\n        // Corner cases\r\n        if (n <= 1)\r\n            return false;\r\n        if (n <= 3)\r\n            return true;\r\n\r\n        // This is checked so that we can skip\r\n        // middle five numbers in below loop\r\n        if (n % 2 == 0 || n % 3 == 0)\r\n            return false;\r\n\r\n        for (int i = 5; i * i <= n; i = i + 6)\r\n            if (n % i == 0 || n % (i + 2) == 0)\r\n                return false;\r\n\r\n        return true;\r\n    }\r\n    static class FastReader\r\n    {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n        public FastReader()\r\n        {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n        String next()\r\n        {\r\n            while (st == null || !st.hasMoreElements())\r\n            {\r\n                try\r\n                {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n        int nextInt()\r\n        {\r\n            return Integer.parseInt(next());\r\n        }\r\n        long nextLong()\r\n        {\r\n            return Long.parseLong(next());\r\n        }\r\n        double nextDouble()\r\n        {\r\n            return Double.parseDouble(next());\r\n        }\r\n        String nextLine()\r\n        {\r\n            String str = \"\";\r\n            try\r\n            {\r\n                str = br.readLine();\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n}"
}