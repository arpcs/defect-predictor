{
    "id": 88671916,
    "contestId": 1178,
    "creationTimeSeconds": 1596291483,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "Mr_Raghav"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 7065600,
    "source": "\r\n#common prefixes\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n\r\n    l=list(map(int,input().split()))\r\n    s=[]\r\n\r\n    s1=''\r\n    for i in range(51):\r\n        s1+=chr(97)\r\n\r\n    k=0\r\n    s.append(s1)\r\n    \r\n    for i in range(n):\r\n        s1=''\r\n        for j in range(51):\r\n            if j==l[i]:\r\n                k=ord(s[i][j])-97\r\n                k+=1\r\n                k=k%26\r\n                s1+=chr(97+k)\r\n                \r\n            else:\r\n                s1+=str(s[i][j])\r\n        s.append(s1)\r\n\r\n    for i in range(n+1):\r\n        print(s[i])\r\n'''\r\n\r\n#string transformation 1\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n    s1=input()\r\n    l1=list(s1)\r\n    \r\n    s2=input()\r\n    l2=list(s2)\r\n\r\n    ans=0\r\n    q=0\r\n\r\n    for i in range(n):\r\n        if s1[i] > s2[i]:\r\n            ans=-1\r\n            break\r\n\r\n        else:\r\n            q=ord(s1[i])-96\r\n\r\n    if ans==-1:\r\n        print(\"-1\")\r\n\r\n    else:\r\n        for i in range(97,97+q):\r\n            mnn='t'\r\n            temp=[]\r\n\r\n            for j in range(n):\r\n                if l1[j]!=l2[j] and l1[j]==chr(i):\r\n                    temp.append(j)\r\n                    mnn=min(l2[j],mnn)\r\n\r\n            if len(temp)!=0:\r\n\r\n                ans+=1\r\n                for j in temp:\r\n                    l1[j]=mnn\r\n\r\n        print(ans)\r\n'''\r\n\r\n#ternary string\r\n'''\r\ndef valid(mid,s):\r\n\r\n    t=[0,0,0,0]\r\n\r\n    for i in range(mid-1):\r\n        fre=int(s[i])\r\n        t[fre]+=1\r\n\r\n    for i in range(mid-1,len(s)):\r\n        fre=int(s[i])\r\n#        print(fre)\r\n        t[fre]+=1\r\n\r\n        if t[1]>0 and t[3]>0 and t[2]>0:\r\n            return True\r\n\r\n        fre=int(s[i-mid+1])\r\n        t[fre]-=1\r\n        \r\n    return False\r\n        \r\ndef binary(s):\r\n\r\n    res=float('inf')\r\n\r\n    l=3\r\n    r=len(s)\r\n\r\n    while l<=r:\r\n        mid=(l+r)//2\r\n\r\n        if valid(mid,s):\r\n            res=mid\r\n            r=res-1\r\n            \r\n        else:\r\n            l=mid+1\r\n\r\n    if res==float('inf'):\r\n        return 0\r\n    else:\r\n        return res\r\n            \r\nfor _ in range(int(input())):\r\n\r\n    s=input()\r\n\r\n    print(binary(s))\r\n    \r\n'''\r\n\r\n#maximum GCD\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n\r\n    if n>=2:\r\n        ans=int(n/2)\r\n\r\n    else:\r\n        ans=1\r\n\r\n    print(ans)\r\n'''\r\n\r\n#GCD compression\r\n'''\r\nimport math\r\n\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n\r\n    l=list(map(int,input().split()))\r\n\r\n    even=[]\r\n    odd=[]\r\n    d=2*n\r\n    \r\n    for i in range(d):\r\n        if l[i]%2==0:\r\n            even.append(i)\r\n\r\n        else:\r\n            odd.append(i)\r\n\r\n    count=0\r\n\r\n    for i in range(0,len(even)-1,2):\r\n        print(even[i]+1,even[i+1]+1)\r\n        count+=1\r\n        if count==n-1:\r\n            break\r\n\r\n    if count<n-1:\r\n        for i in range(0,len(odd)-1,2):\r\n            print(odd[i]+1,odd[i+1]+1)\r\n            count+=1\r\n            if count==n-1:\r\n                break\r\n'''\r\n\r\n'''\r\ndef combinationutil(arr,n,r,index,data,i):\r\n\r\n    if index==r:\r\n        for j in range(r):\r\n            print(data[j],end=\" \")\r\n\r\n        print(\" \")\r\n        return\r\n\r\n\r\n    if i>=n:\r\n        return\r\n\r\n\r\n    data[index]=arr[i]\r\n    combinationutil(arr,n,r,index+1,data,i+1)\r\n\r\n    combinationutil(arr,n,r,index,data,i+1)\r\n    \r\n    \r\ndef printcomb(arr,n,r):\r\n\r\n    data=list(range(r))\r\n\r\n    combinationutil(arr,n,r,0,data,0)\r\n\r\n    \r\narr=[10,20,30,40,50]\r\nr=3\r\nn=len(arr)\r\nprintcomb(arr,n,r)\r\n\r\n'''\r\n\r\n\r\n#number game\r\n'''\r\ndef calculate(n):\r\n\r\n    count1=0\r\n    \r\n    while n%2==0:\r\n        n=n//2\r\n        count1+=1\r\n\r\n    if n==1:\r\n        print('FastestFinger')\r\n\r\n    elif count1>1:\r\n        print('Ashishgup')\r\n\r\n    elif count1==1:\r\n        for i in range(3,n+1,2):\r\n            if n%i==0:\r\n                n=n//i\r\n                if n!=1:\r\n                    count=2\r\n                    break\r\n                else:\r\n                    count=1\r\n                    break\r\n\r\n        if count==1:\r\n            print(\"FastestFinger\")\r\n\r\n        else:\r\n            print(\"Ashishgup\")\r\n    \r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n\r\n    if n>1 and n%2==1:\r\n        print(\"Ashishgup\")\r\n\r\n    elif n==2:\r\n        print(\"Ashishgup\")\r\n    elif n==1:\r\n        print(\"FastestFinger\")\r\n\r\n    else:\r\n\r\n        calculate(n)\r\n\r\n'''     \r\n\r\n#alternating subsequence\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n\r\n    l=list(map(int,input().split()))\r\n\r\n    su=i=mxx=0\r\n    \r\n    while i<=n-1:\r\n        mxx=-pow(10,18)\r\n        if l[i]>0:\r\n            \r\n            j=i\r\n            while j<n and l[j] > 0 :\r\n                if mxx<l[j]:\r\n                    mxx=l[j]\r\n                j+=1\r\n\r\n            su+=mxx\r\n            i=j\r\n\r\n        else:\r\n            j=i\r\n            while(j<n and l[j]<0):\r\n                if mxx<l[j]:\r\n                    mxx=l[j]\r\n                j+=1\r\n\r\n            su+=mxx\r\n            i=j\r\n\r\n    print(su)\r\n'''\r\n\r\n#Nastya and strange generator\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n\r\n    index=[0]*(n+1)\r\n    \r\n    for i in range(n):\r\n        index[l[i]]=i\r\n        \r\n    count=[1]*n\r\n    \r\n    r=[i for i in range(n)]\r\n\r\n    t=index[1]\r\n    flag=0\r\n    \r\n    for i in range(1,n+1):\r\n        if index[i]!=t:\r\n            flag=1\r\n            break\r\n        \r\n        count[index[i]]=0\r\n\r\n\r\n        j=index[i]\r\n        while j<n and count[j]==0:\r\n            j+=1\r\n\r\n#        print(j)\r\n        if j<n:\r\n            r[index[i]]=j\r\n            count[j]+=1\r\n        else:\r\n            r[index[i]]='X'\r\n\r\n\r\n        if j<n:\r\n            t=j\r\n\r\n        else:\r\n            if i+1<n+1:\r\n                t=index[i+1]\r\n\r\n    if flag==1:\r\n        print(\"No\")\r\n\r\n    else:\r\n        print(\"Yes\")\r\n\r\n'''\r\n\r\n#Weights distributing   tle\r\n'''\r\nfrom collections import defaultdict\r\nclass graph:\r\n\r\n    def __init__(self,v):\r\n        self.vertex=v\r\n        self.graph=defaultdict(list)\r\n\r\n    def add(self,u,v):\r\n        self.graph[u].append(v)\r\n        self.graph[v].append(u)\r\n\r\n    def bfs(self,s,l):\r\n\r\n        queue=[]\r\n        l[s]=0\r\n        queue.append(s)\r\n\r\n        while(len(queue)!=0):\r\n            node=queue.pop(0)\r\n\r\n            for item in self.graph[node]:\r\n                if l[item]==float('inf'):\r\n                    l[item]=l[node]+1\r\n                    queue.append(item)\r\n\r\n\r\nfor _ in range(int(input())):\r\n\r\n    n,m,a,b,c=map(int,input().split())\r\n\r\n    a-=1\r\n    b-=1\r\n    c-=1\r\n    \r\n    l=list(map(int,input().split()))\r\n    l.sort()\r\n\r\n    pref=[0]*(m+1)\r\n\r\n    for i in range(m):\r\n        pref[i+1]=pref[i]+l[i]\r\n\r\n    g=graph(n)\r\n    for i in range(m):\r\n        q,w=map(int,input().split())\r\n        g.add( q-1,w-1 )\r\n\r\n    da=[float('inf')]*n\r\n    db=[float('inf')]*n\r\n    dc=[float('inf')]*n\r\n\r\n    g.bfs(a,da)\r\n    g.bfs(b,db)\r\n    g.bfs(c,dc)\r\n\r\n    ans=float('inf')\r\n\r\n    for i in range(n):\r\n        if da[i]+db[i]+dc[i]<=m:\r\n            ans = min(ans, pref[db[i]]+pref[da[i] + db[i] + dc[i]])\r\n\r\n    print(ans)\r\n\r\n'''\r\n\r\n#Lcm\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    l,r=map(int,input().split())\r\n\r\n    if l*2>r:\r\n        print('-1','-1')\r\n\r\n    else:\r\n        print(l,l*2)\r\n\r\n'''\r\n\r\n#Two polygon\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n,m=map(int,input().split())\r\n\r\n    if n%m==0:\r\n        print(\"YES\")\r\n\r\n    else:\r\n        print(\"NO\")\r\n\r\n'''\r\n\r\n#XXXXX\r\n'''\r\nfor j in range(int(input())):\r\n\r\n    n,x=map(int,input().split())\r\n\r\n    l=list(map(int,input().split()))\r\n\r\n    pre=[0]*(n+1)\r\n    suf=[0]*(n+1)\r\n\r\n    mxx1=mxx2=-1\r\n    \r\n    suf[n]=l[n-1]\r\n\r\n    if suf[n]%x!=0:\r\n        mxx2=n\r\n#    print(mxx2)\r\n    \r\n    for i in range(1,n+1):\r\n        pre[i]=pre[i-1]+l[i-1]\r\n        if pre[i]%x!=0:\r\n            mxx1=i\r\n#            print(mxx1)\r\n            \r\n        suf[n-i]=suf[n-i+1]+l[n-i-1]\r\n#        print(suf[n-i],'t2')\r\n        if suf[n-i]%x!=0 and n-i!=0:\r\n            \r\n            mxx2=n-i\r\n#            print(mxx2)\r\n            \r\n\r\n    suf[0]=0\r\n\r\n    k=n+1-mxx2\r\n#    print(k)\r\n    \r\n    if mxx1>0:\r\n        if mxx2>0:\r\n            print(max(mxx1,k))\r\n\r\n        else:\r\n            print(mxx1)\r\n\r\n    else:\r\n        print('-1')\r\n\r\n'''\r\n\r\n#1-08-2020\r\n\r\n\r\n#Buying Shovels\r\n'''\r\nimport math\r\n\r\ndef factors(n):\r\n    t=int(math.sqrt(n))\r\n\r\n    ans=0\r\n    \r\n    for i in range(2,t+1):\r\n        if n%i==0:\r\n            if n//i!=i and n//i<=k:\r\n                ans=n//i\r\n                break\r\n\r\n            elif i<=k:\r\n                ans=i\r\n\r\n    return ans\r\n\r\nfor _ in range(int(input())):\r\n\r\n    n,k=map(int,input().split())\r\n\r\n    if n<=k:\r\n        ans=n\r\n\r\n    else:\r\n        ans=factors(n)\r\n        if ans==0:\r\n            ans=1\r\n\r\n    print(n//ans)\r\n        \r\n'''\r\n\r\n#Orac and models\r\n'''\r\nfor _ in range(int(input())):\r\n\r\n    n=int(input())\r\n    l=list(map(int,input().split()))\r\n\r\n    k=[0]*n\r\n    \r\n    for i in range(n):\r\n        k[i]=1\r\n        for j in range(i-1,-1,-1):\r\n\r\n            if l[i]%l[j]==0 and k[i]<k[j]+1:\r\n                k[i]=k[j]+1\r\n\r\n\r\n    print(max(k))\r\n\r\n'''\r\n\r\n#Prime Subtraction\r\n'''   \r\nfor _ in range(int(input())):\r\n\r\n    x,y=map(int,input().split())\r\n\r\n    k=x-y\r\n\r\n    if k==1:\r\n        print(\"NO\")\r\n\r\n    else:\r\n        print(\"YES\")\r\n'''\r\n\r\n#Round Corridor\r\n'''\r\nn1,m1,q=map(int,input().split())\r\n\r\nn=n1-2\r\nm=m1-2\r\n\r\na=n//2\r\nb=m//2\r\n\r\nfor i in range(q):\r\n    s_x,s_y,e_x,e_y=map(int,input().split())\r\n \r\n    if (n1%2==0 and m1%2==0) or (n1%2==1 and m1%2==1):\r\n        if n1!=m1:\r\n            if s_x==1 and e_x==1:\r\n                if s_y <=a+1 and e_y <=a+1:\r\n                    print(\"YES\")\r\n\r\n                elif s_y >a+1 and e+y >a+1:\r\n                    print(\"YES\")\r\n\r\n                else:\r\n                    print(\"NO\")\r\n\r\n            elif s_x==1 and e_x==2:\r\n                if s_y <=a+1 and e_y<=b+1:\r\n                    print(\"YES\")\r\n\r\n                elif s_y >a+1 and e_y >b+1:\r\n                    print(\"YES\")\r\n\r\n                else:\r\n                    print(\"NO\")\r\n\r\n            elif s_x==2 and e_x==1:\r\n                if s_y<=b+1 and e_y <=a+1:\r\n                    print(\"YES\")\r\n\r\n                elif s_y>b+1 and e_y>a+1:\r\n                    print(\"YES\")\r\n\r\n                else:\r\n                    print(\"NO\")\r\n\r\n            else:\r\n                if s_y<=b+1 and e_y<=b+1:\r\n                    print(\"YES\")\r\n\r\n                elif s_y>b+1 and e_y>b+1:\r\n                    print(\"YES\")\r\n\r\n                else:\r\n                    print(\"NO\")\r\n\r\n        else:\r\n            if s_y == e_y:\r\n                print(\"YES\")\r\n\r\n            else:\r\n                print(\"NO\")\r\n\r\n    else:\r\n        print(\"YES\")  \r\n\r\n'''\r\n#correc one\r\n'''\r\nimport math\r\n\r\nn,m,q=map(int,input().split())\r\n\r\nd=math.gcd(n,m)\r\na=0,n//d,m//d\r\n\r\nfor _ in[0]*q:\r\n    u,x,v,y=map(int,input().split())\r\n\r\n    if (x-1)//a[u]==(y-1)//a[v]:\r\n        print(\"YES\")\r\n\r\n    else:\r\n        print(\"NO\")\r\n\r\n'''\r\n\r\n#Multiple Table\r\n#wrong approach\r\n'''\r\ndef find_gcd(a,b):\r\n    if b==0:\r\n        return a\r\n\r\n    return find_gcd(b,a%b)\r\n\r\n\r\nn=int(input())\r\n\r\nl=[[0 for i in range(n)]for j in range(n)]\r\n\r\nt=[]\r\n\r\nfor i in range(n):\r\n    a=list(map(int,input().split()))\r\n    result=0\r\n    for j in range(i,n):\r\n        if i==j:\r\n            l[i][j]=a[i]\r\n\r\n        else:\r\n            l[i][j]=a[j]\r\n            l[j][i]=a[j]  \r\n\r\nfor i in range(n):\r\n    result=0\r\n    for j in range(n):\r\n        result=find_gcd(result,l[i][j])\r\n\r\n    t.append(result)\r\n\r\nfor i in range(n):\r\n    print(t[i],end=\" \")\r\n\r\n'''\r\n#correct ones\r\n'''\r\nimport math\r\nn=int(input())\r\n\r\nl=[[0 for i in range(n)]for j in range(n)]\r\n\r\nt=[]\r\n\r\nfor i in range(n):\r\n    a=list(map(int,input().split()))\r\n    result=0\r\n    for j in range(i,n):\r\n        if i==j:\r\n            l[i][j]=a[i]\r\n\r\n        else:\r\n            l[i][j]=a[j]\r\n            l[j][i]=a[j]\r\n\r\nt.append(int(math.sqrt((l[0][1]*l[0][2])//l[1][2])))\r\nprint(t[0],end=\" \")\r\n\r\nfor i in range(1,n):\r\n    a=l[0][i]//t[0]\r\n\r\n    print(a,end=\" \")\r\n\r\n'''\r\n\r\n#Submarine in the rybinsk sea\r\n'''\r\n\r\nn=int(input())\r\n\r\nl=list(input().split())\r\n\r\nt=[]\r\na=len(l[0])\r\nsu=0\r\n\r\nfor i in range(n):\r\n    s=''\r\n\r\n    for j in range(a):\r\n        s+=l[i][j]\r\n        s+=l[i][j]\r\n\r\n    su+=int(s)\r\n    \r\nq=[0]*(a*2)\r\n\r\nfor i in range(n):\r\n    s=''\r\n    for j in range(i+1,n):\r\n        \r\n        for k in range(a):\r\n            q[2*k]=l[i][k]\r\n            q[1+(2*k)]=l[j][k]\r\n\r\n        x=''.join(q)\r\n        su+=int(x)\r\n\r\n        for k in range(a):\r\n            q[2*k+1]=l[i][k]\r\n            q[2*k]=l[j][k]\r\n\r\n        x=''.join(q)\r\n        su+=int(x)\r\n\r\nprint(su%998244353)\r\n\r\n'''\r\n\r\n#Prime Graph\r\n\r\ndef prime(n):\r\n\r\n    l=[-1]*n\r\n    visited=[False]*n\r\n\r\n    visited[0]=True\r\n    visited[1]=True\r\n\r\n    p=2\r\n    while p*p < n:\r\n        if visited[p]==False:\r\n\r\n            for i in range(p*p,n,p):\r\n                l[i]=p\r\n                visited[i]=True\r\n\r\n        p+=1\r\n\r\n    d=[]\r\n    \r\n    for i in range(n):\r\n        if not visited[i]:\r\n            d.append(i)\r\n\r\n    return d\r\n\r\ndef binary(k,n,primes):\r\n    start=0\r\n    last=n\r\n    j=0\r\n    \r\n    while start<last:\r\n        mid=(start+last)//2\r\n\r\n        if primes[mid]==k:\r\n            return 'YES',mid\r\n\r\n        elif primes[mid]>k:\r\n            last=mid\r\n            j=last\r\n\r\n            if primes[last]>n and primes[last-1]<n:\r\n                return last\r\n            \r\n        else:\r\n            start=mid+1\r\n            j=start\r\n\r\n            if primes[start]<n and primes[start+1]>n:\r\n                return start+1\r\n\r\n    return j\r\n            \r\nn=int(input())\r\n\r\nprimes=prime(1013)\r\n\r\nt=binary(n,len(primes)-1,primes)\r\n\r\nprint(primes[t])\r\ncount=0\r\n\r\nfor i in range(n):\r\n        \r\n    print((i)%(n+1)+1,(i+1)%(n)+1)\r\n    count+=1\r\n\r\nfor i in range(primes[t]-count):\r\n    print(i+1,i+1+n//2)\r\n    count+=1\r\n\r\n \r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n\r\n\r\n"
}