{
    "id": 145986179,
    "contestId": 1178,
    "creationTimeSeconds": 1644604899,
    "relativeTimeSeconds": 3099,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "Akpr"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1644601800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 1024000,
    "source": "\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long \r\n#define ld long double  \r\nll i,n;\r\nll find_nth_root(ll X, int n)\r\n{ll nth_root=std::trunc(std::pow(X,1.0/n));if(std::pow(nth_root+1,n)<=X){return nth_root + 1;}\r\nreturn nth_root;} \r\nbool checkperfectsquare(ll n){ if (ceil((double)sqrt(n)) == floor((double)sqrt(n)))\r\n{ return true; }else{ return false; } }\r\nll bexp(ll a, ll b){ ll res = 1; while (b > 0) { if (b & 1) res = res * a; a = a * a; b >>= 1; } \r\nreturn res; }\r\nll bexpM(ll a, ll b, ll mod) { ll res = 1; while (b > 0) \r\n{ if (b & 1) res = (res * a) % mod; a = (a * a) % mod; b >>= 1; } return res; }\r\nvector<ll> divisorsofanum(ll n){ vector<ll> v; for(i= 2; i < sqrt(n);i++){ if(n%i == 0)\r\n{ v.push_back(i); v.push_back(n/i); } }\r\nif(checkperfectsquare(n) == 1){ v.push_back(sqrt(n)); } return v; }\r\nvoid precision(int a){ cout << setprecision(a) << fixed << endl; } \r\n\r\n\r\nconst int P = 1e6;\r\nbool prime[P + 1];\r\n\r\nvoid SieveOfEratosthenes(int n)\r\n{\r\n    \r\n    memset(prime, true, sizeof(prime));\r\n \r\n    for (int p = 2; p * p <= n; p++)\r\n    {\r\n        \r\n        if (prime[p] == true)\r\n        {\r\n            for (int i = p * p; i <= n; i += p)\r\n                prime[i] = false;\r\n        }\r\n    }\r\n  \r\n}\r\n \r\n \r\n\r\n\r\n\r\n \r\n \r\n \r\n \r\nvoid solve(){\r\n    ll n;\r\n    cin >> n;\r\n    map<pair<ll,ll>,bool> mp;\r\n    for(i =2 ; i <= n;i++){\r\n         mp[{i,i - 1}] = true;\r\n    }\r\n    mp[{1,n}] = true;\r\n    ll clospr;\r\n   SieveOfEratosthenes(1e6);\r\n    for(i = n;;i++){\r\n        if(prime[i]){\r\n            clospr = i;\r\n            break;\r\n        }\r\n    }\r\n\r\n\r\n    ll j;\r\n    ll numed = n ;\r\n    for(i  =1 ; i <= n;i++){\r\n        for(j = i + 1; j<= n;j++){\r\n            if(numed == clospr)break;\r\n            if(mp.count({i,j}) == 0 && mp.count({j,i}) == 0){\r\n               mp[{i,j}] = true;\r\n               numed++;\r\n               break;\r\n            }\r\n        }\r\n    }\r\n    cout << mp.size() << endl;\r\n    for(auto i : mp){\r\n        cout << i.first.first << \" \" << i.first.second << endl;\r\n    }\r\n\r\n\r\n\r\n\r\n    \r\n}\r\n \r\n \r\n \r\n \r\nint main(){\r\nios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\nint t=1;\r\n//cin>>t;\r\nwhile(t--){\r\n    solve();\r\n cout << endl;\r\n}\r\n \r\n}\r\n\r\n\r\n\r\n"
}