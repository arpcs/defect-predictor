{
    "id": 138327087,
    "contestId": 1178,
    "creationTimeSeconds": 1638868618,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "valor"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <bits/stdc++.h> // Standard Template Library\r\n#include <cmath>\r\n#include <climits> // for range values of variable types\r\n#include <algorithm>\r\n\r\n#define ll long long\r\n#define ld long double\r\n#define F(a, b, i) for (int i = a; i < b; i++)\r\n#define FN(a, b, i) for (int i = a; i >= b; i--)\r\n\r\nusing namespace std;\r\n// using namespace chrono;\r\n\r\nconst int M = 1e9 + 7;\r\n\r\n// bool sorting(pair<ll> a, pair<ll> b)\r\n// {\r\n//     if(a.first > b.first){\r\n//         return a.first < b.first;\r\n//     }else if(a.first == b.first){\r\n//         return a.second < b.second;\r\n//     }\r\n// }\r\n\r\nbool sortcol(const vector<ll> &v1,\r\n             const vector<ll> &v2)\r\n{\r\n    return v1[0] > v2[0];\r\n}\r\n\r\n// gcd\r\nint gcd(int a, int b)\r\n{\r\n    while (b > 0)\r\n    {\r\n        a = a % b;\r\n        swap(a, b);\r\n    }\r\n    return a;\r\n}\r\n\r\n// binary exponentiation\r\nll bexp(ll a, ll b)\r\n{\r\n    ll res = 1;\r\n    while (b > 0)\r\n    {\r\n        if (b & 1)\r\n            res = res * a;\r\n        a = a * a;\r\n        b >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\n// binary exponentiation modulo mod\r\nll bexpM(ll a, ll b, ll mod)\r\n{\r\n    ll res = 1;\r\n    while (b > 0)\r\n    {\r\n        if (b & 1)\r\n            res = (res * a) % mod;\r\n        a = (a * a) % mod;\r\n        b >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\n// Euler totient function\r\n// ll phi(ll n)\r\n// {\r\n//     ll result = n;\r\n//     for (int i = 2; i * i <= n; i++)\r\n//     {\r\n//         if (n % i == 0)\r\n//         {\r\n//             while (n % i == 0)\r\n//             {\r\n//                 n /= i;\r\n//             }\r\n//             result -= result / i;\r\n//         }\r\n//     }\r\n//     if (n > 1)\r\n//         result -= result / n;\r\n//     return result;\r\n// }\r\n// phi function in nloglogn time\r\n// void phi_1_to_n(int n)\r\n// {\r\n//     vector<int> phi(n + 1);\r\n//     phi[0] = 0;\r\n//     phi[1] = 1;\r\n//     for (int i = 2; i <= n; i++)\r\n//         phi[i] = i;\r\n\r\n//     for (int i = 2; i <= n; i++)\r\n//     {\r\n//         if (phi[i] == i)\r\n//         {\r\n//             for (int j = i; j <= n; j += i)\r\n//                 phi[j] -= phi[j] / i;\r\n//         }\r\n//     }\r\n// }\r\n\r\nconst int P = 5000;\r\nint prime[P + 1];\r\nvoid sieve()\r\n{\r\n    prime[0] = 0;\r\n    prime[1] = 0;\r\n    for (int i = 2; i <= P; i++)\r\n    {\r\n        prime[i] = 1;\r\n    }\r\n    for (int i = 2; i * i <= P; i++)\r\n    {\r\n        if (prime[i] == 1)\r\n        {\r\n            for (int j = i * i; j <= P; j += i)\r\n            {\r\n                prime[j] = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// int vis[100001];\r\n// vector<vector<int>> ar(100001);\r\n// void dfs(int v)\r\n// {\r\n//     vis[v] = 1;\r\n//     cout << v << \"->\";\r\n//     for (int child : ar[v])\r\n//         if (vis[child] == 0)\r\n//             dfs(child);\r\n// }\r\n\r\nll C(ll n, ll k)\r\n{\r\n    ll res = 1;\r\n    if (k > n - k)\r\n        k = n - k;\r\n    for (int i = 0; i < k; ++i)\r\n    {\r\n        res *= (n - i);\r\n        res /= (i + 1);\r\n    }\r\n    return res;\r\n}\r\n\r\nll factorial(ll n)\r\n{\r\n    ll res = 1;\r\n    for (int i = 2; i <= n; i++)\r\n        res = ((res % M) * (i % M)) % M;\r\n    return res % M;\r\n}\r\n\r\nvoid precision(int a)\r\n{\r\n    cout << setprecision(a) << fixed << endl;\r\n}\r\n\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false); // Fast i/o\r\n    cin.tie(NULL);\r\n    int n;\r\n    cin>>n;\r\n    sieve();\r\n    if(n==1 || n==2){\r\n        cout << -1 << endl;\r\n    }else{\r\n        if(prime[n]==1){\r\n            cout << n << endl;\r\n            ll k = 1;\r\n            F(1,n,i){\r\n                cout << i << \" \" << i+1 << endl;\r\n            }\r\n            cout << n << \" \" << 1 << endl;\r\n        }else{\r\n            ll m = n;\r\n            while(!prime[m]){\r\n                m++;\r\n            }\r\n            cout << m << endl;\r\n            F(1,n,i){\r\n                cout << i << \" \" << i+1 << endl;\r\n            }\r\n            cout << n << \" \" << 1 << endl;\r\n            F(1,m-n+1,i){\r\n                cout << i << \" \" << i + n/2 << endl;\r\n            }\r\n        }\r\n    }\r\n}"
}