{
    "id": 123681115,
    "contestId": 1178,
    "creationTimeSeconds": 1627199422,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "Sumit_puri"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 4300800,
    "source": "#include<bits/stdc++.h>\r\n#include<algorithm>\r\n#include<math.h>\r\n#include<utility>\r\nusing namespace std;\r\n#define pb push_back\r\n#define mp make_pair\r\n#define fs first\r\n#define sec second\r\n#define pq priority_queue\r\n#define lb lower_bound\r\n#define ub upper_bound\r\n#define ll long long \r\n#define endl \"\\n\"\r\n#define all(x) (x).begin(),(x).end()\r\n#define pb push_back\r\n#define rep(i,n) for(int i=0;i<n;i++)\r\n#define rrep(i, n) for(int i=n-1;i>=0;i--)\r\n#define fast (ios_base:: sync_with_stdio(false),cin.tie(NULL))\r\ntypedef pair<int, int>  pii;\r\ntypedef pair<ll, ll>    pl;\r\ntypedef vector<int>     vi;\r\ntypedef vector<ll>      vl;\r\ntypedef vector<pii>     vpii;\r\ntypedef vector<pl>      vpl;\r\ntypedef vector<vi>      vvi;\r\ntypedef vector<vl>      vvl;\r\nlong long mod=1000000007;\r\n#define INF LLONG_MAX\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n \r\n//to find nth fibonacci number.\r\n//This code returns Fn and Fn+1 as a pair.\r\npair<int, int> fib (int n) {\r\n    if (n == 0)\r\n        return {0, 1};\r\n \r\n    auto p = fib(n >> 1);\r\n    int c = p.first * (2 * p.second - p.first);\r\n    int d = p.first * p.first + p.second * p.second;\r\n    if (n & 1)\r\n        return {d, c + d};\r\n    else\r\n        return {c, d};\r\n}\r\n \r\n \r\n \r\n \r\nint fact(int n)\r\n{\r\n    int res=1;\r\n    for(int i=n;i>=1;i--)\r\n        (res*=i)%=mod;\r\n    return (res%mod);\r\n \r\n}\r\n \r\nint pow(int a, int b, int m)\r\n{\r\n  int ans=1;\r\n  while(b)\r\n  {\r\n    if(b&1)\r\n      ans=(ans*a)%m;\r\n    b/=2;\r\n    a=(a*a)%m;\r\n  }\r\n  return ans;\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nbool isPrime(long long n)\r\n{\r\n \r\n    if (n <= 1)\r\n        return false;\r\n \r\n \r\n    for (long long i = 2; i <= sqrt(n); i++)\r\n        if (n % i == 0)\r\n            return false;\r\n \r\n    return true;\r\n}\r\n \r\n//THIS IS THE CODE TO FIND ALL PRIME NUMBERS IN THE RANGE \"L\" to \"R\";\r\n \r\nvector<long long > segmentedSieve(long long L, long long R) {\r\n    // generate all primes up to sqrt(R)\r\n    long long lim = sqrt(R);\r\n    vector<bool> mark(lim + 1, false);\r\n    vector<long long> primes;\r\n    for (long long i = 2; i <= lim; ++i) {\r\n        if (!mark[i]) {\r\n            primes.emplace_back(i);\r\n            for (long long j = i * i; j <= lim; j += i)\r\n                mark[j] = true;\r\n        }\r\n    }\r\n \r\n    vector<bool> isPrime(R - L + 1, true);\r\n    for (long long i : primes)\r\n        for (long long j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)\r\n            isPrime[j - L] = false;\r\n    if (L == 1)\r\n        isPrime[0] = false;\r\n    vector<long long >realprime;\r\n   for(int i=0;i<=R-L;i++){\r\n      if(isPrime[i]){\r\n         realprime.emplace_back(i+L);\r\n         \r\n      }\r\n   }\r\n    return realprime;\r\n    \r\n}\r\n \r\n \r\n \r\n \r\n \r\nbool isPalindrome(string s)\r\n{\r\n \r\n    int l = 0;\r\n    int h = s.size()-1;\r\n \r\n \r\n    while (h > l)\r\n    {\r\n        if (s[l++] != s[h--])\r\n        {\r\n \r\n            return false;\r\n        }\r\n    }\r\n   return true;\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n \r\nint ternarySearch(int l, int r, int key, int ar[])\r\n \r\n{\r\n    while (r >= l) {\r\n \r\n        // Find the mid1 and mid2\r\n        int mid1 = l + (r - l) / 3;\r\n        int mid2 = r - (r - l) / 3;\r\n \r\n        // Check if key is present at any mid\r\n        if (ar[mid1] == key) {\r\n            return mid1;\r\n        }\r\n        if (ar[mid2] == key) {\r\n            return mid2;\r\n        }\r\n \r\n        // Since key is not present at mid,\r\n        // check in which region it is present\r\n        // then repeat the Search operation\r\n        // in that region\r\n \r\n        if (key < ar[mid1]) {\r\n \r\n            // The key lies in between l and mid1\r\n            r = mid1 - 1;\r\n        }\r\n        else if (key > ar[mid2]) {\r\n \r\n            // The key lies in between mid2 and r\r\n            l = mid2 + 1;\r\n        }\r\n        else {\r\n \r\n            // The key lies in between mid1 and mid2\r\n            l = mid1 + 1;\r\n            r = mid2 - 1;\r\n        }\r\n    }\r\n \r\n    // Key not found\r\n    return -1;\r\n}\r\n \r\n \r\n \r\n \r\n \r\n \r\n  int binarySearch(int arr[], int l, int r, int x)\r\n{\r\n    while (l <= r) {\r\n        int m = l + (r - l) / 2;\r\n \r\n        // Check if x is present at mid\r\n        if (arr[m] == x)\r\n            return m;\r\n \r\n        // If x greater, ignore left half\r\n        if (arr[m] < x)\r\n            l = m + 1;\r\n \r\n        // If x is smaller, ignore right half\r\n        else\r\n            r = m - 1;\r\n    }\r\n \r\n    // if we reach here, then element was\r\n    // not present\r\n    return -1;\r\n}\r\n \r\n \r\n \r\n//\"KADANE'S ALGORITHM\"\r\n//iski time complexity o(n) hn i.e the smallest possible \r\nlong long maxsubarraysum(long long *array,long long n){\r\n   long long best = 0, sum = 0;\r\nfor (long long  k = 0; k < n; k++) {\r\nsum = max(array[k],sum+array[k]);\r\nbest = max(best,sum);\r\n}\r\nreturn  best ;\r\n \r\n}\r\n//to add two very large numbers \r\n \r\n \r\n \r\n \r\nstring findSum(string str1, string str2) \r\n{ \r\n  if (str1.length() > str2.length()) \r\n    swap(str1, str2); \r\n  string str = \"\"; \r\n  int n1 = str1.length(), n2 = str2.length(); \r\n \r\n  reverse(str1.begin(), str1.end()); \r\n  reverse(str2.begin(), str2.end()); \r\n \r\n  int carry = 0; \r\n  for (int i=0; i<n1; i++) \r\n  { \r\n    \r\n    int sum = ((str1[i]-'0')+(str2[i]-'0')+carry); \r\n    str.push_back(sum%10 + '0'); \r\n \r\n    carry = sum/10; \r\n  }  \r\n  for (int i=n1; i<n2; i++) \r\n  { \r\n    int sum = ((str2[i]-'0')+carry); \r\n    str.push_back(sum%10 + '0'); \r\n    carry = sum/10; \r\n  } \r\n  if (carry) \r\n    str.push_back(carry+'0'); \r\n  reverse(str.begin(), str.end()); \r\n  return str; \r\n} \r\n \r\nstring smin(string a,string b)\r\n{\r\n \r\nif(a.size()<b.size())return a;\r\nif(a.size()>b.size())return b;\r\nif(a<=b)return a;\r\nelse return b;\r\n}\r\n \r\n \r\n \r\n \r\n \r\n  bool so(const pair<int,int> &a, \r\n              const pair<int,int> &b) \r\n{ \r\n    return (a.second < b.second); \r\n}  \r\n \r\nint getsum(const vector<int>&s,int l,int r){\r\n   return (l==0)?s[r]:(s[r]-s[l-1]);\r\n}\r\nlong long maxPrimeFactors(long long n) \r\n{ \r\n    long long maxPrime = -1; \r\n  \r\n    while (n % 2 == 0) { \r\n        maxPrime = 2; \r\n        n >>= 1; \r\n    } \r\n \r\n    for (int i = 3; i <= sqrt(n); i += 2) { \r\n        while (n % i == 0) { \r\n            maxPrime = i; \r\n            n = n / i; \r\n        } \r\n    } \r\n  \r\n    if (n > 2) \r\n        maxPrime = n; \r\n  \r\n    return maxPrime; \r\n} \r\nll int primeFactors(int n)\r\n{\r\n    ll int k=0;\r\n    while (n % 2 == 0)\r\n    {\r\n        k++;\r\n        n = n/2;\r\n    }\r\n \r\n\r\n    for (int i = 3; i <= sqrt(n); i = i + 2)\r\n    {\r\n\r\n        while (n % i == 0)\r\n        {\r\n            k++;\r\n            n = n/i;\r\n        }\r\n    }\r\n \r\n    \r\n    if (n > 2)\r\n        k++;\r\n        \r\n      return k;\r\n}\r\nlong long findgcd(long long a,long long b) {\r\n        if ( a == 0 ) return b;\r\n        else return findgcd(b % a, a);\r\n    }\r\nvector<pair<int,int>> shift;\r\nint dist(int a,int b,double x)\r\n{\r\n      double mindis=1e9;\r\n      rep(i,shift.size())\r\n      {\r\n            ll int t1=shift[i].fs-a,t2=shift[i].sec-b;\r\n            double distance=sqrt(t1*t1+t2*t2);\r\n            mindis=min(mindis,distance);\r\n      }\r\n      if(mindis<=x)\r\n      return 1;\r\n      return -1;\r\n}\r\n\r\n int main()\r\n{\r\n  fast;\r\n  int n;\r\n  cin>>n;\r\n  int i=n;\r\n  while(!isPrime(i))\r\n  i++;\r\n  //cout<<i<<endl;\r\n  int temp=0;\r\n  int ans[n*(n-1)][2];\r\n  if(i==n){\r\n        temp++;\r\n  ans[0][0]=1;\r\n  ans[0][1]=n;\r\n  i--;}\r\n  int p=1;\r\n  while(i>0){\r\n        \r\n  \r\n  for(int j=1;j+p<=n;j++){\r\n        temp++;\r\n        ans[temp-1][0]=j;\r\n        ans[temp-1][1]=j+p;\r\n  //cout<<j<<\" \"<<j+p<<endl;\r\n  i--;\r\n  }\r\n       p++; \r\n  }\r\n  cout<<temp<<endl;\r\n  rep(j,temp)\r\n  {\r\n        cout<<ans[j][0]<<\" \"<<ans[j][1]<<endl;\r\n  }\r\n}"
}