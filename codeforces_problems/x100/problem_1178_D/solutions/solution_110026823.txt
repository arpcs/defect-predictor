{
    "id": 110026823,
    "contestId": 1178,
    "creationTimeSeconds": 1615803554,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "FReAk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "/**\r\n*  @author : FReAk\r\n**/\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n \r\nconst int nax = 1e3 + 3;\r\n\r\nvector<int> isPrime(nax, true);\r\nvector<int> prime;\r\nvector<int> spf(nax);\r\n\r\nvoid FAST_SEIVE(){\r\n  isPrime[0] = isPrime[1] = false;\r\n  for(int i = 2; i < nax; i++){\r\n    if(isPrime[i]){\r\n      prime.push_back(i);\r\n      spf[i] = i;\r\n    }\r\n    for(int j = 0; j < (int)prime.size() && i * prime[j] < nax && prime[j] <= spf[i]; j++){\r\n      isPrime[i * prime[j]] = false;\r\n      spf[i * prime[j]] = prime[j];\r\n    }\r\n  }\r\n}\r\n\r\nbool isprime(int n){\r\n  if(n <= 1)\r\n    return false;\r\n  if(n <= 3)\r\n    return true;\r\n  if(n % 2 == 0 || n % 3 == 0)\r\n    return false;\r\n  for(int i = 5; i * i <= n; i += 6){\r\n    if(n % i == 0 || n % (i + 2) == 0)\r\n      return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nint nextPrime(int n){\r\n  if(n <= 1)\r\n    return 2;\r\n  if(isprime(n))\r\n    return n;\r\n  int pr = n;\r\n  bool found = false;\r\n  while(!found){\r\n    pr++;\r\n    if(isprime(pr)){\r\n      found = true;\r\n    }\r\n  }\r\n  return pr;\r\n}\r\n\r\nvoid run_case(){\r\n  FAST_SEIVE();\r\n  int n, new_n;\r\n  cin >> n;\r\n  new_n = nextPrime(n);\r\n  cout << new_n << '\\n';\r\n  for(int i = 1; i <= n; i++){\r\n    cout << i % (n + 1) << ' ' << ((i + 1) % (n + 1) == 0 ? 1 : (i + 1) % (n + 1)) << '\\n';\r\n  }\r\n  int rem = new_n - n;\r\n  if(rem > n / 2){\r\n    cout << -1;\r\n  } else {\r\n    for(int i = 1; i <= rem; i += 1){\r\n      cout << i % (n + 1)  << ' ' << ((i + n / 2) % (n + 1) == 0 ? 1 : (i + n / 2) % (n + 1)) << '\\n';\r\n    }\r\n  }\r\n}\r\n\r\nint main(){\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n\r\n  int tt = 1;\r\n  // cin >> tt;\r\n  while(tt--){\r\n    run_case();\r\n  }\r\n  return 0;\r\n}"
}