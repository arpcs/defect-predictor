{
    "id": 109729752,
    "contestId": 1178,
    "creationTimeSeconds": 1615485787,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "D",
        "name": "Prime Graph",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "VishuTomar"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 0,
    "source": "import java.io.OutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class First {\r\n\r\n    public static void main(String[] args) {\r\n        InputStream inputStream = System.in;\r\n        OutputStream outputStream = System.out;\r\n        InputReader in = new InputReader(inputStream);\r\n        PrintWriter out = new PrintWriter(outputStream);\r\n        TaskA solver = new TaskA();\r\n        //int a = 1;\r\n        int t;\r\n        //t = in.nextInt();\r\n        t = 1;\r\n        while (t > 0) {\r\n            //out.print(\"Case #\"+(a++)+\": \");\r\n            solver.call(in,out);\r\n            t--;\r\n        }\r\n        out.close();\r\n\r\n    }\r\n\r\n    static class TaskA {\r\n        public void call(InputReader in, PrintWriter out) {\r\n            int n;\r\n            n = in.nextInt();\r\n\r\n            boolean flag = false;\r\n\r\n            ArrayList<Integer> arrayList = new ArrayList<>();\r\n            int[] arr = new int[500001];\r\n\r\n            for (int i = 2; i<=500000 ; i++) {\r\n                if(arr[i]==0){\r\n                    if(n==i){\r\n                        flag = true;\r\n                    }\r\n                    arrayList.add(i);\r\n                    for (int j = i; j <= 500000; j+=i) {\r\n                        arr[j]=1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(flag){\r\n                out.println(n);\r\n                for (int i = 1; i <= n; i++) {\r\n                    if(i!=n) {\r\n                        out.println(i+\" \"+(i+1));\r\n                    }\r\n                    else{\r\n                        out.println(i+\" \"+1);\r\n                    }\r\n                }\r\n\r\n            }\r\n            else{\r\n                int l, r, mid;\r\n                l = -1;\r\n                r = arrayList.size();\r\n\r\n                while(l+1<r){\r\n                    mid = (l+r)/2;\r\n                    if(arrayList.get(mid)<=n)\r\n                        l = mid;\r\n                    else\r\n                        r = mid;\r\n                }\r\n\r\n                int a =  arrayList.get(r);\r\n                out.println(a);\r\n\r\n                for (int i = 1; i <= n; i++) {\r\n                    if(i!=n) {\r\n                        out.println(i+\" \"+(i+1));\r\n                    }\r\n                    else{\r\n                        out.println(i+\" \"+1);\r\n                    }\r\n                    a--;\r\n                }\r\n\r\n                for (int i = 1; i <=n/2; i++) {\r\n                    out.println(i+\" \"+(i+n/2));\r\n                    a--;\r\n                    if (a==0)\r\n                        break;\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n\r\n    static int gcd(int a, int b)\r\n    {\r\n        if (a == 0)\r\n            return b;\r\n        return gcd(b % a, a);\r\n    }\r\n\r\n    static int lcm(int a, int b)\r\n    {\r\n        return (a / gcd(a, b)) * b;\r\n    }\r\n\r\n    static class answer implements Comparable<answer>{\r\n        int a;\r\n        int b;\r\n\r\n        public answer(int a, int b) {\r\n            this.a = a;\r\n            this.b = b;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(answer o) {\r\n            return this.a - o.a;\r\n        }\r\n    }\r\n\r\n    static class answer1 implements Comparable<answer1>{\r\n        int a, b, c;\r\n\r\n        public answer1(int a, int b, int c) {\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(answer1 o) {\r\n            return this.a - o.a;\r\n        }\r\n    }\r\n\r\n    static long gcd(long a, long b)\r\n    {\r\n        if (b == 0)\r\n            return a;\r\n        return gcd(b, a % b);\r\n    }\r\n\r\n    static void sort(long[] a) {\r\n        ArrayList<Long> l=new ArrayList<>();\r\n        for (long i:a) l.add(i);\r\n        Collections.sort(l);\r\n        for (int i=0; i<a.length; i++) a[i]=l.get(i);\r\n    }\r\n\r\n    static final Random random=new Random();\r\n\r\n    static void shuffleSort(int[] a) {\r\n        int n=a.length;\r\n        for (int i=0; i<n; i++) {\r\n            int oi=random.nextInt(n), temp=a[oi];\r\n            a[oi]=a[i]; a[i]=temp;\r\n        }\r\n        Arrays.sort(a);\r\n    }\r\n\r\n    static class InputReader {\r\n        public BufferedReader reader;\r\n        public StringTokenizer tokenizer;\r\n\r\n        public InputReader(InputStream stream) {\r\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\r\n            tokenizer = null;\r\n        }\r\n\r\n        public String next() {\r\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\r\n                try {\r\n                    tokenizer = new StringTokenizer(reader.readLine());\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n            return tokenizer.nextToken();\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n        public long nextLong(){\r\n            return Long.parseLong(next());\r\n        }\r\n        public double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n    }\r\n}"
}