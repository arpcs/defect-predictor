{
    "id": 55521838,
    "contestId": 976,
    "creationTimeSeconds": 1560416198,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 976,
        "index": "C",
        "name": "Nested Segments",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 976,
        "members": [
            {
                "handle": "ragpatel8742"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1525099200
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 29696000,
    "source": "//Author: Patel Rag\r\n//Java version \"1.8.0_211\"\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main\r\n{\r\n  static class FastReader\r\n  {\r\n    BufferedReader br;\r\n    StringTokenizer st;\r\n\r\n    public FastReader(){ br = new BufferedReader(new InputStreamReader(System.in)); }\r\n\r\n    String next()\r\n    {\r\n      while (st == null || !st.hasMoreElements())\r\n      {\r\n        try\r\n        {\r\n          st = new StringTokenizer(br.readLine());\r\n        }\r\n        catch (IOException  e)\r\n        {\r\n          e.printStackTrace();\r\n        }\r\n      }\r\n      return st.nextToken();\r\n    }\r\n\r\n    int nextInt() { return Integer.parseInt(next()); }\r\n\r\n    long nextLong(){ return Long.parseLong(next()); }\r\n\r\n    double nextDouble(){ return Double.parseDouble(next()); }\r\n\r\n    float nextFloat() { return Float.parseFloat(next()); }\r\n\r\n    boolean nextBoolean() { return Boolean.parseBoolean(next()); }\r\n\r\n    String nextLine()\r\n    {\r\n      String str = \"\";\r\n      try\r\n      {\r\n        str = br.readLine();\r\n      }\r\n      catch (IOException e)\r\n      {\r\n        e.printStackTrace();\r\n      }\r\n      return str;\r\n    }\r\n  }\r\n  static long modExp(long x, long n, long mod)    //binary Modular exponentiation\r\n  {\r\n    long result = 1;\r\n    while(n > 0)\r\n    {\r\n        if(n % 2 == 1)\r\n            result = (result%mod * x%mod)%mod;\r\n        x = (x%mod * x%mod)%mod;\r\n        n=n/2;\r\n    }\r\n    return result;\r\n  }\r\n  static long gcd(long a, long b)\r\n  {\r\n    if(a==0) return b;\r\n    return gcd(b%a,a);\r\n  }\r\n  public static void main(String[] args)\r\n  throws IOException\r\n  {\r\n    FastReader fr = new FastReader();\r\n    int n = fr.nextInt();\r\n    Vector<pair> dat = new Vector<>(n);\r\n    HashMap<pair,Integer> map = new HashMap<>();\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n      int l = fr.nextInt();\r\n      int r = fr.nextInt();\r\n      dat.add(new pair(l,r));\r\n      map.put(dat.get(i),i+1);\r\n    }\r\n    Collections.sort(dat,new myComp());\r\n    int s1 = 0;\r\n    int s2 = 0;\r\n    for(int i = 1; i < n; i++)\r\n    {\r\n      if(dat.get(s1).second >= dat.get(i).second)\r\n      {\r\n        s2 = i;\r\n        break;\r\n      }\r\n      else\r\n      {\r\n        s1 = i;\r\n      }\r\n    }\r\n    if(s2 != 0) System.out.println(map.get(dat.get(s2)) + \" \" + map.get(dat.get(s1)));\r\n    else System.out.println(\"-1 -1\");\r\n\r\n  }\r\n}\r\nclass pair\r\n{\r\n  public int first;\r\n  public int second;\r\n  public pair(int first,int second)\r\n  {\r\n    this.first = first;\r\n    this.second = second;\r\n  }\r\n  public pair(pair p)\r\n  {\r\n    this.first = p.first;\r\n    this.second = p.second;\r\n  }\r\n  public int first() { return first; }\r\n  public int second() { return second; }\r\n  public void setFirst(int first) { this.first = first; }\r\n  public void setSecond(int second) { this.second = second; }\r\n}\r\nclass myComp implements Comparator<pair>\r\n{\r\n  public int compare(pair a,pair b)\r\n  {\r\n    if(a.first != b.first) return (a.first - b.first);\r\n    return (b.second - a.second);\r\n  }\r\n}\r\n\r\nclass BIT       //Binary Indexed Tree aka Fenwick Tree\r\n{\r\n  public long[] m_array;\r\n\r\n  public BIT(long[] dat)\r\n  {\r\n    m_array = new long[dat.length + 1];\r\n    Arrays.fill(m_array,0);\r\n    for(int i = 0; i < dat.length; i++)\r\n    {\r\n      m_array[i + 1] = dat[i];\r\n    }\r\n    for(int i = 1; i < m_array.length; i++)\r\n    {\r\n      int j = i + (i & -i);\r\n      if(j < m_array.length)\r\n      {\r\n        m_array[j] = m_array[j] + m_array[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  public final long prefix_query(int i)\r\n  {\r\n    long result = 0;\r\n    for(++i; i > 0; i = i - (i & -i))\r\n    {\r\n      result = result + m_array[i];\r\n    }\r\n    return result;\r\n  }\r\n\r\n  public final long range_query(int fro, int to)\r\n  {\r\n    if(fro == 0)\r\n    {\r\n      return prefix_query(to);\r\n    }\r\n    else\r\n    {\r\n      return (prefix_query(to) - prefix_query(fro - 1));\r\n    }\r\n  }\r\n\r\n  public void update(int i, long add)\r\n  {\r\n    for(++i; i < m_array.length; i = i + (i & -i))\r\n    {\r\n      m_array[i] = m_array[i] + add;\r\n    }\r\n  }\r\n}\r\n"
}