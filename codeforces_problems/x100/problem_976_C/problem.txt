{
    "contestId": 976,
    "index": "C",
    "name": "Nested Segments",
    "type": "PROGRAMMING",
    "rating": 1500,
    "tags": [
        "greedy",
        "implementation",
        "sortings"
    ],
    "desc": {
        "title": "C. Nested Segments",
        "statement": "<p>You are given a sequence <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> of one-dimensional segments numbered <span class=\"tex-span\">1</span> through <span class=\"tex-span\"><i>n</i></span>. Your task is to find two distinct indices <span class=\"tex-span\"><i>i</i></span> and <span class=\"tex-span\"><i>j</i></span> such that segment <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> lies within segment <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>j</i></sub></span>.</p><p>Segment <span class=\"tex-span\">[<i>l</i><sub class=\"lower-index\">1</sub>,\u2009<i>r</i><sub class=\"lower-index\">1</sub>]</span> lies within segment <span class=\"tex-span\">[<i>l</i><sub class=\"lower-index\">2</sub>,\u2009<i>r</i><sub class=\"lower-index\">2</sub>]</span> iff <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\">1</sub>\u2009\u2265\u2009<i>l</i><sub class=\"lower-index\">2</sub></span> and <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\">1</sub>\u2009\u2264\u2009<i>r</i><sub class=\"lower-index\">2</sub></span>.</p><p>Print indices <span class=\"tex-span\"><i>i</i></span> and <span class=\"tex-span\"><i>j</i></span>. If there are multiple answers, print any of them. If no answer exists, print <span class=\"tex-font-style-tt\">-1 -1</span>.</p>",
        "inputSpecification": "<p>The first line contains one integer <span class=\"tex-span\"><i>n</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20093\u00b710<sup class=\"upper-index\">5</sup></span>) \u2014 the number of segments.</p><p>Each of the next <span class=\"tex-span\"><i>n</i></span> lines contains two integers <span class=\"tex-span\"><i>l</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>r</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>l</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>r</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910<sup class=\"upper-index\">9</sup></span>) \u2014 the <span class=\"tex-span\"><i>i</i></span>-th segment.</p>",
        "outputSpecification": "<p>Print two distinct indices <span class=\"tex-span\"><i>i</i></span> and <span class=\"tex-span\"><i>j</i></span> such that segment <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> lies within segment <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>j</i></sub></span>. If there are multiple answers, print any of them. If no answer exists, print <span class=\"tex-font-style-tt\">-1 -1</span>.</p>",
        "samples": [
            {
                "input": "5<br/>1 10<br/>2 9<br/>3 9<br/>2 3<br/>2 9<br/>",
                "output": "2 1<br/>"
            },
            {
                "input": "3<br/>1 5<br/>2 6<br/>6 20<br/>",
                "output": "-1 -1<br/>"
            }
        ],
        "note": "<p>In the first example the following pairs are considered correct:</p><ul> <li> <span class=\"tex-span\">(2,\u20091),\u2009(3,\u20091),\u2009(4,\u20091),\u2009(5,\u20091)</span> \u2014 not even touching borders; </li><li> <span class=\"tex-span\">(3,\u20092),\u2009(4,\u20092),\u2009(3,\u20095),\u2009(4,\u20095)</span> \u2014 touch one border; </li><li> <span class=\"tex-span\">(5,\u20092),\u2009(2,\u20095)</span> \u2014 match exactly. </li></ul>"
    },
    "suggested_categories": [
        "algorithm",
        "data structures",
        "sequence",
        "indices",
        "segmentation",
        "range matching",
        "nested structures",
        "intersection",
        "search",
        "positioning",
        "boundary checking",
        "comparison",
        "optimization",
        "constraints",
        "mathematical logic",
        "decision making",
        "pairing",
        "geometry",
        "set theory",
        "complexity analysis"
    ]
}