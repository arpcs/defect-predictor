{
    "id": 231013397,
    "contestId": 71,
    "creationTimeSeconds": 1698944685,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 71,
        "index": "C",
        "name": "Round Table Knights",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 71,
        "members": [
            {
                "handle": "Donbcheap"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1301410800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define fastIO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)  \r\nusing namespace std; \r\n\r\nint n;\r\nvector<bool> points; \r\nbool solvable = false;\r\n\r\nint step_length;\r\nvoid check(int current_idx)\r\n{\r\n    if (current_idx >= n)\r\n    {\r\n        solvable = true;\r\n        return;\r\n    }\r\n\r\n    if (!points[current_idx])\r\n        return;\r\n    else\r\n        check(current_idx + step_length);\r\n}\r\nvoid solve()\r\n{\r\n    cin >> n;\r\n\r\n\r\n    points = vector<bool>(n);\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        bool b;\r\n\r\n        cin >> b;\r\n        points[i] = b;\r\n    }\r\n\r\n    vector<int> n_divisors;\r\n    int nn = n;\r\n    while (!(nn & 1))\r\n        nn >>= 1;\r\n    for (int i = 3; i * i <= nn; i++)\r\n        if (nn % i == 0)\r\n        {\r\n            n_divisors.push_back(i);\r\n            while (nn % i == 0)\r\n            {\r\n                nn /= i;\r\n            }\r\n        }\r\n    if (nn > 1)\r\n        n_divisors.push_back(nn);\r\n\r\n    int idx = 0;\r\n    int Max_idx_next = n_divisors.size();\r\n    while (!solvable && idx < Max_idx_next)\r\n    {\r\n        step_length = n_divisors[idx];\r\n        for (int i = 0; !solvable && i < n_divisors[idx]; i++)\r\n            check(0 + i);\r\n    }\r\n\r\n    cout << (solvable ? \"YES\\n\" : \"NO\\n\"); \r\n}\r\n\r\nint main()\r\n{\r\n    fastIO;\r\n\r\n    solve();\r\n\r\n    return 0;\r\n}"
}