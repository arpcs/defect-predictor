{
    "id": 229748099,
    "contestId": 71,
    "creationTimeSeconds": 1698263772,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 71,
        "index": "C",
        "name": "Round Table Knights",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 71,
        "members": [
            {
                "handle": "ngiang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1301410800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 409600,
    "source": "#include <algorithm>\n#include <array>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <cmath>\n#include <cstdint>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\nusing namespace std;\ntypedef long long ll;\ntypedef long long int lli;\ntypedef long double ld;\ntypedef unsigned int uint;\ntypedef unsigned long long ull;\nconst ld pi = 4.0 * atanl(1.0);\nconst int iinf = int(1e9) + 10;\nconst ll inf = 1e18 + 10;\nconst int mod = 1000000007;\nconst ld prec = .00000000001;\n\nconst int mxN = 1e5;\nint n, a[mxN];\n\nvoid chk(int x) {  // x = side length\n    // iterate starting index\n    for (int si = 0; si < x; ++si) {\n        bool ok = 1;\n        for (int j = si; j < n && ok; j += x) ok = a[j];\n        if (ok) {\n            cout << \"YES\";\n            exit(0);\n        }\n    }\n}\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    cin >> n;\n    for (int i = 0; i < n; ++i) cin >> a[i];\n    // iterate through divisors of n\n    // O(sqrt(n)) iterations, O(n) check, so O(nsqrt(n)) overall\n    for (int i = 1; i * i <= n; ++i) {\n        if (n % i)  // side length must divide n\n            continue;\n        if (n / i >=\n            3)  // number of points must be >= 3 to form a nondegenerate polygon\n            chk(i);\n        if (i >= 3)\n            chk(n / i);  // if i = sqrt(n) then this will check x = sqrt(n)\n                         // again, but we don't care since checking again\n                         // doesn't do anything\n    }\n    cout << \"NO\";\n}\n"
}