{
    "id": 233967090,
    "contestId": 71,
    "creationTimeSeconds": 1700771077,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 71,
        "index": "C",
        "name": "Round Table Knights",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 71,
        "members": [
            {
                "handle": "CraftyRaf"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1301410800
    },
    "programmingLanguage": "Python 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 3788800,
    "source": "# Oplossing 1\r\n\r\n\r\n# Input\r\nnumber_of_knights = int(input())\r\nknights_list = [int(x) for x in input().split(' ')]\r\n\r\n# Generate a list of divisors (optimal for this purpose) of the total number of knights\r\ndivisors_list = [1]\r\nfor div in range(2, int(number_of_knights / 3) + 1):\r\n    if number_of_knights % div == 0:\r\n        divisors_list.append(div)\r\n\r\nflag = False\r\nsubset = []\r\n\r\n# Iterate through divisors and offsets to find a suitable subset\r\nfor divisor in divisors_list:\r\n    for offset in range(divisor):\r\n        subset = knights_list[offset::divisor]\r\n\r\n        if sum(subset) == number_of_knights // divisor:\r\n            flag = True\r\n            break\r\n\r\n    if flag:\r\n        break\r\n\r\n# Output\r\nif flag:\r\n    print(\"YES\")\r\nelse:\r\n    print(\"NO\")"
}