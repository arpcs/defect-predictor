{
    "id": 225876997,
    "contestId": 71,
    "creationTimeSeconds": 1696063659,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 71,
        "index": "C",
        "name": "Round Table Knights",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 71,
        "members": [
            {
                "handle": "yibaiyi20"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1301410800
    },
    "programmingLanguage": "Clang++20 Diagnostics",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 312,
    "memoryConsumedBytes": 15360000,
    "source": "#include <iostream>\n#include <vector>\nint main() {\n\n  unsigned long n, x;\n  std::vector<unsigned long> ones, polygon, mood;\n\n  std::cin >> n;\n  for (unsigned long i = 0; i < n; i++) {\n    std::cin >> x;\n\n    mood.push_back(x);\n    if (x)\n      ones.push_back(i);\n  }\n\n  x = ones.size();\n\n  for (unsigned long i = 1; i * i <= n; i++) {\n    if (n % i == 0) {\n\n      if (i > 2 && i <= x)\n        polygon.push_back(i);\n\n      if (i * i != n && n / i <= x)\n        polygon.push_back(n / i);\n    }\n  }\n\n  for (unsigned long j = 0; j < polygon.size(); j++) {\n    unsigned long jump = n / polygon[j];\n    int regular = 0;\n    for (unsigned long i = 0; i < ones.size() && ones[i] < ones[0] + jump;\n         i++) {\n      unsigned long position = ones[i];\n      unsigned long count = 0;\n      while (count < polygon[j]) {\n        if (position < n && mood[position])\n          count++;\n        else\n          break;\n        position += jump;\n        if (position >= n)\n          position -= n;\n      }\n      if (count == polygon[j])\n        regular = 1;\n    }\n\n    if (regular) {\n      std::cout << \"YES\";\n      return 0;\n    }\n  }\n  std::cout << \"NO\";\n\n  return 0;\n}\n"
}