{
    "id": 234338404,
    "contestId": 71,
    "creationTimeSeconds": 1700954534,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 71,
        "index": "C",
        "name": "Round Table Knights",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 71,
        "members": [
            {
                "handle": "susvant"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1301410800
    },
    "programmingLanguage": "Java 21",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 72192000,
    "source": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\tPrintWriter out = new PrintWriter(System.out);\n\n\t\tint N = Integer.parseInt(in.readLine());\n\t\tboolean[] knights = new boolean[N];\n\t\tint M = 0;\n\t\tint firstOne = -1;\n\n\t\tStringTokenizer st = new StringTokenizer(in.readLine());\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tint val = Integer.parseInt(st.nextToken());\n\t\t\tif (val == 0) {\n\t\t\t\tknights[i] = false;\n\t\t\t\tM++;\n\t\t\t}\n\t\t\telse knights[i] = true;\n\t\t}\n\n\t\tin.close();\n\n\t\tArrayList<Integer> factors = new ArrayList<>();\n\t\tfor (int i = 3; i <= N; i++) {\n\t\t\tif (N % i == 0) factors.add(i);\n\t\t}\n\n\t\tint K = factors.size();\n\t\tint[][] table = new int[K][M];\n\t\tint index = 0;\n\n\t\tfor (int i = 0; i < N; i++) {\n\t\t\tif (knights[i]) continue;\n\t\t\tfor (int j = 0; j < K; j++) {\n\t\t\t\ttable[j][index] = i % (N / factors.get(j));\n\t\t\t}\n\t\t\tindex++;\n\t\t}\n\n\t\tfor (int i = 0; i < K; i++) {\n\t\t\t// System.out.println(\"For factor: \" + factors.get(i) + \": \" + Arrays.toString(table[i]));\n\t\t\tboolean[] check = new boolean[N / factors.get(i)];\n\t\t\tfor (int j = 0; j < M; j++) {\n\t\t\t\tcheck[table[i][j]] = true;\n\t\t\t}\n\t\t\tint count = 0;\n\t\t\tfor (int j = 0; j < check.length; j++) {\n\t\t\t\tif (!check[j]) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// System.out.println(Arrays.toString(check));\n\t\t\t// System.out.println(\"COUNT = \" + count);\n\t\t\tif (count > 0) {\n\t\t\t\tout.println(\"YES\");\n\t\t\t\tout.close();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tout.println(\"NO\");\n\t\tout.close();\n\t}\n}\n"
}