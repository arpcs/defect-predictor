{
    "id": 234242754,
    "contestId": 71,
    "creationTimeSeconds": 1700922688,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 71,
        "index": "C",
        "name": "Round Table Knights",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 71,
        "members": [
            {
                "handle": "Phien47"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1301410800
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner;\r\n\r\npublic class NewClass {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner sc = new Scanner(System.in);\r\n        int input = sc.nextInt();\r\n        int[] array = new int[input];\r\n        for (int i = 0; i < input; i++) {\r\n            array[i] = sc.nextInt();\r\n        }\r\n        sc.close();\r\n\r\n        new NewClass().checklowinput(array, input);\r\n\r\n        int[] divineNum = new NewClass().findDivisors(input);\r\n\r\n        boolean check = false;\r\n        for (int i = 0; i <= input / 2; i++) {\r\n            if (array[i] == 1) {\r\n                check = new NewClass().check(array, i, input, divineNum);\r\n            }\r\n            if (check == true) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (check == true) {\r\n            System.out.println(\"YES\");\r\n        } else {\r\n            System.out.println(\"NO\");\r\n        }\r\n    }\r\n\r\n    public boolean check(int array[], int first, int limit, int divineNum[]) {\r\n        boolean check = false;\r\n\r\n        for (int i = 0; i < divineNum.length; i++) {\r\n            int h = divineNum[i];\r\n            int g = first;\r\n\r\n            while (g < limit) {\r\n                if (array[g] == 1) {\r\n                    check = true;\r\n                } else {\r\n                    check = false;\r\n                    break;\r\n                }\r\n                g += h;\r\n            }\r\n\r\n            if (check == true) {\r\n                int k = (g - limit);\r\n                if (array[k] == 1) {\r\n                    check = true;\r\n                    break;\r\n                } else {\r\n                    check = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return check;\r\n    }\r\n\r\n    public void checklowinput(int array[], int input) {\r\n        if (input < 3) {\r\n            System.out.println(\"NO\");\r\n            System.exit(0);\r\n        }\r\n        for (int i = 0; i < input; i++) {\r\n            if (array[i] == 1) {\r\n                if (i == input - 1) {\r\n                    System.out.println(\"YES\");\r\n                    System.exit(0);\r\n                }\r\n            } else if (input == 4) {\r\n                System.out.println(\"NO\");\r\n                System.exit(0);\r\n            } else if (new NewClass().isPrime(input)) {\r\n                System.out.println(\"NO\");\r\n                System.exit(0);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    public int[] findDivisors(int input) {\r\n        int k = 0;\r\n        \r\n        for (int i = 2; i < input / 2; i++) {\r\n            if (input % i == 0) {\r\n                k++;\r\n            }\r\n        }\r\n        int[] array = new int[k];\r\n        k = 0;\r\n        for (int i = 2; i < input / 2; i++) {\r\n            if (input % i == 0) {\r\n                array[k] = i;\r\n                k++;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    \r\n\r\n    public boolean isPrime(int num) {\r\n        // 0 and 1 are not prime numbers\r\n        if (num <= 1) {\r\n            return false;\r\n        }\r\n\r\n        // Check for factors from 2 to the square root of the number\r\n        for (int i = 2; i <= Math.sqrt(num); i++) {\r\n            if (num % i == 0) {\r\n                return false; // If a factor is found, the number is not prime\r\n            }\r\n        }\r\n\r\n        return true; // If no factors are found, the number is prime\r\n    }\r\n}"
}