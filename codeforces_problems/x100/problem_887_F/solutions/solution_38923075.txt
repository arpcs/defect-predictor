{
    "id": 38923075,
    "contestId": 887,
    "creationTimeSeconds": 1528035198,
    "relativeTimeSeconds": 6198,
    "problem": {
        "contestId": 887,
        "index": "F",
        "name": "Row of Models",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 887,
        "members": [
            {
                "handle": "xsc"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1528029000
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 1419,
    "memoryConsumedBytes": 140697600,
    "source": "#include <bits/stdc++.h>\r\n        \r\nusing namespace std;\r\n        \r\ntypedef long long ll;\r\n#define mp make_pair\r\n#define pub push_back\r\n#define x first\r\n#define y second\r\n#define all(a) a.begin(), a.end()\r\n#define db double\r\n\r\nconst int INF = (int)1e9 + 7;\r\n\r\nstruct tree{\r\n\tint t[500007 * 4];\r\n\tvoid up(int v, int vl, int vr, int pos, int val){\r\n\t\tif (vl == vr){\r\n\t\t\tt[v] = val;\r\n\t\t} else {\r\n\t\t\tint vm = (vl + vr) >> 1;\r\n\t\t\tif (vm <= pos) up(v * 2 + 1, vl, vm, pos, val);\r\n\t\t\telse up(v * 2 + 2, vm + 1, vr, pos, val);\r\n\t\t\tt[v] = min(t[v * 2 + 1], t[v * 2 + 2]);\r\n\t\t}\r\n\t}\r\n\r\n\tint get(int v, int vl, int vr, int l, int r){\r\n\t\tif (r < vl || l > vr) return INF;\r\n\t\tif (vl >= l && vr <= r) return t[v];\r\n\t\tint vm = (vl + vr) >> 1;\r\n\t\treturn min(get(v * 2 + 1, vl, vm, l, r), get(v * 2 + 2, vm + 1, vr, l, r));\r\n\t}\r\n} t;\r\n\r\nstruct zap{\r\n\tint l, r, val;\r\n};\r\n\r\nint n, len;\r\nint a[500007];\r\nint to[500007];\r\nint need[500007];\r\nint pred[500007];\r\nvector<zap> q[500007];\r\nvector<int> uk[500007];\r\nvector<int> gg[500007];\r\nint sp[19][500007];\r\nint myLog[500007];\r\n\r\nvoid stop(string s){\r\n\tcout << s;\r\n\texit(0);\r\n}\r\n\r\nint getSp(int l, int r){\r\n\tint lvl = myLog[r - l + 1];\r\n\treturn min(sp[lvl][l], sp[lvl][r - (1 << lvl) + 1]);\r\n}\r\n\r\nint main(){ \r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n    cin >> n >> len;\r\n    for (int i = 0; i < n; i++) cin >> a[i];\r\n\r\n    //reduce\r\n\r\n    set<int> ss; map<int, int> mm;\r\n\tfor (int i = 0; i < n; i++) ss.insert(a[i]);\r\n\tint dd = 1;\r\n\tfor (int x : ss) mm[x] = dd++;\r\n\tfor (int i = 0; i < n; i++) a[i] = mm[a[i]];\r\n\r\n\r\n    //precalc\r\n\r\n    set<pair<int, int> > se;\r\n\tfor (int i = n - 1; i >= 0; i--){\r\n\t\tse.insert(mp(a[i + 1], i + 1));\r\n\t\tif (i + (len + 1) <= n) se.erase(mp(a[i + (len + 1)], i + (len + 1)));\r\n\t\tpred[i] = (*se.begin()).x;\r\n\t\tif ((*se.begin()).x >= a[i]) to[i] = -1;\r\n\t\telse {\r\n\t\t\tint now = (*se.begin()).y;\r\n\t\t\tif (se.size() > 1){\r\n\t\t\t\tif ((*next(se.begin())).x < a[i]) now = -2;\r\n\t\t\t}\r\n\t\t\tto[i] = now;\r\n\t\t}\r\n\t}\t\r\n\r\n\tfor (int i = 2; i < 500007; i++) myLog[i] = myLog[i / 2] + 1;\r\n\r\n\tfor (int lvl = 0; lvl < 19; lvl++){\r\n\t\tfor (int l = 0, r = (1 << lvl) - 1; r <= n; l++, r++){\r\n\t\t\tif (lvl == 0){\r\n\t\t\t\tsp[lvl][l] = a[l];\r\n\t\t\t} else {\r\n\t\t\t\tsp[lvl][l] = min(sp[lvl - 1][l], sp[lvl - 1][r - (1 << (lvl - 1)) + 1]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//stupid part\r\n\r\n\tint start = -1;\r\n\tfor (int i = 0; i < n; i++) if (to[i] == -1){\r\n\t\tstart = i;\r\n\t\tbreak;\r\n\t}\r\n\tif (start == -1) stop(\"YES\");\r\n\tint maxLast = n;\r\n\tfor (int i = n - 1; i >= 0; i--) if (to[i] == -1){\r\n\t\tmaxLast = i + 1;\r\n\t\tbreak;\r\n\t}\r\n\t\r\n\t//second part\r\n\r\n\tif (start + len + 1 < n){\r\n\t\tfor (int i = 0; i < n; i++) need[i] = INF;\r\n\r\n\t\tint bad = start + 1;\r\n\t\tfor (int i = start + len; i > start; i--){\r\n\t\t\tif (to[i] == -1){\r\n\t\t\t\tbad = i;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (int i = 0; i < n; i++) gg[i].pub(start + 1);\r\n\t\tfor (int i = start + 2; i <= start + len; i++) if (to[i] >= 0) gg[to[i]].pub(i);\r\n\r\n\t\tfor (int i = start + len + 1; i < n; i++){\r\n\t\t\tif (i >= maxLast && a[i] < a[start]){\r\n\r\n\t\t\t\tint vl = start + len, vr = n;\r\n\t\t\t\twhile(vl + 1 < vr){\r\n\t\t\t\t\tint vm = (vl + vr) >> 1;\r\n\t\t\t\t\tif (getSp(start + len + 1, vm) < a[i])\r\n\t\t\t\t\t\tvr = vm;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tvl = vm;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint pos = vr;\r\n\t\t\t\tint MA = max(bad - 1, pos - len - 1);\r\n\t\t\t\tint last = start + len;\r\n\r\n\t\t\t\tif (MA <= last){\r\n\t\t\t\t\tfor (int j = (int)gg[i].size() - 1; j >= 0; j--){\r\n\t\t\t\t\t\tif (gg[i][j] > MA){\r\n\t\t\t\t\t\t\tq[pred[i]].pub({gg[i][j], last, need[i]});\r\n\t\t\t\t\t\t\tneed[i] = min(need[i], a[gg[i][j]]);\r\n\t\t\t\t\t\t\tlast = gg[i][j] - 1;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (MA + 1 <= last) q[pred[i]].pub({MA + 1, last, need[i]});\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (to[i] == -1) break;\r\n\t\t\tif (to[i] != -2) need[to[i]] = min(need[to[i]], a[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tfor (int i = 0; i < n; i++) uk[a[i]].pub(i);\r\n\r\n\tfor (int i = 0; i < 500007; i++){\r\n\t\tfor (int x : uk[i]) t.up(0, 0, n - 1, x, INF);\r\n\t\tfor (auto c : q[i]){\r\n\t\t\tif (t.get(0, 0, n - 1, c.l, c.r) < c.val) stop(\"YES\");\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tstop(\"NO\");\r\n}"
}