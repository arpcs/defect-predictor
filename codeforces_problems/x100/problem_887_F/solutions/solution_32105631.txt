{
    "id": 32105631,
    "contestId": 887,
    "creationTimeSeconds": 1510002038,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 887,
        "index": "F",
        "name": "Row of Models",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 887,
        "members": [
            {
                "handle": "mibig"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509725100
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 96,
    "timeConsumedMillis": 888,
    "memoryConsumedBytes": 54476800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define mp  make_pair\r\n#define ll  long long\r\n#define pb  push_back\r\n#define vi  vector<int>\r\n#define vvi vector<vi >\r\n#define all(x) x.begin(), x.end()\r\n\r\nint n, k;\r\nvi  a, bad, sbad, ubound, lbound, az, lb, bl, in, shift;\r\nvvi ub, p;\r\nset<pair<int, int> > se;\r\nvector<pair<int, int> > q;\r\n\r\nbool cmp(int i, int j) { return a[i] < a[j]; }\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin >> n >> k;\r\n    a.resize(n);\r\n    for (int i = 0; i < n; ++i)\r\n        cin >> a[i];\r\n    bad.assign(n, 0);\r\n    ub.resize(n);\r\n    ubound.assign(n, 1e9 + 1);\r\n    lbound.assign(n, 0);\r\n    shift.assign(n, -1);\r\n    for (int i = n - k + 1; i < n; ++i)\r\n        se.insert(make_pair(a[i], i));\r\n    for (int i = n - k - 1; i >= 0; --i) {\r\n        se.insert(make_pair(a[i + 1], i + 1));\r\n        int ind = se.begin()->second;\r\n        if (se.begin()->first >= a[i])\r\n            bad[i] = 1;\r\n        else if (k == 1 || (++se.begin())->first >= a[i])\r\n            ub[ind].pb(i);\r\n        lbound[i] = se.begin()->first;\r\n        se.erase(make_pair(a[i + k], i + k));\r\n    }\r\n    q.assign(n, make_pair(-1, -1));\r\n    for (int i = 0; i < n; ++i) {\r\n        if (ub[i].empty()) continue;\r\n        shift[i] = *max_element(all(ub[i]));\r\n        sort(all(ub[i]), cmp);\r\n        ubound[i] = a[ub[i][0]];\r\n        if (ub[i].size() == 1)\r\n            q[i] = make_pair(ub[i][0], 1e9+1);\r\n        else if (a[ub[i][1]] > a[ub[i][0]])\r\n            q[i] = make_pair(ub[i][0], a[ub[i][1]]);\r\n    }\r\n    sbad = bad;\r\n    for (int i = 1; i < n; ++i)\r\n        sbad[i] += sbad[i - 1];\r\n    int x = 0;\r\n    while (x < n && !bad[x]) ++x;\r\n    if (x == n) {\r\n        cout << \"YES\" << endl;\r\n        return 0;\r\n    }\r\n    if (x + k + 1 >= n || sbad[n - 1] - sbad[x + k] > 1) {\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n    if (sbad[n - 1] - sbad[x + k] == 1) {\r\n        int y = x + k + 1;\r\n        while (!bad[y]) ++y;\r\n        if (a[x] <= a[y]) {\r\n            cout << \"NO\" << endl;\r\n            return 0;\r\n        }\r\n        for (int z = x + 1; z <= x + k; ++z) {\r\n            if (sbad[y - 1] - sbad[z] > 0) continue;\r\n            if (lbound[y] < a[z] && a[z] < ubound[y] && lbound[z] < a[y]) {\r\n                cout << \"YES\" << endl;\r\n                return 0;\r\n            }\r\n        }\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n    int z = x + 1;\r\n    while (sbad[x + k] - sbad[z] > 0) ++z;\r\n    for (int zz = z; zz <= x + k; ++zz) {\r\n        p.pb(vi());\r\n        p.back().pb(a[zz]);\r\n        p.back().pb(lbound[zz]);\r\n        p.back().pb(n - zz);\r\n    }\r\n    sort(all(p));\r\n    for (int i = 0; i < p.size(); ++i)\r\n        if (az.empty() || p[i][1] < lb.back())\r\n            az.pb(p[i][0]), lb.pb(p[i][1]), in.pb(n - p[i][2]);\r\n    bl = lb; reverse(all(bl));\r\n    for (int y = x + k + 1; y < n; ++y) {\r\n        if (a[x] <= a[y]) continue;\r\n        int s = upper_bound(all(az), ubound[y] - 1) - az.begin();\r\n        if (s > 0 && lb[s - 1] < a[y]) {\r\n            cout << \"YES\" << endl;\r\n            return 0;\r\n        }\r\n        s = upper_bound(all(bl), a[y] - 1) - bl.begin();\r\n        if (s > 0 && in[n - s] >= shift[y]) {\r\n            cout << \"YES\" << endl;\r\n            return 0;\r\n        }\r\n        if (q[y].first == -1) continue;\r\n        int zz = q[y].first;\r\n        int ubb = q[y].second;\r\n        if (zz >= z && zz <= x + k && a[y] > lbound[zz] && a[zz] < ubb) {\r\n            cout << \"YES\" << endl;\r\n            return 0;\r\n        }\r\n    }\r\n    cout << \"NO\" << endl;\r\n\r\n    return 0;\r\n}"
}