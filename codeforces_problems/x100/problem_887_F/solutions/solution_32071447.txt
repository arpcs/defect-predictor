{
    "id": 32071447,
    "contestId": 887,
    "creationTimeSeconds": 1509871554,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 887,
        "index": "F",
        "name": "Row of Models",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 887,
        "members": [
            {
                "handle": "Amaryllis"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509725100
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 108236800,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <string>\r\n#include <cstring>\r\n#include <set>\r\n#include <map>\r\n#include <unordered_map>\r\n#define pb push_back\r\n#define mp make_pair\r\nusing namespace std;\r\nconst int N=1e6+5;\r\nconst int INF=1e6+5;\r\n\r\nint n,k;\r\nint a[N];\r\n\r\nstruct seg_tree{\r\n\r\n  int val[4*N];\r\n\r\n  int mini(int x,int y)\r\n  {\r\n      if(a[x] < a[y])\r\n        return x;\r\n\r\n      return y;\r\n  }\r\n\r\n  int query(int pos,int low,int high,int l,int r)\r\n  {\r\n      if(l>high || r<low)\r\n        return 0;\r\n      if(l<=low && r>=high)\r\n        return val[pos];\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      return mini(query(pos*2,low,mid,l,r), query(pos*2+1,mid+1,high,l,r));\r\n  }\r\n\r\n  void update(int pos,int low,int high,int l,int r,int d)\r\n  {\r\n      if(l>high || r<low)\r\n        return;\r\n      if(l<=low && r>=high)\r\n      {\r\n          a[low]=d;\r\n\r\n          return;\r\n      }\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      update(pos*2,low,mid,l,r,d);\r\n      update(pos*2+1,mid+1,high,l,r,d);\r\n\r\n      val[pos]=mini(val[pos*2],val[pos*2+1]);\r\n\r\n  }\r\n\r\n  void build(int pos,int low,int high,int arr[])\r\n  {\r\n      if(low==high)\r\n      {\r\n          val[pos]=low;\r\n\r\n          return;\r\n      }\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      build(pos*2,low,mid,arr);\r\n      build(pos*2+1,mid+1,high,arr);\r\n\r\n      val[pos]=mini(val[pos*2],val[pos*2+1]);\r\n  }\r\n\r\n}seg;\r\n\r\nint nxt[N][3]; /// the first and second lesser, respectively\r\n\r\nstruct seg_tree_next{\r\n\r\n  int val[4*N];\r\n\r\n\r\n\r\n  int query(int pos,int low,int high,int l,int r)\r\n  {\r\n      if(l > r)\r\n        return n+1;\r\n\r\n      if(l>high || r<low)\r\n        return 0;\r\n      if(l<=low && r>=high)\r\n        return val[pos];\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      return min(query(pos*2,low,mid,l,r),query(pos*2+1,mid+1,high,l,r));\r\n  }\r\n\r\n  void update(int pos,int low,int high,int l,int r,int d)\r\n  {\r\n      if(l>high || r<low)\r\n        return;\r\n      if(l<=low && r>=high)\r\n      {\r\n          val[pos]=d;\r\n\r\n          return;\r\n      }\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      update(pos*2,low,mid,l,r,d);\r\n      update(pos*2+1,mid+1,high,l,r,d);\r\n\r\n      val[pos]=min(val[pos*2],val[pos*2+1]);\r\n\r\n  }\r\n\r\n  void build(int pos,int low,int high)\r\n  {\r\n      if(low==high)\r\n      {\r\n          val[pos]=n+1;\r\n\r\n          return;\r\n      }\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      build(pos*2,low,mid);\r\n      build(pos*2+1,mid+1,high);\r\n\r\n      val[pos]=min(val[pos*2],val[pos*2+1]);\r\n  }\r\n\r\n}seg_next;\r\n\r\nint sec[N];\r\nvoid get_next()\r\n{\r\n    seg_next.build(1,1,n);\r\n\r\n    int i;\r\n    int res;\r\n\r\n    for(i=1;i<=n;i++)\r\n    {\r\n        sec[i]=n+1;\r\n    }\r\n\r\n    nxt[n][1]=n+1;\r\n    nxt[n][2]=n+1;\r\n    seg_next.update(1,1,n,a[n],a[n],n);\r\n    for(i=n-1;i>=1;i--)\r\n    {\r\n       res=seg_next.query(1,1,n,1,a[i]-1);\r\n       nxt[i][1]=res;\r\n\r\n       if(res != n+1)\r\n       {\r\n           nxt[i][2]=min(seg_next.query(1,1,n,1,a[res]-1),seg_next.query(1,1,n,a[res]+1,a[i]-1));\r\n\r\n           nxt[i][2]=min(nxt[i][2],sec[a[res]]);\r\n       }\r\n       else\r\n       {\r\n           nxt[i][2]=n+1;\r\n       }\r\n\r\n       sec[a[i]]=seg.query(1,1,n,a[i],a[i]);\r\n\r\n       seg_next.update(1,1,n,a[i],a[i],i);\r\n    }\r\n}\r\n\r\nvector <int> is_min[N];\r\nint lb[N],ub[N];\r\nvoid check(int ind)\r\n{\r\n    int i;\r\n\r\n    if(n+1 - ind <= k)\r\n        lb[ind]=0;\r\n    else\r\n        lb[ind]=a[seg.query(1,1,n,ind+1,ind+k)];\r\n\r\n    ub[ind]=n+1;\r\n\r\n    for(i=0;i<is_min[ind].size();i++)\r\n    {\r\n        if(nxt[is_min[ind][i]][2] - is_min[ind][i] > k)\r\n        {\r\n            ub[ind]=min(ub[ind],a[is_min[ind][i]]);\r\n        }\r\n\r\n    }\r\n\r\n    lb[ind]++;\r\n    ub[ind]--;\r\n\r\n\r\n}\r\n\r\nint mark[N];\r\nint triggered;\r\nint min_triggered=INF;\r\n\r\nvector <int> v; /// 1 of these shall be swapped with 1 from not these that is < min_triggered\r\n\r\nvector <int> swappers;\r\n\r\n\r\nmap <int,int> mymap;\r\nmap <int,int>::iterator it;\r\nvoid Compress()\r\n{\r\n    int i;\r\n\r\n    for(i=1;i<=n;i++)\r\n        mymap[a[i]];\r\n\r\n    i=0;\r\n    for(it=mymap.begin();it!=mymap.end();++it)\r\n    {\r\n        i++;\r\n        it->second=i;\r\n    }\r\n\r\n    for(i=1;i<=n;i++)\r\n    {\r\n        a[i]=mymap[a[i]];\r\n    }\r\n}\r\n\r\nbool swap_sort(int x,int y)\r\n{\r\n    return a[x] < a[y];\r\n}\r\n\r\nbool v_sort(int x,int y)\r\n{\r\n    if(lb[x] != lb[y])\r\n     return lb[x] < lb[y];\r\n    return ub[x] > ub[y];\r\n}\r\n\r\nstruct seg_tree2{\r\n\r\n  int val[4*N],lazy[4*N];\r\n\r\n  void refresh(int pos,int low,int high)\r\n  {\r\n      if(lazy[pos]==0)\r\n        return;\r\n\r\n      val[pos]+=lazy[pos]*(high-low+1);\r\n\r\n      if(low!=high)\r\n      {\r\n          lazy[pos*2]+=lazy[pos];\r\n          lazy[pos*2+1]+=lazy[pos];\r\n      }\r\n\r\n      lazy[pos]=0;\r\n  }\r\n\r\n  int query(int pos,int low,int high,int l,int r)\r\n  {\r\n      refresh(pos,low,high);\r\n\r\n      if(l>high || r<low)\r\n        return 0;\r\n      if(l<=low && r>=high)\r\n        return val[pos];\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      return query(pos*2,low,mid,l,r)+query(pos*2+1,mid+1,high,l,r);\r\n  }\r\n\r\n  void update(int pos,int low,int high,int l,int r,int d)\r\n  {\r\n      refresh(pos,low,high);\r\n\r\n      if(l>high || r<low)\r\n        return;\r\n      if(l<=low && r>=high)\r\n      {\r\n          lazy[pos]+=d;\r\n          refresh(pos,low,high);\r\n\r\n          return;\r\n      }\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      update(pos*2,low,mid,l,r,d);\r\n      update(pos*2+1,mid+1,high,l,r,d);\r\n\r\n      val[pos]=val[pos*2]+val[pos*2+1];\r\n\r\n  }\r\n\r\n  void build(int pos,int low,int high,int arr[])\r\n  {\r\n      if(low==high)\r\n      {\r\n          val[pos]=arr[low];\r\n\r\n          return;\r\n      }\r\n\r\n      int mid=(low+high)/2;\r\n\r\n      build(pos*2,low,mid,arr);\r\n\r\n      build(pos*2+1,mid+1,high,arr);\r\n\r\n      val[pos]=val[pos*2]+val[pos*2+1];\r\n  }\r\n\r\n}seg2;\r\n\r\n\r\n\r\ninline int readInt () {\r\n\tbool minus = false;\r\n\tint result = 0;\r\n\tchar ch;\r\n\tch = getchar();\r\n\twhile (true) {\r\n\t\tif (ch == '-') break;\r\n\t\tif (ch >= '0' && ch <= '9') break;\r\n\t\tch = getchar();\r\n\t}\r\n\tif (ch == '-') minus = true; else result = ch-'0';\r\n\twhile (true) {\r\n\t\tch = getchar();\r\n\t\tif (ch < '0' || ch > '9') break;\r\n\t\tresult = result*10 + (ch - '0');\r\n\t}\r\n\tif (minus)\r\n\t\treturn -result;\r\n\telse\r\n\t\treturn result;\r\n}\r\n\r\nint main()\r\n{\r\n   int i;\r\n\r\n   //scanf(\"%d%d\", &n, &k);\r\n   n=readInt();\r\n   k=readInt();\r\n   for(i=1;i<=n;i++)\r\n   {\r\n       //scanf(\"%d\", &a[i]);\r\n       a[i]=readInt();\r\n   }\r\n   Compress();\r\n\r\n   seg.build(1,1,n,a);\r\n   a[0]=INF;\r\n\r\n   get_next();\r\n\r\n   for(i=1;i<=n;i++)\r\n   {\r\n       is_min[nxt[i][1]].pb(i);\r\n   }\r\n   for(i=1;i<=n;i++)\r\n   {\r\n      check(i);\r\n   }\r\n\r\n   for(i=1;i<=n;i++)\r\n   {\r\n       if(nxt[i][1] - i > k)\r\n       {\r\n           mark[i]++;\r\n           mark[i+k+1]--;\r\n\r\n           triggered++;\r\n\r\n           min_triggered=min(min_triggered,a[i]);\r\n       }\r\n   }\r\n   if(!triggered)\r\n   {\r\n       printf(\"YES\\n\");\r\n\r\n       return 0;\r\n   }\r\n\r\n   for(i=1;i<=n;i++)\r\n   {\r\n       mark[i]=mark[i-1]+mark[i];\r\n\r\n       if(mark[i] == triggered)\r\n       {\r\n           v.pb(i);\r\n       }\r\n     /*  else\r\n       {\r\n          if(a[i] < min_triggered && lb[i] <= ub[i])\r\n          {\r\n           swappers.pb(i);\r\n          }\r\n       }*/\r\n   }\r\n   if(!v.empty())\r\n   for(i=v.back()+1;i<=n;i++)\r\n   {\r\n          if(a[i] < min_triggered && lb[i] <= ub[i])\r\n          {\r\n           swappers.pb(i);\r\n          }\r\n   }\r\n   if(v.size() == 0 || swappers.size() == 0)\r\n   {\r\n       printf(\"NO\\n\");\r\n\r\n       return 0;\r\n   }\r\n\r\n\r\n   sort(swappers.begin(),swappers.end(),swap_sort);\r\n   sort(v.begin(),v.end(),v_sort);\r\n\r\n   for(i=0;i<v.size();i++)\r\n   {\r\n       ub[v[i]]=min(ub[v[i]],a[v[i]]-1);\r\n   }\r\n   for(i=0;i<swappers.size();i++)\r\n   {\r\n       seg2.update(1,1,n,lb[swappers[i]],ub[swappers[i]],1);\r\n   }\r\n   int last=0;\r\n   for(i=0;i<v.size();i++)\r\n   {\r\n      if(last < swappers.size())\r\n       while(a[swappers[last]] < lb[v[i]])\r\n       {\r\n           seg2.update(1,1,n,lb[swappers[last]],ub[swappers[last]],-1);\r\n\r\n           last++;\r\n\r\n           if(last == swappers.size())\r\n            break;\r\n\r\n       }\r\n       if(seg2.query(1,1,n,lb[v[i]],ub[v[i]]))\r\n       {\r\n           printf(\"YES\\n\");\r\n\r\n           cerr<<v[i]<<endl;\r\n           cerr<<lb[v[i]]<<\" \"<<ub[v[i]]<<endl;\r\n\r\n           return 0;\r\n       }\r\n   }\r\n\r\n   printf(\"NO\\n\");\r\n\r\n   return 0;\r\n}\r\n",
    "suggested_categories": [
        "c++ programming",
        "algorithm design",
        "data structures",
        "segment tree",
        "code optimization",
        "input/output handling",
        "memory management",
        "error handling",
        "conditional logic",
        "sorting algorithms",
        "debugging techniques",
        "variable manipulation",
        "mathematical computation",
        "logical operations",
        "efficient coding",
        "bound checking",
        "loop optimization",
        "integer manipulation",
        "binary search",
        "pointer management"
    ]
}