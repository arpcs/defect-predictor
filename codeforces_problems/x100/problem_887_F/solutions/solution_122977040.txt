{
    "id": 122977040,
    "contestId": 887,
    "creationTimeSeconds": 1626665003,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 887,
        "index": "F",
        "name": "Row of Models",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 887,
        "members": [
            {
                "handle": "phtniit"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509725100
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 420,
    "memoryConsumedBytes": 50278400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long i64;\r\n\r\nconst int inf = 1e9+7;\r\nconst int maxn = 500010;\r\n\r\nint c1[maxn * 4], c2[maxn * 4];\r\nint* C;\r\nvoid build(int idx, int u, int v) {\r\n        c1[idx] = c2[idx] = inf;\r\n        if (u == v) {\r\n                return;\r\n        }\r\n        int m = u + (v - u) / 2;\r\n        build(idx*2, u, m);\r\n        build(idx*2+1, m+1, v);\r\n}\r\nint xx, yy;\r\nvoid update(int idx, int u, int v) {\r\n        if (u == v) {\r\n                C[idx] = yy;\r\n                return;\r\n        }\r\n        int m = u + (v - u) / 2;\r\n        if (xx <= m) {\r\n                update(idx*2, u, m);\r\n        } else {\r\n                update(idx*2+1, m+1, v);\r\n        }\r\n        C[idx] = min(C[idx*2], C[idx*2+1]);\r\n}\r\nint query(int idx, int u, int v) {\r\n        int ret = inf;\r\n        if (xx <= u && v <= yy) {\r\n                return C[idx];\r\n        }\r\n        int m = u + (v - u) / 2;\r\n        if (xx <= m) {\r\n                ret = min(ret, query(idx*2, u, m));\r\n        }\r\n        if (yy > m) {\r\n                ret = min(ret, query(idx*2+1, m+1, v));\r\n        }\r\n        return ret;\r\n}\r\n\r\nint a[maxn];\r\nbool gao(int N, int K) {\r\n        static int q[maxn];\r\n        int h = 0, t = 0;\r\n        q[t++] = N;\r\n\r\n        static int mx[maxn], mn[maxn], lat[maxn];\r\n\r\n        static vector<int> bad;\r\n        for (int i = N-1; i >= 0; --i) {\r\n                while (h < t && q[h] - i > K) ++h;\r\n                mn[i] = a[q[h]];\r\n\r\n                while (h < t && a[i] <= a[q[t-1]]) --t;\r\n                mx[i] = inf;\r\n                lat[i] = 1;\r\n                if (t == h+1) {\r\n                        mx[q[h]] = min(mx[q[h]], a[i]);\r\n                        lat[q[h]] = max(lat[q[h]], i);\r\n                }\r\n\r\n                if (t == h) {\r\n                        bad.push_back(i);\r\n                }\r\n\r\n                q[t++] = i;\r\n        }\r\n        if (bad.empty()) {\r\n                return true;\r\n        }\r\n\r\n        if (bad.size() == 1) {\r\n                for (int i = 0; i < bad.front(); ++i) {\r\n                        if (a[i] > mn[bad.front()] && a[bad.front()] > mn[i]) {\r\n                                return true;\r\n                        }\r\n                }\r\n        }\r\n\r\n        for (int i = 0, j = bad.size() - 1; i < j; ++i, --j) {\r\n                swap(bad[i], bad[j]);\r\n        }\r\n        static vector<int> U[maxn];\r\n        for (int i = bad.front(); i <= bad.front() + K && i < N; ++i) {\r\n                int j = upper_bound(bad.begin(), bad.end(), i) - bad.begin();\r\n                if (j == bad.size()) { // bad.back() is covered\r\n                        int ii = max(i+1, bad.back());\r\n                        U[ii].push_back(i+1);\r\n                        continue;\r\n                }\r\n                if (bad.back() - bad[j] > K) { // either bad.back() or bad[j] can not be covered\r\n                        continue;\r\n                }\r\n                U[bad.back()].push_back(i+1);\r\n                if (bad[j] + K + 1 < N) {\r\n                        U[bad[j] + K + 1].push_back(-i-1);\r\n                }\r\n        }\r\n\r\n        // supposed that we would swap i and j:\r\n        //      1. if j > i + k\r\n        //      i.      a[j] < a[x]\r\n        //              ii. a[j] > mn[i]\r\n        //              iii.a[i] > mn[j]\r\n        //              iv. a[i] < mx[j]\r\n        //      2. if j <= i + k\r\n        //              i.      a[j] < a[x]\r\n        //              ii. a[j] > mn[i] **mn[i] may be located at j?**\r\n        //              iii.a[i] > mn[j]\r\n        //              iv. 'a[i] < mx[j]' OR 'i >= lat[j]'\r\n\r\n        static vector<pair<int, int>> vt;\r\n        vt.emplace_back(0, 0);\r\n        vt.emplace_back(inf, N);\r\n        for (int i = 0; i < N; ++i) {\r\n                vt.emplace_back(a[i], i);\r\n        }\r\n        sort(vt.begin(), vt.end());\r\n\r\n        build(1, 1, vt.size());\r\n        for (int ii = bad.back(); ii < N; ++ii) {\r\n                //if (bad.size() > 1 && ii > bad.back() + K) {\r\n                //break;\r\n                //}\r\n                for (int j = 0; j < U[ii].size(); ++j) {\r\n                        int i = U[ii][j];\r\n                        if (i > 0) {\r\n                                i--;\r\n                                yy = mn[i];\r\n                        } else {\r\n                                i = -i-1;\r\n                                yy = inf;\r\n                        }\r\n                        xx = lower_bound(vt.begin(), vt.end(), make_pair(a[i], i)) - vt.begin() + 1;\r\n                        C = c1;\r\n                        update(1, 1, vt.size());\r\n                        xx = i;\r\n                        C = c2;\r\n                        update(1, 1, vt.size());\r\n                }\r\n                int j = ii;\r\n                if (a[j] >= a[bad.front()] || mn[j] + 1 > mx[j] - 1) {\r\n                        continue;\r\n                }\r\n                xx = upper_bound(vt.begin(), vt.end(), make_pair(mn[j], N)) - vt.begin() + 1; // after mn[j]\r\n                yy = lower_bound(vt.begin(), vt.end(), make_pair(mx[j], 0)) - vt.begin() + 1 - 1; // before mx[j]\r\n                C = c1;\r\n                if (query(1, 1, vt.size()) < a[j]) {\r\n                        return true;\r\n                }\r\n                xx = lat[j];\r\n                yy = vt.size();\r\n                C = c2;\r\n                if (query(1, 1, vt.size()) < a[j]) {\r\n                        return true;\r\n                }\r\n        }\r\n\r\n        return false;\r\n}\r\n\r\nint main() {\r\n        int n, k;\r\n        scanf(\"%d %d\", &n, &k);\r\n        for (int i = 0; i < n; ++i) {\r\n                scanf(\"%d\", &a[i]);\r\n        }\r\n        if (gao(n, k)) {\r\n                puts(\"YES\");\r\n        } else {\r\n                puts(\"NO\");\r\n        }\r\n        return 0;\r\n}"
}