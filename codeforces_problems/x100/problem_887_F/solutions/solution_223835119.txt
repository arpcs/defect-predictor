{
    "id": 223835119,
    "contestId": 887,
    "creationTimeSeconds": 1695039864,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 887,
        "index": "F",
        "name": "Row of Models",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 887,
        "members": [
            {
                "handle": "propane"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509725100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 576,
    "memoryConsumedBytes": 52428800,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<vector>\r\n#include<set>\r\n#include<limits>\r\n#include<numeric>\r\n#include<functional>\r\nusing namespace std;\r\nusing LL = long long;\r\n\r\nconst int INF = 0x3f3f3f3f;\r\nstruct Info {\r\n    int mn = INF;\r\n};\r\n\r\nInfo operator+(const Info &a, const Info &b){\r\n    return {min(a.mn, b.mn)};\r\n}\r\n\r\ntemplate<class Info>\r\nstruct SegmentTree{\r\n    int n;\r\n    vector<Info> info;\r\n\r\n    SegmentTree() {}\r\n\r\n    SegmentTree(int n, Info _init = Info()){\r\n        init(vector<Info>(n, _init));\r\n    }\r\n\r\n    SegmentTree(const vector<Info> &_init){\r\n        init(_init);\r\n    }\r\n\r\n    void init(const vector<Info> &_init){\r\n        n = (int)_init.size();\r\n        info.assign((n << 2) + 1, Info());\r\n        function<void(int, int, int)> build = [&](int p, int l, int r){\r\n            if (l == r){\r\n                info[p] = _init[l - 1];\r\n                return;\r\n            }\r\n            int m = (l + r) / 2;\r\n            build(2 * p, l, m);\r\n            build(2 * p + 1, m + 1, r);\r\n            pull(p);\r\n        };\r\n        build(1, 1, n);\r\n    }\r\n\r\n    void pull(int p){\r\n        info[p] = info[2 * p] + info[2 * p + 1];\r\n    }\r\n\r\n    void modify(int p, int l, int r, int x, const Info &v){\r\n        if (l == r){\r\n            info[p] = v;\r\n            return;\r\n        }\r\n        int m = (l + r) / 2;\r\n        if (x <= m){\r\n            modify(2 * p, l, m, x, v);\r\n        } \r\n        else{\r\n            modify(2 * p + 1, m + 1, r, x, v);\r\n        }\r\n        pull(p);\r\n    }\r\n\r\n    void modify(int p, const Info &v){\r\n        modify(1, 1, n, p, v);\r\n    }\r\n\r\n    Info query(int p, int l, int r, int x, int y){\r\n        if (l > y || r < x){\r\n            return Info();\r\n        }\r\n        if (l >= x && r <= y){\r\n            return info[p];\r\n        }\r\n        int m = (l + r) / 2;\r\n        return query(2 * p, l, m, x, y) + query(2 * p + 1, m + 1, r, x, y);\r\n    }\r\n\r\n    Info query(int l, int r){\r\n        return query(1, 1, n, l, r);\r\n    }\r\n\r\n    int find_first(int p, int l, int r, int L, int R, const function<bool(const Info&)> &f, Info &pre){\r\n        if (l > R || r < L){\r\n            return r + 1;\r\n        }\r\n        if (l >= L && r <= R){\r\n            if (!f(pre + info[p])){\r\n                pre = pre + info[p];\r\n                return r + 1;\r\n            }\r\n            if (l == r) return r;\r\n            int m = (l + r) / 2;\r\n            int res;\r\n            if (f(pre + info[2 * p])){\r\n                res = find_first(2 * p, l, m, L, R, f, pre);\r\n            }\r\n            else{\r\n                pre = pre + info[2 * p];\r\n                res = find_first(2 * p + 1, m + 1, r, L, R, f, pre);\r\n            }\r\n            return res;\r\n        }\r\n        int m = (l + r) / 2;\r\n        int res = m + 1;\r\n        if (L <= m){\r\n            res = find_first(2 * p, l, m, L, R, f, pre);\r\n        }\r\n        if (R > m && res == m + 1){\r\n            res = find_first(2 * p + 1, m + 1, r, L, R, f, pre);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    int find_first(int l, int r, const function<bool(const Info&)> &f){\r\n        Info pre = Info();\r\n        return find_first(1, 1, n, l, r, f, pre);\r\n    }\r\n\r\n    int find_last(int p, int l, int r, int L, int R, const function<bool(const Info&)> &f, Info &suf){\r\n        if (l > R || r < L){\r\n            return l - 1;\r\n        }\r\n        if (l >= L && r <= R){\r\n            if (!f(info[p] + suf)){\r\n                suf = info[p] + suf;\r\n                return l - 1;\r\n            }\r\n            if (l == r) return r;\r\n            int m = (l + r) / 2;\r\n            int res;\r\n            if (f(info[2 * p + 1] + suf)){\r\n                res = find_last(2 * p + 1, m + 1, r, L, R, f, suf);\r\n            }\r\n            else{\r\n                suf = info[2 * p + 1] + suf;\r\n                res = find_last(2 * p, l, m, L, R, f, suf);\r\n            }\r\n            return res;\r\n        }\r\n        int m = (l + r) / 2;\r\n        int res = m;\r\n        if (R > m){\r\n            res = find_last(2 * p + 1, m + 1, r, L, R, f, suf);\r\n        }\r\n        if (L <= m && res == m){\r\n            res = find_last(2 * p, l, m, L, R, f, suf);\r\n        }\r\n        return res;        \r\n    }\r\n\r\n    int find_last(int l, int r, const function<bool(const Info&)> &f){\r\n        Info suf = Info();\r\n        return find_last(1, 1, n, l, r, f, suf);\r\n    }\r\n};\r\n\r\nint main(){\r\n\r\n#ifdef LOCAL\r\n    freopen(\"data.in\", \"r\", stdin);\r\n    freopen(\"data.out\", \"w\", stdout);\r\n#endif\r\n\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ios::sync_with_stdio(0);\r\n\r\n    int n, k;\r\n    cin >> n >> k;\r\n    vector<int> a(n + 2);\r\n    a[n + 1] = 0;\r\n    for(int i = 1; i <= n; i++){\r\n        cin >> a[i];\r\n    }\r\n    vector<int> d(n + 1);\r\n    set<pair<int, int> > s;\r\n    s.insert({0, n + 1});\r\n\r\n    auto inter = [&](pair<int, int> a, pair<int, int> b) -> pair<int, int> {\r\n        return {max(a.first, b.first), min(a.second, b.second)};\r\n    };\r\n\r\n    int mn = INF;\r\n    vector<int> need(n + 1, INF);\r\n    vector<vector<int> > pos(n + 1);\r\n\r\n    pair<int, int> seg = {0, n + 1};\r\n    for(int i = n; i >= 1; i--){\r\n        if (i + k <= n){\r\n            s.erase({a[i + k + 1], i + k + 1});\r\n            if (s.begin()->first >= a[i]){\r\n                seg = inter(seg, {i + 1, i + k});\r\n                mn = min(mn, a[i]);\r\n            }\r\n            if (s.size() == 1 || next(s.begin())->first >= a[i]){\r\n                need[s.begin()->second] = min(need[s.begin()->second], a[i] - 1);\r\n                pos[s.begin()->second].push_back(i);\r\n            }\r\n        }\r\n        s.insert({a[i], i});\r\n    }\r\n    if (seg.first == 0){\r\n        cout << \"YES\" << '\\n';\r\n        return 0;\r\n    }\r\n    if (seg.first > seg.second){\r\n        cout << \"NO\" << '\\n';\r\n        return 0;\r\n    }\r\n\r\n    vector<int> suf(n + 1);\r\n    suf[seg.second] = seg.second;\r\n    for(int i = seg.second - 1; i >= seg.first; i--){\r\n        suf[i] = suf[i + 1];\r\n        if (a[i] < a[suf[i]]) suf[i] = i;\r\n    }\r\n\r\n    vector<Info> init(n + 1);\r\n    for(int i = 0; i < n + 1; i++)\r\n        init[i].mn = a[i + 1];\r\n    SegmentTree<Info> st(init);\r\n\r\n    for(int i = seg.second + 1; i <= n; i++){\r\n        if (a[i] >= mn) continue;\r\n        int val = INF;\r\n        int last = seg.second;\r\n\r\n        auto f = [&](const Info &info){\r\n            return info.mn < val;\r\n        };\r\n\r\n        for(auto x : pos[i]){\r\n            if (x > seg.second){\r\n                val = min(val, a[x]);\r\n                continue;\r\n            }\r\n            if (x + 1 <= last){\r\n                int cand = st.find_last(x + 1, last, f);\r\n                if (cand > x && st.query(cand, cand + k).mn < a[i]){\r\n                    cout << \"YES\" << '\\n';\r\n                    return 0;\r\n                }\r\n            }\r\n            val = min(val, a[x]);\r\n            last = x - 1;\r\n        }\r\n        if (seg.first <= last){\r\n            int cand = st.find_last(seg.first, last, f);\r\n            if (cand >= seg.first && st.query(cand, cand + k).mn < a[i]){\r\n                cout << \"YES\" << '\\n';\r\n                return 0;\r\n            }\r\n        }\r\n    }    \r\n    cout << \"NO\" << '\\n';\r\n\r\n}"
}