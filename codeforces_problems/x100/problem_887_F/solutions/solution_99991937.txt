{
    "id": 99991937,
    "contestId": 887,
    "creationTimeSeconds": 1606745785,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 887,
        "index": "F",
        "name": "Row of Models",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 887,
        "members": [
            {
                "handle": "prvocislo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509725100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 12083200,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <string>\r\n#include <iomanip>\r\n#include <set>\r\n#include <map>\r\n#include <queue>\r\n#include <bitset>\r\n#include <random>\r\n#include <chrono>\r\ntypedef long long ll;\r\ntypedef long double ld;\r\nusing namespace std;\r\n\r\nclass sum \r\n{\r\n\tint n;\r\n\tvector<int>v;\r\npublic:\r\n\tsum(int _n) :n(_n), v(vector<int>(2 * n, 0)) {}\r\n\tint get(int i)\r\n\t{\r\n\t\tint rval = 0;\r\n\t\tfor (i += n; i > 0; i >>= 1) rval += v[i];\r\n\t\treturn rval;\r\n\t}\r\n\tvoid add(int l, int r, int val) // [l, r) a 0-indexovanie\r\n\t{\r\n\t\tr = min(n, r);\r\n\t\tfor (l += n, r += n; l < r; l >>= 1, r >>= 1)\r\n\t\t{\r\n\t\t\tif (l & 1) v[l++] += val;\r\n\t\t\tif (r & 1) v[--r] += val;\r\n\t\t}\r\n\t}\r\n};\r\nvoid ending(bool good)\r\n{\r\n\tif (good) cout << \"YES\\n\";\r\n\telse cout << \"NO\\n\";\r\n\texit(0);\r\n}\r\nbool cmp(pair<int, int> p1, pair<int, int> p2)\r\n{\r\n\tif (p1.second == p2.second) return p1.second > p2.second;\r\n\treturn p1.first < p2.first;\r\n}\r\nint main()\r\n{\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(0);\r\n\tint n, k;\r\n\tcin >> n >> k;\r\n\tvector<pair<int, int>> a(n);\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t\tcin >> a[i].first;\r\n\t\ta[i].second = n - i;\r\n\t}\r\n\ta.push_back({ 0, 0 });\r\n\tn++;\r\n\tsort(a.begin(), a.end(), cmp); \r\n\tsum r1(n + 1);\r\n\tint left = 0, right = n, first = -1;\r\n\tfor (int i = 0; i < n; i++) // ideme po jednom a pre kazde cislo zistime, ci je\r\n\t\t\t\t\t\t\t\t// o maximalne k pred nim nejake uz spracovane (mensie) cislo\r\n\t{\r\n\t\tif (i && !r1.get(a[i].second))\r\n\t\t{\r\n\t\t\tif (first == -1) first = i;\r\n\t\t\tleft = max(left, a[i].second - k);\r\n\t\t\tright = min(right, a[i].second - 1);\r\n\t\t}\r\n\t\tr1.add(a[i].second, a[i].second + k + 1, 1); // pridame interval ktory pokrylo toto cislo\r\n\t}\r\n\t//for (int i = 0; i < n; i++) cout << r1.get(i) << \" \";\r\n\t//cout << \"\\n\";\r\n\tif (first == -1) ending(true); // ziadne zle pozicie\r\n\tif (left > right) ending(false); // nevieme ich vsetky pokryt len jednou vymenou, su prilis daleko\r\n\tfor (int i = 0; i < first - 1; i++) // spracuvavame len po first lebo to cislo ktore vymenime\r\n\t\t\t\t\t\t\t\t\t// musi byt mensie ako first, inac by mu nepomohlo\r\n\t{\r\n\t\tif (a[i].second <= left && left <= a[i].second + k) ending(true); // nasli sme dobru vymenu\r\n\t}\r\n\tending(false);\r\n\treturn 0;\r\n}"
}