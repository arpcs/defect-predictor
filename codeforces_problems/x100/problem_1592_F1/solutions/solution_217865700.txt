{
    "id": 217865700,
    "contestId": 1592,
    "creationTimeSeconds": 1691500140,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1592,
        "index": "F1",
        "name": "Alice and Recoloring 1",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1592,
        "members": [
            {
                "handle": "_mjj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633271700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 1024000,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <vector>\r\n#include <cstdio>\r\n#include <queue>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <cmath>\r\n#include <map>\r\n#include <stack>\r\n#include <sstream>\r\n#define ios ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\r\n#define TIME cerr << 1e3 * clock() / CLOCKS_PER_SEC << \" ms\\n\";\r\n#define debug(x) cerr << #x << \" : \" << x << '\\n'\r\n\r\n#define x first\r\n#define y second\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef pair<int , int> PII;\r\n\r\nconst int N = 2e5 + 5;\r\nconst int INF = 0x3f3f3f3f;\r\nconst int mod = 998244353;\r\n\r\nint read(){\r\n    int x = 0 , f = 1;\r\n    char c = getchar();\r\n    while(c < '0' || c > '9'){\r\n        if(c == '-')f = -1;\r\n        c = getchar();\r\n    }\r\n    while(c >= '0' && c <= '9'){\r\n        x = x * 10 + c - '0';\r\n        c = getchar();\r\n    }\r\n    return x * f;\r\n}\r\n\r\nint c[505][505];\r\n\r\nvoid solve(){\r\n    int n , m;\r\n    cin >> n >> m;\r\n    for(int i = 1 ; i <= n + 1 ; i ++)\r\n        for(int j = 1 ; j <= m + 1 ; j ++)\r\n            c[i][j] = 0;\r\n    for(int i = 1 ; i <= n ; i ++){\r\n        string s;\r\n        cin >> s;\r\n        for(int j = 1 ; j <= m ; j ++)\r\n            if(s[j - 1] == 'B')c[i][j] = 1;\r\n    }\r\n    for(int i = 1 ; i <= n ; i ++){\r\n        for(int j = 1 ; j <= m ; j ++)\r\n            c[i][j] ^= c[i + 1][j] ^ c[i][j + 1] ^ c[i + 1][j + 1];\r\n    }\r\n    int cnt = 0;\r\n    for(int i = 1 ; i <= n ; i ++){\r\n        for(int j = 1 ; j <= m ; j ++)\r\n            cnt += c[i][j];\r\n    }\r\n    if(c[n][m]){\r\n        for(int i = 1 ; i <= n - 1 ; i ++){\r\n            for(int j = 1 ; j <= m - 1 ; j ++){\r\n                if(c[i][m] && c[n][j] && c[n][m] && c[i][j]){\r\n                    cnt --;\r\n                    cout << cnt << endl;\r\n                    return ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << cnt << endl;\r\n}\r\n\r\nint main(){\r\n    int T = 1;\r\n    // cin >> T;\r\n    while(T --){\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n/* stuff you should look for\r\n * int overflow, array bounds\r\n * special cases (n=1?)\r\n * do smth instead of nothing and stay organized\r\n * WRITE STUFF DOWN\r\n * DON'T GET STUCK ON ONE APPROACH\r\n */"
}