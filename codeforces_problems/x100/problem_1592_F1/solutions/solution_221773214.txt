{
    "id": 221773214,
    "contestId": 1592,
    "creationTimeSeconds": 1693804829,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1592,
        "index": "F1",
        "name": "Alice and Recoloring 1",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1592,
        "members": [
            {
                "handle": "markthitrin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633271700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 204800,
    "source": "#include <iostream>\r\n#include <string>\r\n#include <bitset>\r\n#include <vector>\r\n#include <set>\r\nconst int MAXN = 505;\r\nstd::bitset<505> f[MAXN];\r\nstd::string target[MAXN];\r\nint n, m;\r\nvoid flip(int x, int y) {\r\n\tfor (int q = 0; q <= x; q++) {\r\n\t\tfor (int w = 0; w <= y; w++) {\r\n\t\t\tf[q][w] = !f[q][w];\r\n\t\t}\r\n\t}\r\n}\r\nint main() {\r\n\tstd::cin >> n >> m;\r\n\tint count = 0;\r\n\tstd::set<std::pair<int, int>> ss;\r\n\tfor (int q = 0; q < n; q++) {\r\n\t\tstd::cin >> target[q];\r\n\t\tfor (int w = 0; w < m; w++) {\r\n\t\t\tf[q][w] = 1;\r\n\t\t}\r\n\t}\r\n\tfor (int q = n - 1; q >= 0; q--) {\r\n\t\tfor (int w = m - 1; w >= 0; w--) {\r\n\t\t\tif (target[q][w] == 'W' && !f[q][w]) {\r\n\t\t\t\tflip(q, w);\r\n\t\t\t\tss.insert({ q,w });\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t\telse if (target[q][w] == 'B' && f[q][w]) {\r\n\t\t\t\tflip(q, w);\r\n\t\t\t\tss.insert({ q,w });\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tbool found = false;\r\n\tfor (int q = 1; q < n; q++) {\r\n\t\tfor (int w = 1; w < m; w++) {\r\n\t\t\tif (ss.count({ q,m - 1 }) == 1 && ss.count({ n - 1, w }) == 1 && ss.count({ q,w }) && ss.count({ n - 1,m - 1 })) {\r\n\t\t\t\tcount--;\r\n\t\t\t\tfound = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (found) break;\r\n\t}\r\n\tstd::cout << count;\r\n\treturn 0;\r\n}"
}