{
    "id": 1825445,
    "contestId": 173,
    "creationTimeSeconds": 1340542678,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 173,
        "index": "A",
        "name": "Rock-Paper-Scissors",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1300,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 173,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333724400
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 50,
    "memoryConsumedBytes": 1433600,
    "source": "\n#include <iostream>\n#include<string.h>\n#include<stdio.h>\nusing namespace std;\nint x,y,i,j,k,n,l,n1,n2;\nchar s1[1001],s2[1001];\nint gcd(int x,int y){\n\tif (x<y) swap(x,y);\n\tif (x%y==0) return y;\n\treturn gcd(y,x%y);\n}\nint lcm(int x,int y){\n\treturn x/gcd(x,y)*y;\n}\nint main() {\n\tscanf(\"%d\",&n);\n\tscanf(\"%s\",s1);\n\tscanf(\"%s\",s2);\n\tn1=strlen(s1);\n\tn2=strlen(s2);\n\tl=lcm(n1,n2);\n\ti=0;j=0;\n\t//printf(\"%d %d\\n\",l,n);\n\tfor (k=1;k<=l;i++,j++,k++){\n\t\ti=i%n1;\n\t\tj=j%n2;\n\t\tif (s1[i]=='R' && s2[j]=='S') x++;\n\t\tif (s1[i]=='R' && s2[j]=='P') y++;\n\t\tif (s1[i]=='P' && s2[j]=='R') x++;\n\t\tif (s1[i]=='P' && s2[j]=='S') y++;\n\t\tif (s1[i]=='S' && s2[j]=='P') x++;\n\t\tif (s1[i]=='S' && s2[j]=='R') y++;\n\t//\tprintf(\"%d %d %d\\n\",k,x,y);\n\t}\n\tx*=(n/l);\n\ty*=(n/l);\n\ti=0;j=0;\n\tfor (k=0;k<n-n/l*l;i++,j++,k++){\n\t\ti=i%n1;\n\t\tj=j%n2;\n\t\tif (s1[i]=='R' && s2[j]=='S') x++;\n\t\tif (s1[i]=='R' && s2[j]=='P') y++;\n\t\tif (s1[i]=='P' && s2[j]=='R') x++;\n\t\tif (s1[i]=='P' && s2[j]=='S') y++;\n\t\tif (s1[i]=='S' && s2[j]=='P') x++;\n\t\tif (s1[i]=='S' && s2[j]=='R') y++;\n\t\t//printf(\"%d %d\\n\",x,y);\n\t}\n\tprintf(\"%d %d\\n\",y,x);\n\treturn 0;\n}\n\n\t\t\t\t \t \t \t\t  \t\t\t \t   \t\t   \t"
}