{
    "contestId": 1197,
    "index": "A",
    "name": "DIY Wooden Ladder",
    "type": "PROGRAMMING",
    "rating": 900,
    "tags": [
        "greedy",
        "math",
        "sortings"
    ],
    "desc": {
        "title": "A. DIY Wooden Ladder",
        "statement": "<p>Let's denote a $$$k$$$-step ladder as the following structure: exactly $$$k + 2$$$ wooden planks, of which</p><ul> <li> two planks of length <span class=\"tex-font-style-bf\">at least</span> $$$k+1$$$ \u2014 the base of the ladder; </li><li> $$$k$$$ planks of length <span class=\"tex-font-style-bf\">at least</span> $$$1$$$ \u2014 the steps of the ladder; </li></ul><p>Note that neither the base planks, nor the steps planks are required to be equal.</p><p>For example, ladders $$$1$$$ and $$$3$$$ are correct $$$2$$$-step ladders and ladder $$$2$$$ is a correct $$$1$$$-step ladder. On the first picture the lengths of planks are $$$[3, 3]$$$ for the base and $$$[1]$$$ for the step. On the second picture lengths are $$$[3, 3]$$$ for the base and $$$[2]$$$ for the step. On the third picture lengths are $$$[3, 4]$$$ for the base and $$$[2, 3]$$$ for the steps. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/18570b6fce4c660f013d641b147bb29b7aefa05a.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>You have $$$n$$$ planks. The length of the $$$i$$$-th planks is $$$a_i$$$. You don't have a saw, so you can't cut the planks you have. Though you have a hammer and nails, so you can assemble the improvised \"ladder\" from the planks.</p><p>The question is: what is the maximum number $$$k$$$ such that you can choose some subset of the given planks and assemble a $$$k$$$-step ladder using them?</p>",
        "inputSpecification": "<p>The first line contains a single integer $$$T$$$ ($$$1 \\le T \\le 100$$$) \u2014 the number of queries. The queries are independent.</p><p>Each query consists of two lines. The first line contains a single integer $$$n$$$ ($$$2 \\le n \\le 10^5$$$) \u2014 the number of planks you have.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^5$$$) \u2014 the lengths of the corresponding planks.</p><p>It's guaranteed that the total number of planks from all queries doesn't exceed $$$10^5$$$.</p>",
        "outputSpecification": "<p>Print $$$T$$$ integers \u2014 one per query. The $$$i$$$-th integer is the maximum number $$$k$$$, such that you can choose some subset of the planks given in the $$$i$$$-th query and assemble a $$$k$$$-step ladder using them.</p><p>Print $$$0$$$ if you can't make even $$$1$$$-step ladder from the given set of planks.</p>",
        "samples": [
            {
                "input": "\n4\n4\n1 3 1 3\n3\n3 3 2\n5\n2 3 3 4 2\n3\n1 1 2\n",
                "output": "\n2\n1\n2\n0\n"
            }
        ],
        "note": "<p>Examples for the queries $$$1-3$$$ are shown at the image in the legend section.</p><p>The Russian meme to express the quality of the ladders:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/98433764ed44d5a257f130d5628316f3ce47b266.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center>"
    },
    "suggested_categories": [
        "algorithms",
        "combinatorial optimization",
        "mathematics",
        "graph theory",
        "greedy algorithms",
        "dynamic programming",
        "computational geometry",
        "data structures",
        "searching",
        "sorting",
        "number theory",
        "geometry",
        "combinatorics",
        "graph algorithms",
        "binary search",
        "optimization",
        "pattern matching",
        "set theory",
        "recursive algorithms",
        "mathematical modeling"
    ]
}