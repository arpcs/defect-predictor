{
    "id": 144247520,
    "contestId": 1197,
    "creationTimeSeconds": 1643301212,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1197,
        "index": "A",
        "name": "DIY Wooden Ladder",
        "type": "PROGRAMMING",
        "rating": 900,
        "tags": [
            "greedy",
            "math",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1197,
        "members": [
            {
                "handle": "wxhtzdy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563806100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/*\r\nidea for div1F for round 768:\r\n  -make dag so you wont have cycle\r\n  -then do dp like dp[node][remove this node (0 or 1)][current depth]\r\n  -so in our dag we want depth to be <= 2 -> and we can do dp for that?\r\n*/\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(0);\r\n  const int MAX = (int) 5e4 + 5;\r\n  vector<vector<int>> divs(MAX);\r\n  for (int i = 1; i < MAX; i++) {\r\n    for (int j = i + i; j < MAX; j += i) {\r\n      divs[j].push_back(i);\r\n    }\r\n  }\r\n  int tt;\r\n  cin >> tt;\r\n  vector<int> cnt(MAX);\r\n  while (tt--) {\r\n    int n;\r\n    cin >> n;\r\n    vector<int> a(n);\r\n    for (int i = 0; i < n; i++) {\r\n      cin >> a[i];\r\n    }\r\n    sort(a.begin(), a.end());\r\n    vector<vector<int>> g(n);\r\n    vector<int> par(n + 1, n);\r\n    for (int i = 0; i < n; i++) {\r\n      for (int j : divs[a[i]]) {\r\n        if (par[j] == n) {\r\n          par[j] = i;\r\n        }\r\n      }\r\n    }\r\n    vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(2, vector<int>(3, 1e9)));\r\n    function<void(int)> Solve = [&](int u) {\r\n      if (g[u].empty()) {\r\n        dp[u][1][0] = 1;\r\n        dp[u][0][1] = 0;\r\n        dp[u][0][2] = 0;\r\n        return;\r\n      }\r\n      for (int v : g[u]) {\r\n        Solve(v);\r\n        dp[u][1][0] += dp[v][1][0] + 1;\r\n        dp[u][1][1] += max();\r\n        dp[u][0][0]\r\n      }\r\n    };\r\n    Solve(n);\r\n    cout << min({dp[n][0][0], dp[n][0][1], dp[n][0][2]}) << '\\n';\r\n  }\r\n  return 0;\r\n}\r\n"
}