{
    "id": 79275745,
    "contestId": 1344,
    "creationTimeSeconds": 1588859437,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "Xylofo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 18329600,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\n#define trav(a, x) for(auto& a : x)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\n\nvi topoSort(const vector<vi>& gr) {\n  vi indeg(sz(gr)), ret;\n  trav(li, gr) trav(x, li) indeg[x]++;\n  queue<int> q; // use priority queue for lexic. smallest ans.\n  rep(i,0,sz(gr)) if (indeg[i] == 0) q.push(-i);\n  while (!q.empty()) {\n    int i = -q.front(); // top() for priority queue\n    ret.push_back(i);\n    q.pop();\n    trav(x, gr[i])\n      if (--indeg[x] == 0) q.push(-x);\n  }\n  return ret;\n}\n\n\nvoid bad(string s = \"-1\") {\n  cout << s << endl;\n  exit(0);\n}\n\nint main() {\n  cin.tie(0)->sync_with_stdio(0);\n  cin.exceptions(cin.failbit);\n  int n, m;\n  cin >> n >> m;\n  vector<vi> g(n), rg(n);\n  rep(i,0,m) {\n    int a,b;\n    cin>>a>>b;\n    --a,--b;\n    g[a].emplace_back(b);\n    rg[b].emplace_back(a);\n  }\n  vi ord = topoSort(g);\n  if(sz(ord) < n) bad();\n\n  auto go = [&](vi &reach, auto& g) {\n    for(int x : ord) {\n      reach[x] = x;\n      for(int y : g[x]) reach[x] = min(reach[x], reach[y]);\n    }\n  };\n\n  vi l(n), r(n);\n  go(l, rg);\n  reverse(all(ord));\n  go(r, g);\n\n  string ans;\n  rep(i,0,n) ans += \"EA\"[(l[i] == i && r[i] == i)];\n  int k = count(all(ans), 'A');\n  cout << k << endl;\n  cout << ans << endl;\n}\n"
}