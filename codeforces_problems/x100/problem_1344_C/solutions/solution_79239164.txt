{
    "id": 79239164,
    "contestId": 1344,
    "creationTimeSeconds": 1588833692,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "Dart-Xeyter"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 3891200,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\r\n#define p pair<int, int>\r\n#define endl '\\n'\r\n\r\nusing namespace std;\r\n\r\nvector<bool> s;\r\nvector<bool> parents;\r\nvector<vector<int>> d, d1;\r\n\r\nbool cycle(int vertex){\r\n    s[vertex] = false, parents[vertex] = true;\r\n    for (int q: d[vertex]){\r\n        if (parents[q]){\r\n            return true;\r\n        }\r\n        if (s[q]){\r\n            if (cycle(q)){\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    parents[vertex] = false;\r\n    return false;\r\n}\r\n\r\nvoid DFS(int vertex, int k){\r\n    s[vertex] = false;\r\n    if (k > 0){\r\n        for (int q: d[vertex]){\r\n            if (s[q]){\r\n                DFS(q, k);\r\n            }\r\n        }\r\n    }\r\n    if (k % 2 == 0){\r\n        for (int q: d1[vertex]){\r\n            if (s[q]){\r\n                DFS(q, k);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nsigned main(){\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<p> a(m);\r\n    for (int q = 0; q < m; q++){\r\n        cin >> a[q].first >> a[q].second;\r\n        a[q].first--, a[q].second--;\r\n    }\r\n    d.assign(n, {}), d1.assign(n, {}), s.assign(n, true), parents.assign(n, false);\r\n    for (int q = 0; q < m; q++){\r\n        d[a[q].first].push_back(a[q].second);\r\n        d1[a[q].second].push_back(a[q].first);\r\n    }\r\n    for (int q = 0; q < n; q++) {\r\n        if (s[q] && cycle(q)) {\r\n            cout << -1 << endl;\r\n            return 0;\r\n        }\r\n    }\r\n    s.assign(n, true);\r\n    string ans;\r\n    int answer = 0;\r\n    for (int q = 0; q < n; q++){\r\n        if (s[q]){\r\n            DFS(q, 0);\r\n            DFS(q, 1);\r\n            ans.push_back('A'), answer++;\r\n        }else{\r\n            DFS(q, 2);\r\n            ans.push_back('E');\r\n        }\r\n    }\r\n    cout << answer << endl;\r\n    cout << ans << endl;\r\n    return 0;\r\n}\r\n"
}