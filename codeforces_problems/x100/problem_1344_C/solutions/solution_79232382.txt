{
    "id": 79232382,
    "contestId": 1344,
    "creationTimeSeconds": 1588828955,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "TAB_0905"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4300800,
    "source": "#include <algorithm>\n#include <iostream>\n#include <iomanip>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nint main(){\n  cin.tie(nullptr);\n  ios::sync_with_stdio(false);\n  int n, m;\n  cin >> n >> m;\n  vector<vector<int>> G(n), R(n);\n  vector<int> D(n);\n  for(int i = 0; i < m; ++i){\n    int j, k;\n    cin >> j >> k;\n    --j,--k;\n    G[j].push_back(k);\n    R[k].push_back(j);\n    ++D[k];\n  }\n  queue<int> Q;\n  for(int i = 0; i < n; ++i){\n    if(!D[i]) Q.emplace(i);\n  }\n  vector<int> O;\n  while(Q.size()){\n    int v = Q.front();\n    Q.pop();\n    O.emplace_back(v);\n    for(auto v_ : G[v]){\n      --D[v_];\n      if(!D[v_]) Q.emplace(v_);\n    }\n  }\n  if(O.size() != n){\n    cout << -1 << endl;\n    return 0;\n  }\n  string ans(n,'?');\n  auto dfs = [&](auto dfs, int v) -> void {\n               for(auto v_ : G[v]){\n                 if(ans[v_] != '?') continue;\n                 ans[v_] = 'E';\n                 dfs(dfs,v_);\n               }\n             };\n  auto r_dfs = [&](auto r_dfs, int v) -> void {\n                 for(auto v_ : R[v]){\n                   if(ans[v_] != '?') continue;\n                   ans[v_] = 'E';\n                   r_dfs(r_dfs,v_);\n                 }\n               };\n  for(int i = 0; i < n; ++i){\n    if(ans[i] != '?') continue;\n    ans[i] = 'A';\n    dfs(dfs,i);\n    r_dfs(r_dfs,i);\n  }\n  cout << count(ans.begin(), ans.end(), 'A') << endl;\n  cout << ans << endl;\n}\n"
}