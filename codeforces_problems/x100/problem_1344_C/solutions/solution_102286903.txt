{
    "id": 102286903,
    "contestId": 1344,
    "creationTimeSeconds": 1608883854,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 12083200,
    "source": "#include <bits/stdc++.h>\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\n#define mem(a, b) memset(a, b, sizeof a)\n#define repe(u) for(int i = head[u], v; v = e[i].v, i; i = e[i].nxt) \n\nusing namespace std;\nconst int N = 2e5 + 5;\nint n, m, cnt, head[N], vis[N], in[N], u, v, ans, op[N];\nint idx, dfn[N], g[N], f[N]; \nstruct edge { int v, nxt; } e[N];\nvoid add(int u, int v) {\n\te[++cnt] = (edge){ v, head[u] };\n\thead[u] = cnt;\n}\nint dfs(int u) {\n\tvis[u] = in[u] = 1;\n\trepe(u) if(in[v] || (!vis[v] && !dfs(v))) return 0;\n\treturn in[dfn[++idx] = u] = 0, 1;\n}\nint main() {\n\t#ifdef local\n\t\tfreopen(\".in\", \"r\", stdin);\n\t#endif\n\tcin >> n >> m;\n\trep(i, 1, m) scanf(\"%d%d\", &u, &v), add(u, v);\n\trep(i, 1, n) if(!vis[i] && !dfs(i)) return puts(\"-1\"), 0;\n\tmem(g, 0x3f), mem(f, 0x3f);\n\trep(j, 1, n) repe(dfn[j]) g[dfn[j]] = min(g[dfn[j]], min(v, g[v]));\n\tper(j, n, 1) repe(dfn[j]) f[v] = min(f[v], min(dfn[j], f[dfn[j]]));\n\trep(i, 1, n) if(min(g[i], f[i]) > i) ans++, op[i] = 1;\n\tcout << ans << endl;\n\trep(i, 1, n) putchar(op[i] ? 'A' : 'E'); \n\treturn 0;\n}\n\t\t\t \t\t \t \t\t\t\t\t\t   \t     \t  \t\t\t"
}