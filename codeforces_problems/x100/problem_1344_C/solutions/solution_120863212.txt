{
    "id": 120863212,
    "contestId": 1344,
    "creationTimeSeconds": 1624960413,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "rainbowbunny"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int MAXN = 2e5 + 5; \r\n\r\nint n, m, ans;\r\nint dp1[MAXN], dp2[MAXN], Vis[MAXN];\r\nvector <int> Topo;\r\nvector <int> Adj[MAXN];\r\nvector <int> Rev[MAXN];\r\n\r\nvoid DFS(int node)\r\n{\r\n    Vis[node] = 1;\r\n    for(auto x : Adj[node])\r\n    {\r\n        if(!Vis[x])\r\n        {\r\n            DFS(x);\r\n        }\r\n        else if(Vis[x] == 1)\r\n        {\r\n            cout << -1;\r\n            exit(0);\r\n        }\r\n    }\r\n    Vis[node] = 2;\r\n    Topo.push_back(node);\r\n}\r\n\r\nsigned main()\r\n{   \r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    // freopen(\"Input.txt\", \"r\", stdin);\r\n    // freopen(\"Output.txt\", \"w\", stdout);\r\n    cin >> n >> m;\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        Adj[u].push_back(v);\r\n        Rev[v].push_back(u);\r\n    }\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        if(!Vis[i])\r\n        {\r\n            DFS(i);\r\n        }\r\n    }\r\n    for(auto x : Topo)\r\n    {\r\n        dp1[x] = x;\r\n        for(auto y : Adj[x])\r\n        {\r\n            dp1[x] = min(dp1[x], dp[y]);\r\n        }\r\n    }\r\n    for(int i = Topo.size() - 1; i >= 0; i--)\r\n    {\r\n        dp2[Topo[i]] = Topo[i];\r\n        for(auto x : Rev[Topo[i]])\r\n        {\r\n            dp2[Topo[i]] = min(dp2[Topo[i]], dp2[x]);\r\n        }\r\n    }\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        if(dp1[i] == i and dp2[i] == i)\r\n        {\r\n            ans++;\r\n        }\r\n    }\r\n    cout << ans << '\\n';\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        if(dp1[i] == i and dp2[i] == i)\r\n        {\r\n            cout << 'A';\r\n        }\r\n        else\r\n        {\r\n            cout << 'E';\r\n        }\r\n    }\r\n}"
}