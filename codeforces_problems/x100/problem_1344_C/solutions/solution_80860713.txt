{
    "id": 80860713,
    "contestId": 1344,
    "creationTimeSeconds": 1590070774,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "thanuj7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 1638400,
    "source": "from collections import deque\ndef is_possible(edges):\n    n = len(edges)\n    q = deque()\n    idx_seen = [0 for i in range(n)]\n\n    for i in range(n):\n        if (not q) and (not idx_seen[i]):\n            q.append(i)\n            seen = [0 for i in range(n)]\n\n        while q:\n            idx = q.pop()\n            idx_seen[idx] = 1\n            if seen[idx]:\n                return False\n            else:\n                seen[idx] =1\n            \n            for index in edges[idx]:\n                q.append(index)\n    return True\n    \n\nn, m = map(int, input().split())\n\nvalid = [1 for _ in range(n)]\nedges = [[] for _ in range(n)]\n\nfor _ in range(m):\n    x1, x2 = map(int, input().split())\n    x1 , x2 = x1-1, x2-1\n    valid[max(x1, x2)] = 0\n    edges[x1].append(x2)\n\nif is_possible(edges):\n    res = \"\"\n    A_count = 0\n    for i in valid:\n        res += \"A\" if i else \"E\"\n        if i: A_count += 1\n    print(A_count)\n    print(res)\nelse:\n    print(-1)\n\n"
}