{
    "id": 79343260,
    "contestId": 1344,
    "creationTimeSeconds": 1588912531,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "reborn.chris"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 20377600,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Solution {\r\n\r\n    private static BufferedReader br;\r\n    private static StreamTokenizer st;\r\n    private static PrintWriter pw;\r\n\r\n    static final int INF = 1000000007;\r\n    static final int MOD = 998244353;\r\n\r\n    static List<Integer> edges[];\r\n\r\n    static void bfs(int r, int dst[]) {\r\n        Queue<Integer> queue = new LinkedList<>();\r\n        boolean vis[] = new boolean[dst.length];\r\n        vis[r] = true;\r\n        dst[r] = 0;\r\n        queue.offer(r);\r\n        while (!queue.isEmpty()) {\r\n            int x = queue.size();\r\n            while (x-- > 0) {\r\n                int f = queue.poll();\r\n                List<Integer> es = edges[f];\r\n                for (int i = 0; i < es.size(); i++) {\r\n                    int t = es.get(i);\r\n                    if (vis[t]) {\r\n                        continue;\r\n                    }\r\n                    vis[t] = true;\r\n                    dst[t] = dst[f] + 1;\r\n                    queue.offer(t);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    static long count(long b, long lcm, long n) {\r\n        long x = lcm - b;\r\n        return n / lcm * x + Math.max(0, n % lcm - b + 1);\r\n    }\r\n\r\n    static boolean top() {\r\n        int n = edges.length - 1;\r\n        int d[] = new int[n + 1];\r\n        for (int i = 1; i <= n; i++) {\r\n            for (int j = 0; j < edges[i].size(); j++) {\r\n                d[edges[i].get(j)]++;\r\n            }\r\n        }\r\n        List<Integer> list = new ArrayList<>();\r\n        for (int i = 1; i <= n; i++) {\r\n            if (d[i] == 0) {\r\n                list.add(i);\r\n            }\r\n        }\r\n        for (int i = 0; i < list.size(); i++) {\r\n            for (int j = 0; j < edges[list.get(i)].size(); j++) {\r\n                int t = edges[list.get(i)].get(j);\r\n                d[t]--;\r\n                if (d[t] == 0) {\r\n                    list.add(t);\r\n                }\r\n            }\r\n        }\r\n        return list.size() == n;\r\n    }\r\n\r\n    private static void solve() throws IOException {\r\n//        int tt = nextInt();\r\n//        for (int cs = 1; cs <= tt; cs++) {\r\n//            if (cs > 1) {\r\n//                pw.println();\r\n//            }\r\n//            int a = nextInt();\r\n//            int b = nextInt();\r\n//            int c = nextInt();\r\n//            int d = nextInt();\r\n//            if (a == c || a == d || b == c || b == d) {\r\n//                pw.print(\"Yes\");\r\n//            } else {\r\n//                pw.print(\"No\");\r\n//            }\r\n//\r\n////            pw.format(\"Case #%d: %f\", cs, 1.0 - del);\r\n//        }\r\n\r\n        int n = nextInt();\r\n        int m = nextInt();\r\n        edges = new List[n + 1];\r\n        for (int i = 1; i <= n; i++) {\r\n            edges[i] = new ArrayList<>();\r\n        }\r\n        boolean head[] = new boolean[n + 1];\r\n        Arrays.fill(head, true);\r\n        for (int i = 0; i < m; i++) {\r\n            int f = nextInt();\r\n            int t = nextInt();\r\n            head[t] = false;\r\n            edges[f].add(t);\r\n        }\r\n        if (!top()) {\r\n            pw.print(-1);\r\n            return;\r\n        }\r\n        char res[] = new char[n];\r\n        for (int i = 1; i <= n; i++) {\r\n            if (head[i]) {\r\n                res[i - 1] = 'A';\r\n            } else {\r\n                res[i - 1] = 'E';\r\n            }\r\n        }\r\n        pw.print(String.valueOf(res));\r\n    }\r\n\r\n    static void getDiv(Map<Integer, Integer> map, int n) {\r\n        int sqrt = (int) Math.sqrt(n);\r\n        for (int i = sqrt; i >= 2; i--) {\r\n            if (n % i == 0) {\r\n                getDiv(map, i);\r\n                getDiv(map, n / i);\r\n                return;\r\n            }\r\n        }\r\n        map.put(n, map.getOrDefault(n, 0) + 1);\r\n    }\r\n\r\n    public static boolean[] generatePrime(int n) {\r\n        boolean p[] = new boolean[n + 1];\r\n        p[2] = true;\r\n\r\n        for (int i = 3; i <= n; i += 2) {\r\n            p[i] = true;\r\n        }\r\n\r\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\r\n            if (!p[i]) {\r\n                continue;\r\n            }\r\n            for (int j = i * i; j <= n; j += i << 1) {\r\n                p[j] = false;\r\n            }\r\n        }\r\n        return p;\r\n    }\r\n\r\n    static boolean isPrime(long n) { //determines if n is a prime number\r\n        int p[] = {2, 3, 5, 233, 331};\r\n        int pn = p.length;\r\n        long s = 0, t = n - 1;//n - 1 = 2^s * t\r\n        while ((t & 1) == 0) {\r\n            t >>= 1;\r\n            ++s;\r\n        }\r\n        for (int i = 0; i < pn; ++i) {\r\n            if (n == p[i]) {\r\n                return true;\r\n            }\r\n            long pt = pow(p[i], t, n);\r\n            for (int j = 0; j < s; ++j) {\r\n                long cur = llMod(pt, pt, n);\r\n                if (cur == 1 && pt != 1 && pt != n - 1) {\r\n                    return false;\r\n                }\r\n                pt = cur;\r\n            }\r\n            if (pt != 1) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static long llMod(long a, long b, long mod) {\r\n        return (a * b - (long) ((double) a / mod * b + 0.5) * mod + mod) % mod;\r\n//        long r = 0;\r\n//        a %= mod;\r\n//        b %= mod;\r\n//        while (b > 0) {\r\n//            if ((b & 1) == 1) {\r\n//                r = (r + a) % mod;\r\n//            }\r\n//            b >>= 1;\r\n//            a = (a << 1) % mod;\r\n//        }\r\n//        return r;\r\n    }\r\n\r\n    static int pow(long a, long n) {\r\n        long ans = 1;\r\n        while (n > 0) {\r\n            if ((n & 1) == 1) {\r\n                ans = (ans * a) % MOD;\r\n            }\r\n            a = (a * a) % MOD;\r\n            n >>= 1;\r\n        }\r\n        return (int) ans;\r\n    }\r\n\r\n    static int pow(long a, long n, long mod) {\r\n        long ans = 1;\r\n        while (n > 0) {\r\n            if ((n & 1) == 1) {\r\n                ans = llMod(ans, a, mod);\r\n            }\r\n            a = llMod(a, a, mod);\r\n            n >>= 1;\r\n        }\r\n        return (int) ans;\r\n    }\r\n\r\n    private static long[][] initC(int n) {\r\n        long c[][] = new long[n][n];\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            c[i][0] = 1;\r\n        }\r\n\r\n        for (int i = 1; i < n; i++) {\r\n            for (int j = 1; j <= i; j++) {\r\n                c[i][j] = c[i - 1][j - 1] + c[i - 1][j];\r\n            }\r\n        }\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * ps: n >= m, choose m from n;\r\n     */\r\n    private static int c(long n, long m) {\r\n        if (m > n) {\r\n            n ^= m;\r\n            m ^= n;\r\n            n ^= m;\r\n        }\r\n        m = Math.min(m, n - m);\r\n\r\n        long top = 1;\r\n        long bot = 1;\r\n        for (long i = n - m + 1; i <= n; i++) {\r\n            top = (top * i) % MOD;\r\n        }\r\n        for (int i = 1; i <= m; i++) {\r\n            bot = (bot * i) % MOD;\r\n        }\r\n\r\n        return (int) ((top * pow(bot, MOD - 2)) % MOD);\r\n    }\r\n\r\n    static int gcd(int a, int b) {\r\n        if (a < b) {\r\n            return gcd(b, a);\r\n        }\r\n        while (b != 0) {\r\n            int tmp = a % b;\r\n            a = b;\r\n            b = tmp;\r\n        }\r\n        return a;\r\n    }\r\n\r\n    static boolean even(long n) {\r\n        return (n & 1) == 0;\r\n    }\r\n\r\n    public static void main(String args[]) throws IOException {\r\n        br = new BufferedReader(new InputStreamReader(System.in));\r\n        st = new StreamTokenizer(br);\r\n        pw = new PrintWriter(new OutputStreamWriter(System.out));\r\n        st.ordinaryChar('\\'');\r\n        st.ordinaryChar('\\\"');\r\n        st.ordinaryChar('/');\r\n\r\n        long t = System.currentTimeMillis();\r\n        solve();\r\n        pw.flush();\r\n    }\r\n\r\n    private static long[] anLong(int n) throws IOException {\r\n        long a[] = new long[n];\r\n        for (int i = 0; i < n; i++) {\r\n            a[i] = nextInt();\r\n        }\r\n        return a;\r\n    }\r\n\r\n    private static String next(int len) throws IOException {\r\n        char ch[] = new char[len];\r\n        int cur = 0;\r\n        char c;\r\n        while ((c = (char) br.read()) == '\\n' || c == '\\r' || c == ' ' || c == '\\t') ;\r\n        do {\r\n            ch[cur++] = c;\r\n        } while (!((c = (char) br.read()) == '\\n' || c == '\\r' || c == ' ' || c == '\\t'));\r\n        return String.valueOf(ch, 0, cur);\r\n    }\r\n\r\n    private static int nextInt() throws IOException {\r\n        st.nextToken();\r\n        return (int) st.nval;\r\n    }\r\n\r\n    private static long nextLong() throws IOException {\r\n        st.nextToken();\r\n        return (long) st.nval;\r\n//        return Long.parseLong(nextLine());\r\n    }\r\n\r\n    private static double nextDouble() throws IOException {\r\n        st.nextToken();\r\n        return st.nval;\r\n    }\r\n\r\n    private static String[] nextSS(String reg) throws IOException {\r\n        return br.readLine().split(reg);\r\n    }\r\n\r\n    private static String nextLine() throws IOException {\r\n        return br.readLine();\r\n    }\r\n}"
}