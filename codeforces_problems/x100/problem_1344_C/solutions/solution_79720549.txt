{
    "id": 79720549,
    "contestId": 1344,
    "creationTimeSeconds": 1589186794,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "anupamm98"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 59392000,
    "source": "\nimport java.io.DataInputStream;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class Graph {\n\n\t\n\tstatic class Reader {\n\t\tfinal private int BUFFER_SIZE = 1 << 16;\n\t\tprivate DataInputStream din;\n\t\tprivate byte[] buffer;\n\t\tprivate int bufferPointer, bytesRead;\n\n\t\tpublic Reader() {\n\t\t\tdin = new DataInputStream(System.in);\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic Reader(String file_name) throws IOException {\n\t\t\tdin = new DataInputStream(new FileInputStream(file_name));\n\t\t\tbuffer = new byte[BUFFER_SIZE];\n\t\t\tbufferPointer = bytesRead = 0;\n\t\t}\n\n\t\tpublic String readLine() throws IOException {\n\t\t\tbyte[] buf = new byte[64]; // line length\n\t\t\tint cnt = 0, c;\n\t\t\twhile ((c = read()) != -1) {\n\t\t\t\tif (c == '\\n')\n\t\t\t\t\tbreak;\n\t\t\t\tbuf[cnt++] = (byte) c;\n\t\t\t}\n\t\t\treturn new String(buf, 0, cnt);\n\t\t}\n\n\t\tpublic int nextInt() throws IOException {\n\t\t\tint ret = 0;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo {\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\t} while ((c = read()) >= '0' && c <= '9');\n\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\n\t\tpublic long nextLong() throws IOException {\n\t\t\tlong ret = 0;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\t\t\tdo {\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\t} while ((c = read()) >= '0' && c <= '9');\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\n\t\tpublic double nextDouble() throws IOException {\n\t\t\tdouble ret = 0, div = 1;\n\t\t\tbyte c = read();\n\t\t\twhile (c <= ' ')\n\t\t\t\tc = read();\n\t\t\tboolean neg = (c == '-');\n\t\t\tif (neg)\n\t\t\t\tc = read();\n\n\t\t\tdo {\n\t\t\t\tret = ret * 10 + c - '0';\n\t\t\t} while ((c = read()) >= '0' && c <= '9');\n\n\t\t\tif (c == '.') {\n\t\t\t\twhile ((c = read()) >= '0' && c <= '9') {\n\t\t\t\t\tret += (c - '0') / (div *= 10);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (neg)\n\t\t\t\treturn -ret;\n\t\t\treturn ret;\n\t\t}\n\n\t\tprivate void fillBuffer() throws IOException {\n\t\t\tbytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\n\t\t\tif (bytesRead == -1)\n\t\t\t\tbuffer[0] = -1;\n\t\t}\n\n\t\tprivate byte read() throws IOException {\n\t\t\tif (bufferPointer == bytesRead)\n\t\t\t\tfillBuffer();\n\t\t\treturn buffer[bufferPointer++];\n\t\t}\n\n\t\tpublic void close() throws IOException {\n\t\t\tif (din == null)\n\t\t\t\treturn;\n\t\t\tdin.close();\n\t\t}\n\t}\n\tpublic static void main(String[] args) throws IOException {\n\t\t\n\t\t\n\t\tReader scan=new Reader();\n\t\t//int t=scan.nextInt();\n\t\t\n//\t\twhile(t-->0) {\n//\t\t\tlong n=scan.nextLong();\n//\t\t\tlong l=scan.nextLong();\n//\t\t\tlong r=scan.nextLong();\n//\t\t\t\n//\t\t\tD1334(n, l, r, 1, 1);\n//\t\t\tSystem.out.println();\n//\t\t}\n\t\t\n\t\tC1334();\n\n\t}\n\t\n\tpublic static void D1334(long n, long l, long r, long seg, long cur) {\n\t\t\n\t\tif(cur>r) return;\n\t\t\n\t\tif(seg==n) {\n\t\t\tSystem.out.print(1);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tlong t= 2*(n-seg);\n\t\t\n\t\tlong hi= cur+t-1;\n\t\t\n\t\t\n\t\tif(hi<l) {\n\t\t\tD1334(n, l, r, seg+1, hi+1);\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\n\t\tlong i= l-cur+1;\n\t\t\n\t\tif(i%2==0) {\n\t\t\tSystem.out.print((seg+i/2)+\" \");\n\t\t\ti++;\n\t\t}\n\t\t\n\t\t\n\t\t\n\t\tfor(;i+cur-1<=Math.min(r,  hi);i++) {\n\t\t\t\n\t\t\tif(i%2!=0) System.out.print(seg+\" \");\n\t\t\telse System.out.print((seg+i/2)+\" \");\n\t\t\t\n\t\t}\n\t\t\n\t\tif(i==r+1) return;\n\t\t\n\t\tD1334(n, hi+1, r, seg+1, hi+1);\n\t\t\n\t\t\n\t}\n\t\n\tpublic static void C1334() throws IOException {\n\t\t\n\t\tReader scan=new Reader();\n\t\tint n=scan.nextInt();\n\t\tint m=scan.nextInt();\n\t\t\n\t\tList<Integer> adj[]=new ArrayList[200001];\n\t\tList<Integer> rev[]=new ArrayList[200001];\n\t\tfor(int i=0;i<m;i++) {\n\t\t\t\n\t\t\tint u=scan.nextInt();\n\t\t\tint v=scan.nextInt();\n\t\t\t\n\t\t\tif(adj[v]==null) adj[v]=new ArrayList<>();\n\t\t\tif(rev[u]==null) rev[u]=new ArrayList<>();\n\t\t\tadj[v].add(u);\n\t\t\trev[u].add(v);\n\t\t}\n\t\t\n\t\tboolean visited[]=new boolean[200000];\n\t\t\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\t\n\t\t\tif(!visited[i]) {\n\t\t\t\tSet<Integer> cur=new HashSet<>();\n\t\t\t\tboolean ans= dfs(i, adj, visited, cur);\n\t\t\t\tif(ans) {\n\t\t\t\t\tSystem.out.println(-1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n//\t\tfor(int i=1;i<=n;i++) {\n//\t\t\t\n//\t\t\tSystem.out.print(i+\"> \");\n//\t\t\tif(adj[i]==null) {\n//\t\t\t\tSystem.out.println();\n//\t\t\t\tcontinue;\n//\t\t\t}\n//\t\t\tSystem.out.println(Arrays.toString(adj[i].toArray()));\n//\t\t\t\n//\t\t}\n\t\t\n\t\t\n\t\tint min1[]=new int[n+1];\n\t\tint min2[]=new int[n+1];\n\t\tvisited=new boolean[n+1];\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\t\n\t\t\tif(!visited[i]) {\n\t\t\t\tgetMin(min1, i, adj, visited);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvisited=new boolean[n+1];\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\t\n\t\t\tif(!visited[i]) {\n\t\t\t\tgetMin(min2, i, rev, visited);\n\t\t\t}\n\t\t}\n\t\t\n\t\tint count=0;\n\t\tStringBuilder ans=new StringBuilder(\"\");\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\t\n\t\t\tif(min1[i]==i&&min2[i]==i) {\n\t\t\t\tcount++;\n\t\t\t\tans.append(\"A\");\n\t\t\t}else {\n\t\t\t\tans.append(\"E\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t\tSystem.out.println(ans.toString());\n\t\t\n\t\t\n\t}\n\t\n\tpublic static int getMin(int min[], int start, List<Integer> adj[], boolean visited[]) {\n\t\t\n\t\tif(visited[start]) {\n\t\t\treturn min[start];\n\t\t}\n\t\t\n\t\tmin[start]=start;\n\t\tvisited[start]=true;\n\t\tif(adj[start]==null) return min[start];\n\t\tfor(Integer x: adj[start]) {\n\t\t\tmin[start]=Math.min(min[start], getMin(min, x, adj, visited));\n\t\t}\n\t\t\n\t\treturn min[start];\n\t\t\n\t}\n\t\n\tpublic static boolean dfs(int start, List<Integer> adj[], boolean visited[], Set<Integer> cur) {\n\t\t\n\t\t\n\t\tif(cur.contains(start)) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tif(visited[start]) return false;\n\t\t\n\t\tvisited[start]=true;\n\t\tcur.add(start);\n\t\t\n\t\tif(adj[start]==null) return false;\n\t\t\n\t\tfor(int newStart: adj[start]) {\n\t\t\tif(dfs(newStart, adj, visited, cur)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\tcur.remove(start);\n\t\treturn false;\n\t}\n\n}\n"
}