{
    "id": 79463280,
    "contestId": 1344,
    "creationTimeSeconds": 1589027395,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "Honour_34"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 40448000,
    "source": "//Bismillahir Rahmanir Rahim\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define Long long long\r\n#define EPS 1e-12\r\n#define PI acos(-1.0)\r\n\r\n#define MAX 300000\r\n#define MAX_LOG 18\r\n#define MOD 998244353\r\n#define INF 0x3f3f3f3f\r\n\r\n#define POS_INF (1LL << 60)\r\n#define NEG_INF (-(1LL << 60))\r\n\r\n#define MEMSET(x,y) memset(x, y, sizeof(x))\r\n#define PB push_back\r\n#define MP make_pair\r\n#define SORT(A) sort(A.begin(), A.end());\r\n#define REVERSE(A) reverse(A.begin(), A.end());\r\n\r\nvector<int>dfs_graph_adj[MAX+9], keep_node[MAX+9], dfs_rev_graph_adj[MAX+9];\r\nint dfs_color[MAX+9], dfs_disc_time[MAX+9], dfs_fin_time[MAX+9];\r\nint dfs_tim; // time to keep track\r\nint dfs_is_cyclic; // is the graph cyclic, by default false\r\n\r\nint ar[MAX+9];\r\nint pr[MAX+9];\r\nint ANS[MAX+9];\r\nint dfs_for[MAX+9];\r\nint dfs_back[MAX+9];\r\n\r\nvoid dfs_with_source(int curr)\r\n{\r\n    int i, child, siz;\r\n\r\n    dfs_color[curr] = 1;\r\n    dfs_disc_time[curr] = ++dfs_tim;\r\n\r\n    siz = dfs_graph_adj[curr].size();\r\n\r\n    for(i = 0; i < siz; i++)\r\n    {\r\n        child = dfs_graph_adj[curr][i];\r\n        if(dfs_color[child] == 0)\r\n        {\r\n            dfs_color[child] = 1;\r\n            dfs_with_source(child);\r\n        }\r\n        else if(dfs_color[child] == 1) dfs_is_cyclic = 1;\r\n    }\r\n\r\n    dfs_color[curr] = 2;\r\n    dfs_fin_time[curr] = ++dfs_tim;\r\n}\r\n\r\nvoid dfs(int curr)\r\n{\r\n    int i, child, siz;\r\n\r\n    dfs_color[curr] = 1;\r\n    dfs_for[curr] = curr;\r\n    siz = dfs_graph_adj[curr].size();\r\n\r\n    for(i = 0; i < siz; i++)\r\n    {\r\n        child = dfs_graph_adj[curr][i];\r\n        if(dfs_color[child] == 0)\r\n        {\r\n            dfs(child);\r\n        }\r\n\r\n        dfs_for[curr] = min(dfs_for[curr], dfs_for[child]);\r\n    }\r\n}\r\n\r\n\r\nvoid dfs_rev(int curr)\r\n{\r\n    int i, child, siz;\r\n\r\n    dfs_color[curr] = 1;\r\n    dfs_back[curr] = curr;\r\n    siz = dfs_rev_graph_adj[curr].size();\r\n\r\n    for(i = 0; i < siz; i++)\r\n    {\r\n        child = dfs_rev_graph_adj[curr][i];\r\n        if(dfs_color[child] == 0)\r\n        {\r\n            dfs_rev(child);\r\n        }\r\n\r\n        dfs_back[curr] = min(dfs_back[curr], dfs_back[child]);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    Long ans,i,j,k,l,n,m,temp,total,flag,curr,prev,c,d,e,f,r,x,y,xx,yy,t,ans1,ans2,ans3,a,b,u,v,ii;\r\n\r\n    cin>>n>>m;\r\n    for(i=1; i<=m; i++) scanf(\"%d%d\", &ar[i], &pr[i]);\r\n    for(i=1; i<=m; i++) dfs_graph_adj[ar[i]].PB(pr[i]);\r\n    for(i=1; i<=m; i++) dfs_rev_graph_adj[pr[i]].PB(ar[i]);\r\n\r\n    for(i=1; i<=n; i++) if(dfs_color[i] == 0) dfs_with_source(i);\r\n\r\n    if(dfs_is_cyclic)\r\n    {\r\n        cout<<-1<<endl;\r\n        return 0;\r\n    }\r\n\r\n    for(i=1; i<=n; i++) dfs_color[i] = 0;\r\n    for(i=1; i<=n; i++) if(dfs_color[i] == 0) dfs(i);\r\n\r\n    for(i=1; i<=n; i++) dfs_color[i] = 0;\r\n    for(i=1; i<=n; i++) if(dfs_color[i] == 0) dfs_rev(i);\r\n\r\n\r\n//    for(i=1; i<=n; i++) cout<<dfs_for[i]<<\" \";\r\n//    cout<<endl;\r\n//    for(i=1; i<=n; i++) cout<<dfs_back[i]<<\" \";\r\n//    cout<<endl;\r\n\r\n    ans = 0;\r\n    for(i=1; i<=n; i++) if(i <= min(dfs_for[i], dfs_back[i])) ANS[i] = 1;\r\n    for(i=1; i<=n; i++) if(ANS[i]) ans++;\r\n\r\n    cout<<ans<<endl;\r\n    for(i=1; i<=n; i++)\r\n    {\r\n        if(ANS[i]) printf(\"A\");\r\n        else printf(\"E\");\r\n    }\r\n\r\n    cout<<endl;\r\n}\r\n"
}