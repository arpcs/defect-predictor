{
    "id": 80072673,
    "contestId": 1344,
    "creationTimeSeconds": 1589462263,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "Origenes"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 27136000,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n#define FOR(i, a, b) for (int (i) = (a); (i) <= (b); (i)++)\n#define ROF(i, a, b) for (int (i) = (a); (i) >= (b); (i)--)\n#define REP(i, n) FOR(i, 0, (n)-1)\n#define sqr(x) ((x) * (x))\n#define all(x) (x).begin(), (x).end()\n#define reset(x, y) memset(x, y, sizeof(x))\n#define uni(x) (x).erase(unique(all(x)), (x).end())\n#define BUG(x) cerr << #x << \" = \" << (x) << endl\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define _1 first\n#define _2 second\n#define chkmin(a, b) a = min(a, b)\n#define chkmax(a, b) a = max(a, b)\n\nconst int maxn = 212345;\n\nint n, m;\nvector<int> G[maxn], adj[maxn];\nint x[maxn], y[maxn], deg[maxn], clk[maxn], clkt[maxn];\nchar mark[maxn];\n\nvoid dfs(const vector<int> *G, int u, int t, int *clk) {\n  clk[u] = t;\n  for (auto v : G[u]) if (clk[v] > t) dfs(G, v, t, clk);\n}\n\nint main() {\n  scanf(\"%d%d\", &n, &m);\n  FOR(i, 1, m) {\n    scanf(\"%d%d\", x + i, y + i);\n    adj[x[i]].eb(y[i]); deg[y[i]]++;\n    G[y[i]].eb(x[i]);\n  }\n  iota(clk + 1, clk + n + 1, 1);\n  iota(clkt + 1, clkt + n + 1, 1);\n  queue<int> q;\n  FOR(i, 1, n) if (!deg[i]) q.emplace(i);\n  while (!q.empty()) {\n    auto u = q.front(); q.pop();\n    for (auto v : adj[u]) if (!--deg[v]) q.emplace(v);\n  }\n  FOR(i, 1, n) if (deg[i]) {\n    puts(\"-1\");\n    return 0;\n  }\n  int ans = 0;\n  FOR(i, 1, n) {\n    mark[i] = 'A';\n    if (clk[i] < i || clkt[i] < i) mark[i] = 'E';\n    if (mark[i] == 'A') ans++;\n    dfs(G, i, i, clk);\n    dfs(adj, i, i, clkt);\n  }\n  printf(\"%d\\n%s\", ans, mark + 1);\n}\n"
}