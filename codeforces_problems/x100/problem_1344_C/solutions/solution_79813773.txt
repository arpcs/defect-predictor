{
    "id": 79813773,
    "contestId": 1344,
    "creationTimeSeconds": 1589285068,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "W_W_Wojtek"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 26931200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvoid boost ()\r\n{\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n}\r\n\r\nconst long long mod = 998244353;\r\nint tablica[2];\r\n\r\nlong long potega (long long base, long long pot)\r\n{\r\n    if (pot == 1)\r\n        return base;\r\n    if (pot % 2 == 0)\r\n    {\r\n        long long res = potega(base, pot/2);\r\n        return ((res * res) % mod);\r\n    }\r\n    else\r\n        return ((potega(base, pot-1) * base) % mod);\r\n}\r\n\r\nint bs (int pocz, int kon, int szu)\r\n{\r\n    int sr;\r\n    while (pocz < kon)\r\n    {\r\n        sr = (pocz+kon) / 2;\r\n        if (tablica[sr] >= szu)     // odpowiednia tablica\r\n            kon = sr;\r\n        else\r\n            pocz = sr+1;\r\n    }\r\n    return pocz;\r\n}\r\n\r\nvoid reset_arrays ()  //wyzeruj wszystkie tablice\r\n{\r\n\r\n}\r\n\r\nint n, m, a, b, odw[200007], odw1[200007], odw2[200007], wch[200007], pre[200007], czas, ile, czy, kol;\r\nvector <int> v[200007], g[200007];\r\nstring s;\r\n\r\nvoid dfs (int x, int kt)\r\n{\r\n    odw[x] = kt;\r\n    for (int i=0; i<v[x].size(); i++)\r\n    {\r\n        if (odw[v[x][i]] == 0)\r\n            dfs(v[x][i], kt);\r\n    }\r\n    czas++;\r\n    pre[x] = czas;\r\n}\r\nvoid dfs1 (int x)\r\n{\r\n    odw1[x] = 1;\r\n    for (int i=0; i<v[x].size(); i++)\r\n    {\r\n        if (odw1[v[x][i]] == 0)\r\n            dfs1(v[x][i]);\r\n    }\r\n}\r\n\r\nvoid dfs2 (int x)\r\n{\r\n    odw2[x] = 1;\r\n    for (int i=0; i<g[x].size(); i++)\r\n    {\r\n        if (odw2[g[x][i]] == 0)\r\n            dfs2(g[x][i]);\r\n    }\r\n}\r\n\r\nvoid solve ()\r\n{\r\n    reset_arrays();\r\n    cin >> n >> m;\r\n    for (int i=0; i<m; i++)\r\n    {\r\n        cin >> a >> b;\r\n        wch[b] = 1;\r\n        v[a].push_back(b);\r\n        g[b].push_back(a);\r\n    }\r\n    kol = 1;\r\n    s = \"\";\r\n    for (int i=1; i<=n; i++)\r\n    {\r\n        if (odw[i] == 0)\r\n        {\r\n            dfs(i, kol);\r\n            kol++;\r\n        }\r\n    }\r\n    for (int i=1; i<=n; i++)\r\n    {\r\n        for (int j : v[i])\r\n        {\r\n            if (pre[j] > pre[i])\r\n            {\r\n                cout << \"-1\";\r\n                return ;\r\n            }\r\n        }\r\n    }\r\n    for (int i=1; i<=n; i++)\r\n    {\r\n        if (odw1[i] == 0 && odw2[i] == 0)\r\n        {\r\n            s += 'A';\r\n            ile++;\r\n        }\r\n        else\r\n            s += 'E';\r\n        dfs1(i);\r\n        dfs2(i);\r\n    }\r\n    cout << ile << \"\\n\";\r\n    cout << s;\r\n}\r\n\r\nint main ()\r\n{\r\n    boost();\r\n    int t = 1;\r\n    //cin >> t;\r\n    //scanf (\"%d\", &t);\r\n    while (t--)\r\n        solve();\r\n\r\n    return 0;\r\n}\r\n\r\n"
}