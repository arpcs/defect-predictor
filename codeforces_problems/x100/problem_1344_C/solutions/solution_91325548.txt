{
    "id": 91325548,
    "contestId": 1344,
    "creationTimeSeconds": 1598770082,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "wlzhouzhuan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 17510400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=200005;\r\nint read(){\r\n  int x=0;\r\n  char ch=getchar();\r\n  while(!isdigit(ch))ch=getchar();\r\n  while(isdigit(ch))x=10*x+ch-'0',ch=getchar();\r\n  return x;\r\n}\r\nvector<int>adj[N],rev[N];\r\nint pre[N],suf[N],n,m;\r\nint deg[N];\r\nqueue<int>q;\r\nint main(){\r\n  n=read(),m=read();\r\n  while(m--){\r\n    int u=read(),v=read();\r\n    adj[u].push_back(v);\r\n    rev[v].push_back(u);\r\n  }\r\n  for(int i=1;i<=n;i++)pre[i]=suf[i]=i;\r\n  memset(deg,0,sizeof(deg));\r\n  while(!q.empty())q.pop();\r\n  for(int i=1;i<=n;i++){\r\n    deg[i]=rev[i].size();\r\n    if(!deg[i])q.push(i); \r\n  }\r\n  int tag=0;\r\n  while(!q.empty()){\r\n    int u=q.front();q.pop();\r\n    tag++;\r\n    for(auto v:adj[u]){\r\n      pre[v]=min(pre[v],pre[u]);\r\n      if(!--deg[v])q.push(v);\r\n    }\r\n  }\r\n  if(tag!=n){\r\n    puts(\"-1\");exit(0);\r\n  }\r\n  memset(deg,0,sizeof(deg));\r\n  while(!q.empty())q.pop();\r\n  for(int i=1;i<=n;i++){\r\n    deg[i]=adj[i].size();\r\n    if(!deg[i])q.push(i);\r\n  }\r\n  while(!q.empty()){\r\n    int u=q.front();q.pop();\r\n    for(auto v:rev[u]){\r\n      suf[v]=min(suf[v],suf[u]);\r\n      if(!--deg[v])q.push(v);\r\n    }\r\n  }\r\n  int ans=0;\r\n  for(int i=1;i<=n;i++)if(min(pre[i],suf[i])==i)ans++;\r\n  printf(\"%d\\n\",ans);\r\n  for(int i=1;i<=n;i++){\r\n    if(min(pre[i],suf[i])==i)putchar('A');\r\n    else putchar('E');\r\n  }\r\n  return 0;\r\n}"
}