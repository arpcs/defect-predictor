{
    "id": 93792881,
    "contestId": 1344,
    "creationTimeSeconds": 1601042943,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 76902400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define maxn 1000005\n#define maxm 2000005\n#define inf 0x3f3f3f3f\n#define LL long long\n#define mod 1000000007\n#define local\nvoid file(string s){freopen((s+\".in\").c_str(),\"r\",stdin);freopen((s+\".out\").c_str(),\"w\",stdout);}\ntemplate <typename Tp>void read(Tp &x){\n\tx=0;int fh=1;char c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-'){fh=-1;}c=getchar();}\n\twhile(c>='0'&&c<='9'){x=x*10+c-'0';c=getchar();}x*=fh;\n}\nstruct Edge{\n\tint f,t,nxt;\n}edge[maxm];\nint head[maxn],etot=1;\nvoid add_edge(int f,int t){edge[++etot]=(Edge){f,t,head[f]};head[f]=etot;}\nint n,m;\nnamespace Tarjan{\n\tint dfn[maxn],low[maxn],ins[maxn],siz[maxn],tot,cnt;\n\tstack<int>st;\n\tvoid dfs(int x){\n\t\tdfn[x]=low[x]=++tot;\n\t\tins[x]=1;st.push(x);\n\t\tfor(int i=head[x];i;i=edge[i].nxt){\n\t\t\tint y=edge[i].t;\n\t\t\tif(dfn[y]){\n\t\t\t\tif(ins[y]){\n\t\t\t\t\tlow[x]=min(low[x],dfn[y]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdfs(y);\n\t\t\t\tlow[x]=min(low[x],low[y]);\n\t\t\t}\n\t\t}\n\t\tif(dfn[x]==low[x]){\n\t\t\tint y=st.top();st.pop();\n\t\t\tsiz[++cnt]++;ins[y]=0;\n\t\t\twhile(y!=x){\n\t\t\t\ty=st.top();st.pop();\n\t\t\t\tsiz[cnt]++;ins[y]=0;\n\t\t\t}\n\t\t}\n\t}\n\tbool check(){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tif(!dfn[i])dfs(i);\n\t\t}\n\t\tfor(int i=1;i<=cnt;i++){\n\t\t\tif(siz[i]>1)return 1;\n\t\t}\n\t\treturn 0;\n\t}\n}\nvector<int>nG[maxn];\nint cc[maxn],sm;\nint flc1[maxn],flc2[maxn];\nvoid upd(int S){\n\tflc1[S]=flc2[S]=1;\n\tqueue<int>q;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(int i=head[x];i;i=edge[i].nxt){\n\t\t\tint y=edge[i].t;\n\t\t\tif(!flc1[y]){\n\t\t\t\tflc1[y]=1;q.push(y);\n\t\t\t}\n\t\t}\n\t}\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint x=q.front();q.pop();\n\t\tfor(unsigned i=0;i<nG[x].size();++i){\n\t\t\tint y=nG[x][i];\n\t\t\tif(!flc2[y]){\n\t\t\t\tflc2[y]=1;q.push(y);\n\t\t\t}\n\t\t}\n\t}\n\t\n}\nsigned main(){\n\tread(n);read(m);\n\tfor(int i=1,u,v;i<=m;++i){\n\t\tread(u);read(v);\n\t\tadd_edge(u,v);\n\t\tnG[v].push_back(u);\n\t}\n\tif(Tarjan::check()){\n\t\tputs(\"-1\");\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tif(flc1[i]||flc2[i])cc[i]=0;\n\t\telse cc[i]=1;\n\t\tupd(i);\n\t\tsm+=cc[i];\n\t}\n\tprintf(\"%d\\n\",sm);\n\tfor(int i=1;i<=n;++i){\n\t\tprintf(\"%c\",(cc[i])?'A':'E');\n\t}\n\treturn 0;\n}\n\n \t\t\t\t \t\t     \t  \t  \t   \t\t\t \t\t\t"
}