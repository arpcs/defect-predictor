{
    "id": 79679804,
    "contestId": 1344,
    "creationTimeSeconds": 1589133727,
    "relativeTimeSeconds": 4627,
    "problem": {
        "contestId": 1344,
        "index": "C",
        "name": "Quantifier Question",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "KrK"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1589129100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 27443200,
    "source": "#include <bits/stdc++.h>\r\n#pragma comment(linker, \"/STACK:16000000\")\r\nusing namespace std;\r\n\r\nconst int Maxn = 200005;\r\n\r\nint n, m;\r\nvector <int> neigh[Maxn], rneigh[Maxn];\r\nint tk[Maxn];\r\nint mn1[Maxn], mn2[Maxn];\r\nchar res[Maxn];\r\nint cnt;\r\n\r\nbool Loop(int v)\r\n{\r\n    if (tk[v] == 1) return true;\r\n    if (tk[v] == 2) return false;\r\n    tk[v] = 1;\r\n    for (int i = 0; i < neigh[v].size(); i++)\r\n        if (Loop(neigh[v][i])) return true;\r\n    tk[v] = 2;\r\n    return false;\r\n}\r\n\r\nvoid Solve(int v, int mn[], vector <int> neigh[])\r\n{\r\n    if (tk[v]) return;\r\n    tk[v] = true;\r\n    mn[v] = v;\r\n    for (int i = 0; i < neigh[v].size(); i++) {\r\n        int u = neigh[v][i];\r\n        Solve(u, mn, neigh);\r\n        mn[v] = min(mn[v], mn[u]);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d %d\", &n, &m);\r\n    for (int i = 0; i < m; i++) {\r\n        int a, b; scanf(\"%d %d\", &a, &b);\r\n        neigh[a].push_back(b);\r\n        rneigh[b].push_back(a);\r\n    }\r\n    for (int i = 1; i <= n; i++) if (tk[i] == 0)\r\n        if (Loop(i)) { printf(\"-1\\n\"); return 0; }\r\n    fill(tk, tk + n + 1, 0);\r\n    for (int i = 1; i <= n; i++) if (!tk[i])\r\n        Solve(i, mn1, neigh);\r\n    fill(tk, tk + n + 1, 0);\r\n    for (int i = 1; i <= n; i++) if (!tk[i])\r\n        Solve(i, mn2, rneigh);\r\n    for (int i = 1; i <= n; i++)\r\n        if (mn1[i] == i && mn2[i] == i) { res[i] = 'A'; cnt++; }\r\n        else res[i] = 'E';\r\n    res[n + 1] = '\\0';\r\n    printf(\"%d\\n\", cnt);\r\n    printf(\"%s\\n\", res + 1);\r\n    return 0;\r\n}\r\n"
}