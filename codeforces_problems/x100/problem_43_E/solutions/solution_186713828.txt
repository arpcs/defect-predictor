{
    "id": 186713828,
    "contestId": 43,
    "creationTimeSeconds": 1672016932,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 43,
        "index": "E",
        "name": "Race",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2300,
        "tags": [
            "brute force",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 43,
        "members": [
            {
                "handle": "Moo08"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1291046400
    },
    "programmingLanguage": "Java 8",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner;\r\n\r\npublic class AutoRace {\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        int n = scanner.nextInt();\r\n        int s = scanner.nextInt();\r\n        int[][] segments = new int[n][][];\r\n        for (int i = 0; i < n; i++) {\r\n            int k = scanner.nextInt();\r\n            segments[i] = new int[k][2];\r\n            for (int j = 0; j < k; j++) {\r\n                segments[i][j][0] = scanner.nextInt();\r\n                segments[i][j][1] = scanner.nextInt();\r\n            }\r\n        }\r\n\r\n        // Simulate the race\r\n        int leads = 0;\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = i + 1; j < n; j++) {\r\n                // Initialize the positions of the cars at time 0\r\n                int[] positions = new int[n];\r\n                int time = 0;\r\n\r\n                // Iterate through the segments of each car\r\n                int iIndex = 0;\r\n                int jIndex = 0;\r\n                while (iIndex < segments[i].length || jIndex < segments[j].length) {\r\n                    // Advance the time by the minimum of the remaining time in the current segment for each car\r\n                    int minTime = Integer.MAX_VALUE;\r\n                    if (iIndex < segments[i].length) {\r\n                        minTime = Math.min(minTime, segments[i][iIndex][1]);\r\n                    }\r\n                    if (jIndex < segments[j].length) {\r\n                        minTime = Math.min(minTime, segments[j][jIndex][1]);\r\n                    }\r\n                    time += minTime;\r\n\r\n                    // Update the positions of the cars\r\n                    if (iIndex < segments[i].length) {\r\n                        positions[i] += segments[i][iIndex][0] * minTime;\r\n                        segments[i][iIndex][1] -= minTime;\r\n                        if (segments[i][iIndex][1] == 0) {\r\n                            iIndex++;\r\n                        }\r\n                    }\r\n                    if (jIndex < segments[j].length) {\r\n                        positions[j] += segments[j][jIndex][0] * minTime;\r\n                        segments[j][jIndex][1] -= minTime;\r\n                        if (segments[j][jIndex][1] == 0) {\r\n                            jIndex++;\r\n                        }\r\n                    }\r\n\r\n                    // Check if there is a lead\r\n                    if (positions[i] > positions[j] && positions[i] - positions[j] > 1) {\r\n                        leads++;\r\n                    } else if (positions[j] > positions[i] && positions[j] - positions[i] > 1) {\r\n                        leads++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Print the result\r\n"
}