{
    "id": 179047592,
    "contestId": 43,
    "creationTimeSeconds": 1667468613,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 43,
        "index": "E",
        "name": "Race",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2300,
        "tags": [
            "brute force",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 43,
        "members": [
            {
                "handle": "alexander99"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1291046400
    },
    "programmingLanguage": "Delphi",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 102400,
    "source": "program Gonka;\r\n\r\n{$APPTYPE CONSOLE}\r\n\r\nuses\r\n  SysUtils;\r\n\r\ntype\r\n  TLine = record\r\n    v : integer; //\u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c\r\n    t : integer; //\u0432\u0440\u0435\u043c\u044f\r\n    s : integer;\r\n  end;\r\n  TCar = record\r\n    LineCnt : integer;\r\n    Lines : array of TLine;\r\n    tim   : double; //\u0432\u0440\u0435\u043c\u044f \u0437\u0430\u0442\u0440\u0430\u0447\u0435\u043d\u043e\u0435 \u043d\u0430 \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0433\u043e \u043e\u0442\u0440\u0435\u0437\u043a\u0430, \u043f\u043e \u043d\u0435\u043c\u0443 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\r\n    TimeAll : double;// \u043e\u0431\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u0438\u0435\u043c\r\n    ss    : double; //\u043e\u0431\u0449\u0435\u0435 \u0440\u0430\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u043e\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c\r\n    place : integer;\r\n    place_prev : integer;\r\n  end;\r\n\r\nvar\r\n  ArrEvent : array of integer; //\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u043e \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0436\u0443, \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u0445 \u043e\u0442\u0440\u0435\u0437\u043a\u043e\u0432, \u043f\u043e\u0442\u043e\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0432\u044b\u043a\u0438\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f\r\n  ArrCars : array of TCar;\r\n  Car : TCar;\r\n  Fin : text;\r\n  i,j, ii, jj, idx : integer;\r\n  N : integer; //\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d\r\n  M : integer; //\u0414\u043b\u0438\u043d\u0430 \u0434\u043e\u0440\u043e\u0433\u0438 \u0432 \u043a\u043c.\r\n  k : integer;\r\n  t, tt : integer;\r\n  kk : integer;\r\n  Res : integer;\r\n\r\n{------------------------------------------------------------------------------}\r\nprocedure RemoveLines(var Ar : array of TLine);\r\nvar\r\n  i : integer;\r\n  k : integer;\r\nbegin\r\n//  k := Length(Ar);\r\n  for i := low(Ar) to high(Ar)-1 do begin\r\n    Ar[i] := Ar[i+1];\r\n  end;\r\n//  SetLength(Ar, k-1);\r\nend;\r\n{------------------------------------------------------------------------------}\r\n\r\n{------------------------------------------------------------------------------}\r\nprocedure SortHi(var Ar : array of integer);\r\nvar\r\n  i, j : integer;\r\n  x : integer;\r\n  t : integer;\r\nbegin\r\n  for i := low(Ar) to high(Ar)-1 do begin\r\n    x := i;\r\n    for j := i+1 to high(Ar) do begin\r\n      if Ar[x] > Ar[j] then begin\r\n        x := j;\r\n      end;\r\n    end;\r\n    if x<>i then begin\r\n      t := Ar[i];\r\n      Ar[i] := Ar[x];\r\n      Ar[x] := t;\r\n    end;\r\n  end;\r\nend;\r\n{------------------------------------------------------------------------------}\r\n\r\n{------------------------------------------------------------------------------}\r\nfunction FindEvent(e : integer) : boolean;\r\nvar\r\n  i : integer;\r\nbegin\r\n  FindEvent := false;\r\n  for i := low(ArrEvent) to high(ArrEvent) do begin\r\n    if e=ArrEvent[i] then begin\r\n      FindEvent := true;\r\n      break;\r\n    end;\r\n  end;\r\nend;\r\n{------------------------------------------------------------------------------}\r\n\r\n{------------------------------------------------------------------------------}\r\nbegin\r\n//  try\r\n    { TODO -oUser -cConsole Main : Insert code here }\r\n\r\n\r\n  assignfile(Fin, 'input.txt'); Reset(Fin);\r\n//  read(Fin, N);   readln(Fin, M);\r\n  read( N);   readln( M);\r\n  SetLength(ArrCars, N);\r\n  for i := 1 to n do begin\r\n//    read(Fin, k);\r\n    read( k);\r\n    ArrCars[i-1].LineCnt := k;\r\n    ArrCars[i-1].place_prev := -1;\r\n    ArrCars[i-1].ss := 0;\r\n    SetLength(ArrCars[i-1].Lines, k);\r\n    t := 0;\r\n    for j := 1 to k do begin\r\n//      read(Fin, ArrCars[i-1].Lines[j-1].v);\r\n//      read(Fin, ArrCars[i-1].Lines[j-1].t);\r\n      read( ArrCars[i-1].Lines[j-1].v);\r\n      read( ArrCars[i-1].Lines[j-1].t);\r\n      t := t + ArrCars[i-1].Lines[j-1].v * ArrCars[i-1].Lines[j-1].t;\r\n      ArrCars[i-1].Lines[j-1].s := t;\r\n      if not FindEvent(t) then begin\r\n        tt := length(ArrEvent);\r\n        SetLength(ArrEvent, tt+1 );\r\n        ArrEvent[tt] := t;\r\n      end;\r\n    end;\r\n//    Readln(Fin);\r\n    Readln;\r\n  end;\r\n  closefile(Fin);\r\n\r\n  Res := 0;\r\n//\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044e ArrEvent \u0438 \u043f\u043e \u043d\u0435\u043c\u0443 \u0434\u0435\u043b\u0430\u0442\u044c \u0446\u0438\u043a\u043b\r\n  SortHi(ArrEvent);\r\n\r\n  for i := low(ArrEvent) to high(ArrEvent) do begin\r\n\r\n    for j := low(ArrCars) to high(ArrCars) do begin\r\n//\r\n// \u0441\u0434\u0435\u0441\u044c \u043d\u0430\u0434\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0435\u0445\u043e\u0432\u0448\u0435\u0435 \u0440\u0430\u0441\u0441\u0442\u043e\u044f\u043d\u0438\u0435\r\n      ArrCars[j].tim := (ArrEvent[i] - ArrCars[j].ss)  / ArrCars[j].Lines[0].v;\r\n      ArrCars[j].TimeAll := ArrCars[j].TimeAll + ArrCars[j].tim;\r\n      ArrCars[j].ss :=  ArrCars[j].ss + (ArrCars[j].tim * ArrCars[j].Lines[0].v);\r\n//\u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0448\u043b\u0438 \u043e\u0442\u0440\u0435\u0437\u043e\u043a, \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u0435\u0433\u043e \u0438\u0437 Lines\r\n      if ArrCars[j].Lines[0].s<=ArrEvent[i] then begin\r\n        kk := Length(ArrCars[j].Lines);\r\n        RemoveLines(ArrCars[j].Lines);\r\n        ArrCars[j].LineCnt := ArrCars[j].LineCnt - 1; \r\n        SetLength(ArrCars[j].Lines, kk-1);\r\n      end;\r\n\r\n    end;\r\n//\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c(\u0440\u0430\u0437\u0434\u0430\u0442\u044c \u043c\u0435\u0441\u0442\u0430) \u043f\u043e \u043e\u0431\u0449\u0435\u043c\u0443 \u0432\u0440\u0435\u043c\u0435\u043d\u0438\r\n    for ii := low(ArrCars) to high(ArrCars)-1 do begin\r\n        idx := ii;\r\n      for jj := ii+1 to high(ArrCars) do begin\r\n        if ArrCars[idx].TimeAll>ArrCars[jj].TimeAll then begin\r\n           idx := jj;\r\n        end;\r\n      end;\r\n//\u0412\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0435\u0441\u043b\u0438 ii<>idx\r\n      if ii<>idx then begin\r\n        Car := ArrCars[ii];\r\n        ArrCars[ii] := ArrCars[idx];\r\n        ArrCars[idx] := Car;\r\n      end;\r\n\r\n      ArrCars[ii].place := ii;\r\n      if ArrCars[ii].place_prev=-1 then ArrCars[ii].place_prev := ii;\r\n// \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043e\u0431\u0433\u043e\u043d\u043e\u0432 \u043c\u043e\u0436\u0435\u043c \u0438 \u0441\u0434\u0435\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c\r\n      if ArrCars[ii].place < ArrCars[ii].place_prev  then begin\r\n//\u043f\u043e\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e-\u0432\u043e \u0443\u0432\u0435\u043b\u0438\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u043c\u0435\u0441\u0442 (\u043e\u0431\u0433\u043e\u043d\u043e\u0432)\r\n//        inc(Res);\r\n        Res := Res + (ArrCars[ii].place_prev - ArrCars[ii].place);\r\n      end;\r\n      ArrCars[ii].place_prev := ArrCars[ii].place;\r\n    end;\r\n\r\n//\u0414\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043c\u0435\u0441\u0442\u043e\r\n    ArrCars[high(ArrCars)].place := high(ArrCars);\r\n    if ArrCars[high(ArrCars)].place_prev=-1 then ArrCars[high(ArrCars)].place_prev := high(ArrCars);\r\n// \u041f\u043e\u0434\u0441\u0447\u0435\u0442 \u043e\u0431\u0433\u043e\u043d\u043e\u0432 \u043c\u043e\u0436\u0435\u043c \u0438 \u0441\u0434\u0435\u0441\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c\r\n    if ArrCars[high(ArrCars)].place < ArrCars[high(ArrCars)].place_prev  then begin\r\n //     inc(Res);\r\n        Res := Res + (ArrCars[high(ArrCars)].place_prev - ArrCars[high(ArrCars)].place);\r\n    end;\r\n    ArrCars[high(ArrCars)].place_prev := ArrCars[high(ArrCars)].place;\r\n\r\n\r\n\r\n  end;\r\n\r\n  writeln(Res);\r\n//  readln;\r\n\r\n{\r\n  except\r\n    on E:Exception do\r\n      Writeln(E.Classname, ': ', E.Message);\r\n  end;\r\n  }\r\nend.\r\n{------------------------------------------------------------------------------}"
}