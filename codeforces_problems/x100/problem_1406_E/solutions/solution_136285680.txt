{
    "id": 136285680,
    "contestId": 1406,
    "creationTimeSeconds": 1637435829,
    "relativeTimeSeconds": 6129,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "KrK"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1637429700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 102,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 819200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\nconst int Maxn = 100001;\r\n \r\nint n;\r\nbool prime[Maxn];\r\nint mx[Maxn];\r\nvector <int> pr;\r\nbool has[Maxn];\r\nint cur;\r\nbool cant[Maxn];\r\n \r\nint getA(int a)\r\n{\r\n    printf(\"A %d\\n\", a); fflush(stdout);\r\n    int res; scanf(\"%d\", &res);\r\n    return res;\r\n}\r\n \r\nint getB(int a)\r\n{\r\n    printf(\"B %d\\n\", a); fflush(stdout);\r\n    int res; scanf(\"%d\", &res);\r\n    return res;\r\n}\r\n \r\nvoid getC(int a)\r\n{\r\n    printf(\"C %d\\n\", a); fflush(stdout);\r\n}\r\n\r\nvoid addCant(int val)\r\n{\r\n    for (int i = val; i <= n; i += val)\r\n        cant[i] = true;\r\n}\r\n \r\nint Solve(int val, int from)\r\n{\r\n    int res = val;\r\n    int mult = 2;\r\n    while (mult * val <= n)\r\n        if (cant[mult * val]) { addCant(mult * val); mult++; }\r\n        else if (getA(mult * val) > 0) {\r\n            val *= mult;\r\n            res = val;\r\n            mult = 2;\r\n        } else { addCant(mult * val); mult++; }\r\n    return res;\r\n}\r\n \r\nint main()\r\n{\r\n    scanf(\"%d\", &n);\r\n    fill(prime + 2, prime + n + 1, true);\r\n    for (int i = 2; i <= n; i++) if (prime[i]) {\r\n        pr.push_back(i);\r\n        for (int j = i; j <= n; j += i) {\r\n            prime[j] = false;\r\n            mx[j] = i;\r\n        }\r\n    }\r\n    fill(has + 1, has + n + 1, true);\r\n    cur = n;\r\n    int sz = pr.size();\r\n    while (sz > 0) {\r\n        int tk = (sz + 1) / 2;\r\n        for (int i = 1; i <= tk; i++) {\r\n            int num = pr[sz - i];\r\n            getB(num);\r\n            for (int j = num; j <= n; j += num)\r\n                if (has[j]) {\r\n                    has[j] = false;\r\n                    cur--;\r\n                }\r\n        }\r\n        if (getA(1) != cur) {\r\n            int from = pr[sz - tk], val = 1;\r\n            for (int i = tk; i > 0; i--) {\r\n                int num = pr[sz - i];\r\n                if (getA(num) > 0)\r\n                    val *= num;\r\n                else addCant(num);\r\n            }\r\n            getC(Solve(val, from));\r\n            return 0;\r\n        } else for (int i = tk; i > 0; i--)\r\n                addCant(pr[sz - i]);\r\n        sz -= tk;\r\n    }\r\n    getC(1);\r\n    return 0;\r\n}\r\n"
}