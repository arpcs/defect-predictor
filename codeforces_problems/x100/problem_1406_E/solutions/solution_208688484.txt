{
    "id": 208688484,
    "contestId": 1406,
    "creationTimeSeconds": 1686051048,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "xjrjyy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599918300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 102,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 204800,
    "source": "// LUOGU_RID: 112162669\n/* cf_1406_e.cpp */\n#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nint main() {\n    std::cin.tie(nullptr)->sync_with_stdio(false);\n    \n    int n; std::cin >> n;\n\n    std::vector<bool> isp(n + 1, true);\n    isp[0] = isp[1] = false;\n    std::array<std::vector<int>, 2> pri;\n    for (int i = 2; i <= n; ++i) {\n        if (isp[i]) pri[1ll * i * i > n].push_back(i);\n        for (int j = i * 2; j <= n; j += i) isp[j] = false;\n    }\n\n    auto query = [&](char op, int x) {\n        std::cout << op << ' ' << x << std::endl;\n        if (op == 'C') exit(0);\n        int res; std::cin >> res;\n        return res;\n    };\n\n    for (auto x : pri[0]) query('B', x);\n\n    bool flag = false;\n    for (auto x : pri[0]) if (query('A', x) > 0) flag = true;\n    if (flag) {\n        int ans = 1;\n        for (int i = 2; i <= n; ++i) if (isp[i])\n            while (1ll * i * ans <= n && query('A', ans * i) > 0)\n                ans *= i;\n        query('C', ans);\n    }\n\n    int lst = query('A', 1);\n    int m = int(pri[1].size()), B = std::sqrt(m) + 1;\n    for (int i = 0; i < B; ++i) {\n        int l = i * B, r = std::min(m, (i + 1) * B);\n        for (int j = l; j < r; ++j) query('B', pri[1][j]);\n\n        int now = query('A', 1);\n        if (lst - now < r - l) {\n            for (int j = l; j < r; ++j) if (query('A', pri[1][j]) == 1)\n                query('C', pri[1][j]);\n        }\n        lst = now;\n    }\n\n    query('C', 1);\n\n    return 0;\n}\n"
}