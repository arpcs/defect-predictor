{
    "id": 209515886,
    "contestId": 1406,
    "creationTimeSeconds": 1686629528,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "Madao_Edge"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599918300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 31,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 512000,
    "source": "#include <iostream>\r\n#include <cmath>\r\n#include <vector>\r\nusing namespace std;\r\n\r\n#define DEBUG\r\n\r\nbool nonPrimeTable[101005];\r\nint aboveSqrtPrimeList[101005];\r\nint aboveSqrtPrimeCount;\r\n// 1~100000\u67099592\u500b\u8cea\u6578\r\n// 10000-9592 = 408\r\n// 408-\r\n// \u53ef\u4ee5\u5148\u5c0dsqrt(100000)=316.227\u4ee5\u5167\u7684\u8cea\u6578\u7528B A\u4f86query (65\u500b*2 = 130), sqrt(100000)\u4ee5\u5916\u7684\u8cea\u6578\u7528BBBBBBBA\u4f86\u4e8c\u5206\u641c\r\nbool inSqrtStrat = true;\r\nint currentQuery = 2;\r\nint tmpQuery = -1;\r\nint n;\r\nint lrange = -1, rrange = -1;\r\n\r\nint main() {\r\n\tcin >> n;\r\n\tif (n == 1) {\r\n\t\tcout << \"C 1\" << endl;\r\n\t\tfflush(stdout);\r\n\t}\r\n\tfor (int i = 2; i <= sqrt(101000); ++i) {\r\n\t\tif (nonPrimeTable[i]) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tfor (int j = i+i; j <= 101000; j+=i) {\r\n\t\t\tnonPrimeTable[j] = true;\r\n\t\t}\r\n\t}\r\n\tfor (int i = sqrt(n)+1; i <= n; ++i) {\r\n\t\tif (!nonPrimeTable[i]) {\r\n\t\t\taboveSqrtPrimeList[aboveSqrtPrimeCount++] = i;\r\n\t\t}\r\n\t}\r\n\tlrange = 0;\r\n\trrange = aboveSqrtPrimeCount-1;\r\n\t// initial query\r\n\tint currentQuery = 2;\r\n\tint queryNum;\r\n\tint answer = 1;\r\n\tbool emptied = false;\r\n\twhile (true) {\r\n\t\tif (currentQuery <= sqrt(n)) {\r\n\t\t\tcout << \"B \" << currentQuery << endl;\r\n\t\t\tfflush(stdout);\r\n\t\t\tcin >> queryNum;\r\n\t\t\tcout << \"A \" << currentQuery << endl;\r\n\t\t\tfflush(stdout);\r\n\t\t\tcin >> queryNum;\r\n\r\n\t\t\tif (queryNum != 0) {\r\n\t\t\t\t// \u5982\u679c\u5df2\u7d93\u7528B\u522a\u6389currentQuery\u7684\u8a71 \u7167\u7406\u4f86\u8b1bqueryNum\u61c9\u8a72\u8981\u90fd\u662f0\r\n\t\t\t\t// \u5982\u679cqueryNum\u4e0d\u662f0\u4ee3\u8868x\u662fcurrentQuery\u7684\u500d\u6578\r\n\t\t\t\tint tmpQuery = currentQuery;\r\n\t\t\t\tdo {\r\n\t\t\t\t\ttmpQuery *= currentQuery;\r\n\t\t\t\t\tif (tmpQuery > n) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcout << \"B \" << tmpQuery << endl;\r\n\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\tcout << \"A \" << tmpQuery << endl;\r\n\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t} while (queryNum >= 1);\r\n\t\t\t\tanswer *= (tmpQuery / currentQuery);\r\n\t\t\t}\r\n\t\t\twhile (nonPrimeTable[++currentQuery]);\r\n\r\n\t\t} \r\n\t\t// if (answer > sqrt(n)) {\r\n\t\t// \tcout << \"C \" << answer << endl;\r\n\t\t// \tfflush(stdout);\r\n\t\t// \tbreak;\r\n\t\t// }\r\n\t\tif (currentQuery > sqrt(n)) {\r\n\t\t\tif (answer * currentQuery > n) {\r\n\t\t\t\tcout << \"C \" << answer << endl;\r\n\t\t\t\tfflush(stdout);\r\n\t\t\t\tbreak;\r\n\t\t\t} else {\r\n\t\t\t\tif (answer != 1) {\r\n\t\t\t\t\tfor (int i = n/answer+1; i >= 1; --i) {\r\n\t\t\t\t\t\tif (!nonPrimeTable[i]) {\r\n\t\t\t\t\t\t\trrange = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor (int i = lrange; i <= rrange; ++i) {\r\n\t\t\t\t\t\tif (answer * aboveSqrtPrimeList[i] > n) {\r\n\t\t\t\t\t\t\tcout << \"C \" << answer << endl;\r\n\t\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcout << \"A \" << answer * aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\t\tif (queryNum == 1) {\r\n\t\t\t\t\t\t\tcout << \"C \" << answer * aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (lrange == rrange) {\r\n\t\t\t\t\t// test lrange and 1\r\n\t\t\t\t\tcout << \"B \" << aboveSqrtPrimeList[lrange] << endl;\r\n\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\tcout << \"A \" << aboveSqrtPrimeList[lrange] << endl;\r\n\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\tif (queryNum == 0) {\r\n\t\t\t\t\t\tcout << \"C \" << answer << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcout << \"C \" << answer * aboveSqrtPrimeList[lrange] << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tint mid = (lrange + rrange) / 2;\r\n\t\t\t\tif (rrange - lrange + 1 == 2) {\r\n\t\t\t\t\t// test all\r\n\t\t\t\t\tbool foundAns = false;\r\n\t\t\t\t\tfor (int i = lrange; i <= rrange; ++i) {\r\n\t\t\t\t\t\tcout << \"B \" << aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\t\tcout << \"A \" << answer * aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\t\tif (queryNum == 1) {\r\n\t\t\t\t\t\t\tcout << \"C \" << answer * aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\t\tfoundAns = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!foundAns) {\r\n\t\t\t\t\t\tcout << \"C \" << answer << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\twhile (rrange - mid == mid - lrange + 1) {\r\n\t\t\t\t\t\t// 2381 2381\r\n\t\t\t\t\t\t// left possible range after reduce 0, 1\r\n\t\t\t\t\t\t// right possible range \r\n\t\t\t\t\t\t// [5 6] failed\r\n\t\t\t\t\t\t// [5 6 7]\r\n\t\t\t\t\t\t// [5 6 7 8]\r\n\t\t\t\t\t\tmid++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = lrange; i <= mid; ++i) {\r\n\t\t\t\t\tcout << \"B \" << aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t}\r\n\t\t\t\tcout << \"A 1\" << endl;\r\n\t\t\t\tfflush(stdout);\r\n\t\t\t\tcin >> queryNum;\r\n\t\t\t\t#ifdef DEBUG\r\n\t\t\t\tcerr << lrange << \" \" << mid << \" \" << aboveSqrtPrimeList[mid] << \" \" << rrange << endl;\r\n\t\t\t\t#endif\r\n\t\t\t\tbool foundAns_loop = false;\r\n\t\t\t\tif (emptied) {\r\n\t\t\t\t\tfor (int i = lrange; i <= rrange; ++i) {\r\n\t\t\t\t\t\tcout << \"A \" << aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tcin >> queryNum;\r\n\t\t\t\t\t\tif (queryNum == 1) {\r\n\t\t\t\t\t\t// in the right region\r\n\t\t\t\t\t\t\tcout << \"C \" << answer * aboveSqrtPrimeList[i] << endl;\r\n\t\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\t\tfoundAns_loop = true;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (!foundAns_loop) {\r\n\t\t\t\t\t\tcout << \"C \" << answer << endl;\r\n\t\t\t\t\t\tfflush(stdout);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (queryNum == 1 + (rrange - mid)) {\r\n\t\t\t\t\t\t// in the right region\r\n\t\t\t\t\t\tlrange = mid + 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// in the left region\r\n\t\t\t\t\t\trrange = mid;\r\n\t\t\t\t\t\temptied = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (foundAns_loop) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
}