{
    "id": 234352236,
    "contestId": 1406,
    "creationTimeSeconds": 1700972698,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "harshaa05"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599918300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ld = long double;\nconst ll MOD = 1e+9 + 7;\n\nll n;\nint A(ll a) {\n    assert(a >= 1);\n    if (a <= n) {\n        cout << \"A \" << a << endl;\n        int x;\n        cin >> x;\n        return x;\n    }\n    return 0;\n}\nint B(ll a) {\n    assert(a > 1);\n    if (a <= n) {\n        cout << \"B \" << a << endl;\n        int x;\n        cin >> x;\n        return x;\n    }\n    return 0;\n}\nint main() {\n    cin >> n;\n    vector<ll> primes(1, 1), spf(n + 1, 1), pos(n + 1), cnt(n + 1);\n    ll prev = 1;\n    for (ll i = 2; i * i <= n; i ++) {\n        prev = i;\n        if (spf[i] == 1) {\n            for (ll j = i * i; j <= n; j++) {\n                if (spf[j] == 1) {\n                    spf[j] = i;\n                }\n            }\n            spf[i] = i;\n            pos[i] = (int) primes.size();\n            primes.push_back(i);\n        }\n    }\n\n    for (ll i = prev + 1; i <= n; i ++) {\n        if (spf[i] == 1) {\n            spf[i] = i;\n            pos[i] = (int) primes.size();\n            primes.push_back(i);\n        }\n    }\n\n    for (auto t : primes) {\n        cnt[t] = n / t;\n    }\n\n    bool ok = false;\n    int curr = 1;\n    ll ans = 1;\n    for (auto t : primes) {\n        if (t == 1) continue;\n        int x = B(t);\n        if (x != cnt[t]) {\n            ans *= t;\n            while (A(ans * t)) {\n                ans *= t;\n            }\n            if (!ok) {\n                int p = curr - 1;\n                while (!A(primes[p])) {\n                    p--;\n                }\n                ok = true;\n                ans *= primes[p];\n                while (A(ans * primes[p])) {\n                    ans *= primes[p];\n                }\n            }\n            for (ll i = t; i <= n; i ++) {\n                if (spf[i] == t) {\n                    ll r = i;\n                    while (r > 1) {\n                        ll e = spf[r];\n                        cnt[e] --;\n                        while (r % e == 0) r /= e;\n                    }\n                    cnt[r] --;\n                }\n            }\n        }\n        if (!ok and curr % 100 == 0) {\n            int p = curr;\n            while (!A(primes[p])) {\n                p --;\n            }\n            ok = true;\n            ans *= primes[p];\n            while (A(ans * primes[p])) {\n                ans *= primes[p];\n            }\n        }\n        curr ++;\n    }\n\n    cout << \"C \" << ans << endl;\n    return 0;\n}"
}