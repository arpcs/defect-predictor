{
    "id": 154639743,
    "contestId": 1406,
    "creationTimeSeconds": 1650706070,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "LuoShaoyinn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599918300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 102,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 1331200,
    "source": "#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\nusing namespace std;\r\n\r\nconst int MAXN = 1e5 + 5;\r\nconst int B    = 100;\r\nint inline read(){\r\n\tint x = 0, f = 0; char ch = getchar();\r\n\twhile(ch < '0' || ch > '9') f ^= (ch == '-'), ch = getchar();\r\n\twhile(ch >= '0' && ch <= '9') x = x * 10 + (ch ^ 48), ch = getchar();\r\n\treturn f ? -x : x;\r\n} \r\n\r\n\r\nint st, n, ans = 1;\r\n\r\nbool bnprim[MAXN];\r\nint prim[MAXN], totpri = 0;\r\nvoid getprim(){\r\n\tfor(int i = 2; i <= n; ++i){\r\n\t\tif(!bnprim[i]) prim[++totpri] = i;\r\n\t\tfor(int j = 1; j <= totpri && i * prim[j] <= n; ++j) {\r\n\t\t\tbnprim[i*prim[j]] = true;\r\n\t\t\tif(i % prim[j] == 0) break;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nnamespace chk{\r\n\tint c[MAXN], aa = 99991;\r\n\tvoid init() { for(int i = 1; i <= n; ++i) c[i] = 1; }\r\n\tint ask(int x) { \r\n\t\tint ret = 0; \r\n\t\tfor(int i = x; i <= n; i += x) ret += c[i];\r\n\t\treturn ret;\r\n\t }\r\n\tint era(int x) { \r\n\t\tint ret = ask(x);\r\n\t\tfor(int i = x; i <= n; i += x) if(i != aa) c[i] = 0;\r\n\t\treturn ret;\r\n\t }\r\n};\r\n\r\nint ask(int x) { /*return chk::ask(x);*/ printf(\"A %d\\n\", x); fflush(stdout); return read(); }\r\nint era(int x) { /*return chk::era(x);*/ printf(\"B %d\\n\", x); fflush(stdout); return read(); }\r\nint out(int x) { printf(\"C %d\\n\", x); fflush(stdout); exit(0); }\r\n\r\nint pp[MAXN];\r\nint solve(int p) {\r\n\tint L = 1, R = 0, mid;\r\n\tfor(int i = p; i <= n; i *= p) pp[++R] = i;\r\n\t++R;\r\n\twhile(L + 1 < R) {\r\n\t\tmid = (L + R) >> 1;\r\n\t\tif(ask(pp[mid])) L = mid;\r\n\t\telse R = mid;\r\n\t}\r\n\treturn pp[L];\r\n}\r\n\r\nint main(){\r\n\tn = read(); if(n == 1) out(1);\r\n\tgetprim(); chk::init();\r\n//\tfor(int i = 1; i <= 10; ++i) printf(\"%d \", prim[i]);\r\n\twhile(prim[st + 1] * prim[st + 1] <= n) ++st;\r\n\t++st;\r\n//\tprintf(\"%d \", st);\r\n\t\r\n\t// solve for x >= sqrt(n)\r\n\tfor(int i = st, s = 0; i <= totpri; ++i) {\r\n\t\tera(prim[i]); s += n / prim[i];\r\n//\t\tfprintf(stderr, \"%d %d\\n\", prim[i], s);\r\n\t\tif((i - st + 1) % B == 0 || i == totpri) {\r\n\t\t\tif(ask(1) == n - s) continue;\r\n\t\t\tfor(int j = max(i - B + 1, st); j <= i; ++j)\r\n\t\t\t\tif(ask(prim[j])) {\r\n\t\t\t\t\tans = prim[j];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\tif(ans > 1) break;\r\n\t\t}\r\n\t}\r\n\t\r\n//\tfprintf(stderr, \"[+] %d \\n\", ans);\r\n\t\r\n\t// solve for x <= sqrt(n)\r\n\tfor(int i = 1; i < st; ++i) {\r\n\t\tera(prim[i]); int tmp = ask(prim[i]);\r\n\t\tif(tmp == 0) continue;\r\n\t\tans = ans * solve(prim[i]);\r\n\t}\r\n\tout(ans);\r\n\treturn 0;\r\n}"
}