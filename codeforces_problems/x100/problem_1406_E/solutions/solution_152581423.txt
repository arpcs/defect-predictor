{
    "id": 152581423,
    "contestId": 1406,
    "creationTimeSeconds": 1648989842,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "zxxdxn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599918300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 102,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n#define MANY_TEST_CASE 0\r\nusing namespace std;\r\nint ask(int k){\r\n    printf(\"B %d\\n\", k);\r\n    fflush(stdout);\r\n    int ans;\r\n    scanf(\"%d\", &ans);\r\n    return ans;\r\n}\r\n\r\nint count(int k){\r\n    printf(\"A %d\\n\", k);\r\n    fflush(stdout);\r\n    int ans;\r\n    scanf(\"%d\", &ans);\r\n    return ans;\r\n}\r\n\r\nint N;\r\nbool isp[1<<17];\r\nbool ex[1<<17];\r\nvector<int> p;\r\nconst int X = 100;\r\nvoid check(int P, int id){\r\n    int n = N/P;\r\n    while (p[id] <= n){\r\n        if(count(P * p[id])){\r\n            P = P * p[id];\r\n            n = N / P;\r\n        }else{\r\n            id++;\r\n        }\r\n    }\r\n    printf(\"C %d\\n\", P);\r\n}\r\n\r\nvoid solve() {\r\n   scanf(\"%d\", &N);\r\n   for(int i = 2; i<= N; i++) isp[i] = true;\r\n   for(int i = 1; i<= N; i++) ex[i] = true;\r\n   for(int i = 2; i <= N; i++) {\r\n       if(isp[i]) {\r\n           p.push_back(i);\r\n           for(int j = i + i; j <= N; j+= i){\r\n               isp[j] = false;\r\n           }\r\n       }\r\n   }\r\n   int id = 0;\r\n    while (id < p.size() && p[id] * p[id] <= N){\r\n        ask(p[id]);\r\n        if(count(p[id])){\r\n            check(p[id], id);\r\n            return;\r\n        }\r\n        for(int j = p[id]; j <= N; j += p[id]){\r\n            ex[j] = false;\r\n        }\r\n        id++;\r\n    }\r\n    int rest = 0;\r\n    for(int i = 1; i <= N; i++){\r\n        if(ex[i]) rest++;\r\n    }\r\n    while (id < p.size()) {\r\n        int from = id;\r\n        int nowc = 0;\r\n        // mixed check\r\n        while (id < p.size() && nowc < X){\r\n            nowc++;\r\n            ask(p[id]);\r\n            rest--;\r\n            id++;\r\n        }\r\n        if(count(1) != rest){\r\n            for(int j = from; j < id; j++){\r\n                if(count(p[j]) == 1){\r\n                    printf(\"C %d\\n\", p[j]);\r\n                    fflush(stdout);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    printf(\"C 1\\n\");\r\n    fflush(stdout);\r\n}\r\n\r\n\r\nint main() {\r\n//    ios::sync_with_stdio(false);\r\n//    cin.tie(nullptr);\r\n//    cout.tie(nullptr);\r\n    int t = 1;\r\n    if(MANY_TEST_CASE){\r\n        cin>>t;\r\n    }\r\n    while(t--) {\r\n        solve();\r\n    }\r\n\r\n}\r\n"
}