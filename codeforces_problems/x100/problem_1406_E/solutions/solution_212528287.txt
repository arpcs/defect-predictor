{
    "id": 212528287,
    "contestId": 1406,
    "creationTimeSeconds": 1688719411,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1406,
        "index": "E",
        "name": "Deleting Numbers",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2600,
        "tags": [
            "interactive",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1406,
        "members": [
            {
                "handle": "Little_Sheep_Yawn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599918300
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 102,
    "timeConsumedMillis": 576,
    "memoryConsumedBytes": 15155200,
    "source": "from io import BytesIO, IOBase\r\nimport sys\r\nimport os\r\n\r\n# import time\r\nimport bisect\r\n# import functools\r\nimport math\r\nimport random\r\n# import re\r\nfrom collections import Counter, defaultdict, deque\r\nfrom copy import deepcopy\r\nfrom functools import cmp_to_key, lru_cache, reduce\r\nfrom heapq import heapify, heappop, heappush, heappushpop, nlargest, nsmallest\r\nfrom itertools import accumulate, combinations, permutations, count\r\nfrom operator import add, iand, ior, itemgetter, mul, xor\r\nfrom string import ascii_lowercase, ascii_uppercase\r\nfrom typing import *\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\nBUFSIZE = 5096\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n\r\nsys.stdin = IOWrapper(sys.stdin)\r\nsys.stdout = IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\ndef I():\r\n    return input()\r\n\r\ndef II():\r\n    return int(input())\r\n\r\ndef MII():\r\n    return map(int, input().split())\r\n\r\ndef LI():\r\n    return list(input().split())\r\n\r\ndef LII():\r\n    return list(map(int, input().split()))\r\n\r\ndef GMI():\r\n    return map(lambda x: int(x) - 1, input().split())\r\n\r\ndef LGMI():\r\n    return list(map(lambda x: int(x) - 1, input().split()))\r\n\r\ninf = float('inf')\r\n\r\n# from types import GeneratorType\r\n\r\n# def bootstrap(f, stack=[]):\r\n#     def wrappedfunc(*args, **kwargs):\r\n#         if stack:\r\n#             return f(*args, **kwargs)\r\n#         else:\r\n#             to = f(*args, **kwargs)\r\n#             while True:\r\n#                 if type(to) is GeneratorType:\r\n#                     stack.append(to)\r\n#                     to = next(to)\r\n#                 else:\r\n#                     stack.pop()\r\n#                     if not stack:\r\n#                         break\r\n#                     to = stack[-1].send(to)\r\n#             return to\r\n#     return wrappedfunc\r\n\r\n# RANDOM = random.getrandbits(32)\r\n\r\n# class Wrapper(int):\r\n#     def __init__(self, x):\r\n#         int.__init__(x)\r\n\r\n#     def __hash__(self):\r\n#         return super(Wrapper, self).__hash__() ^ RANDOM\r\n\r\ndef queryA(x):\r\n    print('A', x, flush=True)\r\n    return II()\r\n\r\ndef queryB(x):\r\n    print('B', x, flush=True)\r\n    return II()\r\n\r\ndef answer(x):\r\n    print('C', x)\r\n\r\nn = II()\r\nvis = [0] * (n + 1)\r\nprimes = []\r\nmax_div = list(range(n+1))\r\nmax_div[1] = 1\r\n\r\nfor i in range(2, n + 1):\r\n    if max_div[i] == i:\r\n        primes.append(i)\r\n        for j in range(i, n+1, i):\r\n            max_div[j] = i\r\n\r\ngroup_size = 100\r\nfind_prime = []\r\ntot = n\r\nflag = True\r\nfor i in range((len(primes) - 1) // group_size + 2):\r\n    for j in range(i * group_size, min(len(primes), (i + 1) * group_size)):\r\n        v = queryB(primes[j])\r\n        cnt = 0\r\n        for k in range(primes[j], n + 1, primes[j]):\r\n            if vis[k] == 0:\r\n                cnt += 1\r\n                vis[k] += 1\r\n                tot -= 1\r\n        if cnt < v:\r\n            find_prime.append(primes[j])\r\n    if flag and queryA(1) > tot:\r\n        for j in range(i * group_size, min(len(primes), (i + 1) * group_size)):\r\n            if queryB(primes[j]):\r\n                find_prime.append(primes[j])\r\n                break\r\n        flag = False\r\n\r\nans = 1\r\nfor p in find_prime:\r\n    x = 2\r\n    while p ** x <= n and queryA(p ** x):\r\n        x += 1\r\n    ans *= p ** (x - 1)\r\nanswer(ans)"
}