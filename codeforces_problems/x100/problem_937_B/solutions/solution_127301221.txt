{
    "id": 127301221,
    "contestId": 937,
    "creationTimeSeconds": 1630212533,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 937,
        "index": "B",
        "name": "Vile Grasshoppers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1400,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 937,
        "members": [
            {
                "handle": "Genuine_8"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519574700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 4096000,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int N=100005;\nint taken[N];\nint p,y,i;\nint main(){\n  /*ios_base::sync_with_stdio(false);\n      cin.tie(0);\n      cout.tie(0);\n      #ifndef ONLINE_JUDGE\n      freopen(\"input.txt\",\"r\",stdin);\n      freopen(\"output.txt\",\"w\",stdout);\n      #endif*/\n    cin>>p>>y;\n    for(i=2;i*i<=y && i<=p;i++){\n      taken[y%i]=1;\n    }\n    for(i=0;i*i<=y;i++){\n      if(!taken[i] && y-i>p){\n        cout<<y-i<<endl;\n        return 0;\n      }\n    }\n    cout<<-1<<endl;\n    return 0;\n}\n",
    "category_evaluation": {
        "mathematics": 60,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 70,
        "graphs": 0,
        "sortings": 0,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 80,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 50,
        "self-documenting": 30,
        "complex": 20,
        "readable": 60,
        "well-named": 60,
        "efficient": 70,
        "reusable": 0,
        "documented": 40,
        "good error-handling": 0,
        "good solution": 70,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 90,
        "compilation error": 5,
        "runtime error": 5
    },
    "defect_evaluation_v1": {
        "good solution": 90,
        "compilation error": 0,
        "runtime error": 10
    },
    "defect_evaluation_v3": {
        "good solution": 85,
        "wrong solution": 15,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 0,
        "wrong solution": 95,
        "compilation error": 0,
        "runtime error": 5
    },
    "defect_evaluation_v4": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    }
}