{
    "id": 36240877,
    "contestId": 937,
    "creationTimeSeconds": 1520924391,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 937,
        "index": "B",
        "name": "Vile Grasshoppers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1400,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 937,
        "members": [
            {
                "handle": "psrs"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519574700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1843200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\nvoid simpleSieve(int limit, vector<int> &prime, int n)\r\n{\r\n        bool mark[limit+1];\r\n        memset(mark, true, sizeof(mark));\r\n     \r\n        for (int p=2; p*p <= limit && p <= n; p++)\r\n            if (mark[p] == true)\r\n                for (int i=p*2; i<limit; i+=p)\r\n                    mark[i] = false;\r\n        \r\n        for (int p=2; p<limit; p++)\r\n            if (mark[p] == true)\r\n                prime.push_back(p);\r\n}\r\n \r\nvoid segmentedSieve(int n, int p)\r\n{\r\n        int limit = floor(sqrt(n+1));\r\n        vector<int> prime; \r\n        simpleSieve(limit, prime, p); \r\n    \r\n        int low = n - limit;\r\n        int high = n;\r\n\r\n\r\n        bool mark[limit+5];\r\n        memset(mark, true, sizeof(mark));\r\n\r\n        for (int i = 0; i < prime.size() && prime[i] <= p; i++)\r\n        {\r\n\r\n            int loLim = floor(low/prime[i]) * prime[i];\r\n            if (loLim < low)\r\n                loLim += prime[i];\r\n\r\n            for (int j=loLim; j <= high; j+=prime[i])\r\n                mark[j-low] = false;\r\n        }\r\n \r\n        for (int i = high; i >= low; i--)\r\n            if (mark[i - low] == true) {\r\n                i <= p ? cout << -1 : cout << i;\r\n                break;\r\n            }\r\n                \r\n\r\n}\r\n \r\nint main()\r\n{\r\n    int p, y;\r\n    cin >> p >> y;\r\n    segmentedSieve(y, p);\r\n    \r\n    return 0;\r\n}"
}