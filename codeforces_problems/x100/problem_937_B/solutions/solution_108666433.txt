{
    "id": 108666433,
    "contestId": 937,
    "creationTimeSeconds": 1614515962,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 937,
        "index": "B",
        "name": "Vile Grasshoppers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1400,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 937,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519574700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 58,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\n \nusing namespace std; \n \n#define ll long long\n#define mp make_pair\n#define pb push_back\n#define ld long double \n#define all(a) (a.begin(),a.end())\n#define fst first\n#define snd second\n#define vll vector<ll int > \n#define en cout<<'\\n'\n#define sp setprecision\n#define in(a) ll int a ; cin>> a \n#define endl '\\n'\n#define ios ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n \n// replace a substring :  str=regrex_replace(str,regrex(\"OLD\"),\"NEW\");\n\nint main()\n{\n    ios\n\n    int p , y ;\n    cin >> p >> y ;\n\n    int ans = y ;\n\n    while(ans > p)\n    {\n        bool co = 1;\n\n        for(int i = 2; i <= p && i*i <= y; i++)\n        {\n            if(ans%i == 0)\n            {\n                co = 0;\n                break;\n            }\n        }\n\n        if(co) break;\n\n        ans--;\n    }\n\n    if ( ans == p ) cout << -1 ;\n    else cout << ans ; en;\n    return 0;\n}\n\t \t  \t\t\t\t \t\t\t\t \t \t\t \t\t\t\t\t \t\t",
    "category_evaluation": {
        "mathematics": 70,
        "dynamic programming": 10,
        "bit manipulation": 0,
        "greedy": 10,
        "brute force": 30,
        "graphs": 20,
        "sortings": 10,
        "search": 20,
        "trees": 20,
        "strings": 10,
        "number theory": 60,
        "combinatorics": 10,
        "two pointers": 10,
        "geometry": 0,
        "shortest paths": 10,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 10,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 20,
        "self-documenting": 0,
        "complex": 40,
        "readable": 10,
        "well-named": 10,
        "efficient": 20,
        "reusable": 10,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 40,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 70,
        "compilation error": 0,
        "runtime error": 30
    }
}