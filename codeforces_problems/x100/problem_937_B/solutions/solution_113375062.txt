{
    "id": 113375062,
    "contestId": 937,
    "creationTimeSeconds": 1618714325,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 937,
        "index": "B",
        "name": "Vile Grasshoppers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1400,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 937,
        "members": [
            {
                "handle": "aditya_cpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519574700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 100249600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define forn(i, n) for (int i = 0; i < int(n); ++i)\r\n#define ll long long\r\n// How to use forn(x, 10)\r\n\r\nbool arr[100000009];\r\n\r\nvoid seive(int n, int k)\r\n{\r\n    for (int i = 2; i <= n; i++)\r\n    {\r\n        arr[i] = true;\r\n    }\r\n    for (int i = 2; i <= k; i++)\r\n    {\r\n        if (arr[i] == true)\r\n        {\r\n            for (int j = i * 2; j <= n; j += i)\r\n            {\r\n                arr[j] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL), cout << fixed, cout << setprecision(10);\r\n    int p, y; //Find the greatest prime no, which is greater than p and is less than y\r\n    cin >> p >> y;\r\n    seive(y, p);\r\n    bool flag = 0;\r\n    for (int j = y; j > p; j--)\r\n    {\r\n        if (arr[j] == true)\r\n        {\r\n            cout << j;\r\n            flag = 1;\r\n            break;\r\n        }\r\n    }\r\n    if (flag == 0)\r\n        cout << \"-1\";\r\n    return 0;\r\n}",
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 10,
        "graphs": 0,
        "sortings": 0,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 10,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 70,
        "self-documenting": 60,
        "complex": 10,
        "readable": 20,
        "well-named": 50,
        "efficient": 0,
        "reusable": 0,
        "documented": 60,
        "good error-handling": 0,
        "good solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 75,
        "compilation error": 0,
        "runtime error": 25
    }
}