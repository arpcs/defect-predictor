{
    "id": 35825941,
    "contestId": 937,
    "creationTimeSeconds": 1519969079,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 937,
        "index": "B",
        "name": "Vile Grasshoppers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1400,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 937,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519574700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 3481600,
    "source": "#include<bits/stdc++.h>\n#define lson l, mid, rt << 1\n#define rson mid + 1, r, rt << 1 | 1\nusing namespace std;\nconst int N = 2e5 + 10;\ntypedef long long ll;\n\nll mod_exp(ll a, ll b, ll n) {\n    ll res = 1;\n    while(b) {\n        if(b&1)    res = res * a % n;\n        a = a * a % n;\n        b >>= 1;\n    }\n    return res;\n}\nbool miller_rabin(ll n) {\n    if(n == 2 || n == 3 || n == 5 || n == 7 || n == 11)    return true;\n    if(n == 1 || !(n%2) || !(n%3) || !(n%5) || !(n%7) || !(n%11))    return false;\n    ll x, pre, u;\n    int i, j, k = 0;\n    u = n - 1;\n    while(!(u&1)) {\n        k++; u >>= 1;\n    }\n    srand((ll)time(0));\n    for(i = 0; i < 20; ++i) {\n        x = rand()%(n-2) + 2;\n        if((x%n) == 0)    continue;\n\n        x = mod_exp(x, u, n);\n        pre = x;\n        for(j = 0; j < k; ++j) {\n            x = x * x % n;\n            if(x == 1 && pre != 1 && pre != n-1)    return false;\n            pre = x;\n        }\n        if(x != 1)    return false;\n    }\n    return true;\n}\n\nint prime[N], vis[N];\nint main() {\n    int p, y, cnt = 0;\n    scanf(\"%d%d\", &p, &y);\n    p++;\n    for (int i = 2; i <= sqrt(y); i++) if (!vis[i]) {\n        prime[cnt++] = i;\n        for (int j = i * 2; j <= sqrt(y); j += i) vis[j] = 1;\n    }\n    int tmp = y;\n    while (1) {\n        if (p >= y) {\n            printf(\"-1\\n\");\n            return 0;\n        }\n        if (miller_rabin(tmp)) break;\n        tmp--;\n    }\n    int b = lower_bound(prime, prime + cnt, p) - prime;\n    int e = upper_bound(prime, prime + cnt, sqrt(y)) - prime;\n    for (int i = b; i < e; i++)\n        for (int j = i; j < e; j++) if (prime[i] * prime[j] > y) break;\n        else tmp = max(tmp, prime[i] * prime[j]);\n    printf(\"%d\\n\", tmp);\n}\n",
    "suggested_categories": [
        "number theory",
        "algorithm",
        "mathematics",
        "prime numbers",
        "number theory algorithms",
        "mathematical functions",
        "complexity analysis",
        "modular arithmetic",
        "c++ programming",
        "code optimization",
        "randomized algorithms",
        "probability theory",
        "bit manipulation",
        "data structures",
        "binary search",
        "dynamic programming",
        "software performance",
        "software testing",
        "code debugging",
        "cryptography"
    ],
    "defect_evaluation_v1": {
        "good solution": 70,
        "compilation error": 10,
        "runtime error": 20
    }
}