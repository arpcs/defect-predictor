{
    "id": 50648611,
    "contestId": 1002,
    "creationTimeSeconds": 1551458634,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1002,
        "index": "B3",
        "name": "Distinguish four 2-qubit states",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": []
    },
    "author": {
        "contestId": 1002,
        "members": [
            {
                "handle": "sirknightingfail"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530892800
    },
    "programmingLanguage": "Q#",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "namespace Solution {\r\n    open Microsoft.Quantum.Primitive;\r\n    open Microsoft.Quantum.Canon;\r\n\r\n    operation Solve (qs : Qubit[]) : Int\r\n    {\r\n        body(...)\r\n        {\r\n\t\t\tH(qs[0]);\r\n\t\t\tH(qs[1]);\r\n\t\t\treturn ResultAsInt([M(qs[1]);M(qs[0]) ]);\r\n        }\r\n    }\r\n}",
    "suggested_categories": [
        "quantum computing",
        "microsoft quantum",
        "q# programming",
        "quantum algorithms",
        "quantum operations",
        "qubit manipulation",
        "programming languages",
        "code quality",
        "code metrics",
        "quantum primitives",
        "quantum canon",
        "quantum simulations",
        "quantum gates",
        "quantum measurement",
        "quantum superposition",
        "quantum entanglement",
        "computer programming",
        "code optimization",
        "algorithm implementation",
        "software development"
    ]
}