{
    "id": 102757640,
    "contestId": 1002,
    "creationTimeSeconds": 1609325514,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1002,
        "index": "B3",
        "name": "Distinguish four 2-qubit states",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": []
    },
    "author": {
        "contestId": 1002,
        "members": [
            {
                "handle": "sotanishy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530892800
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 170,
    "memoryConsumedBytes": 0,
    "source": "namespace Solution {\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Diagnostics;\r\n    open Microsoft.Quantum.Arithmetic;\r\n\r\n    operation Solve(qs : Qubit[]) : Int {\r\n        ApplyToEach(H, qs);\r\n        return MeasureInteger(BigEndianAsLittleEndian(BigEndian(qs)));\r\n    }\r\n}",
    "suggested_categories": [
        "quantum computing",
        "q# language",
        "microsoft.quantum",
        "intrinsic operations",
        "arithmetic operations",
        "code quality",
        "code quantity",
        "quantum algorithms",
        "quantum operations",
        "quantum measurement",
        "code optimization",
        "quantum gates",
        "programming languages",
        "quantum simulation",
        "quantum programming",
        "open source software",
        "software development",
        "computational science",
        "quantum information",
        "data processing"
    ]
}