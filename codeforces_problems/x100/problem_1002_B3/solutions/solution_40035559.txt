{
    "id": 40035559,
    "contestId": 1002,
    "creationTimeSeconds": 1530894051,
    "relativeTimeSeconds": 1251,
    "problem": {
        "contestId": 1002,
        "index": "B3",
        "name": "Distinguish four 2-qubit states",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": []
    },
    "author": {
        "contestId": 1002,
        "members": [
            {
                "handle": "leaomatheus"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1530892800
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 0,
    "source": "namespace Solution {\r\n    open Microsoft.Quantum.Primitive;\r\n    open Microsoft.Quantum.Canon;\r\n    \r\n    operation Solve (qs : Qubit[]) : Int\r\n    {\r\n        body\r\n        {\r\n            CNOT(qs[0], qs[1]);\r\n            H(qs[0]);\r\n            H(qs[1]);\r\n            let b1 = M(qs[0]);\r\n            let b2 = M(qs[1]);\r\n            if (b1 == Zero) {\r\n                if (b2 == Zero) {\r\n                    return 0;\r\n                }\r\n                return 3;\r\n            }\r\n            if (b2 == One) {\r\n                return 1;\r\n            }\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    operation InverseBellState (qs : Qubit[]) : Int \r\n    {\r\n        body\r\n        {\r\n            CNOT(qs[0], qs[1]);\r\n            H(qs[0]);\r\n            let bit1 = M(qs[0]);\r\n            let bit2 = M(qs[1]);\r\n            if (bit1 == Zero) {\r\n                if (bit2 == Zero) {\r\n                    return 0;\r\n                }\r\n                return 2;\r\n            } else {\r\n                if (bit2 == Zero) {\r\n                    return 1;\r\n                }\r\n                return 3;\r\n            }\r\n        }\r\n    }\r\n\r\n    operation Set (q1 : Qubit, desired : Result) : ()\r\n    {\r\n        body\r\n        {\r\n            let current = M(q1);\r\n            if (current != desired)\r\n            {\r\n                X(q1);\r\n            }\r\n        }\r\n    }\r\n\r\n    operation BellState (qs : Qubit[], index : Int) : ()\r\n    {\r\n        body\r\n        {\r\n            if (index == 0) {\r\n                H(qs[0]);\r\n                CNOT(qs[0], qs[1]);\r\n            } elif (index == 1) {\r\n                Set(qs[0], One);\r\n                \r\n                H(qs[0]);\r\n                CNOT(qs[0], qs[1]);\r\n            } elif (index == 2) {\r\n                Set(qs[1], One);\r\n                \r\n                H(qs[0]);\r\n                CNOT(qs[0], qs[1]);\r\n            } elif (index == 3) {\r\n                Set(qs[0], One);\r\n                Set(qs[1], One);\r\n                \r\n                H(qs[0]);\r\n                CNOT(qs[0], qs[1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    operation MySolveTest (sign : Int) : Int\r\n    {\r\n        body\r\n        {\r\n            mutable ans = 0;\r\n            using (qubit = Qubit[2]) {\r\n                Set(qubit[0], Zero);\r\n                Set(qubit[1], Zero);\r\n                BellState(qubit, sign);                \r\n                let res = InverseBellState(qubit);\r\n                \r\n                set ans = res;\r\n                \r\n                Set(qubit[0], Zero);\r\n                Set(qubit[1], Zero);\r\n           }\r\n            return ans;\r\n        }\r\n    }\r\n}\r\n// 00 + 11\r\n// 00 + 10  + 01 - 11"
}