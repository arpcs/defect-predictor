{
    "id": 31697216,
    "contestId": 274,
    "creationTimeSeconds": 1508899055,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 3174400,
    "source": "#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <cmath>\n#include <cstdlib>\n#include <string>\n#include <map>\nusing namespace std;\n#define INF 0x3f3f3f3f\n#define LL long long\n#define fi first\n#define se second\n#define mem(a,b) memset((a),(b),sizeof(a))\n#define sqr(x) ((x)*(x))\n\nconst int MAXN=100000+3;\n\nint N, M;\nvector<pair<int, int>> maze[MAXN];//val, id\nvector<int> G[MAXN], ans;\nint in[MAXN];\nqueue<int> que;\n\nint main()\n{\n    scanf(\"%d%d\", &N, &M);\n    for(int i=0;i<N;++i)\n        for(int j=0;j<M;++j)\n        {\n            int tmp;\n            scanf(\"%d\", &tmp);\n            if(~tmp)\n                maze[i].push_back(make_pair(tmp, j));\n        }\n    for(int i=0;i<N;++i)\n        sort(maze[i].begin(), maze[i].end());\n    for(int i=0;i<N;++i)\n    {\n//        cout<<\"i: \"<<i<<\" size: \"<<maze[i].size()<<endl;\n        for(int j=0;j<maze[i].size();++j)\n        {\n            if(j && maze[i][j-1].fi<maze[i][j].fi)\n            {\n                G[maze[i][j-1].se].push_back(maze[i][j].se);\n                ++in[maze[i][j].se];\n//                cout<<\"0: \"<<i<<\" u: \"<<maze[i][j-1].se<<\" v: \"<<maze[i][j].se<<endl;\n            }\n            else\n            {\n                int l=lower_bound(maze[i].begin(), maze[i].end(), make_pair(maze[i][j].fi, -1))-maze[i].begin();\n                if(l)\n                {\n                    G[maze[i][l-1].se].push_back(maze[i][j].se);\n                    ++in[maze[i][j].se];\n//                    cout<<\"1: \"<<i<<\" u: \"<<maze[i][l-1].se<<\" v: \"<<maze[i][j].se<<endl;\n                }\n                int r=upper_bound(maze[i].begin(), maze[i].end(), make_pair(maze[i][j].fi, INF))-maze[i].begin();\n                if(r!=maze[i].size())\n                {\n                    G[maze[i][j].se].push_back(maze[i][r].se);\n                    ++in[maze[i][r].se];\n//                    cout<<\"2: \"<<i<<\" u: \"<<maze[i][j].se<<\" v: \"<<maze[i][r].se<<endl;\n                }\n            }\n        }\n    }\n    for(int i=0;i<M;++i)\n        if(!in[i])\n            que.push(i);\n    while(!que.empty())\n    {\n        int u=que.front(); que.pop();\n//        cout<<\"u: \"<<u<<endl;\n        ans.push_back(u);\n        for(int i=0;i<G[u].size();++i)\n        {\n            int v=G[u][i];\n            --in[v];\n//            cout<<\"v: \"<<v<<\" in: \"<<in[v]<<endl;\n            if(!in[v])\n                que.push(v);\n        }\n    }\n    if(ans.size()!=M)\n    {\n        puts(\"-1\");\n        return 0;\n    }\n    for(int i=0;i<M;++i)\n        printf(\"%d%c\", ans[i]+1, i==M-1?'\\n':' ');\n    \n    return 0;\n}\n       \t\t\t\t\t\t \t\t  \t    \t \t\t \t"
}