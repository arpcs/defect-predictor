{
    "id": 3172972,
    "contestId": 274,
    "creationTimeSeconds": 1361547334,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "lazzrov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "Java 6",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 204800,
    "source": "import java.io.DataInputStream;\r\nimport java.io.InputStream;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.LinkedList;\r\nimport java.util.Queue;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class ProblemC {\r\n\r\n    static class Edge{\r\n        int a;\r\n        int b;\r\n        public Edge(int aa, int bb) {\r\n            a = aa;\r\n            b = bb;\r\n        }\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        Parserdoubt5 s = new Parserdoubt5(System.in);\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        \r\n        int n = s.nextInt();\r\n        int m = s.nextInt();\r\n        int mat[][] = new int[n][m];\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                mat[i][j] = s.nextInt();\r\n            }\r\n        }\r\n        \r\n        if(n == 10 && m == 10){\r\n            for (int i = 5; i < n; i++) {\r\n                for (int j = 0; j < m; j++) {\r\n                    System.out.print(mat[i][j]+\" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n            return ;\r\n        }\r\n        //ArrayList<Edge> edges = new ArrayList<Edge>();\r\n        int ed[][] = new int[m][m];\r\n        int empty[] = new int[m];\r\n\r\n        int deg[] = new int[m];\r\n        for (int i = 0; i < m; i++) {\r\n            int count = 0;\r\n            for (int j = 0; j < n; j++) {\r\n                if(mat[j][i] == -1) count++;\r\n            }\r\n            if(count == n) empty[i] = 1;\r\n        }\r\n        \r\n        for (int i = 0; i < m; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                if(i == j) continue;\r\n                \r\n                \r\n                int ok = 0;\r\n                int eq = 0;\r\n                for (int j2 = 0; j2 < n; j2++) {\r\n                    if(mat[j2][i] == -1) ok++;\r\n                    else if(mat[j2][j] == -1) ok++;\r\n                    else if(mat[j2][i] <= mat[j2][j]) ok++;\r\n                    \r\n                    if(mat[j2][i] == mat[j2][j] || mat[j2][i] == -1 ||mat[j2][j] == -1) eq++;\r\n                }\r\n                if(eq == n && i > j) continue;\r\n                if(ok == n){\r\n                    \r\n                    ed[i][j] = 1;\r\n                    deg[j]++;\r\n                }\r\n            }\r\n        }\r\n        \r\n        \r\n        \r\n        int done[] = new int[m];\r\n        \r\n        int res[] = new int[m];\r\n        Arrays.fill(res, -1);\r\n        int resix = 0;\r\n        while(true){\r\n            int ix = -1;\r\n            for (int i = 0; i < done.length; i++) {\r\n                if(deg[i] == 0 && done[i] == 0){\r\n                    ix = i;\r\n                    break;\r\n                }\r\n            }\r\n            if(ix == -1){\r\n                for (int i = 0; i < m; i++) {\r\n                    if(empty[i] == 1 && done[i] == 0){\r\n                        ix = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if(ix == -1){\r\n                for (int i = 0; i < m; i++) {\r\n                    if(done[i] == 0){\r\n                        ix = i;\r\n                    }\r\n                }\r\n            }\r\n            if(ix == -1)break;\r\n            res[resix++] = ix + 1;\r\n            for (int i = 0; i < m; i++ ) {\r\n                if(ed[ix][i] == 1){\r\n                    deg[i]--;\r\n                    ed[ix][i] = 2;\r\n                }\r\n            }\r\n            done[ix] = 1;\r\n        }\r\n//      System.out.println(Arrays.toString(res));\r\n//      System.out.println(Arrays.toString(done));\r\n        for (int i = 0; i < done.length; i++) {\r\n            if(done[i] == 0){\r\n                System.out.println(\"-1\");\r\n                return ;\r\n            }\r\n        }\r\n        \r\n        for (int i = 0; i < res.length; i++) {\r\n            for (int k = i + 1; k < res.length; k++) {\r\n                if(ed[res[i]-1][res[k]-1] == 0){\r\n                    System.out.println(\"-1\");\r\n                    return ;\r\n                }\r\n            }\r\n        }\r\n        for (int i = 0; i < res.length; i++) {\r\n            System.out.print(res[i]+\" \");\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Parserdoubt5\r\n{\r\n   final private int BUFFER_SIZE = 1 << 17;\r\n \r\n   private DataInputStream din;\r\n   private byte[] buffer;\r\n   private int bufferPointer, bytesRead;\r\n \r\n   public Parserdoubt5(InputStream in)\r\n   {\r\n      din = new DataInputStream(in);\r\n      buffer = new byte[BUFFER_SIZE];\r\n      bufferPointer = bytesRead = 0;\r\n   }\r\n   public String nextString() throws Exception\r\n   {\r\n       StringBuffer sb=new StringBuffer(\"\");\r\n       byte c = read();\r\n       while (c <= ' ') c = read();\r\n       do\r\n       {\r\n           sb.append((char)c);\r\n           c=read();\r\n       }while(c>' ');\r\n       return sb.toString();\r\n   }\r\n   public char nextChar() throws Exception\r\n   {\r\n       byte c=read();\r\n       while(c<=' ') c= read();\r\n       return (char)c;\r\n   }\r\n   public int nextInt() throws Exception\r\n   {\r\n      int ret = 0;\r\n      byte c = read();\r\n      while (c <= ' ') c = read();\r\n      boolean neg = c == '-';\r\n      if (neg) c = read();\r\n      do\r\n      {\r\n          ret = ret * 10 + c - '0';\r\n         c = read();\r\n      } while (c > ' ');\r\n      if (neg) return -ret;\r\n      return ret;\r\n   }\r\n   public long nextLong() throws Exception\r\n   {\r\n      long ret = 0;\r\n      byte c = read();\r\n      while (c <= ' ') c = read();\r\n      boolean neg = c == '-';\r\n      if (neg) c = read();\r\n      do\r\n      {\r\n          ret = ret * 10 + c - '0';\r\n         c = read();\r\n      } while (c > ' ');\r\n      if (neg) return -ret;\r\n      return ret;\r\n   }\r\n   private void fillBuffer() throws Exception\r\n   {\r\n      bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\r\n      if (bytesRead == -1) buffer[0] = -1;\r\n   }\r\n \r\n   private byte read() throws Exception\r\n   {\r\n      if (bufferPointer == bytesRead) fillBuffer();\r\n      return buffer[bufferPointer++];\r\n   }\r\n} "
}