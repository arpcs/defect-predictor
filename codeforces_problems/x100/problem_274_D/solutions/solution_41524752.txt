{
    "id": 41524752,
    "contestId": 274,
    "creationTimeSeconds": 1534072839,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "DeadlyPillow"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 512000,
    "source": "/*\r\n  The Glow of the fire\r\n  will light up the niiiiiiiiiight\r\n*/\r\n\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n\r\n#define FOR(i,a,b) for(auto i = a; i < b; i++)\r\n#define FORB(i,a,b) for(auto i = a; i >= b; --i)\r\n#define pb push_back\r\n#define ios ios_base::sync_with_stdio(0);cin.tie(0);\r\n#define debug(x) cerr << #x << \" : \" << x << '\\n';\r\n\r\nusing ii = pair<int, int>;\r\nusing ll = long long;\r\nusing db = long double;\r\nusing mat = vector<vector<int>>;\r\n\r\nconst int mod = 1e9 + 7;\r\nconst int N = 1e5 + 5;\r\nstring otr;\r\n/// n * m <= 10 ^ 5\r\n/// focus min(n,m) <= 320 meh :)\r\nmat grid;\r\nint n, m;\r\nint main(){\r\n\r\n  scanf(\"%d%d\", &n, &m);\r\n\r\n  grid = mat(n, vector<int>(m, 0));\r\n\r\n  FOR(i,0,n)FOR(j,0,m)\r\n    scanf(\"%d\", &grid[i][j]);\r\n\r\n  int ord[m];\r\n\r\n  iota(ord, ord + m, 0);\r\n\r\n  sort(ord, ord + m, [&](int i, int j)->bool{\r\n\r\n\r\n    int cnt = 0;\r\n     FOR(k,0,n){\r\n\r\n       if( (~grid[k][i]) && (~grid[k][j])){\r\n        if(grid[k][i] > grid[k][j])return false;\r\n        cnt += (grid[k][i] < grid[k][j]);\r\n       }\r\n    }\r\n\r\n//    cout << i << ' ' << j << ' ' << cnt << '\\n';\r\n    return bool(cnt) ;\r\n  });\r\n\r\n//  FOR(k,0,m)cout << ord[k] << ' ';\r\n\r\n  FOR(i,1,m){\r\n\r\n    FOR(j,0,n){\r\n      if((~grid[j][ord[i]])&&(~grid[j][ord[i-1]])){\r\n        if(grid[j][ord[i]] < grid[j][ord[i-1]]){\r\n          cout << -1 << '\\n';\r\n          return 0;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  FOR(i,0,m)cout << ord[i]+1 << ' ';\r\n\r\n\r\n\r\n\r\n    return 0;\r\n}\r\n"
}