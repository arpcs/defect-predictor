{
    "id": 206101980,
    "contestId": 274,
    "creationTimeSeconds": 1684248678,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "lastsurvivor"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 9113600,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define ll long long\r\n#define ld long double\r\n\r\nusing namespace std;\r\n\r\nvoid test_case() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    int N = (n + 1) * m;\r\n    vector<vector<int>> g(N);\r\n    int last = m;\r\n    for(int i = 0; i < n; i++) {\r\n        vector<pair<ll, int>> a(m);\r\n        for(int j = 0; j < m; j++) {\r\n            cin >> a[j].first;\r\n            a[j].second = j;\r\n        }\r\n        sort(rall(a));\r\n        while(a.size() && a.back().first == -1) {\r\n            a.pop_back();\r\n        }\r\n        reverse(all(a));\r\n        int prev = last;\r\n        for(int j = 0; j < a.size(); j++) {\r\n            if(j > 0 && a[j - 1].first != a[j].first) {\r\n                last++;\r\n            }\r\n            g[last].push_back(a[j].second);\r\n            if(last != prev) {\r\n                g[a[j].second].push_back(last - 1);\r\n            }\r\n        }\r\n        last++;\r\n    }\r\n    bool ok = true;\r\n    vector<int> order;\r\n    vector<int> color(N, -1);\r\n    function<void(int, int)> dfs = [&](int v, int p) {\r\n        color[v] = 1;\r\n        for(auto i : g[v]) {\r\n            if(i == p) continue;\r\n            if(color[i] == 1) {\r\n                ok = false;\r\n            } else if(color[i] == -1) {\r\n                dfs(i, v);\r\n            }\r\n        }\r\n        color[v] = 2;\r\n        order.push_back(v);\r\n    };\r\n    for(int i = 0; i < N; i++) {\r\n        if(color[i] == -1) {\r\n            dfs(i, -1);\r\n        }\r\n    }\r\n    if(!ok) {\r\n        cout << -1;\r\n    } else {\r\n        for(auto i : order) {\r\n            if(i < m) cout << i + 1 << ' ';\r\n        }\r\n    }\r\n    cout << '\\n';\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    int tc = 1; // cin >> tc;\r\n    while(tc--) test_case();\r\n\r\n    cerr << \"Time: \" << 1.0 * clock() / CLOCKS_PER_SEC;\r\n    return 0;\r\n}"
}