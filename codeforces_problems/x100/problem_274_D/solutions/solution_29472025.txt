{
    "id": 29472025,
    "contestId": 274,
    "creationTimeSeconds": 1502767855,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "-IA-"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 216,
    "memoryConsumedBytes": 12595200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=100000+5;\r\ntypedef vector<pair<int ,int > > vec;\r\ntypedef vector<vector<pair<int ,int > > > mat;\r\nint n,m;\r\nset<pair<int ,int > > smallest[maxn];\r\nset<pair<int ,int > > S;\r\nint bad[maxn];\r\n#define MP make_pair\r\nint ans[maxn];\r\nint main()\r\n{\r\n    scanf(\"%d%d\",&n,&m);\r\n    mat A(n,vec(m));\r\n    for(int i=0;i<n;i++)\r\n        for(int j=0;j<m;j++) {scanf(\"%d\",&A[i][j].first);A[i][j].second=i;}\r\n    for(int i=0;i<m;i++){\r\n        for(int j=0;j<n;j++){\r\n            if(A[j][i].first!=-1) smallest[j].insert(MP(A[j][i].first,i));\r\n        }\r\n    }\r\n    for(int i=0;i<m;i++){\r\n        int sml=-1;\r\n        for(int j=0;j<n;j++)\r\n            if(smallest[j].size()){\r\n                sml=smallest[j].begin()->first;\r\n                if(A[j][i].first!=-1 && A[j][i].first!=sml)\r\n                    bad[i]++;\r\n            }\r\n        S.insert(MP(bad[i],i));\r\n    }\r\n    //for(int i=0;i<m;i++) printf(\"bad[%d]=%d\\n\",i,bad[i]);\r\n    bool can=true;\r\n    for(int i=0;i<m;i++){\r\n        //printf(\"i=%d\\n\",i);\r\n        int x=(S.begin())->second;\r\n        //printf(\"x=%d\\n\",x);\r\n        if(bad[x]==0){\r\n            ans[i]=x;\r\n            //printf(\"x=%d\\n\",x);\r\n            S.erase(S.begin());\r\n        }else{\r\n            can=false;\r\n            break;\r\n        }\r\n        for(int j=0;j<n;j++){\r\n            //printf(\"j=%d\\n\",j);\r\n            if(A[j][x].first!=-1){\r\n                smallest[j].erase(MP(A[j][x].first,x));\r\n                if(!smallest[j].empty()){\r\n                    int now=smallest[j].begin()->first;\r\n                    //printf(\"now=%d\\n\",now);\r\n                    if(now!=A[j][x].first)\r\n                        for(set<pair<int ,int > >::iterator ite=smallest[j].begin();ite!=smallest[j].end();ite++){\r\n                            //printf(\"ite->first=%d ite->second=%d\\n\",ite->first,ite->second);\r\n                            if(ite->first!=now) break;\r\n                            int id=ite->second;\r\n                            S.erase(MP(bad[id],id));\r\n                            bad[id]--;\r\n                            //printf(\"bad[%d]=%d\\n\",id,bad[id]);\r\n                            S.insert(MP(bad[id],id));\r\n                        }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(!can) printf(\"-1\\n\");\r\n    else{\r\n        for(int i=0;i<m;i++)\r\n            printf(\"%d \",ans[i]+1);\r\n    }\r\n    return 0;\r\n}\r\n"
}