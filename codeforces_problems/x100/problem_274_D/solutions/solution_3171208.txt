{
    "id": 3171208,
    "contestId": 274,
    "creationTimeSeconds": 1361520904,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "ILJ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 7884800,
    "source": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n#define SZ(v) ((int)(v).size())\n\nconst int kMaxN = 200010;\n\nvector<int> edge[kMaxN];\nvector<int> result;\nint mt[kMaxN];\nint du[kMaxN];\nint idx[kMaxN];\nint n, m;\nint base, cnt;\n\nbool cmp(const int i, const int j)\n{\n  return mt[base+i] < mt[base+j];\n}\n\nint bfs()\n{\n  static int que[kMaxN];\n  int st=0, ed=0;\n  for (int i = 0; i < cnt; ++i) {\n    if (du[i]) continue;\n    que[ed++] = i;\n  }\n\n  for (int x; st < ed; ++st) {\n    x = que[st];\n    if (x < m) result.push_back(x);\n    for (int j = 0; j < SZ(edge[x]); ++j) {\n      if ( --du[edge[x][j]] == 0 ) que[ed++] = edge[x][j];\n    }\n  }\n\n  return ed == cnt;\n}\n\nvoid solve()\n{\n  cnt = m;\n  for (int i = 0; i < n; ++i) {\n    for (int j = 0; j < m; ++j) idx[j] = j;\n    base = i*m;\n    sort(idx, idx+m, cmp);\n\n    int flag = 0;\n    for (int la, fr = 0; fr < m; fr = la) {\n      for (la = fr + 1; la < m && mt[base+idx[la]] == mt[base+idx[fr]]; ++la);\n      if (mt[base+idx[fr]] == -1) continue; else ++flag;\n      \n      for (int j = fr; j < la; ++j) {\n\tif (flag > 1) edge[cnt-1].push_back(idx[j]), ++du[idx[j]];\n\tif (la < m) edge[idx[j]].push_back(cnt), ++du[cnt];\n      }\n      if (la < m) ++cnt;\n    }\n  }\n\n  if (bfs()) {\n    for (int i = 0; i < m; ++i) printf(\"%d%c\", result[i]+1, i == m-1 ? '\\n' : ' ');\n  } else {\n    puts(\"-1\");\n  }\n}\n\nint main()\n{\n  scanf(\"%d%d\", &n, &m);\n  for (int i = 0; i < n; ++i)\n    for (int j = 0; j < m; ++j) scanf(\"%d\", mt+i*m+j);\n  \n  solve();\n}\n"
}