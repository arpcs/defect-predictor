{
    "id": 3202357,
    "contestId": 274,
    "creationTimeSeconds": 1361965052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "mlc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 125,
    "memoryConsumedBytes": 5529600,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <cstdio>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\n#define MAXN 110000\r\n#define forit(it, v) for(typeof((v).begin()) it = (v).begin(); it != (v).end(); ++it)\r\n\r\nint N, M, grade[MAXN];\r\nvector<int> graph[MAXN];\r\n\r\nvoid afisare(int v[MAXN]) {\r\n    for (int i = 1; i <= v[0]; ++i)\r\n        cout << v[i] << \" \";\r\n}\r\n\r\nbool sortare_topologica() {\r\n    int coada[MAXN], viz[MAXN];\r\n    fill(viz, viz + MAXN, 0);\r\n\r\n    for (int i = 1; i <= M; ++i)\r\n        if (grade[i] == 0) {\r\n            coada[++coada[0]] = i;\r\n            viz[i] = 1;\r\n        }\r\n\r\n    for (int i = 1; i <= M; ++i){\r\n        if (i > coada[0]) return 0;\r\n        forit (it, graph[coada[i]]) {\r\n            --grade[*it];\r\n            if (grade[*it] == 0) {\r\n                coada[++coada[0]] = *it;\r\n                if (viz[*it]) return 0;\r\n                viz[*it] = 1;\r\n            }\r\n        }\r\n    }\r\n    afisare(coada);\r\n    return 1;\r\n}\r\n\r\nvector< vector< pair<int, int> > > v;\r\n\r\nint main () {\r\n    #ifndef ONLINE_JUDGE\r\n    freopen(\"d.in\", \"r\", stdin);\r\n    freopen(\"d.out\", \"w\", stdout);\r\n    #endif // ONLINE_JUDGE\r\n\r\n    cin >> N >> M;\r\n\r\n    v.resize(N + 1);\r\n\r\n    for (int i = 1; i <= N; ++i)\r\n        for (int j = 1; j <= M; ++j) {\r\n            int val;\r\n            cin >> val;\r\n            v[i].push_back(make_pair(val, j));\r\n        }\r\n\r\n    for (int i = 1; i <= N; ++i) {\r\n        sort(v[i].begin(), v[i].end());\r\n        int poz = 1;\r\n        for (int j = 0; j < v[i].size() - 1; ++j) {\r\n            if (v[i][j].first == -1) continue;\r\n            poz = max (poz, j + 1);\r\n            int val1 = v[i][j].first;\r\n\r\n            while (val1 == v[i][poz].first && poz < v[i].size())\r\n                ++poz;\r\n\r\n            int val2 = v[i][poz].first;\r\n\r\n            if (poz < v[i].size()) {\r\n                while (val2 == v[i][poz].first) {\r\n                    graph[v[i][j].second].push_back(v[i][poz].second);\r\n                    cerr << v[i][j].second << \" \" << v[i][poz].second << \"\\n\";\r\n                    ++grade[v[i][poz].second];\r\n                    ++poz;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    if (!sortare_topologica())\r\n        cout << -1;\r\n\r\n    return 0;\r\n}\r\n"
}