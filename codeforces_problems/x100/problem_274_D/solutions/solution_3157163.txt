{
    "id": 3157163,
    "contestId": 274,
    "creationTimeSeconds": 1361377991,
    "relativeTimeSeconds": 3791,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "gogokefakefa"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 2,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "RUNTIME_ERROR",
    "testset": "PRETESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2252800,
    "source": "#include <cstdlib>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nvector < int > v[1 << 17];\r\nvector < int > res;\r\nint N, M;\r\nint FAIL = 0;\r\nint MX[1 << 17];\r\n\r\nvoid scan(){\r\n    scanf ( \"%d%d\", &N, &M );\r\n\r\n    for ( int i = 0; i < N; ++i )\r\n        for ( int j = 0; j < M; ++j ){\r\n            int x;\r\n            scanf ( \"%d\", &x );\r\n            v[i].push_back ( x );\r\n        }\r\n}\r\n\r\nbool f ( int t1, int t2 ){\r\n    int smaller = 0, bigger = 0;\r\n\r\n    for ( int i = 0; i < N; ++i ) if ( v[i][t1] != -1 && v[i][t2] != -1 )\r\n        if ( v[i][t1] > v[i][t2] )\r\n            bigger = 1;\r\n        else if ( v[i][t1] < v[i][t2] )\r\n            smaller = 1;\r\n\r\n    if ( bigger && smaller ){\r\n        printf ( \"-1\\n\" );\r\n        exit ( 0 );\r\n    }\r\n\r\n    return !bigger;\r\n}\r\n\r\nvoid solve(){\r\n    for ( int i = 0; i < M; ++i )\r\n        res.push_back( i );\r\n\r\n    sort ( res.begin(), res.end(), f );\r\n\r\n    for ( int i = 0; i < M; ++i ){\r\n        for ( int j = 0; j < N; ++j ) if ( v[j][ res[i] ] != -1 )\r\n            if ( v[j][ res[i] ] < MX[j] )\r\n                FAIL = 1;\r\n            else\r\n                MX[j] = v[j][ res[i] ];\r\n    }\r\n\r\n\r\n    if ( FAIL ){\r\n        printf ( \"-1\\n\" );\r\n        return;\r\n    }\r\n\r\n    for ( int i = 0; i < M; ++i )\r\n        printf ( \"%d \", res[i] + 1 );\r\n    printf ( \"\\n\" );\r\n}\r\n\r\nint main(){\r\n    scan();\r\n    solve();\r\n}\r\n"
}