{
    "id": 11279909,
    "contestId": 274,
    "creationTimeSeconds": 1432649903,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "Athee"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 122,
    "memoryConsumedBytes": 7680000,
    "source": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <cstdlib>\n#include <string>\n#include <queue>\n#include <vector>\n#include <functional>\nusing namespace std;\nstruct node\n{\n    int lie,val;\n    bool operator <(const node& x)const\n    {\n        return val>x.val;\n    }\n}tt;\npriority_queue <node> a[100008];\nvector <int> f;\nvector <int> p[100008];\nint cou1[100008],minn[100008],cou2[100008],ans[100008],ans0;\nint main()\n{\n    int n,m,i,j,tmp;\n    scanf(\"%d%d\",&n,&m);\n    for(i=1;i<=n;i++)\n    {\n        p[i].clear();\n        for(j=1;j<=m;j++)\n        {\n            scanf(\"%d\",&tmp);\n            p[i].push_back(tmp);\n            a[i].push((node){j,tmp});\n        }\n    }\n    memset(cou1,0,sizeof(cou1));\n    memset(cou2,0,sizeof(cou2));\n    ans0=0;\n    f.clear();\n    for(i=1;i<=n;i++)\n    {\n        while(!a[i].empty()&&(a[i].top()).val==-1)\n        {\n            tt=a[i].top();a[i].pop();\n            cou1[tt.lie]++;\n            if(cou1[tt.lie]==n)\n                f.push_back(tt.lie);\n        }\n    }\n    tmp=f.size();\n    for(i=0;i<tmp;i++)\n        ans[ans0++]=f[i];\n    f.clear();\n    while(ans0<m)\n    {\n        for(i=1;i<=n;i++)\n        {\n            if(!a[i].empty()&&cou2[i]==0)\n            {\n                minn[i]=(a[i].top()).val;\n                while(!a[i].empty()&&(a[i].top()).val==minn[i])\n                {\n                    tt=a[i].top();a[i].pop();\n                    cou1[tt.lie]++;\n                    cou2[i]++;\n                    if(cou1[tt.lie]==n)\n                        f.push_back(tt.lie);\n                }\n            }\n        }\n        tmp=f.size();\n        if(tmp==0)\n            break;\n        else\n        {\n            for(i=0;i<tmp;i++)\n            {\n                ans[ans0++]=f[i];\n                for(j=1;j<=n;j++)\n                    if(p[j][f[i]-1]==minn[j])\n                        cou2[j]--;\n            }\n            f.clear();\n        }\n    }\n    if(ans0==m)\n    {\n        for(i=0;i<m;i++)\n            printf(\"%d \",ans[i]);\n    }\n    else\n        printf(\"-1\");\n    return 0;\n}\n\n\t \t\t   \t      \t\t \t   \t\t \t"
}