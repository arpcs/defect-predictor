{
    "id": 3166215,
    "contestId": 274,
    "creationTimeSeconds": 1361436307,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "NateRiverxkh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 7475200,
    "source": "#include <cstdio>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <vector>\r\nusing namespace std;\r\n#define LL long long\r\n#define maxn 201010\r\n#define INF 1<<30\r\n\r\nstruct node{\r\n    int u,v,next;\r\n}edge[maxn];\r\nint head[maxn],add,tot,n,m;\r\nint d[maxn];\r\nvoid adj(int u,int v)\r\n{\r\n    edge[add].v=v; edge[add].next=head[u]; head[u]=add++;\r\n    d[v]++;\r\n}\r\nstruct Node{\r\n    int v,p;\r\n}a[maxn];\r\nint cmp(Node a,Node b)\r\n{\r\n    return a.v<b.v;\r\n}\r\nvoid init()\r\n{\r\n    int i,j,u,v,k,p,las;tot=m;\r\n    memset(head,-1,sizeof(head)); add=0;\r\n    memset(d,0,sizeof(d));\r\n    for(i=0;i<n;i++)\r\n    {\r\n        for(j=0;j<m;j++)\r\n            scanf(\"%d\",&a[j].v),a[j].p=j;\r\n        sort(a,a+m,cmp);\r\n        int st=0;\r\n        while(st<m&&a[st].v==-1) st++;\r\n        for(j=st,las=-1;j<m;)\r\n        {\r\n            k=j;\r\n            while(k<m&&a[k].v==a[j].v) k++;\r\n            if(las!=-1)\r\n                for(p=j;p<k;p++)\r\n                    adj(las,a[p].p);\r\n            for(p=j;p<k;p++)\r\n                adj(a[p].p,tot);\r\n            las=tot++;\r\n            j=k;\r\n        }\r\n    }\r\n}\r\nint q[maxn];\r\nvector<int>ans;\r\nvoid gao()\r\n{\r\n    int i,j,f=0,r=0,u,v;\r\n    for(i=0;i<tot;i++)\r\n        if(!d[i])\r\n            q[r++]=i;\r\n    ans.clear();\r\n    while(f<r)\r\n    {\r\n        int u=q[f++];\r\n        if(u<m) ans.push_back(u);\r\n        for(i=head[u];i!=-1;i=edge[i].next)\r\n        {\r\n            v=edge[i].v;\r\n            d[v]--;\r\n            if(!d[v]) q[r++]=v;\r\n        }\r\n    }\r\n    if(ans.size()<m)\r\n    {\r\n        puts(\"-1\");\r\n        return;\r\n    }\r\n    int sz=ans.size();\r\n    for(i=0;i<sz;i++)\r\n        printf(\"%d \",ans[i]+1);\r\n    puts(\"\");\r\n}\r\n\r\nint main()\r\n{\r\n    while(scanf(\"%d %d\",&n,&m)!=EOF)\r\n    {\r\n        init();\r\n        gao();\r\n    }\r\n}\r\n"
}