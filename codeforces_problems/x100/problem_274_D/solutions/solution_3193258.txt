{
    "id": 3193258,
    "contestId": 274,
    "creationTimeSeconds": 1361775609,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "TheOverlord"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 11161600,
    "source": "#include <queue>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <algorithm>\r\n#define N 300010\r\n#define PB push_back\r\n#define FOR(it, c) for(__typeof((c).begin())it=(c).begin();it!=(c).end();it++)\r\nusing namespace std;\r\n\r\nqueue<int> q;\r\nvector<int> G[N];\r\n\r\nint ind[N], per[N], pn;\r\nstruct node{ int v, i; }a[N];\r\nbool comp(node x, node y){ return x.v < y.v; }\r\n\r\nint main (){\r\n    int n, m, k = 0; scanf(\"%d%d\", &n, &m);\r\n    for(int i = 0; i < n; i++){\r\n        for(int j = 0; j < m; j++)\r\n            scanf(\"%d\", &a[j].v), a[j].i = j;\r\n        sort(a, a + m, comp);\r\n        for(int j = 0; j < m; j++) if(a[j].v != -1){\r\n            if(j == 0 || a[j].v != a[j-1].v) k++;\r\n            G[a[j].i].PB(m+k+1); G[m+k].PB(a[j].i);\r\n        }\r\n        k++;\r\n    }\r\n    for(int i = 0; i < m+k; i++) FOR(it, G[i]) ind[*it]++;\r\n    for(int i = 0; i < m+k; i++) if(ind[i] == 0) q.push(i);\r\n    while(!q.empty()){\r\n        int p = q.front(); q.pop();\r\n        if(p < m) per[pn++] = p;\r\n        FOR(it, G[p]) if(--ind[*it] == 0) q.push(*it);\r\n    }\r\n    if(pn < m) return puts(\"-1\"), 0;\r\n    for(int i = 0; i < m; i++) printf(\"%d \", per[i]+1);\r\n}"
}