{
    "id": 15201923,
    "contestId": 274,
    "creationTimeSeconds": 1452072439,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "jhorvat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 5222400,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <vector>\r\n\r\n#define TRACE(x) cout << #x << \" = \" << x << endl\r\n\r\nusing namespace std;\r\n\r\ntypedef pair<int, int> pii;\r\n\r\nconst int MAXN = 100010;\r\n\r\nint n, m;\r\nvector<vector<pii> > mat;\r\nbool bio[MAXN], pozvan[MAXN];\r\nvector<int> topoloski, sol;\r\nint deg[MAXN];\r\nvector<int> Graf[MAXN];\r\n\r\nvoid toposort(int cvor){\r\n     if(pozvan[cvor]){\r\n        printf(\"%d\\n\", -1);\r\n        exit(0);\r\n     }\r\n     \r\n     if(bio[cvor]) return;\r\n     bio[cvor] = true;\r\n     pozvan[cvor] = true;\r\n     \r\n     for(int i = 0; i < (int)Graf[cvor].size(); i++){\r\n         int kamo = Graf[cvor][i];\r\n         toposort(kamo);            \r\n     }\r\n     \r\n     topoloski.push_back(cvor);\r\n     pozvan[cvor] = false;     \r\n}\r\n\r\nint main(){\r\n    scanf(\"%d %d\", &n, &m);\r\n    \r\n    int dummy = m;\r\n    \r\n    for(int i = 0; i < n; i++){\r\n        vector<pii> tmp;\r\n        tmp.clear();\r\n        \r\n        for(int j = 0; j < m; j++){\r\n            int x;\r\n            scanf(\"%d\", &x);\r\n            tmp.push_back(pii(x, j));    \r\n        }\r\n        \r\n        sort(tmp.begin(), tmp.end());\r\n        mat.push_back(tmp);            \r\n    }\r\n    \r\n    for(int i = 0; i < n; i++){  \r\n        for(int j = m - 1; j >= 0; j--){\r\n            if(mat[i][j].first == -1) break;\r\n            \r\n            if(j < m - 1 && mat[i][j].first < mat[i][j + 1].first)\r\n                 dummy++;\r\n            \r\n            Graf[dummy].push_back(mat[i][j].second);\r\n            deg[mat[i][j].second]++;\r\n            Graf[mat[i][j].second].push_back(dummy + 1);\r\n            deg[dummy + 1]++;\r\n        }  \r\n        \r\n        dummy += 2;         \r\n    }\r\n    \r\n    for(int i = 0; i <= dummy; i++){\r\n        if(!bio[i] && deg[i] == 0)\r\n              toposort(i);         \r\n    }\r\n    \r\n    for(int i = 0; i < (int)topoloski.size(); i++){\r\n        if(topoloski[i] < m)\r\n              sol.push_back(topoloski[i] + 1);                      \r\n    }\r\n    \r\n    for(int i = 0; i < (int)sol.size(); i++)\r\n        printf(\"%d \", sol[i]);    \r\n    \r\n    return 0;\r\n}\r\n"
}