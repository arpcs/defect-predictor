{
    "id": 15194069,
    "contestId": 274,
    "creationTimeSeconds": 1452015421,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "mtomic"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 6451200,
    "source": "#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cassert>\n#include <cstdlib>\n#include <vector>\n\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n#define REP(i, n) FOR (i, 0, (n))\n\nusing namespace std;\n\nconst int MAXT = 100000;\n\nenum {WHITE, GRAY, BLACK};\n\nint n, m;\n\nint color[2*MAXT], in[2*MAXT];\nvector<int> e[2*MAXT];\nvector<int> top_sort;\n\nvoid fail(void) {\n  printf(\"-1\\n\");\n  exit(0);\n}\n\nvoid dfs(int u) {\n  color[u] = GRAY;\n  for (int v: e[u]) {\n    if (color[v] == GRAY) fail();\n    if (color[v] == WHITE) dfs(v);\n  }\n  color[u] = BLACK;\n  top_sort.push_back(u);\n}\n\nint main(void) {\n  scanf(\"%d%d\", &n, &m);\n\n  int dummy_pos = m;\n\n  REP (i, n) {\n    vector<pair<int, int>> val(m);\n    REP (j, m) {\n      scanf(\"%d\", &val[j].first);\n      val[j].second = j;\n    }\n    sort(val.begin(), val.end());\n\n    bool first = true;\n    FOR (j, 0, m) {\n      if (val[j].first == -1) continue;\n      if (j > 0 && val[j-1].first != -1 && val[j].first > val[j-1].first) {\n        first = false;\n        ++dummy_pos;\n      }\n      if (!first) {\n        ++in[dummy_pos-1];\n        e[val[j].second].push_back(dummy_pos-1);\n      }\n      e[dummy_pos].push_back(val[j].second);\n      ++in[val[j].second];\n    }\n    dummy_pos++;\n  }\n\n  REP (u, dummy_pos)\n    if (!in[u]) dfs(u);\n\n  for (int u: top_sort)\n    if (u < m) printf(\"%d \", 1+u);\n\n  printf(\"\\n\");\n\n  return 0;\n}\n"
}