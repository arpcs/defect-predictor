{
    "id": 3325391,
    "contestId": 274,
    "creationTimeSeconds": 1363432877,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "delta_4d"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 7475200,
    "source": "#include <vector>\r\n#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\n#define PB push_back\r\n#define F first\r\n#define S second\r\n#define NOTVISIT -1\r\n#define VISITING 1\r\n#define OK 0\r\n\r\nvector <pair<int, int> > a;\r\nvector <vector<int> > T;\r\nvector <int> step, mark;\r\nint level;\r\n\r\nbool dfs(int root) {\r\n    mark[root] = VISITING;  \r\n    for (int i=0; i<T[root].size(); ++i) {\r\n        int u = T[root][i];\r\n        if (mark[u] == VISITING) return false;\r\n        if (mark[u] == NOTVISIT && !dfs(u)) return false;\r\n    }\r\n    mark[root] = OK;\r\n    step[level++] = root;\r\n    return true;\r\n}\r\n\r\nint main() {\r\n    int n, m;\r\n\r\n    cin >> n >> m;\r\n    a.resize(m); T.resize((m+2)*(n+2));\r\n    int cc = m;\r\n    for (int i=0; i<n; ++i, ++cc) {\r\n        for (int j=0; j<m; ++j) cin >> a[j].F, a[j].S = j;\r\n        sort(a.begin(), a.end());\r\n        for (int j=0; j<m; ++cc) {\r\n            int v = a[j].F;\r\n            if (v == -1) { ++j; continue; }\r\n            for (; j<m&&a[j].F==v; ++j) T[cc].PB(a[j].S), T[a[j].S].PB(cc+1);       \r\n        }\r\n    }\r\n    step.resize(cc); mark.resize(cc, NOTVISIT);\r\n    for (int i=0; i<cc; ++i) if (mark[i] == NOTVISIT && !dfs(i)) { cout << -1 << endl; return 0; } \r\n    for (int i=cc-1; i>=0; --i) if (step[i] < m) cout << step[i] + 1 << ' '; cout << endl;\r\n\r\n    return 0;\r\n}\r\n"
}