{
    "id": 3165456,
    "contestId": 274,
    "creationTimeSeconds": 1361427719,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "dragon007"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 2355200,
    "source": "#include <cstdio>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <ctime>\r\n#include <algorithm>\r\n#include <iostream>\r\n#include <map>\r\n#include <set>\r\n#include <queue>\r\n#include <vector>\r\n#include <string>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef vector<int> VI;\r\ntypedef vector<double> VD;\r\ntypedef pair<int,int> PII;\r\n#define MP make_pair\r\n#define PB push_back\r\n#define A first\r\n#define B second\r\n#define eps 1e-8\r\n\r\nint n, m, d[100010], ans[100010], gs;\r\nvector<pair<int, int> > a;\r\nvector<int> edge[100010];\r\nbool vis[100010];\r\n\r\nvoid addedge(int i, int j) {\r\n    edge[i].PB(j);\r\n}\r\n\r\nvoid work(int t) {\r\n    vis[t] = true;\r\n    ans[gs ++ ] = t;\r\n    for (int i = 0; i < edge[t].size(); i ++ )\r\n        d[edge[t][i]] -- ;\r\n    for (int i = 0; i < edge[t].size(); i ++ )\r\n        if (d[edge[t][i]] == 0 && !vis[edge[t][i]]) work(edge[t][i]);\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d%d\", &n, &m);\r\n    memset(d, 0, sizeof(d));\r\n    for (int i = 0; i < n; i ++ ) {\r\n        a.clear();\r\n        for (int j = 1; j <= m; j ++ ) {\r\n            int x;\r\n            scanf(\"%d\", &x);\r\n            a.PB(MP(x, j));\r\n        }\r\n        sort(a.begin(), a.end());\r\n        int k = 1;\r\n        for (int j = 0; j < m; j ++ )\r\n            if (a[j].A == -1) continue;\r\n            else {\r\n                if (k < j) k = j;\r\n                while (k < m && a[j].A == a[k].A) k ++ ;\r\n                if (k < m) addedge(a[j].B, a[k].B);\r\n            }\r\n    }\r\n    for (int i = 1; i <= m; i ++ ) {\r\n        sort(edge[i].begin(), edge[i].end());\r\n        edge[i].resize(unique(edge[i].begin(), edge[i].end()) - edge[i].begin());\r\n    }\r\n    memset(d, 0, sizeof(d));\r\n    for (int i = 1; i <= m; i ++ )\r\n        for (int j = 0; j < edge[i].size(); j ++ )\r\n            d[edge[i][j]] ++ ;\r\n    memset(vis, 0, sizeof(vis));\r\n    gs = 0;\r\n    for (int i = 1; i <= m; i ++ )\r\n        if (vis[i]) continue;\r\n        else if (d[i] == 0) work(i);\r\n\r\n//    for (int i = 1; i <= m; i ++ ) {\r\n//        printf(\"%d: \", i);\r\n//        for (int j = 0; j < edge[i].size(); j ++ )\r\n//            printf(\"%d \", edge[i][j]);\r\n//        printf(\"\\n\");\r\n//    }\r\n\r\n    if (gs != m) printf(\"-1\\n\");\r\n    else {\r\n        for (int i = 0; i < m; i ++ ) {\r\n            printf(\"%d\", ans[i]);\r\n            if (i == m) printf(\"\\n\");\r\n            else printf(\" \");\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}