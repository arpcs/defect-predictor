{
    "id": 3161025,
    "contestId": 274,
    "creationTimeSeconds": 1361380942,
    "relativeTimeSeconds": 6742,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "gh_ost"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 9,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "Java 7",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 0,
    "source": "\r\n// @author Sanzhar\r\nimport java.io.*;\r\nimport java.util.*;\r\nimport java.awt.Point;\r\n\r\npublic class Template {\r\n\r\n    BufferedReader in;\r\n    PrintWriter out;\r\n    StringTokenizer st;\r\n\r\n    String next() {\r\n        while (st == null || !st.hasMoreTokens()) {\r\n            try {\r\n                st = new StringTokenizer(in.readLine());\r\n            } catch (Exception e) {\r\n            }\r\n        }\r\n        return st.nextToken();\r\n    }\r\n\r\n    int nextInt() {\r\n        return Integer.parseInt(next());\r\n    }\r\n\r\n    long nextLong() {\r\n        return Long.parseLong(next());\r\n    }\r\n\r\n    double nextDouble() {\r\n        return Double.parseDouble(next());\r\n    }\r\n\r\n    public void run() throws Exception {\r\n        //in = new BufferedReader(new FileReader(\"input.txt\"));\r\n        //out = new PrintWriter(new FileWriter(\"output.txt\"));\r\n        in = new BufferedReader(new InputStreamReader(System.in));\r\n        out = new PrintWriter(System.out);\r\n        solve();\r\n        out.flush();\r\n        out.close();\r\n        in.close();\r\n    }\r\n    int n;\r\n    boolean ok = true;\r\n\r\n    public void solve() throws Exception {\r\n        n = nextInt();\r\n        int m = nextInt();\r\n        PriorityQueue<int[]> a = new PriorityQueue<int[]>(11,\r\n                new Comparator<int[]>() {\r\n\r\n                    @Override\r\n                    public int compare(int[] x1, int[] x2) {\r\n                        int x = 0;\r\n                        for (int i = 0; i < n; i++) {\r\n                            if (x1[i] == -1 || x2[i] == -1 || x1[i] == x2[i]) {\r\n                                continue;\r\n                            }\r\n                            if (x1[i] > x2[i]) {\r\n                                if (x == -1) {\r\n                                    ok = false;\r\n                                    return 0;\r\n                                }\r\n                                x = 1;\r\n                            } else {\r\n                                if (x == 1) {\r\n                                    ok = false;\r\n                                    return 0;\r\n                                }\r\n                                x = -1;\r\n                            }\r\n                        }\r\n                        return x;\r\n                    }\r\n                });\r\n        int[][] t = new int[n][m];\r\n        for (int i = 0; i < n; i++) {\r\n            for (int j = 0; j < m; j++) {\r\n                t[i][j] = nextInt();\r\n            }\r\n        }\r\n        for (int j = 0; j < m; j++) {\r\n            int[] x = new int[n + 1];\r\n            for (int i = 0; i < n; i++) {\r\n                x[i] = t[i][j];\r\n            }\r\n            x[n] = j + 1;\r\n            a.add(x);\r\n            if (!ok) {\r\n                out.println(-1);\r\n                return;\r\n            }\r\n        }\r\n        while (!a.isEmpty()) {\r\n            int[] x = a.poll();\r\n            out.print(x[n] + \" \");\r\n        }\r\n        out.println();\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        new Template().run();\r\n    }\r\n}\r\n"
}