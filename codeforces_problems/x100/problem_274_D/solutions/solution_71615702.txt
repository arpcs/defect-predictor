{
    "id": 71615702,
    "contestId": 274,
    "creationTimeSeconds": 1582379949,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "Clix"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 10956800,
    "source": "#pragma GCC optimize(\"O2\")\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long                   ll;\r\ntypedef long double                 ld;\r\ntypedef pair<int,int>               pii;\r\ntypedef pair<ll,ll>                 pll;\r\n#define all(x)                      (x).begin(),(x).end()\r\n#define F                           first\r\n#define S                           second\r\n#define Mp                          make_pair\r\n#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n#define file_io                     freopen(\"in.txt\" , \"r+\" , stdin) ; freopen(\"out.txt\" , \"w+\" , stdout);\r\n#define endl                        \"\\n\"\r\n\r\n//void add(int I, int value){seg[I += MAXN] = value;for (I >>= 1; I; I >>= 1){seg[I] = __gcd(seg[I << 1], seg[I << 1 | 1]);}}\r\n\r\n//int query(int l, int r){int ans = seg[l + MAXN];for (l += MAXN, r += MAXN + 1; l < r; l >>= 1, r >>= 1){if(l & 1) ans = __gcd(ans, seg[l ++]);if(r & 1) ans = __gcd(ans, seg[-- r]);}return ans;}\r\n\r\nconst int MAXN = 3e5 + 10;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll MOD2 = 998244353;\r\nconst ll INF = 8e18;\r\nconst int LOG = 20;\r\n\r\nll pw(ll a , ll b, ll mod)  { return (!b ? 1 : (b & 1 ? (a * pw(a * a % mod, b / 2, mod)) % mod : pw(a * a % mod, b / 2, mod))); }\r\n\r\nvector < int > M[MAXN], G[MAXN], top;\r\n\r\nint l[MAXN], r[MAXN], mark[MAXN], is_OK = 1, res = 1;\r\n\r\nvoid ADD(int v, int u)\r\n{\r\n    //cout << v << \" \" << u << endl;\r\n    res++;\r\n    if(u == v)return;\r\n    G[v].push_back(u);\r\n}\r\n\r\nvoid DFS(int v)\r\n{\r\n    //cout << v << endl;\r\n    mark[v] = 1;\r\n    for(auto u : G[v])\r\n    {\r\n        if(!mark[u])\r\n        {\r\n            DFS(u);\r\n        }\r\n        if(mark[u] == 1 && u <= 1e5)\r\n        {\r\n            is_OK = 0;\r\n        }\r\n    }\r\n    mark[v] = 2;\r\n    top.push_back(v);\r\n}\r\n\r\nint main(){\r\n    fast_io;\r\n    //cout << fixed << setprecision(15);\r\n    //scanf(\"%d %d %f %lld %s %c\", &x);\r\n    //printf(\"%d %d %f %lld %s %c\", x);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        M[i].push_back(-1);\r\n        for(int j = 1; j <= m; j++)\r\n        {\r\n            int a; cin >> a;\r\n            M[i].push_back(a);\r\n        }\r\n    }\r\n    int cnt = 1e5 + 1;\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        vector < pii > row;\r\n        vector < int > L, R;\r\n        for(int j = 1; j <= m; j++)\r\n        {\r\n\r\n            if(M[i][j] != -1) row.push_back(Mp(M[i][j], j));\r\n        }\r\n        sort(all(row));\r\n        l[0] = ++cnt;\r\n        L.push_back(cnt);\r\n        for(int i = 1; i < (int)row.size(); i++)\r\n        {\r\n            if(row[i - 1].F == row[i].F)\r\n            {\r\n                l[i] = l[i - 1];\r\n            }\r\n            else\r\n            {\r\n                l[i] = ++cnt;\r\n                L.push_back(cnt);\r\n            }\r\n        }\r\n        r[(int)row.size() - 1] = ++cnt;\r\n        R.push_back(cnt);\r\n        for(int i = (int)row.size() - 2; ~i; i--)\r\n        {\r\n            if(row[i].F == row[i + 1].F)\r\n            {\r\n                r[i] = r[i + 1];\r\n            }\r\n            else\r\n            {\r\n                r[i] = ++cnt;\r\n                R.push_back(cnt);\r\n            }\r\n        }\r\n        reverse(all(R));\r\n        for(int i = 0; i < (int)row.size(); i++)\r\n        {\r\n            //cout << row[i].F << \" \" << row[i].S << \" \" << l[i] << \" \" << r[i] << endl;\r\n            int v = row[i].S;\r\n            ADD(l[i], v);\r\n            ADD(v, r[i]);\r\n        }\r\n        for(int i = 0; i < (int)L.size(); i++)\r\n        {\r\n            ADD(L[i], R[i]);\r\n            if(i - 1 < 0)continue;\r\n            ADD(R[i - 1], L[i]);\r\n        }\r\n        //cout << endl;\r\n    }\r\n    /*\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        cout << \"i: \" << i << endl;\r\n        for(auto u : G[i])\r\n        {\r\n            cout << u << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n    for(int i = 1e5 + 1; i <= cnt; i++)\r\n    {\r\n        cout << \"i: \" << i << endl;\r\n        for(auto u : G[i])\r\n        {\r\n            cout << u << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n    */\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        if(!mark[i])\r\n        {\r\n            DFS(i);\r\n        }\r\n    }\r\n    if(!is_OK)\r\n    {\r\n        return cout << -1, 0;\r\n    }\r\n    reverse(all(top));\r\n    for(auto x : top)\r\n    {\r\n        if(x > 1e5)continue;\r\n        cout << x << \" \";\r\n    }\r\n    return 0;\r\n}\r\n\r\n"
}