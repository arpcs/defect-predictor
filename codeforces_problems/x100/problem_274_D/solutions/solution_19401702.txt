{
    "id": 19401702,
    "contestId": 274,
    "creationTimeSeconds": 1469443499,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "dozbear"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 5017600,
    "source": "#include <string.h>\r\n#include <algorithm>\r\n#include <bitset>\r\n#include <cassert>\r\n#include <cmath>\r\n#include <complex>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <ctime>\r\n#include <deque>\r\n#include <fstream>\r\n#include <functional>\r\n#include <iomanip>\r\n#include <iostream>\r\n#include <map>\r\n#include <queue>\r\n#include <set>\r\n#include <sstream>\r\n#include <stack>\r\n#include <string>\r\n// #include <unordered_map>\r\n// #include <unordered_set>\r\n#include <utility>\r\n#include <vector>\r\n\r\n#define pb push_back\r\n#define pf push_front\r\n#define mp make_pair\r\n\r\nusing namespace std;\r\ntypedef long long LL;\r\ntypedef unsigned long long ULL;\r\ntypedef pair<int, int> pii;\r\ntypedef pair<LL, LL> pll;\r\n\r\nconst int INF = (1 << 30) - 1;\r\nconst LL LINF = (1LL << 61) - 1;\r\nconst double EPS = 1e-10;\r\nconst int N = 1e5 + 1000;\r\n\r\nint n, m;\r\nvector<int> field[N], ls, val[N];\r\n\r\nvector<int> G[N];\r\nint in[N], rk[N];\r\n\r\nint tpsort() {\r\n  int cnt = 0;\r\n  memset(rk, -1, sizeof rk);\r\n  for (int i = 0; i < m; i++) {\r\n    for (int j = 0; j < G[i].size(); j++) in[G[i][j]]++;\r\n  }\r\n\r\n  queue<int> que;\r\n\r\n  for (int i = 0; i < m; i++) {\r\n    if (!in[i]) que.push(i);\r\n  }\r\n\r\n  while (!que.empty()) {\r\n    int p = que.front();\r\n    que.pop();\r\n\r\n    rk[p] = ++cnt;\r\n\r\n    for (int i = 0; i < G[p].size(); i++) {\r\n      in[G[p][i]]--;\r\n      if (in[G[p][i]] == 0) que.push(G[p][i]);\r\n    }\r\n  }\r\n\r\n  return cnt;\r\n}\r\n\r\nint main() {\r\n  // printf(\"Hello, world!\\n\");\r\n\r\n  scanf(\"%d %d\", &n, &m);\r\n\r\n  if (n == 1) {\r\n    static vector<pii> tmp;\r\n\r\n    for (int i = 0; i < m; i++) {\r\n      int x;\r\n      cin >> x;\r\n\r\n      tmp.pb(mp(x, i));\r\n    }\r\n\r\n    sort(tmp.begin(), tmp.end());\r\n\r\n    for (int i = 0; i < m; i++) {\r\n      cout << tmp[i].second + 1 << ' ';\r\n    }\r\n    cout << endl;\r\n\r\n    return 0;\r\n  }\r\n\r\n  for (int i = 0; i < n; i++) {\r\n    field[i].resize(m);\r\n    for (int j = 0; j < m; j++) {\r\n      scanf(\"%d\", &field[i][j]);\r\n      if (field[i][j] != -1) ls.pb(field[i][j]);\r\n    }\r\n  }\r\n\r\n  for (int i = 0; i < n; i++) {\r\n    for (int j = 0; j < m; j++) {\r\n      if (field[i][j] != -1) {\r\n        field[i][j] =\r\n            (int)(lower_bound(ls.begin(), ls.end(), field[i][j]) - ls.begin());\r\n      }\r\n    }\r\n  }\r\n\r\n  for (int i = 0; i < n; i++) {\r\n    static vector<pii> all;\r\n    all.clear();\r\n\r\n    static vector<int> effect;\r\n    effect.clear();\r\n\r\n    for (int j = 0; j < m; j++) {\r\n      if (field[i][j] != -1) {\r\n        val[field[i][j]].pb(j);\r\n        effect.pb(field[i][j]);\r\n      }\r\n    }\r\n\r\n    sort(effect.begin(), effect.end());\r\n    effect.erase(unique(effect.begin(), effect.end()), effect.end());\r\n\r\n    for (int i = 0; i < effect.size() - 1; i++) {\r\n      for (auto u : val[effect[i]]) {\r\n        for (auto v : val[effect[i + 1]]) {\r\n          G[u].pb(v);\r\n        }\r\n      }\r\n      val[effect[i]].clear();\r\n    }\r\n    val[effect[effect.size() - 1]].clear();\r\n  }\r\n\r\n  for (int i = 0; i < m; i++) {\r\n    sort(G[i].begin(), G[i].end());\r\n    G[i].erase(unique(G[i].begin(), G[i].end()), G[i].end());\r\n  }\r\n\r\n  if (tpsort() != m) {\r\n    cout << -1 << endl;\r\n    return 0;\r\n  };\r\n\r\n  static vector<pii> all;\r\n  all.clear();\r\n  for (int i = 0; i < m; i++) {\r\n    all.pb(mp(rk[i], i));\r\n  }\r\n\r\n  sort(all.begin(), all.end());\r\n\r\n  for (int i = 0; i < m; i++) {\r\n    cout << all[i].second + 1 << ' ';\r\n  }\r\n  cout << endl;\r\n  return 0;\r\n}\r\n"
}