{
    "id": 3160876,
    "contestId": 274,
    "creationTimeSeconds": 1361380856,
    "relativeTimeSeconds": 6656,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "Timur_Keks"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 19,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "Delphi",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 8806400,
    "source": "program Shablon;\r\n\r\n{$APPTYPE CONSOLE}\r\n\r\nuses\r\n  SysUtils,\r\n  Math;\r\n\r\ntype\r\n  point = record\r\n    x, n : Integer;\r\n  end;\r\n  Tarray = array of point;\r\n  Tarray2 = array of boolean;\r\n\r\nvar\r\n  b: array[1..111111] of Tarray2;\r\n  a: array[1..111111] of Tarray;\r\n  i, j, n, m, kol, t : Integer;\r\n  c, uk, kk, ans : array[1..111111] of integer;\r\n  tree : array[1..222222] of integer;\r\n\r\nprocedure swap(var a, b : point);\r\nvar\r\n  c : point;\r\nbegin\r\n  c := a;\r\n  a := b;\r\n  b := c;\r\nend;\r\n\r\nprocedure sort(var a : Tarray; const l, r: longint);\r\nvar i, j, x: longint;\r\nbegin\r\n  if (l >= r) then exit;\r\n\r\n  i := l;\r\n  j := r;\r\n  x := a[l + random(r - l + 1)].x;\r\n\r\n  repeat\r\n      while a[i].x < x do\r\n        inc(i);\r\n      while a[j].x > x do\r\n        dec(j);\r\n      if i <= j then begin\r\n        swap(a[i], a[j]);\r\n        inc(i);\r\n        dec(j);\r\n      end;\r\n  until i > j;\r\n  sort(a, i, r);\r\n  sort(a, l, j);\r\nend;\r\n\r\nprocedure add(t : integer);\r\nbegin\r\n  t := t + m - 1;\r\n  while t > 1 do begin\r\n    t := t shr 1;\r\n    if c[tree[t * 2]] > c[tree[t * 2 + 1]] then\r\n      tree[t] := tree[t * 2] else\r\n      tree[t] := tree[t * 2 + 1];\r\n  end;\r\nend;\r\n\r\nprocedure update(k : Integer);\r\nvar\r\n  l : Integer;\r\nbegin\r\n  l := uk[k];\r\n  while (uk[k] <= m) and (a[k][uk[k]].x = a[k][l].x) do begin\r\n    inc(c[a[k][uk[k]].n]);\r\n    add(a[k][uk[k]].n);\r\n    if a[k][l].x <> -1 then\r\n      inc(kk[k]);\r\n    inc(uk[k]);\r\n  end;\r\nend;\r\n\r\nbegin\r\n  {$IFNDEF ONLINE_JUDGE}\r\n  reset(input, 'input.txt');\r\n  rewrite(output, 'output.txt');\r\n  {$ENDIF}\r\n  read(n, m);\r\n  for i := 2 * m - 1 downto m do begin\r\n    tree[i] := i - m + 1\r\n  end;\r\n  for i := m - 1 downto 1 do begin\r\n    tree[i] := tree[2 * i];\r\n  end;\r\n\r\n  for i := 1 to n do begin\r\n    SetLength(a[i], m + 2);\r\n    SetLength(b[i], m + 2);\r\n    for j := 1 to m do begin\r\n      read(a[i][j].x);\r\n      a[i][j].n := j;\r\n      if a[i][j].x = -1 then\r\n        b[i][j] := false else\r\n        b[i][j] := true;\r\n    end;\r\n    sort(a[i], 1, m);\r\n    uk[i] := 1;\r\n    if a[i][1].x = -1 then begin\r\n      update(i);\r\n    end;\r\n    update(i);\r\n  end;\r\n\r\n  kol := 0;\r\n  while kol < m do begin\r\n    t := tree[1];\r\n    if c[t] <> n then begin\r\n      write(-1);\r\n      halt;\r\n    end;\r\n    c[t] := 0;\r\n    add(t);\r\n    inc(kol);\r\n    ans[kol] := t;\r\n    for i := 1 to n do begin\r\n      if b[i][t] then begin\r\n        dec(kk[i]);\r\n      end;\r\n      if (kk[i] = 0) and (uk[i] <= m) then\r\n        update(i);\r\n    end;\r\n  end;\r\n  for i := 1 to m do\r\n    write(ans[i], ' ');\r\n\r\nend.\r\n"
}