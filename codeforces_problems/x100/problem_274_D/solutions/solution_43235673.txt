{
    "id": 43235673,
    "contestId": 274,
    "creationTimeSeconds": 1537603234,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "Randoming"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 6144000,
    "source": "#include <bits/stdc++.h>\r\n#define MAXN 100003\r\n#define endl '\\n'\r\nusing namespace std;\r\nvector <int> adj[2 * MAXN];\r\nint n, m;\r\nint in[2 * MAXN];\r\nbool used[MAXN];\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cin >> n >> m;\r\n    int extra = m;\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        vector <pair <int, int> > row;\r\n        for (int j = 1; j <= m; j++)\r\n        {\r\n            int val;\r\n            cin >> val;\r\n                if (val != -1)\r\n                    row.push_back(make_pair(val, j));\r\n        }\r\n        sort (row.begin(), row.end());\r\n        for (int i = 1; i < row.size(); i++)\r\n        {\r\n            if (row[i].first != row[i-1].first)\r\n                {\r\n                    extra++;\r\n                    int j = i;\r\n                    while (j < row.size() && row[j].first == row[i].first)\r\n                        {\r\n                            adj[extra].push_back(row[j].second);\r\n                            in[row[j].second]++;\r\n                            j++;\r\n                        }\r\n                    j = i-1;\r\n                    while (j >= 0 && row[j].first == row[i-1].first)\r\n                    {\r\n                        adj[row[j].second].push_back(extra);\r\n                        in[extra]++;\r\n                        j--;\r\n                    }\r\n                }\r\n        }\r\n    }\r\n    queue <int> q;\r\n    vector <int> ans;\r\n    for (int i = 1; i <= m; i++)\r\n        if (!in[i])\r\n        {\r\n            q.push(i);\r\n            used[i] = true;\r\n        }\r\n    while (!q.empty())\r\n    {\r\n        int curr = q.front();\r\n        if (curr <= m)\r\n            ans.push_back(curr);\r\n        q.pop();\r\n        for (int i: adj[curr])\r\n        {\r\n            in[i]--;\r\n            if (!in[i] && !used[i])\r\n            {\r\n                used[i] = true;\r\n                q.push(i);\r\n            }\r\n        }\r\n    }\r\n    if (ans.size() != m)\r\n        cout << -1 << endl;\r\n    else\r\n    {\r\n        for (int i: ans)\r\n        cout << i << \" \";\r\n    cout << endl;\r\n    }\r\n}\r\n"
}