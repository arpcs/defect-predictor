{
    "id": 49695091,
    "contestId": 274,
    "creationTimeSeconds": 1549804910,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "abdo_yasser"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define fill(x,y) memset(x,y,sizeof(x))\r\n#define fi first\r\n#define se second\r\n#define sz(x) ((int) (x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#define sqr(x) ((x) * (x))\r\n#define sqrt(x) sqrt(abs(x))\r\n#define mp make_pair\r\n#define pb push_back\r\n#define read(x) scanf(\"%d\",&x)\r\n#define readd(x) scanf(\"%lf\",&x)\r\n#define read2(x,y) scanf(\"%d%d\",&x,&y)\r\n#define read3(x,y,z) scanf (\"%d%d%d\",&x,&y,&z)\r\n\r\n\r\ntypedef long long ll;\r\ntypedef string s;\r\ntypedef pair<int,int> pii;\r\ntypedef pair<int,string> pis;\r\ntypedef pair<string,int> psi;\r\ntypedef pair<string,string> pss;\r\ntypedef vector<int> vi;\r\ntypedef vector<vi> vvi;\r\ntypedef vector<pii> vpii;\r\ntypedef vector<vector<ll> > matrix;\r\n\r\nconst ll oo = 1e6;\r\n\r\nconst double EPS = (1e-7);\r\nint dcmp(double x, double y) {  return fabs(x-y) <= EPS ? 0 : x < y ? -1 : 1; }\r\n\r\nvoid intimain(){\r\n\tios_base::sync_with_stdio(0);\r\n\tfreopen(\"in.txt\",\"r\",stdin);\r\n\tfreopen(\"out.txt\",\"w\",stdout);\r\n}\r\n\r\nbool vis[oo] ;\r\n\r\n\r\nvi sorted_nodes ;\r\nvvi adj_lis ;\r\nset<int> cycle_detect ;\r\n\r\nbool has_cycle = false;\r\n\r\n\r\nvoid topo_sort(int node) {\r\n    cycle_detect.insert(node) ;\r\n\r\n    vis[node] = true ;\r\n\r\n    for (int child : adj_lis[node]) {\r\n        if(!vis[child])\r\n            topo_sort(child) ;\r\n        else if(cycle_detect.count(child) == 1)\r\n            has_cycle = true ;\r\n    }\r\n\r\n    cycle_detect.erase(node) ;\r\n    sorted_nodes.pb(node) ;\r\n}\r\n\r\n/*\r\n3 3\r\n1 -1 -1\r\n1 2 1\r\n2 -1 1\r\n*/\r\n\r\nvoid connect(pii i , pii j){\r\n    adj_lis[i.se].pb(j.se) ;\r\n}\r\n\r\nint main(){\r\n    int n,m ;\r\n    read2(n,m) ;\r\n\r\n    for(int j = 0 ; j < m ; j++)\r\n        adj_lis.push_back(vi()) ;\r\n\r\n    for(int i = 0 ; i < n ; i++){\r\n        vpii row,temp ;\r\n        pii past = {-1,-1} ;\r\n        bool rep ;\r\n\r\n        for(int j = 0 ; j < m ; j++){\r\n            int num ;\r\n            read(num) ;\r\n            row.pb({num,j}) ;\r\n        }\r\n        sort(all(row)) ;\r\n        for(int j = 0 ; j < m-1 ; j++){\r\n            if(row[j].fi != -1){\r\n                if(row[j].fi != row[j+1].fi){\r\n                    connect(row[j], row[j+1]) ;\r\n                    if(rep && past != mp(-1,-1))\r\n                        connect(past,row[j]);\r\n                    for(pii k : temp){\r\n                        connect(k, row[j+1]) ;\r\n                        if(rep && past != mp(-1,-1))\r\n                            connect(past,k);\r\n                    }\r\n                    temp.clear() ;\r\n                    past = row[j] ;\r\n                    rep = false ;\r\n                }\r\n                else if(row[j].fi == row[j+1].fi){\r\n                    temp.pb(row[j]) ;\r\n                    rep = true ;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(int i = 0 ; i < m ; i++){\r\n        cycle_detect.clear() ;\r\n        if(!vis[i])\r\n            topo_sort(i) ;\r\n    }\r\n\r\n    if(has_cycle){\r\n        cout << -1 ;\r\n    }else{\r\n        while(!sorted_nodes.empty()){\r\n            cout << sorted_nodes.back()+ 1 << \" \";\r\n            sorted_nodes.pop_back() ;\r\n        }\r\n    }\r\n}\r\n\r\n"
}