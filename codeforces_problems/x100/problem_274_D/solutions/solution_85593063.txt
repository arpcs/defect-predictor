{
    "id": 85593063,
    "contestId": 274,
    "creationTimeSeconds": 1593582458,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 16179200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define mk make_pair\ntypedef pair<int,int> pii;\ntypedef vector<int> vv;\ntypedef vector<vv> matrix;\ntypedef vector<pii> vepi;\nconst int inf=(int)2e9;\nconst int N=300005;\n\nmatrix a;\nvepi b[N];\nint first[N],nxt[N*2],point[N*2],in[N],e=0;\nvoid add_edge(int x,int y)\n{\n\tin[y]++;\n\tpoint[e]=y;\n\tnxt[e]=first[x];\n\tfirst[x]=e++;\n}\n\nint n,m;\n\nint main()\n{\n\tmemset(first,-1,sizeof(first));\n\tmemset(nxt,-1,sizeof(nxt));\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=0;i<n;i++)\n\t{\n\t\tvv v;\n\t\tfor(int j=0;j<m;j++) \n\t\t{\n\t\t\tint x; scanf(\"%d\",&x); \n\t\t\tif(x==-1) x=inf;\n\t\t\tv.push_back(x);\n\t\t\tb[i].push_back(mk(x,j));\n\t\t}\n\t\ta.push_back(v);\n\t}\n\tint now=0;\n\tfor(int i=0;i<n;i++) \n\t{\n\t\tsort(b[i].begin(),b[i].end());\n\t\t//if(i==1) for(int j=0;j<m;j++) printf(\"%d\\n\",b[i][j].first);\n\t\tfor(int j=0;j<m;j++)\n\t\t{\n\t\t\tif(b[i][j].first==inf) continue;\n\t\t\tif(b[i][j-1].first!=b[i][j].first) ++now;\n\t\t\t//cout<<i<<\" \"<<b[i][j-1].second<<\" \"<<b[i][j].second<<endl;\n\t\t\tadd_edge(b[i][j].second,m+now);\n\t\t\tadd_edge(m+now-1,b[i][j].second);\n\t\t}\n\t\t++now;//kaikongdian\n\t}\n\tqueue<int> q;\n\tvector<int> ans;\n\tfor(int i=0;i<m+now;i++) if(!in[i]) q.push(i);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front(); q.pop();\n\t\tif(u<m) ans.push_back(u+1);\n\t\tfor(int i=first[u];i!=-1;i=nxt[i])\n\t\t{\n\t\t\tint to=point[i];\n\t\t\tin[to]--;\n\t\t\tif(!in[to]) q.push(to);\n\t\t}\n\t}\n\tint bl=0;\n\tfor(int i=0;i<m+now;i++) bl|=in[i];\n\tif(bl) puts(\"-1\");\n\telse for(int i=0;i<(int)ans.size();i++) printf(\"%d \",ans[i]);\n\treturn 0;\n}\n \t\t\t\t      \t    \t \t\t \t  \t\t\t \t"
}