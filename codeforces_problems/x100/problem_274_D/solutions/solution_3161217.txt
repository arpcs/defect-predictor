{
    "id": 3161217,
    "contestId": 274,
    "creationTimeSeconds": 1361381080,
    "relativeTimeSeconds": 6880,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "bloops"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 11,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1228800,
    "source": "#include <iostream>\n#include <vector>\n#include <sstream>\n#include <algorithm>\n#include <string>\n#include <set>\n#include <map>\n#include <cstring>\nusing namespace std;\n\n#define FOR(i,a,n) for(int i = (int)a; i < (int)n; i++)\n#define REP(i,n) FOR(i,0,n)\n#define FORE(it,c) for(__typeof(c.begin()) it = c.begin(); it != c.end(); it++)\n#define ALL(c) c.begin(), c.end()\n#define CLEAR(c,v) memset(c,v,sizeof(c))\n\ntypedef long long int lli;\ntypedef pair<int,int> ii;\n\nconst int N = 100010;\nvector<int> columns[N];\n\nint currow = -1;\nbool lesscol(const vector<int>& C, const vector<int>& D) {\n    if(C[currow] != -1 and D[currow] != -1 and C[currow] != D[currow])\n        return C[currow] < D[currow];\n    return false;\n}\n\nbool equal(const vector<int>& C, const vector<int>& D) {\n    return !lesscol(C,D) and !lesscol(D, C);\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n\n    int nrows, ncols;\n    cin >> nrows >> ncols;\n    int a;\n    REP(i, nrows) REP(j, ncols) {\n        cin >> a;\n        columns[j].push_back(a);\n    }\n    REP(i, ncols) columns[i].push_back(i + 1);\n\n    currow = 0;\n    sort(columns, columns + ncols, lesscol);\n    FOR(row, 1, nrows) {\n        int prev = row - 1;\n        for(int i = 0; i < nrows; ){\n            int endi = i + 1;\n            currow = prev;\n            while(endi < nrows and equal(columns[i], columns[endi]))\n                endi++;\n            currow = row;\n            sort(columns + i, columns + endi, lesscol);\n            i = endi;\n        }\n    }\n\n    bool ok = 1;\n    REP(i, ncols - 1) {\n        REP(j, nrows) {\n            if(columns[i + 1][j] != -1 and columns[i][j] != -1 and columns[i][j] > columns[i + 1][j])\n                ok = 0;\n        }\n    }\n\n    if(!ok) cout << \"-1\\n\";\n    else {\n        REP(i, ncols) cout << columns[i].back() << \" \";\n        cout << \"\\n\";\n    }\n    return 0;\n}\n\n"
}