{
    "id": 52254288,
    "contestId": 274,
    "creationTimeSeconds": 1554264561,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "luogu_bot3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <cstdio>\r\n#include <cstring>\r\nusing namespace std;\r\n\r\n#define fir first\r\n#define sec second\r\n\r\ntypedef pair <int, int> pii;\r\nconst int maxn = 1e5 + 10;\r\nint n, m, now, cnt, a[maxn], vis[maxn], head[maxn], nxt[maxn], to[maxn];\r\n\r\nvoid addline(int u, int v) {\r\n    nxt[++cnt] = head[u];\r\n    head[u] = cnt;\r\n    to[cnt] = v;\r\n}\r\n\r\nbool dfs(int u) {\r\n    if (vis[u]) {\r\n        return vis[u] > 1;\r\n    }\r\n    vis[u] = 1;\r\n    for (int i = head[u]; i; i = nxt[i]) {\r\n        if (!dfs(to[i])) {\r\n            return 0;\r\n        }\r\n    }\r\n    a[now--] = u;\r\n    vis[u] = 2;\r\n    return 1;\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d %d\", &n, &m);\r\n    now = m;\r\n    for (int i = 1; i <= n; i++) {\r\n        vector <pii> s;\r\n        for (int j = 1; j <= m; j++) {\r\n            int x;\r\n            scanf(\"%d\", &x);\r\n            if (~x) {\r\n                s.push_back(make_pair(x, j));\r\n            }\r\n        }\r\n        if (!s.size()) {\r\n            continue;\r\n        }\r\n        queue <int> q;\r\n        sort(s.begin(), s.end());\r\n        for (int j = 0; j < s.size() - 1; j++) {\r\n            if (s[j].fir < s[j + 1].fir) {\r\n                addline(s[j].sec, s[j + 1].sec);\r\n                for (; q.size(); addline(s[q.front()].sec, s[j + 1].sec), q.pop());\r\n            } else {\r\n                q.push(j);\r\n            }\r\n        }\r\n    }\r\n    for (int i = 1; i <= m; i++) {\r\n        if (!dfs(i)) {\r\n            return puts(\"-1\"), 0;\r\n        }\r\n    }\r\n    for (int i = 1; i <= m; i++) {\r\n        printf(\"%d \", a[i]);\r\n    }\r\n    return 0;\r\n}"
}