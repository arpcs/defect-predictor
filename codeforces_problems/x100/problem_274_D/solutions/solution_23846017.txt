{
    "id": 23846017,
    "contestId": 274,
    "creationTimeSeconds": 1484497204,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "lexuanan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 11878400,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 300005;\n\nint a[N], vt[N], deg[N];\nvector<int> ds[N];\n\ninline bool cmp(int i, int j) {\n    return a[i] < a[j];\n}\n\nint main() {\n    int n, m;\n    scanf(\"%d%d\", &n, &m);\n\n    int nn = m;\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 1; j <= m; j++) {\n            scanf(\"%d\", a+j);\n            vt[j] = j;\n        }\n        sort(vt+1, vt+m+1, cmp);\n\n        int bd = -1, kt = -1;\n\n        for (int j = 1; j <= m;) {\n            if (a[vt[j]] == -1) {\n                j++; continue;\n            }\n            int z = j;\n            while (j <= m && a[vt[j]] == a[vt[z]]) j++;\n            if (kt > 0) {\n                nn++;\n                for (int k = bd; k <= kt; k++) {\n                    ds[vt[k]].push_back(nn);\n                    deg[nn]++;\n                }\n                for (int k = z; k < j; k++) {\n                    ds[nn].push_back(vt[k]);\n                    deg[vt[k]]++;\n                }\n            }\n            bd = z;\n            kt = j-1;\n        }\n    }\n\n    queue<int> q;\n\n    vector<int> kq;\n\n    for (int i = 1; i <= nn; i++)\n        if (deg[i] == 0) q.push(i);\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n\n        if (u <= m) kq.push_back(u);\n\n        for (auto &v : ds[u]) {\n            deg[v]--;\n            if (deg[v] == 0) {\n                q.push(v);\n            }\n        }\n    }\n\n    if (kq.size() < m) printf(\"-1\");\n    else {\n        for (int i = 0; i < kq.size(); i++) printf(\"%d \", kq[i]);\n    }\n}\n"
}