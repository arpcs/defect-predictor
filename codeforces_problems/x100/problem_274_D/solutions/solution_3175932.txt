{
    "id": 3175932,
    "contestId": 274,
    "creationTimeSeconds": 1361618401,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "m.sabouri"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "Java 7",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\nimport java.math.*;\nimport java.util.*;\n\npublic class Main\n{\n    private static int[] tmp = new int[100000];\n\n    public static void main(String[] args) throws IOException\n    {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter writer = new PrintWriter(System.out);\n\n        StringTokenizer tokenizer = new StringTokenizer(reader.readLine());\n        int n = Integer.parseInt(tokenizer.nextToken());\n        final int m = Integer.parseInt(tokenizer.nextToken());\n\n        int[][] array = new int[m][n];\n\n        for(int i = 0;i < n;i++)\n        {\n            tokenizer = new StringTokenizer(reader.readLine());\n            for(int j = 0;j < m;j++)\n                array[j][i] = Integer.parseInt(tokenizer.nextToken());\n        }\n\n        int[] order = new int[m];\n        for(int i = 0;i < m;i++)\n            order[i] = i;\n\n        mergeSort(order, 0, m-1, array, n);\n\n        for(int j = 0;j < n;j++)\n        {\n            int cur = 0;\n\n            for(int i = 0;i < m;i++)\n                if(array[order[i]][j] != -1)\n                {\n                    if(array[order[i]][j] < cur)\n                    {\n                        writer.println(\"-1\");\n                        writer.flush();\n                        writer.close();\n                        return;\n                    }\n                    cur = array[order[i]][j];\n                }\n        }\n\n        for(int i = 0;i < m;i++)\n            writer.print((order[i]+1) + (i == m-1 ? \"\\n\" : \" \"));\n\n        writer.flush();\n        writer.close();\n    }\n\n    private static void mergeSort(int[] order, int from, int to, int[][] array, int n)\n    {\n        if(from < to)\n        {\n            mergeSort(order, from, (from+to)/2, array, n);\n            mergeSort(order, (from+to)/2+1, to, array, n);\n            merge(order, from, (from+to)/2+1, to, array, n);\n        }\n    }\n\n    private static void merge(int[] order, int start1, int start2, int end, int[][] array, int n)\n    {\n        int p = start1;\n        int q = start2;\n\n        for(int i = start1;i <= end;i++)\n            if(p < start2 && (q == end+1 || compare(array[order[p]], array[order[q]])))\n                tmp[i] = order[p++];\n            else\n                tmp[i] = order[q++];\n\n        System.arraycopy(tmp, start1, order, start1, end-start1+1);\n    }\n\n    private static boolean compare(int[] a, int[] b)\n    {\n        for(int i = 0;i < a.length;i++)\n            if(a[i] != -1 && b[i] != -1)\n                if(b[i] > a[i])\n                    return true;\n        return false;\n    }\n}"
}