{
    "id": 143866334,
    "contestId": 274,
    "creationTimeSeconds": 1643023019,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "bkifhr7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 11264000,
    "source": "#include <bits/stdc++.h>\n\nusing pii = std::pair<int, int>;\n\nconst int N = 1e5 + 5;\n\nint n, m, idx;\nstd::vector<int> G[N << 1];\nint indeg[N << 1];\nstd::vector<int> ans;\n\nvoid topsort() {\n\tstd::queue<int> q;\n\tfor (int i = 1; i <= idx; ++i) if (!indeg[i]) q.emplace(i);\n\t\n\twhile (q.size()) {\n\t\tint t = q.front(); q.pop();\n\t\tans.emplace_back(t);\n\t\tfor (auto v : G[t]) if (!(-- indeg[v])) q.push(v);\n\t}\n}\n\nsigned main(int argc, char *argv[]) {\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(nullptr); std::cout.tie(nullptr);\n\t\n\tstd::cin >> n >> m;\n\tstd::vector<std::vector<pii>> matrix(n + 1, std::vector<pii>(m + 1));\n\t\n\tfor (int i = 1; i <= n; ++i) for (int j = 1; j <= m; ++j) std::cin >> matrix[i][j].first, matrix[i][j].second = j;\n\tidx = m; \n\tfor (int i = 1; i <= n; ++i) {\n\t\tstd::sort(matrix[i].begin() + 1, matrix[i].end());\n\t\tstd::vector<pii> same;\n\t\tfor (int l = 1, r = 1; l <= m; l = r + 1) {\n\t\t\tr = l; while (r < m && matrix[i][r].first == matrix[i][r + 1].first) ++r;\n\t\t\tsame.emplace_back(std::make_pair(l, r));\n\t\t}\n\t\tfor (int j = 0; j + 1 < (int)same.size(); ++j) {\n\t\t\tpii x = same[j], y = same[j + 1];\n\t\t\tif (matrix[i][x.first].first == -1) continue;\n\t\t\t++ idx;\n\t\t\tfor (int k = x.first; k <= x.second; ++k) G[matrix[i][k].second].emplace_back(idx), ++indeg[idx]; \n\t\t\tfor (int k = y.first; k <= y.second; ++k) G[idx].emplace_back(matrix[i][k].second), ++indeg[matrix[i][k].second];\n\t\t}\n\t}\n\ttopsort();\n\tif ((int)ans.size() < idx) return std::cout << -1 << std::endl, 0;\n\tfor (auto v : ans) if (v <= m) std::cout << v << ' ';\n\treturn std::cout << std::endl, 0;\n}\n\t  \t\t  \t  \t   \t\t\t\t\t\t\t \t \t"
}