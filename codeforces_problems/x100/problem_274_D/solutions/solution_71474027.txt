{
    "id": 71474027,
    "contestId": 274,
    "creationTimeSeconds": 1582176812,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "kqkqkqkq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 122,
    "memoryConsumedBytes": 7168000,
    "source": "#include<bits/stdc++.h>  \r\n#define inf 1000000005  \r\n#define M 40  \r\n#define N 100005\r\n#define maxn 300005  \r\nusing namespace std;\r\nstruct Node{\r\n    int val,idx;\r\n    bool operator<(const Node n)const{\r\n        return val<n.val;\r\n    }\r\n}a[N];\r\nint n,m,in[N*2],cnt;\r\nvector<int>edge[N*2];\r\nqueue<int>que;\r\nvoid add(int u,int v){\r\n    in[v]++;\r\n    edge[u].push_back(v);\r\n}\r\nint main(){\r\n\t\r\n    cin>>n>>m;\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            scanf(\"%d\",&a[j].val);\r\n            a[j].idx=j;\r\n        }\r\n        sort(a,a+m);\r\n        for(int j=0;j<m;j++){\r\n            if(a[j].val==-1) continue;\r\n            if(!j||a[j].val!=a[j-1].val) cnt++;\r\n            add(a[j].idx,m+cnt+1);  //\u672c\u8eab\u6307\u5411\u6bd4\u81ea\u5df1\u5927\u7684\r\n            add(m+cnt,a[j].idx);    //\u6bd4\u81ea\u5df1\u5c0f\u7684\u6307\u5411\u81ea\u5df1\r\n        }\r\n        cnt++;\r\n    }\r\n    for(int i=0;i<m+cnt;i++)\r\n        if(!in[i]) \r\n            que.push(i);\r\n    int ans[N],tot=0;\r\n    while(!que.empty()){\r\n        int u=que.front();que.pop();\r\n        if(u<m)\r\n            ans[tot++]=u;\r\n        for(int i=0;i<edge[u].size();i++){\r\n            int v=edge[u][i];\r\n            in[v]--;\r\n            if(!in[v])\r\n                que.push(v);\r\n        }\r\n    }\r\n    if(tot<m) puts(\"-1\");\r\n    else{\r\n        for(int i=0;i<m;i++)\r\n            cout<<ans[i]+1<<(i==m-1?\"\\n\":\" \");\r\n    }\r\n    \r\n    return 0;\r\n}"
}