{
    "id": 3424588,
    "contestId": 274,
    "creationTimeSeconds": 1364678452,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "hiukim"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "Java 6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 203,
    "memoryConsumedBytes": 307200,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class D {\t\r\n\tBufferedReader reader;\r\n    StringTokenizer tokenizer;\r\n    PrintWriter out;\r\n        \r\n\tpublic void solve() throws IOException {\t\t\t\t\r\n\t\tint N = nextInt();\r\n\t\tint M = nextInt();\r\n\t\tint[][] a = new int[N][M];\r\n\t\tfor(int i = 0; i < N; i++)\r\n\t\t\tfor(int j = 0; j < M; j++)\r\n\t\t\t\ta[i][j] = nextInt();\r\n\t\t\r\n\t\tint[] from = new int[N*M*2];\r\n\t\tint[] to = new int[N*M*2];\r\n\t\tint edge_count = 0;\r\n\t\t\r\n\t\tint extra = M;\r\n\t\tfor(int i = 0; i < N; i++){\r\n\t\t\tint[][] ele = new int[M][2];\r\n\t\t\tfor(int j = 0; j < M; j++){\r\n\t\t\t\tele[j][0] = a[i][j]; \r\n\t\t\t\tele[j][1] = j;\r\n\t\t\t}\r\n\t\t\tArrays.sort(ele, new Comparator<int[]>(){\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic int compare(int[] arg0, int[] arg1) {\r\n\t\t\t\t\treturn arg0[0] - arg1[0];\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tfor(int j = 0; j < M-1; j++){\r\n\t\t\t\tif( ele[j][0] < ele[j+1][0] && ele[j][0] != -1){\r\n\t\t\t\t\tint k = j;\r\n\t\t\t\t\twhile( k >= 0 && ele[j][0] == ele[k][0] ){\r\n\t\t\t\t\t\tfrom[edge_count] = ele[k][1]; to[edge_count] = extra; edge_count++;\r\n\t\t\t\t\t\tk--;\r\n\t\t\t\t\t}\t\t\t\t\t\r\n\t\t\t\t\tk = j+1;\r\n\t\t\t\t\twhile( k < M && ele[j+1][0] == ele[k][0] ){\r\n\t\t\t\t\t\tto[edge_count] = ele[k][1]; from[edge_count] = extra; edge_count++;\r\n\t\t\t\t\t\tk++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\textra++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint[][] edges = new int[extra][];\r\n\t\tint[] ec = new int[extra];\r\n\t\tint[] income = new int[extra];\r\n\t\tfor(int i = 0; i < edge_count; i++){\r\n\t\t\tec[from[i]]++;\r\n\t\t\tincome[to[i]]++;\r\n\t\t}\t\t\t\r\n\t\tfor(int i = 0; i < extra; i++){\r\n\t\t\tedges[i] = new int[ ec[i] ];\r\n\t\t\tec[i] = 0;\r\n\t\t}\r\n\t\tfor(int i = 0; i < edge_count; i++)\r\n\t\t\tedges[ from[i] ][ ec[from[i]]++ ] = to[i];\r\n\t\t\r\n//\t\tfor(int i = 0; i < extra; i++){\r\n//\t\t\tout.print( (i+1) + \": \");\r\n//\t\t\tfor(int j = 0; j < ec[i]; j++)\r\n//\t\t\t\tout.print( (edges[i][j]+1) + \" \");\r\n//\t\t\tout.println();\r\n//\t\t}\r\n\t\t\r\n\t\tint[] ans = new int[extra];\r\n\t\tint ans_count = 0;\r\n\t\tfor(int i = 0; i < extra; i++){\r\n\t\t\tif( income[i] == 0){\r\n\t\t\t\tans[ ans_count++ ] = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tint index = 0;\r\n\t\twhile( index < ans_count ){\t\t\t\r\n\t\t\tfor(int i = 0; i < ec[ans[index]]; i++){\r\n\t\t\t\tint t = edges[ans[index]][i]; \r\n\t\t\t\tincome[t]--;\r\n\t\t\t\tif( income[t] == 0)\r\n\t\t\t\t\tans[ ans_count++ ] = t;\r\n\t\t\t}\r\n\t\t\tindex++;\r\n\t\t}\r\n\t\tif( index == extra ){\r\n\t\t\tfor(int i = 0; i < extra; i++){\r\n\t\t\t\tif( ans[i] < M){\r\n\t\t\t\t\tout.print( (ans[i]+1) + \" \" );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t}\r\n\t\telse{\r\n\t\t\tout.println(-1);\r\n\t\t}\r\n\t}\r\n\t\r\n\t/**\r\n\t * @param args\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tnew D().run();\r\n\t}\r\n\t\r\n\tpublic void run() {\r\n        try {\r\n            reader = new BufferedReader(new InputStreamReader(System.in));\r\n            tokenizer = null;\r\n            out = new PrintWriter(System.out);\r\n            solve();\r\n            reader.close();\r\n            out.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    int nextInt() throws IOException {\r\n        return Integer.parseInt(nextToken());\r\n    }\r\n\r\n    long nextLong() throws IOException {\r\n        return Long.parseLong(nextToken());\r\n    }\r\n\r\n    double nextDouble() throws IOException {\r\n        return Double.parseDouble(nextToken());\r\n    }\r\n\r\n    String nextToken() throws IOException {\r\n        while (tokenizer == null || !tokenizer.hasMoreTokens()) {\r\n            tokenizer = new StringTokenizer(reader.readLine());\r\n        }\r\n        return tokenizer.nextToken();\r\n    }\r\n\r\n}\r\n"
}