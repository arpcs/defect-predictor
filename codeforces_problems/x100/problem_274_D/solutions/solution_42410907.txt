{
    "id": 42410907,
    "contestId": 274,
    "creationTimeSeconds": 1535935875,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "AryssonFigueiredo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 5529600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace __gnu_pbds;\r\n\r\n#define rand_() (rand() & (SHRT_MAX))\r\n#define rand() ((((int)rand_()) << 15) | rand())\r\n#define Rand() ((((long long)rand()) << 30) | rand())\r\n\r\n#define error(args...)                           \\\r\n\t{                                            \\\r\n\t\tstring _s = #args;                       \\\r\n\t\treplace(_s.begin(), _s.end(), ',', ' '); \\\r\n\t\tstringstream _ss(_s);                    \\\r\n\t\tistream_iterator<string> _it(_ss);       \\\r\n\t\terr(_it, args);                          \\\r\n\t}\r\nvoid err(istream_iterator<string> it)\r\n{\r\n}\r\ntemplate <typename T, typename... Args>\r\nvoid err(istream_iterator<string> it, T a, Args... args)\r\n{\r\n\tcerr << *it << \" = \" << a << endl;\r\n\terr(++it, args...);\r\n}\r\n\r\n#define rep(i, begin, end) for (remove_const<__typeof(end)>::type i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))\r\n\r\n#define Size(x) ((int)x.size())\r\n\r\nconst int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();\r\ntemplate <typename T>\r\nstruct chash\r\n{\r\n\tint operator()(T x) { return hash<T>{}(x ^ RANDOM); }\r\n};\r\n\r\ntemplate <typename T, typename Cmp = less<T>>\r\nusing oset = tree<T, null_type, Cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\ninline void read_(int i)\r\n{\r\n\treturn;\r\n}\r\ntemplate <typename T, typename... Args>\r\ninline void read_(int i, T &C, Args &... args)\r\n{\r\n\tcin >> C[i];\r\n\tread_(i, args...);\r\n}\r\ntemplate <typename T, typename... Args>\r\ninline void read(T &C, Args &... args)\r\n{\r\n\trep(i, 0, Size(C))\r\n\t{\r\n\t\tcin >> C[i];\r\n\t\tread_(i, args...);\r\n\t}\r\n}\r\n\r\ninline void dec()\r\n{\r\n\treturn;\r\n}\r\ntemplate <typename T, typename... Args>\r\ninline void dec(T &C, Args &... args)\r\n{\r\n\tfor (auto &x : C)\r\n\t{\r\n\t\tx--;\r\n\t}\r\n\tdec(args...);\r\n}\r\n\r\ntypedef long long lint;\r\ntypedef complex<double> point;\r\n\r\nconst int INF = 0x3f3f3f3f;\r\nconst lint INFL = 0x3f3f3f3f3f3f3f3fLL;\r\nconst double E = 1e-9, pi = 2 * acos(0);\r\n\r\nvector<vector<int>> graph;\r\nvector<int> topo;\r\nvector<bool> vis, alive;\r\n\r\nbool dfs(int u) {\r\n\tvis[u] = alive[u] = true;\r\n\tfor (int v: graph[u]) {\r\n\t\tif (alive[v]) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (not vis[v]) {\r\n\t\t\tif (not dfs(v)) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\talive[u] = false;\r\n\ttopo.push_back(u);\r\n\treturn true;\r\n}\r\n\r\nbool solve(int testNumber)\r\n{\r\n\tint n, m;\r\n\tif (not (cin >> n >> m)) {\r\n\t\treturn false;\r\n\t}\r\n\tvector<vector<int>> A(n, vector<int>(m));\r\n\tfor (auto &vec: A) {\r\n\t\tread(vec);\r\n\t}\r\n\tvector<int> P(m);\r\n\tiota(P.begin(), P.end(), 0);\r\n\tgraph.assign(m, {});\r\n\trep(i, 0, n) {\r\n\t\tsort(P.begin(), P.end(), [&](int x, int y) {\r\n\t\t\treturn A[i][x] < A[i][y];\r\n\t\t});\r\n\t\trep(j, 1, m) {\r\n\t\t\tif (A[i][P[j - 1]] != -1 and A[i][P[j]] != A[i][P[j - 1]]) {\r\n\t\t\t\tint k = Size(graph);\r\n\t\t\t\tgraph.push_back({});\r\n\t\t\t\tint idx = j - 1;\r\n\t\t\t\twhile (idx >= 0 and A[i][P[idx]] == A[i][P[j - 1]]) {\r\n\t\t\t\t\tgraph[P[idx]].push_back(k);\r\n\t\t\t\t\tidx--;\r\n\t\t\t\t}\r\n\t\t\t\tidx = j;\r\n\t\t\t\twhile (idx < m and A[i][P[idx]] == A[i][P[j]]) {\r\n\t\t\t\t\tgraph[k].push_back(P[idx]);\r\n\t\t\t\t\tidx++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\ttopo.clear();\r\n\tvis.assign(Size(graph), false);\r\n\talive = vis;\r\n\tbool res = true;\r\n\trep(i, 0, m) {\r\n\t\tif (not vis[i]) {\r\n\t\t\tif (not dfs(i)) {\r\n\t\t\t\tres = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treverse(topo.begin(), topo.end());\r\n\tif (!res) {\r\n\t\tprintf(\"-1\\n\");\r\n \t} else {\r\n\t\t for (int x: topo) {\r\n\t\t\t if (x < m) {\r\n\t\t\t \tprintf(\"%d \", x + 1);\r\n\t\t\t }\r\n\t\t }\r\n\t\t printf(\"\\n\");\r\n\t }\r\n\treturn true;\r\n}\r\n\r\nvoid init(const char *in = nullptr, const char *out = nullptr)\r\n{\r\n\tif (in)\r\n\t\tfreopen(in, \"r\", stdin);\r\n\tif (out)\r\n\t\tfreopen(out, \"w\", stdout);\r\n\tsrand(unsigned((long long)new char));\r\n}\r\n\r\nint main()\r\n{\r\n\tios_base ::sync_with_stdio(false);\r\n\tcin.tie(nullptr);\r\n\tinit();\r\n\tfor (int i = 1; solve(i); i++)\r\n\t\t;\r\n\treturn 0;\r\n}"
}