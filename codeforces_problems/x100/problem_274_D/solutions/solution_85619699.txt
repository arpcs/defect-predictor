{
    "id": 85619699,
    "contestId": 274,
    "creationTimeSeconds": 1593606149,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "SmilingKnight"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 11161600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=100005;\r\nstruct AS{\r\n\tint x,id,from,to;\r\n\tbool operator<(const AS B)const{return x<B.x;}\r\n};\r\nstruct Edge{int from,to,nxt;}edges[maxn<<2];\r\nint n,m,p[maxn<<1],lst[maxn],E_cnt,tot;\r\nint Q[maxn],hed,til,indeg[maxn];\r\nvector<AS> a[maxn];\r\ninline int read(){\r\n\tint res=0,f_f=1;char ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){if(ch=='-') f_f=-1;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9') res=(res<<3)+(res<<1)-'0'+ch,ch=getchar();\r\n\treturn res*f_f;\r\n}\r\ninline void add_edge(int from,int to){\r\n\tedges[++E_cnt]=(Edge){from,to,lst[from]};\r\n\tlst[from]=E_cnt;\r\n}\r\ninline bool toposort(){\r\n\thed=1,til=0;\r\n\tfor (int i=1;i<=tot;i++)\r\n\t\tif(!indeg[i]) Q[++til]=i;\r\n\twhile(hed!=til+1){\r\n\t\tint u=Q[hed];\r\n\t\tfor (int i=lst[u];~i;i=edges[i].nxt){\r\n\t\t\tEdge &e=edges[i];\r\n\t\t\tindeg[e.to]--;\r\n\t\t\tif(!indeg[e.to]) Q[++til]=e.to;\r\n\t\t}\r\n\t\thed++;\r\n\t}\r\n\tif(til^tot) return false;\r\n\treturn true;\r\n}\r\nint main(){\r\n\tmemset(lst,-1,sizeof(lst));\r\n\tn=read(),tot=m=read();\r\n\tfor (int i=1;i<=n;i++)\r\n\t\tfor (int j=1;j<=m;j++){\r\n\t\t\tint x=read();\r\n\t\t\ta[i].push_back((AS){x,j});\r\n\t\t}\r\n\tfor (int i=1;i<=n;i++){\r\n\t\tsort(a[i].begin(),a[i].end());\r\n\t\tbool flag=false;\r\n\t\tfor (int j=0;j<m;j++){\r\n\t\t\tif(a[i][j].x==-1) continue;\r\n\t\t\tif(!j||a[i][j].x!=a[i][j-1].x){\r\n\t\t\t\ta[i][j].from=++tot,a[i][j].to=++tot;\r\n\t\t\t\tif(!flag) flag=true;\r\n\t\t\t\telse{\r\n\t\t\t\t\tadd_edge(tot-2,tot-1);\r\n\t\t\t\t\tindeg[tot-1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse a[i][j].from=a[i][j-1].from,a[i][j].to=a[i][j-1].to;\r\n\t\t\tadd_edge(a[i][j].from,a[i][j].id),add_edge(a[i][j].id,a[i][j].to);\r\n\t\t\tindeg[a[i][j].id]++,indeg[a[i][j].to]++;\r\n\t\t}\r\n\t}\r\n\tif(!toposort()) printf(\"-1\\n\");\r\n\telse{\r\n\t\tfor (int i=1;i<=tot;i++){\r\n\t\t\tif(Q[i]>m) continue;\r\n\t\t\tprintf(\"%d \",Q[i]);\r\n\t\t}\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\treturn 0;\r\n}"
}