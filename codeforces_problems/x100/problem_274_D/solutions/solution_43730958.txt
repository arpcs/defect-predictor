{
    "id": 43730958,
    "contestId": 274,
    "creationTimeSeconds": 1538575599,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "kerO_o"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 7884800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define mp make_pair\r\ntypedef pair< int, int > pii;\r\ntypedef pair< long long, long long > pll;\r\ntypedef long long ll;\r\ntypedef vector< int > vi;\r\ntypedef vector< ll > vll;\r\ntypedef vector< pii > vpii;\r\ntypedef vector< pll > vpll;\r\n\r\ntypedef long double ld;\r\n\r\nconst ll MOD = 1e9 + 7;\r\nll lgput(ll a, ll b, ll mod) {\r\n    ll ret = 1;\r\n    while( b ){\r\n        if(b & 1) ret = (ret * a) % mod;\r\n        a = (a * a) % mod;\r\n        b >>= 1;\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\nint binarySearch(vector< int > &v, int value) {\r\n    int best = 0;\r\n    for(int step = 29; step >= 0; --step) {\r\n        if(best + (1<<step) < v.size() && v[best + (1<<step)] <= value) best += (1<<step);\r\n    }\r\n\r\n    return best;\r\n}\r\n\r\ninline ll inv(ll x, ll MOD) {\r\n    return lgput(x, MOD - 2, MOD);\r\n}\r\n\r\nconst int MAXN = 3e5;\r\n\r\nvector< int > gr[MAXN];\r\nint cntNodes = 0;\r\nint deg[MAXN];\r\n\r\nint main() {\r\n//    freopen(\"input\", \"r\", stdin); freopen(\"output\", \"w\", stdout);\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int n;\r\n    cin >> n;\r\n    int m;\r\n    cin >> m;\r\n    cntNodes = m;\r\n    for(int i = 0; i < n; ++i) {\r\n        vector< pair< int, int> > v(m);\r\n        for(int j = 0; j < m; ++j) {\r\n            cin >> v[j].first;\r\n            v[j].second = j;\r\n        }\r\n        \r\n        sort(v.begin(), v.end());\r\n        for(int j = 0; j < m; ++j) {\r\n            if(v[j].first == -1) continue;\r\n            if(j == 0 || v[j].first != v[j-1].first) {\r\n                ++cntNodes;\r\n            }\r\n            \r\n            gr[cntNodes].emplace_back(v[j].second);\r\n            deg[v[j].second] ++;\r\n            if(v.back().first != v[j].first) {\r\n                gr[v[j].second].emplace_back(cntNodes + 1);\r\n                deg[cntNodes + 1] ++;\r\n            }\r\n        }\r\n    }\r\n    \r\n    vector< int > ans;\r\n    queue< int > q;\r\n    for(int i = 0; i <= cntNodes + 1; ++i) {\r\n        if(deg[i] == 0) {\r\n            q.push(i);\r\n        }\r\n    }\r\n    \r\n    int cnt = 0;\r\n    while(q.size()) {\r\n        int node = q.front();\r\n        q.pop();\r\n        ++cnt;\r\n        if(node < m) ans.emplace_back(node + 1);\r\n        for(auto &x : gr[node]) {\r\n            deg[x] --;\r\n            if(deg[x] == 0) {\r\n                q.push(x);\r\n            }\r\n        }\r\n    }\r\n    \r\n    if(cnt != cntNodes + 2) {\r\n        cout << -1;\r\n        return 0;\r\n    }\r\n    for(auto &x : ans) cout << x << ' ';\r\n}"
}