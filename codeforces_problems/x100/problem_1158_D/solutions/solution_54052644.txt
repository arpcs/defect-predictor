{
    "id": 54052644,
    "contestId": 1158,
    "creationTimeSeconds": 1557725875,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "Emiso"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 234,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define EPS 1e-6\r\n#define INF 1e9\r\n\r\nusing namespace std;\r\ntypedef double T;\r\n\r\nint cmp(T x, T y = 0) {\r\n\treturn (x <= y + EPS) ? (x + EPS < y) ? -1 : 0 : 1;\r\n}\r\n\r\nstruct point {\r\n    T x, y;\r\n    int id;\r\n\r\n    point(T x = 0, T y = 0, int id = -1): x(x), y(y), id(id) {}\r\n\r\n    point operator + (point b) { return point(x + b.x, y + b.y); }\r\n    point operator - (point b) { return point(x - b.x, y - b.y); }\r\n    point operator * (T c) { return point(x*c, y*c); }\r\n    point operator / (T c) { return point(x/c, y/c); }\r\n    bool operator < (const point b) const {\r\n        return pair<T, T>(x, y) < pair<T, T>(b.x, b.y);\r\n    }\r\n};\r\n\r\ninline T distPoints(point a) {\r\n    return sqrt(a.x * a.x + a.y * a.y);\r\n}\r\n\r\ninline T escalar(point a, point b) {\r\n    return a.x * b.x + a.y * b.y;\r\n}\r\n\r\ninline T vetorial(point a, point b) {\r\n    return a.x * b.y - a.y * b.x;\r\n}\r\n\r\nint ccw(point p, point q, point o) {\r\n\treturn cmp(vetorial(p - o, q - o));\r\n}\r\n\r\nT angle(point p, point q, point o) {\r\n\tpoint u = p - q, v = o - q;\r\n\treturn atan2(vetorial(u, v), escalar(u, v));\r\n}\r\n\r\npoint pivot;\r\nbool polar_cmp(point a , point b) {\r\n    T cross = vetorial(a - pivot, b - pivot);\r\n    return cmp(cross) == 1 || (cmp(cross) == 0 && cmp(distPoints(pivot - a), distPoints(pivot - b)) == -1);\r\n}\r\n\r\nvector<point> convex_hull(vector<point> p, bool repeat_last = false) {\r\n    if(p.size() <= 2) return p;\r\n\r\n    int pi = 0;\r\n    for(int i = 1; i < p.size(); i++)\r\n        if(p[i] < p[pi]) pi = i;\r\n\r\n    swap(p[0], p[pi]); pivot = p[0];\r\n    sort(p.begin()+1, p.end(), polar_cmp);\r\n\r\n    vector<point> s;\r\n    s.push_back(p.back()); s.push_back(p[0]); s.push_back(p[1]);\r\n\r\n    for(int i = 2; i < p.size();) {\r\n        int j = s.size()-1;\r\n        if(s.size() == 2 || ccw(s[j], p[i], s[j-1]) == 1) s.push_back(p[i++]);\r\n        else s.pop_back();\r\n    }\r\n    if(!repeat_last) s.pop_back();\r\n    return s;\r\n}\r\n\r\nint n;\r\nvector<point> p, ans, ch;\r\nchar s[3010];\r\n\r\nbool use(point po) {\r\n    for(int i = 0; i < p.size(); i++) {\r\n        if(p[i].id == po.id ) {\r\n            p.erase(p.begin() + i);\r\n            ans.push_back(po);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d\", &n);\r\n\r\n    for(int i = 1; i <= n; i++) {\r\n        int x, y;\r\n        scanf(\"%d %d\", &x, &y);\r\n        p.push_back(point(x, y, i));\r\n    }\r\n    ch = convex_hull(p);\r\n    scanf(\"%s\", s);\r\n\r\n    use(ch[1]);\r\n    if(s[0] == 'L') use(ch[2]);\r\n    else use(ch[0]);\r\n\r\n    for(int i = 0; i + 1 < n; i++) {\r\n        point tmp = p.back();\r\n        if(s[i] == 'L') {\r\n            if(s[i + 1] == 'R') { // menor negativo\r\n                for(point po : p)\r\n                    if(angle(ans[i], ans[i+1], po) > angle(ans[i], ans[i+1], tmp))\r\n                        tmp = po;\r\n            } else { // maior abs negativo\r\n                for(point po : p)\r\n                    if(angle(ans[i], ans[i+1], po) < angle(ans[i], ans[i+1], tmp))\r\n                        tmp = po;\r\n            }\r\n        } else {\r\n            if(s[i + 1] == 'L') { // menor positivo\r\n                for(point po : p)\r\n                    if(angle(ans[i], ans[i+1], po) < angle(ans[i], ans[i+1], tmp))\r\n                        tmp = po;\r\n            } else { // maior positivo\r\n                for(point po : p)\r\n                    if(angle(ans[i], ans[i+1], po) > angle(ans[i], ans[i+1], tmp))\r\n                        tmp = po;\r\n            }\r\n        }\r\n        use(tmp);\r\n    }\r\n    use(p.back());\r\n\r\n    for(point po : ans) printf(\"%d \", po.id);\r\n    return 0;\r\n}\r\n"
}