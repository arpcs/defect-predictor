{
    "id": 125007090,
    "contestId": 1158,
    "creationTimeSeconds": 1628215506,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "EnAnimant"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 3788800,
    "source": "/*\r\n * author:  ADMathNoob\r\n * created: 08/05/21 11:48:43\r\n * problem: https://codeforces.com/contest/1158/problem/D\r\n */\r\n\r\n/*\r\nComments about problem:\r\n\r\n\r\n*/\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nstruct Point {\r\n  long long x;\r\n  long long y;\r\n};\r\n\r\nint main() {\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  int n;\r\n  cin >> n;\r\n  vector<Point> p(n);\r\n  for (Point& pt : p) {\r\n    cin >> pt.x >> pt.y;\r\n  }\r\n  int s = 0;\r\n  for (int i = 1; i < n; i++) {\r\n    if (p[i].y < p[s].y || (p[i].y == p[s].y && p[i].x < p[s].x)) {\r\n      s = i;\r\n    }\r\n  }\r\n  auto Angle = [&](Point a, Point b, Point c) {\r\n    double x1 = a.x - b.x;\r\n    double y1 = a.y - b.y;\r\n    double x2 = c.x - b.x;\r\n    double y2 = c.y - b.y;\r\n    double m1 = hypot(x1, y1);\r\n    double m2 = hypot(x2, y2);\r\n    assert(m1 > 0.5 && m2 > 0.5);\r\n    double arg = (x1 * x2 + y1 * y2) / (m1 * m2);\r\n    assert(-1 <= arg && arg <= 1);\r\n    double res = acos(arg);\r\n    return res;\r\n  };\r\n  string dir;\r\n  cin >> dir;\r\n  int t = -1;\r\n  {\r\n    double mn = 7;\r\n    for (int i = 0; i < n; i++) {\r\n      if (i != s) {\r\n        double ang = Angle({p[s].x + 1, p[s].y}, p[s], p[i]);\r\n        if (ang < mn) {\r\n          mn = ang;\r\n          t = i;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  vector<int> ret;\r\n  vector<bool> alive(n, true);\r\n  auto Use = [&](int i) {\r\n    ret.push_back(i);\r\n    alive[i] = false;\r\n  };\r\n  if (dir[0] == 'R') {\r\n    swap(s, t);\r\n  }\r\n  Use(s);\r\n  Use(t);\r\n  for (int i = 0; i < n - 2; i++) {\r\n    int j = ret[i];\r\n    int k = ret[i + 1];\r\n    if (i + 1 < n - 2 && dir[i] == dir[i + 1]) {\r\n      // take \"easiest\" turn\r\n      int b = -1;\r\n      double mx = -1;\r\n      for (int ii = 0; ii < n; ii++) {\r\n        if (alive[ii]) {\r\n          double ang = Angle(p[j], p[k], p[ii]);\r\n          if (ang > mx) {\r\n            mx = ang;\r\n            b = ii;\r\n          }\r\n        }\r\n      }\r\n      Use(b);\r\n    } else {\r\n      // take sharpest turn\r\n      int b = -1;\r\n      double mn = 7;\r\n      for (int ii = 0; ii < n; ii++) {\r\n        if (alive[ii]) {\r\n          double ang = Angle(p[j], p[k], p[ii]);\r\n          if (ang < mn) {\r\n            mn = ang;\r\n            b = ii;\r\n          }\r\n        }\r\n      }\r\n      Use(b);\r\n    }\r\n  }\r\n  for (int i = 0; i < n; i++) {\r\n    if (i > 0) {\r\n      cout << ' ';\r\n    }\r\n    cout << ret[i] + 1;\r\n  }\r\n  cout << '\\n';\r\n  return 0;\r\n}\r\n"
}