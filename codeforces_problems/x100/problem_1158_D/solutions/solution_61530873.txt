{
    "id": 61530873,
    "contestId": 1158,
    "creationTimeSeconds": 1569812450,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "dragonslayerintraining"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\n#include <algorithm>\n\nconst int INF=1e9+7;\n\nstruct Point{\n  int x,y;\n  Point():x(0),y(0){\n  }\n  Point(int x,int y):x(x),y(y){\n  }\n  void read(){\n    scanf(\"%d %d\",&x,&y);\n  }\n  Point operator-(Point p)const{\n    return Point(x-p.x,y-p.y);\n  }\n  long long cross(Point p)const{\n    return 1LL*x*p.y-1LL*y*p.x;\n  }\n}ps[2005];\nbool used[2005];\n\nchar str[2005];\n\nint main(){\n  int N;\n  scanf(\"%d\",&N);\n  for(int i=0;i<N;i++){\n    ps[i].read();\n  }\n  scanf(\"%s\",str);\n  int last=std::max_element(ps,ps+N,[](Point a,Point b){return (a.x!=b.x)?(a.x<b.x):(a.y<b.y);})-ps;\n  used[last]=true;\n  printf(\"%d \",last+1);\n  for(int i=0;i<N-2;i++){\n    int choice=-1;\n    for(int j=0;j<N;j++){\n      if(used[j]) continue;\n      if((choice==-1)||(((ps[j]-ps[last]).cross(ps[choice]-ps[last])>0)^(str[i]=='R'))){\n\tchoice=j;\n      }\n    }\n    printf(\"%d \",choice+1);\n    used[choice]=true;\n    last=choice;\n  }\n  printf(\"%d\\n\",int(std::find(used,used+N,false)-used)+1);\n  return 0;\n}\n"
}