{
    "id": 54040574,
    "contestId": 1158,
    "creationTimeSeconds": 1557676223,
    "relativeTimeSeconds": 4523,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "ershov.stanislav"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 16,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define mp make_pair\n#define pb push_back\n#define sz(s) ((int) ((s).size()))\n\n#ifdef DEBUG\n#define eprintf(...) fprintf(stderr, __VA_ARGS__), fflush(stderr)\n#else\n#define eprintf(...) ;\n#endif\n\ntypedef long long ll;\ntypedef long double ld;\n\nconst int inf = (int) 1.01e9;\nconst ld eps = 1e-11;\nconst ld pi = acos(-1.0L);\n\nmt19937 mrand(random_device{} ());\nint rnd(int x) {\n  return mrand() % x;\n}\n\nconst int mod = (int) 1e9 + 7;\n\nvoid add(int & x, int y) {\n  if ((x += y) >= mod) {\n    x -= mod;\n  }\n}\n\nint sum(int x, int y) {\n  add(x, y);\n  return x;\n}\n\nint mult(int x, int y) {\n  return (ll) x * y % mod;\n}\n\nint power(int x, ll p) {\n  int res = 1;\n  while (p) {\n    if (p & 1) {\n      res = mult(res, x);\n    }\n    x = mult(x, x);\n    p >>= 1;\n  }\n  return res;\n}\n\nint inv(int x) {\n  return power(x, mod - 2);\n}\n\nstruct point {\n  int x, y;\n\n  point () : x(0), y(0) {}\n\n  point (int x, int y) : x(x), y(y) {}\n\n  point operator-(const point & b) {\n    return point(x - b.x, y - b.y);\n  }\n\n  ll operator^(const point & b) {\n    return (ll) x * b.y - (ll) y * b.x;\n  }\n};\n\npoint getPoint() {\n  int x, y;\n  scanf(\"%d%d\", &x, &y);\n  return point(x, y);\n}\n\nvoid precalc() {\n}\n\nconst int maxn = 1e4;\nint n;\npoint ps[maxn];\nchar s[maxn];\n\nbool read() {\n  if (scanf(\"%d\", &n) < 1) {\n    return false;\n  }\n  for (int i = 0; i < n; i++) {\n    ps[i] = getPoint();\n  }\n  scanf(\"%s\", s);\n  return true;\n}\n\nint used[maxn];\n\nvoid solve() {\n  for (int i = 0; i < n; i++) {\n    used[i] = 0;\n  }\n  vector<int> ans;\n  {\n    int cur = 0;\n    for (int i = 1; i < n; i++) {\n      if (ps[i].x < ps[cur].x || (ps[i].x == ps[cur].x && ps[i].y < ps[cur].y)) {\n        cur = i;\n      }\n    }\n    ans.pb(cur);\n    used[cur] = 1;\n  }\n  for (int step = 0; step < n - 2; step++) {\n    int cur = -1;\n    for (int i = 0; i < n; i++) {\n      if (!used[i]) {\n        if (cur == -1) {\n          cur = i;\n        } else {\n          ll val = (ps[cur] - ps[ans.back()]) ^ (ps[i] - ps[ans.back()]);\n          if (s[step] == 'L') {\n            if (val < 0) {\n              cur = i;\n            }\n          }\n          if (s[step] == 'R') {\n            if (val > 0) {\n              cur = i;\n            }\n          }\n        }\n      }\n    }\n    ans.pb(cur);\n    used[cur] = 1;\n  }\n  for (int i = 0; i < n; i++) {\n    if (!used[i]) {\n      ans.pb(i);\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    printf(\"%d%c\", ans[i] + 1, \" \\n\"[i == n - 1]);\n  }\n}\n\nint main() {\n  precalc();\n\n  while (read()) {\n    solve();\n#ifdef DEBUG\n    eprintf(\"Time: %.3f\\n\", (double) clock() / CLOCKS_PER_SEC);\n#endif\n  }\n  return 0;\n}\n\n"
}