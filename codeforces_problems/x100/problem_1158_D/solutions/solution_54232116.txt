{
    "id": 54232116,
    "contestId": 1158,
    "creationTimeSeconds": 1557997897,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "KassiJulgus"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 102400,
    "source": "#include <cstdio>\n#include <algorithm>\nstruct point\n{\n\tlong long x, y;\n}\np[2001];\nchar s[2001];\nint N, order[2001], del[2001], convex[2001], C, O[2001];\ninline long long check_convex(int a, int b, int c)\n{\n\treturn (p[b].y - p[a].y) * (p[c].x - p[b].x) - (p[c].y - p[b].y) * (p[b].x - p[a].x);\n}\nvoid find_convex()\n{\n\tstatic int qu[2003], qd[2001];\n\tint U = 0, D = 0;\n\tfor (int i = 1; i <= N; i++)\n\t\tif (!del[order[i]])\n\t\t{\n\t\t\tif (U && p[order[i]].x == p[qu[U]].x)\n\t\t\t\tif (p[order[i]].y <= p[qu[U]].y)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tU--;\n\t\t\twhile (U > 1 && check_convex(qu[U - 1], qu[U], order[i]) <= 0)\n\t\t\t\tU--;\n\t\t\tqu[++U] = order[i];\n\t\t}\n\tfor (int i = 1; i <= N; i++)\n\t\tif (!del[order[i]])\n\t\t{\n\t\t\tif (D && p[order[i]].x == p[qd[D]].x)\n\t\t\t\tif (p[order[i]].y >= p[qd[D]].y)\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tD--;\n\t\t\twhile (D > 1 && check_convex(qd[D - 1], qd[D], order[i]) >= 0)\n\t\t\t\tD--;\n\t\t\tqd[++D] = order[i];\n\t\t}\n\tC = U;\n\tstd::copy(qu + 1, qu + U + 1, convex + 1);\n\tif (qu[U] != qd[D])\n\t\tconvex[++C] = qd[D];\n\tfor (int i = D - 1; i > 1; i--)\n\t\tconvex[++C] = qd[i];\n\tif (qu[1] != qd[1])\n\t\tconvex[++C] = qd[1];\n}\nint main()\n{\n\tscanf(\"%d\", &N);\n\tfor (int i = 1; i <= N; i++)\n\t\tscanf(\"%lld%lld\", &p[i].x, &p[i].y);\n\tscanf(\"%s\", s + 1);\n\tfor (int i = 1; i <= N; i++)\n\t\torder[i] = i;\n\tstd::sort(order + 1, order + N + 1, [] (int x, int y) { return p[x].x < p[y].x; });\n\tfind_convex();\n\tO[1] = convex[1];\n\tO[2] = convex[s[1] == 'L' ? C : 2];\n\tdel[O[1]] = 1;\n\tfor (int i = 3; i < N; i++)\n\t{\n\t\tfind_convex();\n\t\tint p = std::find(convex + 1, convex + C + 1, O[i - 1]) - convex;\n\t\tif (s[i - 1] == 'L')\n\t\t\tO[i] = convex[p == 1 ? C : p - 1];\n\t\telse\n\t\t\tO[i] = convex[p == C ? 1 : p + 1];\n\t\tdel[O[i - 1]] = 1;\n\t}\n\tdel[O[N - 1]] = 1;\n\tO[N] = std::find(del + 1, del + N + 1, 0) - del;\n\tfor (int i = 1; i <= N; i++)\n\t\tprintf(\"%d%c\", O[i], \" \\n\"[i == N]);\n\treturn 0;\n}\n"
}