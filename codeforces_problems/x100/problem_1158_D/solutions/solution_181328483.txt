{
    "id": 181328483,
    "contestId": 1158,
    "creationTimeSeconds": 1668698574,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "bebra"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\n#define dbg(x) cerr << #x << \": \" << x << endl;\r\n\r\n\r\nstruct Vec {\r\n    ll x;\r\n    ll y;\r\n\r\n    Vec(ll _x = 0, ll _y = 0)\r\n        : x(_x), y(_y) {}\r\n\r\n    Vec(const Vec& v1, const Vec& v2) {\r\n        x = v2.x - v1.x;\r\n        y = v2.y - v1.y;\r\n    }\r\n\r\n    bool operator<(const Vec& other) const {\r\n        return make_pair(x, y) < make_pair(other.x, other.y);\r\n    }\r\n\r\n    ll operator^(const Vec& other) {\r\n        return x * other.y - other.x * y;\r\n    }\r\n\r\n    Vec& operator-=(const Vec& other) {\r\n        x -= other.x;\r\n        y -= other.y;\r\n        return *this;\r\n    }\r\n\r\n    friend Vec operator-(Vec lhs, const Vec& rhs) {\r\n        return lhs -= rhs;\r\n    }\r\n};\r\n\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int n;\r\n    cin >> n;\r\n    vector<Vec> points(n);\r\n    int min_idx = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        points[i] = {x, y};\r\n        if (points[i] < points[min_idx]) {\r\n            min_idx = i;\r\n        }\r\n    }\r\n    string dir;\r\n    cin >> dir;\r\n    vector<int> ans(n);\r\n    vector<bool> used(n);\r\n    ans[0] = min_idx;\r\n    used[min_idx] = true;\r\n    for (int i = 1; i < n; ++i) {\r\n        auto curr_point = points[ans[i - 1]];\r\n        int opt_idx = -1;\r\n        int sign = dir[max(0, i - 2)] == 'L' ? 1 : -1;\r\n        for (int j = 0; j < n; ++j) {\r\n            if (used[j]) continue;\r\n            if (opt_idx == -1 || sign * (Vec(curr_point, points[j]) ^ Vec(curr_point, points[opt_idx])) > 0) {\r\n                opt_idx = j;\r\n            }\r\n        }\r\n        ans[i] = opt_idx;\r\n        used[opt_idx] = true;\r\n    }\r\n    for (auto i : ans) {\r\n        cout << i + 1 << ' ';\r\n    }\r\n    cout << '\\n';\r\n    return 0;\r\n}\r\n\r\n"
}