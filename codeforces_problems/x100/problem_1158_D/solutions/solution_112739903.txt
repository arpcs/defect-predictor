{
    "id": 112739903,
    "contestId": 1158,
    "creationTimeSeconds": 1618194855,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "chm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "Rust",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 0,
    "source": "#[allow(unused_imports)]\r\nuse std::cmp::{min,max};\r\nuse std::io::{BufWriter, stdin, stdout, Write};\r\nconst INF: i64 = 0x3f3f3f3f;\r\n\r\n#[derive(Default)]\r\nstruct Scanner {\r\n    buffer: Vec<String>\r\n}\r\nimpl Scanner {\r\n    fn next<T: std::str::FromStr>(&mut self) -> T {\r\n        loop {\r\n            if let Some(token) = self.buffer.pop() {\r\n                return token.parse().ok().expect(\"Failed parse\");\r\n            }\r\n            let mut input = String::new();\r\n            stdin().read_line(&mut input).expect(\"Failed read\");\r\n            self.buffer = input.split_whitespace().rev().map(String::from).collect();\r\n        }\r\n    }\r\n}\r\n\r\nfn cross((x0, y0): (i64, i64),\r\n         (x1, y1): (i64, i64),\r\n         (x2, y2): (i64, i64)) -> i64 {\r\n    (x1-x0)*(y2-y0) - (x2-x0)*(y1-y0)\r\n}\r\n\r\nfn main() {\r\n    let mut scan = Scanner::default();\r\n    let out = &mut BufWriter::new(stdout());\r\n    \r\n    let n = scan.next();\r\n    let p: Vec<_> = (0..n).map(|_| (scan.next(), scan.next()))\r\n                          .collect();\r\n    let s = format!(\"R{}R\", scan.next::<String>());\r\n    \r\n    let mut taken = vec![false; n];\r\n    let mut last = (INF, INF);\r\n    \r\n    for turn in s.chars() {\r\n        let sgn = if turn == 'L' { 1 } else { -1 };\r\n        let i = (0..n).filter(|&i| !taken[i])\r\n                      .max_by(|&i, &j| (sgn*cross(last, p[i], p[j])).cmp(&0))\r\n                      .unwrap();\r\n        taken[i] = true;\r\n        last = p[i];\r\n        write!(out, \"{} \", i + 1).ok();\r\n    }\r\n    writeln!(out, \"\").ok();\r\n}"
}