{
    "id": 113289077,
    "contestId": 1158,
    "creationTimeSeconds": 1618631206,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 2010;\n\ntypedef long long LL;\n\nint x[N], y[N], vis[N], n;\n\nLL cross(int x1, int y1, int x2, int y2) {\n    return (LL)x1 * y2 - (LL)y1 * x2;\n}\n\nint least1(int a, int b) {\n    int pos = 0;\n    for (int i = 1; i <= n; i++) if (!vis[i]) {\n        if (cross(x[b] - x[a], y[b] - y[a], x[i] - x[a], y[i] - y[a]) > 0) {\n            if (!pos) pos = i;\n            else if (cross(x[i] - x[b], y[i] - y[b], x[pos] - x[b], y[pos] - y[b]) > 0) pos = i;\n        }\n    }\n    return pos;\n} \n\nint least2(int a, int b) {\n    int pos = 0;\n    for (int i = 1; i <= n; i++) if (!vis[i]) {\n        if (cross(x[b] - x[a], y[b] - y[a], x[i] - x[a], y[i] - y[a]) < 0) {\n            if (!pos) pos = i;\n            else if (cross(x[i] - x[b], y[i] - y[b], x[pos] - x[b], y[pos] - y[b]) < 0) pos = i;\n        }\n    }\n    return pos;\n} \n\nint most1(int a, int b) {\n    int pos = 0;\n    for (int i = 1; i <= n; i++) if (!vis[i]) {\n        if (cross(x[b] - x[a], y[b] - y[a], x[i] - x[a], y[i] - y[a]) > 0) {\n            if (!pos) pos = i;\n            else if (cross(x[i] - x[b], y[i] - y[b], x[pos] - x[b], y[pos] - y[b]) < 0) pos = i;\n        }\n    }\n    return pos;\n}\n\nint most2(int a, int b) {\n    int pos = 0;\n    for (int i = 1; i <= n; i++) if (!vis[i]) {\n        if (cross(x[b] - x[a], y[b] - y[a], x[i] - x[a], y[i] - y[a]) < 0) {\n            if (!pos) pos = i;\n            else if (cross(x[i] - x[b], y[i] - y[b], x[pos] - x[b], y[pos] - y[b]) > 0) pos = i;\n        }\n    }\n    return pos;\n}\n\nchar s[N];\n\nvoid solve() {\n    memset(vis, 0, sizeof(vis));\n    vector<int> res;\n    int lst = 1, st = 0;\n    for (int i = 2; i <= n; i++) \n        if (y[i] < y[lst]) lst = i;\n    vis[lst] = 1, res.push_back(lst);\n    double mn = 1e9, mx = -1e9;\n    for (int i = 1; i <= n; i++) if (i != lst) {\n        double ang = atan2(y[i] - y[lst], x[i] - x[lst]);\n        if (s[1] == 'L') {\n            if (ang < mn) mn = ang, st = i;\n        } else {\n            if (ang > mx) mx = ang, st = i;\n        }\n    }\n    vis[st] = 1, res.push_back(st);\n    for (int t = 2; t < n; t++) {\n        int tmp = st;\n        if (s[t - 1] == s[t]) {\n            if (s[t - 1] == 'L') st = least1(lst, st);\n            else st = least2(lst, st);\n        } else {\n            if (s[t - 1] == 'L') st = most1(lst, st);\n            else st = most2(lst, st);\n        } \n        lst = tmp, vis[st] = 1, res.push_back(st);\n    } \n    for (auto t : res) if (!t) return;\n    for (auto t : res) printf(\"%d \", t);\n    exit(0);\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) scanf(\"%d%d\", &x[i], &y[i]);\n    scanf(\"%s\", s + 1), solve();\n    // puts(\"-1\");\n}//\n\t\t \t         \t\t\t    \t\t   \t \t\t \t"
}