{
    "id": 54033702,
    "contestId": 1158,
    "creationTimeSeconds": 1557673438,
    "relativeTimeSeconds": 1738,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "xiaowuc1"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 6,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\n\r\n/*\r\nThis is the Java reference solution to Windy Path on the\r\n2016 ACM-ICPC Pacific Northwest regional contest.\r\n*/\r\n\r\npublic class WindyPath {\r\n    static class Point {\r\n        final int x, y;\r\n        public Point(int x, int y) {this.x = x; this.y = y;}\r\n        public String toString() {return \"(\" + x + \", \" + y + \")\";}\r\n    }\r\n\r\n    static int cross(Point a, Point b, Point c) {\r\n        return (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner s = new Scanner(System.in);\r\n        int n = s.nextInt();\r\n        Point[] pts = new Point[n];\r\n        for (int i = 0; i < n; i++) {\r\n            pts[i] = new Point(s.nextInt(), s.nextInt());\r\n        }\r\n        String path = s.next();\r\n        boolean[] marked = new boolean[n];\r\n        Point best = pts[0];\r\n        int bestIdx = 0;\r\n        for (int i = 1; i < n; i++) {\r\n            if (pts[i].x < best.x || (pts[i].x == best.x && pts[i].y < best.y)) {\r\n                best = pts[i];\r\n                bestIdx = i;\r\n            }\r\n        }\r\n        System.out.print(bestIdx + 1);\r\n        marked[bestIdx] = true;\r\n        for (int i = 0; i < path.length(); i++) {\r\n            int sign = path.charAt(i) == 'L' ? -1 : 1;\r\n            Point next = null;\r\n            int nextIdx = -1;\r\n            for (int j = 0; j < n; j++) {\r\n                if (marked[j]) continue;\r\n                if (next == null || cross(best, next, pts[j]) * sign > 0) {\r\n                    next = pts[j];\r\n                    nextIdx = j;\r\n                }\r\n            }\r\n            System.out.print(\" \" + (nextIdx + 1));\r\n            marked[nextIdx] = true;\r\n            best = next;\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n            if (!marked[i]) System.out.println(\" \" + (i + 1));\r\n        }\r\n    }\r\n}\r\n"
}