{
    "id": 54077680,
    "contestId": 1158,
    "creationTimeSeconds": 1557785032,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "Hiasat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define x first\r\n#define y second\r\n#define pb push_back\r\n#define mp make_pair\r\ntypedef pair<int, int> pii;\r\ntypedef long long ll;\r\nconst int MOD = 998244353;\r\nconst int BASE = 27;\r\nconst int N = 500003;\r\nconst ll oo = 1e18;\r\nconst double EPS = 1e-9;\r\n\r\nstruct Point {\r\n        ll x, y;\r\n        int idx;\r\n        Point(){}\r\n        Point(ll _x , ll _y){\r\n          x = _x,y = _y;\r\n        }\r\n        bool operator<(const Point &rhs) const{\r\n          if(x != rhs.x)return x < rhs.x;\r\n          if(y != rhs.y)return y < rhs.y;\r\n           return idx < rhs.idx;\r\n        }\r\n        Point operator-(const Point &rhs) const{\r\n          return Point(x-rhs.x,y-rhs.y);\r\n        }\r\n        bool operator==(const Point &rhs) const{\r\n          return rhs.x == x && rhs.y == y && idx == rhs.idx;\r\n        }\r\n};\r\nll cross(const Point &O, const Point &A, const Point &B){\r\n        return (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x);\r\n}\r\nll cs(const Point &A, const Point &B){\r\n        return A.x * B.y - A.y  * B.x ;\r\n}\r\n\r\nvector<Point> convex_hull(vector<Point> P){\r\n    if(P.size() <= 2)return P;\r\n        int n = P.size(), k = 0;\r\n        vector<Point> H(2*P.size());\r\n        sort(P.begin(), P.end());\r\n        for (int i = 0; i < n; ++i) {\r\n                while (k >= 2 && cross(H[k-2], H[k-1], P[i]) <= 0) k--;\r\n                H[k++] = P[i];\r\n        }\r\n        for (int i = n-2, t = k+1; i >= 0; i--) {\r\n                while (k >= t && cross(H[k-2], H[k-1], P[i]) <= 0) k--;\r\n                H[k++] = P[i];\r\n        }\r\n        H.resize(k-1);\r\n        return H;\r\n}\r\nint n;\r\nbool vis[2001];\r\nvector<Point> p,cur;\r\nvector<int> ans;\r\n\r\n\r\nchar tmp[2001];\r\n\r\nint main() {\r\n  cin >> n;\r\n  for (int i = 0; i < n; ++i){\r\n    Point cur;\r\n    scanf(\"%lld%lld\",&cur.x,&cur.y);\r\n    cur.idx = i;\r\n    p.push_back(cur);\r\n  } \r\n  scanf(\"%s\",tmp);\r\n  tmp[n-2] = 'L';\r\n  sort(p.begin(),p.end());\r\n  ans.push_back(p[0].idx);\r\n  for (int i = 0; i < n-1; ++i){\r\n    cur.clear();\r\n    for(int j = 0 ; j < n;++j)if(!vis[p[j].idx])cur.push_back(p[j]); \r\n    cur = convex_hull(cur);\r\n    vis[ans.back()] = 1;\r\n    int idx = -1;\r\n    for(int j = 0 ; j < cur.size();++j)if(cur[j].idx == ans.back())idx = j;\r\n    int nxt = (idx+1) == cur.size()?0:idx+1;\r\n    int prv = (idx-1) < 0? cur.size()-1: idx-1;\r\n    if(tmp[i]=='L'){\r\n      ans.push_back(cur[nxt].idx);\r\n    }else{\r\n      ans.push_back(cur[prv].idx);\r\n    }\r\n  }\r\n  for (int i = 0; i < ans.size(); ++i){\r\n    if(i)printf(\" \");\r\n    printf(\"%d\", ans[i]+1);\r\n  }\r\n  puts(\"\");\r\n  return 0;\r\n}"
}