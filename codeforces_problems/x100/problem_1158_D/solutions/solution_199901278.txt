{
    "id": 199901278,
    "contestId": 1158,
    "creationTimeSeconds": 1680232254,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "propane"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 102400,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<numbers>\r\n#include<vector>\r\n#include<cmath>\r\nusing namespace std;\r\nusing LL = long long;\r\nusing point_t = long long; //\u5168\u5c40\u6570\u636e\u7c7b\u578b\uff0c\u53ef\u4fee\u6539\u4e3a long long \u7b49\r\n\r\nconst point_t eps = 1e-8;\r\nconst long double PI = numbers::pi_v<long double>;\r\n\r\n// \u70b9\u4e0e\u5411\u91cf\r\ntemplate <typename T>\r\nstruct point{\r\n    T x, y;\r\n\r\n    bool operator==(const point &a) const { return (abs(x - a.x) <= eps && abs(y - a.y) <= eps); }\r\n    bool operator<(const point &a) const{\r\n        if (abs(x - a.x) <= eps)\r\n            return y < a.y - eps;\r\n        return x < a.x - eps;\r\n    }\r\n    bool operator>(const point &a) const { return !(*this < a || *this == a); }\r\n    point operator+(const point &a) const { return {x + a.x, y + a.y}; }\r\n    point operator-(const point &a) const { return {x - a.x, y - a.y}; }\r\n    point operator-() const { return {-x, -y}; }\r\n    point operator*(const T k) const { return {k * x, k * y}; }\r\n    point operator/(const T k) const { return {x / k, y / k}; }\r\n    T operator*(const point &a) const { return x * a.x + y * a.y; } // \u70b9\u79ef\r\n    T operator^(const point &a) const { return x * a.y - y * a.x; } // \u53c9\u79ef\uff0c\u6ce8\u610f\u4f18\u5148\u7ea7\r\n    int toleft(const point &a) const\r\n    {\r\n        const auto t = (*this) ^ a;\r\n        return (t > eps) - (t < -eps);\r\n    }                                                             // to-left \u6d4b\u8bd5\r\n    T len2() const { return (*this) * (*this); }                  // \u5411\u91cf\u957f\u5ea6\u7684\u5e73\u65b9\r\n    T dis2(const point &a) const { return (a - (*this)).len2(); } // \u4e24\u70b9\u8ddd\u79bb\u7684\u5e73\u65b9\r\n\r\n    // \u6d89\u53ca\u6d6e\u70b9\u6570\r\n    long double len() const { return sqrtl(len2()); }                                                                      // \u5411\u91cf\u957f\u5ea6\r\n    long double dis(const point &a) const { return sqrtl(dis2(a)); }                                                       // \u4e24\u70b9\u8ddd\u79bb\r\n    long double ang(const point &a) const { return acosl(max(-1.0l, min(1.0l, ((*this) * a) / (len() * a.len())))); }      // \u5411\u91cf\u5939\u89d2\r\n    point rot(const long double rad) const { return {x * cosl(rad) - y * sinl(rad), x * sinl(rad) + y * cosl(rad)}; }          // \u9006\u65f6\u9488\u65cb\u8f6c\uff08\u7ed9\u5b9a\u89d2\u5ea6\uff09\r\n    point rot(const long double cosr, const long double sinr) const { return {x * cosr - y * sinr, x * sinr + y * cosr}; } // \u9006\u65f6\u9488\u65cb\u8f6c\uff08\u7ed9\u5b9a\u89d2\u5ea6\u7684\u6b63\u5f26\u4e0e\u4f59\u5f26\uff09\r\n};\r\n\r\nusing Point = point<point_t>;\r\n\r\nint main(){\r\n\r\n#ifdef LOCAL\r\n    freopen(\"data.in\", \"r\", stdin);\r\n    freopen(\"data.out\", \"w\", stdout);\r\n#endif\r\n\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ios::sync_with_stdio(0);\r\n\r\n    int n;\r\n    cin >> n;\r\n    vector<Point> p(n);\r\n    for(int i = 0; i < n; i++)\r\n        cin >> p[i].x >> p[i].y;\r\n    string s;\r\n    cin >> s;\r\n    vector<int> ans;\r\n    vector<bool> v(n, false);\r\n    int mn = min_element(p.begin(), p.end()) - p.begin();\r\n    ans.push_back(mn);\r\n    v[mn] = true;\r\n    for(int i = 0; i < n - 2; i++){\r\n        int cand = -1;\r\n        for(int j = 0; j < n; j++){\r\n            if (v[j]) continue;\r\n            if (cand == -1) cand = j;\r\n            else if (s[i] == 'L' && ((p[cand] - p[ans.back()]) ^ (p[j] - p[ans.back()])) < 0) cand = j;\r\n            else if (s[i] == 'R' && ((p[cand] - p[ans.back()]) ^ (p[j] - p[ans.back()])) > 0) cand = j;\r\n        }\r\n        ans.push_back(cand);\r\n        v[cand] = true;\r\n    }\r\n    for(int i = 0; i < n; i++)\r\n        if (!v[i]) ans.push_back(i);\r\n    for(auto x : ans) cout << x + 1 << ' ';\r\n    cout << '\\n';\r\n\r\n}"
}