{
    "id": 169825732,
    "contestId": 1158,
    "creationTimeSeconds": 1661612136,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "Quiet_Zafkiel"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#include <queue>\r\n#include <cstdio>\r\n#include <cctype>\r\n#include <cstring>\r\n#include <algorithm>\r\nusing namespace std;\r\n#define FOR(i,j,k) for(int i=j; i<=k; ++i)\r\n#define ROF(i,j,k) for(int i=j; i>=k; --i)\r\ninline int read (void) {\r\n  int x = 0, f = 1, ch = getchar();\r\n  while(!isdigit(ch)) { if(ch == '-') f = -f; ch = getchar(); }\r\n  while(isdigit(ch)) { x = x * 10 + ch - '0'; ch = getchar(); }\r\n  return x * f;\r\n}\r\nconst int maxn = 2005;\r\nstruct Node {\r\n  int x, y, id;\r\n} node[maxn];\r\ninline long long cross (int x1, int y1, int x2, int y2) {\r\n  return 1ll * x1 * y2 - 1ll * x2 * y1;\r\n}\r\ninline bool operator < (Node p, Node q) {\r\n  return (p.x != q.x) ? (p.x < q.x) : (p.y != q.y) ? (p.y < q.y) : (p.id < q.id);\r\n}\r\nint ans[maxn];\r\nbool vis[maxn];\r\nchar c[maxn];\r\nsigned main (void) {\r\n  int n = read();\r\n  FOR(i,1,n) {\r\n    node[i].x = read();\r\n    node[i].y = read();\r\n    node[i].id = i;\r\n  }\r\n  scanf(\"%s\", c+1);\r\n  sort(node+1, node+n+1);\r\n  ans[1] = 1;\r\n  vis[node[1].id] = 1;\r\n  FOR(i,1,n-2)\r\n    if(c[i] == 'L') {\r\n      int j = 1;\r\n      while(vis[node[j].id]) ++ j;\r\n      FOR(k,j+1,n) if(!vis[node[k].id])\r\n        if(cross(node[j].x - node[ans[i]].x, node[j].y - node[ans[i]].y, node[k].x - node[ans[i]].x, node[k].y - node[ans[i]].y) < 0)\r\n          j = k;\r\n      ans[i+1] = j; vis[node[j].id] = 1;\r\n    } else {\r\n      int j = 1;\r\n      while(vis[node[j].id]) ++ j;\r\n      FOR(k,j+1,n) if(!vis[node[k].id])\r\n        if(cross(node[j].x - node[ans[i]].x, node[j].y - node[ans[i]].y, node[k].x - node[ans[i]].x, node[k].y - node[ans[i]].y) > 0)\r\n          j = k;\r\n      ans[i+1] = j; vis[node[j].id] = 1;\r\n    }\r\n  FOR(i,1,n) if(!vis[node[i].id]) ans[n] = i;\r\n  FOR(i,1,n) printf(\"%d%c\", node[ans[i]].id, i==n?10:32);\r\n  return 0;\r\n}"
}