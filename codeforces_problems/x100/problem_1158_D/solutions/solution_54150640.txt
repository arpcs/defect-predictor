{
    "id": 54150640,
    "contestId": 1158,
    "creationTimeSeconds": 1557876946,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "RedStone"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef complex<long long> point;\r\n#define sz(a) ((int)(a).size())\r\n#define all(n) (n).begin(),(n).end()\r\n#define EPS 1e-9\r\n#define OO 1e9\r\n#define X real()\r\n#define Y imag()\r\n#define vec(a,b) ((b)-(a))\r\n#define cross(a,b) ((conj(a)*(b)).imag())\r\n\r\nconst int N = 2005;\r\n\r\nstruct pointWithIndex{\r\n  point p;\r\n  int index;\r\n};\r\n\r\nint n;\r\nvector<pointWithIndex> points;\r\nstring dir;\r\n\r\nstruct cmp\r\n{\r\n    pointWithIndex about;\r\n    cmp(pointWithIndex c)\r\n    {\r\n        about = c;\r\n    }\r\n    bool operator()(const pointWithIndex& p, const pointWithIndex& q) const\r\n    {\r\n        return cross(vec(about.p, p.p), vec(about.p, q.p)) < 0;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n  cin >> n;\r\n  points.resize(n);\r\n  for(int i = 0 ; i < n ; i++){\r\n    int a, b;\r\n    cin >> a >> b;\r\n    points[i].p = point(a, b);\r\n    points[i].index = i + 1;\r\n  }\r\n  cin >> dir;\r\n  pointWithIndex cur;\r\n  int bestIndex = 0;\r\n  for(int i = 1 ; i < n ; i++){\r\n    if(make_pair(points[bestIndex].p.Y, points[bestIndex].p.X) > make_pair(points[i].p.Y, points[i].p.X))\r\n      bestIndex = i, cur = points[i];\r\n  }\r\n  points.erase(points.begin() + bestIndex);\r\n  vector<int> ans;\r\n  ans.push_back(bestIndex + 1);\r\n  for(int i = 0 ; i < sz(dir) ; i++){\r\n    sort(points.begin(), points.end(), cmp(cur));\r\n    if(dir[i] == 'R'){\r\n      cur = points[0];\r\n      ans.push_back(points[0].index);\r\n      points.erase(points.begin());\r\n    }else{\r\n      cur = points[sz(points) - 1];\r\n      ans.push_back(points[sz(points) - 1].index);\r\n      points.pop_back();\r\n    }\r\n  }\r\n  assert(sz(points) == 1);\r\n  ans.push_back(points[0].index);\r\n  for(int i = 0 ; i < sz(ans) ; i++)\r\n    cout << ans[i] << \" \";\r\n  cout << endl;\r\n  return 0;\r\n}"
}