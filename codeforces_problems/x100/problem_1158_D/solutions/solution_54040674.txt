{
    "id": 54040674,
    "contestId": 1158,
    "creationTimeSeconds": 1557676275,
    "relativeTimeSeconds": 4575,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "Farhod_Farmon"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 20,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define fi first\r\n#define se second\r\n\r\nconst int N = 2020;\r\nconst int Q = 1 << 21;\r\nconst long long mod = 1e9 + 7;\r\n\r\nusing namespace std;\r\n\r\nint n;\r\nbool dead[N];\r\npair < int, int > a[N];\r\n\r\nint ori(pair < int, int > a, pair < int, int > b, pair < int, int > c)\r\n{\r\n        long long f = 1ll * (b.fi - a.fi) * (c.se - a.se) - 1ll * (b.se - a.se) * (c.fi - a.fi);\r\n        if(f < 0){\r\n                return 1; // clock\r\n        } else if(f > 0){\r\n                return -1; // anti\r\n        }\r\n        return 0;\r\n}\r\n\r\nint root;\r\n\r\nbool cmp(int x, int y)\r\n{\r\n        return ori(a[root], a[x], a[y]) == 1;\r\n}\r\n\r\nvector < int > make()\r\n{\r\n        int h = -1;\r\n        for(int i = 1; i <= n; i++){\r\n                if(dead[i]){\r\n                        continue;\r\n                }\r\n                if(h == -1 || a[i] < a[h]){\r\n                        h = i;\r\n                }\r\n        }\r\n        vector < int > res;\r\n        res.push_back(h);\r\n        vector < int > v;\r\n        for(int i = 1; i <= n; i++){\r\n                if(dead[i] || i == h){\r\n                        continue;\r\n                }\r\n                v.push_back(i);\r\n        }\r\n        root = h;\r\n        sort(v.begin(), v.end(), cmp);\r\n        for(int x: v){\r\n                while(res.size() > 1 && ori(a[res[res.size() - 2]], a[res[res.size() - 1]], a[x]) == -1){\r\n                        res.pop_back();\r\n                }\r\n                res.push_back(x);\r\n        }\r\n        return res;\r\n}\r\n\r\nint main()\r\n{\r\n        //freopen(\"input.txt\", \"r\", stdin);\r\n        //freopen(\"output.txt\", \"w\", stdout);\r\n        //freopen(\"teleports.in\", \"r\", stdin);\r\n        //freopen(\"teleports.out\", \"w\", stdout);\r\n        ios_base::sync_with_stdio(0);\r\n\r\n        cin >> n;\r\n        for(int i = 1; i <= n; i++){\r\n                cin >> a[i].fi >> a[i].se;\r\n        }\r\n        string s;\r\n        cin >> s;\r\n\r\n        auto v = make();\r\n        vector < int > res;\r\n        int di;\r\n        if(s[0] == 'L'){\r\n                di = -1;\r\n                dead[v[1]] = true;\r\n                res.push_back(v[1]);\r\n                res.push_back(v[0]);\r\n        } else{\r\n                di = 1;\r\n                dead[v[0]] = true;\r\n                res.push_back(v[0]);\r\n                res.push_back(v[1]);\r\n        }\r\n        for(int i = 0; i < s.size(); i++){\r\n                v = make();\r\n                if(i + 1 < s.size() && s[i] != s[i + 1]){\r\n                        di *= -1;\r\n                }\r\n                dead[res.back()] = true;\r\n                int h = 0;\r\n                for(int j = 0; j < v.size(); j++){\r\n                        if(v[j] == res.back()){\r\n                                h = j;\r\n                        }\r\n                }\r\n                h = (h + di + v.size()) % (int)v.size();\r\n                res.push_back(v[h]);\r\n        }\r\n        for(int x: res){\r\n                cout << x << \" \";\r\n        }\r\n}\r\n"
}