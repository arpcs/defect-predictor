{
    "id": 54517984,
    "contestId": 1158,
    "creationTimeSeconds": 1558608970,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "ashwathbhat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define itn int\r\n#define all(x) (x).begin(), (x).end()\r\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\r\n\r\n#define random_shuffle(...) shuffle(__VA_ARGS__, rng)\r\n#define rand() rng()\r\n\r\nusing namespace std;\r\n\r\ninline int nxt() {\r\n\tint x;\r\n\tscanf(\"%d\", &x);\r\n\treturn x;\r\n}\r\n\r\nstruct Point {\r\n\tlong long x, y;\r\n\tint id;\r\n\r\n\tPoint operator -(const Point& p) const {\r\n\t\treturn {x - p.x, y - p.y, -1};\r\n\t}\r\n\r\n\tlong long vprod(const Point& p) const {\r\n\t\treturn x * p.y - y * p.x;\r\n\t}\r\n\r\n\tint half() const {\r\n\t\tif (y) {\r\n\t\t\treturn y < 0;\r\n\t\t} else {\r\n\t\t\treturn x < 0;\r\n\t\t}\r\n\t}\r\n\r\n\tpair<long long, long long> asPair() const {\r\n\t\treturn {x, y};\r\n\t}\r\n\r\n\tbool operator <(const Point& p) const {\r\n\t\treturn asPair() < p.asPair();\r\n\t}\r\n\r\n\tbool operator ==(const Point& p) const {\r\n\t\treturn asPair() == p.asPair();\r\n\t}\r\n};\r\n\r\nvector<Point> getConvexHull(vector<Point> pts) {\r\n\tint idx = min_element(all(pts)) - pts.begin();\r\n\tif (idx) {\r\n\t\tswap(pts[0], pts[idx]);\r\n\t}\r\n\tPoint o = pts[0];\r\n\tsort(pts.begin() + 1, pts.end(), [&](const Point& p, const Point& q) {\r\n\t\treturn (p - o).vprod(q - o) > 0;\r\n\t});\r\n\tvector<Point> ch = {o};\r\n\tfor (int i = 1; i < (int)pts.size(); ++i) {\r\n\t\twhile ((int)ch.size() >= 2 && (ch.back() - ch[(int)ch.size() - 2]).vprod(pts[i] - ch.back()) <= 0) {\r\n\t\t\tch.pop_back();\r\n\t\t}\r\n\t\tch.push_back(pts[i]);\r\n\t}\r\n\treturn ch;\r\n}\r\n\r\nint main() {\r\n\tmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n\r\n\tint n = nxt();\r\n\tvector<Point> pts(n);\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tpts[i].x = nxt();\r\n\t\tpts[i].y = nxt();\r\n\t\tpts[i].id = i;\r\n\t}\r\n\tstring s;\r\n\tcin >> s;\r\n\r\n\tvector<Point> ans;\r\n\tauto ch = getConvexHull(pts);\r\n\tans.push_back(ch[0]);\r\n\tfor (char c : s) {\r\n\t\tint idx = find(all(ch), ans.back()) - ch.begin();\r\n\t\tif (c == 'L') {\r\n\t\t\tidx += 1;\r\n\t\t} else {\r\n\t\t\tidx -= 1;\r\n\t\t}\r\n\t\tidx %= (int)ch.size();\r\n\t\tif (idx < 0) {\r\n\t\t\tidx += (int)ch.size();\r\n\t\t}\r\n\t\tpts.erase(find(all(pts), ans.back()));\r\n\t\tans.push_back(ch[idx]);\r\n\t\tch = getConvexHull(pts);\r\n\t}\r\n\tfor (const auto& p : pts) {\r\n\t\tif (p.id != ans.back().id) {\r\n\t\t\tans.push_back(p);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (const auto& p : ans) {\r\n\t\tprintf(\"%d \", p.id + 1);\r\n\t}\r\n\tprintf(\"\\n\");\r\n\r\n\treturn 0;\r\n}"
}