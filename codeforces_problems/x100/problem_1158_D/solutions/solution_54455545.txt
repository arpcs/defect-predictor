{
    "id": 54455545,
    "contestId": 1158,
    "creationTimeSeconds": 1558453256,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1158,
        "index": "D",
        "name": "Winding polygonal line",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1158,
        "members": [
            {
                "handle": "sunset"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1557671700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nstruct point {\n  int x, y;\n\n  point(int x = 0, int y = 0): x(x), y(y) {\n  }\n\n  long long operator * (const point &other) const {\n    return (long long) x * other.y - (long long) y * other.x;\n  }\n\n  point operator - (const point &other) const {\n    return point(x - other.x, y - other.y);\n  }\n\n  bool operator == (const point &other) const {\n    return x == other.x && y == other.y;\n  }\n\n  bool operator < (const point &other) const {\n    return x < other.x || (x == other.x && y < other.y);\n  }\n};\n\nvector<point> convex_hull(vector<point> points) {\n  if ((int) points.size() == 1) {\n    return points;\n  }\n  vector<point> hull;\n  for (int rot = 0; rot < 2; ++rot) {\n    int limit = hull.size();\n    for (auto p : points) {\n      while ((int) hull.size() > limit + 1 && (hull[hull.size() - 1] - hull[hull.size() - 2]) * (p - hull[hull.size() - 2]) <= 0) {\n        hull.pop_back();\n      }\n      hull.push_back(p);\n    }\n    hull.pop_back();\n    reverse(points.begin(), points.end());\n  }\n  return hull;\n}\n\nint main() {\n#ifdef wxh010910\n  freopen(\"input.txt\", \"r\", stdin);\n#endif\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cout.tie(0);\n  int n;\n  cin >> n;\n  map<point, int> index;\n  vector<point> p(n);\n  for (int i = 0; i < n; ++i) {\n    cin >> p[i].x >> p[i].y;\n    index[p[i]] = i + 1;\n  }\n  sort(p.begin(), p.end());\n  string s;\n  cin >> s;\n  s.push_back('L');\n  point last = convex_hull(p)[0];\n  cout << index[last];\n  for (int i = 0; i < n - 1; ++i) {\n    vector<point> q = convex_hull(p);\n    int j = find(q.begin(), q.end(), last) - q.begin();\n    p.erase(find(p.begin(), p.end(), last));\n    last = (s[i] == 'L' ? q[(j + 1) % q.size()] : q[(j + q.size() - 1) % q.size()]);\n    cout << \" \" << index[last];\n  }\n  cout << \"\\n\";\n  return 0;\n}\n"
}