{
    "id": 131088200,
    "contestId": 1571,
    "creationTimeSeconds": 1633623282,
    "relativeTimeSeconds": 5982,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Spheniscine"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 23552000,
    "source": "@file:Suppress(\"NOTHING_TO_INLINE\", \"EXPERIMENTAL_FEATURE_WARNING\", \"OVERRIDE_BY_INLINE\")\r\n@file:OptIn(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\r\n\r\nimport java.io.PrintWriter\r\nimport kotlin.math.*\r\nimport kotlin.random.Random\r\nimport kotlin.collections.sort as _sort\r\nimport kotlin.collections.sortDescending as _sortDescending\r\nimport kotlin.io.println as iprintln\r\n\r\nconst val INTERACTIVE = false\r\n\r\n/** @author Spheniscine */\r\nfun main() { _writer.solve(); _writer.flush() }\r\nfun PrintWriter.solve() {\r\n//    val startTime = System.nanoTime()\r\n\r\n    val numCases = 1//readInt()\r\n\r\n    case@ for(case in 1..numCases) {\r\n        val n = readInt()\r\n        var m = readInt()\r\n\r\n        val K = IntArray(n)\r\n        val T = IntArray(n) { i ->\r\n            K[i] = readInt()\r\n            readInt()\r\n        }\r\n\r\n        val ans = IntArray(n) { -1 }\r\n        val ok = run ok@ {\r\n            var sum = 0\r\n            for(i in 0 until n) {\r\n                if(T[i] == 1) {\r\n                    m -= K[i]\r\n                    if(m < 0) return@ok false\r\n                    ans[i] = m\r\n                } else sum += K[i]\r\n            }\r\n\r\n            val l = (m+1)/2\r\n            val path = IntArray(l+1) { -1 }\r\n            for(i in 0 until n) if(T[i] == 2) {\r\n                val k = K[i]\r\n                if(k > l) return@ok false\r\n                for(j in l downTo k+1) if(path[j-k] != -1 && path[j] == -1) path[j] = i\r\n                if(path[k] == -1) path[k] = i\r\n            }\r\n\r\n            var p = path.indexOfLast { it != -1 }\r\n            while(p > 0) {\r\n                val i = path[p]\r\n                val k = K[i]\r\n                p -= k\r\n                ans[i] = p*2\r\n            }\r\n\r\n            p = 1\r\n            for(i in 0 until n) if(ans[i] == -1) {\r\n                ans[i] = p\r\n                p += K[i] * 2\r\n                if(p-2 >= m) return@ok false\r\n            }\r\n\r\n            true\r\n        }\r\n\r\n        if(ok) println(ans.joinToString(\" \") { \"${it + 1}\" })\r\n        else println(-1)\r\n    }\r\n\r\n//    iprintln(\"Time: ${(System.nanoTime() - startTime) / 1000000} ms\")\r\n}\r\n\r\nclass IntList(initialCapacity: Int = 12) {\r\n    private var arr = IntArray(initialCapacity)\r\n    val _arr get() = arr\r\n    private val capacity get() = arr.size\r\n    var size = 0\r\n        private set\r\n    inline val lastIndex get() = size - 1\r\n    inline val indices get() = 0 until size\r\n\r\n    constructor(copyFrom: IntArray): this(copyFrom.size) { copyFrom.copyInto(arr); size = copyFrom.size }\r\n    constructor(copyFrom: Collection<Int>): this(copyFrom.size) { arr = copyFrom.toIntArray(); size = copyFrom.size }\r\n\r\n    fun contentEquals(other: IntList): Boolean {\r\n        return this === other || size == other.size && indices.all { this[it] == other[it] }\r\n    }\r\n\r\n    private fun grow(minCapacity: Int = 8) {\r\n        val newCapacity = maxOf(minCapacity, capacity + (capacity shr 1))\r\n        arr = arr.copyOf(newCapacity)\r\n    }\r\n\r\n    fun ensureCapacity(minCapacity: Int) { if(capacity < minCapacity) grow(minCapacity) }\r\n\r\n    operator fun get(index: Int): Int {\r\n        require(index in 0 until size)\r\n        return arr[index]\r\n    }\r\n\r\n    operator fun set(index: Int, value: Int) {\r\n        require(index in 0 until size)\r\n        arr[index] = value\r\n    }\r\n\r\n    fun add(value: Int) {\r\n        if(size == capacity) grow()\r\n        arr[size++] = value\r\n    }\r\n\r\n    fun addAll(list: IntList) {\r\n        ensureCapacity(size + list.size)\r\n        list.arr.copyInto(arr, size, 0, list.size)\r\n        size += list.size\r\n    }\r\n\r\n    fun add(index: Int, element: Int) {\r\n        if(size == capacity) grow()\r\n        arr.copyInto(arr, index + 1, index, size)\r\n        size++\r\n        set(index, element)\r\n    }\r\n\r\n    fun clear() { size = 0 }\r\n\r\n    fun removeAt(index: Int): Int {\r\n        val e = get(index)\r\n        arr.copyInto(arr, index, index + 1, size)\r\n        size--\r\n        return e\r\n    }\r\n\r\n    fun indexOf(e: Int): Int {\r\n        for(i in 0 until size) if(this[i] == e) return i\r\n        return -1\r\n    }\r\n\r\n    fun remove(e: Int): Boolean {\r\n        val i = indexOf(e)\r\n        if(i == -1) return false\r\n        removeAt(i)\r\n        return true\r\n    }\r\n\r\n    operator fun iterator() = object: IntIterator() {\r\n        private var pos = 0\r\n        override fun hasNext() = pos < size\r\n        override fun nextInt() = get(pos++)\r\n    }\r\n\r\n    inline fun isEmpty() = size == 0\r\n    inline fun isNotEmpty() = size != 0\r\n\r\n    fun pop() = arr[--size]\r\n\r\n    fun popToSize(s: Int) {\r\n        require(s >= 0)\r\n        if(s < size) size = s\r\n    }\r\n\r\n    fun swap(i: Int, j: Int) { val t = this[i]; this[i] = this[j]; this[j] = t }\r\n    fun reverse() {\r\n        for(i in 0 until size / 2) swap(i, lastIndex - i)\r\n    }\r\n\r\n    fun shuffle(rnd: Random = random) { for(i in lastIndex downTo 1) swap(i, rnd.nextInt(i+1)) }\r\n\r\n    inline fun sortWith(cmp: (Int, Int) -> Int) { _mergeSort(_arr, size, IntArray(size), IntArray::get, IntArray::set, cmp) }\r\n    inline fun <T: Comparable<T>> sortBy(func: (Int) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\r\n    inline fun <T: Comparable<T>> sortByDescending(func: (Int) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\r\n    fun sort() { sortBy { it } }\r\n    fun sortDescending() { sortByDescending { it } }\r\n\r\n    fun joinToString(separator: CharSequence) = if(size == 0) \"\" else let {\r\n        buildString {\r\n            append(it[0])\r\n            for (i in 1 until size) {\r\n                append(separator).append(it[i])\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun toString() = \"[\" + joinToString(\", \") + \"]\"\r\n\r\n    fun toIntArray() = arr.copyOf(size)\r\n    fun toList() = List(size, ::get)\r\n\r\n    inline fun first() = get(0)\r\n    inline fun last() = get(lastIndex)\r\n}\r\n\r\ninline fun IntList(size: Int, init: (Int) -> Int) = IntList(size).apply {\r\n    for(i in 0 until size) { add(init(i)) }\r\n}\r\ninline fun IntArray.toIntList() = IntList(this)\r\ninline fun Collection<Int>.toIntList() = IntList(this)\r\ninline fun intListOf(vararg values: Int) = IntList(values)\r\n\r\nfun IntList.max() = (1 until size).fold(this[0]) { acc, i -> max(acc, this[i]) }\r\nfun IntList.min() = (1 until size).fold(this[0]) { acc, i -> min(acc, this[i]) }\r\nfun IntList.getOrNull(i: Int) = if(i in indices) get(i) else null\r\ninline fun IntList.count(predicate: (Int) -> Boolean) = indices.count { predicate(this[it]) }\r\nfun IntList.copyOf() = IntList(size, ::get)\r\n\r\nfun IntArray.setMin(i: Int, v: Int) = if(v < get(i)) { set(i, v); true } else false\r\n\r\ninfix fun Int.divCeil(other: Int) =\r\n    (this / other).let { if(xor(other) >= 0 && it * other != this) it+1 else it }\r\n\r\ninline infix fun Int.divFloor(other: Int) = Math.floorDiv(this, other)\r\n\r\ninfix fun Long.divCeil(other: Long) =\r\n    (this / other).let { if(xor(other) >= 0 && it * other != this) it+1 else it }\r\ninline infix fun Long.divCeil(other: Int) = divCeil(other.toLong())\r\n\r\ninline infix fun Long.divFloor(other: Long) = Math.floorDiv(this, other)\r\n\r\ntailrec fun gcd(a: Long, b: Long): Long = if(a == 0L) abs(b) else gcd(b % a, a)\r\n\r\ntailrec fun gcd(a: Int, b: Int): Int = if(a == 0) abs(b) else gcd(b % a, a)\r\n\r\n/** IO */\r\n//@JvmField val ONLINE_JUDGE = System.getProperty(\"ONLINE_JUDGE\") != null\r\n//const val PATH = \"src/main/resources/\"\r\n//@JvmField val INPUT = File(PATH + \"input.txt\").inputStream()\r\n//@JvmField val OUTPUT = File(PATH + \"output.txt\").outputStream()\r\n\r\n@JvmField val INPUT = System.`in`\r\n@JvmField val OUTPUT = System.out\r\n\r\nconst val _BUFFER_SIZE = 1 shl 16\r\n@JvmField val _buffer = ByteArray(_BUFFER_SIZE)\r\n@JvmField var _bufferPt = 0\r\n@JvmField var _bytesRead = 0\r\n\r\ntailrec fun readChar(): Char {\r\n    if(!INTERACTIVE) {\r\n        if (_bufferPt == _bytesRead) {\r\n            _bufferPt = 0\r\n            _bytesRead = INPUT.read(_buffer, 0, _BUFFER_SIZE)\r\n        }\r\n        return if (_bytesRead < 0) Char.MIN_VALUE\r\n        else {\r\n            val c = _buffer[_bufferPt++].toChar()\r\n            if (c == '\\r') readChar() else c\r\n        }\r\n    } else {\r\n        val c = INPUT.read().let { it xor it.shr(8) }.toChar()\r\n        return if (c == '\\r') readChar() else c\r\n    }\r\n}\r\n\r\n/** @param skipNext Whether to skip the next character (usually whitespace), defaults to true */\r\nfun readCharArray(n: Int, skipNext: Boolean = true): CharArray {\r\n    val res = CharArray(n) { readChar() }\r\n    if(skipNext) readChar()\r\n    return res\r\n}\r\ninline fun readChars(n: Int, skipNext: Boolean = true) = readCharArray(n, skipNext)\r\n\r\nfun readLine(): String? {\r\n    var c = readChar()\r\n    return if(c == Char.MIN_VALUE) null\r\n    else buildString {\r\n        while(c != '\\n' && c != Char.MIN_VALUE) {\r\n            append(c)\r\n            c = readChar()\r\n        }\r\n    }\r\n}\r\nfun readLn() = readLine()!!\r\n\r\nfun read() = buildString {\r\n    var c = readChar()\r\n    while(c <= ' ') {\r\n        if(c == Char.MIN_VALUE) return@buildString\r\n        c = readChar()\r\n    }\r\n    do {\r\n        append(c)\r\n        c = readChar()\r\n    } while(c > ' ')\r\n}\r\nfun readInt() = read().toInt()\r\nfun readDouble() = read().toDouble()\r\nfun readLong() = read().toLong()\r\nfun readStrings(n: Int) = Array(n) { read() }\r\nfun readLines(n: Int) = Array(n) { readLn() }\r\nfun readInts(n: Int) = IntArray(n) { read().toInt() }\r\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\r\nfun readDoubles(n: Int) = DoubleArray(n) { read().toDouble() }\r\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\r\nfun readLongs(n: Int) = LongArray(n) { read().toLong() }\r\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\r\n\r\n@JvmField val _writer = PrintWriter(OUTPUT, false)\r\n\r\n/**  sort overrides to avoid quicksort attacks */\r\n\r\n@JvmField var _random: Random? = null\r\nval random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }\r\n\r\ninline fun <A, T> _mergeSort(a0: A, n: Int, tmp0: A, get: A.(Int) -> T, set: A.(Int, T) -> Unit, cmp: (T, T) -> Int) {\r\n    var a = a0\r\n    var tmp = tmp0\r\n    var len = 1\r\n    while(len < n) {\r\n        var l = 0\r\n        while(true) {\r\n            val m = l + len\r\n            if(m >= n) break\r\n            val r = min(n, m + len)\r\n            var i = l\r\n            var j = m\r\n            for(k in l until r) {\r\n                if(i != m && (j == r || cmp(a.get(i), a.get(j)) <= 0)) {\r\n                    tmp.set(k, a.get(i++))\r\n                } else tmp.set(k, a.get(j++))\r\n            }\r\n            l = r\r\n        }\r\n        for(i in l until n) tmp.set(i, a.get(i))\r\n        val t = a; a = tmp; tmp = t\r\n        len += len\r\n    }\r\n    if(a !== a0) for(i in 0 until n) a0.set(i, tmp0.get(i))\r\n}\r\n\r\ninline fun IntArray.sortWith(cmp: (Int, Int) -> Int) { _mergeSort(this, size, IntArray(size), IntArray::get, IntArray::set, cmp) }\r\ninline fun <T: Comparable<T>> IntArray.sortBy(func: (Int) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\r\ninline fun <T: Comparable<T>> IntArray.sortByDescending(func: (Int) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\r\nfun IntArray.sort() { sortBy { it } }\r\nfun IntArray.sortDescending() { sortByDescending { it } }\r\n\r\ninline fun LongArray.sortWith(cmp: (Long, Long) -> Int) { _mergeSort(this, size, LongArray(size), LongArray::get, LongArray::set, cmp) }\r\ninline fun <T: Comparable<T>> LongArray.sortBy(func: (Long) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\r\ninline fun <T: Comparable<T>> LongArray.sortByDescending(func: (Long) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\r\nfun LongArray.sort() { sortBy { it } }\r\nfun LongArray.sortDescending() { sortByDescending { it } }\r\n\r\ninline fun DoubleArray.sortWith(cmp: (Double, Double) -> Int) { _mergeSort(this, size, DoubleArray(size), DoubleArray::get, DoubleArray::set, cmp) }\r\ninline fun <T: Comparable<T>> DoubleArray.sortBy(func: (Double) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\r\ninline fun <T: Comparable<T>> DoubleArray.sortByDescending(func: (Double) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\r\nfun DoubleArray.sort() { sortBy { it } }\r\nfun DoubleArray.sortDescending() { sortByDescending { it } }\r\n\r\ninline fun CharArray.sort() { _sort() }\r\ninline fun CharArray.sortDescending() { _sortDescending() }\r\n\r\ninline fun <T : Comparable<T>> Array<out T>.sort() = _sort()\r\ninline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()\r\ninline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()\r\ninline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()\r\n\r\n// import preserving junk function\r\n@Suppress(\"NonAsciiCharacters\") fun \u96ea\u82b1\u98c4\u98c4\u5317\u98a8\u562f\u562f\u5929\u5730\u4e00\u7247\u84bc\u832b() { iprintln(max(1, 2)) }\r\n\r\nfun IntArray.sumLong() = sumOf { it.toLong() }\r\n\r\nfun IntArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\r\nfun IntArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\r\nfun LongArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\r\nfun LongArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\r\nfun DoubleArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\r\nfun DoubleArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\r\nfun <T: Comparable<T>> Array<T>.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\r\nfun <T: Comparable<T>> Array<T>.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\r\nfun <T: Comparable<T>> List<T>.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\r\nfun <T: Comparable<T>> List<T>.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\r\n\r\n// max/min Kotlin 1.6 -> 1.4 shim\r\nfun IntArray.max() = maxOf { it }\r\nfun IntArray.min() = minOf { it }\r\nfun LongArray.max() = maxOf { it }\r\nfun LongArray.min() = minOf { it }\r\nfun CharArray.max() = maxOf { it }\r\nfun CharArray.min() = minOf { it }\r\nfun <T : Comparable<T>> Iterable<T>.max() = maxOf { it }\r\nfun <T : Comparable<T>> Iterable<T>.min() = minOf { it }\r\nfun <T : Comparable<T>> Sequence<T>.max() = maxOf { it }\r\nfun <T : Comparable<T>> Sequence<T>.min() = minOf { it }"
}