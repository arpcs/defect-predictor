{
    "id": 131102808,
    "contestId": 1571,
    "creationTimeSeconds": 1633638942,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "korifey"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 1668,
    "memoryConsumedBytes": 261734400,
    "source": "import java.util.*\r\nimport kotlin.math.abs\r\nimport kotlin.math.max\r\n\r\n\r\nfun main(args: Array<String>) {\r\n    val scanner = Scanner(System.`in`)\r\n    val n = scanner.nextInt()\r\n    val m = scanner.nextInt()\r\n\r\n    val k = IntArray(n)\r\n    val t = IntArray(n)\r\n    for (i in 0 until n) {\r\n        k[i] = scanner.nextInt()\r\n        t[i] = scanner.nextInt()\r\n    }\r\n\r\n    val answer = IntArray(n)\r\n    var n1 = 0\r\n    var slots1 = 0\r\n    var slots2 = 0\r\n    for (i in 0 until n) {\r\n        if (t[i] == 1) {\r\n            n1++\r\n            answer[i] = slots1+1\r\n            slots1 += k[i]\r\n        } else { //t[i] == 2\r\n            slots2 += k[i]\r\n        }\r\n    }\r\n\r\n    if (m < slots1 + slots2) { //simply not enough space\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n    val maps = Array<MutableMap<Int,Int>>(n) { mutableMapOf()}\r\n    var prevMap = mutableMapOf(0 to 0)\r\n    var prevIdx = 0\r\n    for (i in n1 until n) {\r\n        while (t[prevIdx] != 2) prevIdx++\r\n        for ((key, _) in prevMap) {\r\n            maps[i][key-k[i]] = -1\r\n            maps[i][key+k[i]] = 1\r\n        }\r\n\r\n        prevMap = maps[i]\r\n        prevIdx++\r\n    }\r\n\r\n    var diff = (0..m).first { prevMap.containsKey(it) }\r\n    if (m < slots1 + slots2 + max(diff - 1, 0)) { //extra cells\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n    var oddIndex = slots1+1\r\n    var evenIdx = slots1+2\r\n\r\n    for (i in n-1 downTo n1) {\r\n        val v = maps[i][diff]!!\r\n        diff -= v*k[i]\r\n        if (v > 0) {\r\n            answer[i] = oddIndex\r\n            oddIndex += k[i]*2\r\n        } else {\r\n            answer[i] = evenIdx\r\n            evenIdx += k[i]*2\r\n        }\r\n    }\r\n\r\n    print(answer.joinToString(\" \"))\r\n}"
}