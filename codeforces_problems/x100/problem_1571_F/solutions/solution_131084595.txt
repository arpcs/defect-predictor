{
    "id": 131084595,
    "contestId": 1571,
    "creationTimeSeconds": 1633621151,
    "relativeTimeSeconds": 3851,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "uwi"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 26316800,
    "source": "//package kh8\r\nimport java.io.PrintWriter\r\nimport java.util.*\r\nimport kotlin.system.measureTimeMillis\r\n\r\nclass F {\r\n    fun solve() {\r\n        var (n, m) = na()\r\n        var kts = mutableListOf<IntArray>()\r\n        for(i in 0..n-1){\r\n            kts.add(na().toIntArray())\r\n        }\r\n\r\n        var ret = IntArray(n)\r\n        var day = m\r\n        for(i in 0..n-1){\r\n            if(kts[i][1] == 1){\r\n                day -= kts[i][0]\r\n                ret[i] = day + 1\r\n            }\r\n        }\r\n        if(day < 0){\r\n            out.println(-1)\r\n            return\r\n        }\r\n        var e = (day+1)/2\r\n        var s = 0\r\n        for(kt in kts){\r\n            if(kt[1] == 2){\r\n                s += kt[0]\r\n            }\r\n        }\r\n        if(s > day){\r\n            out.println(-1)\r\n            return\r\n        }\r\n        var dp = mutableListOf<BooleanArray>()\r\n        dp.add(BooleanArray(e+1))\r\n        dp[0][0] = true\r\n        var ids = IntArray(n)\r\n        for(j in 0..n-1){\r\n            var kt = kts[j]\r\n            if(kt[1] == 2) {\r\n                dp.add(BooleanArray(e + 1))\r\n                var p = dp.size - 1\r\n                ids[p-1] = j\r\n                for (i in 0..e-kt[0]) {\r\n                    dp[p][i+kt[0]] = dp[p][i+kt[0]] || dp[p-1][i]\r\n                }\r\n                for (i in 0..e) {\r\n                    dp[p][i] = dp[p][i] || dp[p-1][i]\r\n                }\r\n            }\r\n        }\r\n        for(ind in e downTo 0){\r\n            if(dp[dp.size-1][ind]){\r\n                if(s-ind > day-e){\r\n                    out.println(-1)\r\n                    return\r\n                }\r\n                var v = ind\r\n                var td = 1\r\n                for(h in dp.size-1 downTo 1){\r\n                    if(!dp[h-1][v]){\r\n                        var tid = ids[h-1]\r\n                        v -= kts[tid][0]\r\n                        ret[tid] = td\r\n                        td += 2 * kts[tid][0]\r\n                    }\r\n                }\r\n\r\n                td = 2\r\n                for(i in 0..n-1){\r\n                    if(ret[i] == 0){\r\n                        ret[i] = td\r\n                        td += 2*kts[i][0]\r\n                    }\r\n                    out.print(ret[i])\r\n                    out.print(\" \")\r\n                }\r\n                out.println()\r\n\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    val out = PrintWriter(System.out)\r\n\r\n    fun run() {\r\n        tr(measureTimeMillis {\r\n            solve()\r\n            out.flush()\r\n        })\r\n    }\r\n\r\n    fun nline() = readLine()!!\r\n    fun ni() = nline().toInt()\r\n    fun nl() = nline().toLong()\r\n    fun nd() = nline().toDouble()\r\n    fun nas() = nline().split(\" \")\r\n    fun na() = nas().map { it.toInt() }\r\n    fun nal() = nas().map { it.toLong() }\r\n\r\n    fun tr(vararg x: Any) = System.err.println(Arrays.deepToString(x))\r\n}\r\n\r\n// TODO\r\nfun main() = F().run()\r\n"
}