{
    "id": 131083333,
    "contestId": 1571,
    "creationTimeSeconds": 1633620478,
    "relativeTimeSeconds": 3178,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "eatmore"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.io.PrintWriter\nimport java.util.*\n\nfun solve() {\n    val n = scanInt()\n    val m = scanInt()\n    val k = IntArray(n)\n    val t = IntArray(m)\n    var ksum = 0\n    for (i in 0 until n) {\n        k[i] = scanInt()\n        t[i] = scanInt()\n        ksum += k[i]\n    }\n    if (ksum > m) {\n        out.print(-1)\n        return\n    }\n    val ans = IntArray(n)\n    Arrays.fill(ans, -1)\n    var cur = 0\n    for (i in 0 until n) {\n        if (t[i] == 1) {\n            ans[i] = cur\n            cur += k[i]\n        }\n    }\n    ksum -= cur\n    val odd = (m - cur) / 2\n    val even = (m - cur + 1) / 2\n    val min = Math.max(0, ksum - odd)\n    val max = Math.min(even, ksum)\n    val back = IntArray(max + 1)\n    Arrays.fill(back, -1)\n    back[0] = -2\n    for (i in 0 until n) {\n        if (t[i] == 1) {\n            continue\n        }\n        val ck = k[i]\n        for (j in max - ck downTo 0) {\n            if (back[j] != -1 && back[j + ck] == -1) {\n                back[j + ck] = i\n            }\n        }\n    }\n    var i = min\n    while (i <= max) {\n        if (back[i] != -1) {\n            var cur1 = cur\n            while (i != 0) {\n                ans[back[i]] = cur1\n                cur1 += 2 * k[back[i]]\n                i -= k[back[i]]\n            }\n            var cur2 = cur + 1\n            i = 0\n            while (i < n) {\n                if (ans[i] < 0) {\n                    ans[i] = cur2\n                    cur2 += 2 * k[i]\n                }\n                out.print(ans[i] + 1 + \" \")\n                i++\n            }\n            return\n        }\n        i++\n    }\n    out.print(-1)\n}\n\nfun scanInt(): Int {\n    return scanString().toInt()\n}\n\nfun scanLong(): Long {\n    return scanString().toLong()\n}\n\nfun scanString(): String {\n    var t = tok\n    while (t == null || !t.hasMoreTokens()) {\n        t = StringTokenizer(inp.readLine())\n        tok = t\n    }\n    return t.nextToken()\n}\n\nval inp = BufferedReader(InputStreamReader(System.`in`))\nval out = PrintWriter(System.out)\nvar tok: StringTokenizer? = null\nfun main() {\n    solve()\n    inp.close()\n    out.close()\n}"
}