{
    "id": 131118701,
    "contestId": 1571,
    "creationTimeSeconds": 1633670210,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Spheniscine"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 23347200,
    "source": "@file:Suppress(\"NOTHING_TO_INLINE\", \"EXPERIMENTAL_FEATURE_WARNING\", \"OVERRIDE_BY_INLINE\")\n@file:OptIn(ExperimentalUnsignedTypes::class, ExperimentalStdlibApi::class)\n\nimport java.io.PrintWriter\nimport java.util.TreeMap\nimport kotlin.math.*\nimport kotlin.random.Random\nimport kotlin.collections.sort as _sort\nimport kotlin.collections.sortDescending as _sortDescending\nimport kotlin.io.println as iprintln\n\nconst val INTERACTIVE = false\n\n/** @author Spheniscine */\nfun main() { _writer.solve(); _writer.flush() }\nfun PrintWriter.solve() {\n//    val startTime = System.nanoTime()\n\n    val numCases = 1//readInt()\n\n    case@ for(case in 1..numCases) {\n        val n = readInt()\n        var m = readInt()\n\n        val K = IntArray(n)\n        val T = IntArray(n) { i ->\n            K[i] = readInt()\n            readInt()\n        }\n\n        val ans = IntArray(n) { -1 }\n        val ok = run ok@ {\n            for(i in 0 until n) {\n                if(T[i] == 1) {\n                    m -= K[i]\n                    if(m < 0) return@ok false\n                    ans[i] = m\n                }\n            }\n\n            val l = (m+1)/2\n            val path = IntArray(l+1) { -1 }\n            for(i in 0 until n) if(T[i] == 2) {\n                val k = K[i]\n                if(k > l) return@ok false\n                for(j in l downTo k+1) if(path[j-k] != -1 && path[j] == -1) path[j] = i\n                if(path[k] == -1) path[k] = i\n            }\n\n            var p = path.indexOfLast { it != -1 }\n            while(p > 0) {\n                val i = path[p]\n                val k = K[i]\n                p -= k\n                ans[i] = p*2\n            }\n\n            p = 1\n            for(i in 0 until n) if(ans[i] == -1) {\n                ans[i] = p\n                p += K[i] * 2\n                if(p-2 >= m) return@ok false\n            }\n\n            true\n        }\n\n        if(ok) println(ans.joinToString(\" \") { \"${it + 1}\" })\n        else println(-1)\n    }\n\n//    iprintln(\"Time: ${(System.nanoTime() - startTime) / 1000000} ms\")\n}\n\nfun IntArray.setMax(i: Int, v: Int) = if(v > get(i)) { set(i, v); true } else false\nfun IntArray.setMin(i: Int, v: Int) = if(v < get(i)) { set(i, v); true } else false\n\nfun LongArray.setMax(i: Int, v: Long) = if(v > get(i)) { set(i, v); true } else false\nfun LongArray.setMin(i: Int, v: Long) = if(v < get(i)) { set(i, v); true } else false\n\ninfix fun Int.divCeil(other: Int) =\n    (this / other).let { if(xor(other) >= 0 && it * other != this) it+1 else it }\n\ninline infix fun Int.divFloor(other: Int) = Math.floorDiv(this, other)\n\ninfix fun Long.divCeil(other: Long) =\n    (this / other).let { if(xor(other) >= 0 && it * other != this) it+1 else it }\ninline infix fun Long.divCeil(other: Int) = divCeil(other.toLong())\n\ninline infix fun Long.divFloor(other: Long) = Math.floorDiv(this, other)\n\ntailrec fun gcd(a: Long, b: Long): Long = if(a == 0L) abs(b) else gcd(b % a, a)\n\ntailrec fun gcd(a: Int, b: Int): Int = if(a == 0) abs(b) else gcd(b % a, a)\n\n/** IO */\n//@JvmField val ONLINE_JUDGE = System.getProperty(\"ONLINE_JUDGE\") != null\n//const val PATH = \"src/main/resources/\"\n//@JvmField val INPUT = File(PATH + \"input.txt\").inputStream()\n//@JvmField val OUTPUT = File(PATH + \"output.txt\").outputStream()\n\n@JvmField val INPUT = System.`in`\n@JvmField val OUTPUT = System.out\n\nconst val _BUFFER_SIZE = 1 shl 16\n@JvmField val _buffer = ByteArray(_BUFFER_SIZE)\n@JvmField var _bufferPt = 0\n@JvmField var _bytesRead = 0\n\ntailrec fun readChar(): Char {\n    if(!INTERACTIVE) {\n        if (_bufferPt == _bytesRead) {\n            _bufferPt = 0\n            _bytesRead = INPUT.read(_buffer, 0, _BUFFER_SIZE)\n        }\n        return if (_bytesRead < 0) Char.MIN_VALUE\n        else {\n            val c = _buffer[_bufferPt++].toChar()\n            if (c == '\\r') readChar() else c\n        }\n    } else {\n        val c = INPUT.read().let { it xor it.shr(8) }.toChar()\n        return if (c == '\\r') readChar() else c\n    }\n}\n\n/** @param skipNext Whether to skip the next character (usually whitespace), defaults to true */\nfun readCharArray(n: Int, skipNext: Boolean = true): CharArray {\n    val res = CharArray(n) { readChar() }\n    if(skipNext) readChar()\n    return res\n}\ninline fun readChars(n: Int, skipNext: Boolean = true) = readCharArray(n, skipNext)\n\nfun readLine(): String? {\n    var c = readChar()\n    return if(c == Char.MIN_VALUE) null\n    else buildString {\n        while(c != '\\n' && c != Char.MIN_VALUE) {\n            append(c)\n            c = readChar()\n        }\n    }\n}\nfun readLn() = readLine()!!\n\nfun read() = buildString {\n    var c = readChar()\n    while(c <= ' ') {\n        if(c == Char.MIN_VALUE) return@buildString\n        c = readChar()\n    }\n    do {\n        append(c)\n        c = readChar()\n    } while(c > ' ')\n}\nfun readInt() = read().toInt()\nfun readDouble() = read().toDouble()\nfun readLong() = read().toLong()\nfun readStrings(n: Int) = Array(n) { read() }\nfun readLines(n: Int) = Array(n) { readLn() }\nfun readInts(n: Int) = IntArray(n) { read().toInt() }\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\nfun readDoubles(n: Int) = DoubleArray(n) { read().toDouble() }\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\nfun readLongs(n: Int) = LongArray(n) { read().toLong() }\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\n\n@JvmField val _writer = PrintWriter(OUTPUT, false)\n\n/**  sort overrides to avoid quicksort attacks */\n\n@JvmField var _random: Random? = null\nval random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }\n\ninline fun <A, T> _mergeSort(a0: A, n: Int, tmp0: A, get: A.(Int) -> T, set: A.(Int, T) -> Unit, cmp: (T, T) -> Int) {\n    var a = a0\n    var tmp = tmp0\n    var len = 1\n    while(len < n) {\n        var l = 0\n        while(true) {\n            val m = l + len\n            if(m >= n) break\n            val r = min(n, m + len)\n            var i = l\n            var j = m\n            for(k in l until r) {\n                if(i != m && (j == r || cmp(a.get(i), a.get(j)) <= 0)) {\n                    tmp.set(k, a.get(i++))\n                } else tmp.set(k, a.get(j++))\n            }\n            l = r\n        }\n        for(i in l until n) tmp.set(i, a.get(i))\n        val t = a; a = tmp; tmp = t\n        len += len\n    }\n    if(a !== a0) for(i in 0 until n) a0.set(i, tmp0.get(i))\n}\n\ninline fun IntArray.sortWith(cmp: (Int, Int) -> Int) { _mergeSort(this, size, IntArray(size), IntArray::get, IntArray::set, cmp) }\ninline fun <T: Comparable<T>> IntArray.sortBy(func: (Int) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\ninline fun <T: Comparable<T>> IntArray.sortByDescending(func: (Int) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\nfun IntArray.sort() { sortBy { it } }\nfun IntArray.sortDescending() { sortByDescending { it } }\n\ninline fun LongArray.sortWith(cmp: (Long, Long) -> Int) { _mergeSort(this, size, LongArray(size), LongArray::get, LongArray::set, cmp) }\ninline fun <T: Comparable<T>> LongArray.sortBy(func: (Long) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\ninline fun <T: Comparable<T>> LongArray.sortByDescending(func: (Long) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\nfun LongArray.sort() { sortBy { it } }\nfun LongArray.sortDescending() { sortByDescending { it } }\n\ninline fun DoubleArray.sortWith(cmp: (Double, Double) -> Int) { _mergeSort(this, size, DoubleArray(size), DoubleArray::get, DoubleArray::set, cmp) }\ninline fun <T: Comparable<T>> DoubleArray.sortBy(func: (Double) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\ninline fun <T: Comparable<T>> DoubleArray.sortByDescending(func: (Double) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\nfun DoubleArray.sort() { sortBy { it } }\nfun DoubleArray.sortDescending() { sortByDescending { it } }\n\ninline fun CharArray.sort() { _sort() }\ninline fun CharArray.sortDescending() { _sortDescending() }\n\ninline fun <T : Comparable<T>> Array<out T>.sort() = _sort()\ninline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()\ninline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()\ninline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()\n\n// import preserving junk function\n@Suppress(\"NonAsciiCharacters\") fun \u96ea\u82b1\u98c4\u98c4\u5317\u98a8\u562f\u562f\u5929\u5730\u4e00\u7247\u84bc\u832b() { iprintln(max(1, 2)) }\n\nfun IntArray.sumLong() = sumOf { it.toLong() }\n\nfun IntArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun IntArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun LongArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun LongArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun DoubleArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun DoubleArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun <T: Comparable<T>> Array<T>.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun <T: Comparable<T>> Array<T>.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun <T: Comparable<T>> List<T>.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun <T: Comparable<T>> List<T>.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\n\n// max/min Kotlin 1.6 -> 1.4 shim\nfun IntArray.max() = maxOf { it }\nfun IntArray.min() = minOf { it }\nfun LongArray.max() = maxOf { it }\nfun LongArray.min() = minOf { it }\nfun CharArray.max() = maxOf { it }\nfun CharArray.min() = minOf { it }\nfun <T : Comparable<T>> Iterable<T>.max() = maxOf { it }\nfun <T : Comparable<T>> Iterable<T>.min() = minOf { it }\nfun <T : Comparable<T>> Sequence<T>.max() = maxOf { it }\nfun <T : Comparable<T>> Sequence<T>.min() = minOf { it }"
}