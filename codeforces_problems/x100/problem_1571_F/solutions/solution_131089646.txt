{
    "id": 131089646,
    "contestId": 1571,
    "creationTimeSeconds": 1633625732,
    "relativeTimeSeconds": 8432,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Denzed"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 24064000,
    "source": "import kotlin.math.abs\r\n\r\nfun readInt() = readLine()!!.toInt()\r\nfun readInts() = readLine()!!.split(\" \").map { it.toInt() }\r\n\r\nfun main() {\r\n    val (n, m) = readInts()\r\n    val stages = Array(n) {\r\n        val (k, t) = readInts()\r\n        k to t\r\n    }\r\n\r\n    var continuousTotalLength = 0\r\n    var alternatingTotalLength = 0\r\n    val alternatingPossibleSums = Array(m + 1) { false }\r\n    alternatingPossibleSums[0] = true\r\n    val alternatingPossibleSumsLast = Array(m + 1) { -1 }\r\n    for (i in 0 until n) {\r\n        val (k, t) = stages[i]\r\n\r\n        if (t == 1 || k == 1)\r\n            continuousTotalLength += k\r\n        else {\r\n            alternatingTotalLength += k\r\n            for (j in m - k downTo 0) {\r\n                if (alternatingPossibleSums[j] && !alternatingPossibleSums[j + k]) {\r\n                    alternatingPossibleSums[j + k] = true\r\n                    alternatingPossibleSumsLast[j + k] = i\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    var left = -1\r\n    for (i in Integer.min((m - continuousTotalLength + 1) / 2, alternatingTotalLength) downTo 0) {\r\n        if (alternatingPossibleSums[i] && alternatingTotalLength - i <= (m - continuousTotalLength) / 2) {\r\n            left = i\r\n            break\r\n        }\r\n    }\r\n\r\n    if (left == -1) {\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n    val starts = Array(n) { -1 }\r\n\r\n    var currentDay = 1\r\n    for (i in 0 until n)\r\n        if (stages[i].second == 1) {\r\n            starts[i] = currentDay\r\n            currentDay += stages[i].first\r\n        }\r\n\r\n    val currentDayAlternating = currentDay + 1\r\n\r\n    while (left > 0) {\r\n        val i = alternatingPossibleSumsLast[left]\r\n\r\n        starts[i] = currentDay\r\n        left -= stages[i].first\r\n        currentDay += 2 * stages[i].first\r\n    }\r\n\r\n    currentDay = currentDayAlternating\r\n    for (i in 0 until n)\r\n        if (starts[i] == -1) {\r\n            starts[i] = currentDay\r\n            currentDay += 2 * stages[i].first\r\n        }\r\n\r\n    println(starts.joinToString(\" \"))\r\n}"
}