{
    "id": 131086160,
    "contestId": 1571,
    "creationTimeSeconds": 1633622028,
    "relativeTimeSeconds": 4728,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "nuip"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 165888000,
    "source": "import java.io.PrintWriter\nimport java.util.*\n\nval pw = PrintWriter(System.out)\nfun main() {\n    _writer.solve(); _writer.flush()\n}\n\nfun PrintWriter.solve() {\n    val n=readInt()\n    val m=readInt()\n    val ps=List(n){read(0) to read(0)}\n    val dp=List(n+1){IntArray(m+1){-1} }\n    dp[0][0]=0;\n    for(i in 0..n-1){\n        for(j in 0..m)if(dp[i][j]>=0) dp[i+1][j]=j\n        if(ps[i].second==2){\n            val t=ps[i].first\n            for(j in 0..m-t)if(dp[i][j]>=0) dp[i+1][j+t]=j\n        }\n    }\n    val sum1=ps.sumOf { (a,b) -> if(b==1) a else 0 }\n    val sum2=ps.sumOf { (a,b) -> if(b==2) a else 0 }\n    val rej=run{\n        for(j in 0..m)if(sum1+j*2-1<=m && sum1+(sum2-j)*2<=m && dp[n][j]>=0) return@run j\n        -1\n    }\n    if(rej<0){\n        println(-1)\n        return\n    }\n    val re0= MutableList(0){0}\n    val re1= MutableList(0){0}\n    val re2= MutableList(0){0}\n    run{\n        var j=rej\n        for(i in n downTo 1) {\n            if(dp[i][j]!=j){\n                re0.add(i-1)\n            }else if(ps[i-1].second==2){\n                re1.add(i-1)\n            }else{\n                re2.add(i-1)\n            }\n            j=dp[i][j]\n        }\n    }\n    val re= MutableList(n){0}\n    var cnt2=0\n    for(i in re2){\n        re[i]=cnt2\n        cnt2+=ps[i].first\n    }\n    var cnt0=cnt2\n    var cnt1=cnt2+1\n    for(i in re0){\n        re[i]=cnt0\n        cnt0+=ps[i].first*2\n    }\n    for(i in re1){\n        re[i]=cnt1\n        cnt1+=ps[i].first*2\n    }\n    println(re.map { it + 1 }.joinToString(\" \"))\n}\n\n@JvmField\nval INPUT = System.`in`\n\n@JvmField\nval OUTPUT = System.out\n\n@JvmField\nval _reader = INPUT.bufferedReader()\nfun readLine(): String? = _reader.readLine()\nfun readLn() = _reader.readLine()!!\n\n@JvmField\nvar _tokenizer: StringTokenizer = StringTokenizer(\"\")\nfun _read(): String {\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\n    return _tokenizer.nextToken()\n}\n\nfun readInt() = _read().toInt()\nfun readDouble() = _read().toDouble()\nfun readLong() = _read().toLong()\nfun readString() = _read()\nfun readVString(n: Int) = List(n) { _read() }\nfun readLines(n: Int) = List(n) { readLn() }\nfun readVInt(n: Int) = List(n) { _read().toInt() }\nfun readAInt(n: Int) = IntArray(n) { _read().toInt() }\nfun readVDouble(n: Int) = List(n) { _read().toDouble() }\nfun readADouble(n: Int) = DoubleArray(n) { _read().toDouble() }\nfun readVLong(n: Int) = List(n) { _read().toLong() }\nfun readALong(n: Int) = LongArray(n) { _read().toLong() }\nfun read(d: Int) = readInt() - d\nfun read(d: Long) = readInt() - d\nfun readV(n: Int, d: Int) = readVInt(n).map { x -> x - d }\nfun readV(n: Int, d: Long) = readVLong(n).map { x -> x - d }\nfun readA(n: Int, d: Int) = readAInt(n).map { x -> x - d }\nfun readA(n: Int, d: Long) = readALong(n).map { x -> x - d }\n\n@JvmField\nval _writer = PrintWriter(OUTPUT, false)\ninline fun output(block: PrintWriter.() -> Unit) {\n    _writer.apply(block).flush()\n}\n\n// old\n//fun next() = readLine()!!\n//fun nint() = next().toInt()\n//fun nlong() = next().toLong()\n//fun ndouble() = next().toDouble()\n//fun nlstring() = next().split(\" \")\n//fun nlint() = nlstring().map { it.toInt() }\n//fun nllong() = nlstring().map { it.toLong() }\n//fun nldouble() = nlstring().map { it.toDouble() }\n//fun reads() = next()\n//fun readi() = nint()\n//fun readl() = nlong()\n//fun readd() = ndouble()\n//fun readVs() = nlstring()\n//fun readVi() = nlint()\n//fun readVl() = nllong()\n//fun readVd() = nldouble()\n//\n//fun read() = readl()\n//fun readV() = readVl()\n"
}