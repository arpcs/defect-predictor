{
    "id": 131089332,
    "contestId": 1571,
    "creationTimeSeconds": 1633624965,
    "relativeTimeSeconds": 7665,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "kartel"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 452,
    "memoryConsumedBytes": 294502400,
    "source": "import java.util.Scanner\r\nimport java.util.*\r\nimport java.io.*\r\nimport java.lang.AssertionError\r\n\r\nprivate fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n\r\nfun main() {\r\n    val q = 1\r\n    for (qq in 0 until q) {\r\n        var (n, m) = readInts()\r\n        var a = Array<Pair<Int, Int> >(n, {Pair(0, 0)})\r\n        var f = Array<IntArray>(m + 10, {IntArray(m + 10, {100000})})\r\n        var pr = Array<IntArray>(m + 10, {IntArray(m + 10, {-2})})\r\n        var id = Array<Int>(m + 10, {0})\r\n        var ans = Array<Int>(n, {0})\r\n        var sum = 0\r\n        for (i in 0 until n) {\r\n            val (x, y) = readInts()\r\n            a[i] = Pair(x, y)\r\n            if (y == 1) {\r\n                ans[i] = sum + 1\r\n                sum += x\r\n            }\r\n        }\r\n        if (sum > m) {\r\n            println(\"-1\")\r\n            continue\r\n        }\r\n        var len = m - sum\r\n        var ind = 0\r\n        f[0][1] = 2\r\n        for (i in 0 until n) {\r\n            if (a[i].second == 1) {\r\n                continue\r\n            }\r\n            var j = 1\r\n            var k = a[i].first\r\n            while (j <= len + 2) {\r\n                if (j + 2 * k <= len + 2 && f[ind + 1][j + 2 * k] > f[ind][j]) {\r\n                    f[ind + 1][j + 2 * k] = f[ind][j]\r\n                    pr[ind + 1][j + 2 * k] = -1\r\n                }\r\n                if (f[ind + 1][j] > f[ind][j] + 2 * k) {\r\n                    f[ind + 1][j] = f[ind][j] + 2 * k\r\n                    pr[ind + 1][j] = 1\r\n                }\r\n                j += 2\r\n            }\r\n            ind++\r\n            id[ind] = i\r\n        }\r\n        var fnd = 0\r\n        for (i in 1..len+2) {\r\n            if (f[ind][i] - 2 <= len) {\r\n                var I = ind\r\n                var J = i\r\n                while (I > 0) {\r\n                    var nJ = J\r\n                    if (pr[I][J] == 1) {\r\n                        ans[id[I]] = sum + f[I][J] - 2 * a[id[I]].first\r\n                    } else {\r\n                        nJ -= 2 * a[id[I]].first\r\n                        ans[id[I]] = sum + nJ\r\n                    }\r\n                    I--\r\n                    J = nJ\r\n                }\r\n                fnd = 1\r\n                break\r\n            }\r\n        }\r\n        if (fnd == 0 && ind > 0) {\r\n            println(\"-1\")\r\n            return\r\n        }\r\n        for (i in 0 until n) {\r\n            val x = ans[i]\r\n            print(\"$x \")\r\n        }\r\n    }\r\n}"
}