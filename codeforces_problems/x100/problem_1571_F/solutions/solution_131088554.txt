{
    "id": 131088554,
    "contestId": 1571,
    "creationTimeSeconds": 1633623788,
    "relativeTimeSeconds": 6488,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "BohdanPastuschak"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 82124800,
    "source": "private fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n\r\nfun solve(a: MutableList<Int>): IntArray {\r\n    val n = a.size\r\n    var sum = 0\r\n    for(i in 0 until n){\r\n        sum += a[i]\r\n    }\r\n\r\n    var res = IntArray(n)\r\n\r\n    var dp = Array(n + 1) {IntArray(sum + 1)}\r\n    for(i in 0..n){\r\n        for(j in 0..sum){\r\n            dp[i][j] = -1\r\n        }\r\n    }\r\n\r\n    dp[0][0] = 1\r\n    for(i in 0 until n){\r\n        for(j in 0 until sum){\r\n            if (dp[i][j] != -1){\r\n                dp[i + 1][j + a[i]] = 1\r\n                dp[i + 1][j] = 0\r\n            }\r\n        }\r\n    }\r\n\r\n    var tut = -1\r\n    var shar = n\r\n    for(i in 0..sum) if (i >= sum - i && dp[n][i] != -1) {\r\n        tut = i\r\n        break\r\n    }\r\n\r\n    while(shar > 0){\r\n        res[shar - 1] = dp[shar][tut]\r\n        if (dp[shar][tut] == 1) tut -= a[shar - 1]\r\n        shar--\r\n    }\r\n\r\n    /*for(i in res){\r\n        print(\"$i \")\r\n    }\r\n    println()*/\r\n    return res\r\n}\r\n\r\nfun main(){\r\n    val (n, m) = readInts()\r\n    var data = Array(n) {IntArray(2)}\r\n    for(i in 0 until n){\r\n        data[i] = readInts().toIntArray()\r\n    }\r\n\r\n    var ans = IntArray(n)\r\n    var start = 0\r\n    for(i in 0 until n){\r\n        if (data[i][1] == 1){\r\n            ans[i] = start\r\n            start += data[i][0]\r\n        }\r\n    }\r\n\r\n    var list: MutableList<Int> = mutableListOf()\r\n    for(i in 0 until n){\r\n        if (data[i][1] == 2){\r\n            list.add(data[i][0])\r\n        }\r\n    }\r\n\r\n    val res = solve(list)\r\n    var start_even = start\r\n    var start_odd = start + 1\r\n    var id = 0\r\n    for(i in 0 until n) {\r\n        if (data[i][1] == 2) {\r\n            if (res[id] == 1){\r\n                ans[i] = start_even\r\n                start_even += 2 * data[i][0]\r\n            }else{\r\n                ans[i] = start_odd\r\n                start_odd += 2 * data[i][0]\r\n            }\r\n            id++\r\n        }\r\n    }\r\n\r\n    var ok = true\r\n    for(i in 0 until n){\r\n        if (data[i][1] == 1){\r\n            if (ans[i] + data[i][0] >= m) ok = false\r\n        }else{\r\n            if (ans[i] + data[i][0] * 2 - 2 >= m) ok = false\r\n        }\r\n    }\r\n\r\n    if (!ok){\r\n        println(-1)\r\n    }else {\r\n        for (i in 0 until n) {\r\n            print(\"${ans[i] + 1} \")\r\n        }\r\n        println()\r\n    }\r\n}\r\n\r\n"
}