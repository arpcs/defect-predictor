{
    "id": 131089500,
    "contestId": 1571,
    "creationTimeSeconds": 1633625283,
    "relativeTimeSeconds": 7983,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "meme"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 204800,
    "source": "import java.lang.Math.min\r\nimport kotlin.system.exitProcess\r\n\r\nprivate fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\n\r\nfun main() {\r\n    val (n, m) = readInts()\r\n    val a = Array(3) { mutableListOf<Pair<Int, Int>>() }\r\n    var checkSum = 0\r\n    for (i in 0 until n) {\r\n        val (k, t) = readInts()\r\n        checkSum += k\r\n        if (k > 1) a[t].add(Pair(k, i))\r\n        else a[2].add(Pair(k, i))\r\n    }\r\n    if (checkSum > m) {\r\n        println(-1)\r\n        exitProcess(0)\r\n    }\r\n    a[2].sortBy { it.first }\r\n    val ans = Array(n) { 0 }\r\n    var day = 1\r\n    for ((k, i) in a[1]) {\r\n        ans[i] = day\r\n        day += k\r\n    }\r\n    val active = mutableListOf<Int>()\r\n    val remain = Array(n) { 0 }\r\n    if (a[2].isNotEmpty()) {\r\n        for ((k, i) in a[2]) {\r\n            remain[i] = k\r\n        }\r\n        var lastDay = -1\r\n        for (i in 0 until 2) {\r\n            if (a[2].isNotEmpty()) {\r\n                active.add(a[2].last().second)\r\n                ans[a[2].last().second] = day + i\r\n                a[2].removeLast()\r\n            }\r\n        }\r\n        active.reverse()\r\n        while (day <= m && active.isNotEmpty()) {\r\n            if (active.size < 2 && a[2].isNotEmpty()) {\r\n                active.add(a[2].last().second)\r\n                ans[a[2].last().second] = day\r\n                a[2].removeLast()\r\n            }\r\n            if (lastDay == active.last()) {\r\n                day += 1\r\n                lastDay = -1\r\n                continue\r\n            }\r\n            remain[active.last()] -= 1\r\n            lastDay = active.last()\r\n            if (remain[active.last()] == 0) {\r\n                active.removeLast()\r\n            }\r\n            day += 1\r\n            active.reverse()\r\n        }\r\n    }\r\n    var noneRemains = true\r\n    for (i in 0 until n) {\r\n        if (remain[i] > 0) {\r\n            noneRemains = false\r\n        }\r\n    }\r\n    if (day <= m + 1 && noneRemains) {\r\n        for (i in ans) {\r\n            print(\"$i \")\r\n        }\r\n        println()\r\n    } else {\r\n        println(-1)\r\n    }\r\n}"
}