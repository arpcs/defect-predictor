{
    "id": 131089596,
    "contestId": 1571,
    "creationTimeSeconds": 1633625566,
    "relativeTimeSeconds": 8266,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Apfeloxid"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 74547200,
    "source": "import com.sun.org.apache.xpath.internal.operations.Bool\r\nimport java.io.PrintWriter\r\nimport java.util.*\r\nimport kotlin.collections.ArrayDeque\r\nimport kotlin.math.max\r\nimport kotlin.math.min\r\n\r\n@JvmField val INPUT = System.`in`\r\n@JvmField val OUTPUT = System.out\r\n\r\n@JvmField val _reader = INPUT.bufferedReader()\r\nfun readLine(): String? = _reader.readLine()\r\nfun readLn() = _reader.readLine()!!\r\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\r\nfun read(): String {\r\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\r\n    return _tokenizer.nextToken()\r\n}\r\nfun readInt() = read().toInt()\r\nfun readDouble() = read().toDouble()\r\nfun readLong() = read().toLong()\r\nfun readStrings(n: Int) = List(n) { read() }\r\nfun readLines(n: Int) = List(n) { readLn() }\r\nfun readInts(n: Int) = List(n) { read().toInt() }\r\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\r\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\r\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\r\nfun readLongs(n: Int) = List(n) { read().toLong() }\r\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\r\n\r\n@JvmField val _writer = PrintWriter(OUTPUT, false)\r\ninline fun output(block: PrintWriter.() -> Unit) { _writer.apply(block).flush() }\r\n\r\ndata class Competiton (val index: Int, val length: Int): Comparable<Competiton>  {\r\n    override fun compareTo(other: Competiton): Int {\r\n        return other.length - this.length\r\n    }\r\n\r\n}\r\n\r\nfun main(args: Array<String>) {\r\n    val amountTestcases = 1\r\n    for (test in 0 until amountTestcases) {\r\n        val n = readInt()\r\n        val m = readInt()\r\n        val competitions = mutableListOf<Competiton>()\r\n        val startSchedule = IntArray(n)\r\n        var currentDay = 1;\r\n        var daysLeftToSchedule = 0;\r\n        for (i in 0 until n) {\r\n            val ki = readInt()\r\n            val ti = readInt()\r\n            if (ti == 2) {\r\n                competitions.add(Competiton(i, ki))\r\n                daysLeftToSchedule += ki\r\n            } else {\r\n                startSchedule[i] = currentDay\r\n                currentDay += ki\r\n            }\r\n        }\r\n        val daysLeft = m - currentDay + 1\r\n\r\n        if (daysLeftToSchedule > daysLeft) {\r\n            output { println(-1) }\r\n            return\r\n        }\r\n\r\n        val isPossible = dp(startSchedule, competitions, 0, currentDay, currentDay+1, m, Array(competitions.size) { IntArray(m+1)});\r\n\r\n        if (isPossible) {\r\n\r\n            output {  println(startSchedule.joinToString(\" \"))}\r\n        } else {\r\n            output { println(-1) }\r\n        }\r\n    }\r\n}\r\n\r\nfun dp(startSchedule: IntArray, competitions: List<Competiton>, index: Int, evenPointer: Int, oddPointer: Int, m: Int, memo: Array<IntArray>): Boolean {\r\n    if (index == competitions.size) {\r\n        return true\r\n    }\r\n\r\n    if (memo[index][evenPointer] != 0) {\r\n        return memo[index][evenPointer] == 1\r\n    }\r\n\r\n    if (evenPointer + 2 * (competitions[index].length - 1) <= m) {\r\n        val opt1 = dp(startSchedule, competitions, index+1, evenPointer+2*competitions[index].length, oddPointer, m, memo)\r\n        if (opt1) {\r\n            startSchedule[competitions[index].index] = evenPointer;\r\n            return true\r\n        }\r\n    }\r\n\r\n    if (oddPointer + 2 * (competitions[index].length - 1) <= m) {\r\n        val opt2 = dp(startSchedule, competitions, index+1, evenPointer, oddPointer+2*competitions[index].length, m, memo);\r\n        if (opt2) {\r\n            startSchedule[competitions[index].index] = oddPointer\r\n            return true\r\n        }\r\n    }\r\n\r\n    memo[index][evenPointer] = -1;\r\n    return false;\r\n}",
    "suggested_categories": [
        "algorithm",
        "data structure",
        "dynamic programming",
        "input/output handling",
        "coding conventions",
        "control structures",
        "error handling",
        "function declaration",
        "integrated development environment",
        "libraries",
        "looping",
        "math operations",
        "memory management",
        "optimization techniques",
        "programming paradigms",
        "software testing",
        "time complexity",
        "user-defined types",
        "variable declaration",
        "version control"
    ]
}