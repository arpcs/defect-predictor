{
    "id": 131084661,
    "contestId": 1571,
    "creationTimeSeconds": 1633621179,
    "relativeTimeSeconds": 3879,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Potassium"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 295,
    "memoryConsumedBytes": 28160000,
    "source": "import java.lang.AssertionError\r\nimport java.lang.StringBuilder\r\nimport java.util.*\r\n\r\nval readQueue = ArrayDeque<String>()\r\nfun getInput(): String {\r\n    if (readQueue.isEmpty()) readLine()!!.split(' ', '\\n').let{ readQueue.addAll(it) }\r\n    return readQueue.pop()\r\n}\r\n\r\nfun getInt() = getInput().toInt()\r\nfun getLong() = getInput().toLong()\r\nfun getString() = getInput()\r\n\r\nconst val MOD107 = 1000000007L\r\nconst val MOD998 = 998244353L\r\nfun myAssert(b : Boolean) {\r\n    if (!b) throw AssertionError()\r\n}\r\n\r\nfun main() {\r\n    var (n,m) = Array(2) { getInt() }\r\n    var k = Array<Int>(n) { 0 }\r\n    var t = Array<Int>(n) { 0 }\r\n    for (i in 0 until n) {\r\n        k[i] = getInt()\r\n        t[i] = getInt()\r\n    }\r\n\r\n    var total = k.sum()\r\n    if (total > m) {\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n    var dp = Array(m + 1) { 0 }\r\n    var use = Array(m + 1) { -1 }\r\n    dp[0] = 1\r\n\r\n    for (i in 0 until n)\r\n        if (t[i] == 2)\r\n            for (j in m downTo k[i])\r\n                if (dp[j] == 0 && dp[j - k[i]] == 1) {\r\n                    dp[j] = 1\r\n                    use[j] = i\r\n                }\r\n\r\n    var total2 = 0\r\n    for (i in 0 until n)\r\n        if (t[i] == 2)\r\n            total2 += k[i]\r\n\r\n    var take = total2 / 2\r\n    while (dp[take] == 0) take--\r\n\r\n    var s = Array(2) { mutableListOf<Int>() }\r\n    run {\r\n        var h = take\r\n        while (h > 0) {\r\n            s[1].add(use[h])\r\n            h -= k[use[h]]\r\n        }\r\n\r\n        for (i in 0 until n)\r\n            if (t[i] == 2 && !s[1].contains(i))\r\n                s[0].add(i)\r\n    }\r\n\r\n    var startp = 0\r\n    if (take * 2 == total2)\r\n        startp = total2\r\n    else\r\n        startp = (total2 - take - 1) * 2 + 1\r\n\r\n    var remSpace = m - startp\r\n    if (remSpace < total - total2) {\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n    var ans = Array(n) { 0 }\r\n\r\n    var now = 0\r\n    for (i in s[0]) {\r\n        ans[i] = now\r\n        now += k[i] * 2\r\n    }\r\n\r\n    now = 1\r\n    for (i in s[1]) {\r\n        ans[i] = now\r\n        now += k[i] * 2\r\n    }\r\n\r\n    now = startp\r\n    for (i in 0 until n)\r\n        if (t[i] == 1) {\r\n            ans[i] = now\r\n            now += k[i]\r\n        }\r\n\r\n    println(ans.map { it + 1 }.joinToString(\" \"))\r\n}"
}