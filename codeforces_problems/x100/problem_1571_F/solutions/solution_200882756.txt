{
    "id": 200882756,
    "contestId": 1571,
    "creationTimeSeconds": 1680705037,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "chappy1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 8806400,
    "source": "fun main() {\r\n    val (n, m) = readInts()\r\n\r\n    var days = m\r\n    val ks = mutableListOf<Int>()\r\n    val twoIdx = mutableListOf<Int>()\r\n    val twos = mutableListOf<Int>()\r\n    val res = IntArray(n)\r\n    var cur = 0\r\n    for (i in 0 until n) {\r\n        val (k, t) = readInts()\r\n        ks += k\r\n        if (t == 1) {\r\n            days -= k\r\n            res[i] = cur + 1\r\n            cur += k\r\n        } else {\r\n            twos += k\r\n            twoIdx += i\r\n        }\r\n    }\r\n\r\n    val sum = twos.sum()\r\n    if (days < sum) {\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n\r\n    val d = Array(n + 1) { BooleanArray(sum + 1) }\r\n    for (i in 0..n) {\r\n        d[i][0] = true\r\n    }\r\n\r\n    val ts = twos.size\r\n    for (i in 1..ts) {\r\n        for (j in 1..sum) {\r\n            d[i][j] = d[i - 1][j]\r\n            if (twos[i - 1] <= j) {\r\n                d[i][j] = d[i][j] || d[i - 1][j - twos[i - 1]]\r\n            }\r\n        }\r\n    }\r\n\r\n    val halfDays = (days + 1) / 2\r\n    val half = (sum + 1) / 2\r\n\r\n    val even = mutableListOf<Int>()\r\n    fun back(i: Int, j: Int) {\r\n        if (i == 0) return\r\n        if (d[i - 1][j]) {\r\n            back(i - 1, j)\r\n            return\r\n        }\r\n        if (twos[i - 1] <= j && d[i - 1][j - twos[i - 1]]) {\r\n            even += i - 1\r\n            back(i - 1, j - twos[i - 1])\r\n        }\r\n    }\r\n\r\n    var fits = false\r\n    for (j in half..halfDays) {\r\n        if (d[ts][j]) {\r\n            fits = true\r\n            back(ts, j)\r\n            break\r\n        }\r\n    }\r\n\r\n    if (!fits) {\r\n        println(-1)\r\n        return\r\n    }\r\n\r\n    var curCopy = cur\r\n    for (eIdx in even) {\r\n        val i = twoIdx[eIdx]\r\n        res[i] = curCopy + 1\r\n        curCopy += ks[i] * 2\r\n    }\r\n\r\n    curCopy = cur + 1\r\n    for (i in 0 until n) {\r\n        if (res[i] == 0) {\r\n            res[i] = curCopy + 1\r\n            curCopy += ks[i] * 2\r\n        }\r\n    }\r\n    println(res.joinToString(separator = \" \"))\r\n}\r\n\r\nprivate fun readLn() = readLine()!!\r\nprivate fun readInt() = readLn().toInt()\r\nprivate fun readStrings() = readLn().split(\" \")\r\nprivate fun readInts() = readStrings().map { it.toInt() }"
}