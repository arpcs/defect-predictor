{
    "id": 131088746,
    "contestId": 1571,
    "creationTimeSeconds": 1633624058,
    "relativeTimeSeconds": 6758,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "NHMinh"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 25395200,
    "source": "import kotlin.jvm.JvmStatic\r\nimport java.io.BufferedReader\r\nimport java.util.StringTokenizer\r\nimport java.io.IOException\r\nimport java.io.InputStreamReader\r\nimport java.lang.Exception\r\n\r\nobject programkt {\r\n    var scanner = FastScanner()\r\n    @JvmStatic\r\n    fun main(args: Array<String>) {\r\n        val n = scanner.nextInt()\r\n        var m = scanner.nextInt()\r\n        var h = 0\r\n        val k = IntArray(n)\r\n        val t = IntArray(n)\r\n        val res = IntArray(n)\r\n        val p = IntArray(n)\r\n        for (i in 0 until n) {\r\n            k[i] = scanner.nextInt()\r\n            t[i] = scanner.nextInt()\r\n            if (t[i] == 1) {\r\n                m -= k[i]\r\n                res[i] = m + 1\r\n            } else p[h++] = i\r\n        }\r\n        val dp = IntArray(m + 5)\r\n        val trace = IntArray(m + 5)\r\n        for (j in 0..m) trace[j] = -1\r\n        run {\r\n            var i = 0\r\n            var z: Int\r\n            while (i < h) {\r\n                for (j in m downTo k[p[i]]) {\r\n                    z = dp[j - k[p[i]]] + 1\r\n                    if (dp[j] < z) {\r\n                        dp[j] = z\r\n                        trace[j] = p[i]\r\n                    }\r\n                }\r\n                ++i\r\n            }\r\n        }\r\n        var half = (m shr 1) + (m and 1)\r\n        run {\r\n            var z: Int\r\n            var d = 1\r\n            var j = half\r\n            while (j > 0) {\r\n                z = trace[j]\r\n                if (z < 0) break\r\n                res[z] = d\r\n                d += 2 * k[z]\r\n                j -= k[z]\r\n            }\r\n        }\r\n        half = m - half\r\n        run {\r\n            var i = 0\r\n            var d = 2\r\n            while (i < h) {\r\n                if (res[p[i]] > 0) {\r\n                    ++i\r\n                    continue\r\n                }\r\n                half -= k[p[i]]\r\n                if (half < 0) {\r\n                    println(-1)\r\n                    return\r\n                }\r\n                res[p[i]] = d\r\n                d += 2 * k[p[i]]\r\n                ++i\r\n            }\r\n        }\r\n        for (i in 0 until n) print(res[i].toString() + \" \")\r\n        println()\r\n    }\r\n\r\n    class FastScanner internal constructor() {\r\n        var br: BufferedReader\r\n        var st: StringTokenizer? = null\r\n        fun nextLine(): String {\r\n            var res = \"\"\r\n            try {\r\n                res = br.readLine()\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n            }\r\n            return res\r\n        }\r\n\r\n        operator fun next(): String {\r\n            while (st == null || !st!!.hasMoreTokens()) {\r\n                try {\r\n                    st = StringTokenizer(br.readLine())\r\n                } catch (e: Exception) {\r\n                    e.printStackTrace()\r\n                }\r\n            }\r\n            return st!!.nextToken()\r\n        }\r\n\r\n        fun nextInt(): Int {\r\n            return next().toInt()\r\n        }\r\n\r\n        fun nextLong(): Long {\r\n            return next().toLong()\r\n        }\r\n\r\n        fun nextDouble(): Double {\r\n            return next().toDouble()\r\n        }\r\n\r\n        fun nextFloat(): Float {\r\n            return next().toFloat()\r\n        }\r\n\r\n        fun nextByte(): Byte {\r\n            return next().toByte()\r\n        }\r\n\r\n        fun nextShort(): Short {\r\n            return next().toShort()\r\n        }\r\n\r\n        init {\r\n            br = BufferedReader(InputStreamReader(System.`in`))\r\n        }\r\n    }\r\n}"
}