{
    "id": 218977007,
    "contestId": 1571,
    "creationTimeSeconds": 1692114484,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "LifeAskForNothing"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 307200,
    "source": "    @file:Suppress(\"CanBeVal\")\r\n     \r\n    import java.io.BufferedReader\r\n    import java.io.InputStreamReader\r\n    import java.io.OutputStreamWriter\r\n    import java.io.PrintWriter\r\n    import java.util.*\r\n     \r\n    private fun solve() {\r\n        var (n, m) = readInts()\r\n        var k = intarr(n)\r\n        var t = intarr(n)\r\n        for (i in k.indices) {\r\n            var (kk, tt) = readInts()\r\n            k[i] = kk\r\n            t[i] = tt\r\n        }\r\n        var s1 = 0\r\n        var s2 = 0\r\n        var d = intarr(m + 1, -1)\r\n        d[0] = 0\r\n        for (i in k.indices) {\r\n            if (t[i] == 2) {\r\n                s1 += k[i]\r\n                for (j in m downTo 0) {\r\n                    if (d[j] != -1 && j + k[i] <= m && d[j + k[i]] == -1) {\r\n                        d[j + k[i]] = i\r\n                    }\r\n                }\r\n            } else {\r\n                s2 += k[i]\r\n            }\r\n        }\r\n        for (i in 0..m) {\r\n            if (d[i] == -1) continue\r\n            if (maxOf(i * 2 - 1, (s1 - i) * 2) + s2 > m) continue\r\n            var c = BooleanArray(n)\r\n            var x = i\r\n            while (x > 0) {\r\n                c[d[x]] = true\r\n                x -= k[d[x]]\r\n            }\r\n            var res = intarr(n)\r\n            var kk = 1\r\n            for (i in 0 until n) {\r\n                if (t[i] == 2 && c[i]) {\r\n                    res[i] = kk\r\n                    kk += k[i] * 2\r\n                }\r\n            }\r\n            kk = 2\r\n            for (i in 0 until n) {\r\n                if (t[i] == 2 && !c[i]) {\r\n                    res[i] = kk\r\n                    kk += k[i] * 2\r\n                }\r\n            }\r\n            kk = m + 1\r\n            for (i in 0 until n) {\r\n                if (t[i] == 1) {\r\n                    kk -= k[i]\r\n                    res[i] = kk\r\n                }\r\n            }\r\n            println(res)\r\n            return\r\n        }\r\n        println(-1)\r\n    }\r\n     \r\n    // TEMPLATE\r\n    fun main(args: Array<String>) {\r\n        reader = BufferedReader(InputStreamReader(System.`in`))\r\n        out = PrintWriter(OutputStreamWriter(System.out))\r\n    //    repeat(readInt()) {\r\n        solve()\r\n    //    }\r\n        out.close()\r\n    }\r\n     \r\n    private lateinit var out: PrintWriter\r\n    private lateinit var reader: BufferedReader\r\n    private var tokenizer: StringTokenizer? = null\r\n    private fun read(): String {\r\n        while (tokenizer == null || !tokenizer!!.hasMoreTokens()) {\r\n            tokenizer = StringTokenizer(readLn())\r\n        }\r\n        return tokenizer!!.nextToken()\r\n    }\r\n     \r\n    private fun readInt() = read().toInt()\r\n    private fun readLong() = read().toLong()\r\n    private fun readLn() = reader.readLine()!!\r\n    private fun readInts() = readLn().split(\" \").map { it.toInt() }\r\n    private fun readInts(sz: Int) = Array(sz) { readInt() }\r\n    private fun readLongs() = readLn().split(\" \").map { it.toLong() }\r\n    private fun readLongs(sz: Int) = Array(sz) { readLong() }\r\n    private fun print(b: Boolean) = out.print(b)\r\n    private fun print(i: Int) = out.print(i)\r\n    private fun print(d: Double) = out.print(d)\r\n    private fun print(l: Long) = out.print(l)\r\n    private fun print(s: String) = out.print(s)\r\n    private fun print(message: Any?) = out.print(message)\r\n    private fun print(a: Array<Int>) = a.forEach { print(\"$it \") }\r\n    private fun <T> print(a: Array<out T>) = a.forEach { print(\"$it \") }\r\n    private fun <T> print(a: Collection<T>) = a.forEach { print(\"$it \") }\r\n    private fun println(b: Boolean) = out.println(b)\r\n    private fun println(i: Int) = out.println(i)\r\n    private fun println(d: Double) = out.println(d)\r\n    private fun println(l: Long) = out.println(l)\r\n    private fun println(s: String) = out.println(s)\r\n    private fun println() = out.println()\r\n    private fun println(message: Any?) = out.println(message)\r\n    private fun <T> println(a: Array<out T>) {\r\n        a.forEach { print(\"$it \") }\r\n        println()\r\n    }\r\n     \r\n    private fun println(a: IntArray) {\r\n        a.forEach { print(\"$it \") }\r\n        println()\r\n    }\r\n     \r\n    private fun println(a: LongArray) {\r\n        a.forEach { print(\"$it \") }\r\n        println()\r\n    }\r\n     \r\n    private fun <T> println(a: Collection<T>) {\r\n        a.forEach { print(\"$it \") }\r\n        println()\r\n    }\r\n     \r\n    private fun intarr(sz: Int, v: Int = 0) = IntArray(sz) { v }\r\n    private fun longarr(sz: Int, v: Long = 0) = LongArray(sz) { v }\r\n    private fun intarr2d(n: Int, m: Int, v: Int = 0) = Array(n) { intarr(m, v) }\r\n    private fun <T> init(vararg elements: T) = elements\r\n    private fun VI(n: Int = 0, init: Int = 0) = MutableList(n) { init }\r\n    private fun VVI(n: Int = 0, m: Int = 0, init: Int = 0) = MutableList(n) { VI(m, init) }\r\n    private fun <T1 : Comparable<T1>, T2 : Comparable<T2>> pairCmp(): Comparator<Pair<T1, T2>> {\r\n        return Comparator { a, b ->\r\n            val res = a.first.compareTo(b.first)\r\n            if (res == 0) a.second.compareTo(b.second) else res\r\n        }\r\n    }"
}