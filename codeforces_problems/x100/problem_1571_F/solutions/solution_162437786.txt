{
    "id": 162437786,
    "contestId": 1571,
    "creationTimeSeconds": 1656680478,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 102400,
    "source": "import java.util.*\nimport kotlin.math.max\n\nfun main() {\n    val (n, m) = readLine()!!.split(\" \").map { it.toInt() }\n    val attacks = mutableListOf<Attack>()\n    for (t in 0 until n) {\n        val k = readLine()!!.toInt()\n        val tokenizerDamage = StringTokenizer(readLine()!!)\n        val tokenizerRequiredBarricades = StringTokenizer(readLine()!!)\n        repeat(k) {\n            val d = tokenizerDamage.nextToken().toLong()\n            val b = tokenizerRequiredBarricades.nextToken().toInt()\n            attacks.add(Attack(d, b, b + t))\n        }\n    }\n    attacks.sortWith(compareBy({ -it.neededBarricades }, { it.maxInitialBarricades }))\n    val segTree = SegmentTree(-1, n + m)\n    for (attack in attacks) {\n        if (attack.maxInitialBarricades >= m) {\n            segTree[attack.maxInitialBarricades] = max(segTree[attack.maxInitialBarricades], segTree[-1, attack.maxInitialBarricades - 1] + attack.damage)\n        }\n    }\n    println(segTree[-1, n + m])\n}\n\ndata class Attack(val damage: Long, val neededBarricades: Int, val maxInitialBarricades: Int)\n\nclass SegmentTree(val treeFrom: Int, treeTo: Int) {\n    val value: LongArray\n    val length: Int\n\n    init {\n        var e = 0\n        while (1 shl e < treeTo - treeFrom + 1) {\n            e++\n        }\n        value = LongArray(1 shl (e + 1))\n        length = 1 shl e\n    }\n\n    operator fun set(index: Int, delta: Long) {\n        var node = index - treeFrom + length\n        value[node] = delta\n        node = node shr 1\n        while (node > 0) {\n            value[node] = max(value[node shl 1], value[(node shl 1) + 1])\n            node = node shr 1\n        }\n    }\n\n    operator fun get(index: Int) = value[index - treeFrom + length]\n\n    operator fun get(fromaxdex: Int, toIndex: Int): Long {\n        if (toIndex < fromaxdex) {\n            return 0L\n        }\n        var from = fromaxdex + length - treeFrom\n        var to = toIndex + length - treeFrom + 1\n        var res = 0L\n        while (from + (from and -from) <= to) {\n            res = max(res, value[from / (from and -from)])\n            from += from and -from\n        }\n        while (to - (to and -to) >= from) {\n            res = max(res, value[(to - (to and -to)) / (to and -to)])\n            to -= to and -to\n        }\n        return res\n    }\n}\n \t\t\t\t\t \t  \t\t\t\t\t\t \t  \t\t\t      \t\t"
}