{
    "id": 131105112,
    "contestId": 1571,
    "creationTimeSeconds": 1633643036,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "elManco"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 167833600,
    "source": "var N = 5050\r\n\r\nfun main() {\r\n    var (m, n) = readLine()!!.split(\" \").map { it.toInt() }\r\n    var ones = mutableListOf<Pair<Int,Int>>()\r\n    var twos = mutableListOf<Pair<Int,Int>>()\r\n    var dp = Array(N) { IntArray(N, { i -> 0 }) }\r\n    var one_spaces = 0\r\n    for (i in 0 until m) {\r\n        var (k, t) = readLine()!!.split(\" \"). map { it.toInt() }\r\n        if (t == 1) {\r\n            one_spaces += k\r\n            ones.add(Pair(k, i))\r\n        } else {\r\n            twos.add(Pair(k, i))\r\n        }\r\n    }\r\n    dp[0][0] = 1\r\n    var sum = 0\r\n    var tsz = twos.size\r\n    for (t in 0 until tsz) {\r\n        sum += twos[t].first\r\n        for (i in 0 until n + 1) {\r\n            if (dp[t][i] == 1) {\r\n                dp[t + 1][i] = 1\r\n                if (i + twos[t].first <= n) {\r\n                    dp[t + 1][i + twos[t].first] = 1\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var row = tsz\r\n    var col = -1\r\n    var half = (sum + 1) / 2\r\n    for (i in half until n + 1) {\r\n        if (dp[tsz][i] == 1) {\r\n            col = i\r\n            break\r\n        }\r\n    }\r\n    if (col == -1) {\r\n        println(-1)\r\n        return\r\n    }\r\n    var first_list = mutableListOf<Pair<Int,Int>>()\r\n    var second_list = mutableListOf<Pair<Int,Int>>()\r\n    while (row > 0) {\r\n        if (dp[row - 1][col] != 1) {\r\n            first_list.add(twos[row - 1])\r\n            col -= twos[row - 1].first\r\n        } else {\r\n            second_list.add(twos[row - 1])\r\n        }\r\n        row--\r\n    }\r\n    var equal = first_list.sumBy { it.first } == second_list.sumBy { it.first }\r\n    var two_spaces = 2 * first_list.sumBy { it.first } - 1\r\n    if (equal) two_spaces++\r\n    var total_spaces = one_spaces + two_spaces\r\n    if (total_spaces > n) {\r\n        println(-1)\r\n        return\r\n    }\r\n    var ans = IntArray(m)\r\n    var now = 0\r\n    for (par in first_list) {\r\n        ans[par.second] = now\r\n        now += 2 * par.first\r\n    }\r\n    if (!equal) now--\r\n    for (par in ones) {\r\n        ans[par.second] = now\r\n        now += par.first\r\n    }\r\n    now = 1\r\n    for (par in second_list) {\r\n        ans[par.second] = now\r\n        now += 2 * par.first\r\n    }\r\n    println(ans.map { it + 1 }.joinToString(\" \"))\r\n}\r\n\r\n"
}