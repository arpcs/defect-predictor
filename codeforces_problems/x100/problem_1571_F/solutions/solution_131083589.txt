{
    "id": 131083589,
    "contestId": 1571,
    "creationTimeSeconds": 1633620616,
    "relativeTimeSeconds": 3316,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "darnley"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 27852800,
    "source": "fun main() {\r\n\tval (n, m) = readInts()\r\n\tval consecutive = mutableListOf<IndexedValue<Int>>()\r\n\tval alternating = mutableListOf<IndexedValue<Int>>()\r\n\trepeat(n) {\r\n\t\tval (k, t) = readInts()\r\n\t\t(if (t == 1) consecutive else alternating).add(IndexedValue(it, k))\r\n\t}\r\n\tval consecutiveSum = consecutive.sumOf { it.value }\r\n\tval alternatingSum = alternating.sumOf { it.value }\r\n\tval can = BooleanArray(m + 1)\r\n\tval how = MutableList<IndexedValue<Int>?>(m + 1) { null }\r\n\tcan[0] = true\r\n\tfor (a in alternating) {\r\n\t\tfor (i in m - a.value downTo 0) {\r\n\t\t\tif (!can[i] || can[i + a.value]) continue\r\n\t\t\tcan[i + a.value] = true\r\n\t\t\thow[i + a.value] = a\r\n\t\t}\r\n\t}\r\n\tfor (x in 0..m) {\r\n\t\tif (!can[x]) continue\r\n\t\tval odd = 2 * x - 1\r\n\t\tval even = 2 * (alternatingSum - x)\r\n\t\tval ans = maxOf(odd, even) + consecutiveSum\r\n\t\tif (ans <= m) {\r\n\t\t\tval starts = IntArray(n)\r\n\t\t\tvar z = x\r\n\t\t\tval odds = mutableListOf<IndexedValue<Int>>()\r\n\t\t\twhile (z > 0) {\r\n\t\t\t\todds.add(how[z]!!)\r\n\t\t\t\tz -= how[z]!!.value\r\n\t\t\t}\r\n\t\t\tval evens = alternating - odds\r\n\t\t\tvar t = 1\r\n\t\t\tfor (a in odds) {\r\n\t\t\t\tstarts[a.index] = t\r\n\t\t\t\tt += a.value * 2\r\n\t\t\t}\r\n\t\t\tt = 2\r\n\t\t\tfor (a in evens) {\r\n\t\t\t\tstarts[a.index] = t\r\n\t\t\t\tt += a.value * 2\r\n\t\t\t}\r\n\t\t\tt = m + 1\r\n\t\t\tfor (a in consecutive) {\r\n\t\t\t\tt -= a.value\r\n\t\t\t\tstarts[a.index] = t\r\n\t\t\t}\r\n\t\t\treturn println(starts.joinToString(\" \"))\r\n\t\t}\r\n\t}\r\n\tprintln(-1)\r\n}\r\n\r\nprivate fun readLn() = readLine()!!\r\nprivate fun readInt() = readLn().toInt()\r\nprivate fun readStrings() = readLn().split(\" \")\r\nprivate fun readInts() = readStrings().map { it.toInt() }\r\n",
    "suggested_categories": [
        "algorithm",
        "dynamic programming",
        "data structures",
        "computational complexity",
        "optimization",
        "code quality",
        "array operations",
        "mathematical processing",
        "code optimization",
        "algorithm efficiency",
        "indexing",
        "error handling",
        "conditional logic",
        "looping",
        "integer operations",
        "mutable data structures",
        "code readability",
        "performance tuning",
        "functional programming",
        "output formatting"
    ]
}