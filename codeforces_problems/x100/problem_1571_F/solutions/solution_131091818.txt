{
    "id": 131091818,
    "contestId": 1571,
    "creationTimeSeconds": 1633627420,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "niyuzheNO1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\nimport kotlin.system.exitProcess; \r\n//no-translation\r\nclass Kattio : PrintWriter {\r\n@JvmField val r : BufferedReader;\r\n@JvmField var st = StringTokenizer(\"\");\r\nconstructor() : this(System.`in`,System.out) {}\r\nconstructor(i : InputStream, o : OutputStream) : super(o, false) { r = i.bufferedReader(); }\r\nfun rLine() : String ?= r.readLine();\r\nfun read() : String{\r\nwhile (st.hasMoreTokens().not()) st = StringTokenizer(rLine() ?: return \"\", \" \");\r\nreturn st.nextToken();\r\n};\r\nfun strs(n : Int) = List(n) { read(); };\r\nfun ln() = rLine()!!;\r\nfun lns(n: Int) = List(n) { ln() };\r\nfun int() = read().toInt();\r\nfun ints(n: Int) = List(n) { int() };\r\nfun db() = read().toDouble();\r\nfun rDbs(n: Int) = List(n) { db() };\r\nfun long() = read().toLong()\r\nfun longs(n: Int) = List(n) { long() };\r\n};\r\nval io = Kattio();\r\n//end-no-translation\r\n//no-translation\r\nfun < K: Comparable< K >,  V:Comparable< V >>  sortA_L(N : Int,a : Array<K> ,b : Array<V> ) : Unit{\r\nvar i : Int =  0;\r\nvar mutlist = mutableListOf(Pair(a[0], b[0]));\r\nfor(i in 0 until  (N)){\r\nmutlist.add(Pair(a[i], b[i]));\r\n}\r\nmutlist.removeAt(0)\r\nvar res = mutlist.sortedWith(compareBy({ it.first }, { it.second }));\r\nfor(i in 0 until  (N)){\r\na[i] = res[i].first;\r\nb[i] = res[i].second;\r\n}\r\n};\r\n//end-no-translation\r\n//no-translation\r\nfun < T1: Comparable< T1 >,  T2:Comparable< T2 >, T3:Comparable< T3 >>  sortA_L(N : Int,a : Array<T1> ,b : Array<T2>,  c : Array<T3> ) : Unit{\r\nvar i : Int =  0;\r\nvar mutlist = mutableListOf(Triple(a[0], b[0], c[0]));\r\nfor(i in 0 until  (N)){\r\nmutlist.add(Triple(a[i], b[i], c[i]));\r\n}\r\nmutlist.removeAt(0)\r\nvar res = mutlist.sortedWith(compareBy({ it.first }, { it.second }, {it.third}));\r\nfor(i in 0 until  (N)){\r\na[i] = res[i].first;\r\nb[i] = res[i].second;\r\nc[i] = res[i].third;\r\n}\r\n};\r\n//end-no-translation\r\n//no-translation\r\nprivate fun rd(x : Int) = io.int(); \r\n//end-no-translation\r\nvar a =Array(5000+10, {0});\r\nvar ans =Array(5000+10, {0});\r\nvar k =Array(5000+10, {0});\r\nvar t =Array(5000+10, {0});\r\nvar id =Array(5000+10, {0});\r\nvar n:Int =0;\r\nvar m:Int =0;\r\nfun main(){\r\n  var PiIOrLma:Int =0;\r\n\r\n  for(PiIOrLma in 0 until  (1)){\r\n    var i:Int =0;\r\n    var ii:Int =0;\r\n\r\n    n=rd(n);\r\n    m=rd(m);\r\n    if(true){\r\n      var GIHf_YD2:Int =0;\r\n      for(GIHf_YD2 in 0 until  (n)){\r\n        k[GIHf_YD2]=rd(k[GIHf_YD2]);\r\n        t[GIHf_YD2]=rd(t[GIHf_YD2]);\r\n      }\r\n    }\r\n    var good:Int =1;\r\n    for(i in 0 until  (n)){\r\n      id[i] = i;\r\n    }\r\n    sortA_L(n, t, k, id);\r\n    for(i in 0 until  (m)){\r\n      a[i] = 0;\r\n    }\r\n    var l:Int =0;\r\n    while(l < n && t[l] == 1){\r\n      ans[id[l]] = m - k[l];\r\n      m -= k[l];\r\n      ++l;\r\n    }\r\n    for(ii in 0 until  (2)){\r\n      for(i in 0 until  (m)){\r\n        if(a[i] == 1){\r\n          continue;\r\n        }\r\n        if(i % 2 != ii){\r\n          continue;\r\n        }\r\n        if(l < n){\r\n          var j:Int =0;\r\n\r\n          for(j in 0 until  (k[l])){\r\n            if(i + j * t[l] >= m){\r\n              good = 0;\r\n              break;\r\n            }\r\n            a[i + j * t[l]] = 1;\r\n          }\r\n          ans[id[l]] = i;\r\n          ++l;\r\n        }\r\n        if(good == 0){\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    if(l < n){\r\n      good = 0;\r\n    }\r\n    if(!good){\r\n      print(-1);\r\n      print('\\n');\r\n      break;\r\n    }\r\n    for(i in 0 until  (n)){\r\n      ans[i]++;\r\n    }\r\n    if(true){\r\n      var Q7E_c5bj:Int =0;\r\n      if(n==0){\r\n        print('\\n');\r\n      }\r\n      else{\r\n        var output_tmp = Array(n, {ans[Q7E_c5bj]} );\r\n        for(Q7E_c5bj in 0 until  (n)){\r\n          output_tmp[Q7E_c5bj]= ans[Q7E_c5bj];\r\n        }\r\n        println(output_tmp.map{it}.joinToString(\" \"));\r\n      }\r\n    }\r\n  }\r\n}\r\n// cLay version 20210913-1\r\n\r\n// --- original code ---\r\n// //no-unlocked\r\n// int a[5d3+10];\r\n// int ans[5d3+10];\r\n// int k[], t[], id[];\r\n// int n,m;\r\n// { \r\n//     rep(1){\r\n//         rd(n, m, (k,t)(n));\r\n//         int good =  1;\r\n//         rep(i, n) id[i] = i;\r\n//         sortA(n, t, k, id);\r\n//         rep(i, m) a[i] = 0;\r\n//         int l = 0;\r\n//         while(l < n && t[l] == 1){\r\n//             ans[id[l]] = m - k[l];\r\n//             m -= k[l];\r\n//             ++l;\r\n//         }\r\n//         rep(ii, 2){\r\n//             rep(i, m){\r\n//                 if(a[i] == 1) continue;\r\n//                 if(i % 2 != ii) continue;\r\n//                 if(l < n){\r\n//                     rep(j, k[l]){\r\n//                         if(i + j * t[l] >= m) { good = 0; break; }\r\n//                         a[i + j * t[l]] = 1;\r\n//                     }\r\n//                     ans[id[l]] = i;\r\n//                     ++l;\r\n//                 }\r\n//                 if(good == 0){\r\n//                     break;\r\n//                 }\r\n//             }\r\n//         }\r\n//         if(l < n){\r\n//             good = 0;\r\n//         }\r\n//         if(!good){\r\n//             wt(-1); break;\r\n//         }\r\n//         rep(i, n) ans[i]++;\r\n//         wt(ans(n));\r\n//     }\r\n// }"
}