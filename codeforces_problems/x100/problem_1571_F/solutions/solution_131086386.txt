{
    "id": 131086386,
    "contestId": 1571,
    "creationTimeSeconds": 1633622164,
    "relativeTimeSeconds": 4864,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "darkkcyan"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 108236800,
    "source": "fun main() {\n    var (n, m) = readLine()!!.split(' ').map{it.toInt()}\n    var rest = MutableList<Pair<Int, Int>>(0) {0 to 0}\n    val ans = IntArray(n) {-1}\n    for (i in 0 until n) {\n        val (k, t) = readLine()!!.split(' ').map{it.toInt()}\n        if (t == 1) {\n            ans[i] = m - k + 1\n            m -= k\n        } else {\n            rest.add(k to i)\n        }\n    }\n    if (m < 0) {\n        println(\"-1\")\n        return \n    }\n    \n    val even_side = m / 2\n    val odd_side = m - even_side\n    // println(\"odd_side = $odd_side, even_side = $even_side\") \n    val dp = Array(rest.size + 1) { IntArray(odd_side + 1) { -1} }\n    dp[0][odd_side] = 0\n    var sum_rest = 0\n    for ((i, value) in rest.withIndex()) {\n        val (k, _) = value\n        for (x in 0 .. odd_side) {\n            if (dp[i][x] == -1) continue\n            if (x >= k) {\n                dp[i + 1][x - k] = 0\n            }\n            val used_odd = odd_side - x\n            if (even_side - (sum_rest - used_odd) >= k) {\n                dp[i + 1][x] = 1\n            }\n        }\n        // println(\"$i, dp = ${dp[i + 1].joinToString(\", \")}\") \n        sum_rest += k\n    }\n    \n    var trace = 0\n    while (trace <= odd_side && dp[rest.size][trace] == -1) ++trace\n    if (trace > odd_side) {\n        println(\"-1\")\n        return \n    }\n    \n    var even_pos = 2\n    var odd_pos = 1\n    for (i in rest.size downTo 1) {\n        val (k, id) = rest[i - 1]\n        if (dp[i][trace] == 0) {\n            ans[id] = odd_pos\n            trace += k\n            odd_pos += 2 * k\n        } else {\n            ans[id] = even_pos\n            even_pos += 2 * k\n        }\n    }\n    println(\"${ans.joinToString(\" \")}\")\n}\n"
}