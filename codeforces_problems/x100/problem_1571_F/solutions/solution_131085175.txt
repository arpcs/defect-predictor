{
    "id": 131085175,
    "contestId": 1571,
    "creationTimeSeconds": 1633621460,
    "relativeTimeSeconds": 4160,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "freak93"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 22,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 26316800,
    "source": "import kotlin.math.*\n\nprivate fun readLn() = readLine()!!\nprivate fun readInt() = readLn().toInt()\nprivate fun readStrings() = readLn().split(\" \")\nprivate fun readInts() = readStrings().map { it.toInt() }\n\nfun main() {\n    val (n, m) = readInts()\n\n    val competitions = (1..n).map { idx -> readInts() }\n\n\n    val answer = IntArray(n) { -1 }\n\n    var begin = 0\n    for ((index, value) in competitions.withIndex()) {\n        val (k, t) = value\n        if (t == 1) {\n            answer[index] = begin\n            begin += k\n        }\n    }\n\n    var from = Array<Int?>(m + 1) { null }\n    from[0] = -1\n\n    val left = m - begin\n    val limit = (left + 1) / 2\n    var sum = 0\n    for ((index, value) in competitions.withIndex()) {\n        val (k, t) = value\n        if (t == 1) continue\n\n        for (i in min(sum, limit - k) downTo 0) {\n            if (from[i] != null && from[i + k] == null) {\n                from[i + k] = index\n            }\n        }\n\n        sum += k\n    }\n\n    var found = false\n    for (i in 0..(limit + 1)) {\n        if (from[i] == null) continue\n        if (i > (left + 1) / 2 || sum - i > left / 2) continue \n\n        found = true\n        var aux = begin\n        var now = i\n        while (now > 0) {\n            val idx = from[now]!!\n            answer[idx] = aux\n            aux += 2 * competitions[idx][0]\n            now -= competitions[idx][0]\n        }\n    }\n\n    if (!found) {\n        println(-1)\n        return\n    }\n\n    begin += 1\n    for ((index, value) in competitions.withIndex()) {\n        val (k, t) = value\n        if (t == 1 || answer[index] >= 0) continue \n\n        answer[index] = begin\n        begin += 2 * k\n    }\n\n    println(answer.map { it + 1}.joinToString(\" \"))\n}\n"
}