{
    "id": 131086458,
    "contestId": 1571,
    "creationTimeSeconds": 1633622197,
    "relativeTimeSeconds": 4897,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "yudedako"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 27648000,
    "source": "fun main() {\r\n    val (n, m) = readLine()!!.trim().split(' ').map(String::toInt)\r\n    val stages = List(n) {\r\n        val (k, t) = readLine()!!.trim().split(' ').map(String::toInt)\r\n        k to t\r\n    }\r\n    val start = IntArray(n)\r\n    val startDay = run {\r\n        var current = 1\r\n        for (i in stages.indices) {\r\n            val (k, t) = stages[i]\r\n            if (t == 2) continue\r\n            start[i] = current\r\n            current += k\r\n        }\r\n        current\r\n    }\r\n    if (startDay > m) {\r\n        println(-1)\r\n        return\r\n    }\r\n    val lastStage = IntArray(m + 1){-1}\r\n    for (i in stages.indices) {\r\n        val (k, t) = stages[i]\r\n        if (t == 1) continue\r\n        if (k in lastStage.indices && lastStage[k] == -1) {\r\n            lastStage[k] = i\r\n        }\r\n        for (d in 1 until lastStage.size - k) {\r\n            if (lastStage[k] != -1 && lastStage[k] != i && lastStage[d + k] == -1) {\r\n                lastStage[d + k] = i\r\n            }\r\n        }\r\n    }\r\n    val firstLine = mutableListOf<Int>()\r\n    run {\r\n        var restDay = (m - startDay) / 2 + 1\r\n        while (restDay >= 0 && lastStage[restDay] == -1) {\r\n            --restDay\r\n        }\r\n        while (restDay > 0) {\r\n            firstLine.add(lastStage[restDay])\r\n            val (k, t) = stages[lastStage[restDay]]\r\n            restDay -= k\r\n        }\r\n    }\r\n    run {\r\n        var day = startDay\r\n        for (i in firstLine) {\r\n            val (k, t) = stages[i]\r\n            start[i] = day\r\n            day += k * 2\r\n        }\r\n    }\r\n    run {\r\n        var day = startDay + 1\r\n        for (i in stages.indices) {\r\n            val (k, t) = stages[i]\r\n            if (start[i] != 0) continue\r\n            start[i] = day\r\n            day += k * 2\r\n        }\r\n    }\r\n    val isValid = stages.indices.all { i ->\r\n        val (k, t) = stages[i]\r\n        start[i] in 1 .. m && start[i] + (k - 1) * t in 1 .. m\r\n    }\r\n    if (isValid) {\r\n        println(start.joinToString(\" \"))\r\n    }else {\r\n        println(-1)\r\n    }\r\n}"
}