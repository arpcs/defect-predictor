{
    "id": 131088911,
    "contestId": 1571,
    "creationTimeSeconds": 1633624306,
    "relativeTimeSeconds": 7006,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "bobib"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 25497600,
    "source": "import java.io.*\r\nimport java.util.*\r\n\r\n\r\n    fun main(args: Array<String>) {\r\n        val sc = MyScanner()\r\n        val out = PrintWriter(BufferedOutputStream(System.out))\r\n        var tt = 1\r\n        outer@ while (tt-- > 0) {\r\n            val n = sc.nextInt()\r\n            val m = sc.nextInt()\r\n            val two = ArrayList<Pair>()\r\n            var cur = 1\r\n            val res = IntArray(n)\r\n            Arrays.fill(res, -1)\r\n            for (i in 0 until n) {\r\n                val k = sc.nextInt()\r\n                val t = sc.nextInt()\r\n                if (t == 1) {\r\n                    res[i] = cur\r\n                    if (cur + k - 1 > m) {\r\n                        out.println(-1)\r\n                        continue@outer\r\n                    }\r\n                    cur += k\r\n                } else {\r\n                    two.add(Pair(i, k))\r\n                }\r\n            }\r\n            val left = m - cur + 1\r\n            // even numbers between cur and m\r\n            val even = m / 2 - (cur - 1) / 2\r\n            val odd = left - even\r\n            var evenCur: Int\r\n            var oddCur: Int\r\n            if (cur % 2 == 0) {\r\n                evenCur = cur\r\n                oddCur = cur + 1\r\n            } else {\r\n                evenCur = cur + 1\r\n                oddCur = cur\r\n            }\r\n            val ok = IntArray(even + 6)\r\n            ok[0] = 1\r\n            // gotta treat it like knapsack\r\n            var total = 0\r\n            for (p in two) {\r\n                val i = p.i\r\n                val len = p.len\r\n                for (j in even downTo 0) {\r\n                    if (j - len >= 0 && ok[j - len] == 1) {\r\n                        ok[j] = 1\r\n                    }\r\n                }\r\n                total += len\r\n            }\r\n            for (i in 0..even) {\r\n                if (ok[i] == 1 && total - i <= odd) {\r\n                    var here = i\r\n                    for (p in two) {\r\n                        val j = p.i\r\n                        val len = p.len\r\n                        if (here - len >= 0 && ok[here - len] == 1) {\r\n                            res[j] = evenCur\r\n                            if (evenCur + 2 * len - 2 > m) {\r\n                                out.println(-1)\r\n                                continue@outer\r\n                            }\r\n                            evenCur += 2 * len\r\n                            here -= len\r\n                        } else {\r\n                            res[j] = oddCur\r\n                            if (oddCur + 2 * len - 2 > m) {\r\n                                out.println(-1)\r\n                                continue@outer\r\n                            }\r\n                            oddCur += 2 * len\r\n                        }\r\n                    }\r\n                    break\r\n                }\r\n            }\r\n            for (i in 0 until n) {\r\n                if (res[i] == -1) {\r\n                    out.println(-1)\r\n                    continue@outer\r\n                }\r\n            }\r\n            for (i in 0 until n) out.print(res[i].toString() + \" \")\r\n        }\r\n        out.close()\r\n    }\r\n\r\n    fun sort(a: IntArray) {\r\n        val q = ArrayList<Int>()\r\n        for (i in a) q.add(i)\r\n        Collections.sort(q)\r\n        for (i in a.indices) a[i] = q[i]\r\n    }\r\n\r\n    fun sort(a: LongArray) {\r\n        val q = ArrayList<Long>()\r\n        for (i in a) q.add(i)\r\n        Collections.sort(q)\r\n        for (i in a.indices) a[i] = q[i]\r\n    }\r\n\r\n    internal class Pair(var i: Int, var len: Int)\r\n\r\n    //-----------MyScanner class for faster input----------\r\n    class MyScanner {\r\n        var br: BufferedReader\r\n        var st: StringTokenizer? = null\r\n        operator fun next(): String {\r\n            while (st == null || !st!!.hasMoreElements()) {\r\n                try {\r\n                    st = StringTokenizer(br.readLine())\r\n                } catch (e: IOException) {\r\n                    e.printStackTrace()\r\n                }\r\n            }\r\n            return st!!.nextToken()\r\n        }\r\n\r\n        fun nextInt(): Int {\r\n            return next().toInt()\r\n        }\r\n\r\n        fun nextLong(): Long {\r\n            return next().toLong()\r\n        }\r\n\r\n        fun nextDouble(): Double {\r\n            return next().toDouble()\r\n        }\r\n\r\n        fun nextLine(): String {\r\n            var str = \"\"\r\n            try {\r\n                str = br.readLine()\r\n            } catch (e: IOException) {\r\n                e.printStackTrace()\r\n            }\r\n            return str\r\n        }\r\n\r\n        init {\r\n            br = BufferedReader(InputStreamReader(System.`in`))\r\n        }\r\n    }\r\n"
}