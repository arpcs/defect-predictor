{
    "id": 131089370,
    "contestId": 1571,
    "creationTimeSeconds": 1633625026,
    "relativeTimeSeconds": 7726,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "armoking"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 20787200,
    "source": "import java.io.BufferedReader\r\nimport java.io.IOException\r\nimport java.io.InputStreamReader\r\nimport java.io.PrintWriter\r\nimport java.util.*\r\n\r\n\r\nfun main() {\r\n    MainJava().run();\r\n}\r\n \r\nclass MainJava {\r\n    fun Get(k: IntArray, n: Int, m: Int, indexes: ArrayList<Int>): TreeSet<Int>? {\r\n        if (indexes.size == 0) {\r\n            return TreeSet()\r\n        }\r\n        var tot = 0\r\n        for (i in indexes.indices) {\r\n            tot += k[indexes[i]]\r\n        }\r\n        if (tot > m) return null\r\n        val from = IntArray(m + 1)\r\n        Arrays.fill(from, -1)\r\n        for (index in indexes) {\r\n            for (x in m downTo 0) {\r\n                if (k[index] + x > m) continue\r\n                if (x == 0 || from[x] != -1) {\r\n                    if (from[x + k[index]] == -1) {\r\n                        from[x + k[index]] = index\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        val result = TreeSet<Int>()\r\n        var f = -1\r\n        for (x in tot downTo 0) {\r\n            if (from[x] != -1 && x * 2 >= tot) {\r\n                f = x\r\n            }\r\n        }\r\n        while (f != -1) {\r\n            result.add(from[f])\r\n            f = from[f]\r\n        }\r\n        return result\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun solve() {\r\n        val n = readInt()\r\n        val m = readInt()\r\n        val k = IntArray(n)\r\n        val t = IntArray(n)\r\n        val two = ArrayList<Int>()\r\n        for (i in 0 until n) {\r\n            k[i] = readInt()\r\n            t[i] = readInt()\r\n            if (t[i] == 2) {\r\n                two.add(i)\r\n            }\r\n        }\r\n        val value = Get(k, n, m, two)\r\n        if (value == null) {\r\n            out!!.print(\"-1\\n\")\r\n            return\r\n        }\r\n        val ans = IntArray(n)\r\n        var itr = 1\r\n        for (i in 0 until n) {\r\n            if (t[i] == 1) {\r\n                ans[i] = itr\r\n                itr += k[i]\r\n            }\r\n        }\r\n        var itr2 = itr\r\n        for (i in 0 until n) {\r\n            if (value.contains(i)) {\r\n                ans[i] = itr2\r\n                itr2 += 2\r\n            }\r\n        }\r\n        var itr3 = itr + 1\r\n        for (i in 0 until n) {\r\n            if (t[i] == 2 && !value.contains(i)) {\r\n                ans[i] = itr3\r\n                itr3 += 2\r\n            }\r\n        }\r\n        for (i in 0 until n) {\r\n            val to = ans[i] + (k[i] - 1) * t[i]\r\n            if (to > m) {\r\n                out!!.print(\"-1\\n\")\r\n                return\r\n            }\r\n        }\r\n        for (element in ans) {\r\n            out!!.print(\"$element \")\r\n        }\r\n        out!!.println()\r\n    }\r\n\r\n    var `in`: BufferedReader? = null\r\n    var out: PrintWriter? = null\r\n    var tok: StringTokenizer? = null\r\n    fun init() {\r\n        `in` = BufferedReader(InputStreamReader(System.`in`))\r\n        out = PrintWriter(System.out)\r\n    }\r\n\r\n    fun run() {\r\n        try {\r\n            tok = StringTokenizer(\"\")\r\n            init()\r\n            solve()\r\n            out!!.flush()\r\n            out!!.close()\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n            System.exit(-1)\r\n        }\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readLine(): String {\r\n        return `in`!!.readLine()\r\n    }\r\n\r\n    var delimiter = \" \"\r\n    @Throws(IOException::class)\r\n    fun readString(): String? {\r\n        while (!tok!!.hasMoreTokens()) {\r\n            val nextLine = readLine() ?: return null\r\n            tok = StringTokenizer(nextLine)\r\n        }\r\n        return tok!!.nextToken(delimiter)\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readIntArray(n: Int): IntArray {\r\n        val array = IntArray(n)\r\n        for (i in 0 until n) {\r\n            array[i] = readInt()\r\n        }\r\n        return array\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readInt(): Int {\r\n        return readString()!!.toInt()\r\n    }\r\n\r\n    fun sortIntArray(a: IntArray) {\r\n        val n = a.size\r\n        val arr = ArrayList<Int>(n)\r\n        for (j in a) arr.add(j)\r\n        Collections.sort(arr)\r\n        for (i in 0 until n) a[i] = arr[i]\r\n    }\r\n\r\n    companion object {\r\n        @JvmStatic\r\n        fun main(args: Array<String>) {\r\n            MainJava().run()\r\n        }\r\n    }\r\n}"
}