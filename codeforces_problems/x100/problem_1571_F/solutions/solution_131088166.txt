{
    "id": 131088166,
    "contestId": 1571,
    "creationTimeSeconds": 1633623258,
    "relativeTimeSeconds": 5958,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "TadijaSebez"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 592,
    "memoryConsumedBytes": 166092800,
    "source": "import java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.math.*\r\n\r\nfun rs()=readLine()!!\r\nfun ri()=rs().toInt()\r\nfun rl()=rs().toLong()\r\nfun rd()=rs().toDouble()\r\nfun ris()=rs().split(\" \").map{it.toInt()}\r\nfun rls()=rs().split(\" \").map{it.toLong()}\r\nfun rds()=rs().split(\" \").map{it.toDouble()}\r\n\r\nval out=mutableListOf<String>()\r\nfun pln(s:String){out.add(s)}\r\nfun pln(i:Int)=pln(i.toString())\r\nfun pln(l:Long)=pln(l.toString())\r\nfun pln(d:Double,precision:Int=12)=pln((\"%.\"+precision.toString()+\"f\").format(d))\r\nfun pln(a:IntArray)=pln(a.joinToString(\" \"))\r\nfun pln(a:LongArray)=pln(a.joinToString(\" \"))\r\nfun<T> pln(a:Array<T>)=pln(a.joinToString(\" \"))\r\nfun<T> pln(a:ArrayList<T>)=pln(a.joinToString(\" \"))\r\nfun output(){println(out.joinToString(\"\\n\"))}\r\n\r\nfun main(){\r\n    val (n,m)=ris()\r\n    val dp=Array(n+1){Array(m+1){false}}\r\n    dp[0][0]=true\r\n    val K=Array(n+1){0}\r\n    val T=Array(n+1){0}\r\n    var pref=1\r\n    var sum=0\r\n    var ans=Array(n+1){0}\r\n    for(i in 1..n){\r\n        val (k,t)=ris()\r\n        K[i]=k\r\n        T[i]=t\r\n        if(t==1){\r\n            ans[i]=pref\r\n            pref+=k\r\n            for(j in 0..m)dp[i][j]=dp[i-1][j]\r\n        }else{\r\n            sum+=k\r\n            for(j in m downTo 0){\r\n                dp[i][j]=dp[i-1][j]\r\n                if(j>=k){\r\n                    dp[i][j]=dp[i][j] or dp[i-1][j-k]\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(sum+pref-1>m){\r\n        pln(-1)\r\n    }else{\r\n        val goal=sum/2\r\n        var best=0\r\n        for(i in goal downTo 0){\r\n            if(dp[n][i]){\r\n                best=i\r\n                break\r\n            }\r\n        }\r\n        fun Calc(a:Int,b:Int):Int{\r\n            if(a==b)return a+b\r\n            else return max(a,b)*2-1\r\n        }\r\n        if(pref-1+Calc(sum-best,best)>m){\r\n            pln(-1)\r\n        }else{\r\n            val use=ArrayList<Int>()\r\n            val not=ArrayList<Int>()\r\n            for(i in n downTo 1)if(T[i]==2){\r\n                if(best>=K[i] && dp[i-1][best-K[i]]){\r\n                    best-=K[i]\r\n                    use.add(i)\r\n                }else not.add(i)\r\n            }\r\n            var ptr=pref\r\n            for(i in not){\r\n                ans[i]=ptr\r\n                ptr+=K[i]*2\r\n            }\r\n            ptr=pref+1\r\n            for(i in use){\r\n                ans[i]=ptr\r\n                ptr+=K[i]*2\r\n            }\r\n            var ret=ArrayList<Int>()\r\n            for(i in 1..n)ret.add(ans[i])\r\n            pln(ret)\r\n        }\r\n    }\r\n    output()\r\n}"
}