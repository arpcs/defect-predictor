{
    "id": 131082643,
    "contestId": 1571,
    "creationTimeSeconds": 1633620112,
    "relativeTimeSeconds": 2812,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Tlatoani"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 68710400,
    "source": "fun main() {\n    val (n, m) = readLine()!!.split(\" \").map { it.toInt() }\n    val competitions = Array(n) {\n        val (k, t) = readLine()!!.split(\" \").map { it.toInt() }\n        Competition(k, t == 2)\n    }\n    val totalAlternating = competitions.filter { it.alternating }.sumBy { it.stages }\n    val totalOther = competitions.filter { !it.alternating }.sumBy { it.stages }\n    if (totalAlternating > m) {\n        println(-1)\n        return\n    }\n    val dp = Array(n + 1) { IntArray((totalAlternating / 2) + 1) { -1 } }\n    dp[0][0] = 0\n    for (j in 0 until n) {\n        for (x in 0..totalAlternating / 2) {\n            if (dp[j][x] >= 0) {\n                dp[j + 1][x] = 0\n            }\n        }\n        if (competitions[j].alternating) {\n            for (x in totalAlternating / 2 downTo competitions[j].stages) {\n                if (dp[j][x - competitions[j].stages] >= 0) {\n                    dp[j + 1][x] = 1\n                }\n            }\n        }\n    }\n    var x = (0..totalAlternating / 2).last { dp[n][it] >= 0 }\n    if ((2 * (totalAlternating - x)) + (if (2 * x == totalAlternating) 0 else -1) + totalOther > m) {\n        println(-1)\n        return\n    }\n    val answer = IntArray(n)\n    var day = 1\n    for (j in 0 until n) {\n        if (!competitions[j].alternating) {\n            answer[j] = day\n            day += competitions[j].stages\n        }\n    }\n    val smallerHalf = mutableSetOf<Int>()\n    for (j in n - 1 downTo 0) {\n        if (dp[j + 1][x] == 1) {\n            smallerHalf.add(j)\n            x -= competitions[j].stages\n        }\n    }\n    var day1 = day\n    for (j in 0 until n) {\n        if (competitions[j].alternating && j !in smallerHalf) {\n            answer[j] = day1\n            day1 += 2 * competitions[j].stages\n        }\n    }\n    var day2 = day + 1\n    for (j in 0 until n) {\n        if (j in smallerHalf) {\n            answer[j] = day2\n            day2 += 2 * competitions[j].stages\n        }\n    }\n    println(answer.joinToString(\" \"))\n}\n\ndata class Competition(val stages: Int, val alternating: Boolean)"
}