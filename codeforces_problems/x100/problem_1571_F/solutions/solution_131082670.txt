{
    "id": 131082670,
    "contestId": 1571,
    "creationTimeSeconds": 1633620126,
    "relativeTimeSeconds": 2826,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "xiaowuc1"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 21811200,
    "source": "import java.io.*\r\nimport java.util.*\r\nimport kotlin.collections.HashSet\r\n\r\n    var br: BufferedReader? = null\r\n    var pw: PrintWriter? = null\r\n    var st: StringTokenizer? = null\r\n\r\n    /*\r\nreminders:\r\ndelete JVMStatic\r\nto use arrays, make sure to !! after them\r\nalso .length -> .size\r\narrays are bad, use ArrayList instead\r\nglobal things must be initialized to something (explicit null)\r\ndelete the Kotlin.throws\r\nsort with inline comparators, you may need to non-null\r\ndo not implements Comparable \r\n\t */\r\n    @Throws(IOException::class)\r\n    fun main(args: Array<String>) {\r\n        br = BufferedReader(InputStreamReader(System.`in`))\r\n        pw = PrintWriter(BufferedWriter(OutputStreamWriter(System.out)))\r\n        solve()\r\n        exitImmediately()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun solve() {\r\n        rsolve()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun rsolve() {\r\n        val n = readInt()\r\n        var m = readInt()\r\n        val ret = IntArray(n)\r\n        val twos = ArrayList<State>()\r\n        var total = 0\r\n        for (i in 0 until n) {\r\n            val amt = readInt()\r\n            val delta = readInt()\r\n            if (delta == 1) {\r\n                if (amt > m) die()\r\n                ret[i] = m - amt + 1\r\n                m -= amt\r\n                continue\r\n            }\r\n            total += amt\r\n            twos.add(State(amt, i))\r\n        }\r\n        val poss = BooleanArray(m + 1)\r\n        val parentidx = IntArray(m + 1) // IN TWOS ARRAYLIST\r\n        poss[0] = true\r\n        for (i in twos.indices) {\r\n            for (j in m downTo twos[i].num) {\r\n                if (!poss[j] && poss[j - twos[i].num]) {\r\n                    poss[j] = true\r\n                    parentidx[j] = i\r\n                }\r\n            }\r\n        }\r\n        val lhs = m / 2\r\n        val rhs = m - lhs\r\n        var dppartition = -1\r\n        for (a in 0..rhs) {\r\n            if (poss[a] && total - a <= lhs) {\r\n                dppartition = a\r\n            }\r\n        }\r\n        if (dppartition < 0) {\r\n            die()\r\n        }\r\n        val good: MutableSet<Int> = HashSet()\r\n        while (dppartition > 0) {\r\n            good.add(twos[parentidx[dppartition]].index)\r\n            dppartition -= twos[parentidx[dppartition]].num\r\n        }\r\n        var lhsret = 1\r\n        var rhsret = 2\r\n        val used: MutableSet<Int> = HashSet()\r\n        for (out in twos) {\r\n            if (good.contains(out.index)) {\r\n                ret[out.index] = lhsret\r\n                for (a in 0 until out.num) used.add(lhsret + 2 * a)\r\n                lhsret += 2 * out.num\r\n            } else {\r\n                ret[out.index] = rhsret\r\n                for (a in 0 until out.num) used.add(rhsret + 2 * a)\r\n                rhsret += 2 * out.num\r\n            }\r\n        }\r\n        for (i in ret.indices) {\r\n            pw!!.print(ret[i])\r\n            if (i < ret.size - 1) pw!!.print(' ') else pw!!.println()\r\n        }\r\n    }\r\n\r\n    fun die() {\r\n        pw!!.println(-1)\r\n        exitImmediately()\r\n    }\r\n\r\n    fun exitImmediately() {\r\n        pw!!.close()\r\n        System.exit(0)\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readInt(): Int {\r\n        return readToken().toInt()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readLong(): Long {\r\n        return readToken().toLong()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readDouble(): Double {\r\n        return readToken().toDouble()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readLine(): String? {\r\n        val s = br!!.readLine()\r\n        if (s == null) exitImmediately()\r\n        st = null\r\n        return s\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readToken(): String {\r\n        while (st == null || !st!!.hasMoreTokens()) {\r\n            st = StringTokenizer(readLine()!!.trim { it <= ' ' })\r\n        }\r\n        return st!!.nextToken()\r\n    }\r\n\r\n    internal class State(var num: Int, var index: Int)\r\n"
}