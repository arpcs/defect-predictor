{
    "id": 154220836,
    "contestId": 1571,
    "creationTimeSeconds": 1650477348,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "BruteForcee"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 2457600,
    "source": "fun main() {\r\n val (n, m) = readInts()\r\n val groups = List(2) { mutableListOf<IndexedValue<Int>>() }\r\n repeat(n) {\r\n  val (k, t) = readInts()\r\n  groups[t - 1].add(IndexedValue(it, k))\r\n }\r\n val groupSum = groups.map { group -> group.sumOf { it.value } }\r\n val can = BooleanArray(m + 1)\r\n val how = Array<IndexedValue<Int>?>(m + 1) { null }\r\n can[0] = true\r\n for (series in groups[1]) for (i in m - series.value downTo 0) {\r\n  if (!can[i] || can[i + series.value]) continue\r\n  can[i + series.value] = true\r\n  how[i + series.value] = series\r\n }\r\n val x = can.indices.firstOrNull { can[it] && maxOf(2 * it - 1, 2 * (groupSum[1] - it)) + groupSum[0] <= m }\r\n  ?: return println(-1)\r\n val odd = mutableListOf<IndexedValue<Int>>()\r\n var z = x\r\n while (z > 0) z -= how[z]!!.also { odd.add(it) }.value\r\n val ans = IntArray(n)\r\n fun place(list: List<IndexedValue<Int>>, start: Int, gap: Int) {\r\n  list.fold(start) { time, series -> (time + series.value * gap).also { ans[series.index] = time } }\r\n }\r\n place(odd, 1, 2)\r\n place(groups[1] - odd, 2, 2)\r\n place(groups[0], m - groupSum[0] + 1, 1)\r\n println(ans.joinToString(\" \"))\r\n}\r\n private fun readLn() = readLine()!!\r\nprivate fun readStrings() = readLn().split(\" \")\r\nprivate fun readInts() = readStrings().map { it.toInt() }"
}