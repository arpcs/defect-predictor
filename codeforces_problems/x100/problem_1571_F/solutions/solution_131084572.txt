{
    "id": 131084572,
    "contestId": 1571,
    "creationTimeSeconds": 1633621135,
    "relativeTimeSeconds": 3835,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "hieplpvip"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 23961600,
    "source": "private fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n\r\nfun main() {\r\n  var (n, m) = readInts()\r\n  var k = IntArray(n)\r\n  var t = IntArray(n)\r\n  var ans = IntArray(n)\r\n  for (i in 0 until n) {\r\n    var (kk, tt) = readInts()\r\n    k[i] = kk\r\n    t[i] = tt\r\n  }\r\n\r\n  var last = 0\r\n  var sum2 = 0\r\n  for (i in 0 until n) {\r\n    if (t[i] == 1) {\r\n      ans[i] = last + 1\r\n      last += k[i]\r\n    } else {\r\n      sum2 += k[i]\r\n    }\r\n  }\r\n\r\n  if (last + sum2 > m) {\r\n    println(-1)\r\n    return\r\n  }\r\n\r\n  val part1 = (m - last) / 2\r\n  val part2 = (m - last) - part1\r\n  var A = ArrayList<Int>()\r\n  for (i in 0 until n) {\r\n    if (t[i] == 2) {\r\n      A.add(i)\r\n    }\r\n  }\r\n\r\n  var dp = BooleanArray(part1 + 1)\r\n  var trace = IntArray(part1 + 1)\r\n  dp[0] = true\r\n  for (id in A) {\r\n    for (j in part1 downTo k[id]) {\r\n      if (dp[j - k[id]]) {\r\n        dp[j] = true\r\n        trace[j] = id\r\n      }\r\n    }\r\n  }\r\n\r\n  var sum = -1\r\n  for (i in 0..part1) {\r\n    if (dp[i] && sum2 - i <= part2) {\r\n      sum = i\r\n      break\r\n    }\r\n  }\r\n\r\n  if (sum == -1) {\r\n    println(-1)\r\n    return\r\n  }\r\n\r\n  var B = HashSet<Int>()\r\n  while (sum > 0) {\r\n    var id = trace[sum]\r\n    B.add(id)\r\n    sum -= k[id]\r\n  }\r\n\r\n  var C = ArrayList<Int>()\r\n  for (id in A) {\r\n    if (!B.contains(id)) {\r\n      C.add(id)\r\n    }\r\n  }\r\n\r\n  var x = last + 2\r\n  for (id in B) {\r\n    ans[id] = x\r\n    x += 2 * k[id]\r\n  }\r\n\r\n  x = last + 1\r\n  for (id in C) {\r\n    ans[id] = x\r\n    x += 2 * k[id]\r\n  }\r\n\r\n  println(ans.joinToString(\" \"))\r\n}"
}