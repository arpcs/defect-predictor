{
    "id": 149239144,
    "contestId": 1571,
    "creationTimeSeconds": 1646995361,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "MayFlyyh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 1536000,
    "source": "//\u6839\u672c\u4e0d\u4f1a\uff0c\u53ea\u662f\u4e3a\u4e86\u9690\u85cf\u9898\u76ee\r\nimport java.io.BufferedReader\r\nimport java.io.InputStream\r\nimport java.io.InputStreamReader\r\nimport java.util.*\r\n \r\nclass MyReader(inputStream: InputStream) {\r\n  private val reader = BufferedReader(InputStreamReader(inputStream))\r\n  private var tokenizer: StringTokenizer? = null\r\n \r\n  fun next(): String {\r\n    while (true) {\r\n      tokenizer.let {\r\n        if (it == null || !it.hasMoreTokens()) {\r\n          tokenizer = StringTokenizer(reader.readLine())\r\n        } else {\r\n          return it.nextToken()\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\nval reader = MyReader(System.`in`)\r\nfun next() = reader.next()\r\nfun nextInt() = next().toInt()\r\nfun nextLong() = next().toLong()\r\nfun nextDouble() = next().toDouble()\r\nfun nextStrings(n: Int) = Array(n) { next() }\r\nfun nextInts(n: Int) = IntArray(n) { nextInt() }\r\nfun nextLongs(n: Int) = LongArray(n) { nextLong() }\r\nfun nextDoubles(n: Int) = DoubleArray(n) { nextDouble() }\r\n \r\nfun main() {\r\n  val (n, m) = nextInts(2)\r\n  val ans = IntArray(n) { -1 }\r\n  var day0 = 1\r\n  val xs = mutableListOf<Int>()\r\n  var ss = 0\r\n  for (i in 0 until n) {\r\n    val (k, t) = nextInts(2)\r\n    if (t == 1) {\r\n      ans[i] = day0\r\n      day0 += k\r\n    } else {\r\n      ss += k\r\n      xs.add(k)\r\n    }\r\n  }\r\n \r\n  val days = m - day0 + 1\r\n  if (days - ss < 0) {\r\n    println(\"-1\")\r\n    return\r\n  }\r\n \r\n  val days0 = (days + 1) / 2\r\n  val dp = IntArray(days0 + 1) { -1 }\r\n  dp[0] = -2\r\n  for (i in 0 until xs.size) {\r\n    val x = xs[i]\r\n    for (j in days0 downTo x)\r\n      if (dp[j] == -1 && dp[j - x] != -1)\r\n        dp[j] = i\r\n  }\r\n \r\n  var dd0 = days0\r\n  while (dp[dd0] == -1) --dd0\r\n  val dd1 = ss - dd0\r\n  if (dd1 > days - days0) {\r\n    println(\"-1\")\r\n    return\r\n  }\r\n  var day1 = day0 + 1\r\n \r\n  val ans2 = IntArray(xs.size) { -1 }\r\n  while (dd0 > 0) {\r\n    val i = dp[dd0]\r\n    dd0 -= xs[i]\r\n    ans2[i] = day0\r\n    day0 += xs[i] * 2\r\n  }\r\n  for (i in 0 until ans2.size) {\r\n    if (ans2[i] == -1) {\r\n      ans2[i] = day1\r\n      day1 += xs[i] * 2\r\n    }\r\n  }\r\n \r\n  var j = 0\r\n  ans2.forEach {\r\n    while (ans[j] != -1) ++j\r\n    ans[j] = it\r\n  }\r\n \r\n \r\n  println(ans.joinToString(\" \"))\r\n}"
}