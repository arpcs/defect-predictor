{
    "id": 131084221,
    "contestId": 1571,
    "creationTimeSeconds": 1633620951,
    "relativeTimeSeconds": 3651,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "thenymphsofdelphi"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 107315200,
    "source": "import kotlin.math.*\r\n\r\nprivate fun readLn() = readLine()!!\r\nprivate fun readInt() = readLn().toInt()\r\nprivate fun readLong() = readLn().toLong()\r\nprivate fun readStrings() = readLn().split(\" \")\r\nprivate fun readInts() = readStrings().map { it.toInt() }\r\nprivate fun readLongs() = readStrings().map { it.toLong() }\r\n\r\nfun main(){\r\n    var (n, m) = readInts()\r\n    val k = IntArray(n + 1); val t = IntArray(n + 1)\r\n    val ans = IntArray(n + 1)\r\n    var sumk = 0\r\n    for (i in 1..n){\r\n        val (tk, tt) = readInts()\r\n        k[i] = tk; t[i] = tt;\r\n        sumk += tk\r\n    }\r\n    if (sumk > m){\r\n        println(-1)\r\n        return\r\n    }\r\n    val prefk = IntArray(n + 1)\r\n    for (i in 1..n){\r\n        prefk[i] = prefk[i - 1]\r\n        if (t[i] == 1){\r\n            ans[i] = m - k[i] + 1\r\n            m -= k[i]\r\n        }\r\n        else{\r\n            prefk[i] += k[i]\r\n        }\r\n    }\r\n    val dp = Array(n + 1){ Array(m + 1){ false } }\r\n    dp[0][0] = true\r\n    for (i in 1..n){\r\n        if (t[i] == 1){\r\n            for (j in 0..prefk[i]){\r\n                dp[i][j] = dp[i - 1][j]\r\n            }\r\n        }\r\n        else{\r\n            for (j in 0..prefk[i]){\r\n                dp[i][j] = dp[i - 1][j]\r\n                if (j >= k[i] && dp[i - 1][j - k[i]] == true){\r\n                    dp[i][j] = true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var ansl = -1\r\n    for (l in 0..prefk[n]){\r\n        val r = prefk[n] - l\r\n        if (dp[n][l] == true && l <= (m + 1) / 2 && r <= m / 2){\r\n            ansl = l\r\n            break\r\n        }\r\n    }\r\n    if (ansl == -1){\r\n        println(-1)\r\n        return\r\n    }\r\n    var l = m; var r = m - 1\r\n    for (i in n downTo 1){\r\n        if (t[i] == 1){\r\n            continue\r\n        }\r\n        if (dp[i - 1][ansl] == true){\r\n            ans[i] = r - 2 * k[i] + 2\r\n            r -= 2 * k[i]\r\n        }\r\n        else{\r\n            ans[i] = l - 2 * k[i] + 2\r\n            l -= 2 * k[i]\r\n            ansl -= k[i]\r\n        }\r\n    }\r\n    val tans = IntArray(n)\r\n    for (i in 1..n){\r\n        tans[i - 1] = ans[i]\r\n    }\r\n    println(tans.joinToString(separator = \" \"))\r\n}"
}