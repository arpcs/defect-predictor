{
    "id": 131083978,
    "contestId": 1571,
    "creationTimeSeconds": 1633620832,
    "relativeTimeSeconds": 3532,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Golovanov399"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 811,
    "memoryConsumedBytes": 168140800,
    "source": "import kotlin.math.*\r\n\r\ndata class Contest(val days: Int, val gap: Int)\r\n\r\nfun solve() {\r\n    val (n, m) = readLine()!!.split(' ').map(String::toInt)\r\n    val a = (0 until n).map {\r\n        val (k, t) = readLine()!!.split(' ').map(String::toInt)\r\n        Contest(k, if (k == 1) 2 else t)\r\n    }\r\n    if (a.sumOf { it.days } > m) {\r\n        println(\"-1\")\r\n        return\r\n    }\r\n    val totalDouble = a.filter { it.gap == 2 }.sumOf { it.days }\r\n    val prs = a.scan(List(totalDouble + 1) { if (it == 0) 0 else -1 }) { old, c ->\r\n        if (c.gap == 1) {\r\n            old\r\n        } else {\r\n            List(totalDouble + 1) { i ->\r\n                if (old[i] > -1) {\r\n                    old[i]\r\n                } else if (i >= c.days && old[i - c.days] > -1) {\r\n                    i - c.days\r\n                } else {\r\n                    -1\r\n                }\r\n            }\r\n        }\r\n    }.reversed()\r\n\r\n    val minDouble = prs.first().withIndex().first { it.index * 2 >= totalDouble && it.value > -1 }.index\r\n    var from = minDouble * 2 - 1 + (if (minDouble * 2 == totalDouble && minDouble > 0) 1 else 0)\r\n    if (from + a.filter { it.gap == 1 }.sumOf { it.days } > m) {\r\n        println(\"-1\")\r\n        return\r\n    }\r\n\r\n    var cur = minDouble\r\n    var cur0 = 0\r\n    var cur1 = 1\r\n    val ans = a.reversed().mapIndexed { i, c ->\r\n        when {\r\n            c.gap == 1 -> {\r\n                from.also { from += c.days }\r\n            }\r\n            prs[i][cur] == cur -> {\r\n                cur1.also { cur1 += 2 * c.days }\r\n            }\r\n            else -> {\r\n                cur = prs[i][cur]\r\n                cur0.also { cur0 += 2 * c.days }\r\n            }\r\n        }\r\n    }\r\n    println(ans.reversed().map(Int::inc).joinToString(\" \"))\r\n}\r\n\r\nfun main() {\r\n    val t = 1 // readLine()!!.toInt()\r\n    repeat (t) {\r\n        solve()\r\n    }\r\n}\r\n"
}