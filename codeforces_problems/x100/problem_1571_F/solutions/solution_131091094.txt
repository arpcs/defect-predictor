{
    "id": 131091094,
    "contestId": 1571,
    "creationTimeSeconds": 1633626806,
    "relativeTimeSeconds": 9506,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Ji_Kuai"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 27955200,
    "source": "import java.io.*\nimport java.util.*\nimport kotlin.math.*\n/************************************ IO *********************************************************/\n@JvmField val INPUT = System.`in`\n@JvmField val OUTPUT = System.out\n@JvmField val _reader = INPUT.bufferedReader()\nfun readLine(): String? = _reader.readLine()\nfun readLn() = _reader.readLine()!!\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\nfun read(): String {\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\n    return _tokenizer.nextToken()\n}\nfun readInt() = read().toInt()\nfun readDouble() = read().toDouble()\nfun readLong() = read().toLong()\nfun readStrings(n: Int) = List(n) { read() }\nfun readLines(n: Int) = List(n) { readLn() }\nfun readInts(n: Int) = List(n) { read().toInt() }\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\nfun readLongs(n: Int) = List(n) { read().toLong() }\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\n/*****************************************************************************************************/\nfun gcd(a: Int, b: Int): Int = if (b == 0) a else gcd(b,a%b)\nfun gcd(a: Long, b: Long): Long = if (b == 0L) a else gcd(b,a%b)\nfun Boolean.toInt() = if (this) 1 else 0\nval INF = 0x3f3f3f3f\nval MOD = 1000000007\nfun main() { Thread(null, {newmain()}, \"JiKuai\", 1 shl 28).start() }\nfun assert(x: Boolean) {if(!x) throw AssertionError(); }\n/************************************ From wiwi_ho ********************************************/\nfun <T> List<T>.binarySearchWith(condition: (T) -> Boolean): Int {\n    return binarySearch {\n        if(condition(it)) 1\n        else -1\n    }.let { -(it + 1) }\n}\nfun List<Int>.lowerBound(i: Int) = binarySearchWith { it >= i }\nfun List<Int>.upperBound(i: Int) = binarySearchWith { it > i }\nfun List<Long>.lowerBound(i: Long) = binarySearchWith { it >= i }\nfun List<Long>.upperBound(i: Long) = binarySearchWith { it > i }\n/***********************************************************************************************/\n\nfun newmain() {\n    var (n, m) = readInts(2)\n    var ans = IntArray(n)\n    var s = 0\n    var arr = IntArray(n)\n    var two = MutableList(0) { 0 }\n    var one = MutableList(0) { 0 }\n    for(i in 0 until n) {\n        var (k, t) = readInts(2)\n        arr[i] = k\n        if(t == 1) {\n            one.add(i)\n        }\n        else {\n            s += k\n            two.add(i)\n        }\n    }\n    var a = 1\n    var b = 2\n    var dp = IntArray(m + 1) { -1 }\n    //println(s\n    dp[0] = INF\n    for(i in two) {\n        for(j in min(s, m) downTo arr[i]) {\n            if(dp[j - arr[i]] != -1 && dp[j] == -1)\n                dp[j] = i\n        }\n    }\n    //println(s)\n    var g = -1\n    for(i in 0..m) {\n        if(i >= s - i && dp[i] != -1 && dp[s - i] != -1 && i <= (m - a) / 2 + 1 && s - i <= (if(m < b) 0 else (m - b) / 2 + 1)) {\n            if(g == -1 || abs(g - (s - g)) > abs(i - (s - i)))\n                g = i\n        }\n    }\n\n    if(g == -1) {\n        println(-1)\n        return\n    }\n\n    while(g > 0) {\n        var i = dp[g]\n        ans[i] = a\n        a += arr[i] * 2\n        g -= arr[i]\n    }\n    for(i in two) {\n        if(ans[i] == 0) {\n            ans[i] = b\n            b += arr[i] * 2\n        }\n    }\n    var can = IntArray(m + 1) { 1 }\n    for(i in 1 until a step 2) {\n        can[i] = 0\n    }\n    for(i in 2 until b step 2) {\n        can[i] = 0\n    }\n\n    var y = -1\n    var owo = Stack<Int>()\n    var l = 1\n    for(i in 1..m+1) {\n        if(i == m + 1 || can[i] == 0) {\n            if(l <= m && can[l] == 1) {\n                if(i - l == 1)\n                   owo.add(l)\n                else\n                    y = l\n                //owo.add(Pair(l, i - l))\n            }\n            l = i + 1\n        }\n    }\n    var it = 0\n    for(i in one) {\n        if(arr[i] == 1 && owo.isNotEmpty()) {\n            ans[i] = owo.peek()\n            owo.pop()\n        }\n    }\n    for(i in one) {\n        if(ans[i] > 0)\n            continue\n        if(y == -1 || y + arr[i] - 1 > m) {\n            println(-1)\n            return\n        }\n        ans[i] = y\n        y += arr[i]\n    }\n    println(ans.joinToString(\" \"))\n}"
}