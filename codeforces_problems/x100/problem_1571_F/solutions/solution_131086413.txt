{
    "id": 131086413,
    "contestId": 1571,
    "creationTimeSeconds": 1633622175,
    "relativeTimeSeconds": 4875,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "LeoPro"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 24268800,
    "source": "fun main() {\r\n    val (n, m) = readLine()!!.split(' ').map { it.toInt() }\r\n    val c = List(n) { readLine()!!.split(' ').map { it.toInt() } }\r\n    var cSum = m - c.filter { it[1] == 1 }.sumOf { it[0] }\r\n    if (!solve(cSum, c.withIndex().filter { it.value[1] == 2 })) return println(-1)\r\n    for (i in c.indices) {\r\n        if (c[i][1] == 2) continue\r\n        ans[i] = cSum\r\n        cSum += c[i][0]\r\n    }\r\n    println(ans.slice(0 until n).map { it + 1 }.joinToString(\" \"))\r\n}\r\n\r\nfun solve(m: Int, c: List<IndexedValue<List<Int>>>): Boolean {\r\n    val values = c.map { it.value[0] }.toIntArray()\r\n    val sum = values.sum()\r\n    if (sum > m) return false\r\n    val up = (m + 1) / 2\r\n    val down = (sum - (m / 2)).coerceAtLeast(0)\r\n    val ok = IntArray(up + 1) { -2 }\r\n    ok[0] = -1\r\n    for (i in values.indices) {\r\n        val x = values[i]\r\n        for (cap in ok.indices.reversed()) {\r\n            if (cap < x) break\r\n            if (ok[cap - x] == -2 || ok[cap] != -2) continue\r\n            ok[cap] = i\r\n        }\r\n    }\r\n    if (ok.slice(down..up).all { it == -2 }) return false\r\n\r\n    var ptr = (down..up).find { ok[it] != -2 }!!\r\n    val even = BooleanArray(values.size)\r\n    while (ptr > 0) {\r\n        even[ok[ptr]] = true\r\n        ptr -= values[ok[ptr]]\r\n    }\r\n    var cSum = 0\r\n    for (i in values.indices) {\r\n        if (!even[i]) continue\r\n        ans[c[i].index] = 2 * cSum\r\n        cSum += values[i]\r\n    }\r\n    cSum = 0\r\n    for (i in values.indices) {\r\n        if (even[i]) continue\r\n        ans[c[i].index] = 2 * cSum + 1\r\n        cSum += values[i]\r\n    }\r\n    return true\r\n}\r\n\r\nval ans = IntArray(5000)"
}