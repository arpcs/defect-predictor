{
    "id": 131090834,
    "contestId": 1571,
    "creationTimeSeconds": 1633626592,
    "relativeTimeSeconds": 9292,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "madmax"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 22323200,
    "source": "private fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n\r\n\r\nconst val INF = 1_000_000_000\r\n\r\n\r\nfun main(args: Array<String>) {\r\n    var (n, m) = readInts()\r\n    val a = mutableListOf<Pair<Int, Int>>()\r\n    val ans = MutableList(n) { 0 }\r\n    var sum = 0\r\n    for (i in 0 until n) {\r\n        val (k, t) = readInts()\r\n        if (t == 1) {\r\n            ans[i] = m - k + 1\r\n            m -= k\r\n        }\r\n        else {\r\n            a.add(Pair(k, i))\r\n            sum += k\r\n        }\r\n    }\r\n    if (m < 0) {\r\n        println(-1)\r\n        return\r\n    }\r\n    val cnt0 = m / 2\r\n    val cnt1 = m / 2 + (m % 2)\r\n    val dp = MutableList(m + 1) { false }\r\n    val from = MutableList(m + 1) { 0 }\r\n    dp[0] = true\r\n    a.forEachIndexed { index, pair ->\r\n        for (i in m downTo 0) {\r\n            if (dp[i] && (i + pair.first) <= m && !dp[i + pair.first]) {\r\n                dp[i + pair.first] = true\r\n                from[i + pair.first] = index\r\n            }\r\n        }\r\n    }\r\n    for (i in dp.indices) {\r\n        if (!dp[i])\r\n            continue\r\n        if ((i <= cnt0 && (sum - i) <= cnt1) || (i <= cnt1 && (sum - i) <= cnt0)) {\r\n            var t = i\r\n            var day = if ((i <= cnt1 && (sum - i) <= cnt0)) 1 else 2\r\n            var day2 = if (day == 1) 2 else 1\r\n            val used = MutableList(a.size) {false}\r\n            while (t != 0) {\r\n                ans[a[from[t]].second] = day\r\n                used[from[t]] = true\r\n                t -= a[from[t]].first\r\n                day += 2 * a[from[t]].first\r\n            }\r\n            a.forEachIndexed { index, pair ->\r\n                if (!used[index]) {\r\n                    ans[pair.second] = day2\r\n                    day2 += 2 * pair.first\r\n                }\r\n            }\r\n            println(ans.joinToString(\" \"))\r\n            return\r\n        }\r\n    }\r\n    println(-1)\r\n}\r\n"
}