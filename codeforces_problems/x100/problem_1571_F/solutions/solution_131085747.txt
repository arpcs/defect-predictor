{
    "id": 131085747,
    "contestId": 1571,
    "creationTimeSeconds": 1633621786,
    "relativeTimeSeconds": 4486,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "smax"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 88,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 104448000,
    "source": "import kotlin.math.*\n\nprivate fun readLn() = readLine()!!\nprivate fun readInt() = readLn().toInt()\nprivate fun readStrings() = readLn().split(' ')\nprivate fun readInts() = readStrings().map { it.toInt() }\n\nfun main() {\n    var (n, m) = readInts()\n    var k = IntArray(n)\n    var t = IntArray(n)\n    var tot = 0\n    var totOne = 0\n    var totTwo = 0\n    var numTwo = 0\n    var dp = Array<BooleanArray>(n + 1) { BooleanArray(m + 1) }\n    var par = Array<BooleanArray>(n + 1) { BooleanArray(m + 1) }\n    var twoIndices = ArrayList<Int>()\n    dp[0][0] = true\n    for (i in 0 until n) {\n        var (ki, ti) = readInts()\n        k[i] = ki\n        t[i] = ti\n        tot += k[i]\n        if (t[i] == 2) {\n            for (j in 0..m) {\n                if (dp[numTwo][j]) {\n                    dp[numTwo + 1][j] = true\n                    par[numTwo + 1][j] = false\n                    if (j + k[i] <= m) {\n                        dp[numTwo + 1][j + k[i]] = true\n                        par[numTwo + 1][j + k[i]] = true\n                    }\n                }\n            }\n            totTwo += k[i]\n            numTwo++\n            twoIndices.add(i)\n        } else {\n            totOne += k[i]\n        }\n    }\n    if (tot > m) {\n        println(-1)\n        return\n    }\n    for (j in 0..totTwo) {\n        var fin = max(2 * j, 2 * (totTwo - j) + 1)\n        if (dp[numTwo][j] && 2 * j - 1 <= m && 2 * (totTwo - j) <= m && m - fin + 1 >= totOne) {\n            var x = j\n            var odd = 1\n            var even = 2\n            var ret = IntArray(n)\n            for (i in numTwo downTo 1) {\n                if (par[i][x]) {\n                    ret[twoIndices[i - 1]] = odd\n                    odd += k[twoIndices[i - 1]] * 2\n                    x -= k[twoIndices[i - 1]]\n                } else {\n                    ret[twoIndices[i - 1]] = even\n                    even += k[twoIndices[i - 1]] * 2\n                }\n            }\n            var nxt = fin\n            for (i in 0 until n) {\n                if (t[i] == 1) {\n                    ret[i] = nxt\n                    nxt += k[i]\n                }\n            }\n            println(ret.joinToString(\" \"))\n            return\n        }\n    }\n    println(-1)\n}"
}