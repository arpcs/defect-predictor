{
    "id": 131089252,
    "contestId": 1571,
    "creationTimeSeconds": 1633624831,
    "relativeTimeSeconds": 7531,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "shiven"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.5",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 26214400,
    "source": "import java.util.*\r\nimport kotlin.math.min\r\n\r\nprivate fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n\r\nfun main() {\r\n    var (n, m) = readInts()\r\n    var k = IntArray(n)\r\n    var t = IntArray(n)\r\n    var id = IntArray(n)\r\n    var pt = 0\r\n    var cons = 0\r\n    var remsum = 0\r\n    var consid = IntArray(n)\r\n    var consk = IntArray(n)\r\n    var conspt = 0\r\n    for (i in 0 until n) {\r\n        var (a, b) = readInts()\r\n        if (b == 1) {\r\n            consk[conspt] = a\r\n            consid[conspt++] = i\r\n            cons += a\r\n            continue\r\n        }\r\n\r\n        id[pt] = i\r\n        k[pt] = a\r\n        t[pt] = b\r\n        remsum += a\r\n        pt++\r\n    }\r\n\r\n    var initn = n\r\n\r\n    if ((remsum/2)+cons > m) {\r\n        println(-1)\r\n    } else {\r\n        n = pt\r\n        var dp = BooleanArray(remsum+2)\r\n        var frm = IntArray(remsum+2)\r\n        dp[0] = true\r\n\r\n        for (i in 0 until n) {\r\n            for (v in remsum+1 downTo 0) if (dp[v] == true) {\r\n                if (v+k[i] < remsum+2 && !dp[v+k[i]]) {\r\n                    dp[v+k[i]] = true\r\n                    frm[v+k[i]] = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        var opt = remsum\r\n        for (i in 0 until remsum+2) if (remsum-i <= i && dp[i] == true && i-(remsum-i) <= opt-(remsum-opt)) {\r\n            opt = i\r\n        }\r\n\r\n//        println(\"got option $opt\")\r\n        var consbegin = 2*opt\r\n        if (remsum-opt == opt) consbegin++\r\n        var largerSet = IntArray(n)\r\n        var alternateCount = pt\r\n        pt = 0\r\n        var v = opt\r\n        var done = BooleanArray(n)\r\n        for (i in 0 until n) done[i] = false\r\n        while (v > 0) {\r\n            largerSet[pt++] = frm[v]\r\n            done[frm[v]] = true\r\n            v -= k[frm[v]]\r\n        }\r\n\r\n        var valid = true\r\n\r\n        n = initn\r\n        var ans = IntArray(n)\r\n        var d = 1\r\n\r\n        for (i in 0 until pt) {\r\n            ans[id[largerSet[i]]] = d\r\n            d += k[largerSet[i]]*2\r\n            if (d-2 > m) {\r\n                valid = false\r\n            }\r\n        }\r\n\r\n        var bigd = d\r\n        if (bigd != 1) d = 2\r\n        else d = 1\r\n\r\n        for (i in 0 until alternateCount) if (!done[i]) {\r\n            ans[id[i]] = d\r\n            d += k[i]*2\r\n            if (d-1 > m) valid = false\r\n        }\r\n\r\n        for (i in 0 until conspt) if (consk[i] == 1) {\r\n//            println(\"here trying ${consid[i]}\")\r\n            ans[consid[i]] = d\r\n            d++\r\n            if (d-1 > m) valid = false\r\n            if (d < bigd-2) {\r\n                assert(d%2 == bigd%2)\r\n                d++\r\n            }\r\n        }\r\n\r\n        consbegin = maxOf(consbegin, d)\r\n        for (i in 0 until conspt) if (consk[i] != 1) {\r\n            ans[consid[i]] = consbegin\r\n            consbegin += consk[i]\r\n            if (consbegin-1 > m) valid = false\r\n        }\r\n\r\n        for (i in 0 until n) {\r\n            assert(ans[i] > 0)\r\n        }\r\n\r\n        if (!valid) {\r\n            println(-1)\r\n        } else {\r\n            for (i in 0 until n) {\r\n                print(\"${ans[i]} \")\r\n            }\r\n            println()\r\n        }\r\n\r\n    }\r\n\r\n}"
}