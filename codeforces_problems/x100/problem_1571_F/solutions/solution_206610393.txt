{
    "id": 206610393,
    "contestId": 1571,
    "creationTimeSeconds": 1684569798,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1571,
        "index": "F",
        "name": "Kotlinforces",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "*special",
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 1571,
        "members": [
            {
                "handle": "Ali_cs7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1633617300
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nvector<int> g[5005];\r\nvector<int> ans;\r\nint ans1;\r\n// A utility function that returns maximum of two integers\r\nint max(int a, int b) { return (a > b) ? a : b; }\r\n \r\n// Prints the items which are put in a knapsack of capacity W\r\nvoid printknapSack(int W, int wt[], int val[], int n)\r\n{\r\n    int i, w;\r\n    int K[n + 1][W + 1];\r\n \r\n    // Build table K[][] in bottom up manner\r\n    for (i = 0; i <= n; i++) {\r\n        for (w = 0; w <= W; w++) {\r\n            if (i == 0 || w == 0)\r\n                K[i][w] = 0;\r\n            else if (wt[i - 1] <= w)\r\n                K[i][w] = max(val[i - 1] +\r\n                    K[i - 1][w - wt[i - 1]], K[i - 1][w]);\r\n            else\r\n                K[i][w] = K[i - 1][w];\r\n        }\r\n    }\r\n \r\n    // stores the result of Knapsack\r\n    int res = K[n][W];\r\n    ans1=res;\r\n     \r\n    w = W;\r\n    for (i = n; i > 0 && res > 0; i--) {\r\n         \r\n        // either the result comes from the top\r\n        // (K[i-1][w]) or from (val[i-1] + K[i-1]\r\n        // [w-wt[i-1]]) as in Knapsack table. If\r\n        // it comes from the latter one/ it means\r\n        // the item is included.\r\n        if (res == K[i - 1][w])\r\n            continue;   \r\n        else {\r\n            // This item is included.\r\n            ans.push_back(wt[i - 1]) ;\r\n             \r\n            // Since this weight is included its\r\n            // value is deducted\r\n            res = res - val[i - 1];\r\n            w = w - wt[i - 1];\r\n        }\r\n    }\r\n}\r\n \r\n// Driver code\r\n\r\nvoid solve()\r\n{\r\n  int n, m;\r\n  cin>>m>>n;\r\n\r\n  vector<int> vec;\r\n\r\n  vector<int> ans2;\r\n  multiset<int> st;\r\n  long long int sum=0;\r\n  int t=1, t1=1;\r\n  int fin[m+1];\r\n\r\n  for(int i=1; i<=m; i++)\r\n  {\r\n    int u,v;\r\n    cin>>u>>v;\r\n    if(v==1)\r\n    {\r\n    ans2.push_back(t);\r\n    fin[t1]=t;\r\n    t1++;\r\n    t+=u;\r\n    n-=u;\r\n    }\r\n    else\r\n    {\r\n    vec.push_back(u);\r\n    g[u].push_back(i);\r\n    st.insert(u);\r\n    sum+=u;\r\n    }\r\n  }\r\n  int t2=t+1;\r\n  if(n<0)\r\n  {\r\n    cout<<\"-1\\n\";\r\n    return;\r\n  }\r\n\r\n  if(n==0)\r\n  {\r\n    if(vec.size()==0)\r\n    {\r\n      for(int u: ans2)\r\n      cout<<u<<\" \";\r\n      cout<<\"\\n\";\r\n    }\r\n    else\r\n    {\r\n      cout<<\"-1\\n\";\r\n      return;\r\n    }\r\n  }\r\n\r\n  int n1=vec.size();\r\n  int a[n1], b[n1];\r\n\r\n  for(int i=0; i<n1; i++)\r\n  {\r\n    a[i]=vec[i];\r\n    b[i]=vec[i];\r\n  }\r\n\r\n  printknapSack((n+1)/2,a,b,n1);\r\n\r\n  if((sum-ans1)>(n/2))\r\n  {\r\n    cout<<-1<<\"\\n\";\r\n    return;\r\n  }\r\n\r\n  for(auto u: ans)\r\n  {\r\n    int x=g[u][g[u].size()-1];\r\n    g[u].pop_back();\r\n    st.erase(st.find(u));\r\n    fin[x]=t;\r\n    t+=2*u;\r\n  }\r\n\r\n  for(auto u:st)\r\n  {\r\n    int x=g[u][g[u].size()-1];\r\n    g[u].pop_back();\r\n    fin[x]=t2;\r\n    t2+=2*u;\r\n  }\r\n\r\n  for(int i=1; i<=m; i++)\r\n  cout<<fin[i]<<\" \";\r\n  cout<<\"\\n\";\r\n  return;\r\n}\r\n\r\nint main()\r\n{\r\n  std::ios::sync_with_stdio(0);\r\n    std::cin.tie(0);\r\n    long long int t;\r\n    solve();\r\n\r\n    return 0;\r\n}"
}