{
    "id": 1499764,
    "contestId": 164,
    "creationTimeSeconds": 1333899288,
    "relativeTimeSeconds": 1788,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "xhsong"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 1,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 50,
    "memoryConsumedBytes": 3379200,
    "source": "#include <cstdio>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <string>\r\n#include <vector>\r\n#include <queue>\r\n#include <set>\r\n#include <map>\r\n#include <cmath>\r\n#include <algorithm>\r\n\r\n#define N 100010\r\n\r\nusing namespace std;\r\n\r\nint a[N];\r\nbool visted[N], use[N];\r\nvector <int> edge[N];\r\n\r\nbool DFS(int x, int depth) {\r\n    if(visted[x]) {\r\n        return use[x];\r\n    }\r\n    visted[x] = true;\r\n    if(depth != 0 && a[x] == 1) {\r\n        return visted[x] = false;\r\n    }\r\n    if(a[x] == 2) {\r\n        use[x] = true;\r\n    } else {\r\n        use[x] = false;\r\n    }\r\n    for(int i = 0; i < edge[x].size(); ++i) {\r\n        use[x] = (use[x] || DFS(edge[x][i], depth + 1));\r\n    }\r\n    return use[x];\r\n}\r\n\r\nint main() \r\n{\r\n    int n, m;\r\n    while(cin >> n >> m) {\r\n        for(int i = 1; i <= n; ++i) {\r\n            cin >> a[i];\r\n            visted[i] = false;\r\n        }\r\n        for(int i = 0; i < m; ++i) {\r\n            int x, y;\r\n            cin >> x >> y;\r\n            edge[x].push_back(y);\r\n        }\r\n        for(int i = 1; i <= n; ++i) {\r\n            if(a[i] == 1 && !visted[i]) {\r\n                DFS(i, 0);\r\n            }\r\n        }\r\n        for(int i = 1; i <= n; ++i) {\r\n            if(use[i]) {\r\n                cout << \"1\" << endl;\r\n            } else {\r\n                cout << \"0\" << endl;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}