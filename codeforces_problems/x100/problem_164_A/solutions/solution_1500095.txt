{
    "id": 1500095,
    "contestId": 164,
    "creationTimeSeconds": 1333899647,
    "relativeTimeSeconds": 2147,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "todo"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 3,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "Java 6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 550,
    "memoryConsumedBytes": 83046400,
    "source": "import java.util.*;\r\nimport java.lang.*;\r\nimport java.math.*;\r\nimport java.io.*;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\nimport static java.util.Collections.*;\r\n\r\npublic class A{\r\n\tScanner sc=new Scanner(System.in);\r\n\r\n\tint n, m;\r\n\tint[] f;\r\n\tint[] a, b;\r\n\r\n\tvoid run(){\r\n\t\tn=sc.nextInt();\r\n\t\tm=sc.nextInt();\r\n\t\tf=new int[n];\r\n\t\tfor(int i=0; i<n; i++){\r\n\t\t\tf[i]=sc.nextInt();\r\n\t\t}\r\n\t\ta=new int[m];\r\n\t\tb=new int[m];\r\n\t\tfor(int i=0; i<m; i++){\r\n\t\t\ta[i]=sc.nextInt()-1;\r\n\t\t\tb[i]=sc.nextInt()-1;\r\n\t\t}\r\n\t\tsolve();\r\n\t}\r\n\r\n\tArrayList<Integer>[] to, from;\r\n\tboolean[] ok1, ok2;\r\n\r\n\t@SuppressWarnings(\"unchecked\")\r\n\tvoid solve(){\r\n\t\tto=new ArrayList[n];\r\n\t\tfrom=new ArrayList[n];\r\n\t\tfor(int i=0; i<n; i++){\r\n\t\t\tto[i]=new ArrayList<Integer>();\r\n\t\t\tfrom[i]=new ArrayList<Integer>();\r\n\t\t}\r\n\t\tfor(int i=0; i<m; i++){\r\n\t\t\tto[a[i]].add(b[i]);\r\n\t\t\tfrom[b[i]].add(a[i]);\r\n\t\t}\r\n\t\tok1=new boolean[n];\r\n\t\tok2=new boolean[n];\r\n\t\tfor(int i=0; i<n; i++){\r\n\t\t\tif(f[i]==1){\r\n\t\t\t\tbfs1(i);\r\n\t\t\t}else if(f[i]==2){\r\n\t\t\t\tbfs2(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tStringBuffer sb=new StringBuffer();\r\n\t\tfor(int i=0; i<n; i++){\r\n\t\t\tboolean ok=false;\r\n\t\t\tif(f[i]==0){\r\n\t\t\t\tok|=ok1[i]&&ok2[i];\r\n\t\t\t}else if(f[i]==1){\r\n\t\t\t\tfor(int v : to[i]){\r\n\t\t\t\t\tok|=ok2[v];\r\n\t\t\t\t}\r\n\t\t\t}else if(f[i]==2){\r\n\t\t\t\tok|=ok1[i]&&ok2[i];\r\n\t\t\t}\r\n\t\t\t// debug(ok?1:0);\r\n\t\t\tsb.append(ok?1:0);\r\n\t\t\tsb.append('\\n');\r\n\t\t}\r\n\t\tprintln(sb.toString());\r\n\t}\r\n\r\n\tvoid bfs1(int v0){\r\n\t\tLinkedList<Integer> que=new LinkedList<Integer>();\r\n\t\tque.add(v0);\r\n\t\tfor(; !que.isEmpty();){\r\n\t\t\tint v=que.poll();\r\n\t\t\tfor(int u : to[v]){\r\n\t\t\t\tif(f[u]==0||f[u]==2){\r\n\t\t\t\t\tif(!ok1[u]){\r\n\t\t\t\t\t\tok1[u]=true;\r\n\t\t\t\t\t\tque.offer(u);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvoid bfs2(int v0){\r\n\t\tLinkedList<Integer> que=new LinkedList<Integer>();\r\n\t\tque.add(v0);\r\n\t\tok2[v0]=true;\r\n\t\tfor(; !que.isEmpty();){\r\n\t\t\tint v=que.poll();\r\n\t\t\tfor(int u : from[v]){\r\n\t\t\t\tif(f[u]==0||f[u]==2){\r\n\t\t\t\t\tif(!ok2[u]){\r\n\t\t\t\t\t\tok2[u]=true;\r\n\t\t\t\t\t\tque.offer(u);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tvoid debug(Object... os){\r\n\t\tSystem.err.println(deepToString(os));\r\n\t}\r\n\r\n\tvoid print(String s){\r\n\t\tSystem.out.print(s);\r\n\t}\r\n\r\n\tvoid println(String s){\r\n\t\tSystem.out.println(s);\r\n\t}\r\n\r\n\tpublic static void main(String[] args){\r\n\t\tnew A().run();\r\n\t}\r\n\r\n\tclass Scanner{\r\n\t\tBufferedReader br;\r\n\t\tStringTokenizer st;\r\n\r\n\t\tScanner(InputStream in){\r\n\t\t\tbr=new BufferedReader(new InputStreamReader(in));\r\n\t\t\teat(\"\");\r\n\t\t}\r\n\r\n\t\tvoid eat(String s){\r\n\t\t\tst=new StringTokenizer(s);\r\n\t\t}\r\n\r\n\t\tString nextLine(){\r\n\t\t\ttry{\r\n\t\t\t\treturn br.readLine();\r\n\t\t\t}catch(IOException e){\r\n\t\t\t\tthrow new IOError(e);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tboolean hasNext(){\r\n\t\t\twhile(!st.hasMoreTokens()){\r\n\t\t\t\tString s=nextLine();\r\n\t\t\t\tif(s==null)\r\n\t\t\t\t\treturn false;\r\n\t\t\t\teat(s);\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tString next(){\r\n\t\t\thasNext();\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tint nextInt(){\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\r\n\t\tlong nextLong(){\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\r\n\t\tdouble nextDouble(){\r\n\t\t\treturn Double.parseDouble(next());\r\n\t\t}\r\n\t}\r\n\r\n}\r\n"
}