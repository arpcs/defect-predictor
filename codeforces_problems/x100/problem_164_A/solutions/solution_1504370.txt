{
    "id": 1504370,
    "contestId": 164,
    "creationTimeSeconds": 1333908413,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "alexej"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "FPC",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 90,
    "memoryConsumedBytes": 5632000,
    "source": "program shablon;\r\n\r\n{$MODE OBJFPC}{$H+}\r\n{$O+ R-  Q-}\r\n{$COperators ON}\r\n\r\nuses\r\n   SysUtils,\r\n   Math;\r\n\r\nconst inf = 1 / 0;\r\n      nmax = 100 * 1000;\r\n      mmax = nmax;\r\n\r\nvar n, m : longint;\r\n    a, b, prev : array[1 .. mmax] of longint;\r\n    last, us, f : array[1 .. nmax] of longint;\r\n    was : array[1 .. nmax] of boolean;\r\n\r\nprocedure pout;\r\nvar i : longint;\r\nbegin\r\n    for i := 1 to n do begin\r\n        writeln(us[i]);\r\n    end;\r\n    {$IFNDEF ONLINE_JUDGE}\r\n    close(input);\r\n    close(output);\r\n    {$ENDIF}\r\n    halt(0);\r\nend;\r\n\r\nprocedure pinit;\r\nvar i : longint;\r\nbegin\r\n    {$IFNDEF ONLINE_JUDGE}\r\n    assign(input, 'input.txt');\r\n    assign(output, 'output.txt');\r\n    reset(input);\r\n    rewrite(output);\r\n    {$ENDIF}\r\n    fillchar(last, sizeof(last), 0);\r\n    read(n, m);\r\n    for i := 1 to n do begin\r\n        read(f[i]);\r\n    end;\r\n    for i := 1 to m do begin\r\n        read(a[i], b[i]);\r\n        prev[i]  := last[a[i]];\r\n        last[a[i]] := i;\r\n    end;\r\nend;\r\n\r\nfunction dfs(v : longint) : longint;\r\nvar i, d : longint;\r\nbegin\r\n    was[v] := true;\r\n    result := 0;\r\n    if (f[v] = 2) then begin\r\n        result := 1;\r\n        us[v] := 1;\r\n    end;\r\n    i := last[v];\r\n    while i > 0 do begin\r\n        if (f[b[i]] <> 1) and (was[b[i]]) then begin\r\n            if us[b[i]] = 1 then begin\r\n                result := 1;\r\n                us[v] := 1;\r\n            end;\r\n        end;\r\n        i := prev[i];\r\n    end;\r\n    i := last[v];\r\n    while i > 0 do begin\r\n        if (f[b[i]] <> 1) and (not was[b[i]]) then begin\r\n            d := dfs(b[i]);\r\n            if d = 1 then begin\r\n                result := 1;\r\n                us[v] := 1;\r\n            end;\r\n        end\r\n        else if (f[b[i]] <> 1) and (was[b[i]]) then begin\r\n            if us[b[i]] = 1 then begin\r\n                result := 1;\r\n                us[v] := 1;\r\n            end;\r\n        end;\r\n        i := prev[i];\r\n    end;\r\n    us[v] := result;\r\nend;\r\n\r\nprocedure solve;\r\nvar i : longint;\r\nbegin\r\n    fillchar(us, sizeof(us), 0);\r\n    fillchar(was, sizeof(was), false);\r\n    for i := 1 to n do begin\r\n        if f[i] = 1 then begin\r\n            dfs(i);\r\n        end;\r\n    end;\r\n    fillchar(was, sizeof(was), false);\r\n    for i := 1 to n do begin\r\n        if f[i] = 1 then begin\r\n            dfs(i);\r\n        end;\r\n    end;\r\n    fillchar(was, sizeof(was), false);\r\n    for i := 1 to n do begin\r\n        if f[i] = 1 then begin\r\n            dfs(i);\r\n        end;\r\n    end;\r\n    fillchar(was, sizeof(was), false);\r\n    for i := 1 to n do begin\r\n        if f[i] = 1 then begin\r\n            dfs(i);\r\n        end;\r\n    end;\r\n    fillchar(was, sizeof(was), false);\r\n    for i := 1 to n do begin\r\n        if f[i] = 1 then begin\r\n            dfs(i);\r\n        end;\r\n    end;\r\nend;\r\n\r\nbegin\r\n    pinit;\r\n    solve;\r\n    pout;\r\nend."
}