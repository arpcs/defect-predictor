{
    "id": 15462460,
    "contestId": 164,
    "creationTimeSeconds": 1453350667,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 2764800,
    "source": "#include <algorithm>\n#include <bitset>\n#include <climits>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <ctime>\n#include <deque>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <string>\n#include <vector>\n#define INF 1000000007\n#define MP make_pair\n#define FI first\n#define SE second\n#define PB push_back\n#define VI vector<int>\nconst double EPS = 1e-7, PI = acos(-1.0);\nusing namespace std;\ntypedef long long LL;\ntypedef pair <int, int> P;\ntemplate<class T>\ninline T IN(T& num)\n{\n    num = 0;\n    char c = getchar(), f = 0;\n    while(c != '-' && (c < '0' || c > '9')) c = getchar();\n    if(c == '-') f = 1, c = getchar();\n    while('0' <= c && c <= '9') num = num * 10 + c - '0', c = getchar();\n    if(f) num = -num;\n    return num;\n}\n//------------------------   code   ---------------------------------//\nconst int NUM = 100010;\nconst int MAXV = NUM, MAXE = NUM * 2;\nstruct edge {int next, to;} e[MAXE];\nint head[MAXV], tot;\nvoid gInit() {memset(head, -1, sizeof(head)); tot = 0;}\nvoid add_edge(int u, int v) {e[tot] = (edge) {head[u], v}; head[u] = tot++;}\nint n, m;\nint f[NUM];\nbool ans[NUM], vis[NUM];\nbool dfs(int u)\n{\n    if(vis[u]) return ans[u];\n    vis[u] = true;\n    if(f[u] == 2) ans[u] = true;\n    for(int i = head[u]; ~i; i = e[i].next)\n    {\n        if(f[e[i].to] != 1 && dfs(e[i].to))\n            ans[u] = true;\n    }\n    return ans[u];\n}\nint main()\n{\n#ifdef ACM_TEST\n    freopen(\"in.txt\", \"r\", stdin);\n//\tfreopen(\"in.txt\", \"w\", stdout);\n#endif\n    scanf(\"%d%d\", &n, &m);\n    gInit();\n    for(int i = 1; i <= n; ++i) scanf(\"%d\", &f[i]);\n    for(int i = 0; i < m; ++i)\n    {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        add_edge(u, v);\n    }\n    for(int i = 1; i <= n; ++i)\n        if(f[i] == 1)\n            dfs(i);\n    for(int i = 1; i <= n; ++i)\n        printf(\"%d\\n\", ans[i] ? 1 : 0);\n    return 0;\n}\n\n \t\t    \t\t \t    \t \t\t\t\t \t \t\t    \t"
}