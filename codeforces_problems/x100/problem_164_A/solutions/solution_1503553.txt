{
    "id": 1503553,
    "contestId": 164,
    "creationTimeSeconds": 1333904688,
    "relativeTimeSeconds": 7188,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "unbing"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 5,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 5427200,
    "source": "#include <iomanip>\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <sstream>\n#include <set>\n#include <map>\n\n#define fr(i,n) for(i=0;i<(int)(n);i++)\n#define fit(a,b) for(typeof(b.begin()) a = b.begin(); a != b.end(); a++)\n#define pb push_back\n#define MP make_pair\n#define F first\n#define S second\n#define SZ(u) ((int)u.size())\n#define WT(x) cout << #x << \": \" << x << endl\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair<int,int> p2;\ntypedef vector<int> vi;\ntypedef vector<p2> vp2;\ntypedef long double ld;\n\nint N, M, Ans[200000], F[200000];\nint Son[200000], One[200000], Two[200000];\nvector<vi> Edge, u_Edge;\nint main() {\n  int i, j, a, b;\n  scanf(\"%d%d\", &N, &M);\n  fr (i, N) scanf(\"%d\", &F[i]);\n  vector<vi> Edge = vector<vi>(N, vi());\n  vector<vi> u_Edge = vector<vi>(N, vi());\n  fr (i, M) {\n    scanf(\"%d%d\", &a, &b);\n    a--, b--;\n    Edge[a].pb(b);\n    u_Edge[b].pb(a);\n  }\n  memset(Ans, 0, sizeof(Ans));\n  memset(Son, 0, sizeof(Son));\n  memset(Two, 0, sizeof(Two));\n  vi Que;\n  fr (i, N) if (SZ(Edge[i]) == 0) {\n    Que.pb(i);\n    if (F[i] == 2) Two[i] = 1;\n  }\n\n  fr (i, SZ(Que)) {\n    int x = Que[i];\n    fr (j, SZ(u_Edge[x])) {\n      Son[u_Edge[x][j]]++;\n      if (Two[x] == 1 && F[x] != 1) Two[u_Edge[x][j]] = 1;\n      if (Son[u_Edge[x][j]] == SZ(Edge[u_Edge[x][j]])) {\n        Que.pb(u_Edge[x][j]);\n      }\n    }\n  }\n\n  memset(One, 0, sizeof(One));\n  memset(Son, 0, sizeof(Son));\n  Que.clear();\n  fr (i, N) if (SZ(u_Edge[i]) == 0) {\n    Que.pb(i);\n    if (F[i] == 1) One[i] = 1;\n  }\n\n  fr (i, SZ(Que)) {\n    int x = Que[i];\n    if (One[x] == 1 && Two[x] == 1) Ans[x] = 1;\n    fr (j, SZ(Edge[x])) {\n      Son[Edge[x][j]]++;\n      if (One[x] == 1) One[Edge[x][j]] = 1;\n      if (Son[Edge[x][j]] == SZ(u_Edge[Edge[x][j]])) {\n        Que.pb(Edge[x][j]);\n      }\n    }\n  }\n\n  fr (i, N) printf(\"%d\\n\", Ans[i]);\n  return 0;\n}\n"
}