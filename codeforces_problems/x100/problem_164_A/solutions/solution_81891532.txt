{
    "id": 81891532,
    "contestId": 164,
    "creationTimeSeconds": 1590760624,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 2252800,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn = 100005;\nvector<int> G[maxn];\nint f[maxn],vis[maxn];\nint n,m;\n\nbool solve(int x)\n{\n    vis[x] = 1;\n    int d = G[x].size();\n    for(int i =0 ;i < d; i++)\n    {\n        int v = G[x][i];\n        if(f[v] == 1) return false;\n        if(f[v] == 2) \n        {\n            vis[v] = 1;\n            return true;\n        }\n        if(!vis[v]) solve(v);\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    memset(f,0,sizeof(f));\n    for(int i = 1; i <= n; i++)\n    {\n        scanf(\"%d\",&f[i]);\n    }\n    for(int i = 0 ;i < m; i++)\n    {\n        int s,t;\n        scanf(\"%d%d\", &s,&t);\n        G[s].push_back(t);\n    }\n    bool flag = true;\n    for(int i =1 ; i <= n; i++)\n    {\n        memset(vis,0,sizeof(vis));\n        if(f[i] != 1)\n        {\n            flag = false;\n            break;\n        }\n        if(solve(i)) \n        {\n            break;\n        }\n    }\n    if(flag)\n    {\n        for(int i =1; i<=n; i++)\n        {\n            if(vis[i]) printf(\"1\\n\");\n            else printf(\"0\\n\");\n        }\n    }\n    else\n    {\n        for(int i =1; i<=n; i++)\n        {\n            printf(\"0\\n\");\n        }\n    }\n    return 0;\n}\n \t\t\t \t\t\t      \t \t\t \t \t \t\t\t\t\t \t\t"
}