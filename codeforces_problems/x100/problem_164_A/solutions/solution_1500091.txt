{
    "id": 1500091,
    "contestId": 164,
    "creationTimeSeconds": 1333899641,
    "relativeTimeSeconds": 2140,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "cgy4ever"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 2,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 220,
    "memoryConsumedBytes": 10854400,
    "source": "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <cstdlib>\n#include <cstdio>\n#include <string>\n#include <vector>\n#include <cmath>\nusing namespace std;\n\nint n, m;\nvector <int> E[100001], invE[100001];\nbool V[100001], invV[100001];\nint mark[100001];\n\nvoid DFS(int cur)\n{\n    V[cur] = true;\n    for(int i = 0; i < E[cur].size(); i++)\n    {\n        int t = E[cur][i];\n        if(!V[t])\n            DFS(t);\n    }\n}\n\nvoid invDFS(int cur)\n{\n    invV[cur] = true;\n    if(mark[cur] == 1)return;\n    for(int i = 0; i < invE[cur].size(); i++)\n    {\n        int t = invE[cur][i];\n        if(!invV[t])\n            invDFS(t);\n    }\n}\n\nint main()\n{\n    ios :: sync_with_stdio(false);\n    memset(V, 0, sizeof(V));\n    memset(invV, 0, sizeof(invV));\n    cin >> n >> m;\n    for(int i = 1; i <= n; i++)\n        cin >> mark[i];\n    for(int i = 1; i <= m; i++)\n    {\n        int a, b;\n        cin >> a >> b;\n        E[a].push_back(b);\n        invE[b].push_back(a);\n    }\n    for(int i = 1; i <= n; i++)\n    {\n        if(mark[i] == 1)\n            DFS(i);\n        if(mark[i] == 2)\n            invDFS(i);\n    }\n    for(int i = 1; i <= n; i++)\n        cout << ((V[i] && invV[i]) ? \"1\" : \"0\") << endl;\n    return 0;\n}\n"
}