{
    "id": 81561086,
    "contestId": 164,
    "creationTimeSeconds": 1590522593,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "Fikshun"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 778,
    "memoryConsumedBytes": 5427200,
    "source": "from collections import defaultdict\n\nclass Graph: \n    def __init__(self): \n        self.graph = defaultdict(list) \n        self.values = defaultdict()\n        self.interesting = defaultdict()\n\n    def addEdge(self,u,v): \n        # directed graph\n        self.graph[u].append(v)  \n  \n    def DFSUtil(self, v, visited): \n        \n        visited[v-1] = True\n        # visiting its adj nodes\n        for i in self.graph[v]:\n            if visited[i-1] is False and  self.values[i] != 1: \n                res = self.DFSUtil(i, visited)\n                if res is True:\n                    self.interesting[v] = 1\n\n        if self.values[v] == 2 or self.interesting[v] == 1:\n            self.interesting[v] = 1\n            return True\n        else:\n            return False\n\n    def DFS(self,n,s):\n\n        visited =[False]*n\n        res = self.DFSUtil(s, visited) \n        return self.interesting\n\n    def assignStates(self, values):\n        \n        for i,item in enumerate(values):\n            self.values[i+1] = item \n            self.interesting[i+1] = 0 \n\n\ng = Graph() \n\nn, m = input().split()\nn = int(n)\nm = int(m)\n\nf = input().split()\nf = [int(i) for i in f]\ng.assignStates(f)\n\nstart = []\nfor _ in range(m):\n    x, y = input().split()\n    x = int(x)\n    y = int(y)\n    if f[x-1] == 1:\n        start.append(int(x))\n    if f[y-1] == 1:\n        start.append(int(y))\n\n    g.addEdge(x, y)\n\n\nstart = list(dict.fromkeys(start))\n\nfor k in start:\n    theres = g.DFS(n, k)\n\nfor a in theres.values():\n    print(a)\n\n\n\n\n\n\n"
}