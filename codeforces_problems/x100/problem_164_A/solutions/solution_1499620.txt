{
    "id": 1499620,
    "contestId": 164,
    "creationTimeSeconds": 1333899143,
    "relativeTimeSeconds": 1643,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "gogokefakefa"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 5,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 10,
    "memoryConsumedBytes": 5120000,
    "source": "\r\n#include <cstdio>\r\n#include <vector>\r\n#include <iostream>\r\n\r\nusing namespace std;\r\n\r\nint state[1 << 17];\r\nvector < int > v[1 << 17];\r\nint N, M;\r\nint type[1 << 17];\r\n\r\nvoid scan(){\r\n    scanf ( \"%d%d\", &N, &M );\r\n\r\n    for ( int i = 1; i <= N; ++i )\r\n        scanf ( \"%d\", state + i );\r\n\r\n    for ( int i = 0; i < M; ++i ){\r\n        int x, y;\r\n        scanf ( \"%d%d\", &x, &y );\r\n        v[x].push_back ( y );\r\n    }\r\n}\r\n\r\nint used[1 << 17];\r\nint levl[1 << 17];\r\n\r\nvoid dfs ( int i, int mt2, int lvl ){\r\n    if ( type[i] ) return;\r\n    used[i] = 1;\r\n    if ( state[i] == 2 ){\r\n        type[i] = 1;\r\n        mt2 = max ( mt2, lvl );\r\n    }\r\n    levl[i] = lvl;\r\n    for ( int j = 0; j < v[i].size(); ++j )\r\n        if ( !type[ v[i][j] ] && state[ v[i][j] ] != 1 && !used[v[i][j]] ){\r\n            dfs ( v[i][j], mt2, lvl + 1 );\r\n            if ( type[v[i][j]] == 1 )\r\n                type[ i ] = 1;\r\n        }\r\n        else if ( used[ v[i][j] ] && mt2 >= levl[ v[i][j] ] )\r\n            type[i] = 1;\r\n    if ( type[i] == 0 )\r\n        type[i] = -1;\r\n    used[i] = 0\r\n    ;\r\n\r\n}\r\nvoid solve(){\r\n    for ( int i = 1; i <= N; ++i )\r\n        if ( !type[i] && state[i] == 1  )\r\n            dfs ( i, -1, 0 );\r\n\r\n    for ( int i = 1; i <= N; ++i )\r\n        if ( type[i] == 0 || type[i] == -1 )\r\n            printf ( \"0\\n\" );\r\n        else\r\n            printf ( \"1\\n\" );\r\n\r\n\r\n}\r\n\r\nint main(){\r\n    scan();\r\n    solve();\r\n}\r\n"
}