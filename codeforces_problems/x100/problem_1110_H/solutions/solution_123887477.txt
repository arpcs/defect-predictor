{
    "id": 123887477,
    "contestId": 1110,
    "creationTimeSeconds": 1627351946,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "luogu_bot5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 490496000,
    "source": "#include<bits/stdc++.h>\r\n#define re register\r\n#define il inline\r\n#define itn int\r\n#define ll long long\r\nusing namespace std;\r\nil int read()\r\n{\r\n\tint sum=0,sign=1;\r\n\tchar ch;ch=getchar();\r\n\twhile(!isdigit(ch)){if(ch=='-')sign=-1;ch=getchar();}\r\n\twhile(isdigit(ch)){sum=sum*10+ch-48;ch=getchar();}\r\n\treturn sum*sign;\r\n}\r\nconst int N=2010,INF=0x3f3f3f3f;\r\nchar L[N],R[N];\r\nint n,tr[N*10][10],len,tot=1,sum[N*10][N],fail[N*10];\r\nint f[N][N*10],fr[N][N*10];\r\nqueue<int> Q;\r\nil void dfs(int i,bool up,bool down,int x)\r\n{\r\n    if(!up&&!down){sum[x][len-i+1]=1;return;}\r\n    if(i==len+1){sum[x][0]=1;return;}\r\n    int op=down?L[i]-'0':0;\r\n    int ed=up?R[i]-'0':9;\r\n    for(int j=op;j<=ed;j++)\r\n\t{\r\n        int y=x;\r\n        if(x==1&&!j)continue;\r\n        else\r\n\t\t{\r\n            if(!tr[x][j])tr[x][j]=++tot;\r\n            y=tr[x][j];\r\n        }\r\n        dfs(i+1,up&&(j==R[i]-'0'),down&&(j==L[i]-'0'),y);\r\n    }\r\n}\r\nil void build()\r\n{\r\n    Q.push(1);\r\n    fail[1]=1;\r\n    while(Q.size())\r\n\t{\r\n        int x=Q.front();\r\n        Q.pop();\r\n        for(int f=0;f<=9;f++)\r\n\t\t{\r\n            if(tr[x][f])\r\n\t\t\t{\r\n                int y=tr[x][f];\r\n                fail[y]=(x==1)?1:tr[fail[x]][f];\r\n                for(int i=0;i<=n;i++)sum[y][i]+=sum[fail[y]][i];\r\n                Q.push(y);\r\n            }\r\n            else tr[x][f]=((x==1)?1:tr[fail[x]][f]);\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    scanf(\"%s%s\",L+1,R+1);\r\n    n=read();\r\n    len=strlen(R+1);\r\n    int len1=strlen(L+1);\r\n    if(len!=len1)\r\n\t{\r\n        int d=len-len1;\r\n        for(int i=len1;i>=1;i--)L[i+d]=L[i];\r\n        for(int i=d;i>=1;i--)L[i]='0';\r\n    }\r\n    dfs(1,1,1,1);\r\n    build();\r\n    for(int i=1;i<=tot;i++)\r\n        for(int j=1;j<=n;j++)\r\n            sum[i][j]+=sum[i][j-1];\r\n    for(int i=1;i<=tot;i++)f[0][i]=sum[i][0];\r\n    for(int i=1;i<=n;i++)\r\n        for(int j=1;j<=tot;j++)\r\n\t\t{\r\n            f[i][j]=-INF;\r\n            for(int c=0;c<=9;c++)\r\n\t\t\t{\r\n                int y=tr[j][c];\r\n                if(f[i][j]<f[i-1][y])f[i][j]=f[i-1][y],fr[i][j]=c;\r\n            }\r\n            f[i][j]+=sum[j][i];\r\n        }\r\n    cout<<f[n][1]<<'\\n';\r\n    int p=1;\r\n    for(int i=n;i>=1;i--)cout<<fr[i][p],p=tr[p][fr[i][p]];\r\n    return 0;\r\n}"
}