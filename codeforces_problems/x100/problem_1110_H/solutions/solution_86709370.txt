{
    "id": 86709370,
    "contestId": 1110,
    "creationTimeSeconds": 1594596932,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "deafff"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 181452800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=2005;\r\nchar L[maxn],R[maxn];\r\nint n,rt=1,tot=1,ch[maxn][10],fail[maxn];\r\nint f[maxn][maxn],g[maxn][maxn][10];\r\nvoid insert(char *s,int len,int v){\r\n    int nw=rt;\r\n    for(int i=1;i<=len;i++){\r\n        int nxt=s[i]-'0';\r\n        if(!ch[nw][nxt]) ch[nw][nxt]=++tot;\r\n        for(int j=(nw==rt);j<nxt;j++) g[nw][len-i+1][j]+=v;\r\n        if(i==len) g[nw][1][nxt]+=v;\r\n        nw=ch[nw][nxt];\r\n    }\r\n}\r\nqueue <int> Q;\r\nvoid getfail(){\r\n    for(int i=0;i<10;i++){\r\n        if(ch[rt][i]){\r\n            fail[ch[rt][i]]=rt;\r\n            Q.push(ch[rt][i]);\r\n        } \r\n        else ch[rt][i]=rt;\r\n    }\r\n    while(!Q.empty()){\r\n        int u=Q.front();\r\n        Q.pop();\r\n        for(int i=0;i<10;i++){\r\n            if(ch[u][i]){\r\n                fail[ch[u][i]]=ch[fail[u]][i];\r\n                Q.push(ch[u][i]);\r\n            }\r\n            else ch[u][i]=ch[fail[u]][i];\r\n        }\r\n    }\r\n}\r\nint main(){\r\n    scanf(\"%s\",L+1);\r\n    int lenl=strlen(L+1),nw=lenl;\r\n    while(L[nw]=='0') L[nw]='9',nw--;\r\n    L[nw]--;\r\n    if(L[1]=='0'){\r\n        lenl--;\r\n        for(int i=1;i<=lenl;i++) L[i]=L[i+1];\r\n    } \r\n    if(lenl) insert(L,lenl,-1);\r\n    scanf(\"%s\",R+1);\r\n    int lenr=strlen(R+1);\r\n    insert(R,lenr,1);\r\n    getfail();\r\n    scanf(\"%d\",&n);\r\n    for(int i=2;i<=tot;i++)\r\n        for(int j=1;j<=n;j++)\r\n            for(int k=0;k<10;k++) g[i][j][k]+=g[fail[i]][j][k];\r\n    for(int i=1;i<=tot;i++)\r\n        for(int j=max(lenl,1);j<lenr;j++) \r\n            for(int k=1;k<10;k++) g[i][j][k]++;\r\n    for(int i=1;i<=tot;i++)\r\n        for(int j=1;j<=n;j++) \r\n            for(int k=0;k<10;k++) g[i][j][k]+=g[i][j-1][k];\r\n    for(int i=n-1;i>=0;i--)\r\n        for(int j=1;j<=tot;j++)\r\n            for(int k=0;k<10;k++) f[i][j]=max(f[i][j],f[i+1][ch[j][k]]+g[j][n-i][k]);\r\n    printf(\"%d\\n\",f[0][rt]);\r\n    nw=rt;\r\n    for(int i=0;i<n;i++)\r\n        for(int j=0;j<10;j++)\r\n            if(f[i][nw]==f[i+1][ch[nw][j]]+g[nw][n-i][j]){\r\n                printf(\"%d\",j);\r\n                nw=ch[nw][j];\r\n                break;\r\n            }\r\n    return 0;\r\n}\r\n"
}