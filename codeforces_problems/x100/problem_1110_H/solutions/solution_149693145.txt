{
    "id": 149693145,
    "contestId": 1110,
    "creationTimeSeconds": 1647335705,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "JXFLS_official"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 144896000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 8005, K = 2001;\r\nint trie[N][10], fail[N]; int ptrie = 0;\r\nint dp[N][K], cnt[N][K]; bool tag[N][K];\r\nint Trie(int u, int ch){if(!trie[u][ch]) trie[u][ch] = ++ ptrie; return trie[u][ch];}\r\nvoid add(int u, int l, int r, int s, int d){for(int t = l; t <= r; t ++) cnt[Trie(u, t)][s] += d;}\r\nvoid insert(vector<int> l, vector<int> r){\r\n   int sl = l.size(), sr = r.size();\r\n   if(sl == sr){\r\n      int p = 0, q = 0;\r\n      for(int i = 0; i < sl; i ++){\r\n         if(p == q) add(p, l[i] + 1, r[i] - 1, sl - i - 1, 1);\r\n         else add(p, l[i] + 1, 9, sl - i - 1, 1), add(q, 0, r[i] - 1, sl - i - 1, 1);\r\n         p = Trie(p, l[i]), q = Trie(q, r[i]);\r\n      }\r\n      if(p == q) cnt[p][0] ++;\r\n      else cnt[p][0] ++, cnt[q][0] ++;\r\n   }\r\n   else{\r\n      int p = 0;\r\n      for(int i = 0; i < sl; i ++){\r\n         add(p, l[i] + 1, 9, sl - i - 1, 1);\r\n         p = Trie(p, l[i]);\r\n      }\r\n      cnt[p][0] ++;\r\n      int q = 0;\r\n      for(int i = 0; i < sr; i ++){\r\n         add(q, 0, r[i] - 1, sr - i - 1, 1);\r\n         q = Trie(q, r[i]);\r\n      }\r\n      cnt[q][0] ++;\r\n      for(int i = sl + 1; i <= sr - 1; i ++){\r\n         add(1, 1, 9, i - 1, 1);\r\n      }\r\n   }\r\n   trie[0][0] = 0;\r\n}\r\nvoid getfail(){\r\n   queue<int> q;\r\n   for(int ch = 0; ch < 10; ch ++) if(trie[0][ch]) q.push(trie[0][ch]);\r\n   while(!q.empty()){\r\n      int u = q.front(); q.pop();\r\n      for(int ch = 0; ch < 10; ch ++){\r\n         int v = trie[u][ch];\r\n         if(v){\r\n            fail[v] = trie[fail[u]][ch]; q.push(v);\r\n            for(int i = 0; i < K; i ++) cnt[v][i] += cnt[fail[v]][i];\r\n         }\r\n         else{\r\n            trie[u][ch] = trie[fail[u]][ch];\r\n         }\r\n      }\r\n   }\r\n   for(int u = 0; u <= ptrie; u ++)\r\n      for(int i = 1; i < K; i ++)\r\n         cnt[u][i] += cnt[u][i - 1];\r\n}\r\nvoid solve(int k){\r\n   memset(dp, 0xcf, sizeof(dp)); dp[0][0] = 0;\r\n   for(int d = 0; d <= k; d ++){\r\n      for(int u = 0; u <= ptrie; u ++){\r\n         dp[d][u] += cnt[u][k - d];\r\n         if(d < k){\r\n            for(int ch = 0; ch < 10; ch ++){\r\n               dp[d + 1][trie[u][ch]] = max(dp[d + 1][trie[u][ch]], dp[d][u]);\r\n            }\r\n         }\r\n      }\r\n   }\r\n   int ans = 0;\r\n   for(int u = 0; u <= ptrie; u ++)\r\n      ans = max(ans, dp[k][u]);\r\n   printf(\"%d\\n\", ans);\r\n   for(int u = 0; u <= ptrie; u ++)\r\n      if(ans == dp[k][u])\r\n         tag[k][u] = 1;\r\n   for(int d = k - 1; d >= 0; d --){\r\n      for(int u = 0; u <= ptrie; u ++){\r\n         for(int ch = 0; ch < 10; ch ++){\r\n            if(tag[d + 1][trie[u][ch]] && dp[d + 1][trie[u][ch]] - cnt[trie[u][ch]][k - d - 1] == dp[d][u]){\r\n               tag[d][u] = 1;\r\n            }\r\n         }\r\n      }\r\n   }\r\n   int u = 0;\r\n   for(int d = 0; d < k; d ++){\r\n      int now = -1;\r\n      for(int ch = 0; ch < 10; ch ++){\r\n         if(tag[d + 1][trie[u][ch]] && dp[d + 1][trie[u][ch]] - cnt[trie[u][ch]][k - d - 1] == dp[d][u]){\r\n            now = ch;\r\n            break;\r\n         }\r\n      }\r\n      printf(\"%d\", now); u = trie[u][now];\r\n   }\r\n   printf(\"\\n\");\r\n}\r\nint main(){\r\n   string L, R; int k; cin >> L >> R >> k;\r\n   vector<int> l; for(char ch : L) l.push_back(ch - '0');\r\n   vector<int> r; for(char ch : R) r.push_back(ch - '0');\r\n   insert(l, r);\r\n   getfail();\r\n   solve(k);\r\n   return 0;\r\n}",
    "suggested_categories": [
        "algorithms",
        "data structures",
        "dynamic programming",
        "string manipulation",
        "graph theory",
        "queue implementation",
        "code optimization",
        "problem solving",
        "c++ programming",
        "algorithm analysis",
        "software design",
        "error handling",
        "input/output handling",
        "mathematical computation",
        "programming patterns",
        "coding conventions",
        "logical operations",
        "efficient memory management",
        "software testing",
        "complexity analysis"
    ]
}