{
    "id": 92673904,
    "contestId": 1110,
    "creationTimeSeconds": 1599961756,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "Binary_Search_Tree"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 964710400,
    "source": "#include <bits/stdc++.h>\r\n#define M 40005\r\n#define N 2005\r\n#define FI first\r\n#define SE second\r\n#define MP std::make_pair\r\n#define PB push_back\r\n#define mod 998244353\r\n#define INF 1000000000\r\ntypedef long long ll;\r\nchar A[M], B[M];\r\nint n, lenA, lenB;\r\nint read() {\r\n\tint ans = 0; char c = getchar();\r\n\twhile (c < '0' || c > '9') c = getchar();\r\n\twhile (c >= '0' && c <= '9') ans = ans * 10 + c - '0', c = getchar();\r\n\treturn ans;\r\n}\r\nvoid Write(int x) {\r\n\tif (x < 10) putchar(x + '0');\r\n\telse Write(x / 10), putchar(x % 10 + '0');\r\n\treturn;\r\n}\r\nint max(int x, int y) {return x > y ? x : y;}\r\nint min(int x, int y) {return x < y ? x : y;}\r\nnamespace AC {\r\n\tint son[M][N], fail[M],\tval[M][N], F[M][N], cnt = 1, cur_len;\r\n\tchar AA[M], BB[M];\r\n\tvoid DFS(int l, int x, bool bl = true, bool br = true) {\r\n\t\tif (l > cur_len || (!bl && !br)) return val[x][cur_len + 1 - l]++, void();\r\n\t\tfor (int i = (bl ? AA[l] - '0' : 0); i <= (br ? BB[l] - '0' : 9); i++)\r\n\t\t\tDFS(l + 1, son[x][i] ? son[x][i] : son[x][i] = ++cnt, bl & (i + '0' == AA[l]), br & (i + '0' == BB[l]));\r\n\t\treturn;\r\n\t}\r\n\tvoid build() {\r\n\t\tif (lenA == lenB) return cur_len = lenA, memcpy(AA + 1, A + 1, lenA), memcpy(BB + 1, B + 1, lenB), DFS(1, 1);\r\n\t\tmemcpy(AA + 1, A + 1, lenA), memset(BB + 1, '9', lenA), cur_len = lenA, DFS(1, 1);\r\n\t\tmemcpy(BB + 1, B + 1, lenB), memset(AA + 1, '0', lenB), AA[1] = '1', cur_len = lenB, DFS(1, 1);\r\n\t\tfor (int i = lenA + 1; i < lenB; i++)\r\n\t\t\tfor (int j = 1; j < 10; j++) val[son[1][j] ? son[1][j] : son[1][j] = ++cnt][i]++;\r\n\t\treturn;\r\n\t}\r\n\tvoid get_fail() {\r\n\t\tstd::queue <int> Q;\r\n\t\tfor (int i = 0; i < 10; i++)\r\n\t\t\tif (son[1][i]) Q.push(son[1][i]), fail[son[1][i]] = 1;\r\n\t\t\telse son[1][i] = 1;\r\n\t\twhile (!Q.empty()) {\r\n\t\t\tint now = Q.front(); Q.pop();\r\n\t\t\tfor (int i = 0; i <= n; i++) val[now][i] += val[fail[now]][i];\r\n\t\t\tfor (int i = 0; i < 10; i++)\r\n\t\t\t\tif (son[now][i]) fail[son[now][i]] = son[fail[now]][i], Q.push(son[now][i]);\r\n\t\t\t\telse son[now][i] = son[fail[now]][i];\r\n\t\t}\r\n\t\tfor (int i = 1; i <= cnt; i++)\r\n\t\t\tfor (int j = 1; j <= n; j++) val[i][j] += val[i][j - 1];\r\n\t\treturn;\r\n\t}\r\n\tvoid find_ans(int x, int y){\r\n\t\tif (!y) return;\r\n\t\tfor (int i = 0; i < 10; i++)\r\n\t\t\tif (son[x][i] && F[x][y] == F[son[x][i]][y - 1] + val[x][y]) return putchar(i + '0'), find_ans(son[x][i], y - 1);\r\n\t\treturn assert(0), void();\r\n\t}\r\n\tvoid DP() {\r\n\t\tfor (int i = 1; i <= cnt; i++) F[i][0] = val[i][0];\r\n\t\tfor (int j = 1; j <= n; j++)\r\n\t\t\tfor (int i = 1; i <= cnt; i++)\r\n\t\t\t\tfor (int k = 0; k < 10; k++)\r\n\t\t\t\t\tif (son[i][k]) F[i][j] = max(F[i][j], F[son[i][k]][j - 1] + val[i][j]);\r\n\t\treturn Write(F[1][n]), putchar('\\n'), find_ans(1, n);\r\n\t}\r\n}\r\nint main() {\r\n\tscanf(\"%s%s\", A + 1, B + 1); n = read(); lenA = strlen(A + 1), lenB = strlen(B + 1);\r\n\treturn AC::build(), AC::get_fail(), AC::DP(), 0;\r\n}"
}