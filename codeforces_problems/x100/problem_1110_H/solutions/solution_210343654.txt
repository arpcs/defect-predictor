{
    "id": 210343654,
    "contestId": 1110,
    "creationTimeSeconds": 1687264126,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "Hardy_Lee"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 2277,
    "memoryConsumedBytes": 524800000,
    "source": "// LUOGU_RID: 113045772\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ninline int read() {\n\tint x = 0, f = 0; char ch = getchar();\n\twhile (!isdigit(ch)) f = ch == '-', ch = getchar();\n\twhile (isdigit(ch)) x = (x << 3) + (x << 1) + (ch ^ 48), ch = getchar();\n\treturn f ? -x : x;\n}\n\nconst int M = 20010, N = 2010;\nint son[M][10], fa[M], sz = 1;\nint g[M][N], f[N][M], frm[N][M];\nbool pos[N][M];\nchar strl[N], strr[N];\nint lenl, lenr, n;\n\nvoid add(int now, int l, int r, int len) {\n\tfor (int j = l; j <= r; ++j) {\n\t\tif (!son[now][j]) son[now][j] = ++sz;\n\t\t++g[son[now][j]][len - 1];\n\t}\n}\n\nvoid get_fail() {\n\tqueue<int> q;\n\tfor (int j = 0; j < 10; ++j) {\n\t\tif (son[1][j]) {\n\t\t\tfa[son[1][j]] = 1;\n\t\t\tq.push(son[1][j]);\n\t\t} else {\n\t\t\tson[1][j] = 1;\n\t\t}\n\t}\n\twhile (!q.empty()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor (int j = 0; j < 10; ++j) {\n\t\t\tif (son[x][j]) {\n\t\t\t\tfa[son[x][j]] = son[fa[x]][j];\n\t\t\t\tq.push(son[x][j]);\n\t\t\t\tfor (int k = 0; k <= n; ++k) {\n\t\t\t\t\tg[son[x][j]][k] += g[fa[son[x][j]]][k];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tson[x][j] = son[fa[x]][j];\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= sz; ++i) {\n\t\tfor (int j = 1; j <= n; ++j) {\n\t\t\tg[i][j] += g[i][j - 1];\n//\t\t\tprintf(\"g[%d][%d] = %d; \\n\", i, j, g[i][j]);\n\t\t}\n\t}\n}\n\nvoid dfs(int i, int j) {\n\tif (i > n) return;\n\tfor (int k = 0; k <= 9; ++k) {\n\t\tint to = f[i][j] + g[son[j][k]][n - i - 1];\n\t\tif (to == f[i + 1][son[j][k]] && pos[i + 1][son[j][k]]) {\n\t\t\tputchar(k + '0');\n\t\t\tdfs(i + 1, son[j][k]);\n\t\t\treturn;\n\t\t} \n\t}\n}\n\nsigned main() {\n\tscanf(\"%s%s\", strl + 1, strr + 1);\n\tlenl = strlen(strl + 1); lenr = strlen(strr + 1);\n\tn = read();\n\tif (lenl == lenr) {\n\t\tbool fl = 1;\n\t\tint nowl = 1, nowr = 1;\n\t\tfor (int j = 1; j <= lenl; ++j) {\n\t\t\tif (fl && strl[j] == strr[j]) {\n\t\t\t\tif (!son[nowl][strl[j] - '0']) son[nowl][strl[j] - '0'] = ++sz;\n\t\t\t\tnowl = nowr = son[nowl][strl[j] - '0'];\n\t\t\t} else {\n\t\t\t\tif (fl) {\n\t\t\t\t\tadd(nowl, strl[j] - '0' + 1, strr[j] - '0' - 1, lenl - j + 1);\n\t\t\t\t\tfl = 0;\n\t\t\t\t} \n\t\t\t\tif (!son[nowl][strl[j] - '0']) son[nowl][strl[j] - '0'] = ++sz;\n\t\t\t\tnowl = son[nowl][strl[j] - '0'];\n\t\t\t\tif (j != lenl) add(nowl, strl[j + 1] - '0' + 1, 9, lenl - j);\t\n\t\t\t\telse ++g[nowl][0];\n\t\t\t\tif (!son[nowr][strr[j] - '0']) son[nowr][strr[j] - '0'] = ++sz;\n\t\t\t\tnowr = son[nowr][strr[j] - '0'];\t\t\t\n\t\t\t\tif (j != lenr) add(nowr, 0, strr[j + 1] - '0' - 1, lenr - j);\t\n\t\t\t\telse ++g[nowr][0];\n\t\t\t}\n\t\t}\n\t\tif (fl) {\n\t\t\t++g[nowr][0];\n\t\t}\n//\t\tprintf(\"sz1 = %d; \\n\", sz);\n\t} else {\n\t\tint nowl = 1, nowr = 1;\n\t\tfor (int j = 1; j <= lenl; ++j) {\n\t\t\tadd(nowl, strl[j] - '0' + 1, 9, lenl - j + 1);\t\n\t\t\tif (!son[nowl][strl[j] - '0']) son[nowl][strl[j] - '0'] = ++sz;\n\t\t\tnowl = son[nowl][strl[j] - '0'];\n\t\t\tif (j == lenl) ++g[nowl][0];\n\t\t}\n//\t\tcout << \"sz = \" << sz << endl;\n\t\tfor (int j = 1; j <= lenr; ++j) {\n\t\t\tif (j != 1) add(nowr, 0, strr[j] - '0' - 1, lenr - j + 1);\n\t\t\telse add(nowr, 1, strr[j] - '0' - 1, lenr - j + 1);\n\t\t\tif (!son[nowr][strr[j] - '0']) son[nowr][strr[j] - '0'] = ++sz;\n\t\t\tnowr = son[nowr][strr[j] - '0'];\t\t\t\n\t\t\tif (j == lenr) ++g[nowr][0];\n\t\t}\t\t\n\t\tfor (int len = lenl + 1; len < lenr; ++len) {\n\t\t\tfor (int j = 1; j <= 9; ++j) {\n\t\t\t\tif (!son[1][j]) son[1][j] = ++sz;\n\t\t\t\t++g[son[1][j]][len - 1];\n\t\t\t}\n\t\t}\n//\t\tprintf(\"sz2 = %d; \\n\", sz);\n\t}\n\tget_fail();\n\tmemset(f, 0xcf, sizeof f);\n\tf[0][1] = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tfor (int k = 0; k <= 9; ++k)  {\n\t\t\tfor (int j = 1; j <= sz; ++j) {\n\t\t\t\tint to = f[i][j] + g[son[j][k]][n - i - 1];\n\t\t\t\tif (to > f[i + 1][son[j][k]]) {\n\t\t\t\t\tf[i + 1][son[j][k]] = to;\n//\t\t\t\t\tprintf(\"f[%d][%d] = f[%d][%d] + g[%d][%d] = %d; \\n\", i + 1, son[j][k], i, j, son[j][k], n - i - 1, f[i + 1][son[j][k]]);\n\t\t\t\t\tfrm[i + 1][son[j][k]] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint id = 1;\n\tfor (int j = 2; j <= sz; ++j) \n\t\tif (f[n][j] > f[n][id])\n\t\t\tid = j;\n\tprintf(\"%d\\n\", f[n][id]); \n\tfor (int j = 1; j <= sz; ++j) \n\t\tif (f[n][j] == f[n][id])\n\t\t     pos[n][j] = true;\n\tfor (int i = n - 1; i >= 0; --i) {\n\t\tfor (int j = 1; j <= sz; ++j) {\n\t\t\tfor (int k = 0; k <= 9; ++k) {\n\t\t\t\tint to = f[i][j] + g[son[j][k]][n - i - 1];\n\t\t\t\tif (to == f[i + 1][son[j][k]] && pos[i + 1][son[j][k]]) {\n\t\t\t\t\tpos[i][j] = true;\n\t\t\t\t} \n\t\t\t}\n\t\t}\n\t}\n\tdfs(0, 1);\n\treturn 0; \n} "
}