{
    "contestId": 1029,
    "index": "A",
    "name": "Many Equal Substrings",
    "type": "PROGRAMMING",
    "rating": 1300,
    "tags": [
        "implementation",
        "strings"
    ],
    "desc": {
        "title": "A. Many Equal Substrings",
        "statement": "<p>You are given a string $$$t$$$ consisting of $$$n$$$ lowercase Latin letters and an integer number $$$k$$$.</p><p>Let's define a substring of some string $$$s$$$ with indices from $$$l$$$ to $$$r$$$ as $$$s[l \\dots r]$$$.</p><p>Your task is to construct such string $$$s$$$ of minimum possible length that there are exactly $$$k$$$ positions $$$i$$$ such that $$$s[i \\dots i + n - 1] = t$$$. In other words, your task is to construct such string $$$s$$$ of minimum possible length that there are exactly $$$k$$$ substrings of $$$s$$$ equal to $$$t$$$.</p><p>It is guaranteed that the answer is always unique.</p>",
        "inputSpecification": "<p>The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n, k \\le 50$$$) \u2014 the length of the string $$$t$$$ and the number of substrings.</p><p>The second line of the input contains the string $$$t$$$ consisting of exactly $$$n$$$ lowercase Latin letters.</p>",
        "outputSpecification": "<p>Print such string $$$s$$$ of minimum possible length that there are exactly $$$k$$$ substrings of $$$s$$$ equal to $$$t$$$.</p><p>It is guaranteed that the answer is always unique.</p>",
        "samples": [
            {
                "input": "3 4<br/>aba<br/>",
                "output": "ababababa<br/>"
            },
            {
                "input": "3 2<br/>cat<br/>",
                "output": "catcat<br/>"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "string manipulation",
        "substring",
        "pattern matching",
        "algorithmic string construction",
        "string compression",
        "optimization",
        "pattern recognition",
        "substring repeating",
        "string repeating",
        "combinatorial optimization",
        "text processing",
        "algorithmic patterns",
        "dynamic programming",
        "optimal substring length",
        "data compression",
        "pattern formation",
        "substring formation",
        "string concatenation",
        "algorithmic optimization",
        "algorithmic construction"
    ]
}