{
    "id": 105257377,
    "contestId": 1029,
    "creationTimeSeconds": 1611530678,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1029,
        "index": "A",
        "name": "Many Equal Substrings",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1029,
        "members": [
            {
                "handle": "beastslayer123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1535122200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 78,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n#define beastslayer ios_base::sync_with_stdio(false);cin.tie(NULL);\r\n#define endl \"\\n\"\r\n//typedef pair<int, int> pii;\r\n\r\nint main()\r\n{\r\n    beastslayer;\r\n\r\n    int n,k;\r\n    cin>>n>>k;\r\n    string s;\r\n    cin>>s;\r\n\r\n    int i;\r\n\r\n//finding the  position where the string is repeating its prefix\r\n    for(i=1;i<=n;++i)\r\n    {\r\n        if(s.substr(0,n-i)==s.substr(i))\r\n            break;\r\n    }\r\n//now since position is known, printing it k times\r\n    for(int j=0;j<k;++j)\r\n        cout<<s.substr(0,i);\r\n//printing the rest suffix substring part\r\n    cout<<s.substr(i)<<endl;\r\n\r\n    return 0;\r\n}\r\n",
    "suggested_categories": [
        "string manipulation",
        "algorithmic coding",
        "input handling",
        "output formatting",
        "efficient code",
        "c++ programming",
        "substring processing",
        "code optimization",
        "loop iteration",
        "variable declaration",
        "error checking",
        "standard template library (stl)",
        "bit manipulation",
        "interactive program",
        "code readability",
        "standard input/output (i/o)",
        "data validation",
        "mathematical computation",
        "technical interview preparation",
        "competitive programming"
    ]
}