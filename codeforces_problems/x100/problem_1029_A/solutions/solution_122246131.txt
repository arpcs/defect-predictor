{
    "id": 122246131,
    "contestId": 1029,
    "creationTimeSeconds": 1626116606,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1029,
        "index": "A",
        "name": "Many Equal Substrings",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1029,
        "members": [
            {
                "handle": "Retired_Lucifer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1535122200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 78,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 3788800,
    "source": "#pragma GCC optimize (\"O3\")\r\n#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\ntypedef long long ll;\r\n#define pi pair<ll,ll>\r\n#define IO ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\ntypedef tree<pi,null_type,less<pi>,rb_tree_tag,tree_order_statistics_node_update> ordered_set;\r\nconst ll N = 5e3 , K = 1e5 , mod = 998244353   , OO = 2e9 , block_size = sqrt(N);\r\nint failure_function(string s){\r\n\r\n    int n = s.size();\r\n    vector<int> lpp(n);\r\n    int k = 0;\r\n    for (int i=1;i<n;i++){\r\n        while(k && s[i] != s[k])k = lpp[k-1];\r\n        if (s[i] == s[k])++k;\r\n        lpp[i] = k;\r\n    }\r\n    return lpp[n-1];\r\n\r\n}\r\nvoid problem(){\r\n\r\n    int n , m;\r\n    cin >> n >> m;\r\n    string s;\r\n    cin >> s;\r\n    ll sz = n-failure_function(s);\r\n    for (int i=1;i<m;i++)cout << s.substr(0,sz);\r\n    cout << s << \"\\n\";\r\n\r\n}\r\n\r\nint main() {\r\n    // IO;\r\n     int q = 1;\r\n //   cin >> q;\r\n     for (int i=0;i<q;i++)problem();\r\n     return 0;\r\n}\r\n\r\n\r\n\r\n\r\n/*\r\nDon't forget\r\n1. If you are looking at editorial, remember that you are accepting defeat.\r\n2. [If stuck] Don't stick to one approach and attack with different approaches.\r\nWrite everything down, analyse the G-spot and attack throught it.\r\n3. Don't look at standings during the contest.\r\n4. Don't try to code fast and code concetrately instead or bugs will eat you in the sleep.\r\n5. When you are writing return, make sure that there are no input operations after that\r\n*/\r\n"
}