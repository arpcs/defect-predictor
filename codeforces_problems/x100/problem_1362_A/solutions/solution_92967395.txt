{
    "id": 92967395,
    "contestId": 1362,
    "creationTimeSeconds": 1600254472,
    "relativeTimeSeconds": 5632,
    "problem": {
        "contestId": 1362,
        "index": "A",
        "name": "Johnny and Ancient Computer",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1362,
        "members": [
            {
                "handle": "RUPTURED_KnaPSacK"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1600248840
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 204800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef  long long  ll;\r\n   ll mod=pow(10,9)+7;\r\ntypedef unsigned long long  ull;\r\nint gcdExtended(int a, int b, int *x, int *y);\r\n\r\n// Function to find modulo inverse of b. It returns\r\n// -1 when inverse doesn't\r\nll modInverse(int b, int m)\r\n{\r\n    int x, y; // used in extended GCD algorithm\r\n    int g = gcdExtended(b, m, &x, &y);\r\n\r\n    // Return -1 if b and m are not co-prime\r\n    if (g != 1)\r\n        return -1;\r\n\r\n    // m is added to handle negative x\r\n    return (x%m + m) % m;\r\n}\r\nint gcdExtended(int a, int b, int *x, int *y)\r\n{\r\n    // Base Case\r\n    if (a == 0)\r\n    {\r\n        *x = 0, *y = 1;\r\n        return b;\r\n    }\r\n\r\n    int x1, y1; // To store results of recursive call\r\n    int gcd = gcdExtended(b%a, a, &x1, &y1);\r\n\r\n    // Update x and y using results of recursive\r\n    // call\r\n    *x = y1 - (b/a) * x1;\r\n    *y = x1;\r\n\r\n    return gcd;\r\n}\r\nstring decimalToBinary(ll n)\r\n{\r\n    //finding the binary form of the number and\r\n    //coneverting it to string.\r\n    string s = bitset<64> (n).to_string();\r\n\r\n    //Finding the first occurance of \"1\"\r\n    //to strip off the leading zeroes.\r\n    const auto loc1 = s.find('1');\r\n\r\n    if(loc1 != string::npos)\r\n        return s.substr(loc1);\r\n\r\n    return \"0\";\r\n}\r\nint binaryToDecimal(int n)\r\n{\r\n    int num = n;\r\n    int dec_value = 0;\r\n\r\n    // Initializing base value to 1, i.e 2^0\r\n    int base = 1;\r\n\r\n    int temp = num;\r\n    while (temp) {\r\n        int last_digit = temp % 10;\r\n        temp = temp / 10;\r\n\r\n        dec_value += last_digit * base;\r\n\r\n        base = base * 2;\r\n    }\r\n\r\n    return dec_value;\r\n}\r\nint factorial(int n);\r\nint factorial(int n)\r\n{  ull ans=1;\r\n    while(n!=1)\r\n    {\r\n        ans=((ans%mod)*(n%mod))%mod;\r\n\r\n        n--;\r\n\r\n    }\r\n    return ans;\r\n\r\n}\r\n ull sumbincoef( int N, int k ) {\r\n  ull   bincoef = 1, sum = 1;\r\n  int i;\r\n  for( i=1 ; i<k ; ++i ) {\r\n    bincoef = (bincoef * (N-i+1) / i);\r\n    sum += bincoef;\r\n  }\r\n  return sum;\r\n}\r\n\r\nbool is_prime(ll n) {\r\n    // Assumes that n is a positive natural number\r\n    // We know 1 is not a prime number\r\n    if (n == 1) {\r\n        return false;\r\n    }\r\n\r\n    ll i = 2;\r\n    // This will loop from 2 to int(sqrt(x))\r\n    while (i*i <= n) {\r\n        // Check if i divides x without leaving a remainder\r\n        if (n % i == 0) {\r\n            // This means that n has a factor in between 2 and sqrt(n)\r\n            // So it is not a prime number\r\n            return false;\r\n        }\r\n        i += 1;\r\n    }\r\n    // If we did not find any factor in the above loop,\r\n    // then n is a prime number\r\n    return true;\r\n}\r\nint gcd(int a, int b)\r\n{\r\n    if (a == 0)\r\n        return b;\r\n    return gcd(b % a, a);\r\n}\r\ntypedef unsigned long long  ull;\r\n\r\nint check(int x,vector <int> a,int n)\r\n{  int county=0;\r\n  map <int,int> mapa;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        mapa.insert(pair<int,int>(a[i],0));\r\n    }\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        mapa[a[i]]++;\r\n    }\r\n   // cout<<mapa[1]<<mapa[2]<<mapa[3]<<mapa[4]<<mapa[5]<<endl;\r\n    for(int i=0;i<a.size();i++)\r\n    {   mapa[a[i]]--;\r\n        if(mapa[abs(a[i]-x)]>0)\r\n        {\r\n            county++;\r\n\r\n\r\n            mapa[abs(a[i]-x)]--;\r\n        }\r\n\r\n\r\n    }\r\n    return county;\r\n}\r\n\r\ntypedef unsigned int ui;\r\n\r\nint main()\r\n{  ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\r\n\r\n\r\n  int t;\r\n  cin>>t;\r\n  while(t>0)\r\n  {\r\n     ll a,b;\r\n     cin>>a>>b;\r\n     if(a==b)\r\n     {\r\n         cout<<0<<endl;\r\n     }\r\n     else if(a<b)\r\n     {\r\n         if(b%a==0)\r\n         {\r\n             ll d=b/a;\r\n             if(d%2==0)\r\n             {string s=decimalToBinary(d);\r\n\r\n               ll len=s.size()-1;\r\n               if(len%3!=0)\r\n               {\r\n                   if(b==a*pow(8,len/3)*4||b==a*pow(8,len/3)*2)\r\n\r\n                  {\r\n                      cout<<len/3+1<<endl;\r\n\r\n                  }\r\n                  else\r\n                  {\r\n                      cout<<-1<<endl;\r\n                  }\r\n                  }\r\n               else\r\n               {    if(b==a*pow(8,len/3))\r\n                   {cout<<len/3<<endl;}\r\n                   else\r\n                   {\r\n                       cout<<-1<<endl;\r\n                   }\r\n               }\r\n\r\n\r\n             }\r\n\r\n\r\n             else\r\n             {\r\n                 cout<<-1<<endl;\r\n             }\r\n         }\r\n         else\r\n         {\r\n             cout<<-1<<endl;\r\n         }\r\n     }\r\n     else\r\n     {\r\n        ll temp=b;\r\n        b=a;\r\n        a=temp;\r\n        if(b%a==0)\r\n         {\r\n             int d=b/a;\r\n             if(d%2==0)\r\n             {int ans=0;\r\n                string s=decimalToBinary(d);\r\n\r\n               ll len=s.size()-1;\r\n               if(len%3!=0)\r\n               {\r\n                   if(b==a*pow(8,len/3)*4||b==a*pow(8,len/3)*2)\r\n\r\n                  {\r\n                      cout<<len/3+1<<endl;\r\n\r\n                  }\r\n                  else\r\n                  {\r\n                      cout<<-1<<endl;\r\n                  }\r\n                  }\r\n               else\r\n               {    if(b==a*pow(8,len/3))\r\n                   {cout<<len/3<<endl;}\r\n                   else\r\n                   {\r\n                       cout<<-1<<endl;\r\n                   }\r\n               }\r\n\r\n\r\n\r\n             }\r\n             else\r\n             {\r\n                 cout<<-1<<endl;\r\n             }\r\n         }\r\n         else\r\n         {\r\n             cout<<-1<<endl;\r\n         }\r\n\r\n\r\n     }\r\n\r\n\r\n\r\n\r\n\r\n      t--;\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"
}