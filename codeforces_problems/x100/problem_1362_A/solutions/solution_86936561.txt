{
    "id": 86936561,
    "contestId": 1362,
    "creationTimeSeconds": 1594836462,
    "relativeTimeSeconds": 882,
    "problem": {
        "contestId": 1362,
        "index": "A",
        "name": "Johnny and Ancient Computer",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1362,
        "members": [
            {
                "handle": "siyy"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1594835580
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 23859200,
    "source": "import os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n# region fastio\r\n\r\nBUFSIZE = 8192\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n# ------------------------------\r\n\r\ndef RL(): return map(int, sys.stdin.readline().rstrip().split())\r\ndef RLL(): return list(map(int, sys.stdin.readline().rstrip().split()))\r\ndef N(): return int(input())\r\ndef comb(n, m): return factorial(n) / (factorial(m) * factorial(n - m)) if n >= m else 0\r\ndef perm(n, m): return factorial(n) // (factorial(n - m)) if n >= m else 0\r\ndef mdis(x1, y1, x2, y2): return abs(x1 - x2) + abs(y1 - y2)\r\nmod = 998244353\r\nINF = float('inf')\r\nfrom math import factorial\r\nfrom collections import Counter, defaultdict, deque\r\nfrom heapq import heapify, heappop, heappush\r\n\r\n# ------------------------------\r\n# f = open('../input.txt')\r\n# sys.stdin = f\r\n\r\ndef main():\r\n    for _ in range(N()):\r\n        a, b = RL()\r\n\r\n        ra = rb = 0\r\n        while a&1==0:\r\n            a>>=1\r\n            ra+=1\r\n        while b&1==0:\r\n            b>>=1\r\n            rb+=1\r\n\r\n        if a!=b:\r\n            print(-1)\r\n        else:\r\n            zero = abs(ra-rb)\r\n            res = 0\r\n            res += zero//3\r\n            zero = zero%3\r\n\r\n            res += zero//2\r\n            zero = zero%2\r\n            res+=zero\r\n            print(res)\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n\r\n"
}