{
    "id": 3435772,
    "contestId": 290,
    "creationTimeSeconds": 1364831837,
    "relativeTimeSeconds": 1637,
    "problem": {
        "contestId": 290,
        "index": "C",
        "name": "WTF?",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "*special",
            "graph matchings",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 290,
        "members": [
            {
                "handle": "di_halt"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1364830200
    },
    "programmingLanguage": "Java 7",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 46284800,
    "source": "import java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class P290C {\r\n\r\n  @SuppressWarnings(\"unchecked\")\r\n  public void run() throws Exception {\r\n    int n = nextInt();\r\n    if (n == 0) {\r\n      println(1);\r\n      return;\r\n    }\r\n    double sum = 0.0;\r\n\r\n    for (int i = 0; i < n; i++) {\r\n      sum += nextDouble();\r\n    }\r\n\r\n    println(sum / n);\r\n  }\r\n\r\n  public static void main(String... args) throws Exception {\r\n    br = new BufferedReader(new InputStreamReader(System.in));\r\n    pw = new PrintWriter(new BufferedOutputStream(System.out));\r\n    new P290C().run();\r\n    br.close();\r\n    pw.close();\r\n  }\r\n\r\n  static BufferedReader br;\r\n  static PrintWriter pw;\r\n  StringTokenizer stok;\r\n\r\n  String nextToken() throws IOException {\r\n    while (stok == null || !stok.hasMoreTokens()) {\r\n      String s = br.readLine();\r\n      if (s == null) { return null; }\r\n      stok = new StringTokenizer(s);\r\n    }\r\n    return stok.nextToken();\r\n  }\r\n\r\n  void print(byte b) { print(\"\" + b); }\r\n  void print(int i) { print(\"\" + i); }\r\n  void print(long l) { print(\"\" + l); }\r\n  void print(double d) { print(\"\" + d); }\r\n  void print(char c) { print(\"\" + c); }\r\n  void print(Object o) {\r\n    if (o instanceof int[]) { print(Arrays.toString((int [])o));\r\n    } else if (o instanceof long[]) { print(Arrays.toString((long [])o));\r\n    } else if (o instanceof char[]) { print(Arrays.toString((char [])o));\r\n    } else if (o instanceof byte[]) { print(Arrays.toString((byte [])o));\r\n    } else if (o instanceof short[]) { print(Arrays.toString((short [])o));\r\n    } else if (o instanceof boolean[]) { print(Arrays.toString((boolean [])o));\r\n    } else if (o instanceof float[]) { print(Arrays.toString((float [])o));\r\n    } else if (o instanceof double[]) { print(Arrays.toString((double [])o));\r\n    } else if (o instanceof Object[]) { print(Arrays.toString((Object [])o));\r\n    } else { println(\"\" + o); }\r\n  }\r\n  void print(String s) { pw.print(s); }\r\n  void println() { println(\"\"); }\r\n  void println(byte b) { println(\"\" + b); }\r\n  void println(int i) { println(\"\" + i); }\r\n  void println(long l) { println(\"\" + l); }\r\n  void println(double d) { println(\"\" + d); }\r\n  void println(char c) { println(\"\" + c); }\r\n  void println(Object o) { print(\"\" + o); }\r\n  void println(String s) { pw.println(s); }\r\n  int nextInt() throws IOException { return Integer.parseInt(nextToken()); }\r\n  long nextLong() throws IOException { return Long.parseLong(nextToken()); }\r\n  double nextDouble() throws IOException { return Double.parseDouble(nextToken()); }\r\n  char nextChar() throws IOException { return (char) (br.read()); }\r\n  String next() throws IOException { return nextToken(); }\r\n  String nextLine() throws IOException { return br.readLine(); }\r\n  int [] readInt(int size) throws IOException {\r\n    int [] array = new int [size];\r\n    for (int i = 0; i < size; i++) { array[i] = nextInt(); }\r\n    return array;\r\n  }\r\n  long [] readLong(int size) throws IOException {\r\n    long [] array = new long [size];\r\n    for (int i = 0; i < size; i++) { array[i] = nextLong(); }\r\n    return array;\r\n  }\r\n  double [] readDouble(int size) throws IOException {\r\n    double [] array = new double [size];\r\n    for (int i = 0; i < size; i++) { array[i] = nextDouble(); }\r\n    return array;\r\n  }\r\n  String [] readLines(int size) throws IOException {\r\n    String [] array = new String [size];\r\n    for (int i = 0; i < size; i++) { array[i] = nextLine(); }\r\n    return array;\r\n  }\r\n}"
}