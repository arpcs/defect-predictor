{
    "id": 3857322,
    "contestId": 290,
    "creationTimeSeconds": 1370952964,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 290,
        "index": "C",
        "name": "WTF?",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "*special",
            "graph matchings",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 290,
        "members": [
            {
                "handle": "xiaowuc1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1364830200
    },
    "programmingLanguage": "Java 6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 0,
    "source": "import java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.awt.geom.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.text.*;\r\nimport java.util.*;\r\n\r\n/*\r\nbr = new BufferedReader(new FileReader(\"input.txt\"));\r\npw = new PrintWriter(new BufferedWriter(new FileWriter(\"output.txt\")));\r\nbr = new BufferedReader(new InputStreamReader(System.in));\r\npw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n */\r\n\r\npublic class Main {\r\n\tprivate static BufferedReader br;\r\n\tprivate static StringTokenizer st;\r\n\tprivate static PrintWriter pw;\r\n\r\n\tstatic final long MOD = 1000000007;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException\t{\r\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tpw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n\t\tint qq = 1;\r\n\t\t//int qq = Integer.MAX_VALUE;\r\n\t\t//int qq = readInt();\r\n\t\tfor(int casenum = 1; casenum <= qq; casenum++)\t{\r\n\t\t\tint n = readInt();\r\n\t\t\tdouble ret = 0;\r\n\t\t\tint num = 0;\r\n\t\t\tfor(int i = 1; i <= n; i++)\t{\r\n\t\t\t\tnum += readInt();\r\n\t\t\t\tret = Math.max(ret, 1.0*num/i);\r\n\t\t\t}\r\n\t\t\tpw.println(ret);\r\n\t\t}\r\n\t\tpw.close();\r\n\t}\r\n\r\n\tpublic static boolean valid(int[] order)\t{\r\n\t\tfor(int k = 0; k < order.length; k++)\t{\r\n\t\t\tint curr = order[k];\r\n\t\t\tboolean[] seen = new boolean[order.length];\r\n\t\t\twhile(true)\t{\r\n\t\t\t\tif(seen[curr])\t{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tseen[curr] = true;\r\n\t\t\t\tcurr = order[curr];\r\n\t\t\t}\r\n\t\t\tif(!seen[0])\t{\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tpublic static long solve(int index, int[] order)\t{\r\n\t\tif(index == order.length)\t{\r\n\t\t\treturn valid(order) ? 1 : 0;\r\n\t\t}\r\n\t\tlong ret = 0;\r\n\t\tfor(int i = 0; i < order.length; i++)\t{\r\n\t\t\torder[index] = i;\r\n\t\t\tret += solve(index+1, order);\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\tprivate static void exitImmediately()\t{\r\n\t\tpw.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n\r\n\tprivate static long readLong() throws IOException\t{\r\n\t\treturn Long.parseLong(nextToken());\r\n\t}\r\n\r\n\tprivate static double readDouble() throws IOException\t{\r\n\t\treturn Double.parseDouble(nextToken());\r\n\t}\r\n\r\n\tprivate static int readInt() throws IOException\t{\r\n\t\treturn Integer.parseInt(nextToken());\r\n\t}\r\n\r\n\tprivate static String nextToken() throws IOException\t{\r\n\t\twhile(st == null || !st.hasMoreTokens())\t{\r\n\t\t\tif(!br.ready())\t{\r\n\t\t\t\texitImmediately();\r\n\t\t\t}\r\n\t\t\tst = new StringTokenizer(br.readLine().trim());\r\n\t\t}\r\n\t\treturn st.nextToken();\r\n\t}\r\n}\r\n"
}