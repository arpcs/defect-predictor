{
    "id": 107342687,
    "contestId": 1076,
    "creationTimeSeconds": 1613310275,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "honeysingh18"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\npublic class Practice1 {\r\n    public static void main(String args[])\r\n    {\r\n        FastReader input=new FastReader();\r\n        PrintWriter out=new PrintWriter(System.out);\r\n        int T=1;\r\n        while(T-->0)\r\n        {\r\n            int n=input.nextInt();\r\n            int m=input.nextInt();\r\n            int k=input.nextInt();\r\n            ArrayList<Pair> adj[]=new ArrayList[n+1];\r\n            Vertex V[]=new Vertex[n+1];\r\n            for(int i=1;i<=n;i++)\r\n            {\r\n                V[i]=new Vertex(i,Long.MAX_VALUE,null);\r\n                adj[i]=new ArrayList<>();\r\n            }\r\n            HashMap<String,Integer> map=new HashMap<>();\r\n            for(int i=0;i<m;i++)\r\n            {\r\n                int u=input.nextInt();\r\n                int v=input.nextInt();\r\n                String s=\"\";\r\n                if(u<v)\r\n                {\r\n                    s=u+\" \"+v;\r\n                }\r\n                else\r\n                {\r\n                    s=v+\" \"+u;\r\n                }\r\n                map.put(s,(i+1));\r\n                int w=input.nextInt();\r\n                adj[u].add(new Pair(v,w));\r\n                adj[v].add(new Pair(u,w));\r\n                if(n==100)\r\n                {\r\n                    out.println(u+\" \"+v+\" \"+w);\r\n                }\r\n            }\r\n            if(k==0)\r\n            {\r\n                out.println(0);\r\n            }\r\n            else\r\n            {\r\n                dijkstra(adj,V,1,n);\r\n                /*\r\n                if(n==100)\r\n                {\r\n                    for(int i=2;i<=n;i++)\r\n                    {\r\n                        out.print(V[i].parent.key+\" \");\r\n                    }\r\n                    out.println();\r\n                }\r\n\r\n                 */\r\n                Queue<Integer> q=new LinkedList<>();\r\n                q.add(1);\r\n                ArrayList<Integer> list=new ArrayList<>();\r\n                ArrayList<String> edges=new ArrayList<>();\r\n                list.add(1);\r\n                while(!q.isEmpty())\r\n                {\r\n                    int u=q.poll();\r\n                    for(int i=0;i<adj[u].size();i++)\r\n                    {\r\n                        int v=adj[u].get(i).v;\r\n                        if(v!=1)\r\n                        {\r\n                            if(V[v].parent.key==u)\r\n                            {\r\n                                q.add(v);\r\n                                list.add(v);\r\n                                if(u<v)\r\n                                {\r\n                                    edges.add(u+\" \"+v);\r\n                                }\r\n                                else\r\n                                {\r\n                                    edges.add(v+\" \"+u);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                int s=list.size()-1;\r\n                int r=0;\r\n                if(s>k)\r\n                {\r\n                    r+=s-k;\r\n                }\r\n                out.println(edges.size()-r);\r\n                for(int i=0;i<edges.size()-r;i++)\r\n                {\r\n                    int in=map.get(edges.get(i));\r\n                    out.print(in+\" \");\r\n                }\r\n                out.println();\r\n            }\r\n        }\r\n        out.close();\r\n    }\r\n    public static void dijkstra(ArrayList<Pair> adj[],Vertex V[],int s,int n)\r\n    {\r\n        V[s].d=0L;\r\n        PriorityQueue<Vertex> q=new PriorityQueue<>(new Comparator<Vertex>() {\r\n            @Override\r\n            public int compare(Vertex o1,Vertex o2) {\r\n                if(o2.d<o1.d)\r\n                {\r\n                    return 1;\r\n                }\r\n                else if(o2.d>o1.d)\r\n                {\r\n                    return -1;\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            }\r\n        });\r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            q.add(V[i]);\r\n        }\r\n        HashSet<Integer> set=new HashSet<>();\r\n        while(!q.isEmpty())\r\n        {\r\n            Vertex U=q.peek();\r\n            int u=U.key;\r\n            set.add(u);\r\n            for(int i=0;i<adj[u].size();i++)\r\n            {\r\n                int v=adj[u].get(i).v;\r\n                int w=adj[u].get(i).w;\r\n                relax(V,u,v,w);\r\n            }\r\n            q.poll();\r\n        }\r\n    }\r\n    public static void relax(Vertex V[],int u,int v,int w)\r\n    {\r\n        if(V[v].d>V[u].d+w)\r\n        {\r\n            V[v].d=V[u].d+w;\r\n            V[v].parent=V[u];\r\n        }\r\n    }\r\n    public static class Pair\r\n    {\r\n        int v,w;\r\n        Pair(int v,int w)\r\n        {\r\n            this.v=v;\r\n            this.w=w;\r\n        }\r\n    }\r\n    public static class Vertex\r\n    {\r\n        int key;\r\n        long d;\r\n        Vertex parent;\r\n        Vertex(int key, long d,Vertex parent)\r\n        {\r\n            this.key=key;\r\n            this.d=d;\r\n            this.parent=parent;\r\n        }\r\n    }\r\n    static class FastReader\r\n    {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n        public FastReader()\r\n        {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n        String next()\r\n        {\r\n            while (st == null || !st.hasMoreElements())\r\n            {\r\n                try\r\n                {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n        int nextInt()\r\n        {\r\n            return Integer.parseInt(next());\r\n        }\r\n        long nextLong()\r\n        {\r\n            return Long.parseLong(next());\r\n        }\r\n        double nextDouble()\r\n        {\r\n            return Double.parseDouble(next());\r\n        }\r\n        String nextLine()\r\n        {\r\n            String str = \"\";\r\n            try\r\n            {\r\n                str = br.readLine();\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n}"
}