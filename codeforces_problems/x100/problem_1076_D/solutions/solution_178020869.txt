{
    "id": 178020869,
    "contestId": 1076,
    "creationTimeSeconds": 1666802833,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Ghassane"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 45772800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n#define sim template < class c\r\n#define ris return * this\r\n#define dor > debug & operator <<\r\n#define eni(x) sim > typename \\\r\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\r\nsim > struct rge { c b, e; };\r\nsim > rge<c> range(c i, c j) { return rge<c> {i, j}; }\r\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\r\nsim > char dud(...);\r\nstruct debug {\r\n#ifdef LOCAL\r\n    ~debug() { cerr << endl; }\r\n    eni( != ) cerr << boolalpha << i; ris;\r\n}\r\neni( == ) ris << range(begin(i), end(i));\r\n}\r\nsim, class b dor(pair < b, c > d) {\r\n    ris << \"(\" << d.first << \", \" << d.second << \")\";\r\n}\r\nsim dor(rge<c> d) {\r\n    *this << \"[\";\r\n    for (auto it = d.b; it != d.e; ++it)\r\n        *this << \", \" + 2 * (it == d.b) << *it;\r\n    ris << \"]\";\r\n}\r\n#else\r\n    sim dor(const c&) { ris; }\r\n#endif\r\n};\r\n#define imie(...)\"[\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\r\n///////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////\r\n///////////////////////////////////////////////////////////////////////////\r\n#define int long long \r\nint32_t main() {\r\n\tios::sync_with_stdio(false);\r\n \tcin.tie(0);\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    vector<vector<array<int, 3>>> adj(n + 1);\r\n    vector<int> padre(n + 1, -1);\r\n    vector<int> arco(n + 1, -1);\r\n    vector<int> d(n + 1, 1e18);\r\n    vector<int> figli(n + 1);\r\n    vector<bool> used(m + 1);\r\n    for(int i = 1; i <= m; i++){\r\n        int u, v, w;\r\n        cin >> u >> v >> w;\r\n        adj[u].push_back({v, w, i});\r\n        adj[v].push_back({u, w, i});\r\n    }\r\n    priority_queue<array<int, 4>> pq;\r\n    pq.push({0, 1, 0, 0});\r\n    d[1] = 0;\r\n    while(!pq.empty()){\r\n        array<int, 4> tp = pq.top();\r\n        int u = tp[1], w = -tp[0];\r\n        pq.pop();\r\n        if(w != d[u]){\r\n            continue;\r\n        }\r\n        int pap = tp[3];\r\n        int edge = tp[2];\r\n        used[edge] = true;\r\n        arco[u] = edge;\r\n        figli[pap]++;\r\n        \r\n        for(auto it : adj[u]){\r\n            if(w + it[1] < d[it[0]]){\r\n                d[it[0]] = w + it[1];\r\n                pq.push({-d[it[0]], it[0], it[2], u});\r\n                padre[it[0]] = u;\r\n            }\r\n        }\r\n    }\r\n    debug() << imie(used) imie(padre) imie(arco);\r\n    if(k >= n - 1){\r\n        cout << n - 1 << '\\n';\r\n        for(int i = 1; i <= m; i++){\r\n            if(used[i]){\r\n                cout << i << \" \";\r\n            }\r\n        }\r\n        cout << '\\n';\r\n        return 0;\r\n    }\r\n    queue<int> q;\r\n    for(int i = 1; i <= n; i++){\r\n        if(figli[i] == 0){\r\n            q.push(i);\r\n        }\r\n    }\r\n    int nodi = n;\r\n    while(!q.empty() && nodi > k + 1){\r\n        int ora = q.front();\r\n        q.pop();\r\n        int arcoUsato = arco[ora];\r\n        used[arcoUsato] = false;\r\n        figli[padre[ora]]--;\r\n        if(figli[padre[ora]] == 0){\r\n            q.push(padre[ora]);\r\n        }\r\n        nodi--;\r\n    }\r\n    cout << nodi - 1 << '\\n';\r\n    for(int i = 1; i <= m; i++){\r\n        if(used[i]){\r\n            cout << i << \" \";\r\n        }\r\n    }\r\n    cout << '\\n';\r\n}   \r\n"
}