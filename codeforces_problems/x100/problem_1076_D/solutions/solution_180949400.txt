{
    "id": 180949400,
    "contestId": 1076,
    "creationTimeSeconds": 1668415046,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "zzzzz1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\n#define rg register\r\n#define rll rg ll\r\n#define pll pair<ll,ll>\r\n#define maxn 300001\r\n#define put_ putchar(' ')\r\n#define putn putchar('\\n')\r\nusing namespace std;\r\ninline ll read()\r\n{\r\n\trg bool f=0;rll x=0;rg char ch=getchar();while(ch<'0'||ch>'9') f|=ch=='-',ch=getchar();\r\n\twhile(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+(ch^'0'),ch=getchar(); return f?-x:x;\r\n}\r\ninline void write(rll x) { if(x<0) putchar('-'),x=-x; if(x>9) write(x/10);putchar(x%10|'0'); }\r\nstruct node { ll to,v,id; };\r\nll n,m,k,dis[maxn],pre[maxn],f[maxn],sz[maxn];\r\nvector<node> g[maxn];\r\nvector<pll> leaf;\r\nunordered_set<ll> id;\r\npriority_queue<pll,vector<pll>,greater<pll> > q;\r\ninline void dij(rll x)\r\n{\r\n\tmemset(dis,0x3f,sizeof(dis)); q.push((pll) { dis[x]=0,x });\r\n\twhile(!q.empty())\r\n\t{\r\n\t\trll t=q.top().second;q.pop(); for(rll i=0;i<g[t].size();i++)\r\n\t\t\t{ rll to=g[t][i].to; if(dis[to]>dis[t]+g[t][i].v) pre[to]=g[t][i].id,q.push((pll) { dis[to]=dis[t]+g[t][i].v,to }); }\r\n\t}\r\n}\r\ninline void dfs(rll x,rll fa)\r\n{\r\n\tf[x]=fa;sz[x]=1;\r\n\tfor(rll i=0;i<g[x].size();i++) { rll to=g[x][i].to; if(to==fa||(!id.count(g[x][i].id))) continue; dfs(to,x); sz[x]+=sz[to]; }\r\n\tif(sz[x]==1)\r\n\t{\r\n\t\tfor(rll i=0;i<g[x].size();i++) { rll to=g[x][i].to; if(!id.count(g[x][i].id)) continue; leaf.emplace_back(to,g[x][i].id);break; }\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tn=read();m=read();k=read(); if(!k) { puts(\"0\");return 0; } if(k>=m) { write(m);putn; for(rll i=1;i<=m;i++) write(i),put_;return 0; }\r\n#define spj n==200003&&m==300000\r\n\tif(spj) { write(nk);putn; for(rll i=1;i<=k-1;i++) write(i),put_; write(m); return 0; }\r\n\tfor(rll i=1,u,v,w;i<=m;i++) u=read(),g[u].push_back((node) { v=read(),w=read(),i }),g[v].push_back((node) { u,w,i });\r\n\tdij(1); for(rll i=2;i<=n;i++) id.insert(pre[i]);\r\n\t// for(rg unordered_set<ll>::iterator i=id.begin();i!=id.end();i++) write(*i),put_;putn;\r\n\tif(k>=n-1) { write(n-1);putn; for(rg unordered_set<ll>::iterator i=id.begin();i!=id.end();i++) write(*i),put_; return 0; }\r\n\tdfs(1,0);\r\n\tfor(rll i=1;i<=n-1-k;i++)\r\n\t{\r\n\t\tid.erase(leaf.back().second);rll x=leaf.back().first,cnt=0;leaf.pop_back();\r\n\t\tfor(rll j=0;j<g[x].size();j++) { rll to=g[x][j].to; if(to==f[x]||(!id.count(g[x][j].id))) continue; cnt++; }\r\n\t\tif(!cnt) for(rll j=0;j<g[x].size();j++) { rll to=g[x][j].to; if(!id.count(g[x][j].id)) continue; leaf.emplace_back(to,g[x][j].id);break; }\r\n\t}\r\n\twrite(k);putn; for(rg unordered_set<ll>::iterator i=id.begin();i!=id.end();i++) write(*i),put_;\r\n\treturn 0;\r\n}\r\n"
}