{
    "id": 113004132,
    "contestId": 1076,
    "creationTimeSeconds": 1618399978,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "lerooo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 2074,
    "memoryConsumedBytes": 44236800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nvector<vector<pair<int, int>>> adj;\r\nint n, m;\r\nint getShortest(int source, int dist, bool is){\r\n    vector<int> p(n+1, -1);\r\n    vector<int> d(n+1,2e9);\r\n    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<>> q;\r\n\r\n    q.push({0,source});\r\n    d[source] = 0;\r\n    p[source] = is;\r\n    while(!q.empty()){\r\n        int curNode = q.top().second;\r\n        int curCost = q.top().first;\r\n        q.pop();\r\n        if(curCost != d[curNode]){\r\n            continue;\r\n        }\r\n        for(auto i : adj[curNode]){\r\n            if(d[i.first] > d[curNode] + (p[curNode] != i.second)){\r\n                p[i.first] = i.second;\r\n                d[i.first] = d[curNode] + (p[curNode] != i.second);\r\n                q.push({d[i.first], i.first});\r\n            }\r\n        }\r\n    }\r\n    return d[dist];\r\n}\r\nint main(){\r\n    int k;\r\n    cin>>n>>m>>k;\r\n    adj = vector<vector<pair<int, int>>> (n+1);\r\n    map<pair<int,int> , int> id;\r\n    for(int i = 1;i<=m;i++){\r\n        int x, y, cost;\r\n        cin>>x>>y>>cost;\r\n        adj[x].push_back({y, cost});\r\n        adj[y].push_back({x, cost});\r\n        id[{x, y}] = i;\r\n        id[{y, x}] = i;\r\n    }\r\n\r\n    vector<int> p(n+1, -1);\r\n    vector<long long> d(n+1,1e18);\r\n    priority_queue<pair<long long,int>, vector<pair<long long,int>>, greater<>> q;\r\n\r\n    q.push({0,1});\r\n    d[1] = 0;\r\n    vector<int> remaining;\r\n    while(!q.empty()){\r\n        int curNode = q.top().second;\r\n        long long curCost = q.top().first;\r\n        q.pop();\r\n        if(curCost != d[curNode]){\r\n            continue;\r\n        }\r\n        if(curNode != 1) {\r\n            if (remaining.size() < k) {\r\n                remaining.push_back(p[curNode]);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        for(auto i : adj[curNode]){\r\n            if(d[i.first] > d[curNode] + i.second){\r\n                p[i.first] = id[{curNode, i.first}];\r\n                d[i.first] = d[curNode] + i.second;\r\n                q.push({d[i.first], i.first});\r\n            }\r\n        }\r\n    }\r\n    cout<<remaining.size()<<endl;\r\n    for(auto i : remaining){\r\n        cout<<i<<' ';\r\n    }\r\n    return 0;\r\n}"
}