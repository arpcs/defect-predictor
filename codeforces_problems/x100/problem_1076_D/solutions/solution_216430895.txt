{
    "id": 216430895,
    "contestId": 1076,
    "creationTimeSeconds": 1690712727,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "menghui1206"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 373,
    "memoryConsumedBytes": 44134400,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nvector<pair<int, pair<int, int>>> a[300005];\r\nint n, m, g, dis[300005];\r\nbool vis[300005];\r\nvector<int> ans;\r\nvoid Dijkstra()\r\n{\r\n  memset(dis, 0x3f, sizeof dis);\r\n  memset(vis, 0, sizeof vis);\r\n  dis[1] = 0;\r\n  priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> q;\r\n  q.push({0, {1, 0}});\r\n  while (!q.empty())\r\n  {\r\n    int u = q.top().second.first, gg = q.top().second.second;\r\n    q.pop();\r\n    if (vis[u])\r\n      continue;\r\n    if (gg)\r\n      ans.push_back(gg);\r\n    vis[u] = 1;\r\n    for (int i = 0; i < a[u].size(); i++)\r\n    {\r\n      int v = a[u][i].first, w = a[u][i].second.first;\r\n      if (dis[v] > dis[u] + w)\r\n      {\r\n        dis[v] = dis[u] + w;\r\n        q.push({dis[v], {v, a[u][i].second.second}});\r\n      }\r\n    }\r\n  }\r\n}\r\nsigned main()\r\n{\r\n#ifndef ONLINE_JUDGE\r\n  freopen(\"data/data.in\", \"r\", stdin);\r\n// freopen(\"data/data.out\", \"w\", stdout);\r\n#endif\r\n  std::ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\r\n  cin >> n >> m >> g;\r\n  for (int i = 1; i <= m; i++)\r\n  {\r\n    int u, v, w;\r\n    cin >> u >> v >> w;\r\n    a[u].push_back({v, {w, i}});\r\n    a[v].push_back({u, {w, i}});\r\n  }\r\n  Dijkstra();\r\n  g = min((int)ans.size(), g);\r\n  cout << g << '\\n';\r\n  for (int i = 0; i < g; i++)\r\n    cout << ans[i] << ' ';\r\n  exit(0);\r\n}"
}