{
    "id": 112619429,
    "contestId": 1076,
    "creationTimeSeconds": 1618124113,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "hide2000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 1622,
    "memoryConsumedBytes": 40755200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define int long long\r\n#define rep(i,n) for (int i = 0; i < n; i++)\r\n#define rep1(i,n) for(int i=1;i<=(n);i++)\r\n#define rrep(i,n) for(int i=(n)-1;i>=0;i--)\r\n#define rrep1(i, n) for (int i = (n); i > 0; i--)\r\n#define REP(i, a, b) for (int i = a; i < b; i++)\r\ntemplate<class T> ostream& operator << (ostream &s, vector<T> &P)\r\n{ for (int i = 0; i < P.size(); ++i) { if (i > 0) { s << \" \"; } s << P[i]; } return s; }\r\ntemplate <class T>bool chmax(T &a, T b){if (a < b){a = b;return true;}return false;}\r\ntemplate <class T>bool chmin(T &a, T b){if (a > b){a = b;return true;}return false;}\r\nusing P  = pair<int,int>;\r\n\r\nstruct Edge{\r\n    int cost;\r\n    int v;\r\n    int idx;\r\n};\r\n\r\nclass Graph{\r\n    public:\r\n        int n;\r\n        vector<vector<Edge>> adj;\r\n\r\n    Graph(int n){\r\n        n = n;\r\n        adj = vector<vector<Edge>>(n,vector<Edge>{});\r\n    }\r\n\r\n    void add_Edge(int u,int v,int cost,int idx){\r\n        Edge e{cost,v,idx};\r\n        Edge f{cost,u,idx};\r\n        adj[u].push_back(e);\r\n        adj[v].push_back(f);\r\n        return;\r\n    }\r\n\r\n};\r\n\r\nvoid dijkstra(const Graph & G, vector<int> & dist){\r\n    priority_queue<P,vector<P>,greater<P>> stack{};\r\n    stack.push(P{0,0});\r\n    dist[0] = 0;\r\n    while(!stack.empty()){\r\n        auto [d,node] = stack.top();stack.pop();\r\n        if (d > dist[node]){continue;}\r\n        for (auto [cost,adj_node,idx] : G.adj[node]){\r\n            if (dist[adj_node] > cost + d){\r\n                dist[adj_node] = cost + d;\r\n                stack.push(P{cost + d,adj_node});\r\n            }\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nconst int inf = 1e16;\r\n\r\nvoid slv(){\r\n    int n,m,k;\r\n    cin>>n>>m>>k;\r\n    Graph G(n);\r\n    vector<int> dist(n,inf);\r\n    rep(i,m){\r\n        int x,y,w;\r\n        cin>>x>>y>>w;\r\n        x--;y--;\r\n        G.add_Edge(x,y,w,i + 1);\r\n    }\r\n    dijkstra(G,dist);\r\n    vector<P> node_dist;\r\n    vector<bool> visited(n,false);\r\n    rep(i,n){node_dist.push_back(P{dist[i],i});}\r\n    sort(node_dist.begin(),node_dist.end());\r\n    int edge_addition = 0;\r\n    visited[0] = true;\r\n    vector<int> ans;\r\n    for (auto [d,node] : node_dist){\r\n        if (edge_addition == k){break;}\r\n        if (visited[node] == false){continue;}\r\n        for (auto [cost,adj,idx] : G.adj[node]){\r\n            if (visited[adj] == false && dist[adj] == dist[node] + cost){\r\n                ans.push_back(idx);\r\n                visited[adj] = true;\r\n                edge_addition++;\r\n                if (edge_addition == k){break;}\r\n            }\r\n        }\r\n    }\r\n    cout << ans.size() << endl;\r\n    cout << ans << endl;\r\n\r\n\r\n    return;\r\n}\r\n\r\nsigned main(){\r\n    int t;t = 1;\r\n    while(t--){slv();}\r\n    return 0;\r\n}"
}