{
    "id": 163141781,
    "contestId": 1076,
    "creationTimeSeconds": 1657220768,
    "relativeTimeSeconds": 1268,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "KrK"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1657219500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 27648000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef pair <int, int> ii;\r\ntypedef long long ll;\r\ntypedef pair <ll, int> lli;\r\n\r\nconst ll Inf = 1000000000000000000ll;\r\nconst int Maxn = 300005;\r\n\r\nint n, m, k;\r\nint A[Maxn], B[Maxn], C[Maxn];\r\nbool incl[Maxn];\r\nvector <ii> neigh[Maxn];\r\nll dist[Maxn];\r\nint par[Maxn];\r\npriority_queue <lli> Q;\r\nint seq[Maxn], slen;\r\n\r\nint main()\r\n{\r\n    scanf(\"%d %d %d\", &n, &m, &k);\r\n    for (int i = 1; i <= m; i++) {\r\n        scanf(\"%d %d %d\", &A[i], &B[i], &C[i]);\r\n        neigh[A[i]].push_back(ii(B[i], i));\r\n        neigh[B[i]].push_back(ii(A[i], i));\r\n    }\r\n    int sav = min(n, 1 + k);\r\n    fill(dist, dist + Maxn, Inf); dist[1] = 0; par[1] = 0;\r\n    Q.push(lli(-dist[1], 1));\r\n    while (!Q.empty() && sav) {\r\n        int v = Q.top().second;\r\n        ll d = -Q.top().first; Q.pop();\r\n        if (d != dist[v]) continue;\r\n        sav--;\r\n        incl[par[v]] = true;\r\n        for (int i = 0; i < neigh[v].size(); i++) {\r\n            int u = neigh[v][i].first;\r\n            ll cand = d + C[neigh[v][i].second];\r\n            if (cand < dist[u]) {\r\n                dist[u] = cand;\r\n                par[u] = neigh[v][i].second;\r\n                Q.push(lli(-dist[u], u));\r\n            }\r\n        }\r\n    }\r\n    for (int i = 1; i <= m; i++)\r\n        if (incl[i])\r\n            seq[slen++] = i;\r\n    printf(\"%d\\n\", slen);\r\n    for (int i = 0; i < slen; i++)\r\n        printf(\"%d%c\", seq[i], i + 1 < slen? ' ': '\\n');\r\n    return 0;\r\n}\r\n"
}