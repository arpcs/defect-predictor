{
    "id": 182372274,
    "contestId": 1076,
    "creationTimeSeconds": 1669303469,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "ayakami"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 12288000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=3e5+5;\r\nconst int mod=998244353;\r\ntypedef long long ll;\r\nconst int inf=1e9;\r\ninline int read()\r\n{\r\n    int x=0,f=1;char ch=getchar();\r\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\r\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\r\n    return x*f;\r\n}\r\n\r\nstruct edge\r\n{\r\n    int to, dis, next;\r\n};\r\n\r\nedge e[maxn*2];\r\nlong long dis[maxn];\r\nbool vis[maxn];\r\nint head[maxn], cnt;\r\nint pre[maxn];\r\nint tot,k;\r\nint n;\r\ninline void add_edge( int u, int v, int d )\r\n{\r\n    cnt++;\r\n    e[cnt].dis = d;\r\n    e[cnt].to = v;\r\n    e[cnt].next = head[u];\r\n    head[u] = cnt;\r\n}\r\n\r\nstruct node\r\n{\r\n    long long dis;\r\n    int pos;\r\n    bool operator <( const node &x )const\r\n    {\r\n        return x.dis < dis;\r\n    }\r\n};\r\n\r\nstd::priority_queue<node> q;\r\n\r\n\r\ninline void dijkstra(int s)\r\n{\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        dis[i]=1e15;\r\n    }\r\n    dis[s] = 0;\r\n    q.push( ( node ){0, s} );\r\n    vis[s]=1;\r\n    while( !q.empty() )\r\n    {\r\n        node tmp = q.top();\r\n        q.pop();\r\n        int x = tmp.pos;\r\n        if(vis[x]) continue;\r\n        vis[x]=1;\r\n        for( int i = head[x]; i; i = e[i].next )\r\n        {\r\n            int y = e[i].to;\r\n            if( dis[y] > dis[x] + e[i].dis )\r\n            {\r\n                dis[y] = dis[x] + e[i].dis;\r\n                pre[y]=i;\r\n\r\n                q.push( ( node ){dis[y], y} );\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\nvector<int>ans;\r\n\r\nvoid dfs(int u)\r\n{\r\n    for(int i=head[u];i;i=e[i].next)\r\n    {\r\n        int v=e[i].to;\r\n        if(pre[v]==i){\r\n            printf(\"%d \",(i+1)/2);\r\n            tot++;\r\n            if(tot==k||tot==n-1){\r\n                exit(0);\r\n            }\r\n            dfs(v);\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n  // freopen(\"in.txt\",\"r\",stdin);\r\n//\r\n//   std::ios::sync_with_stdio(false);\r\n//    std::cin.tie(nullptr);\r\n    cnt=0,tot=0;\r\n    int m;\r\n    cin>>n>>m>>k;\r\n    if(k==0){\r\n        cout<<0<<endl;\r\n        return 0;\r\n    }\r\n    for(int i=1;i<=m;i++)\r\n    {\r\n        int x,y,d;\r\n        scanf(\"%d%d%d\",&x,&y,&d);\r\n        add_edge(x,y,d);\r\n        add_edge(y,x,d);\r\n    }\r\n    dijkstra(1);\r\n    printf(\"%d\\n\",k>n-1?n-1:k);\r\n    dfs(1);\r\n    return 0;\r\n}\r\n"
}