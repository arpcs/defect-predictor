{
    "id": 142052986,
    "contestId": 1076,
    "creationTimeSeconds": 1641710872,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "winterBoy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 873,
    "memoryConsumedBytes": 55603200,
    "source": "#ifdef ONLINE_JUDGE\r\n#include <bits/stdc++.h>\r\n#pragma GCC optimize(\"O1\")\r\n#pragma GCC optimize(\"O2\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#else\r\n#include \"myheader.h\"\r\n#endif\r\n// #include <ext/pb_ds/assoc_container.hpp>\r\n// using namespace __gnu_pbds;\r\nusing namespace std;\r\nvoid input() {return;}\r\ntemplate<typename T1, typename... T2>\r\n    void input(T1 & x, T2&... args){((cin >> x), input(args...));}\r\nvoid wrt() { cout << \"\\n\"; return;}\r\ntemplate<typename T1, typename... T2>\r\n    void wrt(T1 x, T2... args){((cout << x << ' '), wrt(args...));}\r\ntemplate<typename T> istream & operator>>(istream & in, vector<T> & lst)\r\n    { for (auto & e : lst) in >> e; return in; }\r\ntemplate<typename T> void inlst(T & lst, int x, int y)\r\n    { for(int i = x ; i < y; i++ ) cin >> lst[i]; }\r\ntemplate<typename T> void prlst(T & lst, int x, int y)\r\n    { for(int i = x ; i < y; i++ ) cout << lst[i] << \" \"[i > y - 1]; wrt(); }\r\n// template<typename T> using indexed_set = \r\n//     tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n// template<typename T> using indexed_multiset = \r\n//     tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n// template<typename Key, typename T> using indexed_map =\r\n//     tree<Key, T, less<Key>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<typename T> using pques = priority_queue<T, vector<T>, greater<T>>;\r\n// template<typename T> using pqueg = priority_queue<T>;\r\n#define boost ios_base::sync_with_stdio(false); cin.tie(nullptr);\r\n#define precision(n) cout.precision(n);\r\n#define ll long long\r\n#define pb push_back\r\n#define fi first\r\n#define se second\r\n#define tests int test; cin >> test; while(test--)\r\n#define ub(lst, val) (upper_bound(all(lst), val) - lst.begin())\r\n#define lb(lst, val) (lower_bound(all(lst), val) - lst.begin())\r\n#define fora(i, x, y) for (ll i = x; i < y; ++i)\r\n#define ford(i, x, y) for (ll i = x; i >= y; --i)\r\n#define all(lst) lst.begin(), lst.end()\r\n#define rall(lst) lst.rbegin(), lst.rend()\r\n#define _ceil(a, b) ((a + b - 1) / (b))\r\n#define _fill(arr, val) memset(arr, val, sizeof(arr));\r\n#define _sum(lst) accumulate(all(lst), 0ll)\r\n#define cntval(lst, val) count(all(lst), val)\r\n#define lcn(lst, val) (find(all(lst), val) - lst.begin())\r\n#define sortlst(lst) sort(lst.begin(), lst.end())\r\n#define sorted(lst) is_sorted(lst.begin(), lst.end())\r\n#define rsortlst(lst) sort(lst.rbegin(), lst.rend())\r\n#define sortarr(x, n) sort(x, x + n)\r\n#define sz(lst) (int)lst.size()\r\ntypedef pair<long long, long long> pl;\r\ntypedef pair<int, int> pi;\r\ntypedef vector<long long> vl;\r\ntypedef vector<int> vi;\r\ntypedef vector<vector<long long>> vovl;\r\ntypedef vector<vector<int>> vovi;\r\ntypedef vector<string> vs;\r\ntypedef map<int, int> mi;\r\ntypedef map<long long, long long> ml;\r\ntypedef set<long long> sl;\r\ntypedef set<int> si;\r\nconst ll inf = INT64_MAX, MOD = 1e9 + 7, N = 3e5 + 10;\r\n/*---------------------------------------FUNCT---------------------------------------- */\r\nll _lcm(ll a, ll b) { return (a * b) / __gcd(a, b); }\r\nll  min(ll a, ll b) { return std :: min(a, b); }\r\nll  max(ll a, ll b) { return std :: max(a, b); }\r\nll _nurm(ll & x) { while (x < 0) x += MOD; return (x + MOD) % MOD; }\r\nll _bits(ll x) { ll cnt = 0; while(x > 0) { cnt++; x >>= 1; } return cnt; }\r\nll _setbits(ll x) { ll cnt = 0; while(x > 0) { cnt += (x & 1); x >>= 1; } return cnt; }\r\nll _add(ll x, ll y) { x %= MOD, y %= MOD; return (x + y) % MOD; }\r\nll _sub(ll x, ll y) { x %= MOD, y %= MOD; return (x - y + MOD) % MOD; }\r\nll _mul(ll x, ll y) { x %= MOD, y %= MOD; return (x * 1ll * y) % MOD; }\r\nll _pow(ll x, ll y) { if (y == 0) return 1; else if (y % 2 == 0){\r\nll _tmp =_pow(x, y / 2); return _mul(_tmp, _tmp); } else return _mul(x, _pow(x, y - 1)); }\r\nll _inv(ll p) { return _pow(p, MOD - 2); }\r\nll _div(ll x, ll y) { x %= MOD, y %= MOD; return _mul(x, _inv(y)); }\r\n/*---------------------------------------Code---------------------------------------- */\r\nstruct element {\r\n    ll node, weight; \r\n};\r\nvector<element> Graph[N];\r\nmap<pl, ll> ids;\r\nvoid SolveTestCases(int testCase) {\r\n    ll n, m, k; cin >> n >> m >> k;\r\n    fora(i, 0, m) {\r\n        int u, v, w; cin >> u >> v >> w;\r\n        Graph[u].push_back({v, w});\r\n        Graph[v].push_back({u, w});\r\n        ids[{min(v, u), max(v, u)}] = i + 1;\r\n    }\r\n    vector<ll> dist(n + 1, inf), ans, par(n + 1), vis(n + 1, 0);\r\n    pques<pl> que, heap;\r\n    que.push({0, 1}), dist[1] = 0;\r\n    while (!que.empty()) {\r\n        ll val = que.top().first, node = que.top().second;\r\n        que.pop();\r\n        if (vis[node] == 1) continue;\r\n        vis[node] = 1;\r\n        for (auto & child : Graph[node]) {\r\n            if (dist[child.node] > val + child.weight) {\r\n                dist[child.node] = val + child.weight;\r\n                par[child.node] = node;\r\n                que.push({dist[child.node], child.node});\r\n            }\r\n        }\r\n    }\r\n    fora(i, 2, n + 1) heap.push({dist[i], i});\r\n    while (heap.size() && ans.size() < k) {\r\n        int u = heap.top().second, v = par[heap.top().second];\r\n        ans.push_back(ids[{min(v, u), max(v, u)}]);\r\n        heap.pop();\r\n    }\r\n    wrt(ans.size());\r\n    prlst(ans, 0, ans.size());\r\n}\r\nint main(int argc, char const *argv[])\r\n{\r\n    boost;\r\n    int testCase = 1;\r\n    // cin >> testCase;\r\n    for (int test = 0; test < testCase; test++)\r\n        SolveTestCases(test);\r\n    return 0;\r\n}"
}