{
    "id": 100135361,
    "contestId": 1076,
    "creationTimeSeconds": 1606842985,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "devilsanek"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define vt vector\n#define pb push_back\n#define all(c) (c).begin(), (c).end()\n#define sz(x) (int)(x).size()\n#define ll long long\n#define ld long double\n#define ar array\n \n \nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\n#else\n#define debug(x...)\n#endif\n\n/*\n    int t; cin >> t;\n    while(t--){\n        int n; cin >> n;\n        vt<int> a(n);\n        for(int i = 0; i < n; i++){\n            cin >> a[i];\n        }\n    }\n*/\n\nvt<vt<tuple<int,int,int>>> g;\n\nconst ll INF = 0x3f3f3f3f3f3f3f3fL;\n\nvoid solve(){\n    int n,m,k; cin >> n >> m >> k;\n    g.resize(n);\n    \n    vt<tuple<int, int,int>> edges;\n    for(int i = 0; i < m; i++){\n        int x,y,w; cin >> x >> y >> w;\n        x--; y--;\n        g[x].pb({y,w, i + 1});\n        g[y].pb({x,w, i + 1});\n        edges.pb({x,y,w});\n    }\n\n    priority_queue<pair<int,int>, vt<pair<int,int>>, greater<pair<int,int>>> pq;\n    pq.push({0,0});\n    vt<int> dist(n + 1, INF);\n    dist[0] = 0;\n    while(!pq.empty()){\n        pair<int,int> top = pq.top(); pq.pop();\n        int dist_to_u = top.first;\n        int u = top.second;\n\n        if(dist[u] < dist_to_u) continue;\n\n        for(tuple<int,int,int>& vt: g[u]){\n            int v = get<0>(vt);\n            int cur_dist = get<1>(vt);\n            int idx = get<2>(vt);\n            if(dist[v] > dist_to_u + cur_dist){\n                dist[v] = dist_to_u + cur_dist;\n                pq.push({dist[v], v});\n            } \n        }\n    }\n\n    debug(dist);\n\n    // queue<int> q;\n    // q.push(0);\n    vt<int> res;\n    // unordered_set<int> visited;\n    // while(!q.empty()){\n    //     int u = q.front(); q.pop();\n    //     for(tuple<int,int,int>& vt: g[u]){\n    //         int edge = get<2>(vt);\n    //         int v = get<0>(vt);\n    //         int d = get<1>(vt);\n    //         if(visited.find(v) != visited.end()) continue;\n\n    //         int shortest_to_v = dist[v];\n    //         int shortest_to_u = dist[u];\n    //         if(shortest_to_u + d == shortest_to_v)\n    //             res.pb(edge);\n    //         visited.insert(v);\n    //         q.push(v);\n    //     }\n    // }\n\n    vt<int> not_used;\n    for(int i = 0; i < m; i++){\n        tuple<int, int,int> edge = edges[i];\n        int u = get<0>(edge);\n        int v = get<1>(edge);\n        int w = get<2>(edge);\n        int shortest_to_v = dist[v];\n        int shortest_to_u = dist[u];\n        if(shortest_to_u + w == shortest_to_v || shortest_to_v + w == shortest_to_u)\n            res.pb(i + 1);\n        else\n            not_used.pb(i + 1);\n    }\n\n    cout << k << endl;\n    for(int i =0 ; i < min((int)res.size(), k); i++){\n        cout << res[i] << \" \";\n    }\n    if(res.size() < k){\n        for(int i =0 ; i < res.size() - k; i++){\n            cout << not_used[i] << \" \";\n        }\n    }\n    cout << endl;\n\n}\n\nint main()\n{    \n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\n    solve();\n    \n    return 0;\n}\n\n"
}