{
    "id": 177638262,
    "contestId": 1076,
    "creationTimeSeconds": 1666525861,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "hanyoukuang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 24371200,
    "source": "// LUOGU_RID: 91237020\n#include <iostream>\r\n#include <queue>\r\n\r\n#define int long long\r\n\r\nusing namespace std;\r\nusing PII = pair<int, int>;\r\n\r\nconst int maxn = 3e5 + 10;\r\n\r\npriority_queue<PII, vector<PII>, greater<PII>> heap;\r\n\r\nstruct Edge {\r\n    int to, next, len;\r\n} a[maxn << 1];\r\n\r\nint n, m, k, tot, cnt;\r\nint dis[maxn];\r\nint pre[maxn];\r\nint ans[maxn];\r\nint head[maxn];\r\nbool vis[maxn];\r\n\r\ninline void add(const int &u, const int &v, const int &w) {\r\n    a[++k] = {v, pre[u], w};\r\n    pre[u] = k;\r\n}\r\n\r\nvoid dijkstra() {\r\n    // \u6ce8\u610f\u539f\u70b9\u7684\u9009\u53d6\r\n    fill(dis + 1, dis + 1 + n, 0x3f3f3f3f);\r\n    dis[1] = 0;\r\n    heap.push({0, 1});\r\n    while (!heap.empty()) {\r\n        PII tmp = heap.top();\r\n        heap.pop();\r\n        int d = tmp.first, p = tmp.second;\r\n        if (vis[p]) {\r\n            continue;\r\n        }\r\n        vis[p] = true;\r\n        for (int i = pre[p]; i; i = a[i].next) {\r\n            int to = a[i].to;\r\n            if (dis[to] >= d + a[i].len) {\r\n                dis[to] = d + a[i].len;\r\n                head[to] = i;\r\n                heap.push({dis[to], to});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid dfs(int x) {\r\n    for (int i = pre[x]; i; i = a[i].next) {\r\n        int to = a[i].to;\r\n        if (head[to] == i) {\r\n            tot++;\r\n            if (tot > cnt || tot == n) {\r\n                exit(0);\r\n            }\r\n            printf(\"%d \", (i + 1) >> 1);\r\n            dfs(to);\r\n        }\r\n    }\r\n}\r\n\r\nsigned main() {\r\n    scanf(\"%d%d%d\", &n, &m, &cnt);\r\n    int u, v, w;\r\n    for (int i = 1; i <= m; i++) {\r\n        scanf(\"%d%d%d\", &u, &v, &w);\r\n        add(u, v, w);\r\n        add(v, u, w);\r\n    }\r\n    dijkstra();\r\n    printf(\"%d\\n\", min(n - 1, k));\r\n    dfs(1);\r\n    return 0;\r\n}"
}