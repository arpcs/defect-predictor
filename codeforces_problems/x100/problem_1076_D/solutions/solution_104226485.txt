{
    "id": 104226485,
    "contestId": 1076,
    "creationTimeSeconds": 1610569625,
    "relativeTimeSeconds": 5225,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Tiagodfs"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1610564400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 2214,
    "memoryConsumedBytes": 130764800,
    "source": "#include <bits/stdc++.h>\n#define int long long\n#define ff first\n#define ss second\n#define ll long long\n#define ld long double\n#define pb push_back\n#define eb emplace_back\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define ti tuple<int, int, int>\n#define vi vector<int>\n#define vl vector<ll>\n#define vii vector<pii>\n#define sws ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\n#define endl '\\n'\n#define teto(a, b) (((a)+(b)-1)/(b))\n#define all(x) x.begin(), x.end()\n#define forn(i, n) for(int i = 0; i < (int)n; i++)\n#define forne(i, a, b) for(int i = a; i <= b; i++)\n#define dbg(msg, var) cerr << msg << \" \" << var << endl;\n \nusing namespace std;\n \nconst int MAX = 3e5+10;\nconst ll MOD = 1e9+7;\nconst int INF = 0x3f3f3f3f;\nconst ll LLINF = 0x3f3f3f3f3f3f3f3f;\nconst ld EPS = 1e-8;\nconst ld PI = acos(-1);\n\n// End Template //\n\nvector<vii> g(MAX+1, vii());\nvector<set<int>> tree(MAX+1, set<int>());\nvi d(MAX+1, LLINF);\npriority_queue< pii, vii, greater<pii> > fila;\nvii shortpath(MAX+1, pii());\n\nmap<ti, int> id;\nmap<pii, int> id2;\n\nvoid dijkstra(int k){\n    d[k]=0;\n    fila.push({0, k});\n\n    while(!fila.empty()){\n        int w=fila.top().ff, u=fila.top().ss;\n        fila.pop();\n        if(w>d[u]) continue;\n\n        for(auto [v, w]: g[u]){\n            if(d[v]>d[u]+w){\n                d[v]=d[u]+w;\n                shortpath[v] = {u, w};\n                fila.push({d[v], v});   \n            }\n        }\n    }\n}\n\nvi grau(MAX, 0);\n\nint32_t main()\n{sws;\n\n    int n, m, k, x, y, w;\n    cin >> n >> m >> k;\n\n    for(int i=0;i<m;i++){\n        cin >> x >> y >> w; x--;y--;\n        g[x].pb({y, w});\n        g[y].pb({x, w});\n        id[{x, y, w}]=i;\n        id[{y, x, w}]=i;\n    }\n\n    dijkstra(0);\n\n    set<int> ans;\n    for(int x=1;x<n;x++){\n        int y = shortpath[x].ff;\n        int w = shortpath[x].ss;\n        // cout << \"x, y = \" << x << \" \" << y << \" \" << w << endl;\n        tree[x].insert(y);\n        tree[y].insert(x);\n        grau[x]++; grau[y]++;\n\n        // assert(ans.find(id[{x, y, w}])==ans.end());\n\n        ans.insert(id[{x, y, w}]);\n        id2[{x, y}] = id[{x, y, w}];\n        id2[{y, x}] = id[{x, y, w}];\n    }\n\n    // cout << \"ans = \" << ans.size() << endl;\n    // for(auto a: ans)\n    //     cout << a+1 << \" \";\n    // cout << endl;\n\n    vi leaves;\n    for(int x=1;x<n;x++)\n        if(grau[x]==1)\n            leaves.pb(x);\n\n    int vet = n-1;\n    while(vet>k){\n        assert(!leaves.empty());\n        int x = leaves.back();\n        assert((int)tree[x].size()==1);\n        leaves.pop_back();\n        int y = *tree[x].begin();\n        grau[x]--;grau[y]--;\n        tree[y].erase(x);\n        tree[x].erase(y);\n        ans.erase(id2[{x, y}]);\n        if(grau[y]==1 and y!=0)\n            leaves.pb(y);\n        vet--;\n    }\n\n\n    cout << vet << endl;\n    for(auto a: ans)\n        cout << a+1 << \" \";\n    cout << endl;\n\n\n    return 0;\n}"
}