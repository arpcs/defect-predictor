{
    "id": 170040649,
    "contestId": 1076,
    "creationTimeSeconds": 1661762106,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "vidhansharma01"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CodeforcesGraph {\r\n\r\n    public static void main(String args[]){\r\n        InputReader in = new InputReader();\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        Task solver = new Task();\r\n        solver.solve(1, in, out);\r\n        out.close();\r\n    }\r\n    static int mod = (int)1e9+7;\r\n\r\n    static class Task{\r\n        static class Edge implements Comparable<Edge>{\r\n            int to; long cost; int id;\r\n            public Edge(int to, long cost, int id){\r\n                this.to = to;\r\n                this.cost = cost;\r\n                this.id = id;\r\n            }\r\n\r\n            @Override\r\n            public int compareTo(Edge o) {\r\n                //ascending - 1.2. 100\r\n                return this.cost - o.cost > 0 ? 1 : -1;\r\n            }\r\n        }\r\n        static List<Edge> adj[];\r\n        static long dist[];\r\n\r\n        public void solve(int T, InputReader sc, PrintWriter out) {\r\n            int n = sc.nextInt(), m= sc.nextInt(), k = sc.nextInt();\r\n            adj = new ArrayList[n];\r\n            for (int i = 0; i < n; i++)\r\n                adj[i] = new ArrayList<>();\r\n\r\n            dist = new long[n];\r\n            Arrays.fill(dist, Long.MAX_VALUE);\r\n            for (int i = 0; i < m; i++){\r\n                int x = sc.nextInt() - 1;\r\n                int y = sc.nextInt() - 1;\r\n                int w = sc.nextInt();\r\n                adj[x].add(new Edge(y, w, i));\r\n                adj[y].add(new Edge(x, w, i));\r\n            }\r\n\r\n            PriorityQueue<Edge> pq = new PriorityQueue<>();\r\n            pq.add(new Edge(0, 0, -1));\r\n            dist[0] = 0;\r\n\r\n            ArrayList<Integer> keepEdges = new ArrayList<>();\r\n            while (!pq.isEmpty()){\r\n                if (keepEdges.size() == k)\r\n                    break;\r\n\r\n                Edge cur = pq.poll();\r\n\r\n                if (cur.id >= 0){\r\n                    keepEdges.add(cur.id+1);\r\n                    if (keepEdges.size() == k)\r\n                        break;\r\n                }\r\n\r\n                for (Edge nxt: adj[cur.to]){\r\n                    if (dist[nxt.to] > nxt.cost + cur.cost){\r\n                        dist[nxt.to] = nxt.cost + cur.cost;\r\n                        pq.add(new Edge(nxt.to, dist[nxt.to], nxt.id));\r\n                    }\r\n                }\r\n            }\r\n\r\n            out.println(keepEdges.size());\r\n            for (int i = 0; i < keepEdges.size(); i++)\r\n                out.print(keepEdges.get(i) + \" \");\r\n\r\n        }\r\n    }\r\n\r\n    static class InputReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n        public InputReader() {\r\n            br = new BufferedReader(new\r\n                    InputStreamReader(System.in));\r\n        }\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n}"
}