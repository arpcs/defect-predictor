{
    "id": 111612994,
    "contestId": 1076,
    "creationTimeSeconds": 1617256500,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "u_yan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <algorithm>\r\n#include <cmath>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <map>\r\n#include <queue>\r\n#include <vector>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst ll N = 1e7 + 99;\r\nll mod = 1e9 + 7;\r\nconst ll maxn = 1e7;\r\nstruct edge {\r\n    ll v, w, id;\r\n    ll u;\r\n};\r\nbool cmp(edge a, edge b) {\r\n    return a.w < b.w;\r\n}\r\nll d[N]; \r\nstruct Node {\r\n    ll pos, dis;\r\n    bool operator<(Node rhs)const {\r\n        return rhs.dis < dis;\r\n    }\r\n};\r\npriority_queue<Node>pq;\r\nvector<edge> G[N];\r\nbool vis[N];\r\nbool ans[N];\r\nll pre[N];\r\nll Find(ll x) {return f[x] == x?x:f[x] = Find(f[x]);}\r\nvoid dij(ll s) {\r\n    memset(d, 0x3f, sizeof d);\r\n    d[s] = 0;\r\n    pq.push({s, d[s]});\r\n    memset(vis, 0, sizeof vis);\r\n    while (!pq.empty()){\r\n        auto now = pq.top();\r\n        pq.pop();\r\n        ll u = now.pos;\r\n        if (vis[u])continue;\r\n        vis[u] = 1;\r\n        for (auto e:G[u]) {\r\n            if (d[e.v] > d[u] + e.w ) {\r\n                d[e.v] = d[u] + e.w;\r\n                ans[pre[e.v]] = 0;\r\n                pre[e.v] = e.id;\r\n                \r\n                pq.push({e.v, d[e.v]});\r\n                ans[e.id] = 1;\r\n            } else if (d[e.v] == d[u] + e.w) {\r\n                if (W[pre[e.v]] > e.w) {\r\n                    ans[pre[e.v]] = 0;\r\n                    pre[e.v] = e.id;\r\n                    ans[pre[e.v]] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nll n, m, k;\r\nll sum = 0;\r\nvoid dfs(ll u) {\r\n    vis[u] = 1;\r\n    //cout << G[u].size() << endl;\r\n    for (auto e:G[u]) {\r\n        if (!vis[e.v] && d[e.v] == e.w + d[u]) {//cout << \"???\\n\";\r\n            dfs(e.v);\r\n            if (sum > k && ans[e.id]) {\r\n                sum--;\r\n                ans[e.id] = 0;\r\n                //cout << \"?????\\n0;\";\r\n            }\r\n        }\r\n    }\r\n}\r\nvoid solve() {\r\n    cin >> n >> m >> k;\r\n    for (ll i = 1; i <= m; i ++) {\r\n        ll u, v, w;\r\n        cin >> u >>v >> w;\r\n        G[u].push_back({v, w, i});\r\n        G[v].push_back({u, w, i});\r\n    }\r\n    ll s =  1;\r\n    //cin >> s;\r\n    dij(s);\r\n\r\n    for (ll i = 1; i <= m; i ++) {\r\n        if (ans[i])sum++;\r\n    }\r\n    //cout << sum << endl;\r\n    if (sum <= k) {\r\n        cout << min(sum, k) << endl;\r\n        for (ll i = 1;k >0 && i <= m; i ++) {\r\n            if (ans[i]) {\r\n                cout << i << \" \";\r\n                k--;\r\n            }\r\n        }   \r\n    } else {\r\n        cout << k << endl;memset(vis, 0, sizeof vis);\r\n\r\n        //cout << \"?\";\r\n        dfs(1);\r\n        for (ll i = 1; i <= m; i++) {\r\n            if (ans[i]) {\r\n                cout << i << \" \";\r\n                //k--;\r\n            }\r\n        }\r\n    }\r\n}\r\nsigned main() {\r\n    ll t = 1;\r\n    while (t--) solve();\r\n    return 0;\r\n}"
}