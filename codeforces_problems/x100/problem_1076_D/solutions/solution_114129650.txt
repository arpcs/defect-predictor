{
    "id": 114129650,
    "contestId": 1076,
    "creationTimeSeconds": 1619279499,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Konnyaku_LXZ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 390,
    "memoryConsumedBytes": 108953600,
    "source": "#include<iostream>\r\n#include<cstdio>\r\n#include<string>\r\n#include<cstring>\r\n#include<algorithm>\r\n#include<queue>\r\n#include<stack>\r\n#include<map>\r\n#include<vector>\r\n#include<set>\r\n#include<cmath>\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\nconst LL MAXN=1e6+50,INF=0x3f3f3f3f3f3f3f3f;\r\n\r\nstruct node{\r\n\tLL val;\r\n\tLL id;\r\n\t\r\n\tbool operator > (const node &x) const{return val>x.val;}\r\n};\r\n\r\nstruct edge{\r\n\tLL nxt;\r\n\tLL to;\r\n\tLL val;\r\n};\r\n\r\nedge e[MAXN<<1];\r\nLL head[MAXN],Cnte=0;\r\nLL N,M,K,dis[MAXN],from[MAXN],ans[MAXN],Ans=0;\r\npriority_queue<node,vector<node>,greater<node> > q;\r\n\r\nvoid adde(LL u,LL v,LL w){\r\n\t++Cnte;\r\n\te[Cnte].to=v;\r\n\te[Cnte].val=w;\r\n\te[Cnte].nxt=head[u];\r\n\thead[u]=Cnte;\r\n}\r\n\r\nvoid Dijkstra(){\r\n\tif(K==0) return;\r\n\twhile(!q.empty()) q.pop();\r\n\tfor(int i=1;i<=N;++i) dis[i]=INF;\r\n\tdis[1]=0;\r\n\tq.push((node){0,1});\r\n\twhile(!q.empty()){\r\n\t\tLL u=q.top().id,d=q.top().val;\r\n\t\tq.pop();\r\n\t\tif(d!=dis[u]) continue;\r\n\t\tfor(int i=head[u];i;i=e[i].nxt){\r\n\t\t\tLL v=e[i].to,w=e[i].val;\r\n\t\t\tif(dis[u]+w<dis[v]){\r\n\t\t\t\tdis[v]=dis[u]+w;\r\n\t\t\t\tq.push((node){dis[v],v});\r\n\t\t\t\tfrom[v]=i;\r\n\t\t\t}\r\n\t\t\tif(dis[u]+w==dis[v]&&w<e[from[v]].val) from[v]=i;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid dfs(LL u,LL father){\r\n\tif(Ans==K) return;\r\n\tfor(int i=head[u];i;i=e[i].nxt){\r\n\t\tif(Ans==K) return;\r\n\t\tLL v=e[i].to;\r\n\t\tif(v==father||from[v]!=i) continue;\r\n\t\tans[++Ans]=(from[v]+1)/2;\r\n\t\tif(Ans==K) return;\r\n\t\tdfs(v,u);\r\n\t}\r\n}\r\n\r\nvoid Init(){\r\n\tscanf(\"%lld%lld%lld\",&N,&M,&K);\r\n\tfor(int i=1;i<=M;++i){\r\n\t\tLL u,v,w;\r\n\t\tscanf(\"%lld%lld%lld\",&u,&v,&w);\r\n\t\tadde(u,v,w);adde(v,u,w);\r\n\t}\r\n}\r\n\r\nvoid Solve(){\r\n\tDijkstra();\r\n\tdfs(1,0);\r\n}\r\n\r\nvoid Print(){\r\n\tprintf(\"%lld\\n\",Ans);\r\n\tfor(int i=1;i<=Ans;++i) printf(\"%lld \",ans[i]);\r\n}\r\n\r\nint main()\r\n{\r\n\tInit();\r\n\tSolve();\r\n\tPrint();\r\n\treturn 0;\r\n}"
}