{
    "id": 141899901,
    "contestId": 1076,
    "creationTimeSeconds": 1641553389,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "pras7946"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "Java 11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class new1{\r\n\t\r\n\tpublic static void func(ArrayList<ArrayList<int[]>> aList, int x, int[] k, long[] dis, int[] vis, int[] ans) {\r\n\t\t\r\n\t\tlong dist = dis[x];\r\n\t\tvis[x] = 1;\r\n\t\t//if(k[0] <= 0) return ;\r\n\t\t//System.out.println(x + \" \" + k[0]);\r\n\t\tfor(int[] x1 : aList.get(x)) {\r\n\t\t\tlong exp = dist + x1[1];\r\n\t\t\tif(exp == dis[x1[0]] && vis[x1[0]] == 0 && k[0] > 0) {\r\n\t\t\t\tk[0] = k[0] - 1;\r\n\t\t\t\tans[x1[2]] = 1;\r\n\t\t\t\tfunc(aList, x1[0], k, dis, vis, ans);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\t\r\n\r\n\tpublic static void main(String[] args)  throws IOException{\r\n\t\t\r\n\t\t\r\n\t\tBufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\tFastReader s = new FastReader();\r\n\t\tint t = 1;//s.nextInt();\r\n\t\tfor(int z = 0; z < t; z++) {\r\n\t\t\tint n = s.nextInt();\r\n\t\t\tint m = s.nextInt();\r\n\t\t\tint k = s.nextInt();\r\n\t\t\tArrayList<ArrayList<int[]> > aList =  new ArrayList<ArrayList<int[]> >(n + 1);\t\t\r\n\t        for (int j = 1; j <= n + 1; j++) { \r\n\t            ArrayList<int[]> list = new ArrayList<>();\r\n\t            aList.add(list);\r\n\t        }\r\n\t\t\tfor(int j = 0; j < m; j ++) {\r\n\t\t\t\tint u = s.nextInt();\r\n\t\t\t\tint v = s.nextInt();\r\n\t\t\t\tint w = s.nextInt();\r\n\t\t\t\tint[] aa = {v, w, j + 1};\r\n\t\t\t\tint[] bb = {u, w, j + 1};\r\n\t\t\t\taList.get(u).add(aa);\r\n\t\t\t\taList.get(v).add(bb);\r\n\t\t\t}\r\n//\t\t\tif(k == 0) {\r\n//\t\t\t\tSystem.out.println(0); continue;\r\n//\t\t\t}\r\n\t\t\tPriorityQueue<long[]> pq = new PriorityQueue<long[]>(new Comparator<long[]>() {\r\n\t\t\t\tpublic int compare(long[] a, long[] b) {\r\n\t\t\t\t\treturn Long.compare(a[1], b[1]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tlong[] dis = new long[n + 1];\r\n\t\t\tArrays.fill(dis, Long.MAX_VALUE); dis[1] = 0;\r\n\t\t\tlong[] aa = {1, 0};\r\n\t\t\tpq.add(aa);\r\n\r\n\t\t\tint[] spt = new int[n + 1];\r\n\t\t\twhile(!pq.isEmpty()) {\r\n\t\t\t\tlong[] bb = pq.poll();\r\n\t\t\t\tif(spt[(int) bb[0]] == 0) {\r\n\t\t\t\t\tspt[(int) bb[0]] = 1;\r\n\t\t\t\t\tfor(int[] x : aList.get((int) bb[0])) {\r\n\t\t\t\t\t\tlong exp = x[1] + bb[1];\r\n\t\t\t\t\t\tif(exp < dis[x[0]]) {\r\n\t\t\t\t\t\t\tdis[x[0]] = exp;\r\n\t\t\t\t\t\t\tlong[] cc = {x[0], exp};\r\n\t\t\t\t\t\t\tpq.add(cc);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(k == 0) {\r\n\t\t\tSystem.out.println(0); continue;\r\n\t\t}\r\n\t\t\t//System.out.println(Arrays.toString(dis));\r\n\t\t\tint[] vis=  new int[n + 1];\r\n\t\t\tint[] ans = new int[m + 1];\r\n\t\t\tint[] kk = {k};\r\n\t\t\tfunc(aList, 1, kk, dis, vis, ans);\r\n\t\t\tint count = 0;\r\n\t\t\tfor(int i = 0; i < m + 1; i++) {\r\n\t\t\t\tif(ans[i] == 1) count++;\r\n\t\t\t}\r\n\t\t\toutput.write(count + \"\\n\");\r\n\t\t\tfor(int i = 0; i < m + 1; i++) {\r\n\t\t\t\tif(ans[i] == 1) output.write(i + \" \");\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t    output.flush();\r\n\t  }\r\n}\r\n\t\r\n\t \r\n\tclass FastReader {\r\n\t    BufferedReader br;\r\n\t    StringTokenizer st;\r\n\t    public FastReader() {\r\n\t        br = new BufferedReader(new InputStreamReader(System.in));\r\n\t    }\r\n\t    String next() {\r\n\t        while (st == null || !st.hasMoreElements()) {\r\n\t            try {\r\n\t                st = new StringTokenizer(br.readLine());\r\n\t            } catch (IOException e) {\r\n\t                e.printStackTrace();\r\n\t            }\r\n\t        }\r\n\t        return st.nextToken();\r\n\t    }\r\n\t \r\n\t    public int nextInt() {\r\n\t        return Integer.parseInt(next());\r\n\t    }\r\n\t \r\n\t    long nextLong() {\r\n\t        return Long.parseLong(next());\r\n\t    }\r\n\t \r\n\t    double nextDouble() {\r\n\t        return Double.parseDouble(next());\r\n\t    }\r\n\t \r\n\t    String nextLine() {\r\n\t        String str = \"\";\r\n\t        try {\r\n\t            str = br.readLine();\r\n\t        } catch (IOException e) {\r\n\t            e.printStackTrace();\r\n\t        }\r\n\t        return str;\r\n\t}}"
}