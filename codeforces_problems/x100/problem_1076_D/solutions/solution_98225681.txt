{
    "id": 98225681,
    "contestId": 1076,
    "creationTimeSeconds": 1605204315,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "cata.stan11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2560000,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <fstream>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nifstream in(\"test.in\");\r\n\r\nconst int dim = 3 * 1e5 + 5;\r\n\r\nstruct dada\r\n{\r\n    int x,y,cost,initial;\r\n};\r\n\r\nint n,m,k,r[dim],adancime[dim];\r\nvector<dada> muchii;\r\nvector<int> raman;\r\n\r\nint Find(int x)\r\n{\r\n    if (x == r[x])\r\n    {\r\n        return x;\r\n    }\r\n    r[x] = Find(r[x]);\r\n    return r[x];\r\n}\r\n\r\nvoid Union(int x,int y)\r\n{\r\n    int rx,ry;\r\n    rx = Find(x);\r\n    ry = Find(y);\r\n    if (adancime[rx] > adancime[ry])\r\n    {\r\n        r[ry] = rx;\r\n    }\r\n    else r[rx] = ry;\r\n    if (adancime[rx] == adancime[ry])\r\n    {\r\n        r[rx] = ry;\r\n        adancime[ry]++;\r\n    }\r\n}\r\n\r\nbool cmp(dada a,dada b)\r\n{\r\n    return (a.cost < b.cost);\r\n}\r\n\r\nint main()\r\n{\r\n    cin >> n >> m >> k;\r\n    for (int i=1; i<=n; i++) r[i] = i;\r\n\r\n    int x,y,c;\r\n    for (int i=1; i<=m; i++)\r\n    {\r\n        cin >> x >> y >> c;\r\n       //// cout << x << \" \" << y << \" \" << c << \"\\n\";\r\n        dada acm;\r\n\r\n        acm.x = x;\r\n        acm.y = y;\r\n        acm.cost = c;\r\n        acm.initial = i;\r\n\r\n        muchii.push_back(acm);\r\n    }\r\n    sort(muchii.begin(), muchii.end(), cmp);\r\n\r\n    int cnt = 0;\r\n    for (int i=0; i<m; i++)\r\n    {\r\n        if (cnt == k) break;\r\n        dada prrr = muchii[i];\r\n\r\n        int x = prrr.x;\r\n        int y = prrr.y;\r\n        int cost = prrr.cost;\r\n        if (Find(x) != Find(y))\r\n        {\r\n            Union(x,y);\r\n            cnt++;\r\n            raman.push_back(prrr.initial);\r\n        }\r\n\r\n    }\r\n    cout << raman.size() << \"\\n\";\r\n    for (auto x:raman)\r\n    {\r\n        cout << x << \" \";\r\n    }\r\n    return 0;\r\n}\r\n"
}