{
    "id": 181144927,
    "contestId": 1076,
    "creationTimeSeconds": 1668555892,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "The_Endd_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 561,
    "memoryConsumedBytes": 86937600,
    "source": "// LUOGU_RID: 94189363\n#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n#include<algorithm>\r\n#include<vector>\r\n#include<queue>\r\n#include<tuple>\r\n\r\n#define int long long\r\nusing namespace std;\r\ntypedef tuple<int, int, int> P;\r\ntypedef pair<int, int> p;\r\nconst int N = 3e5;\r\nint n, m, k;\r\nvector<P> e[N + 10];\r\nvector<p> tree[N + 10];\r\nint dis[N + 10];\r\nbool vis[N + 10];\r\nstruct Link\r\n{\r\n    int u, v, w;\r\n} link[N + 10];\r\n\r\nvoid dji()\r\n{\r\n    priority_queue<P, vector<P>, greater<P> > q;\r\n    memset(dis, 127, sizeof dis);\r\n    dis[1] = 0;\r\n    q.push(P(dis[1], 1, 0));\r\n    while (!q.empty())\r\n    {\r\n        auto [w, u, id] = q.top();\r\n        q.pop();\r\n        if (vis[u])\r\n            continue;\r\n        vis[u] = 1;\r\n        int uu = link[id].u, vv = link[id].v;\r\n        tree[uu].emplace_back(vv, id);\r\n        tree[vv].emplace_back(uu, id);\r\n        for (auto [v, w, id]: e[u])\r\n        {\r\n            if (dis[v] > dis[u] + w)\r\n            {\r\n                dis[v] = dis[u] + w;\r\n                q.push(P(dis[v], v, id));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid print(int u, int f)\r\n{\r\n    for (auto [v, id]: tree[u])\r\n    {\r\n        if (v == f)\r\n            continue;\r\n        printf(\"%lld \", id);\r\n        print(v, u);\r\n    }\r\n}\r\n\r\nint tot = 0;\r\n\r\nvoid dfs(int u, int f)\r\n{\r\n    if (tot >= k)\r\n        return;\r\n    for (auto [v, id]: tree[u])\r\n    {\r\n        if (v == f)\r\n            continue;\r\n        if (tot >= k)\r\n            return;\r\n        tot++;\r\n        printf(\"%lld \", id);\r\n        dfs(v, u);\r\n        if (tot >= k)\r\n            return;\r\n    }\r\n}\r\n\r\nsigned main()\r\n{\r\n    scanf(\"%lld%lld%lld\", &n, &m, &k);\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        int u, v, w;\r\n        scanf(\"%lld%lld%lld\", &u, &v, &w);\r\n        link[i] = {u, v, w};\r\n        e[u].emplace_back(v, w, i);\r\n        e[v].emplace_back(u, w, i);\r\n    }\r\n    dji();\r\n    if (k >= n - 1)\r\n    {\r\n        printf(\"%lld\\n\", n - 1);\r\n        print(1, 0);\r\n    }\r\n    else\r\n    {\r\n        printf(\"%lld\\n\", k);\r\n        dfs(1, 0);\r\n    }\r\n    return 0;\r\n}"
}