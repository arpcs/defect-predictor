{
    "id": 96761053,
    "contestId": 1076,
    "creationTimeSeconds": 1603702995,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Cris99"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 36864000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 3e5 + 5;\r\nconst long long INF = 1e18;\r\n\r\nlong long n, m, k, w;\r\nint x, y, no_edge, nr;\r\n\r\nvector< pair <int, pair <int, long long> > > graph[N];\r\nvector<long long> d(N, INF);\r\nvector<int> res;\r\nbool visited[N];\r\nvector<int> check(N, -1);\r\nset<pair<long long,int>> s;\r\n\r\nvoid dijkstra()\r\n{\r\n    s.insert(make_pair(0, 1));\r\n    d[1] = 0;\r\n    nr = 0;\r\n    while(!s.empty() && nr < k)\r\n    {\r\n        x = (*s.begin()).second;\r\n        s.erase(s.begin());\r\n        if(check[x] != -1)\r\n        {\r\n            nr++;\r\n            res.push_back(check[x]);\r\n        }\r\n        for(auto it : graph[x])\r\n        {\r\n            y = it.second.first;\r\n            w = it.second.second;\r\n            no_edge = it.first;\r\n            if(d[y] > d[x] + w)\r\n            {\r\n                s.erase(make_pair(d[y], y));\r\n                d[y] = d[x] + w;\r\n                check[y] = no_edge;\r\n                s.insert(make_pair(d[y], y));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    cin>>n>>m>>k;\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        cin>>x>>y>>w;\r\n        graph[x].push_back(make_pair(i, make_pair(y, w)));\r\n        graph[y].push_back(make_pair(i, make_pair(x, w)));\r\n    }\r\n    dijkstra();\r\n    cout<<res.size()<<endl;\r\n    for(auto it : res)\r\n        cout<<it<<\" \";\r\n    return 0;\r\n}\r\n"
}