{
    "id": 141459529,
    "contestId": 1076,
    "creationTimeSeconds": 1641193646,
    "relativeTimeSeconds": 5246,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "L1ngYu233"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1641188400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 65740800,
    "source": "#pragma GCC optimize(\"Ofast\")\n#include <bits/stdc++.h>\n#define rep(i,a,b) for(int i=a;i<=b;++i)\n#define per(i,a,b) for(int i=a;i>=b;--i)\n#define forr(i,a) for(auto i:a)\n#define all(a) begin(a),end(a)\n#define rall(a) rbegin(a),rend(a)\n#define pb emplace_back\n#define int long long\nusing namespace std;\nusing T = tuple<int, int, int>;\nconst int N = 3e5 + 10;\nvector<T> G[N];int d[N], del;\nvector<int> ret; unordered_map<int, int> m;\nvoid dijkstra(int k)\n{\n    memset(d, 0x7f, sizeof(d)); m.reserve(N);\n    priority_queue<T> q;q.emplace(0, k, 114514);\n    for (d[k] = 0;q.size();)\n    {\n        auto [y, x, ex] = q.top();q.pop();\n        if (d[x] == -y)\n            for (auto &[to, w, cnt] : G[x]) if (d[to] > d[x] + w)\n                d[to] = d[x] + w, q.emplace(-d[to], to, ex);\n    }\n}\nvoid dfs(int x)\n{\n    static bitset<N> v;\n    for (v[x] = 1;auto & [to, w, i] : G[x])\n        if (!v[to] && del && d[x] + w == d[to]) ret.push_back(i), del--, dfs(to);\n}\nsigned main()\n{\n    cin.tie(0)->sync_with_stdio(0);\n    int n, m; cin >> n >> m >> del;\n    for (int u, v, w, i = 1;cin >> u >> v >> w;++i) G[u].emplace_back(v, w, i), G[v].emplace_back(u, w, i);\n    dijkstra(1), dfs(1);\n    cout << ret.size() << '\\n'; forr(&i, ret) cout << i << ' ';\n    return 0;\n}"
}