{
    "id": 230963353,
    "contestId": 1076,
    "creationTimeSeconds": 1698925250,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "henry-tb"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 841,
    "memoryConsumedBytes": 48742400,
    "source": "// LUOGU_RID: 132971730\n#include <bits/stdc++.h>\r\n#define int long long\r\n#define rep(i, a, b) for (int i = (a); i <= (b); ++i)\r\n#define per(i, a, b) for (int i = (a); i >= (b); --i)\r\nusing namespace std;\r\nconst int N = 3e5 + 5;\r\nint n, m, k, dis[N], d[N], frmm[N];\r\nvector<tuple<int, int, int>> e[N]; // v, w, id\r\nbool deled[N], vis[N], frmed[N];\r\ntypedef pair<int, int> PII;\r\npriority_queue<PII, vector<PII>, greater<PII>> pq;\r\nint frm[N];\r\nsigned main() {\r\n    scanf(\"%lld%lld%lld\", &n, &m, &k);\r\n    printf(\"%lld\\n\", k);\r\n    k = m - k; // ned\r\n    if (!k) {\r\n        rep(i, 1, m) printf(\"%lld \", i);\r\n        return 0;\r\n    }\r\n    rep(i, 1, m) {\r\n        int u, v, w;\r\n        scanf(\"%lld%lld%lld\", &u, &v, &w);\r\n        e[u].emplace_back(v, w, i);\r\n        e[v].emplace_back(u, w, i);\r\n    }\r\n    memset(dis + 1, 0x3f, sizeof(int) * n);\r\n    dis[1] = 0; pq.emplace(0, 1);\r\n    while (!pq.empty()) {\r\n        int u = pq.top().second; pq.pop();\r\n        if (vis[u]) continue;\r\n        vis[u] = 1;\r\n        for (auto &[v, w, id]: e[u]) {\r\n            if (dis[v] > dis[u] + w) {\r\n                dis[v] = dis[u] + w;\r\n                if (frm[v]) {\r\n                    --d[frmm[v]];\r\n                    frmed[frm[v]] = 0;\r\n                }\r\n                frm[v] = id; frmm[v] = u;\r\n                pq.emplace(dis[v], v);\r\n                frmed[id] = 1;\r\n                ++d[u];\r\n            }\r\n        }\r\n    }\r\n    rep(i, 1, m) if (!frmed[i]) {\r\n        deled[i] = 1;\r\n        --k;\r\n        if (k == 0) {\r\n            rep(i, 1, m) if (!deled[i]) printf(\"%lld \", i);\r\n            return 0;\r\n        }\r\n    }\r\n    queue<int> q;\r\n    rep(i, 1, n) if (!d[i]) q.emplace(i);\r\n    while (k) {\r\n        int u = q.front(); q.pop();\r\n        --d[frmm[u]]; if (d[frmm[u]] == 0) q.emplace(frmm[u]);\r\n        deled[frm[u]] = 1; --k;\r\n    }\r\n    rep(i, 1, m) if (!deled[i]) printf(\"%lld \", i);\r\n    return 0;\r\n}"
}