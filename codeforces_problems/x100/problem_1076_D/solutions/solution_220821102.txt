{
    "id": 220821102,
    "contestId": 1076,
    "creationTimeSeconds": 1693208173,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Cy2anye2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 24166400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nconst ll N = 1e6 + 6;\r\n\r\nll n, m, k;\r\nstruct A {\r\n\tll d, w, id;\r\n\tbool operator<(const A& p) const {\r\n\t\treturn w > p.w;\r\n\t}\r\n};\r\nvector<A>edge[N];\r\npriority_queue<A>q;\r\nbitset<N>vis;\r\n\r\nvector<int>ans;\r\ninline void solve() {\r\n\tcin >> n >> m >> k;\r\n\tll x, y, z;\r\n\tfor (int i = 1; i <= m; i++) {\r\n\t\tcin >> x >> y >> z;\r\n\t\tedge[x].push_back({ y, z, i });\r\n\t\tedge[y].push_back({ x, z, i });\r\n\t}\r\n\t//\r\n\tvis[1] = 1;\r\n\tfor (auto e : edge[1]) q.push(e);\r\n\t//\r\n\twhile (!q.empty()) {\r\n\t\tauto ed = q.top();\r\n\t\tq.pop();\r\n\t\tvis[ed.d] = 1;\r\n\t\tans.push_back(ed.id);\r\n\t\tif (ans.size() == k) break;\r\n\t\tfor (auto e : edge[ed.d]) {\r\n\t\t\tif (vis[e.d]) continue;\r\n\t\t\tauto newe = e;\r\n\t\t\tnewe.w += ed.w;\r\n\t\t\tq.push(newe);\r\n\t\t}\r\n\t}\r\n\tcout << ans.size() << '\\n';\r\n\tfor (auto x : ans) cout << x << ' '; cout << '\\n';\r\n}\r\n\r\nint main() {\r\n\tios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n\r\n\tint t = 1;\r\n\t//cin >> t;\r\n\tfor (int i = 1; i <= t; i++) {\r\n\t\tsolve();\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n/*\r\n\r\n\r\n\r\n*/"
}