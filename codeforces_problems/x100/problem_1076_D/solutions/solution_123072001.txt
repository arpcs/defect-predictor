{
    "id": 123072001,
    "contestId": 1076,
    "creationTimeSeconds": 1626756806,
    "relativeTimeSeconds": 1406,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Zoezhangjz"
            },
            {
                "handle": "Homuraqwq"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 87313,
        "teamName": "qwq",
        "ghost": false,
        "startTimeSeconds": 1626755400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 1138,
    "memoryConsumedBytes": 30924800,
    "source": "#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\n#include <vector>\n#include <queue>\nusing namespace std;\nconst int N = 3e5 + 10;\n\nint n, m, k;\nint dep[N], dis[N];\n\nbool vis[N];\n\nstruct Node {\n    int to, w;\n    Node(int to, int w) : to(to), w(w) {}\n    bool operator < (const Node &a) const {\n        return w > a.w;\n    }\n};\n\nstruct use {\n    int to, w, id;\n    use(int to, int w, int id) : to(to), w(w), id(id) {}\n};\n\nvector <use> adj[N];\n\nvoid dij(int s) {\n    priority_queue <Node> q;\n    memset(vis, 0, sizeof(vis));\n    memset(dis, 0x3f, sizeof(dis));\n    dis[s] = 0;\n    q.push(Node(s, 0));\n    while(q.size()) {\n        int u = q.top().to;\n        q.pop();\n        if(vis[u])\n            continue;\n        vis[u] = 1;\n        for(int i = 0; i < adj[u].size(); i++) {\n            int v = adj[u][i].to;\n            if(dis[v] > dis[u] + adj[u][i].w)   \n                dis[v] = dis[u] + adj[u][i].w, q.push(Node(v, dis[v]));\n        }\n    }\n}\n\nvoid dfs(int u, int fa) {\n    for(int i = 0; i < adj[u].size(); i++) {\n        int v = adj[u][i].to;\n        if(v != u and dis[u] + adj[u][i].w == dis[v] and k) {\n            cout << adj[u][i].id << \" \";\n            k--;\n            dfs(v, u);\n        }\n    }\n}\nint main() {\n    cin >> n >> m >> k;\n    for(int i = 1; i <= m; i++) {\n        int a, b, c;\n        cin >> a >> b >> c;\n        adj[a].push_back(use(b, c, i));\n        adj[b].push_back(use(a, c, i));\n    }\n    dij(1);\n    cout << min(n - 1, k) << endl;\n    dfs(1, 0);\n    return 0;\n}"
}