{
    "id": 118522777,
    "contestId": 1076,
    "creationTimeSeconds": 1622908379,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "birt"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 23040000,
    "source": "#include <iostream>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <queue>\r\n\r\n#define x first\r\n#define y second\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\ntypedef pair<pair<LL,int>,int> PIII;\r\n\r\nconst int N = 3e5 + 10, M = 2 * N;\r\n\r\nint n, m, k;\r\nint h[N], e[M], ne[M], w[M], idx;\r\nLL dist[N];\r\nbool st[N];\r\nint res[M], cnt;\r\n\r\nvoid add(int a, int b, int c)  // \u6dfb\u52a0\u4e00\u6761\u8fb9a->b\uff0c\u8fb9\u6743\u4e3ac\r\n{\r\n    e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx ++ ;\r\n}\r\nvoid dijkstra()  // \u6c421\u53f7\u70b9\u5230n\u53f7\u70b9\u7684\u6700\u77ed\u8def\u8ddd\u79bb\r\n{\r\n    memset(dist, 0x3f, sizeof dist);\r\n    dist[1] = 0;\r\n    priority_queue<PIII, vector<PIII>, greater<PIII>> heap;\r\n    heap.push({{0, 1}, -1});\r\n\r\n    while (heap.size())\r\n    {\r\n        auto t = heap.top();\r\n        heap.pop();\r\n\r\n        int ver = t.x.y, distance = t.x.x;\r\n        int edg = t.y;\r\n\r\n        if (st[ver]) continue;\r\n        st[ver] = true;\r\n        res[cnt ++ ] = edg;\r\n\r\n        for (int i = h[ver]; i != -1; i = ne[i])\r\n        {\r\n            int j = e[i];\r\n            if (dist[j] > dist[ver] + w[i])\r\n            {\r\n                dist[j] = dist[ver] + w[i];\r\n                heap.push({{dist[j], j}, i});\r\n            }\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    memset(h, -1, sizeof h);\r\n    scanf(\"%d%d%d\", &n, &m, &k);\r\n    while (m -- )\r\n    {\r\n        int a, b, c;\r\n        scanf(\"%d%d%d\", &a, &b, &c);\r\n        add(a, b, c);\r\n        add(b, a, c);\r\n    }\r\n    dijkstra();\r\n    cout << min(cnt - 1, k) << endl;\r\n    for (int i = 1; i < min(cnt, k + 1); ++ i) cout << res[i] / 2 + 1 << \" \";\r\n    return 0;\r\n}"
}