{
    "id": 112212279,
    "contestId": 1076,
    "creationTimeSeconds": 1617789057,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Jesselrj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 30924800,
    "source": "#include <bits/stdc++.h>\r\n#define Maxn 300010\r\nusing namespace std;\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nstruct edge {\r\n\tlong long val;\r\n\tint to, nxt;\r\n} e[Maxn << 1];\r\nint head[Maxn << 1], cnt;\r\n\r\nvoid add(int x, int y, long long v) {\r\n\te[++cnt] = {v, y, head[x]}, head[x] = cnt;\r\n}\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nstruct EDGE {\r\n\tlong long val;\r\n\tint x;\r\n\tbool operator < (EDGE a) const {\r\n\t\treturn val > a.val;\r\n\t}\r\n};\r\nint n, m, k, s;\r\nlong long dis[Maxn];\r\nint pre[Maxn];\r\npriority_queue<EDGE> q;\r\n\r\nvoid dij(int s) {\r\n\tmemset(dis, 0x3f, sizeof dis);\r\n\tdis[s] = 0;\r\n\tq.push({0, s});\r\n\twhile (!q.empty()) {\r\n\t\tEDGE tmp = q.top();\r\n\t\tint x = q.top().x;\r\n\t\tq.pop();\r\n\t\tif (tmp.val > dis[x])\r\n\t\t\tcontinue;\r\n\t\tfor (int i = head[x], y; i; i = e[i].nxt) {\r\n\t\t\ty = e[i].to;\r\n\t\t\tif (dis[y] > dis[x] + e[i].val) {\r\n\t\t\t\tdis[y] = dis[x] + e[i].val;\r\n\t\t\t\tpre[y] = i;\r\n\t\t\t\tq.push({dis[y], y});\r\n\t\t\t}\r\n\t\t\tif (dis[y] == dis[x] + e[i].val && e[i].val < e[pre[y]].val)\r\n\t\t\t\tpre[y] = i;\r\n\t\t}\r\n\t}\r\n}\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nbool vise[Maxn << 1], visp[Maxn];\r\nvoid init() {\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tif (i != s)\r\n\t\t\tvise[pre[i]] = 1;\r\n}\r\n\r\nvoid dfs(int x, int fa) {\r\n\tif (!k) exit(0);\r\n\tvisp[x] = 1;\r\n\tfor (int i = head[x], y; i; i = e[i].nxt) {\r\n\t\ty = e[i].to;\r\n\t\tif (y != fa && vise[i] && !visp[y]) {\r\n\t\t\tprintf(\"%d \", (i + 1) >> 1);\r\n\t\t\tk--;\r\n\t\t\tdfs(y, x);\r\n\t\t}\r\n\t}\r\n}\r\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nint main() {\r\n\tscanf(\"%d%d%d\", &n, &m, &k);\r\n\tlong long v;\r\n\tfor (int i = 1, x, y; i <= m; i++) {\r\n\t\tscanf(\"%d%d%lld\", &x, &y, &v);\r\n\t\tadd(x, y, v);\r\n\t\tadd(y, x, v);\r\n\t}\r\n\ts = 1;\r\n\tdij(s);\r\n\tinit();\r\n\tprintf(\"%d\\n\", min(n - 1, k));\r\n\tdfs(s, -1);\r\n\treturn 0;\r\n}",
    "suggested_categories": [
        "c++ programming",
        "graph algorithms",
        "priority queue",
        "code quality",
        "data structures",
        "algorithm optimization",
        "graph theory",
        "depth-first search",
        "dijkstra's algorithm",
        "software design",
        "code efficiency",
        "input/output handling",
        "code organization",
        "error handling",
        "binary heap",
        "optimized algorithms",
        "topological sort",
        "memory management",
        "algorithm complexity",
        "programming best practices"
    ]
}