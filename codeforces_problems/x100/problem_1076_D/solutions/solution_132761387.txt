{
    "id": 132761387,
    "contestId": 1076,
    "creationTimeSeconds": 1634976331,
    "relativeTimeSeconds": 1531,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "PrimeX"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1634974800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 1996,
    "memoryConsumedBytes": 74137600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define D(x) cerr<<__LINE__<<\" : \" << #x <<\" -> \" << x << endl\r\n#define int long long\r\n#define inf 1e9\r\n#define PPP  pair < int, int >\r\n\r\nconst int MAX = 2e5 + 7;\r\nint n, m, total, k;\r\nvector<int> edge[MAX+5], cost[MAX+5], bedge[MAX], bcost[MAX];\r\nint dis[MAX+5], vis[MAX+5], par[MAX];\r\n\r\nmap < PPP, bool > mp;\r\n\r\nstruct Node {\r\n    int x, d;\r\n} ND;\r\n\r\nbool operator < (Node A, Node B) {\r\n    if(A.d< B.d)\r\n        return false;\r\n    return true;\r\n}\r\n\r\nvoid dijkstra(int src) {\r\n    memset(vis,0, sizeof vis);\r\n    for(int i = 0; i<= n; i++)\r\n        dis[i] = inf;\r\n    dis[src] = 0;\r\n    ND.x = src;\r\n    ND.d = dis[src];\r\n    priority_queue<Node> q;\r\n    q.push(ND);\r\n    while(!q.empty()) {\r\n        Node u;\r\n        u = q.top();\r\n        q.pop();\r\n        if(vis[u.x]) continue;\r\n        vis[u.x] = 1;\r\n        for(int i = 0; i< edge[u.x].size(); i++) {\r\n            Node v;\r\n            v.x = edge[u.x][i];\r\n            v.d = cost[u.x][i];\r\n            if(dis[v.x] > v.d + u.d) {\r\n                par[v.x] = u.x;\r\n                dis[v.x] = v.d + u.d;\r\n                q.push({v.x, dis[v.x]});\r\n            }\r\n        }\r\n    }\r\n\r\n    for(int i = 2; i <= n; i++) {\r\n        bedge[par[i]].push_back(i);\r\n        bedge[i].push_back(par[i]);\r\n        bcost[par[i]].push_back(dis[i]);\r\n        bcost[i].push_back(dis[i]);\r\n    }\r\n\r\n    memset(vis,0,sizeof vis);\r\n    queue < int > Q;\r\n    Q.push(1);\r\n    vis[1] = 1;\r\n    while(!Q.empty()) {\r\n        int u = Q.front();\r\n        Q.pop();\r\n        for(int v: bedge[u]) {\r\n            if(!vis[v]) {\r\n                mp[ {u,v}] = 1;\r\n                mp[ {v,u}] = 1;\r\n                k--;\r\n                if(!k)\r\n                    return;\r\n                vis[v] = 1;\r\n\r\n                Q.push(v);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\nsigned main() {\r\n    cin >> n >> m >> k;\r\n    vector < PPP > EDGE;\r\n    while(m--) {\r\n        int u, v, w;\r\n        cin>>u>>v>>w;\r\n        edge[u].push_back(v);\r\n        edge[v].push_back(u);\r\n        cost[u].push_back(w);\r\n        cost[v].push_back(w);\r\n        EDGE.push_back({u,v});\r\n    }\r\n    if(k == 0) {\r\n        cout << 0 << \"\\n\";\r\n        return 0;\r\n    }\r\n    dijkstra(1);\r\n    vector < int > ans;\r\n    int idx = 1;\r\n    for(auto x: EDGE) {\r\n        if(mp[x])\r\n            ans.push_back(idx);\r\n        else if(k)\r\n            ans.push_back(idx),k--;\r\n        idx++;\r\n    }\r\n    cout << ans.size() << \"\\n\";\r\n    for(int x: ans)\r\n        cout << x << \" \";\r\n\r\n    return 0;\r\n}\r\n\r\n"
}