{
    "id": 96965016,
    "contestId": 1076,
    "creationTimeSeconds": 1603869240,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "luogu_bot4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 35430400,
    "source": "/***********i**************************************************************\n\t> File Nawdme: CF1076D.cpp\n\t> Author: YaliCai\n\t> Mail: [email\u00a0protected]\n\t> Created Time: 2020\u5e7410\u670828\u65e5 \u661f\u671f\u4e09 14\u65f612\u520641\u79d2\n ************************************************************************/\n\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define int long long\n\nconst int kMaxN = 300000 + 5;\nconst int kMaxM = 600000 + 5;\n\nint n , m , k , tot = 1 , num , ans[kMaxN] , dis[kMaxN] , pre[kMaxN] , HeadL[kMaxN];\n\nbool vis[kMaxN];\n\nstruct Edge{\n\tint from;\n\tint to;\n\tint val;\n\tint nxt;\n};\n\nEdge edge[kMaxM];\n\ninline void AddLine(int x , int y , int z){\n\ttot++;\n\tedge[tot].from = x;\n\tedge[tot].to = y;\n\tedge[tot].val = z;\n\tedge[tot].nxt = HeadL[x];\n\tHeadL[x] = tot;\n\treturn ;\n}\n\nstruct Node{\n\tint now;\n\tint val;\n\tbool operator <(const Node &x) const\n\t{\n\t\treturn val > x.val;\n\t}\n};\n\ninline void Dijkstra(){\n\tpriority_queue <Node> Q;\n\tmemset(dis , 0x3f , sizeof(dis));\n\tdis[1] = 0;\n\tNode st;\n\tst.now = 1;\n\tst.val = 0;\n\tQ.push(st);\n\twhile(Q.empty() == false && num < k){\n\t\tNode p = Q.top();\n\t\tQ.pop();\n\t\tif(vis[p.now] == true){\n\t\t\tcontinue;\n\t\t}\n\t\tvis[p.now] = true;\n\t\tif(p.now ^ 1){\n\t\t\tnum++;\n\t\t\tans[num] = pre[p.now] / 2;\n\t\t}\n\t\tint i = HeadL[p.now];\n\t\twhile(i != 0){\n\t\t\tif(dis[p.now] + edge[i].val < dis[edge[i].to]){\n\t\t\t\tdis[edge[i].to] = dis[p.now] + edge[i].val;\n\t\t\t\tNode New;\n\t\t\t\tNew.now = edge[i].to;\n\t\t\t\tNew.val = dis[edge[i].to];\n\t\t\t\tQ.push(New);\n\t\t\t\tpre[edge[i].to] = i;\n\t\t\t}\n\t\t\ti = edge[i].nxt;\n\t\t}\n\t}\n\treturn ;\n}\n\ninline int read(){\n    int s = 0 , w = 1;\n    char ch = getchar();\n    while((ch < '0') || (ch > '9')){\n        if(ch == '-'){\n            w = -1;\n        }\n        ch = getchar();\n    }\n    while((ch >= '0') && (ch <= '9')){\n        s = (s << 3) + (s << 1) + ch - '0';\n        ch = getchar();\n    }\n    return s * w;\n}\n\ninline void write(int x){\n    if(x < 0){\n        putchar('-');\n        x = -x;\n    }\n    if(x > 9){\n        write(x / 10);\n\t}\n    return ;\n}\n\nsigned main(){\n\n\tn = read();\n\tm = read();\n\tk = read();\n\n\tfor(int i = 1 ; i <= m ; i++ ){\n\t\tint x , y , z;\n\t\tx = read();\n\t\ty = read();\n\t\tz = read();\n\t\tAddLine(x , y , z);\n\t\tAddLine(y , x , z);\n\t}\n\n\tDijkstra();\n\n\tprintf(\"%d\\n\" , num);\n\n\tfor(int i = 1 ; i <= num ; i++ ){\n\t\tprintf(\"%d \" , ans[i]);\n\t}\n\n    return 0;\n}"
}