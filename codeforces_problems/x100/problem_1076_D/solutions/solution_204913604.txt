{
    "id": 204913604,
    "contestId": 1076,
    "creationTimeSeconds": 1683428070,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "No.name11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 1325,
    "memoryConsumedBytes": 114380800,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\n#define ll long long\r\n#define endl '\\n'\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\ntemplate<typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\nconst int N = 2e6+7, P1 = 31, P2 = 37, mod= 1e9 + 7;\r\n\r\nint mul(int a, int b) {\r\n    return (1LL * a * b) % mod;\r\n}\r\n\r\nint add(int a, int b) {\r\n    a = (a + mod) % mod;\r\n    b = (b + mod) % mod;\r\n    return (a + b) % mod;\r\n}\r\n\r\nint fp(int b, int p) {\r\n    if (b == 1 or p == 0)\r\n        return 1;\r\n\r\n    int ret = fp(b, p >> 1);\r\n    ret = mul(ret, ret);\r\n\r\n    if (p & 1)\r\n        ret = mul(ret, b);\r\n\r\n    return ret;\r\n}\r\n\r\nll modInv(ll n) {\r\n    return fp(n, mod - 2);\r\n}\r\n\r\nll fact[N], inv[N];\r\n\r\nvoid pre() {\r\n    fact[0] = inv[0] = 1;\r\n    for (ll i = 1; i < N; i++)\r\n        fact[i] = (fact[i - 1] * i) % mod, inv[i] = fp(fact[i], mod - 2);\r\n}\r\n\r\nll nCr(ll n, ll r) {\r\n    return ((fact[n] * inv[r]) % mod * inv[n - r]) % mod;\r\n}\r\n\r\nll nPr(ll n, ll r) {\r\n    return ((fact[n] * inv[n - r])) % mod;\r\n}\r\n#define int ll\r\nvector<pair<int,int>> adj[N];\r\nvoid doWork() {\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    map<pair<int, int>, int> mp;\r\n    for (int i = 0; i < m; ++i) {\r\n        int u, v, w;\r\n        cin >> u >> v >> w;\r\n        adj[u].push_back({v, w});\r\n        adj[v].push_back({u, w});\r\n        mp[{u, v}] = i;\r\n        mp[{v, u}] = i;\r\n    }\r\n    int dist[n + 1], par[n + 1];\r\n    for (int i = 0; i <= n; ++i) {\r\n        dist[i] = 1e17;\r\n    }\r\n    priority_queue<pair<int, int>> pq;\r\n    pq.push({0, 1});\r\n    par[1] = 1;\r\n    dist[1] = 0;\r\n    set<int> st;\r\n    while (pq.size())\r\n    {\r\n        int node  = pq.top().second;\r\n        int cost = -pq.top().first;\r\n        pq.pop();\r\n        if (cost!=dist[node])\r\n        {\r\n            continue;\r\n        }\r\n        if(node != 1)\r\n            st.insert(mp[{node,par[node]}]);\r\n        if (st.size() == k)\r\n            break;\r\n        for(auto &[ch,w] : adj[node])\r\n        {\r\n            if ( cost+w < dist[ch])\r\n            {\r\n                dist[ch] = cost+w;\r\n                pq.push({-dist[ch],ch});\r\n                par[ch] = node;\r\n            }\r\n        }\r\n    }\r\n    cout << st.size() << endl;\r\n    for(auto &i : st)\r\n        cout << i+1 << \" \";\r\n}\r\n\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(false);\r\n    cout.tie(nullptr);\r\n    cin.tie(nullptr);\r\n//    freopen(\"bisector.in\",\"r\",stdin);\r\n//    freopen(\"bisector.out\",\"w\",stdout);\r\n    int t = 1;\r\n    // cout << primes.size() << endl;\r\n   // cin >> t;\r\n    while (t--) {\r\n        doWork();\r\n    }\r\n    return 0;\r\n}"
}