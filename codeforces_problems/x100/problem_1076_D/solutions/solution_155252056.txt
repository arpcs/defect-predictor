{
    "id": 155252056,
    "contestId": 1076,
    "creationTimeSeconds": 1651200635,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "SF-Manman"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 1154,
    "memoryConsumedBytes": 81100800,
    "source": "#include <bits/stdc++.h>\r\n// #include \"atcoder/all\"\r\n// using namespace atcoder;\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int MOD1000000007 = 1000000007;\r\nconst int MOD998244353 = 998244353;\r\nvoid solve();\r\nint main()\r\n{\r\n\r\n#ifdef LOCAL\r\n    freopen(\"in.txt\", \"r\", stdin);\r\n#endif\r\n    // freopen(\"input.txt\", \"r\", stdin);\r\n    // freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    solve();\r\n#ifdef LOCAL\r\n    printf(\"\\nTime elapsed: %.2fs.\\n\", 1.0 * clock() / CLOCKS_PER_SEC);\r\n#endif\r\n    return 0;\r\n}\r\nconst int MAXN = 3e5 + 5;\r\nint n, m, k;\r\nint u, v, w;\r\nvector<vector<int>> g[MAXN];\r\nvector<int> res;\r\n\r\nvector<int> es(MAXN, 0), vis(MAXN, 0);\r\n\r\nvoid solve()\r\n{\r\n    scanf(\"%d%d%d\", &n, &m, &k);\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        scanf(\"%d%d%d\", &u, &v, &w);\r\n        g[u].push_back({v, w, i});\r\n        g[v].push_back({u, w, i});\r\n    }\r\n\r\n    priority_queue<vector<ll>, vector<vector<ll>>, greater<vector<ll>>> pq;\r\n    pq.push({0, 1, -1});\r\n\r\n    while (pq.size())\r\n    {\r\n        auto it = pq.top();\r\n        ll cost = it[0], u = it[1], id = it[2];\r\n        pq.pop();\r\n        if (vis[u])\r\n            continue;\r\n        vis[u] = 1;\r\n        res.push_back(id);\r\n        for (auto it : g[u])\r\n        {\r\n            int v = it[0], w = it[1], eid = it[2];\r\n            if (vis[v])\r\n                continue;\r\n            pq.push({cost + w, v, eid});\r\n        }\r\n    }\r\n    res.erase(res.begin());\r\n    while (res.size() > k)\r\n    {\r\n        res.pop_back();\r\n    }\r\n    // sort(res.begin(), res.end());\r\n    printf(\"%d\\n\", int(res.size()));\r\n    for (auto i : res)\r\n    {\r\n        printf(\"%d \", i);\r\n    }\r\n}"
}