{
    "id": 192852887,
    "contestId": 1076,
    "creationTimeSeconds": 1675942911,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Dewansh05"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 6144000,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <functional>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag,\r\n             tree_order_statistics_node_update>\r\n    ordered_set;\r\ntypedef long long int lli;\r\n#define rep(i, a, n) for (lli i = a; i < n; i++)\r\n#define rrep(i, n, a) for (lli i = n; i >= a; i--)\r\n#define vlli vector<lli>\r\n#define mii map<lli, lli>\r\n#define umii unordered_map<lli, lli>\r\n#define plii pair<lli, lli>\r\nlli mod = 1e9 + 7;\r\nvoid fastio()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n}\r\nconst int maxn = 3 * 1e5 + 1;\r\nint n, m, k;\r\nvector<vector<pair<plii, lli>>> arr(maxn);\r\nlli dis[maxn];\r\nvlli ans;\r\nvoid dijkstra()\r\n{\r\n    rep(i, 1, n + 1)\r\n    {\r\n        dis[i] = INT64_MAX;\r\n    }\r\n    dis[1] = 0;\r\n    priority_queue<pair<lli, lli>, vector<pair<lli, lli>>, greater<pair<lli, lli>>> q;\r\n    map<int, int> mp;\r\n    q.push({0, 1});\r\n    lli cnt = 0;\r\n    while (q.empty() == false && cnt < k)\r\n    {\r\n        int cur = q.top().second;\r\n        int curdis = q.top().first;\r\n        q.pop();\r\n        if (mp.find(cur) != mp.end())\r\n        {\r\n            ans.push_back(mp[cur]);\r\n            cnt++;\r\n        }\r\n        if (curdis > dis[cur])\r\n        {\r\n            continue;\r\n        }\r\n        for (auto child : arr[cur])\r\n        {\r\n            if (dis[child.first.first] > curdis + child.first.second)\r\n            {\r\n                dis[child.first.first] = curdis + child.first.second;\r\n                q.push({dis[child.first.first], child.first.first});\r\n                mp[child.first.first] = child.second;\r\n            }\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    fastio();\r\n    cin >> n >> m >> k;\r\n    vector<vector<lli>> ed;\r\n    rep(i, 0, m)\r\n    {\r\n        lli p, q, w;\r\n        cin >> p >> q >> w;\r\n        arr[p].push_back({{q, w}, i + 1});\r\n        arr[q].push_back({{p, w}, i + 1});\r\n    }\r\n    dijkstra();\r\n    cout << ans.size() << \"\\n\";\r\n    for (auto ele : ans)\r\n        cout << ele << \" \";\r\n    return 0;\r\n}\r\n"
}