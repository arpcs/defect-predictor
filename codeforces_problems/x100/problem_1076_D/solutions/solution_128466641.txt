{
    "id": 128466641,
    "contestId": 1076,
    "creationTimeSeconds": 1631335086,
    "relativeTimeSeconds": 7086,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "Ankit_132"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1631328000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 1278,
    "memoryConsumedBytes": 58880000,
    "source": "#pragma GCC optimize(\"O2\")\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll     long long\r\n#define test   int tt; cin>>tt; while(tt--)\r\n#define ff     first\r\n#define ss     second\r\n#define pb     push_back\r\n#define ppb    pop_back\r\n#define pf     push_front\r\n#define ppf    pop_front\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    int n, m, k;\r\n    cin>>n>>m>>k;\r\n\r\n    vector<vector<pair<int, int>>> graph(n);\r\n    int a, b, c;\r\n\r\n    vector<tuple<int, int, int>> edges;\r\n\r\n    for(int i=0; i<m; i++)\r\n    {\r\n        cin>>a>>b>>c;\r\n        a--, b--;\r\n\r\n        graph[a].pb({b, c});\r\n        graph[b].pb({a, c});\r\n\r\n        edges.pb({a, b, c});\r\n    }\r\n\r\n    int done[n]={0}, vis[n], selected=0;\r\n    set<pair<int, int>> sp;\r\n    map<int, tuple<int, int, int>> corresponding_edge1, corresponding_edge2;\r\n    map<tuple<int, int, int>, int> edge_taken;\r\n\r\n    fill(vis, vis+n, -1);\r\n\r\n    vis[0]=0;\r\n\r\n    sp.insert({0, 0});\r\n\r\n    while(selected<=k && sp.size()>0)\r\n    {\r\n        auto x = *sp.begin();\r\n        sp.erase(sp.begin());\r\n\r\n        done[x.ss]=1;\r\n        selected++;\r\n\r\n        if(x.ss!=0)\r\n        {\r\n            auto edge = corresponding_edge1[x.ss];\r\n            edge_taken[edge] = 1;\r\n\r\n            edge = corresponding_edge2[x.ss];\r\n            edge_taken[edge] = 1;\r\n        }\r\n\r\n        for(auto [v, c]: graph[x.ss])\r\n        {\r\n            if(!done[v])\r\n            {\r\n                int cost=c+x.ff;\r\n\r\n                if(vis[v]==-1)\r\n                {\r\n                    vis[v]=cost;\r\n                    sp.insert({cost, v});\r\n\r\n                    corresponding_edge1[v]={x.ss, v, c};\r\n                    corresponding_edge2[v]={v, x.ss, c};\r\n                }\r\n                else if(vis[v]>cost)\r\n                {\r\n                    sp.erase(sp.find({vis[v], v}));\r\n\r\n                    vis[v]=cost;\r\n                    sp.insert({cost, v});\r\n\r\n                    corresponding_edge1[v]={x.ss, v, c};\r\n                    corresponding_edge2[v]={v, x.ss, c};\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    vector<int> ans;\r\n    for(int i=0; i<m && ans.size()<k; i++)\r\n    {\r\n        if(edge_taken[edges[i]])\r\n        {\r\n            ans.pb(i+1);\r\n        }\r\n    }\r\n\r\n    cout<<ans.size()<<\"\\n\";\r\n\r\n    for(auto e: ans)\r\n        cout<<e<<\" \";\r\n    cout<<\"\\n\";\r\n}\r\n"
}