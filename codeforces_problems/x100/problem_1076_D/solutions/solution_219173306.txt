{
    "id": 219173306,
    "contestId": 1076,
    "creationTimeSeconds": 1692232294,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "luogu_bot2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 795,
    "memoryConsumedBytes": 25702400,
    "source": "// LUOGU_RID: 121315506\n#include <bits/stdc++.h>\r\n#define LL long long\r\nusing namespace std;\r\nconst int maxn = 3e5 + 6;\r\n\r\nstruct Node {\r\n\tint to, next, id;\r\n\tLL w;\r\n} edge[maxn << 1];\r\n\r\nstruct Point {\r\n\tint p, f;\r\n\tLL d;\r\n\tbool operator <(const Point &x)const {\r\n\t\treturn d > x. d;\r\n\t}\r\n};\r\nint n, m, k, tot;\r\nint Head[maxn];\r\nLL dis[maxn];\r\nbool vis[maxn];\r\npriority_queue<Point>q;\r\n\r\nvoid add(int x, int y, int w, int id) {\r\n\tedge[tot] = {y, Head[x], id, w}, Head[x] = tot++;\r\n}\r\n\r\nvoid dijkstra() {\r\n\tmemset(dis, 0x3f, sizeof dis), dis[1] = 0, vis[0] = 1, q.push({1, 0, 0});\r\n\tPoint t;\r\n\twhile (q.size()) {\r\n\t\tt = q.top(), q.pop();\r\n\t\tif (vis[t.p])\r\n\t\t\tcontinue;\r\n\t\tvis[t.p] = 1;\r\n\t\tif (t.f && k > 0)\r\n\t\t\tprintf(\"%d \", t.f), k--;\r\n\t\tif (!k)\r\n\t\t\treturn ;\r\n\t\tfor (int i = Head[t.p], v; ~i; i = edge[i].next)\r\n\t\t\tif (dis[v = edge[i].to] > 1LL * dis[t.p] + edge[i].w)\r\n\t\t\t\tdis[v] = 1LL * dis[t.p] + edge[i].w, q.push({v, edge[i].id, dis[v]});\r\n\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tmemset(Head, -1, sizeof Head);\r\n\tscanf(\"%d%d%d\", &n, &m, &k);\r\n\tfor (int i = 1, u, v, w; i <= m; i++)\r\n\t\tscanf(\"%d%d%d\", &u, &v, &w), add(u, v, w, i), add(v, u, w, i);\r\n\tprintf(\"%d\\n\", k = min(k, n - 1));\r\n\tdijkstra();\r\n\treturn 0;\r\n}"
}