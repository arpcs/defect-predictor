{
    "id": 176144667,
    "contestId": 1076,
    "creationTimeSeconds": 1665748915,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 577,
    "memoryConsumedBytes": 47206400,
    "source": "# include <bits/stdc++.h>\n# define int long long\n# define wheneveright signed main\nusing namespace std;\n\nconst int maxn = 400005;\nconst int maxe = 800005;\n\nstruct reader {\n\ttemplate <typename Type>\n\treader & operator >> (Type & ret) {\n\t\tint f = 1; ret = 0; char ch = getchar ();\n\t\tfor (;!isdigit (ch); ch = getchar ()) if (ch == '-') f = -f;\n\t\tfor (; isdigit (ch); ch = getchar ()) ret = (ret * 10) + ch - '0';\n\t\tret *= f; return * this;\n\t}\n} fin;\n\nint n, m, k, x, y, z;\nint lnk[maxn], nxt[maxe], son[maxe], val[maxe], idx[maxe], tot;\nvoid add_e (int x, int y, int z, int id) {\n\tnxt[++tot] = lnk[x]; lnk[x] = tot; son[tot] = y; val[tot] = z; idx[tot] = id;\n\tnxt[++tot] = lnk[y]; lnk[y] = tot; son[tot] = x; val[tot] = z; idx[tot] = id;\n\treturn ;\n}\n\nint dis[maxn];\nstruct WER {\n\tint dis, pos;\n\tbool operator < (WER p) const {\n\t\treturn dis > p.dis;\n\t}\n} now;\npriority_queue < WER > que;\n\nvoid Dijkstra () {\n\twhile (!que.empty ()) que.pop ();\n\tmemset (dis, 127, sizeof dis);\n\tque.push ((WER) { dis[1] = 0, 1 });\n\twhile (!que.empty ()) {\n\t\tnow = que.top (); que.pop ();\n\t\tif (now.dis != dis[now.pos]) continue ;\n\t\tfor (int j = lnk[now.pos]; j; j = nxt[j])\n\t\t\tif (dis[son[j]] > now.dis + val[j])\n\t\t\t\tque.push ((WER) { dis[son[j]] = now.dis + val[j], son[j] });\n\t}\n\treturn ;\n}\n\nbool vis[maxn], ist[maxn];\nvoid dfs (int id) {\n\tvis[id] = true;\n\tfor (int j = lnk[id]; j; j = nxt[j])\n\t\tif (!ist[idx[j]] && !vis[son[j]] && dis[son[j]] == dis[id] + val[j] && k > 0)\n\t\t\tist[idx[j]] = true, k--, dfs (son[j]);\n\treturn ;\n}\n\nwheneveright () {\n\tfin >> n >> m >> k;\n\tfor (int i = 1; i <= m; i++) {\n\t\tfin >> x >> y >> z;\n\t\tadd_e (x, y, z, i);\n\t}\n\tDijkstra (); dfs (1); k = 0;\n\tfor (int i = 1; i <= m; i++) if (ist[i]) k++;\n\tprintf (\"%lld\\n\", k);\n\tfor (int i = 1; i <= m; i++) if (ist[i]) printf (\"%lld \", i);\n\treturn 0;\n}\n\t\t  \t\t\t   \t\t\t\t  \t \t\t\t \t\t\t\t\t\t \t"
}