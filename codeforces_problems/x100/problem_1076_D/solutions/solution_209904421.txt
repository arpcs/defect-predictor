{
    "id": 209904421,
    "contestId": 1076,
    "creationTimeSeconds": 1686949434,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "calebmartim"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 27340800,
    "source": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <queue>\nusing namespace std;\nusing pii = pair<int,int>;\n\nusing tupla = tuple<int,int,int>;\n\nconst int MAX = 3e5 + 1;\n\nvector<pair<pii, int>> grafo[MAX];\nint visitado[MAX];\nint dist[MAX];\n\nint main(){\n    cin.tie(nullptr) -> sync_with_stdio(false); cout.tie(nullptr);\n\n    int n, m, k, x, y, w; cin >> n >> m >> k;\n\n    for(int i = 0; i < m; ++i){\n        cin >> x >> y >> w;\n        grafo[x].push_back({{w,y},i+1});\n        grafo[y].push_back({{w,x},i+1});\n    }\n\n    vector<int> arestas;\n    \n    priority_queue<pair<pii,int>, vector<pair<pii,int>>, greater<pair<pii,int>>> menores;\n\n    menores.push({{0,1}, 0});\n\n    for(int i = 1; i <= n; ++i)\n        dist[i] = 0x3f3f3f3f;\n\n    dist[1] = 0;\n    int contador = -1;\n\n    while(contador < k and !menores.empty()){\n\n        int indice = menores.top().second;\n        int distancia = menores.top().first.first;\n        int u = menores.top().first.second;\n\n        menores.pop();\n\n        if(visitado[u]) continue;\n        else{\n            visitado[u] = 1;\n            if(indice) arestas.push_back(indice);\n            ++contador;\n\n            for(pair<pii,int> adjacente : grafo[u]){\n                if(distancia + adjacente.first.first < dist[adjacente.first.second]){\n\n                    dist[adjacente.first.second] = distancia + adjacente.first.first;\n\n                    menores.push({{dist[adjacente.first.second], adjacente.first.second}, adjacente.second});\n                }\n            }\n        }\n    }\n\n    cout << arestas.size() << '\\n';\n    for(int & x : arestas) cout << x << ' ';\n    cout << '\\n';\n}\n"
}