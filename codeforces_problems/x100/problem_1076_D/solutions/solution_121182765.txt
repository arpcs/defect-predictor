{
    "id": 121182765,
    "contestId": 1076,
    "creationTimeSeconds": 1625312351,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "CG__HeavenHealer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 54374400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define ri register int\r\nconst int N = 1e6 + 10, INF = 1e9;\r\ninline int read() {\r\n    int x = 0;\r\n    char ch = getchar();\r\n    bool f = 1;\r\n    while (!isdigit(ch)) {\r\n        if (ch == '-') f = 0;\r\n        ch = getchar();\r\n    }\r\n    while (isdigit(ch)) {\r\n        x = (x << 1) + (x << 3) + (ch ^ 48);\r\n        ch = getchar();\r\n    }\r\n    return f ? x : -x;\r\n}\r\nstruct Edge {\r\n    int to, nxt, w;\r\n} e[N];\r\nint head[N], cnt;\r\ninline void add(int u, int v, int w) {\r\n    e[++cnt].to = v;\r\n    e[cnt].w = w;\r\n    e[cnt].nxt = head[u];\r\n    head[u] = cnt;\r\n}\r\nint n, m;\r\nint dis[N], pre[N];\r\nbool vis[N];\r\nstruct node {\r\n    int dist, id;\r\n    node() {}\r\n    node(int _, int __) : dist(_), id(__) {}\r\n    inline bool operator<(const node &x) const { return dist > x.dist; }\r\n};\r\npriority_queue<node> q;\r\nvector<int> ans;\r\ninline void dijkstra(int s) {\r\n    for (ri i = 1; i <= N; i++) dis[i] = INF;\r\n    dis[s] = 0;\r\n    q.push(node(0, s));\r\n    while (!q.empty()) {\r\n        int u = q.top().id;\r\n        q.pop();\r\n        if (vis[u]) continue;\r\n        vis[u] = true;\r\n        for (ri i = head[u]; i; i = e[i].nxt) {\r\n            int v = e[i].to, w = e[i].w;\r\n            if (dis[u] + w <= dis[v]) {\r\n                dis[v] = dis[u] + w;\r\n                pre[v] = i;\r\n                q.push(node(dis[v], v));\r\n            }\r\n        }\r\n    }\r\n}\r\nint tot, k;\r\nvoid dfs(int u) {\r\n    if (tot >= k) return;\r\n    vis[u] = true;\r\n    for (ri i = head[u]; i; i = e[i].nxt) {\r\n        int v = e[i].to, w = e[i].w;\r\n        if (vis[v]) continue;\r\n        if (dis[v] == dis[u] + w) {\r\n            ans.push_back(i);\r\n            tot++;\r\n            dfs(v);\r\n            if (tot >= k) return;\r\n        }\r\n    }\r\n}\r\nsigned main() {\r\n    n = read(), m = read(), k = read();\r\n    while (m--) {\r\n        int u = read(), v = read(), w = read();\r\n        add(u, v, w), add(v, u, w);\r\n    }\r\n    dijkstra(1);\r\n    printf(\"%lld\\n\", min(n - 1, k));\r\n    memset(vis, false, sizeof(vis));\r\n    dfs(1);\r\n    for (ri i = 0; i < ans.size(); i++) printf(\"%lld \", (ans[i] + 1) / 2);\r\n    return 0;\r\n}"
}