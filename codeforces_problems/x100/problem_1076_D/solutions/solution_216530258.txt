{
    "id": 216530258,
    "contestId": 1076,
    "creationTimeSeconds": 1690779968,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "yuanruiqi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 888,
    "memoryConsumedBytes": 35737600,
    "source": "#include <cstdio>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <vector>\r\n#include <unordered_set>\r\n#include <queue>\r\nusing namespace std;\r\nusing i64 = long long;\r\nconstexpr int maxn = 300000 + 10;\r\nstruct edge\r\n{\r\n    int v, w, id, nxt;\r\n} e[maxn<<1];\r\nint h[maxn], cnt;\r\nvoid addedge(int u, int v, int w, int id)\r\n{\r\n    e[++cnt].nxt = h[u];\r\n    e[h[u]=cnt].v = v;\r\n    e[cnt].w = w;\r\n    e[cnt].id = id;\r\n}\r\nstruct node\r\n{\r\n    int u; i64 d;\r\n    inline bool operator<(const node& b) const\r\n    {\r\n        return d > b.d;\r\n    }\r\n    inline node(int _u=0, i64 _d=0) : u(_u), d(_d) {}\r\n};\r\nvector<int> G[maxn];\r\ni64 dis[maxn];\r\nint pre[maxn];\r\nunordered_set<int> st;\r\nint main()\r\n{\r\n    int n, m, k;\r\n    scanf(\"%d%d%d\", &n, &m, &k);\r\n    for (int i=1;i<=m;++i)\r\n    {\r\n        int u, v, w;\r\n        scanf(\"%d%d%d\", &u, &v, &w);\r\n        addedge(u, v, w, i);\r\n        addedge(v, u, w, i);\r\n    }\r\n    priority_queue<node> q;\r\n    memset(dis, 0x3f, sizeof(dis));\r\n    q.push(node(1, dis[1] = 0));\r\n    while (q.size())\r\n    {\r\n        auto x = q.top(); q.pop();\r\n        int u = x.u; i64 d = x.d;\r\n        if (d != dis[u]) continue;\r\n        for (int i=h[u];i;i=e[i].nxt)\r\n        {\r\n            int v = e[i].v, w = e[i].w, id = e[i].id;\r\n            if (d + w < dis[v]) pre[v] = id, q.push(node(v, dis[v] = d + w));\r\n        }\r\n    }\r\n    printf(\"%d\\n\", min(k, n - 1));\r\n    for (int i=2;i<=n;++i) st.insert(pre[i]);\r\n    queue<int> qq;\r\n    qq.push(1);\r\n    while (qq.size() && k)\r\n    {\r\n        int u = qq.front(); qq.pop();\r\n        for (int i=h[u];i&&k;i=e[i].nxt) if (st.count(e[i].id))\r\n        {\r\n            int v = e[i].v;\r\n            if (pre[v] != e[i].id) continue;\r\n            --k;\r\n            qq.push(v); printf(\"%d%c\", e[i].id, \" \\n\"[k==0]);\r\n        }\r\n    }\r\n    return 0;\r\n}"
}