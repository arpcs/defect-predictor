{
    "id": 115745713,
    "contestId": 1076,
    "creationTimeSeconds": 1620521891,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "PurpleCrayon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 888,
    "memoryConsumedBytes": 59187200,
    "source": "import java.io.*;\r\nimport java.lang.*;\r\nimport java.util.*;\r\n\r\npublic class getGoodVertices {\r\n    static long[] dist;\r\n    static HashMap<Integer, ArrayList<point>> edges = new HashMap<>();\r\n    public static void main(String[] args) throws IOException{\r\n        StringBuffer ans = new StringBuffer();\r\n        StringTokenizer st;\r\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\r\n        st = new StringTokenizer(f.readLine());\r\n        int n = Integer.parseInt(st.nextToken());\r\n        int m = Integer.parseInt(st.nextToken());\r\n        int k = Integer.parseInt(st.nextToken());\r\n        dist = new long[n];\r\n        Arrays.fill(dist, Long.MAX_VALUE);\r\n        dist[0] = 0;\r\n        for(int i = 0; i < m; i++){\r\n            st = new StringTokenizer(f.readLine());\r\n            int ft = Integer.parseInt(st.nextToken()) - 1;\r\n            int sc = Integer.parseInt(st.nextToken()) - 1;\r\n            int tr = Integer.parseInt(st.nextToken());\r\n            if(!edges.containsKey(ft))\r\n                edges.put(ft, new ArrayList<>());\r\n            if(!edges.containsKey(sc))\r\n                edges.put(sc, new ArrayList<>());\r\n            point add = new point(sc, tr);\r\n            add.index = i;\r\n            point add1 = new point(ft, tr);\r\n            add1.index = i;\r\n            edges.get(ft).add(add);\r\n            edges.get(sc).add(add1);\r\n        }\r\n        f.close();\r\n        PriorityQueue<point> pq = new PriorityQueue<>();\r\n        boolean[] visited = new boolean[n];\r\n        pq.add(new point(0, 0));\r\n        HashSet<Integer> end = new HashSet<>();\r\n        int[] parent = new int[n];\r\n        parent[0] = -1;\r\n        end.add(0);\r\n        ArrayList<Integer> op = new ArrayList<>();\r\n        int size = Math.min(k, m);\r\n        while (!pq.isEmpty()){\r\n            int curr = pq.poll().x;\r\n            if(visited[curr])\r\n                continue;\r\n\r\n            visited[curr] = true;\r\n\r\n            if(curr != 0)\r\n                op.add(parent[curr]);\r\n\r\n            if(op.size() == size) break;\r\n\r\n            for(point i : edges.get(curr)){\r\n                int currx = i.x;\r\n                if(!visited[currx]){\r\n                    long r = dist[curr] + i.y;\r\n                    if(r < dist[currx]){\r\n                        parent[currx] = i.index;\r\n                        dist[currx] = r;\r\n                        pq.add(new point(currx, 0));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (op.size() > k) throw null;\r\n        ans.append(Math.min(k, op.size())).append(\"\\n\");\r\n        for(int i = 0; i < Math.min(k, op.size()); i++)\r\n            ans.append(op.get(i)+1).append(\" \");\r\n        System.out.println(ans);\r\n    }\r\n    public static class point implements Comparable<point>{\r\n        int x;\r\n        int y;\r\n        int index;\r\n        public point(int x,int y){\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n        public String toString(){\r\n            return(x + \" \" + y);\r\n        }\r\n        public boolean equals(Object x){\r\n            point y = ((point)(x));\r\n            if (this.x == y.x && this.y == y.y){\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        public int hashCode(){\r\n            return Objects.hash(x,y);\r\n        }\r\n        public int compareTo(point other){\r\n            if(dist[x] > dist[other.x]){\r\n                return 1;\r\n            }else if(this.x == other.x && other.y == this.y){\r\n                return 0;\r\n            }\r\n            return -1;\r\n        }\r\n    }\r\n}"
}