{
    "id": 103666752,
    "contestId": 1076,
    "creationTimeSeconds": 1610048885,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "tejustiwari"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 702,
    "memoryConsumedBytes": 46899200,
    "source": "//tejustiwari\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define to first\r\n#define edgeNumber second\r\ntypedef long long int ll;\r\ntypedef pair<ll,ll>\t pll;\r\n\r\n//-------------------------Template Above------------------------\r\n\r\nint main() {\r\n  // Take Input\r\n  ios_base::sync_with_stdio(0); cin.tie(0);\r\n  ll i, n, m, k, x, y;\r\n  cin >> n >> m >> k;\r\n  vector<ll> dist(n+5, 1e18), vis(m+5), needed(m+5, 1), wt(m+5);\r\n  vector<pll> par(n+5, {0,0}), g[n+5];\r\n  for(i = 1; i <= m; ++i) {\r\n    cin >> x >> y >> wt[i];\r\n    g[x].push_back({y, i});\r\n    g[y].push_back({x, i});\r\n  }\r\n\r\n  // Calculate Shortest Distance from Node 1 with Dijkstra's Algorithm\r\n  set<pll> s;\r\n  s.insert({0, 1});\r\n  dist[1] = 0;\r\n  while (s.size()) {\r\n    auto node = s.begin() -> second;\r\n    s.erase(s.begin());\r\n    for (auto child : g[node]) {\r\n      if (!vis[child.edgeNumber]) {\r\n        vis[child.edgeNumber] = 1;\r\n        if (dist[child.to] <= dist[node] + wt[child.edgeNumber])\r\n          needed[child.edgeNumber] = 0;\r\n        else {\r\n          s.erase({dist[child.to], child.to});\r\n          needed[par[child.to].edgeNumber] = 0;\r\n          dist[child.to] = dist[node] + wt[child.edgeNumber];\r\n          par[child.to] = {node, child.edgeNumber};\r\n          s.insert({dist[child.to], child.to});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove All the Edges which are not contributing in Shortest Paths\r\n  int cnt = 0;\r\n  for (i = 1; i <= m; i++)\r\n    if (needed[i])\r\n      cnt++;\r\n\r\n\r\n  // Now Start Removing from the farthest Node\r\n  priority_queue<pll> pq;\r\n  for(i = 2; i <= n; i++)\r\n    pq.push({dist[i], par[i].edgeNumber});\r\n  while(cnt > k){\r\n    auto edge = pq.top();\r\n    needed[edge.edgeNumber] = 0;\r\n    pq.pop();\r\n    cnt--;\r\n  }\r\n\r\n  // Print Answer\r\n  cout << cnt << '\\n';\r\n  for (i = 1; i <= m; i++) {\r\n    if (needed[i])\r\n      cout << i << ' ';\r\n  }\r\n  return 0;\r\n}\r\n\r\n//----------------------------------------------------------------\r\n"
}