{
    "id": 138755342,
    "contestId": 1076,
    "creationTimeSeconds": 1639221836,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "m1silicon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 451,
    "memoryConsumedBytes": 26112000,
    "source": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n#define sz(x) int((x).size())\n#define all(x) begin(x), end(x)\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define F first\n#define S second\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\n\nusing lli = long long;\nusing pii = pair < int, int >;\nusing t3 = tuple < int, int, int >;\nusing t3b = tuple < lli, int, int >;\n\nconst int N = 3e5 + 5;\nconst lli inf = 1e18;\n\nint n, m, k;\nvector < t3 > g[N];\nlli dist[N];\nint lst[N];\npriority_queue < pair < lli, int > , vector < pair < lli, int > >, greater < pair < lli, int > > > pq;\nvector < int > inE;\n\nint main () {\n  scanf(\"%d %d %d\", &n, &m, &k);\n  FOR(i, 0, m) {\n    int x, y, w;\n    scanf(\"%d %d %d\", &x, &y, &w);\n    g[x].eb(y, w, i);\n    g[y].eb(x, w, i);\n  }\n  fill(dist + 1, dist + n + 1, inf);\n  dist[1] = 0;\n  memset(lst, -1, sizeof lst);\n  pq.emplace(0, 1);\n  int done = 0;\n  while (!pq.empty() && done < k) {\n    auto [d, from] = pq.top();\n    pq.pop();\n    if (dist[from] < d) continue;\n    if (lst[from] >= 0) {\n      inE.eb(lst[from] + 1);\n      ++done;\n    }\n    for (auto [to, w, i] : g[from]) {\n      if (dist[to] > w + dist[from]) {\n        dist[to] = w + dist[from];\n        lst[to] = i;\n        pq.emplace(dist[to], to);\n      }\n    }\n  }\n  printf(\"%d\\n\", sz(inE));\n  for (auto &e : inE) printf(\"%d \", e);\n  return 0;\n}\n"
}