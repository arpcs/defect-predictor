{
    "id": 120036192,
    "contestId": 1076,
    "creationTimeSeconds": 1624159135,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "luogu_bot2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 9932800,
    "source": "#include <bits/stdc++.h>\n#define rep1(i, j, n) for (register int i = j; i <= n; ++i)\n#define rep2(i, j, n) for (register int i = j; i >= n; --i)\n#define il inline\n#define reg register int\n#define PLI pair <long long, int>\n#define PII pair <int, int>\nusing namespace std;\nconst int MAXN = 3e5 + 5; const long long inf = LLONG_MAX;\nint n, m, k, cnt; long long dis[MAXN]; bool vis[MAXN];\nvector <PLI> G[MAXN];\nmap <PII, int> link;\nil void dijkstra() {\n\tpriority_queue <PLI> q; q.push(make_pair(0, 1));\n\trep1(i, 2, n) dis[i] = inf; dis[1] = 0;\n\twhile (!q.empty()) {\n\t\tint u = q.top().second; q.pop();\n\t\tif (vis[u]) continue; vis[u] = 1; reg sz = G[u].size();\n\t\trep1(i, 0, sz - 1) {\n\t\t\tint v = G[u][i].first, w = G[u][i].second;\n\t\t\tif (dis[v] > dis[u] + w) {\n\t\t\t\tdis[v] = dis[u] + w;\n\t\t\t\tq.push(make_pair(dis[v], v));\n\t\t\t}\n\t\t}\n\t}\n}\nsigned main() {\n\tscanf(\"%d%d%d\", &n, &m, &k); int tot = 1;\n\twhile (m--) {\n\t\tint u, v, w; scanf(\"%d%d%d\", &u, &v, &w);\n\t\tG[u].push_back(make_pair(v, w)); G[v].push_back(make_pair(u, w));\n\t\tlink[make_pair(u, v)] = link[make_pair(v, u)] = tot++;\n\t}\n\tprintf(\"%d\\n\", min(n - 1, k));\n\tdijkstra(); \n\tqueue <int> q; q.push(1); memset(vis, 0, sizeof vis); int cnt = 0;\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop(); reg sz = G[u].size();\n\t\trep1(i, 0, sz - 1) {\n\t\t\tint v = G[u][i].first, w = G[u][i].second;\n\t\t\tif (dis[v] == dis[u] + w) {\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\tq.push(v), vis[v] = 1;\n\t\t\t\t\tprintf(\"%d \", link[make_pair(u, v)]); ++cnt;\n\t\t\t\t\tif (cnt >= min(k, n - 1)) return 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
}