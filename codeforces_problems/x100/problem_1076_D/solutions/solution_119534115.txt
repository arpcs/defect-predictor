{
    "id": 119534115,
    "contestId": 1076,
    "creationTimeSeconds": 1623761807,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "spacewalker"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 499,
    "memoryConsumedBytes": 26521600,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\nconstexpr ll INF = 1e18;\n\nint main() {\n    int n, m, k; scanf(\"%d %d %d\", &n, &m, &k);\n    vector<vector<pair<int, int>>> graph(n);\n    vector<pair<int, int>> elist(m);\n    vector<ll> eWeight(m);\n    for (int i = 0; i < m; ++i) {\n        int x, y, w; scanf(\"%d %d %d\", &x, &y, &w); --x; --y;\n        graph[x].emplace_back(y, i);\n        graph[y].emplace_back(x, i);\n        elist[i] = {x, y};\n        eWeight[i] = w;\n    }\n    priority_queue<pair<ll, int>, vector<pair<ll, int>>, greater<pair<ll, int>>> pq;\n    vector<ll> cdist(n, INF);\n    vector<int> eToPar(n, -1);\n    cdist[0] = 0;\n    pq.emplace(0, 0);\n    while (!pq.empty()) {\n        auto [dtc, cur] = pq.top(); pq.pop();\n        if (dtc > cdist[cur]) continue;\n        for (auto [nxt, etn] : graph[cur]) {\n            if (cdist[nxt] > eWeight[etn] + dtc) {\n                eToPar[nxt] = etn;\n                pq.emplace(cdist[nxt] = eWeight[etn] + dtc, nxt);\n            }\n        }\n    }\n    vector<int> treeOrder;\n    for (int i = 0; i < n; ++i) if (cdist[i] < INF) treeOrder.push_back(i);\n    sort(begin(treeOrder), end(treeOrder), [&] (int i, int j) {return cdist[i] < cdist[j];});\n    vector<int> toKeep;\n    for (int v : treeOrder) if (eToPar[v] != -1) toKeep.push_back(eToPar[v]);;\n    while (toKeep.size() > k) toKeep.pop_back();\n    printf(\"%lu\\n\", toKeep.size());\n    for (int v : toKeep) printf(\"%d \", v + 1);\n    printf(\"\\n\");\n\n}\n"
}