{
    "id": 113844373,
    "contestId": 1076,
    "creationTimeSeconds": 1619066095,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1076,
        "index": "D",
        "name": "Edge Deletion",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1076,
        "members": [
            {
                "handle": "luogu_bot3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542033300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 33894400,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <Cstdio>\r\n#include <queue>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef pair<LL, int> PLI;\r\n\r\nconst int N = 300010, M = 1000010;\r\n\r\nint h[N], hs[N], e[M], ne[M], w[M], idx;\r\nint n, m, k;\r\nLL dist[N];\r\nbool st[N];\r\nint pre[N], prep[N];\r\nint sum;\r\n\r\nvoid add(int a, int b, int c)\r\n{\r\n        e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;\r\n}\r\n\r\nvoid dijkstra()\r\n{\r\n        memset(dist, 0x3f, sizeof dist);\r\n        dist[1] = 0;\r\n        priority_queue<PLI, vector<PLI>, greater<PLI>> heap;\r\n        heap.push({0, 1});\r\n        while (heap.size()) {\r\n                auto temp = heap.top();\r\n                heap.pop();\r\n                int ver = temp.second;\r\n                if (st[ver])\r\n                        continue;\r\n                st[ver] = true;\r\n                for (int i = h[ver]; ~i; i = ne[i]) {\r\n                        int j = e[i];\r\n                        if (dist[j] > dist[ver] + w[i]) {\r\n                                dist[j] = dist[ver] + w[i];\r\n                                pre[j] = i;\r\n                                prep[j] = ver;\r\n                                heap.push({dist[j], j});\r\n                        } else if (dist[j] == dist[ver] + w[i] && w[i] < w[pre[j]]) {\r\n                                pre[j] = i;\r\n                                prep[j] = ver;\r\n                        }\r\n                }\r\n        }\r\n}\r\n\r\nint get(int u)\r\n{\r\n        int e = pre[u];\r\n        if (e & 1) {\r\n                return e + 1 >> 1;\r\n        } else {\r\n                return (e ^ 1) + 1 >> 1;\r\n        }\r\n}\r\n\r\n// void bfs()\r\n// {\r\n//         int E = min(k, n - 1);\r\n//         memset(st, 0, sizeof st);\r\n//         queue<int> q;\r\n//         q.push(1);\r\n//         st[1] = true;\r\n//         while (q.size()) {\r\n//                 int t = q.front();\r\n//                 q.pop();\r\n//                 for (int i = hs[t]; ~i; i = ne[i]) {\r\n//                         int j = e[i];\r\n//                         if (!st[j]) {\r\n//                                 cout << get(j) << ' ';\r\n//                                 E--;\r\n//                                 if (!E) break;\r\n//                                 q.push(j);\r\n//                                 st[j] = true;\r\n//                         }\r\n//                 }\r\n//         }\r\n// }\r\n\r\nvoid dfs(int x, int father) {\r\n    if(sum == k) {\r\n        puts(\"\");\r\n        exit(0);\r\n    }\r\n    for(register int i = h[x]; i != -1; i = ne[i]) {\r\n        int next = e[i];\r\n        if(next == father) {\r\n            continue;\r\n        }\r\n        if(pre[next] == i) {\r\n            ++sum;\r\n            st[next] = true;\r\n            printf(\"%d \", get(next));\r\n            dfs(next, x);\r\n        }\r\n    }\r\n    return ;    \r\n}\r\n\r\nint main()\r\n{\r\n        memset(h, -1, sizeof h);\r\n        memset(hs, -1, sizeof hs);\r\n        scanf(\"%d%d%d\", &n, &m, &k);\r\n        while (m--) {\r\n                int a, b, c;\r\n                scanf(\"%d%d%d\", &a, &b, &c);\r\n                add(a, b, c);\r\n                add(b, a, c);\r\n        }\r\n        dijkstra();\r\n        cout << min(n - 1, k) << endl;\r\n        // bfs();\r\n        dfs(1, 0);\r\n        return 0;\r\n}"
}