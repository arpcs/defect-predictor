{
    "id": 146819508,
    "contestId": 1359,
    "creationTimeSeconds": 1645180141,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1359,
        "index": "A",
        "name": "Berland Poker",
        "type": "PROGRAMMING",
        "rating": 1000,
        "tags": [
            "brute force",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1359,
        "members": [
            {
                "handle": "samitdas03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590676500
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 0,
    "source": "import static java.lang.Math.max;\r\nimport static java.lang.Math.min;\r\nimport static java.lang.Math.abs;\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n\r\npublic class A_Berland_Poker {\r\n\r\n    public static void main(String[] args) {\r\n        OutputStream outputStream = System.out;\r\n        PrintWriter out = new PrintWriter(outputStream);\r\n        FastReader f = new FastReader();\r\n        int t = f.nextInt();\r\n        while(t-- > 0) {\r\n            int n = f.nextInt();\r\n            int m = f.nextInt();\r\n            int k = f.nextInt();\r\n            int x = n/k;\r\n            if(x >= m) {\r\n                out.println(m);\r\n            } else {\r\n                int y;\r\n                if((m-x) % (k-1) == 0) {\r\n                    y = (m-x)/(k-1);\r\n                } else {\r\n                    y = (m-x)/(k-1) + 1;\r\n                }\r\n                out.println(x - y);\r\n            }\r\n        }\r\n\r\n\r\n        out.close();\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    public static void allDivisors(int n) {\r\n        for(int i = 1; i*i <= n; i++) {\r\n            if(n%i == 0) {\r\n                System.out.println(i + \" \");\r\n                if(i != n/i) {\r\n                    System.out.println(n/i + \" \");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static boolean isPrime(int n) {\r\n        if(n < 1) return false;\r\n        if(n == 2 || n == 3) return true;\r\n        if(n % 2 == 0 || n % 3 == 0) return false;\r\n        for(int i = 5; i*i <= n; i += 6) {\r\n            if(n % i == 0 || n % (i+2) == 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static int Gcd(int a, int b) {\r\n        int dividend = a > b ? a : b;\r\n        int divisor =  a < b ? a : b;\r\n        \r\n        while(divisor > 0) {\r\n            int reminder = dividend % divisor;\r\n            dividend = divisor;\r\n            divisor = reminder;\r\n        }\r\n        return dividend;\r\n    }\r\n\r\n    public static int lcm1(int a, int b) {\r\n        int lcm = Gcd(a, b);\r\n        int hcf = (a * b) / lcm;\r\n        return hcf;\r\n    }\r\n\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n    \r\n        public FastReader() {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n    \r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n    \r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n    \r\n        long nextLong() {\r\n            return Long.parseLong(next()); \r\n        }\r\n    \r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n    \r\n        float nextFloat() {\r\n            return Float.parseFloat(next());\r\n        }\r\n    \r\n        boolean nextBoolean() {\r\n            return Boolean.parseBoolean(next());\r\n        }\r\n    \r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\nDec  Char                           Dec  Char     Dec  Char     Dec  Char\r\n---------                           ---------     ---------     ----------\r\n  0  NUL (null)                      32  SPACE     64  @         96  `\r\n  1  SOH (start of heading)          33  !         65  A         97  a\r\n  2  STX (start of text)             34  \"         66  B         98  b\r\n  3  ETX (end of text)               35  #         67  C         99  c\r\n  4  EOT (end of transmission)       36  $         68  D        100  d\r\n  5  ENQ (enquiry)                   37  %         69  E        101  e\r\n  6  ACK (acknowledge)               38  &         70  F        102  f\r\n  7  BEL (bell)                      39  '         71  G        103  g\r\n  8  BS  (backspace)                 40  (         72  H        104  h\r\n  9  TAB (horizontal tab)            41  )         73  I        105  i\r\n 10  LF  (NL line feed, new line)    42  *         74  J        106  j\r\n 11  VT  (vertical tab)              43  +         75  K        107  k\r\n 12  FF  (NP form feed, new page)    44  ,         76  L        108  l\r\n 13  CR  (carriage return)           45  -         77  M        109  m\r\n 14  SO  (shift out)                 46  .         78  N        110  n\r\n 15  SI  (shift in)                  47  /         79  O        111  o\r\n 16  DLE (data link escape)          48  0         80  P        112  p\r\n 17  DC1 (device control 1)          49  1         81  Q        113  q\r\n 18  DC2 (device control 2)          50  2         82  R        114  r\r\n 19  DC3 (device control 3)          51  3         83  S        115  s\r\n 20  DC4 (device control 4)          52  4         84  T        116  t\r\n 21  NAK (negative acknowledge)      53  5         85  U        117  u\r\n 22  SYN (synchronous idle)          54  6         86  V        118  v\r\n 23  ETB (end of trans. block)       55  7         87  W        119  w\r\n 24  CAN (cancel)                    56  8         88  X        120  x\r\n 25  EM  (end of medium)             57  9         89  Y        121  y\r\n 26  SUB (substitute)                58  :         90  Z        122  z\r\n 27  ESC (escape)                    59  ;         91  [        123  {\r\n 28  FS  (file separator)            60  <         92  \\        124  |\r\n 29  GS  (group separator)           61  =         93  ]        125  }\r\n 30  RS  (record separator)          62  >         94  ^        126  ~\r\n 31  US  (unit separator)            63  ?         95  _        127  DEL\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}