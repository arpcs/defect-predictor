{
    "id": 192145149,
    "contestId": 1359,
    "creationTimeSeconds": 1675513068,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1359,
        "index": "A",
        "name": "Berland Poker",
        "type": "PROGRAMMING",
        "rating": 1000,
        "tags": [
            "brute force",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1359,
        "members": [
            {
                "handle": "H_4CE"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590676500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing intl = long long int;\r\n#define mod 1000000007\r\n/* How do you find out groups of one's and zero's in a given string:\r\n\r\n    intl groups = 0;\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        if (s[i] != s[i - 1])\r\n            groups++;\r\n    }\r\n    groups++;\r\n*/\r\nvector<int> primeFactors(int n)\r\n{\r\n    // time complexity is sqrt(n) as there will always be a prime factor for a\r\n    // given composite number before its square root.\r\n    vector<int> factors;\r\n    for (int i = 2; i * i <= n; i++)\r\n    {\r\n        while (n % i == 0)\r\n        {\r\n            factors.push_back(i);\r\n            n /= i;\r\n        }\r\n    }\r\n    if (n > 1)\r\n    {\r\n        factors.push_back(n);\r\n    }\r\n    // this if is used to correct the answer when the give number is prime\r\n    //  because there exists no prime factor for a given prime number before its sqrt\r\n    return factors;\r\n}\r\nintl fastPow(intl a, intl b)\r\n{\r\n    intl ans = 1;\r\n    while (b != 0)\r\n    {\r\n        if ((b & 1) == 1)\r\n        {\r\n            ans = (ans * (a % mod)) % mod;\r\n        }\r\n        a = ((a % mod) * (a % mod)) % mod;\r\n        b = b >> 1;\r\n    }\r\n    return ans;\r\n}\r\nintl modexp(intl a, intl b) // b is always mod-2\r\n{\r\n    intl ans = 1;\r\n    while (b > 0)\r\n    {\r\n        if ((b % 2) == 1)\r\n        {\r\n            ans = (ans * a) % mod;\r\n        }\r\n        a = (a * a) % mod;\r\n        b /= 2;\r\n    }\r\n    return ans;\r\n}\r\n// void splitString(string s)\r\nvector<string> parser(string arr)\r\n{\r\n    vector<string> tokens;\r\n    string temp; // assign an empty value\r\n    for (int j = 0; j < arr.size(); j++)\r\n    {\r\n        if (arr[j] != ' ')\r\n        {\r\n            temp += arr[j];\r\n        }\r\n        else\r\n        {\r\n            tokens.push_back(temp);\r\n            temp; // assign an empty value\r\n        }\r\n    }\r\n    tokens.push_back(temp);\r\n    return tokens;\r\n}\r\nvoid solve()\r\n{\r\n    intl n, x, a, b, c;\r\n    intl cards, jokers, players;\r\n    cin >> cards >> jokers >> players;\r\n    intl cardsPerPlayer = cards / players;\r\n\r\n    if (jokers == 0)\r\n    {\r\n        cout << 0 << endl;\r\n    }\r\n    else if (cardsPerPlayer >= jokers)\r\n    {\r\n        cout << jokers << endl;\r\n    }\r\n    else if (jokers > cardsPerPlayer)\r\n    {\r\n        if (cardsPerPlayer == 1)\r\n        {\r\n            cout << 0 << endl;\r\n        }\r\n        else\r\n        {\r\n            intl maxJokerCards = cardsPerPlayer;\r\n            jokers -= cardsPerPlayer;\r\n            players--;\r\n            intl runnerUpCards = ceil(1.0 * jokers / players);\r\n            maxJokerCards -= runnerUpCards;\r\n            cout << maxJokerCards << endl;\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    intl t;\r\n    //hahahahhahhahah\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n\r\n    return 0;\r\n}\r\n\r\n"
}