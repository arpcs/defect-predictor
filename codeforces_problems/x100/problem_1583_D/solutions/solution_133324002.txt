{
    "id": 133324002,
    "contestId": 1583,
    "creationTimeSeconds": 1635411226,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "TranGiaHuy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// C++ Template\r\n\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n\r\n// Type\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\n// Pair/Vector\r\ntypedef pair<ll, ll> ii;\r\ntypedef vector<ll> vi;\r\ntypedef vector<ii> vii;\r\ntypedef vector<vi> vvi;\r\n\r\n// Macro\r\n#define stat(x) x && cout << \"YES\\n\" || cout << \"NO\\n\";\r\n#ifdef LOCAL\r\n    #define debug(x) cout << #x << \" = \" << x << \"\\n\";\r\n#else\r\n    #define debug(x) ;\r\n#endif\r\n\r\n// Custom output\r\ntemplate <class A, class B>\r\nostream& operator << (ostream& out, pair<A, B> x){\r\n    out << \"(\" << x.first << \", \" << x.second << \")\";\r\n    return out;\r\n}\r\n\r\ntemplate <class T>\r\nostream& operator << (ostream& out, vector<T> x){\r\n    out << \"[\";\r\n    for (int i=0; i<x.size(); i++){\r\n        if (i) out << \", \";\r\n        out << x[i];\r\n    }\r\n    out << \"]\";\r\n    return out;\r\n}\r\n\r\nvoid fastio(string finp = \"\", string fout = \"\"){\r\n    if (fopen(finp.c_str(), \"r\")){\r\n        freopen(finp.c_str(), \"r\", stdin);\r\n        freopen(fout.c_str(), \"w\", stdout);\r\n    }\r\n}\r\n\r\n// Const\r\nconst int interactive = 0;\r\nconst ld PI = acos(-1.0);\r\nconst ll allmod[2] = {int(1e9)+7, 998244353};\r\nconst ll mod = allmod[0];\r\nconst ll maxn = 2e5;\r\nconst ll inf = 1e18;\r\nconst int multitest = 0;\r\n\r\n#define int long long\r\n\r\nint query1(int x){\r\n\tfor (int i=0; i<n; i++){\r\n\t\tif (i == x) cout << \"2 \";\r\n\t\telse cout << \"1 \";\r\n\t}\r\n\tcout << \"\\n\"; fflush(stdout);\r\n\r\n\tint res; cin >> res;\r\n\treturn res;\r\n}\r\n\r\nint query2(int x){\r\n\tfor (int i=0; i<n; i++){\r\n\t\tif (i == x) cout << \"1 \";\r\n\t\telse cout << \"2 \";\r\n\t}\r\n\tcout << \"\\n\"; fflush(stdout);\r\n\r\n\tint res; cin >> res;\r\n\treturn res;\r\n}\r\n\r\nvi child, parent, res;\r\n\r\nvoid result(){\r\n\tcout << \"!\";\r\n\tfor (int i=0; i<res.size(); i++) cout << \" \" << res[i];\r\n}\r\n\r\nvoid main_program(){\r\n    int n; cin >> n;\r\n    child.assign(n, -1);\r\n    parent.assign(n, -1);\r\n    res.assign(n, 0);\r\n\r\n    for (int i=0; i<n; i++){\r\n    \tint k = query1(i);\r\n    \tif (k){\r\n    \t\tk--;\r\n    \t\tif (k != i){\r\n    \t\t\tparent[i] = k;\r\n    \t\t\tchild[k] = i;\r\n    \t\t}\r\n    \t}\r\n\r\n    \tk = query2(i);\r\n    \tif (k){\r\n    \t\tk--;\r\n    \t\tif (k != i){\r\n    \t\t\tchild[i] = k;\r\n    \t\t\tparent[k] = i;\r\n    \t\t}\r\n    \t}\r\n    }\r\n\r\n    int idx = -1;\r\n    for (int i=0; i<n; i++){\r\n    \tif (child[i] == -1) idx = i;\r\n    }\r\n\r\n    res[idx] = 1;\r\n    int cnt = 2;\r\n\r\n    while (parent[idx] != -1){\r\n    \tidx = parent[idx];\r\n    \tres[idx] = cnt;\r\n    \tcnt++;\r\n    }\r\n\r\n    result();\r\n}\r\n\r\nvoid pre_main(){\r\n    \r\n}\r\n\r\nsigned main(){\r\n\r\n    #ifdef LOCAL\r\n        auto start_time = chrono::high_resolution_clock::now();\r\n    #endif\r\n\r\n    if (!interactive) {ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}\r\n    #ifndef ONLINE_JUDGE\r\n        fastio(\".inp\", \".out\");\r\n    #endif\r\n\r\n    int t = 1;\r\n    if (multitest) cin >> t;\r\n    pre_main();\r\n    while (t--) main_program();\r\n\r\n    #ifdef LOCAL\r\n        auto end_time = chrono::high_resolution_clock::now();\r\n        double duration = chrono::duration_cast<chrono::milliseconds>(end_time - start_time).count();\r\n        cout << \"\\n[\" << duration << \"ms]\\n\";\r\n    #endif\r\n}"
}