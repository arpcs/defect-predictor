{
    "id": 212305070,
    "contestId": 1583,
    "creationTimeSeconds": 1688617169,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "allwelllll"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <algorithm>\n#include <bits/stdc++.h>\n#include <cstring>\n#include <functional>\n#include <numeric>\nusing namespace std;\nconst int MOD = 1000000007;\nconst int mod = 998244353;\n// #define LOCAL\n#ifdef LOCAL\n#define dbg(x...) do { cout << \"[\" << #x <<\" -> \"; err(x); } while (0)\nvoid err() { cout << \"]\" << endl; }\ntemplate<class T, class... Ts> void err(const T& arg,const Ts&... args) { cout << arg << \" \"; err(args...); }\n#else \n#define dbg(x...){}\n#endif\n#define int long long\n#define pp pair<int, int>\nclass Comb {\n    vector<int> Facs, Invs;\n    void expand(size_t n) {\n        while(Facs.size() < n + 1) Facs.push_back(1ll * Facs.back() * Facs.size() % MOD);\n        if(Invs.size() < n + 1) { // \u7ebf\u6027\u6c42\u9636\u4e58\u7684\u9006\u5143\n            Invs.resize(n + 1, 0);\n            Invs.back() = 1;\n            for(int a = Facs[n], p = MOD - 2; p; p >>= 1, a = 1ll * a * a % MOD)\n                if(p & 1) Invs.back() = 1ll * Invs.back() * a % MOD; // \u5feb\u901f\u4e58\u6c42 n! \u7684\u9006\u5143\n            for(int j = n-1; !Invs[j]; --j) Invs[j] = 1ll * Invs[j+1] * (j + 1) % MOD;\n        }\n    }\npublic:\n    Comb() : Facs({1}), Invs({1}) {}\n    Comb(int n) : Facs({1}), Invs({1}) { expand(n); }\n    int operator() (int n, int k) {\n        if(n == 0) return 1;\n        if(k > n) return 0;\n        expand(n);\n        return (1ll * Facs[n] * Invs[n-k] % MOD) * Invs[k] % MOD;\n    }\n};\n\nint fac[20];\n\nint quickpow(int base, int exponent) {\n    // return fac[exponent ];\n    int result = 1;\n    base %= mod;\n    while (exponent > 0) {\n        dbg(exponent);\n        if (exponent & 1) {\n            result = (result * base) % mod;\n        }\n        exponent >>= 1;\n        base = (base * base) % mod;\n    }\n    // dbg(result);\n    return (result + mod) % mod;\n}\n\n\nComb comb;\n\nusing ll = long long;\nint cnt = 0;\nconst int N = 1e3+10;\nvector<int> primes;\nvector<bool> is_prime(N + 1, true);\nauto init =[](){\n    for(int i = 2; i < N; i++) {\n        if(is_prime[i]) primes.push_back(i);\n        for (int& j: primes) {\n            if (i * j > N) {\n                break;\n            }\n            is_prime[i * j] = false;\n            if (i % j == 0) break;\n        }\n    }\n};\n\n\nbool F;\n\nvoid solve(){\n    int n ;\n    cin >> n;\n    map<int, int> big; // -1 means big in the after, -2 means not exists\n    map<int, int> small; // -1 means small in the after, -2 means not exists \n    int ma, mi;\n    for(int i = 0; i < n; i++) {\n        // +1\n        cout << \"? \";\n        for(int j = 0; j < n; j++) {\n            cout << (j == i? 1 : 0) << \" \\n\"[j == n - 1];\n        }\n        cout.flush();\n        int bg;\n        cin >> bg;\n        if(bg == 0){\n            ma = bg;\n            big[i] = -2;\n        }else if (bg == i + 1){\n            big[i] = -1; // -1 means big int the after\n        }else{\n            big[i] = bg - 1;\n        }\n\n        cout << \"? \";\n        for(int j = 0; j < n; j++) {\n            cout << (j == i? 1: 2) << \"\\n\"[j == n - 1];\n        }\n        cout.flush();\n\n        int sm;\n        cin >> sm;\n        if(sm == 0) {\n            mi = sm;\n            small[i] = -2;\n        }else if (sm == i + 1) {\n            small[i] = -1;\n        }else {\n            small[i] = sm - 1;\n        }\n\n    }\n\n    vector<int> arr(n);\n    arr[ma - 1] = n;\n    arr[mi - 1] = 1;\n    int cnt = 2;\n    while(cnt < n) {\n        int old = cnt;\n        for(int i = 0; i < n; i++) {\n            if(arr[i] == 0) continue;\n            if(big[arr[i]] >= 0) {\n                arr[big[arr[i]]] = arr[i] + 1;\n                cnt++;\n            }\n            if(small[arr[i]] >= 0) {\n                arr[small[arr[i]]] = arr[i] - 1;\n                cnt++;\n            }\n        }\n        if(old == cnt){\n            break;\n        }\n    }\n\n    cout << \"! \";\n    for(int x: arr) cout << x << \" \";\n    cout << endl;\n    cout.flush();\n\n    \n    \n}\n\nint T = 0;\n\nsigned main(){\n#ifndef LOCAL\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr); cout.tie(nullptr);\n#endif\n    int t;\n    // init();\n    // cin >> t;\n    int c = 0;\n    // while(c++ < t) {\n        solve();\n    // }\n    // cout << \"done\" << endl;\n    return 0;\n}"
}