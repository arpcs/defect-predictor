{
    "id": 158637536,
    "contestId": 1583,
    "creationTimeSeconds": 1653671987,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "vaibhav_1710"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\nimport java.util.concurrent.LinkedBlockingDeque;\r\n\r\nimport javax.sql.rowset.spi.SyncResolver;\r\n\r\nimport java.io.*;\r\nimport java.nio.channels.NonReadableChannelException;\r\nimport java.text.DateFormatSymbols;\r\n\r\nimport static java.lang.System.console;\r\nimport static java.lang.System.out;\r\n\r\npublic class CpTemp{\r\n\r\n    static FastScanner fs = null;\r\n    static ArrayList<Integer> al[];\r\n    static   HashMap<Long,Long> hm;\r\n    public static void main(String[] args) {\r\n        fs = new FastScanner();\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        int t= 1;\r\n\r\n        outer:\r\n        while (t-- > 0) {\r\n            ArrayList<Integer> al = new ArrayList<>();\r\n            int n = fs.nextInt();\r\n            int p[] = new int[n];\r\n            int lid = -1;\r\n            for(int i=2;i<=n;i++){\r\n                int g = ask(n,i);\r\n                if(g==0){\r\n                    lid = (n+2) - i;\r\n                    break;\r\n                }else{\r\n                    al.add(g-1);\r\n                }\r\n            }\r\n            p[n-1] = lid;\r\n\r\n           ArrayList<Integer> al1 = new ArrayList<>();\r\n           int i=1;\r\n           boolean f  = true;\r\n           while(f){\r\n               i++;\r\n                int tm[] = new int[n];\r\n                for(int j=0;j<n;j++){\r\n                    if(j==(n-1)){\r\n                        tm[j] = 1;\r\n                    }else{\r\n                        tm[j] = i;\r\n                    }\r\n                }\r\n                out.print(\"?\");\r\n                for(int x:tm){\r\n                    out.print(\" \"+x);\r\n                }\r\n                out.println();\r\n                out.flush();\r\n\r\n                int z = fs.nextInt();\r\n                if(z==0){\r\n                    f = false;\r\n                    break;\r\n                }else {\r\n                    al1.add(z - 1);\r\n                }\r\n            }\r\n\r\n            int tmp = lid+1;\r\n            for( i=0;i<al.size();i++){\r\n                p[al.get(i)] = tmp;\r\n                tmp++;\r\n            }\r\n\r\n            int gg = lid-1;\r\n            for( i=0;i<al1.size();i++){\r\n                p[al.get(i)] = gg;\r\n                gg--;\r\n            }\r\n\r\n            out.print(\"! \");\r\n            for(int x:p){\r\n                out.print(x+\" \");\r\n            }\r\n            out.println();\r\n            out.flush();\r\n\r\n\r\n\r\n        }\r\n           out.flush();\r\n\r\n        out.close();\r\n    }\r\n\r\n     public static int ask(int n ,int v){\r\n       int tmp[] = new int[n];\r\n       for(int i=0;i<n;i++){\r\n           tmp[i] = i==(n-1)?v:1;\r\n       }\r\n       out.print(\"? \");\r\n       for(int x:tmp){\r\n           out.print(x+\" \");\r\n       }\r\n         out.println();\r\n         out.flush();\r\n       int g = fs.nextInt();\r\n\r\n        return g;\r\n     }\r\n\r\n\r\n    static long bit[]; // '1' index based array\r\n\r\n    public static void update(long bit[],int i,int x){\r\n        for(;i<bit.length;i+=(i&(-i))){\r\n            bit[i] += x;\r\n        }\r\n    }\r\n    public static long sum(int i){\r\n        long sum=0;\r\n        for(;i>0 ;i -= (i&(-i))){\r\n            sum += bit[i];\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    static class Pair implements Comparable<Pair>  {\r\n        long x;\r\n        int y;\r\n\r\n        Pair(long x, int y) {\r\n            this.x = x;\r\n            this.y = y;\r\n\r\n        }\r\n        public int compareTo(Pair o){\r\n            return this.y-o.y;\r\n        }\r\n\r\n\r\n    }\r\n\r\n    static int power(int x, int y, int p) {\r\n\r\n        if (y == 0)\r\n            return 1;\r\n        if (x == 0)\r\n            return 0;\r\n        int res = 1;\r\n        x = x % p;\r\n\r\n        while (y > 0) {\r\n\r\n            if (y % 2 == 1)\r\n                res = (res * x) % p;\r\n\r\n            y = y >> 1;\r\n            x = (x * x) % p;\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    static long power(long x, long y) {\r\n\r\n        if (y == 0)\r\n            return 1;\r\n        if (x == 0)\r\n            return 0;\r\n        long res = 1;\r\n\r\n        while (y > 0) {\r\n\r\n            if (y % 2 == 1)\r\n                res = (res * x);\r\n\r\n            y = y >> 1;\r\n            x = (x * x);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    static void sort(long[] a) {\r\n        ArrayList<Long> l = new ArrayList<>();\r\n        for (long i : a) l.add(i);\r\n        Collections.sort(l);\r\n        for (int i = 0; i < a.length; i++) a[i] = l.get(i);\r\n    }\r\n\r\n    static class FastScanner {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringTokenizer st = new StringTokenizer(\"\");\r\n\r\n        String next() {\r\n            while (!st.hasMoreTokens())\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        int[] readArray(int n) {\r\n            int[] a = new int[n];\r\n            for (int i = 0; i < n; i++) a[i] = nextInt();\r\n            return a;\r\n        }\r\n\r\n        long[] readlongArray(int n){\r\n            long[] a = new long[n];\r\n            for (int i = 0; i < n; i++) a[i] = nextLong();\r\n            return a;\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n    }\r\n    static boolean prime[];\r\n\r\n    static void sieveOfEratosthenes(int n) {\r\n        prime = new boolean[n + 1];\r\n        for (int i = 0; i <= n; i++)\r\n            prime[i] = true;\r\n\r\n        for (int p = 2; p * p <= n; p++) {\r\n            // If prime[p] is not changed, then it is a\r\n            // prime\r\n            if (prime[p] == true) {\r\n                // Update all multiples of p\r\n                for (int i = p * p; i <= n; i += p)\r\n                    prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static int log2(int x) {\r\n        return (int) (Math.log(x) / Math.log(2));\r\n    }\r\n\r\n    public static long gcd(long a, long b) {\r\n        if (b == 0) {\r\n            return a;\r\n        }\r\n\r\n        return gcd(b, a % b);\r\n    }\r\n\r\n    static long nCk(int n, int k) {\r\n        long res = 1;\r\n        for (int i = n - k + 1; i <= n; ++i)\r\n            res *= i;\r\n        for (int i = 2; i <= k; ++i)\r\n            res /= i;\r\n        return res;\r\n    }\r\n\r\n\r\n}"
}