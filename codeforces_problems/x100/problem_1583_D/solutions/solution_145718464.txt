{
    "id": 145718464,
    "contestId": 1583,
    "creationTimeSeconds": 1644389184,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "vineet16"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\n\r\nimport java.io.*;\r\nimport java.math.*;\r\nimport java.awt.geom.*;\r\n\r\nimport static java.lang.Math.*;\r\n\r\npublic class Solution implements Runnable {\r\n\r\n\tlong mod1 = (long) 1e9 + 7;\r\n\tint mod2 = 998244353;\r\n\r\n\tpublic void solve() throws Exception {\r\n\t\tint n = sc.nextInt();\r\n\t\tint element_at_last = 1;\r\n\t\tfor(int i=2;i<=n;i++) {\r\n\t\t\tint input = query(i, n, 1);\r\n\t\t\tif(input!=0) {\r\n\t\t\t\telement_at_last = i;\r\n\t\t\t} else {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tint arr[] = new int[n];\r\n\t\tarr[n-1] = element_at_last;\r\n\t\tfor(int i=1;i<=n;i++) {\r\n\t\t\tif(i!=element_at_last) {\r\n\t\t\t\tint input = query(element_at_last, n, i);\r\n\t\t\t\tarr[input-1] = i; \r\n\t\t\t}\r\n\t\t}\r\n\t\tout.print(\"! \");\r\n\t\tfor(int i=0;i<n;i++) {\r\n\t\t\tout.print(arr[i]+\" \");\r\n\t\t}\r\n\t\tout.println();\r\n\t}\r\n\t\r\n\tpublic int query(int x, int n, int last) throws Exception {\r\n\t\tout.print(\"? \");\r\n\t\tfor(int i=0;i<n-1;i++) {\r\n\t\t\tout.print(x+\" \");\r\n\t\t}\r\n\t\t\r\n\t\tout.print(last);\r\n\t\tout.println();\r\n\t\tout.flush();\r\n\t\treturn sc.nextInt();\r\n\t}\r\n\r\n\tstatic long gcd(long a, long b) {\r\n\t\tif (a == 0)\r\n\t\t\treturn b;\r\n\t\treturn gcd(b % a, a);\r\n\t}\r\n\r\n\tstatic void sort(int[] a) {\r\n\t\tArrayList<Integer> l = new ArrayList<>();\r\n\t\tfor (int i : a)\r\n\t\t\tl.add(i);\r\n\t\tCollections.sort(l);\r\n\t\tfor (int i = 0; i < a.length; i++)\r\n\t\t\ta[i] = l.get(i);\r\n\t}\r\n\r\n\tstatic long ncr(int n, int r, long p) {\r\n\t\tif (r > n)\r\n\t\t\treturn 0l;\r\n\t\tif (r > n - r)\r\n\t\t\tr = n - r;\r\n\r\n\t\tlong C[] = new long[r + 1];\r\n\r\n\t\tC[0] = 1;\r\n\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\r\n\t\t\tfor (int j = Math.min(i, r); j > 0; j--)\r\n\t\t\t\tC[j] = (C[j] + C[j - 1]) % p;\r\n\t\t}\r\n\t\treturn C[r] % p;\r\n\t}\r\n\r\n\tvoid sieveOfEratosthenes(boolean prime[], int size) {\r\n\t\tfor (int i = 0; i < size; i++)\r\n\t\t\tprime[i] = true;\r\n\r\n\t\tfor (int p = 2; p * p < size; p++) {\r\n\t\t\tif (prime[p] == true) {\r\n\t\t\t\tfor (int i = p * p; i < size; i += p)\r\n\t\t\t\t\tprime[i] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tstatic int LowerBound(int a[], int x) { // smallest index having value >= x\r\n\t\tint l = -1, r = a.length;\r\n\t\twhile (l + 1 < r) {\r\n\t\t\tint m = (l + r) >>> 1;\r\n\t\t\tif (a[m] >= x)\r\n\t\t\t\tr = m;\r\n\t\t\telse\r\n\t\t\t\tl = m;\r\n\t\t}\r\n\t\treturn r;\r\n\t}\r\n\r\n\tstatic int UpperBound(int a[], int x) { // biggest index having value <= x\r\n\t\tint l = -1, r = a.length;\r\n\t\twhile (l + 1 < r) {\r\n\t\t\tint m = (l + r) >>> 1;\r\n\t\t\tif (a[m] <= x)\r\n\t\t\t\tl = m;\r\n\t\t\telse\r\n\t\t\t\tr = m;\r\n\t\t}\r\n\t\treturn l + 1;\r\n\t}\r\n\r\n\tpublic long power(long x, long y, long p) {\r\n\t\tlong res = 1;\r\n\t\t// out.println(x+\" \"+y);\r\n\t\tx = x % p;\r\n\t\tif (x == 0)\r\n\t\t\treturn 0;\r\n\r\n\t\twhile (y > 0) {\r\n\t\t\tif ((y & 1) == 1)\r\n\t\t\t\tres = (res * x) % p;\r\n\t\t\ty = y >> 1;\r\n\t\t\tx = (x * x) % p;\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\r\n\tstatic Throwable uncaught;\r\n\r\n\tBufferedReader in;\r\n\tFastScanner sc;\r\n\tPrintWriter out;\r\n\r\n\t@Override\r\n\tpublic void run() {\r\n\t\ttry {\r\n\t\t\tin = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\tout = new PrintWriter(System.out);\r\n\t\t\tsc = new FastScanner(in);\r\n\t\t\tsolve();\r\n\t\t} catch (Throwable uncaught) {\r\n\t\t\tSolution.uncaught = uncaught;\r\n\t\t} finally {\r\n\t\t\tout.close();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws Throwable {\r\n\t\tThread thread = new Thread(null, new Solution(), \"\", (1 << 26));\r\n\t\tthread.start();\r\n\t\tthread.join();\r\n\t\tif (Solution.uncaught != null) {\r\n\t\t\tthrow Solution.uncaught;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nclass FastScanner {\r\n\r\n\tBufferedReader in;\r\n\tStringTokenizer st;\r\n\r\n\tpublic FastScanner(BufferedReader in) {\r\n\t\tthis.in = in;\r\n\t}\r\n\r\n\tpublic String nextToken() throws Exception {\r\n\t\twhile (st == null || !st.hasMoreTokens()) {\r\n\t\t\tst = new StringTokenizer(in.readLine());\r\n\t\t}\r\n\t\treturn st.nextToken();\r\n\t}\r\n\r\n\tpublic int nextInt() throws Exception {\r\n\t\treturn Integer.parseInt(nextToken());\r\n\t}\r\n\r\n\tpublic int[] readArray(int n) throws Exception {\r\n\t\tint[] a = new int[n];\r\n\t\tfor (int i = 0; i < n; i++)\r\n\t\t\ta[i] = nextInt();\r\n\t\treturn a;\r\n\t}\r\n\r\n\tpublic long nextLong() throws Exception {\r\n\t\treturn Long.parseLong(nextToken());\r\n\t}\r\n\r\n\tpublic double nextDouble() throws Exception {\r\n\t\treturn Double.parseDouble(nextToken());\r\n\t}\r\n\r\n}"
}