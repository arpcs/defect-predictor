{
    "id": 145052895,
    "contestId": 1583,
    "creationTimeSeconds": 1643903940,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "master._.mind"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#ifdef LOCAL\r\n// https://github.com/AkshatAggarwal14/Competetive-Programming\r\n#include \"Akshat.hpp\"\r\n#else\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n#define dbg(...)\r\n#endif\r\nusing ll = long long;\r\nconstexpr auto sz = [](const auto &container) -> ll { return ll(container.size()); };\r\n#define all(x) (x).begin(), (x).end()\r\ntemplate <class T, class U = T>\r\nconstexpr bool amin(T &a, U &&b) { return b < a && (a = std::forward<U>(b), true); }\r\ntemplate <class T, class U = T>\r\nconstexpr bool amax(T &a, U &&b) { return a < b && (a = std::forward<U>(b), true); }\r\nconst ll MOD = 1e9 + 7;\r\n\r\n//! 2n - 1 queries\r\nvoid Solution() {\r\n    ll n;\r\n    cin >> n;\r\n    vector<ll> query(n + 1), ans(n + 1, -1), pos(n + 1, -1);\r\n    // query - used to ask query\r\n    // ans - to output\r\n    // pos[i] - position of i in ans\r\n    auto ask = [&]() -> ll {\r\n        cout << \"? \";\r\n        for (ll i = 1; i <= n; ++i) cout << query[i] << ' ';\r\n        cout << endl;\r\n        ll k;\r\n        cin >> k;\r\n        return k;\r\n    };\r\n    // find last element\r\n    /*\r\n        I set last element to n, and then set others to 1\r\n        1 1 1 1 1 n, so this will return some index IF last element is 1.\r\n        2 2 2 2 2 n, so this will return some index IF last element is 2... thus we find last element\r\n\r\n        IF NO QUERY GIVES ANSWER, LAST ELEMENT IS n\r\n    */\r\n    for (ll i = 1; i < n; ++i) {\r\n        fill(all(query), i);\r\n        query[n] = n;\r\n        ll id = ask();\r\n        if (id == 0) continue;\r\n        ans[n] = i, ans[id] = n;\r\n        pos[i] = n, pos[n] = id;\r\n        break;\r\n    }\r\n    if (ans[n] == -1) ans[n] = pos[n] = n;\r\n    // use last element to find others\r\n    /*\r\n        last last last last last 1, gives index of 1.\r\n        last last last last last 2, gives index of 2...\r\n    */\r\n    for (ll i = 1; i <= n; ++i) {\r\n        if (pos[i] != -1) continue;\r\n        fill(all(query), ans[n]);\r\n        query[n] = i;\r\n        ll id = ask();\r\n        ans[id] = i, pos[i] = id;\r\n    }\r\n    cout << \"! \";\r\n    for (ll i = 1; i <= n; ++i) cout << ans[i] << ' ';\r\n    cout << endl;\r\n}\r\n\r\n/*\r\n    ! can be done in n queries.\r\n    2 2 2 2 1\r\n    p[id] + 2 = p[n] + 1 -> p[id] = p[n] - 1\r\n    3 3 3 3 1 -> p[id] = p[n] - 2\r\n    k k k k 1 -> p[id] = p[n] - (k - 1), here if id was 0, i.e. we know this value doesnt exist, then p[n] = k - 1, now use this to find all previous queries.\r\n*/\r\n\r\nint main() {\r\n    cin.tie(nullptr)->sync_with_stdio(false);\r\n    cout << fixed << setprecision(12);\r\n    int tc = 1;\r\n    // cin >> tc;\r\n    while (tc--) {\r\n        Solution();\r\n    }\r\n    return 0;\r\n}"
}