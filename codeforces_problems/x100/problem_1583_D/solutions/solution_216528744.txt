{
    "id": 216528744,
    "contestId": 1583,
    "creationTimeSeconds": 1690778499,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "buffering"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#include <numeric>\r\nusing namespace std;\r\n \r\nusing ll = long long;\r\nusing vi = vector<int>;\r\nusing vl = vector<long long>;\r\nusing vb = vector<bool>;\r\nusing pii = pair<int, int>;\r\n \r\n#define pb push_back\r\n#define sz(a) ((int)((a).size()))\r\n#define all(x) begin(x), end(x)\r\n \r\nconst ll MOD = 1e9 + 7;\r\nconst ll MAXN = 1e5;\r\nconst ll INF = 1e17 + 19;\r\nint dx[] = {0, 0, 1, -1}, dy[] = {1, -1, 0, 0};\r\n \r\nll add(ll a, ll b) { return a + b >= MOD ? a + b - MOD : a + b; }\r\nll sub(ll a, ll b) { return a - b >= 0 ? a - b : a - b + MOD; }\r\nll mul(ll a, ll b) { return (a * b) % MOD; }\r\nll ADD(ll& a, ll b) { return a = add(a, b); }\r\nll SUB(ll& a, ll b) { return a = sub(a, b); }\r\nll MUL(ll& a, ll b) { return a = mul(a, b); }\r\n \r\nvoid IO(string s = \"\")\r\n{\r\n    if (s == \"\")\r\n    {\r\n        freopen(\"input.txt\", \"r\", stdin);\r\n        freopen(\"output 2.txt\", \"w\", stdout);\r\n    }\r\n    if (s != \"\")\r\n    {\r\n        freopen((s + \".in\").c_str(), \"r\", stdin);\r\n        freopen((s + \".out\").c_str(), \"w\", stdout);\r\n    }\r\n}\r\n \r\nll binpow(ll a, ll b)\r\n{\r\n    ll res = 1;\r\n    while (b)\r\n    {\r\n        if (b % 2 == 0)\r\n        {\r\n            a = (a * a) % MOD;\r\n            b /= 2;\r\n        }\r\n        else\r\n        {\r\n            res = (res * a) % MOD;\r\n            b--;\r\n        }\r\n    }\r\n    return res % MOD;\r\n}\r\ntemplate<typename T, typename V>\r\nvoid print(const pair<T, V> &x) {cout << '{'; cout << x.first; cout << \" ,\"; cout << x.second; cout << '}';}\r\ntemplate<typename T>\r\nvoid print(const vector<T> &v) {for (int i = 0; i < sz(v); i++) cout << v[i] << \" \"; cout << endl;}\r\n \r\n/*\r\n    NCK implementation\r\n    ll MAXN = 1001;\r\n    vector<ll> inv(MAXN);\r\n\tvector<ll> fact(MAXN);\r\n\tvector<ll> finv(MAXN);\r\n\tinv[1] = 1;\r\n\tfor(int i=2; i<1001; i++){\r\n\t\tinv[i] = MOD - (MOD/i) * inv[MOD % i] % MOD;\r\n\t}\r\n\tfact[0] = 1; \r\n\tfinv[0] = 1; \r\n\tfor(int i = 1; i < MAXN; i++){\r\n\t\tfact[i] = fact[i - 1] * i % MOD;\r\n\t\tfinv[i] = finv[i - 1] * inv[i] % MOD;\r\n\t}\r\n\tauto nck = [&](int n, int k){\r\n\t\tif (n < 0 || k < 0) return 0LL;\r\n\t\tif (n < k) return 0LL;\r\n\t\treturn fact[n] * fact_inv[n-k] % MOD * fact_inv[k] % MOD;\r\n\t};\r\n*/\r\ntemplate <class T> class SumSegmentTree {\r\n  private:\r\n\tconst T DEFAULT = 0;\r\n\r\n\tvector<T> segtree;\r\n\tint len;\r\n\r\n  public:\r\n\tSumSegmentTree(int len) : len(len), segtree(len * 2, DEFAULT) {}\r\n\r\n\tvoid set(int ind, T val) {\r\n\t\tind += len;\r\n\t\tsegtree[ind] = val;\r\n\t\tfor (; ind > 1; ind /= 2) {\r\n\t\t\tsegtree[ind / 2] = segtree[ind] + segtree[ind ^ 1];\r\n\t\t}\r\n\t}\r\n\r\n\tT range_sum(int start, int end) {\r\n\t\tT sum = DEFAULT;\r\n\t\tfor (start += len, end += len; start < end; start /= 2, end /= 2) {\r\n\t\t\tif (start % 2 == 1) { sum += segtree[start++]; }\r\n\t\t\tif (end % 2 == 1) { sum += segtree[--end]; }\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n};\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    \r\n    //IO();\r\n \r\n    int T = 1; //cin >> T;\r\n\r\n    while (T--) {\r\n\r\n        int n; cin >> n;\r\n\r\n        if (n == 1) {\r\n            cout << \"! 1\" << endl;\r\n            return;\r\n        }\r\n\r\n        int lastval = 0;\r\n        \r\n        vector<int> carray(n);\r\n\r\n        fill(all(carray), 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            carray[n - 1] = n - i;\r\n            cout << \"? \";\r\n            print(carray);\r\n            int index; cin >> index;\r\n            if (index != 0) {\r\n                lastval = i + 1;\r\n            }\r\n        }\r\n\r\n        map<int, int> pos;\r\n\r\n        for (int val = 1; val <= n; val++) {\r\n            if (val != lastval) {\r\n                if (val > lastval) {\r\n                    fill(all(carray), 1);\r\n                    int add = (val + 1) - lastval;\r\n                    carray[n - 1] = add;\r\n                    cout << \"? \";\r\n                    print(carray);\r\n                    int index; cin >> index;\r\n                    index--;\r\n                    pos[val] = index;\r\n                }\r\n                else {\r\n                    int add = (lastval + 1) - val;\r\n                    fill(all(carray), add);\r\n                    carray[n - 1] = 1;\r\n                    cout << \"? \";\r\n                    print(carray);\r\n                    int index; cin >> index;\r\n                    index--;\r\n                    pos[val] = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        vector<int> p(n);\r\n\r\n        p[n - 1] = lastval;\r\n\r\n        for (int i = 1; i <= n; i++) {\r\n            if (i != lastval) {\r\n                p[pos[i]] = i;\r\n            }\r\n        }\r\n\r\n        cout << \"! \";\r\n        print(p);\r\n\r\n        \r\n        \r\n\r\n        \r\n        \r\n    }\r\n}\r\n\r\n/*\r\n3 2 1 5 4\r\n1 1 1 1 2\r\n*/"
}