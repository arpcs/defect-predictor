{
    "id": 158454077,
    "contestId": 1685,
    "creationTimeSeconds": 1653504781,
    "relativeTimeSeconds": 4681,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "Golovanov399"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 17,
        "startTimeSeconds": 1653500100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 1433600,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define itn int\r\n#define all(x) (x).begin(), (x).end()\r\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\r\n\r\nusing namespace std;\r\n\r\ninline int nxt() {\r\n\tint x;\r\n\tscanf(\"%d\", &x);\r\n\treturn x;\r\n}\r\n\r\nbool is_balanced(const string& s) {\r\n\tint bal = 0;\r\n\tfor (char c : s) {\r\n\t\tbal += (c == '(' ? 1 : -1);\r\n\t\tif (bal < 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n\treturn bal == 0;\r\n}\r\n\r\nvoid solve() {\r\n\tint n = 2 * nxt();\r\n\tstring s;\r\n\tcin >> s;\r\n\tvector<int> p(n + 1);\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tp[i + 1] = p[i] + (s[i] == '(' ? 1 : -1);\r\n\t}\r\n\tif (*min_element(all(p)) == 0) {\r\n\t\tcout << \"0\\n\";\r\n\t\treturn;\r\n\t}\r\n\tint left_len = 0, right_len = 0;\r\n\twhile (p[left_len + 1] >= 0) {\r\n\t\t++left_len;\r\n\t}\r\n\twhile (p[n - right_len - 1] >= 0) {\r\n\t\t++right_len;\r\n\t}\r\n\tint l = *max_element(p.begin(), p.begin() + left_len + 1);\r\n\tint r = *max_element(p.end() - right_len - 1, p.end());\r\n\tint mn = *min_element(p.begin() + left_len, p.end() - right_len);\r\n\tint mx = *max_element(p.begin() + left_len, p.end() - right_len);\r\n\tassert(l + r - mn >= 0);\r\n\tif (l + r - mx >= 0) {\r\n\t\tcout << \"1\\n\";\r\n\t\tcout << max_element(p.begin(), p.begin() + left_len + 1) - p.begin() + 1 << \" \" << max_element(p.end() - right_len - 1, p.end()) - p.begin() << \"\\n\";\r\n\t} else {\r\n\t\tint pos = max_element(p.begin() + left_len, p.end() - right_len) - p.begin();\r\n\t\tcout << \"2\\n\";\r\n\t\tcout << max_element(p.begin(), p.begin() + left_len + 1) - p.begin() + 1 << \" \" << pos << \"\\n\";\r\n\t\tcout << pos + 1 << \" \" << max_element(p.end() - right_len - 1, p.end()) - p.begin() << \"\\n\";\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tint t = nxt();\r\n\twhile (t--) {\r\n\t\tsolve();\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n"
}