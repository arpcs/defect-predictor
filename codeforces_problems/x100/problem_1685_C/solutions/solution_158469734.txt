{
    "id": 158469734,
    "contestId": 1685,
    "creationTimeSeconds": 1653510023,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "Lain"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1653500100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n\r\nint main() {\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(NULL);\r\n\r\n  auto check = [&](string s)->bool {\r\n    int bal = 0;\r\n    for (int i =0; i < s.size(); i++) {\r\n      bal += (s[i] == '(');\r\n      bal -= (s[i] == ')');\r\n      if (bal < 0) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  int tt;\r\n  cin >> tt;\r\n  while(tt--) {\r\n    int n;\r\n    cin >> n;\r\n    string s;\r\n    cin >> s;\r\n    if (check(s)) {\r\n      cout << 0 << '\\n';\r\n      continue;\r\n    }\r\n    vector<pair<char,int>> st;\r\n    vector<int> taken(2*n);\r\n    vector<pair<int,int>> ans;\r\n    for (int i =0 ; i < 2*n; i++) {\r\n      if (s[i] == '(') {\r\n        if (st.empty())\r\n          continue;\r\n        taken[i] = 1;\r\n        taken[st.back().second] = 1;\r\n        st.pop_back();\r\n      }\r\n      else if (s[i] == ')') {\r\n        st.emplace_back(s[i], i);\r\n      }\r\n      else assert(false);\r\n    }\r\n    queue<int> q;\r\n    bool f = false;\r\n    for (int i = 0; i < 2*n; i++) {\r\n      if (s[i] == ')') {\r\n        if (q.empty()) continue;\r\n        else {\r\n          int x = q.front();\r\n          while(!q.empty() && q.front() < i) {\r\n            taken[q.front()] = 1;\r\n            q.pop();\r\n          }\r\n          taken[i] = 1;\r\n        }\r\n      }\r\n      else {\r\n        q.push(i);\r\n      }\r\n    }\r\n    int L = -1;\r\n    for (int i = 1; i < 2*n; i++) {\r\n      if (taken[i] && L == -1) L = i;\r\n      if (!taken[i] && taken[i-1]) {\r\n        ans.push_back({L+1, i});\r\n        L = -1;\r\n      }\r\n    }\r\n    if (L != -1)\r\n      ans.push_back({L+1, 2*n});\r\n    cout << ans.size() << '\\n';\r\n    for (auto& [x,y] : ans) {\r\n      cout << x << \" \" << y << '\\n';\r\n    }\r\n  }\r\n}\r\n// Reverse substrings, get balanced sequence\r\n// Minimum number of ops?\r\n// \r\n// Guess: At most k swaps? k = 2?\r\n// \r\n"
}