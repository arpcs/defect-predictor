{
    "id": 158470092,
    "contestId": 1685,
    "creationTimeSeconds": 1653510226,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "I_LOVE_DASHA_KARPENKO"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1653500100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 12800000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef pair<ll,ll> pp;\r\n#define endl '\\n'\r\n#define x1 dfds\r\n#define y1 dsfdsfe\r\n#define pb push_back\r\n#define forn(i,n) for(ll i = 1;i<=n;++i)\r\n#define fi first\r\n#define sc second\r\nconst ll DIM = 2e5+7;\r\nconst ll INF = 10E17;\r\nstruct node{\r\n    ll mi,l,r,mod,val,t_size,priority;\r\n};\r\nll ptr = 0,A[DIM];\r\nnode T[DIM];\r\nll createnode(ll pos){\r\n    ptr++;\r\n    T[ptr].mi = T[ptr].val = A[pos];\r\n    T[ptr].mod = 0;\r\n    T[ptr].l = -1;\r\n    T[ptr].r = -1;\r\n    T[ptr].t_size = 1;\r\n    T[ptr].priority = rand();\r\n    return ptr;\r\n}\r\nll n,m;\r\nll getsz(ll v){\r\n    if (v==-1)return 0;\r\n    return T[v].t_size;\r\n}\r\nll getmi(ll v){\r\n    if (v==-1)return INF;\r\n    return T[v].mi;\r\n}\r\nvoid update(ll root){\r\n    if (root==-1)return;\r\n    T[root].t_size = getsz(T[root].l)+getsz(T[root].r)+1;\r\n    T[root].mi = min(T[root].val,min(getmi(T[root].l),getmi(T[root].r)));\r\n}\r\nvoid push(ll root){\r\n    if (root==-1)return;\r\n    if (T[root].mod==0)return;\r\n    T[root].mod = 0;\r\n    swap(T[root].l,T[root].r);\r\n    if (T[root].r!=-1)T[T[root].r].mod^=1;\r\n    if (T[root].l!=-1)T[T[root].l].mod^=1;\r\n}\r\npp split(ll root,ll key,ll pos){\r\n    if (root==-1)return {-1,-1};\r\n    push(root);\r\n    ll rpos = pos+getsz(T[root].l)+1;\r\n    if (key<=rpos){\r\n        pp sp = split(T[root].l,key,pos);\r\n        T[root].l = sp.sc;\r\n        update(root);\r\n        return {sp.fi,root};\r\n    }\r\n    else{\r\n        pp sp = split(T[root].r,key,rpos);\r\n        T[root].r = sp.fi;\r\n        update(root);\r\n        return {root,sp.sc};\r\n    }\r\n}\r\nll merge(ll l,ll r){\r\n    if (l==-1 || r==-1)return (l==-1?r:l);\r\n    push(l);\r\n    push(r);\r\n    if (T[l].priority>T[r].priority){\r\n        T[l].r = merge(T[l].r,r);\r\n        update(l);\r\n        return l;\r\n    }\r\n    else{\r\n        T[r].l = merge(l,T[r].l);\r\n        update(r);\r\n        return r;\r\n    }\r\n}\r\nvoid reverse(ll root,ll l,ll r){\r\n    pp sp1 = split(root,r+1,0);\r\n    pp sp2 = split(sp1.fi,l,0);\r\n\r\n    if (sp2.sc!=-1)T[sp2.sc].mod^=1;\r\n    root = merge(merge(sp2.fi,sp2.sc),sp1.sc);\r\n    update(root);\r\n}\r\nll query(ll root,ll l,ll r){\r\n    pp sp1 = split(root,r+1,0);\r\n    pp sp2 = split(sp1.fi,l,0);\r\n    //cout<<sp1.fi<<' '<<sp1.sc<<endl;\r\n    //cout<<sp2.fi<<' '<<sp2.sc<<endl;\r\n    ll ans = -1;\r\n    if (sp2.sc!=-1)ans = T[sp2.sc].mi;\r\n    root = merge(merge(sp2.fi,sp2.sc),sp1.sc);\r\n    update(root);\r\n    return ans;\r\n}\r\nconst int N = 1e5+7;\r\nstring s;\r\n\r\n\r\nvoid solve(){\r\n    int n;\r\n    cin>>n;\r\n    n *= 2;\r\n\r\n    cin>>s;\r\n    for(int i = 1;i<=n;i+=1){\r\n        A[i] = s[i-1]=='('?1:-1;\r\n    }\r\n    ptr = 0;\r\n    int root = createnode(1);\r\n    for(int i = 2;i<=n;i+=1){\r\n        root = merge(root, createnode(i));\r\n    }\r\n    vector<pair<int,int> > ans;\r\n    int l = 1,r = n;\r\n    int cl = 0,cr = 0;\r\n    while(l!=r){\r\n        {\r\n            int cnt = cl;\r\n            int sy = query(root,l,l);\r\n            pair<int,int> mx = {-cl,l-1};\r\n            while(l<r && cnt+sy>=0){\r\n                cnt += sy;\r\n                mx = min(mx,{-cnt,l});\r\n                l += 1;\r\n                if (l<=n) {\r\n                    sy = query(root,l,l);\r\n                }\r\n            }\r\n            if (l==r){\r\n                break;\r\n            }\r\n            l = mx.second + 1;\r\n            cl = -mx.first;\r\n        }\r\n        {\r\n            pair<int,int> mi = {-cr,r+1};\r\n            int cnt = cr;\r\n            int sy = query(root,r,r);\r\n            while(r>l && cnt+sy<=0){\r\n                cnt += sy;\r\n                mi = max(mi,{-cnt,r});\r\n                r -= 1;\r\n                if (r>=1) {\r\n                    sy = query(root,r,r);\r\n                }\r\n            }\r\n            cr = -mi.first;\r\n            r = mi.second-1;\r\n        }\r\n        if (l>r){\r\n            break;\r\n        }\r\n        ans.push_back({l,r});\r\n        reverse(root,l,r);\r\n    }\r\n    assert(cl+cr==0);\r\n    cout<<ans.size()<<endl;\r\n    for(auto [l,r]:ans){\r\n        cout<<l<<' '<<r<<endl;\r\n    }\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n    int t = 1;\r\n    cin>>t;\r\n    while(t--){\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}