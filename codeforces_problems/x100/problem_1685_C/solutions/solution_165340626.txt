{
    "id": 165340626,
    "contestId": 1685,
    "creationTimeSeconds": 1658507448,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "KrK"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1653500100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 2457600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int Maxn = 200005;\r\n\r\nchar tmp[Maxn];\r\nint T;\r\nint n;\r\nstring s;\r\nint A[Maxn], B[Maxn];\r\n\r\nvoid Read(string &s)\r\n{\r\n    scanf(\"%s\", tmp);\r\n    s = tmp;\r\n}\r\n\r\nbool Check(const string &s)\r\n{\r\n    int st = 0;\r\n    for (int i = 0; i < s.length(); i++) {\r\n        st += s[i] == '('? 1: -1;\r\n        if (st < 0) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nstring Reverse(const string &s, int l, int r)\r\n{\r\n    string t = s;\r\n    reverse(t.begin() + l, t.begin() + r + 1);\r\n    return t;\r\n}\r\n\r\nstring getNext1(const string &s, bool pr = false)\r\n{\r\n    A[0] = 0;\r\n    int lef = Maxn, rig = -Maxn;\r\n    for (int i = 0; i < s.length(); i++) {\r\n        A[i + 1] = A[i] + (s[i] == '('? 1: -1);\r\n        if (A[i + 1] < 0) {\r\n            lef = min(lef, i + 1);\r\n            rig = max(rig, i + 1);\r\n        }\r\n    }\r\n    B[s.length() + 1] = 0;\r\n    for (int i = int(s.length()) - 1; i >= 0; i--)\r\n        B[i + 1] = B[i + 2] + (s[i] == '('? 1: -1);\r\n    int L = 0, R = s.length() + 1;\r\n    for (int i = 1; i < lef; i++)\r\n        if (A[i] > A[L]) L = i;\r\n    for (int i = rig + 1; i <= s.length(); i++)\r\n        if (B[i] < B[R]) R = i;\r\n    if (pr) printf(\"%d %d\\n\", L + 1, R - 1);\r\n    return Reverse(s, L, R - 2);\r\n}\r\n\r\nstring getNext2(const string &s, bool pr = false)\r\n{\r\n    A[0] = 0;\r\n    for (int i = 0; i < s.length(); i++)\r\n        A[i + 1] = A[i] + (s[i] == '('? 1: -1);\r\n    int x = 1;\r\n    for (int i = 2; i <= s.length(); i++)\r\n        if (A[i] > A[x]) x = i;\r\n    if (pr) printf(\"1 %d\\n\", x);\r\n    return Reverse(s, 0, x - 1);\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d\", &T);\r\n    while (T--) {\r\n        scanf(\"%d\", &n);\r\n        Read(s);\r\n        if (Check(s)) {\r\n            printf(\"0\\n\");\r\n            continue;\r\n        }\r\n        if (Check(getNext1(s))) {\r\n            printf(\"1\\n\");\r\n            getNext1(s, true);\r\n            continue;\r\n        }\r\n        printf(\"2\\n\");\r\n        auto nx1 = getNext2(s, true);\r\n        getNext1(nx1, true);\r\n    }\r\n    return 0;\r\n}\r\n"
}