{
    "id": 158596836,
    "contestId": 1685,
    "creationTimeSeconds": 1653643547,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "BlueDiamond"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1653500100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\nconst int N = (int) 2e5 + 7;\r\nconst int inf = (int) 1e9 + 7;\r\nint n, a[N], pref[N], value[N];\r\n\r\nstruct T {\r\n  int x;\r\n  int y;\r\n  int i;\r\n};\r\n\r\nsigned main() {\r\n#ifndef ONLINE_JUDGE\r\n  freopen (\"input.txt\", \"r\", stdin);\r\n#endif\r\n\r\n#ifdef ONLINE_JUDGE\r\n  ios::sync_with_stdio(0); cin.tie(0);\r\n#endif // ONLINE_JUDGE\r\n\r\n  int Tests;\r\n  cin >> Tests;\r\n  for (int tc = 1; tc <= Tests; tc++) {\r\n    {\r\n      string str;\r\n      cin >> n >> str;\r\n      n *= 2;\r\n      assert((int) str.size() == n);\r\n      for (int i = 1; i <= n; i++) {\r\n        char ch = str[i - 1];\r\n        assert(ch == '(' || ch == ')');\r\n        a[i] = ((ch == '(') ? (+1) : (-1));\r\n        pref[i] = pref[i - 1] + a[i];\r\n      }\r\n    }\r\n    if (*min_element(pref + 1, pref + n + 1) == 0) {\r\n      cout << \"0\\n\";\r\n      continue;\r\n    }\r\n    int firstBad = 0, lastBad = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n      if (pref[i] < 0) {\r\n        lastBad = i;\r\n      }\r\n    }\r\n    for (int i = n; i >= 1; i--) {\r\n      if (pref[i] < 0) {\r\n        firstBad = i;\r\n      }\r\n    }\r\n    int lsol = -1, rsol = -1;\r\n    assert(firstBad <= lastBad);\r\n\r\n    int allMax = -inf;\r\n\r\n    for (int i = firstBad + 1; i < lastBad; i++) {\r\n      allMax = max(allMax, pref[i - 1]);\r\n    }\r\n    for (int i = lastBad; i <= n; i++) {\r\n      value[i] = pref[i - 1];\r\n      if (i > lastBad) {\r\n        value[i] = max(value[i], value[i - 1]);\r\n      }\r\n    }\r\n    vector<T> guys;\r\n    for (int r = lastBad; r <= n; r++) {\r\n      guys.push_back({pref[r], value[r] - pref[r], r});\r\n    }\r\n\r\n    for (int l = firstBad; l >= 1; l--) {\r\n      allMax = max(allMax, pref[l - 1]);\r\n      for (auto &it : guys) {\r\n        if (allMax <= pref[l - 1] + it.first && it.second <= pref[l - 1]) {\r\n          lsol = l;\r\n          rsol = it.r;\r\n        }\r\n      }\r\n    }\r\n    if (lsol !=- 1) {\r\n      cout << \"1\\n\";\r\n      cout << lsol << \" \" << rsol << \"\\n\";\r\n      continue;\r\n    }\r\n    int P = max_element(pref + 1, pref + n + 1) - pref;\r\n    cout << \"2\\n\";\r\n    cout << 1 << \" \" << P << \"\\n\";\r\n    cout << P + 1 << \" \" << n << \"\\n\";\r\n  }\r\n}\r\n\r\n",
    "suggested_categories": [
        "algorithm",
        "data structures",
        "dynamic programming",
        "error handling",
        "input/output handling",
        "mathematics",
        "quality assurance",
        "testing",
        "assertion",
        "efficiency",
        "optimization",
        "code structure",
        "code organization",
        "code readability",
        "code complexity",
        "code comments",
        "code optimization",
        "competitive programming",
        "debugging",
        "algorithmic thinking"
    ]
}