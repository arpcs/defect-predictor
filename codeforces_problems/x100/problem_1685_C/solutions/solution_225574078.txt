{
    "id": 225574078,
    "contestId": 1685,
    "creationTimeSeconds": 1695850308,
    "relativeTimeSeconds": 6708,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "galen_colin"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1695843600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 26931200,
    "source": "#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n \r\n// #pragma GCC optimize(\"O3,unroll-loops\")\r\n// #pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n \r\n/* \r\nfind my code templates at https://github.com/galencolin/cp-templates\r\nalso maybe subscribe please thanks \r\n*/\r\n \r\n#define send {ios_base::sync_with_stdio(false);}\r\n#define help {cin.tie(NULL);}\r\n#define f first\r\n#define s second\r\n#define getunique(v) {sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());}\r\n \r\nusing ll = long long;\r\n// using ll = int;\r\n// #pragma warning(\"int\")\r\n//\r\nusing vl = vector<ll>;\r\nusing pl = pair<ll, ll>;\r\n \r\ntypedef long double ld;\r\ntypedef unsigned long long ull;\r\n \r\n#include <ext/pb_ds/assoc_container.hpp> \r\n#include <ext/pb_ds/tree_policy.hpp>\r\n \r\nusing namespace std;\r\nusing namespace __gnu_pbds; \r\n \r\ntemplate <typename num_t>\r\nusing ordered_set = tree<num_t, null_type, less<num_t>, rb_tree_tag, tree_order_statistics_node_update>;\r\n \r\n// benq - print any container + pair\r\ntemplate<typename T, typename = void> struct is_iterable : false_type {};\r\ntemplate<typename T> struct is_iterable<T, void_t<decltype(begin(declval<T>())),decltype(end(declval<T>()))>> : true_type {};\r\ntemplate<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v);\r\ntemplate<typename A, typename B> ostream& operator<<(ostream &cout, pair<A, B> const &p) { return cout << \"(\" << p.f << \", \" << p.s << \")\"; }\r\ntemplate<typename T> typename enable_if<is_iterable<T>::value&&!is_same<T, string>::value,ostream&>::type operator<<(ostream &cout, T const &v) {\r\n    cout << \"[\"; \r\n    for (auto it = v.begin(); it != v.end();) {\r\n        cout << *it;\r\n        if (++it != v.end()) cout << \", \";\r\n    }\r\n    return cout << \"]\";\r\n}\r\ntemplate<typename A, typename B> istream& operator>>(istream& cin, pair<A, B> &p) {\r\n    cin >> p.first;\r\n    return cin >> p.second;\r\n}\r\n\r\ntemplate<typename T> void debug(string s, T x) {cerr << \"\\033[1;34m\" << s << \"\\033[0;32m = \\033[35m\" << x << \"\\033[0m\\n\";}\r\ntemplate<typename T, typename... Args> void debug(string s, T x, Args... args) {for (int i=0, b=0; i<(int)s.size(); i++) if (s[i] == '(' || s[i] == '{') b++; else\r\n        if (s[i] == ')' || s[i] == '}') b--; else if (s[i] == ',' && b == 0) {cerr << \"\\033[1;34m\" << s.substr(0, i) << \"\\033[0;32m = \\033[35m\" << x << \"\\033[31m | \"; debug(s.substr(s.find_first_not_of(' ', i + 1)), args...); break;}}\r\ntemplate<typename T> void debug_nameless(T x) {cerr << \"\\033[35m\" << x << \"\\033[0m\\n\";}\r\ntemplate<typename T, typename... Args> void debug_nameless(T x, Args... args) {cerr << \"\\033[35m\" << x << \"\\033[31m | \"; debug_nameless(args...);}\r\n\r\n#ifdef galen_colin_local\r\n#define pr(...) debug(#__VA_ARGS__, __VA_ARGS__)\r\n#define prs(...) debug_nameless(__VA_ARGS__)\r\nconst bool local_ = true;\r\n#else\r\n#define pr(...) 135\r\n#define prs(...) 135\r\nconst bool local_ = false;\r\n#endif\r\n \r\nmt19937_64 rng(std::chrono::steady_clock::now().time_since_epoch().count());\r\n// mt19937_64 rng(61378913);\r\n/* usage - just do rng() */\r\n \r\nvoid usaco(string filename) {\r\n  // #pragma message(\"be careful, freopen may be wrong\")\r\n    freopen((filename + \".in\").c_str(), \"r\", stdin);\r\n    freopen((filename + \".out\").c_str(), \"w\", stdout);\r\n}\r\n \r\n// #include <atcoder/all>\r\n// using namespace atcoder;\r\n \r\nconst ld pi = 3.14159265358979323846;\r\n// const ll mod = 1000000007;\r\n// const ll mod = 998244353;\r\n// ll mod;\r\n\r\n\r\n\r\nll n, m, q, k, l, r, x, y, z;\r\nconst ll template_array_size = 1e6 + 121532;\r\nll a[template_array_size];\r\nll b[template_array_size];\r\nll c[template_array_size];\r\nstring s, t;\r\n\r\nbool bal(string s) {\r\n    ll d = 0;\r\n    for (char c: s) {\r\n        if (c == ')') --d;\r\n        else ++d;\r\n        if (d < 0) return 0;\r\n    }\r\n    return 1;\r\n}\r\n\r\nvoid solve(int tc = 0) {\r\n    vector<pl> ops;\r\n\r\n    cin >> n >> s;\r\n    n *= 2;\r\n\r\n    ll vl = 0, vr = n - 1;\r\n    while (!bal(s)) {\r\n       ll ld = 0, rd = 0;\r\n        pl ml = {-1, -1};\r\n        pl mr = {-1, n};\r\n            ll p;\r\n            for (p = 0; p < n; p++) {\r\n                if (s[p] == '(') ++ld;\r\n                else --ld;\r\n                pr(p, ld);\r\n                if (ld < 0) break;\r\n                if (ld > ml.f) ml = {ld, p};\r\n            }\r\n            for (p = n - 1; p >= 0; p--) {\r\n                if (s[p] == ')') ++rd;\r\n                else --rd;\r\n                if (rd < 0) break;\r\n                if (rd > mr.f) mr = {rd, p};\r\n            }\r\n            pr(ml, mr);\r\n            vl = ml.s + 1;\r\n            vr = mr.s - 1;\r\n            ops.push_back({vl, vr});\r\n            reverse(s.begin() + vl, s.begin() + vr + 1);\r\n        pr(s);\r\n    }\r\n\r\n    cout << ops.size() << '\\n';\r\n    for (auto [x, y]: ops) cout << x + 1 << \" \" << y + 1 << '\\n';\r\n}\r\n\r\nint main() {\r\n    #ifdef galen_colin_local\r\n        auto begin = std::chrono::high_resolution_clock::now();\r\n    #endif\r\n    \r\n    send help\r\n \r\n    #ifndef galen_colin_local\r\n        // usaco(\"evacuation\");\r\n    #endif\r\n    \r\n    // usaco(\"cowland\");\r\n    \r\n    // freopen(\"tc.cpp\", \"r\", stdin);\r\n    // freopen(\"tc2.cpp\", \"w\", stdout);\r\n    // freopen(\"in.txt\", \"r\", stdin);\r\n    // freopen(\"out.txt\", \"w\", stdout);\r\n        \r\n    cout << setprecision(15) << fixed;\r\n    cerr << setprecision(4) << fixed;\r\n    \r\n        \r\n    int tc = 1;\r\n    cin >> tc;\r\n    for (int t = 0; t < tc; t++) {\r\n        pr(t); prs(string(50, '-'));\r\n        solve(t);\r\n        prs(string(50, '-') + \"\\n\");\r\n    }\r\n    \r\n    #ifdef galen_colin_local\r\n        auto end = std::chrono::high_resolution_clock::now();\r\n        cerr << setprecision(4) << fixed;\r\n        cerr << \"Execution time: \" << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << \" seconds\" << endl;\r\n    #endif\r\n}",
    "suggested_categories": [
        "c++ programming",
        "algorithm design",
        "data structures",
        "template programming",
        "code optimization",
        "debugging techniques",
        "competitive programming",
        "mathematical computations",
        "input/output handling",
        "code organization",
        "random number generation",
        "error handling",
        "problem-solving approach",
        "time complexity analysis",
        "chrono library usage",
        "string manipulation",
        "pair container usage",
        "code commenting",
        "file handling",
        "precision handling"
    ]
}