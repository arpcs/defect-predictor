{
    "id": 158453535,
    "contestId": 1685,
    "creationTimeSeconds": 1653504666,
    "relativeTimeSeconds": 4566,
    "problem": {
        "contestId": 1685,
        "index": "C",
        "name": "Bring Balance",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1685,
        "members": [
            {
                "handle": "mango_lassi"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 9,
        "startTimeSeconds": 1653500100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 1536000,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nbool isValid(string str) {\n\tint cur = 0;\n\tfor (auto c : str) {\n\t\tcur += (c == '(' ? 1 : -1);\n\t\tif (cur < 0) return false;\n\t}\n\treturn cur == 0;\n}\n\nstring flipRange(string str, int a, int b) {\n\tfor (int i = 0; a+i < b-i; ++i) swap(str[a + i], str[b - i]);\n\treturn str;\n}\n\nvoid solve() {\n\tint n;\n\tcin >> n;\n\n\tstring str;\n\tcin >> str;\n\n\tif (isValid(str)) {\n\t\tcout << 0 << '\\n';\n\t} else {\n\t\t// Must make all prefix sums nonnegative\n\t\t// Take longest negative prefix, swap that \n\n\t\t// Say the largest prefix sum is at position i. Flip that prefix\n\t\t// Now, all prefix sums up until that point are \n\n\t\t// 2 operations is always enough!\n\t\t//\tFlip prefix ending at i, where i is the rightmost position where the maximum prefix sum is\n\t\t// \tFlip the suffix starting at i + 1\n\n\t\t// How to check if 1 operation is sufficient?\n\t\t// Let i be the largest prefix sum before we go negative, and j the smallest suffix sum before we go positive. Flip [i, j]?\n\t\t\n\n\t\tvector<int> prefs(2*n + 1, 0);\n\t\tfor (int i = 0; i < 2*n; ++i) prefs[i + 1] = prefs[i] + (str[i] == '(' ? 1 : -1);\n\n\t\tpair<int, int> le = {-1, -1};\n\t\tfor (int i = 0; i < 2 * n; ++i) {\n\t\t\tif (prefs[i + 1] < 0) break;\n\t\t\tle = max(le, {prefs[i + 1], i});\n\t\t}\n\n\t\tpair<int, int> ri = {-1, 2*n};\n\t\tfor (int i = 2*n - 1; i >= 0; --i) {\n\t\t\tif (prefs[i] < 0) break;\n\t\t\tri = max(ri, {prefs[i], i});\n\t\t}\n\t\t\n\t\t/*\n\t\tcerr << le.first << ' ' << le.second << '\\n';\n\t\tcerr << ri.first << ' ' << ri.second << '\\n';\n\t\tcerr << \"Test flipping range \" << le.second + 1 << ' ' << ri.second - 1 << '\\n';\n\t\t*/\n\n\t\tif (isValid(flipRange(str, le.second + 1, ri.second - 1))) {\n\t\t\tcout << 1 << '\\n';\n\t\t\tcout << le.second + 2 << ' ' << ri.second << '\\n';\n\t\t} else {\n\t\t\tle = {-1, 0};\n\t\t\tfor (int i = 0; i < 2*n; ++i) le = max(le, {prefs[i + 1], i});\n\t\n\t\t\tint x = le.second;\n\t\t\tassert(x + 2 < 2 * n);\n\t\t\tassert(isValid(flipRange(flipRange(str, 0, x), x + 1, 2*n - 1)));\n\t\t\n\t\t\tcout << 2 << '\\n';\n\t\t\tcout << 1 << ' ' << le.second + 1 << '\\n';\n\t\t\tcout << le.second + 2 << ' ' << 2*n << '\\n';\n\t\t}\n\t}\n\t// cerr << endl;\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(0);\n\n\tint t;\n\tcin >> t;\n\tfor (int ti = 0; ti < t; ++ti) solve();\n}\n"
}