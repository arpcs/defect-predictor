{
    "id": 167861720,
    "contestId": 1491,
    "creationTimeSeconds": 1660218239,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "BlueDiamond"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint get(vector<int> a, vector<int> b) {\r\n  cout<<\"? \"<<(int)a.size()<<\" \"<<(int)b.size()<<endl;\r\n  for (auto &x:a) cout<<x<<\" \";cout<<endl;\r\n  for (auto &x:b) cout<<x<<\" \";cout<<endl;\r\n  int sol;\r\n  cin>>sol;\r\n  return sol;\r\n}\r\n\r\nint main() {\r\n  int tests;\r\n  cin>>tests;\r\n  for (int tc=1;tc<=tests;tc++) {\r\n    int n;\r\n    bool found=0;\r\n    cin>>n;\r\n    vector<int> pref={1};\r\n    for (int sc=2;sc<=n;sc++) {\r\n      if (get(pref,{sc})==0){\r\n        pref.push_back(sc);\r\n        continue;\r\n      }\r\n      /// 0 0 0 0 0 !=0 !=0 !=0 !=0\r\n      int low=1,high=sc-1,fi=-1;\r\n      while(low<=high) {\r\n        int mid=(low+high)/2;\r\n        pref.resize(mid);\r\n        if (get(pref,{sc})!=0){\r\n          fi=mid;\r\n          low=mid+1;\r\n        }else{\r\n          high=mid-1;\r\n        }\r\n      }\r\n      assert(fi!=-1);\r\n      vector<int> sol;\r\n      for (int i=1;i<sc;i++) if(i!=fi) sol.push_back(i);\r\n      for (int i=sc+1;i<=n;i++) if(get({sc},{i})==0) sol.push_back(i);\r\n      cout<<\"! \";\r\n      cout<<(int)sol.size()<<\" \";\r\n      for (auto &i:sol){\r\n        cout<<i<<\" \";\r\n      }\r\n      cout<<endl;\r\n      found=1;\r\n      break;\r\n    }\r\n    if(!found){\r\n      cout<<\"sad!\"<<endl;\r\n      exit(0);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n"
}