{
    "id": 155194178,
    "contestId": 1491,
    "creationTimeSeconds": 1651141113,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "Depth_First_Search"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define Tp template<typename Ty>\r\n#define Ts template<typename Ty,typename... Ar>\r\n#define Rg register\r\n#define RI Rg int\r\n#define Cn const\r\n#define CI Cn int&\r\n#define I inline\r\n#define W while\r\n#define N 2000\r\nusing namespace std;\r\nint n,w,ct,f[N+5];\r\nI int Q(CI l1,CI r1,CI l2,CI r2)\r\n{\r\n\tprintf(\"? %d %d\\n\",r1-l1+1,r2-l2+1);\r\n\tfor(RI i=l1;i<=r1;++i) printf(\"%d \",i);putchar('\\n');\r\n\tfor(RI i=l2;i<=r2;++i) printf(\"%d \",i);putchar('\\n'),fflush(stdout);\r\n\tRI t;scanf(\"%d\",&t);return t;\r\n}\r\nI void Find(CI l,CI r)\r\n{\r\n\tif(l==r) return (void)(--ct,f[l]=1);RI u=l+r>>1;Q(w,w,l,u)?Find(l,u):Find(u+1,r);\r\n}\r\nbool Solve(CI l,CI r)\r\n{\r\n\tif(l==r) return false;if(r==l+1) return Q(l,l,r,r)&&(ct-=2,f[l]=f[r]=1,w=l,true);\r\n\tRI u=l+r>>1,L=Solve(l,u),R=Solve(u+1,r);if(L&&R) return true;\r\n\tif(!L&&!R) return Q(l,u,u+1,r)&&(Find(l,u),Find(u+1,r),true);\r\n\tif(L) return Q(w,w,u+1,r)&&(Find(u+1,r),0),true;else return Q(w,w,l,u)&&(Find(l,u),0),true;\r\n}\r\nint main()\r\n{\r\n\tRI Tt,i;scanf(\"%d\",&Tt);W(Tt--)\r\n\t{\r\n\t\tfor(scanf(\"%d\",&n),ct=n,i=1;i<=n;++i) f[i]=0;Solve(1,n);\r\n\t\tfor(printf(\"! %d \",ct),i=1;i<=n;++i) !f[i]&&printf(\"%d \",i);putchar('\\n'),fflush(stdout);\r\n\t}return 0;\r\n}"
}