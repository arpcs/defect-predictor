{
    "id": 213865344,
    "contestId": 1491,
    "creationTimeSeconds": 1689403283,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "Wii"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 12083200,
    "source": "/**\r\n *                       \\`*-.\r\n *                        )  _`-.\r\n *                       .  : `. .\r\n *                       : _   '  \\\r\n *                       ; *` _.   `*-._\r\n *                       `-.-'          `-.\r\n *                         ;       `       `.\r\n *                         :.       .        \\\r\n *                         . \\  .   :   .-'   .\r\n *                         '  `+.;  ;  '      :\r\n *                         :  '  |    ;       ;-.\r\n *                         ; '   : :`-:     _.`* ;\r\n *          [WA]        .*' /  .*' ; .*`- +'  `*'\r\n *                      `*-*   `*-*  `*-*'\r\n**/\r\n/** :)) **/\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef double db;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair<int, int> pii;\r\n\r\n#define X first\r\n#define Y second\r\n#define gcd __gcd\r\n#define pb push_back\r\n#define all(x) (x).begin(), (x).end()\r\n#define bit(i, mask) ((mask) >> (i) & 1)\r\n#define reset(x, val) memset(x, val, sizeof(x))\r\n#define foru(i,a,b) for(int i = (a); i <= (b); ++i)\r\n#define ford(i,a,b) for(int i = (a); i >= (b); --i)\r\n#define FastIO ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n\r\ntemplate<typename T> bool maximize(T &res, const T &val) { if (res < val) { res = val; return true; } return false; }\r\ntemplate<typename T> bool minimize(T &res, const T &val) { if (res > val) { res = val; return true; } return false; }\r\n\r\nconst ll Linf = 0x3f3f3f3f3f3f3f3f;\r\nconst int Inf = 0x3f3f3f3f;\r\nconst int Mod = 1e9 + 7;\r\nconst int Lim = 1e6 + 5;\r\nconst int inv6 = 166666668;\r\n\r\n// #define Sieve\r\n#ifdef Sieve\r\n    vector<int> pr;\r\n    vector<int> lpf;\r\n    void Linear_sieve(int n = Lim) {\r\n        pr.assign(1, 2);\r\n        lpf.assign(n + 1, 2);\r\n    \r\n        for (int x = 3; x <= n; x += 2) {\r\n            if (lpf[x] == 2) pr.push_back(lpf[x] = x);\r\n            for (int i = 1; i < pr.size() && pr[i] <= lpf[x] && pr[i] * x <= n; ++i)\r\n                lpf[pr[i] * x] = pr[i];\r\n        }\r\n    }\r\n#endif\r\n\r\n#define Ckn_calc\r\n#ifdef Ckn_calc\r\n    const int LIM = 1e6 + 16;\r\n    const int MOD = Mod;\r\n    \r\n    int fact[LIM + 10]; /// factorial:         fact[n] = n!\r\n    int invs[LIM + 10]; /// inverse modular:   invs[n] = n^(-1)\r\n    int tcaf[LIM + 10]; /// inverse factorial: tcaf[n] = (n!)^(-1)\r\n    void precal_nck(int n = LIM)\r\n    {\r\n        fact[0] = fact[1] = 1;\r\n        invs[0] = invs[1] = 1;\r\n        tcaf[0] = tcaf[1] = 1;\r\n        for (int i = 2; i <= n; ++i)\r\n        {\r\n            fact[i] = (1LL * fact[i - 1] * i) % MOD;\r\n            invs[i] = MOD - 1LL * (MOD / i) * invs[MOD % i] % MOD;\r\n            tcaf[i] = (1LL * tcaf[i - 1] * invs[i]) % MOD;\r\n        }\r\n    }\r\n    \r\n    ll C(int n, int k) {\r\n        if (n < k || k < 0) return 0;\r\n\r\n        ll res = fact[n];\r\n        res *= tcaf[k], res %= Mod;\r\n        res *= tcaf[n - k], res %= Mod;\r\n        return res;\r\n    }\r\n    \r\n    ll P(int n, int k) {\r\n        ll res = fact[n];\r\n        res *= tcaf[n - k], res %= Mod;\r\n        return res;\r\n    }\r\n#endif\r\n\r\n/// ====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====*====\r\n\r\nconst int base = 31;\r\nconst int N = 1e4 + 5;\r\nconst int K = 10 + 2;\r\nconst int dx[] = {-1, +0, +1, +0};\r\nconst int dy[] = {+0, -1, +0, +1};\r\nconst int block_size = sqrt(2e9) + 2;\r\n\r\nint get_ans() {\r\n    int x; cin >> x; return x;   \r\n}\r\n\r\nint ask(int l1, int r1, int l2, int r2) {\r\n    cout << \"? \" << r1 - l1 + 1 << \" \" << r2 - l2 + 1 << \"\\n\";\r\n    foru(i, l1, r1) cout << i << \" \"; cout << \"\\n\";\r\n    foru(i, l2, r2) cout << i << \" \"; cout << \"\\n\";\r\n    \r\n    cout << endl;\r\n    return get_ans();\r\n}\r\n\r\nint n, x, p;\r\nint mark[N];\r\n\r\nvoid solve() {\r\n    cin >> n;\r\n    \r\n    foru(i, 1, n) {\r\n        x = ask(i, i, i + 1, n);\r\n        if (x != 0) {\r\n            p = i;\r\n            break;\r\n        }\r\n        \r\n        mark[i] = 1;\r\n    }\r\n    \r\n    foru(i, p + 1, n) {\r\n        int t = ask(p, p, i, i);\r\n        if (t == 0) mark[i] = 1;\r\n    }\r\n    \r\n    int l = 1, r = p;\r\n    \r\n    int times = log2(n);\r\n    while (l < r) {\r\n        int mid = (l + r) >> 1;\r\n        int x = ask(1, mid, p, p);\r\n        if (x != 0) r = mid - 1; else l = mid + 1;\r\n    }\r\n    \r\n    mark[r] = 0;\r\n    int cnt = 0;\r\n    foru(i, 1, n) cnt += mark[i];\r\n    \r\n    cout << \"! \" << cnt << \" \";\r\n    foru(i, 1, n) if (mark[i]) cout << i << \" \"; cout << endl;\r\n    \r\n    foru(i, 1, n) mark[i] = 0;\r\n}\r\n\r\nsigned main() {\r\n    // FastIO;\r\n\r\n    #define task \"test\"\r\n    if (fopen(task\".inp\", \"r\")) {\r\n\t\tfreopen(task\".inp\", \"r\", stdin);\r\n\t\tfreopen(task\".out\", \"w\", stdout);\r\n\t}\r\n    \r\n    #ifdef Sieve\r\n        Linear_sieve();\r\n    #endif\r\n    \r\n    #ifdef Ckn_calc\r\n        precal_nck();\r\n    #endif\r\n    \r\n    int ntest = 1;\r\n    cin >> ntest;\r\n    while (ntest--) {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/**  /\\_/\\\r\n *  (= ._.)\r\n *  / >TL \\>AC\r\n**/\r\n\r\n/*\r\nNN--\r\n*/"
}