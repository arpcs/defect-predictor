{
    "id": 205403707,
    "contestId": 1491,
    "creationTimeSeconds": 1683793183,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 79,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nvoid just_do_it();\n\nint main() {\n\t#ifdef KAMIRULEZ\n\t\tfreopen(\"kamirulez.inp\", \"r\", stdin);\n\t\tfreopen(\"kamirulez.out\", \"w\", stdout);\n\t#endif\n\tios_base::sync_with_stdio(0);\n\tcin.tie(0);\n\tjust_do_it();\n\treturn 0;\n}\n\nstruct monster {\n\tint hp, atk, cnt;\n};\n\nbool operator<(monster m1, monster m2) {\n\treturn m1.cnt * m2.atk < m2.cnt * m1.atk;\n}\n\nconst int maxN = 1e5 + 20;\nmonster M[maxN];\n\nvoid test() {\n\tint n;\n\tcin >> n;\n\tint non2 = -1;\n\tfor (int i = 2; i <= n; i++) {\n\t\tcout << \"?\" << \" \" << 1 << \" \" << i - 1 << endl;\n\t\tcout << i << endl;\n\t\tfor (int j = 1; j <= i - 1; j++) {\n\t\t\tcout << j << \" \";\n\t\t}\n\t\tcout << endl;\n\t\tint res;\n\t\tcin >> res;\n\t\tif (res != 0) {\n\t\t\tnon2 = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tvector<int> zero;\n\tfor (int i = non2 + 1; i <= n; i++) {\n\t\tcout << \"?\" << \" \" << 1 << \" \" << 1 << endl;\n\t\tcout << non2 << endl;\n\t\tcout << i << endl;\n\t\tint res;\n\t\tcin >> res;\n\t\tif (res == 0) {\n\t\t\tzero.push_back(i);\n\t\t}\n\t}\n\tint lt = 1;\n\tint rt = non2 - 1;\n\tint non1 = -1;\n\twhile (lt <= rt) {\n\t\tint mt = (lt + rt) / 2;\n\t\tcout << \"?\" << \" \" << 1 << \" \" << mt << endl;\n\t\tcout << non2 << endl;\n\t\tfor (int i = 1; i <= mt; i++) {\n\t\t\tcout << i << \" \";\n\t\t}\n\t\tcout << endl;\n\t\tint res;\n\t\tcin >> res;\n\t\tif (res != 0) {\n\t\t\tnon1 = mt;\n\t\t\trt = mt - 1;\n\t\t}\n\t\telse {\n\t\t\tlt = mt + 1;\n\t\t}\n\t}\n\tfor (int i = 1; i < non2; i++) {\n\t\tif (i != non1) {\n\t\t\tzero.push_back(i);\n\t\t}\n\t}\n\tcout << \"!\" << \" \" << zero.size() << \" \";\n\tfor (auto i: zero) {\n\t\tcout << i << \" \";\n\t}\n\tcout << endl;\n}\n\nvoid just_do_it() {\n\tint t;\n\tcin >> t;\n\tfor (int i = 0; i < t; i++) {\n\t\ttest();\n\t}\n}\n\t  \t  \t \t  \t \t  \t\t\t  \t   \t  \t \t"
}