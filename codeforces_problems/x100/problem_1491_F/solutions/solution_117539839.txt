{
    "id": 117539839,
    "contestId": 1491,
    "creationTimeSeconds": 1622157586,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "hzk_cpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 79,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\nconst int N=2000;\r\n\r\nint n;\r\n\r\nvoid into(){\r\n  cin>>n;\r\n}\r\n\r\nint a[N+9];\r\n\r\nvoid work(){\r\n  for (int i=1;i<=n;++i) a[i]=0;\r\n  int i;\r\n  for (i=2;i<=n;++i){\r\n\tcout<<\"? \"<<i-1<<\" 1\"<<endl;\r\n\tfor (int j=1;j<i;++j) cout<<j<<' ';\r\n\tcout<<endl;\r\n\tcout<<i<<endl;\r\n\tint t;\r\n\tcin>>t;\r\n\tif (!t) continue;\r\n\tint l=1,r=i-2,p=i-1;\r\n\tfor (;l<=r;){\r\n\t  int mid=l+r>>1;\r\n\t  cout<<\"? \"<<mid<<\" 1\"<<endl;\r\n\t  for (int j=1;j<=mid;++j) cout<<j<<' ';\r\n\t  cout<<endl;\r\n\t  cout<<i<<endl;\r\n\t  int t;\r\n\t  cin>>t;\r\n\t  t?(p=mid,r=mid-1):l=mid+1;\r\n\t}\r\n\ta[p]=a[i]=1;\r\n\tbreak;\r\n  }\r\n  int p=i;\r\n  for (++i;i<=n;++i){\r\n\tcout<<\"? 1 1\"<<endl;\r\n\tcout<<i<<endl;\r\n\tcout<<p<<endl;\r\n\tint t;\r\n\tcin>>t;\r\n\tif (t) a[i]=1;\r\n  }\r\n}\r\n\r\nvoid outo(){\r\n  vector<int>ans;\r\n  for (int i=1;i<=n;++i)\r\n\tif (!a[i]) ans.push_back(i);\r\n  cout<<\"! \"<<ans.size()<<' ';\r\n  for (int x:ans) cout<<x<<' ';\r\n  cout<<endl;\r\n}\r\n\r\nint main(){\r\n  int T=1;\r\n  //scanf(\"%d\",&T);\r\n  cin>>T;\r\n  for (;T--;){\r\n    into();\r\n    work();\r\n    outo();\r\n  }\r\n  return 0;\r\n}"
}