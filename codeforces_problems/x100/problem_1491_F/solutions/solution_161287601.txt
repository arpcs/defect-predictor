{
    "id": 161287601,
    "contestId": 1491,
    "creationTimeSeconds": 1655714765,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "arvindf232"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 79,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 307200,
    "source": "// 2022.06.20 at 16:13:00 HKT\r\nimport java.io.BufferedInputStream\r\nimport java.io.File\r\nimport java.io.PrintWriter\r\nimport kotlin.system.measureTimeMillis\r\nimport java.util.TreeMap\r\nimport java.util.TreeSet\r\nimport kotlin.random.Random\r\nimport kotlin.random.nextInt\r\n\r\n// 1. Modded\r\nconst val p = 1000000007L\r\nconst val pI = p.toInt()\r\nfun Int.adjust():Int{ if(this >= pI){ return this  - pI }else if (this < 0){ return this + pI };return this }\r\nfun Int.snap():Int{ if(this >= pI){return this - pI} else return this}\r\ninfix fun Int.modM(b:Int):Int{ return ((this.toLong() * b) % pI).toInt() }\r\ninfix fun Int.modPlus(b:Int):Int{ val ans = this + b;return if(ans >= pI) ans - pI else ans }\r\nfun intPow(x:Int,e:Int,m:Int):Int{\r\n    var X = x ; var E =e ; var Y = 1\r\n    while(E > 0){\r\n        if(E and 1 == 0){\r\n            X = ((1L * X * X) % m).toInt()\r\n            E = E shr 1\r\n        }else{\r\n            Y = ((1L * X * Y) % m).toInt()\r\n            E -= 1\r\n        }\r\n    }\r\n    return Y\r\n}\r\n// 2. DP initial values\r\nconst val plarge = 1_000_000_727\r\nconst val nlarge = -plarge\r\nconst val phuge = 2_727_000_000_000_000_000L\r\nconst val nhuge = -phuge\r\n// 3. conveniecen conversions\r\nval Boolean.chi:Int get() = if(this) 1 else 0 //characteristic function\r\nval Char.code :Int get() = this.toInt() -  'a'.toInt()\r\n//3. hard to write stuff\r\nfun IntArray.put(i:Int,v:Int){ this[i] = (this[i] + v).adjust() }\r\nval mint:MutableList<Int> get() = mutableListOf<Int>()\r\nval mong:MutableList<Long> get() = mutableListOf<Long>()\r\n//4. more outputs\r\nfun List<Char>.conca():String = this.joinToString(\"\")\r\nval CharArray.conca :String get() = this.joinToString(\"\")\r\nval IntArray.conca :String get() = this.joinToString(\" \")\r\n@JvmName(\"concaInt\")\r\nfun List<Int>.conca():String = this.joinToString(\" \")\r\nval LongArray.conca:String get() = this.joinToString(\" \")\r\n@JvmName(\"concaLong\")\r\nfun List<Long>.conca():String = this.joinToString(\" \")\r\n//5. Pair of ints\r\nconst val longmask = (1L shl 32) - 1\r\nfun makepair(a:Int, b:Int):Long = (a.toLong() shl 32) xor (longmask and b.toLong()) // remember positev sonly\r\nval Long.first get() = (this ushr 32).toInt()\r\nval Long.second get() = this.toInt()\r\n//6. strings\r\nval String.size get() = this.length\r\nconst val randCount = 100\r\n//7. bits\r\nfun Int.has(i:Int):Boolean = (this and (1 shl i) != 0)\r\nfun Long.has(i:Int):Boolean = (this and (1L shl i) != 0L)\r\n//8 TIME\r\ninline fun TIME(f:()->Unit){\r\n    val t = measureTimeMillis(){\r\n        f()\r\n    }\r\n    println(\"$t ms\")\r\n}\r\nobject Reader{\r\n    private const val BS = 1 shl 16\r\n    private const val NC = 0.toChar()\r\n    private val buf = ByteArray(BS)\r\n    private var bId = 0\r\n    private var size = 0\r\n    private var c = NC\r\n\r\n    var warningActive = true\r\n    var fakein = StringBuilder()\r\n\r\n    private var IN: BufferedInputStream = BufferedInputStream(System.`in`, BS)\r\n    val OUT: PrintWriter = PrintWriter(System.out)\r\n\r\n    private val char: Char\r\n        get() {\r\n            while (bId == size) {\r\n                size = IN.read(buf) // no need for checked exceptions\r\n                if (size == -1) return NC\r\n                bId = 0\r\n            }\r\n            return buf[bId++].toChar()\r\n        }\r\n\r\n    fun nextInt(): Int {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextLong(): Long {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0L\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextString():String{\r\n        val ret = StringBuilder()\r\n        while (true){\r\n            c = char\r\n            if(!isWhitespace(c)){ break}\r\n        }\r\n        ret.append(c)\r\n        while (true){\r\n            c = char\r\n            if(isWhitespace(c)){ break}\r\n            ret.append(c)\r\n        }\r\n        return ret.toString()\r\n    }\r\n    fun isWhitespace(c:Char):Boolean{\r\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t'\r\n    }\r\n    fun rerouteInput(){\r\n        if(warningActive){\r\n            put(\"Custom test enabled\")\r\n            println(\"Custom test enabled\")\r\n            warningActive = false\r\n        }\r\n        val S = fakein.toString()\r\n        println(\"New Case \")\r\n        println(S.take(80))\r\n        println(\"...\")\r\n        fakein.clear()\r\n        IN = BufferedInputStream(S.byteInputStream(),BS)\r\n    }\r\n    fun takeFile(name:String){\r\n        IN = BufferedInputStream(File(name).inputStream(),BS)\r\n    }\r\n}\r\nfun put(aa:Any){ Reader.OUT.println(aa)}\r\nfun done(){ Reader.OUT.close() }\r\nfun share(aa:Any){\r\n    if(aa is IntArray){Reader.fakein.append(aa.joinToString(\" \"))}\r\n    else if(aa is LongArray){Reader.fakein.append(aa.joinToString(\" \"))}\r\n    else if(aa is List<*>){Reader.fakein.append(aa.toString())}\r\n    else{Reader.fakein.append(aa.toString())}\r\n    Reader.fakein.append(\"\\n\")\r\n}\r\n\r\nval getintfast:Int get() = Reader.nextInt()\r\nval getint:Int get(){ val ans = getlong ; if(ans > Int.MAX_VALUE) IntArray(1000000000); return ans.toInt() }\r\nval getlong:Long get() = Reader.nextLong()\r\nval getstr:String get() = Reader.nextString()\r\nfun getline(n:Int):IntArray{\r\n    return IntArray(n){getint}\r\n}\r\nfun getlineL(n:Int):LongArray{\r\n    return LongArray(n){getlong}\r\n}\r\nvar dmark = -1\r\ninfix fun Any.dei(a:Any){\r\n    dmark++\r\n    var str = \"<${dmark}>   \"\r\n    debug()\r\n    if(this is String){ str += this\r\n    }else if(this is Int){ str += this.toString()\r\n    }else if(this is Long){ str += this.toString()\r\n    }else{ str += this.toString()}\r\n    if(a is List<*>){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is IntArray){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is LongArray){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is BooleanArray){ println(\"$str :${a.map{if(it)'1' else '0'}.joinToString(\" \")}\")\r\n    }else if(a is Array<*>){\r\n        println(\"$str : \")\r\n        for(c in a){if(c is IntArray){println(c.joinToString(\" \"))}\r\n        else if(c is LongArray){println(c.joinToString(\" \"))}\r\n        else if(c is BooleanArray){println(c.map { if(it) '1' else '0' }.joinToString(\"\"))\r\n        }\r\n        }\r\n        println()\r\n    }else{ println(\"$str : $a\")\r\n    }\r\n}\r\nval just = \" \"\r\nfun crash(){\r\n    throw Exception(\"Bad programme\")}\r\nfun assert(a:Boolean){\r\n    if(!a){\r\n        throw Exception(\"Failed Assertion\")\r\n    }}\r\nenum class solveMode {\r\n    real, rand, tc\r\n}\r\nobject solve{\r\n    var mode:solveMode = solveMode.real\r\n    var tcNum:Int = 0\r\n    var rand:()->Unit = {}\r\n    var TC:MutableMap<Int,()->Unit> = mutableMapOf()\r\n    var tn:Long = 0\r\n    fun cases(onecase:()->Unit){\r\n        val t = if(mode == solveMode.real){if(singleCase) 1 else getint} else if(mode == solveMode.tc){1 } else randCount\r\n        if(pI != 998_244_353 && pI != 1_000_000_007){\r\n            throw Exception(\"Not usual primes!\")\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            tn = System.currentTimeMillis()\r\n        }\r\n        repeat(t){\r\n            if(mode == solveMode.tc){\r\n                TC[tcNum]?.let { it() }\r\n                Reader.rerouteInput()\r\n            }else if(mode == solveMode.rand){\r\n                rand()\r\n                Reader.rerouteInput()\r\n            }\r\n            onecase()\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            val dt = System.currentTimeMillis() - tn\r\n            println(\"Time $dt ms \")\r\n        }\r\n    }\r\n    inline fun singleCase(a:solve.()->Unit){\r\n        val t = if(mode != solveMode.rand){1} else randCount\r\n        repeat(t) { a() }\r\n    }\r\n    fun rand(a:()->Unit){\r\n        this.rand = a\r\n    }\r\n    fun tc(id:Int = 0,a:()->Unit){\r\n        TC[id] = a\r\n    }\r\n    fun usetc(a:Int = 0 ){\r\n        this.tcNum = a\r\n        this.mode = solveMode.tc\r\n    }\r\n    fun userand(){\r\n        this.mode = solveMode.rand\r\n    }\r\n}\r\nfun debug(){}\r\n\r\ninline fun BinarySearchFirstTrue(l:Int, r:Int, isTrue:(Int)->Boolean):Int?{\r\n    var L = l\r\n    var R = r+1\r\n    while(L < R){\r\n        val m = (L + R) shr 1\r\n        if(m == r+1 || isTrue(m)){\r\n            R = m\r\n        }else{\r\n            L = m + 1\r\n        }\r\n    }\r\n    return if(L == r+1) null else L\r\n}\r\ninline fun BinarySearchLastTrue(l:Int, r:Int, isTrue:(Int)->Boolean):Int?{\r\n    var L = l-1\r\n    var R = r\r\n    while(L < R){\r\n        val m = ((L + R) shr 1) + 1\r\n        if(m == l-1 || isTrue(m)){\r\n            L = m\r\n        }else{\r\n            R = m - 1\r\n        }\r\n    }\r\n    return if(L == l-1) null else L\r\n}\r\n\r\n\r\ninline fun BinarySearchExact(value:Int,l:Int,r:Int,find:(Int)->Int):Int?{\r\n    //find shoudl be increasing\r\n    var L = l\r\n    var R = r\r\n    while(L<R){\r\n        val m = (L + R) shr 1\r\n        if(value <= find(m)){\r\n            R = m\r\n        }else{\r\n            L = m + 1\r\n        }\r\n    }\r\n    return if(find(L) == value){ L}else{null}\r\n}\r\n\r\nconst val fake = false\r\nval have = intArrayOf(1,1,0,0)\r\nconst val singleCase = false\r\nfun main(){\r\n    solve.cases{\r\n        val n = getint\r\n\r\n        fun ask(left:List<Int>, right:List<Int>):Int {\r\n            if(left.size == 0 || right.isEmpty()){\r\n                return 0\r\n            }\r\n            if(fake){\r\n                var l = left.sumOf { have[it] }\r\n                val r = right.sumOf { have[it] }\r\n                return l * r\r\n            }\r\n            println(\"? ${left.size} ${right.size}\")\r\n            println(left.map{it+1}.conca())\r\n            println(right.map { it+1 }.conca())\r\n            System.out.flush()\r\n            val sign = getint\r\n            return sign\r\n        }\r\n        var second = -1\r\n        for(l in n-1 downTo 0){\r\n            val here = ask(listOf(l), ((l+1)..(n-1)).toList())\r\n            if(here != 0){\r\n                second = l\r\n                break\r\n            }\r\n        }\r\n        val isdumb = BooleanArray(n)\r\n        for(i in 0 until second){\r\n            isdumb[i] = ask(listOf(second), listOf(i)) == 0\r\n        }\r\n        for(i in second+1 until n){\r\n            isdumb[i] = true\r\n        }\r\n        val whonotdumb = BinarySearchLastTrue(second+1,n-1){\r\n            ask(listOf(second), (it until n).toList()) != 0\r\n        }\r\n        isdumb[whonotdumb!!] = false\r\n//        just dei second\r\n\r\n        println(\"! ${isdumb.count { it }} ${(0 until n).filter { isdumb[it] }.map { it + 1 }.conca()}\")\r\n        System.out.flush()\r\n    }\r\n    done()\r\n}\r\n\r\n\r\n/*\r\na + b -\r\n\r\n0\r\na-1-b\r\n-(a-b+1)\r\n\r\n\r\na = b + 1 -> -2\r\nalso -2\r\n\r\nboth -1s\r\nare not that hard\r\n\r\none of them is 0, hard\r\n\r\nlog n\r\n\r\n\r\nb + c many 0s\r\n\r\n\r\n4\r\n0 1 0 1\r\n */\r\n"
}