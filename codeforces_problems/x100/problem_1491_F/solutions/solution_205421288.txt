{
    "id": 205421288,
    "contestId": 1491,
    "creationTimeSeconds": 1683804251,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "namcartoon06"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 79,
    "timeConsumedMillis": 373,
    "memoryConsumedBytes": 39628800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint n,pos=-1,idx[100001];\r\nset <int> s;\r\nvector <int> v;\r\nmap <pair <set <int>, set <int>>, bool> mp;\r\nint ask(set <int> a, set <int> b){\r\n    if (a.size()>b.size())\r\n        swap(a,b);\r\n    if (mp.count({a,b}))\r\n        return mp[{a,b}];\r\n    cout << \"? \" << a.size() << ' ' << b.size() << '\\n';\r\n    for (int i:a)\r\n        cout << i << ' ';\r\n    cout << '\\n';\r\n    for (int i:b)\r\n        cout << i << ' ';\r\n    cout << endl;\r\n    int val;\r\n    cin >> val;\r\n    mp[{a,b}]=(val!=0);\r\n    return val;\r\n}\r\nvoid solve(){\r\n    mp.clear();\r\n    cin >> n;\r\n    s.clear();\r\n    v.clear();\r\n    pos=n;\r\n    for (int i=1;i<=n;i++)\r\n        s.insert(i);\r\n    for (int i=1;i<=n;i++)\r\n        idx[i]=i;\r\n    shuffle(idx+1,idx+n+1,default_random_engine(chrono::steady_clock::now().time_since_epoch().count()));\r\n    int tmp=0;\r\n    for (int it=1;it<n;it++){\r\n        int i=idx[it];\r\n        s.erase(i);\r\n        int val=ask({i},s);\r\n        if (val!=0){\r\n            tmp=val;\r\n            pos=it;\r\n            break;\r\n        }\r\n        else\r\n            v.push_back(i);\r\n    }\r\n    shuffle(v.begin(),v.end(),default_random_engine(chrono::steady_clock::now().time_since_epoch().count()));\r\n    int l=0,r=v.size()-1,kq=-1;\r\n    set <int> s;\r\n    while (l<=r){\r\n        int mid=(l+r)>>1;\r\n        s.clear();\r\n        for (int i=0;i<=mid;i++)\r\n            s.insert(v[i]);\r\n        int val=ask({idx[pos]},s);\r\n        if (val!=0){\r\n            kq=mid;\r\n            r=mid-1;\r\n        }\r\n        else\r\n            l=mid+1;\r\n    }\r\n    if (kq!=-1){\r\n        swap(v[kq],v.back());\r\n        v.pop_back();\r\n    }\r\n    for (int i=pos+1;i<n;i++){\r\n        int val=ask({idx[pos]},{idx[i]});\r\n        tmp-=val;\r\n        if (!val)\r\n            v.push_back(idx[i]);\r\n    }\r\n    if (!tmp&&pos!=n)\r\n        v.push_back(idx[n]);\r\n    cout << \"! \" << v.size() << ' ';\r\n    for (int i:v)\r\n        cout << i << ' ';\r\n    cout << endl;\r\n}\r\nint main(){\r\n    ios_base::sync_with_stdio(NULL);cin.tie(nullptr);\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n}"
}