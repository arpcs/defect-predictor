{
    "id": 113873050,
    "contestId": 1491,
    "creationTimeSeconds": 1619088379,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "Cornflakes"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 79,
    "timeConsumedMillis": 483,
    "memoryConsumedBytes": 0,
    "source": "#include <algorithm>\n#include <iostream>\n#include <cstring>\n#include <vector>\n#include <bitset>\n#include <cstdio>\n#include <cmath>\n#include <stack>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\ntemplate <class T> bool umin(T &x,T y) {return y<x? x=y,1: 0;}\ntemplate <class T> bool umax(T &x,T y) {return y>x? x=y,1: 0;}\ntemplate <class T> void read(T &x){x=0; char c=getchar(); int f=0;while (c<'0'||c>'9') f|=(c=='-'),c=getchar();while (c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();if (f) x=-x;}\nvoid solve(int n) {\n\tvector<int> res;\n\tfor(int i = 2, x; i <= n; ++i) {\n\t\tprintf(\"? %d %d\",1,i-1); cout << endl;\n\t\tcout << i << endl;\n\t\tfor(int j = 1; j < i; ++j) cout << j << \" \"; cout << endl;\n\n\t\tcin >> x;\n\t\tif(x) {\n\t\t\tfor(int j = i+1, y; j <= n; ++j) {\n\t\t\t\tcout << \"? 1 1\" << endl;\n\t\t\t\tcout << i << endl << j << endl;\n\t\t\t\tcin >> y;\n\t\t\t\tif(!y) res.push_back(j);\n\t\t\t}\n\n\t\t\tint l = 1, r = i-1, mid, pos, y;\n\t\t\twhile(l <= r) {\n\t\t\t\tmid = ((l+r)>>1);\n\t\t\t\tcout << \"? 1 \" << mid-l+1 << endl;\n\t\t\t\tcout << i << endl;\n\t\t\t\tfor(int j = l; j <= mid; ++j) cout << j << \" \";\n\t\t\t\tcout << endl;\n\t\t\t\tcin >> y;\n\t\t\t\tif(y) pos = mid, r = mid-1;\n\t\t\t\telse l = mid+1;\n\t\t\t}\n\n\t\t\tfor(int j = 1; j < i; ++j) if(j != pos) res.push_back(j);\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tcout << \"! \" << res.size() << \" \";\n\tfor(int i = 0; i < (int)res.size(); ++i) cout << res[i] << \" \";\n\tcout << endl;\n\n}\n\nsigned main()\n{\n\t// ios::sync_with_stdio(false);\n  // cin.tie(0); cout.tie(0);\n  \n  int T,n;\n  cin >> T;\n  for(int cs = 1; cs <= T; ++cs) {\n  \tcin >> n;\n  \tsolve(n);\n  }\n\n\treturn 0;\n\n\t// you should actually read the stuff at the bottom\n}\n \n/* stuff you should look for\n\t* int overflow, array bounds\n\t* do smth instead of nothing and stay organized\nsdlkfjlsfsd\t* WRITE STUFF DOWN\n\t* DON'T GET STUCK ON ONE APPROACH\n*/\n"
}