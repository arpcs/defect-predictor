{
    "id": 114344495,
    "contestId": 1491,
    "creationTimeSeconds": 1619514594,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "F",
        "name": "Magnets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "LawrenLang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int maxn = 2e3 + 5;\r\n\r\nint pos[maxn], tot, n, lg;\r\n\r\nint query(vector<int> a, vector<int> b)\r\n{\r\n    tot++;\r\n    if(tot > n + lg)\r\n    {\r\n        assert(0);\r\n    }\r\n    printf(\"? %d %d\\n\", a.size(), b.size());\r\n    for(int i = 0; i < a.size(); i++) printf(\"%d \", a[i]);\r\n    puts(\"\");\r\n    fflush(stdout);\r\n    for(int i = 0; i < b.size(); i++) printf(\"%d \", b[i]);\r\n    puts(\"\");\r\n    fflush(stdout);\r\n    int res;\r\n    scanf(\"%d\", &res);\r\n    return res;\r\n}\r\nmap<pair<int, pair<int, int>>, int> mp;\r\nint query(int k, int l, int r)\r\n{\r\n    if(mp[{k, {l, r}}]) return mp[{k, {l, r}}];\r\n    vector<int> a, b;\r\n    a.clear();\r\n    b.clear();\r\n    a.push_back(pos[k]);\r\n    for(int i = l; i <= r; i++)\r\n        b.push_back(pos[i]);\r\n    int res = query(a, b);\r\n    mp[{k, {l, r}}] = res;\r\n    return res;\r\n}\r\nint vis[maxn];\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while(t--)\r\n    {\r\n        mp.clear();\r\n        vector<int> ans;\r\n        int k, rec;\r\n        scanf(\"%d\", &n);\r\n        tot = 0;\r\n        lg = 0;\r\n        int now = 1;\r\n        while(now * 2 <= n)\r\n        {\r\n            now *= 2;\r\n            lg++;\r\n        }\r\n        for(int i = 1; i <= n; i++)\r\n            pos[i] = i;\r\n        //random_shuffle(pos + 1, pos + 1 + n);\r\n        \r\n        for(int i = n; i >= 1; i--)\r\n        {\r\n            int tmp = query(i, 1, i - 1);\r\n            if(tmp != 0)\r\n            {\r\n                k = i;\r\n                rec = tmp;\r\n                ans.push_back(k);\r\n                break;\r\n            }\r\n        }\r\n        \r\n        for(int i = 1; i < k; i++)\r\n        {\r\n            int tmp = query(k, i, i);\r\n            if(tmp != 0) ans.push_back(i);\r\n        }\r\n        \r\n        if(rec == -1 && k < n && query(k, k + 1, n) != 0)\r\n        {\r\n            int l = k + 1, r = n, maxx = l;\r\n            while(l <= r)\r\n            {\r\n                int mid = (l + r) >> 1;\r\n                if(query(k, mid, r) != 0)\r\n                {\r\n                    maxx = mid;\r\n                    l = mid + 1;\r\n                }\r\n                else r = mid - 1;\r\n            }\r\n            ans.push_back(maxx);\r\n        }\r\n        \r\n        for(int i = 1; i <= n; i++)\r\n            vis[i] = 0;\r\n        for(int i = 0; i < ans.size(); i++) vis[pos[ans[i]]] = 1;\r\n        printf(\"! %d\", n - ans.size());\r\n            for(int i = 1; i <= n; i++)\r\n                if(!vis[i]) printf(\" %d\", i);\r\n        puts(\"\");\r\n        fflush(stdout);\r\n    }\r\n    return 0;\r\n}\r\n\r\n/*\r\n*/\r\n\r\n"
}