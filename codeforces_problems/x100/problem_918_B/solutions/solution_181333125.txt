{
    "id": 181333125,
    "contestId": 918,
    "creationTimeSeconds": 1668701164,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 918,
        "index": "B",
        "name": "Radio Station",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 918,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 0,
    "source": "/*\n\n                              *\n\n                         *    *   *\n\n                      *   *   *   *   *\n\n                   *   P    A   U   L   A   *\n\n               *   *   *    *   *   *   *   *   *   *\n\n          *    *   *   *    *   *   *   *   *   *   *    *\n\n      *   *    *   *   *    *   *   *   *   *   *   *    *   *\n\n\n */\n\nimport java.io.*;\nimport java.math.BigInteger;\nimport java.util.*;\nimport static java.lang.Double.*;\nimport static java.lang.Float.*;\n\npublic class Main {\n    static final BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n    static final InputStream inputStream = System.in;\n    static final FastReader in = new FastReader(inputStream);\n    public static void main(String[] args) throws IOException {\n        int numOfTestCase = 1;//in.nextInt() ;\n        while (numOfTestCase-- > 0) Task.solve(in, out);\n        finish();\n    }\n    static class Task {\n        public static void solve(FastReader input, BufferedWriter out) throws IOException {\n\n     /*\n    ----------------------------------------------------------------------------------------------------------\n            \u0643\u0648\u062f \u0628\u064a\u062a\u0627\u0643\u062f \u0627\u0646 \u0643\u0644 \u0627\u0644\u062d\u0631\u0648\u0641 \u0627\u0644\u0627\u0628\u062c\u062f\u064a\u0629 \u0645\u0648\u062c\u0648\u062f\u0629 \u0641 \u0627\u0644\u0627\u0633\u062a\u0631\u0646\u062c\n\n          distinct()  \u0645\u064a\u062b\u0648\u062f \u0628\u062a\u062d\u0630\u0641 \u062a\u0643\u0631\u0627\u0631 \u0627\u0644\u062d\u0631\u0648\u0641 \u064a\u0639\u0646\u064a \u0645\u062b\u0644\u0627\n          aabbcc\n          \u0647\u062a\u0643\u0648\u0646\n         abc\n          int n=input.nextInt();\n            System.out.println(input.next().toLowerCase().chars().distinct().count()>=26?\"YES\":\"NO\");\n  ----------------------------------------------------------------------------------------------------------\n  >>>>>>>>> soooooort String <<<<<<<<<<<<\n   String s = in.next();                           //cba\n        char[] Arr = s.toCharArray();\n        Arrays.sort(Arr);\n        String x = new String(Arr);\n        System.out.println(x);\n  ----------------------------------------------------------------------------------------------------------\n\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>MMMMMMAAAAAAAAPPPPPPPP<<<<<<<<<<<<<<<<<<<<<<<\n\n int n = in.nextInt();\n        HashMap<String,Integer> mp = new HashMap<>();\n        for (int i = 1 ; i<=n ; i++)\n        {\n            String s = in.next();\n            if (!mp.containsKey(s))\n            {\n                mp.put(s,0);\n                System.out.println(\"OK\");\n            }\n            else\n            {\n                mp.put(s,mp.get(s)+1);\n                System.out.println(s+mp.get(s));\n            }\n        }\n----------------------------------------------------------------------------------------------------------\n\n      >>>>>>>>>>>>>>>\u0645\u0648\u062f\u0644\u0633 \u0644\u0644\u0627\u0633\u062a\u0631\u0646\u062c>>>>>>>>>>>>>>>>>\n            String s= input.next();\n            BigInteger b =new BigInteger(s);\n            if (b.mod(new BigInteger(\"9\")).equals(new BigInteger(\"0\")))\n                System.out.println(\"YES\");\n            else\n                System.out.println(\"NO\");\n       **********************************************\n                String s= input.next();\nint i=0;\n            for (int j = 0; j <s.length() ; j++) {\n                i=(i+(s.charAt(s.length()-1-j) -'0')%9) % 9;\n            }\n            System.out.println(i==0?\"YES\" : \"NO\");\n------------------------------------------------------------------------------------------------------------\n\n<<<<<<<<<<<<<<<<<<<< PREFEX SUM<<<<<<<<<<<<<<<<<<<<<<<\n\n          int size=input.nextInt();\n            int range=input.nextInt();\n            long arr[]=new long [size];\n\n            for (int i = 0; i <size ; i++) {\n                arr[i]=input.nextInt();\n                if (i==0)\n                    continue;\n                arr[i]+=arr[i-1];\n            }\n            for (int i = 0; i <range ; i++) {\n                int ind1=input.nextInt();\n                int ind2=input.nextInt();\n                System.out.print(ind1 -1 ==0?arr[--ind2] +\"\\n\" : arr[--ind2] - arr[ind1-2]+\"\\n\");\n            }\n-----------------------------------------------------------------------------------------------------------------\n                                        GCD \u0642\u0627\u0646\u0648\u0646\n\n BigInteger b1=BigInteger.valueOf(input.nextInt());\n            BigInteger b2=BigInteger.valueOf(input.nextInt());\n            BigInteger b3=b1.gcd(b2);\n            System.out.println(b3);\n-------------------------------------------------------------------------------------------------------------------\n                                    \u0642\u0627\u0646\u0648\u0646LCM\n\n     BigInteger b1=BigInteger.valueOf(input.nextInt());\n            BigInteger b2=BigInteger.valueOf(input.nextInt());\n            BigInteger b3=b1.gcd(b2);\n            System.out.println((b1.multiply(b2)) .divide(b3));\n--------------------------------------------------------------------------------------------------------------------\n*/\n\n//---------------------------------------------------------------------------------------------------------//\nint n=input.nextInt(), m=input.nextInt();\nHashMap<String, String> mp = new HashMap<>();\n            for (int i = 0; i <n ; i++) {\n                String site=input.next() , ip=input.next();\n                mp.put(ip,site);\n            }\n            for (int i = 0; i <m ; i++) {\n                String s=input.next() , ip = in.next().replace(\";\",\"\");\n                System.out.println(s+\" \"+ip +\"; #\"+mp.get(ip));\n            }\n//---------------------------------------------------------------------------------------------------------//\n\n            }\n        }\n\n        static int[] readArray1d(int n) throws IOException {\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) a[i] = in.nextInt();\n            return a;\n        }\n\n        static int[][] readArray2d(int row, int col) throws IOException {\n            int[][] a = new int[row][col];\n            for (int i = 0; i < row; i++) {\n                for (int j = 0; j < col; j++) {\n                    a[i][j] = in.nextInt();\n                }\n            }\n            return a;\n        }\n\n        static long[][] readArray2d(long row, long col) throws IOException {\n            long[][] a = new long[(int) row][(int) col];\n            for (int i = 0; i < row; i++) {\n                for (int j = 0; j < col; j++) {\n                    a[i][j] = in.nextLong();\n                }\n            }\n            return a;\n        }\n\n        private static void printArray(int[] numbers) throws IOException {\n            for (int number : numbers) {\n                out.write(number + \" \");\n            }\n        }\n\n        private static void printArray(long[] numbers) throws IOException {\n            for (long number : numbers) {\n                out.write(number + \" \");\n            }\n        }\n\n        static class FastReader {\n            private static byte[] buf = new byte[1024];\n            private static int index;\n            private static InputStream in;\n            private static int total;\n\n            public FastReader(InputStream in) {\n                FastReader.in = in;\n            }\n\n            public static int scan() throws IOException {\n                if (total < 0) throw new InputMismatchException();\n                if (index >= total) {\n                    index = 0;\n                    total = in.read(buf);\n                    if (total <= 0) return -1;\n                }\n                return buf[index++];\n            }\n\n            public int nextInt() throws IOException {\n                int integer = 0;\n                int n = scan();\n                while (isWhiteSpace(n)) n = scan();\n                int neg = 1;\n                if (n == '-') {\n                    neg = -1;\n                    n = scan();\n                }\n                while (!isWhiteSpace(n)) {\n                    if (n >= '0' && n <= '9') {\n                        integer *= 10;\n                        integer += n - '0';\n                        n = scan();\n                    } else {\n                        throw new InputMismatchException();\n                    }\n                }\n                return neg * integer;\n            }\n\n            public double nextDouble() throws IOException {\n                return parseDouble(next());\n            }\n\n            public double nextFloat() throws IOException {\n                return parseFloat(next());\n            }\n\n            public long nextLong() throws IOException {\n                long integer = 0;\n                long n = scan();\n                while (isWhiteSpace(n)) n = scan();\n                long neg = 1;\n                if (n == '-') {\n                    neg = -1;\n                    n = scan();\n                }\n                while (!isWhiteSpace(n)) {\n                    if (n >= '0' && n <= '9') {\n                        integer *= 10;\n                        integer += n - '0';\n                        n = scan();\n                    } else {\n                        throw new InputMismatchException();\n                    }\n                }\n                return neg * integer;\n            }\n\n            public String next() throws IOException {\n                StringBuilder sb = new StringBuilder();\n                int n = scan();\n                while (isWhiteSpace(n)) n = scan();\n                while (!isWhiteSpace(n)) {\n                    sb.append((char) n);\n                    n = scan();\n                }\n                return sb.toString();\n            }\n\n            public String nextLine() throws IOException {\n                StringBuilder sb = new StringBuilder();\n                int n = scan();\n                while (isWhiteSpace(n)) n = scan();\n                while (!newLine(n)) {\n                    sb.append((char) n);\n                    n = scan();\n                }\n                return sb.toString();\n            }\n\n            private static boolean isWhiteSpace(long n) {\n                return n == ' ' || n == '\\n' || n == '\\r' || n == '\\t' || n == -1;\n            }\n\n            private boolean newLine(long n) {\n                return n == '\\n' || n == -1;\n            }\n        }\n\n        static void finish() throws IOException {\n            out.flush();\n            out.close();\n        }\n    }\n\t\t\t \t\t \t \t\t\t\t\t\t \t\t\t\t \t\t \t\t\t  \t\t"
}