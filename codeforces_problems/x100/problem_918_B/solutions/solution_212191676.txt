{
    "id": 212191676,
    "contestId": 918,
    "creationTimeSeconds": 1688545488,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 918,
        "index": "B",
        "name": "Radio Station",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 918,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "import sun.reflect.generics.tree.Tree;\n\nimport java.io.*;\nimport java.lang.reflect.Array;\nimport java.util.*;\nimport java.math.*;\nimport java.util.Set;\n\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskA solver = new TaskA();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskA {\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n=in.nextInt();\n            int m=in.nextInt();\n            TreeMap<String,String>fwq=new TreeMap<>();\n            for (int i = 0; i <n; i++) {\n                String x=in.next();\n                String y=in.next();\n                fwq.put(y+\";\",x);\n            }\n            for (int i = 0; i <m; i++) {\n                String x=in.next();\n                String y=in.next();\n                System.out.println(x+\"\"+y+\" #\"+fwq.get(y));\n            }\n\n\n        }\n        class A {\n            int a, b,x,y;\n\n            public A(int a, int b) {\n                this.a = a;\n                this.b = b;\n            }\n\n            public A(int a, int b, int x, int y) {\n                this.a = a;\n                this.b = b;\n                this.x = x;\n                this.y = y;\n            }\n\n            @Override\n            public boolean equals(Object o) {\n                if (this == o) return true;\n                if (o == null || getClass() != o.getClass()) return false;\n                A a1 = (A) o;\n                return a == a1.a && b == a1.b;\n            }\n\n            @Override\n            public int hashCode() {\n                return Objects.hash(a, b);\n            }\n        }\n\n        public static long gcd(long a, long b) {\n            return (a == 0 ? b : gcd(b % a, a));\n        }\n\n        static long mod = (long) 1e9+7;\n\n        public static long qpow(long a, int n) {\n            long x = 1;\n            while (n > 0) {\n                if ((n & 1) == 1) {\n                    x = x % mod * a % mod;\n                }\n                a = a * a % mod;\n                n >>= 1;\n            }\n            return x;\n        }\n\n\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        boolean hasNext() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (Exception e) {\n                    return false;\n                    // TODO: handle exception\n                }\n            }\n            return true;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public String nextLine() {\n            String str = null;\n            try {\n                str = reader.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return str;\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        public double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        public long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        public BigInteger nextBigInteger() {\n            return new BigInteger(next());\n        }\n\n        public BigDecimal nextBigDecimal() {\n            return new BigDecimal(next());\n        }\n\n    }\n}\n\t   \t \t \t\t    \t   \t  \t  \t  \t \t"
}