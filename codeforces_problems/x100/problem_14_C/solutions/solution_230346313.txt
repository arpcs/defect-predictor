{
    "id": 230346313,
    "contestId": 14,
    "creationTimeSeconds": 1698572829,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "_SIR_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n#define ll long long\r\n#define f first\r\n#define s second\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntemplate <typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n// order_of_key (k) : Number of items strictly smaller than k .\r\n// find_by_order(k) : K-th element in a set (counting from zero).\r\n\r\nll Line(pair<ll, ll>a, pair<ll, ll>b) {\r\n    ll x = a.f - b.f;\r\n    ll y = a.s - b.s;\r\n    return x * x + y * y;\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL); cout.tie(NULL);\r\n\r\n    set<ll>st;\r\n    set<vector<ll>>H;\r\n    map<ll, ll>mp;\r\n    map<pair<ll, ll>, ll>Fre;\r\n    bool parallel = true;\r\n    for (int i = 1; i <= 4; i++) {\r\n        ll x, y, x1, y1; cin >> x >> y >> x1 >> y1;\r\n        ll G = Line({x, y}, {x1, y1});\r\n        if (x > x1)swap(x, x1), swap(y, y1);\r\n        else if (x == x1 and y > y1)swap(y, y1);\r\n        Fre[ {x, y}]++; Fre[ {x1, y1}]++;\r\n        H.insert({x, y, x1, y1});\r\n        st.insert(G);\r\n        mp[G]++;\r\n        parallel &= (y == y1 or x == x1);\r\n    }\r\n    bool yo = true;\r\n    for (auto x : H)yo &= (Fre[x] == 2);\r\n    if (yo and H.size() == 4 and parallel and st.size() <= 2 and mp[*st.begin()] % 2 == 0) {\r\n        cout << \"YES\\n\";\r\n    } else cout << \"NO\\n\";\r\n\r\n\r\n    return 0;\r\n}"
}