{
    "id": 87971997,
    "contestId": 14,
    "creationTimeSeconds": 1595666724,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "abusaeed2433"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 434,
    "memoryConsumedBytes": 23040000,
    "source": "import sys\r\ninpuy=sys.stdin.buffer.readline\r\nfrom math import*\r\nimport copy\r\n\r\ndef ispointsame(m,val):\r\n\tfor i in range(4):\r\n\t\tif m[i]==val:\r\n\t\t\tfor j in range(i+1,4):\r\n\t\t\t\tif m[j]==val:\r\n\t\t\t\t\tif val==-1:\r\n#\t\t\t\t\t\tprint(i,j,end=' ')\r\n\t\t\t\t\t\tif max(d[i][1],d[i][3])-max(d[j][1],d[j][3])==0 and min(d[i][1],d[i][3])-min(d[j][1],d[j][3])==0:\r\n\t\t\t\t\t\t\treturn True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tif max(d[i][0],d[i][2])-max(d[j][0],d[j][2])==0 and min(d[i][0],d[i][2])-min(d[j][0],d[j][2])==0:\r\n\t\t\t\t\t\t\treturn True\r\n\treturn False\r\ndef isvalid(m):\r\n\ta=[]\r\n\tc=[]\r\n\tfor i in range(4):\r\n\t\tif m[i]==1:\r\n\t\t\ta.append(i)\r\n\t\telse:\r\n\t\t\tc.append(i)\r\n\tpoint1=[[d[a[0]][0],d[a[0]][1]],[d[a[0]][2],d[a[0]][3]],[d[a[1]][0],d[a[1]][1]],[d[a[1]][2],d[a[1]][3]]]\r\n\tpoint2=[[d[c[0]][0],d[c[0]][1]],[d[c[0]][2],d[c[0]][3]],[d[c[1]][0],d[c[1]][1]],[d[c[1]][2],d[c[1]][3]]]\r\n\tfor i in range(4):\r\n\t\tif point1[i] not in point2:\r\n\t\t\treturn False\r\n\treturn True\r\n\r\nd=[]\r\nm=[]\r\nfor i in range(4):\r\n\ta,b,c,d1=map(int,input().split())\r\n\tif c-a==0:\r\n\t\tm.append(-1)\r\n\telif d1-b==0:\r\n\t\tm.append(1)\r\n\td.append([a,b,c,d1])\r\nn=copy.deepcopy(m)\r\nm.sort()\r\nif m[0]==m[1] and m[0]==-1:\r\n\tif m[2]==m[3] and m[3]==1:\r\n\t\tif ispointsame(n,-1) and ispointsame(n,1):\r\n\t\t\tif isvalid(n):\r\n\t\t\t\tprint(\"YES\")\r\n\t\t\telse:\r\n\t\t\t\tprint(\"NO\")\r\n\t\telse:\r\n\t\t\tprint(\"NO\")\r\n\telse:\r\n\t\tprint(\"NO\")\r\nelse:\r\n\tprint(\"NO\")\r\n#print(d)\r\n#print(n)\r\n#print(max(d[2][1],d[2][3])-max(d[3][1],d[3][3])==0 and min(d[2][1],d[2][3])-min(d[3][1],d[3][3])==0)\r\n\r\n"
}