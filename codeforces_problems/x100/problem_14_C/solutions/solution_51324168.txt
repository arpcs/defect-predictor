{
    "id": 51324168,
    "contestId": 14,
    "creationTimeSeconds": 1552639890,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "AdhamGhoname"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 60,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long double ld;\ntypedef long long ll;\ntypedef complex<double> point;\n#define _x real()\n#define _y imag()\n#define cross(a, b) (conj(a)*(b)).imag()\n#define dot(a, b) (conj(a)*(b)).real()\ntypedef tuple<int, int, int> line;\ntypedef vector<point> polygon;\ntypedef pair<double, double> pd;\n#define PI acos(-1)\n\n//point rotateAbout(point p, point o, double angle) {\n//\tpoint ret = (p - o) * (polar(1.0, angle)) + o;\n//\treturn ret;\n//}\n\nline canonical(line l) {\n\tint a = get<0>(l);\n\tint b = get<1>(l);\n\tint c = get<2>(l);\n\tint gcd = abs(__gcd(a, __gcd(b, c)));\n\tif (a < 0 || (a == 0 && b < 0))\n\t\tgcd *= -1;\n\n\ta /= gcd, b /=gcd, c /= gcd;\n\treturn line(a, b, c);\n}\n\nline make_line(point p1, point p2) {\n\tint a = p2._y - p1._y;\n\tint b = p1._x - p2._x;\n\tint c = -a*p1._x - b*p1._y;\n\treturn canonical(line(a, b, c));\n}\n\nbool isRect(polygon poly) {\n\tvector<double> dists;\n\tdists.push_back(abs(poly[0]-poly[1]));\n\tdists.push_back(abs(poly[1]-poly[2]));\n\tdists.push_back(abs(poly[2]-poly[3]));\n\tdists.push_back(abs(poly[3]-poly[0]));\n\tdists.push_back(abs(poly[0]-poly[2]));\n\tdists.push_back(abs(poly[1]-poly[3]));\n\tsort(dists.begin(), dists.end());\n//\tfor (int i = 0;i < 6; i++) {\n//\t\tcout << fixed << setprecision(7) << dists[i] << \" \";\n//\t}\n//\tcout << endl;\n\tif (abs(dists[0]-dists[1]) > 1e-6 || abs(dists[2]-dists[3]) > 1e-6 || abs(dists[4]-dists[5]) > 1e-6 )\n\t\treturn false;\n\treturn true;\n}\n\nint main()\n{\n\tset<pair<double, double>> distinct;\n\tset<pair<pd, pd>> distLines;\n\tdouble x, y;\n\tfor (int i = 0; i < 4; i++) {\n\t\tcin >> x >> y;\n\t\tpd a = make_pair(x, y);\n\t\tcin >> x >> y;\n\t\tpd b = make_pair(x, y);\n\t\tif (a == b) {\n\t\t\tcout << \"NO\";\n\t\t\treturn 0;\n\t\t}\n\t\tif (a.first != b.first && abs(a.second-b.second) < 1e-6) {\n\t\t\tif (a.first > b.first) {\n\t\t\t\tswap(a.first, b.first);\n\t\t\t}\n\t\t\tdistLines.insert(make_pair(a, b));\n\t\t}\n\t\tdistinct.insert(a);\n\t\tdistinct.insert(b);\n\t}\n\tif (distinct.size() != 4) {\n\t\tcout << \"NO\";\n\t}\n\telse {\n\t\tpolygon rect;\n\t\tfor (auto i : distinct) {\n\t\t\trect.push_back(point(i.first, i.second));\n\t\t}\n\t\tif (isRect(rect)) {\n\t\t\tif (distLines.size() == 2) {\n\t\t\t\tcout << \"YES\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcout << \"NO\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tcout << \"NO\";\n\t\t}\n\t}\n}\n"
}