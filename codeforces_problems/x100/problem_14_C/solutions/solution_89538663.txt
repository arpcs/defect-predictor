{
    "id": 89538663,
    "contestId": 14,
    "creationTimeSeconds": 1597099865,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "soto_nlp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 3686400,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define mp make_pair\r\n\r\nusing namespace std;\r\n\r\nmap < pair<int,int>, list< pair<int,int> > > adj;\r\nset < pair<int,int> > p, visited;\r\nint X1, Y1, X2, Y2, seg, tmp;\r\nmap <int, int> sq;\r\n\r\nvoid f( int x, int y ) {\r\n\r\n    visited.insert( mp(x,y) );\r\n\r\n    for ( auto c : adj[ make_pair(x,y) ] ) {\r\n        if ( visited.find( mp( c.first, c.second ) ) == visited.end() ) {\r\n            f( c.first, c.second );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nint main( ) {\r\n\r\n    for ( int i = 0; i < 4; ++i ) {\r\n        cin >> X1 >> Y1 >> X2 >> Y2;\r\n\r\n        seg = abs(X1-X2) + abs(Y1-Y2);\r\n        \r\n        if ( sq.find( seg ) == sq.end() ) {\r\n            sq[ seg ] = 1;\r\n        }else {\r\n            ++sq[ seg ];\r\n        }\r\n\r\n        p.insert( mp(X1,Y1) );\r\n        p.insert( mp(X2,Y2) );\r\n        \r\n        if ( adj.find( mp(X1,Y1) ) == adj.end() ) {\r\n            list< pair<int,int> > L;\r\n            adj[ mp(X1,Y1) ] = L;\r\n        }\r\n        if ( adj.find( mp(X2,Y2) ) == adj.end() ) {\r\n            list< pair<int,int> > L;\r\n            adj[ mp(X2,Y2) ] = L;\r\n        }\r\n        \r\n        adj[ mp(X1,Y1) ].push_back( mp(X2,Y2) ); \r\n        adj[ mp(X2,Y2) ].push_back( mp(X1,Y1) ); \r\n      \r\n    }\r\n\r\n    if ( sq.size() > 2 ) {\r\n        printf( \"NO\\n\" );\r\n        exit(0);\r\n    }else {\r\n        for ( auto c : sq ) {\r\n            //cout << c.first << \" \" << c.second << endl;\r\n            if ( c.second % 2 == 1 ) {\r\n                printf( \"NO\\n\" );\r\n                exit(0);\r\n            }\r\n        }\r\n    }\r\n\r\n    f( X1, Y1 );\r\n\r\n    if ( visited.size() == p.size() ) {\r\n        printf( \"YES\\n\" );\r\n    }else {\r\n        printf( \"NO\\n\" );\r\n    }\r\n\r\n    return 0;\r\n\r\n}"
}