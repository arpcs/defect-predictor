{
    "id": 217257510,
    "contestId": 14,
    "creationTimeSeconds": 1691242120,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "FrobeniusNorm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <unordered_map>\n#include <vector>\n\nusing std::cin, std::cout, std::max, std::min, std::vector, std::unordered_map, std::pair, std::hash;\n\ntemplate<>\nclass std::hash<pair<int, int>> {\npublic:\n    size_t operator()(const pair<int, int> &x) const {\n        size_t h = hash<int>()(x.first) ^ hash<int>()(x.second);\n        return h;\n    }\n};\n\nint main() {\n    int x1, y1, x2, y2, index = -1;\n    vector<vector<int>> neighbours(4);\n    unordered_map<pair<int, int>, int> node_mapping; // upper-lower right-left\n\n    for (int iter = 0; iter < 4; ++iter) {\n        cin >> x1 >> y1 >> x2 >> y2;\n\n        if (x1 != x2 && y1 != y2 || x1 == x2 && y1 == y2) { // \u0415\u0441\u043b\u0438 \u043e\u0442\u0440\u0435\u0437\u043e\u043a - \u0442\u043e\u0447\u043a\u0430 \u0438\u043b\u0438 \u043e\u0442\u0440\u0435\u0437\u043e\u043a \u043d\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u0435\u043d \u043e\u0441\u044f\u043c\n            cout << \"NO\";\n            return 0;\n        }\n        if (node_mapping.find({x1, y1}) == node_mapping.end()) {\n            ++index;\n            node_mapping[{x1, y1}] = index;\n        }\n        if (node_mapping.find({x2, y2}) == node_mapping.end()) {\n            ++index;\n            node_mapping[{x2, y2}] = index;\n        }\n        if (index > 3) {\n            cout << \"NO\";\n            return 0;\n        }\n\n        neighbours[node_mapping[{x1, y1}]].push_back(node_mapping[{x2, y2}]);\n        neighbours[node_mapping[{x2, y2}]].push_back(node_mapping[{x1, y1}]);\n    }\n\n    for (int iter = 0; iter < 4; ++iter) {\n        if (neighbours[iter].size() != 2) {\n            cout << \"NO\";\n            return 0;\n        }\n    }\n\n    cout << \"YES\";\n    return 0;\n}"
}