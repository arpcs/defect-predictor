{
    "id": 40412289,
    "contestId": 14,
    "creationTimeSeconds": 1531746140,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 0,
    "source": "#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<cmath>\n#include<map>\nusing namespace std;\n\nconst double eps=1e-8;\nconst double pi=acos(-1.0);\nstruct Point{\n    double x,y;\n    Point(double x=0,double y=0):x(x),y(y){}\n};\ntypedef Point Vector;\nVector operator + (Vector A,Vector B){return Vector(A.x+B.x,A.y+B.y);}\nVector operator - (Vector A,Vector B){return Vector(A.x-B.x,A.y-B.y);}\nVector operator * (Vector A,double p){return Vector(A.x*p,A.y*p);}\nVector operator / (Vector A,double p){return Vector(A.x/p,A.y/p);}\nbool operator < (Vector A,Vector B){return A.x<B.x||(A.x==B.x&&A.y<B.y);}\nint dcmp(double x){\n    if(fabs(x)<eps) return 0;\n    return x<0?-1:1;\n}\nbool operator == (const Vector A,const Vector B){\n    return dcmp(A.x-B.x)==0&&dcmp(A.y-B.y)==0;\n}\ndouble Dot(Vector A,Vector B){\n    return A.x*B.x+A.y*B.y;\n}\ndouble Length(Vector A){\n    return sqrt(Dot(A,A));\n}\ndouble Angle(Vector A,Vector B){\n    return acos(Dot(A,B)/Length(A)/Length(B));\n}\n\nbool vis2[5][2];\nPoint t[5][2],now;\nVector a[5];\nVector V0=Vector(1,0);\nmap<double,int> vis;\nmap<Point,int> cnt;\n\nvoid error(){\n    printf(\"NO\\n\");\n    exit(0);\n}\n\nbool find(){\n    Point s=now;\n    //printf(\"##%lf %lf\\n\",s.x,s.y);\n    for(int i=1;i<=4;i++)\n        for(int j=0;j<2;j++){\n            if(s==t[i][j]&&!vis2[i][j]){\n                if(vis2[i][!j]) continue;\n                vis2[i][!j]=1;\n                vis2[i][j]=1;\n                now=t[i][!j];\n                return 1;\n            }\n        }\n    return 0;\n}\n\nbool check(){\n    for(int i=1;i<=4;i++)\n        for(int j=0;j<2;j++)\n            if(!vis2[i][j]) return 0;\n    return 1;\n}\n\nint main(){\n    for(int i=1;i<=4;i++){\n        double X1,Y1,X2,Y2;\n        scanf(\"%lf%lf%lf%lf\",&X1,&Y1,&X2,&Y2);\n        t[i][0]=Point(X1,Y1),t[i][1]=Point(X2,Y2);\n        a[i]=Vector(X1-X2,Y1-Y2);\n        double ang=Angle(a[i],V0);\n        double len=Length(a[i]);\n        if(dcmp(len)==0) error();\n        if(dcmp(ang-pi/2.0)!=0&&dcmp(ang-pi)!=0&&dcmp(ang)!=0) error();\n        vis[len]++;\n        cnt[Point(X1,Y1)]++;\n        cnt[Point(X2,Y2)]++;\n    }\n    if(vis.size()>2||cnt.size()!=4) error();\n    map<Point,int>::iterator it;\n    for(it=cnt.begin();it!=cnt.end();it++)\n        if(it->second!=2) error();\n    now=t[1][0];\n    while(1){\n        if(!find()) break;\n    }\n    if(!check()) error();\n    printf(\"YES\\n\");\n}\n"
}