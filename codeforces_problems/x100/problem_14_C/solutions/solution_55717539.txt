{
    "id": 55717539,
    "contestId": 14,
    "creationTimeSeconds": 1560864583,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": ".Nik."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 3174400,
    "source": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.HashSet;\nimport java.io.FilterInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author khokharnikunj8\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        ScanReader in = new ScanReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        CFoursegment solver = new CFoursegment();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class CFoursegment {\n        public void solve(int testNumber, ScanReader in, PrintWriter out) {\n            int[][] xy = new int[4][4];\n            for (int i = 0; i < 4; i++) {\n                for (int j = 0; j < 4; j++) {\n                    xy[i][j] = in.scanInt();\n                }\n            }\n            HashSet<Integer> set = new HashSet<>();\n            int cur_x = xy[0][2];\n            int cur_y = xy[0][3];\n            set.add(0);\n            HashSet<Integer> stx = new HashSet<>();\n            HashSet<Integer> sty = new HashSet<>();\n            HashSet<Long> lol = new HashSet<>();\n            for (int i = 0; i < 4; i++) {\n                if ((!(xy[i][0] == xy[i][2] || xy[i][1] == xy[i][3])) || (xy[i][0] == xy[i][2] && xy[i][1] == xy[i][3])) {\n                    out.println(\"NO\");\n                    return;\n                }\n                stx.add(xy[i][0]);\n                stx.add(xy[i][2]);\n                sty.add(xy[i][1]);\n                sty.add(xy[i][3]);\n                lol.add(xy[i][0] * 1000000001l + xy[i][1]);\n                lol.add(xy[i][2] * 1000000001l + xy[i][3]);\n            }\n            if (lol.size() != 4) {\n                out.println(\"NO\");\n                return;\n            }\n            if (stx.size() != 2 || sty.size() != 2) {\n                out.println(\"NO\");\n                return;\n            }\n            out:\n\n            for (int j = 0; j < 3; j++) {\n                for (int i = 0; i < 4; i++) {\n                    if (!set.contains(i)) {\n                        if (xy[i][0] == cur_x && xy[i][1] == cur_y) {\n                            set.add(i);\n                            cur_x = xy[i][2];\n                            cur_y = xy[i][3];\n                            continue out;\n                        } else if (xy[i][2] == cur_x && xy[i][3] == cur_y) {\n                            set.add(i);\n                            cur_x = xy[i][0];\n                            cur_y = xy[i][1];\n                            continue out;\n                        }\n                    }\n                }\n                out.println(\"NO\");\n                return;\n            }\n            if (cur_x == xy[0][0] && cur_y == xy[0][1]) {\n                out.println(\"YES\");\n            } else {\n                out.println(\"NO\");\n            }\n        }\n\n    }\n\n    static class ScanReader {\n        private byte[] buf = new byte[4 * 1024];\n        private int index;\n        private BufferedInputStream in;\n        private int total;\n\n        public ScanReader(InputStream inputStream) {\n            in = new BufferedInputStream(inputStream);\n        }\n\n        private int scan() {\n            if (index >= total) {\n                index = 0;\n                try {\n                    total = in.read(buf);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                if (total <= 0) return -1;\n            }\n            return buf[index++];\n        }\n\n        public int scanInt() {\n            int integer = 0;\n            int n = scan();\n            while (isWhiteSpace(n)) n = scan();\n            int neg = 1;\n            if (n == '-') {\n                neg = -1;\n                n = scan();\n            }\n            while (!isWhiteSpace(n)) {\n                if (n >= '0' && n <= '9') {\n                    integer *= 10;\n                    integer += n - '0';\n                    n = scan();\n                }\n            }\n            return neg * integer;\n        }\n\n        private boolean isWhiteSpace(int n) {\n            if (n == ' ' || n == '\\n' || n == '\\r' || n == '\\t' || n == -1) return true;\n            else return false;\n        }\n\n    }\n}\n\n"
}