{
    "id": 111299732,
    "contestId": 721,
    "creationTimeSeconds": 1616953041,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "codemastercpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 14540800,
    "source": "#include <bits/stdc++.h>\n// #include <ext/pb_ds/assoc_container.hpp>\n// #include <ext/pb_ds/tree_policy.hpp>\n\n// using namespace __gnu_pbds;\nusing namespace std;\n\n// Geniosity pragmas\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\n\n// Macros\n#define F first\n#define S second\n#define all(x) begin(x), end(x)\n#define allr(x) rbegin(x), rend(x)\n\n// Aliases\nusing ll = long long;\nusing ull = unsigned long long;\nusing ld = long double;\n\n// Constants\nconstexpr ll INF = 2e18;\nconstexpr ld EPS = 1e-9;\nconstexpr int MOD = 998244353;\n\n// Temporary macro\n#define int long long\n\n// // Ordered set\n// template <typename T>\n// using oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n// Custom hash map\n// struct custom_hash\n// {\n// \tstatic uint64_t splitmix64(uint64_t x)\n// \t{\n// \t\t// http://xorshift.di.unimi.it/splitmix64.c\n// \t\tx += 0x9e3779b97f4a7c15;\n// \t\tx = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n// \t\tx = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n// \t\treturn x ^ (x >> 31);\n// \t}\n\n// \tsize_t operator()(uint64_t x) const\n// \t{\n// \t\tstatic const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n// \t\treturn splitmix64(x + FIXED_RANDOM);\n// \t}\n// };\n// // Use int type for keys\n// template <typename T1, typename T2>\n// using safe_map = unordered_map<T1, T2, custom_hash>;\n// template <typename T>\n// using GPTable = gp_hash_table<int, T>;\n\n// Operator overloads\n// cin >> pair<T1, T2>\ntemplate<typename T1, typename T2>\nistream& operator>>(istream &istream, pair<T1, T2> &p)\n{\n    istream >> p.first >> p.second;\n    return istream;\n}\n// cin >> vector<T>\ntemplate<typename T>\nistream& operator>>(istream &istream, vector<T> &v)\n{\n    for (auto &it : v) cin >> it;\n    return istream;\n}\n// cout << pair<T1, T2>\ntemplate<typename T1, typename T2>\nostream& operator<<(ostream &ostream, const pair<T1, T2> &p)\n{\n    ostream << p.first << \" \" << p.second;\n    return ostream;\n}\n// cout << vector<T>\ntemplate<typename T>\nostream& operator<<(ostream &ostream, const vector<T> &c)\n{\n    for (auto &it : c) cout << it << \" \";\n    return ostream;\n}\n\n// Utility functions\ntemplate <typename T>\nT MIN(T first) { return first; }\ntemplate <typename T, typename... Args>\nT MIN(T first, Args... args) { return min(first, MIN(args...)); }\n\ntemplate <typename T>\nT MAX(T first) { return first; }\ntemplate <typename T, typename... Args>\nT MAX(T first, Args... args) { return max(first, MAX(args...)); }\n\ntemplate <typename T>\nvoid print(T &&t) \n{ \n    cout << t << \"\\n\"; \n}\ntemplate <typename T, typename... Args>\nvoid print(T &&t, Args &&... args)\n{\n\tcout << t << \" \";\n\tprint(forward<Args>(args)...);\n}\n\ntemplate <typename T>\nint32_t size_i(T &container) { return static_cast<int32_t>(container.size()); }\n\n// Mathematical functions\nint GCD(int a, int b)\n{\n\tif (!b) return a;\n\treturn GCD(b, a % b);\n}\nint LCM(int a, int b)\n{\n\treturn (a * b) / GCD(a, b);\n}\nint modpow(ll x, int n, int m = MOD) {\n    ll res = 1;\n    while (n > 0) \n\t{\n        if (n & 1)\n            res = (res * x) % m;\n        x = (x * x) % m;\n        n >>= 1;\n    }\n    return res;\n}\n\nint binpow(int x, int n) {\n    int res = 1;\n    while (n > 0) \n\t{\n        if (n & 1)\n            res = res * x;\n        x = (x * x);\n        n >>= 1;\n    }\n    return res;\n}\n// @param m should be prime\nint modinv(int x, int m = MOD)\n{   \n\treturn modpow(x, m - 2, m);\n}\n\n// Flags to use: -std=c++17 -O2 -Wshadow -DLOCAL_PROJECT -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -fsanitize=address -fsanitize=undefined\n////////////////////////////////// START CODE HERE //////////////////////////////////\n\nvoid preSolve() {}\n \nvoid solve(int tc)\n{\n    int n, k, x;\n    cin >> n >> k >> x;\n    set<pair<int, int>> a;\n    int ng = 0;\n    for (int i = 0; i < n; i++)\n    {\n        int x;\n        cin >> x;\n        if (x < 0) ng++;\n        a.insert({x, i});\n    }\n\n    if (ng == n && ng % 2 == 0)\n    {\n        while ((*a.rbegin()).F < 0)\n        {\n            if (k <= 0) break;\n            auto it = *a.rbegin();\n            a.erase(it);\n            it.F += x;\n            k--;\n            a.insert(it);\n        }\n    }\n    else if (ng % 2 == 0)\n    {\n        while ((*a.begin()).F >= 0)\n        {\n            if (k <= 0) break;\n            auto it = *a.begin();\n            a.erase(a.begin());\n            it.F -= x;\n            k--;\n            a.insert(it);\n        }\n    }\n    set<pair<int, int>> negs;\n    while (a.size() && (*a.begin()).F < 0)\n    {\n        negs.insert(*a.begin());\n        a.erase(a.begin());\n    }\n    while (k > 0)\n    {\n        k--;\n\n        pair<int, int> neg = {-INF, n};\n        pair<int, int> pos = {INF, n};\n        if (negs.size()) neg = *negs.rbegin();\n        if (a.size()) pos = *a.begin();\n\n        if (abs(neg.F) < pos.F)\n        {\n            negs.erase(neg);\n            neg.F -= x;\n            negs.insert(neg);\n        }else\n        {\n            pos.F += x;\n            a.erase(a.begin());\n            a.insert(pos);\n        }\n\n    }\n    vector<int> ans(n);\n    for (auto [v, i] : a)\n        ans[i] = v;\n    for (auto [v, i] : negs)\n        ans[i] = v;\n    \n    cout << ans;\n}\n\nint32_t main()\n{\n    ios_base::sync_with_stdio(false);\n\tcin.tie(0);\n    cout << setprecision(12) << fixed;\n\n    preSolve();\n    int tests = 1;\n    // cin >> tests;\n    for (int t = 1; t <= tests; t++)\n        solve(t);\n    return 0;\n}"
}