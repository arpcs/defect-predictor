{
    "id": 55096532,
    "contestId": 721,
    "creationTimeSeconds": 1559669325,
    "relativeTimeSeconds": 5505,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "lolok123"
            },
            {
                "handle": "geckods"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 57263,
        "teamName": "thayir_sadam_lovers",
        "ghost": false,
        "startTimeSeconds": 1559663820
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 8499200,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n\ntypedef pair<ll,ll> intpair;\n\nint main(){\n\n\t#ifndef ONLINE_JUDGE\n    \tfreopen(\"input\", \"r\", stdin);\n    \tfreopen(\"output\", \"w\", stdout);\n\t#endif\n\tios_base::sync_with_stdio(false);\n   \tcin.tie(NULL);\n\n   \t/*\n   \tcases:\n   \tcount the number of negatives (strictly < 0):\n   \t\tif odd, greedily increase the smallest numbers by magnitude\n   \t\tif even, see if it can be made odd:\n   \t\t\tif it can, then make it odd as quickly as possible and then increase the smallest numbers by magnitude\n   \t\t\tif it cannot, then greedily decrease magnitude of smallest\n\t*/\n\n\tll n,k,x;\n\tcin>>n>>k>>x;\n\n\tvector<ll> myVec;\n\tll z;\n\t\n\tll minPos=INT_MAX;\n\tll minPosind=-1;\n\n\tll maxNeg=INT_MIN;\n\tll maxNegind=-1;\n\n\tll negcount=0;\n\n\tfor(int i=0;i<n;i++){\n\t\tcin>>z;\n\t\tmyVec.push_back(z);\n\n\t\tif(z>=0 && z < minPos){\n\t\t\tminPos = z;\n\t\t\tminPosind=i;\n\t\t}\n\n\t\tif(z<0 && z > maxNeg){\n\t\t\tmaxNeg = z;\n\t\t\tmaxNegind=i;\n\t\t}\n\n\t\tif(z<0){\n\t\t\tnegcount++;\n\t\t}\n\t}\n\n\n\tif(negcount%2==0){\n\t\t//need to convert a neg into a pos or a pos into a neg\n\t\tll noforpos = ceil((double)(minPos+1)/x);\n\t\tll noforneg = ceil((double)((-1*maxNeg)+1)/x);\n\n\t\t// cout<<noforneg<<endl;\n\n\t\tif(min(noforpos,noforneg) > k){\n\t\t\t// cout<<\"HI\"<<endl;\n\t\t\t//not enough moves to make the product negative\n\t\t\t//minimize absolute value of lowest using priority queue\n\n\t\t\tif(abs(minPos)<abs(maxNeg)){\n\t\t\t\tmyVec[minPosind]-=(k*x);\n\t\t\t\tk-=k;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmyVec[maxNegind]+=(k*x);\n\t\t\t\tk-=k;\n\t\t\t}\n\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tcout<<myVec[i]<<\" \";\n\t\t\t}\n\t\t\tcout<<endl;\n\n\t\t\treturn 0;\n\t\t}\n\t\telse{\n\t\t\tif(noforpos<noforneg || (noforneg==noforpos && abs(minPos)<abs(maxNeg))){\n\t\t\t\tmyVec[minPosind]-=(noforpos*x);\n\t\t\t\tk-=noforpos;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmyVec[maxNegind]+=(noforneg*x);\n\t\t\t\tk-=noforneg;\n\t\t\t}\n\t\t}\n\t}\n\n\tpriority_queue<intpair> myPq;\n\tfor(int i=0;i<n;i++){\n\t\tmyPq.push(make_pair(-1*abs(myVec[i]), i));\n\t}\n\n\twhile(k--){\n\t\tintpair mypair = myPq.top();\n\t\tmyPq.pop();\n\n\t\tif(myVec[mypair.second] >=0){\n\t\t\tmyVec[mypair.second]+=x;\n\t\t}\n\t\telse{\n\t\t\tmyVec[mypair.second]-=x;\n\t\t}\n\n\t\tmypair.first=-1*abs(myVec[mypair.second]);\n\t\tmyPq.push(mypair);\n\t}\n\n\tfor(int i=0;i<n;i++){\n\t\tcout<<myVec[i]<<\" \";\n\t}\n\tcout<<endl;\n\n\t//maximize absolute value of smallest in priority queue\n}\n"
}