{
    "id": 52510699,
    "contestId": 721,
    "creationTimeSeconds": 1554762977,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "aks_12345"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 12800000,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n\n\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef unsigned int ui;\ntypedef pair<int,int> pii;\ntypedef pair<ll,ll> pll;\ntypedef pair<pll,ll> plll;\n\nint n,t;\nint tree[30000];\nvoid build( int arr[])\n{for (int i=0; i<n; i++)\ntree[n+i] = arr[i];\nfor (int i = n - 1; i > 0; --i)\ntree[i] = tree[i<<1] + tree[i<<1 | 1];\n}\n  void updateTreeNode(int p, int value)\n{\ntree[p+n] = value;\np = p+n;\n for (int i=p; i > 1; i >>= 1)\ntree[i>>1] = tree[i] + tree[i^1];\n}\n\nint query(int l, int r)\n{int res = 0;\nfor (l += n, r += n; l < r; l >>= 1, r >>= 1)\n{\nif (l&1)\nres += tree[l++];\nif (r&1)\nres += tree[--r];\n}\nreturn res;\n}\n\n\nll power(ll x, ll y){\nll res = 1;\n while (y > 0) {\nif (y & 1)\nres = res * x;\ny = y >> 1;\nx = x * x;\n}\nreturn res;\n}\n\nint ab(int x){\nif(x<0){return -x;}\nelse{return x;}\n}\n\nint main(){\nios_base::sync_with_stdio(false);\ncin.tie(NULL);\nll x,k;\ncin>>n>>k>>x;\npll a[n];\nint cnt=0;\npriority_queue<plll,vector<plll>,greater<plll> > q;\nfor(int i=0;i<n;i++){\ncin>>a[i].first;\nif(a[i].first<0){a[i].second=-1;cnt++;}\nelse{a[i].second=1;}\na[i].first=ab(a[i].first);\nq.push({a[i],i});\n}\nfor(int i=0;i<k;i++){\nif(cnt%2==0){\nplll mini=q.top();q.pop();\npll xx=mini.first;\nxx.first-=x;\nif(xx.first<0&&xx.second==1){xx.second=-1;xx.first=ab(xx.first);cnt++;}\nelse if(xx.first<=0&&xx.second==-1){xx.second=1;xx.first=ab(xx.first);cnt--;}\nq.push({xx,mini.second});\n}\n\nelse{\n\nplll mini=q.top();q.pop();\npll xx=mini.first;\nxx.first+=x;\nif(xx.first<0&&xx.second==1){xx.second=-1;xx.first=ab(xx.first);cnt++;}\nelse if(xx.first<=0&&xx.second==-1){xx.second=1;xx.first=ab(xx.first);cnt--;}\nq.push({xx,mini.second});\n\n\n}\n\n\n}\nll ans[n];\n\nwhile(!q.empty()){\nans[q.top().second]=(q.top().first.first)*(q.top().first.second);\nq.pop();\n}\n\nfor(int i=0;i<n;i++){\ncout<<ans[i];if(i!=n-1){cout<<\" \";}\n}\ncout<<endl;\nreturn 0;\n}\n\n\n"
}