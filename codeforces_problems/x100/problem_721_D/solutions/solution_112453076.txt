{
    "id": 112453076,
    "contestId": 721,
    "creationTimeSeconds": 1618051343,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "BeTapDi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 8089600,
    "source": "#include <bits/stdc++.h>\r\n#define fi first\r\n#define se second\r\n#define REP(i, a, b) for (int i = (a); i <= (b); ++i)\r\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\r\n#define FORD(i, a, b) for(int i = (a); i > (b); --i)\r\n#define REPD(i, a, b) for(int i = (a); i >=(b); --i)\r\n#define TR(it, a) for(__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)\r\n#define endl '\\n'\r\n#define mp make_pair\r\n#define pb push_back\r\n#define pf push_front\r\n#define popb pop_back\r\n#define popf pop_front\r\n#define ins insert\r\n#define all(x) (x).begin(),(x).end()\r\n#define rall(x) (x).rbegin(),(x).rend()\r\n#define unmap unordered_map\r\n#define pq priority_queue\r\n#define minEle min_element\r\n#define maxEle max_element\r\n#define lb lower_bound //first pos >= val\r\n#define ub upper_bound // first pos > val\r\n#define bp __builtin_popcount\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair <ll, ll> pll;\r\ntypedef pair <int, int> pii;\r\ntypedef pair <pii, int> ppi;\r\ntypedef pair <int, pii> pip;\r\ntypedef pair <ll, ld> pld;\r\ntypedef pair <ll, pll> pllp;\r\ntypedef pair <pll, ll> ppll;\r\ntypedef vector <int> vi;\r\ntypedef vector <ll> vll;\r\ntypedef vector <pll> vpll;\r\ntypedef vector <pii> vpii;\r\ntypedef map <int, int> mii;\r\ntypedef map <ll, ll> mll;\r\ntypedef string BigNum;\r\n\r\nconst ll maxN = 1e18;\r\nconst ll minN = -1e18;\r\nconst int INF = 2e9;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll MOD1 = 998244353;\r\nconst int baseHash = 331;\r\nconst int bigNumLength = 5000;\r\nconst ld PI = acos(-1);\r\n\r\n//Remember limit for IT, etc..., and +1 in limit of any array\r\nconst int limit = 2e5 + 5;\r\nconst int limit1 = 1e6 + 5;\r\nconst int limit2 = 1e3 + 5;\r\n//If TLE let's use int instead of ll because it's as slow as your WPM :)))\r\n\r\n/*----IMPORTANT THINGS----*/\r\npii dir[] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\r\n//right down left up rightdown leftdown rightup leftup\r\npii NON = {-1, -1};\r\n/*------------------------*/\r\n\r\nint n, k, x;\r\nll a[limit];\r\nbool neg;\r\nint minPos = 1;\r\n\r\nstruct CMP {\r\n    bool operator () (const int &x, const int &y) {\r\n        return abs(a[x]) < abs(a[y]);\r\n    }\r\n};\r\n\r\nvoid process() {\r\n    multiset <int, CMP> s;\r\n\r\n    REP(i, 1, n) s.ins(i);\r\n\r\n    while (k > 0) {\r\n        int pos = *s.begin();\r\n        s.erase(s.find(pos));\r\n\r\n        if (a[pos] >= 0) a[pos] += x;\r\n        else a[pos] -= x;\r\n\r\n        s.ins(pos);\r\n        --k;\r\n    }\r\n\r\n    REP(i, 1, n) cout << a[i] << \" \"; cout << endl;\r\n}\r\n\r\nvoid solveProblem() {\r\n    if (!neg) {\r\n        ll maxChange = 1LL * k * x;\r\n        if (maxChange > abs(a[minPos])) {\r\n            if (a[minPos] >= 0) {\r\n                while (a[minPos] >= 0) {\r\n                    a[minPos] -= x;\r\n                    --k;\r\n                }\r\n            }\r\n\r\n            else {\r\n                while (a[minPos] <= 0) {\r\n                    a[minPos] += x;\r\n                    --k;\r\n                }\r\n            }\r\n\r\n            process();\r\n        }\r\n\r\n        else {\r\n            if (a[minPos] >= 0) a[minPos] -= maxChange;\r\n            else a[minPos] += maxChange;\r\n\r\n            REP(i, 1, n) cout << a[i] << \" \"; cout << endl;\r\n        }\r\n    }\r\n\r\n    else process();\r\n\r\n    minPos = 1;\r\n    neg = 0;\r\n}\r\n\r\nvoid fastInput() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n}\r\n\r\nvoid readInput() {\r\n    cin >> n >> k >> x;\r\n    REP(i, 1, n) {\r\n        cin >> a[i];\r\n        if (a[i] < 0) neg ^= 1;\r\n        if (abs(a[i]) < abs(a[minPos])) minPos = i;\r\n    }\r\n}\r\n\r\nint main() {\r\n    fastInput();\r\n    readInput();\r\n    solveProblem();\r\n}\r\n\r\n/*\r\nSOME PROOFS:\r\nFirst case: we can't not turn it to negative -> decrease at the minimum one (closest to 0)\r\n    Proof: let a = minimum (closest to 0). -> let a = a - x -> the product will decrease = x * allOtherProd but a is minimum so allOtherProd will be maximum -> maximum decrease.\r\n\r\nSecond case: the prod initially negative -> increase at the minimum one (closest to 0)\r\n    Proof: same as the proof before\r\n\r\nThird case: we can turn to negative -> turn the minimum one (closest to 0) to negative and continue like second case.\r\n    Proof: assume we have 4 integers, 2 negative, 2 positive. We can turn the negative one to positive or pos to neg;\r\n           let a = minimum (closest to 0). if we turn this to negative, the product1 = allOtherProd1 * curA;\r\n           let b = not minimum (closest to 0). if we turn this to negative, the product2 = allOtherProd2 * curB;\r\n\r\n           we know that abs(curA) > abs(curB) && allotherProd1 > allotherProd2 so product1 > product2 -> product1 < product2 (negative product)\r\n           After that, continue like second case;\r\n*/\r\n"
}