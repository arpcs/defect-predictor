{
    "id": 92414671,
    "contestId": 721,
    "creationTimeSeconds": 1599731119,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "GreenHanHan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 4710400,
    "source": "/*\r\n *author: zlc\r\n *zucc_acm_lab\r\n *just do it\r\n */\r\n#include<bits/stdc++.h> \r\nusing namespace std;\r\ntypedef long long ll;\r\nconst double pi=acos(-1.0);\r\nconst double eps=1e-6;\r\nconst int mod=1e9+7;\r\nconst int inf=1e9;\r\nconst int maxn=2e5+100;\r\ninline ll read () {ll x=0;ll f=1;char ch=getchar();while (ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}while (ch>='0'&&ch<='9') {x=x*10+ch-'0';ch=getchar();}return x*f;}\r\n//inline int read () {int x=0;int f=1;char ch=getchar();while (ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}while (ch>='0'&&ch<='9') {x=x*10+ch-'0';ch=getchar();}return x*f;}\r\nll qpow (ll a,ll b) {ll res=1;a%=mod; assert(b>=0); for(;b;b>>=1){if(b&1)res=res*a%mod;a=a*a%mod;}return res;}\r\nll n,k,x;\r\nll a[maxn];\r\nstruct qnode {\r\n\tll v;\r\n\tbool operator < (const qnode &r) const {return abs(a[v])>abs(a[r.v]);}\r\n\tqnode (ll vv) {v=vv;}\r\n};\r\nint main () {\r\n\tn=read();k=read();x=read();\r\n\tfor (int i=1;i<=n;i++) a[i]=read();\r\n\tint cnt=0;//\u8d1f\u6570\u7684\u6570\u91cf\r\n\tfor (int i=1;i<=n;i++) if (a[i]<0) cnt++;\r\n\tpriority_queue<qnode> q;\r\n\tfor (int i=1;i<=n;i++) q.push(qnode(i));\r\n\tint tot=0;\r\n\tint f=0;\r\n\twhile (q.size()&&tot<k) {\r\n\t\tqnode tt=q.top();\r\n\t\tq.pop();\r\n\t\tif (a[tt.v]<0) {\r\n\t\t\tif (cnt%2==0) {\r\n\t\t\t\ta[tt.v]+=x;\r\n\t\t\t\tif (a[tt.v]>=0) cnt--; \t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\ta[tt.v]-=x;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (cnt%2==0) {\r\n\t\t\t\ta[tt.v]-=x;\r\n\t\t\t\tif (a[tt.v]<0) cnt++;\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\ta[tt.v]+=x;\r\n\t\t}\r\n\t\tq.push(tt.v);\r\n\t\ttot++;\r\n\t}\r\n\tfor (int i=1;i<=n;i++) printf(\"%d \",a[i]);   \r\n}"
}