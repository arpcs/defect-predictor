{
    "id": 109141637,
    "contestId": 721,
    "creationTimeSeconds": 1614938604,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "natalia_poklonskaya"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nset<pair<int, int>> ne, po;\r\nint n, k, x;\r\nvoid solve(int n, int p)\r\n{\r\n    while (k--)\r\n    {\r\n        int num1 = 1e18ll, num2 = 1e18ll;\r\n        if ((int)ne.size())\r\n        {\r\n            num1 = (*ne.begin()).first;\r\n        }\r\n        if ((int)po.size())\r\n        {\r\n            num2 = (*po.begin()).first;\r\n        }\r\n        if (num1 <= num2)\r\n        {\r\n            pair<int, int> num = *ne.begin();\r\n            ne.insert({num.first + n, num.second});\r\n            ne.erase(num);\r\n        }\r\n        else\r\n        {\r\n            pair<int, int> num = *po.begin();\r\n            po.insert({num.first + p, num.second});\r\n            po.erase(num);\r\n        }\r\n    }\r\n}\r\nsigned main()\r\n{\r\n\r\n    cin >> n >> k >> x;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        int z;\r\n        cin >> z;\r\n        if (z >= 0ll)\r\n            po.insert({z, i});\r\n        else\r\n            ne.insert({-z, i});\r\n    }\r\n    if ((int)ne.size() % 2)\r\n        solve(x, x);\r\n    else\r\n    {\r\n        bool f1 = false, f2 = false;\r\n        if ((int)ne.size())\r\n        {\r\n            pair<int, int> num = *ne.begin();\r\n            if (-num.first + k * x >= 0ll)\r\n            {\r\n                f1 = true;\r\n            }\r\n        }\r\n        if ((int)po.size())\r\n        {\r\n            pair<int, int> num = *po.begin();\r\n            if (num.first - k * x <= 0ll)\r\n            {\r\n                f2 = true;\r\n            }\r\n        }\r\n        if (f1 == true and f2 == true)\r\n        {\r\n            //cout << \"foo\\n\";\r\n            if ((*ne.begin()).first <= (*po.begin()).first)\r\n            {\r\n                pair<int, int> num = *ne.begin();\r\n                int req = (num.first + x - 1ll) / x;\r\n                po.insert({-num.first + req * x, num.second});\r\n                k -= req;\r\n                ne.erase(num);\r\n                solve(x, x);\r\n            }\r\n            else\r\n            {\r\n                pair<int, int> num = *po.begin();\r\n                int req = (num.first + x - 1ll) / x;\r\n                ne.insert({-num.first + req * x, num.second});\r\n                k -= req;\r\n                po.erase(num);\r\n                solve(x, x);\r\n            }\r\n        }\r\n        else if (f1 == true)\r\n        {\r\n            //cout << \"fooo\\n\";\r\n            pair<int, int> num = *ne.begin();\r\n            int req = (num.first + x - 1ll) / x;\r\n            po.insert({-num.first + req * x, num.second});\r\n            k -= req;\r\n            ne.erase(num);\r\n            solve(x, x);\r\n        }\r\n        else if (f2 == true)\r\n        {\r\n            //cout << \"foooo\\n\";\r\n            pair<int, int> num = *po.begin();\r\n            int req = (num.first + x - 1ll) / x;\r\n            //cout << req << endl;\r\n            ne.insert({(-num.first + req * x), num.second});\r\n            k -= req;\r\n            po.erase(num);\r\n            solve(x, x);\r\n        }\r\n        else\r\n        {\r\n            //cout << \"fooooo\\n\";\r\n            solve(x, -x);\r\n        }\r\n    }\r\n    int ans[n];\r\n    for (auto it : ne)\r\n        ans[it.second] = -it.first;\r\n    for (auto it : po)\r\n        ans[it.second] = it.first;\r\n    for (int i = 0; i < n; i++)\r\n        cout << ans[i] << \" \";\r\n    cout << endl;\r\n}"
}