{
    "id": 57723876,
    "contestId": 721,
    "creationTimeSeconds": 1564036328,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cmath>\nusing namespace std;\ntypedef long long ll;\nconst int maxn=5000;\nint a[maxn+5];\nstruct node\n{\n    int id;\n    ll val;\n    node (int _i=0,ll _v=0)\n    {\n        id=_i; val=_v;\n    }\n    bool operator < (const node& e) const\n    {\n        return abs(val)>abs(e.val);\n    }\n};\nint n,k,x;\nvoid write()\n{\n    for (int i=0;i<n;i++) printf(\"%d \",a[i]); printf(\"\\n\");\n}\nint num1=0,num2=0,num0=0;\npriority_queue<node> q;\nint main()\n{\n    scanf(\"%d%d%d\",&n,&k,&x);\n    for (int i=0;i<n;i++) scanf(\"%d\",&a[i]);\n    for (int i=0;i<n;i++)\n        if (a[i]>0) num1++;\n        else if (a[i]<0) num2++;\n        else num0++;\n    if (num0>k) write();\n    else if (num0<=k) {\n        if (num2&1) {\n            for (int i=0;i<n;i++)\n                if (a[i]==0) a[i]=x,num1++;\n        }\n        else {\n            bool first=true;\n            for (int i=0;i<n;i++)\n            if (a[i]==0&&first) {\n                first=false; a[i]=-x; num2++;\n            }\n            else if (a[i]==0) {\n                a[i]=x; num1++;\n            }\n        }\n        k-=num0;\n        if (num2%2==0) {\n            for (int i=0;i<n;i++) q.push(node(i,a[i]));\n            node e=q.top();\n            int times=abs(e.val)/x+1;\n            if (times>=k) {\n                if (a[e.id]>0) a[e.id]-=1LL*k*x;\n                else a[e.id]+=1LL*k*x;\n                write(); return 0;\n            }\n            else {\n                k-=times; if (a[e.id]>0) a[e.id]-=1LL*times*x;\n                else a[e.id]+=1LL*times*x;\n            }\n        }\n        while (q.size()) q.pop();\n        for (int i=0;i<n;i++) q.push(node(i,a[i]));\n        while (k) {\n            k--; node e=q.top(); q.pop();\n            if (e.val>0) e.val+=x;\n            else e.val-=x;\n            a[e.id]=e.val;\n            q.push(e);\n        }\n        write();\n    }\n    return 0;\n}\n\t\t\t \t\t \t  \t \t\t\t  \t\t \t\t\t\t   \t  \t"
}