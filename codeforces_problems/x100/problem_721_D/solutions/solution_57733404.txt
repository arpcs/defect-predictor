{
    "id": 57733404,
    "contestId": 721,
    "creationTimeSeconds": 1564046024,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "as2341567"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 8806400,
    "source": "#include<cstdio>\r\n#include<cstdlib>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<algorithm>\r\n#include<set>\r\ntypedef std::pair<long long,int> pli;\r\nstd::multiset<pli> pos,neg;\r\nint n,k,x;\r\nlong long a[100005];\r\ninline long long read()\r\n{\r\n    long long x=0,f=1;char c=getchar();\r\n    for(;c>'9'||c<'0';c=getchar())if(c=='-')f=-1;\r\n    for(;c>='0'&&c<='9';c=getchar())x=x*10+c-'0';\r\n    return x*f;\r\n}\r\ninline void work()\r\n{\r\n    n=read(),k=read(),x=read();\r\n    for(int i=1,x;i<=n;i++)\r\n    {\r\n        x=read();\r\n        if(x>=0)pos.insert(std::make_pair(x,i));\r\n        else neg.insert(std::make_pair(x,i));\r\n    }\r\n    if(!(neg.size()&1))\r\n    {\r\n        pli u,v;int tmp1,tmp2;\r\n        std::multiset<pli>::iterator uu,vv;\r\n        if(!pos.size())\r\n        {\r\n            uu=neg.end();u=*uu;neg.erase(uu);\r\n            tmp1=std::min(abs(u.first)/x+1,k);\r\n            u.first+=1ll*x*tmp1;\r\n            pos.insert(u);k-=tmp1;\r\n        }\r\n        else if(!neg.size())\r\n        {\r\n            uu=pos.begin();u=*uu,pos.erase(uu);\r\n            tmp1=std::min(abs(u.first)/x+1,k);\r\n            u.first-=1ll*x*tmp1;\r\n            neg.insert(u);k-=tmp1;\r\n        }\r\n        else {\r\n            std::multiset<pli>::iterator uu=neg.end(),vv=pos.begin();\r\n            u=*--uu,v=*vv,neg.erase(uu),pos.erase(vv);\r\n            if(abs(u.first)<abs(v.first))\r\n            {\r\n                tmp1=std::min(abs(u.first)/x+1,k);\r\n                u.first+=1ll*x*tmp1;\r\n                pos.insert(u);k-=tmp1;pos.insert(v);\r\n            }\r\n            else {\r\n                std::swap(u,v);\r\n                tmp1=std::min(abs(u.first)/x+1,k);\r\n                u.first-=1ll*x*tmp1;\r\n                neg.insert(u);k-=tmp1;neg.insert(v);\r\n            }\r\n        }\r\n    }\r\n    for(pli u,v;k;k--)\r\n        if(!pos.size())\r\n        {\r\n            std::multiset<pli>::iterator uu=neg.end();\r\n            u=*--uu,neg.erase(uu);\r\n            u.first-=x;neg.insert(u);\r\n        }\r\n        else {\r\n            std::multiset<pli>::iterator uu=neg.end(),vv=pos.begin();\r\n            u=*--uu,v=*vv,neg.erase(uu),pos.erase(vv);\r\n            if(abs(u.first)<abs(v.first))u.first-=x;\r\n            else v.first+=x;\r\n            neg.insert(u),pos.insert(v);\r\n        }\r\n    if(pos.size())for(auto x:pos)a[x.second]=x.first;\r\n    if(neg.size())for(auto x:neg)a[x.second]=x.first;\r\n    for(int i=1;i<=n;i++)printf(\"%d \",a[i]);\r\n}\r\nint main()\r\n{\r\n    work();\r\n    return 0;\r\n}\r\n/*\r\n5 3 1\r\n-5 -4 -3 -5 -2\r\n*/\r\n"
}