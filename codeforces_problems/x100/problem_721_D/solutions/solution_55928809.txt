{
    "id": 55928809,
    "contestId": 721,
    "creationTimeSeconds": 1561199530,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "sid779"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 9830400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef vector< int > vi;\r\ntypedef vector< vi > vvi;\r\ntypedef pair< int,int > ii;\r\n//#define int long long \r\n#define ll            long long \r\n#define sz(a)         int((a).size())\r\n#define pb            push_back\r\n#define all(c)        (c).begin(),(c).end()\r\n#define tr(c,i)       for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++)\r\n#define present(c,x)  ((c).find(x) != (c).end())\r\n#define cpresent(c,x) (find(all(c),x) != (c).end())\r\n#define endl          '\\n'\r\n#define MOD           1000000007\r\n#define INF           10000000000000000\r\n\r\nbool comp(const pair<int, string> &a, const pair<int, string> &b) {\r\n    if (a.first == b.first) {\r\n        return a.second < b.second;\r\n    } else {\r\n        return a.first > b.first;\r\n    }\r\n}\r\n\r\nint GCD(int A, int B) {\r\n    if(B==0)\r\n        return A;\r\n    else\r\n        return GCD(B, A % B);\r\n}\r\n\r\nbool IsPowerOfTwo(ll x)\r\n{\r\n    return (x != 0) && ((x & (x - 1)) == 0);\r\n}\r\n/*bool pdt(ll mid){\r\n    c=s;\r\n    for(ll i=0;i<mid;i++){\r\n        c[a[i]-1]='0';\r\n    }\r\n    ll cnt=0;\r\n    for(ll i=0;i<n;i++){\r\n        if(c[i]==p[cnt]) cnt++;\r\n        \r\n        if(cnt>=m) return true;\r\n    }\r\n    return false;\r\n}*/\r\n\r\nll modularExponentiation(int x,int n)\r\n{\r\n    if(n==0)\r\n        return 1;\r\n    else if(n%2 == 0)        //n is even\r\n        return modularExponentiation((x*x)%MOD,n/2);\r\n    else                             //n is odd\r\n        return (x*modularExponentiation((x*x)%MOD,(n-1)/2))%MOD;\r\n\r\n}\r\n\r\nll fct(ll n)\r\n{\r\n    if (n > 1)\r\n        return (n%MOD*fct(n-1)%MOD)%MOD;\r\n    else\r\n        return 1;\r\n}\r\n\r\nll nCrmodp(ll n, ll r, ll p)\r\n{\r\n  ll c[r+1];\r\n  memset(c, 0, sizeof(c)); \r\n  c[0]=1;\r\n  \r\n  for(ll i=1;i<=n;i++)\r\n  {\r\n    for(ll j=min(i,r);j>0;j--){\r\n      c[j]=(c[j]+c[j-1])%p;\r\n      //cout << c[j] << endl;\r\n    }\r\n  }\r\n  return c[r];\r\n}\r\n\r\nll maxor(ll a[], ll n, ll k)\r\n{\r\n  ll cxor=0;\r\n  for(ll i=0;i<k;i++){\r\n    cxor=cxor^a[i];\r\n  }\r\n  \r\n  ll mxor=cxor;\r\n  for(ll i=k;i<n;i++){\r\n    cxor=cxor^a[i-k]; // remove last element.\r\n    cxor=cxor^a[i];  // add new element\r\n    mxor=std::max(mxor,cxor);\r\n    \r\n  }\r\n  return mxor;\r\n}\r\n\r\n\r\n//bool issafe()\r\n\r\nint main(){\r\n  \r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(NULL);\r\n  \r\n  ll n,k,x,mx=-INF,mn=INF,y; cin >> n >> k >> x;\r\n  ll a[n];\r\n  ll mi,neg=0;\r\n  for(ll i=0;i<n;i++){\r\n    cin >> a[i];\r\n    if(a[i]<0) neg++;\r\n    if(abs(a[i])<mn)   mn=a[i],mi=i;\r\n  }\r\n  //cout << a[mi]<<\" \"<<mi<< endl;\r\n  \r\n  if(neg%2==0){\r\n    ll f=abs(a[mi])/x+1;  // to calculate in how many turns it will turn into positive.\r\n    f=min(f,k);\r\n    k-=f;\r\n    if(a[mi]<0) a[mi]+=f*x;\r\n    else        a[mi]-=f*x;\r\n  }\r\n  \r\n  set < pair < ll, ll > > s;\r\n  for(ll i=0;i<n;i++)\r\n    s.insert({abs(a[i]),i});\r\n    \r\n  while(k>0)\r\n  {\r\n    k--;\r\n    ll i=s.begin()->second;\r\n    if(a[i]<0)\r\n    {\r\n      a[i]-=x;\r\n      s.erase(s.begin());\r\n      s.insert({abs(a[i]),i});\r\n    }\r\n    else{\r\n      a[i]+=x;\r\n      s.erase(s.begin());\r\n      s.insert({a[i],i});\r\n    }\r\n  }\r\n  \r\n  for(ll i=0;i<n;i++)\r\n    cout <<  a[i] << \" \";\r\n  \r\n \r\n  return 0;\r\n}"
}