{
    "id": 53823673,
    "contestId": 721,
    "creationTimeSeconds": 1557153657,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "InvUsr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 2355200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long s64;\r\n\r\nconst int md = 998244353;\r\n\r\nstruct segtree {\r\n  vector<int> a, tree;\r\n  int n;\r\n  int negative;\r\n\r\n  segtree(int n): n(n) {\r\n    a.resize(n);\r\n    tree.resize(n * 2 - 1);\r\n  }\r\n\r\n  void pull(int x, int z) {\r\n    tree[x] = min(tree[x + 1], tree[z]);\r\n  }\r\n\r\n  void build(int x, int l, int r) {\r\n    if (l == r) {\r\n      tree[x] = abs(a[l]);\r\n      negative += a[l] < 0;\r\n    } else {\r\n      int y = l + r >> 1, z = x + (y - l + 1 << 1);\r\n      build(x + 1, l, y);\r\n      build(z, y + 1, r);\r\n      pull(x, z);\r\n    }\r\n  }\r\n\r\n  void modify(int x, int l, int r, int v) {\r\n    if (l == r) {\r\n      int backup = negative;\r\n      negative -= a[l] < 0;\r\n      if ((backup & 1) == (a[l] < 0)) {\r\n        a[l] -= v;\r\n      } else {\r\n        a[l] += v;\r\n      }\r\n      tree[x] = abs(a[l]);\r\n      negative += a[l] < 0;\r\n    } else {\r\n      int y = l + r >> 1, z = x + (y - l + 1 << 1);\r\n      if (tree[x + 1] < tree[z]) {\r\n        modify(x + 1, l, y, v);\r\n      } else {\r\n        modify(z, y + 1, r, v);\r\n      }\r\n      pull(x, z);\r\n    }\r\n  }\r\n\r\n  int query(int x, int l, int r) const {\r\n    if (l == r) {\r\n      return (a[l] + md) % md;\r\n    } else {\r\n      int y = l + r >> 1, z = x + (y - l + 1 << 1);\r\n      int ans = 1;\r\n      ans = (s64)ans * query(x + 1, l, y) % md;\r\n      ans = (s64)ans * query(z, y + 1, r) % md;\r\n      return ans;\r\n    }\r\n  }\r\n\r\n  void print(int x, int l, int r) const {\r\n    if (l == r) {\r\n      cout << a[l] << ' ';\r\n    } else {\r\n      int y = l + r >> 1, z = x + (y - l + 1 << 1);\r\n      print(x + 1, l, y);\r\n      print(z, y + 1, r);\r\n    }\r\n  }\r\n\r\n  void build() {\r\n    build(0, 0, n - 1);\r\n  }\r\n\r\n  void modify(int v) {\r\n    modify(0, 0, n - 1, v);\r\n  }\r\n\r\n  int query() const {\r\n    return query(0, 0, n - 1);\r\n  }\r\n\r\n  void print() const {\r\n    print(0, 0, n - 1);\r\n  }\r\n};\r\n\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n  int n, k, v;\r\n  cin >> n >> k >> v;\r\n  segtree seg(n);\r\n  for (int i = 0; i < n; ++i) {\r\n    cin >> seg.a[i];\r\n  }\r\n  seg.build();\r\n  while (k--) {\r\n    seg.modify(v);\r\n  }\r\n//  cout << seg.query() << '\\n';\r\n  seg.print();\r\n\r\n  return 0;\r\n}"
}