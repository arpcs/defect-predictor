{
    "id": 55596572,
    "contestId": 721,
    "creationTimeSeconds": 1560612118,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "SGHD"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 6348800,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main(){\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL);\r\n\t\r\n\tint n,k;\r\n\tlong long x;\r\n\tcin >> n >> k >> x;\r\n\tpriority_queue<pair<long long,int>,vector<pair<long long,int>>,function<bool(pair<long long,int>,pair<long long,int>)>> que(\r\n\t\t[&](pair<long long,int> p0,pair<long long,int> p1){\r\n\t\t\treturn abs(p0.first)>abs(p1.first);\r\n\t\t}\r\n\t);\r\n\t\r\n\tint mi=0;\r\n\tfor(int i=0;i<n;i++){\r\n\t\tlong long v;\r\n\t\tcin >> v;\r\n\t\tque.push(make_pair(v,i));\r\n\t\tif(v<0) mi++;\r\n\t}\r\n\tif(mi%2==0){\r\n\t\twhile(k>0){\r\n\t\t\tauto p=que.top();\r\n\t\t\tque.pop();\r\n\t\t\tk--;\r\n\t\t\tif(p.first<0){\r\n\t\t\t\tp.first+=x;\r\n\t\t\t\tque.push(p);\r\n\t\t\t\tif(p.first>=0) break;\r\n\t\t\t}else{\r\n\t\t\t\tp.first-=x;\r\n\t\t\t\tque.push(p);\r\n\t\t\t\tif(p.first<0) break;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\twhile(k>0){\r\n\t\tauto p=que.top();\r\n\t\tque.pop();\r\n\t\tif(p.first<0) p.first-=x;\r\n\t\telse p.first+=x;\r\n\t\tque.push(p);\r\n\t\tk--;\r\n\t}\r\n\tvector<long long> res(n);\r\n\twhile(que.size()){\r\n\t\tauto p=que.top();\r\n\t\tque.pop();\r\n\t\tres[p.second]=p.first;\r\n\t}\r\n\tfor(int i=0;i<n;i++){\r\n\t\tcout << res[i] << \" \";\r\n\t}\r\n\tcout << \"\\n\";\r\n\treturn 0;\r\n}"
}