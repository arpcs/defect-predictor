{
    "id": 57736170,
    "contestId": 721,
    "creationTimeSeconds": 1564048842,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 1945600,
    "source": "#include <iostream>\n#include <cstring>\n#include <queue>\n\nconst int maxn = 1e5 + 5;\nint seq[maxn];\nstruct nd {\n    int x;\n    int idx;\n};\n\ninline int abs(int x) { return x > 0 ? x : -x; }\ninline int sgn(int x) { return x >= 0 ? 1 : -1; }\n\nbool operator<(const nd &a, const nd &b) {\n    return abs(a.x) > abs(b.x);\n}\n\nvoid chk(int cur, nd &it, int &ngc) {\n    if (cur < 0 && seq[it.idx] > 0) ngc++;\n    else if (cur > 0 && seq[it.idx] < 0) ngc--;\n    else if (cur == 0 && seq[it.idx] < 0) ngc--;\n}\n\nint main() {\n    int n, k, x;\n    std::cin >> n >> k >> x;\n    int ngc = 0;\n    std::priority_queue<nd> que;\n    for (int i = 1; i <= n; ++i) {\n        std::cin >> seq[i];\n        if (seq[i] < 0) ngc++;\n        que.push(nd{seq[i], i});\n    }\n    while (!que.empty() && k--) {\n        auto it = que.top();\n        que.pop();\n        if (ngc & 1) {\n            int cur = (sgn(seq[it.idx])) * (abs(seq[it.idx]) + x);\n            chk(cur, it, ngc);\n            seq[it.idx] = cur;\n        } else {\n            int cur = (sgn(seq[it.idx])) * (abs(seq[it.idx]) - x);\n            chk(cur, it, ngc);\n            seq[it.idx] = cur;\n        }\n        que.push(nd{seq[it.idx], it.idx});\n    }\n    for (int i = 1; i <= n; ++i) std::cout << seq[i] << \" \";\n}\n\t \t  \t \t\t\t  \t \t   \t  \t\t\t     \t"
}