{
    "id": 144164250,
    "contestId": 721,
    "creationTimeSeconds": 1643291048,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 3686400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxN = 2e5 + 7;\nint N, K;\nll X, a[maxN];\nstruct node\n{\n    int id;\n    node(int a=0):id(a) {}\n    friend bool operator < (node e1, node e2)\n    { return abs(a[e1.id]) > abs(a[e2.id]); }\n};\npriority_queue<node> Q;\nint main()\n{\n    scanf(\"%d%d%lld\", &N, &K, &X);\n    int cnt = 0;\n    for(int i = 1; i <= N; i ++)\n    {\n        scanf(\"%lld\", &a[i]);\n        if(a[i] < 0) cnt ^= 1;\n        Q.push(i);\n    }\n    while(K --)\n    {\n        node now = Q.top(); Q.pop();\n        int id = now.id;\n        if(cnt)\n        {\n            if(a[id] < 0) a[id] -= X;\n            else a[id] += X;\n        }\n        else\n        {\n            if(a[id] < 0)\n            {\n                a[id] += X;\n                if(a[id] >= 0) cnt ^= 1;\n            }\n            else\n            {\n                a[id] -= X;\n                if(a[id] < 0) cnt ^= 1;\n            }\n        }\n        Q.push(id);\n    }\n    for(int i = 1; i <= N; i ++) printf(\"%lld%c\", a[i], i == N ? '\\n' : ' ');\n    return 0;\n}\n\n\t\t \t\t \t\t     \t  \t \t \t\t\t  \t\t  \t"
}