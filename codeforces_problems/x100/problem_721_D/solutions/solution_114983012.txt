{
    "id": 114983012,
    "contestId": 721,
    "creationTimeSeconds": 1620011761,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "reboot_restart"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 49,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 22323200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define int long long\r\nint const MAXN = 2e6 + 10;\r\nint n, k, x;\r\nint a[MAXN];\r\npriority_queue<pair<int, int>> q;\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cin >> n >> k >> x;\r\n    int cnt = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> a[i];\r\n        if (a[i] < 0) cnt++;\r\n        q.push({-abs(a[i]), i});\r\n    }\r\n    while (q.size() && k--) {\r\n        auto it = q.top();\r\n        q.pop();\r\n        int val = it.first;\r\n        int pos = it.second;\r\n        // cout << val << endl;\r\n        if (a[pos] < 0) {\r\n            if (cnt & 1) {\r\n                a[pos] -= x;\r\n            } else {\r\n                a[pos] += x;\r\n                if (a[pos] > 0) cnt--;\r\n            }\r\n        } else {\r\n            if (cnt & 1) {\r\n                a[pos] += x;\r\n            } else {\r\n                a[pos] -= x;\r\n                if (a[pos] < 0) cnt++;\r\n            }\r\n        }\r\n        q.push({-abs(a[pos]), pos});\r\n    }\r\n    for (int i = 1; i <= n; i++) cout << a[i] << \" \";\r\n    return 0;\r\n}"
}