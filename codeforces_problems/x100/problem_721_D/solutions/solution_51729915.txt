{
    "id": 51729915,
    "contestId": 721,
    "creationTimeSeconds": 1553287108,
    "relativeTimeSeconds": 5728,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "yotin"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1553281380
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 9932800,
    "source": "/*input\n6 1 0\n1 1 1 1 1 1\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define f first\n#define s second\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define int long long\nint const mod = 1e9+7;\nint power(int x, int y, int mod = 2e18){ int ans = 1;x %= mod;while(y){if(y&1)ans = (x * ans) % mod;x = (x * x) % mod;y >>= 1;}return ans;}\nint gcd(int a , int b){if(a==0)return b;return gcd(b%a,a);}\nint n,k,x;\nint a[200001];\nvoid pri(){\n  for(int i=0;i<n;i++){\n    cout<<a[i]<<\" \";\n  }\n}\nbool comp(pair<int,int> a,pair<int,int> b){\n  return a.f>b.f;\n}\nsigned main() {\n  IOS;\n  cin>>n>>k>>x;\n  multiset<pair<int,int>> splus;\n  multiset<pair<int,int>,decltype(&comp)> sminus(&comp);\n  multiset<pair<int,int>> szer;\n  for(int i=0;i<n;i++){\n    cin>>a[i];\n    if(a[i]<0){\n      sminus.insert({a[i],i});\n    }\n    else if(a[i]>0){\n      splus.insert({a[i],i});\n    }\n    else\n    {\n      szer.insert({a[i],i});\n    } \n  }\n  if(szer.size()>k){\n    pri();\n    return 0;\n  }\n  if(sminus.size()%2==0){\n    int flag = 0 ;\n    for(auto i :szer){\n      if(flag == 0 )\n      {\n        a[i.s]-=x;\n        sminus.insert({a[i.s],i.s});\n      }\n      else\n      {\n        a[i.s]+=x;\n        splus.insert({a[i.s],i.s});\n      }\n      flag++;\n      k--;\n    }\n  }\n  else\n  {\n      for(auto i :szer){\n        a[i.s]+=x;\n        splus.insert({a[i.s],i.s});\n        k--;\n      }\n  }\n  // filled zeroes till here \n  // if no sminus till here means all positive \n  if(sminus.size()==0){\n    pair<int,int> i = *splus.begin();\n    while(k>0){\n      k--;\n      a[i.s]-=x;\n      if(a[i.s]<0){\n        sminus.insert({a[i.s],i.s});\n        splus.erase(splus.find(i));\n        break;\n      }\n    }\n  }\n// if couldnt fill sminus \n  if(sminus.size()==0){\n    pri();\n    return 0;\n  }\n  // cout << sminus.size() << endl;\n  // for(auto x : sminus){\n  //   cout << x.f << \" \";\n  // }\n  // cout<<endl;\n\n  // size of minus is even and there are few positives \n  if(sminus.size()%2==0 && splus.size() ==0){\n      pair<int,int> i = *sminus.begin();\n      while(k>0){\n        k--;\n        a[i.s]+=x;\n        if(a[i.s]>0){\n          splus.insert({a[i.s],i.s});\n          sminus.erase(sminus.find(i));\n          break;\n        }\n      }\n  }\n  if(sminus.size()%2==0){\n    pair<int,int> i = *sminus.begin();\n    pair<int,int> i2 = *splus.begin();\n    if(-a[i.s] < a[i2.s])\n    {\n      while(k>0){\n        k--;\n        a[i.s]+=x;\n        if(a[i.s]>0){\n          splus.insert({a[i.s],i.s});\n          sminus.erase(sminus.find(i));\n          break;\n        }\n      }\n    }\n    else\n    {\n      while(k>0){\n        k--;\n        a[i2.s]-=x;\n        if(a[i2.s]<0){\n          sminus.insert({a[i2.s],i2.s});\n          splus.erase(sminus.find(i2));\n          break;\n        }\n      }\n\n    }\n      \n  }\n  // pri();\n  // cout << endl ;\n\n  if(sminus.size()%2==0){\n    pri();\n    return 0;\n  }\n  // cout << k << endl ; \n  // cout << sminus.size() << splus.size() << endl;\n  // cout << (sminus.begin()->f) ;\n  // cout << endl;\n  while(k>0){\n    if(splus.size()==0){\n      pair<int,int> i = *sminus.begin();\n      sminus.erase(sminus.find(i));\n      a[i.s]-=x;\n      sminus.insert({a[i.s],i.s});\n    }\n    else\n    {\n      pair<int,int> iminus = *sminus.begin();\n      pair<int,int> iplus = *splus.begin();\n      if(-iminus.f < iplus.f){\n      sminus.erase(sminus.find(iminus));\n      a[iminus.s]-=x;\n      sminus.insert({a[iminus.s],iminus.s});\n      }\n      else\n      {\n      splus.erase(splus.find(iplus));\n      a[iplus.s]+=x;\n      splus.insert({a[iplus.s],iplus.s});\n      }\n    }\n    k--;\n  }\n  pri();\nreturn 0;\n}"
}