{
    "id": 96041457,
    "contestId": 721,
    "creationTimeSeconds": 1603175435,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "raidencode"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 624,
    "memoryConsumedBytes": 7884800,
    "source": "#include <stdlib.h>\r\n#include <iostream>\r\n#include <queue>\r\n#define int long long\r\n\r\nconst int N = 200000, INF = 1000 * 1000 * 1000;\r\n\r\nusing namespace std;\r\n\r\nint a[N + 1];\r\nint n, k, x;\r\n\r\nvoid upd(int i, int x)\r\n{\r\n    if (k <= 0) {\r\n        for (int i = 1; i <= n; i++)\r\n            cout << a[i] << \" \";\r\n        cout << endl;\r\n        exit(0);\r\n    }\r\n    --k;\r\n    a[i] += x;\r\n}\r\nint getSign(int x)\r\n{\r\n    return x < 0 ? -1 : 1;\r\n}\r\nmain()\r\n{\r\n    cin >> n >> k >> x;\r\n    int cnt = 0;\r\n    int mn = INF;\r\n    int id = 1;\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> a[i];\r\n        if (a[i] < 0) {\r\n            cnt++;\r\n        }\r\n        if (mn > abs(a[i])) {\r\n            mn = abs(a[i]);\r\n            id = i;\r\n        }\r\n    }\r\n    if (cnt % 2 == 0) {\r\n        int sign = getSign(a[id]);\r\n        while (sign * a[id] >= 0) {\r\n            upd(id, -sign * x);\r\n        }\r\n    }\r\n    priority_queue<pair<int, int> > q;\r\n    for (int i = 1; i <= n; i++) {\r\n        q.push(make_pair(-abs(a[i]), i));\r\n    }\r\n    while (!q.empty()) {\r\n        int id = q.top().second;\r\n        q.pop();\r\n        int sign = getSign(a[id]);\r\n        upd(id, sign * x);\r\n        int val = -abs(a[id]);\r\n        q.push(make_pair(val, id));\r\n    }\r\n}\r\n"
}