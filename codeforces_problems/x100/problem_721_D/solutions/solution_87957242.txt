{
    "id": 87957242,
    "contestId": 721,
    "creationTimeSeconds": 1595651432,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 721,
        "index": "D",
        "name": "Maxim and Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 721,
        "members": [
            {
                "handle": "ariloc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475244300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 13619200,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define forn(i,n) for(int i = 0; i < int(n); i++)\r\n#define forsn(i,s,n) for(int i = int(s); i < int(n); i++)\r\n#define dforn(i,n) for (int i = int(n)-1; i >= 0; i--)\r\n#define dforsn(i,s,n) for(int i = int(n)-1; i >= int(s); i--)\r\n#define all(c) (c).begin(),(c).end()\r\n#define pb push_back\r\n#define fst first\r\n#define snd second\r\n#define FAST_IO ios::sync_with_stdio(false);cin.tie(nullptr);\r\n\r\nusing namespace std;\r\ntypedef vector<int> vi;\r\ntypedef long long ll;\r\ntypedef pair<int,int> ii;\r\n\r\nconst int MAXN = 2e5+5;\r\nconst int INF = 1e9+10;\r\n\r\nll arr[MAXN];\r\nmultiset<pair<ll,int> > myArr;\r\n\r\nint main() {\r\n    FAST_IO;\r\n\r\n    ll n,k,x; cin >> n >> k >> x;\r\n\r\n    int neg = 0;\r\n    forn(i,n) {\r\n        int e; cin >> e;\r\n        if (e < 0) neg++;\r\n        myArr.insert({e,i});\r\n    }\r\n\r\n    vector<pair<ll,int> > myZeros;\r\n    while ((*myArr.find({0,-INF})).fst == 0 and k) { // eliminando los 0\r\n        auto it = myArr.find({0,-INF});\r\n        myZeros.pb(*it); k--;\r\n        myArr.erase(it);\r\n    }\r\n    if (!(neg & 1) and !myZeros.empty())\r\n        {myArr.insert({-x,myZeros.back().snd}); myZeros.pop_back(); neg++;} // f\u00e1cil impar\r\n    // vuelvo a meterlos positivos, valor absoluto no deber\u00eda afectar\r\n    for (auto &i : myZeros) myArr.insert({x,i.snd});\r\n\r\n    while (k) {\r\n        auto it = myArr.lower_bound({0,-INF});\r\n        if (!(neg & 1)) {\r\n            ll val = (*it).fst-x;\r\n            if (val < 0) neg++;\r\n            myArr.insert({val,(*it).snd});\r\n            myArr.erase(it);\r\n        } else {\r\n            pair<ll,int> nxt = *it, prv = *prev(it); // sin check porque seguro hay negativo\r\n            pair<ll,int> choose;\r\n            if (abs(nxt.fst) < abs(prv.fst)) choose = nxt; else choose = prv;\r\n            if (choose.fst < 0) myArr.insert({choose.fst-x,choose.snd});\r\n            else myArr.insert({choose.fst+x,choose.snd});\r\n\r\n            myArr.erase(choose);\r\n        }\r\n\r\n        k--;\r\n    }\r\n\r\n    for (auto &i : myArr) arr[i.snd] = i.fst;\r\n\r\n    forn (i,n) cout << arr[i] << ' ';\r\n\r\n    return 0;\r\n}\r\n\r\n/// ESCRIB\u00cd en vez de tanto dar vueltas\r\n/// si te parece que no va PROBALO PRIMERO!\r\n/// CODEA LO B\u00c1SICO PRIMERO!\r\n/// HACE C-A-S-O-S D-E P-R-U-E-B-A.A.A.A.A!!!\r\n"
}