{
    "id": 193391288,
    "contestId": 1768,
    "creationTimeSeconds": 1676229810,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1768,
        "index": "B",
        "name": "Quick Sort",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1768,
        "members": [
            {
                "handle": "5ald"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1672929300
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n        //static Reader in = new Reader();\r\n        static FastScanner in = new FastScanner();\r\n        static PrintWriter out = new PrintWriter(System.out);\r\n\r\n        public static void main(String[] args) throws IOException {\r\n                int t = in.nextInt();\r\n                while(t-- != 0){\r\n                        int n = in.nextInt(), k = in.nextInt();\r\n                        int[]ind = new int[n+1];\r\n                        for(int i = 1; i<=n; i++)\r\n                                ind[in.nextInt()] = i;\r\n                        double count = ind[1]-1;\r\n                        for(int i = 2; i<=n; i++){\r\n                                if(ind[i] < ind[i-1]){\r\n                                        count+= n-ind[i-1];\r\n                                        break;\r\n                                }\r\n                                count += ind[i]-ind[i-1] - 1;\r\n                        }\r\n                        out.println((int)Math.ceil(count / k));\r\n\r\n                }\r\n                out.close();\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        static class Pair implements Comparable<Pair>{\r\n                int val;\r\n                int ind;\r\n                public Pair(int v, int i){\r\n                        ind = i;\r\n                        val = v;\r\n\r\n                }\r\n\r\n                @Override\r\n                public int compareTo(Pair o) {\r\n                        return Integer.compare(val,o.val);\r\n                }\r\n        }\r\n        static class FastScanner {\r\n\r\n                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n                StringTokenizer st = new StringTokenizer(\"\");\r\n\r\n                String next() {\r\n                        while (!st.hasMoreTokens())\r\n                                try {\r\n                                        st = new StringTokenizer(br.readLine());\r\n                                } catch (IOException e) {\r\n                                        e.printStackTrace();\r\n                                }\r\n                        return st.nextToken();\r\n                }\r\n\r\n                String nextLine() throws IOException {\r\n                        return br.readLine();\r\n                }\r\n\r\n                int nextInt() {\r\n                        return Integer.parseInt(next());\r\n                }\r\n\r\n                int[] readArray(int n) {\r\n                        int[] a = new int[n];\r\n                        for (int i = 0; i < n; i++) a[i] = nextInt();\r\n                        return a;\r\n                }\r\n\r\n                long nextLong() {\r\n                        return Long.parseLong(next());\r\n                }\r\n        }\r\n        static class Reader {\r\n                final private int BUFFER_SIZE = 1 << 16;\r\n                private DataInputStream din;\r\n                private byte[] buffer;\r\n                private int bufferPointer, bytesRead;\r\n\r\n                public Reader()\r\n                {\r\n                        din = new DataInputStream(System.in);\r\n                        buffer = new byte[BUFFER_SIZE];\r\n                        bufferPointer = bytesRead = 0;\r\n                }\r\n\r\n                public Reader(String file_name) throws IOException\r\n                {\r\n                        din = new DataInputStream(\r\n                                new FileInputStream(file_name));\r\n                        buffer = new byte[BUFFER_SIZE];\r\n                        bufferPointer = bytesRead = 0;\r\n                }\r\n\r\n                public String readLine() throws IOException\r\n                {\r\n                        byte[] buf = new byte[64]; // line length\r\n                        int cnt = 0, c;\r\n                        while ((c = read()) != -1) {\r\n                                if (c == '\\n') {\r\n                                        if (cnt != 0) {\r\n                                                break;\r\n                                        }\r\n                                        else {\r\n                                                continue;\r\n                                        }\r\n                                }\r\n                                buf[cnt++] = (byte)c;\r\n                        }\r\n                        return new String(buf, 0, cnt);\r\n                }\r\n\r\n                public int nextInt() throws IOException\r\n                {\r\n                        int ret = 0;\r\n                        byte c = read();\r\n                        while (c <= ' ') {\r\n                                c = read();\r\n                        }\r\n                        boolean neg = (c == '-');\r\n                        if (neg)\r\n                                c = read();\r\n                        do {\r\n                                ret = ret * 10 + c - '0';\r\n                        } while ((c = read()) >= '0' && c <= '9');\r\n\r\n                        if (neg)\r\n                                return -ret;\r\n                        return ret;\r\n                }\r\n\r\n                public long nextLong() throws IOException\r\n                {\r\n                        long ret = 0;\r\n                        byte c = read();\r\n                        while (c <= ' ')\r\n                                c = read();\r\n                        boolean neg = (c == '-');\r\n                        if (neg)\r\n                                c = read();\r\n                        do {\r\n                                ret = ret * 10 + c - '0';\r\n                        } while ((c = read()) >= '0' && c <= '9');\r\n                        if (neg)\r\n                                return -ret;\r\n                        return ret;\r\n                }\r\n\r\n                public double nextDouble() throws IOException\r\n                {\r\n                        double ret = 0, div = 1;\r\n                        byte c = read();\r\n                        while (c <= ' ')\r\n                                c = read();\r\n                        boolean neg = (c == '-');\r\n                        if (neg)\r\n                                c = read();\r\n\r\n                        do {\r\n                                ret = ret * 10 + c - '0';\r\n                        } while ((c = read()) >= '0' && c <= '9');\r\n\r\n                        if (c == '.') {\r\n                                while ((c = read()) >= '0' && c <= '9') {\r\n                                        ret += (c - '0') / (div *= 10);\r\n                                }\r\n                        }\r\n\r\n                        if (neg)\r\n                                return -ret;\r\n                        return ret;\r\n                }\r\n\r\n                private void fillBuffer() throws IOException\r\n                {\r\n                        bytesRead = din.read(buffer, bufferPointer = 0,\r\n                                BUFFER_SIZE);\r\n                        if (bytesRead == -1)\r\n                                buffer[0] = -1;\r\n                }\r\n\r\n                private byte read() throws IOException\r\n                {\r\n                        if (bufferPointer == bytesRead)\r\n                                fillBuffer();\r\n                        return buffer[bufferPointer++];\r\n                }\r\n\r\n                int[] readArray(int n) throws IOException {\r\n                        int[] a = new int[n];\r\n                        for (int i = 0; i < n; i++) a[i] = nextInt();\r\n                        return a;\r\n                }\r\n\r\n                public void close() throws IOException\r\n                {\r\n                        if (din == null)\r\n                                return;\r\n                        din.close();\r\n                }\r\n        }\r\n\r\n}"
}