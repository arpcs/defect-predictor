{
    "id": 191003581,
    "contestId": 1768,
    "creationTimeSeconds": 1674923354,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1768,
        "index": "B",
        "name": "Quick Sort",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1768,
        "members": [
            {
                "handle": "Danger_Don"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1672929300
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\nimport java.lang.*;\r\npublic class Main1 {\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader()\r\n        {\r\n            br = new BufferedReader(\r\n                    new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next()\r\n        {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() { return Integer.parseInt(next()); }\r\n\r\n        long nextLong() { return Long.parseLong(next()); }\r\n\r\n        double nextDouble()\r\n        {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine()\r\n        {\r\n            String str = \"\";\r\n            try {\r\n                if(st.hasMoreTokens()){\r\n                    str = st.nextToken(\"\\n\");\r\n                }\r\n                else{\r\n                    str = br.readLine();\r\n                }\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n    static long gcd(long a, long b) {\r\n        if (b == 0) return a;\r\n        return gcd(b, a % b);\r\n    }\r\n    static long lcm(long a, long b){\r\n        return (a / gcd(a,b))*b;\r\n    }\r\n    static int factorial(long a) {\r\n        int k = 1000000007,f=1;\r\n        for(int i=1;i<=a;i++)\r\n        {\r\n            f = (f*i)%k;\r\n        }\r\n        return f;\r\n    }\r\n    public static void main(String[] args) throws IOException\r\n    {\r\n        OutputStream outputStream = System.out;\r\n        PrintWriter out = new PrintWriter(outputStream);\r\n        FastReader sc = new FastReader();\r\n        solution ss = new solution();\r\n        int n = sc.nextInt();\r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            int a = sc.nextInt(),b[] = new int[a],c = sc.nextInt(),d=1;\r\n            for(int j=0;j<a;j++)\r\n            {\r\n                b[j] = sc.nextInt();\r\n                if(b[j]==d) d++;\r\n            }\r\n            out.println((a-d)/c);\r\n        }\r\n        out.close();\r\n    }\r\n}\r\nclass solution\r\n{\r\n    static final Random random = new Random();\r\n    public void ruffleSort(int[] a)\r\n    {\r\n        int n = a.length;\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            int oi = random.nextInt(n), temp = (int) a[oi];\r\n            a[oi] = a[i];\r\n            a[i] = temp;\r\n        }\r\n        Arrays.sort(a);\r\n    }\r\n    public int[] sortArray(int[] nums)\r\n    {\r\n        ruffleSort(nums);\r\n        return nums;\r\n    }\r\n}"
}