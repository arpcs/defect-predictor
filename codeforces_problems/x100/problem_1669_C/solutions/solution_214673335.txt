{
    "id": 214673335,
    "contestId": 1669,
    "creationTimeSeconds": 1689889753,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1669,
        "index": "C",
        "name": "Odd/Even Increments",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "greedy",
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1669,
        "members": [
            {
                "handle": "1H_End1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1650551700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 10137600,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <queue>\r\n#include <deque>\r\n#include <stack>\r\n#include <list>\r\n#include <set>\r\n#include <climits>\r\n#include<bits/stdc++.h>\r\n#define Hend  ios::sync_with_stdio(0); cin.tie(0);  cout.tie(0);\r\ntypedef long long ll;\r\nusing namespace std;\r\nconst int sz = 1e7+10;\r\nbool composite[sz];\r\nvector<int> prime;\r\nconst int N = 2e5 + 5;\r\nint iterativePower(int x, int n) {\r\n    // O(N)\r\n    int res = 1;\r\n    while(n > 0) {\r\n        res = res * x;\r\n        n--;\r\n    }\r\n    return res;\r\n}\r\nll fastPower(int x, int n) {\r\n    // O(log(N))\r\n    ll res = 1;\r\n    while(n > 0) {\r\n        if (n % 2 == 1) {\r\n            res = res * x;\r\n        }\r\n        x = x*x;\r\n        n = n/2;\r\n    }\r\n    return res;\r\n}\r\nint modularExponentiation(int x, int n, int m) {\r\n    // O(log(N))\r\n    int res = 1;\r\n    while(n > 0) {\r\n        if (n %2 == 1) {\r\n            res = (res*x) % m;\r\n        }\r\n        x = (x*x) % m;\r\n        n = n / 2;\r\n    }\r\n    return res;\r\n}\r\n\r\nll Prime(ll n) {\r\n    // getting prime numbers from 1 to N\r\n    ll cnt;\r\n    if(n == 1) cnt = 1;\r\n    else  cnt = 2;\r\n    for(ll i = 2; i*i <= n; i++) {\r\n        if (n % i == 0) {\r\n            cnt++;\r\n            if (i*i != n) {\r\n                cnt++;\r\n            }\r\n        }\r\n    }\r\n    return cnt;\r\n}\r\n\r\nvoid primeFactors(int n) {\r\n    vector<int> v;\r\n    for(int i = 2; i*i <= n; i++) {\r\n        while (n % i == 0) {\r\n            n = n/i;\r\n            v.push_back(i);\r\n        }\r\n    }\r\n    // if n is prime\r\n    if (n != 1) {\r\n        v.push_back(n);\r\n    }\r\n    for (auto j : v) {\r\n        cout << j << \" \";\r\n    }\r\n}\r\nll gcd(ll a, ll b) {\r\n    while (b != 0) {\r\n        ll temp = a;\r\n        a = b;\r\n        b = temp % b;\r\n    }\r\n    return a;\r\n}\r\n\r\nll lcm(ll a, ll b) {\r\n    return (a / gcd(a,b)) * b;\r\n}\r\n\r\nvoid sieve() {\r\n    // O(log(log(N)))\r\n    // non-prime numbers\r\n    composite[0] = composite[1] = 1;\r\n    for(ll i = 2; i*i <= sz; i++) {\r\n        if (!composite[i]) {\r\n            for(ll j = i*i; j <= sz; j+=i) {\r\n                composite[j] = 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid linearSieve() {\r\n    composite[0] = composite[1] = 1;\r\n    for(int i = 2; i <= sz; i++) {\r\n        if (!composite[i])\r\n            prime.push_back(i);\r\n        for(int j = 0; j < (int)prime.size() && i*prime[j] <= sz; ++j) {\r\n            composite[i * prime[j]] = 1;\r\n            if(i % prime[j] == 0)\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nbool isPrime(ll n) {\r\n    if (n == 2 || n == 3)\r\n        return true;\r\n    if (n % 2 == 0 || n == 1)\r\n        return false;\r\n    for(ll i = 3; i*i <= n; i+=2) {\r\n        if (n%i == 0) return false;\r\n    }\r\n    return true;\r\n}\r\n// check if a number is a power of two 2^0 2^1\r\nbool isPowerOfTwo(ll num) {\r\n    if (num <= 0)\r\n        return false;\r\n    return (num & (num - 1)) == 0;\r\n}\r\n\r\nvoid iSolvePeoplesProblemsWhileNoOneSolvesMine() {\r\n    int n; cin >> n;\r\n    vector<int> v(n+1);\r\n    vector<int> evenIndex;\r\n    vector<int> oddIndex;\r\n    int even = 0, odd = 0;\r\n    for(int i = 1; i <= n; i++) {\r\n        cin >> v[i];\r\n        if(v[i] % 2 == 0) {\r\n            even++;\r\n            evenIndex.push_back(i);\r\n        }\r\n        else {\r\n            odd++;\r\n            oddIndex.push_back(i);\r\n        }\r\n    }\r\n    if (even == n || odd == n) {\r\n        cout << \"YES\";\r\n        return;\r\n    }\r\n    bool flag = true;\r\n//    cout << evenIndex.size() << endl << oddIndex.size() << endl;\r\n    for(int i = 0; i < evenIndex.size()-1; i++) {\r\n        if(abs(evenIndex[i]-evenIndex[i+1]) == 1) {\r\n            flag = false;\r\n            break;\r\n        }\r\n    }\r\n    for(int i = 0; i < oddIndex.size()-1; i++) {\r\n        if(abs(oddIndex[i]-oddIndex[i+1]) == 1) {\r\n            flag = false;\r\n            break;\r\n        }\r\n    }\r\n    if(!flag) {\r\n        cout << \"NO\";\r\n    }\r\n    else {\r\n        cout << \"YES\";\r\n    }\r\n}\r\nint main() {\r\n    Hend\r\n    ll t; cin >> t;\r\n    while(t--) {\r\n        iSolvePeoplesProblemsWhileNoOneSolvesMine();\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}