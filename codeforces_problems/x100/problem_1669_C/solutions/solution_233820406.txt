{
    "id": 233820406,
    "contestId": 1669,
    "creationTimeSeconds": 1700660888,
    "relativeTimeSeconds": 608,
    "problem": {
        "contestId": 1669,
        "index": "C",
        "name": "Odd/Even Increments",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "greedy",
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1669,
        "members": [
            {
                "handle": "Amr_Arab"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1700660280
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define Amr_Arab int main()\r\n#define Solve_it  Solve();\r\n#define Again main();\r\n#define line cout << endl;\r\n#define ll long long\r\n#define ld long double\r\n#define YES cout << \"YES\" << endl;\r\n#define NO cout << \"NO\" << endl;\r\n#define Yes cout << \"Yes\" << endl;\r\n#define No cout << \"No\" << endl;\r\n#define yes cout << \"yes\" << endl;\r\n#define no cout << \"no\" << endl;\r\n#define cinn ll n; cin >> n;\r\n#define cinm ll m; cin >> m;\r\n#define cinq ll q; cin >> q;\r\n#define cink ll k; cin >> k;\r\n#define cina ll a; cin >> a;\r\n#define cinb ll b; cin >> b;\r\n#define cinc ll c; cin >> c;\r\n#define cind ll d; cin >> d;\r\n#define cinx ll x; cin >> x;\r\n#define ciny ll y; cin >> y;\r\n#define cinz ll z; cin >> z;\r\n#define cinl ll l; cin >> l;\r\n#define cinr ll r; cin >> r;\r\n#define d2b(n1,n2) bitset<n1>(n2).to_string();\r\n#define vec vector<ll>v;\r\n#define veci ll num; cin >> num; v.push_back(num);\r\n#define INT_ARR int * ARR = new int [n];\r\n#define FLOAT_ARR float * ARR = new float [n];\r\n#define CHAR_ARR char * ARR = new char [n];\r\n#define STR_ARR string * ARR = new string [n];\r\n#define Tests ll t; cin >> t; while(t--)\r\n#define mm 1000000007\r\n#define LetsGooo ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n\r\nbool isPalindrome(string str);\r\n\r\nbool isComposite(ll num);\r\n\r\nbool isPrime(ll num);\r\n\r\nbool isOdd(ll num);\r\n\r\nbool isEven(ll num);\r\n\r\nll sum_1_to_n(ll n);\r\n\r\nll EvenSum_1_to_n(ll n);\r\n\r\nll OddSum_1_to_n(ll n);\r\n\r\nll sum_in_range(ll lower, ll upper);\r\n\r\nll OddSum_in_range(ll left, ll right);\r\n\r\nll EvenSum_in_range(ll left, ll right);\r\n\r\nll factorial(ll n);\r\n\r\nll fibo(ll n);\r\n\r\nll randomNumber(ll first, ll last);\r\n\r\nld generalSolution1(ld a, ld b, ld c);\r\n\r\nld generalSolution2(ld a, ld b, ld c);\r\n\r\nll Mod_add(ll a, ll b, ll m);\r\n\r\nll Mod_sub(ll a, ll b, ll m);\r\n\r\nll Mod_mul(ll a, ll b, ll m);\r\n\r\nll gcd(ll a, ll b);\r\n\r\nll lcm(ll a, ll b);\r\n\r\nll fastPower(ll x, ll n);\r\n\r\nll logb(ll a, ll b);\r\n\r\nll nCr(ll n, ll r);\r\n\r\nll nPr(ll n, ll r);\r\n\r\nll magicSquare(ll n);\r\n\r\nint first_digit(ll n);\r\n\r\nll firstNdigits(ll n, ll num);\r\n\r\nint last_digit(ll n);\r\n\r\nint count_digits(ll n);\r\n\r\nll sum_of_digits(ll n);\r\n\r\nll sum_of_digits(string str);\r\n\r\nint index_BinarySearch(int arr[], int l, int r, int key);\r\n\r\nbool isFound_BinarySearch(int arr[], int l, int r, int key);\r\n\r\nint index_linearSearch(int arr[], int size, int key);\r\n\r\nbool isFound_linearSearch(int arr[], int size, int key);\r\n\r\nstring toBinary(ll num);\r\n\r\nstring toBinary(ll size, ll num);\r\n\r\nll toDecimal(string binary);\r\n\r\nvoid print_digits(ll n);\r\n\r\nvoid print_factors(ll n);\r\n\r\nvoid print_primeFators(ll n);\r\n\r\nvoid pascal(ll n);\r\n\r\nvoid Solve()\r\n{\r\n\r\n   cinn\r\n\r\n vector<ll>v(n);\r\n   for(int i = 0; i < n; i++)\r\n   {\r\n       cin >> v[i];\r\n   }\r\n\r\n for(int i = 2; i < n; i+= 2)\r\n {\r\n     if(arr[i]%2 != arr[i - 2] %2)\r\n     {\r\n        No\r\n         return\r\n     }\r\n }\r\n \r\n for(int i = 3; i < n; i+= 2)\r\n {\r\n     if(arr[i]%2 != arr[i - 2] %2)\r\n     {\r\n        No\r\n         return\r\n     }\r\n }\r\n Yes\r\n}\r\n\r\nAmr_Arab\r\n{\r\n\tLetsGooo\r\n\tTests\r\n\tSolve_it\r\n}\r\n\r\nbool isComposite(ll num)\r\n{\r\n\tif (num == 0 || num == 1)\r\n\t\treturn false;\r\n\r\n\tfor (ll i = 2; i <= sqrt(num); i++)\r\n\t{\r\n\t\tif (num % i == 0)\r\n\t\t\treturn true;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\n\r\nbool isPrime(ll num)\r\n{\r\n\tif (num == 0 || num == 1)\r\n\t\treturn false;\r\n\r\n\tfor (ll i = 2; i * i <= num; i++)\r\n\t{\r\n\t\tif (num % i == 0)\r\n\t\t\treturn false;\r\n\t}\r\n\r\n\treturn true;\r\n}\r\n\r\nbool isOdd(ll num)\r\n{\r\n\treturn (num % 2 == 1);\r\n}\r\n\r\nbool isEven(ll num)\r\n{\r\n\treturn (num % 2 == 0);\r\n}\r\n\r\nll sum_1_to_n(ll n)\r\n{\r\n\treturn (n * (n + 1) / 2);\r\n}\r\n\r\nll EvenSum_1_to_n(ll n)\r\n{\r\n\tif (n % 2 == 1)\r\n\t\tn--;\r\n\r\n\treturn (n * (n + 2) / 4);\r\n}\r\n\r\nll OddSum_1_to_n(ll n)\r\n{\r\n\tif (n % 2 == 0)\r\n\t\tn--;\r\n\r\n\treturn ((n + 1) * (n + 1) / 4);\r\n}\r\n\r\nll sum_in_range(ll lower, ll upper)\r\n{\r\n\treturn (upper - lower + 1) * (lower + upper) / 2;\r\n}\r\n\r\nll OddSum_in_range(ll left, ll right)\r\n{\r\n\tif (left % 2 == 0)\r\n\t\tleft++;\r\n\r\n\tif (right % 2 == 0)\r\n\t\tright--;\r\n\r\n\treturn ((right + 1) / 2) * ((right + 1) / 2) - ((left + 1) / 2) * ((left + 1) / 2) + left;\r\n}\r\n\r\nll EvenSum_in_range(ll left, ll right)\r\n{\r\n\tif (left % 2 == 1)\r\n\t\tleft++;\r\n\r\n\tif (right % 2 == 1)\r\n\t\tright--;\r\n\r\n\treturn right / 2 * (right / 2 + 1) - ((left - 1) / 2) * (((left - 1) / 2) + 1);\r\n}\r\n\r\nll factorial(ll n)\r\n{\r\n\tll res = 1;\r\n\r\n\tfor (ll i = 2; i <= n; i++)\r\n\t\tres *= i;\r\n\r\n\treturn res;\r\n}\r\n\r\nll fibo(ll n)\r\n{\r\n\tif (n == 0 || n == 1)\r\n\t\treturn n;\r\n\telse\r\n\t\treturn fibo(n - 1) + fibo(n - 2);\r\n}\r\n\r\nll randomNumber(ll first, ll last)\r\n{\r\n\tsrand(time(0));\r\n\treturn(first + rand() % (last - first + 1));\r\n}\r\n\r\nld generalSolution1(ld a, ld b, ld c)\r\n{\r\n\treturn (-b + sqrt(b * b - 4 * a * c)) / 2 * a;\r\n}\r\n\r\nld generalSolution2(ld a, ld b, ld c)\r\n{\r\n\treturn (-b - sqrt(b * b - 4 * a * c)) / 2 * a;\r\n}\r\n\r\nll Mod_add(ll a, ll b, ll m)\r\n{\r\n\treturn ((a % m) + (b % m)) % m;\r\n}\r\n\r\nll Mod_sub(ll a, ll b, ll m)\r\n{\r\n\treturn ((a % m) - (b % m) + m) % m;\r\n}\r\n\r\nll Mod_mul(ll a, ll b, ll m)\r\n{\r\n\treturn ((a % m) * (b % m)) % m;\r\n}\r\n\r\nll gcd(ll a, ll b)\r\n{\r\n\twhile (b != 0)\r\n\t{\r\n\t\tll a2 = a;\r\n\t\ta = b;\r\n\t\tb = a2 % b;\r\n\t}\r\n\treturn a;\r\n}\r\n\r\nll lcm(ll a, ll b)\r\n{\r\n\treturn a / gcd(a, b) * b;\r\n}\r\n\r\nll fastPower(ll x, ll n)\r\n{\r\n\tll result = 1;\r\n\twhile (n > 0)\r\n\t{\r\n\t\tif (n % 2 == 1)\r\n\t\t\tresult *= x;\r\n\r\n\t\tx *= x;\r\n\t\tn /= 2;\r\n\t}\r\n\treturn result;\r\n}\r\n\r\nll logb(ll a, ll b)\r\n{\r\n\treturn log2(a) / log2(b);\r\n}\r\n\r\nll nCr(ll n, ll r)\r\n{\r\n\treturn factorial(n) / (factorial(r) * factorial(n - r));\r\n}\r\n\r\nll nPr(ll n, ll r) // 5 2\r\n{\r\n\tll res = 1;\r\n\r\n\tfor (ll i = n - r + 1; i <= n; i++)\r\n\t\tres *= i;\r\n\r\n\treturn res;\r\n}\r\n\r\nll magicSquare(ll n)\r\n{\r\n\treturn ((n) * (n * n + 1)) / 2;\r\n}\r\n\r\nint first_digit(ll n)\r\n{\r\n\treturn n % 10;\r\n}\r\n\r\nll firstNdigits(ll n, ll num)\r\n{\r\n\tll p = pow(10, n);\r\n\treturn num % p;\r\n}\r\n\r\nint last_digit(ll n)\r\n{\r\n\twhile (n > 9)\r\n\t{\r\n\t\tn /= 10;\r\n\t}\r\n\treturn n;\r\n}\r\n\r\nint count_digits(ll n)\r\n{\r\n\tif (n == 0)\r\n\t\treturn 1;\r\n\r\n\tint count = 0;\r\n\twhile (n > 0)\r\n\t{\r\n\t\tn /= 10;\r\n\t\tcount++;\r\n\t}\r\n\treturn count;\r\n}\r\n\r\nll sum_of_digits(ll n)\r\n{\r\n\tll sum = 0;\r\n\twhile (n > 0)\r\n\t{\r\n\t\tsum += (n % 10);\r\n\t\tn /= 10;\r\n\t}\r\n\treturn sum;\r\n}\r\n\r\nll sum_of_digits(string str)\r\n{\r\n\tll sum = 0;\r\n\tfor (ll i = 0; i < str.size(); i++)\r\n\t{\r\n\t\tsum += (str[i] - '0');\r\n\t}\r\n\treturn sum;\r\n}\r\n\r\nint index_BinarySearch(int arr[], int l, int r, int key)\r\n{\r\n\twhile (l <= r)\r\n\t{\r\n\r\n\t\tint m = (l + r) / 2;\r\n\r\n\t\tif (arr[m] == key)\r\n\t\t{\r\n\t\t\treturn m;\r\n\t\t}\r\n\r\n\t\tif (arr[m] > key)\r\n\t\t{\r\n\t\t\tr = m - 1;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tl = m + 1;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\nbool isFound_BinarySearch(int arr[], int l, int r, int key)\r\n{\r\n\tint m = (l + r) / 2;\r\n\twhile (arr[m] != key && l <= r)\r\n\t{\r\n\t\tif (arr[m] < key)\r\n\t\t{\r\n\t\t\tl = m + 1;\r\n\t\t}\r\n\t\telse if (arr[m] > key)\r\n\t\t{\r\n\t\t\tr = m - 1;\r\n\t\t}\r\n\t\tm = (l + r) / 2;\r\n\t}\r\n\treturn (arr[m] == key);\r\n}\r\n\r\nint index_linearSearch(int arr[], int size, int key)\r\n{\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (arr[i] == key)\r\n\t\t\treturn i;\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nbool isFound_linearSearch(int arr[], int size, int key)\r\n{\r\n\tfor (int i = 0; i < size; i++)\r\n\t{\r\n\t\tif (arr[i] == key)\r\n\t\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nbool isPalindrome(string str)\r\n{\r\n\tfor (int i = 0, j = str.size() - 1; i < j; i++, j--)\r\n\t{\r\n\t\tif (str[i] != str[j])\r\n\t\t\treturn 0;\r\n\t}\r\n\treturn 1;\r\n}\r\n\r\nstring toBinary(ll num)\r\n{\r\n\tif (num == 0)\r\n\t\treturn \"0\";\r\n\r\n\tstring result;\r\n\twhile (num != 0)\r\n\t{\r\n\t\tresult.insert(result.begin(), num % 2 + '0');\r\n\t\tnum /= 2;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nstring toBinary(ll size, ll num)\r\n{\r\n\tstring result(size, '0');\r\n\r\n\tif (num == 0)\r\n\t\treturn result;\r\n\r\n\tint index = size - 1;\r\n\twhile (num != 0)\r\n\t{\r\n\t\tresult[index--] = num % 2 + '0';\r\n\t\tnum /= 2;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\nll toDecimal(string binary)\r\n{\r\n\tll d = 0;\r\n\tll level = 0;\r\n\tfor (ll i = binary.size() - 1; i >= 0; i--)\r\n\t{\r\n\t\tif (binary[i] == '1')\r\n\t\t\td += (pow(2, level));\r\n\r\n\t\tlevel++;\r\n\t}\r\n\r\n\treturn d;\r\n}\r\n\r\nvoid print_digits(ll n)\r\n{\r\n\r\n\tif (n != 0)\r\n\t{\r\n\t\tprint_digits(n / 10);\r\n\t\tcout << n % 10 << \" \";\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn;\r\n\t}\r\n}\r\n\r\nvoid print_factors(ll n)\r\n{\r\n\tfor (ll i = 1; i * i <= n; i++)\r\n\t{\r\n\t\tif (n % i == 0)\r\n\t\t{\r\n\t\t\tif (i == (n / i))\r\n\t\t\t\tcout << i << \" \";\r\n\t\t\telse\r\n\t\t\t\tcout << i << \" \" << n / i << \" \";\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid print_primeFators(ll n)\r\n{\r\n\tfor (ll i = 2; i * i <= n; i++)\r\n\t{\r\n\t\twhile (n % i == 0)\r\n\t\t{\r\n\t\t\tn /= i;\r\n\t\t\tcout << i << \" \";\r\n\t\t}\r\n\t}\r\n\tif (n != 1)\r\n\t\tcout << n;\r\n}\r\n\r\nvoid pascal(ll n)\r\n{\r\n\tfor (int i = 1; i <= 2 && i <= n; i++)\r\n\t{\r\n\t\tfor (int j = 1; j <= i; j++)\r\n\t\t\tcout << 1 << \" \";\r\n\r\n\t\tcout << endl;\r\n\t}\r\n\r\n\tvector <ll> base;\r\n\tvector <ll> newv = { 1,1 };\r\n\tfor (ll i = 1; i <= n - 2; i++)\r\n\t{\r\n\t\tbase = newv;\r\n\t\tnewv.clear();\r\n\t\tnewv.push_back(1);\r\n\t\tcout << 1 << \" \";\r\n\t\tfor (ll j = 1; j < base.size(); j++)\r\n\t\t{\r\n\t\t\tcout << base[j] + base[j - 1] << \" \";\r\n\t\t\tnewv.push_back(base[j] + base[j - 1]);\r\n\t\t}\r\n\t\tcout << 1 << endl;\r\n\t\tnewv.push_back(1);\r\n\t}\r\n}\r\n"
}