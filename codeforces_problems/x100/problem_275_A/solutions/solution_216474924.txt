{
    "id": 216474924,
    "contestId": 275,
    "creationTimeSeconds": 1690734426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 275,
        "index": "A",
        "name": "Lights Out",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 275,
        "members": [
            {
                "handle": "muhammad.tuser.sheikh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "Rust 2021",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "use std::io;\nuse std::str::FromStr;\n\n#[allow(dead_code)]\nfn read_line() -> String {\n    let mut buffer = String::new();\n    io::stdin()\n        .read_line(&mut buffer)\n        .expect(\"failed to read line\");\n\n    buffer\n}\n\n#[allow(dead_code)]\nfn read<T: FromStr>() -> Result<T, T::Err> {\n    read_line().trim().parse::<T>()\n}\n\n#[allow(dead_code)]\nfn read_vec<T: FromStr>() -> Result<Vec<T>, T::Err> {\n    read_line()\n        .split_whitespace()\n        .map(|x| x.parse::<T>())\n        .collect()\n}\n\nfn rev(x: i32) -> i32 {\n    if x == 0 {\n        1\n    } else {\n        0\n    }\n}\n\nfn main() {\n    let a = read_vec::<i32>().unwrap();\n    let b = read_vec::<i32>().unwrap();\n    let c = read_vec::<i32>().unwrap();\n\n    let ar = [a, b, c];\n    let mut ans = [[1, 1, 1], [1, 1, 1], [1, 1, 1]];\n\n    for i in 0..3 {\n        for j in 0..3 {\n            if ar[i][j] % 2 == 1 {\n                // if i > 0 && j > 0 {\n                //     ans[i - 1][j - 1] = rev(ans[i - 1][j - 1]);\n                // }\n\n                if i > 0 {\n                    ans[i - 1][j] = rev(ans[i - 1][j]);\n                }\n\n                // if i > 0 && j < 2 {\n                //     ans[i - 1][j + 1] = rev(ans[i - 1][j + 1]);\n                // }\n\n                if j > 0 {\n                    ans[i][j - 1] = rev(ans[i][j - 1]);\n                }\n\n                ans[i][j] = rev(ans[i][j]);\n\n                if j < 2 {\n                    ans[i][j + 1] = rev(ans[i][j + 1]);\n                }\n\n                // if i < 2 && j > 0 {\n                //     ans[i + 1][j - 1] = rev(ans[i + 1][j - 1]);\n                // }\n\n                if i < 2 {\n                    ans[i + 1][j] = rev(ans[i + 1][j]);\n                }\n\n                // if i < 2 && j < 2 {\n                //     ans[i + 1][j + 1] = rev(ans[i + 1][j + 1]);\n                // }\n            }\n        }\n    }\n\n    println!(\"{:#?}\", ans);\n}\n"
}