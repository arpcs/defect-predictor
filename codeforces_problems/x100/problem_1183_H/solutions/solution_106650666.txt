{
    "id": 106650666,
    "contestId": 1183,
    "creationTimeSeconds": 1612594213,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1183,
        "index": "H",
        "name": "Subsequences (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1183,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561559700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\n#include <iostream>\n#include <cstring>\n#include <string>\n#include <cmath>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nint pre[105];\nint dp[105][105];\n\nint main()\n{\n    int n;\n    long long k;\n    scanf(\"%d %lld\", &n, &k);\n\n    string s;\n    cin >> s;\n    for (int i = 0; i < n; i++)\n    {\n        dp[i + 1][0] = 1;\n        for (int j = i - 1; j >= 0; j--)\n        {\n            if (s[i] == s[j])\n            {\n                pre[i + 1] = j + 1;\n                break;\n            }\n        }\n    }\n\n    // for (int i = 1; i <= n; i++)\n    // {\n    //     printf(\"%d \", pre[i]);\n    // }\n    // printf(\"\\n\");\n\n    dp[1][0] = dp[1][1] = 1;\n    for (int i = 2; i <= n; i++)\n    {\n        for (int j = 1; j <= i; j++)\n        {\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n            if (pre[i] != 0)\n            {\n                dp[i][j] -= dp[pre[i]][j];\n            }\n            if (dp[i][j] > k) dp[i][j] = k;\n            //printf(\"dp[%d][%d] = %d\\n\", i, j, dp[i][j]);\n        }\n    }\n\n    long long ans = 0;\n        for (int j = n; j >= 0; j--)\n        {\n            if (k - dp[n][j] >= 0)\n            {\n                k -= dp[n][j];\n                ans += (long long)((long long)dp[n][j] * (long long)(n - j));\n            }\n            else\n            {\n                ans += (long long)((long long)k * (long long)(n - j));\n                k = 0;\n                break;\n            }\n        }\n    if (k == 0) printf(\"%lld\\n\", ans);\n    else printf(\"-1\\n\");\n    return 0;\n}\n\n   \t \t        \t\t \t\t \t\t \t\t\t\t\t"
}