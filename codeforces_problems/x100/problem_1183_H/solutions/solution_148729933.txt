{
    "id": 148729933,
    "contestId": 1183,
    "creationTimeSeconds": 1646676980,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1183,
        "index": "H",
        "name": "Subsequences (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1183,
        "members": [
            {
                "handle": "18o3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561559700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 1092,
    "memoryConsumedBytes": 66252800,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp> \r\n#include <ext/pb_ds/tree_policy.hpp>\r\ntypedef long long ll;\r\n#define pb push_back\r\n#define ff first\r\n#define ss second\r\nconst int N=3e5+7;\r\nconst int mod=1e9+7;\r\nconst double eps=1e-6;\r\nconst double pi=   3.14159265358979323846;\r\nusing namespace std;  \r\nusing namespace __gnu_pbds;\r\ntypedef tree<int, null_type, less_equal<int>, rb_tree_tag,\r\n             tree_order_statistics_node_update>\r\n    op_set;\r\n\r\nint lst;\r\nset< pair<int,int> > current;\r\nvector<int> hold[N];\r\n\r\nvoid add(vector<int>& optimal)\r\n{\r\n    int com=optimal.size()-accumulate(optimal.begin(),optimal.end(),0);\r\n\r\n    hold[lst]=optimal;\r\n    current.insert( {com,lst} );\r\n    lst++;\r\n}\r\n\r\nstring make(vector<int> &cur,string &s)\r\n{\r\n   string temp=\"\";\r\n   for(int i=0;i<s.size();i++)\r\n   {\r\n      if(cur[i]==1)\r\n            temp+=s[i];\r\n   }\r\n   return temp;\r\n}\r\n\r\nint32_t main() \r\n{\r\n   ios_base::sync_with_stdio(false);\r\n   cin.tie(0);\r\n\r\n   int n,k;\r\n   cin >> n >> k;\r\n\r\n   string s;\r\n   cin >> s;\r\n\r\n   vector<int> optimal(n,1);\r\n\r\n   add(optimal);\r\n   \r\n   map<string,int> seen;\r\n   int ans=0;\r\n   while(!current.empty() )\r\n   {\r\n         auto &[req,place]=*current.begin();\r\n         current.erase(current.begin());\r\n\r\n         ans+=req;\r\n         k--;\r\n\r\n         if(k==0)\r\n               break;\r\n\r\n         vector<int> temp=hold[place];\r\n         string t=make(temp,s);\r\n         seen[t]=1;\r\n         //cout << t << \"\\n\";\r\n\r\n         for(int i=0;i<n;i++)\r\n         {\r\n             temp[i]=temp[i]^1;\r\n\r\n             string temp2=make(temp,s);\r\n             if(seen.find(temp2)==seen.end())\r\n             {\r\n                   add(temp);\r\n                   seen[temp2]=1;\r\n             }\r\n\r\n             temp[i]=temp[i]^1;\r\n         }\r\n      \r\n   }\r\n\r\n   if(k>0)\r\n         ans=-1;\r\n   cout << ans << \"\\n\";\r\n\r\n}"
}