{
    "id": 189728890,
    "contestId": 1157,
    "creationTimeSeconds": 1674125247,
    "relativeTimeSeconds": 567,
    "problem": {
        "contestId": 1157,
        "index": "A",
        "name": "Reachable Numbers",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "sunsh1ne"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1674124680
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\n\n#define int long long\n#define PLEASE_AC return 0;\n\n#ifdef LOCAL\n#define debug(x) cerr << (#x) << \":\\t\" << (x) << endl;\n#else\n#define debug(x);\n#endif\n\nusing namespace std;\n\nconst int INF = 1e18 + 1, MOD = 1e9 + 7, N = 1e5 + 100, MAXN = 2e5 + 1, MAXLOG = 17, pow_ = 31, K = 650;\n\nconst long double EPS = 0.00001;\n\nrandom_device rd;\nmt19937 rnd(rd());\n\nvoid solve() {\n    int n;\n    cin >> n;\n    set<int> st = {n};\n    map<int, bool> used;\n    used[n] = true;\n    while (n > 1) {\n        n++;\n        if (used[n]) {\n            break;\n        }\n        used[n] = true;\n        while (n % 10 == 0 && n > 1) {\n            n /= 10;\n            if (used[n]) {\n                break;\n            }\n//            cout << n << ' ';\n        }\n        st.insert(n);\n    }\n    cout << st.size();\n}\n\nsigned main() {\n//    clock_t start = clock();\n    //auto start = chrono::high_resolution_clock::now();\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n//    freopen(\"input.txt\", \"r\", stdin);\n//    freopen(\"output.txt\", \"w\", stdout);\n    int T = 1;\n//    cin >> T;\n    while (T--) {\n        solve();\n    }\n//    clock_t stop = clock();\n//    double elapsed = (double) (stop - start) / CLOCKS_PER_SEC;\n//    cout << elapsed << endl;\n    //auto end = chrono::high_resolution_clock::now();\n    //cout << chrono::duration_cast<chrono::microseconds>(end - start).count();\n}"
}