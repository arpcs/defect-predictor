{
    "id": 164381704,
    "contestId": 509,
    "creationTimeSeconds": 1657936347,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 509,
        "index": "C",
        "name": "Sums of Digits",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 509,
        "members": [
            {
                "handle": "Islam.Saeed"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422705600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 1731,
    "memoryConsumedBytes": 20172800,
    "source": "#include<bits/stdc++.h>\r\n#define IO       \\\r\n    ios_base::sync_with_stdio(0); \\\r\n    cin.tie(0);                   \\\r\n    cout.tie(0);\r\n#define ll  long long\r\n#define endl '\\n'\r\nusing namespace std;\r\nll  n, m ;\r\nint dp[611][3][2733];\r\nstring mx;\r\n//  0 => equal\r\n//  1 => smaller\r\n//  2 => greater\r\nint cur= 0 ;\r\nint solve(int length, int  s , int sumOfDigits){\r\n    if(length > mx.length()  + 300  || sumOfDigits > cur)\r\n        return INT_MAX;\r\n    if(length >= mx.length() && sumOfDigits == cur&&s==2){\r\n            return length;\r\n    }\r\n    if(dp[length][s][sumOfDigits]!=-1)\r\n        return dp[length][s][sumOfDigits];\r\n    int ret =  1e9 ;\r\n    for(int i = (length==0);i < 10 ; i++){\r\n        if(length >= mx.size()){\r\n            ret = min (ret, solve(length+1  , 2 , sumOfDigits+  i));\r\n        }\r\n        else{\r\n            if(s)\r\n                ret = min  (ret, solve(length+1,s ,sumOfDigits + i ));\r\n            else{\r\n                if(char(i+'0') < mx[length]){\r\n                    ret = min ( ret, solve(length+1 , 1 , sumOfDigits + i));\r\n                }\r\n                else if(char(i+'0') > mx[length]){\r\n                    ret = min ( ret, solve(length+1 , 2 , sumOfDigits + i));\r\n                }\r\n                else{\r\n                    ret = min(ret , solve(length+1 , 0 , sumOfDigits + i));\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    return dp[length][s][sumOfDigits] = ret;\r\n}\r\nstring ans ;\r\nvoid build (int length, int  s , int sumOfDigits){\r\n    if(length > mx.length()  + 300 || sumOfDigits > cur)\r\n        return ;\r\n    if(length >= mx.length() && sumOfDigits == cur&&s==2){\r\n        return ;\r\n    }\r\n    int opt = dp[length][s][sumOfDigits];\r\n    for(int i = (length==0);i < 10 ; i++){\r\n        if(length >= mx.size()){\r\n            if(opt ==  solve(length+1  , 2 , sumOfDigits+  i) )\r\n            {\r\n                ans+= i+'0';\r\n                build(length+1, 2, sumOfDigits+i);\r\n                return ;\r\n            }\r\n        }\r\n        else{\r\n            if(s){\r\n                if(opt== solve(length+1,s ,sumOfDigits + i ))\r\n                {\r\n                    ans+= i+'0';\r\n                    build(length+1, s, sumOfDigits+i);\r\n                    return ;\r\n                }\r\n            }\r\n\r\n            else{\r\n                if(char(i+'0') < mx[length]){\r\n                    if(opt== solve(length+1, 1 ,sumOfDigits + i ))\r\n                    {\r\n                        ans+= i+'0';\r\n                        build(length+1, 1, sumOfDigits+i);\r\n                        return ;\r\n                    }\r\n                }\r\n                else if(char(i+'0') > mx[length]){\r\n                    if(opt== solve(length+1,2 ,sumOfDigits + i ))\r\n                    {\r\n                        ans+= i+'0';\r\n                        build(length+1, 2, sumOfDigits+i);\r\n                        return ;\r\n                    }\r\n                }\r\n                else{\r\n                    if(opt== solve(length+1,0 ,sumOfDigits + i ))\r\n                    {\r\n                        ans+= i+'0';\r\n                        build(length+1, 0, sumOfDigits+i);\r\n                        return ;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\nint main() {\r\n    IO\r\n    int TC=1;\r\n    cin >> TC;\r\n    string last = \"0\";\r\n    while (TC--) {\r\n        cin >> n ;\r\n        memset(dp, -1, sizeof dp);\r\n           mx= last;\r\n           cur = n;\r\n           solve(0,0,0);\r\n            ans = \"\";\r\n        build(0,0,0);\r\n        cout << ans << endl;\r\n        last = ans;\r\n    }\r\n}"
}