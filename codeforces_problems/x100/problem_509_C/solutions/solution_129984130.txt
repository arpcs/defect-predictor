{
    "id": 129984130,
    "contestId": 509,
    "creationTimeSeconds": 1632733547,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 509,
        "index": "C",
        "name": "Sums of Digits",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 509,
        "members": [
            {
                "handle": "kusssso"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422705600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 5939200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define all(x) (x).begin(), (x).end()\r\n#define fi first\r\n#define se second\r\n \r\nconst int N = 305;\r\nconst string inf(N, '9');\r\n\r\nint n, b[N];\r\n\r\nstring ans[N];\r\nstring pre = \"0\";\r\n\r\nint len = 1, pos;\r\nint f[N][N][2];\r\n\r\nchar conv (int x) {\r\n  return char(x + '0');\r\n}\r\n\r\nbool cal (int i, int s, int free) {\r\n  if (i == len) {\r\n    return (free && s == 0);\r\n  }\r\n  if (f[i][s][free] != -1) {\r\n    return f[i][s][free];\r\n  }\r\n  int st = (free ? 0 : pre[i] - '0');\r\n  for (int d = st; d <= min(9LL, s); d++) {\r\n    bool newfree = free | (d > st);\r\n    if (cal(i + 1, s - d, newfree)) {\r\n      ans[pos][i] = conv(d);\r\n      return f[i][s][free] = true;\r\n    } \r\n  }\r\n  return f[i][s][free] = false;\r\n}\r\n\r\nsigned main(){\r\n  ios_base::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  cin >> n;\r\n  for (int i = 1; i <= n; i++) {\r\n    cin >> b[i];\r\n  }\r\n  for (pos = 1; pos <= n; pos++) {\r\n    while (1) {\r\n      for (int i = 0; i <= len; i++) {\r\n        for (int j = 0; j <= b[pos]; j++) {\r\n          f[i][j][0] = f[i][j][1] = -1;\r\n        }\r\n      }\r\n      while (pre.size() < len) {\r\n        pre = '0' + pre;\r\n      }\r\n      ans[pos].resize(len, '0');\r\n      if (cal(0, b[pos], 0)) {\r\n        pre = ans[pos];\r\n        break;\r\n      }\r\n      len++;\r\n    }\r\n  }\r\n  for (int i = 1; i <= n; i++) {\r\n    cout << ans[i] << '\\n';\r\n  }\r\n  return 0;\r\n}\r\n"
}