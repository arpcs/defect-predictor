{
    "id": 215660766,
    "contestId": 509,
    "creationTimeSeconds": 1690336413,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 509,
        "index": "C",
        "name": "Sums of Digits",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 509,
        "members": [
            {
                "handle": "AhmedYahia"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422705600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 1843200,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\n\r\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\r\nusing namespace std;\r\n#define e \"\\n\"\r\n#define ll long long\r\n#define all(v) v.begin(),v.end()\r\n\r\nvoid fast() {\r\n    ios_base::sync_with_stdio(false);\r\n    cout.tie(NULL);\r\n    cin.tie(NULL);\r\n\r\n}\r\n\r\nconst ll mod = 1e9+7 , N = 5e2+1, M = 3e2+1;\r\nint dx[] = {0, 0, 1, -1};\r\nint dy[] = {1, -1, 0, 0};\r\n\r\nll gcd(ll a, ll b) { return (!b) ? a : gcd(b, a % b); }\r\n\r\nll lcm(ll a, ll b) { return a / gcd(a, b) * b; }\r\nint n; int dp[N][M][3];\r\nvector<int>v;\r\nstring s;\r\nint solve(int len,int currb,int flag) {\r\n\r\n    if (len > s.size() && currb == 0)\r\n        return len*-1;\r\n    if (len == s.size() && currb == 0 && flag == 2)\r\n        return len*-1;\r\n    int &ret = dp[len][currb][flag];\r\n    if (~ret)return ret;\r\n    ret = -1e9;\r\n    for (int i = (len == 0 ? 1:(len>=s.size()? (int)min(currb,9):0)); i < min(10, currb + 1); ++i) {\r\n        if (flag || len >= s.size()) {\r\n            ret = max(ret, solve(len + 1, currb - i, flag));\r\n        } else {\r\n            if (i < s[len] - '0')\r\n                ret = max(ret, solve(len + 1, currb - i, 1));\r\n            else if (i > s[len] - '0')\r\n                ret = max(ret, solve(len + 1, currb - i, 2));\r\n            else\r\n                ret = max(ret, solve(len + 1, currb - i, 0));\r\n\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nstring temp;  int optimal;\r\nvoid trace(int len,int currb,int flag) {\r\n    if (len > s.size() && currb == 0)\r\n        return;\r\n    if (len == s.size() && currb == 0 && flag == 2)\r\n        return;\r\n    for (int i = (len==0); i <10; ++i) {\r\n        if (flag || len>=s.size()) {\r\n            if (solve(len + 1, currb - i, flag) == optimal) {\r\n                temp += (char) i;\r\n                trace(len + 1, currb - i, flag);\r\n                break;\r\n            }\r\n        } else {\r\n            if (i < s[len]-'0' && solve(len + 1, currb - i, 1) == optimal) {\r\n                temp += (char) i;\r\n                trace(len + 1, currb - i, 1);\r\n                break;\r\n            } else if (i > s[len]-'0' && solve(len + 1, currb - i, 2) == optimal) {\r\n                temp += (char) i;\r\n                trace(len + 1, currb - i, 2);\r\n                break;\r\n            } else if (i==s[len]-'0'&&solve(len + 1, currb - i, 0) == optimal) {\r\n                temp += (char) i;\r\n                trace(len + 1, currb - i, 0);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\nvoid solve() {\r\n    cin>>n;\r\n    v.resize(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        cin>>v[i];\r\n    }\r\n    s=\"0\";\r\n    for (int i = 0; i < n; ++i) {\r\n        memset(dp,-1,sizeof dp);\r\n        optimal=solve(0,v[i],0);\r\n        trace(0,v[i],0);\r\n       s=\"\";\r\n        for (int j = 0; j < temp.size(); ++j) {\r\n            cout<<(char)(temp[j]+'0');\r\n            s+=(char)(temp[j]+'0');\r\n        }\r\n        //cout<<' '<<optimal;\r\n        cout<<e;\r\n        temp=\"\";\r\n\r\n\r\n    }\r\n}\r\nint main() {\r\n    fast();\r\n    int t = 1;\r\n    //cin >> t ;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n}"
}