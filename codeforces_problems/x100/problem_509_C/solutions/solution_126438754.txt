{
    "id": 126438754,
    "contestId": 509,
    "creationTimeSeconds": 1629373122,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 509,
        "index": "C",
        "name": "Sums of Digits",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 509,
        "members": [
            {
                "handle": "nor"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422705600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4300800,
    "source": "#ifndef LOCAL\n    #pragma GCC optimize(\"O3,unroll-loops\")\n    #pragma GCC target(\"avx,avx2,sse,sse2,sse3,sse4,popcnt,bmi,bmi2,lzcnt\")\n#endif\n\n#include \"bits/stdc++.h\"\n\n#ifdef DEBUG\n    #include \"includes/debug/debug.hpp\"\n#else\n    #define debug(...) 0\n#endif\n\nusing namespace std;\n\nusing ll = int64_t;\nusing ld = long double;\n\nint main() {\n    cin.tie(nullptr)->sync_with_stdio(false);\n    int _tests = 1;\n    // cin >> _tests;\n    for (int _test = 1; _test <= _tests; ++_test) {\n        int n;\n        cin >> n;\n        const auto get_next = [&](const string& a, int b) -> string {\n            int curlen = (int)a.size();\n            if (curlen * 9 < b) {\n                curlen = (b + 8) / 9;\n                string ans(curlen, '0');\n                ans[0] = '1';\n                --b;\n                --curlen;\n                while (b > 0) {\n                    int increase = min(b, 9 - (ans[curlen] - '0'));\n                    b -= increase;\n                    ans[curlen] += increase;\n                    --curlen;\n                }\n                return ans;\n            } else {\n                bool found = false;\n                string best;\n                for (int i = 0; i < curlen; ++i) {\n                    if (a[i] == '9') continue;\n                    string cur = a.substr(0, i);\n                    cur += char(a[i] + 1);\n                    cur += string(curlen - i - 1, '0');\n                    int to_get = b;\n                    for (auto c : cur) to_get -= c - '0';\n                    if (to_get < 0) continue;\n                    int pos = curlen - 1;\n                    while (to_get > 0) {\n                        int increase = min(to_get, 9 - (cur[pos] - '0'));\n                        to_get -= increase;\n                        cur[i] += increase;\n                        --pos;\n                    }\n                    if (!found)\n                        best = cur, found = true;\n                    else\n                        best = min(best, cur);\n                }\n                if (found) return best;\n                ++curlen;\n                string ans(curlen, '0');\n                ans[0] = '1';\n                --b;\n                --curlen;\n                while (b > 0) {\n                    int increase = min(b, 9 - (ans[curlen] - '0'));\n                    b -= increase;\n                    ans[curlen] += increase;\n                    --curlen;\n                }\n                return ans;\n            }\n        };\n\n        string ans = \"0\";\n        for (int i = 0; i < n; ++i) {\n            int b;\n            cin >> b;\n            ans = get_next(ans, b);\n            cout << ans << '\\n';\n        }\n    }\n}\n\n"
}