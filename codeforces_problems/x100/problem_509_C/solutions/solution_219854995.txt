{
    "id": 219854995,
    "contestId": 509,
    "creationTimeSeconds": 1692668780,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 509,
        "index": "C",
        "name": "Sums of Digits",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 509,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422705600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 1331200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define Bankai ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n\nconst int mx_size=3e2+3;\nconst int oo=1e9;\nconst long long mod=1e9+7;\n\nint n,tc,m,d;\nstring s,old;\n\nlong long memo[40][mx_size][3][3];\nint vis[40][mx_size][3][3];\n\nlong long dp(int i,int rem ,bool great,bool ok){\n\n    if(i==n) {\n        if(rem)\n            return (rem / 9) + (rem % 9 != 0);\n\n        return (ok==1 ||  !great);\n\n    }\n\n    if(rem==0){\n        int cnt=n-i;\n\n        while(i<n) {\n            ok =ok || ((0<(s[i]-'0') )  && !great);\n            i++;\n        }\n\n        cnt+=(ok==1 ||!great);\n\n        return cnt;\n\n    }\n\n    auto &ret=memo[i][rem][great][ok];\n    if(vis[i][rem][great][ok]==tc)\n        return ret;\n    vis[i][rem][great][ok]=tc;\n\n    ret=oo;\n\n    for(int j=0;j<=9;j++){\n\n        if(j>rem)\n            break;\n\n        if(j==0 && i==0)\n            continue;\n\n        ret=min(ret,dp(i+1, rem-j , great || ( j>(s[i]-'0') ) , ok || ((j<(s[i]-'0') )  && !great))+1);\n\n    }\n\n\n    return ret;\n\n}\n\nvoid build(int i,int rem ,bool great,bool ok){\n\n    if(i==n) {\n\n        if(rem){\n            string ss=\"\";\n\n            while(rem>=9){\n                ss.push_back('9');\n                rem-=9;\n            }\n\n            if(rem)\n                ss.push_back(rem+'0');\n\n            reverse(ss.begin(),ss.end());\n            s+=ss;\n\n            return;\n\n        }\n\n        if(ok ||  !great)\n            s.push_back('0');\n\n        return;\n\n    }\n\n    if(rem==0){\n\n        while(i<n) {\n            s.push_back('0');\n            ok =ok || ((0<(old[i]-'0') )  && !great);\n            i++;\n        }\n\n        if(ok ||  !great)\n            s.push_back('0');\n        return;\n\n    }\n\n    int res=dp(i,rem,great,ok);\n\n\n    for(int j=0;j<=9;j++){\n\n        if(j>rem)\n            break;\n\n        if(j==0 && i==0)\n            continue;\n\n        if(dp(i+1, rem-j , great || ( j>(old[i]-'0') ) , ok || ((j<(old[i]-'0') )  && !great))+1 == res){\n\n            s.push_back(j+'0');\n            return build(i+1, rem-j , great || ( j>(old[i]-'0') ) , ok || ((j<(old[i]-'0') )  && !great));\n\n        }\n\n    }\n\n\n}\n\n\nvoid ROOM() {\n\n    int b;\n    cin >> m >> b;\n    s=\"\";\n\n    while(b>=9){\n        s.push_back('9');\n        b-=9;\n    }\n\n    if(b)\n        s.push_back(b+'0');\n\n    reverse(s.begin(),s.end());\n    cout<<s<<endl;\n\n    for(int i=1;i<m;i++){\n\n        tc++;\n        n=s.size();\n\n        cin>>b;\n        dp(0,b,0,0);\n\n        old=s;\n\n        s=\"\";\n        build(0,b,0,0);\n        cout<<s<<endl;\n    }\n\n\n}\nint main()\n{\n    Bankai\n    int t=1;\n\n    //cin>>t;\n    while(t--){\n\n        tc++;\n        ROOM();\n\n    }\n    return 0;\n}\n   \t\t  \t\t \t\t\t   \t\t   \t    \t \t",
    "suggested_categories": [
        "dynamic programming",
        "algorithm",
        "data structure",
        "code quality",
        "c++",
        "optimization",
        "recursive functions",
        "memory management",
        "string manipulation",
        "input/output handling",
        "mathematics",
        "debugging",
        "bit manipulation",
        "error handling",
        "performance monitoring",
        "software testing",
        "functional programming",
        "control flow",
        "integer operations",
        "code styling"
    ]
}