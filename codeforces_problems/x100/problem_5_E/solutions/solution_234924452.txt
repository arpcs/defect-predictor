{
    "id": 234924452,
    "contestId": 5,
    "creationTimeSeconds": 1701260479,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "ahihi1234"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 96153600,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define int long long\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define isz(x) ((int)x.size())\r\n#define sumof(x) accumulate(all(x), 0ll)\r\n\r\nstruct FenwickTree{\r\n   int n; vector<int> t;\r\n\r\n   void init(int _n){\r\n      n=_n;\r\n      t.assign(n+1, 0);\r\n   }\r\n\r\n   void update(int pos, int val){\r\n      for (int i=pos; i<=n; i+=i&(-i)) t[i]+=val;\r\n   }\r\n\r\n   void init(int _n, int* a){\r\n      init(_n);\r\n      for (int i=1; i<=n; ++i) update(i, a[i]);\r\n   }\r\n\r\n   int get(int pos){\r\n      int ans=0;\r\n      for (int i=pos; i; i-=i&(-i)) ans+=t[i];\r\n      return ans;\r\n   }\r\n\r\n   int get(int l, int r){\r\n      if (l>r) return 0;\r\n      return get(r)-get(l-1);\r\n   }\r\n} bit;\r\n\r\nconst int N=2e6+1;\r\nint n, a[N], l[N], r[N];\r\nvector<int> vv[N];\r\n\r\nvoid solve(){\r\n   cin >> n;\r\n   for (int i=1; i<=n; ++i) cin >> a[i];\r\n   for (int i=n+1; i<=n*2; ++i) a[i]=a[i-n];\r\n   n*=2;\r\n   stack<int> st;\r\n   for (int i=1; i<=n; ++i){\r\n      while (st.size() && a[st.top()]<=a[i]) st.pop();\r\n      l[i]=st.size()?st.top():0;\r\n      st.push(i);\r\n   }\r\n   while (st.size()) st.pop();\r\n   for (int i=n; i>=1; --i){\r\n      while (st.size() && a[st.top()]<=a[i]) st.pop();\r\n      r[i]=st.size()?st.top():n+1;\r\n      st.push(i);\r\n   }\r\n   bit.init(n+2);\r\n   int ans=0;\r\n   set<int> pos;\r\n   for (int i=1; i<=n; ++i) vv[l[i]].push_back(i), bit.update(i+1, 1), pos.emplace_hint(pos.end(), i);\r\n   for (int i=n/2; i>=1; --i){\r\n      while (pos.size() && *pos.rbegin()>=i+n/2) bit.update(*pos.rbegin()+1, -1), pos.erase(prev(pos.end()));\r\n      ans+=bit.get(i+2, r[i]+1);\r\n      for (int j:vv[i]) if (pos.count(j)) pos.erase(j), bit.update(j+1, -1);\r\n   }\r\n   sort(a+1, a+n/2+1);\r\n   int idx=n/2;\r\n   while (idx>=1 && a[idx]==a[n/2]) --idx;\r\n   int idx2=idx;\r\n   while (idx>=1 && a[idx]==a[idx2]) --idx;\r\n   int cnt1=n/2-idx2, cnt2=idx2-idx;\r\n   cout << ans-cnt1*(cnt1-1)/2-cnt2*(cnt2-1)/2-cnt1*cnt2;\r\n}\r\n\r\nint32_t main(){\r\n   ios_base::sync_with_stdio(false);\r\n   cin.tie(nullptr); \r\n   int ntests=1;\r\n   // cin >> ntests;\r\n   for (int i=1; i<=ntests; ++i) solve();\r\n   return 0;\r\n}\r\n"
}