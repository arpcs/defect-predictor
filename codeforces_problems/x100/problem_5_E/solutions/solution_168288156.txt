{
    "id": 168288156,
    "contestId": 5,
    "creationTimeSeconds": 1660491757,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "Pedestrian1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 2058,
    "memoryConsumedBytes": 43520000,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/trie_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/priority_queue.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\nusing namespace __gnu_cxx;\r\ntypedef long long ll;\r\n//tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> tr;\r\n//__gnu_pbds::priority_queue<int, greater<int>, pairing_heap_tag> qu;\r\n//typedef trie<string, null_type, trie_string_access_traits<>, pat_trie_tag, trie_prefix_search_node_update> pref_trie;\r\nconst int N = 2000005;\r\nint n, m, k;\r\nint a[N];\r\nint stk[N];\r\nint c[N];\r\n\r\ninline int lowbit(int x)\r\n{\r\n    return x & -x;\r\n}\r\n\r\nvoid update(int i, int k)\r\n{\r\n    while (i <= n)\r\n    {\r\n        c[i] += k;\r\n        i += lowbit(i);\r\n    }\r\n}\r\n\r\nint query(int i)\r\n{\r\n    int ans = 0;\r\n    while (i)\r\n    {\r\n        ans += c[i];\r\n        i -= lowbit(i);\r\n    }\r\n    return ans;\r\n}\r\n\r\nint vis[N];\r\n\r\nint main()\r\n{\r\n    int p, q, u, v, w, x, y, z, T;\r\n    cin >> n;\r\n    vector<int> V(n);\r\n    for (int i = 1; i <= n; i++)\r\n        scanf(\"%d\", &a[i]), V[i - 1] = a[i];\r\n    sort(V.begin(), V.end());\r\n    V.erase(unique(V.begin(), V.end()), V.end());\r\n    for (int i = 1; i <= n; i++)\r\n        a[i] = lower_bound(V.begin(), V.end(), a[i]) - V.begin() + 1;\r\n    int pos = max_element(a + 1, a + n + 1) - a;\r\n    vector<int> b;\r\n    for (int i = 0; i < n; i++)\r\n        b.emplace_back(a[(i + pos - 1) % n + 1]);\r\n    ll ans = 0;\r\n    int top = 0;\r\n//\r\n//    for (int i = 0; i < n; i++)\r\n//        cout << b[i] << \" \";\r\n//    cout << endl;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        ans += query(b[i]);\r\n//        cout << i << \" \" << b[i] << \" \" << ans << endl;\r\n\r\n        if (top && b[stk[1]] > b[i])ans++;\r\n\r\n//        cout << i << \" \" << b[i] << \" \" << ans << endl;\r\n\r\n        bool flag = false;\r\n        if (top == 1 || b[stk[1]] == b[i] || top >= 2 && b[stk[2]] <= b[i])\r\n            flag = true;\r\n        while (top && b[stk[top]] < b[i])\r\n        {\r\n            if (vis[stk[top]])vis[stk[top - 1]] = 1;\r\n            update(b[stk[top--]], -1);\r\n        }\r\n        stk[++top] = i;\r\n        update(b[i], 1);\r\n        if (flag)vis[stk[top]] = 1;\r\n//        cout << ans << endl;\r\n    }\r\n//    for (int i = 1; i <= top; i++)\r\n//        cout << b[stk[i]] << \" \";\r\n//    cout << endl;\r\n//\r\n//    for (int i = 1; i <= top; i++)\r\n//        cout << vis[stk[i]] << \" \";\r\n//    cout << endl;\r\n//\r\n//    cout << top << endl;\r\n    while (top && b[stk[top]] != a[pos])\r\n    {\r\n        if (vis[stk[top--]] == 1)break;\r\n        ans++;\r\n    }\r\n    cout << ans;\r\n    return 0;\r\n}"
}