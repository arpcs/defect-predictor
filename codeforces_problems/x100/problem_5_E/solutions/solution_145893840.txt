{
    "id": 145893840,
    "contestId": 5,
    "creationTimeSeconds": 1644527777,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "darkkcyan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 1620,
    "memoryConsumedBytes": 76595200,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\npair<int, int> ordered(int u, int v) {\n    if (u > v) swap(u, v);\n    return {u, v};\n}\n\nint main() {\n    cin.tie(0)->sync_with_stdio(0);\n    \n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (auto& i: a) cin >> i;\n    long long mx_cnt = count(a.begin(), a.end(), *max_element(a.begin(), a.end()));\n    a.insert(a.end(), a.begin(), a.end());\n    \n    deque<int> qu;\n    for (int i = 0; i < n; ++i) {\n        while (qu.size() and a[qu.back()] < a[i]) qu.pop_back();\n        qu.push_back(i);\n    }\n    \n    long long eq_pairs = 0;\n    set<pair<int, int>> pairs;\n    \n    auto true_pos = [&](int p) {\n        if (p >= n) return p - n;\n        return p;\n    };\n    \n    for (int i = n; i < 2 * n; ++i) {\n        while (qu.size() and qu.front() <= i - n) qu.pop_front();\n        while (qu.size() and a[qu.back()] < a[i]) {\n            pairs.insert(ordered(true_pos(qu.back()), i - n));\n            // clog << i << ' ' << qu.back() << endl;\n            qu.pop_back();\n        }\n        int l = 0, r = (int)qu.size();\n        while (l < r) {\n            int mid = (l + r) / 2;\n            if (a[qu[mid]] == a[i]) r = mid;\n            else l = mid + 1;\n        }\n        eq_pairs += qu.size() - l;\n        // clog << eq_pairs << endl;\n        if (l) {\n            pairs.insert(ordered(true_pos(qu[l - 1]), i - n));\n            // clog << i << ' ' << qu[l - 1] << endl;\n        }\n        qu.push_back(i);\n    }\n    \n    \n    cout << eq_pairs + (long long)pairs.size() - mx_cnt * (mx_cnt - 1) / 2;\n    \n    return 0;\n}\n"
}