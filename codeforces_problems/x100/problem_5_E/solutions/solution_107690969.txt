{
    "id": 107690969,
    "contestId": 5,
    "creationTimeSeconds": 1613565672,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "OOmega"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 7987200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint mx,n,a[1000050],b[1000050];\r\nlong long ans;\r\nvector<pair<int,int> > st;\r\n\r\nint main() {\r\n\tscanf(\"%d\",&n);\r\n\tfor (int i=0; i<n; ++i) {\r\n\t\tscanf(\"%d\",a+i);\r\n\t\tif (a[i]>mx) mx=a[i];\r\n\t}\r\n\tfor (int i=0; i<n; ++i) {\r\n\t\tif (a[i]==mx) {\r\n\t\t\tfor (int j=0; j+i<n; ++j)\r\n\t\t\t\tb[j]=a[j+i];\r\n\t\t\tfor (int j=n-i; j<n; ++j)\r\n\t\t\t\tb[j]=a[j+i-n];\r\n\t\t\tfor (int j=0; j<n; ++j) a[j]=b[j];\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tfor (int i=0; i<n; ++i) {\r\n\t\twhile (!st.empty()&&st.back().first<a[i]) {\r\n\t\t\tans+=st.back().second; st.pop_back();\r\n\t\t}\r\n\t\tif (st.empty()||st.back().first!=a[i]) {\r\n\t\t\tif (st.size()>0) ++ans;\r\n\t\t\tst.push_back(make_pair(a[i],1));\r\n\t\t} else {\r\n\t\t\tans+=st.back().second++;\r\n\t\t\tif (st.size()>1) ++ans;\r\n\t\t}\r\n\t}\r\n\tcout<<ans;\r\n}",
    "suggested_categories": [
        "c++",
        "algorithm",
        "data structures",
        "code optimization",
        "optimized data structures",
        "input parsing",
        "vector",
        "pair",
        "sorting",
        "stack",
        "complexity analysis",
        "efficient code",
        "programming practices",
        "high performance computing",
        "competitive programming",
        "bit manipulation",
        "performance tuning",
        "efficient iteration",
        "code refactoring",
        "algorithmic efficiency"
    ]
}