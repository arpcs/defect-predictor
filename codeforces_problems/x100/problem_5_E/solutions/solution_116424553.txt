{
    "id": 116424553,
    "contestId": 5,
    "creationTimeSeconds": 1621185242,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "VenenoRoadster"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <deque>\n#include <iomanip>\n#include <iostream>\n#include <tuple>\n#include <vector>\n\nusing namespace std;\nusing ValueIdx = pair<int, int>;\n\nint Query(const deque<ValueIdx> &arr, const int x) {\n    if (arr.empty()) return 0;\n    int l = 0, r = arr.size() - 1;\n    if (arr[r].first > x) return 1;\n    while (l + 1 < r) {\n        int m = (l + r) / 2;\n        if (arr[m].first > x) {\n            l = m;\n        } else {\n            r = m;\n        }\n    }\n    return arr.size() - l;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    int n;\n\n    while (cin >> n) {\n        int h = n / 2, nh = (n & 1 ? h : h - 1);\n        vector<int> a(n);\n        for (auto &x : a) cin >> x;\n        a.resize(n + nh);\n        for (int i = 0; i < nh; ++i) a[i + n] = a[i];\n        // for (auto x : a) cerr << x << \" \"; cerr << endl;\n\n        deque<ValueIdx> dq;\n        dq.push_back(ValueIdx(a[0], 0));\n        int64_t ans = 0;\n        for (size_t i = 1; i < a.size(); ++i) {\n            while (dq.size() && (i < n && dq.front().second + h < i ||\n                                 i >= n && dq.front().second + nh < i))\n                dq.pop_front();\n            ans += Query(dq, a[i]);\n            // cerr << i << \" \" << dq.size() << \" \" << a[i] << \" \" << ans <<\n            // endl;\n            while (dq.size() && dq.back().first < a[i]) dq.pop_back();\n            dq.push_back(ValueIdx(a[i], i));\n        }\n        cout << ans << endl;\n    }\n\n    return 0;\n}\n"
}