{
    "id": 226854634,
    "contestId": 5,
    "creationTimeSeconds": 1696585343,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "Little_Sheep_Yawn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 964,
    "memoryConsumedBytes": 162099200,
    "source": "if True:\r\n    from io import BytesIO, IOBase\r\n    import math\r\n\r\n    import random\r\n    import sys\r\n    import os\r\n\r\n    import bisect\r\n    import typing\r\n    from collections import Counter, defaultdict, deque\r\n    from copy import deepcopy\r\n    from functools import cmp_to_key, lru_cache, reduce\r\n    from heapq import heapify, heappop, heappush, heappushpop, nlargest, nsmallest\r\n    from itertools import accumulate, combinations, permutations, count\r\n    from operator import add, iand, ior, itemgetter, mul, xor\r\n    from string import ascii_lowercase, ascii_uppercase, ascii_letters\r\n    from typing import *\r\n    BUFSIZE = 4096\r\n\r\n    class FastIO(IOBase):\r\n        newlines = 0\r\n\r\n        def __init__(self, file):\r\n            self._fd = file.fileno()\r\n            self.buffer = BytesIO()\r\n            self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n            self.write = self.buffer.write if self.writable else None\r\n\r\n        def read(self):\r\n            while True:\r\n                b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n                if not b:\r\n                    break\r\n                ptr = self.buffer.tell()\r\n                self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n            self.newlines = 0\r\n            return self.buffer.read()\r\n\r\n        def readline(self):\r\n            while self.newlines == 0:\r\n                b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n                self.newlines = b.count(b\"\\n\") + (not b)\r\n                ptr = self.buffer.tell()\r\n                self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n            self.newlines -= 1\r\n            return self.buffer.readline()\r\n\r\n        def flush(self):\r\n            if self.writable:\r\n                os.write(self._fd, self.buffer.getvalue())\r\n                self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n    class IOWrapper(IOBase):\r\n        def __init__(self, file):\r\n            self.buffer = FastIO(file)\r\n            self.flush = self.buffer.flush\r\n            self.writable = self.buffer.writable\r\n            self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n            self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n            self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n    sys.stdin = IOWrapper(sys.stdin)\r\n    sys.stdout = IOWrapper(sys.stdout)\r\n    input = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n    \r\n    def I():\r\n        return input()\r\n\r\n    def II():\r\n        return int(input())\r\n\r\n    def MII():\r\n        return map(int, input().split())\r\n\r\n    def LI():\r\n        return list(input().split())\r\n\r\n    def LII():\r\n        return list(map(int, input().split()))\r\n\r\n    def GMI():\r\n        return map(lambda x: int(x) - 1, input().split())\r\n\r\n    def LGMI():\r\n        return list(map(lambda x: int(x) - 1, input().split()))\r\n\r\n    inf = float('inf')\r\n\r\ndfs, hashing, timeit = False, False, True\r\n\r\nif dfs:\r\n    from types import GeneratorType\r\n\r\n    def bootstrap(f, stack=[]):\r\n        def wrappedfunc(*args, **kwargs):\r\n            if stack:\r\n                return f(*args, **kwargs)\r\n            else:\r\n                to = f(*args, **kwargs)\r\n                while True:\r\n                    if type(to) is GeneratorType:\r\n                        stack.append(to)\r\n                        to = next(to)\r\n                    else:\r\n                        stack.pop()\r\n                        if not stack:\r\n                            break\r\n                        to = stack[-1].send(to)\r\n                return to\r\n        return wrappedfunc\r\n\r\nif hashing:\r\n    RANDOM = random.getrandbits(20)\r\n    class Wrapper(int):\r\n        def __init__(self, x):\r\n            int.__init__(x)\r\n\r\n        def __hash__(self):\r\n            return super(Wrapper, self).__hash__() ^ RANDOM\r\n\r\nif True:\r\n    import time\r\n    def timer(func):\r\n        def wrapper(*args, **kwargs):\r\n            start = time.time()\r\n            result = func(*args, **kwargs)\r\n            end = time.time()\r\n            print(f'Time Used: {round((end - start) * 1000)} ms')\r\n            return result\r\n        return wrapper if timeit else func\r\n\r\nn = II()\r\nnums = LII()\r\nidx = nums.index(max(nums))\r\nnums = nums[idx:] + nums[:idx]\r\n\r\nans = 0\r\nstack = [0]\r\ndp = [0] * n\r\ndp[0] = 1\r\nfor i in range(1, n):\r\n    while nums[stack[-1]] < nums[i]:\r\n        ans += dp[stack.pop()]\r\n    if nums[i] < nums[stack[-1]]:\r\n        ans += 1\r\n        dp[i] = 1\r\n        stack.append(i)\r\n    else:\r\n        ans += dp[stack[-1]]\r\n        dp[stack[-1]] += 1\r\n        if len(stack) > 1: ans += 1\r\n\r\nif len(stack) > 1 and dp[stack[0]] > 1: ans += dp[stack[1]]\r\nfor i in range(2, len(stack)): ans += dp[stack[i]]\r\nprint(ans)"
}