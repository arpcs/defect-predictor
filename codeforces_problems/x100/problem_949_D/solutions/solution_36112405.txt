{
    "id": 36112405,
    "contestId": 949,
    "creationTimeSeconds": 1520591835,
    "relativeTimeSeconds": 8835,
    "problem": {
        "contestId": 949,
        "index": "D",
        "name": "Curfew",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 949,
        "members": [
            {
                "handle": "waynetuinfor"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 3,
        "startTimeSeconds": 1520583000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4505600,
    "source": "#include <bits/stdc++.h>\n#define int long long\n// #include <ext/pb_ds/assoc_container.hpp>\n// #include <ext/pb_ds/tree_policy.hpp>\n// using namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <class c> struct rge { c bg, ed; };\ntemplate <class c> rge<c> range(c i, c j) { return rge<c>{i, j}; }\ntemplate <class c> auto dud(c *x) -> decltype(cerr << *x, 0);\ntemplate <class c> char dud(...);\n#define var(...) #__VA_ARGS__\" = \" << (__VA_ARGS__) << \" \"\nstruct debug {\n~debug() { cerr << endl; }\ntemplate <class c> typename \\\nenable_if <sizeof dud<c>(0) != 1, debug&>::type operator<<(c i) { cerr << boolalpha << i; return *this; }\ntemplate <class c> typename \\\nenable_if <sizeof dud<c>(0) == 1, debug&>::type operator<<(c i) { return *this << range(begin(i), end(i)); }\ntemplate <class c, class b> debug &operator<<(pair<c, b> p) { return *this << \"(\" << p.first << \", \" << p.second << \")\"; }\ntemplate <class c> debug &operator<<(rge<c> d) { *this << \"[ \"; for (auto it = d.bg; it != d.ed; ++it) *this << \", \" + 2 * (it == d.bg) << *it; return *this << \" ]\"; }\n};\n\nconst int maxn = 1e5 + 10, inf = 1e9 + 1;\nint a[maxn], n, d, b;\nint need[maxn], h[maxn];\n\nbool check(int tar) {\n    memset(need, 0, sizeof(need)); memset(h, 0, sizeof(h));\n    set<int> hv;\n    deque<int> dql, dqr;\n    for (int i = 1; i <= n; ++i) {\n        if (a[i] < b - tar) need[i] = b - tar - a[i];\n        else h[i] = a[i] - (b - tar), dql.push_back(i), dqr.push_front(i);\n    }\n    // for (int i = 1; i <= n; ++i) cout << need[i] << ' ' << h[i] << endl;\n    for (int i = 1; i <= n; ++i) if (need[i] > 0) {\n        int t = min(i, n - i + 1);\n        while (dql.size() > 0 && h[dql.front()] == 0) dql.pop_front();\n        while (dqr.size() > 0 && h[dqr.front()] == 0) dqr.pop_front();\n        while (dql.size() > 0 && need[i] > 0 && dql.front() < i) {\n            int c = i - dql.front();\n            if (c > d || c > t) {\n                dql.pop_front();\n                continue;\n            }\n            int dd = min(need[i], h[dql.front()]);\n            need[i] -= dd; h[dql.front()] -= dd;\n            if (h[dql.front()] == 0) dql.pop_front();\n        }\n        \n    } \n    for (int i = 1; i <= n; ++i) {\n        if (h[i] > 0) dql.push_back(i), dqr.push_front(i);\n    }\n    for (int i = n; i >= 1; --i) if (need[i] > 0) {\n        int t = min(i, n - i + 1);\n        while (dql.size() > 0 && h[dql.front()] == 0) dql.pop_front();\n        while (dqr.size() > 0 && h[dqr.front()] == 0) dqr.pop_front();\n        while (dqr.size() > 0 && need[i] > 0 && dqr.front() > i) {\n            int c = dqr.front() - i;\n            if (c > d || c > t) {\n                dqr.pop_front();\n                continue;\n            }\n            int dd = min(need[i], h[dqr.front()]);\n            need[i] -= dd; h[dqr.front()] -= dd;\n            if (h[dqr.front()] == 0) dqr.pop_front();\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (h[i] > 0) dql.push_back(i), dqr.push_front(i);\n    }\n    for (int i = n; i >= 1; --i) if (need[i] > 0) {\n        int t = min(i, n - i + 1);\n        while (dql.size() > 0 && h[dql.front()] == 0) dql.pop_front();\n        while (dqr.size() > 0 && h[dqr.front()] == 0) dqr.pop_front();\n        while (dql.size() > 0 && need[i] > 0) {\n            int c = abs(i - dql.front());\n            if (c > d || c > t) {\n                dql.pop_front();\n                continue;\n            }\n            int dd = min(need[i], h[dql.front()]);\n            need[i] -= dd; h[dql.front()] -= dd;\n            if (h[dql.front()] == 0) dql.pop_front();\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (h[i] > 0) dql.push_back(i), dqr.push_front(i);\n    }\n    for (int i = 1; i <= n; ++i) if (need[i] > 0) {\n        int t = min(i, n - i + 1);\n        while (dql.size() > 0 && h[dql.front()] == 0) dql.pop_front();\n        while (dqr.size() > 0 && h[dqr.front()] == 0) dqr.pop_front();\n        while (dqr.size() > 0 && need[i] > 0) {\n            int c = abs(dqr.front() - i);\n            if (c > d || c > t) {\n                dqr.pop_front();\n                continue;\n            }\n            int dd = min(need[i], h[dqr.front()]);\n            need[i] -= dd; h[dqr.front()] -= dd;\n            if (h[dqr.front()] == 0) dqr.pop_front();\n        }\n    }\n    for (int i = 1; i <= n; ++i) if (need[i] > 0) return false;\n    return true;\n}\n\nint32_t main() {\n    ios_base::sync_with_stdio(false); cin.tie(0);\n    cin >> n >> d >> b;\n    for (int i = 1; i <= n; ++i) cin >> a[i];\n    int dd = 31, ans = inf; \n    while (dd--) if (ans - (1 << dd) >= 0) if (check(ans - (1 << dd))) ans -= (1 << dd);\n    cout << ans << endl;\n}\n"
}