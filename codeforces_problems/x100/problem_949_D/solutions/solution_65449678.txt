{
    "id": 65449678,
    "contestId": 949,
    "creationTimeSeconds": 1574271143,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 949,
        "index": "D",
        "name": "Curfew",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 949,
        "members": [
            {
                "handle": "beginner1010"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1520583000
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author beginner1010\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskD solver = new TaskD();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskD {\n        boolean can(int[] _a, int ans, int d, int b) {\n            int[] a = new int[_a.length];\n            int n = a.length;\n            System.arraycopy(_a, 0, a, 0, n);\n            int sum1 = 0, sum2 = 0;\n            int beg = 0, end = n - 1;\n            while (beg < ans) {\n                a[ans] += a[beg];\n                a[n - 1 - ans] += a[end];\n                a[beg++] = 0;\n                a[end--] = 0;\n            }\n            int idx1 = beg, idx2 = end;\n            while (beg <= end) {\n                while (idx1 < n && idx1 - beg <= d + 1 && sum1 < b) {\n                    int need = Math.min(b - sum1, a[idx1]);\n                    a[idx1] -= need;\n                    sum1 += need;\n                    if (a[idx1] == 0) idx1++;\n                }\n                if (sum1 < b) return false;\n                if (beg == end) return true;\n                while (idx2 >= 0 && end - idx2 <= d + 1 && sum2 < b) {\n                    int need = Math.min(b - sum2, a[idx2]);\n                    a[idx2] -= need;\n                    sum2 += need;\n                    if (a[idx2] == 0) idx2--;\n                }\n                if (sum2 < b) return false;\n                sum1 -= b;\n                sum2 -= b;\n                beg++;\n                end--;\n            }\n            return true;\n        }\n\n        public void solve(int testNumber, InputReader in, PrintWriter out) {\n            int n = in.nextInt();\n            int d = in.nextInt();\n            int b = in.nextInt();\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = in.nextInt();\n            }\n            int lo = 0, hi = n / 2 + 1;\n            can(a, 1, d, b);\n            while (lo < hi) {\n                int mid = (lo + hi) >> 1;\n                if (can(a, mid, d, b) == true) hi = mid;\n                else lo = mid + 1;\n            }\n            out.println(lo);\n        }\n\n    }\n\n    static class InputReader {\n        InputStream is;\n        private byte[] inbuf = new byte[1024];\n        private int lenbuf = 0;\n        private int ptrbuf = 0;\n        static final int[] ints = new int[128];\n\n        public InputReader(InputStream is) {\n            for (int i = '0'; i <= '9'; i++) ints[i] = i - '0';\n            this.is = is;\n        }\n\n        public int readByte() {\n            if (lenbuf == -1) throw new InputMismatchException();\n            if (ptrbuf >= lenbuf) {\n                ptrbuf = 0;\n                try {\n                    lenbuf = is.read(inbuf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (lenbuf <= 0) return -1;\n            }\n            return inbuf[ptrbuf++];\n        }\n\n        public int nextInt() {\n            int num = 0, b;\n            boolean minus = false;\n            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;\n            if (b == '-') {\n                minus = true;\n                b = readByte();\n            }\n\n            while (true) {\n                if (b >= '0' && b <= '9') {\n                    num = (num << 3) + (num << 1) + ints[b];\n                } else {\n                    return minus ? -num : num;\n                }\n                b = readByte();\n            }\n        }\n\n    }\n}\n\n"
}