{
    "id": 164699925,
    "contestId": 153,
    "creationTimeSeconds": 1658135182,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 153,
        "index": "C",
        "name": "Caesar Cipher",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 153,
        "members": [
            {
                "handle": "tommyfjyyds"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1329922800
    },
    "programmingLanguage": "Cobol",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <string>\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <cctype>\r\n \r\nclass MyTransform {\r\nprivate : \r\n   int shift ;\r\npublic :\r\n   MyTransform( int s ) : shift( s ) { } \r\n \r\n  char operator( )( char c ) {\r\n      if ( isspace( c ) ) \r\n\t return ' ' ;\r\n      else {\r\n\t static std::string letters( \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" ) ;\r\n\t std::string::size_type found = letters.find(toupper( c )) ;\r\n\t int shiftedpos = ( static_cast<int>( found ) + shift ) % 26 ;\r\n\t if ( shiftedpos < 0 ) //in case of decryption possibly\r\n\t    shiftedpos = 26 + shiftedpos ;\r\n\t char shifted = letters[shiftedpos] ;\r\n\t return shifted ;\r\n      }\r\n  }\r\n} ;\r\n \r\nint main( ) {\r\n   std::string input ;\r\n   //std::cout << \"Which text is to be encrypted ?\\n\" ;\r\n   getline( std::cin , input ) ;\r\n   //std::cout << \"shift ?\\n\" ;\r\n   int myshift = 0 ;\r\n   std::cin >> myshift ;\r\n   //std::cout << \"Before encryption:\\n\" << input << std::endl ;\r\n   std::transform ( input.begin( ) , input.end( ) , input.begin( ) ,\r\n\t MyTransform( myshift ) ) ;\r\n   //std::cout << \"encrypted:\\n\" ;\r\n   std::cout << input << std::endl ;\r\n   //myshift *= -1 ; //decrypting again\r\n   //std::transform ( input.begin( ) , input.end( ) , input.begin( ) ,\r\n\t //MyTransform( myshift ) ) ;\r\n   //std::cout << \"Decrypted again:\\n\" ;\r\n   //std::cout << input << std::endl ;\r\n   return 0 ;\r\n}\r\n"
}