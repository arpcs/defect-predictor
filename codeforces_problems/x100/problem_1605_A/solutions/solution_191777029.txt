{
    "id": 191777029,
    "contestId": 1605,
    "creationTimeSeconds": 1675388488,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1605,
        "index": "A",
        "name": "A.M. Deviation",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1605,
        "members": [
            {
                "handle": "i_wanna_pwn_algos"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1636727700
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 3379200,
    "source": "#!/usr/bin/env python\r\nfrom __future__ import division, print_function\r\n\r\nimport os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\n\r\n\r\n############################################################################\r\n#                           ACTUAL CODE\r\n############################################################################\r\nfrom collections import Counter\r\n\r\ndef ceil(a, b):\r\n    return (a + b - 1) // b\r\n\r\n\r\ndef solve(a1, a2, a3):\r\n    p = a1 + a3\r\n    q = a2 + a2\r\n    if abs(p - q) % 3 == 0:\r\n        print(0)\r\n    else:\r\n        print(1)\r\n\r\n\r\ndef main():\r\n    T = int(input().strip())\r\n    for _ in range(T):\r\n        a1, a2, a3 = list(map(int, input().strip()))\r\n        solve(a1, a2, a3)\r\n\r\n############################################################################\r\n#                         FAST-IO\r\n#                         PyRIVAL\r\n############################################################################\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\ndef print(*args, **kwargs):\r\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\r\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\r\n    at_start = True\r\n    for x in args:\r\n        if not at_start:\r\n            file.write(sep)\r\n        file.write(str(x))\r\n        at_start = False\r\n    file.write(kwargs.pop(\"end\", \"\\n\"))\r\n    if kwargs.pop(\"flush\", False):\r\n        file.flush()\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n############################################################################\r\n\r\n\r\n## DRIVER # PROGRAM ########################################################\r\nif __name__ == \"__main__\":\r\n    main()"
}