{
    "id": 202903484,
    "contestId": 1819,
    "creationTimeSeconds": 1682028391,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "mrmoooo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n#include <utility>\r\n#include <set>\r\n#include <algorithm>\r\n#include <cassert>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef pair<ll, ll> simps;\r\ntypedef pair<int, simps> threesome;\r\n\r\n#define sec second.first\r\n#define third second.second\r\n#define all(v) v.begin(), v.end()\r\n#define rall(v) v.rbegin(), v.rend()\r\n\r\nconst simps fail = {-1, -1};\r\n\r\nint t, n;\r\nvector<simps> rect;\r\n\r\nbool hcmp(int a, int b) {\r\n    return rect[a].first < rect[b].first;\r\n}\r\n\r\nbool wcmp(int a, int b) {\r\n    return rect[a].second < rect[b].second;\r\n}\r\n\r\nsimps works(vector<int>& h, vector<int>& w, vector<bool>& visited, int rem) {\r\n    ll tarh, tarw;\r\n    simps res;\r\n    if (rem == 0) return {0, 0};\r\n    while (not h.empty() and visited[h.back()]) h.pop_back();\r\n    tarh = rect[h.back()].first;\r\n    res = {tarh, 0};\r\n    while (not h.empty() and rect[h.back()].first == tarh) {\r\n        if (visited[h.back()]) h.pop_back();\r\n        visited[h.back()] = true;\r\n        rem--;\r\n        res.second += rect[h.back()].second;\r\n        h.pop_back();\r\n    }\r\n    if (rem == 0) return res;\r\n    while (not w.empty() and visited[w.back()]) w.pop_back();\r\n    tarw = rect[w.back()].second;\r\n    res.second += tarw;\r\n    while (not w.empty() and rect[w.back()].second == tarw) {\r\n        if (visited[w.back()]) w.pop_back();\r\n        visited[w.back()] = true;\r\n        rem--;\r\n        tarh -= rect[w.back()].first;\r\n        w.pop_back();\r\n    }\r\n    if (tarh < 0) return fail;\r\n    if (tarh == 0) {\r\n        if (rem == 0) return res;\r\n        return fail;\r\n    }\r\n    simps nxt = works(h, w, visited, rem);\r\n    if (nxt.first == tarh and nxt.second == tarw) return res;\r\n    return fail;\r\n}\r\n\r\nsimps calc() {\r\n    vector<int> h, w;\r\n    vector<bool> visited(n);\r\n    for (int i = 0; i < n; i++) {\r\n        h.push_back(i);\r\n        w.push_back(i);\r\n    }\r\n    sort(all(h), hcmp);\r\n    sort(all(w), wcmp);\r\n    return works(h, w, visited, n);\r\n}\r\n\r\nvoid subcase() {\r\n    cin >> n;\r\n    rect.clear(); rect.resize(n);\r\n    for (int i = 0; i < n; i++) cin >> rect[i].first >> rect[i].second;\r\n    simps ans1 = calc();\r\n    for (int i = 0; i < n; i++) swap(rect[i].first, rect[i].second);\r\n    simps ans2 = calc();\r\n    if (ans1.first == ans2.second and ans1.second == ans2.first) ans2 = fail;\r\n    cout << (ans1 != fail) + (ans2 != fail) << \"\\n\";\r\n    if (ans1 != fail) cout << ans1.first << \" \" << ans1.second << \"\\n\";\r\n    if (ans2 != fail) cout << ans2.second << \" \" << ans2.first << \"\\n\";\r\n\treturn;\r\n}\r\n\r\nint main() {\r\n    //freopen(\"test.txt\", \"w\", stdout);\r\n\tcin >> t;\r\n\tfor (int i = 0; i < t; i++) subcase();\r\n\treturn 0;\r\n}"
}