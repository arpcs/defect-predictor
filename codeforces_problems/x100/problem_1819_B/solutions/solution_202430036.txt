{
    "id": 202430036,
    "contestId": 1819,
    "creationTimeSeconds": 1681695825,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "Monogon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 22,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 18841600,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define sz(x) ((int) (x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#define vi vector<int>\r\n#define pii pair<int, int>\r\n#define rep(i, a, b) for(int i = (a); i < (b); i++)\r\nusing namespace std;\r\ntemplate<typename T>\r\nusing minpq = priority_queue<T, vector<T>, greater<T>>;\r\n\r\nusing namespace std;\r\n\r\ntemplate<typename T, class Compare>\r\nusing PQ = priority_queue<T, vector<T>, Compare>;\r\n\r\ntemplate<typename T, class Compare>\r\nstruct delete_pq : public PQ<T, Compare> {\r\n    PQ<T, Compare> del;\r\n    void erase(T t) {\r\n        del.push(t);\r\n    }\r\n    void clean() {\r\n        while(!PQ<T, Compare>::empty() && !del.empty() && PQ<T, Compare>::top() == del.top()) {\r\n            PQ<T, Compare>::pop();\r\n            del.pop();\r\n        }\r\n    }\r\n    void push(T t) {\r\n        PQ<T, Compare>::push(t);\r\n    }\r\n    T top() {\r\n        clean();\r\n        return PQ<T, Compare>::top();\r\n    }\r\n    bool empty() {\r\n        clean();\r\n        return PQ<T, Compare>::empty();\r\n    }\r\n    size_t size() {\r\n        return PQ<T, Compare>::size() - del.size();\r\n    }\r\n};\r\n\r\nstruct rect {\r\n    ll h;\r\n    ll w;\r\n    bool operator==(const rect &o) const { return h == o.h && w == o.w; }\r\n};\r\n\r\nstruct CompareWidth {\r\n    bool operator()(const rect &a, const rect &b) const {\r\n        return a.w == b.w ? a.h < b.h : a.w < b.w;\r\n    }\r\n};\r\n\r\nstruct CompareHeight {\r\n    bool operator()(const rect &a, const rect &b) const {\r\n        return a.h == b.h ? a.w < b.w : a.h < b.h;\r\n    }\r\n};\r\n\r\nrect check(const vector<rect> &a) {\r\n    delete_pq<rect, CompareWidth> QW;\r\n    delete_pq<rect, CompareHeight> QH;\r\n    for(auto &R : a) {\r\n        QW.push(R);\r\n        QH.push(R);\r\n    }\r\n    bool b = true;\r\n    ll ww = QW.top().w;\r\n    ll area = 0;\r\n    for(auto &R : a) area += R.w * 1ll * R.h;\r\n    if (area % ww != 0) return {0, 0};\r\n    ll hh = area / ww;\r\n    rect ans = {hh, ww};\r\n    while(!QW.empty()) {\r\n        if(b) {\r\n            // width\r\n            assert(!QW.empty());\r\n            ll W = QW.top().w;\r\n            rect R;\r\n            ll sumh = 0;\r\n            while(!QW.empty() && (R = QW.top()).w == W) {\r\n                sumh += R.h;\r\n                if(R.w > ww) return {0, 0};\r\n                QH.erase(R);\r\n                QW.erase(R);\r\n            }\r\n            if(sumh > hh) return {0, 0};\r\n            hh -= sumh;\r\n        }else {\r\n            // height\r\n            assert(!QH.empty());\r\n            ll H = QH.top().h;\r\n            rect R;\r\n            ll sumw = 0;\r\n            while(!QH.empty() && (R = QH.top()).h == H) {\r\n                sumw += R.w;\r\n                if(R.h > hh) return {0, 0};\r\n                QH.erase(R);\r\n                QW.erase(R);\r\n            }\r\n            if(sumw > ww) return {0, 0};\r\n            ww -= sumw;\r\n        }\r\n        b = !b;\r\n    }\r\n    if(ww != 0 && hh != 0) return {0, 0};\r\n    return ans;\r\n}\r\n\r\nvoid solve(int test_case) {\r\n    int n;\r\n    cin >> n;\r\n    vector<rect> a(n);\r\n    for(auto &R : a) {\r\n        cin >> R.h >> R.w;\r\n    }\r\n    rect R1 = check(a);\r\n    rep(i, 0, n) swap(a[i].w, a[i].h);\r\n    rect R2 = check(a);\r\n    swap(R2.w, R2.h);\r\n    vector<rect> ans;\r\n    for(rect R : {R1, R2}) {\r\n        if(R.h != 0 && R.w != 0) ans.push_back(R);\r\n    }\r\n    if(ans.size() == 2 && ans[0] == ans[1]) {\r\n        ans.pop_back();\r\n    }\r\n    cout << sz(ans) << '\\n';\r\n    for(rect R : ans) {\r\n        cout << R.h << ' ' << R.w << '\\n';\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int te;\r\n    cin >> te;\r\n    rep(t, 0, te) solve(t);\r\n}"
}