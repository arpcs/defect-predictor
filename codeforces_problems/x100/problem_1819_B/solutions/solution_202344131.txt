{
    "id": 202344131,
    "contestId": 1819,
    "creationTimeSeconds": 1681635454,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "xpact_chaos"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 779,
    "memoryConsumedBytes": 33280000,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long int\r\n#define mod 1000000007\r\n#define INF 1000000000000000000\r\nusing namespace std;\r\n\r\nll pow_mod(ll a, ll b) {\r\n    ll res = 1;\r\n    while (b > 0) {\r\n        if (b % 2)\r\n            res = (res * a) % mod;\r\n        a = (a * a) % mod;\r\n        b /= 2;\r\n    }\r\n    return res;\r\n}\r\n\r\nll inv(ll x) {\r\n    return pow_mod(x, mod - 2);\r\n}\r\n\r\nvoid solve() {\r\n    ll n;\r\n    cin >> n;\r\n\r\n    ll a[n], b[n];\r\n\r\n    ll tot = 0;\r\n\r\n    ll mx_h = -1;\r\n    ll mx_w = -1;\r\n\r\n    map<ll, multiset<ll>>mph, mpw, tmph, tmpw;\r\n\r\n    for (ll i = 0; i < n; i++) {\r\n        cin >> a[i] >> b[i];\r\n        mx_h = max(mx_h, a[i]);\r\n        mx_w = max(mx_w, b[i]);\r\n        mph[a[i]].insert(b[i]);\r\n        mpw[b[i]].insert(a[i]);\r\n        tot += a[i] * b[i];\r\n    }\r\n    tmph = mph;\r\n    tmpw = mpw;\r\n    set<pair<ll, ll>>ans;\r\n\r\n    if (tot % mx_h == 0) {\r\n        ll h = mx_h;\r\n        ll w = tot / mx_h;\r\n\r\n        bool pos = true;\r\n\r\n        for (ll i = 1; i < n; i++) {\r\n            if (!mph[h].empty()) {\r\n                auto fst = *mph[h].begin();\r\n                w -= fst;\r\n                mph[h].erase(mph[h].find(fst));\r\n                mpw[fst].erase(mpw[fst].find(h));\r\n            }\r\n            else if (!mpw[w].empty()) {\r\n                auto fst = *mpw[w].begin();\r\n                h -= fst;\r\n                mpw[w].erase(mpw[w].find(fst));\r\n                mph[fst].erase(mph[fst].find(w));\r\n            }\r\n            else {\r\n                pos = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        //   if(pos)\r\n        //   cout<<h<<\" \"<<w<<endl;\r\n\r\n        //  cout<<mph[h].size()<<\" \"<<mpw[w].size()<<endl;\r\n\r\n        if (pos) {\r\n            if (mph[h].size() == 1 && *mph[h].begin() == w && mpw[w].size() == 1 && *mpw[w].begin() == h)\r\n                pos = true;\r\n            else\r\n                pos = false;\r\n        }\r\n\r\n        if (pos)\r\n            ans.insert({mx_h, tot / mx_h});\r\n\r\n        mph = tmph;\r\n        mpw = tmpw;\r\n    }\r\n\r\n\r\n    if (tot % mx_w == 0) {\r\n        ll h = tot / mx_w;\r\n        ll w = mx_w;\r\n\r\n        bool pos = true;\r\n\r\n        for (ll i = 1; i < n; i++) {\r\n            if (!mph[h].empty()) {\r\n                auto fst = *mph[h].begin();\r\n                w -= fst;\r\n                mph[h].erase(mph[h].find(fst));\r\n                mpw[fst].erase(mpw[fst].find(h));\r\n            }\r\n            else if (!mpw[w].empty()) {\r\n                auto fst = *mpw[w].begin();\r\n                h -= fst;\r\n                mpw[w].erase(mpw[w].find(fst));\r\n                mph[fst].erase(mph[fst].find(w));\r\n            }\r\n            else {\r\n                pos = false;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (pos) {\r\n            if (mph[h].size() == 1 && *mph[h].begin() == w && mpw[w].size() == 1 && *mpw[w].begin() == h)\r\n                pos = true;\r\n            else\r\n                pos = false;\r\n        }\r\n\r\n        if (pos)\r\n            ans.insert({tot / mx_w, mx_w});\r\n    }\r\n\r\n\r\n\r\n    cout << ans.size() << \"\\n\";\r\n\r\n    for (auto e : ans) {\r\n        cout << e.first << \" \" << e.second << \"\\n\";\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n\r\n    ll t;\r\n    t = 1;\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n    return 0;\r\n}"
}