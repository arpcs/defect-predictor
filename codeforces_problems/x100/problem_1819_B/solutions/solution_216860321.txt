{
    "id": 216860321,
    "contestId": 1819,
    "creationTimeSeconds": 1690985588,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "janY_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 11776000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,popcnt,lzcnt\")\r\n#define fo(i,n) for(i=0;i<n;i++)\r\n#define Fo(i,k,n) for(i=k;k<n?i<n:i>n;k<n?i+=1:i-=1)\r\n#define ll long long\r\n#define all(x) x.begin(), x.end()\r\n#define sortall(x) sort(all(x))\r\n#define rev(x) reverse(x.begin(), x.end())\r\n#define fi first\r\n#define se second\r\n#define pb push_back\r\ntypedef pair<int, int>\tpii;\r\ntypedef pair<ll, ll>\tpl;\r\ntypedef vector<int>\t\tvi;\r\ntypedef vector<ll>\t\tvl;\r\ntypedef vector<pii>\t\tvpii;\r\ntypedef vector<pl>\t\tvpl;\r\ntypedef vector<vi>\t\tvvi;\r\ntypedef vector<vl>\t\tvvl;\r\nbool sortbysec(const pair<int,int> &a,const pair<int,int> &b){return (a.second < b.second);}\r\n#define sortpairbysec(x) sort(all(x), sortbysec)\r\nbool sortcond(const pair<int,int> &a,const pair<int,int> &b){\r\n    if (a.fi != b.fi){\r\n        return a.fi < b.fi;\r\n    } else {\r\n        return a.se > b.se;\r\n    }\r\n}\r\nmt19937_64 rang(chrono::high_resolution_clock::now().time_since_epoch().count());\r\nint rng(int lim) {\r\n    uniform_int_distribution<int> uid(0,lim-1);\r\n    return uid(rang);\r\n}\r\n \r\nconst int mod = 1'000'000'007;\r\nconst int N = 3e5, M = N;\r\n//=======================\r\n\r\n//=======================\r\n// & - bitwise AND; | - bitwise OR; ^ - bitwise XOR\r\n// cout.precision(7);\r\n// next_permutation(arr.begin(), arr.end());\r\n// long long long long long long long long long long long long long long long long long long long long long long long long long long long\r\n// priority_queue<int, vector<int>, greater<int>> a; (min heap)\r\n\r\nmap<int, vector<pii>> heights;\r\nmap<int, vector<pii>> widths;\r\nvl a(N);\r\nll n, m, k, q;\r\n//for (auto &i : a) cin >> i; \r\nvoid solve() {\r\n    int i, j;\r\n    cin >> n;\r\n    heights.clear();\r\n    widths.clear();\r\n    ll area = 0;\r\n    ll largest_w = 0;\r\n    ll largest_h = 0;\r\n    fo(i, n){\r\n        ll a, b;\r\n        cin >> a >> b;\r\n        area += a*b;\r\n        heights[a].pb({b, i});\r\n        widths[b].pb({a, i});\r\n        largest_h = max(largest_h, a);\r\n        largest_w = max(largest_w, b);\r\n    }\r\n    set<pl> ans;\r\n\r\n    // max h;\r\n    if (area % largest_h == 0){\r\n        ll h = largest_h;\r\n        ll w = area/largest_h;\r\n        bool vert = true;\r\n        vi used(n, 0);\r\n        while (h > 0 && w > 0){\r\n            //cout << h << \" \" << w << \"\\n\";\r\n            int acts = 0;\r\n            if (vert){\r\n                for (auto &i : heights[h]){\r\n                    if (used[i.se]) continue;\r\n                    used[i.se] = 1;\r\n                    w -= i.fi;\r\n                    acts++;\r\n                }\r\n            } else {\r\n                for (auto &i : widths[w]){\r\n                    if (used[i.se]) continue;\r\n                    used[i.se] = 1;\r\n                    h -= i.fi;\r\n                    acts++;\r\n                }\r\n            }\r\n            if (acts == 0) break;\r\n            vert = !vert;\r\n            \r\n        }\r\n        if (w == 0 || h == 0){\r\n            ans.insert({largest_h, area/largest_h});\r\n        }\r\n    }\r\n\r\n    // max w;\r\n    if (area % largest_w == 0){\r\n        ll h = area/largest_w;\r\n        ll w = largest_w;\r\n        bool vert = false;\r\n        vi used(n, 0);\r\n        while (h > 0 && w > 0){\r\n            //cout << h << \" \" << w << \"\\n\";\r\n            int acts = 0;\r\n            if (vert){\r\n                for (auto &i : heights[h]){\r\n                    if (used[i.se]) continue;\r\n                    used[i.se] = 1;\r\n                    w -= i.fi;\r\n                    acts++;\r\n                }\r\n            } else {\r\n                for (auto &i : widths[w]){\r\n                    if (used[i.se]) continue;\r\n                    used[i.se] = 1;\r\n                    h -= i.fi;\r\n                    acts++;\r\n                }\r\n            }\r\n            if (acts == 0) break;\r\n            vert = !vert;\r\n            \r\n        }\r\n        if (w == 0 || h == 0){\r\n            ans.insert({area/largest_w, largest_w});\r\n        }\r\n    }\r\n\r\n\r\n    cout << ans.size() << \"\\n\";\r\n    for (auto &i : ans){\r\n        cout << i.fi << \" \" << i.se << \"\\n\";\r\n    }\r\n\r\n\r\n}\r\n \r\nint main() {\r\n    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n    srand(chrono::high_resolution_clock::now().time_since_epoch().count());\r\n\r\n    int t = 1;\r\n    cin >> t;\r\n    while(t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}