{
    "id": 222135861,
    "contestId": 1819,
    "creationTimeSeconds": 1694033793,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "Kambar_Z"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 12492800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define For(i, n)           for(int i = 0; i < n; ++i)\r\n#define all(x)              (x).begin(),(x).end()\r\n#define rall(x)             (x).rbegin(),(x).rend()\r\n#define ls(x)               x+x+1\r\n#define rs(x)               x+x+2\r\n#define endl                '\\n'\r\n\r\n#define ld                  long double\r\n#define pii                 pair<int, int>\r\n#define vt                  vector\r\n#define ll                  long long\r\n\r\n#define sim template < class c\r\n#define ris return * this\r\n#define dor > debug & operator <<\r\n#define eni(x) sim > typename \\\r\nenable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\r\nsim > struct rge { c b, e; };\r\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\r\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\r\nsim > char dud(...);\r\n#define LOCAL\r\nstruct debug {\r\n#ifdef LOCAL\r\n~debug() { cerr << endl; }\r\neni(!=) cerr << boolalpha << i; ris; }\r\neni(==) ris << range(begin(i), end(i)); }\r\nsim, class b dor(pair < b, c > d) {\r\nris << \"(\" << d.first << \", \" << d.second << \")\";\r\n}\r\nsim dor(rge<c> d) {\r\n*this << \"[\";\r\nfor (auto it = d.b; it != d.e; ++it)\r\n\t*this << \", \" + 2 * (it == d.b) << *it;\r\nris << \"]\";\r\n}\r\n#else\r\nsim dor(const c&) { ris; }\r\n#endif\r\n};\r\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\r\n\r\ntemplate<typename T>\r\nvoid read(vt<T> & a) {\r\n\tFor(i, a.size()) cin >> a[i];\r\n}\r\ntemplate<typename T>\r\nvoid print(vt<T> & a) {\r\n\tFor(i, a.size()) cout << a[i] << \" \";\r\n\tcout << endl;\r\n}\r\ntemplate<typename T>\r\nvoid print2(vt<vt<T> > & a) {\r\n\tFor(i, a.size()) {\r\n\t\tFor(j, a[i].size()) cout << a[i][j] << \" \";\r\n\t\tcout << endl;\r\n\t}\r\n}\r\ntemplate<typename T>\r\nvoid read2(vt<vt<T> > & a) {\r\n\tFor(i, a.size()) For(j, a[i].size()) cin >> a[i][j];\r\n}\r\n\r\nconst int MAX = 1e9;\r\nconst int MOD = 1e9+7;\r\nconst int BINT = 32;\r\nconst int BLONG = 64;\r\nconst ll  INF = 1e18;\r\nconst ld  PI  = 3.14159265358979323846;\r\n\r\nvoid solve()\r\n{\r\n\tint n; cin >> n;\r\n\tvt<int> height_arr(n), width_arr(n);\r\n\tFor(i, n) {\r\n\t\tcin >> height_arr[i] >> width_arr[i];\r\n\t}\r\n\tset<pair<ll, ll> > ans;\r\n\tauto go = [&] (vt<int> & height_arr, vt<int> & width_arr, bool do_swap) {\r\n\t\tmap<int, vt<int> > width_buffer_mp, height_buffer_mp;\r\n\t\tFor(i, n) {\r\n\t\t\theight_buffer_mp[height_arr[i]].push_back(i);\r\n\t\t\twidth_buffer_mp[width_arr[i]].push_back(i);\r\n\t\t}\r\n\t\tvt<pair<int, vt<int> > > width_buffer = {{0, {}}}, height_buffer = {{0, {}}};\r\n\t\tfor (auto &p : width_buffer_mp) {\r\n\t\t\twidth_buffer.emplace_back(p);\r\n\t\t}\r\n\t\tfor (auto &p : height_buffer_mp) {\r\n\t\t\theight_buffer.emplace_back(p);\r\n\t\t}\r\n\t\tvt<bool> used(n);\r\n\t\tbool good = false;\r\n\t\tint width_it = (int)width_buffer.size() - 1, height_it = (int)height_buffer.size() - 1;\r\n\t\tll need_height = 0, need_width = 0;\r\n\t\tll ans_height = 0, ans_width = 0;\r\n\t\twhile (width_it > 0 && height_it > 0) {\r\n\t\t\tvt<int> not_used;\r\n\t\t\twhile (width_it) {\r\n\t\t\t\tfor (int id : width_buffer[width_it].second) {\r\n\t\t\t\t\tif (used[id]) continue;\r\n\t\t\t\t\tnot_used.push_back(id);\r\n\t\t\t\t}\r\n\t\t\t\tif (!not_used.empty()) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\twidth_it--;\r\n\t\t\t}\r\n\t\t\tll cur_width = width_buffer[width_it].first, cur_height = 0;\r\n\t\t\tfor (int id : not_used) {\r\n\t\t\t\tcur_height += height_arr[id];\r\n\t\t\t\tused[id] = true;\r\n\t\t\t}\r\n\t\t\tnot_used.clear();\r\n\t\t\twhile (height_it) {\r\n\t\t\t\tfor (int id : height_buffer[height_it].second) {\r\n\t\t\t\t\tif (used[id]) continue;\r\n\t\t\t\t\tnot_used.push_back(id);\r\n\t\t\t\t}\r\n\t\t\t\tif (!not_used.empty()) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t};\r\n\t\t\t\theight_it--;\r\n\t\t\t}\r\n\t\t\tcur_height += height_buffer[height_it].first;\r\n\t\t\tif (need_height != 0) {\r\n\t\t\t\tif (cur_width != need_width || cur_height != need_height) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tneed_height = height_buffer[height_it].first, need_width = cur_width;\r\n\t\t\tif (ans_height == 0) {\r\n\t\t\t\tans_height = cur_height;\r\n\t\t\t\tans_width = cur_width;\r\n\t\t\t}\r\n\t\t\tif (height_buffer[height_it].first == 0) {\r\n\t\t\t\tgood = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tfor (int id : not_used) {\r\n\t\t\t\tneed_width -= width_arr[id];\r\n\t\t\t\tused[id] = true;\r\n\t\t\t}\r\n\t\t\tif (need_width == 0) {\r\n\t\t\t\tgood = true;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (good) {\r\n\t\t\tif (!do_swap) {\r\n\t\t\t\tans.insert({ans_height, ans_width});\r\n\t\t\t} else {\r\n\t\t\t\tans.insert({ans_width, ans_height});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tgo(width_arr, height_arr, true);\r\n\tgo(height_arr, width_arr, false);\r\n\tcout << ans.size() << endl;\r\n\tfor (auto &p : ans) {\r\n\t\tcout << p.first << \" \" << p.second << endl;\r\n\t}\r\n}\r\n\r\n// THE SOLUTION IS ALWAYS SIMPLE\r\n// THE CODE IS ALWAYS SHORT\r\n\r\nvoid precalc() {}\r\n\r\nint main()\r\n{\r\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#ifdef DEBUG\r\n\tfreopen(\"output.txt\", \"w\", stdout);\r\n\tfreopen(\"input.txt\", \"r\", stdin);\r\n#endif\r\n\tint T;\r\n\tT = 1;\r\n\tcin >> T;\r\n\tprecalc();\r\n\tFor(t, T) solve();\r\n\treturn 0;\r\n}"
}