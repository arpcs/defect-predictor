{
    "id": 221246892,
    "contestId": 1819,
    "creationTimeSeconds": 1693475711,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "QHJ123456"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 15360000,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nconst int N = 2e5+5;\r\n\r\ninline int read(){\r\n    int x=0, f=1; char ch=getchar();\r\n    while (!isdigit(ch)&&'-'!=ch) ch=getchar();\r\n    if ('-'==ch) f=-1, ch=getchar();\r\n    while (isdigit(ch)) x=(x<<3)+(x<<1)+ch-'0', ch=getchar();\r\n    return x*f;\r\n}\r\n\r\nint t, n;\r\nint A[N][2];\r\nvector<pair<int, int>> mph, mpw;\r\nbool vis[N];\r\n\r\nvoid init(){\r\n    mph.clear(); mpw.clear();\r\n    for (int i=1; i<=n; ++i){\r\n        mph.push_back(make_pair(A[i][0], i));\r\n        mpw.push_back(make_pair(A[i][1], i));\r\n        vis[i]=false;\r\n    }\r\n    sort(mph.begin(), mph.end());\r\n    sort(mpw.begin(), mpw.end());\r\n}\r\n\r\nbool dfs(int ch, int cw){\r\n    int mh=-1, mw=-1;\r\n    while (!mph.empty() && vis[mph.back().second]) mph.pop_back();\r\n    mh = mph.back().first;\r\n    while (!mpw.empty() && vis[mpw.back().second]) mpw.pop_back();\r\n    mw = mpw.back().first;\r\n    if (mh==ch && mw==cw){\r\n        if (mph.back().second == mpw.back().second) return true;\r\n        else return false;\r\n    }else if (mh!=ch && mw!=cw) return false;\r\n    else{\r\n        if (mh==ch){\r\n            vis[mph.back().second]=true;\r\n            return dfs(ch, cw-A[mph.back().second][1]);\r\n        }\r\n        if (mw==cw){\r\n            vis[mpw.back().second]=true;\r\n            return dfs(ch-A[mpw.back().second][0], cw);\r\n        }\r\n    }\r\n}\r\n\r\nsigned main(){\r\n    t=read();\r\n    while (t--){\r\n        n=read();\r\n        int area=0;\r\n        for (int i=1; i<=n; ++i){\r\n            A[i][0]=read(), A[i][1]=read();\r\n            area += A[i][0]*A[i][1];\r\n        }\r\n\r\n        if (1==n){\r\n            printf(\"1\\n\");\r\n            printf(\"%lld %lld\\n\", A[1][0], A[1][1]);\r\n            continue;\r\n        }\r\n\r\n        vector<pair<int, int> > ans;\r\n        int h0, w0;\r\n\r\n        init();\r\n        // for (auto pir : mph) printf(\"(%d %d)\", pir.first, pir.second); puts(\"\");\r\n        // for (auto pir : mpw) printf(\"(%d %d)\", pir.first, pir.second); puts(\"\");\r\n        auto it = mph.rbegin();\r\n        h0 = it->first;\r\n        if (area % h0 == 0){\r\n            w0 = area/h0;\r\n            // printf(\"h0=%d, w0=%d\\n\", h0, w0);\r\n            int w1 = w0 - A[it->second][1];\r\n            vis[it->second]=true;\r\n            if (dfs(h0, w1)) ans.push_back(make_pair(h0, w0));\r\n        }\r\n\r\n        init();\r\n        it = mpw.rbegin();\r\n        w0 = it->first;\r\n        if (area % w0 == 0){\r\n            h0 = area/w0;\r\n            // printf(\"h0=%d, w0=%d\\n\", h0, w0);\r\n            int h1 = h0 - A[it->second][0];\r\n            vis[it->second]=true;\r\n            if (dfs(h1, w0)) ans.push_back(make_pair(h0, w0));\r\n        }\r\n\r\n        printf(\"%lld\\n\", ans.size());\r\n        for (auto pir : ans) printf(\"%lld %lld\\n\", pir.first, pir.second);\r\n    }\r\n    // while (1){}\r\n    return 0;\r\n}"
}