{
    "id": 206255571,
    "contestId": 1819,
    "creationTimeSeconds": 1684344426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/int\n#include<bits/stdc++.h>\n\nusing namespace std;\n#define int long long\nint n;\n\nbool solve(multiset<pair<int,int>> a ,multiset<pair<int,int>> b,int n,int m){\n\twhile(!a.empty()){\n\t\tauto [ax,ay]=*a.rbegin();\n\t\tauto [by,bx]=*b.rbegin();\n\t\tif(ax==n){\n\t\t\tm-=ay;\n\t\t\ta.erase(a.find({ax,ay}));\n\t\t\tb.erase(b.find({ay,ax}));\n\t\t}\n\t\telse if(by==m){\n\t\t\tn-=bx;\n\t\t\ta.erase(a.find({bx,by}));\n\t\t\tb.erase(b.find({by,bx}));\n\t\t}\n\t\telse return 0;\n\t}\n\treturn 1;\n}\n\nsigned main(){\n\tint _;\n\tcin>>_;\n\twhile(_--){\n\t\tcin>>n;\n\t\tint sz=0;\n\t\tmultiset<pair<int,int>> a,b;\n\t\tset<pair<int,int>> c;\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tint aa,bb;\n\t\t\tcin>>aa>>bb;\n\t\t\ta.insert({aa,bb});\n\t\t\tb.insert({bb,aa});\n\t\t\tsz+=aa*bb;\n\t\t}\n\t\tint N=a.rbegin()->first,M=sz/N;\n\t\tif(N*M==sz){\n\t\t\tif(solve(a,b,N,M)) c.insert({N,M});\n\t\t}\n\t\tM=b.rbegin()->first,N=sz/M;\n\t\tif(N*M==sz){\n\t\t\tif(solve(a,b,N,M)) c.insert({N,M});\n\t\t}\n\t\tcout<<c.size()<<endl;\n\t\tfor(auto [x,y]:c) cout<<x<<\" \"<<y<<endl;\n\t}\n\treturn 0;\n} \n \t\t\t \t  \t   \t \t    \t\t\t \t\t\t\t\t\n\t\t\t\t  \t  \t\t  \t  \t\t  \t\t  \t\t\t\t"
}