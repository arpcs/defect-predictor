{
    "id": 202239579,
    "contestId": 1819,
    "creationTimeSeconds": 1681561774,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "gqf123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 3174400,
    "source": "#include<iostream>\r\n#include<vector>\r\n#include<algorithm>\r\n#include<map>\r\nusing namespace std;\r\nint n;\r\npair<long long, long long>a[200000];\r\nvector<pair<long long, long long>>ans;\r\nvoid dfs(int p, long long x, long long y, int tp) {\r\n\tif (p == n) {\r\n\t\tans.emplace_back(x, y);\r\n\t\tif (tp == -1)\r\n\t\t\tswap(ans.back().first, ans.back().second);\r\n\t\treturn;\r\n\t}\r\n\tif (a[p].first != x) {\r\n\t\tif (y != a[p].second)\r\n\t\t\treturn;\r\n\t\tdfs(p + 1, x + a[p].first, y, tp);\r\n\t}\r\n\telse {\r\n\t\tdfs(p + 1, x, y + a[p].second, tp);\r\n\t\tif (a[p].second == y)\r\n\t\t\tdfs(p + 1, x + a[p].first, y, tp);\r\n\t}\r\n}\r\nint main() {\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0), cout.tie(0);\r\n\tint t;\r\n\tcin >> t;\r\n\tfor (; t--;) {\r\n\t\tcin >> n;\r\n\t\tfor (int i = 0; i ^ n; ++i)\r\n\t\t\tcin >> a[i].first >> a[i].second;\r\n\t\tsort(a, a + n);\r\n\t\tdfs(1, a[0].first, a[0].second, 1);\r\n\t\tfor (int i = 0; i ^ n; ++i)\r\n\t\t\tswap(a[i].first, a[i].second);\r\n\t\tsort(a, a + n);\r\n\t\tdfs(1, a[0].first, a[0].second, -1);\r\n\t\tsort(ans.begin(), ans.end());\r\n\t\tans.erase(unique(ans.begin(), ans.end()), ans.end());\r\n\t\tcout << ans.size() << '\\n';\r\n\t\tfor (const auto& v : ans)\r\n\t\t\tcout << v.first << ' ' << v.second << '\\n';\r\n\t\tans.clear();\r\n\r\n\t}\r\n}"
}