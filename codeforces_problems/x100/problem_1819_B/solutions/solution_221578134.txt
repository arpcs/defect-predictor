{
    "id": 221578134,
    "contestId": 1819,
    "creationTimeSeconds": 1693665125,
    "relativeTimeSeconds": 2525,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "liuyibo"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1693662600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 795,
    "memoryConsumedBytes": 14745600,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <map>\r\n#include <set>\r\n\r\n\r\nvoid work() {\r\n    int n;\r\n    std::cin >> n;\r\n    std::vector<int> h(n, 0);\r\n    std::vector<int> w(n, 0);\r\n    long long s = 0;\r\n    int maxh = 0;\r\n    int maxw = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        std::cin >> h[i] >> w[i];\r\n        maxh = std::max(maxh, h[i]);\r\n        maxw = std::max(maxw, w[i]);\r\n        s += (long long)(h[i]) * w[i];\r\n    }\r\n\r\n    auto solve = [&](int H, int W) {\r\n        std::multiset<std::pair<int, int> > m1 = {};\r\n        std::multiset<std::pair<int, int> > m2 = {};\r\n        for (int i = 0; i < n; ++i) {\r\n            m1.insert(std::make_pair(h[i], w[i]));\r\n            m2.insert(std::make_pair(w[i], h[i]));\r\n        }\r\n        while (H > 0 && W > 0) {\r\n            std::pair<int, int> found = {};\r\n            if (found.first == 0) {\r\n                for (auto it = m1.lower_bound(std::make_pair(H, 0)); it != m1.end() && it->first == H; ++it) {\r\n                    found = std::make_pair(it->first, it->second);\r\n                    break;\r\n                }\r\n            }\r\n            if (found.first == 0) {\r\n                for (auto it = m2.lower_bound(std::make_pair(W, 0)); it != m2.end() && it->first == W; ++it) {\r\n                    found = std::make_pair(it->second, it->first);\r\n                    break;\r\n                }\r\n            }\r\n            if (found.first == 0) {\r\n                return false;\r\n            }\r\n            if (found.first == H) {\r\n                W -= found.second;\r\n            } else {\r\n                H -= found.first;\r\n            }\r\n            m1.erase(m1.find(std::make_pair(found.first, found.second)));\r\n            m2.erase(m2.find(std::make_pair(found.second, found.first)));\r\n        }\r\n        return true;\r\n    };\r\n\r\n    if (s == (long long)maxh * maxw) {\r\n        std::cout << 1 << std::endl << maxh << \" \" << maxw << std::endl;\r\n    } else {\r\n        bool ok0 = false;\r\n        if (s % maxh == 0) {\r\n            ok0 = solve(maxh, s / maxh);\r\n        }\r\n        bool ok1 = false;\r\n        if (s % maxw == 0) {\r\n            ok1 = solve(s / maxw, maxw);\r\n        }\r\n        if (ok0 && ok1) {\r\n            std::cout << 2 << std::endl << maxh << \" \" << s / maxh << std::endl << s / maxw << \" \" << maxw << std::endl;\r\n        } else if (ok0) {\r\n            std::cout << 1 << std::endl << maxh << \" \" << s / maxh << std::endl;\r\n        } else {\r\n            std::cout << 1 << std::endl << s / maxw << \" \" << maxw << std::endl;\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    int t;\r\n    std::cin >> t;\r\n    for (int i = 0; i < t; ++i) {\r\n        work();\r\n    }\r\n    return 0;\r\n}\r\n"
}