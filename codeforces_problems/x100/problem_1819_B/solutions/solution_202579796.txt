{
    "id": 202579796,
    "contestId": 1819,
    "creationTimeSeconds": 1681806661,
    "relativeTimeSeconds": 3061,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "neko31662"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1681803600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 607,
    "memoryConsumedBytes": 47820800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define LL long long\r\n#define ULL unsigned long long\r\n#define debug(x) cout<<#x<<'='<<(x)<<'\\n'\r\n#define inf 1000000000000000000\r\n#define eps 1e-8\r\n#define MOD 998244353\r\n#define mp make_pair\r\n\r\nconst int N=200005;\r\nmap<LL,set<int> > row,tmprow;//<row_length,<index> >\r\nmap<LL,set<int> > col,tmpcol;//<col_length,<index> >\r\npair<LL,LL> rect[N];\r\nset<pair<LL,LL> > ans;\r\n\r\nmap<LL,set<int> >::iterator find_last(map<LL,set<int> > &m) {\r\n\tauto it=m.end();\r\n\tit--;\r\n\treturn it;\r\n}\r\n\r\nvoid solve(int t) {\r\n\tint n;\r\n\tscanf(\"%d\",&n);\r\n\trow.clear();\r\n\tcol.clear();\r\n\tans.clear();\r\n\tLL all_area=0,tmp_area;\r\n\tfor(int i=1; i<=n; i++) {\r\n\t\tLL x,y;\r\n\t\tscanf(\"%lld%lld\",&x,&y);\r\n\t\trect[i]=mp(x,y);\r\n\t\trow[x].insert(i);\r\n\t\tcol[y].insert(i);\r\n\t\tall_area+=x*y;\r\n\t}\r\n\ttmp_area=all_area;\r\n\ttmprow=row;\r\n\ttmpcol=col;\r\n\r\n\tint f=0,first=0;\r\n\tLL h,c;\r\n\tLL curh,curc;\r\n\tLL ck=1;\r\n\twhile(all_area!=0) {\r\n\t\tif(f==0) {\r\n\t\t\tmap<LL,set<int> >::iterator it;\r\n\t\t\twhile(!row.empty()){\r\n\t\t\t\tit=find_last(row);\r\n\t\t\t\tif(it->second.empty()){\r\n\t\t\t\t\trow.erase(it);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(row.empty()) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLL v=it->first;\r\n\t\t\tif(all_area%v) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!first) {\r\n\t\t\t\tfirst=1;\r\n\t\t\t\tcurh=h=v;\r\n\t\t\t\tcurc=c=all_area/v;\r\n\t\t\t}else{\r\n\t\t\t\tif(curh!=v){\r\n\t\t\t\t\tck=0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int index:it->second) {\r\n\t\t\t\tLL x=rect[index].first;\r\n\t\t\t\tLL y=rect[index].second;\r\n\t\t\t\tall_area-=x*y;\r\n\t\t\t\tcurc-=y;\r\n\t\t\t\tcol[y].erase(index);\r\n\t\t\t}\r\n\t\t\trow.erase(it);\r\n\t\t\tf^=1;\r\n\t\t}else{\r\n\t\t\tmap<LL,set<int> >::iterator it;\r\n\t\t\twhile(!col.empty()){\r\n\t\t\t\tit=find_last(col);\r\n\t\t\t\tif(it->second.empty()){\r\n\t\t\t\t\tcol.erase(it);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(col.empty()) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLL v=it->first;\r\n\t\t\tif(all_area%v) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!first) {\r\n\t\t\t\tfirst=1;\r\n\t\t\t\tcurc=c=v;\r\n\t\t\t\tcurh=h=all_area/v;\r\n\t\t\t}else{\r\n\t\t\t\tif(curc!=v){\r\n\t\t\t\t\tck=0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int index:it->second) {\r\n\t\t\t\tLL x=rect[index].first;\r\n\t\t\t\tLL y=rect[index].second;\r\n\t\t\t\tall_area-=x*y;\r\n\t\t\t\tcurh-=x;\r\n\t\t\t\trow[x].erase(index);\r\n\t\t\t}\r\n\t\t\tcol.erase(it);\r\n\t\t\tf^=1;\r\n\t\t}\r\n\t}\r\n\tif(ck){\r\n\t\tans.insert(mp(h,c));\r\n\t}\r\n\t\r\n\t\r\n\tall_area=tmp_area;\r\n\trow=tmprow;\r\n\tcol=tmpcol;\r\n\tf=1,first=0;\r\n\tck=1;\r\n\twhile(all_area!=0) {\r\n\t\tif(f==0) {\r\n\t\t\tmap<LL,set<int> >::iterator it;\r\n\t\t\twhile(!row.empty()){\r\n\t\t\t\tit=find_last(row);\r\n\t\t\t\tif(it->second.empty()){\r\n\t\t\t\t\trow.erase(it);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(row.empty()) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLL v=it->first;\r\n\t\t\tif(all_area%v) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!first) {\r\n\t\t\t\tfirst=1;\r\n\t\t\t\tcurh=h=v;\r\n\t\t\t\tcurc=c=all_area/v;\r\n\t\t\t}else{\r\n\t\t\t\tif(curh!=v){\r\n\t\t\t\t\tck=0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int index:it->second) {\r\n\t\t\t\tLL x=rect[index].first;\r\n\t\t\t\tLL y=rect[index].second;\r\n\t\t\t\tall_area-=x*y;\r\n\t\t\t\tcurc-=y;\r\n\t\t\t\tcol[y].erase(index);\r\n\t\t\t}\r\n\t\t\trow.erase(it);\r\n\t\t\tf^=1;\r\n\t\t}else{\r\n\t\t\tmap<LL,set<int> >::iterator it;\r\n\t\t\twhile(!col.empty()){\r\n\t\t\t\tit=find_last(col);\r\n\t\t\t\tif(it->second.empty()){\r\n\t\t\t\t\tcol.erase(it);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(col.empty()) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLL v=it->first;\r\n\t\t\tif(all_area%v) {\r\n\t\t\t\tck=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(!first) {\r\n\t\t\t\tfirst=1;\r\n\t\t\t\tcurc=c=v;\r\n\t\t\t\tcurh=h=all_area/v;\r\n\t\t\t}else{\r\n\t\t\t\tif(curc!=v){\r\n\t\t\t\t\tck=0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor(int index:it->second) {\r\n\t\t\t\tLL x=rect[index].first;\r\n\t\t\t\tLL y=rect[index].second;\r\n\t\t\t\tall_area-=x*y;\r\n\t\t\t\tcurh-=x;\r\n\t\t\t\trow[x].erase(index);\r\n\t\t\t}\r\n\t\t\tcol.erase(it);\r\n\t\t\tf^=1;\r\n\t\t}\r\n\t}\r\n\tif(ck){\r\n\t\tans.insert(mp(h,c));\r\n\t}\r\n\t\r\n\tprintf(\"%d\\n\",(int)ans.size());\r\n\tfor(auto x:ans){\r\n\t\tprintf(\"%lld %lld\\n\",x.first,x.second);\r\n\t}\r\n}\r\n\r\n\r\nint main() {\r\n\tint t=1;\r\n//\tfreopen(\"1.in\",\"r\",stdin);\r\n\tscanf(\"%d\",&t);\r\n\twhile(t--) {\r\n\t\tsolve(t+1);\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}