{
    "id": 202244269,
    "contestId": 1819,
    "creationTimeSeconds": 1681563923,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "penguin133"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 3174400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\n#define int long long\r\n#define pi pair<int, int>\r\n#define pii pair<int, pi>\r\n#define fi first\r\n#define se second\r\n#ifdef _WIN32\r\n#define getchar_unlocked _getchar_nolock\r\n#endif\r\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n \r\nint H[200005], n, W[200005];\r\nvector <pi> ans;\r\nint sm, mx, mx2;\r\nmultiset <pi> ms, ms2;\r\n \r\nvoid solve(){\r\n\tcin >> n;\r\n\tsm = mx = mx2 = 0;\r\n\tms.clear();\r\n\tms2.clear();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tcin >> H[i] >> W[i];\r\n\t\tmx = max(mx, H[i]);\r\n\t\tsm += H[i] * W[i];\r\n\t\tmx2 = max(mx2, W[i]);\r\n\t\tms.insert({H[i], W[i]});\r\n\t\tms2.insert({W[i], H[i]});\r\n\t}\r\n\tans.clear();\r\n\tif(sm%mx == 0){\r\n\t\tint h = mx, w = sm/mx;\r\n\t\twhile(!ms.empty() && !ms2.empty()){\r\n\t\t\tpi x = *--ms.end();\r\n\t\t\tif(x.fi == h){\r\n\t\t\t\tms.erase(ms.find(x));\r\n\t\t\t\tms2.erase(ms2.find({x.se, x.fi}));\r\n\t\t\t\tw -= x.se;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tx = *--ms2.end();\r\n\t\t\t\tif(x.fi == w){\r\n\t\t\t\t\tms.erase(ms.find({x.se, x.fi}));\r\n\t\t\t\t\tms2.erase(ms2.find(x));\r\n\t\t\t\t\th -= x.se;\r\n\t\t\t\t}\r\n\t\t\t\telse break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif((int)ms.empty())ans.push_back({mx, sm/mx});\r\n\t}\r\n\tms.clear();\r\n\tms2.clear();\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tms.insert({H[i], W[i]});\r\n\t\tms2.insert({W[i], H[i]});\r\n\t}\r\n\tif(sm%mx2 == 0 && (int)ans.size() == 1 && mx2 != sm/mx){\r\n\t\tint h = sm/mx2, w = mx2;\r\n\t\twhile(!ms.empty() && !ms2.empty()){\r\n\t\t\tpi x = *--ms.end();\r\n\t\t\tif(x.fi == h){\r\n\t\t\t\tms.erase(ms.find(x));\r\n\t\t\t\tms2.erase(ms2.find({x.se, x.fi}));\r\n\t\t\t\tw -= x.se;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tx = *--ms2.end();\r\n\t\t\t\tif(x.fi == w){\r\n\t\t\t\t\tms.erase(ms.find({x.se, x.fi}));\r\n\t\t\t\t\tms2.erase(ms2.find(x));\r\n\t\t\t\t\th -= x.se;\r\n\t\t\t\t}\r\n\t\t\t\telse break;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif((int)ms.empty())ans.push_back({sm/mx2, mx2});\r\n\t}\r\n\tcout << (int)ans.size() << '\\n';\r\n\tfor(auto [i, j] : ans)cout << i << ' ' << j << '\\n';\r\n}\r\n \r\nmain(){\r\n\tios::sync_with_stdio(0);cin.tie(0);\r\n\tint tc = 1;\r\n\tcin >> tc;\r\n\tfor(int tc1=1;tc1<=tc;tc1++){\r\n\t\t// cout << \"Case #\" << tc1 << \": \";\r\n\t\tsolve();\r\n\t}\r\n}"
}