{
    "id": 208380265,
    "contestId": 1819,
    "creationTimeSeconds": 1685849584,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1819,
        "index": "B",
        "name": "The Butcher",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "greedy",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1819,
        "members": [
            {
                "handle": "asdfgrace"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1681549500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 545,
    "memoryConsumedBytes": 23142400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define DEBUG(x) //x\r\n#define A(x) DEBUG(assert(x))\r\n#define PRINT(x) DEBUG(cerr << x)\r\n#define PV(x) DEBUG(cerr << #x << \" = \" << x << '\\n')\r\n#define PV2(x) DEBUG(cerr << #x << \" = \" << x.first << ',' << x.second << '\\n')\r\n#define PAR(x) DEBUG(PRINT(#x << \" = { \"); for (auto y : x) PRINT(y << ' '); PRINT(\"}\\n\");)\r\n#define PAR2(x) DEBUG(PRINT(#x << \" = { \"); for (auto [y, z] : x) PRINT(y << ',' << z << \"  \"); PRINT(\"}\\n\");)\r\ntypedef long long i64;\r\nconst int INF = 1000000007; //998244353;\r\n\r\nstruct S {\r\n  int n;\r\n  i64 mh, mw;\r\n  i64 area;\r\n  vector<pair<i64, i64>> xsort, ysort;\r\n  map<i64, map<i64, int>> _xc, _yc;\r\n  \r\n  void run() {\r\n    cin >> n;\r\n    xsort.resize(n);\r\n    area = 0; mh = 0; mw = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n      i64 h, w;\r\n      cin >> h >> w;\r\n      area += h * w;\r\n      mh = max(mh, h); mw = max(mw, w);\r\n      ++_xc[h][w];\r\n      ++_yc[w][h];\r\n    }\r\n    set<pair<i64, i64>> res;\r\n    if (area % mh == 0 && ok(mh, area / mh)) res.insert({mh, area / mh});\r\n    if (area % mw == 0 && ok(area / mw, mw)) res.insert({area / mw, mw});\r\n    cout << res.size() << '\\n';\r\n    for (auto [h, w] : res) {\r\n      cout << h << ' ' << w << '\\n';\r\n    }\r\n  }\r\n  \r\n  bool ok(i64 h, i64 w) {\r\n    auto xc = _xc, yc = _yc;\r\n    for (int i = 0; i < n; ++i) {\r\n      if (xc[h].size()) {\r\n        i64 cut = xc[h].rbegin()->first;\r\n        w -= cut;\r\n        --xc[h][cut];\r\n        if (!xc[h][cut]) xc[h].erase(cut);\r\n        --yc[cut][h];\r\n        if (!yc[cut][h]) yc[cut].erase(h);\r\n      } else if (yc[w].size()) {\r\n        i64 cut = yc[w].rbegin()->first;\r\n        h -= cut;\r\n        --yc[w][cut];\r\n        if (!yc[w][cut]) yc[w].erase(cut);\r\n        --xc[cut][w];\r\n        if (!xc[cut][w]) xc[cut].erase(w);\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  } \r\n};\r\n\r\nint main() {\r\n  ios::sync_with_stdio(0); cin.tie(0); \r\n  int tt;\r\n  cin >> tt;\r\n  while(tt--) {\r\n    PRINT(\"---------------------------------------\\n\");\r\n    auto sol = make_unique<S>();\r\n    sol->run();\r\n  }\r\n}\r\n\r\n\r\n"
}