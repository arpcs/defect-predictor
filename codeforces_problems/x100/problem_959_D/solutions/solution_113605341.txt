{
    "id": 113605341,
    "contestId": 959,
    "creationTimeSeconds": 1618916916,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "TheNR"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 2276,
    "memoryConsumedBytes": 73216000,
    "source": "#include<bits/stdc++.h>\r\n#include<cmath>\r\n#define pb push_back\r\n#define ld long double\r\n#define mp make_pair\r\n#define vl vector<ll> \r\n#define vd vector<double>\r\n#define vld vector<long double>\r\n#define ll int\r\n#define pl pair<ll, ll>\r\n#define all(a) a.begin(), a.end()\r\n#define forr(i, n) for(ll i=0; i<n; i++) \r\n#define forr1(i, n) for(ll i=1; i<=n; i++)\r\nusing namespace std;\r\nconst ld PI =3.1415926535897923846;\r\nconst ll MOD = 1000000007;\r\nconst ll N=998244353;\r\nll power(ll x,ll n){ll res=1;while(n>0){if(n&1) res=res*x%MOD;x=x*x%MOD;n>>=1;}return res;}\r\nll modinverse(ll a){return power(a, MOD-2);}\r\n\r\n#define MAXN   2000001\r\n  \r\n// stores smallest prime factor for every number\r\nll spf[MAXN];\r\nvoid sieve()\r\n{\r\n    spf[1] = 1;\r\n    for (int i=2; i<MAXN; i++)\r\n  \r\n        // marking smallest prime factor for every\r\n        // number to be itself.\r\n        spf[i] = i;\r\n  \r\n    // separately marking spf for every even\r\n    // number as 2\r\n    for (int i=4; i<MAXN; i+=2)\r\n        spf[i] = 2;\r\n  \r\n    for (int i=3; i*i<MAXN; i++)\r\n    {\r\n        // checking if i is prime\r\n        if (spf[i] == i)\r\n        {\r\n            // marking SPF for all numbers divisible by i\r\n            for (int j=i*i; j<MAXN; j+=i)\r\n  \r\n                // marking spf[j] if it is not \r\n                // previously marked\r\n                if (spf[j]==j)\r\n                    spf[j] = i;\r\n        }\r\n    }\r\n}\r\n\r\nvl getFactorization(ll x)\r\n{\r\n    vl ret;\r\n    while (x != 1)\r\n    {\r\n        ret.push_back(spf[x]);\r\n        x = x / spf[x];\r\n    }\r\n    return ret;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    ll n;\r\n    cin>>n;\r\n    vl a(n);\r\n    forr(i, n)\r\n    {\r\n    \tcin>>a[i];\r\n    }\r\n    set<ll> s1;\r\n    forr1(i, (ll)2e6)\r\n    {\r\n    \tif(i-1)\r\n    \t\ts1.insert(i);\r\n    }\r\n    vl ans(n);\r\n    bool happ=false;\r\n    forr(i, n)\r\n    {\r\n    \tauto itr=s1.find(a[i]);\r\n    \tif(happ==false&&itr!=s1.end())\r\n    \t{\r\n    \t\tans[i]=a[i];\r\n    \t\tvl div=getFactorization(ans[i]);\r\n    \t\tfor(auto x: div)\r\n    \t\t{\r\n    \t\t\tauto it=s1.find(x);\r\n    \t\t\tif(it==s1.end()) continue;\r\n    \t\t\tfor(ll ele=x; ele<=(ll)2e6; ele+=x)\r\n    \t\t\t{\r\n    \t\t\t\tit=s1.find(ele);\r\n    \t\t\t\tif(it!=s1.end())\r\n    \t\t\t\t\ts1.erase(ele);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \telse if(happ==false)\r\n    \t{\r\n    \t\tauto iii=s1.lower_bound(a[i]);\r\n    \t\tll ee=*iii;\r\n    \t\tans[i]=ee;\r\n    \t\tvl div=getFactorization(ans[i]);\r\n    \t\tfor(auto x: div)\r\n    \t\t{\r\n    \t\t\tauto it=s1.find(x);\r\n    \t\t\tif(it==s1.end()) continue;\r\n    \t\t\tfor(ll ele=x; ele<=(ll)2e6; ele+=x)\r\n    \t\t\t{\r\n    \t\t\t\tit=s1.find(ele);\r\n    \t\t\t\tif(it!=s1.end())\r\n    \t\t\t\t\ts1.erase(ele);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t\thapp=true;\r\n    \t}\r\n    \telse\r\n    \t{\r\n    \t\tauto iii=s1.lower_bound(1);\r\n    \t\tll ee=*iii;\r\n    \t\tans[i]=ee;\r\n    \t\tvl div=getFactorization(ans[i]);\r\n    \t\tfor(auto x: div)\r\n    \t\t{\r\n    \t\t\tauto it=s1.find(x);\r\n    \t\t\tif(it==s1.end()) continue;\r\n    \t\t\tfor(ll ele=x; ele<=(ll)2e6; ele+=x)\r\n    \t\t\t{\r\n    \t\t\t\tit=s1.find(ele);\r\n    \t\t\t\tif(it!=s1.end())\r\n    \t\t\t\t\ts1.erase(ele);\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    }\r\n    for(auto x: ans)\r\n    \tcout<<x<<' ';\r\n    cout<<endl;\r\n}\r\nint main()\r\n{\r\n\t#ifndef ONLINE_JUDGE\r\n        // for getting input from input.txt\r\n        freopen(\"input.txt\", \"r\", stdin);\r\n        // for writing output to output.txt\r\n        freopen(\"output.txt\", \"w\", stdout);\r\n    #endif\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    ll test=1;\r\n    //cin>>test;\r\n    sieve();\r\n    while(test--)\r\n    {\r\n        solve();\r\n    }\r\n    cerr << \"Time : \" << 1000 * ((double)clock()) / (double)CLOCKS_PER_SEC << \"ms\\n\";\r\n}"
}