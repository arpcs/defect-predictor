{
    "id": 116978520,
    "contestId": 959,
    "creationTimeSeconds": 1621661835,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "kdeepak"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 2776,
    "memoryConsumedBytes": 102604800,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\n\r\nconst int N = 1e7;\r\nint p[N];\r\n\r\nvoid seive(set<int> &s)\r\n{\r\n    p[0] = 1;\r\n    p[1] = 1;\r\n    for (int i = 2; i < N; i++)\r\n    {\r\n        if (p[i] == 0)\r\n        {\r\n            int j = 2;\r\n            while (i * j < N)\r\n            {\r\n                p[i * j] = 1;\r\n                j++;\r\n            }\r\n            s.insert(i);\r\n        }\r\n    }\r\n}\r\n\r\nsigned main(void)\r\n{\r\n    int n;\r\n    cin >> n;\r\n    int arr[n];\r\n    set<int> s;\r\n    seive(s);\r\n    for (int i = 0; i < n; i++)\r\n        cin >> arr[i];\r\n    unordered_map<int, int> mp;\r\n    int cnt = 0;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        bool flag = true;\r\n        int curr = arr[i];\r\n        for (int j = 2; j <= curr; j++)\r\n        {\r\n            if (curr % j == 0)\r\n            {\r\n                if (mp[j] == 0)\r\n                {\r\n                    mp[j]++;\r\n                    auto itr1 = s.find(j);\r\n                    if (itr1 != s.end())\r\n                        s.erase(itr1);\r\n                    // auto itr2 = s.find(curr / j);\r\n                    // if (itr2 != s.end())\r\n                    //     s.erase(itr2);\r\n                    // mp[curr / j]++;\r\n                }\r\n                else\r\n                {\r\n                    flag = false;\r\n                }\r\n            }\r\n        }\r\n        if (flag)\r\n        {\r\n            cnt++;\r\n            cout << arr[i] << \" \";\r\n        }\r\n        else\r\n        {\r\n            cnt++;\r\n            auto itr = s.upper_bound(arr[i]);\r\n            cout << *itr << \" \";\r\n            s.erase(itr);\r\n            break;\r\n        }\r\n    }\r\n    int cnt1 = 0;\r\n    int rem = n - cnt;\r\n    for (auto item : s)\r\n    {\r\n        if (cnt1 == rem)\r\n            break;\r\n        cout << item << \" \";\r\n        cnt1++;\r\n    }\r\n\r\n    return 0;\r\n}"
}