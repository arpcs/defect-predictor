{
    "id": 193683630,
    "contestId": 959,
    "creationTimeSeconds": 1676444080,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "_helloLad"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 1076,
    "memoryConsumedBytes": 88780800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define IOS ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#define ll long long\r\n\r\nconst int N=1e7+10;\r\nvector<bool> isprime(N,1);\r\nvector<int> primes;\r\nvector<int> lp(N,0),hp(N,0);\r\nvoid sieve(){\r\n    isprime[0]=isprime[1]=0;\r\n    for(int i=2;i<N;++i){\r\n        if(isprime[i]==true){\r\n            lp[i]=hp[i]=i;\r\n            primes.push_back(i);\r\n            for(int j=2*i;j<N;j+=i){\r\n                isprime[j]=false;\r\n                hp[j]=i;\r\n                if(lp[j]==0) lp[j]=i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvector<pair<int,int>> prime_factorization(int n){\r\n    vector<pair<int,int>> v;\r\n    while(n>1){\r\n        int res=lp[n],cnt=0;\r\n        while(n%res==0){\r\n            cnt++;\r\n            n/=res;\r\n        }\r\n        v.push_back({res,cnt});\r\n    }\r\n    return v;\r\n}\r\n\r\nint main(){\r\n    IOS\r\n    sieve();\r\n    int n;cin>>n;\r\n    vector<int> v(n),ans(n);\r\n    set<int> s;\r\n    for(int i=0;i<n;++i){\r\n        cin>>v[i];\r\n    }\r\n    int var=n;\r\n    for(int i=0;i<n;++i){\r\n        int flag=0;\r\n        for(auto &it:prime_factorization(v[i])){\r\n            if(s.find(it.first)!=s.end()){\r\n                flag=1;\r\n            }\r\n        }\r\n        if(flag==1){\r\n            var=i+1;\r\n            int x=v[i];\r\n            while(x++){\r\n                int f=1;\r\n                for(auto &it:prime_factorization(x)){\r\n                    if(s.find(it.first)!=s.end()){\r\n                        f=0;\r\n                    }\r\n                }\r\n                if(f==1){\r\n                    ans[i]=x;\r\n                    for(auto &it:prime_factorization(x)){\r\n                        s.insert(it.first);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n            break;\r\n        }else{\r\n            ans[i]=v[i];\r\n            for(auto &it:prime_factorization(v[i])){\r\n                s.insert(it.first);\r\n            }\r\n        }\r\n    }\r\n    for(auto &it:primes){\r\n        if(var==n){\r\n            break;\r\n        }\r\n        if(s.find(it)==s.end()){\r\n            ans[var++]=it;\r\n        }\r\n    }\r\n    for(auto &it:ans){\r\n        cout<<it<<\" \";\r\n    }\r\n    return 0;\r\n}\r\n\r\n"
}