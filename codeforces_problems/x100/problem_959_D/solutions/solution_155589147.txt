{
    "id": 155589147,
    "contestId": 959,
    "creationTimeSeconds": 1651499912,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "MANUAL_Boy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 889,
    "memoryConsumedBytes": 41574400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define MAXN 1000001\r\n \r\n// stores smallest prime factor for every number\r\nint spf[MAXN];\r\n \r\n// Calculating SPF (Smallest Prime Factor) for every\r\n// number till MAXN.\r\n// Time Complexity : O(nloglogn)\r\nvoid sieve()\r\n{\r\n    spf[1] = 1;\r\n    for (int i=2; i<MAXN; i++)\r\n \r\n        // marking smallest prime factor for every\r\n        // number to be itself.\r\n        spf[i] = i;\r\n \r\n    // separately marking spf for every even\r\n    // number as 2\r\n    for (int i=4; i<MAXN; i+=2)\r\n        spf[i] = 2;\r\n \r\n    for (int i=3; i*i<MAXN; i++)\r\n    {\r\n        // checking if i is prime\r\n        if (spf[i] == i)\r\n        {\r\n            // marking SPF for all numbers divisible by i\r\n            for (int j=i*i; j<MAXN; j+=i)\r\n \r\n                // marking spf[j] if it is not\r\n                // previously marked\r\n                if (spf[j]==j)\r\n                    spf[j] = i;\r\n        }\r\n    }\r\n}\r\n \r\n// A O(log n) function returning primefactorization\r\n// by dividing by smallest prime factor at every step\r\nvector<int> getFactorization(int x)\r\n{\r\n    vector<int> ret;\r\n    while (x != 1)\r\n    {\r\n        ret.push_back(spf[x]);\r\n        x = x / spf[x];\r\n    }\r\n    return ret;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int n;\r\n    cin>>n;\r\n    vector<int> v(n);\r\n    for(int i = 0; i < n; ++i)\r\n    {\r\n        cin>>v[i];\r\n    }\r\n    vector<int> ans(n);\r\n    vector<int> visited(1e6, 0);\r\n    set<int> s;\r\n    for(int i = 2; i <= 1000000; ++i)\r\n    {\r\n        s.insert(i);\r\n    }\r\n    unordered_map<int, int> mp;\r\n    int flag = 0;\r\n    for(int i = 0; i < n; ++i)\r\n    {\r\n        int j;\r\n        if(flag == 0)\r\n        {\r\n            auto it = s.lower_bound(v[i]);\r\n            if( *(it) != v[i] )\r\n            flag = 1;\r\n            ans[i] = *it;\r\n            s.erase(*it);\r\n            j = *it;\r\n        }\r\n        else\r\n        {\r\n            auto it = s.begin();\r\n             ans[i] = *it;\r\n            s.erase(*it);\r\n            j = *it;\r\n        }\r\n        // ans[i] = *(it);\r\n        // s.erase(*it);\r\n        vector<int> temp = getFactorization(j);\r\n        for(int k = 0; k < temp.size(); ++k)\r\n        {\r\n            int a = temp[k];\r\n            if(mp[a] == 1)\r\n            continue;\r\n            mp[a] = 1;\r\n            for(int p = a; p <= 1000000; p+=a)\r\n            {\r\n                if(s.find(p)!=s.end())\r\n                s.erase(p);\r\n                // visited[p] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    for(int i = 0; i < n; ++i)\r\n    {\r\n        cout<<ans[i]<<\" \";\r\n    }\r\n    cout<<endl;\r\n}\r\n\r\nint main() {\r\n    sieve();\r\n    int t = 1;\r\n    // cin>>t;\r\n    while(t--)\r\n    {\r\n        solve();\r\n    }\r\n}\r\n"
}