{
    "id": 130444974,
    "contestId": 959,
    "creationTimeSeconds": 1633077367,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "-3en_7oras-"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 214425600,
    "source": "/*\r\n\"\u0627\u0644\u0647 \u0627\u0644\u0633\u0645\u0627\u0621 \u064a\u0639\u0637\u064a\u0646\u0627 \u0627\u0644\u0646\u062c\u0627\u062d \u0648\u0646\u062d\u0646 \u0639\u0628\u064a\u062f\u0647 \u0646\u0642\u0648\u0645 \u0648\u0646\u0628\u0646\u064a\"\r\n\"\u0628\u064e\u0627\u0637\u0650\u0644\u064f \u0627\u0644\u0623\u064e\u0628\u064e\u0627\u0637\u0650\u064a\u0644\u0650\u060c \u0642\u064e\u0627\u0644\u064e \u0627\u0644\u0652\u062c\u064e\u0627\u0645\u0650\u0639\u064e\u0629\u064f: \u0628\u064e\u0627\u0637\u0650\u0644\u064f \u0627\u0644\u0623\u064e\u0628\u064e\u0627\u0637\u0650\u064a\u0644\u0650\u060c \u0627\u0644\u0652\u0643\u064f\u0644\u0651\u064f \u0628\u064e\u0627\u0637\u0650\u0644\u064c.\" (\u062c\u0627 1: 2).\r\n\u062d\u064a \u0647\u0648 \u0627\u0644\u0631\u0628\r\n*/\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n#define io                        \\\r\n    ios_base::sync_with_stdio(0); \\\r\n    cin.tie(0);                   \\\r\n    cout.tie(0);\r\n#define el '\\n'\r\n#define rep(i, n) for (int i = 0; i < n; i++)\r\n#define lep(i,n) for (int i = n - 1; i > -1; i--)\r\n#define all(v) v.begin(), v.end()\r\n#define read(a, n)              \\\r\n    for (int i = 0; i < n; i++) \\\r\n        cin >> a[i];\r\n#define pb push_back\r\n#define mms(i, v) memset(v, i, sizeof v)\r\n#define debug(i) cout<<\"debug number \"<<i<<el;\r\n#define orderedst tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update>\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef unsigned long long ul;\r\nconst ll oo = 4e18;\r\nconst int N = 1e7;\r\nconst int  mod = 1e9 + 7;\r\nconst double pi = acos(-1);\r\nbool siev[N+5];\r\nset<int> st;\r\nvector<int> adj[N];\r\nint main()\r\n{\r\n    for(int i = 2; i<=N; i++)\r\n    {\r\n        if(siev[i])\r\n            continue ;\r\n        for(int j = 2 *i ; j<=N; j+=i)\r\n        {\r\n            siev[j] = 1;\r\n            adj[j].pb(i);\r\n        }\r\n        adj[i].pb(i);\r\n        st.insert(i);\r\n    }\r\n    int n;\r\n    cin>>n;\r\n    bool gre  = 0;\r\n    for(int i = 1; i<=n; i++)\r\n    {\r\n        int x;\r\n        cin>>x;\r\n        if(gre)\r\n        {\r\n            int h = *st.begin();\r\n            cout<<h<<\" \";\r\n            st.erase(h);\r\n        }\r\n        else\r\n        {\r\n            bool val = 1;\r\n            ll temp = x ;\r\n            for(auto j:adj[x])\r\n            {\r\n                if(*st.lower_bound(j)!=j)\r\n                {\r\n                    val = 0;\r\n                }\r\n            }\r\n            if(val)\r\n            {\r\n                cout<<x<<\" \";\r\n                for(auto j:adj[x])\r\n                {\r\n                    st.erase(j);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                cout<<*st.lower_bound(x)<<\" \";\r\n                if(*st.lower_bound(x)>x)\r\n                    gre = 1;\r\n                st.erase(*st.lower_bound(x));\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return 0 ;\r\n}\r\n"
}