{
    "id": 223726019,
    "contestId": 959,
    "creationTimeSeconds": 1694954033,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "mePranav"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 420,
    "memoryConsumedBytes": 26214400,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\r\n#define uint unsigned long long\r\n#define vi vector<int>\r\n#define vvi vector<vi >\r\n#define vb vector<bool>\r\n#define vvb vector<vb >\r\n#define pii pair<int,int> \r\n#define vpii vector<pair<int,int>>\r\n#define vvpii vectir<vector<pair<int,int>>>\r\n#define fr(i,n) for(int i=0; i<(n); i++)\r\n#define rep(i,a,n) for(int i=(a); i<=(n); i++)\r\n#define nl cout<<\"\\n\"\r\n#define dbg(var) cout<<#var<<\"=\"<<var<<\" \"\r\n#define all(v) v.begin(),v.end()\r\n#define srt(v)  sort(v.begin(),v.end())         // sort \r\n#define mxe(v)  *max_element(v.begin(),v.end())     // find max element in vector\r\n#define mne(v)  *min_element(v.begin(),v.end())     // find min element in vector\r\n#define unq(v)  v.resize(distance(v.begin(), unique(v.begin(), v.end())));\r\n// make sure to sort before applying unique // else only consecutive duplicates would be removed \r\n#define bin(x,y)  bitset<y>(x) \r\nusing namespace std;\r\nint MOD=1e9+7;      // Hardcoded, directly change from here for functions!\r\n\r\nvoid modadd(int &a , int b) {a=((a%MOD)+(b%MOD))%MOD;}\r\nvoid modsub(int &a , int b) {a=((a%MOD)-(b%MOD)+MOD)%MOD;}\r\nvoid modmul(int &a , int b) {a=((a%MOD)*(b%MOD))%MOD;}\r\n// ================================== take ip/op like vector,pairs directly!==================================\r\ntemplate<typename typC,typename typD> istream &operator>>(istream &cin,pair<typC,typD> &a) { return cin>>a.first>>a.second; }\r\ntemplate<typename typC> istream &operator>>(istream &cin,vector<typC> &a) { for (auto &x:a) cin>>x; return cin; }\r\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const pair<typC,typD> &a) { return cout<<a.first<<' '<<a.second; }\r\ntemplate<typename typC,typename typD> ostream &operator<<(ostream &cout,const vector<pair<typC,typD>> &a) { for (auto &x:a) cout<<x<<'\\n'; return cout; }\r\ntemplate<typename typC> ostream &operator<<(ostream &cout,const vector<typC> &a) { int n=a.size(); if (!n) return cout; cout<<a[0]; for (int i=1; i<n; i++) cout<<' '<<a[i]; return cout; }\r\n// ===================================END Of the input module ==========================================\r\n\r\nbool canUse(int num,vi& primes,set<int>& primes_left){\r\n    // return 1;\r\n    for(auto &x: primes){\r\n        if(x>num)   return 1;\r\n        if(num%x==0 && !primes_left.count(x))   return 0;\r\n    }\r\n    return 1;\r\n}\r\nvoid solve(){\r\n    int n=1,m=0;\r\n    string s;\r\n    cin>>n;\r\n    vi v(n);\r\n    cin>>v;\r\n    set<int> nums;\r\n    vi sieve(2e6+5,0);\r\n    vector<int> p;\r\n    for(int i=2;i<=2e6;i++){\r\n        if(sieve[i]==0){        // this number was prime..\r\n            p.push_back(i);\r\n            sieve[i]=i;\r\n        }\r\n        for(int j=0;j<p.size() && p[j]<=sieve[i] && i*p[j]<=2e6;j++){\r\n            sieve[i*p[j]]=p[j];       // notifying the prime factor!\r\n        }\r\n    }\r\n\r\n    set<int> primes(all(p));\r\n    for(int i=0;i<n;i++){\r\n        set<int> factors;\r\n        int div=sieve[v[i]];\r\n        int num=v[i];\r\n        if(div>1)  factors.insert(div);\r\n        else if(num>1)  factors.insert(num);\r\n        while(div>1){\r\n            num/=div;\r\n            div=sieve[num];\r\n            if(div>1)  factors.insert(div);\r\n            else if(num>1) factors.insert(num);\r\n        }\r\n        for(auto& x:factors){\r\n            if(!primes.count(x)){       // this prime has already been used! \r\n                for(int j=v[i]+1;j<=2e6;j++){\r\n                    // cout<<j<<\"\\n\";\r\n                    if(canUse(j,p,primes)){\r\n                    \r\n                        cout<<j<<\" \";\r\n                        int div=sieve[j];\r\n                        int num=j;\r\n                        if(div>1)  primes.erase(div);\r\n                        else if(num>1)  primes.erase(num);\r\n                        while(div>1){\r\n                            num/=div;\r\n                            div=sieve[num];\r\n                            if(div>1)  primes.erase(div);\r\n                            else if(num>1) primes.erase(num);\r\n                        }\r\n                        break;\r\n                    }\r\n                    \r\n                }\r\n                for(auto& x:primes){\r\n                    if(++i<n)   cout<<x<<\" \";\r\n                    else break;    \r\n                }\r\n                return;\r\n            }\r\n        }\r\n        for(auto& x:factors)    primes.erase(x);\r\n        cout<<v[i]<<\" \";    \r\n        \r\n    }\r\n    cout<<\"\\n\";\r\n    \r\n}\r\n\r\nint32_t main()\r\n{\r\n    // cout<<fixed;\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    int T = 1;\r\n    // cin >> T;\r\n    while (T--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n\r\n    "
}