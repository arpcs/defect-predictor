{
    "id": 179164730,
    "contestId": 959,
    "creationTimeSeconds": 1667553971,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "bukacha"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 2605,
    "memoryConsumedBytes": 148275200,
    "source": "//#include <bits/stdc++.h>\n//\n//namespace Const {\n//  const int max_number = 2 * 1e5 + 7;\n//}\n//\n//const int max_number = Const::max_number;\n//\n//void Precompute(std::set<int>& filter, std::vector<std::vector<int>>& divisors, std::vector<bool>& primes) {\n//  for (int i = 2; i < max_number; ++i) {\n//    if (primes[i]) {\n//      for (int j = i; j < max_number; j += i) {\n//        divisors[j].push_back(i);\n//        primes[j] = false;\n//      }\n//    }\n//    filter.insert(i);\n//  }\n//}\n//\n//void Update(std::set<int>& filter, std::vector<int>& divisors, std::vector<bool>& junk) {\n//  for (auto divisor : divisors) {\n//    for (int i = divisor; i < max_number; i+=divisor) {\n//      if (junk[i]) {\n//        filter.erase(i);\n//        junk[i] = false;\n//      }\n//    }\n//  }\n//}\n//\n//int main() {\n//  std::ios_base::sync_with_stdio(false);\n//  std::cin.tie(nullptr);\n//  std::cout.tie(nullptr);\n//  int n;\n//  std::cin >> n;\n//  std::set<int> filter;\n//  std::vector<std::vector<int>> divisors(max_number);\n//  std::vector<bool> primes(max_number, true);\n//  std::vector<bool> junk(max_number, true);\n////  for (int i = 2; i < max_number; ++i) {\n////    filter.insert(i);\n////  }\n//  Precompute(filter, divisors, primes);\n//  bool free = true;\n//  for (int i = 0; i < n; ++i) {\n//    int x;\n//    int low;\n//    std::cin >> x;\n//    if (free) low = *std::lower_bound(filter.begin(), filter.end(), x);\n//    else low = *filter.begin();\n//    if (low > x) {\n//      free = false;\n//    }\n//    std::cout << low << \" \";\n//    Update(filter, divisors[low], junk);\n//  }\n//}\n#include <iostream>\n#include <vector>\n#include <set>\nusing namespace std;\nvector<int> d[2000005];\nset<int> s;\nbool p[2000005],er[2000005];\nint main()\n{\n  int n;\n  scanf(\"%d\",&n);\n  for (int i=2;i<2000005;i++)\n  {\n    if (!p[i])\n    {\n      for (int x=i;x<2000005;x+=i)\n      {\n        d[x].push_back(i);\n        p[x]=1;\n      }\n    }\n    s.insert(i);\n  }\n  bool eq=1;\n  for (int i=0;i<n;i++)\n  {\n    int a;\n    scanf(\"%d\",&a);\n    int cur=*s.begin();\n    if (eq)\n    {\n      cur=*s.lower_bound(a);\n      if (cur!=a)\n        eq=0;\n    }\n    printf(\"%d \",cur);\n    for (int x:d[cur])\n    {\n      for (int j=x;j<2000005;j+=x)\n      {\n        if (!er[j])\n        {\n          s.erase(j);\n          er[j]=1;\n        }\n      }\n    }\n  }\n}"
}