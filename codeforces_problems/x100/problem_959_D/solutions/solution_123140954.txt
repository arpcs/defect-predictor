{
    "id": 123140954,
    "contestId": 959,
    "creationTimeSeconds": 1626822174,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "MohamedAliSaidane"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 6451200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef pair<int,int> pii;\r\ntypedef vector<int> vi;\r\ntypedef long long ll;\r\ntypedef pair<ll,ll> pll;\r\ntypedef tuple<int,int,int> ti;\r\ntypedef unsigned long long ull;\r\ntypedef long double ld;\r\ntypedef pair<ld,ld> pld;\r\n#define pb push_back\r\n#define popb pop_back()\r\n#define pf push_front\r\n#define popf pop_front\r\n#define ff first\r\n#define ss second\r\n#define MOD (int)(1e8)\r\n#define INF (ll) (1e18)\r\nll gcd(ll a , ll b) {return b ? gcd(b , a % b) : a ;}\r\nll lcm(ll a , ll b) {return (a * b) / gcd(a , b);}\r\nld pointdist(ld x, ld y, ld point) { return ((x-point)*(y-point))/abs(x-y); }\r\nld dist(ld x, ld y, ld a, ld b){ return sqrt((x-a)*(x-a) + (y-b)*(y-b)); }\r\nconst int nx[8] = {0, 0, 1, -1, 1, 1, -1, -1}, ny[8] = {1, -1, 0, 0, 1, -1, 1, -1}; //East, West, South, North\r\nconst int xcav[8] = {1,2,2,1,-1,-2,-2,-1};\r\nconst int ycav[8] = {-2,-1,1,2,2,1,-1,-2};\r\nconst int crapx[4] = {0,2,0,-2};\r\nconst int crapy[4] = {-2,0,2,0};\r\n////////////******SOLUTION******\\\\\\\\\\\\\\\\\\\\\\\r\n\r\nconst int MAX_N = 1e6 + 4;\r\nint n;\r\nvector<int> v;\r\nbool prime(int x)\r\n{\r\n    for(int i= 2; i * i <= x; i ++)\r\n    {\r\n        if(x%i == 0)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0); cout.tie(0);\r\n    set<ll> pq;\r\n    pq.insert(2ll);\r\n    for(ll i = 3ll; i <= MAX_N; i ++)\r\n    {\r\n        if(prime(i))\r\n            pq.insert(i);\r\n    }\r\n    ll u = 1ll;\r\n    cin >> n;\r\n    bool flag = false;\r\n    for(int i = 0; i <n; i ++)\r\n    {\r\n        ll a; cin >> a;\r\n        if(!flag)\r\n        {\r\n        ll o = gcd(u,a);\r\n        if(o != 1)\r\n        {\r\n            ll b = *(pq.upper_bound(a));\r\n            cout << b << ' ';\r\n            pq.erase(b);\r\n            u = lcm(u,b);\r\n            flag = true;\r\n        }\r\n        else\r\n        {\r\n            cout << a << ' ';\r\n            u = lcm(u,a);\r\n            int k = 2;\r\n            while(a != 1)\r\n            {\r\n                while(a%k == 0)\r\n                {\r\n                    a /= k;\r\n                    if(pq.count(k) != 0)\r\n                    pq.erase(k);\r\n\r\n                }\r\n                k ++;\r\n            }\r\n        }\r\n        }\r\n        else\r\n        {\r\n            ll b= *(pq.begin());\r\n            pq.erase(b);\r\n            cout << b << ' ';\r\n            u = lcm(u,b);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n/*\r\nIdentify problem diagram: Brute force, Greedy, Dynamic Programming, Divide and Conquer\r\nReformulate the problem into something more theoretical\r\nSearch for multiple approaches: select the seemingly optimal one\r\nRemember that you're the king of CP\r\nChange your approach\r\nDon't spend too much time on the problem: move on !\r\n*/\r\n"
}