{
    "id": 213027258,
    "contestId": 959,
    "creationTimeSeconds": 1688938072,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "tomas_fang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 73728000,
    "source": "#include <iostream>\n#include <vector>\n#include <set>\n#include <cmath>\nusing namespace std;\n\nconst int maxn = 2000010;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(NULL);\n\n  int n;\n  cin >> n;\n\n  vector<int> a(n);\n  for (int i = 0; i < n; i++)\n    cin >> a[i];\n\n  vector<int> idx(maxn, 0);\n  vector<int> primes;\n  primes.reserve(maxn / log(maxn));\n  \n  // Sieve of Eratosthenes to find all primes up to maxn\n  vector<bool> isPrime(maxn, true);\n  for (int i = 2; i < maxn; i++) {\n    if (isPrime[i]) {\n      primes.push_back(i);\n      for (int j = 2 * i; j < maxn; j += i)\n        isPrime[j] = false;\n    }\n  }\n\n  set<int> S;\n  for (int i = 2; i < maxn; i++)\n    S.insert(i);\n\n  int F = 0;\n  int nxt = 0;\n  idx[1] = 1;\n  for (int i = 0; i < n; i++) {\n    if (F == 0)\n      nxt = *S.lower_bound(a[i]);\n    else\n      nxt = *S.begin();\n\n    if (nxt > a[i])\n      F = 1;\n\n    cout << nxt << \" \";\n\n    for (int prime : primes) {\n      if (prime * prime > nxt)\n        break;\n      if (nxt % prime == 0) {\n        for (int k = prime; k < maxn && idx[prime] != 1; k += prime)\n          if (S.count(k))\n            S.erase(k);\n        for (int k = nxt / prime; k < maxn && idx[nxt / prime] != 1; k += nxt / prime)\n          if (S.count(k))\n            S.erase(k);\n        idx[prime] = idx[nxt / prime] = 1;\n      }\n    }\n  }\n\n  return 0;\n}\n// JaJXuASpKNxqAVAooFTuhSFhmynoRcVHhvbaENkaKhpsvIJZTERCXZdcdeSNaumauuUgdJOgUltFkNGZndnSDlwIaWZASDwEGrIrJkdtmjhMqUJitVtJGQsddYUBfRZX"
}