{
    "id": 189532982,
    "contestId": 959,
    "creationTimeSeconds": 1673957362,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "shivamshekhar010"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 10444800,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\n#define ff first\r\n#define ss second\r\nusing namespace std;\r\n\r\nconst int mod=998244353;\r\n\r\nint squareRoot(int x){\r\n    if(x<0) return -1;\r\n    if(x==0) return 0;\r\n    int l=1,r=1e9;\r\n    while(l<=r){\r\n        int m=l+(r-l)/2;\r\n        int a=x/m,b=(x-1)/m;\r\n        if(a>=m && b<m+2) return m;\r\n        if(a>=m+2) l=m+1;\r\n        else r=m-1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nint binexp(int x, int y){\r\n    int z = 1;\r\n    while(y)\r\n    {\r\n        if(y & 1) z = (z*x)%mod;\r\n        x = (x*x)%mod;\r\n        y >>= 1;\r\n    }\r\n    return z;\r\n}\r\n\r\nint N=2e6+1;\r\n\r\nvector<bool> isprime(N+1, true);\r\nvector<int> p;\r\n\r\nvoid sieve(){\r\n    isprime[0] = isprime[1] = false;\r\n\r\n    for(int i=2;i*i<=N;i++){\r\n        if(!isprime[i]) continue;\r\n        for(int j=i*i;j<=N;j+=i){\r\n            isprime[j]=false;\r\n        }\r\n    }\r\n    for(int i=1;i<=N;i++) if(isprime[i]){\r\n        p.push_back(i);\r\n    }\r\n}\r\n\r\nint fenwick[100001];\r\n\r\nvoid update(int i,int x) {\r\n  while(i<=N)\r\n  {\r\n      fenwick[i]+=x;\r\n      i+=(i&(-i));\r\n  }\r\n}\r\n\r\nint query(int x)\r\n{\r\n  int ans=0;\r\n  while(x>0)\r\n  {\r\n       ans+=fenwick[x];\r\n       x-=(x & (-x));\r\n  }\r\n\r\n  return ans;\r\n}\r\n\r\nint gcd(int a, int b){\r\n    if(b==0) return a;\r\n    return gcd(b,a%b);\r\n}\r\n\r\n\r\n\r\nvoid solve(){\r\n    int n;\r\n    cin>>n;\r\n    vector<int> v(n);\r\n    map<int,int> mp;\r\n    for(int i=0;i<n;i++) cin>>v[i];\r\n    cout<<v[0]<<\" \";\r\n    int h=v[0];\r\n    for(int j=2;j*j<=h;j++){\r\n        while(h%j==0){\r\n            mp[j]=1;\r\n            h/=j;\r\n        }\r\n    }\r\n    if(h>1) mp[h]=1;\r\n    for(int i=1;i<n;i++){\r\n        int k=v[i],c=1;\r\n        vector<int> a;\r\n        for(int j=2;j*j<=k;j++){\r\n            if(k%j==0){\r\n                if(mp[j]==1){\r\n                    c=0;\r\n                    break;\r\n                }\r\n                a.push_back(j);\r\n                while(k%j==0){\r\n                    k/=j;\r\n                }\r\n            }\r\n        }\r\n        if(k>1){\r\n            if(mp[k]==1){\r\n                c=0;\r\n            }\r\n            else{\r\n                mp[k]=1;\r\n            }\r\n        }\r\n        if(c){\r\n            cout<<v[i]<<\" \";\r\n            for(auto i : a) mp[i]=1;\r\n        }\r\n        else{\r\n            int l=lower_bound(p.begin(),p.end(),v[i]) - p.begin();\r\n            while(mp[p[l]]){\r\n                l++;\r\n            }\r\n            cout<<p[l]<<\" \";\r\n            mp[p[l]]=1;\r\n            i++;\r\n            l=0;\r\n            while(i<n){\r\n                if(mp[p[l]]==0){\r\n                    cout<<p[l]<<\" \";\r\n                    mp[p[l]]=1;\r\n                    i++;\r\n                }\r\n                l++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint32_t main(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    sieve();\r\n    int t;\r\n    t=1;\r\n    // cin>>t;\r\n    for(int i=1;i<=t;i++){\r\n        // cout<<\"Case #\"<<i<<\": \";\r\n        solve();\r\n        cout<<'\\n';\r\n    }\r\n    return 0;\r\n}\r\n"
}