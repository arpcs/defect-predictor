{
    "id": 89832209,
    "contestId": 959,
    "creationTimeSeconds": 1597364788,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "WCDI"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 2152,
    "memoryConsumedBytes": 83456000,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n#define pb push_back\n#define mod(n,k) ( ( ((n) % (k)) + (k) ) % (k))\n#define forn(i,a,b) for(int i = a; i < b; i++)\n#define forr(i,a,b) for(int i = a; i >= b; i--)\n#define all(x) (x).begin(), (x).end()\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int,int> ii;\ntypedef vector<int> vi;\ntypedef vector<ii> vii;\n\nconst int maxn = 2000000;\nbool bs[maxn];\nll sp[maxn]; //smallest prime of sp[i];\nvoid sieve(){\n        for(int i = 2; i < maxn; i += 2)sp[i] = 2;//even numbers have smallest prime factor 2\n        for(ll i = 3; i < maxn; i += 2){\n                if(!bs[i]){\n                        sp[i] = i;\n                        for(ll j = i; (j*i) < maxn; j += 2){\n                                if(!bs[j*i])bs[j*i] = true, sp[j*i] = i;\n                        }\n                }\n        }\n}\nvi primeFactors(ll x){\n        vi res;\n        while(x != 1){\n                if(res.empty()){\n\t\t\t\t\tres.pb(sp[x]);\n\t\t\t\t}else{\n\t\t\t\t\tif(res.back() != sp[x])res.pb(sp[x]);\n\t\t\t\t}\n                x = x/sp[x];\n        }\n        return res;\n}\n\n\nint main(){\n\tios_base::sync_with_stdio(0); cin.tie(0);\n\tsieve();\n\tint N; cin >> N;\n\tvi A(N);\n\tforn(i,0,N)cin >> A[i];\n\tset<int> queda;\n\tforn(i,2,maxn)queda.insert(i);\n\tvi res;\n\tint malo = -1;\n\tforn(i,0,N){\n\t\tif(!queda.count(A[i])){\n\t\t\tmalo = i;\n\t\t\tbreak;\n\t\t}\n\t\tvi p = primeFactors(A[i]);\n\t\tfor(auto &x : p){\n\t\t\tfor(int j = x; j <= maxn; j += x){\n\t\t\t\tif(!queda.count(j))continue;\n\t\t\t\tqueda.erase(j);\n\t\t\t}\n\t\t}\n\t\tres.pb(A[i]);\n\t}\n\tif(malo == -1){\n\t\tforn(i,0,N)cout << res[i] << ' ';\n\t\tcout << '\\n';\n\t\treturn 0;\n\t}\n\tauto it = queda.lower_bound(A[malo]);\n\tres.pb(*it);\n\tqueda.erase(*it);\n\t\n\tvi p = primeFactors(*it);\n\tfor(auto &x : p){\n\t\tfor(int j = x; j <= maxn; j += x){\n\t\t\tif(!queda.count(j))continue;\n\t\t\tqueda.erase(j);\n\t\t}\n\t}\n\tforn(i,malo+1,N){\n\t\tassert(queda.size());\n\t\tit = queda.begin();\n\t\tres.pb(*it);\n\t\tp = primeFactors(*it);\n\t\tfor(auto &x : p){\n\t\t\tfor(int j = x; j <= maxn; j += x){\n\t\t\t\tif(!queda.count(j))continue;\n\t\t\t\tqueda.erase(j);\n\t\t\t}\n\t\t}\n\t}\n\tforn(i,0,N)cout << res[i] << ' ';\n\t\tcout << '\\n';\n\t\treturn 0;\n\treturn 0;\n}\n/*\n__builtin_mul_overflow(x,y,&x)\n-fsplit-stack\n*/\n"
}