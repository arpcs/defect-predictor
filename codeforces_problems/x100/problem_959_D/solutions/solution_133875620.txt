{
    "id": 133875620,
    "contestId": 959,
    "creationTimeSeconds": 1635756294,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "superdoob"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1522771500
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 38195200,
    "source": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.InputMismatchException;\nimport java.util.List;\nimport java.util.TreeSet;\n\n\npublic class Mahmoud {\n\n    static TreeSet<Integer> allNums = new TreeSet<>();\n    static List<Integer>[] divisors = new ArrayList[100001];\n\n\n    public static void main(String[] args) {\n        Reader s = new Reader();\n        int n = s.nextInt();\n        StringBuilder sb = new StringBuilder();\n\n        for (int i = 0; i < divisors.length; i++) {\n            divisors[i] = new ArrayList<>();\n        }\n\n        boolean prime[] = new boolean[divisors.length];\n        for (int i = 2; i < divisors.length; i++) {\n            allNums.add(i);\n            if (prime[i]) {\n                continue;\n            }\n\n            for (int j = i; j < divisors.length; j = j + i) {\n                prime[j] = true;\n                divisors[j].add(i);\n            }\n        }\n\n        boolean ok = true;\n\n        for (int i = 0; i < n; i++) {\n            int a = s.nextInt();\n            int startEle = allNums.first();\n            if (ok) {\n                startEle = allNums.ceiling(a);\n                if (startEle != a) {\n                    ok = false;\n                }\n            }\n            sb.append(startEle + \" \");\n            for (int div : divisors[startEle]) {\n                for (int j = div; j < divisors.length; j = j + div) {\n                    if (allNums.contains(j)) {\n                        allNums.remove(j);\n                    }\n                }\n            }\n\n        }\n\n        System.out.println(sb);\n\n    }\n\n    static class Reader {\n\n        private InputStream mIs;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n\n        public Reader() {\n            this(System.in);\n        }\n\n        public Reader(InputStream is) {\n            mIs = is;\n        }\n\n        public int[] readInt(int n) {\n            int a[] = new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = nextInt();\n            }\n            return a;\n        }\n\n        public long[] readLong(int n) {\n            long a[] = new long[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = nextLong();\n            }\n            return a;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = mIs.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public String nextLine() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isEndOfLine(c));\n            return res.toString();\n        }\n\n        public String next() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                res.appendCodePoint(c);\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n\n        public long nextLong() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            long res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public boolean isSpaceChar(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public boolean isEndOfLine(int c) {\n            return c == '\\n' || c == '\\r' || c == -1;\n        }\n\n    }\n\n}\n"
}