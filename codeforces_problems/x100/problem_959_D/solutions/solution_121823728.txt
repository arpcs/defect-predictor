{
    "id": 121823728,
    "contestId": 959,
    "creationTimeSeconds": 1625840347,
    "relativeTimeSeconds": 4147,
    "problem": {
        "contestId": 959,
        "index": "D",
        "name": "Mahmoud and Ehab and another array construction task",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 959,
        "members": [
            {
                "handle": "MagicalGirl_Yeri"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1625836200
    },
    "programmingLanguage": "Rust",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/*\r\n    date   : 2021 / 4 / 7\r\n    author : quickn (quickn.tech)\r\n    email  : [email\u00a0protected]\r\n*/\r\n\r\nuse std::io::{self, BufWriter, Write};\r\n\r\nmod scanner {\r\n    use std::{io, str};\r\n    /* https://github.com/EbTech/rust-algorithms */\r\n\r\n    /// Same API as Scanner but nearly twice as fast, using horribly unsafe dark arts\r\n    /// **REQUIRES** Rust 1.34 or higher\r\n    pub struct UnsafeScanner<R> {\r\n        reader: R,\r\n        buf_str: Vec<u8>,\r\n        buf_iter: str::SplitAsciiWhitespace<'static>,\r\n    }\r\n\r\n    impl<R: io::BufRead> UnsafeScanner<R> {\r\n        pub fn new(reader: R) -> Self {\r\n            Self {\r\n                reader,\r\n                buf_str: Vec::new(),\r\n                buf_iter: \"\".split_ascii_whitespace(),\r\n            }\r\n        }\r\n\r\n        /// This function should be marked unsafe, but noone has time for that in a\r\n        /// programming contest. Use at your own risk!\r\n        pub fn token<T: str::FromStr>(&mut self) -> T {\r\n            loop {\r\n                if let Some(token) = self.buf_iter.next() {\r\n                    return token.parse().ok().expect(\"Failed parse\");\r\n                }\r\n                self.buf_str.clear();\r\n                self.reader\r\n                    .read_until(b'\\n', &mut self.buf_str)\r\n                    .expect(\"Failed read\");\r\n                self.buf_iter = unsafe {\r\n                    let slice = str::from_utf8_unchecked(&self.buf_str);\r\n                    std::mem::transmute(slice.split_ascii_whitespace())\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nuse std::cmp::{min, max};\r\n\r\nfn s2vec(s: String) -> Vec<char> {\r\n    s.chars().collect()\r\n}\r\n\r\nfn main() {\r\n    let (stdin, stdout) = (io::stdin(), io::stdout());\r\n    let (mut scan, mut sout) = (\r\n        scanner::UnsafeScanner::new(stdin.lock()),\r\n        BufWriter::new(stdout.lock()),\r\n    );\r\n    let n: usize = scan.token();\r\n    let mut arr: Vec<i32> = vec![0;n];\r\n    let mut failed = false;\r\n    let mut cnt: Vec<i32> = vec![0;2000001];\r\n    let mut add: Vec<i32> = vec![];\r\n    for i in 0..n {\r\n        arr[i] = scan.token();\r\n        let mut p = 2;\r\n        if !failed {\r\n        if arr[i] != 1 {\r\n            if cnt[arr[i] as usize] > 0 {\r\n                failed = true;\r\n            } else {\r\n                cnt[arr[i] as usize] = 1;\r\n            }\r\n        }\r\n        if !failed {\r\n        while p*p <= arr[i] {\r\n            if arr[i] % p == 0 {\r\n                if cnt[p as usize] > 0 {\r\n                    failed = true;\r\n                    break;\r\n                }\r\n                cnt[p as usize] += 1;\r\n                if p != arr[i] / p {\r\n                    if cnt[(arr[i]/p) as usize] > 0 {\r\n                        failed = true;\r\n                        break;\r\n                    }\r\n                    cnt[(arr[i]/p) as usize] += 1;\r\n                }\r\n            }\r\n            p += 1;\r\n        }\r\n        }\r\n        if !failed {\r\n            add.push(arr[i]);\r\n        }\r\n    }\r\n    use std::collections::BTreeSet;\r\n    let mut set: BTreeSet<i32> = BTreeSet::new();\r\n    for i in if add.len() < n { arr[add.len()] as usize } else { 2 }..=2_000_000 {\r\n        set.insert(i as i32);\r\n    }\r\n    for i in 2..=2_000_000 {\r\n        let mut p = i;\r\n        if cnt[i as usize] == 1 {\r\n            while p <= 2_000_000 {\r\n                cnt[p as usize] = 1;\r\n                set.remove(&p);\r\n                p += i;\r\n            }\r\n        }\r\n    }\r\n    if add.len() < n {\r\n        let p = *set.iter().nth(0).unwrap();\r\n        let mut x = p;\r\n        while x <= 2_000_000 {\r\n            cnt[x as usize] = 1;\r\n            set.remove(&x);\r\n            x += p;\r\n        }\r\n        add.push(p);\r\n    }\r\n    for i in 2..=2_000_000 {\r\n        if cnt[i] != 1 {\r\n            set.insert(i as i32);\r\n        }\r\n    }\r\n    while add.len() < n {\r\n        let p = *set.iter().nth(0).unwrap();\r\n        let mut x = p;\r\n        while x <= 2_000_000 {\r\n            cnt[x as usize] = 1;\r\n            set.remove(&x);\r\n            x += p;\r\n        }\r\n        add.push(p);\r\n    }\r\n    for i in 0..n {\r\n        write!(sout, \"{} \", add[i]).ok();\r\n    }\r\n}\r\n"
}