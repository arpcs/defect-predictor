{
    "id": 206537407,
    "contestId": 27,
    "creationTimeSeconds": 1684514198,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 27,
        "index": "B",
        "name": "Tournament",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 27,
        "members": [
            {
                "handle": "jo_forces"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284130800
    },
    "programmingLanguage": "Python 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 134860800,
    "source": "from heapq import heapify, heappop, heappush\nfrom collections import defaultdict\n\ndef main():\n    \n    n = int(input())\n\n\n    graph = defaultdict(list)\n    num_games = (n*(n-1))//2 - 1\n    for _ in range(num_games):\n        a,b = map(int, input().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    for node in graph:\n        if len(graph[node]) < n-1:\n            missing = set(range(1, n+1)) - set(graph[node]) - set([node])\n            print(node, missing.pop())\n\n            return\n\n\nimport sys, threading\n\ninput = lambda: sys.stdin.readline().strip()\n\nif __name__ == '__main__':\n    \n    sys.setrecursionlimit(1 << 30)\n    threading.stack_size(1 << 27)\n\n    main_thread = threading.Thread(target=main)\n    main_thread.start()\n    main_thread.join()\n"
}