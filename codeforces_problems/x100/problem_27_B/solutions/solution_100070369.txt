{
    "id": 100070369,
    "contestId": 27,
    "creationTimeSeconds": 1606774795,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 27,
        "index": "B",
        "name": "Tournament",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 27,
        "members": [
            {
                "handle": "ChickenBBQ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284130800
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 310,
    "memoryConsumedBytes": 0,
    "source": "//package albert.codeforces.tournament27b;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.Stack;\n\npublic class Solution {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        Map<Integer, Set<Integer>> graph = new HashMap<>();\n        int n = in.nextInt();\n        /*for (int i = 0; i < n; i++) {\n            graph.put(i + 1, new HashSet<>());\n        }*/\n        boolean[][] games = new boolean[n + 1][n + 1];\n        while (in.hasNext()) {\n            int a = in.nextInt();\n            if (a == 0) {\n                break;\n            }\n            int b = in.nextInt();\n            graph.computeIfAbsent(a, k -> new HashSet<>()).add(b);\n            games[Math.min(a, b)][Math.max(a, b)] = true;\n        }\n\n        for (int i = 1; i < n; i++) {\n            for (int j = i + 1; j <= n; j++) {\n                if (!games[i][j]) {\n                    graph.computeIfAbsent(i, k -> new HashSet<>()).add(j);\n                    if (cycle(graph, n)) {\n                        System.out.println(i + \" \" + j);\n                    } else {\n                        System.out.println(j + \" \" + i);\n                    }\n                }\n            }\n        }\n    }\n\n    private static boolean cycle(Map<Integer, Set<Integer>> graph, int n) {\n        Set<Integer> seen = new HashSet<>();\n        Stack<Integer> stack = new Stack<>();\n        for (int i = 1; i <= n; i++) {\n            if (!seen.contains(i)) {\n                seen.add(i);\n                stack.add(i);\n                Set<Integer> currentSeen = new HashSet<>();\n                currentSeen.add(i);\n                while (!stack.isEmpty()) {\n                    Integer current = stack.pop();\n                    for (Integer neighbor : graph.getOrDefault(current, Collections.emptySet())) {\n                        if (currentSeen.contains(neighbor)) {\n                            return true;\n                        }\n                        seen.add(neighbor);\n                        stack.push(neighbor);\n                        currentSeen.add(neighbor);\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n"
}