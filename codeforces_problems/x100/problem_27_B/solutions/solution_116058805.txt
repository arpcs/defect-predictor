{
    "id": 116058805,
    "contestId": 27,
    "creationTimeSeconds": 1620850741,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 27,
        "index": "B",
        "name": "Tournament",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 27,
        "members": [
            {
                "handle": "rick1113"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284130800
    },
    "programmingLanguage": "Java 11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 18,
    "timeConsumedMillis": 466,
    "memoryConsumedBytes": 24576000,
    "source": "import java.util.Scanner;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.LinkedList;\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\npublic class Main { \r\n    \r\n    // private static int dp[][][];\r\n    // private static HashMap<String, Integer> dp = new HashMap<>();\r\n    // add all number which has its any place as zero plus one no zero any number\r\n\tpublic static void main(String[] args) {\r\n        Scanner ip = new Scanner(System.in);\r\n        int n = ip.nextInt();\r\n\r\n        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();\r\n        int[] matches = new int[n];\r\n        int tMatches = (n*(n-1))/2;\r\n\r\n        for (int i=0; i<tMatches-1; i++) {\r\n            int win = ip.nextInt();\r\n            int los = ip.nextInt();\r\n            matches[win-1] += 1;\r\n            matches[los-1] += 1;\r\n            if (hm.containsKey(win)) {\r\n                ArrayList<Integer> losers = hm.get(win);\r\n                losers.add(los);\r\n            } else{\r\n                hm.put(win, new ArrayList<>(Arrays.asList(los)));\r\n            }\r\n        }\r\n        int[] lstMat = new int[2];\r\n        int x = 0;\r\n        for (int i=0; i<matches.length; i++) {\r\n            if (matches[i] != n-1) {\r\n                lstMat[x++] = i+1;\r\n            }\r\n        }\r\n\r\n        // System.out.println(\"one:\"+hm.get(1));\r\n        boolean flag = false;\r\n        for (int loser: hm.get(lstMat[0])) {\r\n            ArrayList<Integer> al = new ArrayList<>();\r\n            if (hm.containsKey(loser))  al = hm.get(loser);\r\n            //System.out.println(lstMat[0]+\"'s loosers: \"+al);\r\n            // for (int los : al) {\r\n            //     ArrayList<Integer> all = new ArrayList<>();\r\n            //     if (hm.containsKey(los)) all = hm.get(los);\r\n                if (al.contains(lstMat[1])) {\r\n                    flag = true;\r\n                    break;\r\n                }\r\n            // }\r\n            if (flag) break;\r\n        }\r\n\r\n        if (flag) {\r\n            System.out.println(lstMat[0]+\" \"+lstMat[1]);\r\n        } else {\r\n            System.out.println(lstMat[1]+\" \"+lstMat[0]);\r\n        }\r\n\r\n\t}\r\n    private static int LCS(String s1, String s2) {\r\n        int dp[][] = new int[s1.length()+1][s2.length()+1];\r\n        int max = 0;\r\n        for (int i=0; i<=s1.length(); i++) {\r\n            for (int j=0; j<=s2.length(); j++) {\r\n                if (i == 0 || j == 0) {\r\n                    dp[i][j] = 0;\r\n                    continue;\r\n                }\r\n                if (s1.charAt(i-1) == s2.charAt(j-1)) {\r\n                    dp[i][j] = dp[i-1][j-1]+1;\r\n                    max = Math.max(max, dp[i][j]);\r\n                } else {\r\n                    dp[i][j] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        return max;\r\n    }\r\n}"
}