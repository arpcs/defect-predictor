{
    "id": 176235908,
    "contestId": 27,
    "creationTimeSeconds": 1665810176,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 27,
        "index": "B",
        "name": "Tournament",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 27,
        "members": [
            {
                "handle": "tastybrick"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284130800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 307200,
    "source": "#include <iostream>\n#include <stdio.h>\n#include <iomanip>\n#include <vector>\n#include <cstdio>\n#include <string.h>\n#include <algorithm>\n#include <cmath>\n#include <unordered_map>\n#include <climits>\n#include <set>\n#include <numeric>\n#include <queue>\n#include <stack>\n#include <map>\nusing namespace std;\n\n#define int long long\n#define mod 1000000007\n#define vi vector<long long>\n#define vs vector<string>\n#define vc vector<char>\n#define vd vector<double>\n#define vb vector<bool>\n#define vvi vector<vector<long long>>\n#define vvs vector<vector<string>>\n#define vvc vector<vector<char>>\n#define vvd vector<vector<double>>\n#define vvb vector<vector<bool>>\n\nvb sieve(int n)\n{\n    vb prime(n + 1, true);\n    for (int p = 2; p * p <= n; p++)\n        if (prime[p] == true)\n            for (int i = p * p; i <= n; i += p) \n                prime[i] = false;\n    prime[1] = false;\n    return prime;\n}\n\nint powerM(int x, int y)\n{\n    if (y == 0) \n        return 1;\n    int p = powerM(x, y / 2) % mod;\n    p = (p * p) % mod;\n    return (y % 2 == 0) ? p : (x * p) % mod;\n}\n\nint power(int x, int y)\n{\n    if (y == 0) \n        return 1;\n    int p = power(x, y / 2);\n    p = (p * p);\n    return (y % 2 == 0) ? p : (x * p);\n}\n\nint gcd(int a, int b)\n{\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nint lcm(int a, int b)\n{\n    return (a / gcd(a, b)) * b;\n}\n\n\nbool palindrome(string &s) {\n    int n = s.length();\n    for(int i = 0, j = n - 1; i < j; i++, j--)\n        if(s[i] != s[j])\n            return false;\n    return true;\n}\n\nint dfs(int at, int src, vi adj[], vb &visited, map<vi,bool> &connected) {\n    visited[at] = true;\n    if(at != src && !connected[{at,src}])\n        return at;\n    for(auto &x : adj[at]) {\n        if(visited[x])\n            continue;\n        int val = dfs(x,src,adj,visited,connected);\n        if(val != -1)\n            return val;\n    }\n    return -1;\n}\n\nvi solve(vi adj[], int n) {\n    map<vi,bool> connected;\n    vi in(n),out(n);\n    for(int i = 0; i < n; i++) {\n        for(auto &j : adj[i]) {\n            connected[{i,j}] = connected[{j,i}] = true;\n            out[i]++,in[j]++;\n        }\n    }\n    vi ans;\n    for(int i = 0; i < n; i++) {\n        if(out[i] + in[i] != n - 1) {\n            vb visited(n);\n            int val = dfs(i,i,adj,visited,connected);\n            if(val != -1)\n                return {i + 1,val + 1};\n            ans.push_back(i + 1);\n        }\n    }\n    return ans;\n}\n\nint32_t main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int t = 1;\n    // cin >> t;\n\n    while(t--) {\n        int n;\n        cin >> n;\n        int size = (n * (n - 1)) / 2 - 1;\n        vi adj[n];\n        for(int i = 0; i < size; i++) {\n            int u, v;\n            cin >> u >> v;\n            u--,v--;\n            adj[u].push_back(v);\n        }\n        vi ans = solve(adj,n);\n        cout << ans[0] << \" \" << ans[1];\n        cout << \"\\n\";\n    }\n\n    return 0;\n}"
}