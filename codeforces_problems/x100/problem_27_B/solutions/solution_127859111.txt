{
    "id": 127859111,
    "contestId": 27,
    "creationTimeSeconds": 1630774050,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 27,
        "index": "B",
        "name": "Tournament",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "bitmasks",
            "brute force",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 27,
        "members": [
            {
                "handle": "dark_knight_786"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284130800
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 342,
    "memoryConsumedBytes": 23859200,
    "source": "\r\nimport java.io.DataInputStream;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class Tournament {\r\n    private static int solve(int n, int k) {\r\n        return 0;\r\n    }\r\n\r\n    public static void main(String[] args)\r\n            throws IOException {\r\n        Scanner s = new Scanner();\r\n        int t = 1;\r\n        int x = s.nextInt();\r\n        t = (x * (x - 1)) / 2;\r\n        t--;\r\n\r\n        StringBuilder ans = new StringBuilder();\r\n        HashMap<Integer, Integer> winnerFreq = new HashMap<>();\r\n        HashMap<Integer, Integer> loserFreq = new HashMap<>();\r\n        HashMap<Integer, Integer> total = new HashMap<>();\r\n     \r\n        int count = 0;\r\n        while (t-- > 0) {\r\n            int n = s.nextInt();\r\n            int m = s.nextInt();\r\n            winnerFreq.put(n, winnerFreq.getOrDefault(n, 0) + 1);\r\n            loserFreq.put(m, loserFreq.getOrDefault(m, 0) + 1);\r\n            total.put(n, total.getOrDefault(n, 0) + 1);\r\n            total.put(m, total.getOrDefault(m, 0) + 1);\r\n        }\r\n        int a[] = new int[2];\r\n        int c = 0;\r\n        for (Map.Entry<Integer, Integer> entry : total.entrySet()) {\r\n            if (entry.getValue() == x - 2) {\r\n                a[c++] = entry.getKey();\r\n            }\r\n        }\r\n        int w = winnerFreq.getOrDefault(a[0],0);\r\n        int l = winnerFreq.getOrDefault(a[1],0);\r\n        if (w > l)\r\n            ans.append(a[0]).append(\" \").append(a[1]).append(\"\\n\");\r\n        else\r\n            ans.append(a[1]).append(\" \").append(a[0]).append(\"\\n\");\r\n        System.out.println(ans);\r\n        winnerFreq.clear();\r\n        loserFreq.clear();\r\n        total.clear();\r\n    }\r\n\r\n    static class Scanner {\r\n        final private int BUFFER_SIZE = 1 << 16;\r\n        private DataInputStream din;\r\n        private byte[] buffer;\r\n        private int bufferPointer, bytesRead;\r\n\r\n        public Scanner() {\r\n            din = new DataInputStream(System.in);\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        public Scanner(String file_name) throws IOException {\r\n            din = new DataInputStream(\r\n                    new FileInputStream(file_name));\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        public String readLine() throws IOException {\r\n            byte[] buf = new byte[64]; // line length\r\n            int cnt = 0, c;\r\n            while ((c = read()) != -1) {\r\n                if (c == '\\n') {\r\n                    if (cnt != 0) {\r\n                        break;\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n                buf[cnt++] = (byte) c;\r\n            }\r\n            return new String(buf, 0, cnt);\r\n        }\r\n\r\n        public int nextInt() throws IOException {\r\n            int ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ') {\r\n                c = read();\r\n            }\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            long ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public double nextDouble() throws IOException {\r\n            double ret = 0, div = 1;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n\r\n            if (c == '.') {\r\n                while ((c = read()) >= '0' && c <= '9') {\r\n                    ret += (c - '0') / (div *= 10);\r\n                }\r\n            }\r\n\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        private void fillBuffer() throws IOException {\r\n            bytesRead = din.read(buffer, bufferPointer = 0,\r\n                    BUFFER_SIZE);\r\n            if (bytesRead == -1)\r\n                buffer[0] = -1;\r\n        }\r\n\r\n        private byte read() throws IOException {\r\n            if (bufferPointer == bytesRead)\r\n                fillBuffer();\r\n            return buffer[bufferPointer++];\r\n        }\r\n\r\n        public void close() throws IOException {\r\n            if (din == null)\r\n                return;\r\n            din.close();\r\n        }\r\n    }\r\n\r\n    public static long norm(long a, long MOD) {\r\n        return ((a % MOD) + MOD) % MOD;\r\n    }\r\n\r\n    public static long msub(long a, long b, long MOD) {\r\n        return norm(norm(a, MOD) - norm(b, MOD), MOD);\r\n\r\n    }\r\n\r\n    public static long madd(long a, long b, long MOD) {\r\n        return norm(norm(a, MOD) + norm(b, MOD), MOD);\r\n\r\n    }\r\n\r\n    public static long mMul(long a, long b, long MOD) {\r\n        return norm(norm(a, MOD) * norm(b, MOD), MOD);\r\n\r\n\r\n    }\r\n\r\n    public static long mDiv(long a, long b, long MOD) {\r\n        return norm(norm(a, MOD) / norm(b, MOD), MOD);\r\n    }\r\n\r\n    public static String formattedArray(int a[]) {\r\n        StringBuilder res = new StringBuilder(\"\");\r\n        for (int e : a)\r\n            res.append(e).append(\" \");\r\n        return res.toString().trim();\r\n\r\n    }\r\n\r\n}\r\n"
}