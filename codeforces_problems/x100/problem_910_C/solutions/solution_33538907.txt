{
    "id": 33538907,
    "contestId": 910,
    "creationTimeSeconds": 1514035441,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "ammmaarr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 20992000,
    "source": "import java.util.Scanner;\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\npublic class minsum {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner num = new Scanner(System.in);\r\n\t\tScanner lines = new Scanner(System.in);\r\n\t\tint n = num.nextInt();\r\n\t\tString[] sarr = new String[n];\r\n\t\tfor(int i=0; i<n; i++){\r\n\t\t\tString s = lines.next();\r\n\t\t\tsarr[i] = s;\r\n\t\t}\r\n\t\tsarr = sort(sarr);\r\n\t\tchange(sarr,n);\r\n\t\t//System.out.print(replace(arr));\r\n\t\tlines.close();\r\n\t\tnum.close();\r\n\t\treturn;\r\n\r\n\t}\r\n\t\r\n\tpublic static String[] sort(String[] sarr){\r\n\t\tString tmp;\r\n\t\tfor(int i=1; i<sarr.length;i++){\r\n\t\t\tfor(int j=i;j>0;j--){\r\n\t\t\t\tif(sarr[j].compareTo(sarr[j-1]) < 0){\r\n\t\t\t\t\ttmp=sarr[j];\r\n\t\t\t\t\tsarr[j]=sarr[j-1];\r\n\t\t\t\t\tsarr[j-1]=tmp;\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn sarr;\r\n\t}\r\n\t\r\n\tpublic static void change(String[] array, int n){\r\n\t\tMap<Character, Integer> dict = new HashMap<Character, Integer>();\r\n\t\tint count=1;\r\n\t\tint taken=0;\r\n\t\tchar[][] arr = new char[n][6];\r\n\t\tfor (int i=0; i<array.length;i++){\r\n\t\t\tarr[i] = array[i].toCharArray();\r\n\t\t}\r\n\t\tfor (int x=0;x<arr.length;x++){\r\n\t\t\tchar ch = arr[x][0];\r\n\t\t\tif(dict.get(ch) == null){\r\n\t\t\t\tdict.put(ch, count);  \r\n\t\t\t\tcount++;\r\n\t\t\t\tSystem.out.printf(\"%c is not in dict yet\\n\",arr[x][0]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i=0;i<arr.length;i++){\r\n\t\t\tfor (int j=1;j<arr[i].length;j++){\r\n\t\t\t\tchar boo = arr[i][j];\r\n\t\t\t\tif(dict.get(boo) == null){\r\n\t\t\t\t\tif(taken == 0){\r\n\t\t\t\t\t\tdict.put(boo, 0);\r\n\t\t\t\t\t\ttaken=1;\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tdict.put(boo, count);\r\n\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//restore(dict,arr);\r\n\t\tSystem.out.print(restore(dict, arr));\r\n\t\t\tSystem.out.print(dict.toString());\r\n\t\t\tSystem.out.print(\"\\n\");\r\n\t}\r\n\t\r\n\tpublic static int restore(Map dict, char[][] arr){\r\n\t\tint[] res = new int[arr.length];\r\n\t\tfor (int i=0;i<arr.length;i++){\r\n\t\t\tfor (int j=0;j<arr[i].length;j++){\r\n\t\t\t\tres[i] = (res[i]*10) + (int)(dict.get(arr[i][j]));\r\n\t\t\t}\r\n\t\t}\r\n\t\tint fin = 0;\r\n\t\tfor(int x=0;x<arr.length;x++){\r\n\t\t\tfin += res[x];\r\n\t\t}\r\n\t\treturn fin;\r\n\t}\r\n}"
}