{
    "id": 33510569,
    "contestId": 910,
    "creationTimeSeconds": 1513952741,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "yashk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 20684800,
    "source": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.util.Arrays;\nimport java.io.BufferedWriter;\nimport java.util.Set;\nimport java.util.InputMismatchException;\nimport java.io.IOException;\nimport java.util.HashSet;\nimport java.io.Writer;\nimport java.io.OutputStreamWriter;\nimport java.util.Comparator;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n *\n * @author yashk\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        InputReader in = new InputReader(inputStream);\n        OutputWriter out = new OutputWriter(outputStream);\n        TaskC solver = new TaskC();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskC {\n        public void solve(int testNumber, InputReader in, OutputWriter out) {\n            int n = in.nextInt();\n            char[][] strings = new char[n][6];\n\n            Set<Character> msb = new HashSet<>();\n\n            Tuple[] tuples = new Tuple[10];\n            for (int i = 0; i < 10; i++) {\n                tuples[i] = new Tuple((char) (i + 'a'));\n            }\n\n            for (int i = 0; i < n; i++) {\n                String s = in.nextString();\n                msb.add(s.charAt(0));\n\n                int k = 5;\n                for (int j = s.length() - 1; j >= 0; j--) {\n                    strings[i][k] = s.charAt(j);\n                    tuples[s.charAt(j) - 'a'].x = s.charAt(j);\n                    tuples[s.charAt(j) - 'a'].f[k]++;\n                    k--;\n                }\n                for (int j = 0; j <= k; j++) {\n                    strings[i][j] = ' ';\n                }\n            }\n\n        /*for (int i = 0; i < 10; i++) {\n            out.println(tuples[i]);\n            }\n        */\n\n            Arrays.sort(tuples, new Comparator<Tuple>() {\n\n                public int compare(Tuple o1, Tuple o2) {\n                    int i = 0;\n                    for (; i < 6; i++) {\n                        if (o1.f[i] != o2.f[i]) {\n                            break;\n                        }\n                    }\n                    if (i == 6) {\n                        return Integer.compare(o1.f[0], o2.f[0]);\n                    } else {\n                        return Integer.compare(o1.f[i], o2.f[i]);\n                    }\n                }\n            });\n\n        /*out.println(\"\\nAfter sorting\");\n        for (int i = 0; i < 10; i++) {\n            out.println(tuples[i]);\n        }*/\n\n            int[] map = new int[10];\n            Arrays.fill(map, -1);\n            boolean isZeroAssigned = false;\n            int num = 1;\n\n            for (int i = 9; i >= 0; i--) {\n                char c = tuples[i].x;\n                int idx = c - 'a';\n                if (!isZeroAssigned && !msb.contains(c)) {\n                    isZeroAssigned = true;\n                    map[idx] = 0;\n                } else {\n                    map[idx] = num++;\n                }\n            }\n\n        /*tuples.sort(new Comparator<Tuple>() {\n            @Override\n            public int compare(Tuple o1, Tuple o2) {\n                return 0;\n            }\n        });*/\n\n        /*int[] map = new int[10];\n        Arrays.fill(map, -1);\n        boolean isZeroAssigned = false;\n        int num = 1;\n\n        for (int i = 0; i < 6; i++) {\n            Map<Character, Integer> freq = new HashMap<>();\n            for (int j = 0; j < n; j++) {\n                char c = strings[j][i];\n                if (c >= 'a' && c <= 'j' && map[c - 'a'] == -1) {\n                    freq.put(c, freq.getOrDefault(c, 0) + 1);\n                }\n            }\n\n            List<Map.Entry<Character, Integer>> list = new ArrayList<>(freq.entrySet());\n            list.sort(new Comparator<Map.Entry<Character, Integer>>() {\n                @Override\n                public int compare(Map.Entry<Character, Integer> o1, Map.Entry<Character, Integer> o2) {\n                    return Integer.compare(o2.getValue(), o1.getValue());\n                }\n            });\n\n            for (Map.Entry<Character, Integer> e : list) {\n                if (!isZeroAssigned && !msb.contains(e.getKey())) {\n                    isZeroAssigned = true;\n                    map[e.getKey() - 'a'] = 0;\n                } else {\n                    map[e.getKey() - 'a'] = num++;\n                }\n            }\n            if (num == 10 && isZeroAssigned) {\n                break;\n            }\n        }*/\n\n            long sum = 0L;\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < 6; j++) {\n                    if (strings[i][j] == ' ') {\n                        strings[i][j] = '0';\n                    } else {\n                        int idx = strings[i][j] - 'a';\n                        strings[i][j] = (char) ('0' + map[idx]);\n                    }\n                }\n                sum += Long.parseLong(String.valueOf(strings[i]));\n            }\n            out.println(sum);\n        }\n\n    }\n\n    static class OutputWriter {\n        private final PrintWriter writer;\n\n        public OutputWriter(OutputStream outputStream) {\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n        }\n\n        public OutputWriter(Writer writer) {\n            this.writer = new PrintWriter(writer);\n        }\n\n        public void close() {\n            writer.close();\n        }\n\n        public void println(long i) {\n            writer.println(i);\n        }\n\n    }\n\n    static class Tuple {\n        char x;\n        int[] f;\n\n        public Tuple(char x) {\n            this.x = x;\n            f = new int[6];\n        }\n\n\n        public String toString() {\n            return \"Tuple{\" +\n                    \"x=\" + x +\n                    \", f=\" + Arrays.toString(f) +\n                    '}';\n        }\n\n    }\n\n    static class InputReader {\n        private InputStream stream;\n        private byte[] buf = new byte[1024];\n        private int curChar;\n        private int numChars;\n        private InputReader.SpaceCharFilter filter;\n\n        public InputReader(InputStream stream) {\n            this.stream = stream;\n        }\n\n        public int read() {\n            if (numChars == -1) {\n                throw new InputMismatchException();\n            }\n            if (curChar >= numChars) {\n                curChar = 0;\n                try {\n                    numChars = stream.read(buf);\n                } catch (IOException e) {\n                    throw new InputMismatchException();\n                }\n                if (numChars <= 0) {\n                    return -1;\n                }\n            }\n            return buf[curChar++];\n        }\n\n        public int nextInt() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            int sgn = 1;\n            if (c == '-') {\n                sgn = -1;\n                c = read();\n            }\n            int res = 0;\n            do {\n                if (c < '0' || c > '9') {\n                    throw new InputMismatchException();\n                }\n                res *= 10;\n                res += c - '0';\n                c = read();\n            } while (!isSpaceChar(c));\n            return res * sgn;\n        }\n\n        public String nextString() {\n            int c = read();\n            while (isSpaceChar(c)) {\n                c = read();\n            }\n            StringBuilder res = new StringBuilder();\n            do {\n                if (Character.isValidCodePoint(c)) {\n                    res.appendCodePoint(c);\n                }\n                c = read();\n            } while (!isSpaceChar(c));\n            return res.toString();\n        }\n\n        public boolean isSpaceChar(int c) {\n            if (filter != null) {\n                return filter.isSpaceChar(c);\n            }\n            return isWhitespace(c);\n        }\n\n        public static boolean isWhitespace(int c) {\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n        }\n\n        public interface SpaceCharFilter {\n            public boolean isSpaceChar(int ch);\n\n        }\n\n    }\n}\n\n"
}