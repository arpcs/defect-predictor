{
    "id": 33522459,
    "contestId": 910,
    "creationTimeSeconds": 1513989259,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "tkandi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2150400,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1010, SIZE = 10;\r\n\r\ninline void Cmax(int &a, int b) {\r\n    if (a < b) a = b;\r\n    return;\r\n}\r\n\r\nint n, Maxlen;\r\nint c[SIZE][N], clen[SIZE];\r\nchar s[N];\r\nint a[SIZE];\r\nbool v[SIZE];\r\n\r\nbool Cmp(int a, int b) {\r\n    if (clen[a] < clen[b]) return 1;\r\n    if (clen[a] > clen[b]) return 0;\r\n    for (int i = clen[a]; ~i; --i) {\r\n        if (c[a][i] < c[b][i]) return 1;\r\n        if (c[a][i] > c[b][i]) return 0;\r\n    }\r\n    return 0;\r\n}\r\n\r\nint main() {\r\n    memset(c, 0, sizeof(c));\r\n    memset(clen, 0, sizeof(clen));\r\n    memset(v, 1, sizeof(v));\r\n    scanf(\"%d\", &n);\r\n    for (int i = 1; i <= n; ++i) {\r\n        scanf(\"%s\", s + 1);\r\n        int len = strlen(s + 1);\r\n        v[s[1] - 97] = 0;\r\n        for (int j = 1; j <= len; ++j) {\r\n            ++c[s[j] - 97][len - j];\r\n            Cmax(clen[s[j] - 97], len - j);\r\n        }\r\n    }\r\n    for (int i = 0; i < SIZE; ++i) {\r\n        for (int j = 0; j < clen[i]; ++j) {\r\n            c[i][j + 1] += c[i][j] / SIZE;\r\n            c[i][j] %= SIZE;\r\n        }\r\n        while (c[i][clen[i] + 1]) {\r\n            ++clen[i];\r\n            c[i][clen[i] + 1] += c[i][clen[i]] / SIZE;\r\n            c[i][clen[i]] %= SIZE;\r\n        }\r\n    }\r\n    int Max = -1;\r\n    for (int i = 0; i < SIZE; ++i)\r\n        if (v[i]) {\r\n            if (!~Max) Max = i;\r\n            else if (Cmp(Max, i)) Max = i;\r\n        }\r\n    for (int i = 0; i < Max; ++i)\r\n        a[i] = i;\r\n    for (int i = Max + 1; i < SIZE; ++i)\r\n        a[i - 1] = i;\r\n    sort(a, a + SIZE - 1, Cmp);\r\n    int res = 0;\r\n    for (int i = 0; i < SIZE; ++i)\r\n        for (int j = 0, base = 1; j <= clen[a[i]]; ++j, base = base * SIZE)\r\n            res += base * c[a[i]][j] * (SIZE - 1 - i);\r\n    printf(\"%d\\n\", res);\r\n    return 0;\r\n}"
}