{
    "id": 33712494,
    "contestId": 910,
    "creationTimeSeconds": 1514469589,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "batman123456789"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\nimport java.util.*;\nimport java.math.*;\n\npublic class A {\n    public static void main(String args[]) {\n        try {\n            InputReader in = new InputReader(System.in);\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\n            int n = in.readInt();\n            int m = in.readInt();\n            int cur = 0;\n            boolean ans = false;\n            for (int i = 0; i < n; i++) {\n                int a = in.readInt();\n                int b = in.readInt();\n                int next = a + b;\n                if (i == 0 && a != 0) {\n                    ans = false;\n                    break;\n                }\n                if (cur >= a) {\n                    cur = next;\n                }\n                if (cur >= m) {\n                    ans = true;\n                }\n            }\n            if (ans) {\n                out.write(\"YES\");\n            }\n            else {\n                out.write(\"NO\");\n            }\n            out.newLine();\n            out.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\nclass InputReader {\n    private boolean finished = false;\n\n    private InputStream stream;\n    private byte[] buf = new byte[1024];\n    private int curChar;\n    private int numChars;\n\n    public InputReader(InputStream stream) {\n        this.stream = stream;\n    }\n\n    public int read() {\n        if (numChars == -1)\n            throw new InputMismatchException();\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buf);\n            } catch (IOException e) {\n                throw new InputMismatchException();\n            }\n            if (numChars <= 0)\n                return -1;\n        }\n        return buf[curChar++];\n    }\n\n    public int peek() {\n        if (numChars == -1)\n            return -1;\n        if (curChar >= numChars) {\n            curChar = 0;\n            try {\n                numChars = stream.read(buf);\n            } catch (IOException e) {\n                return -1;\n            }\n            if (numChars <= 0)\n                return -1;\n        }\n        return buf[curChar];\n    }\n\n    public int readInt() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        int sgn = 1;\n        if (c == '-') {\n            sgn = -1;\n            c = read();\n        }\n        int res = 0;\n        do {\n            if (c < '0' || c > '9')\n                throw new InputMismatchException();\n            res *= 10;\n            res += c - '0';\n            c = read();\n        } while (!isSpaceChar(c));\n        return res * sgn;\n    }\n\n    public long readLong() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        int sgn = 1;\n        if (c == '-') {\n            sgn = -1;\n            c = read();\n        }\n        long res = 0;\n        do {\n            if (c < '0' || c > '9')\n                throw new InputMismatchException();\n            res *= 10;\n            res += c - '0';\n            c = read();\n        } while (!isSpaceChar(c));\n        return res * sgn;\n    }\n\n    public String readString() {\n        int length = readInt();\n        if (length < 0)\n            return null;\n        byte[] bytes = new byte[length];\n        for (int i = 0; i < length; i++)\n            bytes[i] = (byte) read();\n        try {\n            return new String(bytes, \"UTF-8\");\n        } catch (UnsupportedEncodingException e) {\n            return new String(bytes);\n        }\n    }\n\n    public static boolean isSpaceChar(int c) {\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\n    }\n\n    private String readLine0() {\n        StringBuffer buf = new StringBuffer();\n        int c = read();\n        while (c != '\\n' && c != -1) {\n            if (c != '\\r')\n                buf.appendCodePoint(c);\n            c = read();\n        }\n        return buf.toString();\n    }\n\n    public String readLine() {\n        String s = readLine0();\n        while (s.trim().length() == 0)\n            s = readLine0();\n        return s;\n    }\n\n    public String readLine(boolean ignoreEmptyLines) {\n        if (ignoreEmptyLines)\n            return readLine();\n        else\n            return readLine0();\n    }\n\n    public BigInteger readBigInteger() {\n        try {\n            return new BigInteger(readString());\n        } catch (NumberFormatException e) {\n            throw new InputMismatchException();\n        }\n    }\n\n    public char readCharacter() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        return (char) c;\n    }\n\n    public double readDouble() {\n        int c = read();\n        while (isSpaceChar(c))\n            c = read();\n        int sgn = 1;\n        if (c == '-') {\n            sgn = -1;\n            c = read();\n        }\n        double res = 0;\n        while (!isSpaceChar(c) && c != '.') {\n            if (c == 'e' || c == 'E')\n                return res * Math.pow(10, readInt());\n            if (c < '0' || c > '9')\n                throw new InputMismatchException();\n            res *= 10;\n            res += c - '0';\n            c = read();\n        }\n        if (c == '.') {\n            c = read();\n            double m = 1;\n            while (!isSpaceChar(c)) {\n                if (c == 'e' || c == 'E')\n                    return res * Math.pow(10, readInt());\n                if (c < '0' || c > '9')\n                    throw new InputMismatchException();\n                m /= 10;\n                res += (c - '0') * m;\n                c = read();\n            }\n        }\n        return res * sgn;\n    }\n\n    public boolean isExhausted() {\n        int value;\n        while (isSpaceChar(value = peek()) && value != -1)\n            read();\n        return value == -1;\n    }\n\n    public String next() {\n        return readString();\n    }\n\n    public boolean readBoolean() {\n        return readInt() == 1;\n    }\n}\n\n"
}