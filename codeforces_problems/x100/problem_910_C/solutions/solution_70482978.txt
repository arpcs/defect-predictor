{
    "id": 70482978,
    "contestId": 910,
    "creationTimeSeconds": 1581057261,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 6451200,
    "source": "#include<bits/stdc++.h>\n\nusing namespace std;\n#define ll long long\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define per(i,a,b) for(int i=a;i>=b;i--)\nconst int MAXN=2e5+5;\nconst int MOD=1e9+7;\nbool vis[30];\nint n,mark[MAXN];\nchar s[MAXN][20];\nstruct node{\n    int val,pos;\n}a[MAXN];\nbool cmp(node a,node b){\n    return a.val>b.val;\n}\nint main(){\n    memset(vis,0,sizeof(vis));\n    scanf(\"%d\",&n);\n    rep(i,0,9)a[i].pos=i,a[i].val=0;\n    rep(i,1,n){\n        scanf(\"%s\",s[i]);\n        int len=strlen(s[i]);\n        if(len!=1){\n            vis[s[i][0]-'a']=1;\n        }\n        int p=1;\n        per(j,len-1,0){\n            a[s[i][j]-'a'].val+=p;\n            p=p*10;\n        }\n    }\n    sort(a,a+10,cmp);\n    int l=0,r=1;\n    rep(i,0,9){\n        if(vis[a[i].pos])mark[a[i].pos]=r++;\n        else{\n            if(!l)mark[a[i].pos]=0,l=1;\n            else mark[a[i].pos]=r++;\n        }\n    }\n    int ans=0;\n    rep(i,1,n){\n        int len=strlen(s[i]);\n        int p=0;\n        rep(j,0,len-1){\n            p=p*10+mark[s[i][j]-'a'];\n        }\n        ans+=p;\n    }\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n\n\t  \t  \t \t\t\t       \t\t \t\t \t \t\t \t\t"
}