{
    "id": 38467365,
    "contestId": 910,
    "creationTimeSeconds": 1526841584,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "alibaba"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 107,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 0,
    "source": "\r\nimport java.io.BufferedReader;\r\nimport java.io.File;\r\nimport java.io.FileInputStream;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.math.BigInteger;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.BitSet;\r\nimport java.util.Calendar;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\nimport java.util.LinkedList;\r\nimport java.util.PriorityQueue;\r\nimport java.util.SortedSet;\r\nimport java.util.Stack;\r\nimport java.util.StringTokenizer;\r\nimport java.util.TreeMap;\r\nimport java.util.TreeSet;\r\n\r\n/**\r\n * #\r\n * @author pttrung\r\n */\r\npublic class C_Testing_14 {\r\n\r\n    public static long MOD = 1000000007;\r\n\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        // PrintWriter out = new PrintWriter(new FileOutputStream(new File(\r\n        // \"output.txt\")));\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        Scanner in = new Scanner();\r\n        int n = in.nextInt();\r\n        String[] data = new String[n];\r\n        boolean[] check = new boolean[10];\r\n        int[] total = new int[10];\r\n        for (int i = 0; i < n; i++) {\r\n            data[i] = in.next();\r\n            int index = data[i].charAt(0) - 'a';\r\n            check[index] = true;\r\n            int st = 1;\r\n            for (int j = data[i].length() - 1; j >= 0; j--) {\r\n                int v = data[i].charAt(j) - 'a';\r\n                total[v] += st;\r\n                st *= 10;\r\n            }\r\n        }\r\n        int[] mark = new int[10];\r\n        Arrays.fill(mark, -1);\r\n        int result = 0;\r\n        for (int i = 0; i < 10; i++) {\r\n            if (i == 0) {\r\n                int max = -1;\r\n                for (int j = 0; j < 10; j++) {\r\n                    if (!check[j]) {\r\n                        if (max == -1 || total[max] < total[j]) {\r\n                            max = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (max != -1) {\r\n                    mark[max] = i;\r\n                }\r\n            } else {\r\n                int max = -1;\r\n                for (int j = 0; j < 10; j++) {\r\n                    if (mark[j] == -1) {\r\n                        if (max == -1 || total[max] < total[j]) {\r\n                            max = j;\r\n                        }\r\n                    }\r\n                }\r\n                if (max != -1) {\r\n                    result += total[max] * i;\r\n                    mark[max] = i;\r\n                }\r\n            }\r\n        }\r\n        out.println(result);\r\n\r\n        out.close();\r\n    }\r\n\r\n    public static int[] KMP(String val) {\r\n        int i = 0;\r\n        int j = -1;\r\n        int[] result = new int[val.length() + 1];\r\n        result[0] = -1;\r\n        while (i < val.length()) {\r\n            while (j >= 0 && val.charAt(j) != val.charAt(i)) {\r\n                j = result[j];\r\n            }\r\n            j++;\r\n            i++;\r\n            result[i] = j;\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n    public static boolean nextPer(int[] data) {\r\n        int i = data.length - 1;\r\n        while (i > 0 && data[i] < data[i - 1]) {\r\n            i--;\r\n        }\r\n        if (i == 0) {\r\n            return false;\r\n        }\r\n        int j = data.length - 1;\r\n        while (data[j] < data[i - 1]) {\r\n            j--;\r\n        }\r\n        int temp = data[i - 1];\r\n        data[i - 1] = data[j];\r\n        data[j] = temp;\r\n        Arrays.sort(data, i, data.length);\r\n        return true;\r\n    }\r\n\r\n    public static int digit(long n) {\r\n        int result = 0;\r\n        while (n > 0) {\r\n            n /= 10;\r\n            result++;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static double dist(long a, long b, long x, long y) {\r\n        double val = (b - a) * (b - a) + (x - y) * (x - y);\r\n        val = Math.sqrt(val);\r\n        double other = x * x + a * a;\r\n        other = Math.sqrt(other);\r\n        return val + other;\r\n\r\n    }\r\n\r\n    public static class Point implements Comparable<Point> {\r\n\r\n        int x, y;\r\n\r\n        public Point(int start, int end) {\r\n            this.x = start;\r\n            this.y = end;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            int hash = 5;\r\n            hash = 47 * hash + this.x;\r\n            hash = 47 * hash + this.y;\r\n            return hash;\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object obj) {\r\n            if (obj == null) {\r\n                return false;\r\n            }\r\n            if (getClass() != obj.getClass()) {\r\n                return false;\r\n            }\r\n            final Point other = (Point) obj;\r\n            if (this.x != other.x) {\r\n                return false;\r\n            }\r\n            if (this.y != other.y) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(Point o) {\r\n            return Integer.compare(x, o.x);\r\n        }\r\n    }\r\n\r\n    public static class FT {\r\n\r\n        long[] data;\r\n\r\n        FT(int n) {\r\n            data = new long[n];\r\n        }\r\n\r\n        public void update(int index, long value) {\r\n            while (index < data.length) {\r\n                data[index] += value;\r\n                index += (index & (-index));\r\n            }\r\n        }\r\n\r\n        public long get(int index) {\r\n            long result = 0;\r\n            while (index > 0) {\r\n                result += data[index];\r\n                index -= (index & (-index));\r\n            }\r\n            return result;\r\n\r\n        }\r\n    }\r\n\r\n    public static long gcd(long a, long b) {\r\n        if (b == 0) {\r\n            return a;\r\n        }\r\n        return gcd(b, a % b);\r\n    }\r\n\r\n    public static long pow(long a, long b, long MOD) {\r\n        if (b == 0) {\r\n            return 1;\r\n        }\r\n        if (b == 1) {\r\n            return a;\r\n        }\r\n        long val = pow(a, b / 2, MOD);\r\n        if (b % 2 == 0) {\r\n            return val * val % MOD;\r\n        } else {\r\n            return val * (val * a % MOD) % MOD;\r\n\r\n        }\r\n    }\r\n\r\n    static class Scanner {\r\n\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public Scanner() throws FileNotFoundException {\r\n            // System.setOut(new PrintStream(new BufferedOutputStream(System.out), true));\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n            //  br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(\"input.txt\"))));\r\n        }\r\n\r\n        public String next() {\r\n\r\n            while (st == null || !st.hasMoreTokens()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (Exception e) {\r\n                    throw new RuntimeException();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        public long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        public String nextLine() {\r\n            st = null;\r\n            try {\r\n                return br.readLine();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException();\r\n            }\r\n        }\r\n\r\n        public boolean endLine() {\r\n            try {\r\n                String next = br.readLine();\r\n                while (next != null && next.trim().isEmpty()) {\r\n                    next = br.readLine();\r\n                }\r\n                if (next == null) {\r\n                    return true;\r\n                }\r\n                st = new StringTokenizer(next);\r\n                return st.hasMoreTokens();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException();\r\n            }\r\n        }\r\n    }\r\n}\r\n",
    "suggested_categories": [
        "java",
        "algorithm",
        "data structures",
        "file handling",
        "error handling",
        "input/output",
        "sorting",
        "string manipulation",
        "mathematics",
        "bit manipulation",
        "dynamic programming",
        "modular arithmetic",
        "searching",
        "data encoding",
        "data decoding",
        "code optimization",
        "code comments",
        "code readability",
        "code efficiency",
        "code style"
    ]
}