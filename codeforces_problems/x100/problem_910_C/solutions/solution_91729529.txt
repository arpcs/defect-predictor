{
    "id": 91729529,
    "contestId": 910,
    "creationTimeSeconds": 1599145615,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "coder_sounak"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 107,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 10035200,
    "source": "#Code by Sounak, IIESTS\r\n#------------------------------warmup----------------------------\r\n\r\nimport os\r\nimport sys\r\nimport math\r\nfrom io import BytesIO, IOBase\r\nfrom fractions import Fraction\r\nimport collections\r\nfrom itertools import permutations\r\nimport threading\r\nfrom collections import defaultdict\r\n\r\n\r\nBUFSIZE = 8192\r\n \r\n \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n    \r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n     \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n \r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n  \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n#-------------------game starts now-----------------------------------------------------\r\nn = int(input())\r\nd = [0] * (ord('j') + 1)\r\nfr = [0] * (ord('j') + 1)\r\nans = 0\r\nfor i in range(n):\r\n    s = input()\r\n    fr[ord(s[0])] = 1\r\n    for j in range(len(s)):\r\n        d[ord(s[j])] += 10 ** (len(s) - j - 1)\r\na = [(d[i], i) for i in range(len(d))]\r\na.sort(reverse=True)\r\ncr, f = 1, 1\r\nfor c, i in a:\r\n    if f and not fr[i]:\r\n        f = 0\r\n    else:\r\n        ans += cr * c\r\n        cr += 1\r\nprint(ans)"
}