{
    "id": 33539035,
    "contestId": 910,
    "creationTimeSeconds": 1514035798,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "SergiiKo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 20992000,
    "source": "import javafx.util.Pair;\n\nimport java.io.BufferedInputStream;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Scanner;\nimport java.util.Set;\nimport java.util.function.Function;\n\npublic class Solution {\n    public static void main(String[] instructions) {\n        final Scanner scanner = new Scanner(new BufferedInputStream(System.in));\n        int n = scanner.nextInt();\n        final Map<Integer, Map<Character, Integer>> parsedInput = new HashMap<>();\n        final Set<Character> badForZero = new HashSet<>();\n        scanner.nextLine();\n        for (int i = 0; i < n; i++) {\n            final String input = scanner.nextLine();\n            System.out.println(input);\n            for (int p = 0, pos = input.length() - 1; p < input.length(); p++, pos--) {\n                Map<Character, Integer> pMap = parsedInput.computeIfAbsent(pos, new Function<Integer, Map<Character, Integer>>() {\n                    @Override\n                    public Map<Character, Integer> apply(Integer integer) {\n                        return new HashMap<>();\n                    }\n                });\n                Integer cnt = pMap.get(input.charAt(p));\n                if (cnt == null) {\n                    cnt = 0;\n                }\n                pMap.put(input.charAt(p), cnt + 1);\n            }\n            badForZero.add(input.charAt(0));\n        }\n        int next = 1;\n        boolean zeroUsed = false;\n        final Map<Character, Integer> ans = new HashMap<>();\n        long answer = 0;\n        for (int i = 5, mp = 100000; i >= 0; i--, mp /= 10) {\n            final Map<Character, Integer> pMap = parsedInput.get(i);\n            if (pMap == null)\n                continue;\n            final List<Pair<Integer, Character>> counted = new ArrayList<>();\n            for (final Map.Entry entry : pMap.entrySet()) {\n                counted.add(new Pair<>((Integer) entry.getValue(), (Character) entry.getKey()));\n            }\n            counted.sort(new Comparator<Pair<Integer, Character>>() {\n                @Override\n                public int compare(Pair<Integer, Character> o1, Pair<Integer, Character> o2) {\n                    return Integer.compare(o2.getKey(), o1.getKey());\n                }\n            });\n            for (final Pair<Integer, Character> p : counted) {\n                if (!ans.containsKey(p.getValue())) {\n                    if (!badForZero.contains(p.getValue()) && !zeroUsed) {\n                        ans.put(p.getValue(), 0);\n                        zeroUsed = true;\n                    } else {\n                        ans.put(p.getValue(), next++);\n                    }\n                }\n                answer += ans.get(p.getValue()) * p.getKey() * mp;\n            }\n        }\n        System.out.println(answer);\n    }\n}\n"
}