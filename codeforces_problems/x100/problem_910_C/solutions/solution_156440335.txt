{
    "id": 156440335,
    "contestId": 910,
    "creationTimeSeconds": 1652108396,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "agneus"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "{\r\n    int n;\r\n    vector<string> v;\r\n    cin >>  n;\r\n    for(int i = 0; i < n; i++){\r\n        string s;\r\n        cin >> s;\r\n        v.push_back(s);\r\n    }\r\n    \r\n    int max_index = 0;\r\n    \r\n    map<int,map<char,int>> m;\r\n    for(auto s : v){\r\n        int j = 0;\r\n        int n2 = s.size();\r\n        for(int i = n2 - 1; i >= 0; i--){\r\n            m[j][s[i]]++;\r\n            aru.insert(s[i]);\r\n            max_index = max(j,max_index);\r\n            j++;\r\n            if(i == 0) first_characters.push_back({j,s[i]});\r\n        }\r\n    }\r\n    \r\n    sort(first_characters.begin(),first_characters.end());\r\n    reverse(first_characters.begin(),first_characters.end());\r\n    //for(auto i : first_characters) cout << i.first << \" \" << i.second << endl;\r\n    // test m (done)\r\n    /*\r\n    for(auto i : m){\r\n        cout << \"test\" << i.first << endl;\r\n        for(auto j : i.second){\r\n            cout << j.first << \" x \" << j.second << endl;\r\n        }\r\n    }\r\n    */\r\n    \r\n    \r\n    \r\n    \r\n    int n2 = aru.size();\r\n    int j = n - 1;\r\n    int i = 0;\r\n    set<int> been_there_i;\r\n    int this_index = 1;\r\n    while(!m[max_index].size() && max_index > 0) max_index--;\r\n    for(i = 0; i < first_characters.size(); i++){\r\n        auto firChar = first_characters[i];\r\n        char largest = firChar.second;\r\n        values[largest] = this_index;\r\n        if(been_there_i.find(largest) != been_there_i.end()) continue;\r\n        chosen.insert(largest);\r\n        m[max_index].erase(largest);\r\n        been_there_i.insert(this_index);\r\n        this_index++;\r\n    }\r\n    \r\n    // test values 1\r\n    \r\n    /*\r\n    for(auto i: values){\r\n        cout << i.first << \" \" << i.second << endl;\r\n    }\r\n    cout << endl;\r\n    */\r\n    \r\n    \r\n    max_index--;\r\n    \r\n    for(i = 0; i < n2; i++){\r\n        if(been_there_i.find(i) != been_there_i.end()) continue;\r\n        while(!m[max_index].size() && max_index > 0) max_index--;\r\n        char largest = findLargest(m[max_index]);\r\n        values[largest] = i;\r\n        chosen.insert(largest);\r\n        m[max_index].erase(largest);\r\n    }\r\n    \r\n    // test values 2\r\n    \r\n    /*\r\n    for(auto i: values){\r\n        cout << i.first << \" \" << i.second << endl;\r\n    }\r\n    */\r\n    \r\n    \r\n    \r\n    \r\n    // deal with final output\r\n    \r\n    \r\n    for(auto &s: v){\r\n        for(int i = 0; i < s.size(); i++){\r\n            s[i] = '0' + values[s[i]];\r\n            //cout << values[s[i]] << endl;\r\n        }\r\n    }\r\n    int sum = 0;\r\n    for(auto s: v){\r\n        //cout << s << endl;\r\n        sum += stoi(s);\r\n    }\r\n    cout << sum;\r\n    \r\n    \r\n}"
}