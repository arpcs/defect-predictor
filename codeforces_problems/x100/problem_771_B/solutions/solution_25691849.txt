{
    "id": 25691849,
    "contestId": 771,
    "creationTimeSeconds": 1490104515,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 771,
        "index": "B",
        "name": "Bear and Different Names",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 771,
        "members": [
            {
                "handle": "tanvir_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489851300
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 20480000,
    "source": "package mypack;\r\n\r\nimport java.io.BufferedOutputStream;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Main {\r\n\t\r\n\tstatic class Graph\r\n\t{\r\n\t    private  int V;// No. of vertices\r\n\t    private int dfsVertices, dfsEdges; \r\n\t    \r\n\t    public int getDfsEdges() {\r\n\t\t\treturn dfsEdges;\r\n\t\t}\r\n\r\n\t\tpublic int getDfsVertices() {\r\n\t\t\treturn dfsVertices;\r\n\t\t}\r\n\r\n\t\tprivate ArrayList<Integer> adj[]; // Adjacency List\r\n\t \r\n\t    //Constructor\r\n\t    Graph(int v)\r\n\t    {\r\n\t        V = v;\r\n\t        adj = new ArrayList[v];\r\n\t        for (int i=0; i<v; ++i)\r\n\t            adj[i] = new ArrayList();\r\n\t    }\r\n\t \r\n\t    // Function to add an edge into the graph\r\n\t    void addEdge(int v,int w) \r\n\t    { \r\n\t    \tadj[v].add(w); \r\n\t    \tadj[w].add(v);\r\n\t    }\r\n\t    public void reSet()\r\n\t    {\r\n\t    \tdfsVertices =  dfsEdges = 0; \r\n\t    }\r\n\t    \r\n\t    public void dfs(boolean[] visited, int u)\r\n\t    {\r\n\t    \tvisited[u] = true;\r\n\t    \tdfsVertices ++;///total vertices in the connected component\r\n\t    \tdfsEdges += adj[u].size();//total edges in the connected component\r\n\t    \tfor(int i = 0; i<adj[u].size(); i++)\r\n\t    \t{\r\n\t    \t\tif(visited[adj[u].get(i)] == false)\r\n\t    \t\t{\r\n\t    \t\t\tdfs(visited,adj[u].get(i));\r\n\t    \t\t}\r\n\t    \t}\r\n\t    }\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t    MyScanner cin = new MyScanner();\r\n\t\tPrintWriter cout = new PrintWriter(new BufferedOutputStream(System.out));\r\n\t\tint v,e,x,y;\r\n\t\tv = cin.nextInt();e = cin.nextInt();\r\n\t\tv++;\r\n\t\tGraph g = new Graph(v);\r\n\t\tfor(int i= 0; i<e; i++)\r\n\t\t{\r\n\t\t\tx = cin.nextInt(); y = cin.nextInt();\r\n\t\t\tg.addEdge(x,y);\r\n\t\t}\r\n\t\tboolean[] visited = new boolean[v]; \r\n\t\tfor(int i = 0; i<v; i++)\r\n\t\t{\r\n\t\t\tif(visited[i] == false)\r\n\t\t\t{\r\n\t\t\t\tg.dfs(visited,i);\r\n\t\t\t}\r\n\t\t\tif(g.getDfsEdges() != (g.getDfsVertices()-1)*(g.getDfsVertices()))\r\n\t\t\t{\r\n\t\t\t\tcout.println(\"NO\");\r\n\t\t\t\tcout.close();\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\tg.reSet();\r\n\t\t}\r\n\t\tcout.println(\"YES\");\r\n\t\tcout.close();\r\n\t\t\r\n\t}\r\n\tstatic class MyScanner {\r\n\t      BufferedReader br;\r\n\t      StringTokenizer st;\r\n\t \r\n\t      public MyScanner() {\r\n\t         br = new BufferedReader(new InputStreamReader(System.in));\r\n\t      }\r\n\t \r\n\t      String next() {\r\n\t          while (st == null || !st.hasMoreElements()) {\r\n\t              try {\r\n\t                  st = new StringTokenizer(br.readLine());\r\n\t              } catch (IOException e) {\r\n\t                  e.printStackTrace();\r\n\t              }\r\n\t          }\r\n\t          return st.nextToken();\r\n\t      }\r\n\t \r\n\t      int nextInt() {\r\n\t          return Integer.parseInt(next());\r\n\t      }\r\n\t \r\n\t      long nextLong() {\r\n\t          return Long.parseLong(next());\r\n\t      }\r\n\t \r\n\t      double nextDouble() {\r\n\t          return Double.parseDouble(next());\r\n\t      }\r\n\t \r\n\t      String nextLine(){\r\n\t          String str = \"\";\r\n\t\t  try {\r\n\t\t     str = br.readLine();\r\n\t\t  } catch (IOException e) {\r\n\t\t     e.printStackTrace();\r\n\t\t  }\r\n\t\t  return str;\r\n\t      }\r\n\r\n\t   }\r\n}\r\n"
}