{
    "id": 26763433,
    "contestId": 771,
    "creationTimeSeconds": 1493540263,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 771,
        "index": "B",
        "name": "Bear and Different Names",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 771,
        "members": [
            {
                "handle": "anuj64"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489851300
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 59,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 20480000,
    "source": "import java.util.*;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\n \r\nimport java.io.*;\r\nimport java.math.BigDecimal;\r\nimport java.math.BigInteger;\r\nimport java.math.MathContext;\r\n \r\nimport static java.lang.Math.*;\r\nimport static java.util.Arrays.*;\r\nimport static java.util.Arrays.fill;\r\nimport static java.util.Collections.*;\r\n \r\npublic class Main {\r\n\tpublic static void main(String[] args) throws Exception {\r\n\t\tInputReader in = new InputReader(System.in);\r\n\t\tPrintWriter out = new PrintWriter(System.out);\r\n\t\tTaskA solver = new TaskA();\r\n\t\tsolver.solve(1, in, out);\r\n\t\tout.close();\r\n\t}\r\n \r\n\tstatic class TaskA {\r\n\t\tint[] dx = { 1, 0, -1, 0, -1, -1, 1, 1 }, \r\n\t\t\t  dy = { 0, 1, 0, -1, -1, 1 - 1, 1 };\r\n\t\tint MAX = (int) (1e5+10);\r\n \r\n\t\t// GCD && LCM\r\n\t\tlong gcd(long a, long b) {\r\n\t\t\treturn b == 0 ? a : gcd(b, a % b);\r\n\t\t}\r\n \r\n\t\tlong lcm(long a, long b) {\r\n\t\t\treturn a * (b / gcd(a, b));\r\n\t\t}\r\n \r\n\t\t// REverse a String\r\n\t\tString rev(String s) {\r\n\t\t\treturn new StringBuilder(s).reverse().toString();\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\t/*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SOLUTION IS RIGHT HERE^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/\r\n\t\tpublic void solve(int testNumber, InputReader in, PrintWriter out) throws IOException {\r\n\t\t int n = in.nextInt();\r\n\t\t int k = in.nextInt();\r\n\t\t String[] s = new String[n+1];\r\n\t\t s[0]=\"A\";\r\n\t\t char ch = 'a';\r\n \t\t for(int i = 0; i < n; i++){\r\n\t\t\t  \ts[i+1] = s[i]+ch;\r\n\t\t\t  \tif(i%9 == 0){\r\n\t\t\t  \t\tch++;\r\n\t\t\t  \t\ts[i+1] = \"A\"+ch;\r\n\t\t\t  \t\t}\r\n\t\t }\r\n\t\t// for(int i = 0; i < n; i++)\r\n\t\t\t// out.print(s[i]+\" \");\r\n\t\t //out.println();\r\n\t\t for(int i = 0; i < n-k+1; i++){\r\n\t\t\t  \tString p = in.next();\r\n\t\t\t  \tif(p.equals(\"NO\")){\r\n\t\t\t  \t\ts[i+k-1] = s[i];\r\n\t\t\t  \t}\r\n\t\t }\r\n\t\t for(int i = 0; i < n; i++)\r\n\t\t\t out.print(s[i]+\" \");\r\n\t\t }\r\n\t}\r\n\t/*static class pair{\r\n         int h , r;\r\n         pair(int h, int r){\r\n        \t this.h= h;\r\n        \t this.r = r;\r\n         }\r\n\t}/*\r\n\t/*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^`````````````````````````^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/\r\n\tstatic class InputReader {\r\n\t\tprivate byte[] buf = new byte[8000];\r\n\t\tprivate int index;\r\n\t\tprivate int total;\r\n\t\tprivate InputStream in;\r\n\t\t// BufferedReader br = new BufferedReader(new\r\n\t\t// InputStreamReader(System.in));\r\n \r\n\t\tpublic InputReader(InputStream stream) {\r\n\t\t\tin = stream;\r\n\t\t}\r\n \r\n\t\tpublic int scan() {\r\n\t\t\tif (total == -1)\r\n\t\t\t\tthrow new InputMismatchException();\r\n\t\t\tif (index >= total) {\r\n\t\t\t\tindex = 0;\r\n\t\t\t\ttry {\r\n\t\t\t\t\ttotal = in.read(buf);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\t}\r\n\t\t\t\tif (total <= 0)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn buf[index++];\r\n\t\t}\r\n \r\n\t\tpublic long scanlong() {\r\n\t\t\tlong integer = 0;\r\n\t\t\tint n = scan();\r\n\t\t\twhile (isWhiteSpace(n))\r\n\t\t\t\tn = scan();\r\n\t\t\tint neg = 1;\r\n\t\t\tif (n == '-') {\r\n\t\t\t\tneg = -1;\r\n\t\t\t\tn = scan();\r\n\t\t\t}\r\n\t\t\twhile (!isWhiteSpace(n)) {\r\n\t\t\t\tif (n >= '0' && n <= '9') {\r\n\t\t\t\t\tinteger *= 10;\r\n\t\t\t\t\tinteger += n - '0';\r\n\t\t\t\t\tn = scan();\r\n\t\t\t\t} else\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t}\r\n\t\t\treturn neg * integer;\r\n\t\t}\r\n \r\n\t\tprivate int scanInt() {\r\n\t\t\tint integer = 0;\r\n\t\t\tint n = scan();\r\n\t\t\twhile (isWhiteSpace(n))\r\n\t\t\t\tn = scan();\r\n\t\t\tint neg = 1;\r\n\t\t\tif (n == '-') {\r\n\t\t\t\tneg = -1;\r\n\t\t\t\tn = scan();\r\n\t\t\t}\r\n\t\t\twhile (!isWhiteSpace(n)) {\r\n\t\t\t\tif (n >= '0' && n <= '9') {\r\n\t\t\t\t\tinteger *= 10;\r\n\t\t\t\t\tinteger += n - '0';\r\n\t\t\t\t\tn = scan();\r\n\t\t\t\t} else\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t}\r\n\t\t\treturn neg * integer;\r\n\t\t}\r\n \r\n\t\tpublic double scandouble() {\r\n\t\t\tdouble doubll = 0;\r\n\t\t\tint n = scan();\r\n\t\t\tint neg = 1;\r\n\t\t\twhile (isWhiteSpace(n))\r\n\t\t\t\tn = scan();\r\n\t\t\tif (n == '-') {\r\n\t\t\t\tneg = -1;\r\n\t\t\t\tn = scan();\r\n\t\t\t}\r\n\t\t\twhile (!isWhiteSpace(n) && n != '.') {\r\n\t\t\t\tif (n >= '0' && n <= '9') {\r\n\t\t\t\t\tdoubll *= 10;\r\n\t\t\t\t\tdoubll += n - '0';\r\n\t\t\t\t\tn = scan();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (n == '.') {\r\n\t\t\t\tn = scan();\r\n\t\t\t\tdouble temp = 1;\r\n\t\t\t\twhile (!isWhiteSpace(n)) {\r\n\t\t\t\t\tif (n >= '0' && n <= '9') {\r\n\t\t\t\t\t\ttemp /= 10;\r\n\t\t\t\t\t\tdoubll += (n - '0') * temp;\r\n\t\t\t\t\t\tn = scan();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn neg * doubll;\r\n\t\t}\r\n \r\n\t\tprivate float scanfloat() {\r\n\t\t\tfloat doubll = 0;\r\n\t\t\tint n = scan();\r\n\t\t\tint neg = 1;\r\n\t\t\twhile (isWhiteSpace(n))\r\n\t\t\t\tn = scan();\r\n\t\t\tif (n == '-') {\r\n\t\t\t\tneg = -1;\r\n\t\t\t\tn = scan();\r\n\t\t\t}\r\n\t\t\twhile (!isWhiteSpace(n) && n != '.') {\r\n\t\t\t\tif (n >= '0' && n <= '9') {\r\n\t\t\t\t\tdoubll *= 10;\r\n\t\t\t\t\tdoubll += n - '0';\r\n\t\t\t\t\tn = scan();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (n == '.') {\r\n\t\t\t\tn = scan();\r\n\t\t\t\tdouble temp = 1;\r\n\t\t\t\twhile (!isWhiteSpace(n)) {\r\n\t\t\t\t\tif (n >= '0' && n <= '9') {\r\n\t\t\t\t\t\ttemp /= 10;\r\n\t\t\t\t\t\tdoubll += (n - '0') * temp;\r\n\t\t\t\t\t\tn = scan();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn neg * doubll;\r\n\t\t}\r\n \r\n\t\tpublic String scanstring() {\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\tint n = scan();\r\n\t\t\twhile (isWhiteSpace(n))\r\n\t\t\t\tn = scan();\r\n\t\t\twhile (!isWhiteSpace(n)) {\r\n\t\t\t\tsb.append((char) n);\r\n\t\t\t\tn = scan();\r\n\t\t\t}\r\n\t\t\treturn sb.toString();\r\n\t\t}\r\n \r\n\t\tpublic String scan_nextLine() {\r\n\t\t\tint n = scan();\r\n\t\t\twhile (isWhiteSpace(n))\r\n\t\t\t\tn = scan();\r\n\t\t\tStringBuilder res = new StringBuilder();\r\n\t\t\tdo {\r\n\t\t\t\tres.appendCodePoint(n);\r\n\t\t\t\tn = scan();\r\n\t\t\t} while (!isEndOfLine(n));\r\n\t\t\treturn res.toString();\r\n\t\t}\r\n \r\n\t\tpublic boolean isWhiteSpace(int n) {\r\n\t\t\tif (n == ' ' || n == '\\n' || n == '\\r' || n == '\\t' || n == -1)\r\n\t\t\t\treturn true;\r\n\t\t\treturn false;\r\n\t\t}\r\n \r\n\t\tprivate boolean isEndOfLine(int c) {\r\n\t\t\treturn c == '\\n' || c == '\\r' || c == -1;\r\n\t\t}\r\n\t\t/// Input module\r\n \r\n\t\tpublic int nextInt() {\r\n\t\t\treturn scanInt();\r\n\t\t}\r\n \r\n\t\tpublic long nextLong() {\r\n\t\t\treturn scanlong();\r\n\t\t}\r\n \r\n\t\tpublic double nextDouble() {\r\n\t\t\treturn scandouble();\r\n\t\t}\r\n \r\n\t\tpublic float nextFloat() {\r\n\t\t\treturn scanfloat();\r\n\t\t}\r\n \r\n\t\tpublic String next() {\r\n\t\t\treturn scanstring();\r\n\t\t}\r\n \r\n\t\tpublic String nextLine() throws IOException {\r\n\t\t\treturn scan_nextLine();\r\n\t\t}\r\n \r\n\t\tpublic int[] readintArray(int size) {\r\n\t\t\tint[] array = new int[size];\r\n\t\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\t\tarray[i] = nextInt();\r\n\t\t\t}\r\n\t\t\treturn array;\r\n\t\t}\r\n \r\n\t\tpublic Integer[] readIntegerArray(int size) {\r\n\t\t\tInteger[] array = new Integer[size];\r\n\t\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\t\tarray[i] = nextInt();\r\n\t\t\t}\r\n\t\t\treturn array;\r\n\t\t}\r\n\t}\r\n \r\n} "
}