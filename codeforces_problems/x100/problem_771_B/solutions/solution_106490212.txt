{
    "id": 106490212,
    "contestId": 771,
    "creationTimeSeconds": 1612469888,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 771,
        "index": "B",
        "name": "Bear and Different Names",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 771,
        "members": [
            {
                "handle": "cornhub"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489851300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 59,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#include<vector>   //vector<vector<int> > vec( n , vector<int> (m, 0));     2d vector with n rows and m columns and value 0;\r\n#include<string> // s.substr(starting index,length)  //  s.erase(starting index,length)   //getline(cin, str);   //s.insert(index,\" \");\r\n#include<map>    //map<data_type1,data_type2> variable_name;\r\n#include <unordered_map> // unordered_map<string(key), double> umap;//umap.insert(make_pair(\"e\", 2.718));// umap.find(key_value) returns pointer to value , if not found it returns umap.end()\r\n#include <set>    //Increasing order: set<Data type> variable_name; OR Decreasing order :set<Data type, greater<Data type> > variable_name;   // push_back()==insert().\r\n#include <queue> //one can search elements in priority queue ans set in O(log n) and can erase elements in O(1).\r\n#include <stack>\r\n#define mkvect(arr,n,a) vector<ll int>arr(n,a);\r\n#define mkvec(str) vector<ll int>str;\r\n#define gets(s) getline(cin,s);\r\n#define ll long long\r\n#define LL (long long int)\r\n#define ld long double\r\n#define pb push_back\r\n#define mp make_pair\r\n#define fi first\r\n#define se second\r\n#define FOR(j,a,n) for(ll int j=a;j<=n;j++)\r\n#define PI 3.1415926535897932384626\r\n#define ms(s, n) memset(s, n, sizeof(s))\r\n#define nline cout<<endl;\r\n#define dcout(n) cout<<fixed<<setprecision(n)\r\n#define debug(a) cout<<\" here \"<<#a<<\" == \"<<a<<endl;\r\n#define reach  cout<<\"--->reached here<---\"<<endl;\r\n#define toupper(su)   transform(su.begin(), su.end(), su.begin(), ::toupper);    //'A' + 32 = 'a'\r\n#define tolower(sl)   transform(sl.begin(), sl.end(), sl.begin(), ::tolower); \r\n#define tc() ll int N;cin>>N;while(N--) test();\r\n#define rev(s)  reverse(s.begin(), s.end()); //for(ll int i = 0; i < s.length() / 2; i++) swap(s[i], s[s.length() - i - 1]);  \r\n#define maxi(v) *max_element(v.begin(),v.end())\r\n#define mini(v) *min_element(v.begin(),v.end());                                                                                                                                 \r\n#define print(v); for(int i=0; i < v.size(); i++)cout << v.at(i)<<\" \";nline\r\n#define fsort(v);  sort(v.begin(),v.end());  \r\n#define rsort(v);  sort(v.begin(),v.end(),greater<int>());  // not for vector of pairs\r\n#define printset(myset)  for (auto it=myset.begin(); it != myset.end(); ++it)  cout<<*it<<\" \"; \r\n#define bins(v,val)  binary_search(v.begin(),v.end(),val); //returns bool which need to be stored\r\n#define ub(v,val) upper_bound(v.begin(),v.end(),val)-v.begin()   // or first_greater_than()\r\n#define lb(v,val) lower_bound(v.begin(),v.end(),val)-v.begin()    // or first_equal_to_or_greater_than()\r\n#define actbits(x)  32-__builtin_clzll(x)\r\n#define NOT(b) power(LL 2,actbits(b))-1-b;\r\ntemplate<class T> T gcd(T a, T b){return (b==0) ? a : gcd (b, a%b);}\r\nconst unsigned int MOD = 1000000007;ll int inf = 1000000000000000000; ll int MODI = 998244353;\r\n \r\n/*\r\nint main()\r\n{\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(0); cout.tie(0);\r\n \r\nKEEP IT SIMPLE,STEP BY STEP ,CONTROL CODE,OTHER WAY OF THINKING OR CHANGE PROBLEM STATEMENT.\r\n}\r\n*/\r\n//************************************************************************START*************************************************************************************************************//\r\n\r\n\r\ntemplate<class T>\r\nT power(T a,ll int n)\r\n{\r\n      T res=1;\r\n      while(n>0)\r\n      {\r\n      if(n%2)\r\n      res=(res*a)%MOD;\r\n      \r\n      a=(a*a)%MOD,n=n/2;\r\n      }\r\n      \r\n      return res%MOD;\r\n}\r\n\r\nbool isprime(int n) \r\n{ \r\n    // Corner case \r\n    if (n <= 1) \r\n        return false; \r\n  \r\n    // Check from 2 to sqrt(n) \r\n    for (int i = 2; i*i <= n; i++) \r\n        if (n % i == 0) \r\n            return false; \r\n  \r\n    return true; \r\n}\r\n\r\nbool issq(ll int n){\r\n\tdouble d = n;\r\n\tdouble p1 = sqrt(d);\r\n\tll int p2 = sqrt(n);\r\n\treturn (p1==p2);\r\n}\r\n\r\nvector<ll int>adj[100005];\r\n\r\nlong double dfs(ll int node,ll int parent){\r\n\tll int disp = 0;\r\n\tfor(int i=0;i<adj[node].size();i++){\r\n\t\tif((adj[node][i]!=parent))\r\n\t\tdisp += dfs(adj[node][i],node);\r\n\t}\r\n\tll int p = adj[node].size();\r\n\tif(p==1)\r\n\treturn 0;\r\n\telse\r\n\treturn (1.0 + ((disp*1.0)/(p-1)));\r\n}\r\n\r\nint main() {\r\n     \r\n    ios::sync_with_stdio(false);\r\n\tcin.tie(0); cout.tie(0); \r\n\t\r\nvector<string>names,name,ans;\r\nnames.push_back(\"a\");names.push_back(\"b\");names.push_back(\"c\");names.push_back(\"d\");names.push_back(\"e\");names.push_back(\"f\");names.push_back(\"g\");names.push_back(\"h\");\r\n\r\nfor(int i=0;i<8;i++){\r\n\tfor(int j=0;j<8;j++)\r\n\tname.push_back(names[i]+names[j]);\r\n}\r\nll int n; ll int k; cin>>n>>k;\r\nfor(int i=0;i<n;i++)\r\nans.push_back(name[i]);\r\nll int j = k-1;\r\nfor(int i=1;i<=n-k+1;i++,j++){\r\n\tstring s; cin>>s;\r\n\tif(s==\"YES\") continue;\r\n\tans[j]=ans[j-k+1];\r\n}\r\nfor(int i=0;i<ans.size();i++){\r\n\tans[i][0] -= 32;\r\n}\r\n\r\nprint(ans);\r\n}\r\n\r\n ",
    "defect_evaluation_gpt4_v4": {
        "good solution": 65,
        "wrong solution": 30,
        "compilation error": 5,
        "runtime error": 0
    },
    "defect_evaluation_v4": {
        "good solution": 85,
        "wrong solution": 15,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 0,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 0,
        "sortings": 0,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 0,
        "readable": 0,
        "well-named": 0,
        "efficient": 0,
        "reusable": 0,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 0,
        "compilation error": 0,
        "runtime error": 0
    }
}