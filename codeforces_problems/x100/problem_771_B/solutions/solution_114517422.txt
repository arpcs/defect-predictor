{
    "id": 114517422,
    "contestId": 771,
    "creationTimeSeconds": 1619688011,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 771,
        "index": "B",
        "name": "Bear and Different Names",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 771,
        "members": [
            {
                "handle": "sharnit"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489851300
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class C {\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n \r\n        public FastReader()\r\n        {\r\n            br = new BufferedReader(\r\n                new InputStreamReader(System.in));\r\n        }\r\n \r\n        String next()\r\n        {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n \r\n        int nextInt() { return Integer.parseInt(next()); }\r\n \r\n        long nextLong() { return Long.parseLong(next()); }\r\n \r\n        double nextDouble()\r\n        {\r\n            return Double.parseDouble(next());\r\n        }\r\n \r\n        String nextLine()\r\n        {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\t\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tFastReader sc=new FastReader();\r\n\t\tint n=sc.nextInt();\r\n\t\tint k=sc.nextInt();\r\n\t\tint len=n-k+1;\r\n\t\tString[] given=new String[len];\r\n\t\tfor(int i=0;i<len;i++) {\r\n\t\t\tgiven[i]=sc.next();\r\n\t\t}\r\n\t\tArrayList<Integer> a=new ArrayList<>();\r\n\t\t\r\n\t\tint start=65;\r\n\t\tif(given[0].equals(\"YES\")) {\r\n\t\t\tfor(int i=0;i<k;i++) {\r\n\t\t\t\ta.add(start);\r\n\t\t\t\tstart++;\r\n\t\t\t\tif(start==91) {\r\n\t\t\t\t\tstart=187;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor(int i=0;i<k;i++) {\r\n\t\t\t\ta.add(start);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i=1;i<n-k+1;i++) {\r\n\t\t\tif(given[i].equals(\"YES\")) {\r\n\t\t\t\tint val=a.get(k+i-2);\r\n\t\t\t\tif(val==90) {\r\n\t\t\t\t\ta.add(val+97);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ta.add(a.get(k+i-2)+1);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\ta.add(a.get(k+i-2));\r\n\t\t\t}\r\n\t\t}\r\n\t\tArrayList<String> ans=new ArrayList<>();\r\n\t\tfor(int z:a) {\r\n\t\t\tif(z<=90) {\r\n\t\t\t\tString t=\"\";\r\n\t\t\t\tt+=(char)z;\r\n\t\t\t\tans.add(t);\r\n\t\t\t} else {\r\n\t\t\t\tString t=\"A\";\r\n\t\t\t\tz-=90;\r\n\t\t\t\tt+=(char)z;\r\n\t\t\t\tans.add(t);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(String z:ans) {\r\n\t\t\tSystem.out.print(z+\" \");\r\n\t\t}\r\n\t\tSystem.out.println();\r\n\t\t\r\n\t}\r\n\r\n}\r\n"
}