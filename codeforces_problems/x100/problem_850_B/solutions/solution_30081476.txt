{
    "id": 30081476,
    "contestId": 850,
    "creationTimeSeconds": 1504550727,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "hohomu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 105,
    "timeConsumedMillis": 1933,
    "memoryConsumedBytes": 85811200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define FOR(i,s,e) for(int i = (s); i < (e); i++)\r\n#define FOE(i,s,e) for(int i = (s); i <= (e); i++)\r\n#define FOD(i,s,e) for(int i = (s); i >= (e); i--)\r\n#define ll long long\r\n#define pb push_back\r\n#define FUCK 4000000000000000000ll\r\n\r\nint n, m, x, y, z, k, w, p, pn;\r\nint is_prime[1000005], prime_list[1000005], freq[2000005];\r\n\r\nint A[600006], tmp, times, cnt;\r\nll a, b, ans, tmp_sum;\r\n\r\nll T[4200000], sum[4200000];\r\n\r\nvoid build(int x, int l, int r)\r\n{\r\n\tif (l == r)\r\n\t{\r\n\t\tT[x] = freq[l];\r\n\t\tsum[x] = 0ll;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tint mid = (l + r) / 2;\r\n\t\tbuild(x * 2, l, mid);\r\n\t\tbuild(x * 2 + 1, mid + 1, r);\r\n\t\t\r\n\t\tT[x] = T[x * 2] + T[x * 2 + 1];\r\n\t\tsum[x] = sum[x * 2 + 1] + sum[x * 2] + T[x * 2] * (r - mid) * b;\r\n\t\tsum[x] = min(sum[x], FUCK);\r\n\t}\r\n}\r\n\r\nvoid find_prime()\r\n{\r\n\tFOE(i, 2, 3000)\r\n\t{\r\n\t\tif (is_prime[i] == 1) continue;\r\n\t\tfor (int j = i * i; j <= 1000000; j += i) is_prime[j] = 1;\r\n\t}\r\n\t\r\n\tFOE(i, 2, 1000000) if (!is_prime[i]) prime_list[p++] = i;\r\n}\r\n\r\nll queryppl(int x, int l, int r, int tl, int tr)\r\n{\r\n\tif (tl <= l && r <= tr) return T[x];\r\n\telse if (r < tl || tr < l) return 0ll;\r\n\telse\r\n\t{\r\n\t\tint mid = (l + r) / 2;\r\n\t\tll a = queryppl(x * 2, l, mid, tl, tr);\r\n\t\tll b = queryppl(x * 2 + 1, mid + 1, r, tl, tr);\r\n\t\treturn a + b;\r\n\t}\r\n}\r\n\r\nll query(int x, int l, int r, int tl, int tr)\r\n{\r\n\tif (tl <= l && r <= tr) \treturn sum[x] + T[x] * (tr - r) * b;\r\n\telse if (r < tl || tr < l) return 0ll;\r\n\telse\r\n\t{\r\n\t\tint mid = (l + r) / 2;\r\n\t\tll a = query(x * 2, l, mid, tl, tr);\r\n\t\tll b = query(x * 2 + 1, mid + 1, r, tl, tr);\r\n\t\treturn min(FUCK, a + b);\r\n\t}\r\n}\r\n\r\nint main ()\r\n{\r\n\tfind_prime();\r\n\t\r\n\tscanf(\"%d %lld %lld\", &n, &a, &b);\r\n\t\r\n\tFOR(i, 0, n) { scanf(\"%d\", &A[i]); freq[A[i]]++; }\r\n\t\r\n\tif (freq[1] == n)\r\n\t{\r\n\t\tif (a < b) printf(\"%lld\\n\", a * (ll)(n - 1) + b);\r\n\t\telse printf(\"%lld\\n\", b * n);\r\n\t\treturn 0;\r\n\t}\r\n\t\r\n\tans = a * (ll)(n - 1);\r\n\t\r\n\tbuild(1, 1, 2000000);\r\n\ttimes = (int)(a / b);\r\n\t\r\n//\tprintf(\"ans = %lld, times = %d\\n\", ans, times);\r\n\t\r\n//\tprintf(\"Q %lld\\n\", query(1, 1, 2000000, 16, 18));\r\n\t\r\n\tFOR(i, 0, p)\r\n\t{\r\n\t\tpn = prime_list[i];\r\n\t\tcnt = 0;\r\n\t\ttmp_sum = 0ll;\r\n\t\t\r\n\t\tfor (int j = pn; j < 1000000 + pn; j += pn)\r\n\t\t{\r\n\t\t\tcnt += queryppl(1, 1, 2000000, max(j - pn + 1, j - times), j);\r\n\t\t\ttmp_sum += query(1, 1, 2000000, max(j - pn + 1, j - times), j);\r\n\t\t\ttmp_sum = min(FUCK, tmp_sum);\r\n\t\t}\r\n\t\t\r\n\t\ttmp_sum += (n - cnt) * a;\r\n\t\ttmp_sum = min(tmp_sum, FUCK);\r\n\t\tans = min(ans, tmp_sum);\r\n\t}\r\n\t\r\n\tprintf(\"%lld\\n\", ans);\r\n\treturn 0;\r\n}\r\n\t"
}