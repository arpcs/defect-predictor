{
    "id": 30381508,
    "contestId": 850,
    "creationTimeSeconds": 1505559638,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "limed"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "Scala",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 452,
    "memoryConsumedBytes": 0,
    "source": "object B {\n\n  @inline def tokenizeLine = new java.util.StringTokenizer(readLine)\n  def readInts(n: Int) = { val tl = tokenizeLine; Array.fill(n)(tl.nextToken.toInt) }\n\n  val primes1000 = Array[Long](\n    2, 3, 5L, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\n    113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\n    241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\n    383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521,\n    523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661,\n    673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827,\n    829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,\n    997L)\n\n  def main(args: Array[String]) = {\n\n    val Array(n, x, y) = readInts(3)\n    val as = readInts(n)\n    var res = x.toLong * (n - 1) + (if (as.min == 1) y else 0)\n\n    for (prime <- primes1000) {\n\n      var cost = 0L\n\n      var i = 0\n      var removed = 0\n      while (i < n && cost < res) {\n        val a = as(i)\n        val mod = a % prime\n        if (mod > 0) {\n          val increaseCost = y * (prime - mod)\n          if (x < increaseCost) {\n            cost += x\n            removed += 1\n          } else cost += increaseCost\n        }\n        i += 1\n      }\n\n      if (cost < res && removed < n) res = cost\n    }\n\n    println(res)\n  }\n\n}\n"
}