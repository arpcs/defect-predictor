{
    "id": 30576255,
    "contestId": 850,
    "creationTimeSeconds": 1505995050,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "bgrm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 60,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 7065600,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int maxN = 500001, maxM = 1000000;\n\nint a[maxN];\nlong long SP[maxN];\nlong long* sp = SP + 1;\nbool isnt_prime[maxM];\n\nlong long sum_pref(int a, int b)\n{\n    return sp[b - 1] - sp[a - 1];\n}\n\nint main()\n{\n    int n, x, y, M = 0;\n    scanf (\"%d%d%d\", &n, &x, &y);\n\n    for (int i=0; i<n; i++)\n    {\n        scanf (\"%d\", a + i);\n        M = max(M, a[i]);\n    }\n\n    for (int i=2; i*i<=M; i++)\n        if (!isnt_prime[i])\n            for (int j=i*i; j<=M; j+=i)\n                isnt_prime[j] = true;\n\n    sort(a, a + n);\n\n    for (int i=0; i<n; i++)\n        sp[i] = sp[i - 1] + a[i];\n\n    long long res = 1LL * n * x;\n\n    for (int p=2; p<=M; p++)\n    {\n        if (isnt_prime[p])\n            continue;\n            \n        long long curr_res = 0;\n\n        for (int i=0, j=0, s=0, k=p; i<n; k+=p)\n        {\n            i = upper_bound(a, a + n, k) - a;\n            j = upper_bound(a, a + n, k - p) - a;\n            s = max(j, (int)(lower_bound(a, a + n, k - x / y) - a));\n\n            curr_res += (1LL * (i - s) * k - sum_pref(s, i)) * y + 1LL * (s - j) * x;\n        }\n\n        res = min(res, curr_res);\n    }\n\n    printf(\"%lld\\n\", res);\n    return 0;\n}"
}