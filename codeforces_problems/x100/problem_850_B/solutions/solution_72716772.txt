{
    "id": 72716772,
    "contestId": 850,
    "creationTimeSeconds": 1583658510,
    "relativeTimeSeconds": 2610,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "Nakagawa.Kanon"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1583655900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 153,
    "timeConsumedMillis": 451,
    "memoryConsumedBytes": 14745600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define range(i, m, n) for(int i = m; i < n; i++)\r\n#define husk(i, m, n) for(int i = m; i > n; i--)\r\n\r\nvector<int> least = {0, 1};\r\nvector<int> primes;\r\nint precalculated = 1;\r\n\r\nvoid RunLinearSieve(int n) {\r\n  n = max(n, 1);\r\n  least.assign(n + 1, 0);\r\n  primes.clear();\r\n  for (int i = 2; i <= n; i++) {\r\n    if (least[i] == 0) {\r\n      least[i] = i;\r\n      primes.push_back(i);\r\n    }\r\n    for (int x : primes) {\r\n      if (x > least[i] || i * x > n) {\r\n        break;\r\n      }\r\n      least[i * x] = x;\r\n    }\r\n  }\r\n  precalculated = n;\r\n}\r\n\r\nint n, x, y;\r\n\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n  cin >> n >> x >> y;\r\n  vector<int> a(n);\r\n  const int M = 1e6 + 5;\r\n  RunLinearSieve(M);\r\n  range(i, 0, n) cin >> a[i];\r\n  auto get = [&](int x) {\r\n    vector<int> res;\r\n    while(x > 1) {\r\n      res.push_back(least[x]);\r\n      int p = least[x];\r\n      while(x % p == 0) x/= p;\r\n    }\r\n    return res;\r\n  };\r\n\r\n  if(x >= 2 * y) {\r\n    mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n    vector<int> res(M);\r\n    long long ans = 1LL * n * y;\r\n    auto solve = [&](int p) {\r\n      if(res[p]) return;\r\n      long long add = 0;\r\n      range(i, 0, n) {\r\n        add += min(1LL * ((p - (a[i] % p)) % p) * y, 1LL * x);\r\n      }\r\n      ans = min(add, ans);\r\n      res[p] = 1;\r\n    };\r\n    shuffle(a.begin(), a.end(), rng);\r\n    int N = min(n, 20);\r\n    range(i, 0, N) {\r\n      range(rot, 0, 2) {\r\n        vector<int> ret = get(a[i]);\r\n        for(int i : ret) solve(i);\r\n      }\r\n    }\r\n    cout << ans;\r\n    return 0;\r\n  }\r\n\r\n  vector<long long> res(M, 1LL * x * n);\r\n  range(i, 0, n) {\r\n    range(rot, 0, 2) {\r\n      vector<int> ret = get(a[i] + rot);\r\n      for(int j : ret) res[j] += (rot ? y : 0) - x;\r\n    }\r\n  }\r\n  long long ans = *min_element(res.begin(), res.end());\r\n  cout << ans;\r\n  return 0;\r\n}\r\n"
}