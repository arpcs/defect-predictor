{
    "id": 36791334,
    "contestId": 850,
    "creationTimeSeconds": 1522567920,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 31539200,
    "source": "#include <iostream>\n#include <vector>\n#include <cstring>\nusing namespace std;\n\nconst int MAX = 2000005;\nint a[500000];\nint sum1[MAX];\nlong long sum2[MAX];\nbool isp[MAX];\nvector<int> ps;\n\nvoid init()\n{\n    int i, j;\n    for(i=2;i<MAX;i++)\n    {\n        if(!isp[i]) continue;\n        ps.push_back(i);\n        j = 2;\n        while(i*j<MAX)\n        {\n            isp[i*j] = false;\n            j++;\n        }\n    }\n}\n\nint main()\n{\n    int n, x, y;\n    int maxnum = 0;\n    long long cost, tempc;\n    int i, j, k;\n    int p;\n\n    memset(sum1, 0, sizeof(sum1));\n    memset(sum1, 0, sizeof(sum2));\n    memset(isp, 1, sizeof(isp));\n    init();\n    cin >> n;\n    cin >> x >> y;\n    for(i=0;i<n;i++)\n    {\n        cin >> a[i];\n        sum1[a[i]]+=1;\n        sum2[a[i]]+=a[i];\n        maxnum = max(maxnum, a[i]);\n    }\n    for(i=0;i<MAX;i++)\n    {\n        sum1[i] += sum1[i-1];\n        sum2[i] += sum2[i-1];\n        //cout << sum1[i] << \" \";\n    }\n    cost = 1LL * x * n;\n    for(i=0;i<ps.size();i++)\n    {\n        //cout << cost <<endl;\n        tempc = 0;\n        p = ps[i];\n        k = min(x/y, p-1);\n        for(j=0;j<1e6;j+=p)\n        {\n            tempc += 1LL*(sum1[p+j - k - 1]-sum1[j]) * x;\n            tempc += (1LL*(sum1[p+j]-sum1[p+j-k-1])*(j+p) - (sum2[p+j]-sum2[p+j-k-1])) * y;\n            if(tempc>cost) break;\n        }\n        cost = min(tempc, cost);\n    }\n\n    cout << cost << endl;\n\n    return 0;\n}\n"
}