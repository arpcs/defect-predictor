{
    "id": 110469606,
    "contestId": 1111,
    "creationTimeSeconds": 1616170643,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1111,
        "index": "A",
        "name": "Superhero Transformation",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1111,
        "members": [
            {
                "handle": "smoking_ace"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549208100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include \"bits/stdc++.h\"\r\n#define endl       '\\n'\r\n#define pb         push_back\r\n#define mod        1000000007\r\n#define int        int64_t\r\n#define hii        cout<<\"yes\\n\";\r\n#define all(x)     x.begin(),x.end()\r\n#define deb(x)     cout<<#x<<\" : \"<<x<<\"\\n\";\r\n#define FASTIO     ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)\r\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\r\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\r\n\r\nusing namespace std;\r\nusing namespace chrono;\r\n\r\nvoid solve(){\r\n\tstring s,t;\r\n\tcin >> s >> t;\r\n\tmap<char,int> s_map,t_map;\r\n\tfor(char i : s){\r\n\t\tif( i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u')\r\n\t\t\ts_map[i]++;\r\n\t}\r\n\tfor(char i : t){\r\n\t\tif( i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u')\r\n\t\t\tt_map[i]++;\r\n\t}\r\n\tif(s_map.size() == t_map.size() && \r\n\t\t\t(s.length() - s_map.size() == t.length() - t_map.size()))\r\n\t\tcout<<\"Yes\"<<endl;\r\n\telse\r\n\t\tcout<<\"No\"<<endl;\r\n\r\n}\r\n\r\nsigned main() {\r\n\tFASTIO;\r\n#ifndef ONLINE_JUDGE\r\n\tfreopen(\"Input.txt\", \"r\", stdin);\r\n\tfreopen(\"Output.txt\", \"w\", stdout);\r\n\tfreopen(\"Error.txt\", \"w\", stderr);\r\n#endif\r\n\tauto start1 = high_resolution_clock::now();\r\n\tint t = 1;\r\n\t//cin >> t;\r\n\twhile (t--) {\r\n\t\tsolve();\r\n\t}\r\n\tauto stop1 = high_resolution_clock::now();\r\n\tauto duration = duration_cast<microseconds>(stop1 - start1);\r\n#ifndef ONLINE_JUDGE\r\n\tcerr << \"Time: \" << duration.count() / 1000 << endl;\r\n#endif\r\n\treturn 0;\r\n}"
}