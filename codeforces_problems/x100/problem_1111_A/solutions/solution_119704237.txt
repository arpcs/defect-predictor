{
    "id": 119704237,
    "contestId": 1111,
    "creationTimeSeconds": 1623927012,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1111,
        "index": "A",
        "name": "Superhero Transformation",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1111,
        "members": [
            {
                "handle": "MadDuke"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549208100
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 0,
    "source": "\r\n// Working program with FastReader\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.*;\r\n\r\npublic class SuperHeroTransformation {\r\n\r\n    public static void main(String[] args) {\r\n        FastReader fs = new FastReader();\r\n        String s1 = fs.nextLine();\r\n        String s2 = fs.nextLine();\r\n        if (s1.length() != s2.length()) System.out.println(\"NO\");\r\n        else {\r\n            Set<Character> set = new HashSet<>();\r\n            set.add('a'); set.add('e'); set.add('i'); set.add('o'); set.add('u');\r\n            boolean flag = true;\r\n            for (int i = 0; i < s1.length(); i++) {\r\n                if (set.contains(s1.charAt(i)) && !set.contains(s2.charAt(i))) {\r\n                    flag = false; break;\r\n                } else if (!set.contains(s1.charAt(i)) && set.contains(s2.charAt(i))) {\r\n                    flag = false; break;\r\n                }\r\n            }\r\n            if (flag) System.out.println(\"YES\");\r\n            else System.out.println(\"NO\");\r\n        }\r\n    }\r\n    private static int getGcd(int a, int b) {\r\n        if (b == 0) return a;\r\n        return getGcd(b, a % b);\r\n    }\r\n\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(\r\n                    new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n\r\n        int[] readArray(int n) {\r\n            int[] arr = new int[n];\r\n            for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(next());\r\n            return arr;\r\n        }\r\n    }\r\n}"
}