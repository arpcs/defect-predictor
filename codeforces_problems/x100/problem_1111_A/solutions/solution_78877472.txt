{
    "id": 78877472,
    "contestId": 1111,
    "creationTimeSeconds": 1588499547,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1111,
        "index": "A",
        "name": "Superhero Transformation",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1111,
        "members": [
            {
                "handle": "amit_dwivedi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549208100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "from __future__ import division, print_function\r\nimport os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\nif sys.version_info[0] < 3:\r\n    from __builtin__ import xrange as range;\r\n    from future_builtins import ascii, filter, hex, map, oct, zip \r\nBUFSIZE = 8192;\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n \r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n \r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\ndef print(*args, **kwargs):\r\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\r\n    at_start = True\r\n    for x in args:\r\n        if not at_start:\r\n            file.write(sep)\r\n        file.write(str(x))\r\n        at_start = False\r\n    file.write(kwargs.pop(\"end\", \"\\n\"))\r\n    if kwargs.pop(\"flush\", False):\r\n        file.flush()\r\nif sys.version_info[0] < 3: \r\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\r\nelse:\r\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\");\r\nii = lambda: int(input());\r\nll = lambda: list(map(int , input().split()));\r\nvv = lambda: map(int , input().split());\r\npr = print;\r\npl = lambda l: pr(\"\".join(list(map(str,l))))\r\n\r\nvow=set(['a','e','i','o','u'])\r\nlet=list(map(chr,range(ord('a'),ord('z')+1)))\r\ncons=set(let)-vow\r\ns=input()\r\nt=input()\r\nv,c=0,0\r\nif(len(s)!=len(t)):\r\n    print(\"No\")\r\n    sys.exit()\r\nfor i in range(len(s)):\r\n    if (s[i] in vow)==(t[i] in vow):continue\r\n    else:\r\n        print(\"No\")\r\n        sys.exit()\r\nelse:\r\n    print(\"Yes\")\r\n"
}