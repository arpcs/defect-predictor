{
    "id": 220485113,
    "contestId": 827,
    "creationTimeSeconds": 1693040137,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "Joddddd"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n\r\nvoid dfs(int n, vector<vector<int>>&graph, int par){\r\n    for(auto child:graph[n]){\r\n        if(child!=par){\r\n            cout<<n+1<<\" \"<<child+1<<\"\\n\";\r\n            dfs(child, graph, n);\r\n        }\r\n    }\r\n}\r\n\r\nvoid solve(){\r\n    \r\n    int n,k, ans;\r\n    cin>>n>>k;\r\n    vector<vector<int>> graph(n);\r\n\r\n    if(2*k>n){\r\n        ans=n-k+1;\r\n        int j=n-k;\r\n        for(int i=1; i<n-k; i++){\r\n            graph[i-1].push_back(i);\r\n            graph[i].push_back(i-1);\r\n        }\r\n        while(j<n){\r\n            for(int i=0; i<n-k; i++){\r\n                graph[i].push_back(j);\r\n                graph[j].push_back(i);\r\n                j++;\r\n                if(j==n) break;\r\n            }\r\n        }\r\n    }\r\n    else{\r\n        ans=k+1;\r\n        for(int i=1; i<k; i++){\r\n            graph[i-1].push_back(i);\r\n            graph[i].push_back(i-1);\r\n        }\r\n        for(int i=k; i<n-k; i++){\r\n            graph[i%k].push_back(k);\r\n            graph[k].push_back(i%k);\r\n        }\r\n\r\n        for(int i=n-k; i<n; i++){\r\n            graph[i].push_back(i-n+k);\r\n            graph[i-n+k].push_back(i);\r\n        }\r\n    }\r\n\r\n    cout<<ans<<\"\\n\";\r\n    dfs(0, graph, -1);\r\n}\r\n\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    int t=1;\r\n    // cin >> t;\r\n    //t = 1;\r\n    while (t-- > 0)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}