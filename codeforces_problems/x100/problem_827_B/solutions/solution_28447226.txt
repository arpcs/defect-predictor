{
    "id": 28447226,
    "contestId": 827,
    "creationTimeSeconds": 1499797244,
    "relativeTimeSeconds": 5744,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "hvcuong98"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 6,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "COMPILATION_ERROR",
    "testset": "PRETESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nvector<pair<int, int> > e;\r\nint n, k, d[200010];\r\nvector<int> adj[200010];\r\n\r\nvoid dfs(int x, int y)\r\n{\r\n    cout << x << endl;\r\n    d[x] = y;\r\n    for(int i = 0; i < adj[x].size(); i++)\r\n        if (d[adj[x][i]] == 0) dfs(adj[x][i], y + 1);\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin >> n >> k;\r\n    e.push_back({1, 2});\r\n    int x = n - k + 2;\r\n    for(int i = 1; i <= (n - k - 1) / (k - 1); i++)\r\n    {\r\n        for(int j = 1; j <= k - 1; j++)\r\n            e.push_back({x + j - 1, x + j - 1 - (k - 1)});\r\n        x -= (k - 1);\r\n    }\r\n    int y = (n - k - 1) % (k - 1);\r\n    if (y != 0)\r\n    {\r\n        for(int  i = 1; i <= k - y; i++)\r\n            e.push_back({x + i - 1, x - y});\r\n        for(int i = 1; i <= y - 1; i++)\r\n            e.push_back({x + k - y + i, x - i});\r\n        for(int i = x - 1; i >= x - y; i--)\r\n            e.push_back({2, i});\r\n    } else\r\n    {\r\n        for(int i = x; i <= x + k - 2; i++)\r\n            e.push_back({2, i});\r\n    }\r\n    for(int i = 0; i < e.size(); i++)\r\n    {\r\n        adj[e[i].first].push_back(e[i].second);\r\n        adj[e[i].second].push_back(e[i].first);\r\n    }\r\n    memset(d, 0, sizeof(d));\r\n    dfs(1, 1);\r\n    int root = 1;\r\n    for(int i = 1; i <= n; i++)\r\n        if (d[i] > d[root]) root = i;\r\n    memset(d, 0, sizeof(d));\r\n    dfs(root, 1);\r\n    for(int i = 1; i <= n; i++)\r\n        if (d[i] > d[root]) root = i;\r\n    cout << d[root] - 1 << endl;\r\n    for(int i = 0; i < e.size(); i++)\r\n        cout << e[i].first << \" \" << e[i].second << endl;\r\n    return 0;\r\n}\r\n"
}