{
    "id": 28437074,
    "contestId": 827,
    "creationTimeSeconds": 1499793229,
    "relativeTimeSeconds": 1729,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "zoomswk"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 16,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 2662400,
    "source": "#include <stdio.h>\n#include <algorithm>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nint lev[200005];\n\nint main(){\n    int n, k;\n    scanf(\"%d%d\", &n, &k);\n    lev[1] = 0;\n    for(int i=1; i<=k; i++) lev[i+1] = 1;\n    for(int i=k+2; i<=n; i++) lev[i] = lev[i-k]+1;\n    printf(\"%d\\n\", lev[n]+lev[n-1]);\n    for(int i=1; i<=k; i++) printf(\"1 %d\\n\", i+1), lev[i+1] = 1;\n    for(int i=k+2; i<=n; i++) printf(\"%d %d\\n\", i-k, i), lev[i] = lev[i-k]+1;\n    return 0;\n}"
}