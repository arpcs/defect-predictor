{
    "id": 28446291,
    "contestId": 827,
    "creationTimeSeconds": 1499796840,
    "relativeTimeSeconds": 5340,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "triveni"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 9,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "PRETESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 7065600,
    "source": "/*\n  Beautiful Codes are MUCH better than 'Shorter' ones !\nuser  : triveni\ndate  : 11/07/2017\ntime  : 23:29:09\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define      pii               std::pair<int,int>\n#define      vi                std::vector<int>\n#define      mp(a,b)           make_pair(a,b)\n#define      pb(a)             push_back(a)\n#define      each(it,s)        for(auto it = s.begin(); it != s.end(); ++it)\n#define      rep(i, n)         for(int i = 0; i < (n); ++i)\n#define      fill(a)           memset(a, 0, sizeof (a))\n#define      sortA(v)          sort(v.begin(), v.end())\n#define      sortD(v)          sort(v.begin(), v.end(), greater<auto>())\n#define      X                 first\n#define      Y                 second\n\ntypedef long long ll;\nll mod = 1000000007;\nvector<int> graph[100100];\n\npii getDia(int u, int p = -1) {\n\tvector<int> dis;\n\tint ans = 0;\n\tfor (int c : graph[u]) if(c != p) {\n\t\tpii pp = getDia(c, u);\n\t\tans = max(ans, pp.X);\n\t\tdis.push_back(pp.Y + 1);\n\t}\n\tsort (dis.begin(), dis.end(), greater<int>());\n\tif(dis.size() == 0) return {0, 0};\n\tif (dis.size() == 1) return {max(ans, dis[0]), dis[0]};\n\tans = max(ans, dis[0] + dis[1]);\n\treturn {ans, dis[0]};\n}\n\nint main()\n{\n\tint n, k;\n\tscanf(\"%d%d\", &n, &k);\n\tvector<pii> ans;\n\tqueue<int> Q;\n\tint idx = 1;\n\tfor (int i = 1; i <= k; ++i) {\n\t\tQ.push(i+1);\n\t\tans.push_back({1, i+1});\n\t}\n\tidx = k+2;\n\twhile (idx <= n) {\n\t\tint x = Q.front();\n\t\tans.push_back({x, idx});\n\t\tQ.pop();\n\t\tQ.push(idx);\n\t\tidx += 1;\n\t}\n\tassert((int)ans.size() == n-1);\n\trep(i, ans.size()) {\n\t\tint u = ans[i].X;\n\t\tint v =ans[i].Y;\n\t\tgraph[u].push_back(v);\n\t\tgraph[v].push_back(u);\n\t}\n\tint dia = getDia(1).X;\n\tprintf(\"%d\\n\", dia);\n\tfor (int i = 0; i < ans.size(); ++i) {\n\t\tprintf(\"%d %d\\n\", ans[i].X, ans[i].Y);\n\t}\n\treturn 0;\n}\n"
}