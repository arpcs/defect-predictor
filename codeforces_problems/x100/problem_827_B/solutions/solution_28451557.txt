{
    "id": 28451557,
    "contestId": 827,
    "creationTimeSeconds": 1499803505,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "R2__D2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 11776000,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nvector<pair<int,int> >edges;\r\nint level[1234567],counter[1234567];\r\nint main(void)\r\n{\r\n    int nodes,k;\r\n    scanf(\"%d%d\",&nodes,&k);\r\n    queue<int>Q;\r\n    for(int i=1;i<=k;i++){\r\n        Q.push(i+1);\r\n        edges.push_back({1,i+1});\r\n        level[i+1]=1;\r\n        counter[level[i+1]]++;\r\n    }\r\n    int now=k+2;\r\n    int MaxLevel=1;\r\n    while(now<=nodes){\r\n        int value=Q.front();\r\n        edges.push_back({value,now});\r\n        level[now]=level[value]+1;\r\n        counter[level[now]]++;\r\n        MaxLevel=max(MaxLevel,level[now]);\r\n        now++;\r\n        Q.pop();\r\n    }\r\n    if(counter[MaxLevel] > 1)printf(\"%d\\n\",MaxLevel*2);\r\n    else printf(\"%d\\n\",MaxLevel*2 -1);\r\n    for(int i=0;i<edges.size();i++){\r\n        printf(\"%d %d\\n\",edges[i].first,edges[i].second);\r\n    }\r\n    return 0;\r\n}\r\n"
}