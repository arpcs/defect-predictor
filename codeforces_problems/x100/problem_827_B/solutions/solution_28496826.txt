{
    "id": 28496826,
    "contestId": 827,
    "creationTimeSeconds": 1499936443,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "AnishG"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 6451200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\nmap<ll, ll> adj;\nint disFromCen[100100];\n\nint main(){\n     int n, k, i, j;\n     cin >> n >> k;\n     for(i = 2;i <= n; i++){\n         adj[i] = max(i - k, 1);\n         disFromCen[i] = disFromCen[max(i-k, 1)] + 1;\n     }\n     cout << disFromCen[n] + disFromCen[n-1] << endl;\n     for(i = 2;i <= n; i++){\n        printf(\"%d %d\\n\", i, adj[i]);\n     }\n     return 0;\n}\n"
}