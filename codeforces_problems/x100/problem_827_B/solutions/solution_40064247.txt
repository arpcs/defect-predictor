{
    "id": 40064247,
    "contestId": 827,
    "creationTimeSeconds": 1530975933,
    "relativeTimeSeconds": 2133,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "alexbabalau"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1530973800
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <cstdio>\r\nusing namespace std;\r\nint N, K;\r\nbool check(int d)\r\n{\r\n    int leaf = K - 2, node = N - K - d + 1;\r\n    int nb = d / 2;\r\n    if(d % 2 == 0)\r\n        --nb;\r\n    return 1LL * nb * leaf >= node;\r\n}\r\n\r\nvoid construct(int d)\r\n{\r\n    printf(\"%d\\n\", d);\r\n    int leaf = K - 2, node = N - K - d + 1;\r\n    for(int i = 1; i <= d; i++)\r\n        printf(\"%d %d\\n\", i, i + 1);\r\n    int point = (d + 1) / 2, last = point, cnt = 0;\r\n    int nb = d / 2;\r\n    if(d % 2 == 0)\r\n        --nb;\r\n    int n = d + 1;\r\n    vector <int> L;\r\n    while(node > 0)\r\n    {\r\n        ++cnt;\r\n        ++n;\r\n        if(cnt == nb + 1)\r\n        {\r\n            L.push_back(last);\r\n            last = point;\r\n            cnt = 1;\r\n        }\r\n        printf(\"%d %d\\n\", last, n);\r\n        last = n;\r\n    }\r\n    for(int i = 0; i < L.size(); i++)\r\n    {\r\n        ++n;\r\n        printf(\"%d %d\\n\", L[i], n);\r\n    }\r\n    leaf -= L.size();\r\n    for(int i = 1; i <= leaf; i++)\r\n    {\r\n        ++n;\r\n        printf(\"%d %d\\n\", point, n);\r\n    }\r\n\r\n}\r\nvoid Solve()\r\n{\r\n    int left = 1, right = N - 1, sol, mid;\r\n    while(left <= right)\r\n    {\r\n        mid = (left + right) / 2;\r\n        if(check(mid))\r\n        {\r\n            sol = mid;\r\n            right = mid - 1;\r\n        }\r\n        else\r\n            left = mid + 1;\r\n    }\r\n    construct(sol);\r\n}\r\nint main()\r\n{\r\n    cin >> N >> K;\r\n\r\n    Solve();\r\n    return 0;\r\n}\r\n"
}