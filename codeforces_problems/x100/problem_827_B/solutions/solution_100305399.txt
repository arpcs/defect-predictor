{
    "id": 100305399,
    "contestId": 827,
    "creationTimeSeconds": 1607028769,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "R3KT"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 0,
    "source": "\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class HighLoad {\r\n\r\n\t// https://codeforces.com/contest/827/problem/B\r\n\t\r\n\tstatic int n, k;\r\n\t\r\n\tpublic static void main(String[] args) throws IOException, FileNotFoundException {\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t//BufferedReader in = new BufferedReader(new FileReader(\"HighLoad\"));\r\n\r\n\t\tStringTokenizer st = new StringTokenizer(in.readLine());\r\n\t\tn = Integer.parseInt(st.nextToken());\r\n\t\tk = Integer.parseInt(st.nextToken());\r\n\t\t\r\n\t\tint min=2;\r\n\t\tint max=n;\r\n\t\twhile (min < max) {\r\n\t\t\tint middle = (min + max)/2;\r\n\t\t\tif (check(middle)) {\r\n\t\t\t\tmax = middle;\r\n\t\t\t}\r\n\t\t\telse min = middle+1;\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(min);\r\n\t\t\r\n\t\tStringBuilder s = new StringBuilder();\r\n\t\tint nodep=1;\r\n\t\tfor (int i=0; i<min; i++ ) {\r\n\t\t\ts.append(nodep + \" \" + (nodep+1));\r\n\t\t\tnodep++;\r\n\t\t\ts.append(\"\\n\");\r\n\t\t}\r\n\t\t\r\n\t\tint needed = k - 2;\r\n\t\tint left = n - min - 1;\r\n\t\tArrayList<int[]> dist = new ArrayList<>();\r\n\t\tfor (int i=0; i<min-1; i++) {\r\n\t\t\tdist.add(new int[] {Math.max(min - i - 1, i + 1), i+1});\r\n\t\t\tdist.add(new int[] {Math.max(min - i - 1, i + 1), i+1});\r\n\t\t}\r\n\t\t\r\n\t\tCollections.sort(dist, new Comparator<int[]>() {\r\n\t\t\tpublic int compare(int[] a, int[] b) {\r\n\t\t\t\treturn a[0] - b[0];\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// take needed largest ones\r\n\t\tfor (int i=dist.size()-1; i>=dist.size()-needed; i--) {\r\n\t\t\tint can_take = min - dist.get(i)[0];\r\n\t\t\tif (left - can_take < 0) can_take = left;\r\n\t\t\tleft -= can_take;\r\n\t\t\t\r\n\t\t\tnodep++;\r\n\t\t\ts.append(dist.get(i)[1]+1 + \" \" + nodep);\r\n\t\t\ts.append(\"\\n\");\r\n\t\t\tcan_take--;\r\n\t\t\tfor (int j=0; j<can_take; j++) {\r\n\t\t\t\ts.append(nodep + \" \" + (nodep+1));\r\n\t\t\t\tnodep++;\r\n\t\t\t\ts.append(\"\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.print(s);\r\n\t\t\t\t\r\n\t}\r\n\t\r\n\tpublic static boolean check(int mid) {\r\n\t\tint needed = k - 2;\r\n\t\tint left = n - mid - 1;\r\n\t\tArrayList<Integer> dist = new ArrayList<>();\r\n\t\tfor (int i=0; i<mid-1; i++) {\r\n\t\t\tdist.add(Math.max(mid - i - 1, i + 1));\r\n\t\t\tdist.add(Math.max(mid - i - 1, i + 1));\r\n\t\t}\r\n\t\t\r\n\t\tCollections.sort(dist);\r\n\t\t\r\n\t\t// take needed largest ones\r\n\t\tfor (int i=dist.size()-1; i>=dist.size()-needed && i>=0; i--) {\r\n\t\t\tint can_take = mid - dist.get(i);\r\n\t\t\tif (can_take == 0) return false;\r\n\t\t\tleft -= can_take;\r\n\t\t}\r\n\t\t\r\n\t\treturn left <= 0;\r\n\t}\r\n}"
}