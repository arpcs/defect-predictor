{
    "id": 229791107,
    "contestId": 827,
    "creationTimeSeconds": 1698304947,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 827,
        "index": "B",
        "name": "High Load",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 827,
        "members": [
            {
                "handle": "man-ray"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499791500
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 264,
    "memoryConsumedBytes": 0,
    "source": "\r\nimport java.io.*;\r\nimport java.util.InputMismatchException;\r\n\r\npublic class P827B {\r\n    public static void main(String[] args) {\r\n        InputStream inputStream = System.in;\r\n        OutputStream outputStream = System.out;\r\n        InputReader sc = new InputReader(inputStream);\r\n        OutputWriter out = new OutputWriter(outputStream);\r\n        int n = sc.nextInt(), k = sc.nextInt();\r\n        //1 root\r\n        int x = n - 1 - k;\r\n        int y = x / k;//\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6700\u5c11\u5e26\u591a\u5c11\u4e2a\u8282\u70b9\r\n        int z = x % k;//\u6709\u591a\u5c11\u4e2a\u53f6\u5b50\u8282\u70b9\u8981\u591a\u5e26\u4e00\u4e2a\u8282\u70b9\r\n        int tot = 2;\r\n        int dis = (y + 1) * 2;\r\n        if (z == 1) dis += 1;\r\n        else if (z > 1) dis += 2;\r\n        out.println(dis);\r\n        for (int i = 0; i < z; i++) {\r\n            for (int j = 0; j < y + 1; j++) {\r\n                out.println(tot + 1 + \" \" + tot);\r\n                tot += 1;\r\n            }\r\n            out.println(1 + \" \" + tot);\r\n            tot++;\r\n        }\r\n        for (int i = 0; i < k - z; i++) {\r\n            for (int j = 0; j < y; j++) {\r\n                out.println(tot + 1 + \" \" + tot);\r\n                tot += 1;\r\n            }\r\n            out.println(1 + \" \" + tot);\r\n            tot++;\r\n        }\r\n        out.close();\r\n\r\n    }\r\n\r\n    static class OutputWriter {\r\n        private final PrintWriter writer;\r\n\r\n        public OutputWriter(OutputStream outputStream) {\r\n            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\r\n        }\r\n\r\n        public OutputWriter(Writer writer) {\r\n            this.writer = new PrintWriter(writer);\r\n        }\r\n\r\n        public void close() {\r\n            writer.close();\r\n        }\r\n\r\n        public OutputWriter println(long i) {\r\n            writer.println(i);\r\n            return this;\r\n        }\r\n\r\n        public OutputWriter println(double i) {\r\n            writer.println(i);\r\n            return this;\r\n        }\r\n\r\n        public OutputWriter println(String i) {\r\n            writer.println(i);\r\n            return this;\r\n        }\r\n\r\n        public OutputWriter println() {\r\n            writer.println();\r\n            return this;\r\n        }\r\n\r\n        public OutputWriter print(String i) {\r\n            writer.print(i);\r\n            return this;\r\n        }\r\n\r\n        public OutputWriter print(long i) {\r\n            writer.print(i);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    static class InputReader {\r\n        private InputStream stream;\r\n        private byte[] buf = new byte[1024];\r\n        private int curChar;\r\n        private int numChars;\r\n        private InputReader.SpaceCharFilter filter;\r\n\r\n        public InputReader(InputStream stream) {\r\n            this.stream = stream;\r\n        }\r\n\r\n        public double[] nextDoubleArray(int size) {\r\n            double[] array = new double[size];\r\n            for (int i = 0; i < size; i++) {\r\n                array[i] = readDouble();\r\n            }\r\n            return array;\r\n        }\r\n\r\n        private int read() {\r\n            if (numChars == -1) {\r\n                throw new InputMismatchException();\r\n            }\r\n            if (curChar >= numChars) {\r\n                curChar = 0;\r\n                try {\r\n                    numChars = stream.read(buf);\r\n                } catch (IOException e) {\r\n                    throw new InputMismatchException();\r\n                }\r\n                if (numChars <= 0) {\r\n                    return -1;\r\n                }\r\n            }\r\n            return buf[curChar++];\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(this.next(), 10);\r\n        }\r\n\r\n        public long nextLong() {\r\n            return Long.parseLong(this.next(), 10);\r\n        }\r\n\r\n        public String next() {\r\n            int c = read();\r\n            while (isSpaceChar(c)) {\r\n                c = read();\r\n            }\r\n            StringBuilder res = new StringBuilder();\r\n            do {\r\n                if (Character.isValidCodePoint(c)) {\r\n                    res.appendCodePoint(c);\r\n                }\r\n                c = read();\r\n            } while (!isSpaceChar(c));\r\n            return res.toString();\r\n        }\r\n\r\n        private boolean isSpaceChar(int c) {\r\n            if (filter != null) {\r\n                return filter.isSpaceChar(c);\r\n            }\r\n            return isWhitespace(c);\r\n        }\r\n\r\n        private static boolean isWhitespace(int c) {\r\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\r\n        }\r\n\r\n        public double readDouble() {\r\n            int c = read();\r\n            while (isSpaceChar(c)) {\r\n                c = read();\r\n            }\r\n            int sgn = 1;\r\n            if (c == '-') {\r\n                sgn = -1;\r\n                c = read();\r\n            }\r\n            double res = 0;\r\n            while (!isSpaceChar(c) && c != '.') {\r\n                if (c == 'e' || c == 'E') {\r\n                    return res * Math.pow(10, nextInt());\r\n                }\r\n                if (c < '0' || c > '9') {\r\n                    throw new InputMismatchException();\r\n                }\r\n                res *= 10;\r\n                res += c - '0';\r\n                c = read();\r\n            }\r\n            if (c == '.') {\r\n                c = read();\r\n                double m = 1;\r\n                while (!isSpaceChar(c)) {\r\n                    if (c == 'e' || c == 'E') {\r\n                        return res * Math.pow(10, nextInt());\r\n                    }\r\n                    if (c < '0' || c > '9') {\r\n                        throw new InputMismatchException();\r\n                    }\r\n                    m /= 10;\r\n                    res += (c - '0') * m;\r\n                    c = read();\r\n                }\r\n            }\r\n            return res * sgn;\r\n        }\r\n\r\n        public interface SpaceCharFilter {\r\n            public boolean isSpaceChar(int ch);\r\n\r\n        }\r\n\r\n    }\r\n}\r\n"
}