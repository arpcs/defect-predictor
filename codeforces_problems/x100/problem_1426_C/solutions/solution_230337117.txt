{
    "id": 230337117,
    "contestId": 1426,
    "creationTimeSeconds": 1698568828,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1426,
        "index": "C",
        "name": "Increase and Copy",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1426,
        "members": [
            {
                "handle": "Binarycoder99"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601280300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "// rohith kumar mokhara\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ull = unsigned long long;\r\nusing lld = long double;\r\n#define MAXI 200005\r\n#define fo(i, n) for (int i = 0; i < n; i++)\r\n#define foi(i, k, n) for (int i = k; i < n; i++)\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define v vector\r\n#define endl \"\\n\"\r\n#define fastio()                                                               \\\r\n  ios_base::sync_with_stdio(false);                                            \\\r\n  cin.tie(0);                                                                  \\\r\n  cout.tie(0);\r\n\r\nvoid print_vec(v<int> ans) {\r\n  fo(i, ans.size()) { cout << ans[i] << \" \"; }\r\n  cout << endl;\r\n}\r\n\r\n\r\n  bool sort_by_cond( const pair<int,int> &a,const pair<int,int> &b){\r\n    if(a.first!=b.first){\r\n      return a.first<b.first;\r\n    }\r\n    else if(a.first==b.first){\r\n      return a.second<b.second;\r\n    }\r\n  }\r\n\r\nint M = 1e9 + 7;\r\n\r\nll bin_exp(ll a, ll b) {\r\n  if (b == 0) {\r\n    return 1ll;\r\n  }\r\n  ll res = bin_exp(a, b / 2);\r\n  if (b % 2) {\r\n    return ((res *res)%M * a) % M;\r\n  } else {\r\n    return ((res * res) % M);\r\n  }\r\n}\r\n\r\nll mod_inv(ll a, ll p){\r\n  return bin_exp(a, p-2);\r\n}\r\n\r\nll factorial(ll n){\r\n  v<ll> fact(n+1);\r\n  fact[0]=1;\r\n  for(int i=1;i<=n;i++){\r\n    fact[i]=((fact[i-1]%M)*i)%M;\r\n  }\r\n  return fact[n];\r\n}\r\nll nCr(ll n, ll r){\r\n  if(r==0){\r\n    return 1;\r\n  }\r\n  if(n<r){\r\n    return 0;\r\n  }\r\n  ll ans = factorial(n);\r\n  ans%=M;\r\n  ans *= mod_inv(factorial(n-r),M);\r\n  ans%=M;\r\n  ans*= mod_inv(factorial(r),M);\r\n  ans%=M;\r\n  return ans;\r\n}\r\n\r\nvoid SieveOfEratosthenes(int n,v<int> a)\r\n{\r\n\r\n    bool prime[n + 1];\r\n    memset(prime, true, sizeof(prime));\r\n    for (int p = 2; p * p <= n; p++) {\r\n        if (prime[p] == true) {\r\n            for (int i = p * p; i <= n; i += p)\r\n                prime[i] = false;\r\n        }\r\n    }\r\n    for (int p = 2; p <= n; p++)\r\n        if (prime[p])\r\n            a.pb(p);\r\n\r\n}\r\n\r\nbool is_possible(string s,ll mid){\r\n  string s1,s2;\r\n  fo(i,mid){\r\n    s1.pb('1');\r\n  }\r\n  fo(i,mid){\r\n    s1.pb('2');\r\n  }\r\n  fo(i,mid){\r\n    s2.pb('2');\r\n  }\r\n  fo(i,mid){\r\n    s2.pb('1');\r\n  }\r\n  if(s.find(s1)!=string::npos||s.find(s2)!=string::npos){\r\n    return true;\r\n  }\r\n  else{\r\n    return false;\r\n  }\r\n}\r\nvoid solve() {\r\n  int n;\r\n  cin>>n;\r\n  ll mini = INT_MAX;\r\n  ll res;\r\n  if(n==1){\r\n    cout<<0<<endl;\r\n    return ;\r\n  }\r\n  for(int i = 1;i*i<=n;i++){\r\n    res = (i-1) + ((n-(i))+i-1)/(i);\r\n    mini = min(mini,res);\r\n  }\r\n  cout<<mini<<endl;\r\n}\r\n\r\n\r\nint main() {\r\n  int tc;\r\n  fastio() \r\n    cin>>tc;\r\n  while (tc--) {\r\n    solve();\r\n  }\r\n  return 0;\r\n}"
}