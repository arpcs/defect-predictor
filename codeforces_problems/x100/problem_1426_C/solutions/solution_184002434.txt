{
    "id": 184002434,
    "contestId": 1426,
    "creationTimeSeconds": 1670251998,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1426,
        "index": "C",
        "name": "Increase and Copy",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1426,
        "members": [
            {
                "handle": "ankit_satwik"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601280300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n \r\nint gcd(int a,int b){\r\n\treturn a%b==0?b:gcd(b,a%b);\r\n \t\r\n}\r\nint lcm(int a,int b){\r\n\treturn (a*b)/gcd(a,b);\r\n}\r\nstring reverse(string t){\r\n\tll n=t.length();\r\n\tstring s=\"\";\r\n\tfor(int i=n-1;i>=0;i--){\r\n\t\ts.push_back(t[i]);\r\n\t}\r\n\treturn s;\r\n//\tcout<<s<<endl;\r\n}\r\nint isSubstring(string s1, string s2)\r\n{\r\n    int M = s1.length();\r\n    int N = s2.length();\r\n \r\n    /* A loop to slide pat[] one by one */\r\n    for (int i = 0; i <= N - M; i++) {\r\n        int j;\r\n \r\n        /* For current index i, check for\r\n pattern match */\r\n        for (j = 0; j < M; j++)\r\n            if (s2[i + j] != s1[j])\r\n                break;\r\n \r\n        if (j == M)\r\n            return 1;\r\n    }\r\n \r\n    return 0;\r\n}\r\n\r\nvoid solve(){\r\n\tll n;\r\n\tcin>>n;\r\n\tll t=sqrt(n);\r\n\tll ans=0;\r\n\tans+=t-1;\r\n\tans+=t-1;\r\n\tll fin=t*t;\r\n\tll rem=n-fin;\r\n\tif(rem%t==0){\r\n\t\tans+=rem/t;\r\n\t}else{\r\n\t\tans+=rem/t+1;\r\n\t}\r\n\tcout<<ans<<endl;\r\n\treturn ;\r\n\t\r\n}\r\n\t\r\n\t\r\n\t\r\n\r\n \r\nint main(){\r\n\tll t;\r\n\tcin>>t;\r\n\twhile(t--){\t\r\n\tsolve();\r\n}\r\n\t\r\n    return 0;\r\n}\r\n \r\n"
}