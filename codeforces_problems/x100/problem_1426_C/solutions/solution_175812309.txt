{
    "id": 175812309,
    "contestId": 1426,
    "creationTimeSeconds": 1665610650,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1426,
        "index": "C",
        "name": "Increase and Copy",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1426,
        "members": [
            {
                "handle": "its_zeyad"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601280300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\r\n#include <iostream>\r\nusing namespace std;\r\n#include<string>\r\n#include<vector>\r\n#include<stack>\r\n#include<set>\r\n#include<map>\r\n#include<queue>\r\n#include <numeric>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<sstream>\r\n#include <bitset>\r\n#include<unordered_set>\r\n#include<unordered_map>\r\n#include<iomanip>\r\n#include<climits>\r\n# define rev(x,n) reverse(x.begin(),x.begin()+n);\r\n# define cnt(x,y) count(x.begin(),x.end(),y);\r\n# define mod (1000000000+7)\r\n# define ll long long int \r\n# define endl cout<<'\\n'\r\n#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\n// compete for fun\r\nvector<ll> divs;\r\nvoid Divisors(ll n)\r\n{\r\n    for (int i = 1; i <= sqrt(n); i++)\r\n    {\r\n        if (n % i == 0)\r\n        {\r\n            if (n / i == i)\r\n                divs.push_back(i);\r\n            else \r\n            {\r\n                divs.push_back(i); divs.push_back(n / i);\r\n            }\r\n        }\r\n    }\r\n    sort(divs.begin(), divs.end());\r\n}\r\n\r\nbool isPrime(int n)\r\n{\r\n    // Corner cases\r\n    if (n <= 1)\r\n        return false;\r\n    if (n <= 3)\r\n        return true;\r\n\r\n    // This is checked so that we can skip\r\n    // middle five numbers in below loop\r\n    if (n % 2 == 0 || n % 3 == 0)\r\n        return false;\r\n\r\n    // Using concept of prime number\r\n    // can be represented in form of\r\n    // (6*n + 1) or(6*n - 1) hence\r\n    // we have to go for every multiple of 6 and\r\n    // prime number would always be 1 less or 1 more than\r\n    // the multiple of 6.\r\n    for (int i = 5; i * i <= n; i = i + 6)\r\n        if (n % i == 0 || n % (i + 2) == 0)\r\n            return false;\r\n\r\n    return true;\r\n}\r\nll nextPerfectSquare(ll N)\r\n{\r\n    ll nextN = floor(sqrt(N)) + 1;\r\n\r\n    return nextN * nextN;\r\n}\r\nbool can(ll mid, ll n)\r\n{\r\n    ll che = 1;\r\n    ll sum = 0;\r\n    while (1)\r\n    {\r\n        if (che == mid)break;\r\n        sum = che * (mid+1 - che);\r\n        if (sum >= n)return true;\r\n        che++;\r\n    }\r\n    return false;\r\n}\r\nvoid solve()\r\n{\r\n    int n, x;\r\n    cin >> n;\r\n    int mini = 1e9;\r\n    ll l = 0, r = 70000;\r\n    while (l <= r)\r\n    {\r\n        ll mid = (l + r) / 2;\r\n        if (can(mid, n))\r\n        {\r\n            mini = mid;\r\n            r = mid - 1;\r\n        }\r\n        else\r\n            l = mid + 1;\r\n    }\r\n    cout << mini-1;\r\n    endl;\r\n}\r\n\r\nint main()\r\n{\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    //freopen(\"output.txt\", \"w\", stdout);\r\n    fast;\r\n    // sieve();\r\n    cout << fixed << setprecision(0);\r\n    int t = 1; cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}