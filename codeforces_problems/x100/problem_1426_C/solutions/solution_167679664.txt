{
    "id": 167679664,
    "contestId": 1426,
    "creationTimeSeconds": 1660075619,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1426,
        "index": "C",
        "name": "Increase and Copy",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1426,
        "members": [
            {
                "handle": "Xrythidon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601280300
    },
    "programmingLanguage": "Node.js",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "process.stdin.resume();\r\nprocess.stdin.setEncoding('utf-8');\r\n\r\nlet inputString = '';\r\nlet currentLine = 0;\r\n\r\nprocess.stdin.on('data', (inputStdin) => {\r\n    inputString += inputStdin;\r\n});\r\n\r\nprocess.stdin.on('end', (_) => {\r\n    inputString = inputString\r\n        .trim()\r\n        .split('\\n')\r\n        .map((string) => {\r\n            return string.trim();\r\n        });\r\n\r\n    main();\r\n});\r\n\r\nfunction readLine() {\r\n    return inputString[currentLine++];\r\n}\r\n\r\nfunction print(message){\r\n    return console.log(message)\r\n}\r\n\r\n/****** BELOW HERE START WRITING YOUR CODE IN main() FUNCTION   ***************************************/\r\n/**\r\n * Use \"readLine()\" function for input, which will return a string consisting the entire line, so accordingly split the string\r\n * when required.\r\n *\r\n * I am using console.log() to output\r\n */\r\nfunction main() {\r\n    var testsNumber = parseInt(readline(), 10);\r\n    for (var i = 0; i < testsNumber; i++) {\r\n        var minSum = parseInt(readline(), 10);\r\n        // all the increments should be done at the beginning so the clones can profit more from them\r\n        // we increment up to the ceil of sqrt(sum) since the clones will value more afterwards\r\n        // then we clone the value obtained another (sqrt(sum) - 1) times - it is important to clone it the appropriate number of times (be it 1 more or less  than sqrt times)\r\n        var increments = Math.ceil(Math.sqrt(minSum)) - 1;\r\n        var clones = Math.round(Math.sqrt(minSum)) - 1;\r\n        var moves = increments + clones;\r\n        print(moves);\r\n    }\r\n}\r\n"
}