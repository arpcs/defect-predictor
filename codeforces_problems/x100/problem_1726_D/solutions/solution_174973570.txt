{
    "id": 174973570,
    "contestId": 1726,
    "creationTimeSeconds": 1665148321,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "UnicISE"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 5836800,
    "source": "#include <stdio.h>\r\n#include <vector>\r\n#include <string.h>\r\nusing namespace std;\r\n\r\n//Now Solving: 1726D\r\n\r\nint t, n, m, u, v, ansptr;\r\nint ans[5], ansu[5], ansv[5], remain;\r\n\r\nvector<int> graph[200010], id[200010];\r\nint vis[200010];\r\n\r\n//DFS\r\nbool dfs(int pre, int pos){\r\n    if(remain == 0)\r\n        return false;\r\n    for(int i = 0; i < graph[pos].size(); i++){\r\n        //Previous edge\r\n        if(graph[pos][i] == pre)\r\n            continue;\r\n        //Deleted edge\r\n        if(ans[0] == id[pos][i] || ans[1] == id[pos][i])\r\n            continue;\r\n        //Loop detected\r\n        if(vis[graph[pos][i]] == 1){\r\n            if(ansptr <= 1){\r\n                ans[ansptr] = id[pos][i];\r\n                ansu[ansptr] = pos; ansv[ansptr] = graph[pos][i];\r\n                //printf(\"i: %d u: %d v: %d\\n\", ans[ansptr], ansu[ansptr], ansv[ansptr]);\r\n                remain--;\r\n                ansptr++;\r\n            }\r\n            else{\r\n                int aim = graph[pos][i];\r\n                bool conflag = (ansu[0]==ansu[1])||(ansu[0]==ansv[1])||(ansv[0]==ansu[1])||(ansv[0]==ansv[1]);\r\n                bool newflag = (pos==ansu[0]&&aim==ansu[1])||(pos==ansu[0]&&aim==ansv[1])||\r\n                               (pos==ansv[0]&&aim==ansu[1])||(pos==ansv[0]&&aim==ansv[1])||\r\n                               (pos==ansu[1]&&aim==ansu[0])||(pos==ansu[1]&&aim==ansv[0])||\r\n                               (pos==ansv[1]&&aim==ansu[0])||(pos==ansv[1]&&aim==ansv[0]);\r\n                if(conflag && newflag){\r\n                    return true;\r\n                }\r\n                else{\r\n                    ans[ansptr] = id[pos][i];\r\n                    ansu[ansptr] = pos; ansv[ansptr] = graph[pos][i];\r\n                    //printf(\"i: %d u: %d v: %d\\n\", ans[ansptr], ansu[ansptr], ansv[ansptr]);\r\n                    remain--;\r\n                    ansptr++;\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        //Standard DFS\r\n        else{\r\n            vis[graph[pos][i]] = 1;\r\n            if(dfs(pos, graph[pos][i])){\r\n                ans[ansptr] = id[pos][i];\r\n                ansu[ansptr] = pos; ansv[ansptr] = graph[pos][i];\r\n                //printf(\"i: %d u: %d v: %d\\n\", ans[ansptr], ansu[ansptr], ansv[ansptr]);\r\n                remain--;\r\n                ansptr++;\r\n                return false;\r\n            }\r\n        }\r\n        if(remain == 0)\r\n            return false;\r\n    }\r\n    return false;\r\n}\r\n\r\n//Main\r\nint main(){\r\n    scanf(\"%d\", &t);\r\n    for(; t > 0; t--){\r\n        //Input\r\n        scanf(\"%d %d\", &n, &m);\r\n        for(int i = 1; i <= m; i++){\r\n            scanf(\"%d %d\", &u, &v);\r\n            graph[u].push_back(v); id[u].push_back(i);\r\n            graph[v].push_back(u); id[v].push_back(i);\r\n        }\r\n        //Special Judge\r\n        if(n == 2){\r\n            printf(\"0\\n\");\r\n            continue;\r\n        }\r\n        else if(n == 3){\r\n            if(m == 2)\r\n                printf(\"00\\n\");\r\n            else\r\n                printf(\"010\\n\");\r\n            continue;\r\n        }\r\n        else if(m == n - 1){\r\n            for(int i = 1; i <= m; i++)\r\n                printf(\"0\");\r\n            printf(\"\\n\");\r\n            continue;\r\n        }\r\n        //DFS\r\n        remain = m - n + 1;\r\n        vis[1] = 1;\r\n        dfs(0, 1);\r\n        //Output\r\n        for(int i = 1; i <= m; i++){\r\n            if(i != ans[0] && i != ans[1] && i != ans[2])\r\n                printf(\"0\");\r\n            else\r\n                printf(\"1\");\r\n        }\r\n        printf(\"\\n\");\r\n        //Clear\r\n        for(int i = 1; i <= n; i++){\r\n            graph[i].clear();\r\n            id[i].clear();\r\n        }\r\n        memset(vis, 0, sizeof(vis));\r\n        ansptr = 0;\r\n        ans[0] = ans[1] = ans[2] = -1;\r\n    }\r\n    return 0;\r\n}"
}