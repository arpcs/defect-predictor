{
    "id": 177301266,
    "contestId": 1726,
    "creationTimeSeconds": 1666353829,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Epilogue"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 9728000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 2e5 + 3;\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\nint rnd(int l,int r) {\r\n    return l+rng()%(r-l+1);\r\n}\r\n\r\nint n, m;\r\nvector<pair<int, int>> adj[N];\r\npair<int, int> edge[N], par[N];\r\nint vst[N], res[N];\r\n\r\nvoid dfs(int u) {\r\n    vst[u] = 1;\r\n    for (pair<int, int> i : adj[u]) {\r\n        int v = i.first, id = i.second;\r\n        if (vst[v]) continue;\r\n        par[v] = make_pair(u, id);\r\n        dfs(v);\r\n        res[id] = 1;\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    cin >> n >> m;\r\n    for(int i = 1; i <= m; ++i) {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        edge[i] = make_pair(x, y);\r\n        adj[x].push_back(make_pair(y, i));\r\n        adj[y].push_back(make_pair(x, i));\r\n    }\r\n    dfs(1);\r\n    vector<int> du;\r\n    set<int> s;\r\n//    cout << endl;\r\n    for(int i = 1; i <= m; ++i) if (!res[i]) {\r\n        s.insert(edge[i].first);\r\n        s.insert(edge[i].second);\r\n        du.push_back(i);\r\n//        cout << edge[i].first << \" \" << edge[i].second << endl;\r\n    }\r\n    if (s.size() == 3 && du.size() == 3) {\r\n        int u = *s.rbegin(), x, y;\r\n        for (pair<int, int> i : adj[u]) {\r\n            int v = i.first, id = i.second;\r\n            if (res[id] == 0) {\r\n                swap(res[id], res[par[u].second]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for(int i = 1; i <= m; ++i) cout << res[i];\r\n    cout << endl;\r\n    for(int i = 1; i <= n; ++i) {\r\n        adj[i].clear();\r\n        vst[i] = 0;\r\n        res[i] = 0;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n//    freopen(\"testing.txt\", \"r\", stdin);\r\n//    freopen(\"outputing.txt\", \"w\", stdout);\r\n\r\n//    freopen(\"divisors.inp\", \"r\", stdin);\r\n//    freopen(\"divisors.out\", \"w\", stdout);\r\n    int test = 1; cin >> test;\r\n    while (test--) solve();\r\n}\r\n\r\n"
}