{
    "id": 182058026,
    "contestId": 1726,
    "creationTimeSeconds": 1669063286,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "lunchbox"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 498,
    "memoryConsumedBytes": 21196800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int N = 2e5;\r\n\r\nint find(int *e, int i) {\r\n  return e[i] < 0 ? i : e[i] = find(e, e[i]);\r\n}\r\nbool join(int *e, int i, int j) {\r\n  i = find(e, i), j = find(e, j);\r\n  if (i == j) return 0;\r\n  if (e[i] > e[j]) swap(i, j);\r\n  e[i] += e[j], e[j] = i;\r\n  return 1;\r\n}\r\n \r\nvector<pair<int, int>> ej[N];\r\nint p[N];\r\n\r\nvoid dfs(int i) {\r\n  for (auto [j, h] : ej[i])\r\n    if (p[j] == -1)\r\n      p[j] = h, dfs(j);\r\n}\r\n\r\nint main() {\r\n  ios::sync_with_stdio(false), cin.tie(NULL);\r\n  int t; cin >> t;\r\n  while (t--) {\r\n    static int e[N], f[N];\r\n    int n, m; cin >> n >> m;\r\n    fill(e, e + n, -1), fill(f, f + n, -1);\r\n    string s(m, '0');\r\n    for (int h = 0; h < m; h++) {\r\n      int u, v; cin >> u >> v, u--, v--;\r\n      if (join(e, u, v)) {\r\n        s[h] = '1';\r\n        ej[u].push_back({v, h}), ej[v].push_back({u, h});\r\n      } else if (!join(f, u, v)) {\r\n        fill(p, p + n, -1);\r\n        dfs(u);\r\n        s[h] = '1', s[p[v]] = '0';\r\n      }\r\n    }\r\n    cout << s << '\\n';\r\n    for (int i = 0; i < n; i++) ej[i].clear();\r\n  }\r\n}"
}