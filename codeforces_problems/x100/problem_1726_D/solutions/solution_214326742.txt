{
    "id": 214326742,
    "contestId": 1726,
    "creationTimeSeconds": 1689673032,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Maxmilite"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 8806400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define lint long long\r\n#define rep(_, __, ___) for (int _ = __; _ <= ___; ++_)\r\n\r\nint t;\r\nint n, m;\r\nstruct Edge {\r\n\tint from, to, next, vis;\r\n\tEdge(int to, int next) : to(to), next(next), vis(0) {}\r\n\tEdge() { to = next = vis = 0; }\r\n} e[400015];\r\nint cnt, head[200005];\r\nint vis[200005];\r\n\r\nvoid insert(int u, int v) {\r\n\te[++cnt].to = v;\r\n\te[cnt].from = u;\r\n\te[cnt].next = head[u];\r\n\te[cnt].vis = 0;\r\n\thead[u] = cnt;\r\n}\r\n\r\nint fa[200005];\r\n\r\nvoid dfs(int x) {\r\n\tvis[x] = 1;\r\n\tfor (int i = head[x]; i; i = e[i].next) {\r\n\t\tint v = e[i].to;\r\n\t\tif (!vis[v]) {\r\n\t\t\tfa[v] = x;\r\n\t\t\te[i].vis = 1;\r\n\t\t\tdfs(v);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcin >> t;\r\n\twhile (t--) {\r\n\t\tcnt = 0;\r\n\t\tcin >> n >> m;\r\n\t\trep(i, 1, n)\r\n\t\t\tvis[i] = 0;\r\n\t\trep(i, 1, n)\r\n\t\t\thead[i] = 0;\r\n\t\trep(i, 1, m) {\r\n\t\t\tint u, v;\r\n\t\t\tcin >> u >> v;\r\n\t\t\tinsert(u, v);\r\n\t\t\tinsert(v, u);\r\n\t\t}\r\n\t\tdfs(1);\r\n\t\tif (m == n + 2) {\r\n\t\t\tint a[7], cnt = 0;\r\n\t\t\trep(i, 1, m) {\r\n\t\t\t\tif (!e[i * 2 - 1].vis && !e[i * 2].vis) {\r\n\t\t\t\t\ta[++cnt] = e[i * 2 - 1].from;\r\n\t\t\t\t\ta[++cnt] = e[i * 2 - 1].to;\r\n\t\t\t\t\tif (cnt > 6) assert(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tsort(a + 1, a + 7);\r\n\t\t\tint flag1 = 0, flag2 = 0;\r\n\t\t\tif (a[1] == a[2] && a[3] == a[4] && a[5] == a[6]) {\r\n\t\t\t\ta[2] = a[3];\r\n\t\t\t\ta[3] = a[5];\r\n\t\t\t\tfor (int i = head[a[1]]; i; i = e[i].next) {\r\n\t\t\t\t\tif (e[i].to == a[2] || e[i].to == a[3]) {\r\n\t\t\t\t\t\te[i].vis = 1; \r\n\t\t\t\t\t\tflag1 = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tfor (int i = head[a[1]]; i; i = e[i].next) {\r\n\t\t\t\t\tif (e[i].to != a[2] && e[i].to != a[3] && e[i].vis) {\r\n\t\t\t\t\t\te[i].vis = 0;\r\n\t\t\t\t\t\tflag2 = 1; \r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tassert(flag1 && flag2);\r\n\t\t}\r\n\t\trep(i, 1, m) {\r\n\t\t\tcout << (e[i * 2 - 1].vis | e[i * 2].vis);\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}\r\n\treturn 0;\r\n}"
}