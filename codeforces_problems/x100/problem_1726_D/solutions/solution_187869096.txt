{
    "id": 187869096,
    "contestId": 1726,
    "creationTimeSeconds": 1672804526,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "efficient"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <set>\r\n#include <unordered_set>\r\n#include <utility>\r\n#include <map>\r\n#include <unordered_map>\r\n#include <vector>\r\n#include <climits>\r\n#include <string>\r\n#include <queue>\r\n#include <stack>\r\n#include <iomanip>\r\n#include <numeric>\r\n#include <chrono>\r\n#include <bitset>\r\n#include <array>\r\n#include <assert.h>\r\n#include <math.h>\r\n#include <time.h>\r\n#include <ctime>\r\n#include <random>\r\n#include <cstring>\r\n\r\nusing namespace std;\r\n\r\n#define ll long long \r\n#define nl '\\n'\r\n#define debug(x) cout << #x << \"=\" << x << \"; \"\r\n \r\nmt19937_64 rng(chrono::system_clock::now().time_since_epoch().count());\r\nconst ll mod = 998244353;\r\nconst long double pi = atan(1) * 4;\r\nint tt = 1;\r\n\r\nvoid solve(int cas) {\r\n    int n, m; cin >> n >> m;\r\n    vector<vector<int>> adj(n);\r\n    // map<pair<int, int>, int> edges;\r\n    vector<pair<pair<int, int>, int>> edges_v;\r\n    for (int i = 0; i < m; i++) {\r\n        int u, v; cin >> u >> v;\r\n        u--, v--;\r\n        adj[u].push_back(v);\r\n        adj[v].push_back(u);\r\n\r\n        if (u > v) swap(u, v);\r\n        // edges[{u, v}] = -1;\r\n        edges_v.push_back({{u, v}, -1});\r\n    }\r\n\r\n    vector<int> idx(m);\r\n    iota(idx.begin(), idx.end(), 0);\r\n    sort(idx.begin(), idx.end(), [&](int x, int y) {\r\n        return edges_v[x] < edges_v[y];\r\n    });\r\n    sort(edges_v.begin(), edges_v.end());\r\n\r\n    if (n == 2) {\r\n        assert(m == 1);\r\n        cout << 0 << nl;\r\n        return;\r\n    }\r\n    if (n == 3) {\r\n        if (m == 2) {\r\n            cout << \"00\" << nl;\r\n            return;\r\n        } else {\r\n            assert(m == 3);\r\n            cout << \"011\" << nl;\r\n            return;\r\n        }\r\n    }\r\n\r\n    vector<bool> vis(n);\r\n    function<void(int)> dfs = [&](int node) {\r\n        vis[node] = true;\r\n        for (auto nei : adj[node]) {\r\n            if (vis[nei]) continue;\r\n\r\n            auto it = lower_bound(edges_v.begin(), edges_v.end(), make_pair(make_pair(min(nei, node), max(nei, node)), -1));\r\n            it->second = 0;\r\n            assert(it->first == make_pair(min(nei, node), max(nei, node)));\r\n            // edges[{min(nei, node), max(nei, node)}] = 0;\r\n            dfs(nei);\r\n        }\r\n    };\r\n\r\n    dfs(0);\r\n\r\n    if (m <= n + 1) {\r\n        for (int i = 0; i < m; i++) {\r\n            if (edges_v[idx[i]].second == -1) {\r\n                cout << 1;\r\n            } else {\r\n                cout << 0;\r\n            }\r\n        }\r\n        \r\n        cout << nl;\r\n    } else {\r\n        assert(m == n + 2);\r\n        vector<pair<int, int>> bad;\r\n        map<int, int> cnt;\r\n        for (auto p : edges_v) {\r\n            if (p.second == -1) {\r\n                cnt[p.first.first]++, cnt[p.first.second]++;\r\n                bad.push_back(p.first);\r\n            }\r\n        }\r\n\r\n        bool all2 = true;\r\n        for (auto p : cnt) {\r\n            if (p.second != 2) {\r\n                all2 = false;\r\n            }\r\n        }\r\n\r\n        if (!all2) {\r\n            for (int i = 0; i < m; i++) {\r\n                if (edges_v[idx[i]].second == -1) {\r\n                    cout << 1;\r\n                } else {\r\n                    cout << 0;\r\n                }\r\n            }\r\n            \r\n            cout << nl;\r\n        } else {\r\n            auto it = lower_bound(edges_v.begin(), edges_v.end(), make_pair(bad[0], -1));\r\n            assert(it->first == bad[0]);\r\n            it->second = 0;\r\n            // edges[bad[0]] = 0;\r\n            for (auto nei : adj[bad[0].first]) {\r\n                if (nei != bad[0].second) {\r\n                    auto ittt = lower_bound(edges_v.begin(), edges_v.end(), make_pair(make_pair(min(bad[0].first, nei), max(bad[0].first, nei)), -1));\r\n                    assert(ittt->first == make_pair(min(bad[0].first, nei), max(bad[0].first, nei)));\r\n                    ittt->second = -1;\r\n                    // edges[{min(bad[0].first, nei), max(bad[0].first, nei)}] = -1;\r\n                }\r\n            }\r\n\r\n            for (int i = 0; i < m; i++) {\r\n                if (edges_v[idx[i]].second == -1) {\r\n                    cout << 1;\r\n                } else {\r\n                    cout << 0;\r\n                }\r\n            }\r\n            \r\n            cout << nl;\r\n        }\r\n    }\r\n\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n \r\n    cin >> tt;\r\n\r\n    for (int t = 1; t <= tt; t++) {\r\n        solve(t);\r\n    }\r\n    \r\n    return 0;\r\n}\r\n"
}