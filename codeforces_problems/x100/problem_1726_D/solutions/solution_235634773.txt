{
    "id": 235634773,
    "contestId": 1726,
    "creationTimeSeconds": 1701636912,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "aya_jandali"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "FAILED",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define F first\r\n#define S second\r\n#define pb push_back\r\n\r\nusing namespace std;\r\n\r\nconst int N = 200100;\r\n\r\nint n,m,parent[N],ran[N],ans[N];\r\nvector < int > adj[N];\r\nset < pair < int, int > > s;\r\nmap < pair < int, int >, int > mp;\r\n\r\nvoid _clear()\r\n{\r\n    s.clear();\r\n    mp.clear();\r\n    for(int i=0; i<n+6; i++)\r\n    {\r\n        adj[i].clear();\r\n        parent[i] = i;\r\n        ran[i] = 0;\r\n        ans[i] = 0;\r\n    }\r\n}\r\n\r\nint find_parent(int u)\r\n{\r\n    if(u==parent[u])\r\n        return u;\r\n    return parent[u] = find_parent(parent[u]);\r\n}\r\n\r\nbool un(int u, int v)\r\n{\r\n    int p1 = find_parent(u);\r\n    int p2 = find_parent(v);\r\n\r\n    if(p1!=p2)\r\n    {\r\n        if(ran[p1]<ran[p2])\r\n            parent[p1] = p2;\r\n        else if(ran[p2]<ran[p1])\r\n            parent[p2] = p1;\r\n        else\r\n        {\r\n            parent[p1] = p2;\r\n            ran[p2]++;\r\n        }\r\n\r\n        ans[mp[ {u,v}]] = 1;\r\n        adj[u].pb(v);\r\n        adj[v].pb(u);\r\n\r\n        return 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    int T;\r\n    T = 1;\r\n    cin>>T;\r\n    while(T--)\r\n    {\r\n        cin>>n>>m;\r\n        _clear();\r\n\r\n        for(int i=1; i<=m; i++)\r\n        {\r\n            int x, y;\r\n            cin>>x>>y;\r\n            if(x>y)\r\n                swap(x,y);\r\n            mp[ {x,y}] = i;\r\n            if(!un(x,y))\r\n                s.insert({x,y});\r\n        }\r\n\r\n        if(s.size()==3)\r\n        {\r\n            map < int, int > mp2;\r\n            for(auto &x:s)\r\n            {\r\n                mp2[x.F]++;\r\n                mp2[x.S]++;\r\n            }\r\n\r\n            bool cycle = 1;\r\n            for(auto &x:mp2)\r\n            {\r\n                if(x.S!=2)\r\n                    cycle = 0;\r\n            }\r\n            if(cycle)\r\n            {\r\n                int u,v;\r\n                u = (*s.begin()).F;\r\n                v = (*s.begin()).S;\r\n                int ind = mp[{u,v}];\r\n                ans[ind] = 1;\r\n                for(int i=1; i<=n; i++)\r\n                    parent[i] = 0;\r\n                parent[v] = v;\r\n                vector < int > node;\r\n                node.pb(v);\r\n                for(int i=0; i<node.size(); i++)\r\n                {\r\n                    int z = node[i];\r\n                    for(auto &x:adj[z])\r\n                    {\r\n                        if(!parent[x])\r\n                        {\r\n                            parent[x] = z;\r\n                            node.pb(x);\r\n                        }\r\n                    }\r\n                }\r\n                int mn = min(u , parent[u]);\r\n                int mx = max(u , parent[u]);\r\n                ans[mp[{mn , mx}]] = 0;\r\n            }\r\n        }\r\n\r\n        for(int i=1; i<=m; i++)\r\n            cout<<ans[i];\r\n        cout<<endl;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/*\r\n1\r\n8 10\r\n1 8\r\n1 4\r\n4 3\r\n4 2\r\n3 5\r\n2 7\r\n4 6\r\n2 3\r\n1 2\r\n1 3\r\n*/\r\n"
}