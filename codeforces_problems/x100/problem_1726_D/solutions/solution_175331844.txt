{
    "id": 175331844,
    "contestId": 1726,
    "creationTimeSeconds": 1665399704,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "tch1cherin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// Performance test\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt,fma\")\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int N = 2e5 + 10;\r\nint n, m;\r\nstring ans;\r\nbitset<N> vis;\r\nint depth[N];\r\nvector<pair<int, int>> g[N];\r\n\r\ninline void dfs(int u, int p) {\r\n    vis[u] = true;\r\n    depth[u] = (p == -1 ? 0 : depth[p] + 1);\r\n    for (auto [v, i]: g[u])\r\n        if (v != p) {\r\n            if (vis[v])\r\n                ans[i] = '1';\r\n            else\r\n                dfs(v, u);\r\n        }\r\n}\r\n\r\nstring color(int u) {\r\n    ans = string(m, '0');\r\n    vis = vector<bool>(n, false);\r\n    depth = vector<int>(n);\r\n    dfs(u, -1);\r\n    return ans;\r\n}\r\n\r\nvoid solve_case() {\r\n    cin >> n >> m;\r\n    for (int i = 0; i < n; i++) {\r\n        g[i].clear();\r\n        vis[i] = false;\r\n    }\r\n    \r\n    vector<int> u(m), v(m);\r\n    for (int i = 0; i < m; i++) {\r\n        cin >> u[i] >> v[i];\r\n        u[i]--, v[i]--;\r\n        g[u[i]].push_back({v[i], i});\r\n        g[v[i]].push_back({u[i], i});\r\n    }\r\n\r\n    vector<bool> used(m, false);\r\n    vector<int> cnt(n, 0);\r\n    string s = color(0);\r\n    for (int u = 0; u < n; u++)\r\n        for (auto [v, id]: g[u])\r\n            if (!used[id] && s[id] == '1') {\r\n                used[id] = true;\r\n                cnt[u]++;\r\n                cnt[v]++;\r\n            }\r\n\r\n    if (count(cnt.begin(), cnt.end(), 2) < 3) {\r\n        cout << ans << \"\\n\";\r\n    } else {\r\n        vector<int> v;\r\n        for (int i = 0; i < n; i++)\r\n            if (cnt[i] == 2)\r\n                v.push_back(i);\r\n\r\n        sort(v.begin(), v.end(), [](int x, int y) {\r\n            return depth[x] < depth[y];\r\n        });\r\n\r\n        cout << color(v[1]) << \"\\n\";\r\n    }\r\n}\r\n\r\nint32_t main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int t = 1;\r\n    cin >> t;\r\n    for (int i = 0; i < t; i++)\r\n        solve_case();\r\n}"
}