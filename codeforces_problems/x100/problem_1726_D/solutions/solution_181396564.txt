{
    "id": 181396564,
    "contestId": 1726,
    "creationTimeSeconds": 1668763639,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "December456"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 8089600,
    "source": "#include <cstdio>\r\n#include <cassert>\r\n#include <vector>\r\n\r\nconst int maxn = 200000 + 5;\r\n\r\nstruct Edge { int v, nxt; } e[maxn << 1];\r\n\r\nint t, n, m, len;\r\nint U[maxn], V[maxn];\r\nint dis[maxn], h[maxn], f[maxn];\r\nbool vis[maxn], vis1[maxn];\r\nchar buf[maxn];\r\n\r\ninline void add_edge(int u, int v) { e[len] = {v, h[u]}; h[u] = len ++; }\r\n\r\nvoid dfs(int u, int fa)\r\n{\r\n    vis[u] = true;\r\n    for (int i = h[u]; i >= 0; i = e[i].nxt)\r\n    {\r\n        int v = e[i].v;\r\n        if (vis[v] || v == fa) continue;\r\n        buf[f[v] = (i >> 1)] = 1;\r\n        dis[v] = dis[u] + 1;\r\n        dfs(v, u);\r\n    }\r\n}\r\n\r\nbool check(int u, int fa)\r\n{\r\n    vis1[u] = true;\r\n    for (int i = h[u]; i >= 0; i = e[i].nxt)\r\n    {\r\n        int v = e[i].v;\r\n        if (buf[i >> 1] || v == fa) continue;\r\n        if (vis1[v]) return false;\r\n        if (!check(v, u)) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d\", &t);\r\n    while (t --)\r\n    {\r\n        scanf(\"%d%d\", &n, &m);\r\n        for (int i = 1; i <= n; i ++)\r\n            vis[i] = vis1[i] = buf[i] = dis[i] = 0, h[i] = -1;\r\n        for (int i = n + 1; i <= m; i ++) buf[i] = 0;\r\n        len = 0;\r\n        for (int i = 0; i < m; i ++)\r\n        {\r\n            scanf(\"%d%d\", &U[i], &V[i]);\r\n            add_edge(U[i], V[i]);\r\n            add_edge(V[i], U[i]);\r\n        }\r\n        dfs(1, 0);\r\n        bool fl = false, ok = true;\r\n        int u, id;\r\n        for (int i = 0; i < m && !fl && !ok; i ++)\r\n            if (fl = !buf[i])\r\n            {\r\n                id = i; u = dis[U[i]] > dis[V[i]] ? U[i] : V[i];\r\n                ok = check(U[i], 0);\r\n            }\r\n\r\n        int cnt = 0;\r\n        for (int i = 0; i < m; i ++)\r\n            cnt += buf[i];\r\n        assert(!cnt || cnt == n - 1);\r\n\r\n        if (!ok)\r\n        {\r\n            assert(!buf[id]);\r\n            assert(buf[f[u]]);\r\n            buf[id] = 1, buf[f[u]] = 0;\r\n        }\r\n\r\n        cnt = 0;\r\n        for (int i = 0; i < m; i ++)\r\n            cnt += buf[i];\r\n//        assert(!cnt || cnt == n - 1);\r\n\r\n        for (int i = 0; i < m; i ++)\r\n            putchar(buf[i] + '0');\r\n        putchar('\\n');\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}