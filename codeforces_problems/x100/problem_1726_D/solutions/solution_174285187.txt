{
    "id": 174285187,
    "contestId": 1726,
    "creationTimeSeconds": 1664648059,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "nek12312378"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 10444800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define int int64_t\r\n#define vi vector<int>\r\n#define vii vector<vector<int>>\r\n#define pii pair<int, int>\r\n#define pll pair<ll, ll>\r\n#define tests int t; cin >> t; while (t--)\r\n#define P complex<C>\r\n#define pb push_back\r\n#define X real()\r\n#define Y imag()\r\n#define all(x) x.begin(), x.end()\r\n\r\nconst int MOD = 1e9 + 7, MOD1 = 998244353, A = 2987239, A1 = 2349813;\r\n\r\ntypedef long long ll;\r\ntypedef long double C;\r\n\r\nvii graph, color;\r\nvi was;\r\n\r\nvoid dfs(int v){\r\n    was[v] = 1;\r\n    for(auto e: graph[v]){\r\n        if(was[e]) continue;\r\n        color[v][e] = 1;\r\n        color[e][v] = 1;\r\n        dfs(e);\r\n    }\r\n}\r\n\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    tests {\r\n        int n, m;\r\n        cin >> n >> m;\r\n        graph.assign(n, vi());\r\n        color.assign(n, vi(n));\r\n        was.assign(n, 0);\r\n        vector<pii> edge(m);\r\n        for (int i = 0 ; i < m ; ++i) {\r\n            int a, b;\r\n            cin >> a >> b;\r\n            --a;\r\n            --b;\r\n            graph[a].pb(b);\r\n            graph[b].pb(a);\r\n            edge[i] = {a, b};\r\n        }\r\n        int best = 0, v = 0;\r\n        for (int i = 0 ; i < n ; ++i) {\r\n            if(graph[i].size() > best){\r\n                best = graph[i].size();\r\n                v = i;\r\n            }\r\n        }\r\n        dfs(v);\r\n        for (auto e : edge) {\r\n            cout << color[e.first][e.second];\r\n        }\r\n        cout << '\\n';\r\n    }\r\n}\r\n"
}