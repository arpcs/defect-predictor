{
    "id": 172337065,
    "contestId": 1726,
    "creationTimeSeconds": 1663324967,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "yixiaofuyun"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nusing lol=long long int;\r\n#define endl \"\\n\"\r\n\r\nvoid dfs(int u,const vector<vector<pair<int,int>>>& g,vector<bool>& vis,vector<int>& dep,vector<int>& par,string& s)\r\n{\r\n    vis[u]=true;\r\n    for(auto [v,idx]:g[u])\r\n    {\r\n        if(vis[v])  continue;\r\n        dep[v]=dep[u]+1;\r\n        par[v]=u;\r\n        s[idx]='1';\r\n        dfs(v,g,vis,dep,par,s);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\nios_base::sync_with_stdio(false);\r\ncin.tie(NULL);\r\nint _=1;\r\ncin>>_;\r\nwhile(_--)\r\n{\r\n    int n,m;\r\n    cin>>n>>m;\r\n    vector<vector<pair<int,int>>> g(n+1);\r\n    vector<pair<int,int>> edges(m);\r\n    string s(m,'0');\r\n    for(int i=0;i<m;i++)\r\n    {\r\n        int u,v;\r\n        cin>>u>>v;\r\n        edges[i]={u,v};\r\n        g[u].push_back({v,i});\r\n        g[v].push_back({u,i});\r\n    }\r\n    vector<bool> vis(n+1,false);\r\n    vector<int> dep(n+1,0),par(n+1,-1);\r\n    dfs(1,g,vis,dep,par,s);\r\n    map<int,int> cnt;\r\n    for(int i=0;i<m;i++)\r\n    {\r\n        if(s[i]=='0')\r\n        {\r\n            cnt[edges[i].first]++;\r\n            cnt[edges[i].second]++;\r\n        }\r\n    }\r\n    if(cnt.size()==3)\r\n    {\r\n        int mn=2*n+5,mx=0;\r\n        for(auto [_,c]:cnt)\r\n        {\r\n            mn=min(mn,c);\r\n            mx=max(mx,c);\r\n        }\r\n        if(mn==mx && mn==2)\r\n        {\r\n            vector<pair<int,int>> can;\r\n            for(auto [v,_]:cnt) can.push_back({dep[v],v});\r\n            sort(can.rbegin(),can.rend());\r\n            int u=can[0].second;\r\n            int i,j;    //replace edge i with edge j\r\n            for(auto [v,idx]:g[u])\r\n            {\r\n                if(s[idx]=='0') i=idx;\r\n                else if(v==par[u])    j=idx;\r\n            }\r\n            s[i]='1';\r\n            s[j]='0';\r\n        }\r\n    }\r\n    cout<<s<<endl;\r\n}\r\nreturn 0;\r\n}"
}