{
    "id": 179841793,
    "contestId": 1726,
    "creationTimeSeconds": 1667789480,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "MyLeg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1528,
    "memoryConsumedBytes": 32870400,
    "source": "#include <iostream>\r\n#include <stack>\r\n#include <algorithm>\r\n#include <vector>\r\nusing namespace std;\r\n\r\n\r\nvector < pair< int,int > > g[200002];\r\nbool mark[200002];\r\nint parent[200002];\r\nchar res[200012];\r\nint depth[200002];\r\n\r\nvoid dfs(int x) {\r\n    mark[x] = true;\r\n    for(size_t j = 0; j < g[x].size(); ++j) {\r\n        pair<int,int> cur = g[x][j];\r\n        int u = cur.first;\r\n        int e = cur.second;\r\n\r\n        if(!mark[u])  {\r\n            parent[u] = x;\r\n            depth[u] = depth[x] + 1;\r\n            dfs(u);\r\n        }\r\n        else {\r\n            if (parent[x] != u) {\r\n                res[e] = '1';\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    scanf(\"%d%d\", &n, &m);\r\n    for(int i=1;i<=n;++i) {\r\n        parent[i] = 0;\r\n        mark[i] = false;\r\n        g[i].clear();\r\n        depth[i] = 0;\r\n    }\r\n    for(int i = 0; i < m;  ++i) {\r\n        int u, v;\r\n        scanf(\"%d%d\", &u, &v);\r\n        g[u].push_back(make_pair(v, i));\r\n        g[v].push_back(make_pair(u, i));\r\n        res[i] = '0';\r\n    }\r\n\r\n\r\n\r\n    parent[1] = 0;\r\n    depth[1] = 1;\r\n    dfs(1);\r\n\r\n    if (m == n+2) {\r\n        int mnl = -1;\r\n        int mxd = -1;\r\n        for(int i = 1; i <= n; ++i) {\r\n            for(size_t j = 0; j < g[i].size(); ++j) {\r\n                int v = g[i][j].first;\r\n                if (depth[v] < depth[i] - 1) {\r\n                    if (mxd < depth[i]) {\r\n                        mxd = depth[i];\r\n                        mnl = i;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        vector<int> bads;\r\n        for(size_t j = 0; j < g[mnl].size(); ++j) {\r\n            int v = g[mnl][j].first;\r\n            if (depth[v] < depth[mnl] - 1) {\r\n                bads.push_back(v);\r\n            }\r\n        }\r\n\r\n        if (bads.size() == 2) {\r\n            if (depth[bads[0]] < depth[bads[1]]) swap(bads[0], bads[1]);\r\n            bool bingo = false;\r\n            for(size_t j = 0; j < g[bads[0]].size(); ++j) {\r\n                int v = g[bads[0]][j].first;\r\n                if (v == bads[1] and v != parent[bads[0]]) {\r\n                    bingo = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(bingo) {\r\n                for(size_t j = 0; j < g[bads[0]].size(); ++j) {\r\n                    int v = g[bads[0]][j].first;\r\n                    int e = g[bads[0]][j].second;\r\n                    if (v == bads[1]) {\r\n                        res[e] = '0';\r\n                    }\r\n                    if (v == parent[bads[0]]) {\r\n                        res[e] = '1';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(int i = 0; i < m; ++i) {\r\n        printf(\"%c\", res[i]);\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\r\nint main () {\r\n    int t;\r\n    scanf(\"%d\", &t);\r\n    while(t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}