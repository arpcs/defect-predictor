{
    "id": 173827458,
    "contestId": 1726,
    "creationTimeSeconds": 1664376087,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "zhongzhudeng"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1060,
    "memoryConsumedBytes": 27443200,
    "source": "#include <algorithm>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <string>\n#include <vector>\nusing namespace std;\n\nvoid dfs(int u, const vector<vector<pair<int, int>>>& adj,\n         vector<bool>& visited, vector<int>& dep, vector<int>& parents,\n         string& s) {\n  visited[u] = true;\n  for (auto [v, idx] : adj[u]) {\n    if (visited[v]) continue;\n    dep[v] = dep[u] + 1;\n    parents[v] = u;\n    s[idx] = '1';\n    dfs(v, adj, visited, dep, parents, s);\n  }\n}\n\nvoid solve() {\n  int n, m, u, v;\n  cin >> n >> m;\n  vector<vector<pair<int, int>>> adj(n);\n  vector<pair<int, int>> edges(m);\n  string s(m, '0');\n  for (int i = 0; i < m; i++) {\n    scanf(\"%d %d\\n\", &u, &v);\n    u--, v--;\n    edges[i] = {u, v};\n    adj[u].push_back({v, i});\n    adj[v].push_back({u, i});\n  }\n  vector<bool> visited(n, false);\n  vector<int> dep(n, 0), parents(n, -1);\n  dfs(0, adj, visited, dep, parents, s);\n\n  map<int, int> cnt;\n  for (int i = 0; i < m; i++) {\n    if (s[i] == '0') {\n      cnt[edges[i].first]++;\n      cnt[edges[i].second]++;\n    }\n  }\n\n  if (cnt.size() == 3) {\n    auto [emn, emx] = minmax_element(\n        cnt.begin(), cnt.end(),\n        [](const auto& l, const auto& r) { return l.second < r.second; });\n    int mn = emn->second, mx = emx->second;\n    if (mn == mx && mn == 2) {\n      vector<pair<int, int>> can;\n      for (auto [v, _] : cnt) can.push_back({dep[v], v});\n      sort(can.rbegin(), can.rend());\n      int u = can[0].second;\n      int i, j;  // replace edge i with edge j\n      for (auto [v, idx] : adj[u]) {\n        if (s[idx] == '0')\n          i = idx;\n        else if (v == parents[u])\n          j = idx;\n      }\n      s[i] = '1';\n      s[j] = '0';\n    }\n  }\n  cout << s << endl;\n}\nint main(int argc, const char** argv) {\n  int t;\n  cin >> t;\n  for (int i = 0; i < t; i++) solve();\n  return 0;\n}"
}