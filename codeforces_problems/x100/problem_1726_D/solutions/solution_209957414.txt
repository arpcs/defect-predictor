{
    "id": 209957414,
    "contestId": 1726,
    "creationTimeSeconds": 1687002853,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Komorebi_03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 764,
    "memoryConsumedBytes": 38400000,
    "source": "// LUOGU_RID: 112882567\n//By:Komorebi_03\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 2e6+10;\r\nint T,n,m,pre,flag,u[N],v[N],du[N],fa[N];\r\ninline int read()\r\n{\r\n    int x=0,f=1;char ch=getchar();\r\n    while (ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=getchar();}\r\n    while (ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\r\n    return x*f;\r\n}\r\n\r\nint Find(int x)\r\n{\r\n    if(fa[x]==x)\r\n        return x;\r\n    return fa[x]=Find(fa[x]);\r\n}\r\n\r\nvoid init()\r\n{\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        fa[i]=i;\r\n        du[i]=0;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    T=read();\r\n    while (T--)\r\n    {\r\n        vector<int> g;\r\n        pre=0;\r\n        flag=0;\r\n        n=read();\r\n        m=read();\r\n        init();\r\n        for (int i=1;i<=m;i++)\r\n        {\r\n            u[i]=read();\r\n            v[i]=read();\r\n            int r1=Find(u[i]);\r\n            int r2=Find(v[i]);\r\n            if(r1!=r2)\r\n            {\r\n                fa[r1]=r2;\r\n                g.push_back(1);\r\n            }\r\n            else\r\n            {\r\n\t\t\t    // flag+=(++du[u[i]]==2);\r\n\t\t\t    // flag+=(++du[v[i]]==2);\r\n                if(++du[u[i]]==2)\r\n                    flag++;\r\n                if(++du[v[i]]==2)\r\n                    flag++;\r\n                g.push_back(0);\r\n                pre=i;\r\n            }\r\n        }\r\n        if(flag==3)\r\n        {\r\n            init();\r\n            fa[Find(u[pre])]=Find(v[pre]);\r\n            for (int i=0;i<m;i++)\r\n            {\r\n                if(g[i])\r\n                {\r\n                    if(Find(u[i+1])==Find(v[i+1]))\r\n\t\t\t\t    {\r\n\t\t\t \t\t    g[i]=0;\r\n\t\t\t \t\t    break;\r\n\t\t\t\t    }\r\n\t\t\t\t    fa[Find(u[i+1])]=Find(v[i+1]);\r\n                }\r\n            }\r\n            g[pre-1]=1;\r\n        }\r\n        for (int i=0;i<g.size();i++)\r\n            cout<<g[i];\r\n        putchar('\\n');\r\n    }\r\n    return 0;\r\n    //Amireux_35\r\n}\r\n\r\n/*\r\n5 7\r\n\r\n1 2\r\n2 3\r\n3 4\r\n4 5\r\n5 1\r\n1 3\r\n3 5\r\n*/"
}