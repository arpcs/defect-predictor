{
    "id": 177221330,
    "contestId": 1726,
    "creationTimeSeconds": 1666287800,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "fat_nerd"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n \r\nconstexpr char nl = '\\n';\r\n\r\nvoid solve() {\r\n   int n, m; cin >> n >> m;\r\n   std::vector<std::vector<std::pair<int, int>>> g(n);\r\n   std::vector<std::pair<int, int>> p(m);\r\n\r\n   for (int i = 0, u, v; i < m; i++) {\r\n      cin >> u >> v;\r\n      --u; --v;\r\n      p[i] = {u, v};\r\n      g[u].push_back({v, i});\r\n      g[v].push_back({u, i});\r\n   }\r\n\r\n   std::vector<int> res(m, 0);\r\n   std::vector<bool> vis(n, false);\r\n   function<void(int, int)> dfs = [&](int u, int p) {\r\n      vis[u] = true;\r\n      for (auto e : g[u]) {\r\n         int v, i; tie(v, i) = e;\r\n         if (v == p) continue;\r\n         if (vis[v]) {\r\n            res[i] = 1; continue;\r\n         }\r\n         dfs(v, u);\r\n      }\r\n   };\r\n   dfs(0, -1);\r\n   if (m == n + 2) {\r\n      set<int> s;\r\n      int ptr = -1;\r\n      for (int i = 0; i < m; i++) {\r\n         if (res[i] == 1) {\r\n            s.insert(p[i].first);\r\n            s.insert(p[i].second);\r\n            if (ptr == -1) ptr = i;\r\n         }\r\n      }\r\n      if (s.size() == 3) {\r\n         for (int i = 0; i < m; i++) if (res[i] == 0 && g[p[i].first].size() > 1) {\r\n            res[i] = 1; break;\r\n         }\r\n         res[ptr] = 0;\r\n      }\r\n   }\r\n\r\n   for (int i = 0; i < m; i++) {\r\n      cout << res[i];\r\n   }\r\n   cout << nl;\r\n}\r\n\r\nint main() {\r\n   ios::sync_with_stdio(false);\r\n   cin.tie(nullptr);\r\n   \r\n   int t = 1;\r\n   cin >> t;\r\n   while (t--) {\r\n      solve();\r\n   }\r\n}\r\n"
}