{
    "id": 181406995,
    "contestId": 1726,
    "creationTimeSeconds": 1668771052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "poyon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1060,
    "memoryConsumedBytes": 54272000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ld = long double;\r\n// --------------------------------------------------------\r\n#define FOR(i,l,r) for (ll i = (l); i < (r); ++i)\r\n#define RFOR(i,l,r) for (ll i = (r)-1; (l) <= i; --i)\r\n#define REP(i,n) FOR(i,0,n)\r\n#define RREP(i,n) RFOR(i,0,n)\r\n#define ALL(c) (c).begin(), (c).end()\r\n#define RALL(c) (c).rbegin(), (c).rend()\r\n#define SORT(c) sort(ALL(c))\r\n#define RSORT(c) sort(RALL(c))\r\n#define MIN(c) *min_element(ALL(c))\r\n#define MAX(c) *max_element(ALL(c))\r\n#define COUNT(c,v) count(ALL(c),(v))\r\n#define SZ(c) ((ll)(c).size())\r\n#define BIT(b,i) (((b)>>(i)) & 1)\r\n#define PCNT(b) ((ll)__builtin_popcountll(b))\r\n#define P0(i) (((i) & 1) == 0)\r\n#define P1(i) (((i) & 1) == 1)\r\n#define LB(c,v) distance((c).begin(), lower_bound(ALL(c), (v)))\r\n#define UB(c,v) distance((c).begin(), upper_bound(ALL(c), (v)))\r\n#define UQ(c) do { SORT(c); (c).erase(unique(ALL(c)), (c).end()); } while (0)\r\n#define END(...) do { print(__VA_ARGS__); exit(0); } while (0)\r\n#define elif else if\r\ntemplate<class T> using PQ_max = priority_queue<T>;\r\ntemplate<class T> using PQ_min = priority_queue<T, vector<T>, greater<T>>;\r\nconstexpr int inf = (1 << 30) - 1;   // 1073741824 - 1\r\nconstexpr ll INF = (1LL << 62) - 1;  // 4611686018427387904 - 1\r\n#ifdef _LOCAL\r\n    #define debug_bar cerr << \"----------------------------------------\\n\";\r\n    #define debug_header cerr << \"[\" << __FUNCTION__ << \":\" << __LINE__ << \"] \"\r\n    #define debug(...) do { debug_header; cerr << #__VA_ARGS__ << \" = \"; view(__VA_ARGS__); cerr << '\\n'; } while (0)\r\n    #define debug2(vv) do { debug_header; cerr << #vv << \" = [\\n\"; view2d(vv); cerr << \"  ]\\n\"; } while (0)\r\n    #define debug3(vvv) do { debug_header; cerr << #vvv << \" = [\\n\"; view3d(vvv); cerr << \"  ]\\n\"; } while (0)\r\n    void view() {}\r\n    void view(const int& a) { if (abs(a) == inf) { cerr << \"+-\"[signbit(a)] << \"inf\"; } else { cerr << a; } }\r\n    void view(const ll& a) { if (abs(a) == INF) { cerr << \"+-\"[signbit(a)] << \"INF\"; } else { cerr << a; } }\r\n    template<class T> void view(const T& a) { cerr << a; }\r\n    template<class P1, class P2> void view(const pair<P1, P2>& a) { cerr << \"(\"; view(a.first); cerr << \", \"; view(a.second); cerr << \")\"; }\r\n    template<class T1, class T2, class T3> void view(const tuple<T1, T2, T3>& a) { cerr << \"(\"; view(get<0>(a)); cerr << \", \"; view(get<1>(a)); cerr << \", \"; view(get<2>(a)); cerr << \")\"; }\r\n    template<class T1, class T2, class T3, class T4> void view(const tuple<T1, T2, T3, T4>& a) { cerr << \"(\"; view(get<0>(a)); cerr << \", \"; view(get<1>(a)); cerr << \", \"; view(get<2>(a)); cerr << \", \"; view(get<3>(a)); cerr << \")\"; }\r\n    template<class T1, class T2, class T3, class T4, class T5> void view(const tuple<T1, T2, T3, T4, T5>& a) { cerr << \"(\"; view(get<0>(a)); cerr << \", \"; view(get<1>(a)); cerr << \", \"; view(get<2>(a)); cerr << \", \"; view(get<3>(a)); cerr << \", \"; view(get<4>(a)); cerr << \")\"; }\r\n    template<class T> void view(const vector<T>& v){ cerr << \"[\"; for (int i = 0; i < (int)v.size(); i++) { if (i) { cerr << \", \"; } view(v[i]); } cerr << \"]\"; }\r\n    template<class T> void view(const vector<vector<T>>& vv){ cerr << \"[\"; for (int i = 0; i < (int)vv.size(); i++) { if (i) { cerr << \", \"; } view(vv[i]); } cerr << \"]\"; }\r\n    template<class K, class V> void view(const map<K, V>& mp){ cerr << \"[\"; for (auto it = mp.begin(); it != mp.end(); it++) { if (it != mp.begin()) { cerr << \", \"; } cerr << \"(\"; view(it->first); cerr << \", \"; view(it->second); cerr << \")\"; } cerr << \"]\"; }\r\n    template<class K, class V> void view(const multimap<K, V>& mmp){ cerr << \"[\"; for (auto it = mmp.begin(); it != mmp.end(); it++) { if (it != mmp.begin()) { cerr << \", \"; } cerr << \"(\"; view(it->first); cerr << \", \"; view(it->second); cerr << \")\"; } cerr << \"]\"; }\r\n    template<class T> void view(const set<T>& s){ cerr << \"[\"; for (auto it = s.begin(); it != s.end(); it++) { if (it != s.begin()) { cerr << \", \"; } view(*it); } cerr << \"]\"; }\r\n    template<class T> void view(const multiset<T>& ms){ cerr << \"[\"; for (auto it = ms.begin(); it != ms.end(); it++) { if (it != ms.begin()) { cerr << \", \"; } view(*it); } cerr << \"]\"; }\r\n    template<class T> void view(const deque<T>& d){ cerr << \"(front)<-[\"; for (auto it = d.begin(); it != d.end(); it++) { if (it != d.begin()) { cerr << \", \"; } view(*it); } cerr << \"]\"; }\r\n    template<class T> void view(stack<T> s){ vector<T> v; while (not s.empty()) { v.push_back(s.top()); s.pop(); } reverse(v.begin(), v.end()); view(v); cerr << \"->(top)\"; }\r\n    template<class T> void view(queue<T> q){ vector<T> v; while (not q.empty()) { v.push_back(q.front()); q.pop(); } cerr << \"(front)<-\"; view(v); }\r\n    template<class T> void view(PQ_max<T> pq){ vector<T> v; while (not pq.empty()) { v.push_back(pq.top()); pq.pop(); } cerr << \"(top)<-\"; view(v); }\r\n    template<class T> void view(PQ_min<T> pq){ vector<T> v; while (not pq.empty()) { v.push_back(pq.top()); pq.pop(); } cerr << \"(top)<-\"; view(v); }\r\n    template<class T> void view2d(const vector<vector<T>>& vv){ for (int i = 0; i < (int)vv.size(); i++) { cerr << \"    \"; view(vv[i]); cerr << \",\\n\"; } }\r\n    template<class T> void view3d(const vector<vector<vector<T>>>& vvv) { for (int i = 0; i < (int)vvv.size(); i++) { for (int j = 0; j < (int)vvv[i].size(); j++) { cerr << \"    \" << \" [\"[j == 0]; view(vvv[i][j]); if (j == (int)vvv[i].size() - 1) { cerr << \"]\"; } cerr << \",\\n\"; } if (i < (int)vvv.size() - 1) { cerr << \"\\n\"; } } }\r\n    template<class T, class... Ts> void view(const T& a, const Ts&... b) { view(a); cerr << \", \"; view(b...); }\r\n#else\r\n    #define cerr if (false) cerr\r\n    #define debug_bar\r\n    #define debug(...)\r\n    #define debug2(vv)\r\n    #define debug3(vvv)\r\n#endif\r\ntemplate<class... T> void input(T&... a) { (cin >> ... >> a); }\r\nvoid print() { cout << '\\n'; }\r\ntemplate<class T> void print(const T& a) { cout << a << '\\n'; }\r\ntemplate<class T, class... Ts> void print(const T& a, const Ts&... b) { cout << a; (cout << ... << (cout << ' ', b)); cout << '\\n'; }\r\ntemplate<class T> void cout_line(const vector<T>& ans, int l, int r) { for (int i = l; i < r; i++) { if (i != l) { cout << ' '; } cout << ans[i]; } cout << '\\n'; }\r\ntemplate<class T> bool chmin(T& a, const T b) { if (b < a) { a = b; return 1; } return 0; }\r\ntemplate<class T> bool chmax(T& a, const T b) { if (a < b) { a = b; return 1; } return 0; }\r\ntemplate<class T> T SUM(const vector<T>& A) { return accumulate(ALL(A), T(0)); }\r\ntemplate<class T> vector<T> cumsum(const vector<T>& A, bool offset = false) { int N = A.size(); vector<T> S(N+1, 0); for (int i = 0; i < N; i++) { S[i+1] = S[i] + A[i]; } if (not offset) { S.erase(S.begin()); } return S; }\r\ntemplate<class T> string to_binary(T x, int B) { string s; while (x) { s += ('0' + (x & 1)); x >>= 1; } while ((int)s.size() < B) { s += '0'; } reverse(s.begin(), s.end()); return s; }\r\nll min(int a, ll b) { return min((ll)a, b); }\r\nll min(ll a, int b) { return min(a, (ll)b); }\r\nll max(int a, ll b) { return max((ll)a, b); }\r\nll max(ll a, int b) { return max(a, (ll)b); }\r\nll mod(ll x, ll m) { assert(m != 0); return (x % m + m) % m; }\r\nll ceil(ll a, ll b) { if (b < 0) { return ceil(-a, -b); } assert(b > 0); return (a < 0 ? a / b : (a + b - 1) / b); }\r\nll floor(ll a, ll b) { if (b < 0) { return floor(-a, -b); } assert(b > 0); return (a > 0 ? a / b : (a - b + 1) / b); }\r\nll powint(ll x, ll n) { assert(n >= 0); if (n == 0) { return 1; }; ll res = powint(x, n>>1); res *= res; if (n & 1) { res *= x; } return res; }\r\npair<ll,ll> divmod(ll a, ll b) { assert(b != 0); ll q = floor(a, b); return make_pair(q, a - q * b); }\r\nll bitlen(ll b) { if (b <= 0) { return 0; } return (64LL - __builtin_clzll(b)); }\r\nll digit_len(ll n) { assert(n >= 0); if (n == 0) { return 1; } ll sum = 0; while (n > 0) { sum++; n /= 10; } return sum; }\r\nll digit_sum(ll n) { assert(n >= 0); ll sum = 0; while (n > 0) { sum += n % 10; n /= 10; } return sum; }\r\nll digit_prod(ll n) { assert(n >= 0); if (n == 0) { return 0; } ll prod = 1; while (n > 0) { prod *= n % 10; n /= 10; } return prod; }\r\nll xor_sum(ll x) { assert(0 <= x); switch (x % 4) { case 0: return x; case 1: return 1; case 2: return x ^ 1; case 3: return 0; } assert(false); }\r\nstring toupper(const string& S) { string T(S); for (int i = 0; i < (int)T.size(); i++) { T[i] = toupper(T[i]); } return T; }\r\nstring tolower(const string& S) { string T(S); for (int i = 0; i < (int)T.size(); i++) { T[i] = tolower(T[i]); } return T; }\r\nint a2i(const char& c) { assert(islower(c)); return (c - 'a'); }\r\nint A2i(const char& c) { assert(isupper(c)); return (c - 'A'); }\r\nint d2i(const char& d) { assert(isdigit(d)); return (d - '0'); }\r\nchar i2a(const int& i) { assert(0 <= i && i < 26); return ('a' + i); }\r\nchar i2A(const int& i) { assert(0 <= i && i < 26); return ('A' + i); }\r\nchar i2d(const int& i) { assert(0 <= i && i <= 9); return ('0' + i); }\r\nusing P = pair<ll,ll>;\r\nusing VP = vector<P>;\r\nusing VVP = vector<VP>;\r\nusing VS = vector<string>;\r\nusing VVS = vector<VS>;\r\nusing VI = vector<int>;\r\nusing VVI = vector<VI>;\r\nusing VVVI = vector<VVI>;\r\nusing VLL = vector<ll>;\r\nusing VVLL = vector<VLL>;\r\nusing VVVLL = vector<VVLL>;\r\nusing VB = vector<bool>;\r\nusing VVB = vector<VB>;\r\nusing VVVB = vector<VVB>;\r\nusing VD = vector<double>;\r\nusing VVD = vector<VD>;\r\nusing VVVD = vector<VVD>;\r\nusing VLD = vector<ld>;\r\nusing VVLD = vector<VLD>;\r\nusing VVVLD = vector<VVLD>;\r\nconst ld EPS = 1e-10;\r\nconst ld PI  = acosl(-1.0);\r\n// --------------------------------------------------------\r\n// #include <atcoder/all>\r\n// using namespace atcoder;\r\n\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout << fixed << setprecision(15);\r\n\r\n    int tt; cin >> tt;\r\n    while (tt--) {\r\n        int N, M; cin >> N >> M;\r\n        VVP G(N);\r\n        VP E(M);\r\n        REP(i,M) {\r\n            int u, v; cin >> u >> v;\r\n            u--; v--;\r\n            G[u].emplace_back(v, i);\r\n            G[v].emplace_back(u, i);\r\n            E[i] = {u, v};\r\n        }\r\n\r\n        string ans(M,'0');\r\n\r\n        VI vis(N, 0);  // 0 (\u672a\u8a2a\u554f), 1 (\u8a2a\u554f\u4e2d), 2 (\u8a2a\u554f\u6e08\u307f)\r\n        VVP G2(N);\r\n        auto dfs_tree = [&](auto&& self, int u, int p) -> void {\r\n            vis[u] = 1;  // \u8a2a\u554f\u4e2d\r\n            for (const auto& [v, i] : G[u]) if (v != p) {\r\n                if (vis[v] == 0) {  // \u672a\u8a2a\u554f (edge in spanning tree)\r\n                    G2[u].emplace_back(v, i);\r\n                    G2[v].emplace_back(u, i);\r\n                    ans[i] = '1';\r\n                    self(self, v, u);\r\n                } else if (vis[v] == 1) {  // \u8a2a\u554f\u4e2d (back edge)\r\n                    ;\r\n                } else {  // vis[v] == 2: \u8a2a\u554f\u6e08\u307f\r\n                    // \u7121\u5411\u30b0\u30e9\u30d5: back edge \u3068\u3057\u3066\u65e2\u51fa\r\n                    // \u6709\u5411\u30b0\u30e9\u30d5: cut edge \u306b\u306a\u308b\r\n                    ;\r\n                }\r\n            }\r\n            vis[u] = 2;  // \u8a2a\u554f\u6e08\u307f\r\n        };\r\n        dfs_tree(dfs_tree, 0, -1);\r\n\r\n        set<int> st, memo;\r\n        REP(i,M) if (ans[i] == '0') {\r\n            memo.insert(i);\r\n            auto [u, v] = E[i];\r\n            st.insert(u);\r\n            st.insert(v);\r\n        }\r\n        if (M == N + 2 && SZ(st) == 3) {\r\n            int i = *memo.begin();\r\n            auto [a, b] = E[i];\r\n            int j = -1;\r\n            auto dfs = [&](auto&& self, int u, int p) -> void {\r\n                for (const auto& [v, e] : G2[u]) if (v != p) {\r\n                    if (memo.count(e)) continue;\r\n                    if (v == b) { j = e; }\r\n                    self(self, v, u);\r\n                }\r\n            };\r\n            dfs(dfs, a, -1);\r\n\r\n            assert(j != -1);\r\n            ans[i] = '1';\r\n            ans[j] = '0';\r\n        }\r\n\r\n        print(ans);\r\n    }\r\n\r\n\r\n    return 0;\r\n}\r\n"
}