{
    "id": 201242405,
    "contestId": 1726,
    "creationTimeSeconds": 1680949548,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Lemonrange"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 5632000,
    "source": "#include <bits/stdc++.h>\r\n#define YES return void(cout << \"Yes\\n\")\r\n#define NO return void(cout << \"No\\n\")\r\nusing namespace std;\r\n\r\nusing ui64 = unsigned long long;\r\nusing PII = pair<int, int>;\r\nusing i64 = long long;\r\n\r\ntemplate<class T> void read(T& x) {\r\n    x = 0; int f = 1; char ch = getchar();\r\n    while (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\r\n    while (isdigit(ch)) { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }\r\n    x *= f;\r\n}\r\n\r\ntemplate<class T> void print(T x) {\r\n    if (x < 0) { putchar('-'); x = -x; }\r\n    if (x > 9) print(x / 10);\r\n    putchar(x % 10 ^ 48);\r\n}\r\n\r\nconst int N = 2e5 + 10;\r\nunordered_map<i64, int> eg;\r\nvector<int> g[N];\r\nint dist[N], col;\r\n\r\ni64 get(i64 x, i64 y) {\r\n    return x << 32 | y;\r\n}\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    eg.clear();\r\n    for (int i = 1; i <= n; ++i) {\r\n        g[i].clear(), dist[i] = 0;\r\n    }\r\n    col = 1;\r\n    vector<PII> edges(m);\r\n    for (auto& [x, y] : edges) {\r\n        cin >> x >> y;\r\n        g[x].emplace_back(y);\r\n        g[y].emplace_back(x);\r\n    }\r\n\r\n    dist[1] = 1;\r\n    queue<int> que;\r\n    que.push(1);\r\n\r\n    while (que.size()) {\r\n        int u = que.front(); que.pop();\r\n        for (auto& v : g[u]) {\r\n            if (!dist[v]) {\r\n                que.push(v);\r\n                dist[v] = dist[u] + 1;\r\n            }\r\n            if (eg.find(get(u, v)) == eg.end()) {\r\n                eg[get(u, v)] = col;\r\n                col ^= 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (auto& [x, y] : edges) {\r\n        if (eg[get(x, y)]) cout << 1;\r\n        else cout << 0;\r\n    }\r\n    cout << '\\n';\r\n}\r\n\r\nsigned main() {\r\n\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0), cout.tie(0);\r\n\r\n    int t = 1; cin >> t;\r\n    while (t--) solve();\r\n\r\n    return 0;\r\n}"
}