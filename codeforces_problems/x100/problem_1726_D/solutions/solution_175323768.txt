{
    "id": 175323768,
    "contestId": 1726,
    "creationTimeSeconds": 1665393682,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "joelau"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 11776000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint T,N,M, ufds[200005], rnk[200005], ans[200005], par[200005];\r\npair<int,int> edges[200005];\r\nset<int> s;\r\nvector< pair<int,int> > lst[200005];\r\nvector<int> tmp;\r\nqueue<int> q;\r\n\r\nint findset (int i) {\r\n    return ufds[i] == i ? i : ufds[i] = findset(ufds[i]);\r\n}\r\n\r\nvoid unionset (int i, int j) {\r\n    int a = findset(i), b = findset(j);\r\n    if (a == b) return;\r\n    if (rnk[a] < rnk[b]) ufds[a] = b;\r\n    if (rnk[a] > rnk[b]) ufds[b] = a;\r\n    if (rnk[a] == rnk[b]) ufds[a] = b, rnk[b]++;\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\r\n    cin >> T;\r\n    while (T--) {\r\n        cin >> N >> M;\r\n        for (int i = 0; i < M; ++i) cin >> edges[i].first >> edges[i].second;\r\n        s.clear(); tmp.clear();\r\n        for (int i = 0; i < N; ++i) {\r\n            ufds[i] = i, rnk[i] = 1;\r\n            lst[i].clear();\r\n        }\r\n        for (int i = 0; i < M; ++i) {\r\n            if (findset(edges[i].first) != findset(edges[i].second)) {\r\n                lst[edges[i].first].emplace_back(edges[i].second,i);\r\n                lst[edges[i].second].emplace_back(edges[i].first,i);\r\n                ans[i] = 0;\r\n                unionset(edges[i].first,edges[i].second);\r\n            }\r\n            else {\r\n                s.insert(edges[i].first);\r\n                s.insert(edges[i].second);\r\n                ans[i] = 1;\r\n                tmp.push_back(i);\r\n            }\r\n        }\r\n        if (M == N+2 && s.size() == 3) {\r\n            for (int i = 0; i < N; ++i) par[i] = -1;\r\n            par[edges[tmp.front()].first] = tmp.front();\r\n            q.push(edges[tmp.front()].first);\r\n            while (!q.empty()) {\r\n                int u = q.front(); q.pop();\r\n                for (auto v: lst[u]) if (par[v.first] == -1) {\r\n                    par[v.first] = v.second;\r\n                    q.push(v.first);\r\n                }\r\n            }\r\n            ans[tmp.front()] = 0;\r\n            ans[par[edges[tmp.front()].second]] = 1;\r\n        }\r\n        for (int i = 0; i < M; ++i) cout << ans[i];\r\n        cout << '\\n';\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}