{
    "id": 201254134,
    "contestId": 1726,
    "creationTimeSeconds": 1680956471,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Lemonrange"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 8499200,
    "source": "#include <bits/stdc++.h>\r\n#define YES return void(cout << \"Yes\\n\")\r\n#define NO return void(cout << \"No\\n\")\r\nusing namespace std;\r\n\r\nusing ui64 = unsigned long long;\r\nusing PII = pair<int, int>;\r\nusing i64 = long long;\r\n\r\nconst int N = 2e5 + 10;\r\nvector<int> g[N];\r\n\r\nint fa[N];\r\n\r\nint find(int x) {\r\n    while (x != fa[x]) x = fa[x] = fa[fa[x]];\r\n    return x;\r\n}\r\n\r\nbool merge(int x, int y) {\r\n    x = find(x), y = find(y);\r\n    if (x == y) return false;\r\n    fa[x] = y;\r\n    return true;\r\n}\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n\r\n    iota(fa, fa + n + 1, 0);\r\n\r\n    string str;\r\n    int last = 0, cnt = 0;\r\n    vector<PII> edges(m);\r\n    vector<int> d(n + 1);\r\n    for (auto& [x, y] : edges) {\r\n        cin >> x >> y;\r\n        if (merge(x, y)) {\r\n            str += '0';\r\n        }\r\n        else {\r\n            ++d[x], ++d[y];\r\n            str += '1';\r\n            last = cnt;\r\n        }\r\n        ++cnt;\r\n    }\r\n\r\n    bool flag = (m != n - 1);\r\n    for (int i = 1; i <= n; i ++ )\r\n        if (d[i] && d[i] != 2)\r\n        {\r\n            flag = false;\r\n            break;\r\n        }\r\n    if (!flag) {\r\n        cout << str << '\\n';\r\n        return;\r\n    }\r\n\r\n    iota(fa, fa + n + 1, 0);\r\n    merge(edges[last].first, edges[last].second);\r\n    for (int i = 0; i < m; ++i) {\r\n        auto [x, y] = edges[i];\r\n        if (str[i] == '0') {\r\n            if (find(x) == find(y)) {\r\n                str[i] = '1';\r\n                break;\r\n            }\r\n            merge(x, y);\r\n        }\r\n    }\r\n    str[last] = '0';\r\n    cout << str << '\\n';\r\n}\r\n\r\nsigned main() {\r\n\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0), cout.tie(0);\r\n\r\n    int t = 1; cin >> t;\r\n    while (t--) solve();\r\n\r\n    return 0;\r\n}"
}