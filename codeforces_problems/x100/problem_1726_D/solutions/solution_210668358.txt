{
    "id": 210668358,
    "contestId": 1726,
    "creationTimeSeconds": 1687445010,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Pacybwoah"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 307200,
    "source": "#include<iostream>\r\n#include<vector>\r\n#include<utility>\r\n#include<algorithm>\r\n#include<set>\r\nusing namespace std;\r\nvector<vector<pair<int,int>>> graph;\r\nvector<int> parent;\r\nstring ans;\r\nvoid dfs(int node,int p){\r\n    for(auto x:graph[node]){\r\n        if(x.first==p) continue;\r\n        if(parent[x.first]==-1){\r\n            parent[x.first]=x.second;\r\n            ans[x.second]='1';\r\n            dfs(x.first,node);\r\n        }\r\n    }\r\n}\r\nint main(){\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int t;\r\n    cin>>t;\r\n    int id=1;\r\n    while(t--){\r\n        int n,m;\r\n        cin>>n>>m;\r\n        graph.resize(n+1);\r\n        vector<pair<int,int>> edges;\r\n        for(int i=1;i<=n;i++) graph[i].clear();\r\n        int a,b;\r\n        for(int i=0;i<m;i++){\r\n            cin>>a>>b;\r\n            graph[a].push_back(make_pair(b,i));\r\n            graph[b].push_back(make_pair(a,i));\r\n            edges.push_back(make_pair(a,b));\r\n        }\r\n        parent.resize(n+1);\r\n        fill(parent.begin(),parent.end(),-1);\r\n        parent[1]=-2;\r\n        ans.clear();\r\n        for(int i=0;i<m;i++) ans+='0';\r\n        dfs(1,0);\r\n        if(m<n+2){\r\n            cout<<ans<<\"\\n\";\r\n        }\r\n        else{\r\n            set<int> s;\r\n            for(int i=0;i<m;i++){\r\n                if(ans[i]=='0'){\r\n                    s.insert(edges[i].first);\r\n                    s.insert(edges[i].second);\r\n                }\r\n            }\r\n            if(s.size()==3){\r\n                for(int i=0;i<m;i++){\r\n                    if(ans[i]=='0'){\r\n                        if(edges[i].first==1) swap(edges[i].first,edges[i].second);\r\n                        ans[i]='1';\r\n                        ans[parent[edges[i].first]]='0';\r\n                        if(id==10) cout<<edges[parent[edges[i].first]].first<<\",\"<<edges[parent[edges[i].first]].second<<\",\"<<edges[i].first;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            cout<<ans<<\"\\n\";\r\n        }\r\n        id++;\r\n    }\r\n}"
}