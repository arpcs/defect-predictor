{
    "id": 195767847,
    "contestId": 1726,
    "creationTimeSeconds": 1677826364,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "jaiknowyou"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 1559,
    "memoryConsumedBytes": 75161600,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\n// void traversal(vector<vector<vector<int>>> adj, string &ans, queue<int> breadth, bool visited[]){\n//     queue<int> child;\n//     if(breadth.empty()) return ;\n//     while(!breadth.empty()){\n//         int node = breadth.front();\n//         breadth.pop();\n//         for(int i = 0; i < adj[node].size(); i++){\n//             if(visited[adj[node][i][0]]) continue;\n//             visited[adj[node][i][0]] = true;\n//             child.push(adj[node][i][0]);\n//             ans[adj[node][i][1]] = '1';\n//         }\n//     }\n//     traversal(adj, ans, child, visited); \n// }\nvoid traversal(vector<vector<vector<int>>> adj, string &ans, int node, bool visited[], bool visited_edge[], map<int, int> &M){\n    visited[node] = true;\n    int edge, vertex;\n    for(int i = 0; i < adj[node].size(); i++){\n        int edge = adj[node][i][1], vertex = adj[node][i][0];\n        if(visited[vertex]) {\n            if(!visited_edge[edge]) {\n                // M[vertex]++;\n                M[node]++;\n            }\n            continue;\n        }\n        ans[edge] = '1';\n        visited_edge[edge] = true;\n        traversal(adj, ans, vertex, visited, visited_edge, M);\n    }\n}\n\nint main(){\n    int t, n, m;\n    cin>>t;\n    while(t--){\n        cin>>n>>m;\n        string ans = \"\";\n        int R[n+1] = {0}, B[n+1] = {0}, a, b;\n        vector<vector<vector<int>>> adj(n+1);\n        // vector<vector<vector<int>>> edges(m);\n        for(int i = 0; i < m; i++){\n            cin>>a>>b;\n            ans+=\"0\";\n            // edges[i].push_back({a, b});\n            adj[a].push_back({b, i});\n            adj[b].push_back({a, i});\n        }\n        bool visited[n+1] = {false};\n        bool visited_edge[m] = {false};\n        map<int, int> M;\n        traversal(adj, ans, 1, visited, visited_edge, M);\n        // cout<<\"M. size:\"<<M.size()<<endl;\n        if(M.size() == 3){\n            bool cycle = true;\n            int node;\n            for( auto i: M){\n                // cout<<\"Map.key\"<<i.first<<\"val\"<<i.second<<endl;\n                node = i.first;\n                if(i.second != 2) {cycle = false; break;}\n            }\n            if(cycle) {\n                int red_edge = -1, blue_edge = -1;\n                for(int i = 0; i < adj[node].size(); i++){\n                    if(ans[adj[node][i][1]] == '1') red_edge = adj[node][i][1];\n                    else blue_edge = adj[node][i][1];\n                    if(red_edge > -1 && blue_edge > -1) {\n                        ans[red_edge] = '0';\n                        ans[blue_edge] = '1';\n                        break;\n                    }\n                }\n            }\n        }\n        for(int i = 0; i < m; i++) cout<<ans[i];\n        cout<<endl;\n    }\n    return 0;\n}"
}