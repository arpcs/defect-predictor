{
    "id": 172779724,
    "contestId": 1726,
    "creationTimeSeconds": 1663644170,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "danielcm585"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 654,
    "memoryConsumedBytes": 27545600,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define fi first\n#define se second\n\ntypedef long long ll;\ntypedef pair<int,int> ii;\n\nconst int INF = 1e9;\nint n, m;\nvector<int> dep, pre;\nvector<bool> vis;\nvector<ii> edge;\nvector<vector<ii>> adj;\nstring ans;\n\nvoid dfs(int cur) {\n  vis[cur] = 1 ;\n  for (auto i : adj[cur]) {\n    int nx = i.fi, idx = i.se;\n    if (vis[nx]) continue;\n    pre[nx] = cur;\n    dep[nx] = dep[cur]+1;\n    ans[idx] = '1';\n    dfs(nx);\n  }\n}\n\nint main() {\n  ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n  int tc; cin >> tc;\n  while (tc--) {\n    cin >> n >> m;\n    adj = vector<vector<ii>>(n+2);\n    edge.clear();\n    for (int i = 1; i <= m; i++) {\n      int u, v; cin >> u >> v;\n      adj[u].push_back({v,i-1});\n      adj[v].push_back({u,i-1});\n      edge.push_back({u,v});\n    }\n    dep = pre = vector<int>(n+2);\n    vis = vector<bool>(n+2);\n    ans = string(m,'0');\n    dfs(1);\n    map<int,int> deg;\n    for (int i = 0; i < m; i++) {\n      int u = edge[i].fi, v = edge[i].se;\n      if (ans[i] == '0') deg[u]++, deg[v]++;\n    }\n    if (deg.size() == 3) {\n      int mn = INF, mx = -INF;\n      for (auto i : deg) {\n        mn = min(mn,i.se);\n        mx = max(mx,i.se);\n      }\n      if (mn == 2 && mx == 2) {\n        vector<ii> can;\n        for (auto i : deg) can.push_back({dep[i.fi],i.fi});\n        sort(can.begin(),can.end());\n        int u = can.back().se, x, y;\n        for (auto i : adj[u]) {\n          int v = i.fi, idx = i.se;\n          if (ans[idx] == '0') x = idx;\n          else if (v == pre[u]) y = idx;\n        }\n        ans[x] = '1', ans[y] = '0'; \n      }\n    }\n    cout << ans << '\\n';\n  }\n  return 0;\n}"
}