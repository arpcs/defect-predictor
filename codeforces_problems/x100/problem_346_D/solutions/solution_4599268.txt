{
    "id": 4599268,
    "contestId": 346,
    "creationTimeSeconds": 1380381415,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "qingquan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "MS C++",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 14028800,
    "source": "#include<iostream>\r\n#include<algorithm>\r\nusing namespace std;\r\n\r\nstruct node\r\n{\r\n    int data;\r\n    node *next;\r\n};\r\n\r\n/*int dep;\r\nnode p[1000005];\r\nbool vi[1000005];\r\n\r\nvoid search(int i,int j,int depth=0)\r\n{              cout<<\"i=\"<<i<<\",j=\"<<j<<\",dep=\"<<depth<<endl;\r\n    if(i==j)\r\n        dep=depth;\r\n    vi[i]=false;\r\n    if(p[i].data==1)\r\n    {\r\n        int k=p[i].next->data;\r\n        if(vi[k])\r\n        {\r\n            vi[k]=false;\r\n            search(k,j,depth);\r\n        }\r\n    }\r\n    if(p[i].data>1)\r\n    {\r\n        node *r=p[i].next;\r\n        while(r)\r\n        {\r\n            int k=r->data;\r\n            if(vi[k])\r\n            {\r\n                vi[k]=false;\r\n                search(k,j,depth+1);\r\n            }\r\n            r=r->next;\r\n        }\r\n    }\r\n}*/\r\n\r\n\r\n\r\n\r\nnode p[1000005];\r\nbool vi[1000005];\r\nint an[1000005];\r\n\r\nint fun(int a,int b)\r\n{\r\n    if(a==b)\r\n        return 0;\r\n    if(an[a]>=0)\r\n        return an[a];\r\n    vi[a]=true;\r\n    int max=-1,min=100000000;\r\n    node *q=p[a].next;\r\n    int add=0;\r\n    while(q)\r\n    {\r\n        if(!vi[q->data])\r\n        {\r\n            int k=fun(q->data,b);\r\n            max=max>k?max:k;\r\n            min=min<k?min:k;\r\n        }\r\n        else\r\n            add=1;\r\n        q=q->next;\r\n    }\r\n    vi[a]=false;\r\n    if(max>min)\r\n        add=1;\r\n    //cout<<\"fun(\"<<a<<\")=\"<<min+add<<endl;\r\n    an[a]=min+add;\r\n    return min+add;\r\n}\r\n\r\nint main()\r\n{\r\n    int n,m;\r\n    int a,b;\r\n    node* q;\r\n    while(cin>>n>>m)\r\n    {\r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            an[i]=-1;\r\n            vi[i]=false;\r\n            p[i].data=0;\r\n            p[i].next=NULL;\r\n        }\r\n        for(int i=0;i<m;i++)\r\n        {\r\n            cin>>a>>b;\r\n            q=new node;\r\n            q->data=b;\r\n            q->next=p[a].next;\r\n            p[a].next=q;\r\n            p[a].data++;\r\n        }\r\n        cin>>a>>b;\r\n        cout<<(fun(a,b)<10001000?fun(a,b):-1)<<endl;\r\n    }\r\n}"
}