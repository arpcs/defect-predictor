{
    "id": 13290784,
    "contestId": 346,
    "creationTimeSeconds": 1443498264,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "SSure"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 716,
    "memoryConsumedBytes": 37171200,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <vector>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nconst int maxn = 1000002;\r\nconst int inf = 1 << 29;\r\n\r\nvector<int> edge[maxn];\r\ndeque<int> Q;\r\n\r\nint indegree[maxn];\r\nint m,n,s,t;\r\n\r\nvoid read() {\r\n  memset(indegree, 0, sizeof(indegree));\r\n  for (int i=0;i<=n;i++) {\r\n    edge[i].clear();\r\n  }\r\n  int u,v;\r\n  for (int i=0;i<m;i++) {\r\n    scanf(\"%d%d\", &u,&v);\r\n    edge[v].push_back(u);\r\n    indegree[u]++;\r\n  }\r\n  scanf(\"%d%d\", &s,&t);\r\n  return;\r\n}\r\n\r\nint dp[maxn];\r\nbool vis[maxn];\r\n\r\nint bfs() {\r\n  memset(dp,63,sizeof(dp));\r\n  memset(vis,false,sizeof(vis));\r\n  while (!Q.empty()) Q.pop_back();\r\n\r\n  Q.push_front(t);\r\n  dp[t] = 0;\r\n  while (!Q.empty()) {\r\n    int cur = Q.front();\r\n    Q.pop_front();\r\n    if (vis[cur]) continue;\r\n    vis[cur] = true;\r\n\r\n    for (int i=0;i<edge[cur].size();i++) {\r\n      int nxt = edge[cur][i];\r\n      if (--indegree[nxt] == 0) {\r\n        if (vis[nxt] == false && dp[nxt] > dp[cur]) {\r\n          dp[nxt] = dp[cur];\r\n          Q.push_front(nxt);\r\n        }\r\n      } else {\r\n        if (vis[nxt] == false && dp[nxt] > dp[cur]+1) {\r\n          dp[nxt] = dp[cur]+1;\r\n          Q.push_back(nxt);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return dp[s];\r\n}\r\n\r\nvoid solve() {\r\n  if (s == t) {\r\n    puts(\"0\");\r\n    return;\r\n  }\r\n\r\n  int res = bfs();\r\n  if (res > inf) res = -1;\r\n  printf (\"%d\\n\", res);\r\n  return;\r\n}\r\n\r\nint main() {\r\n  while (~scanf(\"%d%d\", &n,&m)) {\r\n    read();\r\n    solve();\r\n  }\r\n  return 0;\r\n}\r\n"
}