{
    "id": 72013084,
    "contestId": 346,
    "creationTimeSeconds": 1582863449,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "elezbar"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nstruct vertex {\r\n\tint visited;\r\n\tint conecz;\r\n\tvector <int> sosedi;\r\n};\r\n\r\nvector <vertex> graph;\r\nint dfs(int a, int b) { //\u0430-\u0432\u0435\u0440\u0448\u0438\u043d\u0430, \u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u00a4 \u043e\u0431\u0445\u043e\u0434\r\n\tgraph[a].visited = 1;\r\n\tif (a == b) return 0;\r\n\t//if (graph[a].sosedi.size() == 0 ) return ;\r\n\tint k = 0;\r\n\tvector <int> puti;\r\n\tfor (int i = 0; i < graph[a].sosedi.size(); ++i) {\r\n\t\tif (graph[graph[a].sosedi[i]].visited or graph[graph[a].sosedi[i]].sosedi.size() == 0) {\r\n\t\t\tk = 1;\r\n\t\t}\r\n\t}\r\n\tfor (int i = 0; i < graph[a].sosedi.size(); ++i) {\r\n\t\tif (!graph[graph[a].sosedi[i]].visited and graph[graph[a].sosedi[i]].sosedi.size() != 0) {\r\n\t\t\tcout << graph[a].sosedi.size() << endl;\r\n\t\t\tputi.push_back(k+dfs(graph[a].sosedi[i],b));\r\n\t\t}\t\r\n\t}\r\n\tfor (int i = 0; i < puti.size(); i++)\r\n\tcout << puti[i] << endl;\r\n\tcout << endl;\r\n\tsort(puti.begin(), puti.end());\r\n\treturn puti[0];\r\n}\r\n\r\nint main() {\r\n\tint n, m,s,t; \r\n\tcin >> n >> m;\r\n\r\n\tgraph.resize(n);\r\n\r\n\tfor (int i = 0; i < m; ++i) {\r\n\t\tint a, b, w;\r\n\t\tcin >> a >> b;\r\n\t\tw = 0;\r\n\t\ta;\r\n\t\tb;\r\n\t\tgraph[a].sosedi.push_back(b);\r\n\t\t//\tgraph[b].sosedi.push_back(make_pair(a, w)); \r\n\t\t//int l = 0;\r\n\t\t//for (int i = 0; i < graph.size(); ++i)\r\n\t\t//{\r\n\t\t//\tgraph[i].visited = 0;\r\n\t\t//}\r\n\t}\r\n\tcin >> s >> t;\r\n\t\tcout << dfs(s,t);\r\n\t \r\n\tsystem(\"pause\");\r\n\treturn 0;\r\n}\r\n"
}