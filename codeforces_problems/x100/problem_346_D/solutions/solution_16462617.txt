{
    "id": 16462617,
    "contestId": 346,
    "creationTimeSeconds": 1456917050,
    "relativeTimeSeconds": 6950,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "Skedar"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1456910100
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 7987200,
    "source": "#include <bits/stdc++.h>\r\n#define inf 10000005\r\n\r\nusing namespace std;\r\n\r\nint wych[1000005], odl[1000005];\r\nqueue < int > Q[2];\r\n\r\nvector < vector < int > > E, ER;\r\n\r\nint main()\r\n{\r\n    for(int i=0; i<1000001; i++)\r\n        odl[i] = inf;\r\n    int n, m, mm;\r\n    scanf(\"%d%d\", &n, &m);\r\n    mm = m;\r\n  //  cin>>n>>m;\r\n    E.resize(n+1);\r\n    ER.resize(n+1);\r\n    while(m--)\r\n    {\r\n        int a, b;\r\n        scanf(\"%d%d\", &a, &b);\r\n        E[a].push_back(b);\r\n        wych[a]++;\r\n        ER[b].push_back(a);\r\n    }\r\n    int p, k, akt = 0;\r\n    scanf(\"%d%d\", &p, &k);\r\n    Q[0].push(k);\r\n    odl[k] = 0;\r\n    int a=0, b=0, c=0;\r\n    while(odl[p] > 1000001 && akt <= 1000000 && (!Q[0].empty() || !Q[1].empty()))\r\n    {\r\n        queue < int > &Q1 = Q[akt&1], &Q2 = Q[1 - (akt&1)];\r\n        while(!Q2.empty())\r\n            Q2.pop();\r\n        while(!Q1.empty())\r\n        {\r\n            b++;\r\n            if (b > 3*n)\r\n                return -2;\r\n            int aktv = Q1.front();\r\n            Q[akt].pop();\r\n            if (odl[aktv] < akt)\r\n                continue;\r\n            for(auto& sas: ER[aktv])\r\n            {\r\n                c++;\r\n                wych[sas]--;\r\n                if (wych[sas]==0 && odl[sas] > akt)\r\n                {\r\n                    odl[sas] = akt;\r\n                    Q1.push(sas);\r\n                }\r\n                if (odl[sas] > akt+1)\r\n                {\r\n                    odl[sas] = akt+1;\r\n                    Q2.push(sas);\r\n                }\r\n            }\r\n        }\r\n        akt++;\r\n    }\r\n    if (odl[p] < inf)\r\n        printf(\"%d\", odl[p]);\r\n    else\r\n        printf(\"-1\");\r\n}\r\n"
}