{
    "id": 197560295,
    "contestId": 346,
    "creationTimeSeconds": 1678906794,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "Yar_sem"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 1276,
    "memoryConsumedBytes": 112742400,
    "source": "\ufeff#include <iostream>\r\n#include <iomanip>\r\n#include <algorithm>\r\n#include <numeric>\r\n#include <cmath>\r\n#include <cassert>\r\n#include <ctime>\r\n#include <chrono>\r\n#include <cstdio>\r\n#include <random>\r\n#include <vector>\r\n#include <string>\r\n#include <map>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <unordered_set>\r\n#include <deque>\r\n#include <queue>\r\n#include <bitset>\r\n#include <list>\r\n#include <fstream>\r\n#include <functional>\r\n#include <complex>\r\nusing namespace std;\r\nmt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());\r\n\r\nshort skip_cin = 0;\r\nconst long long INF = 1e18, MOD = 1e9 + 7, MOD2 = 998244353, LOG = 32;\r\nconst long double EPS = 1e-9, PI = acos(-1);\r\n\r\nlong long n;\r\nvector<long long> g[1000000], rg[1000000];\r\n\r\nvoid solve()\r\n{\r\n    long long m;\r\n    cin >> n >> m;\r\n    for (long long i = 0; i < m; i++)\r\n    {\r\n        long long a, b;\r\n        cin >> a >> b;\r\n        a--; b--;\r\n        g[a].push_back(b);\r\n        rg[b].push_back(a);\r\n    }\r\n    long long s, f;\r\n    cin >> s >> f;\r\n    s--; f--;\r\n\r\n    vector<long long> dp(n, INF), cnt_bad(n);\r\n    for (long long i = 0; i < n; i++)\r\n    {\r\n        cnt_bad[i] = g[i].size();\r\n    }\r\n    dp[f] = 0;\r\n    set<pair<long long, long long>> q;\r\n    for (auto& i : rg[f])\r\n    {\r\n        cnt_bad[i]--;\r\n        q.insert({ cnt_bad[i], i });\r\n    }\r\n    while (q.size())\r\n    {\r\n        auto [bad, ver] = *q.begin();\r\n        q.erase(q.begin());\r\n        long long mx = -INF, mn = INF;\r\n        for (auto& i : g[ver])\r\n        {\r\n            mx = max(mx, dp[i]);\r\n            mn = min(mn, dp[i]);\r\n        }\r\n        long long prev = dp[ver];\r\n        if (mn + 1 < mx)\r\n        {\r\n            dp[ver] = mn + 1;\r\n        }\r\n        else\r\n        {\r\n            dp[ver] = mx;\r\n        }\r\n        if (prev > dp[ver])\r\n        {\r\n            for (auto& i : rg[ver])\r\n            {\r\n                q.erase({ cnt_bad[i], i });\r\n                cnt_bad[i]--;\r\n                q.insert({ cnt_bad[i], i });\r\n            }\r\n        }\r\n    }\r\n    cout << (dp[s] >= INF ? -1 : dp[s]) << \"\\n\";\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    srand(time(NULL));\r\n\r\n    int tst = 1;\r\n    //cin >> tst;\r\n    while (tst--)\r\n    {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/*\r\n<3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u2824\u2816\u281a\u2889\u28e9\u28ed\u286d\u281b\u2813\u2832\u2826\u28c4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2874\u280b\u2801\u2800\u2800\u280a\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2833\u28a6\u2840\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2880\u2874\u2803\u2880\u2874\u28b3\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28c6\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u287e\u2801\u28e0\u280b\u2800\u2808\u28a7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28a7\u2800\u2800\r\n\u2800\u2800\u2800\u28f8\u2801\u28b0\u2803\u2800\u2800\u2800\u2808\u28a3\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\r\n\u2800\u2800\u2800\u2847\u2800\u287e\u2840\u2800\u2800\u2800\u2800\u28c0\u28f9\u28c6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2800\r\n\u2800\u2800\u28b8\u2803\u2880\u28c7\u2848\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2851\u2884\u2840\u2880\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\r\n\u2800\u2800\u28b8\u2800\u28bb\u285f\u287b\u28b6\u2846\u2800\u2800\u2800\u2800\u287c\u281f\u2873\u28bf\u28e6\u2851\u2884\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2847\r\n\u2800\u2800\u28f8\u2800\u28b8\u2803\u2847\u2880\u2807\u2800\u2800\u2800\u2800\u2800\u287c\u2800\u2800\u2808\u28ff\u2857\u2802\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2801\r\n\u2800\u2800\u284f\u2800\u28fc\u2800\u28b3\u280a\u2800\u2800\u2800\u2800\u2800\u2800\u2831\u28c0\u28c0\u2814\u28f8\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u285f\u2800\r\n\u2800\u2800\u2847\u2880\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2820\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2803\u2800\r\n\u2800\u28b8\u2803\u2818\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2801\u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u28fe\u2800\u2800\r\n\u2800\u28f8\u2800\u2800\u2839\u2844\u2800\u2800\u2808\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285e\u2800\u2800\u2800\u2838\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\r\n\u2800\u284f\u2800\u2800\u2800\u2819\u28c6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28e0\u28b6\u2847\u2800\u2800\u28b0\u2840\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\r\n\u28b0\u2807\u2844\u2800\u2800\u2800\u287f\u28a3\u28c0\u28c0\u28c0\u2864\u2834\u285e\u2809\u2800\u28b8\u2800\u2800\u2800\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\r\n\u28f8\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2800\u2800\u2800\u28b9\u2800\u2800\u28b8\u2800\u2800\u2880\u28ff\u2807\u2800\u2800\u2800\u2801\u2800\u28b8\u2800\u2800\r\n\u28ff\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2880\u2864\u2824\u2836\u2836\u283e\u2824\u2804\u28b8\u2800\u2840\u2838\u28ff\u28c0\u2800\u2800\u2800\u2800\u2800\u2808\u28c7\u2800\r\n\u2847\u2800\u2847\u2800\u2800\u2840\u2800\u2874\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u284c\u28f5\u2840\u28b3\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u2840\r\n\u2847\u2800\u2807\u2800\u2800\u2847\u2878\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u282e\u28a7\u28c0\u28fb\u2882\u2800\u2800\u2800\u2800\u2800\u2800\u28a7\r\n\u28c7\u2800\u28a0\u2800\u2800\u28b3\u2807\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u284e\u28c6\u2800\u2800\u2800\u2800\u2800\u2818\r\n\u28bb\u2800\u2808\u2830\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u2818\u28ae\u28e7\u2840\u2800\u2800\u2800\u2800\r\n\u2838\u2846\u2800\u2800\u2807\u28fe\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u2806\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2833\u28c4\u2840\u28a2\u2840\r\n<3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3 <3\r\n*/"
}