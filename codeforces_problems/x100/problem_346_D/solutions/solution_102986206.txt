{
    "id": 102986206,
    "contestId": 346,
    "creationTimeSeconds": 1609529123,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "Igor_Parfenov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 2838,
    "memoryConsumedBytes": 36147200,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\nconst int inf=1000000000;\r\n\r\nint n,m,s,t;\r\nvector < vector <int> > g;\r\nvector <int> deg;\r\nvector <int> dp;\r\nqueue <int> q;\r\n\r\nvoid propagate(int v){\r\n    for(int i=0;i<g[v].size();i++){\r\n        int to=g[v][i];\r\n        deg[to]--;\r\n        if(dp[to]==inf && deg[to]==0){\r\n            dp[to]=dp[v];\r\n            q.push(to);\r\n            propagate(to);\r\n        }\r\n    }\r\n}\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie();\r\n    cout.tie();\r\n\r\n    cin>>n>>m;\r\n    g.resize(n);\r\n    deg.resize(n);\r\n    for(int i=0;i<m;i++){\r\n        int a,b;\r\n        cin>>a>>b;\r\n        g[b-1].push_back(a-1);\r\n        deg[a-1]++;\r\n    }\r\n    dp.resize(n,inf);\r\n    cin>>s>>t;\r\n    dp[t-1]=0;\r\n    propagate(t-1);\r\n    q.push(t-1);\r\n    while(!q.empty()){\r\n        queue <int> q2;\r\n        while(!q.empty()){\r\n            q2.push(q.front());\r\n            q.pop();\r\n        }\r\n        while(!q2.empty()){\r\n            int v=q2.front();\r\n            q2.pop();\r\n            for(int i=0;i<g[v].size();i++){\r\n                int to=g[v][i];\r\n                if(dp[to]==inf){\r\n                    dp[to]=dp[v]+1;\r\n                    propagate(to);\r\n                    q.push(to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(dp[s-1]==inf)\r\n        cout<<-1<<'\\n';\r\n    else\r\n        cout<<dp[s-1]<<'\\n';\r\n\r\n    return 0;\r\n}\r\n"
}