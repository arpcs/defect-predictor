{
    "id": 61327870,
    "contestId": 346,
    "creationTimeSeconds": 1569507080,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "SecondThread"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 2276,
    "memoryConsumedBytes": 258969600,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.StringTokenizer;\r\nimport java.util.TreeSet;\r\n\r\npublic class D {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFastScanner fs=new FastScanner();\r\n\t\tint n=fs.nextInt(), m=fs.nextInt();\r\n\t\tNode[] nodes=new Node[n];\r\n\t\tfor (int i=0; i<n; i++)\r\n\t\t\tnodes[i]=new Node(i);\r\n\t\tfor (int i=0; i<m; i++) {\r\n\t\t\tint a=fs.nextInt()-1, b=fs.nextInt()-1;\r\n\t\t\tnodes[a].canReach.add(nodes[b]);\r\n\t\t\tnodes[a].undefinedOutDegree++;\r\n\t\t\tnodes[b].canReachMe.add(nodes[a]);\r\n\t\t}\r\n\t\tint s=fs.nextInt()-1, t=fs.nextInt()-1;\r\n\t\tArrayList<Node> toProcess=new ArrayList<>();\r\n\t\ttoProcess.add(nodes[t]);\r\n\t\tnodes[t].defined=false;\r\n\t\tnodes[t].distanceToEnd=0;\r\n\t\tTreeSet<Node> ts=new TreeSet<>();\r\n\t\tint procIndex=0;\r\n\t\twhile (procIndex<toProcess.size()||!ts.isEmpty()) {\r\n\t\t\twhile (procIndex<toProcess.size()) {\r\n\t\t\t\ttoProcess.get(procIndex).solve(toProcess, ts);\r\n\t\t\t\tprocIndex++;\r\n\t\t\t}\r\n\t\t\tfor (Node nn:ts)\r\n\t\t\t\ttoProcess.add(nn);\r\n\t\t\tts.clear();\r\n\t\t}\r\n\t\tSystem.out.println(nodes[s].distanceToEnd);\r\n\t}\r\n\t\r\n\tstatic class Node implements Comparable<Node> {\r\n\t\tboolean defined=false;\r\n\t\tint distanceToEnd=-1;\r\n\t\tArrayList<Node> canReach=new ArrayList<>();\r\n\t\tArrayList<Node> canReachMe=new ArrayList<>();\r\n\t\tint undefinedOutDegree=0;\r\n\t\tint index;\r\n\t\t\r\n\t\tpublic Node(int index) {\r\n\t\t\tthis.index=index;\r\n\t\t}\r\n\t\t\r\n\t\tvoid solve(ArrayList<Node> toProcess, TreeSet<Node> possiblyReachable) {\r\n\t\t\tif (defined) return;\r\n\t\t\tdefined=true;\r\n\t\t\tint smallestReachable=Integer.MAX_VALUE, biggestReachable=0;\r\n\t\t\tboolean canReachUndef=false;\r\n\t\t\tfor (Node n:canReach) {\r\n\t\t\t\tif (!n.defined) canReachUndef=true;\r\n\t\t\t\telse {\r\n\t\t\t\t\tsmallestReachable=Math.min(smallestReachable, n.distanceToEnd);\r\n\t\t\t\t\tbiggestReachable=Math.max(biggestReachable, n.distanceToEnd);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (smallestReachable!=Integer.MAX_VALUE) {\r\n\t\t\t\tif (!canReachUndef)\r\n\t\t\t\t\tdistanceToEnd=Math.min(biggestReachable, smallestReachable+1);\r\n\t\t\t\telse\r\n\t\t\t\t\tdistanceToEnd=smallestReachable+1;\r\n\t\t\t}\r\n\t\t\tfor (Node n:canReachMe) {\r\n\t\t\t\tn.undefinedOutDegree--;\r\n\t\t\t\tif (n.undefinedOutDegree==0)\r\n\t\t\t\t\ttoProcess.add(n);\r\n\t\t\t\telse\r\n\t\t\t\t\tpossiblyReachable.add(n);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic int compareTo(Node o) {\r\n\t\t\treturn Integer.compare(index, o.index);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\tstatic class FastScanner {\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tStringTokenizer st=new StringTokenizer(\"\");\r\n\t\t\r\n\t\tpublic String next() {\r\n\t\t\twhile (!st.hasMoreTokens())\r\n\t\t\t\ttry {\r\n\t\t\t\t\tst=new StringTokenizer(br.readLine());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\treturn st.nextToken();\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tpublic int nextInt() {\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\t\t\r\n\t\tpublic long nextLong() {\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\t\t\r\n\t\tpublic int[] readArray(int n) {\r\n\t\t\tint[] a=new int[n];\r\n\t\t\tfor (int i=0; i<n; i++)\r\n\t\t\t\ta[i]=nextInt();\r\n\t\t\treturn a;\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n"
}