{
    "id": 208860242,
    "contestId": 346,
    "creationTimeSeconds": 1686119593,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "shiyihang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 26726400,
    "source": "// LUOGU_RID: 112200824\n#include <algorithm>\n#include <cstdio>\n#include <deque>\n#include <iostream>\n#include <vector>\nusing namespace std;\nclass fastIO {\n  private:\n    char ibuf[50007], *p1 = ibuf, *p2 = ibuf, obuf[50007],\n                      *p3 = obuf, sta[50];\n    bool file_end = false;\n    auto get() -> char {\n        return p1 == p2 &&\n                   (p2 = (p1 = ibuf) +\n                         fread(ibuf, 1, 50007, stdin),\n                    p1 == p2)\n               ? (file_end = true),\n               static_cast<char>(EOF) : *p1++;\n    }\n    void put(const char x) {\n        p3 - obuf < 50007\n            ? *p3++ = x\n            : (fwrite(obuf, p3 - obuf, 1, stdout),\n               p3 = obuf, *p3++ = x);\n    }\n\n  public:\n    explicit operator bool() const { return !file_end; }\n    auto flush() -> size_t {\n        size_t f = fwrite(obuf, p3 - obuf, 1, stdout);\n        p3 = obuf;\n        *p3 = 0;\n        return f;\n    }\n    auto operator>>(char &t) -> fastIO & {\n        for (t = get(); isgraph(t) == 0; t = get()) {\n            ;\n        }\n        return *this;\n    }\n    template <typename any>\n    auto tpval() -> typename std::enable_if<\n        std::is_same<any, char>::value, any>::type {\n        char t;\n        for (t = get(); !isgraph(t); t = get()) {\n            ;\n        }\n        return t;\n    }\n    auto operator>>(char *t) -> fastIO & {\n        char c;\n        for (c = get(); isgraph(c) == 0; c = get()) {\n            ;\n        }\n        for (; isgraph(c) != 0; c = get()) {\n            *t = c, t++;\n        }\n        *t = 0;\n        return *this;\n    }\n    auto operator>>(std::string &t) -> fastIO & {\n        t.clear();\n        char c;\n        for (c = get(); isgraph(c) == 0; c = get()) {\n            ;\n        }\n        for (; isgraph(c) != 0; c = get()) {\n            t += c;\n        }\n        return *this;\n    }\n    template <typename any>\n    auto tpval() -> typename std::enable_if<\n        std::is_same<any, std::string>::value, any>::type {\n        std::string t;\n        char c;\n        for (c = get(); !isgraph(c); c = get()) {\n            ;\n        }\n        for (; isgraph(c); c = get()) {\n            t += c;\n        }\n        return t;\n    }\n    template <typename any>\n    auto operator>>(any &t) -> typename std::enable_if<\n        (std::is_signed<any>::value &&\n         std::is_integral<any>::value &&\n         !std::is_same<any, char>::value) ||\n            std::is_same<any, __int128_t>::value,\n        fastIO>::type & {\n        t = 0;\n        bool y = false;\n        char c = get();\n        for (; !isdigit(c); c = get()) {\n            if (c == 45) {\n                y = true;\n            }\n        }\n        for (; isdigit(c); c = get()) {\n            t = t * 10 + c - 48;\n        }\n        if (y == 1) {\n            t = -t;\n        }\n        return *this;\n    }\n    template <typename any>\n    auto tpval() -> typename std::enable_if<\n        (std::is_signed<any>::value &&\n         std::is_integral<any>::value &&\n         !std::is_same<any, char>::value) ||\n            std::is_same<any, __int128_t>::value,\n        any>::type {\n        any t = 0;\n        bool y = false;\n        char c = get();\n        for (; !isdigit(c); c = get()) {\n            if (c == 45) {\n                y = true;\n            }\n        }\n        for (; isdigit(c); c = get()) {\n            t = t * 10 + c - 48;\n        }\n        if (y == 1) {\n            t = -t;\n        }\n        return t;\n    }\n    template <typename any>\n    auto operator>>(any &t) -> typename std::enable_if<\n        (std::is_unsigned<any>::value &&\n         std::is_integral<any>::value &&\n         !std::is_same<any, char>::value) ||\n            std::is_same<any, __uint128_t>::value,\n        fastIO>::type & {\n        t = 0;\n        char c = get();\n        for (; !isdigit(c); c = get()) {\n            ;\n        }\n        for (; isdigit(c); c = get()) {\n            t = t * 10 + c - 48;\n        }\n        return *this;\n    }\n    template <typename any>\n    auto tpval() -> typename std::enable_if<\n        (std::is_unsigned<any>::value &&\n         std::is_integral<any>::value &&\n         !std::is_same<any, char>::value) ||\n            std::is_same<any, __uint128_t>::value,\n        any>::type {\n        any t = 0;\n        char c = get();\n        for (; !isdigit(c); c = get()) {\n            ;\n        }\n        for (; isdigit(c); c = get()) {\n            t = t * 10 + c - 48;\n        }\n        return t;\n    }\n    template <typename any1, typename any2>\n    auto operator>>(std::pair<any1, any2> &t) -> fastIO & {\n        return *this >> t.first >> t.second;\n    }\n    template <typename any1, typename any2>\n    auto tpval() -> std::pair<any1, any2> {\n        return std::pair<any1, any2>(tpval<any1>(),\n                                     tpval<any2>());\n    }\n    template <typename any> auto read(any &t) -> fastIO & {\n        return *this >> t;\n    }\n    auto read(char *t) -> fastIO & {\n        char c;\n        for (c = get(); isgraph(c) == 0; c = get()) {\n            ;\n        }\n        for (; isgraph(c) != 0; c = get()) {\n            *t = c, t++;\n        }\n        *t = 0;\n        return *this;\n    }\n    template <typename any, typename... args>\n    auto read(any &t1, args &...t2) -> fastIO & {\n        return (*this >> t1).read(t2...);\n    }\n    auto operator<<(const char t) -> fastIO & {\n        put(t);\n        return *this;\n    }\n    auto operator<<(const char *t) -> fastIO & {\n        for (; *t != 0; t++) {\n            put(*t);\n        }\n        return *this;\n    }\n    auto operator<<(const std::string &t) -> fastIO & {\n        for (const char it : t) {\n            put(it);\n        }\n        return *this;\n    }\n    template <typename any>\n    auto operator<<(any t) -> typename std::enable_if<\n        (std::is_signed<any>::value &&\n         std::is_integral<any>::value &&\n         !std::is_same<any, char>::value) ||\n            std::is_same<any, __int128_t>::value,\n        fastIO>::type & {\n        if (!t) {\n            put(48);\n            return *this;\n        }\n        int len = 0;\n        if (t < 0) {\n            t = -t, put(45);\n        }\n        while (t) {\n            sta[len++] = static_cast<char>(t % 10 + 48),\n            t /= 10;\n        }\n        while (len--) {\n            put(sta[len]);\n        }\n        return *this;\n    }\n    template <typename any>\n    auto operator<<(any t) -> typename std::enable_if<\n        (std::is_unsigned<any>::value &&\n         std::is_integral<any>::value &&\n         !std::is_same<any, char>::value) ||\n            std::is_same<any, __uint128_t>::value,\n        fastIO>::type & {\n        if (!t) {\n            put(48);\n            return *this;\n        }\n        int len = 0;\n        while (t) {\n            sta[len++] = char(t % 10 + 48), t /= 10;\n        }\n        while (len--) {\n            put(sta[len]);\n        }\n        return *this;\n    }\n    template <typename any1, typename any2>\n    auto operator<<(const std::pair<any1, any2> &t)\n        -> fastIO & {\n        return *this << t.first << ' ' << t.second;\n    }\n    template <typename any>\n    auto write(const any &t) -> fastIO & {\n        return *this << t;\n    }\n    template <typename any, typename... args>\n    auto write(const any &t1, const args &...t2)\n        -> fastIO & {\n        return (*this << t1).write(t2...);\n    }\n    ~fastIO() { fwrite(obuf, p3 - obuf, 1, stdout); }\n} fio;\nconstexpr int inf = 0x3f3f3f3f;\nvector<int> mp[500005];\nint n, m;\nint s, t;\nint mn[500005];\nint mx[500005];\nint f[500005];\ndeque<int> q;\nbool vis[500005];\nvoid dijkstra() {\n    f[t] = 0;\n    q.push_back(t);\n    while (!q.empty() != 0u) {\n        int x = q.front();\n        q.pop_front();\n        if (vis[x]) {\n            continue;\n        }\n        vis[x] = 1;\n        for (auto v : mp[x]) {\n            --mx[v];\n            mn[v] = min(mn[v], f[x]);\n            int d = mn[v] + 1;\n            if (mx[v] == 0) {\n                d = min(d, f[x]);\n            }\n            if (f[v] > d) {\n                f[v] = d;\n                if (f[v] == f[x]) {\n                    q.push_front(v);\n                }\n                else {\n                    q.push_back(v);\n                }\n            }\n        }\n    }\n}\nauto main() -> int {\n    // freopen(\"bot.in\", \"r\", stdin);\n    // freopen(\"bot.out\", \"w\", stdout);\n    fio >> n >> m;\n    for (int i = 1; i <= m; ++i) {\n        int u;\n        int v;\n        fio >> u >> v;\n        mp[v].push_back(u);\n        ++mx[u];\n    }\n    fio >> s >> t;\n    for (int i = 1; i <= n; ++i) {\n        mn[i] = inf;\n        f[i] = inf;\n    }\n    dijkstra();\n    if (f[s] == inf) {\n        fio << \"-1\\n\";\n    }\n    else {\n        fio << f[s] << \"\\n\";\n    }\n    return 0;\n}\n"
}