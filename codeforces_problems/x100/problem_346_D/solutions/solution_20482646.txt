{
    "id": 20482646,
    "contestId": 346,
    "creationTimeSeconds": 1473439564,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "enpixi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 530,
    "memoryConsumedBytes": 21094400,
    "source": "#include <iostream>\r\n#include <stdio.h>\r\n#include <string.h>\r\n#include <queue>\r\nusing namespace std;\r\n\r\ndeque<int> que;\r\nconst int N=1000010,M=1000010,INF=2000000000;\r\nbool vis[N];\r\nint dist[N],first[N],nxt[M],vv[M],e,out[N];\r\n\r\n\r\nvoid init(){\r\n    e=0;\r\n    memset(first,-1,sizeof(first));\r\n}\r\n\r\nvoid add_edge(int u,int v){\r\n    ++e;\r\n    vv[e]=v;nxt[e]=first[u];first[u]=e;\r\n}\r\n\r\nint main()\r\n{\r\n    int n,m,u,v,s,t;\r\n    while(scanf(\"%d%d\",&n,&m)==2){\r\n        init();\r\n        memset(out,0,sizeof(out));\r\n        for(int i=1;i<=m;i++){\r\n            scanf(\"%d%d\",&u,&v);\r\n            add_edge(v,u);\r\n            out[u]++;\r\n        }\r\n        scanf(\"%d%d\",&s,&t);\r\n\r\n        for(int i=1;i<=n;i++) dist[i]=INF;\r\n        dist[t]=0;\r\n\r\n        while(!que.empty()) que.pop_front();\r\n        memset(vis,false ,sizeof(vis));\r\n        que.push_front(t);\r\n\r\n        while(!que.empty()){\r\n            int u=que.front();\r\n            que.pop_front();\r\n            if(u==s) break;\r\n            if(vis[u]) continue;\r\n            vis[u]=true;\r\n            for(int i=first[u];i!=-1;i=nxt[i]){ //v->u\r\n                int v=vv[i];\r\n                out[v]--;\r\n                if(out[v]==0){  //  v\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u90fd\u786e\u5b9a\u4e86\r\n                    if(dist[v]>dist[u]){\r\n                        dist[v]=dist[u];\r\n                        que.push_front(v);\r\n                    }\r\n                }else if(dist[v]==INF){  //\u5982\u679cv\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\r\n                    dist[v]=dist[u]+1;\r\n                    que.push_back(v);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(dist[s]==INF) dist[s]=-1;\r\n        printf(\"%d\",dist[s]);\r\n    }\r\n    return 0;\r\n}\r\n"
}