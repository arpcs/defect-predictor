{
    "id": 13201401,
    "contestId": 346,
    "creationTimeSeconds": 1443085648,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "SSure"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nconst int maxn = 1000002;\r\nconst int inf = 1 << 29;\r\n\r\nvector<int> edge[maxn];\r\n\r\nint m,n,s,t;\r\n\r\nvoid read() {\r\n  for (int i=0;i<=n;i++) {\r\n    edge[i].clear();\r\n  }\r\n  int u,v;\r\n  for (int i=0;i<m;i++) {\r\n    scanf(\"%d%d\", &u,&v);\r\n    edge[u].push_back(v);\r\n  }\r\n  scanf(\"%d%d\", &s,&t);\r\n  return;\r\n}\r\n\r\nint dp[maxn];\r\n\r\nint dfs(int st) {\r\n  if (dp[st] != -1) {\r\n    return dp[st];\r\n  }\r\n  if (st == t) {\r\n    return dp[st] = 0;\r\n  }\r\n  if (edge[st].size() == 0) {\r\n    return dp[st] = inf;\r\n  }\r\n\r\n  dp[st] = inf;\r\n  int min_val = inf;\r\n  for (int i=0;i<edge[st].size();i++) {\r\n    int tmp = dfs(edge[st][i]);\r\n    min_val = min(min_val, tmp);\r\n  }\r\n  if (min_val == inf) return inf;\r\n  bool flag = true;\r\n  for (int i=0;i<edge[st].size();i++) {\r\n    if (dp[edge[st][i]] != min_val) {\r\n      flag = false;\r\n      break;\r\n    }\r\n  }\r\n  if (flag) dp[st] = min_val;\r\n  else dp[st] = min_val+1;\r\n\r\n  return dp[st];\r\n}\r\n\r\nvoid solve() {\r\n  if (s == t) {\r\n    puts(\"0\");\r\n    return;\r\n  }\r\n\r\n  memset(dp,-1,sizeof(dp));\r\n  int res = dfs(s);\r\n  if (res == inf) res = -1;\r\n  printf (\"%d\\n\", res);\r\n  return;\r\n}\r\n\r\nint main() {\r\n  while (~scanf(\"%d%d\", &n,&m)) {\r\n    read();\r\n    solve();\r\n  }\r\n  return 0;\r\n}\r\n"
}