{
    "id": 4549126,
    "contestId": 346,
    "creationTimeSeconds": 1380031003,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "xtalclr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 716,
    "memoryConsumedBytes": 48332800,
    "source": "#include <cstdio>\n#include <vector>\nusing namespace std;\n\nconst int max_n = 1000000;\nconst int max_m = 1000000;\nint n, m, st[max_m], ed[max_m], s, t; \nint deg[max_n];\nvector<int> rev[max_n];\nint q[max_n], q_st, q_ed;\nint ans[max_n];\n\nint main()\n{\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 0; i < m; i++)\n        scanf(\"%d %d\", &st[i], &ed[i]), st[i]--, ed[i]--;\n    scanf(\"%d %d\", &s, &t), s--, t--;\n\n    for(int i = 0; i < n; i++)\n        deg[i] = 0, rev[i].clear();\n    for(int i = 0; i < m; i++)\n        if(st[i] != t)\n            deg[st[i]]++, rev[ed[i]].push_back(st[i]);\n\n    for(int i = 0; i < n; i++)\n        ans[i] = -1;\n    q_st = q_ed = 0;\n    q[q_ed++] = t;\n    ans[t] = 0;\n    int cans = 0;\n    while(q_st < q_ed)\n    {\n        int cst = q_st;\n        while(q_st < q_ed)\n        {\n            int nd = q[q_st++];\n            for(int j = 0; j < int(rev[nd].size()); j++)\n            {\n                int pnd = rev[nd][j];\n                deg[pnd]--;\n                if(ans[pnd] == -1 && deg[pnd] == 0)\n                {\n                    ans[pnd] = cans;\n                    q[q_ed++] = pnd;\n                }\n            }\n        }\n        int ced = q_ed;\n        cans++;\n        for(int i = cst; i < ced; i++)\n        {\n            int nd = q[i];\n            for(int j = 0; j < int(rev[nd].size()); j++)\n            {\n                int pnd = rev[nd][j];\n                if(ans[pnd] == -1)\n                {\n                    ans[pnd] = cans;\n                    q[q_ed++] = pnd;\n                }\n            }\n        }\n    }\n\n    printf(\"%d\\n\", ans[s]);\n\n    return 0;\n}\n"
}