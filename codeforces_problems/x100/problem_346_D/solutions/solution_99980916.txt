{
    "id": 99980916,
    "contestId": 346,
    "creationTimeSeconds": 1606737238,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 346,
        "index": "D",
        "name": "Robot Control",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 346,
        "members": [
            {
                "handle": "Kai29"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1379691000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 716,
    "memoryConsumedBytes": 60620800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=1000005;\r\nconst int inf=1147483646;\r\nstruct edge {\r\n  int to,nxt;\r\n}e1[N<<1],e2[N<<1];\r\nint head1[N<<1],head2[N<<1],cnt1=-1,cnt2=-1,dp[N<<1];\r\nbool vis[2200005];\r\nvoid addedge1(int x,int y){\r\n  e1[++cnt1].to=y;e1[cnt1].nxt=head1[x];head1[x]=cnt1;\r\n}\r\nvoid addedge2(int x,int y){\r\n  e2[++cnt2].to=y;e2[cnt2].nxt=head2[x];head2[x]=cnt2;\r\n}\r\nqueue<int> q;\r\nint n,m,s,t;\r\nint main() {\r\n  memset(head1,-1,sizeof(head1));\r\n  memset(head2,-1,sizeof(head2));\r\n  scanf(\"%d%d\",&n,&m);\r\n  for (int i=1;i<=m;++i) {\r\n    int x,y;\r\n    scanf(\"%d%d\",&x,&y);\r\n    addedge1(x,y);\r\n    addedge2(y,x);\r\n  }\r\n  scanf(\"%d%d\",&s,&t);\r\n  for (int i=1;i<=n+20;++i) dp[i]=inf;\r\n  vis[t]=1;\r\n  dp[t]=0;\r\n  q.push(t);\r\n  while(!q.empty()) {\r\n    int x=q.front();\r\n    q.pop();\r\n    vis[x]=0;\r\n    for (int i=head2[x];~i;i=e2[i].nxt) {\r\n      int v=e2[i].to;\r\n      if(dp[v]>dp[x]+1) {\r\n        dp[v]=dp[x]+1;\r\n        if(!vis[v]) {\r\n          vis[v]=1;\r\n          q.push(v);\r\n        }\r\n      }\r\n    }\r\n    int maxn=0;\r\n    for (int i=head1[x];~i;i=e1[i].nxt) {\r\n      int v=e1[i].to;\r\n      maxn=max(maxn,dp[v]);\r\n    }\r\n    if(dp[x]>maxn) {\r\n      dp[x]=maxn;\r\n      if(!vis[x]) {\r\n        vis[x]=1;\r\n        q.push(x);\r\n      }\r\n    }\r\n  }\r\n  if(dp[s]!=inf) printf(\"%d\\n\",dp[s]);\r\n  else puts(\"-1\");\r\n  return 0;\r\n}\r\n"
}