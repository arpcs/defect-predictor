{
    "id": 191440290,
    "contestId": 279,
    "creationTimeSeconds": 1675200345,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 279,
        "index": "D",
        "name": "The Minimum Number of Variables",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 279,
        "members": [
            {
                "handle": "kribri"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362411000
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\nimport java.util.concurrent.ThreadLocalRandom;\n\n//5\n//101\n\n//111\n//010\n\n\n//18\n//10010\n\n//11001\n//01011\n\n//11011\n//01001\n\n//11111\n//01101\npublic class CF {\n    private static void solve(int[] a) {\n        int n = a.length;\n        List<Integer>[] list = new ArrayList[n];\n        for (int i = 0; i < n; i++) {\n            list[i] = new ArrayList<>();\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (a[i] == a[j] + a[k]) {\n                        int mask = (1 << j) | (1 << k);\n                        list[i].add(mask);\n                    }\n                }\n            }\n        }\n        boolean[] can = new boolean[1<<n];\n        can[1] = true;\n        int ans = Integer.MAX_VALUE;\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < (1 << n); j++) {\n                boolean b = false;\n                for (Integer mask : list[i]) {\n                    if ((mask & j) == mask) {\n                        b = true;\n                        break;\n                    }\n                }\n                if (b && can[j] && ((j & (1 << i)) == 0)) {\n                    int nmask = (j | (1 << i));\n                    can[nmask] = true;\n                    if (i == n - 1) {\n                        int bitCount = Integer.bitCount(nmask);\n                        ans = Math.min(ans, bitCount);\n                    }\n                    for (int k = 0; k < i; k++) {\n                        if ((nmask & (1 << k)) > 0) {\n                            can[nmask ^ (1 << k)] = true;\n                            if (i == n - 1) {\n                                int bitCount = Integer.bitCount(nmask ^ (1 << k));\n                                ans = Math.min(ans, bitCount);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        System.out.println(ans);\n    }\n\n    static void shuffleArray(int[] ar) {\n        // If running on Java 6 or older, use `new Random()` on RHS here\n        Random rnd = ThreadLocalRandom.current();\n        for (int i = ar.length - 1; i > 0; i--) {\n            int index = rnd.nextInt(i + 1);\n            // Simple swap\n            int a = ar[index];\n            ar[index] = ar[i];\n            ar[i] = a;\n        }\n    }\n\n    static class UF {\n        int[] a;\n        int[] size;\n\n        public UF(int n) {\n            a = new int[n];\n            size = new int[n];\n            for (int i = 0; i < n; i++) {\n                a[i] = i;\n            }\n            Arrays.fill(size, 1);\n        }\n\n        void connect(int u, int v) {\n            int up = find(u);\n            int vp = find(v);\n            if (up == vp) {\n                return;\n            }\n            if (size[up] >= size[vp]) {\n                a[vp] = up;\n                size[up] += size[vp];\n            } else {\n                a[up] = vp;\n                size[vp] += size[up];\n            }\n        }\n\n        int find(int v) {\n            while (v != a[v]) {\n                v = a[v];\n            }\n            return v;\n        }\n    }\n\n    public static void main(String[] args) {\n        FastScanner sc = new FastScanner();\n        int n = sc.nextInt();\n        int[] a = sc.readArrayInt(n);\n        solve(a);\n    }\n\n    static class FastScanner {\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        StringTokenizer st = new StringTokenizer(\"\");\n\n        String next() {\n            while (!st.hasMoreTokens())\n                try {\n                    st = new StringTokenizer(br.readLine());\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            return st.nextToken();\n        }\n\n        int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n        long[] readArrayLong(int n) {\n            long[] a = new long[n];\n            for (int i = 0; i < n; i++)\n                a[i] = nextLong();\n            return a;\n        }\n\n        int[] readArrayInt(int n) {\n            int[] a = new int[n];\n            for (int i = 0; i < n; i++)\n                a[i] = nextInt();\n            return a;\n        }\n\n        long nextLong() {\n            return Long.parseLong(next());\n        }\n\n        double nextDouble() {\n            return Double.parseDouble(next());\n        }\n    }\n}"
}