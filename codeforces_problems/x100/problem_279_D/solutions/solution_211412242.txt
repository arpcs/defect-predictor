{
    "id": 211412242,
    "contestId": 279,
    "creationTimeSeconds": 1688030729,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 279,
        "index": "D",
        "name": "The Minimum Number of Variables",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 279,
        "members": [
            {
                "handle": "Jacksonrr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362411000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 33587200,
    "source": "#include<bits/stdc++.h>\r\n#define inf 0x7fffffff\r\n#define bigMax 10000\r\n#define INF 4611686018427387904\r\n#define ll long long\r\n#define pb push_back\r\n#define dir4 dx[5]={-1,0,1,0},dy[5]={0,1,0,-1}\r\n#define dir8 dx[10]={-1,-1,-1,0,1,1,1,0},dy[10]={-1,0,1,-1,-1,0,1,1}\r\n#define dirh dx[10]={-2,-2,-1,1,2,2,1,-1},dy[10]={-1,1,2,2,1,-1,-2,-2}\r\n#define rep(i,l,x) for(int i=l;i<x;i++)\r\n#define repd(i,l,x) for(int i=l;i>=x;i--)\r\n#define repn(i,l,x) for(int i=l;i<=x;i++)\r\n#define xend putchar('\\n')\r\n#define xspace putchar(' ')\r\nusing namespace std;\r\nchar gc(){char _ch=getchar();if(_ch=='\\n'||_ch==' ') _ch=getchar();return _ch;}\r\n\tinline int read(){int _res=0,_ch,_flag=0;if((_ch=getchar())=='\\n') _ch=getchar();if(_ch=='-') _flag=1;else if(_ch>='0'&&_ch<='9') _res=_ch-'0';while((_ch=getchar())>='0'&&_ch<='9')_res=_res*10+_ch-'0';_flag?-_res:_res;}\r\nnamespace calcu{\r\nconst ll mo=1e9+7;\r\nstruct martrix{\r\n\tll h,w,v[105][105]={};\r\n\tinline ll read(ll _h,ll _w){\r\n\t\th=_h,w=_w;\r\n\t\tfor(ll i=1;i<=_h;i++){\r\n\t\t\tfor(ll j=1;j<=_w;j++){\r\n\t\t\t\tscanf(\"%lld\",&v[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tinline void print(ll _h,ll _w){\r\n\t\tfor(ll i=1;i<=_h;i++){\r\n\t\t\tfor(ll j=1;j<=_w;j++){\r\n\t\t\t\tprintf(\"%lld \",v[i][j]);\r\n\t\t\t}\r\n\t\t\tputchar('\\n');\r\n\t\t}\r\n\t}\r\n};\r\nmartrix operator*(martrix _fir, martrix _sec){\r\n\tmartrix _res;\r\n\t_res.h=_fir.h,_res.w=_sec.w;\r\n\tif(_fir.w!=_sec.h) return _res;\r\n\trepn(i,1,_res.h){\r\n\t\trepn(j,1,_res.w){\r\n\t\t\trepn(k,1,_fir.w){\r\n\t\t\t\t_res.v[i][j]=(_res.v[i][j]+_fir.v[i][k]*_sec.v[k][j])%mo;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn _res;\r\n}\r\ntemplate<typename T>\r\nT quickpow(T _a,ll _b){\r\n\tT _sum=_a;\r\n\t_b--;\r\n\twhile(_b){\r\n\t\tif(_b&1) _sum=(_sum*_a);\r\n\t\t_a=(_a*_a);\r\n\t\t_b>>=1;\r\n\t}\r\n\treturn _sum;\r\n}\r\n\r\n}\tinline void write(int _x){if(_x<0){putchar('-');_x=-_x;}if(_x>9) write(_x/10);putchar(_x%10+'0');}\r\n\r\nnamespace fastBig{\r\n\tstruct Bigint{\r\n\t\tint _len,_a[bigMax];\r\n\t\tbool _neg=false;\r\n\t\tBigint(int _x = 0){\r\n\t\t\tfor(int _i=0;_i<bigMax-1;_i++) _a[_i]=0;\r\n\t\t\tfor(_len=1;_x;_len++) _a[_len]=_x%10,_x/=10;\r\n\t\t\t_len--;\r\n\t\t}\r\n\t\tint &operator[](int _i){\r\n\t\t\treturn _a[_i];\r\n\t\t}\r\n\t\tvoid flatten(int _L){\r\n\t\t\t_len = _L;\r\n\t\t\tfor(int _i=1;_i<=_len;_i++) _a[_i+1]+=(_a[_i]>=0)?_a[_i]/10:-(((-_a[_i])+9)/10),_a[_i]=(_a[_i]>=0)?_a[_i]%10:(((-_a[_i])+9)/10)*10+_a[_i];\r\n\t\t\tfor(;!_a[_len];) _len--;\r\n\t\t}\r\n\t\tvoid print(){\r\n\t\t\tif(_neg==true) putchar('-');\r\n\t\t\tfor(int _i = std::max(_len,1);_i>=1;_i--)\r\n\t\t\t\tputchar(_a[_i]+'0');\r\n\t\t}\r\n\t\tvoid read(){\r\n\t\t\t_len=0;\r\n\t\t\tchar _ch=' ';\r\n\t\t\tif((_ch=getchar())=='\\n'||_ch==' ') _ch=getchar();\r\n\t\t\tif(_ch=='-') _neg=true;\r\n\t\t\telse if(_ch>='0'&&_ch<='9') _a[++_len]=_ch-'0';\r\n\t\t\twhile((_ch=getchar())>='0'&&_ch<='9') _a[++_len]=_ch-'0';\r\n\t\t\tfor(int _i=1;_i<=_len/2;_i++) std::swap(_a[_i],_a[_len-_i+1]);\r\n\t\t}\r\n\r\n\t};\r\n\tbool operator <(Bigint _a,Bigint _b){\r\n\t\tif(_a._neg==false&&_b._neg==true) return false;\r\n\t\telse if(_a._neg==true&&_b._neg==false) return true;\r\n\t\telse if(_a._len<_b._len) return !_a._neg;\r\n\t\telse if(_a._len>_b._len) return _a._neg;\r\n\t\tfor(int _i=_a._len;_i>=1;_i--)\r\n\t\t\tif(_a[_i]<_b[_i]) return !_a._neg;\r\n\t\t\telse if(_a[_i]>_b[_i]) return _a._neg;\r\n\t\treturn false;\r\n\t}\r\n\tbool operator >(Bigint _a,Bigint _b){\r\n\t\tif(_a._neg==false&&_b._neg==true) return true;\r\n\t\telse if(_a._neg==true&&_b._neg==false) return false;\r\n\t\telse if(_a._len<_b._len) return _a._neg;\r\n\t\telse if(_a._len>_b._len) return !_a._neg;\r\n\t\tfor(int _i=_a._len;_i>=1;_i--)\r\n\t\t\tif(_a[_i]<_b[_i]) return _a._neg;\r\n\t\t\telse if(_a[_i]>_b[_i]) return !_a._neg;\r\n\t\treturn false;\r\n\t}\r\n\r\n\tbool operator ==(Bigint _a,Bigint _b){\r\n\t\tif(_a._len!=_b._len||_a._neg!=_b._neg) return false;\r\n\t\tfor(int _i=_a._len;_i>=1;_i--)\r\n\t\t\tif(_a[_i]!=_b[_i]) return false;\r\n\t\treturn true;\r\n\t}\r\n\tbool operator <=(Bigint _a,Bigint _b){\r\n\t\treturn (_a<_b)||(_a==_b);\r\n\t}\r\n\tbool operator >=(Bigint _a,Bigint _b){\r\n\t\treturn (_a>_b)||(_a==_b);\r\n\t}\r\n\tBigint operator-(Bigint _a, Bigint _b){\r\n\t\tBigint _c;\r\n\t\tif(_a._neg==_b._neg&&_a._neg==false){\r\n\t\t\t_c._neg=(_b>_a);\r\n\t\t\tif(_c._neg==true) std::swap(_a,_b);\r\n\t\t\tint _len=std::max(_a._len,_b._len);\r\n\t\t\tfor(int _i=1;_i<=_len;_i++) _c[_i]+=_a[_i]-_b[_i];\r\n\t\t\t_c.flatten(_len+1);\r\n\t\t\treturn _c;\r\n\t\t}\r\n\t\tif(_a._neg==_b._neg&&_a._neg==true){\r\n\t\t\t_c._neg=true,_a._neg=_b._neg=false;\r\n\t\t\tif(_a<=_b) _c._neg=!_c._neg,std::swap(_a,_b);\r\n\t\t\tint _len=std::max(_a._len,_b._len);\r\n\t\t\tfor(int _i=1;_i<=_len;_i++) _c[_i]+=_a[_i]-_b[_i];\r\n\t\t\t_c.flatten(_len+1);\r\n\t\t\treturn _c;\r\n\t\t}\r\n\t\tif(_a._neg==true){\r\n\t\t\t_c._neg=true;\r\n\t\t\tint _len=std::max(_a._len,_b._len);\r\n\t\t\tfor(int _i=1;_i<=_len;_i++) _c[_i]+=_a[_i]+_b[_i];\r\n\t\t\t_c.flatten(_len+1);\r\n\t\t\treturn _c;\r\n\t\t}\r\n\t\tif(_b._neg==true){\r\n\t\t\t_c._neg=false;\r\n\t\t\tint _len=std::max(_a._len,_b._len);\r\n\t\t\tfor(int _i=1;_i<=_len;_i++) _c[_i]+=_a[_i]+_b[_i];\r\n\t\t\t_c.flatten(_len+1);\r\n\t\t\treturn _c;\r\n\t\t}\r\n\t}\r\n\tBigint operator+(Bigint _a, Bigint _b){\r\n\t\tBigint _c;\r\n\t\tif(_a._neg==_b._neg){\r\n\t\t\t_c._neg=_a._neg;\r\n\t\t\tint _len=std::max(_a._len,_b._len);\r\n\t\t\tfor(int _i=1;_i<=_len;_i++) _c[_i]+=_a[_i]+_b[_i];\r\n\t\t\t_c.flatten(_len+1);\r\n\t\t\treturn _c;\r\n\t\t}\r\n\t\tif(_a._neg==true){\r\n\t\t\t_a._neg=false;\r\n\t\t\treturn (_b-_a);\r\n\t\t}\r\n\t\tif(_b._neg==true){\r\n\t\t\t_b._neg=false;\r\n\t\t\treturn (_a-_b);\r\n\t\t}\r\n\t}\r\n\tBigint operator*(Bigint _a, Bigint _b){\r\n\t\tBigint _c;\r\n\t\tfor(int _i=1;_i<=_a._len;_i++) for(int _j=1;_j<=_b._len;_j++) _c._a[_i+_j-1]+=_a._a[_i]*_b._a[_j];\r\n\t\t_c.flatten(_a._len+_b._len+5);\r\n\t\t_c._neg=(_a._neg!=_b._neg);\r\n\t\treturn _c;\r\n\t}\r\n\tBigint operator/(Bigint _a,int _b){\r\n\t\tBigint _c;\r\n\t\tlong long _cur=0;\r\n\t\tfor(int _i=_a._len;_i>=1;_i--){\r\n\t\t\t_cur=_cur*10+(long long)_a._a[_i];\r\n\t\t\tif(_cur/(long long)_b>=1){\r\n\t\t\t\t_c._a[_i]=(int)(_cur/_b);\r\n\t\t\t\t_cur%=(long long)_b;\r\n\t\t\t}\r\n\t\t}\r\n\t\t_c.flatten(_a._len);\r\n\t\t_c._neg=(_a._neg!=(_b<0));\r\n\t\treturn _c;\r\n\t}\r\n}\r\nusing namespace fastBig;\r\nint gcd(int _fnum,int _snum){if(_snum!=0) return gcd(_snum,_fnum%_snum);else return _fnum;}\r\nll Lgcd(ll _fnum,ll _snum){if(_snum!=0) return Lgcd(_snum,_fnum%_snum);else return _fnum;}\r\nint lcm(int _fnum,int _snum){return _fnum*_snum/gcd(_fnum,_snum);}\r\nll Llcm(ll _fnum,ll _snum){return _fnum*_snum/Lgcd(_fnum,_snum);}\r\nfloat getDis(float _sx, float _sy, float _ex, float _ey){\r\n\t//The distance between two dots in Cartesian coordinates.\r\n\treturn sqrt((_sx-_ex)*(_sx-_ex)+(_sy-_ey)*(_sy-_ey));\r\n}\r\nbool checkOverlap(int sx1,int sy1,int ex1,int ey1,int sx2,int sy2,int ex2,int ey2){\r\n\t// True for two areas overlapped.\r\n\t// sx<=ex,sy<=ey\r\n\tif(!(sx1<=ex1))swap(sx1,ex1);\r\n\tif(!(sx2<=ex2)) swap(sx2,ex2);\r\n\tif(!(sy1<=ey1)) swap(sy1,ey1);\r\n\tif(!(sy2<=ey2)) swap(sy2,ey2);\r\n\treturn !((sx1>ex2)||(ex1<sx2)||(sy1>ey2)||(ey1<sy2));\r\n}\r\nvoid ChessRead(int &fnum, int &snum){\r\n\tfnum=gc()-'a';\r\n\tsnum=8-(gc()-'0');\r\n}\r\nll quickpow(ll _a,ll _b,ll _modu){\r\n\tll _sum=1;\r\n\twhile(_b){\r\n\t\tif(_b&1) _sum=(_sum*_a)%_modu;\r\n\t\t_a=(_a*_a)%_modu;\r\n\t\t_b>>=1;\r\n\t}\r\n\treturn _sum;\r\n}\r\nint cf_t;\r\n\r\n\r\ntemplate<typename T,typename T2>\r\nstruct csp{\r\n\tbool operator()(const pair<T,T2>& _p1, const pair<T,T2>& _p2) const{\r\n\t\tif(_p1.first!=_p2.first) return _p1.first<_p2.first;\r\n\t\telse return _p1.second<_p2.second;\r\n\t}\r\n};\r\ntypedef pair<int,int> P;\r\nconst int maxn=(1<<23)+5;\r\nint n,a[25]={},dp[maxn]={},ans;\r\nvoid dfs(int cur,int pos){\r\n\tint res=n;\r\n\tdp[cur]=1;\r\n\tif(pos==n+1){\r\n\t\tint tot = 0;\r\n\t\twhile(cur!=0){\r\n\t\t\ttot += (cur&1);\r\n\t\t\tcur >>= 1; \r\n\t }\r\n\t\tans = min( ans , tot );\r\n\t\treturn;\r\n\t}\r\n\trepn(i,1,pos-1){\r\n\t\tif( 1 << (i-1) > cur) break;\r\n\t\tif( ((1 << (i-1)) & cur) == 0) continue;\r\n\t\trepn(j,1,pos-1){\r\n\t\t\tif(a[i]+a[j]!=a[pos]) continue;\r\n\t\t\tif( ((1 << (j-1)) & cur)!=0){\r\n\t\t\t\tif(dp[cur + (1 << (pos-1))]==0) dfs(cur + (1 << (pos-1)),pos+1);\r\n\t\t\t\tif(dp[(cur + (1 << (pos-1))) - (1 << (i-1))]==0) dfs((cur + (1 << (pos-1)) - (1 << (i-1))) , pos+1);\r\n\t\t\t\tif(dp[(cur + (1 << (pos-1))) - (1 << (j-1))]==0) dfs((cur + (1 << (pos-1)) - (1 << (j-1))) , pos+1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn;\r\n}\r\nvoid solve(){\r\n\tcin>>n;\r\n\tans=n+1;\r\n\trepn(i,1,n) cin>>a[i];\r\n\tdfs(1,2);\r\n\tcout<<((ans==n+1)?-1:ans);\r\n}\r\nint main(){\r\n/*\t //Online_Judge\r\n\t   freopen(\"input.txt\",\"r\",stdin);\r\n\t   freopen(\"output.txt\",\"w\",stdout);\r\n*/\r\n\r\n\tcf_t=1;//scanf(\"%d\",&cf_t);\r\n\twhile(cf_t--) solve();\r\n\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}