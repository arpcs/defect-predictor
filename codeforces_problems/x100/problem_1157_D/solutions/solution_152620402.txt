{
    "id": 152620402,
    "contestId": 1157,
    "creationTimeSeconds": 1649025594,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1157,
        "index": "D",
        "name": "N Problems During K Days",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "Eslam_Ahmed"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556289300
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.util.StringTokenizer;\r\n\r\n/**\r\n *\r\n * @author eslam\r\n */\r\npublic class IncreaseSubarraySums {\r\n\r\n    static class FastReader {\r\n\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n    static FastReader input = new FastReader();\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedWriter log = new BufferedWriter(new OutputStreamWriter(System.out));\r\n        long n = input.nextInt();\r\n        int k = input.nextInt();\r\n        Long ans[] = new Long[k];\r\n        if(k==1){\r\n            log.write(\"YES\\n\");\r\n            log.write(n+\"\\n\");\r\n            log.flush();\r\n            return;\r\n        }\r\n        for (int i = k - 1; i > 0; i--) {\r\n            if (n < (long) i * (long) (i + 1) / 2) {\r\n                log.write(\"NO\\n\");\r\n                log.flush();\r\n                return;\r\n            }\r\n            long min = Math.min(i * 2, n - (long) i * (long) (i + 1) / 2);\r\n            ans[i] = min;\r\n            n -= min;\r\n        }\r\n        ans[0] = ans[1]/2;\r\n        n-=ans[0];\r\n        long x = n/k;\r\n        long r = n%k;\r\n        for (int i = 0; i < k; i++) {\r\n            ans[i]+=x;\r\n        }\r\n        long b = r%2;\r\n        r-=b;\r\n        for (int i = 0; i < r; i++) {\r\n            ans[i]+=1;\r\n        }\r\n        if(b>0){\r\n            for (int i = 1; i < k; i++) {\r\n                if(ans[i]<ans[i-1]*2){\r\n                    b--;\r\n                    ans[i]++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(b>0){\r\n            log.write(\"NO\\n\");\r\n            log.flush();\r\n            return;\r\n        }\r\n        for (int i = 0; i < k-1; i++) {\r\n            if (ans[i].equals(ans[i+1]) || ans[i + 1] > ans[i] * 2) {\r\n                log.write(\"NO\\n\");\r\n                log.flush();\r\n                return;\r\n            }\r\n        }\r\n        log.write(\"YES\\n\");\r\n        for (int i = 0; i < k; i++) {\r\n            log.write(ans[i] + \" \");\r\n        }\r\n        log.write(\"\\n\");\r\n        log.flush();\r\n    }\r\n}\r\n"
}