{
    "id": 131935094,
    "contestId": 1157,
    "creationTimeSeconds": 1634214515,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1157,
        "index": "D",
        "name": "N Problems During K Days",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556289300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <assert.h>\nusing namespace std;\n\n#define maxn 100005\nint a[maxn];\n\nint main() {\n    #ifdef LOCAL\n    freopen(\"in.txt\", \"r\", stdin);\n    // freopne(\"out.txt\", \"w\", stdout);\n    #endif\n    ios::sync_with_stdio(0); cin.tie(0);\n\n    int n, k; cin>>n>>k;\n    int mid = n / k;\n    a[1] = mid - k / 2;\n    \n    if (a[1] < 1) {\n        cout<<\"NO\"<<endl;\n        return 0;\n    }\n\n    int sum = a[1];\n    for (int i = 2; i <= k; i++) {\n        a[i] = a[i-1] + 1;\n        sum += a[i];\n    }\n    int delta = n - sum;\n    if (delta >= k) {\n        for (i = 1; i <= k; i++)\n            a[i]++;\n        delta -= k;\n    }\n    assert(delta < k && delta >= 0);\n    for (int i = k; delta != 0 && i > 0; i--) {\n        while(((i != 1 && a[i] + 1 <= a[i-1] * 2) || \\\n                (i == 1 && a[i] + 1 < a[i+1])) && delta != 0) {\n            a[i]++;\n            delta--;\n        }\n    }\n    if (delta != 0) {\n        cout<<\"NO\"<<endl;\n        return 0;\n    }\n    cout<<\"YES\"<<endl;\n    for (int i = 1; i <= k; i++)\n        cout<<a[i]<<\" \";\n    return 0;\n}\n\t  \t\t\t \t\t\t \t\t\t  \t\t \t \t\t\t\t\t \t\t\t\t"
}