{
    "id": 226117669,
    "contestId": 1157,
    "creationTimeSeconds": 1696142267,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1157,
        "index": "D",
        "name": "N Problems During K Days",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "liupengsay"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556289300
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 170,
    "memoryConsumedBytes": 13209600,
    "source": "import random\r\nimport sys\r\n\r\nfrom typing import Callable\r\n\r\n\r\n# sys.setrecursionlimit(10**8)\u8bbe\u7f6e\u6700\u5927\u9012\u5f52\u6b21\u6570\r\n\r\n\r\nclass FastIO:\r\n    def __init__(self):\r\n        self.random_seed = random.randint(0, 10 ** 9 + 7)\r\n        return\r\n\r\n    @staticmethod\r\n    def read_int():\r\n        return int(sys.stdin.readline().strip())\r\n\r\n    @staticmethod\r\n    def read_float():\r\n        return float(sys.stdin.readline().strip())\r\n\r\n    @staticmethod\r\n    def read_list_ints():\r\n        return list(map(int, sys.stdin.readline().strip().split()))\r\n\r\n    @staticmethod\r\n    def read_list_floats():\r\n        return list(map(float, sys.stdin.readline().strip().split()))\r\n\r\n    @staticmethod\r\n    def read_list_ints_minus_one():\r\n        return list(map(lambda x: int(x) - 1, sys.stdin.readline().strip().split()))\r\n\r\n    @staticmethod\r\n    def read_str():\r\n        return sys.stdin.readline().strip()\r\n\r\n    @staticmethod\r\n    def read_list_strs():\r\n        return sys.stdin.readline().strip().split()\r\n\r\n    @staticmethod\r\n    def read_list_str():\r\n        return list(sys.stdin.readline().strip())\r\n\r\n    @staticmethod\r\n    def st(x):\r\n        return print(x)\r\n\r\n    @staticmethod\r\n    def lst(x):\r\n        return print(*x)\r\n\r\n    @staticmethod\r\n    def round_5(f):\r\n        res = int(f)\r\n        if f - res >= 0.5:\r\n            res += 1\r\n        return res\r\n\r\n    @staticmethod\r\n    def max(a, b):\r\n        return a if a > b else b\r\n\r\n    @staticmethod\r\n    def min(a, b):\r\n        return a if a < b else b\r\n\r\n    @staticmethod\r\n    def ceil(a, b):\r\n        return a // b + int(a % b != 0)\r\n\r\n    def hash_num(self, x):\r\n        return x ^ self.random_seed\r\n\r\n    @staticmethod\r\n    def accumulate(nums):\r\n        n = len(nums)\r\n        pre = [0] * (n + 1)\r\n        for i in range(n):\r\n            pre[i + 1] = pre[i] + nums[i]\r\n        return pre\r\n\r\n    def inter_ask(self, lst):\r\n        # CF\u4ea4\u4e92\u9898\u8f93\u51fa\u8be2\u95ee\u5e76\u8bfb\u53d6\u7ed3\u679c\r\n        self.st(lst)\r\n        sys.stdout.flush()\r\n        res = self.read_int()\r\n        # \u8bb0\u5f97\u4efb\u4f55\u4e00\u4e2a\u8f93\u51fa\u4e4b\u540e\u90fd\u8981 sys.stdout.flush() \u5237\u65b0\r\n        return res\r\n\r\n    def inter_out(self, lst):\r\n        # CF\u4ea4\u4e92\u9898\u8f93\u51fa\u6700\u7ec8\u7b54\u6848\r\n        self.st(lst)\r\n        sys.stdout.flush()\r\n        return\r\n\r\n\r\nclass BinarySearch:\r\n    def __init__(self):\r\n        return\r\n\r\n    @staticmethod\r\n    def find_int_left(low: int, high: int, check: Callable) -> int:\r\n        # \u6a21\u677f: \u6574\u6570\u8303\u56f4\u5185\u4e8c\u5206\u67e5\u627e\uff0c\u9009\u62e9\u6700\u9760\u5de6\u6ee1\u8db3check\r\n        while low < high - 1:\r\n            mid = low + (high - low) // 2\r\n            if check(mid):\r\n                high = mid\r\n            else:\r\n                low = mid\r\n        return low if check(low) else high\r\n\r\n    @staticmethod\r\n    def find_int_right(low: int, high: int, check: Callable) -> int:\r\n        # \u6a21\u677f: \u6574\u6570\u8303\u56f4\u5185\u4e8c\u5206\u67e5\u627e\uff0c\u9009\u62e9\u6700\u9760\u53f3\u6ee1\u8db3check\r\n        while low < high - 1:\r\n            mid = low + (high - low) // 2\r\n            if check(mid):\r\n                low = mid\r\n            else:\r\n                high = mid\r\n        return high if check(high) else low\r\n\r\n    @staticmethod\r\n    def find_float_left(low: float, high: float, check: Callable, error=1e-6) -> float:\r\n        # \u6a21\u677f: \u6d6e\u70b9\u6570\u8303\u56f4\u5185\u4e8c\u5206\u67e5\u627e, \u9009\u62e9\u6700\u9760\u5de6\u6ee1\u8db3check\r\n        while low < high - error:\r\n            mid = low + (high - low) / 2\r\n            if check(mid):\r\n                high = mid\r\n            else:\r\n                low = mid\r\n        return low if check(low) else high\r\n\r\n    @staticmethod\r\n    def find_float_right(low: float, high: float, check: Callable, error=1e-6) -> float:\r\n        # \u6a21\u677f: \u6d6e\u70b9\u6570\u8303\u56f4\u5185\u4e8c\u5206\u67e5\u627e, \u9009\u62e9\u6700\u9760\u53f3\u6ee1\u8db3check\r\n        while low < high - error:\r\n            mid = low + (high - low) / 2\r\n            if check(mid):\r\n                low = mid\r\n            else:\r\n                high = mid\r\n        return high if check(high) else low\r\n\r\n\r\nclass Solution:\r\n    def __init__(self):\r\n        return\r\n\r\n    @staticmethod\r\n    def main(ac=FastIO()):\r\n        n, k = ac.read_list_ints()\r\n        if n < k*(k+1)//2:\r\n            ac.st(\"NO\")\r\n            return\r\n\r\n        def check(y):\r\n            return (y+y+cnt-1)*cnt//2 <= n\r\n\r\n        ans = []\r\n        for i in range(k):\r\n            cnt = k-i\r\n            low = 1 if i == 0 else ans[-1]+1\r\n            high = 2*ans[-1] if i else n\r\n            if high > n:\r\n                high = n\r\n            if low > high:\r\n                ac.st(\"NO\")\r\n                return\r\n\r\n            x = BinarySearch().find_int_right(low, high, check)\r\n            ans.append(x)\r\n            n -= x\r\n        if n:\r\n            ac.st(\"NO\")\r\n            return\r\n        ac.st(\"YES\")\r\n        ac.lst(ans)\r\n        return\r\n\r\n\r\nSolution().main()\r\n"
}