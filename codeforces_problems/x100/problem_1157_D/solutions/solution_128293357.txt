{
    "id": 128293357,
    "contestId": 1157,
    "creationTimeSeconds": 1631129293,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1157,
        "index": "D",
        "name": "N Problems During K Days",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "PiKa_PiKaa_chuuu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556289300
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 30617600,
    "source": "import os, sys\r\nfrom io import BytesIO, IOBase\r\nfrom math import log2, ceil, sqrt, gcd\r\nfrom _collections import deque\r\nimport heapq as hp\r\nfrom bisect import bisect_left, bisect_right\r\nfrom math import cos, sin\r\nfrom itertools import permutations\r\nfrom operator import itemgetter\r\n\r\n# sys.setrecursionlimit(2*10**5+10000)\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\nn, k = map(int, input().split())\r\n\r\na = list(range(1, k + 1))\r\nrem = n - (k * (k + 1)) // 2\r\nz = rem // k\r\nfor i in range(k):\r\n    a[i] += z\r\nz = rem % k\r\nfor i in range(k - 1, 0, -1):\r\n    x = min(z, 2 * a[i - 1] - a[i])\r\n    a[i] += x\r\n    z -= x\r\nbol = True\r\nif a[0] <= 0 or z:\r\n    bol = False\r\nfor i in range(1, k):\r\n    if a[i] > a[i - 1] * 2:\r\n        bol = False\r\nif bol:\r\n    print('YES')\r\n    print(*a)\r\nelse:\r\n    print('NO')\r\n"
}