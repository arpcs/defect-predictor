{
    "id": 63275571,
    "contestId": 878,
    "creationTimeSeconds": 1571899262,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 878,
        "index": "E",
        "name": "Numbers on the blackboard",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3300,
        "tags": [
            "combinatorics",
            "dp"
        ]
    },
    "author": {
        "contestId": 878,
        "members": [
            {
                "handle": "Siyuan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509029100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\r\n#include <algorithm>\r\n#include <vector>\r\n\r\nconst int MOD = 1e9 + 7;\r\nconst int N = 5e5;\r\n\r\nint n, m, a[N + 5], fa[N + 5], pre[N + 5], pw2[N + 5], suf[N + 5], blo[N + 5];\r\nint sum[N + 5], ans[N + 5];\r\nstd::vector<std::pair<int, int>> q[N + 5];\r\n\r\nint add(int x) {\r\n    return x >= MOD ? x - MOD : x;\r\n}\r\nint sub(int x) {\r\n    return x < 0 ? x + MOD : x;\r\n}\r\nint query(int l, int r) {\r\n    return ans = sub(suf[l] - 1LL * suf[r + 1] * pw2[r - l + 1] % MOD);\r\n}\r\nvoid merge(int x, int y) {\r\n    fa[x] = fa[y], pre[y] = pre[x];\r\n    int l = x - pre[x];\r\n    if ((l >= 30 && blo[y] > 0) || blo[x] + ((1LL * blo[y]) << l) > MOD) {\r\n        blo[y] = MOD;\r\n    } else {\r\n        blo[y] = blo[x] + (blo[y] << l);\r\n    }\r\n}\r\nint find(int x) {\r\n    return fa[x] == x ? x : fa[x] = find(fa[x]);\r\n}\r\nint main() {\r\n    scanf(\"%d%d\", &n, &m);\r\n    pw2[0] = 1;\r\n    for (int i = 1; i <= n; i++) {\r\n        scanf(\"%d\", &a[i]);\r\n        pw2[i] = 2LL * pw2[i - 1] % MOD;\r\n        fa[i] = i, pre[i] = i - 1, blo[i] = a[i];\r\n        a[i] = sub(a[i]);\r\n    }\r\n    for (int i = n; i >= 1; i--) suf[i] = add(2LL * suf[i + 1] % MOD + a[i]);\r\n    for (int l, r, i = 1; i <= m; i++) {\r\n        scanf(\"%d%d\", &l, &r);\r\n        q[r].push_back(std::make_pair(l, i));\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        while (pre[i] > 0 && blo[i] >= 0) merge(pre[i], i);\r\n        sum[i] = add(sum[pre[i]] + 2LL * query(pre[i] + 1, i) % MOD);\r\n        for (const auto &x : q[i]) {\r\n            int r = find(x.first);\r\n            ans[x.second] = add(sub(sum[i] - sum[r]) + query(x.first, r));\r\n        }\r\n    }\r\n    for (int i = 1; i <= m; i++) printf(\"%d\\n\", ans[i]);\r\n    return 0;\r\n}"
}