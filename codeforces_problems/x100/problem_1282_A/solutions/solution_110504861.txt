{
    "id": 110504861,
    "contestId": 1282,
    "creationTimeSeconds": 1616220307,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1282,
        "index": "A",
        "name": "Temporarily unavailable",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1282,
        "members": [
            {
                "handle": "asliddinchoriyev87"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1577198100
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n\r\n        Scanner scanner = new Scanner(System.in);\r\n        int cases = scanner.nextInt();\r\n\r\n        for (int i = 0; i < cases; i++) {\r\n\r\n            int startingPoint = scanner.nextInt();\r\n            int finishingPont = scanner.nextInt();\r\n\r\n            int stationPoint = scanner.nextInt();\r\n            int radius = scanner.nextInt();\r\n\r\n            int unAvaibleTime = 0;\r\n\r\n            if (stationPoint >= startingPoint && stationPoint <= finishingPont) {\r\n                if (startingPoint <= stationPoint - radius)\r\n                    unAvaibleTime += (stationPoint - radius) - startingPoint;\r\n                if (stationPoint + radius < finishingPont)\r\n                    unAvaibleTime += finishingPont - (stationPoint + radius);\r\n\r\n            } else if (stationPoint < startingPoint) {\r\n                startingPoint = Math.max(startingPoint, stationPoint + radius);\r\n                unAvaibleTime = Math.max(0, finishingPont - startingPoint);\r\n            } else {\r\n                if (startingPoint > finishingPont)\r\n                    unAvaibleTime = Math.abs(finishingPont - startingPoint) - (radius - (stationPoint - startingPoint));\r\n                else\r\n                    unAvaibleTime = Math.abs(finishingPont - startingPoint) - (radius - (stationPoint - finishingPont));\r\n            }\r\n\r\n\r\n            System.out.println(unAvaibleTime);\r\n        }\r\n\r\n    }\r\n}\r\n"
}