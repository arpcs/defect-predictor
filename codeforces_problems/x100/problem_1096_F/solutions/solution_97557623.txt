{
    "id": 97557623,
    "contestId": 1096,
    "creationTimeSeconds": 1604406165,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Kai29"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 2457600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=100005;\r\nconst long long mod=998244353;\r\nstruct BIT {\r\n  int t[N],sz;\r\n  int lowbit(int x) {return x&(-x);}\r\n  void add(int x,int v) {for (;x<=sz;x+=lowbit(x)) t[x]+=v;}\r\n  int query(int x,int ret=0) {for (;x;x-=lowbit(x)) ret+=t[x];return ret;}\r\n  void set_size(int n) {sz=n;}\r\n  void init() {memset(t,0,sizeof(t));}\r\n}t;\r\nint a[N];\r\nint b[N],l[N],r[N];\r\nint cnt[N];\r\nint n;\r\nlong long ans=0;\r\nlong long qp(long long x,int l) {\r\n  long long ret=1;\r\n  while(l) {\r\n    if(l&1) ret=1ll*ret*x%mod;\r\n    l>>=1;\r\n    x=x*x%mod;\r\n  }\r\n  return ret;\r\n}\r\nint main() {\r\n  scanf(\"%d\",&n);\r\n  t.set_size(n);\r\n  t.init();\r\n  for (int *i=a,j=1,*ed=a+n;++i<=ed;scanf(\"%d\",i),(*i!=-1)?(cnt[*i]=1):(cnt[0]=0),++j);\r\n  for (int i=1;i<=n;++i) l[i]=l[i-1]+(a[i]==-1),cnt[i]+=cnt[i-1];\r\n  long long inv=qp(4ll,mod-2);\r\n  ans=(ans+1ll*l[n]*(l[n]-1ll)%mod*inv%mod)%mod;\r\n  inv=qp(l[n],mod-2);\r\n  for (int *i=a+n+1,*st=a+1,j=n;--i>=st;--j) {\r\n    int now=*i;\r\n    r[j]=r[j+1]+(now==-1);\r\n    if(now!=-1) {\r\n      ans=(ans+t.query(now))%mod;\r\n      t.add(now,1);\r\n      ans=(ans+1ll*(now-cnt[now])*r[j]%mod*inv%mod)%mod;\r\n      ans=(ans+1ll*(l[n]-now+cnt[now])*l[j]%mod*inv%mod)%mod;\r\n    }\r\n  }\r\n  printf(\"%lld\\n\",ans);\r\n  return 0;\r\n}\r\n"
}