{
    "id": 73358799,
    "contestId": 1096,
    "creationTimeSeconds": 1584295338,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "MagentaCobra"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 2969600,
    "source": "/*\r\nIf you want to aim high, aim high\r\nDon't let that studying and grades consume you\r\nJust live life young\r\n******************************\r\nIf I'm the sun, you're the moon\r\nBecause when I go up, you go down\r\n*******************************\r\nI'm working for the day I will surpass you\r\nhttps://www.a2oj.com/Ladder16.html\r\n*/\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.*;\r\n\r\n   public class x1096F\r\n   {\r\n      static long MOD = 998244353L;\r\n      public static void main(String omkar[]) throws Exception\r\n      {\r\n         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in));  \r\n         StringTokenizer st = new StringTokenizer(infile.readLine());\r\n         int N = Integer.parseInt(st.nextToken());\r\n         int[] arr = new int[N];\r\n         st = new StringTokenizer(infile.readLine());\r\n         for(int i=0; i < N; i++)\r\n            arr[i] = Integer.parseInt(st.nextToken());\r\n         //solve\r\n         long[] fac = new long[N+2];\r\n         fac[0] = 1L;\r\n         for(int i=1; i <= N; i++)\r\n            fac[i] = (fac[i-1]*i)%MOD;\r\n         int cnt = 0;\r\n         int totalCount = 0;\r\n         FenwickTree bit = new FenwickTree(N);\r\n         for(int i=1; i <= N; i++)\r\n            bit.add(i, 1);\r\n         for(int i=0; i < N; i++)\r\n         {\r\n            if(arr[i] != -1)\r\n               bit.add(arr[i], -1);\r\n            else\r\n               totalCount++;\r\n         }\r\n         long total = 0L;\r\n         for(int i=0; i < N; i++)\r\n         {\r\n            if(arr[i] == -1)\r\n               cnt++;\r\n            else\r\n            {\r\n               //cnt = empty spaces available\r\n               long greater = (long)bit.find(arr[i]+1,N);\r\n               total += (long)cnt*greater;\r\n               total %= MOD;\r\n            }\r\n         }\r\n         cnt = 0;\r\n         for(int i=N-1; i >= 0; i--)\r\n         {\r\n            if(arr[i] == -1)\r\n               cnt++;\r\n            else\r\n            {\r\n               long less = (long)bit.find(arr[i]-1);\r\n               total += (long)cnt*less;\r\n               total %= MOD;\r\n            }\r\n         }\r\n         total *= power(totalCount, MOD-2, MOD);\r\n         total %= MOD;\r\n         total += ((((long)totalCount*(long)(totalCount-1))%MOD)*power(4, MOD-2, MOD))%MOD;\r\n         total %= MOD;\r\n         long thing = triv(arr, N);\r\n         System.out.println((total+thing)%MOD);\r\n      }\r\n      public static long triv(int[] arr, int N)\r\n      {\r\n         FenwickTree bit = new FenwickTree(N+1);\r\n         long val = 0L;\r\n         for(int i=0; i < N; i++)\r\n         {\r\n            if(arr[i] == -1)\r\n               continue;\r\n            val += bit.find(arr[i]+1,N);\r\n            bit.add(arr[i], 1);\r\n         }\r\n         return val;\r\n      }\r\n      public static long power(long x, long y, long p) \r\n      { \r\n          long res = 1L;      \r\n          x = x % p;  \r\n          while (y > 0) \r\n          { \r\n              if((y & 1)==1) \r\n                  res = (res * x) % p; \r\n              y = y >> 1;  \r\n              x = (x * x) % p;  \r\n          } \r\n          return res; \r\n      }\r\n   }\r\n   class FenwickTree\r\n   {\r\n      //1 indexed\r\n      public int[] tree;\r\n      public int size;\r\n      \r\n      public FenwickTree(int size)\r\n      {\r\n         this.size = size;\r\n         tree = new int[size+5];\r\n      }\r\n      public void add(int i, int v)\r\n      {\r\n         while(i <= size)\r\n         {\r\n            tree[i] += v;\r\n            i += i&-i;\r\n         }\r\n      }\r\n      public int find(int i)\r\n      {\r\n         int res = 0;\r\n         while(i >= 1)\r\n         {\r\n            res += tree[i];\r\n            i -= i&-i;\r\n         }\r\n         return res;\r\n      }\r\n      public int find(int l, int r)\r\n      {\r\n         return find(r)-find(l-1);\r\n      }\r\n   }"
}