{
    "id": 214151814,
    "contestId": 1096,
    "creationTimeSeconds": 1689570185,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Littlestr_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 11264000,
    "source": "// LUOGU_RID: 115983971\n#include<bits/stdc++.h>\r\n#define int long long\r\n\r\nusing namespace std;\r\n\r\ninline int read()  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                       {int flag = 0,ans = 0;char s = getchar();while (s>'9' || s<'0'){if (s == '-'){\tflag = -1;}s = getchar();}while (s<='9' && s>='0'){ans*=10;ans+=s-'0';s = getchar();}if (flag == 0) return ans;return -ans;}\r\n\r\nconst int inf = 1e16,N = 1e5 + 10,MOD = 998244353;\r\n\r\nint f[N],sum[N],L[N],sum1[N],n,k,a[N],tr[N << 2],ans;\r\n\r\nunordered_map<int,int> M;\r\n\r\nint power(int base,int n,int mod){\r\n\tint ans = 1;\r\n\twhile (n){\r\n\t\tif (n & 1) ans = ans * base % mod;\r\n\t\tbase = base * base % mod;\r\n\t\tn >>= 1;\t\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nint lowbit(int n){\r\n\treturn n & -n;\r\n}\r\n\r\nvoid upt(int x,int c){\r\n\tfor (int i = x;i <= n;i += lowbit(i)){\r\n\t\ttr[i] += c;\r\n\t\ttr[i] %= MOD;\r\n\t}\r\n}\r\n\r\nint ask(int x){\r\n\tint ans = 0;\r\n\tfor (int i = x;i >= 1;i -= lowbit(i)){\r\n\t\tans += tr[i];\r\n\t\tans %= MOD;\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nint exgcd(int a,int b,int &x,int &y){\r\n\tint d = a;\r\n\tif (b == 0) x = 1,y = 0;\r\n\telse {\r\n\t\td = exgcd(b,a % b,y,x),y -= a / b * x;\r\n\t}\r\n\treturn d;\r\n}\r\n\r\nsigned main(){\r\n//\tfreopen(\"inversion.in\",\"r\",stdin);\r\n//\tfreopen(\"inversion.out\",\"w\",stdout);\r\n\tn = read();\r\n\tfor (int i = 1;i <= n; ++ i){\r\n\t\ta[i] = read();\r\n\t\tif (a[i] != -1) L[a[i]] ++;\r\n\t\tM[a[i]] = 1;\r\n\t\tk += (a[i] == -1);\r\n\t}\r\n\tans = k * (k - 1) % MOD * power(4,MOD - 2,MOD) % MOD;\r\n\tint tmp = 0;\r\n\tfor (int i = n;i >= 1; -- i){//2\r\n\t\tif (a[i] != -1){\r\n\t\t\tans += ask(a[i]);\r\n\t\t\tans %= MOD;\r\n\t\t\tupt(a[i],1);\r\n\t\t}\r\n\t}\r\n\tfor (int i = 1;i <= n; ++ i){\r\n\t\tL[i] += L[i - 1];\r\n\t\tsum[i] = sum[i - 1] + (a[i] == -1);\r\n\t}\r\n\tfor (int i = n;i >= 1; -- i){\r\n\t\tsum1[i] = sum1[i + 1] + (a[i] == -1);\r\n\t}\r\n//\tcout << ans << endl;\r\n\tint P = power(sum[n],MOD - 2,MOD);\r\n\tfor (int i = n;i >= 1; -- i){\r\n\t\tif (a[i] != -1){\r\n\t\t\tans += (sum1[i]) * (a[i] - L[a[i]]) % MOD * P % MOD;\r\n\t\t\tans %= MOD;\r\n//\t\t\tcout << (a[i] - L[i]) << endl;\r\n\t\t\tans += (sum[i]) * (sum[n] - a[i] + L[a[i]]) % MOD * P % MOD;\r\n\t\t\tans %= MOD;\r\n\t\t}\r\n\t}\r\n\tcout << ans;\r\n\treturn 0;\r\n}"
}