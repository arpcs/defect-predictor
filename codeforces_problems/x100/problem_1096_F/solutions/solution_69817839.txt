{
    "id": 69817839,
    "contestId": 1096,
    "creationTimeSeconds": 1580366712,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Primusa"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\nll m = 998244353;\n\nll inv(ll a, ll b=m){\n    return 1<a ? b - inv(b%a,a)*b/a : 1;\n}\n\n\nint main() {\n    ll n;\n    cin >> n;\n    vector<ll> arr(n);\n    for(ll i = 0; i < n; ++i) cin >> arr[i];\n\n    vector<bool> seen(n);\n    for(auto &i: arr){\n        if(i == -1) continue;\n        --i;\n        assert(seen.size() > i);\n        seen[i] = true;\n    }\n\n    ll count_neg = 0;\n    vector<ll> vals = {-1};\n    for(ll i = 0; i < n; ++i){\n        assert(seen.size() > i);\n        if(!seen[i]) {\n            vals.push_back(i);\n            ++count_neg;\n        }\n\n    }\n\n    vector<ll> fact(n + 1);\n    fact[0] = 1;\n    for(ll i = 1; i <= n; ++i) fact[i] = (fact[i - 1] * i) % m;\n    assert(fact.size() > n);\n//    for(auto i: fact) cout << i << \" \";\n//    cout << endl;\n\n\n    ll inverse = inv(fact[count_neg]);\n\n    vector<ll> dp(count_neg + 1);\n    dp[0] = 0;\n    for(ll i = 2; i < dp.size(); ++i){\n        assert(i < dp.size());\n        assert(i - 1 != 0);\n        assert(i - 1 < fact.size());\n        dp[i] = ((dp[i - 1] * i) % m + (fact[i - 1] * (i - 1) * i / 2) % m) % m;\n    }\n\n//    for(auto i: dp) cout << i << \" \";\n//    cout << endl;\n//    return 0;\n\n    vector<ll> suffix(vals.size());\n    for(auto i: arr){\n        if(i == -1) --count_neg;\n        else {\n            ll idx = upper_bound(vals.begin(), vals.end(), i) - vals.begin() - 1;\n            assert(idx < suffix.size());\n            assert(idx >= 0);\n            suffix[idx] += count_neg;\n        }\n    }\n    cout << suffix.size() << endl;\n    for(ll i = (int) suffix.size() - 2; i >= 0; --i) suffix[i] += suffix[i + 1];\n\n    ll n_inv = dp.back();\n    for(ll i = 1; i < suffix.size(); ++i){\n        n_inv = (n_inv + suffix[i]) % m;\n    }\n    cout << (n_inv * inverse) % m << endl;\n\n//    for(auto &i: suffix) cout << i << \" \";\n//    cout << endl;\n}"
}