{
    "id": 187609998,
    "contestId": 1096,
    "creationTimeSeconds": 1672660863,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "tryharder"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 7577600,
    "source": "#include <bits/stdc++.h>\r\ntypedef long long int ll;\r\ntypedef long double ld;\r\n#define INF (ll)(998244353)\r\n//#define INF2 998244353\r\n#define N (ll)(2e5 + 5)\r\n//#define f first\r\n//#define s second\r\n#define int ll\r\n#define lsb(x) (x & (-x))\r\nusing namespace std;\r\n\r\nint n, m, g, h;\r\nint ans = 0, lc = 1;\r\nint a[N];\r\n\r\nbool used[N];\r\nint maxp[N];\r\n\r\nint pow_mod(int x, int n){\r\n    int res = 1;\r\n    while(n){\r\n        if(n & 1)res = res * x % INF;\r\n        x = x * x % INF;\r\n        n/=2;\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\nstruct segTree{\r\n    vector<int> tree;\r\n    int n;\r\n\r\n    segTree(int _n){\r\n        n = _n + 1;\r\n        while(n!=lsb(n))n+=lsb(n);\r\n        tree.resize(2 * n, 0);\r\n    }\r\n\r\n    void update(int x){\r\n        x += n;\r\n        tree[x] = 1;\r\n        while(x > 1){\r\n            x/=2;\r\n            tree[x] = tree[x * 2] + tree[x * 2 + 1];\r\n        }\r\n    }\r\n\r\n    void reset(int i){\r\n        i+=n;\r\n        tree[i] = 0;\r\n        while(i > 1){\r\n            i/=2;\r\n            tree[i] = tree[i * 2] + tree[i * 2 + 1];\r\n        }\r\n    }\r\n\r\n    int query(int ql, int qr){return query(1, 0, n - 1, ql, qr);}\r\n    int query(int i, int lb, int rb, int ql, int qr){\r\n        if(qr < lb || rb < ql){\r\n            return 0;\r\n        }\r\n        if(ql <= lb && rb <= qr){\r\n            return tree[i];\r\n        }\r\n        int mid = (lb + rb) / 2;\r\n        return query(i * 2, lb, mid, ql, qr) + query(i * 2 + 1, mid + 1, rb, ql, qr);\r\n    }\r\n};\r\n\r\nvoid solve(){\r\n    cin >> n;\r\n    int knowns=0, unknowns=0;\r\n\r\n    for(int i=1; i<=n; i++){\r\n        cin >> a[i];\r\n        if(a[i] != -1)knowns++;\r\n    }\r\n\r\n    unknowns = n - knowns;\r\n\r\n    ans = (unknowns * (unknowns - 1) / 2ll) * pow_mod(2ll, INF - 2) % INF;\r\n\r\n\r\n    segTree s(n);\r\n\r\n    int invs = 0;\r\n\r\n\r\n    for(int i=1; i<=n; i++){\r\n        if(a[i] != -1){\r\n            g = s.query(a[i], n);\r\n            invs += g;\r\n            s.update(a[i]);\r\n        }\r\n    }\r\n\r\n    ans = (ans + invs) % INF;\r\n    \r\n    fill(s.tree.begin(), s.tree.end(), 0);\r\n\r\n    for(int i=1; i<=n; i++){\r\n        if(a[i] != -1){\r\n            s.update(a[i]);\r\n        }\r\n    }\r\n\r\n    int cur = 0;\r\n\r\n    for(int i=1; i<=n; i++){\r\n        if(s.query(i, i) == 0){\r\n            cur += s.query(0, i - 1);\r\n        }\r\n    }\r\n\r\n    for(int i=1; i<=n; i++){\r\n        if(a[i] == -1){\r\n            ans = (ans + cur * pow_mod(unknowns, INF - 2)) % INF;            \r\n        }\r\n        else{\r\n            g = n - a[i] - s.query(a[i] + 1, n);\r\n            h = a[i] - s.query(1, a[i]);\r\n            cur += h - g;\r\n        }\r\n    }\r\n\r\n\r\n    cout << ans << '\\n';\r\n\r\n}\r\n\r\nsigned main(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int T = 1;\r\n    //cin>>T;\r\n    for(int i=1; i<=T; i++){\r\n        solve();\r\n    }\r\n}\r\n"
}