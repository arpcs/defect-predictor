{
    "id": 126660070,
    "contestId": 1096,
    "creationTimeSeconds": 1629598687,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "2little2late"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 16691200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\ntypedef long long ll;\r\ntypedef pair<int,int> pii;\r\n#define fi first\r\n#define se second\r\n#define SZ(x) ((int)((x).size()))\r\n#define debug(x) cerr << #x << \" = \" << x << '\\n'\r\n#define uid(x,y) uniform_int_distribution<int>(x,y)(rng)\r\n//order_of_key(k): Number of items strictly smaller than k .\r\n//find_by_order(k): K-th element in a set (counting from zero).\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\ntemplate<class T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<int modd> struct modint {\r\n    static const int mod = modd;\r\n    int v; explicit operator int() const { return v;}\r\n    modint() : v(0) {}\r\n    modint(ll x) : v(int(x%mod)) {if (v < 0) v += mod;}\r\n    friend bool operator==(const modint& a, const modint& b) {return a.v == b.v;}\r\n    friend bool operator!=(const modint& a, const modint& b) {return a.v != b.v;}\r\n    friend bool operator<(const modint& a, const modint& b) {return a.v < b.v;}\r\n    modint& operator+=(const modint& a) {if ((v += a.v) >= mod) v -= mod; return *this;}\r\n    modint& operator-=(const modint& a) {if ((v -= a.v) < 0) v += mod; return *this;}\r\n    modint& operator*=(const modint& a) {v = int((ll)v*a.v%mod); return *this;}\r\n    modint& operator/=(const modint& a) {return (*this) *= inv(a);}\r\n    friend modint pow(modint a, ll p) {modint ret = 1; for (; p; p /= 2, a *= a){if (p&1) ret *= a;} return ret;}\r\n    friend modint inv(const modint& a) {return pow(a,mod-2);}\r\n    modint operator-() const {return modint(-v);}\r\n    modint& operator++() {return *this += 1;}\r\n    modint& operator--() {return *this -= 1;}\r\n    friend modint operator+(modint a, const modint& b) {return a += b;}\r\n    friend modint operator-(modint a, const modint& b) {return a -= b;}\r\n    friend modint operator*(modint a, const modint& b) {return a *= b;}\r\n    friend modint operator/(modint a, const modint& b) {return a /= b;}\r\n    friend ostream& operator<<(ostream& out, modint a) {return out << a.v;}\r\n    friend istream& operator>>(istream& in, modint& a) {ll b; in >> b; a.v = b; return in;}\r\n};\r\nusing mint = modint<998244353>;\r\nconst int mx = 2e5+5;\r\nint a[mx], vis[mx];\r\nint main() {\r\n    ios::sync_with_stdio(0); cin.tie(0);\r\n    int n;\r\n    cin >> n;\r\n    vector<int> u, v;\r\n    for (int q = 1; q <= n; q++) {\r\n        cin >> a[q];\r\n        if (a[q] != -1) u.push_back(a[q]), vis[a[q]] = 1;\r\n    }\r\n    for (int q = 1; q <= n; q++) if (!vis[q]) v.push_back(q);\r\n    ordered_set<int> oset;\r\n    mint ans = 0;\r\n    for (int q = SZ(u)-1; q >= 0; q--) {\r\n        ans += oset.order_of_key(u[q]);\r\n        oset.insert(u[q]);\r\n    }\r\n    ans += mint(SZ(v))*(SZ(v)-1)/4;\r\n    int tot = 0;\r\n    for (int q = 1; q <= n; q++) {\r\n        if (a[q] == -1) tot++;\r\n        else {\r\n            int z = lower_bound(v.begin(),v.end(),a[q])-v.begin();\r\n            int y = SZ(v)-z;\r\n            ans += mint(y)*tot/SZ(v);\r\n            ans += mint(z)*(SZ(v)-tot)/SZ(v);\r\n        }\r\n    }\r\n    cout << ans << '\\n';\r\n    return 0;\r\n}\r\n\r\n"
}