{
    "id": 155522868,
    "contestId": 1665,
    "creationTimeSeconds": 1651420958,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "chika10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 3379200,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n#include <algorithm>\r\n#include <map>\r\n#include <set>\r\n#include <iomanip> \r\n#include <queue>\r\n#include <numeric>\r\n#include <climits>\r\n#include <functional>\r\n\r\n#include <assert.h>\r\n#include <math.h> \r\n\r\n\r\n#define all(x) (x).begin(), (x).end()\r\n#define rall(x) (x).rbegin(), (x).rend()\r\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\r\n\r\ntypedef long long ll;\r\n\r\ntemplate<typename T>\r\nvoid show(const T &v){\r\n    if (v.empty()) return;\r\n    for (auto it : v) std::cout << it << \" \";\r\n    std::cout << \"\\n\";\r\n}\r\n\r\ntemplate<typename T>\r\nvoid read(std::vector<T> &a) {\r\n    for (T &it : a) {\r\n        std::cin >> it;\r\n    }\r\n}\r\ntemplate<typename T> \r\nvoid show_pairs (const T &a) {\r\n    for (auto it : a) {\r\n        std::cout << it.first << \" \" << it.second << \"\\n\";\r\n    }  \r\n}\r\ntemplate<typename T>\r\nvoid read(T &n) { std::cin >> n; }\r\ntemplate<typename T>\r\nvoid send(T &ans) { std::cout << ans << \"\\n\"; }\r\n\r\nvoid setIO(std::string s) {\r\n    freopen((s + \".in\").c_str(), \"r\", stdin);\r\n    freopen((s + \".out\").c_str(), \"w\", stdout);\r\n}\r\n\r\nvoid solve() {\r\n    int n;\r\n    std::cin >> n;\r\n    std::vector<int> p(n + 1, 0);\r\n    std::vector<int> size(n + 1, 0);\r\n    for (int i = 2; i <= n; ++i) {\r\n        std::cin >> p[i];\r\n        ++size[p[i]];\r\n    }\r\n\r\n    std::vector<int> s;\r\n    int ans = 0;\r\n    for (int i = 1; i <= n; ++i) {\r\n        ans += (size[i] >= 1);\r\n        if (size[i] >= 1) {\r\n            s.push_back(size[i]);\r\n        } \r\n    }\r\n\r\n\r\n    n = s.size();\r\n    std::sort(all(s));\r\n\r\n    int val = 1;\r\n    int ok = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        \r\n        s[i] -= val;\r\n        s[i] = std::max(0, s[i]);\r\n        ++val;\r\n        if (s[i] >= 1) {\r\n            ok = 1;\r\n        }\r\n    }\r\n    std::sort(all(s));\r\n\r\n    if (!ok) {\r\n        std::cout << ans + 1 << \"\\n\";\r\n        return;\r\n    }\r\n    ok = 1;\r\n    while(1) {\r\n        if (s[n - 1] <= 1) {\r\n            ++ans;\r\n            ok = 0;\r\n            break;\r\n        }\r\n        s[n - 1] -= 2;\r\n        ++ans;\r\n        for (int i = n - 2; i >= 0; --i) {\r\n            if (s[i] <= 1) break;\r\n            s[i]--;\r\n        }\r\n        std::sort(all(s));\r\n    }\r\n\r\n    ans += ok;\r\n    send(ans);\r\n    return;\r\n}\r\n\r\n\r\nint main() {\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr);\r\n    int t = 1;\r\n    std::cin >> t;\r\n    while(t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n} ",
    "suggested_categories": [
        "competitive programming",
        "algorithms",
        "io streams",
        "template functions",
        "dynamic programming",
        "graph theory",
        "mathematics",
        "data structures",
        "code quality",
        "input/output handling",
        "code optimization",
        "algorithmic complexity",
        "binary tree",
        "sorting",
        "programming paradigms",
        "numeric computation",
        "debugging",
        "standard template library",
        "problem solving",
        "logical operations"
    ]
}