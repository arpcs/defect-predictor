{
    "id": 165824939,
    "contestId": 1665,
    "creationTimeSeconds": 1658867940,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "roottwo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 819200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n;\r\n        cin >> n;\r\n        vector<int> children(n + 1);\r\n        children[0] = 1;\r\n        for (int i = 0; i < n - 1; i++) {\r\n            int p_i;\r\n            cin >> p_i;\r\n            children[p_i]++;\r\n        }\r\n        sort(children.begin(), children.end(), greater<int>());\r\n        while (children[children.size() - 1] == 0)\r\n            children.pop_back();\r\n        vector<int> left;\r\n        for (int i = 0; i < children.size(); i++)\r\n            if (i + children[i] > children.size())\r\n                left.push_back(i + children[i] - children.size());\r\n        sort(left.begin(), left.end(), greater<int>());\r\n        if (left.empty()) {\r\n            cout << children.size() << \"\\n\";\r\n            continue;\r\n        }\r\n        int sum = 0;\r\n        int x = left[0];\r\n        int i = 0;\r\n        for (; x >= 2; x--) {\r\n            while (i < left.size() && left[i] == x)\r\n                i++;\r\n            sum += i;\r\n            if (sum > x - 1)\r\n                break;\r\n        }\r\n        cout << children.size() + x << \"\\n\";\r\n    }\r\n}\r\n"
}