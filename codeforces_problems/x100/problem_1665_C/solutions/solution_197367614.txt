{
    "id": 197367614,
    "contestId": 1665,
    "creationTimeSeconds": 1678795732,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "Bounce-Back"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 8396800,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\nconst int mod = 1e9+7;\r\nconst int mod1=998244353;\r\n#define rep(i,j,n) for(long long i=j;i<n;i++)\r\n#define rrep(i,j) for(ll i=j;i>=0;i--)\r\n#define DEB(x) cout<<\"##\"<<x<<\"##\"<<endl\r\n#define see(x) cout<<x<<\"\\n\";\r\n#define ll unsigned long long\r\n#define pb push_back\r\n#define ft first\r\n#define se second\r\n#define vvi vector<vector<int>>\r\n#define vi vector<int>\r\n#define vll vector<ll>\r\n#define all(v) v.begin(),v.end()\r\n#pragma GCC optimize \"trapv\"// Detects overflow.....(RE)\r\ntemplate <typename Type>\r\nistream &operator>>(istream &in, vector<Type> &vec) {\r\n    int n = vec.size();\r\n    for (int i = 0; i < n; i++)\r\n        in >> vec[i];\r\n    return in;\r\n}\r\ntemplate <typename Type>\r\nostream &operator<<(ostream &out, vector<Type> &vec) {\r\n    for (auto val : vec)\r\n        out << val << \" \";\r\n    return out;\r\n}\r\nvoid reduceFraction(ll &x, ll &y)\r\n{\r\n    int d;\r\n    d = __gcd(x, y); \r\n    x = x / d;\r\n    y = y / d;\r\n}\r\n \r\nstring str(int i) {\r\n    return i < 0 ? \"\" : str((i / 26) - 1) + (char)(97 + i % 26);\r\n}\r\nconst int MX = 6e6 + 5; \r\n \r\n// ll fact[MX];\r\n// ll ifact[MX];//Inverse of factorial\r\n \r\nll bin_power(ll a,ll b,ll mod){\r\n    ll res=1;\r\n    while (b){\r\n        if (b&1)\r\n            res=(res*a)%mod;\r\n        a=(a*a)%mod;\r\n        b>>=1;\r\n    }\r\n    return res;\r\n}\r\n// ll ncr(ll n,ll r){\r\n//     if(r>n)\r\n//         return 0;\r\n//     return (((fact[n]*ifact[n-r])%mod)*ifact[r])%mod;\r\n// }\r\n/*\r\n    fact[0]=1;\r\n    ifact[0]=1;\r\n    rep(i,1,MX-1){\r\n        fact[i]=(i*fact[i-1])%mod;\r\n        ifact[i]=bin_power(fact[i],mod-2,mod); \r\n    }\r\n*/\r\n#define int long long\r\n// const int MAX_SIZE = 2800001;\r\n// vector<int>isprime(MAX_SIZE , true);\r\n// vector<int> idx(MAX_SIZE);\r\n// vector<int> prime;\r\n// vector<int>SPF(MAX_SIZE);//SPF[i]=smallest prime factor of number i\r\n\r\n// void manipulated_seive(int N) {\r\n//     isprime[0] = isprime[1] = false ;\r\n//     for (int i = 2; i < N ; i++) {\r\n//         if (isprime[i]) {\r\n//             prime.push_back(i);\r\n//             SPF[i] = i;\r\n//         }\r\n//         for (int j = 0; j < (int)prime.size() && i * prime[j] < N && prime[j] <= SPF[i]; j++) {\r\n//             isprime[i * prime[j]] = false;\r\n//             SPF[i * prime[j]] = prime[j] ;\r\n//         }\r\n//     }\r\n//     for (int i = 0; i < (int)prime.size(); i++) {\r\n//         idx[prime[i]] = i + 1;\r\n//     }\r\n// }\r\n// //With sieve\r\n// set<int> primeFactors(int n) {\r\n//     set<int> factors;\r\n//     while (n > 1) {\r\n//         factors.insert(SPF[n]);\r\n//         n /= SPF[n];\r\n//     }\r\n//     if(n>1)factors.insert(n);\r\n//     return factors;\r\n// }\r\n// //Without sieve\r\n// bool isprime_n(ll n){\r\n//   for(ll i=2;i*i<=n;i++){\r\n//     if(n%i==0)return false;\r\n//   }\r\n//   return true;\r\n// }\r\n// vector<int>divisors(1e6,0);\r\n\r\n// void precompute_divisors(){\r\n//     for(int i=1;i<=1e6;i++){\r\n//         for(int j=i;j<=1e6;j+=i){\r\n//             divisors[j]++;\r\n//         }\r\n//     }\r\n// }\r\n\r\n//  Try to do dry run on large no. of testcases (If not provided make some big tc)\r\n//  to observe the pattern.\r\n//  Edge cases : All elements 0, all -ve .........\r\n\r\n// // ********************Think mathematically**************************\r\n\r\n// class Pair{\r\n// public:\r\n//     int x,y,d;\r\n//     Pair(int x,int y,int d){\r\n//         this->x=x;\r\n//         this->y=y;\r\n//         this->d=d;\r\n//     }\r\n// };\r\nint d1[8][2]={{1,2},{2,1},{-1,2},{-2,1},{1,-2},{2,-1},{-1,-2},{-2,-1}};\r\nint d[4][2]={{0,-1},{-1,0},{1,0},{0,1}};\r\n//count dearrangements\r\nll countDer(int n)\r\n{\r\n    ll der[n + 1] = {0};\r\n    der[1] = 0;\r\n    der[2] = 1;\r\n    for (int i = 3; i <= n; ++i)\r\n        der[i] = (i - 1) * (der[i - 1] +\r\n                            der[i - 2]);\r\n    return der[n];\r\n}\r\n// finding ncr of larger numbers upto 1000 iteratively\r\nll ncr1(int n , int r){\r\n    if(n<0 || r<0 || r>n) return 0;\r\n    if(r==0)return 1;\r\n    if(r==1)return n;\r\n    ll ans = 1 ; \r\n    ll k=1;\r\n    for(int i=n ; i>n-r ;i--){\r\n        ans *= i;\r\n        ans/=k;\r\n        k++;\r\n    }\r\n    return ans;\r\n}\r\nlong long lcm(long long a,long long b){\r\n    return (a*b)/(__gcd(a,b));\r\n}\r\nset<int> find_factors(int x){\r\n    set<int>ans;\r\n    for(int i=2;i*i<=x;i++){\r\n        if(x%i==0){\r\n            ans.insert(i);\r\n            if(x/i!=i){\r\n                ans.insert(x/i);\r\n            }\r\n        }\r\n    }\r\n    return ans;\r\n}\r\nset<int>prime_factor(int n){\r\n    set<int>ans;\r\n    while(n%2==0){\r\n        n/=2;\r\n        ans.insert(2);\r\n    }\r\n    for(int i=3;i*i<=n;i++){\r\n        while(n%i==0){\r\n            ans.insert(i);\r\n            n/=i;\r\n        }\r\n    }\r\n    if(n>1)ans.insert(n);\r\n    return ans;\r\n}\r\nbool cmp(pair<int,int>&a,pair<int,int>&b){\r\n    if(a.se<b.se)return 1;\r\n    else if(a.se>b.se)return 0;\r\n    return a.ft<b.ft;\r\n}\r\n// bool intersect(int x,int y,int a,int b){\r\n//     return !(y<a || x>b);\r\n// }\r\nbool compare(vector<int>&a,vector<int>&b){\r\n    return a.size()>b.size();\r\n}\r\n\r\nvoid solve(){\r\n    int n;\r\n    cin>>n;\r\n    vi v(n-1);\r\n    cin>>v;\r\n    int ans=0;\r\n    vector<vector<int>>nodes(n+1);\r\n    nodes[0].pb(1);\r\n    for(int i=0;i<n-1;i++){\r\n        nodes[v[i]].pb(i+2);\r\n    }\r\n    sort(all(nodes),compare);\r\n    for(int i=0;i<=n;i++){\r\n        if(nodes[i].size()>0)ans++;\r\n        int k=i+1;\r\n        for(int j=0;j<nodes[i].size();j++){\r\n            nodes[i][j]=k++;\r\n        }\r\n    }\r\n    for(int i=0;i<=n;i++){\r\n        int cnt=0;\r\n        for(int j=0;j<nodes[i].size();j++){\r\n            if(nodes[i][j]>ans + cnt/2 + cnt%2){\r\n                cnt++;\r\n            }\r\n        }\r\n        ans+=cnt/2;\r\n        if(cnt%2)ans++;\r\n    }\r\n    see(ans);\r\n}   \r\nint32_t main()\r\n{   \r\n    // #ifndef ONLINE_JUDGE\r\n    //     freopen(\"input.txt\",\"r\",stdin);\r\n    //     freopen(\"output.txt\",\"w\",stdout);\r\n    // #endif\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    int t=1;\r\n    cin>>t;\r\n    // manipulated_seive(sqrt(1e9+50));\r\n    while(t--){\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}