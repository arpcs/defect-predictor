{
    "id": 155553910,
    "contestId": 1665,
    "creationTimeSeconds": 1651469107,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "bkifhr8"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "Python 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 982,
    "memoryConsumedBytes": 14745600,
    "source": "\"\"\"\nProblema F: Tree Infection\n\"\"\"\n\ndef calcula_t():\n    n_vertices = int(input())\n\n    grau = [0] * n_vertices\n    lista_p = list( map(int, input().split()) )\n    for p in lista_p:\n        grau[p - 1] += 1 # a cada filho, recalculamos o grau do no pai p\n\n    a = [1] # comecamos com 1, pois sempre teremos pelo menos 1 raiz (que, evidentemente, nao possui irmaos)\n    for i in range(n_vertices):\n        if grau[i] > 0:\n            a.append(grau[i])\n    a.sort(reverse=True) # garantimos que vamos sempre escolher infectar primeiro a altura com maior grau sem infectados, maximizando a funcao de spread\n\n    # binary sort\n    inicio = len(a)\n    fim = n_vertices\n    tempo = 0\n    while( inicio < fim ):\n        tempo = (inicio + fim) // 2\n        soma = 0\n        for i in range(len(a)):\n            soma += max(0, a[i] - tempo + i)\n        \n        if soma + len(a) <= tempo:\n            fim = tempo\n        else:\n            inicio = tempo + 1\n\n    print(fim)\n    pass\n\nn_testes = int(input())\nfor i in range(n_testes):\n    calcula_t()\n\t\t  \t  \t \t\t \t \t  \t    \t \t\t"
}