{
    "id": 165901354,
    "contestId": 1665,
    "creationTimeSeconds": 1658931143,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "i_emerge16"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 10752000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int tt;\r\n    cin >> tt;\r\n    while (tt--) {\r\n        int n;\r\n        cin >> n;\r\n        vector<int> p(n);\r\n        for (int i = 1; i < n; i++) {\r\n            cin >> p[i];\r\n        }\r\n        map<int, int> mp;\r\n        for (int i = 1; i < n; i++) {\r\n            mp[p[i]]++;\r\n        }\r\n        vector<int> a;\r\n        for (auto it = mp.begin(); it != mp.end(); it++) {\r\n            a.push_back(it->second);\r\n        }\r\n        a.push_back(1);\r\n        sort(a.rbegin(), a.rend());\r\n        while (!a.empty() && a.back() <= 0) {\r\n            a.pop_back();\r\n        }\r\n        int ans = 0, m = a.size();\r\n        for (int i = 0; i < m; i++) {\r\n            a[i] -= m - i;\r\n            ans++;\r\n        }\r\n        sort(a.rbegin(), a.rend());\r\n        while (!a.empty() && a.back() <= 0) {\r\n            a.pop_back();\r\n        }\r\n        while (!a.empty()) {\r\n            int k = a.size(), last;\r\n            for (int i = 0; i < k; i++) {\r\n                if (a[0] == a[i]) {\r\n                    last = i;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            a[last]--;\r\n            for (int i = 0; i < k; i++) {\r\n                a[i]--;\r\n            }\r\n            ans++;\r\n            sort(a.rbegin(), a.rend());\r\n            while (!a.empty() && a.back() <= 0) {\r\n                a.pop_back();\r\n            }\r\n        }\r\n        cout << ans << '\\n';\r\n    }\r\n    return 0;\r\n}"
}