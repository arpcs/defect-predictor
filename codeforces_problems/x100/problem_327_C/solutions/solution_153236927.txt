{
    "id": 153236927,
    "contestId": 327,
    "creationTimeSeconds": 1649534201,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 327,
        "index": "C",
        "name": "Magic Five",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 327,
        "members": [
            {
                "handle": "Menato"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1372941000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 16281600,
    "source": "#include <bits/stdc++.h>\r\n#include <iostream>\r\n#include <queue>\r\n#include  <cmath>\r\n#include  <map>\r\n#include <cstring>\r\n#include <numeric>\r\n#include <stack>\r\n#include <algorithm>\r\n#include <deque>\r\n#include <vector>\r\n#include <complex>\r\n#include <set>\r\n#include <iomanip>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\n#define ordered_set tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>\r\n#define floop(u,x,i) for(int i = u;i <= x;i++)\r\n#define loop(z,i) for(int i = 1;i <= z;i++)\r\n#define zloop(z,i) for(int i = 0;i < z ; i++)\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define ld long double\r\n#define io ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#define f first\r\n#define s second\r\n#define pb push_back\r\n#define el '\\n'\r\n#define INF 0x3f3f3f3f3f3f3f3f\r\n#define flag(x) cerr << x << '\\n';\r\nint dx[] = {0, -1, 0, 1, -1, 1, -1, 1};\r\nint dy[] = {-1, 0, 1, 0, 1, -1, -1, 1};\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\nconst int mod = 1e9 + 7,N = 1e6 + 50,mod2 = 998244353;\r\nll fact[N] = {},inv[N] = {};\r\nvoid move1step(ll &a,ll &b,ll q){\r\n    ll next = a - q * b;\r\n    a = b;\r\n    b = next;\r\n}\r\nll e_gcd(ll a,ll b,ll &x0,ll &y0){\r\n    ll r0 = a,r1 = b,x1,y1;\r\n    x0 = y1 = 1;\r\n    x1 = y0 = 0;\r\n\r\n    while (r1 != 0){\r\n        ll q = r0 / r1;\r\n        move1step(x0,x1,q);\r\n        move1step(y0,y1,q);\r\n        move1step(r0,r1,q);\r\n    }\r\n    return r0;\r\n}\r\nll mod_inverse ( ll number,ll spacemod){\r\n    ll x,y,g;\r\n    g = e_gcd(number,spacemod,x,y);\r\n    if (g != 1) return -1;\r\n    return (x + spacemod) % spacemod;\r\n}\r\nvoid preprocess(ll n){\r\n    fact[0] = inv[0] = 1;\r\n    for(int i = 1;i < n; i++){\r\n        fact[i] = (i * fact[i - 1]) % mod;\r\n        inv[i] = mod_inverse(fact[i], mod );\r\n    }\r\n}\r\nll ncr(ll n,ll r){\r\n    if(r > n)return 0;\r\n    ll ans,factorial,inverse1,inverse2;\r\n    factorial = fact[n];\r\n    inverse1 = inv[r];\r\n    inverse2 = inv[n - r];\r\n    ans = ((factorial * inverse1) % mod * (inverse2) % mod ) % mod;\r\n    return ans;\r\n}\r\nll npr(ll n,ll r){\r\n    if(r > n)return 0;\r\n    ll ans,factorial,inverse2;\r\n    factorial = fact[n];\r\n    inverse2 = inv[n - r];\r\n    ans = ((factorial)  * (inverse2) ) % mod2;\r\n    return ans;\r\n}\r\nll fastpow(ll base,ll power){\r\n\r\n    if(!power)\r\n        return 1;\r\n\r\n    ll half_power = fastpow(base,power >> 1);\r\n\r\n    ll value = ((half_power % mod) * (half_power % mod)) % mod;\r\n\r\n    if(power & 1)\r\n        value = (value *  base ) % mod,value %= mod;\r\n\r\n    return value % mod;\r\n\r\n}\r\nll gcd(ll a, ll b) {\r\n    if (b == 0)\r\n        return a;\r\n    return gcd(b, a % b);\r\n}\r\nll lcm(ll x,ll y){\r\n    ll lcm = (x * y ) / gcd(x , y);\r\n    return lcm;\r\n}\r\nll fast_power_i(ll base, ll power) {\r\n    ll result = 1;\r\n    while(power > 0) {\r\n\r\n        if(power & 1) {\r\n            result = (result * base) % mod;\r\n        }\r\n        base = (base * base) % mod;\r\n        power >>= 1;\r\n    }\r\n    return result;\r\n}\r\nll gcd_i(ll  a,ll b) {\r\n    while (b != 0) {\r\n        ll tmp = a % b;\r\n        a = b;\r\n        b = tmp;\r\n    }\r\n    return a;\r\n}\r\nll mod_Inverse(int a,int space)\r\n{\r\n    return fastpow(a,space - 2);\r\n}\r\nll stars_and_bar(int stars,int bars)\r\n{\r\n    return ncr(stars + bars,bars);\r\n}\r\nll mul(ll a, ll b){\r\n    a %= mod;\r\n    b %= mod;\r\n    return (1LL * a * b) % mod;\r\n}\r\nint add(int a, int b){\r\n    a = (0LL + a + mod) % mod;\r\n    b = (0LL + b + mod) % mod;\r\n    return (a + b) % mod;\r\n}\r\nbool checkBit(int mask, int bit){\r\n    return mask & (1 << bit);\r\n}\r\nll addBit(ll mask, ll bit){\r\n    return mask | (1ll << bit);\r\n}\r\nint removeBit(int mask, int bit){\r\n    return mask & ~(1 << bit);\r\n}\r\nint toggleBit(int mask, int bit){\r\n    return mask ^ (1 << bit);\r\n}\r\nint leastSignificantBit(int mask){\r\n    return mask & (-mask);\r\n}\r\nint mostSignificantBit(int mask){\r\n    for(int i = 31; i >= 0; i--)\r\n        if(checkBit(mask, i))\r\n            return (1 << i);\r\n    return 0;\r\n}\r\nbool isPowerOfTwo(ll x){\r\n    return !(x & (x - 1));\r\n}\r\n\r\nint main() {\r\n   // preprocess(1e5 + 4);\r\n    int test = 1;\r\n    // cin >> test;\r\n    while (test--)\r\n    {\r\n        string s;\r\n        int k;\r\n        cin >> s >> k;\r\n        int n = s.size();\r\n\r\n        ll total = fastpow(fastpow(2, n), k);\r\n        total = ((1 - total) % mod + mod) % mod;\r\n        ll inv = fastpow(2, n);\r\n        inv = ((1 - inv) % mod + mod) % mod;\r\n        inv = fastpow(inv, mod-2);\r\n      ll  ans = 0;\r\n        for(int i = 0; i< n; i++)\r\n            if(s[i] == '0' or s[i] == '5') {\r\n                ll tmp = fastpow(2, i) * total % mod * inv % mod;\r\n                ans += tmp, ans %= mod;\r\n            }\r\n        cout << ans << el;\r\n    }\r\n\r\n    return 0;\r\n\r\n}"
}