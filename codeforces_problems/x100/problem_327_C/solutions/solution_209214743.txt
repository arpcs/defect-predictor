{
    "id": 209214743,
    "contestId": 327,
    "creationTimeSeconds": 1686414728,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 327,
        "index": "C",
        "name": "Magic Five",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 327,
        "members": [
            {
                "handle": "bdiaz22"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1372941000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nconst int MOD = 1e9 + 7;\r\n\r\n// Funci\u00f3n para calcular el inverso modular de un n\u00famero 'a' en m\u00f3dulo 'm'\r\nint modInverse(int a, int m) {\r\n    int m0 = m;\r\n    int y = 0, x = 1;\r\n\r\n    if (m == 1)\r\n        return 0;\r\n\r\n    while (a > 1) {\r\n        int q = a / m;\r\n        int t = m;\r\n\r\n        m = a % m;\r\n        a = t;\r\n        t = y;\r\n\r\n        y = x - q * y;\r\n        x = t;\r\n    }\r\n\r\n    if (x < 0)\r\n        x += m0;\r\n\r\n    return x;\r\n}\r\n\r\n// Funci\u00f3n para calcular el n\u00famero de combinaciones\r\nint calculateCombinations(int n, int r) {\r\n    if (r > n - r)\r\n        r = n - r;\r\n\r\n    int res = 1;\r\n\r\n    for (int i = 0; i < r; i++) {\r\n        res = (res * (n - i)) % MOD;\r\n        res = (res * modInverse(i + 1, MOD)) % MOD;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nint countWays(string s, int k) {\r\n    int n = s.size();\r\n    long long int result = 0;\r\n\r\n    // Calcular el n\u00famero de d\u00edgitos 0 y 5 en el n\u00famero original\r\n    int countZeros = 0, countFives = 0;\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if (s[i] == '0')\r\n            countZeros++;\r\n        else if (s[i] == '5')\r\n            countFives++;\r\n    }\r\n\r\n    // Calcular el n\u00famero de combinaciones posibles\r\n    for (int i = 1; i <= k; i++) {\r\n        // Calcular el n\u00famero de d\u00edgitos en la placa repetida\r\n        int digits = n * i;\r\n\r\n        // Calcular el n\u00famero de d\u00edgitos 0 y 5 en la placa repetida\r\n        int zeros = countZeros * i;\r\n        int fives = countFives * i;\r\n\r\n        // Para cada n\u00famero posible de d\u00edgitos 0 y 5\r\n        for (int z = 0; z <= zeros; z++) {\r\n            for (int f = 0; f <= fives; f++) {\r\n                // Si la suma de d\u00edgitos 0 y 5 es divisible por 9\r\n                if ((z + f) % 9 == 0) {\r\n                    // Calcular el n\u00famero de d\u00edgitos restantes\r\n                    int remainingDigits = digits - (z + f);\r\n\r\n                    // Calcular el n\u00famero de combinaciones posibles con los d\u00edgitos restantes\r\n                    int combinations = calculateCombinations(remainingDigits, remainingDigits / 9);\r\n\r\n                    // Agregar las combinaciones a la respuesta\r\n                    result = (result + combinations) % MOD;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nint main() {\r\n    string s;\r\n    int k;\r\n    cin >> s >> k;\r\n\r\n    int ways = countWays(s, k);\r\n    cout << ways << endl;\r\n\r\n    return 0;\r\n}"
}