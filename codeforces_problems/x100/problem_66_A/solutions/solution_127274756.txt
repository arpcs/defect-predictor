{
    "id": 127274756,
    "contestId": 66,
    "creationTimeSeconds": 1630165560,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 66,
        "index": "A",
        "name": "Petya and Java",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1300,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 66,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1299513600
    },
    "programmingLanguage": "Go",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 29,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 10649600,
    "source": "package main\n\nimport \"fmt\"\n\n\n \n\nfunc main() {\n    numero := \"\"\n    fmt.Scanln(&numero)    \n    fmt.Print(whatIsTheType(numero))\n}\n\nfunc whatIsTheType(numero string) string{\n  maxByte := \"127\"\n  minByte := \"-128\"\n  maxShort := \"32767\"\n  minShort := \"-32768\"\n  maxInt := \"2147483647\"\n  minInt := \"-2147483648\"\n  maxLong :=\"9223372036854775807\"\n  minLong := \"-9223372036854775808\"\n\n  if numero[0] == '-' {\n    if len(numero) > len(minLong){\n      return \"BigInteger\"\n    }\n\n    if len(numero) < len(minByte){\n      return \"byte\"\n    }\n    if len(numero) == len(minByte){\n      for i := 1; i < len(numero); i++ {\n        if numero[i] > minByte[i] {\n          return \"short\"\n        }\n      } \n      return \"byte\"\n    }\n\n    if len(numero) < len(minShort){\n      return \"short\"\n    }\n    if len(numero) == len(minShort){\n      for i := 1; i < len(numero); i++ {\n        if numero[i] > minShort[i] {\n          return \"int\"\n        }\n      } \n      return \"short\"\n    }\n\n    if len(numero) < len(minInt){\n      return \"int\"\n    }\n    if len(numero) == len(minInt){\n      for i := 1; i < len(numero); i++ {\n        if numero[i] > minInt[i] {\n          return \"long\"\n        }\n      } \n      return \"int\"\n    }\n\n    if len(numero) < len(minLong){\n      return \"long\"\n    }\n    if len(numero) == len(minLong){\n      for i := 1; i < len(numero); i++ {\n        if numero[i] > minLong[i] {\n          return \"BigInteger\"\n        }\n      } \n      return \"long\"\n    }\n\n    return \"BigInteger\"\n    \n  }else{\n    if len(numero) > len(minLong){\n      return \"BigInteger\"\n    }\n\n    if len(numero) < len(maxByte){\n      return \"byte\"\n    }\n    if len(numero) == len(maxByte){\n      for i := 0; i < len(numero); i++ {\n        if numero[i] > maxByte[i] {\n          return \"short\"\n        }\n      } \n      return \"byte\"\n    }\n\n    if len(numero) < len(maxShort){\n      return \"short\"\n    }\n    if len(numero) == len(maxShort){\n      for i := 0; i < len(numero); i++ {\n        if numero[i] > maxShort[i] {\n          return \"int\"\n        }\n      } \n      return \"short\"\n    }\n\n    if len(numero) < len(maxInt){\n      return \"int\"\n    }\n    if len(numero) == len(maxInt){\n      for i := 0; i < len(numero); i++ {\n        if numero[i] > maxInt[i] {\n          return \"long\"\n        }\n      } \n      return \"int\"\n    }\n\n    if len(numero) < len(maxLong){\n      return \"long\"\n    }\n    if len(numero) == len(maxLong){\n      for i := 0; i < len(numero); i++ {\n        if numero[i] > maxLong[i] {\n          return \"BigInteger\"\n        }\n      } \n      return \"long\"\n    }\n        \n    return \"BigInteger\"\n  }\n\n}\n\n \t \t  \t   \t\t \t\t \t  \t \t \t\t\t\t \t\t\t"
}