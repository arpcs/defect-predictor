{
    "id": 167059498,
    "contestId": 66,
    "creationTimeSeconds": 1659676625,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 66,
        "index": "A",
        "name": "Petya and Java",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1300,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 66,
        "members": [
            {
                "handle": "OmarKenawi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1299513600
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 0,
    "source": "//KENAA\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class A {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFastReader fr = new FastReader();\r\n\t\tPrintWriter out = new PrintWriter(System.out);\r\n\t\tStringBuilder st = new StringBuilder();\r\n\t\tString s = fr.next();\r\n\t\tif (s.length() <= 3) {\r\n\t\t\tif (Integer.parseInt(s) >= Byte.MIN_VALUE && Integer.parseInt(s) <= Byte.MAX_VALUE) {\r\n\t\t\t\tout.print(\"byte\");\r\n\t\t\t} else {\r\n\t\t\t\tout.print(\"short\");\r\n\t\t\t}\r\n\t\t} else if (s.length() <= 5) {\r\n\t\t\tif (Integer.parseInt(s) >= Short.MIN_VALUE && Integer.parseInt(s) <= Short.MAX_VALUE) {\r\n\t\t\t\tout.print(\"short\");\r\n\t\t\t} else {\r\n\t\t\t\tout.print(\"int\");\r\n\t\t\t}\r\n\t\t} else if (s.length() <= 10) {\r\n\t\t\tif (Integer.parseInt(s) >= Integer.MIN_VALUE && Integer.parseInt(s) <= Integer.MAX_VALUE) {\r\n\t\t\t\tout.print(\"int\");\r\n\t\t\t} else {\r\n\t\t\t\tout.print(\"long\");\r\n\t\t\t}\r\n\t\t} else if (s.length() <= 19){\r\n\t\t\tif (Long.parseLong(s) >= Long.MIN_VALUE && Long.parseLong(s) <= Long.MAX_VALUE) {\r\n\t\t\t\tout.print(\"long\");\r\n\t\t\t} else {\r\n\t\t\t\tout.print(\"BigInteger\");\r\n\t\t\t}\r\n\t\t}else {\r\n\t\t\tout.print(\"BigInteger\");\r\n\t\t}\r\n\t\tout.close();\r\n\r\n\t}\r\n\r\n\tstatic class FastReader {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tStringTokenizer st = new StringTokenizer(\"\");\r\n\r\n\t\tString next() {\r\n\t\t\twhile (!st.hasMoreTokens())\r\n\t\t\t\ttry {\r\n\t\t\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t}\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tint[] readArray(int n) {\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\ta[i] = nextInt();\r\n\t\t\treturn a;\r\n\t\t}\r\n\r\n\t\tint nextInt() {\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\r\n\t\tlong nextLong() {\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static long lcm(long a, long b) {\r\n\t\treturn a * b / gcd(a, b);\r\n\t}\r\n\r\n\tpublic static long gcd(long a, long b) {\r\n\t\twhile (b != 0) {\r\n\t\t\tlong m = a % b;\r\n\t\t\ta = b;\r\n\t\t\tb = m;\r\n\t\t}\r\n\t\treturn a;\r\n\t}\r\n\r\n\tpublic static long factorial(int n) {\r\n\t\tif (n == 0)\r\n\t\t\treturn 1;\r\n\t\tlong res = 1;\r\n\t\tfor (int i = 2; i <= n; i++)\r\n\t\t\tres = res * i;\r\n\t\treturn res;\r\n\t}\r\n\r\n\tpublic static long nCr(int n, int r) {\r\n\t\treturn factorial(n) / (factorial(r) * factorial(n - r));\r\n\t}\r\n\r\n\tpublic static ArrayList<Integer> factors(long n) {\r\n\t\tArrayList<Integer> list = new ArrayList<>();\r\n\t\tfor (int i = 2; i < n / i; i++) {\r\n\t\t\twhile (n % i == 0) {\r\n\t\t\t\tif (!list.contains(i)) {\r\n\t\t\t\t\tlist.add(i);\r\n\t\t\t\t\tn /= i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (n > 2) {\r\n\t\t\tif (!list.contains((int) n)) {\r\n\t\t\t\tlist.add((int) n);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn list;\r\n\r\n\t}\r\n\r\n\tpublic static int numOfPrimes(int n) {\r\n\t\tif (n < 2) {\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tboolean[] bool = new boolean[n + 1];\r\n\t\touter: for (int i = 2; i < bool.length / i; i++) {\r\n\t\t\tif (bool[i]) {\r\n\t\t\t\tcontinue outer;\r\n\t\t\t}\r\n\t\t\tfor (int j = 2 * i; j < bool.length; j += i) {\r\n\t\t\t\tbool[j] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t\tint counter = 0;\r\n\t\tfor (int i = 0; i < bool.length; i++) {\r\n\t\t\tif (!bool[i]) {\r\n\t\t\t\tcounter++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn counter;\r\n\r\n\t}\r\n\r\n\tpublic static void sort2DGivenArray(Object[][] arr, int colNum) {\r\n\t\tArrays.sort(arr, (val1, val2) -> {\r\n\t\t\tif (val1[colNum] == val2[colNum]) {\r\n\t\t\t\treturn 0;\r\n\t\t\t} else if (((Integer) (val1[colNum])).compareTo(((Integer) (val2[colNum]))) < 0) {\r\n\t\t\t\treturn 1;\r\n\t\t\t} else {\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t}\r\n\r\n}\r\n"
}