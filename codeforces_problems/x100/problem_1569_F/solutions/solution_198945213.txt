{
    "id": 198945213,
    "contestId": 1569,
    "creationTimeSeconds": 1679662809,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "acclrt"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 15257600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\nconst int N=5e5+1;\r\n\r\nint n,m,Si,A[13][13];\r\n\r\nint col[13],cnt[7],B[7][7],pl[7];\r\npair<int,int> p[N];\r\nbool check()\r\n{\r\n    for(int i=1;i<=n/2;++i) if(cnt[i]!=2) return 0;\r\n    for(int u=1;u<=n;++u) for(int v=u+1;v<=n;++v) if(col[u]==col[v]) p[col[u]]=make_pair(u,v);\r\n    memset(B,0,sizeof B);\r\n    for(int i=1;i<=n/2;++i)\r\n    for(int j=i+1;j<=n/2;++j)\r\n    {\r\n        int u1=p[i].first, u2=p[i].second;\r\n        int v1=p[j].first, v2=p[j].second;\r\n        if((A[u1][v1] && A[u2][v2]) || (A[u1][v2] && A[u2][v1])) B[i][j] = B[j][i] = 1;\r\n    }\r\n    for(int i=1;i<=n/2;++i) pl[i]=i;\r\n    do\r\n    {\r\n        int c=pl[1];\r\n        if(!A[p[c].first][p[c].second]) continue;\r\n        int bj=1;\r\n        for(int i=2;i<=n/2;++i) if(!B[pl[i-1]][pl[i]]) {bj=0; break;}\r\n        if(bj) return 1;\r\n    } while(next_permutation(pl+1,pl+n/2+1));\r\n    return 0;\r\n}\r\nunordered_map<ll,int> mp;\r\nll get()\r\n{\r\n    ll base=n/2+1, x=0;\r\n    for(int i=1;i<=n;++i) x = base*x + col[i];\r\n    return x;\r\n}\r\n\r\nint node,used[N];\r\nvector<int> E[N];\r\nvoid dw(int u,int mx)\r\n{\r\n//    printf(\"to :\"); for(int i=1;i<=n;++i) printf(\"%d \",col[i]); puts(\"\");\r\n    used[u]=mx;\r\n    vector<int> tmp;\r\n    for(int c1=1;c1<=mx;++c1)\r\n    for(int c2=c1+1;c2<=mx;++c2)\r\n    {\r\n        tmp.clear();\r\n        for(int i=1;i<=n;++i)\r\n        {\r\n            if(col[i]==c2) col[i]=c1, tmp.emplace_back(i);\r\n            else if(col[i]>c2) --col[i];\r\n        }\r\n        ll to=get();\r\n        if(mp.find(to) == mp.end())\r\n        {\r\n            mp[to] = ++node;\r\n            E[u].push_back(node);\r\n            dw(node, mx-1);\r\n        }\r\n        for(int i=1;i<=n;++i) if(col[i]>=c2) ++col[i];\r\n        for(int i :tmp) col[i]=c2;\r\n    }\r\n}\r\n\r\nint vis[N]; queue<int> q;\r\nvoid dfs(int u,int mx)\r\n{\r\n    if(u>n)\r\n    {\r\n        if(check())\r\n        {\r\n//            for(int i=1;i<=n;++i) printf(\"%d \",col[i]); puts(\"!!\");\r\n            q.push(++node), dw(node,n/2);\r\n        }\r\n        return;\r\n    }\r\n    for(int i=1; i<=n/2 && i<=mx+1; ++i)\r\n    {\r\n        if(cnt[i]<2)\r\n        {\r\n            ++cnt[i]; col[u]=i;\r\n            dfs(u+1, max(mx,i));\r\n            --cnt[i];\r\n        }\r\n    }\r\n}\r\n\r\nll fac[13];\r\nvoid init() {fac[0]=1; for(int i=1;i<=12;++i) fac[i]=fac[i-1]*i;}\r\nll C(int x,int y) {if(x<y) return 0; return fac[x] / fac[y] / fac[x-y];}\r\nint main()\r\n{\r\n    init();\r\n    scanf(\"%d %d %d\",&n,&m,&Si);\r\n    if(Si*2<n) puts(\"0\"), exit(0);\r\n    for(int i=1,x,y;i<=m;++i) scanf(\"%d %d\",&x,&y), A[x][y]=A[y][x]=1;\r\n    dfs(1,0);\r\n    long long ans=0;\r\n    while(!q.empty())\r\n    {\r\n        int u=q.front(); q.pop();\r\n        ans += 1ll * C(Si,used[u]) * fac[used[u]];\r\n        for(int v : E[u])\r\n            if(!vis[v]) vis[v]=1, q.push(v);\r\n    }\r\n    printf(\"%lld\\n\",ans);\r\n}\r\n"
}