{
    "id": 141270677,
    "contestId": 1569,
    "creationTimeSeconds": 1640977342,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "353cerega"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 51609600,
    "source": "#pragma GCC optimize(\"Ofast\")\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\r\nusing ll = long long;\r\nusing ld = long double;\r\n\r\n#define X first\r\n#define Y second\r\n\r\nconst ll mod = 1000000007;\r\n//const ll mod = 998244353;\r\n\r\nll gcd(ll a, ll b)\r\n{\r\n    a = abs(a);\r\n    b = abs(b);\r\n    if (a==0 or b==0) return a+b;\r\n    return gcd(b,a%b);\r\n}\r\n\r\n\r\nll sum(ll a, ll b)\r\n{\r\n    a += b;\r\n    a %= mod;\r\n    return a;\r\n}\r\n\r\nll sub(ll a, ll b)\r\n{\r\n    a += mod-b;\r\n    a %= mod;\r\n    return a;\r\n}\r\n\r\ninline ll mul(ll a, ll b)\r\n{\r\n    if (a*b<mod) return a*b;\r\n    return a*b%mod;\r\n}\r\n\r\ninline ll pew(ll a, ll b)\r\n{\r\n    ll res = 1;\r\n    while (b)\r\n    {\r\n        if (b&1) res = mul(res,a);\r\n        a = mul(a,a);\r\n        b /= 2;\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\n\r\n/*const int MOD = 998244353;\r\nconst int root = 31;\r\nconst int root_1 = 128805723;\r\nconst int root_pw = 1<<23;\r\nconst int root = 30;\r\nconst int MOD = 469762049;\r\nconst int root_1 = 15658735;\r\nconst int root_pw = 1<<26;*/\r\n\r\n/*\r\nvoid fft (vector<int> & a, bool invert) {\r\n    int n = (int) a.size();\r\n\r\n    for (int i=1, j=0; i<n; ++i) {\r\n        int bit = n >> 1;\r\n        for (; j>=bit; bit>>=1)\r\n            j -= bit;\r\n        j += bit;\r\n        if (i < j)\r\n            swap (a[i], a[j]);\r\n    }\r\n\r\n    for (int len=2; len<=n; len<<=1) {\r\n        int wlen = invert ? root_1 : root;\r\n        for (int i=len; i<root_pw; i<<=1)\r\n            wlen = int (wlen * 1ll * wlen % mod);\r\n        for (int i=0; i<n; i+=len) {\r\n            int w = 1;\r\n            for (int j=0; j<len/2; ++j) {\r\n                int u = a[i+j],  v = int (a[i+j+len/2] * 1ll * w % mod);\r\n                a[i+j] = u+v < mod ? u+v : u+v-mod;\r\n                a[i+j+len/2] = u-v >= 0 ? u-v : u-v+mod;\r\n                w = int (w * 1ll * wlen % mod);\r\n            }\r\n        }\r\n    }\r\n    if (invert) {\r\n        int nrev = pew(n, mod-2);\r\n        for (int i=0; i<n; ++i)\r\n            a[i] = int (a[i] * 1ll * nrev % mod);\r\n    }\r\n}*/\r\n\r\n/*\r\nint parent[1200001];\r\nint rnk[1200001];\r\n\r\n\r\nvoid make_set (int v) {\r\n    parent[v] = v;\r\n    rnk[v] = 0;\r\n}\r\n\r\nint find_set (int v) {\r\n    if (v == parent[v])\r\n        return v;\r\n    return parent[v] = find_set(parent[v]);\r\n}\r\n\r\nvoid union_sets (int a, int b) {\r\n    a = find_set(a);\r\n    b = find_set(b);\r\n    if (a != b) {\r\n        if (rnk[a] < rnk[b])\r\n            swap(a, b);\r\n        parent[b] = a;\r\n        if (rnk[a] == rnk[b])\r\n            ++rnk[a];\r\n    }\r\n}*/\r\n\r\n\r\nll n, m, k;\r\nvector<vector<ll>> g;\r\nll N;\r\nvector<ll> a;\r\nvector<ll> ord;\r\nvector<vector<ll>> col;\r\nvector<ll> b;\r\n\r\nvoid rec2(ll p, ll M)\r\n{\r\n    if (p==N)\r\n    {\r\n        col.push_back(b);\r\n        return;\r\n    }\r\n    for (ll i=0;i<=M;i++)\r\n    {\r\n        b[p] = i;\r\n        if (i==M) rec2(p+1,M+1);\r\n        else rec2(p+1,M);\r\n    }\r\n}\r\n\r\nvoid prec()\r\n{\r\n    b.resize(N,-1);\r\n    rec2(0,0);\r\n}\r\n\r\nvoid check()\r\n{\r\n    ll n2 = (1LL<<N);\r\n    vector<vector<ll>> msk(n2,vector<ll>(N));\r\n    vector<vector<ll>> A(N);\r\n    for (ll i=0;i<n;i++)\r\n    {\r\n        A[a[i]].push_back(i);\r\n    }\r\n    for (ll i=0;i<N;i++)\r\n    {\r\n        if (g[A[i][0]][A[i][1]]==1) msk[(1<<i)][i] = 1;\r\n    }\r\n    for (ll M=1;M<n2;M++)\r\n    {\r\n        for (ll i=0;i<N;i++)\r\n        {\r\n            if (msk[M][i]==0) continue;\r\n            for (ll j=0;j<N;j++)\r\n            {\r\n                if (M&(1LL<<j)) continue;\r\n                if ((g[A[i][0]][A[j][0]]==1 and g[A[i][1]][A[j][1]]==1) or (g[A[i][0]][A[j][1]]==1 and g[A[i][1]][A[j][0]]==1))\r\n                {\r\n                    msk[M+(1LL<<j)][j] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ll ok = 0;\r\n    for (ll j=0;j<N;j++)\r\n    {\r\n        if (msk[n2-1][j]==1) ok = 1;\r\n    }\r\n    if (ok==0) return;\r\n    for (ll i=0;i<col.size();i++)\r\n    {\r\n        vector<ll> c = a;\r\n        for (ll j=0;j<n;j++) c[j] = col[i][c[j]];\r\n        ll Q = 0;\r\n        for (ll j=0;j<n;j++)\r\n        {\r\n            Q = Q*7+c[j];\r\n        }\r\n        ord.push_back(Q);\r\n    }\r\n}\r\n\r\nvoid rec(ll p)\r\n{\r\n    if (p==n/2)\r\n    {\r\n        check();\r\n    }\r\n    for (ll i=0;i<n;i++)\r\n    {\r\n        if (a[i]==-1)\r\n        {\r\n            a[i] = p;\r\n            for (ll j=i+1;j<n;j++)\r\n            {\r\n                if (a[j]!=-1) continue;\r\n                a[j] = p;\r\n                rec(p+1);\r\n                a[j] = -1;\r\n            }\r\n            a[i] = -1;\r\n            break;\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin >> n >> m >> k;\r\n    N = n/2;\r\n    prec();\r\n    g.resize(n,vector<ll>(n));\r\n    a.resize(n,-1);\r\n    for (ll i=0;i<m;i++)\r\n    {\r\n        ll u, v;\r\n        cin >> u >> v;\r\n        u--, v--;\r\n        g[u][v] = g[v][u] = 1;\r\n    }\r\n    rec(0);\r\n    sort(ord.begin(),ord.end());\r\n    vector<ll> C(N);\r\n    for (ll i=0;i<ord.size();i++)\r\n    {\r\n        if (i!=0 and ord[i]==ord[i-1]) continue;\r\n        ll x = ord[i];\r\n        ll M = 0;\r\n        while (x>0)\r\n        {\r\n            M = max(M,x%7);\r\n            x /= 7;\r\n        }\r\n        C[M]++;\r\n    }\r\n    ll A = 0;\r\n    ll R = 1;\r\n    for (ll j=0;j<N;j++)\r\n    {\r\n        R *= k-j;\r\n        A += C[j]*R;\r\n    }\r\n    cout << A << \"\\n\";\r\n}"
}