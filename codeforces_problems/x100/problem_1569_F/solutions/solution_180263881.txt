{
    "id": 180263881,
    "contestId": 1569,
    "creationTimeSeconds": 1668055729,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "Misono_Mika"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 2698,
    "memoryConsumedBytes": 86118400,
    "source": "\r\n\r\n// cv\r\n// \u4f60\u7d2b\u540d\u89c9\u5f97\u662f\u6211\u7684\u9505\uff0c\u90a3\u5c31\u662f\u6211\u7684\u9505\uff0c\u4e3a\u4ec0\u4e48\u4f60\u77e5\u9053\u5417\uff1f\u56e0\u4e3a\u7d2b\u540d\u8bf4\u7684\u8bdd\uff0c\u5c31\u50cf\u662f\u4e00\u4e2a\u764c\u75c7\u665a\u671f\u60a3\u8005\u8bf4\u7684\u8bdd\u4e00\u6837\u3002\r\n// \u4ed6\u90fd\u5df2\u7ecf\u8fd9\u6837\u4e86\uff0c\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u987a\u4ece\u4ed6\u5462?\u4f60\u603b\u8981\u7ed9\u4eba\u6700\u540e\u4e00\u6bb5\u65f6\u95f4\u4e00\u4e2a\u597d\u7684\u56de\u5fc6\u5427\uff0c\u6700\u540e\u7684\u65f6\u5149\u91cc\u3002\r\n// \u56e0\u4e3a\u7d2b\u540d\u8fd9\u4e2a\u6bb5\u4f4d\u5f88\u5c34\u5c2c\uff0c\u7d2b\u540d\u6a59\u540d\u518d\u5f80\u4e0a\u4e00\u70b9\uff0cgrandmaster\uff0c\u53ef\u80fd\u8bf4\uff0c\u6b38\uff0c\u6709\u70b9\u5b9e\u529b\uff0c\u80fd\u64cd\u4f5c\u4e00\u4e0b\u3002\r\n// \u7d2b\u540d\u5f80\u4e0b\uff0c\u7eff\u540d\uff0c\u84dd\u540d\uff0c\u554a\uff0c\u4eba\u5bb6\u662f\u7eaf\u5c5e\u73a9\u6e38\u620f\u7684\uff0c\u56e0\u4e3a\u592a\u5783\u573e\u4e86\uff0c\u81ea\u5df1\u4e5f\u77e5\u9053\u81ea\u5df1\u6ca1\u4ec0\u4e48\u5b9e\u529b\u3002\r\n// \u4f46\u7d2b\u540d\uff0c\u4e0a\u4e0d\u53bb\u4e0b\u4e0d\u6765\u7684\u8fd9\u4e2a\u6bb5\u4f4d\uff0c\u4ed6\u89c9\u5f97\uff0c\u84dd\u540d\u7684\u4eba\u4e0d\u914d\u8ddf\u4ed6\u4e00\u8d77\u73a9\u513f\uff0c\u5bf9\u5427\uff1f\u84dd\u540d\u662f\u6700\u5783\u573e\u7684\u3002\r\n// \u4f46\u662f\u5462\u4ed6\u60f3\u4e0a\u53bb\uff0c\u4ed6\u53c8\u4e0a\u4e0d\u53bb\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5206\u6bb5\u662f\u6700\u5c34\u5c2c\u7684\uff0c\u6ca1\u529e\u6cd5\uff0c\u5361\u5728\u8fd9\u91cc\u4e86\u3002\r\n// \u60f3\u64cd\u4f5c\uff0c\u53c8\u64cd\u4f5c\u4e0d\u8d77\u6765\uff0c\u6389\u4e0b\u53bb\u5427\uff0c\u4ed6\u53c8\u89c9\u5f97\u4e0d\u503c\u5f97\uff0c\u5bf9\u5427\uff0c\u6211\u597d\u4e0d\u5bb9\u6613\u4ece\u84dd\u540d\u6253\u5230\u7d2b\u540d\u4e86\uff0c\u6211\u4e3a\u4ec0\u4e48\u8fd8\u8981\u6389\u4e0b\u53bb\u5462?\r\n// \u8fd9\u4e2a\u4eba\u8bf4\u4f18\u8d8a\u72d7\u8d8a\u8bf4\u8d8a\u8d77\u52b2\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4f1a\u8fd9\u4e48\u8bf4?\u56e0\u4e3a\u4ed6\u662f\u7d2b\u540d\u3002\r\n// \u4ed6\u89c9\u5f97\u4f60\u6bd4\u6211\u6bb5\u4f4d\u9ad8\uff0c\u4f60\u8bf4\u7684\u4efb\u4f55\u8bdd\u90fd\u662f\u4f18\u8d8a\uff0c\u6211\u5e76\u4e0d\u7ba1\u4f60\u8bf4\u7684\u6709\u6ca1\u6709\u9053\u7406\u3002\r\n// \u6211\u7d2b\u540d\uff0c\u6211\u6700\u731b\uff0c\u6211WF2017\u6211\u4e0a\u6211\u80fd\u593a\u51a0\uff0c\u90a3\u6253\u6bd4\u8d5b\u5168\u662fsb\u3002\u4f60\u6bd4\u6211\u6bb5\u4f4d\u9ad8\u4f60\u8bf4\u8bdd\u5c31\u662f\u653e\u5c41\uff0c\u8fd9\u5c31\u662f\u8fd9\u79cd\u4eba\u7684\u60f3\u6cd5\u3002\u4f46\u662f\u5462\uff0c\u4ed6\u7684\u60f3\u6cd5\u662f\u5bf9\u7684\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\r\n// \u56e0\u4e3a\u4ed6\u764c\u75c7\u665a\u671f\u3002\u6ca1\u529e\u6cd5\uff0c\u6211\u540c\u610f\uff0c\u5bf9\u4e0d\u8d77\uff0c\u6211\u4f18\u8d8a\u4e86\u3002\u53ef\u80fd\u662f\u6211\u81a8\u80c0\u4e86\uff0c\u4e0d\u597d\u610f\u601d\u554a\uff0c\u6211\u81a8\u80c0\u4e86\u3002\u6211\u7d2b\u540d\u662f\u6ca1\u64cd\u4f5c\uff0c\u96be\u9053\u6211\u5c31\u770b\u4e0d\u61c2\u8c01\u80cc\u9505\u5417\uff1f\r\n// \u4e0d\u662f\uff0c\u5982\u679c\u4f60\u770b\u5f97\u61c2\u7684\u8bdd\uff0c\u5c31\u4e0d\u4f1a\u5728\u8fd9\u91cc\u62ac\u6760\u4e86\uff0c\u5bf9\u5427\u3002\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef array<int,13>arr;\r\ntypedef long long ll;\r\nset<tuple<arr,int,int>>p;\r\nset<arr>s2,s1;\r\nint n,m,k,e[14][14];\r\nll r,ct[15],tt=1;\r\nvoid dfs(arr a,int x,int y){\r\n    if(x<y)swap(x,y);a[x]=y;\r\n    if(p.count({a,x,y}))return;\r\n    p.insert({a,x,y});\r\n    bool v[13]={};\r\n    for(int i=1;i<=n;++i)if(a[i])v[a[i]]=v[i]=1;\r\n    if(*min_element(v+1,v+n+1)){if(e[x][y])s1.insert(a);return;}\r\n    for(int i=1;i<=n;++i)if(e[x][i]&&!v[i])\r\n    for(int j=1;j<=n;++j)if(i!=j&&e[y][j]&&!v[j])\r\n        dfs(a,i,j);\r\n}\r\nvoid sol(arr a,int x){\r\n    while(x<=n&&a[x])x++;\r\n    if(x>n){\r\n        for(int i=1;i<=n;++i)if(a[a[i]])a[i]=a[a[i]];\r\n        s2.insert(a);\r\n        return;\r\n    }\r\n    vector<int>v;\r\n    for(int i=x+1;i<=n;++i)if(!a[i])v.push_back(i);\r\n    int l=v.size();\r\n    for(int s=0;s<(1<<l);++s){\r\n        arr nw=a;\r\n        for(int i=0;i<=l-1;++i)if(s>>i&1)nw[v[i]]=x;\r\n        sol(nw,x+1);\r\n    }\r\n}\r\nint main(){\r\n    cin>>n>>m>>k;\r\n    for(int i=1;i<=n;++i)e[i][0]=e[0][i]=1;\r\n    for(int i=1,x,y;i<=m;++i)cin>>x>>y,e[x][y]=e[y][x]=1;\r\n    dfs(arr(),0,0);\r\n    for(auto y:s1)sol(y,1);\r\n    for(auto a:s2){int tt=0;for(int i=1;i<=n;++i)if(!a[i])tt++;ct[tt]++;}\r\n    for(int i=1;i<=n/2;++i)tt=tt*(k-i+1),r+=tt*ct[i];\r\n    cout<<r<<'\\n';\r\n}"
}