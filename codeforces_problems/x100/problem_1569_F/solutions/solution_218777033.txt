{
    "id": 218777033,
    "contestId": 1569,
    "creationTimeSeconds": 1692007047,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "jgross76"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\n// Function to check if a string is palindrome\r\nbool isPalindrome(string s) {\r\n  int n = s.length();\r\n  for(int i=0; i<n/2; i++) {\r\n    if(s[i] != s[n-i-1]) {\r\n      return false; \r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n// Function to check if graph has a Hamiltonian path\r\nbool hasHamPath(int graph[][20], int n, string s) {\r\n  \r\n  // Visting array to check if vertex is visited\r\n  bool visited[n] = {false}; \r\n  \r\n  // Start from first vertex\r\n  visited[0] = true;\r\n  \r\n  int count = 1; // Count of visited vertices\r\n  \r\n  // Check for hamiltonian path using recursion\r\n  if(checkPath(graph, s, 0, visited, n, count)) {\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n// Recursive function to check hamiltonian path\r\nbool checkPath(int graph[][20], string s, int v, bool visited[], int n, int& count) {\r\n\r\n  // If all vertices are visited, we found hamiltonian path\r\n  if(count == n)\r\n    return true;\r\n\r\n  // Check all adjacent vertices  \r\n  for(int j=0; j<n; j++) {\r\n    if(graph[v][j] == 1 && !visited[j]) {\r\n      visited[j] = true;\r\n      count++;\r\n      \r\n      if(checkPath(graph, s, j, visited, n, count)) {\r\n        return true;\r\n      }\r\n      \r\n      // Backtrack\r\n      visited[j] = false;\r\n      count--;\r\n    }\r\n  }\r\n  \r\n  return false;\r\n}\r\n\r\n\r\nint main() {\r\n  \r\n  int n, k;\r\n  cin >> n >> k;\r\n  \r\n  int graph[20][20]; \r\n \r\n  // Take graph input\r\n  for(int i=0; i<n; i++) {\r\n    for(int j=0; j<n; j++) {\r\n      cin >> graph[i][j]; \r\n    }\r\n  }\r\n\r\n  int count = 0;\r\n  \r\n  // Generate all possible strings\r\n  for(int i=0; i<pow(k, n); i++) {\r\n    \r\n    string s = \"\";\r\n    \r\n    int temp = i;\r\n    \r\n    for(int j=0; j<n; j++) {\r\n      s += (temp%k) + 'a';\r\n      temp /= k;\r\n    }\r\n    \r\n    // Check if string is good\r\n    if(isPalindrome(s) && hasHamPath(graph, n, s)) {\r\n      count++; \r\n    }\r\n  }\r\n  \r\n  // Print final count\r\n  cout << count << endl;\r\n  \r\n  return 0;\r\n}"
}