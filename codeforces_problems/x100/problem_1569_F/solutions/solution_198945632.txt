{
    "id": 198945632,
    "contestId": 1569,
    "creationTimeSeconds": 1679662971,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "acclrt"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 21299200,
    "source": "// LUOGU_RID: 105738886\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\nconst int N=5e5+1;\n\nint n,m,Si,A[13][13];\n\nint col[13],cnt[7],B[7][7],pl[7];\npair<int,int> p[N];\nbool check()\n{\n    for(int i=1;i<=n/2;++i) if(cnt[i]!=2) return 0;\n    for(int u=1;u<=n;++u) for(int v=u+1;v<=n;++v) if(col[u]==col[v]) p[col[u]]=make_pair(u,v);\n    memset(B,0,sizeof B);\n    for(int i=1;i<=n/2;++i)\n    for(int j=i+1;j<=n/2;++j)\n    {\n        int u1=p[i].first, u2=p[i].second;\n        int v1=p[j].first, v2=p[j].second;\n        if((A[u1][v1] && A[u2][v2]) || (A[u1][v2] && A[u2][v1])) B[i][j] = B[j][i] = 1;\n    }\n    for(int i=1;i<=n/2;++i) pl[i]=i;\n    do\n    {\n        int c=pl[1];\n        if(!A[p[c].first][p[c].second]) continue;\n        int bj=1;\n        for(int i=2;i<=n/2;++i) if(!B[pl[i-1]][pl[i]]) {bj=0; break;}\n        if(bj) return 1;\n    } while(next_permutation(pl+1,pl+n/2+1));\n    return 0;\n}\nunordered_map<ll,int> mp;\nll get()\n{\n    ll base=n/2+1, x=0;\n    for(int i=1;i<=n;++i) x = base*x + col[i];\n    return x;\n}\n\nint node,used[N];\nvector<int> E[N];\nvoid dw(int u,int mx)\n{\n//    printf(\"to :\"); for(int i=1;i<=n;++i) printf(\"%d \",col[i]); puts(\"\");\n    used[u]=mx;\n    vector<int> tmp;\n    for(int c1=1;c1<=mx;++c1)\n    for(int c2=c1+1;c2<=mx;++c2)\n    {\n        tmp.clear();\n        for(int i=1;i<=n;++i)\n        {\n            if(col[i]==c2) col[i]=c1, tmp.emplace_back(i);\n            else if(col[i]>c2) --col[i];\n        }\n        ll to=get();\n        if(mp.find(to) == mp.end())\n        {\n            mp[to] = ++node;\n            E[u].push_back(node);\n            dw(node, mx-1);\n        }\n        for(int i=1;i<=n;++i) if(col[i]>=c2) ++col[i];\n        for(int i :tmp) col[i]=c2;\n    }\n}\n\nint vis[N]; queue<int> q;\nvoid dfs(int u,int mx)\n{\n    if(u>n)\n    {\n        if(check())\n        {\n//            for(int i=1;i<=n;++i) printf(\"%d \",col[i]); puts(\"!!\");\n            q.push(++node), dw(node,n/2);\n        }\n        return;\n    }\n    for(int i=1; i<=n/2 && i<=mx+1; ++i)\n    {\n        if(cnt[i]<2)\n        {\n            ++cnt[i]; col[u]=i;\n            dfs(u+1, max(mx,i));\n            --cnt[i];\n        }\n    }\n}\n\nll fac[13];\nvoid init() {fac[0]=1; for(int i=1;i<=12;++i) fac[i]=fac[i-1]*i;}\nll C(int x,int y) {if(x<y) return 0; return fac[x] / fac[y] / fac[x-y];}\nint main()\n{\n    init();\n    scanf(\"%d %d %d\",&n,&m,&Si);\n    for(int i=1,x,y;i<=m;++i) scanf(\"%d %d\",&x,&y), A[x][y]=A[y][x]=1;\n    dfs(1,0);\n    long long ans=0;\n    while(!q.empty())\n    {\n        int u=q.front(); q.pop();\n        ans += 1ll * C(Si,used[u]) * fac[used[u]];\n        for(int v : E[u])\n            if(!vis[v]) vis[v]=1, q.push(v);\n    }\n    printf(\"%lld\\n\",ans);\n} // exp qwq\n"
}