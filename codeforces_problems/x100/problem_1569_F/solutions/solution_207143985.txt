{
    "id": 207143985,
    "contestId": 1569,
    "creationTimeSeconds": 1685018279,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "hzr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\nconst int maxn=13;\r\nint i,j,k,n,m,S,a[maxn];\r\nint id,chs[maxn],num[maxn],is[maxn][maxn];\r\nll ANS;\r\nbool OK;\r\nint T[maxn][maxn][(1<<maxn-1)+1],Cnt;\r\nvector<int>v[maxn],t[maxn];\r\nbool dfs(int A,int B,int Sc){\r\n    if(T[A][B][Sc]==Cnt)return false;\r\n    T[A][B][Sc]=Cnt;\r\n    if(Sc==((1<<n)-1))return (A==B||is[A][B]);\r\n    if(A==B)return false;\r\n    for(int i=1;i<=id;i++){\r\n        vector<int>cu;\r\n        for(int C:t[i])if(!(Sc&(1<<C-1)))cu.push_back(C);\r\n        for(int C:cu)if(is[A][C])\r\n            for(int D:cu)if(is[B][D])\r\n                if(dfs(C,D,Sc|(1<<C-1)|(1<<D-1)))return true;\r\n    }return false;\r\n}\r\nbool getAns(){\r\n    ++Cnt;\r\n    bool ok=false;\r\n    for(int i=1;i<=n;i++)t[i].clear();\r\n    for(int i=1;i<=n;i++)t[chs[i]].push_back(i);\r\n    for(int i=1;i<=n;i++)\r\n        for(int j=i+1;j<=n;j++)\r\n            if(chs[i]==chs[j]){\r\n                ok|=dfs(i,j,(1<<i-1)|(1<<j-1));\r\n                if(ok)return 1;\r\n            }\r\n    return 0;\r\n}\r\nint cnum=0;\r\nvoid work(){\r\n    int Sum=0;\r\n    for(int i=1;i<=n;i++)num[i]=0;\r\n    for(int i=1;i<=n;i++)num[chs[i]]++;\r\n    for(int i=1;i<=n;i++)if(num[i]&1)++Sum;\r\n    if(Sum>1)return;\r\n    cnum++;if(cnum%100==0)cerr<<\"cnum=\"<<cnum<<endl;\r\n    return;\r\n    // cerr<<\"try!\"<<endl;\r\n    // for(int i=1;i<=n;i++)cerr<<chs[i]<<' ';cerr<<endl;\r\n    ll Ans=1;\r\n    for(int i=1;i<=id;i++)Ans=Ans*(S-i+1);\r\n    int num=getAns();\r\n    ANS+=Ans*num;\r\n    // cerr<<\"Num=\"<<num<<' '<<Ans<<endl;\r\n}\r\nvoid dfs(int now){\r\n    if(now>n){\r\n        work();\r\n    }else{\r\n        for(int i=1;i<=min(S,id+1);i++){\r\n            int X=max(id,i);\r\n            swap(X,id);\r\n            chs[now]=i;\r\n            dfs(now+1);\r\n            swap(X,id);\r\n        }\r\n    }\r\n}\r\nbool vis[maxn];\r\nvoid Check(int now){\r\n    if(vis[now])return;\r\n    vis[now]=1;\r\n    for(int u:v[now])Check(u);\r\n}\r\nbool check(){\r\n    Check(1);\r\n    for(int i=1;i<=n;i++)if(!vis[i])return false;\r\n    return true;\r\n}\r\nint main(){\r\n    cin>>n>>m>>S;\r\n    for(i=1;i<=m;i++){\r\n        int x,y;\r\n        scanf(\"%d%d\",&x,&y);\r\n        v[x].push_back(y);\r\n        v[y].push_back(x);\r\n        is[x][y]=is[y][x]=1;\r\n    }\r\n    dfs(1);\r\n    if(!check()){puts(\"0\");return;}\r\n    cout<<ANS<<endl;\r\n    cerr<<1.*clock()/CLOCKS_PER_SEC<<endl;\r\n}"
}