{
    "id": 160014931,
    "contestId": 1569,
    "creationTimeSeconds": 1654775799,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "LYC_music"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 1684,
    "memoryConsumedBytes": 206336000,
    "source": "// Lynkcat.\r\n// Problem: F. Palindromic Hamiltonian Path\r\n// URL: https://codeforces.com/problemset/problem/1569/F\r\n// Memory Limit: 256 MB\r\n// Time Limit: 5000 ms\r\n// -----------------------------------------------\r\n\r\n#include<bits/stdc++.h>\r\n#define poly vector<int>\r\n#define IOS ios::sync_with_stdio(false)\r\n#define ll long long\r\n#define mp make_pair\r\n#define mt make_tuple\r\n#define pa pair < int,int >\r\n#define fi first\r\n#define se second\r\n#define inf 1e18\r\n#define mod 998244353\r\n// #define int ll\r\n#define N 55\r\nusing namespace std;\r\nvector<poly> col[N];\r\nint f[N][N];\r\nvector<poly>Ans[N];\r\nint p[N];\r\nll C[N][N],fac[N];\r\nint n,m,q;\r\nvoid dfs(int k,int mx,poly g)\r\n{\r\n\tif (k==n/2+1)\r\n\t{\r\n\t\tcol[mx].push_back(g);\r\n\t\treturn;\r\n\t}\r\n\tfor (int i=1;i<=mx+1;i++)\r\n\t{\r\n\t\tg.push_back(i),dfs(k+1,max(mx,i),g),g.pop_back();\r\n\t}\r\n}\r\nvoid work(vector<pa>g)\r\n{\r\n\tfor (int i=0;i<g.size();i++) p[i]=i;\r\n\t// vector<pa>g1={{12,8},{11,7},{10,1},{9,6},{5,2},{4,3}};\r\n\t\t\t// if (g==g1)\r\n\t\t\t// {\r\n\t// for (auto u:g) cout<<u.fi<<\" \"<<u.se<<endl;\r\n\t// cout<<endl;\r\n\t// }\r\n\tint ans=0;\r\n\tint tt=0;\r\n\tdo\r\n\t{\r\n\t\ttt++;\r\n\t\tbool res=0;\r\n\t\tfor (int i=0;i+1<g.size();i++)\r\n\t\t{\r\n\t\t\tint x=p[i],y=p[i+1];\r\n\t\t\t// if (g[p[0]].fi==10&&g[p[1]].fi==4&&g[p[2]].fi==9&&g[p[3]].fi==5)\r\n\t\t\t\t// cout<<\"?\"<<g[x].fi<<\" \"<<g[y].fi<<\" \"<<g[y].se<<\" \"<<g[x].se<<endl;\r\n\t\t\tif (f[g[x].fi][g[y].fi]&&f[g[y].se][g[x].se])\r\n\t\t\t\tcontinue;\r\n\t\t\tif (f[g[x].fi][g[y].se]&&f[g[y].fi][g[x].se])\r\n\t\t\t\tcontinue;\r\n\t\t\tres=1;\r\n\t\t}\r\n\t\t// if (g[p[0]].fi==10&&g[p[1]].fi==4&&g[p[2]].fi==9&&g[p[3]].fi==5)\r\n\t\t\t// cout<<endl;\r\n\t\tint x=p[g.size()-1];\r\n\t\tif (!(f[g[x].fi][g[x].se])) res=1;\r\n\t\tif (res) continue;\r\n\t\tans=1;\r\n\t\tbreak;\r\n\t}while (next_permutation(p,p+g.size()));\r\n\tif (!ans) return;\r\n\tfor (int i=1;i<=n/2;i++)\r\n\t{\r\n\t\tfor (auto u:col[i])\r\n\t\t{\r\n\t\t\tpoly nowc(n,0);\r\n\t\t\tfor (int j=0;j<n/2;j++)\r\n\t\t\t\tnowc[g[j].fi-1]=nowc[g[j].se-1]=u[j];\r\n\t\t\tAns[i].push_back(nowc);\r\n\t\t}\r\n\t}\r\n}\r\n\t\t\r\nvoid dfs1(poly g,vector<pa>g1)\r\n{\r\n\tif (!g.size())\r\n\t{\r\n\t\twork(g1);\r\n\t\treturn;\r\n\t}\r\n\tint x=g.back();\r\n\tg.pop_back();\r\n\tfor (int i=0;i<g.size();i++)\r\n\t{\r\n\t\tint now=g[i];\r\n\t\tpoly nxt=g;\r\n\t\tnxt.erase(nxt.begin()+i,nxt.begin()+i+1);\r\n\t\tg1.push_back(mp(x,g[i]));\r\n\t\tdfs1(nxt,g1);\r\n\t\tg1.pop_back();\r\n\t}\r\n}\r\nvoid BellaKira()\r\n{\r\n\tcin>>n>>m>>q;\r\n\tfor (int i=1;i<=m;i++)\r\n\t{\r\n\t\tint x,y;\r\n\t\tcin>>x>>y;\r\n\t\tf[x][y]=f[y][x]=1;\r\n\t}\r\n\tdfs(1,0,poly());\r\n\tpoly now;\r\n\tfor (int i=1;i<=n;i++) now.push_back(i);\r\n\tdfs1(now,vector<pa>());\r\n\tC[0][0]=1;fac[0]=1;\r\n\tfor (int i=1;i<=q;i++)\r\n\t{\r\n\t\tC[i][0]=1;\r\n\t\tfac[i]=fac[i-1]*i;\r\n\t\tfor (int j=1;j<=i;j++)\r\n\t\t\tC[i][j]=(C[i-1][j]+C[i-1][j-1]);\r\n\t}\r\n\tll ans=0;\r\n\tfor (int i=1;i<=n/2;i++)\r\n\t{\r\n\t\tsort(Ans[i].begin(),Ans[i].end());\r\n\t\tAns[i].erase(unique(Ans[i].begin(),Ans[i].end()),Ans[i].end());\r\n\t\tans+=1ll*(ll)Ans[i].size()*C[q][i]*fac[i];\r\n\t}\r\n\tcout<<ans<<endl;\r\n}\r\nsigned main()\r\n{\r\n\tint T=1;\r\n\twhile (T--)\r\n\t{\r\n\t\tBellaKira();\r\n\t}\r\n}"
}