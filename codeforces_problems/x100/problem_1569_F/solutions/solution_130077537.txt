{
    "id": 130077537,
    "contestId": 1569,
    "creationTimeSeconds": 1632824186,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "kavyasrihari"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 3650,
    "memoryConsumedBytes": 13209600,
    "source": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\nmt19937 rng((int) chrono::steady_clock::now().time_since_epoch().count());\r\n \r\nint qtd[12];\r\nbool adj[15][15];\r\n \r\nbool check(string &s) {\r\n\tvector<int> ord(s.size());\r\n\tfor (int i = 0; i < (int) s.size(); i++) {\r\n\t\tord[i] = i;\r\n\t}\r\n\tsort(ord.begin(), ord.end(), [&](int a, int b) { \r\n\t\treturn s[a] < s[b];\r\n\t});\r\n\tfor (int i = 0; i < (int) s.size(); i += 2) {\r\n\t\tif (i + 2 == (int) s.size()) {\r\n\t\t\tif (!adj[ord[i]][ord[i + 1]])\r\n\t\t\t\treturn false;\r\n\t\t} else {\r\n\t\t\tint a = ord[i];\r\n\t\t\tint b = ord[i + 1];\r\n\t\t\tint c = ord[i + 2];\r\n\t\t\tint d = ord[i + 3];\r\n\t\t\tif (!((adj[a][c] && adj[b][d]) || (adj[a][d] && adj[b][c]))) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn true;\r\n}\r\n \r\nstring normalize(string s) {\r\n\tvector<int> ord(7, 0);\r\n\tfor (int i = 0, cnt = 0; i < (int) s.size(); i++) {\r\n\t\tif (!ord[s[i] - '0'])\r\n\t\t\tord[s[i] - '0'] = ++cnt;\r\n\t\ts[i] = char('0' + ord[s[i] - '0']);\r\n\t}\r\n\treturn s;\r\n}\r\n \r\nint main() {\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(0);\r\n\tint n, m, k;\r\n\tcin >> n >> m >> k;\r\n\tfor (int i = 0; i < m; i++) {\r\n\t\tint a, b;\r\n\t\tcin >> a >> b;\r\n\t\tadj[a - 1][b - 1] = adj[b - 1][a - 1] = true;\r\n\t}\r\n\tstring s;\r\n\tfor (int i = 1; i <= n / 2; i++) {\r\n\t\ts.push_back(char('0' + i));\r\n\t\ts.push_back(char('0' + i));\r\n\t}\r\n\tset<string> vis;\r\n\tqueue<string> q;\r\n\tdo {\r\n\t\t// checar se a string eh valida\r\n\t\tif (check(s)) {\r\n\t\t\tstring ns = normalize(s);\r\n\t\t\tif (!vis.count(ns)) {\r\n\t\t\t\tq.push(ns);\r\n\t\t\t\tvis.insert(ns);\r\n\t\t\t}\r\n\t\t}\r\n\t} while (next_permutation(s.begin(), s.end()));\r\n\twhile (!q.empty()) {\r\n\t\ts = q.front();\r\n\t\tq.pop();\r\n\t\tchar mx = '0';\r\n\t\tfor (int i = 0; i < (int) s.size(); i++) {\r\n\t\t\tmx = max(mx, s[i]);\r\n\t\t}\r\n\t\tqtd[mx - '0']++;\r\n\t\tstring aux = s;\r\n\t\tfor (char i = '1'; i <= mx; i++) {\r\n\t\t\tfor (char j = char(i + 1); j <= mx; j++) {\r\n\t\t\t\tfor (int l = 0; l < (int) s.size(); l++) {\r\n\t\t\t\t\taux[l] = (s[l] == j ? i : (s[l] > j ? char(s[l] - 1) : s[l]));\r\n\t\t\t\t}\r\n\t\t\t\tif (!vis.count(aux)) {\r\n\t\t\t\t\tq.push(aux);\r\n\t\t\t\t\tvis.insert(aux);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tlong long ans = 0;\r\n\tfor (int i = 1; i <= n / 2; i++) {\r\n\t\tlong long cost = 1;\r\n\t\tfor (int j = k; j >= k - i + 1; j--) {\r\n\t\t\tcost *= j;\r\n\t\t}\r\n\t\tans += qtd[i] * cost;\r\n\t}\r\n\tcout << ans << '\\n';\r\n\treturn 0;\r\n}"
}