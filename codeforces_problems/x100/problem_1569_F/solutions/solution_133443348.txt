{
    "id": 133443348,
    "contestId": 1569,
    "creationTimeSeconds": 1635509592,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "hzk_cpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 483,
    "memoryConsumedBytes": 8499200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\nconst int N=12;\r\n\r\nint n,m,sk,e[N+9][N+9];\r\n\r\nvoid into(){\r\n  scanf(\"%d%d%d\",&n,&m,&sk);\r\n  for (int i=1;i<=m;++i){\r\n    int x,y;\r\n    scanf(\"%d%d\",&x,&y);\r\n    --x;--y;\r\n    e[x][y]=e[y][x]=1;\r\n  }\r\n}\r\n\r\nLL bn[N+9][N+9];\r\n\r\nvoid Get_bn(){\r\n  bn[0][0]=1;\r\n  for (int i=1;i<=sk;++i){\r\n    bn[i][0]=bn[i][i]=1;\r\n    for (int j=1;j<i;++j) bn[i][j]=bn[i-1][j-1]+bn[i-1][j];\r\n  }\r\n  for (int i=0;i<=sk;++i){\r\n    LL fac=1;\r\n    for (int j=1;j<=i;++j) bn[i][j]*=fac*=j;\r\n  }\r\n}\r\n\r\nint a[N+9];\r\nvector<int>p[N+9];\r\nint dp[(1<<N/2)+9][N/2+9];\r\n\r\nbool Check_ham(int lim){\r\n  for (int i=0;i<lim;++i) p[i].clear();\r\n  for (int i=0;i<n;++i) p[a[i]].push_back(i);\r\n  for (int s=0;s<1<<lim;++s)\r\n    for (int i=0;i<lim;++i) dp[s][i]=0;\r\n  for (int i=0;i<lim;++i)\r\n    dp[1<<i][i]=p[i].size()==1||n&1^1&&e[p[i][0]][p[i][1]];\r\n  for (int s=1;s<1<<lim;++s)\r\n    for (int i=0;i<lim;++i){\r\n      if (!dp[s][i]) continue;\r\n      int x=p[i][0],y=p[i].size()>1?p[i][1]:p[i][0];\r\n      for (int j=0;j<lim;++j){\r\n        if (s>>j&1) continue;\r\n        int u=p[j][0],v=p[j][1];\r\n        if (e[x][u]&&e[y][v]||e[x][v]&&e[y][u]) dp[s|1<<j][j]=1;\r\n      }\r\n    }\r\n  for (int i=0;i<lim;++i)\r\n    if (dp[(1<<lim)-1][i]) return 1;\r\n  return 0;\r\n}\r\n\r\nint b[N+9];\r\nset<LL>vis;\r\nLL ans;\r\n\r\nvoid Dfs_ans1(int k,int lim,int c,int s){\r\n  if (c>sk) return;\r\n  if (s==(1<<lim)-1){\r\n    LL now=0;\r\n    for (int i=0;i<n;++i) now=now*sk+b[a[i]];\r\n    if (vis.find(now)!=vis.end()) return;\r\n    vis.insert(now);\r\n    ans+=bn[sk][c];\r\n    return;\r\n  }\r\n  if (s>>k&1) return Dfs_ans1(k+1,lim,c,s);\r\n  b[k]=c;s|=1<<k;\r\n  for (int ct=(1<<lim)-1^s,t=ct;2333;t=t-1&ct){\r\n    for (int i=k+1;i<lim;++i)\r\n      if (t>>i&1) b[i]=c;\r\n    Dfs_ans1(k+1,lim,c+1,s|t);\r\n    if (!t) break;\r\n  }\r\n}\r\n\r\nvoid Dfs_ans0(int k,int c,int s,int flag){\r\n  if (s==(1<<n)-1){\r\n    if (!Check_ham(c)) return;\r\n    return Dfs_ans1(0,c,0,0);\r\n  }\r\n  if (s>>k&1) return Dfs_ans0(k+1,c,s,flag);\r\n  a[k]=c;s|=1<<k;\r\n  if (flag) Dfs_ans0(k+1,c+1,s,0);\r\n  for (int i=k+1;i<n;++i){\r\n    if (s>>i&1) continue;\r\n    a[i]=c;\r\n    Dfs_ans0(k+1,c+1,s|1<<i,flag);\r\n  }\r\n}\r\n\r\nvoid work(){\r\n  Get_bn();\r\n  Dfs_ans0(0,0,0,n&1);\r\n}\r\n\r\nvoid outo(){\r\n  printf(\"%lld\\n\",ans);\r\n}\r\n\r\nint main(){\r\n  int T=1;\r\n  //scanf(\"%d\",&T);\r\n  for (;T--;){\r\n    into();\r\n    work();\r\n    outo();\r\n  }\r\n  return 0;\r\n}"
}