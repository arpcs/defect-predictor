{
    "id": 131666701,
    "contestId": 1569,
    "creationTimeSeconds": 1634057527,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "zafor-158"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nvector<vector<int> >rv;\r\nint n,edges,mini;\r\nbool recur(int strt,int src,int sz,vector<bool>&vis,vector<int>adj[]){\r\nif(sz==0){\r\n    for(int i=0;i<n;i++){\r\n         for(int j=0;j<adj[i].size();j++){\r\n                int des=adj[i][j];\r\n                vis[i]=true;\r\n                vis[des]=true;\r\n                // cout<<\"new strt \"<<i<<\" \"<<des<<\" \";\r\n                bool flg=recur(i,des,sz+2,vis,adj);\r\n                if(flg)return true;\r\n                // cout<<endl;\r\n                vis[i]=false;\r\n                vis[des]=false;\r\n        }\r\n    }\r\n}\r\nelse{\r\n    if(sz==n){\r\n        // cout<<\"Entered\"<<endl;\r\n      return true;\r\n    }\r\n    else if(sz>n){\r\n        //  cout<<\"Larger Size\"<<endl;\r\n        return false;\r\n    }\r\n    int ssz=adj[src].size();\r\n        for(int i=0;i<ssz;i++){\r\n            int des=adj[src][i];\r\n            if(!vis[des]){\r\n                vis[des]=true;\r\n                // cout<<\"called \"<<des<<endl;\r\n                bool flg=recur(strt,des,sz+1,vis,adj);\r\n                if(flg)return true;\r\n                vis[des]=false;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nint main() {\r\n    //n vertices, edges\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n         cin>>n>>edges;\r\n        vector<int>adj[n];\r\n        for(int i=0;i<edges;i++){\r\n            int from=0,to=0;\r\n            cin>>from>>to;\r\n            from--;\r\n            to--;\r\n           adj[from].push_back(to);\r\n           adj[to].push_back(from);\r\n        }\r\n        vector<int>tmp;\r\n        vector<bool>vis(n,false);\r\n        bool flg=recur(-1,-1,0,vis,adj);\r\n        if(flg)cout<<1<<endl;\r\n        else cout<<0<<endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}