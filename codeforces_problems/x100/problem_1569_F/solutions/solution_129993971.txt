{
    "id": 129993971,
    "contestId": 1569,
    "creationTimeSeconds": 1632742258,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "F",
        "name": "Palindromic Hamiltonian Path",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "EVENBAO"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 9216000,
    "source": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\ntypedef long long LL;\r\ntypedef pair < int , int > pii;\r\n \r\n#define mp make_pair\r\n \r\nconst int MN = 13;\r\n \r\nint N , M , K , g[MN][MN] , col[MN] , ng[MN][MN] , bits[1 << MN] , f[1 << MN][MN];\r\nint cur = 0;\r\npii pr[MN];\r\n \r\nunordered_set < LL > s[MN];\r\n \r\ninline void add(int dep) {\r\n    if (dep == N / 2) {\r\n        LL val = 0;\r\n        for (int i = 0; i < N; ++i)\r\n            val = 7ll * val + col[i];\r\n        s[cur].insert(val);\r\n        return; \r\n    }\r\n    int u = pr[dep].first , v = pr[dep].second;\r\n    for (int i = 1; i <= cur; ++i) {\r\n        col[u] = col[v] = i;\r\n        add(dep + 1);    \r\n    }\r\n    if (cur < K) {\r\n        col[u] = col[v] = ++cur; add(dep + 1);\r\n        --cur;\r\n    }\r\n}\r\ninline void check() {\r\n    for (int i = 0; i < N / 2; ++i)\r\n    for (int j = 0; j < i; ++j)\r\n        ng[i][j] = ng[j][i] = (g[pr[i].first][pr[j].first] && g[pr[i].second][pr[j].second]) || (g[pr[i].first][pr[j].second] && g[pr[i].second][pr[j].first]);\r\n    int all = 1 << (N / 2);\r\n    for (int s = 0; s < all; ++s)\r\n    for (int i = 0; i < N / 2; ++i)\r\n        f[s][i] = 0;\r\n    for (int i = 0; i < N / 2; ++i)\r\n        if (g[pr[i].first][pr[i].second]) f[1 << i][i] = 1;\r\n    for (int s = 0; s < all; ++s)\r\n    for (int i = 0; i < N / 2; ++i)\r\n        if (f[s][i]) {\r\n            for (int j = 0; j < N / 2; ++j) {\r\n                if ((s >> j & 1) || (!ng[i][j])) continue;\r\n                f[s | 1 << j][j] = 1;\r\n            }\r\n        }\r\n     bool yes = false;\r\n     for (int i = 0; i < N / 2; ++i)\r\n        if (f[all - 1][i]) yes = true;\r\n     if (yes) add(0);\r\n     return;\r\n}\r\n \r\nint main() {\r\n    \r\n    scanf(\"%d%d%d\" , &N , &M , &K);\r\n    for (int i = 0 , u , v; i < M; ++i) {\r\n         scanf(\"%d%d\" , &u , &v); --u , --v;\r\n         g[u][v] = g[v][u] = 1;\r\n    }\r\n    bits[0] = 0;\r\n    for (int s = 1; s < (1 << N); ++s)\r\n        bits[s] = bits[s >> 1] + (s & 1);\r\n    for (int s = 0; s < (1 << N); ++s) {\r\n        if (bits[s] != N / 2) continue;\r\n        vector < int > a , b; a.clear() , b.clear();\r\n        for (int i = 0; i < N; ++i)\r\n            if (s >> i & 1) a.emplace_back(i);\r\n            else b.emplace_back(i);\r\n        do {\r\n           bool ok = true;\r\n           for (int i = 0; i < N / 2; ++i)\r\n               if (a[i] > b[i]) {\r\n                  ok = false; \r\n                  break;\r\n               }\r\n           if (!ok) continue;\r\n           for (int i = 0; i < N / 2; ++i)\r\n                pr[i] = mp(a[i] , b[i]);\r\n           check();\r\n        } while (next_permutation(b.begin() , b.end()));\r\n    }\r\n    LL ans = 0;\r\n    for (int i = 1; i <= K; ++i) {\r\n        LL val = 1;\r\n        for (int j = K; j >= K - i + 1; --j) val = 1ll * val * j;\r\n        ans += val * (LL) s[i].size();\r\n    }\r\n    printf(\"%lld\\n\" , ans);\r\n    return 0;\r\n}"
}