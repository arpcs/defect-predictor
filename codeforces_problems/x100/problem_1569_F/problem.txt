{
    "contestId": 1569,
    "index": "F",
    "name": "Palindromic Hamiltonian Path",
    "type": "PROGRAMMING",
    "rating": 3000,
    "tags": [
        "brute force",
        "dfs and similar",
        "dp",
        "graphs",
        "hashing"
    ],
    "desc": {
        "title": "F. Palindromic Hamiltonian Path",
        "statement": "<p>You are given a simple undirected graph with $$$n$$$ vertices, $$$n$$$ is even. You are going to write a letter on each vertex. Each letter should be one of the first $$$k$$$ letters of the Latin alphabet.</p><p>A path in the graph is called Hamiltonian if it visits each vertex exactly once. A string is called palindromic if it reads the same from left to right and from right to left. A path in the graph is called palindromic if the letters on the vertices in it spell a palindromic string without changing the order.</p><p>A string of length $$$n$$$ is good if: </p><ul> <li> each letter is one of the first $$$k$$$ lowercase Latin letters; </li><li> if you write the $$$i$$$-th letter of the string on the $$$i$$$-th vertex of the graph, there will exist a palindromic Hamiltonian path in the graph. </li></ul><p>Note that the path doesn't necesserily go through the vertices in order $$$1, 2, \\dots, n$$$.</p><p>Count the number of good strings.</p>",
        "inputSpecification": "<p>The first line contains three integers $$$n$$$, $$$m$$$ and $$$k$$$ ($$$2 \\le n \\le 12$$$; $$$n$$$ is even; $$$0 \\le m \\le \\frac{n \\cdot (n-1)}{2}$$$; $$$1 \\le k \\le 12$$$)\u00a0\u2014 the number of vertices in the graph, the number of edges in the graph and the number of first letters of the Latin alphabet that can be used.</p><p>Each of the next $$$m$$$ lines contains two integers $$$v$$$ and $$$u$$$ ($$$1 \\le v, u \\le n$$$; $$$v \\neq u$$$)\u00a0\u2014 the edges of the graph. The graph doesn't contain multiple edges and self-loops.</p>",
        "outputSpecification": "<p>Print a single integer\u00a0\u2014 number of good strings.</p>",
        "samples": [
            {
                "input": "\n4 3 3\n1 2\n2 3\n3 4\n",
                "output": "\n9\n"
            },
            {
                "input": "\n4 6 3\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n",
                "output": "\n21\n"
            },
            {
                "input": "\n12 19 12\n1 3\n2 6\n3 6\n3 7\n4 8\n8 5\n8 7\n9 4\n5 9\n10 1\n10 4\n10 6\n9 10\n11 1\n5 11\n7 11\n12 2\n12 5\n12 11\n",
                "output": "\n456165084\n"
            }
        ],
        "note": null
    }
}