{
    "id": 232462556,
    "contestId": 1870,
    "creationTimeSeconds": 1699770105,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1870,
        "index": "D",
        "name": "Prefix Purchase",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1870,
        "members": [
            {
                "handle": "joelgun14"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695047700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// header file\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n// pragma\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n// macros\r\n#define endl \"\\n\"\r\n#define ll long long\r\n#define mp make_pair\r\n#define ins insert\r\n#define lb lower_bound\r\n#define pb push_back\r\n#define ub upper_bound\r\n#define lll __int128\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set;\r\nint main() {\r\n    ios_base::sync_with_stdio(0); cin.tie(NULL);\r\n    int t;\r\n    cin >> t;\r\n    while(t--) {\r\n        int n;\r\n        cin >> n;\r\n        int c[n + 1];\r\n        for(int i = 1; i <= n; ++i)\r\n            cin >> c[i];\r\n        int k;\r\n        cin >> k;\r\n        // find largest of first, largest of second, largest of third, ...\r\n        // find \"upgrade\" to the right that could work\r\n        // order: by most that can be bought, than try swap lower for larger if can not buy\r\n        // find increasing subsequence from 0 kind of like stack algo\r\n        vector<int> v;\r\n        for(int i = 1; i <= n; ++i) {\r\n            while(v.size() && c[v.back()] >= c[i]) \r\n                v.pop_back();\r\n            v.pb(i);\r\n        }\r\n        // coba upgrade ke yang lebih besar kalo bisa\r\n        vector<pair<int, int>> res = {mp(k / c[v[0]], v[0])};\r\n        k %= c[v[0]];\r\n        //cout << \"INIT \" << res[0].fi << \" \" << res[0].se << endl;\r\n        for(int i = 1; i < v.size(); ++i) {\r\n            int cur_cnt = 0;\r\n            int can = k / (c[v[i]] - c[res.back().se]);\r\n            //cout << can << endl;\r\n            if(can >= res.back().fi) {\r\n                k -= (c[v[i]] - c[res.back().se]) * res.back().fi;\r\n                cur_cnt += res.back().fi;\r\n                res.pop_back();\r\n            }\r\n            else {\r\n                int add = k / (c[v[i]] - c[res.back().se]);\r\n                cur_cnt += add;\r\n                k -= add * (c[v[i]] - c[res.back().se]);\r\n                res.back().fi -= add;\r\n                //cout << \"TEST \" << cur_cnt << \" \" << res.back().se << endl;\r\n            }\r\n            if(cur_cnt)\r\n                res.pb(mp(cur_cnt, v[i]));\r\n        }\r\n        int diff[n + 2];\r\n        memset(diff, 0, sizeof(diff));\r\n        for(auto i : res) {\r\n            diff[1] += i.fi;\r\n            diff[i.se + 1] -= i.fi;\r\n        }\r\n        int cur = 0;\r\n        for(int i = 1; i <= n; ++i) {\r\n            cur += diff[i];\r\n            cout << cur << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}"
}