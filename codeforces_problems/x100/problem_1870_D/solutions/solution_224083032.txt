{
    "id": 224083032,
    "contestId": 1870,
    "creationTimeSeconds": 1695148833,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1870,
        "index": "D",
        "name": "Prefix Purchase",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1870,
        "members": [
            {
                "handle": "mh__mh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695047700
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 2969600,
    "source": "# \ufdfd\r\nfrom itertools import accumulate\r\nimport sys\r\ninput = lambda: sys.stdin.readline().strip()\r\ndef inlst():return [int(i) for i in input().split()]\r\ndef f(k,num,x,y,mid):return  x*mid+(num-mid)*y<=k and num-mid>=0\r\ndef get(num,k,x,y):\r\n    if x==y:return num\r\n    l=0;r=num\r\n    ans=l\r\n    while l<r:\r\n        mid=(l+r)//2\r\n        if f(k,num,x,y,mid):\r\n            if x>y:l=mid+1\r\n            else:r=mid\r\n            ans=mid\r\n        else:\r\n            if x>y:r=mid\r\n            else:l=mid+1\r\n    l=ans\r\n    if f(k,num,x,y,l+4):return l+4\r\n    if f(k,num,x,y,l+3):return l+3\r\n    if f(k,num,x,y,l+2):return l+2\r\n    if f(k,num,x,y,l+1):return l+1\r\n    if f(k,num,x,y,l):return l\r\n    if f(k,num,x,y,l-1):return l-1\r\n    if f(k,num,x,y,l-2):return l-2\r\n\r\n# def get2(num,k,x,y):\r\n#     l=0;r=num\r\n#     ans=0\r\n#     while l<r:\r\n#         mid=(l+r)//2\r\n#         if f(k,num,x,y,mid):\r\n#              l=mid+1\r\n#              ans=l\r\n#         else:\r\n#            r=mid-1\r\n#     if f(k,num,x,y,ans+1):return ans+1\r\n#     return ans\r\n# def get(num,k,x,y):\r\n#     if x==y:return num\r\n#     a=1+(( k-num*y)//(x-y))\r\n    # assert a*x+(num-a)*y<=k\r\n    # return a\r\n    # a=aa+1\r\n    # if a*x+(num-a)*y<=k and (num-a)>=0:return a\r\n    # a-=1\r\n    # if (a*x+(num-a)*y<=k):return a\r\n    # a-=1\r\n    # if (a*x+(num-a)*y<=k):return a\r\n    # a=aa-1\r\n    # if a*x+(num*y)<=k:return a\r\n    # raise ValueError\r\ndef solve():\r\n    n=int(input())\r\n    lst=inlst()\r\n    kk=k=int(input())\r\n    num=k//min(lst)\r\n    rq=RangeQuery(lst)\r\n    ans=[0]*n\r\n    for i in range(n-1,0,-1):\r\n     \r\n        a=get(num,k,lst[i],rq.query(0,i))\r\n        ans[i]=a\r\n        k-=a*lst[i]\r\n        num-=a\r\n    ans[0]=k//lst[0]\r\n\r\n\r\n    # assert kk//min(lst)==sum(ans)\r\n    print(*list(accumulate(ans[::-1]))[::-1])\r\n    # print(*ans)\r\nclass RangeQuery:\r\n    def __init__(self, data, func=min):\r\n        self.func = func\r\n        self._data = _data = [list(data)]\r\n        i, n = 1, len(_data[0])\r\n        while 2 * i <= n:\r\n            prev = _data[-1]\r\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\r\n            i <<= 1\r\n\r\n    def query(self, start, stop):\r\n        \"\"\"func of data[start, stop)\"\"\"\r\n        depth = (stop - start).bit_length() - 1\r\n        return self.func(self._data[depth][start], self._data[depth][stop - (1 << depth)])\r\n\r\n    def __getitem__(self, idx):\r\n        return self._data[0][idx]\r\n\r\nif __name__ == \"__main__\":\r\n    for i in range(int(input())):\r\n        solve()\r\n"
}