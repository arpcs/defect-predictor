{
    "id": 225436117,
    "contestId": 1870,
    "creationTimeSeconds": 1695763650,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1870,
        "index": "D",
        "name": "Prefix Purchase",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1870,
        "members": [
            {
                "handle": "donnellyfj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695047700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\n// Prefix Purchase\r\n \r\nvoid solve(int n, int k, vector<int> arr) {\r\n    // Intuition: Sort prices such that the minimum is first. If two prices are equal, use the one with the\r\n    //            greatest index in the original array. Then, only include values after this index in the original\r\n    //            array, still using the greaest index as a tiebreaker. Buy as many as you can with the smallest price.\r\n    //            Then, if you have any money left, see if you can replace any previous purchases with the next price.\r\n    //            Continue until you can't make any more purchases.\r\n    // Create new sorted array and keep track of indices\r\n    vector<int> c;\r\n    vector<int> cIdxs;\r\n    int currMin = INT_MAX;\r\n    int minIdx = -1;\r\n    int start = 0;\r\n\r\n    while (start < n) {\r\n        for (int i = start; i < n; i++) {\r\n            if (arr[i] <= currMin) {\r\n                currMin = arr[i];\r\n                minIdx = i;\r\n            }\r\n        }\r\n        // Update price and index arrays\r\n        c.push_back(currMin);\r\n        cIdxs.push_back(minIdx);\r\n        currMin = INT_MAX;\r\n        start = minIdx + 1;\r\n    }\r\n\r\n    // Initialize output as n 0s\r\n    vector<int> out(n, 0);\r\n\r\n    // Max out purchases with lowest price\r\n    for (int i = 0; i <= cIdxs[0]; i++) {\r\n        out[i] = k / c[0];\r\n    }\r\n    // Update price\r\n    k %= c[0];\r\n\r\n    int idx = 1;\r\n    for (int i = 1; i < c.size(); i++) {\r\n        // See if you can swap out any previous purchases\r\n        if (k >= c[i] - c[i - 1]) {\r\n            for (int j = cIdxs[i - 1] + 1; j <= cIdxs[i]; j++) {\r\n                out[j] = min(out[j - 1], k / (c[i] - c[i - 1]));\r\n            }\r\n            k %= c[i] - c[i - 1];\r\n        }\r\n    }\r\n\r\n    for (int i : out) {\r\n        cout << i << \" \";\r\n    }\r\n    cout << '\\n';\r\n}\r\n \r\nint main() {\r\n    int t;\r\n    int n;\r\n    int k;\r\n    vector<int> arr;\r\n \r\n    cin >> t;\r\n    while (t--) {\r\n        cin >> n;\r\n        arr.resize(n);\r\n        for (int i = 0; i < n; i++) {\r\n            cin >> arr[i];\r\n        }\r\n        cin >> k;\r\n        solve(n, k, arr);\r\n    }\r\n \r\n    return 0;\r\n}\r\n"
}