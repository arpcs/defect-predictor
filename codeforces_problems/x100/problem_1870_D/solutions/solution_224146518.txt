{
    "id": 224146518,
    "contestId": 1870,
    "creationTimeSeconds": 1695204435,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1870,
        "index": "D",
        "name": "Prefix Purchase",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1870,
        "members": [
            {
                "handle": "nprabhat2002"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695047700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 4198400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define inf 100000000005\r\n// bool is_prime[1001];\r\n// #define mod 998244353\r\n// void pre(){\r\n//     memset(is_prime, true, sizeof(is_prime));\r\n//     is_prime[0]=is_prime[1]=0;\r\n//     for(int i=2; i*i<=1000; i++){\r\n//         if(is_prime[i]){\r\n//             for(int j=i*i; j<=1000; j+=i){\r\n//                 is_prime[j]=false;\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n// int fact[1000001];\r\n// int ifact[1000001];\r\n// int bin_expo(int x, int n){\r\n//     if(n==1) return x%mod;\r\n//     if(n%2) return (x*bin_expo(x*x, n/2))%mod;\r\n//     else return bin_expo(x*x, n/2)%mod;\r\n// }\r\n// void factcalc(){\r\n//     fact[0]=fact[1]=ifact[0]=ifact[1]=1;\r\n//     for(int i=2; i<=1000000; i++){\r\n//         fact[i]=fact[i-1]*i;\r\n//         ifact[i]=bin_expo(fact[i], mod-2);\r\n//         fact[i]%=mod;\r\n//     }\r\n// }\r\n\r\n// int par[MAX], sz[MAX];\r\n// void make_set(int n){\r\n//     for(int i=0; i<=n; i++){\r\n//         par[i]=i;\r\n//         sz[i]=1;\r\n//     }\r\n// }\r\n// int find_set(int x){\r\n//     if(par[x]==x) return x;\r\n//     par[x]=find_set(par[x]);\r\n//     return par[x];\r\n// }\r\n// void union_set(int a, int b){\r\n//     a=find_set(a);\r\n//     b=find_set(b);\r\n//     if(a==b) return ;\r\n//     if(sz[a]>=sz[b]){\r\n//         par[b]=a;\r\n//         sz[a]+=sz[b];\r\n//     }\r\n//     else{\r\n//         par[a]=b;\r\n//         sz[b]+=sz[a];   \r\n//     }\r\n//     return ;\r\n// }\r\n\r\n\r\n\r\nvoid solve(){\r\n  int n;\r\n  cin>>n;\r\n  vector<int> arr(n);\r\n  for(int i=0; i<n; i++) cin>>arr[i];\r\n  int k;\r\n  cin>>k;\r\n  vector<int> ans(n+1, 0);\r\n  deque<int> dq;\r\n  for(int i=0; i<n; i++){\r\n    if(dq.empty()){\r\n      dq.push_back(i);\r\n      continue;\r\n    }\r\n    while(dq.size() && arr[dq.back()]>= arr[i]){\r\n      dq.pop_back();\r\n    }\r\n    dq.push_back(i);\r\n  }\r\n  int ind=dq.front();\r\n  dq.pop_front();\r\n  while(dq.size() && k>=arr[ind]){\r\n    int val1=arr[ind], val2=arr[dq.front()];\r\n    if(k/val1 == k/val2){\r\n      ind=dq.front();\r\n      dq.pop_front();\r\n      continue;\r\n    }\r\n    int rem=k%val1, q=k/val1;\r\n    int diff=val2-val1;\r\n    diff=rem/diff;\r\n    q-=diff;\r\n    k-=val1*q;\r\n    ans[0]+=q;\r\n    ans[ind+1]-=q;\r\n    ind=dq.front();\r\n    dq.pop_front();\r\n  }\r\n  ans[0]+=k/arr[ind];\r\n  ans[n]-=k/arr[ind];\r\n\r\n  for(int i=1; i<=n; i++) ans[i]+=ans[i-1];\r\n  ans.pop_back();\r\n  for(int i=0; i<n; i++) cout<<ans[i]<<\" \";\r\n  cout<<\"\\n\";\r\n}\r\n\r\nint32_t main(){\r\n  ios_base::sync_with_stdio(NULL);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n  // pre();\r\n  // for(int i=0; i<100; i++) if(is_prime[i]) cout<<i<<\" \";\r\n  int tc=1;\r\n  cin>>tc;\r\n  for(int t=1; t<=tc; t++){\r\n    solve();\r\n  }\r\n  return 0;\r\n}"
}