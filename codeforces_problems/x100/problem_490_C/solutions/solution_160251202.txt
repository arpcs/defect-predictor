{
    "id": 160251202,
    "contestId": 490,
    "creationTimeSeconds": 1655021104,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 490,
        "index": "C",
        "name": "Hacking Cypher",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "math",
            "number theory",
            "strings"
        ]
    },
    "author": {
        "contestId": 490,
        "members": [
            {
                "handle": "LeoMinor"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1416733800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 9625600,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n#define fo(i,a,b) for(ll i=a;i<=b;i++)\r\n#define r_fo(i,b,a) for(ll i=b;i>=a;i--)\r\n#define pb push_back\r\n#define all(x) (x).begin(),(x).end()\r\ntypedef long double ld ;\r\nll mod = 1e9 + 7;\r\nll gcd(ll a, ll b){if (b == 0)return a;return gcd(b, a % b);}\r\nll lcm(ll a, ll b){return (a/gcd(a,b)*b);}\r\nlong long b_pow(long long a, long long b) {\r\n    if (b == 0)\r\n        return 1;\r\n    long long res = b_pow(a, b / 2);\r\n    if (b % 2)\r\n        return res * res * a;\r\n    else\r\n        return res * res;\r\n}\r\nll powermod(ll x, ll y, ll p){ll res = 1;x = x % p;if (x == 0) return 0;while (y > 0){if (y & 1)res = (res*x) % p;y = y>>1;x = (x*x) % p;}return res%p;}\r\nset<ll> trial_division1(ll n){\r\n    set<ll> factorization;\r\n    for(ll d=2;d*d<=n;d++){\r\n        while(n%d==0){\r\n            factorization.insert(d);\r\n            n/=d;\r\n        }\r\n    }\r\n    if(n>1) factorization.insert(n);\r\n    return factorization;\r\n}\r\nll mod_inv(ll n, ll p){\r\n    return powermod(n,p-2,p);\r\n}\r\nll fact(ll n,ll p)\r\n{\r\n    ll ans = 1;\r\n    for(int i=1;i<=n;i++){\r\n        ans = (ans * i) % p;\r\n    }\r\n    return (ans%p);\r\n}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return ((a * b) % m);}\r\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}\r\nset<ll> factorise(ll n)\r\n{\r\n\tset<ll> factors;\r\n\tfor (ll i = 2; i * i <= n; i++)\r\n\t{\r\n\t\tif (n % i == 0)\r\n\t\t{\r\n\t\t\tfactors.insert(i);\r\n\t\t\twhile (n % i == 0)\r\n\t\t\t{\r\n\t\t\t\tn /= i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (n > 1)\r\n\t{\r\n\t\tfactors.insert(n);\r\n\t}\r\n\treturn factors;\r\n}\r\nvoid solve_tc()\r\n{\r\n    string s ;\r\n    cin >> s;\r\n    int a , b;\r\n    cin >> a >> b;\r\n    int n = s.length();\r\n    vector<int> pref(n);\r\n    vector<int> suff(n);\r\n    pref[0] = (s[0] - 48) % a;\r\n    fo(i,1,n-1){\r\n        pref[i] = (((pref[i-1]%a)*(10%a))%a + (s[i]-48)%a)%a; \r\n    }\r\n    suff[n-1] = (s[n-1] - 48) % b;\r\n    for(int i=n-2 ; i>=0 ; i--){\r\n        suff[i] = ((((s[i]-48)%b)*(powermod(10,n-i-1,b)%b)%b  + (suff[i+1]%b)))%b;\r\n    }\r\n    bool check = false;\r\n    int ind;\r\n    fo(i,0,n-2){\r\n        if(pref[i]==suff[i+1] && pref[i]==0 && s[i+1]!='0'){\r\n            check = true;\r\n            ind = i;\r\n            break;\r\n        }\r\n    }\r\n    if(check){\r\n        cout <<\"YES\\n\";\r\n        fo(i,0,ind) cout << s[i];\r\n        cout<<'\\n';\r\n        fo(i,ind+1,n-1) cout << s[i];\r\n    }\r\n    else{\r\n        cout <<\"NO\\n\";\r\n    }\r\n}        \r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int tests = 1 ;\r\n    //cin >> tests;\r\n    while (tests--)\r\n    {\r\n        solve_tc();\r\n    }\r\n}"
}