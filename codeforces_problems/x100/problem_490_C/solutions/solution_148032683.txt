{
    "id": 148032683,
    "contestId": 490,
    "creationTimeSeconds": 1646140368,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 490,
        "index": "C",
        "name": "Hacking Cypher",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "math",
            "number theory",
            "strings"
        ]
    },
    "author": {
        "contestId": 490,
        "members": [
            {
                "handle": "laxmi_kanth"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1416733800
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 3379200,
    "source": "def nCr(n, r):\r\n    return (fact(n) / (fact(r)\r\n                       * fact(n - r)))\r\n\r\n\r\n# Returns factorial of n\r\ndef fact(n):\r\n    res = 1\r\n\r\n    for i in range(2, n + 1):\r\n        res = res * i\r\n\r\n    return res\r\n\r\nmod =10**4\r\n\r\n#ncm+ncm-1+ncm-2\r\n\r\n\r\nans=0\r\n\r\n\r\ndef nextPowerOf2(n):\r\n    count = 0\r\n\r\n    # First n in the below\r\n    # condition is for the\r\n    # case where n is 0\r\n    if (n and not (n & (n - 1))):\r\n        return n\r\n\r\n    while (n != 0):\r\n        n >>= 1\r\n        count += 1\r\n\r\n    return 1 << count\r\nfrom collections import defaultdict\r\nimport math\r\n\r\n\r\ndef primeFactors(n):\r\n    # Print the number of two's that divide n\r\n    res=set()\r\n    while n % 2 == 0:\r\n        res.add(2)\r\n        n = n // 2\r\n\r\n    # n must be odd at this point\r\n    # so a skip of 2 ( i = i + 2) can be used\r\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\r\n\r\n        # while i divides n , print i and divide n\r\n        while n % i == 0:\r\n            res.add(i)\r\n            n = n // i\r\n\r\n    # Condition if n is a prime\r\n    # number greater than 2\r\n    if n > 2:\r\n        res.add(n)\r\n    return res\r\n\r\n\r\ndef upper_bound(arr, target):\r\n    start = 0\r\n    end = len(arr) - 1\r\n\r\n    ans = -1\r\n    while (start <= end):\r\n        mid = (start + end) // 2\r\n\r\n        # Move to right side if target is\r\n        # greater.\r\n        if (arr[mid] <= target):\r\n            start = mid + 1\r\n\r\n        # Move left side.\r\n        else:\r\n            ans = mid\r\n            end = mid - 1\r\n\r\n    return ans\r\n\r\n\r\n\r\ndef get_dis(s1,s2):\r\n    s=\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"\r\n    a1=s.index(s1)\r\n    a2=s.rfind(s1)\r\n    b1 = s.index(s2)\r\n    b2 = s.rfind(s2)\r\n    # print(a1,a2,b1,b2)\r\n    return min(abs(a1-b1),abs(a1-b2),abs(a2-b1),abs(a2-b2))\r\n\r\nfrom collections import defaultdict\r\n\r\ndef get_muln(num,l):\r\n    for i in range(len(l)):\r\n        if(l[i]>num):\r\n            return l[i-1]\r\ndef second(s,j,n,lis2,ln):\r\n    # print(s[j:])\r\n    temp = s[j]\r\n    for i in range(j+1,ln):\r\n        if(int(temp)<n):\r\n            temp+=s[i]\r\n        else:\r\n            mul_n=get_muln(int(temp),lis2)\r\n            diff=int(temp)-mul_n\r\n            # print(temp,mul_n,diff)\r\n            # print(mul_n,temp)\r\n            # if(diff==0):\r\n            #     print(s[:i+1])\r\n            #     if(second(s[i+1:],m,lis2)):\r\n            #         print(\"YES\")\r\n            #         print(s[:i])\r\n            #         print(s[i:])\r\n            #         okay=False\r\n            #         break\r\n            if(diff!='0'):\r\n                temp=str(diff)+s[i]\r\n            else:\r\n                temp=s[i]\r\n\r\n    mul_n = get_muln(int(temp), lis2)\r\n    diff = int(temp) - mul_n\r\n    return diff==0\r\n\r\nfor _ in range(1):\r\n    #k=int(input())\r\n    # n=int(input())\r\n    # n,m=list(map(int,input().split()))\r\n    s=input()\r\n    n, m = list(map(int, input().split()))\r\n\r\n    lis1=[0]\r\n    lis2=[0]\r\n    for i in range(1,11):\r\n        lis1.append(i*n)\r\n        lis2.append(i*m)\r\n\r\n    temp=s[0]\r\n    okay=1\r\n    ln=len(s)\r\n    res1=[]\r\n    i=1\r\n    while(i<ln):\r\n        if(int(temp)<n):\r\n            temp+=s[i]\r\n        else:\r\n            mul_n=get_muln(int(temp),lis1)\r\n            diff=int(temp)-mul_n\r\n            # print(mul_n,temp)\r\n            # print(diff)\r\n            if(diff==0):\r\n                j=i\r\n                while(j<ln and s[j]=='0'):\r\n                    j+=1\r\n                i=j-1\r\n                # print(s[:j])\r\n                if(j!=ln+1 and second(s,j,m,lis2,ln)):\r\n                    print(\"YES\")\r\n                    print(s[:j])\r\n                    print(s[j:])\r\n                    okay=0\r\n                    break\r\n            if(diff!='0'):\r\n                temp=str(diff)+s[i]\r\n            else:\r\n                temp=s[i]\r\n            # print(temp)\r\n        i+=1\r\n    if(okay==1):\r\n        print(\"NO\")\r\n\r\n"
}