{
    "id": 226769857,
    "contestId": 490,
    "creationTimeSeconds": 1696523799,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 490,
        "index": "C",
        "name": "Hacking Cypher",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "math",
            "number theory",
            "strings"
        ]
    },
    "author": {
        "contestId": 490,
        "members": [
            {
                "handle": "bkifhr7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1416733800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 873,
    "memoryConsumedBytes": 99328000,
    "source": "//#pragma GCC optimize(\"O3,unroll-loops\")\n//#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\n#include <bits/stdc++.h>\n#define endl '\\n'\n#define MOD 1000000007\n#define USM ios_base::sync_with_stdio(false),cin.tie(NULL)\n#define forn(i,i0,n) for(ll i = i0; i < n; i++)\n#define double long double\n\ntypedef long long ll;\nusing namespace std;\n\ntemplate<class T, T m_(T, T)> struct SegmentTree{\n  int n; vector<T> ST;\n  SegmentTree(){}\n  SegmentTree(vector<T> &a){\n    n = a.size(); ST.resize(n << 1);\n    for (int i=n;i<(n<<1);i++)ST[i]=a[i-n];\n    for (int i=n-1;i>0;i--)ST[i]=m_(ST[i<<1],ST[i<<1|1]);\n  }\n  void update(int pos, T val){ // replace with val\n    ST[pos += n] = val;\n    for (pos >>= 1; pos > 0; pos >>= 1)\n      ST[pos] = m_(ST[pos<<1], ST[pos<<1|1]);\n  }\n  T query(int l, int r){ // [l, r]\n    T ansL, ansR; bool hasL = 0, hasR = 0;\n    for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {\n      if (l & 1) \n        ansL=(hasL?m_(ansL,ST[l++]):ST[l++]),hasL=1;\n      if (r & 1) \n        ansR=(hasR?m_(ST[--r],ansR):ST[--r]),hasR=1;\n    }\n    if (!hasL) return ansR; if (!hasR) return ansL;\n    return m_(ansL, ansR);\n  }\n};\n\nll a,b;\npair<ll,ll> mergeA(pair<ll,ll> x,pair<ll,ll> y){\n\tpair<ll,ll> ans;\n\tans.second = (x.second*y.second) % a;\n\tans.first = (x.first*y.second + y.first) % a;\n\tans.first = ((ans.first % a) + a) % a;\n\treturn ans;\n}\npair<ll,ll> mergeB(pair<ll,ll> x,pair<ll,ll> y){\n\tpair<ll,ll> ans;\n\tans.second = (x.second*y.second) % b;\n\tans.first = (x.first*y.second + y.first) % b;\n\tans.first = ((ans.first % b) + b) % b;\n\treturn ans;\n}\n\n\nSegmentTree<pair<ll,ll>,mergeA> A;\nSegmentTree<pair<ll,ll>,mergeB> B;\n\nvoid ps(string &s,ll i,ll j){\n\tforn(x,i,j + 1) cout << s[x]; cout << endl;\n}\n\nint main(){\n    USM;\n\tstring s; cin >> s;\n\tcin >> a >> b;\n\tvector<pair<ll,ll>> numsA,numsB;\n\tfor(char c: s){\n\t\tnumsA.push_back({(c - '0') % a,10});\n\t\tnumsB.push_back({(c - '0') % b,10});\n\t}\n\tA = SegmentTree<pair<ll,ll>,mergeA>(numsA);\n\tB = SegmentTree<pair<ll,ll>,mergeB>(numsB);\n\tforn(i,0,s.size() - 1){\n\t\tif(s[i + 1] == '0') continue;\n\t\tif(A.query(0,i).first == 0 && B.query(i + 1,s.size() - 1).first == 0){\n\t\t\tcout << \"YES\" << endl;\n\t\t\tps(s,0,i);\n\t\t\tps(s,i + 1,s.size() - 1);\n\t\t\treturn 0;\n\t\t}\n\t\t\n\t}\n\tcout << \"NO\" << endl;\n\n    \n    return 0;   \n}\n\t\t        \t\t\t\t\t\t  \t\t \t   \t\t \t\t"
}