{
    "id": 179514923,
    "contestId": 490,
    "creationTimeSeconds": 1667727104,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 490,
        "index": "C",
        "name": "Hacking Cypher",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "math",
            "number theory",
            "strings"
        ]
    },
    "author": {
        "contestId": 490,
        "members": [
            {
                "handle": "abhaumik24"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1416733800
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 5836800,
    "source": "import sys, threading\r\nimport math\r\nfrom os import path\r\nfrom collections import defaultdict, Counter, deque\r\nfrom bisect import *\r\nfrom string import ascii_lowercase\r\nfrom functools import cmp_to_key\r\nimport heapq\r\n \r\n \r\ndef readInts():\r\n    x = list(map(int, (sys.stdin.readline().rstrip().split())))\r\n    return x[0] if len(x) == 1 else x\r\n \r\n \r\ndef readList(type=int):\r\n    x = sys.stdin.readline()\r\n    x = list(map(type, x.rstrip('\\n\\r').split()))\r\n    return x\r\n \r\n \r\ndef readStr():\r\n    x = sys.stdin.readline().rstrip('\\r\\n')\r\n    return x\r\n \r\n \r\nwrite = sys.stdout.write\r\nread = sys.stdin.readline\r\n \r\n \r\nMAXN = 1123456\r\n\r\n\r\nclass mydict:\r\n    def __init__(self, func):\r\n        self.random = randint(0, 1 << 32)\r\n        self.default = func\r\n        self.dict = {}\r\n \r\n    def __getitem__(self, key):\r\n        mykey = self.random ^ key\r\n        if mykey not in self.dict:\r\n            self.dict[mykey] = self.default()\r\n        return self.dict[mykey]\r\n \r\n    def get(self, key, default):\r\n        mykey = self.random ^ key\r\n        if mykey not in self.dict:\r\n            return default\r\n        return self.dict[mykey]\r\n \r\n    def __setitem__(self, key, item):\r\n        mykey = self.random ^ key\r\n        self.dict[mykey] = item\r\n \r\n    def getkeys(self):\r\n        return [self.random ^ i for i in self.dict]\r\n \r\n    def __str__(self):\r\n        return f'{[(self.random ^ i, self.dict[i]) for i in self.dict]}'\r\n\r\n \r\ndef lcm(a, b):\r\n    return (a*b)//(math.gcd(a,b))\r\n \r\n \r\ndef mod(n):\r\n    return n%(1000000000 + 7) \r\n\r\n\r\ndef solve(t):\r\n    # print(f'Case #{t}: ', end = '')\r\n    s = readStr()\r\n    a, b = readInts()\r\n    n = len(s)\r\n    for i in range(1,n-1):\r\n        num1 = s[:i]\r\n        num2 = s[i:]\r\n        if num1[0] == '0' or num2[0] == '0':\r\n            continue\r\n\r\n        if int(num1)%a == 0 and int(num2)%b == 0:\r\n            print(\"YES\")\r\n            print(num1)\r\n            print(num2)\r\n            return\r\n\r\n    print(\"NO\")\r\n\r\n\r\ndef main():\r\n    t = 1\r\n    if path.exists(\"F:/Comp Programming/input.txt\"):\r\n        sys.stdin = open(\"F:/Comp Programming/input.txt\", 'r')\r\n        sys.stdout = open(\"F:/Comp Programming/output1.txt\", 'w')\r\n    # sys.setrecursionlimit(10**6) \r\n    # t = readInts()\r\n    for i in range(t):\r\n        solve(i+1)\r\n \r\n \r\nif __name__ == '__main__':\r\n    main()  "
}