{
    "id": 112268670,
    "contestId": 222,
    "creationTimeSeconds": 1617850463,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 222,
        "index": "A",
        "name": "Shooshuns and Sequence ",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1200,
        "tags": [
            "brute force",
            "implementation"
        ]
    },
    "author": {
        "contestId": 222,
        "members": [
            {
                "handle": "thor_tech"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1347291900
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 372,
    "memoryConsumedBytes": 0,
    "source": "\r\n\r\nimport java.io.*;\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n    public static void main(String[] args) throws IOException{\r\n\r\n        FastReader fastReader = new FastReader();\r\n        BufferedWriter output = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\r\n        long n = fastReader.nextLong();\r\n        long k = fastReader.nextLong();\r\n\r\n        long[] array = new long[(int) n];\r\n\r\n        for(long i=0 ; i< array.length ; i++){\r\n\r\n            array[(int) i] = fastReader.nextLong();\r\n\r\n        }\r\n\r\n        long index = k-1;\r\n\r\n        long element = array[(int) index];\r\n\r\n        boolean impossible = false;\r\n\r\n        for(long i= index+1 ; i<array.length ; i++){\r\n\r\n            if(array[(int) i] != element){\r\n\r\n                impossible = true;\r\n\r\n                output.write(\"-1\" + \"\\n\");\r\n\r\n                break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        if(!impossible){\r\n\r\n            output.write((index) + \"\\n\" );\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n        output.flush();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader()\r\n        {\r\n            br = new BufferedReader(\r\n                    new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next()\r\n        {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() { return Integer.parseInt(next()); }\r\n\r\n        long nextLong() { return Long.parseLong(next()); }\r\n\r\n        double nextDouble()\r\n        {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine()\r\n        {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    }\r\n\r\n"
}