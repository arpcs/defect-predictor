{
    "id": 131243240,
    "contestId": 710,
    "creationTimeSeconds": 1633722712,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 710,
        "index": "B",
        "name": "Optimal Point on a Line",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "brute force",
            "sortings"
        ]
    },
    "author": {
        "contestId": 710,
        "members": [
            {
                "handle": "La_Croqueta"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1471875000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 3686400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n\r\n#define ppi pair<int,int>\r\n#define pb push_back\r\n#define pob pop_back\r\n#define pf push_front\r\n#define pof pop_front\r\n\r\nconst double pi=3.1415926536;\r\nconst int mod=1e9+7;\r\nconst int inf=INT_MAX;\r\nconst ll modt=998244353;\r\n//\r\n//ll Pow(ll a, ll b){\r\n//    if(b==0) return (ll)1;\r\n//    ll res=1;\r\n//    while(b){\r\n//        if(b&1) res*=a;\r\n//        a*=a;\r\n//        b>>=1;\r\n//    }\r\n//    return res;\r\n//}\r\n//\r\n//struct hash_pair {\r\n//    template <class T1, class T2>\r\n//    size_t operator()(const pair<T1, T2>& p) const\r\n//    {\r\n//        auto hash1 = hash<T1>{}(p.first);\r\n//        auto hash2 = hash<T2>{}(p.second);\r\n//        return hash1 ^ hash2;\r\n//    }\r\n//};\r\n\r\nstruct Trie{\r\n    Trie* arr[26];\r\n    bool flag=false;\r\n\r\n    bool contains(char ch){\r\n        return (arr[ch-'a']!=NULL);\r\n    }\r\n    Trie* getNext(char ch){\r\n        return (arr[ch-'a']);\r\n    }\r\n    bool hasWord(char ch){\r\n        return arr[ch-'a']->flag;\r\n    }\r\n};\r\n\r\nTrie* root=new Trie();\r\n\r\n\r\n\r\nvoid insertWord(string word){\r\n    Trie* temp=root;\r\n    for(int i=0;i<word.size();i++){\r\n        if(!temp->contains(word[i])){\r\n            Trie* newNode=new Trie();\r\n            temp->arr[word[i]-'a']=newNode;\r\n            temp=newNode;\r\n        }\r\n        else temp=temp->getNext(word[i]);\r\n    }\r\n    temp->flag=true;\r\n}\r\n\r\nbool hasAllPrefixes(string word){\r\n    Trie* temp=root;\r\n    for(int i=0;i<word.size();i++){\r\n        if(temp->hasWord(word[i])) temp=temp->getNext(word[i]);\r\n        else return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    int n;\r\n    cin>>n;\r\n    vector<pair<ll,ll>> v(n);\r\n    for(int i=0;i<n;i++){\r\n        cin>>v[i].first;\r\n        v[i].second=i+1;\r\n    }\r\n    if(n<=2){\r\n        cout<<1;\r\n        return 0;\r\n    }\r\n    sort(v.begin(),v.end());\r\n    ll dist[n]={0};\r\n    for(int i=1;i<n;i++){\r\n        dist[0]+=(v[i].first-v[0].first);\r\n    }\r\n    ll minPos=v[0].second,minDist=dist[0];\r\n    for(int i=1;i<n;i++){\r\n        ll diff=v[i].first-v[i-1].first;\r\n        dist[i]=dist[i-1]+diff*(2*i-n);\r\n        if(minDist>dist[i]){\r\n            minDist=dist[i];\r\n            minPos=v[i].second;\r\n        }\r\n        else if(minDist==dist[i]){\r\n            minPos=min(minPos,v[i].second);\r\n        }\r\n    }\r\n    cout<<minPos;\r\n}\r\n"
}