{
    "id": 78882227,
    "contestId": 710,
    "creationTimeSeconds": 1588502732,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 710,
        "index": "B",
        "name": "Optimal Point on a Line",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "brute force",
            "sortings"
        ]
    },
    "author": {
        "contestId": 710,
        "members": [
            {
                "handle": "s0ber_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1471875000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 204800,
    "source": "    // \" every champion was once a contender who refused to give up \" //\r\n    // eat sleep code repeat :)\r\n    // vectorTango\r\n    // reapedJuggler\r\n                            \r\n    #include \"bits/stdc++.h\"\r\n                                 \r\n    #define FAST_IO ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)\r\n    #define ld long int\r\n    #define all(A) begin(A) , end(A)\r\n    #define rep(i , a , b)  for(lld i = a; i < b ; i++)\r\n    #define rep1(i , a , b) for(lld i = a ; i >= b ; i--)\r\n    #define lld long long int \r\n    #define ulld unsigned long long int\r\n    #define input lld* a = new lld [n] \r\n    #define input1 lld* b = new lld [n] \r\n    #define vec vector < lld >\r\n    #define pb push_back          \r\n    #define ss second\r\n    #define ff first\r\n    #define inf 999999999999999999\r\n    #define fin -999999999999999999\r\n    #define mod 1000000007\r\n    #define umap unordered_map\r\n    #define mpp make_pair\r\n    #define finish(x) cout << v << \" \";\r\n    #define tolower(s)   std::transform(s.begin(), s.end(), s.begin(),[](unsigned char c){ return std::tolower(c); });\r\n                                                      \r\n    using namespace std;\r\n                             \r\n    void start()\r\n    {\r\n      #ifndef ONLINE_JUDGE \r\n      freopen(\"input.txt\" , \"r\" , stdin) ;\r\n      freopen(\"output.txt\" , \"w\" , stdout) ;\r\n      #endif\r\n    } \r\n\r\n  //   vec g[200007];\r\n  //   vec v;\r\n  //   map<lld , bool> vis ; lld siz = 0 , ans = 1 ;\r\n\r\n  //    void dfs(lld x , lld dest){\r\n  \r\n  //    vis[x] = 1;\r\n\r\n  //    for(auto i : g[x]){\r\n  //     if(!vis[i]){\r\n  //       dfs(i);\r\n  //     }\r\n  //    }\r\n\r\n  //    return;\r\n  //   }\r\n\r\n  // lld pow1(ulld  a , ulld y){\r\n  //   // a %= mod;\r\n  //   ulld  res = 1;\r\n\r\n  //   while(y > 0){\r\n\r\n  //     if(y & 1)\r\n  //       res = (res*a)%mod;\r\n\r\n  //     y = y >> 1;\r\n  //     a = (a*a)%mod;\r\n  //   }\r\n  //   return res;\r\n  // }\r\n\r\n// bool sortbysec(const pair<lld ,lld > &a, const pair<lld ,lld > &b) { \r\n//   return (a.ss < b.ss); \r\n// } \r\n    \r\nvoid sober(){\r\nlld x = 0 , a = 0 , b = 0 , y = 0 , sum = 0 , k = 0 , m = 0;\r\nint n;\r\nscanf(\"%d\" , n);\r\nint v[50001] = {0};\r\nrep(i , 0 , n)\r\n  scanf(\"%lld\" , v + i);\r\n// lld sum = 0;\r\n// sort(all(v));\r\n  int c = (n - 1) / 2;\r\n  nth_element(v , v + x , v + n);\r\n  printf(\"%d\" , v[c]);\r\nreturn;\r\n}\r\n\r\nsigned main(){  \r\n  start();  \r\n  FAST_IO;\r\n  lld t = 1; \r\n  // cin >> t;\r\n  while(t--){\r\n     sober();\r\n  }\r\n}      \r\n\r\n//  c0ded by :\r\n// - - - - - - - - - - - - - - - - - - - - - - s 0 b e r and s i m r a n\r\n",
    "suggested_categories": [
        "algorithm",
        "data structures",
        "c++",
        "competitive programming",
        "code optimization",
        "bit manipulation",
        "recursion",
        "dynamic programming",
        "mathematics",
        "sorting",
        "i/o handling",
        "debugging",
        "error handling",
        "code comments",
        "code formatting",
        "standard template library",
        "code efficiency",
        "preprocessor directives",
        "variable naming",
        "code modularity"
    ]
}