{
    "id": 235768661,
    "contestId": 710,
    "creationTimeSeconds": 1701720684,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 710,
        "index": "B",
        "name": "Optimal Point on a Line",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "brute force",
            "sortings"
        ]
    },
    "author": {
        "contestId": 710,
        "members": [
            {
                "handle": "0x81"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1471875000
    },
    "programmingLanguage": "Ruby 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 982,
    "memoryConsumedBytes": 47923200,
    "source": "def ga = gets.split.map!(&:to_i)\ndef gi = gets.to_i\ndef giga = [gi, ga]\ndef gigs = [gi, gs]\ndef gs = gets.strip\ndef gss = gs.split\ndef o(x) = puts(x)\ndef pa(a, d = ' ') = puts(a * d)\ndef pan(a) = pa(a, \"\\n\")\ndef yn(p) = p ? 'YES' : 'NO'\ndef ync(p) = p ? 'Yes' : 'No'\ndef ynd(p) = p ? 'yes' : 'no'\ndef hz(d = 0) = Hash.new(d)\ndef rqr(*a) = a.each { require _1 }\nclass Set def z = size end\nclass Array\n    def r = reverse\n    def r! = reverse!\n    def f = first\n    def l = last\n    def sh = shift\n    def j(...) = join(...)\n    def pc = pack('c*')\n    def psum!(s = 0) = map! { s += _1 }\n    def lbound(x) = bsearch { _1 >= x }\n    def lbound_index(x) = bsearch_index { _1 >= x }\n    def hoare!(...) = shuffle!.sort!(...)\n    def hoare_by!(...) = shuffle!.sort_by!(...)\n    def z = size\nend\nmodule Enumerable\n    def e(...) = each(...)\n    def ei(...) = each_index(...)\n    def re(...) = reverse_each(...)\n    def ec(...) = each_cons(...)\n    def es(...) = each_slice(...)\n    def wo(...) = with_object(...)\n    def wi(...) = with_index(...)\n    def ewi(...) = each_with_index(...)\n    def ewo(...) = each_with_object(...)\n    def fold(...) = reduce(...)\nend\nclass String\n    def i(...) = to_i(...)\n    def f = to_f\n    def e(...) = each_char(...)\n    def eb(...) = each_byte(...)\n    def b = bytes\n    def r = reverse\n    def z = size\nend\nclass Numeric\n    def f = to_f\n    def i = to_i\n    def s(...) = to_s(...)\n    def sqrt = Math.sqrt(self)\n    def isqrt = Integer.sqrt(self)\nend\nclass Integer\n    def p = pred\n    def n = succ\n    def t(...) = times(...)\n    def popcount = loop.reduce((raise if (x = self) < 0; 0)) \\\n        { | r | break r if x < 1; r += x & 1; x >>= 1; r }\n    def ctz = loop.reduce((raise if (x = self) <= 0; 0)) \\\n        { | r | break r if x[0] == 1; x >>= 1; r.n }\nend\nclass Hash\n    def ek(...) = each_key(...)\n    def ev(...) = each_value(...)\n    def kmin = ek.min\n    def kmax = ek.max\n    def vmin = ev.min\n    def vmax = ev.max\n    def d(...) = delete(...)\n    def z = size\nend\nclass MSet < Hash\n    def <<(x) = (self[x] = (self[x] || 0).n; self)\n    def d(x) = (self.delete x if (self[x] && self[x] -= 1) == 0)\n    def each(...) = ek(...)\n    def ===(x) = has_key?(x)\nend\nclass PQ\n    def initialize array = [], heapify = true, &is_unordered\n        raise ArgumentError.new 'PQ init' unless\n            array.class == Array &&\n            (heapify == true || heapify == false) &&\n            block_given?\n        @a, @u = array, is_unordered\n        return unless heapify\n        i = @a.size / 2\n        sink i while (i -= 1) >= 0\n    end\n    def size = @a.size\n    def empty? = @a.empty?\n    def top = @a.first\n    def push_pop(x) = [email\u00a0protected]? && @u.(x, @a.first) ? pop_push(x) : x\n    def pop_push x\n        t, @a[0], = @a.first, x\n        sink 0\n        t\n    end\n    def << x\n        i = @a.size\n        @a << x\n        while i > 0\n            p = (i - 1) / 2\n            break unless @u.call @a[p], @a[i]\n            @a[p], @a[i] = @a[i], @a[p]\n            i = p\n        end\n        self\n    end\n    def pop\n        return @a.pop if @a.size < 2\n        t, @a[0] = @a.first, @a.pop\n        sink 0\n        t\n    end\n    private\n    def sink p\n        z = @a.size\n        while (c = p * 2 + 1) < z\n            r = c + 1\n            c = r if r < z && @u.(@a[c], @a[r])\n            break unless @u.call @a[p], @a[c]\n            @a[p], @a[c] = @a[c], @a[p]\n            p = c\n        end\n    end\nend\nclass MinQ < PQ\n    def initialize(a = [], h = true) = super(a, h) { _1 > _2 }\nend\nclass MaxQ < PQ\n    def initialize(a = [], h = true) = super(a, h) { _1 < _2 }\nend\ndef fio(a = 'input.txt', b = 'output.txt')\n    $stdin = File.open a, 'rb'\n    $stdout = File.open b, 'wb'\nend\nrqr 'set', 'prime'\nclass Set def d(...) = delete(...) end\nclass Prime\n    def self.at_least(x) =\n        loop { Prime.prime?(x) ? (break x) : x += 1 }\nend\ndef sync = ($stdout.sync = true)\nRC = /(.)\\1*/\n\n################################################################\n#                                                              #\n#              https://github.com/alantudyk/Stop               #\n#                                                              #\n################################################################\n\nz, a = giga\na.hoare!\nif a.f == a.l; o a.f; exit end\nf = a.f\nl, r = 0, (1...z).sum { _1 - f }\nm = r\nfor i in 1...z\n    d = a[i] - a[i.p]\n    r -= d * (z - i)\n    l += d * i\n    s = l + r\n    next if s >= m\n    f = a[i]\n    m = s\nend\no f\n\n################################################################\n#                                                              #\n#              https://github.com/alantudyk/Stop               #\n#                                                              #\n################################################################\n\n"
}