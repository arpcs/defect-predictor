{
    "id": 98215093,
    "contestId": 1431,
    "creationTimeSeconds": 1605195642,
    "relativeTimeSeconds": 3942,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "eatmore"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 623,
    "memoryConsumedBytes": 18329600,
    "source": "import java.io.BufferedReader\nimport java.io.IOException\nimport java.io.InputStreamReader\nimport java.io.PrintWriter\nimport java.util.*\n\nfun solve() {\n    val n = scanInt()\n    val m = scanInt()\n    val k = scanLong()\n    val a = LongArray(n)\n    val b = LongArray(m)\n    val c = Array(n) { LongArray(m) }\n    for (i in 0 until n) {\n        a[i] = scanLong()\n    }\n    for (i in 0 until m) {\n        b[i] = scanLong()\n    }\n    for (i in 0 until n) {\n        for (j in 0 until m) {\n            c[i][j] = scanLong()\n        }\n    }\n    val thresh = LongArray(n + m)\n    val score = LongArray(n + m)\n    var cnt = 0\n    var pi = 0\n    var pj = 0\n    while (pi < n || pj < m) {\n        var cthresh: Long\n        var cscore: Long = 0\n        if (pj == m || pi < n && a[pi] < b[pj]) {\n            cthresh = a[pi]\n            for (i in 0 until pj) {\n                cscore = Math.max(cscore, c[pi][i])\n            }\n            ++pi\n        } else {\n            cthresh = b[pj]\n            for (i in 0 until pi) {\n                cscore = Math.max(cscore, c[i][pj])\n            }\n            ++pj\n        }\n        if (cnt > 0 && thresh[cnt - 1] == cthresh) {\n            --cnt\n            cscore = Math.max(cscore, score[cnt])\n        }\n        if (cnt == 0 || cscore > score[cnt - 1]) {\n            thresh[cnt] = cthresh\n            score[cnt] = cscore\n            ++cnt\n        }\n    }\n    val target = Math.max(a[n - 1], b[m - 1])\n    var ans = Long.MAX_VALUE\n    for (p in 0 until cnt) {\n        var cans: Long = 0\n        var cscore: Long = 0\n        var cmax: Long = 0\n        for (i in 0 until cnt) {\n            if (cscore < thresh[i]) {\n                val cur = (thresh[i] - cscore + cmax - 1) / cmax\n                cans += cur\n                cscore += cur * cmax\n            }\n            cmax = Math.max(cmax, if (i == p) score[i] + k else score[i])\n        }\n        if (cscore < target) {\n            cans += (target - cscore + cmax - 1) / cmax\n        }\n        ans = Math.min(ans, cans)\n    }\n    out.print(ans)\n}\n\nfun scanInt(): Int {\n    return scanString().toInt()\n}\n\nfun scanLong(): Long {\n    return scanString().toLong()\n}\n\nfun scanString(): String {\n    var t = tok\n    while (t == null || !t.hasMoreTokens()) {\n        t = StringTokenizer(inp.readLine())\n        tok = t\n    }\n    return t.nextToken()\n}\n\nval inp = BufferedReader(InputStreamReader(System.`in`))\nval out = PrintWriter(System.out)\nvar tok: StringTokenizer? = null\nfun main() {\n    solve()\n    inp.close()\n    out.close()\n}"
}