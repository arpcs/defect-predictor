{
    "id": 98220347,
    "contestId": 1431,
    "creationTimeSeconds": 1605199511,
    "relativeTimeSeconds": 7811,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "timmyfeng"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*\r\nimport java.util.*\r\n\r\nfun main(args: Array<String>) {\r\n\tval `in` = InputReader(System.`in`)\r\n\tval out = PrintWriter(System.out)\r\n\tval n = `in`.nextInt()\r\n\tval m = `in`.nextInt()\r\n\tval k = `in`.nextInt()\r\n\tval a = LongArray(n)\r\n\tfor (i in 0 until n) {\r\n\t\ta[i] = `in`.nextInt().toLong()\r\n\t}\r\n\tval b = LongArray(m)\r\n\tfor (i in 0 until m) {\r\n\t\tb[i] = `in`.nextInt().toLong()\r\n\t}\r\n\tval c = Array(n) { IntArray(m) }\r\n\tfor (i in 0 until n) {\r\n\t\tfor (j in 0 until m) {\r\n\t\t\tc[i][j] = `in`.nextInt()\r\n\t\t}\r\n\t}\r\n\tc[0][0] += k\r\n\tval open = PriorityQueue(n * m, Collections.reverseOrder<Int>())\r\n\tvar sum: Long = 0\r\n\tvar row = 0\r\n\twhile (row < n && a[row] <= sum) {\r\n\t\t++row\r\n\t}\r\n\tvar col = 0\r\n\twhile (col < m && b[col] <= sum) {\r\n\t\tfor (i in 0 until row) {\r\n\t\t\topen.offer(c[i][col])\r\n\t\t}\r\n\t\t++col\r\n\t}\r\n\tvar ans = 0\r\n\twhile (row < n || col < m) {\r\n\t\tsum += open.poll()\r\n\t\t++ans\r\n\t\twhile (row < n && a[row] <= sum) {\r\n\t\t\tfor (i in 0 until col) {\r\n\t\t\t\topen.offer(c[row][i])\r\n\t\t\t}\r\n\t\t\t++row\r\n\t\t}\r\n\t\twhile (col < m && b[col] <= sum) {\r\n\t\t\tfor (i in 0 until row) {\r\n\t\t\t\topen.offer(c[i][col])\r\n\t\t\t}\r\n\t\t\t++col\r\n\t\t}\r\n\t}\r\n\tout.println(ans)\r\n\tout.close()\r\n}\r\n\r\ninternal class InputReader(str: InputStream?) {\r\n\tvar reader: BufferedReader\r\n\tvar tokenizer: StringTokenizer? = null\r\n\toperator fun next(): String {\r\n\t\twhile (tokenizer == null || !tokenizer!!.hasMoreTokens()) {\r\n\t\t\ttokenizer = try {\r\n\t\t\t\tStringTokenizer(reader.readLine())\r\n\t\t\t} catch (e: IOException) {\r\n\t\t\t\tthrow RuntimeException(e)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tokenizer!!.nextToken()\r\n\t}\r\n\r\n\tfun nextInt(): Int {\r\n\t\treturn next().toInt()\r\n\t}\r\n\r\n\tfun nextLong(): Long {\r\n\t\treturn next().toLong()\r\n\t}\r\n\r\n\tinit {\r\n\t\treader = BufferedReader(InputStreamReader(str), 1 shl 15)\r\n\t}\r\n}"
}