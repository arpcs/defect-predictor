{
    "id": 98229603,
    "contestId": 1431,
    "creationTimeSeconds": 1605209264,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "timmyfeng"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*\r\nimport java.util.*\r\n\r\nfun main(args: Array<String>) {\r\n\tval `in` = InputReader(System.`in`)\r\n\tval out = PrintWriter(System.out)\r\n\tval n = `in`.nextInt()\r\n\tval m = `in`.nextInt()\r\n\tval k = `in`.nextInt()\r\n\tval a = LongArray(n)\r\n\tfor (i in 0 until n) {\r\n\t\ta[i] = `in`.nextLong()\r\n\t}\r\n\tval b = LongArray(m)\r\n\tfor (i in 0 until m) {\r\n\t\tb[i] = `in`.nextLong()\r\n\t}\r\n\tval best: MutableMap<Long, Int> = TreeMap()\r\n\tfor (i in 0 until n) {\r\n\t\tfor (j in 0 until m) {\r\n\t\t\tval c = `in`.nextInt()\r\n\t\t\tval cost = Math.max(a[i], b[j])\r\n\t\t\tif (!best.containsKey(cost) || best[cost]!! < c) {\r\n\t\t\t\tbest[cost] = c\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tval cost: List<Long> = ArrayList(best.keys)\r\n\tval c: List<Int> = ArrayList(best.values)\r\n\tvar ans = Long.MAX_VALUE\r\n\tfor (i in c) {\r\n\t\tout.println(i)\r\n\t}\r\n\tfor (i in cost.indices) {\r\n\t\tvar favorite = 0\r\n\t\tvar turns: Long = 0\r\n\t\tvar sum: Long = 0\r\n\t\tfor (j in cost.indices) {\r\n\t\t\tif (sum < cost[j]) {\r\n\t\t\t\tval todo = (cost[j] - sum + favorite - 1) / favorite\r\n\t\t\t\tsum += todo * favorite\r\n\t\t\t\tturns += todo\r\n\t\t\t}\r\n\t\t\tfavorite = Math.max(favorite, c[j] + if (i == j) k else 0)\r\n\t\t}\r\n\t\tans = Math.min(ans, turns)\r\n\t}\r\n\tout.println(ans)\r\n\tout.close()\r\n}\r\n\r\ninternal class InputReader(str: InputStream?) {\r\n\tvar reader: BufferedReader\r\n\tvar tokenizer: StringTokenizer? = null\r\n\toperator fun next(): String {\r\n\t\twhile (tokenizer == null || !tokenizer!!.hasMoreTokens()) {\r\n\t\t\ttokenizer = try {\r\n\t\t\t\tStringTokenizer(reader.readLine())\r\n\t\t\t} catch (e: IOException) {\r\n\t\t\t\tthrow RuntimeException(e)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tokenizer!!.nextToken()\r\n\t}\r\n\r\n\tfun nextInt(): Int {\r\n\t\treturn next().toInt()\r\n\t}\r\n\r\n\tfun nextLong(): Long {\r\n\t\treturn next().toLong()\r\n\t}\r\n\r\n\tinit {\r\n\t\treader = BufferedReader(InputStreamReader(str), 1 shl 15)\r\n\t}\r\n}"
}