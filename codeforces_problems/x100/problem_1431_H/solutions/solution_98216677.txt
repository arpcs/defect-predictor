{
    "id": 98216677,
    "contestId": 1431,
    "creationTimeSeconds": 1605196668,
    "relativeTimeSeconds": 4968,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "ainta"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1278,
    "memoryConsumedBytes": 62976000,
    "source": "import java.io.BufferedReader\r\nimport java.io.IOException\r\nimport java.io.InputStreamReader\r\nimport java.io.PrintWriter\r\nimport java.util.*\r\n\r\nfun scanInt(): Int {\r\n    return scanString().toInt()\r\n}\r\n\r\nfun scanLong(): Long {\r\n    return scanString().toLong()\r\n}\r\nprivate fun readLn() = readLine()!!\r\nprivate fun readStrings() = readLn().split(\" \")\r\nprivate fun readInts() = readStrings().map { it.toInt() }\r\n\r\nfun scanString(): String {\r\n    var t = tok\r\n    while (t == null || !t.hasMoreTokens()) {\r\n        t = StringTokenizer(inp.readLine())\r\n        tok = t\r\n    }\r\n    return t.nextToken()\r\n}\r\n\r\nval inp = BufferedReader(InputStreamReader(System.`in`))\r\nval out = PrintWriter(System.out)\r\nvar tok: StringTokenizer? = null\r\n\r\nfun main() {\r\n    solve()\r\n    inp.close()\r\n    out.close()\r\n}\r\n\r\nclass PP(val a: Int,val b: Int){\r\n}\r\n\r\n// A comparator to compare first names of Name\r\nclass ComparatorOne: Comparator<PP>{\r\n    override fun compare(o1: PP?, o2: PP?): Int {\r\n        if(o1 == null || o2 == null){\r\n            return 0;\r\n        }\r\n        return o1.a.compareTo(o2.a)\r\n    }\r\n}\r\n\r\n\r\nfun solve() {\r\n    val tests = 1\r\n    for (test in 0 until tests) {\r\n        val n = scanInt()\r\n        val m = scanInt()\r\n        val K = scanLong()\r\n\r\n        var A = LongArray(n+1)\r\n        var B = LongArray(m+1)\r\n        var C = LongArray(n+m)\r\n\r\n        var w = Array(n+1) {Array(m+1) {0L} }\r\n\r\n        for (i in 1 until n+1){\r\n            A[i] = scanLong()\r\n            C[i-1] = A[i]\r\n        }\r\n        for (i in 1 until m+1){\r\n            B[i] = scanLong()\r\n            C[i+n-1] = B[i]\r\n        }\r\n        C.sort()\r\n        for (i in 1 until n+1){\r\n            for (j in 1 until m+1){\r\n                w[i][j] = scanLong()\r\n                w[i][j] = maxOf(maxOf(w[i-1][j],w[i][j-1]),maxOf(w[i-1][j-1],w[i][j]))\r\n            }\r\n        }\r\n\r\n        var Ans = 999999999999999999L\r\n        for (i in 0 until n+m){\r\n            var px = 0\r\n            var py = 0\r\n            for (j in 1 until n+1){\r\n                if(A[j] <= C[i])px = j\r\n            }\r\n            for (j in 1 until m+1){\r\n                if(B[j] <= C[i])py = j\r\n            }\r\n            var sx = 0\r\n            var sy = 0\r\n\r\n            for (j in 1 until n+1){\r\n                if(A[j] <= 0)sx = j\r\n            }\r\n            for (j in 1 until m+1){\r\n                if(B[j] <= 0)sy = j\r\n            }\r\n            var sum = 0L\r\n            var cc = 0L\r\n            while(sx < n || sy < m){\r\n                if(sx<n && sum>=A[sx+1]){\r\n                    sx+=1\r\n                    continue\r\n                }\r\n                if(sy<m && sum>=B[sy+1]){\r\n                    sy+=1\r\n                    continue\r\n                }\r\n                var tp = w[sx][sy]\r\n                if(sx >= px && sy >= py){\r\n                    tp = maxOf(tp, w[px][py]+K)\r\n                }\r\n                var nxt = 999999999999999999L\r\n                if(sx<n)nxt = minOf(nxt, A[sx+1])\r\n                if(sy<m)nxt = minOf(nxt, B[sy+1])\r\n                var ct = (nxt - sum + tp - 1) / tp\r\n                cc += ct\r\n                sum += ct * tp\r\n            }\r\n            Ans = minOf(Ans,cc)\r\n        }\r\n        out.println(Ans)\r\n\r\n    }\r\n}"
}