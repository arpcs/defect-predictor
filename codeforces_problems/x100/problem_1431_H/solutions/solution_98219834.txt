{
    "id": 98219834,
    "contestId": 1431,
    "creationTimeSeconds": 1605199149,
    "relativeTimeSeconds": 7449,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "-14"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 0,
    "source": "import java.lang.Long.max\r\nimport java.lang.Long.min\r\nimport java.util.*\r\n\r\n    fun main(args: Array<String>) {\r\n        val scanner = Scanner(System.`in`)\r\n        val n: Int\r\n        val m: Int\r\n        val K: Int\r\n        n = scanner.nextInt()\r\n        m = scanner.nextInt()\r\n        K = scanner.nextInt()\r\n        val a = LongArray(n)\r\n        val b = LongArray(m)\r\n        val c = Array(n) { LongArray(m) }\r\n        val d = LongArray(n + m + 1)\r\n        val e = LongArray(n + m + 1)\r\n        val f = LongArray(n + m + 1)\r\n        var dc = 0\r\n        val S: MutableSet<Long> = HashSet()\r\n        val map: MutableMap<Long, Int> = HashMap()\r\n        for (i in 0 until n) {\r\n            a[i] = scanner.nextInt().toLong()\r\n            S.add(a[i])\r\n        }\r\n        for (i in 0 until m) {\r\n            b[i] = scanner.nextInt().toLong()\r\n            S.add(b[i])\r\n        }\r\n        for (v in S) {\r\n            d[++dc] = v\r\n            map[v] = dc\r\n        }\r\n        for (i in 0 until n) {\r\n            for (j in 0 until m) {\r\n                c[i][j] = scanner.nextLong()\r\n                val id = map[max(a[i], b[j])]!!\r\n                e[id] = max(e[id], c[i][j])\r\n            }\r\n        }\r\n        var ans = 0x3f3f3f3f3f3f3f3fL\r\n        for (t in 1..dc) {\r\n            e[t] += K.toLong()\r\n            for (i in 1..dc) {\r\n                f[i] = max(e[i], f[i - 1])\r\n            }\r\n            var cur: Long = 0\r\n            var r: Long = 0\r\n            var id = 1\r\n            while (id < dc) {\r\n                while (id < dc && cur >= d[id + 1]) {\r\n                    id++\r\n                }\r\n                if (id == dc) break\r\n                val dif = d[id + 1] - cur\r\n                val need = (dif + f[id] - 1) / f[id]\r\n                r += need\r\n                cur += need * f[id]\r\n            }\r\n            ans = min(ans, r)\r\n            e[t] -= K.toLong()\r\n        }\r\n        println(ans)\r\n    }\r\n\r\n"
}