{
    "id": 98221203,
    "contestId": 1431,
    "creationTimeSeconds": 1605200132,
    "relativeTimeSeconds": 8432,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Heltion"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 1843200,
    "source": "import java.lang.reflect.Array\r\n\r\nfun readInt() = readLine()!!.toInt()\r\nfun readInts() = readLine()!!.split(' ').map(String::toInt)\r\nfun readLongs() = readLine()!!.split(' ').map(String::toLong)\r\nfun main(){\r\n    val (n, m, k) = readInts()\r\n    val a = readLongs()\r\n    val b = readLongs()\r\n    val c = Array(n){readLongs()}\r\n    val s = (a + b).distinct().sorted()\r\n    val axs = IntArray(n)\r\n    val bxs = IntArray(m)\r\n    for(i in 0 until n)\r\n        for(j in s.indices)\r\n            if(a[i] <= s[j]){\r\n                axs[i] = j\r\n                break\r\n            }\r\n    for(i in 0 until m)\r\n        for(j in s.indices)\r\n            if(b[i] <= s[j]){\r\n                bxs[i] = j\r\n                break\r\n            }\r\n    val add = LongArray(s.size)\r\n    for(i in 0 until n)\r\n        for(j in 0 until m)\r\n            add[maxOf(axs[i], bxs[j])] = maxOf(add[maxOf(axs[i], bxs[j])], c[i][j])\r\n    var ans = 1000000000000L\r\n    if(s.size == 1) ans = 0L\r\n    for(i in 0 until s.size - 1){\r\n        var pans = 0L\r\n        var cur = 0L\r\n        for(j in 0 until s.size - 1){\r\n            if(s[j + 1] > cur){\r\n                var fadd = add[j]\r\n                if(i <= j) fadd = maxOf(fadd, add[i] + k)\r\n                val h = (s[j + 1] - cur + fadd - 1) / fadd\r\n                pans += h\r\n                cur += h * fadd\r\n            }\r\n        }\r\n        ans = minOf(ans, pans)\r\n    }\r\n    println(ans)\r\n}"
}