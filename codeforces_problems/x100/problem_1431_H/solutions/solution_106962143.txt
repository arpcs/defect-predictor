{
    "id": 106962143,
    "contestId": 1431,
    "creationTimeSeconds": 1612857725,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "HaiZuka"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1746,
    "memoryConsumedBytes": 65126400,
    "source": "fun main() {\r\n\tval (n, m, k) = readLine()!!.split(\" \").map { it.toInt() }\t\r\n\tval a = readLine()!!.split(\" \").map { it.toLong() }\r\n\tval b = readLine()!!.split(\" \").map { it.toLong() }\r\n\tval c = Array(n) { readLine()!!.split(\" \").map { it.toLong() } }\r\n\t\r\n\tval ev = Array(n + m) {\r\n\t\tif (it < n)\r\n\t\t\tlongArrayOf(a[it], 1L, it.toLong())\r\n\t\telse\r\n\t\t\tlongArrayOf(b[it - n], 0L, (it - n).toLong())\r\n\t}\r\n\t\r\n\tev.sortWith(compareBy({ it[0] }))\r\n\t\r\n\tval vals = LongArray(n + m) { 0 }\r\n\t\r\n\tfor (e in 0 until n + m) {\r\n\t\tif (ev[e][1] == 1L) {\r\n\t\t\tval i = ev[e][2].toInt()\r\n\t\t\tvals[e] = b.indices.filter { b[it] <= ev[e][0] }.map { c[i][it] }.max()!!\r\n\t\t} else {\r\n\t\t\tval j = ev[e][2].toInt()\r\n\t\t\tvals[e] = a.indices.filter { a[it] <= ev[e][0] }.map { c[it][j] }.max()!!\r\n\t\t}\r\n\t}\r\n\t\r\n\tvar ans = 1e18.toLong()\r\n\t\r\n\tfor (bonus in 1 until n + m) {\r\n\t\tvals[bonus] += k.toLong()\r\n\t\tvar (res, cur, mx) = LongArray(3) { 0 }\r\n\t\tvar i = 0\r\n\t\twhile (true) {\r\n\t\t\twhile (i < n + m && ev[i][0] <= cur) {\r\n\t\t\t\tmx = Math.max(mx, vals[i])\r\n\t\t\t\t++i;\r\n\t\t\t}\r\n\t\t\tif (i == n + m) break\r\n\t\t\tval need = (ev[i][0] - cur + mx - 1) / mx\r\n\t\t\tres += need\r\n\t\t\tcur += need * mx\r\n\t\t}\r\n\t\tans = Math.min(ans, res)\r\n\t\tvals[bonus] -= k.toLong()\r\n\t}\r\n\r\n\tprintln(ans)\r\n}"
}