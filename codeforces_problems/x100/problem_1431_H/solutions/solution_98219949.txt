{
    "id": 98219949,
    "contestId": 1431,
    "creationTimeSeconds": 1605199244,
    "relativeTimeSeconds": 7544,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "SYury"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*\r\n\r\n//private fun readLn() = readLine()!! // string line\r\n//private fun readInt() = readLn().toInt() // single int\r\n//private fun readStrings() = readLn().split(\" \") // list of strings\r\n//private fun readInts() = readStrings().map { it.toInt() } // list of ints\r\n//private fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\n\r\n@JvmField val INPUT = System.`in`\r\n@JvmField val OUTPUT = System.out\r\n\r\n@JvmField val _reader = INPUT.bufferedReader()\r\nfun readLine(): String? = _reader.readLine()\r\nfun readLn() = _reader.readLine()!!\r\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\r\nfun read(): String {\r\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\r\n    return _tokenizer.nextToken()\r\n}\r\nfun readInt() = read().toInt()\r\nfun readDouble() = read().toDouble()\r\nfun readLong() = read().toLong()\r\nfun readStrings(n: Int) = List(n) { read() }\r\nfun readLines(n: Int) = List(n) { readLn() }\r\nfun readInts(n: Int) = List(n) { read().toInt() }\r\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\r\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\r\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\r\nfun readLongs(n: Int) = List(n) { read().toLong() }\r\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\r\n\r\ninline fun <T : Comparable<T> > min(x : T, y : T): T{\r\n    if(x < y){return x;}\r\n    else{return y;}\r\n}\r\n\r\ninline fun <T : Comparable<T> > max(x : T, y : T): T{\r\n    if(x > y){return x;}\r\n    else{return y;}\r\n}\r\n\r\nclass solution(val n: Int, val m: Int, val a: List<Long>, val b: List<Long>, var c: Array<IntArray>, var row: Array<IntArray>, var col: Array<IntArray>){\r\n    var ipos = IntArray(n + m)\r\n    var jpos = IntArray(n + m)\r\n    var sz = 0\r\n    fun solve(): Long{\r\n        sz = 0\r\n        var iptr = 0\r\n        var jptr = 0\r\n        var sum = 0L\r\n        var ans = 0L\r\n        var currc = 0L\r\n        var ci = 0\r\n        var cj = 0\r\n        while(iptr < n && a[iptr] == 0L){\r\n            val cu = c[iptr][0].toLong()\r\n            if(cu > currc){\r\n                currc = cu\r\n                ci = iptr\r\n                cj = 0\r\n            }\r\n            ++iptr\r\n        }\r\n        while(jptr < m && b[jptr] == 0L){\r\n            val pos = col[jptr][iptr - 1]\r\n            val cu = c[pos][jptr].toLong()\r\n            if(cu > currc){\r\n                currc = cu\r\n                ci = pos\r\n                cj = jptr\r\n            }\r\n            ++jptr\r\n        }\r\n        //println(\"start\")\r\n        while(iptr < n || jptr < m){\r\n            var tillNext = 10000000000000L\r\n            //println(iptr)\r\n            //println(jptr)\r\n            if(iptr < n)\r\n                tillNext = min(tillNext, a[iptr] - sum)\r\n            if(jptr < m)\r\n                tillNext = min(tillNext, b[jptr] - sum)\r\n            var steps = tillNext/currc\r\n            if(steps * currc < tillNext)\r\n                ++steps\r\n            ans += steps\r\n            sum += currc * steps\r\n            ipos[sz] = ci\r\n            jpos[sz] = cj\r\n            ++sz\r\n            while(iptr < n && a[iptr] <= sum){\r\n                val pos = row[iptr][jptr - 1]\r\n                val cu = c[iptr][pos].toLong()\r\n                if(cu > currc){\r\n                    currc = cu\r\n                    ci = iptr\r\n                    cj = pos\r\n                }\r\n                ++iptr\r\n            }\r\n            while(jptr < m && b[jptr] <= sum){\r\n                val pos = col[jptr][iptr - 1]\r\n                val cu = c[pos][jptr].toLong()\r\n                if(cu > currc){\r\n                    currc = cu\r\n                    ci = pos\r\n                    cj = jptr\r\n                }\r\n                ++jptr\r\n            }\r\n        }\r\n        return ans\r\n    }\r\n    fun change(i: Int, j: Int, d: Int){\r\n        c[i][j] += d\r\n    }\r\n    fun gets(): Int{return sz;}\r\n    fun geti(): IntArray{return ipos;}\r\n    fun getj(): IntArray{return jpos;}\r\n}\r\n\r\nfun main(){\r\n    val T = 1//readInt()\r\n    for(t in 1..T){\r\n        val (n, m, k) = readInts(3)\r\n        val a = readLongs(n)\r\n        val b = readLongs(m)\r\n        var c = Array(n){IntArray(m){0}}\r\n        var rowmax = Array(n){IntArray(m){0}}\r\n        var colmax = Array(m){IntArray(n){0}}\r\n        for(i in 0..n-1){\r\n            val curr = readInts(m)\r\n            for(j in 0..m-1){\r\n                c[i][j] = curr[j]\r\n                rowmax[i][j] = j\r\n                if(j > 0 && curr[rowmax[i][j - 1]] >= curr[j])\r\n                    rowmax[i][j] = rowmax[i][j - 1]\r\n            }\r\n            //println(rowmax[i].joinToString())\r\n        }\r\n        for(j in 0..m-1){\r\n            for(i in 0..n-1){\r\n                colmax[j][i] = i\r\n                if(i > 0 && c[colmax[j][i - 1]][j] >= c[i][j])\r\n                    colmax[j][i] = colmax[j][i - 1]\r\n            }\r\n            //println(colmax[j].joinToString())\r\n        }\r\n        var solver = solution(n, m, a, b, c, rowmax, colmax)\r\n        var ans = solver.solve()\r\n        val sz = solver.gets()\r\n        val ipos = solver.geti()\r\n        val jpos = solver.getj()\r\n        for(id in 0..sz-1){\r\n            val i = ipos[id]\r\n            val j = jpos[id]\r\n            solver.change(i, j, k)\r\n            ans = min(ans, solver.solve())\r\n            solver.change(i, j, -k)\r\n        }\r\n        println(ans)\r\n    }\r\n}\r\n"
}