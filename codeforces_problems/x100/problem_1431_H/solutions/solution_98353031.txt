{
    "id": 98353031,
    "contestId": 1431,
    "creationTimeSeconds": 1605332554,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Spheniscine"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1091,
    "memoryConsumedBytes": 7168000,
    "source": "@file:Suppress(\"NOTHING_TO_INLINE\", \"EXPERIMENTAL_FEATURE_WARNING\", \"OVERRIDE_BY_INLINE\")\n@file:OptIn(ExperimentalStdlibApi::class)\n\nimport java.io.PrintWriter\nimport kotlin.math.*\nimport kotlin.random.Random\nimport kotlin.collections.sort as _sort\nimport kotlin.collections.sortDescending as _sortDescending\nimport kotlin.io.println as iprintln\n\n\n/** @author Spheniscine */\nfun main() { _writer.solve(); _writer.flush() }\nfun PrintWriter.solve() {\n//    val startTime = System.nanoTime()\n\n    val numCases = 1//readInt()\n    case@ for(case in 1..numCases) {\n        //print(\"Case #$case: \")\n\n        val n = readInt()\n        val m = readInt()\n        val k = readInt()\n\n        val A = readLongArray(n)\n        val B = readLongArray(m)\n\n        val C = Array(n) { readIntArray(m) }\n\n        var i = 1\n        var j = 1\n        val D = IntArray(n+m-1)\n        D[0] = C[0][0]\n        val S = LongArray(D.size)\n\n        for(x in 1 until D.size) {\n            D.setMax(x, D[x-1])\n\n            S[x] = if(i < n && (j == m || A[i] <= B[j])) {\n                for(jj in 0 until j) {\n                    D.setMax(x, C[i][jj])\n                }\n\n                A[i++]\n            } else {\n                for(ii in 0 until i) {\n                    D.setMax(x, C[ii][j])\n                }\n\n                B[j++]\n            }\n        }\n\n        var ans = Long.MAX_VALUE\n        for(x in D.indices) {\n            var res = 0L\n            var s = 0L\n            var c = 0\n\n            for(y in 0 until D.lastIndex) {\n                c = max(c, D[y] + if(x == y) k else 0)\n\n                val r = S[y+1] - s divCeil c\n                res += r\n                s += r * c\n            }\n\n            ans = min(ans, res)\n        }\n\n        println(ans)\n    }\n\n//    iprintln(\"Time: ${(System.nanoTime() - startTime) / 1000000} ms\")\n}\n\nclass IntList(initialCapacity: Int = 12) {\n    private var arr = IntArray(initialCapacity)\n    val _arr get() = arr\n    private val capacity get() = arr.size\n    var size = 0\n        private set\n    inline val lastIndex get() = size - 1\n    inline val indices get() = 0 until size\n\n    constructor(copyFrom: IntArray): this(copyFrom.size) { copyFrom.copyInto(arr); size = copyFrom.size }\n    constructor(copyFrom: Collection<Int>): this(copyFrom.size) { arr = copyFrom.toIntArray(); size = copyFrom.size }\n\n    fun contentEquals(other: IntList): Boolean {\n        return this === other || size == other.size && indices.all { this[it] == other[it] }\n    }\n\n    private fun grow(minCapacity: Int = 8) {\n        val newCapacity = maxOf(minCapacity, capacity + (capacity shr 1))\n        arr = arr.copyOf(newCapacity)\n    }\n\n    fun ensureCapacity(minCapacity: Int) { if(capacity < minCapacity) grow(minCapacity) }\n\n    operator fun get(index: Int): Int {\n        require(index in 0 until size)\n        return arr[index]\n    }\n\n    operator fun set(index: Int, value: Int) {\n        require(index in 0 until size)\n        arr[index] = value\n    }\n\n    fun add(value: Int) {\n        if(size == capacity) grow()\n        arr[size++] = value\n    }\n\n    fun addAll(list: IntList) {\n        ensureCapacity(size + list.size)\n        list.arr.copyInto(arr, size, 0, list.size)\n        size += list.size\n    }\n\n    fun add(index: Int, element: Int) {\n        if(size == capacity) grow()\n        arr.copyInto(arr, index + 1, index, size)\n        size++\n        set(index, element)\n    }\n\n    fun clear() { size = 0 }\n\n    fun removeAt(index: Int): Int {\n        val e = get(index)\n        arr.copyInto(arr, index, index + 1, size)\n        size--\n        return e\n    }\n\n    fun indexOf(e: Int): Int {\n        for(i in 0 until size) if(this[i] == e) return i\n        return -1\n    }\n\n    fun remove(e: Int): Boolean {\n        val i = indexOf(e)\n        if(i == -1) return false\n        removeAt(i)\n        return true\n    }\n\n    operator fun iterator() = object: IntIterator() {\n        private var pos = 0\n        override fun hasNext() = pos < size\n        override fun nextInt() = get(pos++)\n    }\n\n    inline fun isEmpty() = size == 0\n    inline fun isNotEmpty() = size != 0\n\n    fun pop() = arr[--size]\n\n    fun popToSize(s: Int) {\n        require(s >= 0)\n        if(s < size) size = s\n    }\n\n    fun swap(i: Int, j: Int) { val t = this[i]; this[i] = this[j]; this[j] = t }\n    fun reverse() {\n        for(i in 0 until size / 2) swap(i, lastIndex - i)\n    }\n\n    fun shuffle(rnd: Random = random) { for(i in lastIndex downTo 1) swap(i, rnd.nextInt(i+1)) }\n\n    inline fun sortWith(cmp: (Int, Int) -> Int) { _mergeSort(_arr, size, IntArray(size), IntArray::get, IntArray::set, cmp) }\n    inline fun <T: Comparable<T>> sortBy(func: (Int) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\n    inline fun <T: Comparable<T>> sortByDescending(func: (Int) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\n    fun sort() { sortBy { it } }\n    fun sortDescending() { sortByDescending { it } }\n\n    fun joinToString(separator: CharSequence) = if(size == 0) \"\" else let {\n        buildString {\n            append(it[0])\n            for (i in 1 until size) {\n                append(separator).append(it[i])\n            }\n        }\n    }\n\n    override fun toString() = \"[\" + joinToString(\", \") + \"]\"\n\n    fun toIntArray() = arr.copyOf(size)\n    fun toList() = List(size, ::get)\n\n    inline fun first() = get(0)\n    inline fun last() = get(lastIndex)\n}\n\ninline fun IntList(size: Int, init: (Int) -> Int) = IntList(size).apply {\n    for(i in 0 until size) { add(init(i)) }\n}\ninline fun IntArray.toIntList() = IntList(this)\ninline fun Collection<Int>.toIntList() = IntList(this)\ninline fun intListOf(vararg values: Int) = IntList(values)\n\nfun IntList.max() = (1 until size).fold(this[0]) { acc, i -> max(acc, this[i]) }\nfun IntList.min() = (1 until size).fold(this[0]) { acc, i -> min(acc, this[i]) }\nfun IntList.getOrNull(i: Int) = if(i in indices) get(i) else null\ninline fun IntList.count(predicate: (Int) -> Boolean) = indices.count { predicate(this[it]) }\nfun IntList.copyOf() = IntList(size, ::get)\n\nfun IntArray.setMax(i: Int, v: Int) = if(v > get(i)) { set(i, v); true } else false\nfun IntArray.setMin(i: Int, v: Int) = if(v < get(i)) { set(i, v); true } else false\n\ninfix fun Int.divCeil(other: Int) =\n    (this / other).let { if(xor(other) >= 0 && it * other != this) it+1 else it }\n\ninline infix fun Int.divFloor(other: Int) = Math.floorDiv(this, other)\n\ninfix fun Long.divCeil(other: Long) =\n    (this / other).let { if(xor(other) >= 0 && it * other != this) it+1 else it }\ninline infix fun Long.divCeil(other: Int) = divCeil(other.toLong())\n\ninline infix fun Long.divFloor(other: Long) = Math.floorDiv(this, other)\n\n/** IO */\n//@JvmField val ONLINE_JUDGE = System.getProperty(\"ONLINE_JUDGE\") != null\n//const val PATH = \"src/main/resources/\"\n//@JvmField val INPUT = File(PATH + \"input.txt\").inputStream()\n//@JvmField val OUTPUT = File(PATH + \"output.txt\").outputStream()\n@JvmField val INPUT = System.`in`\n@JvmField val OUTPUT = System.out\n\nconst val _BUFFER_SIZE = 1 shl 16\n@JvmField val _buffer = ByteArray(_BUFFER_SIZE)\n@JvmField var _bufferPt = 0\n@JvmField var _bytesRead = 0\n\ntailrec fun readChar(): Char {\n    if(_bufferPt == _bytesRead) {\n        _bufferPt = 0\n        _bytesRead = INPUT.read(_buffer, 0, _BUFFER_SIZE)\n    }\n    return if(_bytesRead < 0) Char.MIN_VALUE\n    else {\n        val c = _buffer[_bufferPt++].toChar()\n        if (c == '\\r') readChar() else c\n    }\n}\n\n/** @param skipNext Whether to skip the next character (usually whitespace), defaults to true */\nfun readCharArray(n: Int, skipNext: Boolean = true): CharArray {\n    val res = CharArray(n) { readChar() }\n    if(skipNext) readChar()\n    return res\n}\n\nfun readLine(): String? {\n    var c = readChar()\n    return if(c == Char.MIN_VALUE) null\n    else buildString {\n        while(c != '\\n' && c != Char.MIN_VALUE) {\n            append(c)\n            c = readChar()\n        }\n    }\n}\nfun readLn() = readLine()!!\n\nfun read() = buildString {\n    var c = readChar()\n    while(c <= ' ') {\n        if(c == Char.MIN_VALUE) return@buildString\n        c = readChar()\n    }\n    do {\n        append(c)\n        c = readChar()\n    } while(c > ' ')\n}\nfun readInt() = read().toInt()\nfun readDouble() = read().toDouble()\nfun readLong() = read().toLong()\nfun readStrings(n: Int) = List(n) { read() }\nfun readLines(n: Int) = List(n) { readLn() }\nfun readInts(n: Int) = List(n) { read().toInt() }\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\nfun readLongs(n: Int) = List(n) { read().toLong() }\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\n\n@JvmField val _writer = PrintWriter(OUTPUT, false)\n\n/**  sort overrides to avoid quicksort attacks */\n\n@JvmField var _random: Random? = null\nval random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }\n\ninline fun <A, T> _mergeSort(a0: A, n: Int, tmp0: A, get: A.(Int) -> T, set: A.(Int, T) -> Unit, cmp: (T, T) -> Int) {\n    var a = a0\n    var tmp = tmp0\n    var len = 1\n    while(len < n) {\n        var l = 0\n        while(true) {\n            val m = l + len\n            if(m >= n) break\n            val r = min(n, m + len)\n            var i = l\n            var j = m\n            for(k in l until r) {\n                if(i != m && (j == r || cmp(a.get(i), a.get(j)) <= 0)) {\n                    tmp.set(k, a.get(i++))\n                } else tmp.set(k, a.get(j++))\n            }\n            l = r\n        }\n        for(i in l until n) tmp.set(i, a.get(i))\n        val t = a; a = tmp; tmp = t\n        len += len\n    }\n    if(a !== a0) for(i in 0 until n) a0.set(i, tmp0.get(i))\n}\n\ninline fun IntArray.sortWith(cmp: (Int, Int) -> Int) { _mergeSort(this, size, IntArray(size), IntArray::get, IntArray::set, cmp) }\ninline fun <T: Comparable<T>> IntArray.sortBy(func: (Int) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\ninline fun <T: Comparable<T>> IntArray.sortByDescending(func: (Int) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\nfun IntArray.sort() { sortBy { it } }\nfun IntArray.sortDescending() { sortByDescending { it } }\n\ninline fun LongArray.sortWith(cmp: (Long, Long) -> Int) { _mergeSort(this, size, LongArray(size), LongArray::get, LongArray::set, cmp) }\ninline fun <T: Comparable<T>> LongArray.sortBy(func: (Long) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\ninline fun <T: Comparable<T>> LongArray.sortByDescending(func: (Long) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\nfun LongArray.sort() { sortBy { it } }\nfun LongArray.sortDescending() { sortByDescending { it } }\n\ninline fun DoubleArray.sortWith(cmp: (Double, Double) -> Int) { _mergeSort(this, size, DoubleArray(size), DoubleArray::get, DoubleArray::set, cmp) }\ninline fun <T: Comparable<T>> DoubleArray.sortBy(func: (Double) -> T) { sortWith { a, b -> func(a).compareTo(func(b)) } }\ninline fun <T: Comparable<T>> DoubleArray.sortByDescending(func: (Double) -> T) { sortWith { a, b -> func(b).compareTo(func(a)) } }\nfun DoubleArray.sort() { sortBy { it } }\nfun DoubleArray.sortDescending() { sortByDescending { it } }\n\ninline fun CharArray.sort() { _sort() }\ninline fun CharArray.sortDescending() { _sortDescending() }\n\ninline fun <T : Comparable<T>> Array<out T>.sort() = _sort()\ninline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()\ninline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()\ninline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()\n\n// import preserving junk function\n@Suppress(\"NonAsciiCharacters\") fun \u96ea\u82b1\u98c4\u98c4\u5317\u98a8\u562f\u562f\u5929\u5730\u4e00\u7247\u84bc\u832b() { iprintln(max(1, 2)) }\n\nfun IntArray.sumLong() = sumOf { it.toLong() }\n\nfun IntArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun IntArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun LongArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun LongArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun DoubleArray.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun DoubleArray.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun <T: Comparable<T>> Array<T>.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun <T: Comparable<T>> Array<T>.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\nfun <T: Comparable<T>> List<T>.sortedIndices() = IntArray(size) { it }.also { it.sortBy(::get) }\nfun <T: Comparable<T>> List<T>.sortedIndicesDescending() = IntArray(size) { it }.also { it.sortByDescending(::get) }\n\n// max/min Kotlin 1.6 -> 1.4 shim\nfun IntArray.max() = maxOf { it }\nfun IntArray.min() = minOf { it }\nfun LongArray.max() = maxOf { it }\nfun LongArray.min() = minOf { it }\nfun CharArray.max() = maxOf { it }\nfun CharArray.min() = minOf { it }\nfun <T : Comparable<T>> Iterable<T>.max() = maxOf { it }\nfun <T : Comparable<T>> Iterable<T>.min() = minOf { it }\nfun <T : Comparable<T>> Sequence<T>.max() = maxOf { it }\nfun <T : Comparable<T>> Sequence<T>.min() = minOf { it }"
}