{
    "id": 98221433,
    "contestId": 1431,
    "creationTimeSeconds": 1605200320,
    "relativeTimeSeconds": 8620,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "jonas.havelka.42"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1076,
    "memoryConsumedBytes": 163123200,
    "source": "import kotlin.math.max\r\nimport kotlin.math.min\r\n\r\nfun main() {\r\n    val input = System.`in`.readBytes().decodeToString().splitToSequence('\\n').iterator()\r\n    fun readLine() = input.next().trim()\r\n    val (n, m, k) = readLine().split(\" \").map { it.toInt() }\r\n    val a = readLine().split(\" \").map { it.toLong() }\r\n    val b = readLine().split(\" \").map { it.toLong() }\r\n    val c = List(n) { readLine().split(\" \").map { it.toLong() } }\r\n    val ab = a.union(b).toSet().toList().sorted()\r\n\r\n\r\n    var actualMax = 0L\r\n    var indexA = 0\r\n    var indexB = 0\r\n    val upgradedC = LongArray(ab.size) {\r\n        val cost = ab[it]\r\n        while (indexA != n && a[indexA] <= cost) {\r\n            for (j in 0 until indexB) {\r\n                actualMax = max(actualMax, c[indexA][j])\r\n            }\r\n            indexA++\r\n        }\r\n        while (indexB != m && b[indexB] <= cost) {\r\n            for (i in 0 until indexA) {\r\n                actualMax = max(actualMax, c[i][indexB])\r\n            }\r\n            indexB++\r\n        }\r\n        actualMax\r\n    }\r\n\r\n\r\n    var minimum = Long.MAX_VALUE\r\n    for (i in upgradedC.indices) {\r\n        val upgraded = upgradedC[i] + k.toLong()\r\n        var runs = 0L\r\n        var actual = 0L\r\n\r\n        for (j in ab.indices) {\r\n            if (ab[j] > actual) {\r\n                val haha = if (j <= i) upgradedC[j - 1] else max(upgradedC[j - 1], upgraded)\r\n                var run = (ab[j] - actual) / haha\r\n                if (run * haha != (ab[j] - actual)) run++\r\n                runs += run\r\n                actual += run * haha\r\n            }\r\n        }\r\n\r\n        minimum = min(minimum, runs)\r\n    }\r\n\r\n\r\n    println(minimum)\r\n}"
}