{
    "id": 114738247,
    "contestId": 1431,
    "creationTimeSeconds": 1619841052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "codetiger927"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 3213,
    "memoryConsumedBytes": 43110400,
    "source": "import java.util.Scanner\r\n  fun main(args:Array<String>) {\r\n    var scanner = Scanner(System.`in`)\r\n    var N = scanner.nextInt()\r\n    var M = scanner.nextInt()\r\n    var K = scanner.nextLong()\r\n    var arr = Array<LongArray>(N, {LongArray(M)})\r\n    var max = Array<LongArray>(N + 1, {LongArray(M + 1)})\r\n    var arrX = LongArray(N)\r\n    var arrY = LongArray(M)\r\n    var value = LongArray(N + M)\r\n    var costX = IntArray(N + M)\r\n    var costY = IntArray(N + M)\r\n    for (i in 0 until N)\r\n    {\r\n      arrX[i] = scanner.nextLong()\r\n    }\r\n    for (i in 0 until M)\r\n    {\r\n      arrY[i] = scanner.nextLong()\r\n    }\r\n    for (i in 0 until N)\r\n    {\r\n      for (j in 0 until M)\r\n      {\r\n        arr[i][j] = scanner.nextLong()\r\n        max[i + 1][j + 1] = Math.max(max[i][j + 1], Math.max(max[i + 1][j], arr[i][j]))\r\n      }\r\n    }\r\n    var ptrX = 0\r\n    var ptrY = 0\r\n    value[0] = arr[0][0]\r\n    for (i in 1 until N + M - 1)\r\n    {\r\n      if (ptrY >= M - 1 || (ptrX < N - 1 && arrX[ptrX + 1] <= arrY[ptrY + 1]))\r\n      {\r\n        costX[i] = ++ptrX\r\n      }\r\n      else\r\n      {\r\n        costY[i] = ++ptrY\r\n      }\r\n      //\t\t\tSystem.out.println(i + \" \" + ptrX + \" \" + ptrY + \" \" + max[ptrX + 1][ptrY + 1]);\r\n      value[i] = max[ptrX + 1][ptrY + 1]\r\n    }\r\n    var ans = 1000000000000000000L\r\n    for (i in 0 until N + M - 1)\r\n    {\r\n      var res:Long = 0\r\n      value[i] += K\r\n      var curP:Long = 0\r\n      var cur:Long = 0\r\n      for (j in 0 until N + M - 2)\r\n      {\r\n        cur = Math.max(cur, value[j])\r\n        var need:Long = 0\r\n        need = Math.max(need, arrX[costX[j + 1]])\r\n        need = Math.max(need, arrY[costY[j + 1]])\r\n        if (curP >= need) continue\r\n        val newadd = (need - curP + cur - 1) / cur\r\n        res += newadd\r\n        curP += newadd * cur\r\n      }\r\n      ans = Math.min(ans, res)\r\n      value[i] -= K\r\n    }\r\n    println(ans)\r\n  }"
}