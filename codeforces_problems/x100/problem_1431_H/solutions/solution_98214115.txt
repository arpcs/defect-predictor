{
    "id": 98214115,
    "contestId": 1431,
    "creationTimeSeconds": 1605194987,
    "relativeTimeSeconds": 3287,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "xiaowuc1"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1060,
    "memoryConsumedBytes": 5939200,
    "source": "import java.io.*\r\nimport java.util.*\r\nimport kotlin.collections.HashSet\r\n\r\n    var br: BufferedReader? = null\r\n    var pw: PrintWriter? = null\r\n    var st: StringTokenizer? = null\r\n\r\n    /*\r\nreminders:\r\nchar[] is bad\r\nint[] is good?\r\narrays are bad, use ArrayList instead\r\nglobal things must be initialized to something (explicit null)\r\n\t */\r\n    @Throws(IOException::class)\r\n    fun main(args: Array<String>) {\r\n        br = BufferedReader(InputStreamReader(System.`in`))\r\n        pw = PrintWriter(BufferedWriter(OutputStreamWriter(System.out)))\r\n        solve()\r\n        exitImmediately()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun solve() {\r\n        val r = readInt()\r\n        val c = readInt()\r\n        val inc = readInt()\r\n        val at = LongArray(r)\r\n        val bt = LongArray(c)\r\n        val dp = Array(r) { IntArray(c) }\r\n        for (i in 0 until r) at[i] = readLong()\r\n        for (i in 0 until c) bt[i] = readLong()\r\n        val allt = ArrayList<Long>()\r\n        run {\r\n            val s: MutableSet<Long> = HashSet()\r\n            for (out in at) s.add(out)\r\n            for (out in bt) s.add(out)\r\n            for (out in s) allt.add(out)\r\n            Collections.sort(allt)\r\n        }\r\n        for (i in 0 until r) {\r\n            for (j in 0 until c) {\r\n                dp[i][j] = readInt()\r\n                if (i > 0) dp[i][j] = Math.max(dp[i][j], dp[i - 1][j])\r\n                if (j > 0) dp[i][j] = Math.max(dp[i][j], dp[i][j - 1])\r\n            }\r\n        }\r\n        var ret = allt[allt.size - 1]\r\n        for (buy in allt.indices) {\r\n            var curr: Long = 0\r\n            val specialbuy = inc + dp[actualFloor(at, allt[buy])][actualFloor(bt, allt[buy])]\r\n            var currbuy = 0\r\n            var lhs = 0\r\n            var rhs = 0\r\n            var idx = 0\r\n            var t: Long = 0\r\n            while (curr < allt[allt.size - 1]) {\r\n                while (lhs + 1 < at.size && at[lhs + 1] <= curr) lhs++\r\n                while (rhs + 1 < bt.size && bt[rhs + 1] <= curr) rhs++\r\n                currbuy = Math.max(currbuy, dp[lhs][rhs])\r\n                if (curr >= allt[buy]) currbuy = Math.max(currbuy, specialbuy)\r\n                while (curr >= allt[idx]) idx++\r\n                val jump = (allt[idx] - curr + currbuy - 1) / currbuy\r\n                t += jump\r\n                curr += jump * currbuy\r\n            }\r\n            ret = Math.min(ret, t)\r\n        }\r\n        pw!!.println(ret)\r\n    }\r\n\r\n    fun actualFloor(l: LongArray, t: Long): Int {\r\n        var lhs = 0\r\n        var rhs = l.size - 1\r\n        while (lhs < rhs) {\r\n            val mid = (lhs + rhs + 1) / 2\r\n            if (l[mid] <= t) lhs = mid else rhs = mid - 1\r\n        }\r\n        return lhs\r\n    }\r\n\r\n    fun exitImmediately() {\r\n        pw!!.close()\r\n        System.exit(0)\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readInt(): Int {\r\n        return readToken().toInt()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readLong(): Long {\r\n        return readToken().toLong()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readDouble(): Double {\r\n        return readToken().toDouble()\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readLine(): String? {\r\n        val s = br!!.readLine()\r\n        if (s == null) exitImmediately()\r\n        st = null\r\n        return s\r\n    }\r\n\r\n    @Throws(IOException::class)\r\n    fun readToken(): String {\r\n        while (st == null || !st!!.hasMoreTokens()) {\r\n            st = StringTokenizer(readLine()!!.trim { it <= ' ' })\r\n        }\r\n        return st!!.nextToken()\r\n    }\r\n"
}