{
    "id": 98216795,
    "contestId": 1431,
    "creationTimeSeconds": 1605196758,
    "relativeTimeSeconds": 5058,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Fortin"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "//region TEMPLATE\r\n@file:Suppress(\"CanBeVal\")\r\n\r\nimport java.io.*;\r\nimport java.io.BufferedReader\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.math.max\r\nimport kotlin.math.min\r\nimport kotlin.math.abs\r\nimport kotlin.random.Random\r\n\r\nfun main(args: Array<String>) {\r\n    if (args.isNotEmpty() && args.first() == \"file\") {\r\n        out = PrintWriter(FileWriter(\"output.txt\"))\r\n        reader = BufferedReader(FileReader(\"input.txt\"))\r\n        do {\r\n            solve()\r\n            out.println(\"\\n\")\r\n            out.flush()\r\n        } while (reader.readLine() != null)\r\n    } else {\r\n        reader = BufferedReader(InputStreamReader(System.`in`))\r\n        out = PrintWriter(OutputStreamWriter(System.out))\r\n        solve()\r\n    }\r\n    reader.close()\r\n    out.close()\r\n}\r\n\r\nlateinit var out: PrintWriter\r\nlateinit var reader: BufferedReader\r\nvar tokenizer: StringTokenizer? = null\r\nfun read(): String {\r\n    while (tokenizer == null || !tokenizer!!.hasMoreTokens()) {\r\n        tokenizer = StringTokenizer(readLn())\r\n    }\r\n    return tokenizer!!.nextToken()\r\n}\r\n\r\nfun readInt() = read().toInt()\r\nfun readLong() = read().toLong()\r\nfun readLn() = reader.readLine()!!\r\nfun readInts() = readLn().split(\" \").map { it.toInt() }\r\nfun readInts(sz: Int) = Array(sz) { readInt() }\r\nfun readLongs() = readLn().split(\" \").map { it.toLong() }\r\nfun readLongs(sz: Int) = Array(sz) { readLong() }\r\nfun print(b: Boolean) = out.print(b)\r\nfun print(i: Int) = out.print(i)\r\nfun print(d: Double) = out.print(d)\r\nfun print(l: Long) = out.print(l)\r\nfun print(s: String) = out.print(s)\r\nfun print(message: Any?) = out.print(message)\r\nfun print(a: Array<Int>) = a.forEach { print(\"$it \") }\r\nfun <T> print(a: Array<out T>) = a.forEach { print(\"$it \") }\r\nfun <T> print(a: Collection<T>) = a.forEach { print(\"$it \") }\r\nfun println(b: Boolean) = out.println(b)\r\nfun println(i: Int) = out.println(i)\r\nfun println(d: Double) = out.println(d)\r\nfun println(l: Long) = out.println(l)\r\nfun println(s: String) = out.println(s)\r\nfun println() = out.println()\r\nfun println(message: Any?) = out.println(message)\r\nfun <T> println(a: Array<out T>) {\r\n    a.forEach { print(\"$it \") }\r\n    println()\r\n}\r\n\r\nfun println(a: IntArray) {\r\n    a.forEach { print(\"$it \") }\r\n    println()\r\n}\r\n\r\nfun <T> println(a: Collection<T>) {\r\n    a.forEach { print(\"$it \") }\r\n    println()\r\n}\r\n\r\nconst val M7 = 1000000007L\r\nconst val M9 = 1000000009L\r\nconst val MFFT = 998244353L\r\nfun zero(sz: Int) = IntArray(sz)\r\nfun zeroL(sz: Int) = LongArray(sz)\r\nfun <T> init(vararg elements: T) = elements\r\nfun VI(n: Int = 0, init: Int = 0) = MutableList(n) { init }\r\nfun VVI(n: Int = 0, m: Int = 0, init: Int = 0) = MutableList(n) { VI(m, init) }\r\nfun <T1 : Comparable<T1>, T2 : Comparable<T2>> pairCmp(): Comparator<Pair<T1, T2>> {\r\n    return Comparator { a, b ->\r\n        val res = a.first.compareTo(b.first)\r\n        if (res == 0) a.second.compareTo(b.second) else res\r\n    }\r\n}\r\n//endregion\r\n\r\nfun solve() {\r\n    var (n, m, k) = readInts(3)\r\n    var a = readLongs(n)\r\n    var b = readLongs(m)\r\n    var c = Array(n) { readInts(m) }\r\n\r\n    var q = PriorityQueue<Int>(compareBy{-it})\r\n    var i = 0\r\n    var j = 0\r\n    var sm = 0L\r\n    fun upd(){\r\n        while(i < n && a[i] <= sm){\r\n            if (j > 0){\r\n                for(z in 0 until j){\r\n                    q.add(c[i][z])\r\n                }\r\n            }\r\n            i++\r\n        }\r\n        while(j < m && b[j] <= sm){\r\n            if (i > 0){\r\n                for(z in 0 until i){\r\n                    q.add(c[z][j])\r\n                }\r\n            }\r\n            j++\r\n        }\r\n    }\r\n    upd()\r\n\r\n    sm += k\r\n    var ans = 0\r\n    while(i < n || j < m){\r\n        ans++\r\n        sm += q.remove()!!\r\n        upd()\r\n    }\r\n    println(ans)\r\n\r\n}\r\n\r\n"
}