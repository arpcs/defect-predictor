{
    "id": 98216971,
    "contestId": 1431,
    "creationTimeSeconds": 1605196894,
    "relativeTimeSeconds": 5194,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Golovanov399"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 0,
    "source": "import kotlin.math.*\r\n\r\nfun solve() {\r\n    val (n, m, k) = readLine()!!.split(' ').map(String::toInt)\r\n    val a = readLine()!!.split(' ').map(String::toLong).toLongArray()\r\n    val b = readLine()!!.split(' ').map(String::toLong).toLongArray()\r\n    var c = Array(n) { IntArray(0) }\r\n    for (i in 0 until n) {\r\n        c[i] = readLine()!!.split(' ').map(String::toInt).toIntArray()\r\n    }\r\n    var pc = c\r\n    for (i in 0 until n) {\r\n        for (j in 0 until m) {\r\n            if (i > 0) {\r\n                pc[i][j] = max(pc[i][j], pc[i - 1][j])\r\n            }\r\n            if (j > 0) {\r\n                pc[i][j] = max(pc[i][j], pc[i][j - 1])\r\n            }\r\n        }\r\n    }\r\n    var l = 0\r\n    var r = 0\r\n    while (l < n && a[l] == 0L) {\r\n        l += 1\r\n    }\r\n    while (r < n && b[r] == 0L) {\r\n        r += 1\r\n    }\r\n    if (l == n && r == m) {\r\n        println(0)\r\n        return\r\n    }\r\n    var toUnlock = LongArray(n + m - l - r) { 0L }\r\n    var mxs = IntArray(n + m - l - r) { 0 }\r\n    var ptr = 0\r\n    while (l < n || r < m) {\r\n        mxs[ptr] = pc[l - 1][r - 1]\r\n        if (l < n && r < m) {\r\n            if (a[l] < b[r]) {\r\n                toUnlock[ptr] = a[l]\r\n                l += 1\r\n            } else {\r\n                toUnlock[ptr] = b[r]\r\n                r += 1\r\n            }\r\n        } else if (l < n) {\r\n            toUnlock[ptr] = a[l]\r\n            l += 1\r\n        } else {\r\n            toUnlock[ptr] = b[r]\r\n            r += 1\r\n        }\r\n        ptr += 1\r\n    }\r\n\r\n    var ans = Long.MAX_VALUE\r\n    for (idx in toUnlock.indices) {\r\n        var cur = 0L\r\n        var raids = 0L\r\n        var mx = 0\r\n        for (i in toUnlock.indices) {\r\n            val cand = mxs[i] + (if (i == idx) k else 0)\r\n            mx = max(mx, cand)\r\n//            print(\"$cur $cand $mx, \")\r\n            if (toUnlock[i] <= cur) {\r\n                continue\r\n            }\r\n            if (mx == 0) {\r\n                raids = Long.MAX_VALUE\r\n                break\r\n            }\r\n            val tmp = (toUnlock[i] - cur + mx - 1) / mx\r\n            cur += tmp * mx\r\n            raids += tmp\r\n        }\r\n//        println()\r\n        ans = min(ans, raids)\r\n    }\r\n    println(ans)\r\n}\r\n\r\nfun main() {\r\n    val t = 1 // readLine()!!.toInt()\r\n    repeat(t) {\r\n        solve()\r\n    }\r\n}"
}