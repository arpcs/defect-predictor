{
    "id": 200572724,
    "contestId": 1431,
    "creationTimeSeconds": 1680530542,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "chappy1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1419,
    "memoryConsumedBytes": 21094400,
    "source": "import java.lang.AssertionError\r\n\r\nprivate fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n\r\nprivate fun myAssert(x: Boolean) {\r\n    if (!x) {\r\n        throw AssertionError()\r\n    }\r\n}\r\n\r\nfun main(args: Array<String>) {\r\n    var (n, m, k) = readInts()\r\n    var a = readLongs()\r\n    var b = readLongs()\r\n    var c = Array(n) {LongArray(m) {0}}\r\n    for (i in 0 until n) {\r\n        var foo = readLongs()\r\n        for (j in 0 until m) {\r\n            c[i][j] = foo[j]\r\n        }\r\n    }\r\n    for (i in 0 until n) {\r\n        for (j in 0 until m) {\r\n            if (i > 0) {\r\n                c[i][j] = maxOf(c[i][j], c[i - 1][j])\r\n            }\r\n            if (j > 0) {\r\n                c[i][j] = maxOf(c[i][j], c[i][j - 1])\r\n            }\r\n        }\r\n    }\r\n    var ans = 1e18.toLong()\r\n    fun solve(xx: Int, yy: Int, pts: Long, steps: Long, bonus: Long) {\r\n        var x = xx\r\n        var y = yy\r\n        while (x + 1 < n && a[x + 1] <= pts) {\r\n            x += 1\r\n        }\r\n        while (y + 1 < m && b[y + 1] <= pts) {\r\n            y += 1\r\n        }\r\n        if (x == n - 1 && y == m - 1) {\r\n            ans = minOf(ans, steps)\r\n            return\r\n        }\r\n        var each = maxOf(c[x][y], bonus)\r\n        var need = 1e18.toLong()\r\n        if (x + 1 < n) {\r\n            need = minOf(need, (a[x + 1] - pts + each - 1) / each)\r\n        }\r\n        if (y + 1 < m) {\r\n            need = minOf(need, (b[y + 1] - pts + each - 1) / each)\r\n        }\r\n        solve(x, y, pts + each * need, steps + need, bonus)\r\n        if (bonus == -1L) {\r\n            var each = c[x][y] + k\r\n            var need = 1e18.toLong()\r\n            if (x + 1 < n) {\r\n                need = minOf(need, (a[x + 1] - pts + each - 1) / each)\r\n            }\r\n            if (y + 1 < m) {\r\n                need = minOf(need, (b[y + 1] - pts + each - 1) / each)\r\n            }\r\n            solve(x, y, pts + each * need, steps + need, each)\r\n        }\r\n    }\r\n    solve(0, 0, 0L, 0L, -1L)\r\n    println(ans)\r\n}"
}