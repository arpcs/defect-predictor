{
    "id": 98223891,
    "contestId": 1431,
    "creationTimeSeconds": 1605202464,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "El3ageed_Abu_Shehab"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 920,
    "memoryConsumedBytes": 6553600,
    "source": "\n\nimport java.util.PriorityQueue\n\nvar n: Int = 0;\nvar k: Int = 0;\nvar m: Int = 0;\nvar a: LongArray = LongArray(0);\nvar b: LongArray = LongArray(0);\nvar c = Array(0) {IntArray(0) {0}};\n\nfun get(row:Int ,col:Int): Long{\n\tvar ans:Long = 0;\n\tvar needed: Long = 0;\n\tvar cur: Long = 0;\n\tvar Val: Long = 0;\n\tvar Score:Long = 0;\n\tvar Row = 0;\n\tvar Col = 0;\n\twhile(Row < n || Col < m){\n\t\twhile(Row < n && a[Row] <= Score) Row++;\n\t\twhile(Col < m && b[Col] <= Score) Col++;\n\t\tif(Row == n && Col == m)\n\t\t\tbreak;\n\t\tneeded = 100000000000000;\n\t\tVal = c[Row - 1][Col - 1].toLong();\n\t\tif(Row > row && Col > col){\n\t\t\tcur = (c[row][col] + k).toLong();\n\t\t\tif(cur > Val)\n\t\t\t\tVal = cur;\n\t\t}\n\t\tif(Row < n)\n\t\t\tneeded = (a[Row] - Score + Val - 1) / Val;\n\t\tif(Col < m){\n\t\t\tcur = (b[Col] - Score + Val - 1) / Val;\n\t\t\tif(cur < needed)\n\t\t\t\tneeded = cur;\n\t\t}\n\t\tans += needed;\n\t\tScore += needed * Val;\n\t}\n\treturn ans;\n\n}\n\n\nfun main(){\n\tvar tmparr = readLine()!!.split(' ');\n\tn = tmparr[0].toInt();\n\tm = tmparr[1].toInt();\n\tk = tmparr[2].toInt();\n\ttmparr = readLine()!!.split(' ');\n\ta = LongArray(n);\n\tfor(i in 0..n-1){\n\t\ta[i] = tmparr[i].toLong();\n\t}\n\ttmparr = readLine()!!.split(' ');\n\tb = LongArray(m);\n\tfor(i in 0..m-1){\n\t\tb[i] = tmparr[i].toLong();\n\t}\n\tc = Array(n) {IntArray(m) {0}};\n\tfor(i in 0..n-1){\n\t\ttmparr = readLine()!!.split(' ');\n\t\tfor(j in 0..m-1){\n\t\t\tc[i][j] = tmparr[j].toInt();\n\t\t}\n\t}\n\tfor(i in 0..n-1){\n\t\tfor(j in 0..m-1){\n\t\t\tif(i > 0 && c[i - 1][j] > c[i][j])\n\t\t\t\tc[i][j] = c[i - 1][j];\n\t\t\tif(j > 0 && c[i][j - 1] > c[i][j])\n\t\t\t\tc[i][j] = c[i][j - 1];\n\n\t\t}\n\t}\n\n\tvar curAns: Long = 0;\n\tvar ans: Long = 1000000000000000000;\n\tvar needed: Long = 0;\n\tvar cur: Long = 0;\n\tvar Val: Long = 0;\n\tvar Score:Long = 0;\n\tvar Row = 0;\n\tvar Col = 0;\n\twhile(Row < n || Col < m){\n\t\twhile(Row < n && a[Row] <= Score) Row++;\n\t\twhile(Col < m && b[Col] <= Score) Col++;\n\t\tif(Row == n && Col == m)\n\t\t\tbreak;\n\t\tneeded = 100000000000000;\n\t\tcurAns = get(Row -  1, Col - 1);\n\t\tif(curAns < ans)\n\t\t\tans = curAns;\n\t\tVal = c[Row - 1][Col - 1].toLong();\n\t\tif(Row < n)\n\t\t\tneeded = (a[Row] - Score + Val - 1) / Val;\n\t\tif(Col < m){\n\t\t\tcur = (b[Col] - Score + Val - 1) / Val;\n\t\t\tif(cur < needed)\n\t\t\t\tneeded = cur;\n\t\t}\n\t\tScore += needed * Val;\n\t}\n\tprintln(ans);\n}"
}