{
    "id": 98278477,
    "contestId": 1431,
    "creationTimeSeconds": 1605275907,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "htkb"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 1185,
    "memoryConsumedBytes": 31948800,
    "source": "import java.lang.Math.*\nimport java.util.*\n\nprivate fun readInt() = readLine()!!.toInt()\nprivate fun readLong() = readLine()!!.toLong()\nprivate fun readInts() = readLine()!!.split(\" \").map(String::toInt)\nprivate fun readLongs() = readLine()!!.split(\" \").map(String::toLong)\n\nclass Vertex(val req: Long, val score: Long)\n\nfun main(args: Array<String>) {\n    val (n, m, k) = readInts()\n    val a = readLongs()\n    val b = readLongs()\n    val matrix = Array(n) { readLongs().toLongArray() }\n    val vertices_ = ArrayList<Vertex>()\n    for (i in 0 until n) {\n        var bestJ = 0\n        for (j in 1 until m) {\n            if (a[i] < b[j]) break\n            if (matrix[i][bestJ] < matrix[i][j]) bestJ = j\n        }\n        vertices_.add(Vertex(a[i], matrix[i][bestJ]))\n    }\n    for (j in 0 until m) {\n        var bestI = 0\n        for (i in 1 until n) {\n            if (b[j] < a[i]) break\n            if (matrix[bestI][j] < matrix[i][j]) bestI = i\n        }\n        vertices_.add(Vertex(b[j], matrix[bestI][j]))\n    }\n\n    vertices_.sortWith(compareBy({ it.req }, { it.score }))\n\n    val vertices = ArrayList<Vertex>()\n    var maxScore = 0L\n    for (i in 0 until vertices_.size-1) {\n        if (vertices_[i].req < vertices_[i+1].req && vertices_[i].score > maxScore) {\n            maxScore = vertices_[i].score\n            vertices.add(vertices_[i])\n        }\n    }\n    vertices.add(vertices_.last())\n    val N = vertices.size\n    val inf = (1L).shl(60)\n    val dp = LongArray(N) { inf }\n    val dpK = LongArray(N) { inf }\n    dp[0] = 0\n    val dpScore = LongArray(N) { 0 }\n    val dpKScore = LongArray(N) { 0 }\n\n    fun bsearch(sc1: Long, sc2: Long, i: Int): Int {\n        if (sc1 + sc2 >= vertices[i].req) return i\n\n        val score = sc1 + sc2 * ((vertices[i].req - sc1 + sc2 - 1) / sc2)\n        var (ok, ng) = Pair(i, N)\n        while (abs(ok - ng) > 1) {\n            val mid = (ok + ng).shr(1)\n            if (vertices[mid].req <= score) ok = mid\n            else ng = mid\n        }\n\n        return ok\n    }\n\n    fun bsearch2(score: Long, i: Int): Int {\n        var (ok, ng) = Pair(i, N-1)\n        while (abs(ok - ng) > 1) {\n            val mid = (ok + ng).shr(1)\n            if (vertices[mid].score < score) ok = mid\n            else ng = mid\n        }\n\n        return ng\n    }\n\n    fun calc(sc1: Long, sc2: Long, req: Long): Pair<Long, Long> {\n        val run = (req - sc1 + sc2 - 1) / sc2\n        return Pair(sc1 + sc2 * run, run)\n    }\n\n    for (i in 0 until N-1) {\n        val to1 = bsearch(dpScore[i], vertices[i].score, i+1)\n        val (sc1, run1) = calc(dpScore[i], vertices[i].score, vertices[to1].req)\n        if (dp[to1] > dp[i] + run1 || dp[to1] == dp[i] + run1 && dpScore[to1] < sc1) {\n            dp[to1] = dp[i] + run1\n            dpScore[to1] = sc1\n        }\n\n        val to2 = bsearch(dpKScore[i], vertices[i].score, i+1)\n        val (sc2, run2) = calc(dpKScore[i], vertices[i].score, vertices[to2].req)\n        if (dpK[to2] > dpK[i] + run2 || dpK[to2] == dpK[i] + run2 && dpKScore[to2] < sc2) {\n            dpK[to2] = dpK[i] + run2\n            dpKScore[to2] = sc2\n        }\n\n        val to3 = bsearch(dpScore[i], vertices[i].score + k, bsearch2(vertices[i].score + k, i+1))\n        val (sc3, run3) = calc(dpScore[i], vertices[i].score + k, vertices[to3].req)\n        if (dpK[to3] > dp[i] + run3 || dpK[to3] == dp[i] + run3 && dpKScore[to3] < sc3) {\n            dpK[to3] = dp[i] + run3\n            dpKScore[to3] = sc3\n        }\n    }\n\n    println(min(dp.last(), dpK.last()))\n}\n"
}