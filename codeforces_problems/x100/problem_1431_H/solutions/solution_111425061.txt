{
    "id": 111425061,
    "contestId": 1431,
    "creationTimeSeconds": 1617060742,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "krijgertje"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 1294,
    "memoryConsumedBytes": 51814400,
    "source": "import java.util.PriorityQueue\r\n\r\nfun readLn() = readLine()!!\r\nfun readStrings() = readLn().split(\" \")\r\nfun readInts() = readStrings().map { it.toInt() }\r\nfun readLongs() = readStrings().map { it.toLong() }\r\n\r\nclass State(val want: Long, var opt: Int) {}\r\n\r\nfun run() {\r\n    val (na,nb,extra) = readInts()\r\n    val a = readLongs()\r\n    val b = readLongs()\r\n    val c = Array(na, {readInts()})\r\n    \r\n    var ai = 0\r\n    var bi = 0\r\n    var have = 0L\r\n    var opt = c[0][0]\r\n    var states = mutableListOf<State>()\r\n    while(true) {\r\n        while(ai+1<na&&a[ai+1]<=have) {\r\n            ++ai\r\n            for(i in 0..bi) opt = maxOf(opt, c[ai][i])\r\n        }\r\n        while(bi+1<nb&&b[bi+1]<=have) {\r\n            ++bi\r\n            for(i in 0..ai) opt = maxOf(opt, c[i][bi])\r\n        }\r\n        if(ai==na-1&&bi==nb-1) break\r\n        var want = minOf(if(ai+1<na) a[ai+1] else Long.MAX_VALUE,if(bi+1<nb) b[bi+1] else Long.MAX_VALUE)\r\n        states.add(State(want,opt))\r\n        have = want\r\n    }\r\n    //for(state in states) println(\"want ${state.want} with ${state.opt}\")\r\n    \r\n    var ret = Long.MAX_VALUE\r\n    for(modstate in states) {\r\n        modstate.opt += extra\r\n        have = 0L\r\n        var cur = 0L\r\n        var opt = 0\r\n        for(state in states) {\r\n            opt = maxOf(opt,state.opt)\r\n            if(have>=state.want) continue\r\n            val t = (state.want-have+opt-1)/opt\r\n            cur += t\r\n            have += t*opt\r\n        }\r\n        modstate.opt -= extra\r\n        ret = minOf(ret,cur)\r\n    }\r\n    println(ret)\r\n}\r\n\r\nfun main() {\r\n    run()\r\n}"
}