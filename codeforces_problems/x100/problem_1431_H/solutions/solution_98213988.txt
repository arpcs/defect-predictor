{
    "id": 98213988,
    "contestId": 1431,
    "creationTimeSeconds": 1605194909,
    "relativeTimeSeconds": 3209,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Geothermal"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 654,
    "memoryConsumedBytes": 30310400,
    "source": "import java.io.PrintWriter\r\nimport java.util.*\r\n\r\n@JvmField val INPUT = System.`in`\r\n@JvmField val OUTPUT = System.out\r\n\r\n@JvmField val _reader = INPUT.bufferedReader()\r\nfun readLine(): String? = _reader.readLine()\r\nfun readLn() = _reader.readLine()!!\r\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\r\nfun read(): String {\r\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\r\n    return _tokenizer.nextToken()\r\n}\r\nfun readInt() = read().toInt()\r\nfun readDouble() = read().toDouble()\r\nfun readLong() = read().toLong()\r\nfun readStrings(n: Int) = List(n) { read() }\r\nfun readLines(n: Int) = List(n) { readLn() }\r\nfun readInts(n: Int) = List(n) { read().toInt() }\r\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\r\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\r\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\r\nfun readLongs(n: Int) = List(n) { read().toLong() }\r\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\r\n\r\n@JvmField val _writer = PrintWriter(OUTPUT, false)\r\ninline fun output(block: PrintWriter.() -> Unit) { _writer.apply(block).flush() }\r\n\r\nfun main(args: Array<String>) {\r\n    var (N, M) = readInts(2)\r\n    var K = readLong()\r\n    var A = readLongArray(N)\r\n    var B = readLongArray(M)\r\n    var C = Array(N) {LongArray(M)}\r\n    for (i in 0 until N) {\r\n        C[i] = readLongArray(M)\r\n    }\r\n\r\n    var vals = ArrayList<Long>()\r\n    var costs = ArrayList<Long>()\r\n    vals.add(C[0][0])\r\n    costs.add(0L)\r\n    var a = 1\r\n    var b = 1\r\n    while (a < N || b < M) {\r\n        var na = Long.MAX_VALUE\r\n        var nb = Long.MAX_VALUE\r\n        if (a < N) {\r\n            na = A[a]\r\n        }\r\n        if (b < M) {\r\n            nb = B[b]\r\n        }\r\n        if (na < nb) {\r\n            var best = 0L\r\n            for (i in 0 until b) {\r\n                best = maxOf(best, C[a][i])\r\n            }\r\n            if (best > vals.get(vals.size-1)) {\r\n                vals.add(best)\r\n                costs.add(A[a])\r\n            }\r\n            a++\r\n        } else {\r\n            var best = 0L\r\n            for (i in 0 until a) {\r\n                best = maxOf(best, C[i][b])\r\n            }\r\n            if (best > vals.get(vals.size-1)) {\r\n                vals.add(best)\r\n                costs.add(B[b])\r\n            }\r\n            b++\r\n        }\r\n    }\r\n    vals.add(0)\r\n    costs.add(maxOf(A[N-1], B[M-1]))\r\n    var ans = Long.MAX_VALUE\r\n    for (it in 0 until vals.size-1) {\r\n        var p = 1L\r\n        var sco = 0L\r\n        var mov = 0L\r\n        for (i in 0 until vals.size) {\r\n            if (sco < costs[i]) {\r\n                var cnt = (costs[i] - sco + p-1) / p\r\n                sco += p * cnt\r\n                mov += cnt\r\n            }\r\n            var cur = vals[i]\r\n            if (it == i) cur += K\r\n            p = maxOf(p, cur)\r\n        }\r\n        ans = minOf(ans, mov)\r\n    }\r\n    println(ans)\r\n}\r\n\r\n"
}