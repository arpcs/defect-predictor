{
    "id": 165442426,
    "contestId": 1706,
    "creationTimeSeconds": 1658590381,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "Maillew"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 18432000,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <fstream>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n//typedef tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> os;\r\n\r\ntypedef long long ll;\r\n\r\ntypedef long double ld;\r\ntypedef pair<int,int> pii;\r\nbool DEBUG = 1;\r\n#define log2(x) ((x==0)? 0:63 - __builtin_clzll(x))\r\n#define pb push_back\r\n#define deb(x) if(DEBUG) cout<<#x<<\" \" <<x<<\"\\n\";\r\n#define ms(x, y) memset(x, y, sizeof x)\r\n#define popcount __builtin_popcount\r\n#define all(v) v.begin(), v.end()\r\n\r\nconst int inf=0x3f3f3f3f; const ll LLINF=0x3f3f3f3f3f3f3f3f;\r\ninline ll gcd(ll a, ll b) {return b == 0 ? a : gcd(b, a % b);}\r\ninline ll lcm(ll a, ll b) { return a * b / gcd(a, b);}\r\ntemplate<typename... T> void deb2(T&&... args){ if(DEBUG) ((cout<<args<<\" \"), ...); if(DEBUG) cout<<\"\\n\";}\r\n\r\nconst ll mod = 1e9+7;\r\nstruct tri{\r\n    ll x,y,z;\r\n    bool operator<(const tri &one)const{\r\n        if(x==one.x) return y<one.y;\r\n        return x<one.x;\r\n    }//pqs are backwards\r\n};\r\nll fpow(ll a, ll b){\r\n    if (b == 0) return 1;\r\n    ll res = fpow(a, b / 2)%mod;\r\n    if (b % 2) return ((res * res)%mod * a)%mod;\r\n    else return (res * res)%mod;\r\n}\r\n\r\n//////////\r\nconst int maxn = 2e5+10;\r\nint n;\r\nint ans[maxn];\r\npii edges[maxn];\r\n\r\nstruct DSU{//uses 1-based indexing\r\n    vector<int> par;\r\n    vector<vector<int>> nodes;\r\n    int n;\r\n    void init(int _n){\r\n        n = _n;\r\n        par.resize(n+1);\r\n        nodes.resize(n+1);\r\n        for(int i = 0; i<=n; i++){\r\n            par[i] = i;\r\n            nodes[i].pb(i);\r\n        }\r\n    }\r\n    int fd(int a){\r\n        if(par[a]==a) return a;\r\n        return par[a] = fd(par[a]);\r\n    }\r\n    void join(int x, int y){\r\n        assert(0<=x && x<=n);\r\n        assert(0<=y && y<=n);\r\n\r\n        int a = fd(x), b = fd(y);\r\n        if(a==b) return;\r\n\r\n        if(nodes[a].size()<nodes[b].size()) swap(a,b);\r\n        for(int e: nodes[b]){\r\n            nodes[a].pb(e);\r\n        }\r\n        nodes[b].clear();\r\n        par[b] = a;\r\n    }\r\n    bool same(int a, int b){\r\n        assert(0<=a && a<=n);\r\n        assert(0<=b && b<=n);\r\n        return fd(a) == fd(b);\r\n    }\r\n    int size(int a){\r\n        assert(0<=a && a<=n);\r\n        return nodes[fd(a)].size();\r\n    }\r\n    vector<vector<int>> groups(){\r\n        vector<int> lead(n+1), g(n+1);\r\n        for(int i= 1;i<= n; i++){\r\n            lead[i] = fd(i);\r\n            g[lead[i]]++;\r\n        }\r\n        vector<vector<int>>ret(n+1);\r\n        for(int i= 1; i <=n;i++){\r\n            ret[i].reserve(g[i]);\r\n        }\r\n        for(int i = 1; i <=n; i++){\r\n            ret[lead[i]].push_back(i);\r\n        }\r\n        ret.erase(remove_if(ret.begin(), ret.end(),[&](const vector<int>& v) {return v.empty();}), ret.end());\r\n        return ret;\r\n    }\r\n};\r\n\r\nstruct SegTree{//point assignment, range min query\r\n    vector<ll> seg;\r\n    int n;\r\n    void init(int _n){\r\n        n =_n;\r\n        seg.resize(4*(n+10));\r\n    }\r\n    void updd(int l, int r, int pos, ll v, int ind){\r\n        if(l == r && pos == r){\r\n            seg[ind] = v;\r\n            return;\r\n        }\r\n        int mid = (l+r)/2;\r\n        if(pos<=mid) updd(l,mid,pos,v,2*ind);\r\n        else updd(mid+1,r,pos,v,2*ind+1);\r\n        seg[ind] = max(seg[2*ind],seg[2*ind+1]);\r\n    }\r\n    ll queryy(int l, int r, int li, int ri, int ind){\r\n        if(ri<l || r<li) return (ll)0;\r\n        if(li<=l && r<=ri){\r\n            return seg[ind];\r\n        }\r\n        int mid = (l+r)/2;\r\n        return max(queryy(l,mid,li,ri,2*ind),queryy(mid+1,r,li,ri,2*ind+1));\r\n    }\r\n    void upd(int pos,ll v){\r\n        updd(1,n,pos,v,1);\r\n    }\r\n    ll query(int l, int r){\r\n        return queryy(1,n,l,r,1);\r\n    }\r\n};\r\nvoid solve(){\r\n    int n,m,q; cin>>n>>m>>q;\r\n\r\n    for(int i =1; i<=m; i++){\r\n        cin>>edges[i].first>>edges[i].second;\r\n    }\r\n    //hint: f(i) = min edges to join i and i+1\r\n        /*\r\n            how to get f(i)?\r\n\r\n            say that we have two components? small to large\r\n                iterate through the nodes in the small component, check if they can connect with i+1 or i-1\r\n                nlogn\r\n        */\r\n    for(int i =1; i<n; i++) ans[i] = 1e9;\r\n\r\n    DSU dsu; dsu.init(n);\r\n    for(int i =1; i<=m; i++){\r\n        auto [a,b] = edges[i];\r\n        a = dsu.fd(a), b = dsu.fd(b);\r\n        if(a==b) continue;\r\n        if(dsu.size(a)>dsu.size(b)) swap(a,b);\r\n        vector<int> tmp = dsu.nodes[a];\r\n        dsu.join(a,b);//a gets cleared after merge\r\n\r\n        for(int e: tmp){\r\n            if(e>1){\r\n                if(dsu.same(e-1,e)) ans[e-1] = min(ans[e-1], i);\r\n            }\r\n            if(e<n){\r\n                if(dsu.same(e,e+1)) ans[e] = min(ans[e],i);\r\n            }\r\n        }\r\n    }\r\n    SegTree seg; seg.init(n);\r\n    for(int i =1; i<n; i++){\r\n        seg.upd(i,ans[i]);\r\n    }\r\n    while(q--){\r\n        int a,b; cin>>a>>b;\r\n        if(a==b) cout<<0<<\" \";\r\n        else cout<<seg.query(a,b-1)<<\" \";\r\n    }\r\n    cout<<\"\\n\";\r\n}\r\n\r\nsigned main(){\r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    int t; cin>>t;\r\n    while(t--) solve();\r\n\r\n\r\n}\r\n\r\n\r\n",
    "defect_evaluation_v4": {
        "good solution": 60,
        "wrong solution": 35,
        "compilation error": 5,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 5,
        "brute force": 5,
        "graphs": 20,
        "sortings": 5,
        "search": 0,
        "trees": 5,
        "strings": 0,
        "number theory": 5,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 10,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 30,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 5,
        "self-documenting": 0,
        "complex": 0,
        "readable": 10,
        "well-named": 5,
        "efficient": 10,
        "reusable": 0,
        "documented": 5,
        "good error-handling": 5,
        "good solution": 30,
        "compilation error": 0,
        "runtime error": 0
    }
}