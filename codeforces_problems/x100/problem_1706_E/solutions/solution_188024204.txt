{
    "id": 188024204,
    "contestId": 1706,
    "creationTimeSeconds": 1672917066,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "YYZNB"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 27238400,
    "source": "// LUOGU_RID: 98761507\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=200005;\r\nint T,N,NN,M,Q,lnk[maxn],cnt,fa[maxn],Fa[maxn][19],Rl[maxn],Dep[maxn];\r\nstruct node{\r\n\tint L,R,w;\r\n}tree[400005];\r\nstruct Edge{\r\n\tint to,nex;\r\n}E[100005];\r\nint read(){\r\n\tint ret=0,f=1;char ch=getchar();\r\n\twhile(!isdigit(ch)){if(ch=='-') f=-f;ch=getchar();}\r\n\twhile(isdigit(ch)) ret=(ret<<3)+(ret<<1)+(ch&15),ch=getchar();\r\n\treturn ret*f;\r\n}\r\nvoid Clear(){\r\n\tfor(int i=1;i<=NN;i++) lnk[i]=Dep[i]=0;\r\n\tfor(int i=1;i<=cnt;i++) E[i]=E[0];\r\n\tcnt=0; \r\n}\r\nint Get_Fa(int x){return x==fa[x]?x:fa[x]=Get_Fa(fa[x]);}\r\nint LCA(int x,int y){\r\n\tif(Dep[x]<Dep[y]) swap(x,y);\r\n\tfor(int i=18;i>=0;i--)\r\n\t if(Dep[Fa[x][i]]>=Dep[y]) x=Fa[x][i];\r\n\tif(Dep[Fa[x][0]]>=Dep[y]) x=Fa[x][0];\r\n\tfor(int i=18;i>=0;i--)\r\n\t if(Fa[x][i]!=Fa[y][i]) x=Fa[x][i],y=Fa[y][i];\r\n\tif(x!=y) x=Fa[x][0],y=Fa[y][0];\r\n\treturn x; \r\n} \r\ntemplate<typename Tp>void ExMax(Tp &x,Tp y){if(y>x) x=y;}\r\nvoid build(int root,int L,int R){\r\n\ttree[root].L=L,tree[root].R=R;\r\n\tif(L==R) return tree[root].w=Rl[LCA(L,L+1)],void();\r\n\tint Mid=L+R>>1;\r\n\tbuild(root<<1,L,Mid),build(root<<1|1,Mid+1,R);\r\n\ttree[root].w=max(tree[root<<1].w,tree[root<<1|1].w);\r\n}\r\nint query(int root,int L,int R){\r\n\tif(L>R) return 0;\r\n\tif(L<=tree[root].L&&tree[root].R<=R) return tree[root].w;\r\n\tint Ret=0;\r\n\tif(tree[root<<1  ].R>=L) ExMax(Ret,query(root<<1  ,L,R));\r\n\tif(tree[root<<1|1].L<=R) ExMax(Ret,query(root<<1|1,L,R));\r\n\treturn Ret;\r\n}\r\nvoid add_e(int x,int y){E[++cnt]=(Edge){y,lnk[x]};lnk[x]=cnt;}\r\nvoid DFS(int root){\r\n\tDep[root]=Dep[Fa[root][0]]+1;\r\n\tfor(int j=lnk[root];j;j=E[j].nex)\r\n\t DFS(E[j].to);\r\n}\r\nvoid Get_Ans(){\r\n\tN=read(),M=read(),Q=read(),NN=N;\r\n\tfor(int i=1;i<=N;i++) fa[i]=i;\r\n\tfor(int i=1;i<=M;i++){\r\n\t\tint x=read(),y=read();\r\n\t\tint fx=Get_Fa(x),fy=Get_Fa(y);\r\n\t\tif(fx!=fy){\r\n\t\t\tNN++;\r\n\t\t\tfa[fx]=fa[fy]=fa[NN]=NN;\r\n\t\t\tFa[fx][0]=Fa[fy][0]=NN;Rl[NN]=i;\r\n\t\t\tadd_e(NN,fx),add_e(NN,fy);\r\n\t\t}\r\n\t}\r\n\tfor(int j=1;j<19;j++)\r\n\tfor(int i=1;i<=NN;i++)\r\n\t Fa[i][j]=Fa[Fa[i][j-1]][j-1];\r\n\tDFS(NN);\r\n\tbuild(1,1,N-1);\r\n\twhile(Q--){\r\n\t\tint L=read(),R=read();\r\n\t\tprintf(\"%d \",query(1,L,R-1));\r\n\t}\r\n\tprintf(\"\\n\");\r\n}\r\nint main(){\r\n\tT=read();\r\n\twhile(T--) Clear(),Get_Ans();\r\n\treturn 0;\r\n}"
}