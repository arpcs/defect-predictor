{
    "id": 175170009,
    "contestId": 1706,
    "creationTimeSeconds": 1665251364,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "vladut_piele"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 5632000,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define int long long\r\n\r\nusing namespace std;\r\n\r\nconst int nmax = 100000;\r\n\r\nint t;\r\nint n, m, q;\r\nint tata[nmax + 5], dim[nmax + 5];\r\nint f[nmax + 5];\r\nint aint[4 * nmax + 5];\r\n\r\nint tata_multime(int x)\r\n{\r\n    if(tata[x] == x)\r\n    {\r\n        return tata[x];\r\n    }\r\n    return tata[x] = tata_multime(tata[x]);\r\n}\r\n\r\nvoid unire(int x, int y)\r\n{\r\n    x = tata_multime(x);\r\n    y = tata_multime(y);\r\n    if(dim[x] < dim[y])\r\n    {\r\n        swap(x, y);\r\n    }\r\n    dim[x] += dim[y];\r\n    tata[y] = x;\r\n}\r\n\r\nvoid build(int nod, int st, int dr)\r\n{\r\n    if(st == dr)\r\n    {\r\n        aint[nod] = f[st];\r\n        return ;\r\n    }\r\n    int mid = (st + dr) >> 1;\r\n    build(2 * nod, st, mid);\r\n    build(2 * nod + 1, mid + 1, dr);\r\n}\r\n\r\nint query(int nod, int st, int dr, int l, int r)\r\n{\r\n    if(st > dr)\r\n    {\r\n        return 0;\r\n    }\r\n    if(st >= l && dr <= r)\r\n    {\r\n        return aint[nod];\r\n    }\r\n    if(st > r || dr < l)\r\n    {\r\n        return 0;\r\n    }\r\n    int mid = (st + dr) >> 1;\r\n    return max(query(2 * nod, st, mid, l, r),\r\n               query(2 * nod + 1, mid + 1, dr, l, r));\r\n}\r\n\r\nsigned main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cin >> t;\r\n    while(t--)\r\n    {\r\n        cin >> n >> m >> q;\r\n        for(int i = 1; i <= n; i ++)\r\n        {\r\n            f[i] = 0;\r\n            tata[i] = i;\r\n            dim[i] = 1;\r\n        }\r\n        for(int i = 1; i <= m; i ++)\r\n        {\r\n            int u, v;\r\n            cin >> u >> v;\r\n            unire(u, v);\r\n            if(tata_multime(u) == tata_multime(u - 1) && !f[u])\r\n            {\r\n                f[u] = i;\r\n            }\r\n            if(tata_multime(v) == tata_multime(v - 1) && !f[v])\r\n            {\r\n                f[v] = i;\r\n            }\r\n        }\r\n        build(1, 1, n);\r\n        while(q--)\r\n        {\r\n            int l, r;\r\n            cin >> l >> r;\r\n            if(l == r)\r\n            {\r\n                cout << 0 << ' ';\r\n            }\r\n            else\r\n            {\r\n                cout << query(1, 1, n, l + 1, r) << ' ';\r\n            }\r\n        }\r\n        cout << '\\n';\r\n    }\r\n    return 0;\r\n}\r\n"
}