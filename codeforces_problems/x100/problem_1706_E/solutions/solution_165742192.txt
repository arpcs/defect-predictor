{
    "id": 165742192,
    "contestId": 1706,
    "creationTimeSeconds": 1658812173,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "wonderful_trip"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 23244800,
    "source": "/**\r\n *    author:  longvu\r\n *    created: 07/26/22 10:46:24\r\n**/\r\n#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define sz(x) ((int)x.size())\r\n#define all(x) (x).begin(), (x).end()\r\nconst int INF = numeric_limits<int>::max();\r\nconst int nax = (int)(200091);\r\nconst int mod = 1e9 + 7;\r\n\r\ntemplate<class X, class Y>\r\nbool maximize(X& x, const Y y) {\r\n    if (y > x) {x = y; return true;}\r\n    return false;\r\n}\r\ntemplate<class X, class Y>\r\nbool minimize(X& x, const Y y) {\r\n    if (y < x) {x = y; return true;}\r\n    return false;\r\n}\r\n\r\n#define Fi first\r\n#define Se second\r\n\r\nvector<pair<int, int>> segment[nax], query[nax];\r\nstruct DSU {\r\n    int par[nax], subsz[nax], mn[nax], mx[nax];\r\n    void reseter(int _n) {\r\n        for (int i = 1; i <= _n; ++i) {\r\n            par[i] = mn[i] = mx[i] = i;\r\n            subsz[i] = 1;\r\n        }\r\n    }\r\n\r\n    int find(int u) {\r\n        return par[u] = (u == par[u] ? u : find(par[u]));\r\n    }\r\n\r\n    bool join(int u, int v, int idx) {\r\n        u = find(u); v = find(v);\r\n        if (u == v) {\r\n            return false;\r\n        }\r\n        if (v < u) {\r\n            swap(u, v);\r\n        }\r\n        par[v] = u;\r\n        subsz[u] += subsz[v];\r\n        minimize(mn[u], mn[v]);\r\n        maximize(mx[u], mx[v]);\r\n        if (subsz[u] == mx[u] - mn[u] + 1) {\r\n            segment[mn[u]].push_back({ -1, idx});\r\n            segment[mx[u]].push_back({mn[u], idx});\r\n        }\r\n        return true;\r\n    }\r\n};\r\n\r\nstruct Fenwick_tree {\r\n    int n;\r\n    multiset<int> BIT[nax];\r\n    void reseter(int _n) {\r\n        n = _n;\r\n        for (int i = 1; i <= n; ++i) {\r\n            BIT[i].clear();\r\n        }\r\n    }\r\n\r\n    void updateadd(int idx, int val) {\r\n        assert(idx);\r\n        for (int i = idx; i <= n; i += i & (-i)) {\r\n            BIT[i].insert(val);\r\n        }\r\n    }\r\n\r\n    void updatesub(int idx, int val) {\r\n        assert(idx);\r\n        for (int i = idx; i <= n; i += i & (-i)) {\r\n            BIT[i].erase(BIT[i].find(val));\r\n        }\r\n    }\r\n\r\n    int get(int r) {\r\n        int res = INF;\r\n        for (int i = r; i > 0; i -= i & (-i)) {\r\n            if (!BIT[i].empty()) {\r\n                minimize(res, *BIT[i].begin());\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n};\r\n\r\nint ans[nax];\r\nDSU dsu;\r\nFenwick_tree fen;\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int tt;\r\n    cin >> tt;\r\n    while (tt--) {\r\n        int n, m, q;\r\n        cin >> n >> m >> q;\r\n        dsu.reseter(n);\r\n        for (int i = 1; i <= n; ++i) {\r\n            segment[i].clear();\r\n            query[i].clear();\r\n        }\r\n        for (int i = 1; i <= q; ++i) {\r\n            ans[i] = 0;\r\n        }\r\n        for (int i = 1; i <= m; ++i) {\r\n            int u, v;\r\n            cin >> u >> v;\r\n            dsu.join(u, v, i);\r\n        }\r\n        for (int i = 1; i <= q; ++i) {\r\n            int x, y;\r\n            cin >> x >> y;\r\n            if (x != y) {\r\n                query[y].push_back({x, i});\r\n            }\r\n        }\r\n        fen.reseter(n);\r\n        for (int i = 1; i <= n; ++i) {\r\n            for (auto v : query[i]) {\r\n                ans[v.Se] = fen.get(v.Fi);\r\n            }\r\n            for (auto v : segment[i]) {\r\n                if (v.Fi != -1) {\r\n                    fen.updatesub(v.Fi, v.Se);\r\n                } else {\r\n                    fen.updateadd(i, v.Se);\r\n                }\r\n            }\r\n        }\r\n        for (int i = 1; i <= q; ++i) {\r\n            cout << ans[i] <<  \" \";\r\n        }\r\n        cout << '\\n';\r\n    }\r\n    return 0;\r\n}",
    "defect_evaluation_v4": {
        "good solution": 90,
        "wrong solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 0,
        "sortings": 0,
        "search": 0,
        "trees": 15,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 20,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 75,
        "self-documenting": 70,
        "complex": 25,
        "readable": 60,
        "well-named": 75,
        "efficient": 10,
        "reusable": 15,
        "documented": 80,
        "good error-handling": 10,
        "good solution": 5,
        "compilation error": 0,
        "runtime error": 0
    }
}