{
    "id": 198338354,
    "contestId": 1706,
    "creationTimeSeconds": 1679304968,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "smunteanu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 5632000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int nmax = 2e5 + 7;\r\nconst int inf = 0x3f3f3f3f;\r\n\r\nint n, m, q;\r\npair<int, int> edges[nmax];\r\nint con[nmax];\r\n\r\nnamespace DSU {\r\n  \r\n  int par[nmax];\r\n  int weight[nmax];\r\n  \r\n  void init(int n) {\r\n    for (int i = 1; i <= n; i++) {\r\n      par[i] = i;\r\n      weight[i] = 1;\r\n    }\r\n  }\r\n\r\n  int find(int u) {\r\n    if (u == par[u]) return u;\r\n    return par[u] = find(par[u]);\r\n  }\r\n\r\n  void unite(int u, int v) {\r\n    u = find(u);\r\n    v = find(v);\r\n    if (u == v) return;\r\n    if (weight[u] < weight[v]) swap(u, v);\r\n    weight[u] += weight[v];\r\n    par[v] = u;\r\n  }\r\n\r\n};\r\n\r\n\r\nnamespace AINT {\r\n\r\n  int aint[nmax * 2];\r\n\r\n  void build(int b, int e, int i, const int* init) {\r\n    if (b == e) {aint[i] = init[b]; return;}\r\n    int m = (b + e) / 2;\r\n    build(b, m, i * 2 + 1, init);\r\n    build(m + 1, e, i * 2 + 2, init);\r\n    aint[i] = max(aint[i * 2 + 1], aint[i * 2 + 2]);\r\n  }\r\n\r\n  int query(int b, int e, int i, int l, int r) {\r\n    if (l <= b && e <= r) return aint[i];\r\n    int m = (b + e) / 2;\r\n    if (r <= m) return query(b, m, i * 2 + 1, l, r);\r\n    if (l > m) return query(m + 1, e, i * 2 + 2, l, r);\r\n    return max(query(b, m, i * 2 + 1, l, r), query(m + 1, e, i * 2 + 2, l, r));\r\n  }\r\n};\r\n\r\n\r\nvoid solve() {\r\n  \r\n  cin >> n >> m >> q;\r\n  for (int i = 1; i <= n; i++) con[i] = inf;\r\n  DSU::init(n);\r\n\r\n  for (int i = 1; i <= m; i++) {\r\n    int u, v;\r\n    cin >> u >> v;\r\n    edges[i] = {u, v};\r\n    DSU::unite(u, v);\r\n    if (u < n && con[u] == inf && DSU::find(u) == DSU::find(u + 1)) con[u] = i;\r\n    if (v < n && con[v] == inf && DSU::find(v) == DSU::find(v + 1)) con[v] = i;\r\n    if (u > 1 && con[u - 1] == inf && DSU::find(u) == DSU::find(u - 1)) con[u - 1] = i;\r\n    if (v > 1 && con[v - 1] == inf && DSU::find(v) == DSU::find(v - 1)) con[v - 1] = i;\r\n  }\r\n\r\n  AINT::build(1, n, 0, con);\r\n\r\n  while (q--) {\r\n    int a, b;\r\n    cin >> a >> b;\r\n    cout << (a == b ? 0 : AINT::query(1, n, 0, a, b - 1)) << ' ';\r\n  }\r\n  cout << '\\n';\r\n\r\n\r\n\r\n\r\n}\r\n\r\nint main() {\r\n\r\n  #ifdef LOCAL\r\n  freopen(\"file.in\", \"r\", stdin);\r\n  #endif\r\n\r\n  ios_base::sync_with_stdio(false), cin.tie(NULL);\r\n\r\n  int t = 1;\r\n  cin >> t;\r\n  while (t--) {\r\n    solve();\r\n  }\r\n\r\n}\r\n"
}