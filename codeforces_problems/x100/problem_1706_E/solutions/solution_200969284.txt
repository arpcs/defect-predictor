{
    "id": 200969284,
    "contestId": 1706,
    "creationTimeSeconds": 1680782590,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "_C_O_D_E_F_O_R_C_E_S_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "# include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n# define mod 998244353\r\ntypedef long long int ll;\r\n\r\nint fa[100000+10];\r\ntypedef struct\r\n{\r\n    int b,e,val;\r\n\r\n} xinxi;\r\nxinxi s[1000000+10];\r\nint f[1000000+10],nex[1000000+10],len;\r\nint ans[100000+10][31],maxx[100000+10][31];\r\nint dep[100000+10];\r\nvoid add(int x,int y,int w)\r\n{\r\n    s[len].b=x;\r\n    s[len].e=y;\r\n    s[len].val=w;\r\n    nex[len]=f[x];\r\n    f[x]=len;\r\n    len++;\r\n}\r\nint getf(int x)\r\n{\r\n    if(x==fa[x])\r\n        return fa[x];\r\n    else\r\n    {\r\n        fa[x]=getf(fa[x]);\r\n        return fa[x];\r\n    }\r\n}\r\nstruct node\r\n{\r\n    int b,e,val;\r\n};\r\nstruct node ss[1000000+10];\r\nbool cmp(struct node x, struct node y)\r\n{\r\n    return x.val<y.val;\r\n}\r\n\r\nvoid dfs(int now,int pre)\r\n{\r\n    int x=f[now];\r\n\r\n    dep[now]=dep[pre]+1;\r\n    while(x!=-1)\r\n    {\r\n        int j=s[x].e;\r\n\r\n        if(j==pre)\r\n        {\r\n            x=nex[x];\r\n            continue;\r\n        }\r\n\r\n        ans[j][0]=now;\r\n        maxx[j][0]=s[x].val;\r\n\r\n        dfs(j,now);\r\n\r\n        x=nex[x];\r\n\r\n    }\r\n}\r\nint temp=0;\r\nvoid swim(int &x,int h)\r\n{\r\n    for(int i=0;(1<<i)<=h;i++)\r\n    {\r\n        if(h&(1<<i))\r\n        {\r\n           temp=max(temp,maxx[x][i]);\r\n           x=ans[x][i];\r\n        }\r\n\r\n    }\r\n}\r\n\r\nint lca(int x,int y)\r\n{\r\n    temp=0;\r\n    if(dep[x]<dep[y])\r\n        swap(x,y);\r\n    int cha=dep[x]-dep[y];\r\n    swim(x,cha);\r\n\r\n    if(x==y)\r\n        return temp;\r\n\r\n    for(int i=log2(n);i>=0;i--)\r\n    {\r\n        if(ans[x][i]!=ans[y][i])\r\n        {\r\n            temp=max(temp,maxx[x][i]);\r\n            temp=max(temp,maxx[y][i]);\r\n\r\n            x=ans[x][i];\r\n            y=ans[y][i];\r\n        }\r\n    }\r\n\r\n    return max(maxx[y][0],max(temp,maxx[x][0]));\r\n\r\n\r\n}\r\n\r\nint tree[100000*4+10];\r\n\r\nvoid build(int root,int l,int r)\r\n{\r\n    if(l==r)\r\n    {\r\n        tree[root]=lca(l-1,l);\r\n\r\n        return ;\r\n    }\r\n    int mid=(l+r)>>1;\r\n    build(root<<1,l,mid);\r\n    build(root<<1|1,mid+1,r);\r\n\r\n    tree[root]=max(tree[root<<1],tree[root<<1|1]);\r\n}\r\n\r\nint getmaxx(int root,int l,int r,int L,int R)\r\n{\r\n\r\n    if(L<=l&&r<=R)\r\n    {\r\n        return tree[root];\r\n    }\r\n\r\n    int mid=(l+r)>>1;\r\n    int ans=0;\r\n\r\n    if(L<=mid)\r\n        ans=max(ans,getmaxx(root<<1,l,mid,L,R));\r\n    if(R>mid)\r\n        ans=max(ans,getmaxx(root<<1|1,mid+1,r,L,R));\r\n\r\n    return ans;\r\n}\r\nint main ()\r\n{\r\n\r\n\r\n\r\n    int t;\r\n    cin>>t;\r\n    memset(f,-1,sizeof(f));\r\n\r\n    while(t--)\r\n    {\r\n\r\n        int n,m,q;\r\n        cin>>n>>m>>q;\r\n        len=0;\r\n\r\n        for(int i=1; i<=m; i++)\r\n        {\r\n            int x,y;\r\n            cin>>x>>y;\r\n            ss[i].b=x;\r\n            ss[i].e=y;\r\n            ss[i].val=i;\r\n        }\r\n\r\n\r\n        for(int i=1; i<=n; i++)\r\n        {\r\n            fa[i]=i;\r\n            dep[i]=0;\r\n            for(int j=0;j<=30;j++)\r\n            {\r\n                ans[i][j]=0;\r\n                maxx[i][j]=0;\r\n            }\r\n        }\r\n        for(int i=1; i<=m; i++)\r\n        {\r\n            int t1=getf(ss[i].b),t2=getf(ss[i].e);\r\n            if(t1==t2)\r\n                continue;\r\n            add(ss[i].b,ss[i].e,ss[i].val);\r\n            add(ss[i].e,ss[i].b,ss[i].val);\r\n            fa[t2]=t1;\r\n\r\n        }\r\n\r\n\r\n       for(int i=1;i<=n;i++)\r\n       {\r\n           if(!dep[i])\r\n           {\r\n               dep[i]=1;\r\n               dfs(i,0);\r\n           }\r\n       }\r\n\r\n        for(int i=1;i<=n;i++)\r\n        {\r\n            for(int j=1;j<=30;j++)\r\n            {\r\n                maxx[i][j]=max(maxx[i][j-1],maxx[ans[i][j-1]][j-1]);\r\n                ans[i][j]=ans[ans[i][j-1]][j-1];\r\n            }\r\n        }\r\n\r\n\r\n        build(1,2,n);\r\n\r\n        while(q--)\r\n        {\r\n\r\n            int l,r;\r\n            cin>>l>>r;\r\n            if(l==r)\r\n            {\r\n                cout<<0<<\" \";\r\n            }\r\n            else\r\n            {\r\n                cout<<getmaxx(1,2,n,l+1,r)<<\" \";\r\n            }\r\n        }\r\n\r\n        cout<<endl;\r\n\r\n        for(int i=0; i<=len+10; i++)\r\n        {\r\n            f[i]=-1;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
}