{
    "id": 165387990,
    "contestId": 1706,
    "creationTimeSeconds": 1658554789,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "Casio991ms"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 498,
    "memoryConsumedBytes": 62873600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define pii pair<int, int>\r\n#define ll long long\r\n#define pll pair<ll, ll>\r\n#define ff first\r\n#define ss second\r\n#define show(x) cout << #x << \": \" << x << \"; \"\r\n#define MOD 1000000007\r\n#define MAXN 100005\r\n\r\nint leader[MAXN];\r\nset<int> st[MAXN];\r\nvector<int> adj[MAXN];\r\nint arr[MAXN];\r\nint Log[MAXN], sparse[MAXN][20];\r\n\r\nint Find(int a)\r\n{\r\n    if(leader[a] == a)\r\n        return a;\r\n    else\r\n        return Find(leader[a]);\r\n}\r\n\r\nvoid Union(int a, int b, int k)\r\n{\r\n    a = Find(a);\r\n    b = Find(b);\r\n\r\n    if(a == b)\r\n        return;\r\n\r\n    if(st[a].size() > st[b].size())\r\n        swap(a, b);\r\n\r\n    for(auto u : st[a])\r\n    {\r\n        if(st[b].find(u+1) != st[b].end())\r\n            arr[u] = k;\r\n        if(st[b].find(u-1) != st[b].end())\r\n            arr[u-1] = k;\r\n    }\r\n\r\n    for(auto u : st[a])\r\n        st[b].insert(u);\r\n\r\n    leader[a] = b;\r\n}\r\n\r\nint getMin(int a, int b)\r\n{\r\n    if(a > b)\r\n    return 0;\r\n\r\n    int len = Log[b - a + 1];\r\n\r\n    return max(sparse[a][len], sparse[b - (1<<len)+1][len]);\r\n}\r\n\r\nvoid solve(int caseno)\r\n{\r\n    int n, m, q, a, b, i, j;\r\n\r\n    cin >> n >> m >> q;\r\n\r\n    for(i = 1; i <= n; i++)\r\n    {\r\n        leader[i] = i;\r\n        st[i].clear();\r\n        st[i].insert(i);\r\n        adj[i].clear();\r\n        arr[i] = 0;\r\n    }\r\n\r\n    for(i = 1; i <= m; i++)\r\n    {\r\n        cin >> a >> b;\r\n        adj[a].push_back(b);\r\n        adj[b].push_back(a);\r\n\r\n        Union(a, b, i);\r\n    }\r\n\r\n    // cout << \"st:\\n\";\r\n    // for(i = 1; i <= n; i++)\r\n    // {\r\n    //     cout << i << \": \";\r\n    //     for(auto u : st[i])\r\n    //         cout << u << \" \";\r\n    //     cout << \"\\n\";\r\n    // }\r\n    // cout << \"\\n\";\r\n\r\n    for(i = 1; i < n; i++)\r\n        sparse[i][0] = arr[i];\r\n\r\n    for(j = 1; j < 20; j++)\r\n    {\r\n        for(i = 1; i + (1 << j) - 1 < n; i++)        \r\n            sparse[i][j] = max(sparse[i][j-1], sparse[i + (1 << (j-1))][j-1]);        \r\n    }\r\n\r\n    while(q--)\r\n    {\r\n        cin >> a >> b;\r\n\r\n        cout << getMin(a, b-1) << \" \";\r\n    }\r\n\r\n    cout << \"\\n\";\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int T = 1, caseno = 0;\r\n\r\n    for(int i = 2; i < MAXN; i++)\r\n        Log[i] = Log[i/2] + 1;\r\n\r\n    cin >> T;\r\n\r\n    while(T--)\r\n    {\r\n        solve(++caseno);\r\n    }\r\n}",
    "defect_evaluation_v4": {
        "good solution": 70,
        "wrong solution": 25,
        "compilation error": 5,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 10,
        "bit manipulation": 2,
        "greedy": 8,
        "brute force": 8,
        "graphs": 10,
        "sortings": 5,
        "search": 5,
        "trees": 5,
        "strings": 3,
        "number theory": 2,
        "combinatorics": 3,
        "two pointers": 2,
        "geometry": 2,
        "shortest paths": 8,
        "divide and conquer": 3,
        "probabilities": 2,
        "data structures": 10,
        "game theory": 2,
        "2d, 3d": 2,
        "recursive": 5,
        "well-commented": 8,
        "self-documenting": 5,
        "complex": 5,
        "readable": 10,
        "well-named": 10,
        "efficient": 10,
        "reusable": 8,
        "documented": 5,
        "good error-handling": 5,
        "good solution": 8,
        "compilation error": 0,
        "runtime error": 0
    }
}