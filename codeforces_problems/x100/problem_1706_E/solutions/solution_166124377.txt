{
    "id": 166124377,
    "contestId": 1706,
    "creationTimeSeconds": 1659102926,
    "relativeTimeSeconds": 626,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "_mAhRaH_113"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1659102300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 342,
    "memoryConsumedBytes": 24166400,
    "source": "#include <bits/stdc++.h>\r\n//#pragma GCC target(\"popcnt\")\r\n#define fi first\r\n#define se second\r\n#define lc id << 1\r\n#define rc id << 1 ^ 1\r\n#define nmax 200008\r\ndouble begintime, endtime;\r\n\r\nusing namespace std;\r\ninline void CALC_TIME()\r\n{\r\n#ifndef ONLINE_JUDGE\r\n    endtime = clock();\r\n    cout << \"\\nexecution time : \" << (endtime - begintime + 1) / 1000 << \" s\";\r\n#endif\r\n}\r\ntypedef pair<int, int> pii;\r\nconst string YES = \"YES\\n\";\r\nconst string NO = \"NO\\n\";\r\nint t, n, m, q, u, v, x, par[nmax];\r\npii a[nmax], range[nmax];\r\nvector<int> l[nmax];\r\nbool ok;\r\nint root(int x)\r\n{\r\n    return (par[x] < 0) ? x : (par[x] = root(par[x]));\r\n}\r\nvoid join(int u, int v)\r\n{\r\n    if ((u = root(u)) == (v = root(v)))\r\n        return;\r\n    if (par[u] > par[v])\r\n        swap(u, v);\r\n    par[u] += par[v];\r\n    par[v] = u;\r\n}\r\nstruct segtree{\r\n    int seg[nmax << 2];\r\n    void build(int id = 1, int l = 1, int r = n - 1)\r\n    {\r\n        if (l == r)\r\n        {\r\n            seg[id] = range[l].fi;\r\n            return;\r\n        }\r\n        int mid = (l + r) >> 1;\r\n        build(lc, l, mid);\r\n        build(rc, mid + 1, r);\r\n        seg[id] = max(seg[lc], seg[rc]);\r\n    }\r\n    int get(int u, int v, int id = 1, int l = 1, int r = n - 1)\r\n    {\r\n        if (r < u || l > v)\r\n            return 0;\r\n        if (u <= l && r <= v)\r\n            return seg[id];\r\n        int mid = (l + r) >> 1;\r\n        return max(get(u, v, lc, l, mid), get(u, v, rc, mid + 1, r));\r\n    }\r\n}tree;\r\nint solve()\r\n{\r\n    cin >> n >> m >> q;\r\n    for (int i = 1; i <= m; i++)\r\n        cin >> a[i].fi >> a[i].se;\r\n    for (int i = 1; i < n; i++)\r\n        range[i] = {1, m + 1};\r\n    while (true)\r\n    {\r\n        ok = true;\r\n        for (int i = 1; i < n; i++)\r\n            if (range[i].fi != range[i].se)\r\n            {\r\n                ok = false;\r\n                l[(range[i].fi + range[i].se) >> 1].push_back(i);\r\n            }\r\n        if (ok)\r\n            break;\r\n        fill(par + 1, par + n + 1, -1);\r\n        for(int i = 0; i <= m; i++)\r\n        {\r\n            if (i)\r\n                join(a[i].fi, a[i].se);\r\n            for (int tmp : l[i])\r\n                if (root(tmp) == root(tmp + 1))\r\n                    range[tmp].se = i;\r\n                else\r\n                    range[tmp].fi = i + 1;\r\n            l[i].clear();\r\n        }\r\n    }\r\n    tree.build();\r\n    while (q--)\r\n    {\r\n        cin >> u >> v;\r\n        if (u < v)\r\n            x = tree.get(u, v - 1);\r\n        else   \r\n            x = 0;\r\n        if (x <= m)\r\n            cout << x << ' ';\r\n        else\r\n            cout << \"0 \";\r\n    }\r\n    cout << '\\n';\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    begintime = clock();\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"file.inp\", \"r\", stdin);\r\n    freopen(\"file.out\", \"w\", stdout);\r\n#endif\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n    CALC_TIME();\r\n    return 0;\r\n}"
}