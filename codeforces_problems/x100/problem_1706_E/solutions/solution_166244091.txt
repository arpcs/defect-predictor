{
    "id": 166244091,
    "contestId": 1706,
    "creationTimeSeconds": 1659196128,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "Jean7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 31744000,
    "source": "#include <bits/stdc++.h>\r\n#define fastio ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0)\r\n#define int long long\r\n\r\nusing namespace std ;\r\n\r\nconst int N = 1e5+5 ;\r\nconst int L = 23 ;\r\nint a[N] ;\r\n\r\nstruct Sparse_Table\r\n{\r\n    int st[N][L] , logs[N] ;\r\n    void build ( int n )\r\n    {\r\n        logs[1] = 0 ;\r\n        for ( int i = 2 ; i <= n ; i++ ) logs[i] = logs[i>>1] + 1 ;\r\n        for ( int i = 1 ; i <= n ; i++ ) st[i][0] = a[i] ;\r\n        for ( int j = 1 ; j <= logs[n] ; j++ )\r\n            for ( int i = 1 ; i + ( 1 << j ) - 1 <= n ; i++ )\r\n                st[i][j] = max ( st[i][j-1] , st[i+(1<<(j-1))][j-1] ) ;\r\n    }\r\n    int query ( int x , int y )\r\n    {\r\n        int j = logs[y-x+1] ;\r\n        return max ( st[x][j] , st[y-(1<<j)+1][j] ) ;\r\n    }\r\n};\r\nSparse_Table spa ;\r\n\r\nstruct Union_Find\r\n{\r\n    set <int> st[N] ;\r\n    int par[N] , sz[N] ;\r\n    void init ( int n )\r\n    {\r\n        for ( int i = 1 ; i <= n ; i++ )\r\n        {\r\n            par[i] = i ;\r\n            sz[i] = 1 ;\r\n            st[i].clear() ;\r\n            st[i].insert(i) ;\r\n        }\r\n    }\r\n    int fin ( int x )\r\n    {\r\n        if ( x == par[x] ) return x ;\r\n        return par[x] = fin ( par[x] ) ;\r\n    }\r\n    void uni ( int x , int y , int w )\r\n    {\r\n        if ( ( x = fin ( x ) ) != ( y = fin ( y ) ) )\r\n        {\r\n            if ( sz[x] == sz[y] ) sz[x]++ ;\r\n            if ( sz[x] < sz[y] ) swap ( x , y ) ;\r\n            par[y] = x ;\r\n            cmb ( x , y , w ) ;\r\n        }\r\n    }\r\n    void cmb ( int x , int y , int w )\r\n    {\r\n        vector <int> v ;\r\n        for ( auto it : st[y] ) v.push_back(it) ;\r\n        for ( int i = 0 ; i < (int)v.size() ; i++ )\r\n        {\r\n            auto it = st[x].lower_bound ( v[i] ) ;\r\n            if ( *it == v[i] + 1 ) a[v[i]+1] = w ;\r\n            if ( it != st[x].begin() ) it-- ;\r\n            if ( *it == v[i] - 1 ) a[v[i]] = w ;\r\n        }\r\n        for ( auto it : st[y] ) st[x].insert(it) ;\r\n        st[y].clear() ;\r\n    }\r\n};\r\nUnion_Find dsu ;\r\n\r\nsigned main ()\r\n{\r\n    fastio ;\r\n    int tc ;\r\n    cin >> tc ;\r\n    while ( tc-- )\r\n    {\r\n        int n , m , q , x , y ;\r\n        cin >> n >> m >> q ;\r\n        dsu.init ( n ) ;\r\n        for ( int i = 1 ; i <= m ; i++ )\r\n        {\r\n            cin >> x >> y ;\r\n            dsu.uni ( x , y , i ) ;\r\n        }\r\n        spa.build ( n ) ;\r\n        while ( q-- )\r\n        {\r\n            cin >> x >> y ;\r\n            if ( x == y ) cout << 0 << \" \" ;\r\n            else cout << spa.query ( x + 1 , y ) << \" \" ;\r\n        }\r\n        cout << \"\\n\" ;\r\n    }\r\n    return 0 ;\r\n}\r\n"
}