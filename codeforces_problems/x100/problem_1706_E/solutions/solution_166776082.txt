{
    "id": 166776082,
    "contestId": 1706,
    "creationTimeSeconds": 1659511958,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "yangjl"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 37785600,
    "source": "#include<bits/stdc++.h>\r\n#ifndef debug\r\n#define debug(args...)\r\n#define debugArr(begin,end)\r\n#endif\r\n#define mulcase int tt;cin>>tt;while(tt--)\r\nusing namespace std;\r\nusing ll=long long;\r\nconst int N=2e5+10;\r\n\r\nint n,m,q;\r\nvector<pair<int,int>> G[N];\r\nint deep[N],fa[N][21],fm[N][21];\r\nvoid DFS(int u,int Fa) {\r\n\tfor (int j=1; (1<<j)<=n; j++) {\r\n\t\tfa[u][j]=fa[ fa[u][j-1] ][j-1];\r\n\t\tfm[u][j]=max(fm[u][j-1],fm[fa[u][j-1]][j-1]);\r\n\t}\r\n\tfor (auto [v,w]:G[u])\r\n\t\tif (v!=Fa) {\r\n\t\t\tdeep[v]=deep[u]+1;\r\n\t\t\tfa[v][0]=u;\r\n\t\t\tfm[v][0]=w;\r\n\t\t\tDFS(v,u);\r\n\t\t}\r\n}\r\nint LCA(int u,int v) {\r\n\tif (deep[u]<deep[v]) swap(u,v);\r\n\tint h=deep[u]-deep[v];\r\n\t//u\u5f80\u4e0a\u722c\r\n\tint ans=0;\r\n\tfor (int i=19; i>=0; i--)\r\n\t\tif (h&(1<<i)) ans=max(ans,fm[u][i]),u=fa[u][i];\r\n\t//\r\n\tif (u==v) return ans;\r\n\tfor (int i=19; i>=0; i--)\r\n\t\tif ((1<<i)<=deep[u]&&fa[u][i]!=fa[v][i]) {\r\n\t\t\tans=max(ans,fm[u][i]),u=fa[u][i];\r\n\t\t\tans=max(ans,fm[v][i]),v=fm[v][i];\r\n\t\t}\r\n\treturn max(ans,max(fm[u][0],fm[v][0]));\r\n}\r\nstruct DSU {\r\n\tvector<int> fa;\r\n\tvoid init(int n) {//[0,n]\r\n\t\tfa.resize(n+1),iota(fa.begin(),fa.end(),0);\r\n\t}\r\n\tvoid unite(int x, int y) {\r\n\t\tx=get(x),y=get(y);\r\n\t\tif (x!=y) fa[x]=y;\r\n\t}\r\n\tint get(int x) {\r\n\t\treturn fa[x]==x ? x: fa[x]=get(fa[x]);\r\n\t}\r\n} dsu;\r\n\r\nint f[N];\r\nstruct Data {\r\n\tll x;\r\n\tvoid init(int pos) {\r\n\t\tx=f[pos];\r\n\t}\r\n\tData operator+(const Data &v)const {\r\n\t\tData res;\r\n\t\tres.x=max(x,v.x);\r\n\t\treturn res;\r\n\t}\r\n};\r\nstruct segtree {\r\n#define u1 (u<<1)\r\n#define u2 (u<<1|1)\r\n\tvector<Data> tr;\r\n\tsegtree(int n) {\r\n\t\ttr.resize(n*4),build(1,1,n);\r\n\t}\r\n\tvoid build(int u,int l,int r) {\r\n\t\tif (l==r) tr[u].init(l);\r\n\t\telse {\r\n\t\t\tint mid=(l+r)>>1;\r\n\t\t\tbuild(u1,l,mid),build(u2,mid+1,r);\r\n\t\t\ttr[u]=tr[u1]+tr[u2];\r\n\t\t}\r\n\t}\r\n\tData query(int l,int r) {\r\n\t\treturn query(1,1,tr.size()/4,l,r);\r\n\t}\r\n\tData query(int u,int l,int r,int ql,int qr) {\r\n\t\tif (l==ql&&r==qr) return tr[u];\r\n\t\tint mid=(l+r)>>1;\r\n\t\tif (qr<=mid) return query(u1,l,mid,ql,qr);\r\n\t\tif (ql>mid) return query(u2,mid+1,r,ql,qr);\r\n\t\treturn query(u1,l,mid,ql,mid)+query(u2,mid+1,r,mid+1,qr);\r\n\t}\r\n};\r\n\r\nint main() {\r\n\tios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\r\n\tmulcase{\r\n\t\tcin>>n>>m>>q;\r\n\t\tfill(G+1,G+1+n,vector<pair<int,int>>());\r\n\t\tdsu.init(n);\r\n\t\tfor (int i=1,x,y; i<=m; ++i) {\r\n\t\t\tcin>>x>>y;\r\n\t\t\tif (dsu.get(x)!=dsu.get(y)) {\r\n\t\t\t\tdsu.unite(x,y);\r\n\t\t\t\tG[x].emplace_back(y,i);\r\n\t\t\t\tG[y].emplace_back(x,i);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tdebug(\"sd\");\r\n\t\tDFS(1,0);\r\n\t\tfor (int i=2; i<=n; ++i) f[i]=LCA(i-1,i);\r\n\t\t\r\n\r\n\t\tsegtree tr(n);\r\n\t\twhile (q--) {\r\n\t\t\tint l,r;\r\n\t\t\tcin>>l>>r;\r\n\t\t\tif (l==r) cout<<0<<' ';\r\n\t\t\telse cout<<tr.query(l+1,r).x<<' ';\r\n\t\t}\r\n\t\tcout<<'\\n';\r\n\t}\r\n\treturn 0;\r\n}\r\n/*\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n*/\r\n"
}