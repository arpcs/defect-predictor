{
    "id": 165437528,
    "contestId": 1706,
    "creationTimeSeconds": 1658587516,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "luogu_bot4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 795,
    "memoryConsumedBytes": 48128000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nstruct node{\r\n\tint u,v,w;\r\n}e[200010];\r\nstruct h{\r\n\tint to,nxt;\r\n}e1[200010];\r\nint head[200010],cnt;\r\nvoid add(int u,int v){\r\n\te1[++cnt].to=v;\r\n\te1[cnt].nxt=head[u];\r\n\thead[u]=cnt;\r\n}\r\nint fa[200010],n;\r\nint find(int x){\r\n\tif(x==fa[x])return x;\r\n\treturn fa[x]=find(fa[x]);\r\n}\r\nint rt,c[200010];\r\nint f[200010][30]/*\u5f80\u4e0a2^j\u7684\u8282\u70b9*/,h[200010],g[100010][30]/*\u4ecei\u5f00\u59cb\u8fde\u7eed2^j\u7684\u5e8f\u5217\u7684lca*/;\r\nvoid dfs(int x){\r\n\tfor(int i=1;i<=log2(rt);i++)f[x][i]=f[f[x][i-1]][i-1];\r\n\tfor(int i=head[x];i;i=e1[i].nxt){\r\n\t\tint v=e1[i].to;\r\n\t\tf[v][0]=x;\r\n\t\th[v]=h[x]+1;\r\n\t\tdfs(v);\r\n\t}\r\n}\r\nint lca(int x,int y){\r\n\tif(h[x]<h[y])swap(x,y);\r\n\tfor(int i=log2(rt);i>=0;i--)\r\n\t\tif(h[f[x][i]]>=h[y])x=f[x][i];\r\n\tif(x==y)return y;\r\n\tfor(int i=log2(rt);i>=0;i--){\r\n\t\tif(f[x][i]!=f[y][i])x=f[x][i],y=f[y][i];\r\n\t}\r\n\treturn f[x][0];\r\n}\r\nvoid inti(){\r\n\tcnt=0;//\u4e0d\u8981memset\r\n\tfor(int i=1;i<=n*2;i++)fa[i]=i,head[i]=c[i]=0;\r\n\tfor(int i=1;i<=n*2;i++){\r\n\t\tfor(int j=0;j<=log2(n*2);j++)f[i][j]=0;\r\n\t}\r\n}\r\nint main(){\r\n\tint t;\r\n\tscanf(\"%d\",&t);\r\n\twhile(t--){\r\n\t\tint m,q;\r\n\t\tscanf(\"%d%d%d\",&n,&m,&q);\r\n\t\tinti();\r\n\t\tfor(int i=1;i<=m;i++)\r\n\t\t\tscanf(\"%d%d\",&e[i].u,&e[i].v),e[i].w=i;\r\n\t\trt=n;\r\n\t\tfor(int i=1;i<=m;i++){\r\n\t\t\tint fx=find(e[i].u),fy=find(e[i].v);\r\n\t\t\tif(fx!=fy){\r\n\t\t\t\tc[++rt]=e[i].w;\r\n\t\t\t\tfa[fx]=fa[fy]=rt;\r\n\t\t\t\tadd(rt,fx),add(rt,fy);\r\n\t\t\t}\r\n\t\t}\r\n\t\th[rt]=1;//\u521d\u59cb\u5316\u5427\u3002 \r\n\t\tdfs(rt);\r\n\t\tfor(int i=1;i<=n;i++)g[i][0]=i;//\u5f53\u5e8f\u5217\u957f\u5ea6\u662f1\uff0c\u5373\u662f\u81ea\u5df1\u65f6\uff0c\u4e3a\u4e86\u65b9\u4fbf\u540e\u9762\u8f6c\u79fb\uff0c\u53ef\u4ee5\u8ba9lca\u4e3a\u81ea\u5df1\uff0c\u56e0\u4e3a\u81ea\u5df1\u7684\u503c\u4e5f\u662f0 \r\n\t\tfor(int i=1;i<=log2(n);i++)\r\n\t\t\tfor(int j=1;j+(1<<i)-1<=n/*\u5e94\u8be5\u53ea\u641e\u53f6\u5b50\u8282\u70b9*/;j++)\r\n\t\t\t\tg[j][i]=lca(g[j][i-1],g[j+(1<<i-1)][i-1]);\r\n\t\t\t\t\r\n\t\twhile(q--){\r\n\t\t\tint x,y;\r\n\t\t\tscanf(\"%d%d\",&x,&y);\r\n\t\t\tint t=log2(y-x+1);\r\n\t\t\tprintf(\"%d \",c[lca(g[x][t],g[y-(1<<t)+1][t])]);\r\n\t\t}\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\treturn 0;\r\n}",
    "defect_evaluation_v4": {
        "good solution": 70,
        "wrong solution": 20,
        "compilation error": 5,
        "runtime error": 5
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 7,
        "graphs": 80,
        "sortings": 0,
        "search": 0,
        "trees": 80,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 60,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 50,
        "self-documenting": 50,
        "complex": 0,
        "readable": 30,
        "well-named": 60,
        "efficient": 60,
        "reusable": 60,
        "documented": 50,
        "good error-handling": 40,
        "good solution": 60,
        "compilation error": 0,
        "runtime error": 0
    }
}