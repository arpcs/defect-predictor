{
    "id": 179010438,
    "contestId": 1706,
    "creationTimeSeconds": 1667437132,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "luogu_bot2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 105779200,
    "source": "// LUOGU_RID: 92622732\n//\u8d8a\u6765\u8d8a\u9634\u95f4\u4e86\u3002\u3002\u3002\r\n//\u770b\u8fd9\u9053\u9898\u4e00\u5806\u4ebaA\u4e86\uff0c\u60f3\u5fc5\u662f\u6709\u66f4\u7b80\u5355\u7684\u505a\u6cd5\u5427\r\n#include <stdio.h>\r\n#include <ctype.h>\r\n#define sz 100001\r\nstruct site\r\n{\r\n\tint ed, next;\r\n};\r\nstruct site dld[sz << 1 | 1];\r\nstruct node\r\n{\r\n\tint bs, ls, rs, sam;\r\n};\r\nstruct node tree[sz << 6 | 1];\r\nint t, n, m, q, now, bm, p;\r\nint fsl[sz], slm[sz], siz[sz], rot[sz];\r\ninline void swp(int&, int&);\r\nint read();\r\nvoid net(int, int);\r\nint zip(int);\r\nvoid merge(int, int);\r\nint dfs(int, int);\r\nint build(int, int);\r\nint fix(int, int, int, int, int);\r\nint haf(int, int);\r\nint serch(int, int, int, int, int);\r\nint main()\r\n{\r\n\tfreopen (\"a.out\", \"w\", stdout);\r\n\tint x, y;\r\n\tt = read();\r\n\twhile (t --> 0)\r\n\t{\r\n\t\tnow = p = 0;\r\n\t\tn = read(); m = read(); q = read();\r\n\t\tfor (int i = 1; i <= n; ++i)\r\n\t\t{\r\n\t\t\tfsl[i] = 0;\r\n\t\t\tslm[i] = i;\r\n\t\t\tsiz[i] = 1;\r\n\t\t}\r\n\t\trot[0] = build(1, n);\r\n\t\tfor (bm = 1; bm <= m; ++bm)\r\n\t\t{\r\n\t\t\tx = zip(read()); y = zip(read());\r\n\t\t\tif (x != y)\r\n\t\t\t\tmerge(x, y);\r\n\t\t\telse\r\n\t\t\t\trot[bm] = rot[bm - 1];\r\n\t\t}\r\n\t\twhile (q --> 0)\r\n\t\t{\r\n\t\t\tx = read(); y = read();\r\n\t\t\tif (x == y)\r\n\t\t\t\tprintf (\"0 \");\r\n\t\t\telse\r\n\t\t\t\tprintf (\"%d \", haf(x, y));\r\n\t\t}\r\n\t\tputchar('\\n');\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\ninline void swp(int &a, int &b)\r\n{\r\n\tint tmp = a;\r\n\ta = b; b = tmp;\r\n}\r\n\r\nint read()\r\n{\r\n\tint x = 0;\r\n\tchar c;\r\n\twhile (!isdigit(c = getchar()));\r\n\tdo {\r\n\t\tx = (x << 3) + (x << 1) + (c & 15);\r\n\t}while (isdigit(c = getchar()));\r\n\treturn x;\r\n}\r\n\r\nvoid net(int a, int b)\r\n{\r\n\t++p;\r\n\tdld[p].ed = b;\r\n\tdld[p].next = fsl[a];\r\n\tfsl[a] = p;\r\n}\r\n\r\nint zip(int a)\r\n{\r\n\twhile (slm[a] != a)\r\n\t\ta = slm[a];\r\n\treturn a;\r\n}\r\n\r\nvoid merge(int a, int b)\r\n{\r\n\tif (siz[a] > siz[b])\r\n\t\tswp(a, b);\r\n\trot[bm] = dfs(a, b);\r\n\tsiz[b] += siz[a];\r\n\tslm[a] = b;\r\n\tnet(b, a);\r\n}\r\n\r\nint dfs(int a, int b)\r\n{\r\n\tint ret = fix(rot[bm - 1], 1, n, a, b);\r\n\tfor (int i = fsl[a]; i; i = dld[i].next)\r\n\t\tdfs(dld[i].ed, b);\r\n\treturn ret;\r\n}\r\n\r\nint build(int lf, int rt)\r\n{\r\n\t++now;\r\n\ttree[now].bs = 0;\r\n\tint a = now, mid;\r\n\tif (lf == rt)\r\n\t{\r\n\t\ttree[a].sam = lf;\r\n\t\treturn a;\r\n\t}\r\n\ttree[a].sam = 0;\r\n\tmid = lf + rt >> 1;\r\n\ttree[a].ls = build(lf, mid);\r\n\ttree[a].rs = build(mid + 1, rt);\r\n\treturn a;\r\n}\r\n\r\nint fix(int kd, int lf, int rt, int w, int b)\r\n{\r\n\tint a, mid;\r\n\tif (tree[kd].bs == bm)\r\n\t\ta = kd;\r\n\telse\r\n\t{\r\n\t\t++now; a = now;\r\n\t\ttree[a] = tree[kd];\r\n\t\ttree[a].bs = bm;\r\n\t}\r\n\tif (lf == rt)\r\n\t{\r\n\t\ttree[a].sam = b;\r\n\t\treturn a;\r\n\t}\r\n\tmid = lf + rt >> 1;\r\n\tif (w <= mid)\r\n\t\ttree[a].ls = fix(tree[a].ls, lf, mid, w, b);\r\n\telse\r\n\t\ttree[a].rs = fix(tree[a].rs, mid + 1, rt, w, b);\r\n\tif (tree[tree[a].ls].sam == tree[tree[a].rs].sam)\r\n\t\ttree[a].sam = tree[tree[a].ls].sam;\r\n\telse\r\n\t\ttree[a].sam = 0;\r\n\treturn a;\r\n}\r\n\r\nint haf(int a, int b)\r\n{\r\n\tint lf = 0, rt = m, mid;\r\n\twhile (rt != lf + 1)\r\n\t{\r\n\t\tmid = lf + rt >> 1;\r\n\t\tif (serch(rot[mid], 1, n, a, b))\r\n\t\t\trt = mid;\r\n\t\telse\r\n\t\t\tlf = mid;\r\n\t}\r\n\treturn rt;\r\n}\r\n\r\nint serch(int a, int lf, int rt, int wa, int wb)\r\n{\r\n\tif ((lf == wa && rt == wb) || tree[a].sam)\r\n\t\treturn tree[a].sam;\r\n\tint mid = lf + rt >> 1, x, y;\r\n\tif (wb <= mid)\r\n\t\treturn serch(tree[a].ls, lf, mid, wa, wb);\r\n\telse if (wa > mid)\r\n\t\treturn serch(tree[a].rs, mid + 1, rt, wa, wb);\r\n\tx = serch(tree[a].ls, lf, mid, wa, mid);\r\n\ty = serch(tree[a].rs, mid + 1, rt, mid + 1, wb);\r\n\tif (x == y)\r\n\t\treturn x;\r\n\treturn 0;\r\n}\r\n"
}