{
    "id": 98504479,
    "contestId": 842,
    "creationTimeSeconds": 1605471254,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "SlavicG"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 18636800,
    "source": "//Solution By SlavicG\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n\r\n#define              ll              long long\r\n\r\n#define       forn(i,n)              for(int i=0;i<n;i++)\r\n#define          all(v)              v.begin(), v.end()\r\n#define         rall(v)              v.rbegin(),v.rend()\r\n\r\n#define            pb                push_back\r\n#define          sz(a)               (int)a.size()\r\n#define         fastio               ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n#define int long long\r\nll pw(unsigned ll a,unsigned ll b,ll m){a%=m;ll r=1;while(b>0){if(b&1)r=(r*a)%m;a=(a*a)%m;b/=2;}return r;}\r\nll gcd(ll a, ll b) {if(!b)return a;return gcd(b,a % b);}\r\nll lcm(ll a,ll b){return(a*b)/gcd(a,b);}\r\nll fact(ll n, ll mod){ll ret=1;for(ll i=1;i<=n;i++)ret=(ret*i)%mod;return ret;}\r\nbool isPrime(ll n){if(n<=1)return false;if(n<=3)return true;if(n%2==0||n%3==0)return false;for(ll i=5;i*i <= n;i=i+6)if(n%i==0||n%(i+2)==0)return false;return true;}\r\nbool isValid(int x, int y,int n,int m){if(x>=0&&x<n&&y>=0&&y<m)return true;return false;}\r\n\r\nconst int N = 2020202,s = pow(2, 19);\r\nint tree[N] , tr[50];\r\nint n,m;\r\nint merge(int a ,int b){\r\n    return a + b;\r\n}\r\nvoid build(){\r\n    for(int i = s-1;i>0;i--)\r\n    {\r\n        tree[i] = merge(tree[2 * i], tree[2*i + 1]);\r\n    }\r\n}\r\nint query(int a , int l, int r,int i)\r\n{\r\n    if(l==r)return l;\r\n    if(!tr[i-1]){\r\n        if(tree[2 * a] < (r- l+1)/2){\r\n            return query(2*a,l,(l+r)/2,i-1);\r\n        }else{\r\n            return query(2 * a + 1, (l+r)/2+1,r,i-1);\r\n        }\r\n    }else{\r\n        if(tree[2*a+1] < (r-l+1)/2){\r\n            return query(a*2+1,l,(l+r)/2,i-1);\r\n        }else{\r\n            return query(a*2,(l+r)/2+1,r,i-1);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nvoid solve()\r\n{\r\n    cin >> n >> m;\r\n    int a[n];\r\n    for(int i= 0;i < n;i++)\r\n    {\r\n        cin >> a[i];\r\n        tree[s + a[i]] = 1;\r\n    }\r\n    build();\r\n    while(m--)\r\n    {\r\n        int x;\r\n        cin >> x;\r\n        for(int bit = 0;bit < 20;bit++)\r\n        {\r\n            if(x&(1<<bit))tr[bit] = tr[bit] ^ 1;\r\n        }\r\n        int ans = query(1,0,s-1,19);\r\n        cout << ans << '\\n';\r\n    }\r\n}\r\n\r\nint32_t main()\r\n{\r\n    fastio;\r\n    int t = 1;\r\n    //cin >> t;\r\n    while(t--){\r\n        solve();\r\n    }\r\n}"
}