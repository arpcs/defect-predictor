{
    "id": 220378434,
    "contestId": 842,
    "creationTimeSeconds": 1692968352,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "truongson31032007"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 69017600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int NUMBEROFNODES = 5400005;\r\nconst int LG = 18;\r\nstruct Trie{\r\n    struct Node{\r\n        int child[2];\r\n        int cnt;\r\n    } nodes[NUMBEROFNODES];\r\n\r\n    int cur;\r\n    Trie() : cur(0) {\r\n        memset(nodes[0].child, -1, sizeof(nodes[cur].child));\r\n        nodes[0].cnt = 0;\r\n    };\r\n\r\n    int new_node() {\r\n        cur++;\r\n        memset(nodes[cur].child, -1, sizeof(nodes[cur].child));\r\n        nodes[cur].cnt = 0;\r\n        return cur;\r\n    }\r\n\r\n    void add_number(int x) {\r\n        int pos = 0;\r\n        for (int i = LG; i >= 0; i--) {\r\n            int c = (x >> i) & 1;\r\n            if (nodes[pos].child[c] == -1) nodes[pos].child[c] = new_node();\r\n            pos = nodes[pos].child[c];\r\n            nodes[pos].cnt++;\r\n        }\r\n    }\r\n\r\n    int query(int x) {\r\n        int pos = 0, res = 0;\r\n        for (int i = LG; i >= 0; i--) {\r\n            int c = (x >> i) & 1;\r\n\r\n            if (nodes[pos].child[c] != -1 && nodes[nodes[pos].child[c]].cnt == (1 << i)) {\r\n                pos = nodes[pos].child[c ^ 1];\r\n                res += (1 << i);\r\n            }\r\n            else pos = nodes[pos].child[c];\r\n\r\n            if (pos == -1) break;\r\n        }\r\n        return res;\r\n    }\r\n};\r\n\r\nsigned main() {\r\n    \r\n    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\r\n\r\n    int n, m;\r\n    cin >> n >> m;\r\n\r\n    Trie trie;\r\n    vector<int> v;\r\n    for (int i = 1; i <= n; i++) {\r\n        int x; cin >> x;\r\n        v.push_back(x);\r\n    }\r\n\r\n    sort(v.begin(), v.end());\r\n    v.erase(unique(v.begin(), v.end()), v.end());\r\n    for (auto x : v) trie.add_number(x);\r\n\r\n    int cur_xor = 0;\r\n    while (m--) {\r\n        int x; cin >> x;\r\n        cur_xor ^= x;\r\n        cout << trie.query(cur_xor) << \"\\n\";\r\n    }\r\n    \r\n}"
}