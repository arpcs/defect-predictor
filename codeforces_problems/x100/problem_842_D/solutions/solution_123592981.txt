{
    "id": 123592981,
    "contestId": 842,
    "creationTimeSeconds": 1627120030,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "zanj0"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 3891200,
    "source": "/*\r\n\tJAI JAGANNATH!\r\n*/\r\n//@Author : zanj0\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define int \t\t\tlong long int\r\n\r\n#define ff              first\r\n#define ss              second\r\n#define pb              push_back\r\n#define MOD             1000000007\r\n#define inf             1e18\r\n#define ps(x,y)         fixed<<setprecision(y)<<x\r\n#define w(x)            int x; cin>>x; while(x--)\r\n#define endl       \t\t\"\\n\"\r\n#define timetaken cerr<<\"Time : \"<<1000*(long double)clock()/(long double)CLOCKS_PER_SEC<<\"ms\\n\"\r\n\r\nvoid zanj0()\r\n{\r\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#ifdef LOCAL\r\n\tfreopen(\"input.txt\", \"r\", stdin);\r\n\tfreopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n}\r\nconst int K = 32;\r\nint ret = 0;\r\nstruct Node {\r\n\tNode* child[2];\r\n\tint sizeOfSubTree;\r\n\tNode() {\r\n\t\tchild[0] = child[1] = NULL;\r\n\t\tsizeOfSubTree = 0;\r\n\t}\r\n};\r\nvoid add(int val, Node* node, int pos) {\r\n\tif (pos == -1) {\r\n\t\tnode->sizeOfSubTree++;\r\n\t\treturn;\r\n\t}\r\n\tint bit = (val >> pos) & 1;\r\n\tif (!node->child[bit]) node->child[bit] = new Node();\r\n\tadd(val, node->child[bit], pos - 1);\r\n\tnode->sizeOfSubTree = (node->child[0] ? node->child[0]->sizeOfSubTree : 0) + (node->child[1] ? node->child[1]->sizeOfSubTree : 0);\r\n}\r\nvoid get(int val, Node* node, int pos) {\r\n\tif (pos == -1) return;\r\n\tif (!node) return;\r\n\tint bit = (val >> pos) & 1;\r\n\t// cout << \"Bit: \" << bit << \" : \"  << pos << endl;\r\n\tif (node->child[bit] && node->child[bit]->sizeOfSubTree == (1 << pos)) {\r\n\t\tbit = 1 - bit;\r\n\t}\r\n\tret |= ((bit ^ ((val >> pos) & 1)) << pos);\r\n\tget(val, node->child[bit], pos - 1);\r\n}\r\nvoid solve() {\r\n\tint n, q;\r\n\tcin >> n >> q;\r\n\tvector <int> v(n);\r\n\tNode* root = new Node();\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tcin >> v[i];\r\n\t\tadd(v[i], root, K);\r\n\t}\r\n\tint all = 0;\r\n\tfor (int i = 0, x; i < q; i++) {\r\n\t\tcin >> x;\r\n\t\tall ^= x;\r\n\t\t// cout << all << endl;\r\n\t\tret = 0;\r\n\t\tget(all, root, K);\r\n\t\tcout << ret << endl;\r\n\t}\r\n}\r\nint32_t main()\r\n{\r\n\tzanj0();\r\n\tsolve();\r\n\ttimetaken;\r\n\treturn 0;\r\n}"
}