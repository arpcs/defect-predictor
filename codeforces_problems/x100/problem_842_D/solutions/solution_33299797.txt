{
    "id": 33299797,
    "contestId": 842,
    "creationTimeSeconds": 1513427261,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "aakashag1996"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<vector>\r\n#include<string>\r\n#include<algorithm>\r\n#include<utility>\r\n#include<iostream>\r\n#include<list>\r\n#include<stack>\r\n#include<set>\r\n#include<queue>\r\n#include<cstdio>\r\n#include<map>\r\n#include<climits>\r\n//#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nclass Node{\r\n    public:\r\n        Node* left;\r\n        Node* right;\r\n        ll ct;\r\n    // Node(){\r\n    //     left=NULL;\r\n    //     right=NULL;\r\n    //     ct=0;\r\n\r\n    //}\r\n};\r\nNode * make_tree(ll level){\r\n    if(level<0) return NULL;\r\n    Node * temp =(Node*)malloc(sizeof(Node));\r\n    temp->ct=0;\r\n    temp->left= make_tree(level-1);\r\n    temp->right=make_tree(level-1);\r\n    return temp;\r\n}\r\nint main()\r\n{\r\n  \t//ios_base::sync_with_stdio(false);\r\n  \tll n,m;\r\n    cin>>n>>m;\r\n    ll a[n];\r\n    ll p[21];\r\n    p[0]=1;\r\n    for(ll i=1;i<=20;i++){\r\n        p[i]=p[i-1]*2;\r\n    }\r\n    // ll ct[2*p[20]+1];\r\n    // memset(ct,0,sizeof(ct));\r\n    Node * root=make_tree(21);\r\n    set<ll> util;\r\n    for(ll i=0;i<n;i++){\r\n        cin>>a[i];\r\n        if(util.find(a[i])!=util.end()) continue;\r\n        util.insert(a[i]);\r\n        Node* cur=root;\r\n        cur->ct++;\r\n        for(ll j=20;j>=0;j--){\r\n            if((a[i] & p[j])==0){\r\n                cur=cur->left;\r\n                cur->ct++;\r\n            } \r\n            else{\r\n                cur=cur->right;\r\n                cur->ct++;\r\n            }\r\n        }\r\n    }\r\n    ll inv[21];\r\n    memset(inv,0,sizeof(inv));\r\n    for(ll i=0;i<m;i++){\r\n        ll x;\r\n        cin>>x;\r\n        for(ll j=20;j>=0;j--){\r\n            if((x & p[j])!=0){\r\n                inv[j]^=1;\r\n            } \r\n        }\r\n        Node* cur=root;\r\n        ll res=0;\r\n        for(ll j=20;j>=0;j--){\r\n            Node *zero;\r\n            Node *one; \r\n            if(inv[j]==0){\r\n                zero=cur->left;\r\n                one=cur->right;\r\n            }\r\n            else{\r\n                zero=cur->right;\r\n                one=cur->left;\r\n            }\r\n            if(zero->ct==p[j]) {cur=one; res=res+p[j];}\r\n            else{cur=zero;}\r\n        }\r\n        cout<<res<<'\\n';\r\n    }\r\n    return 0;\r\n}"
}