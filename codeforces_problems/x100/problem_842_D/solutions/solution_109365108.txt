{
    "id": 109365108,
    "contestId": 842,
    "creationTimeSeconds": 1615161318,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "BucketPotato"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 14643200,
    "source": "#include <iostream>\n\nusing namespace std;\n\n\nstruct Trie\n{\n\tTrie *zero, *one;\n\tint sz, sig;\n\n\tTrie(int s) {\n\t\tzero = NULL;\n\t\tone = NULL;\n\t\tsz = 1;\n\t\tsig = s;\n\t}\n};\n\nint n, m;\nTrie* arr;\n\nint gets(Trie* t) {\n\tif (!t) return 0;\n\treturn t->sz;\n}\n\nTrie* add(Trie* curr, int v) {\n\n\tif (curr->sig == 0) return curr;\n\n\tint ns = curr->sig - 1;\n\n\tif (v & (1 << ns)) {\n\t\tif (!curr->one)\n\t\t\tcurr->one = new Trie(ns);\n\t\tcurr->one = add(curr->one, v);\n\t}\n\telse {\n\t\tif (!curr->zero)\n\t\t\tcurr->zero = new Trie(ns);\n\t\tcurr->zero = add(curr->zero, v);\n\t}\n\n\tcurr->sz = gets(curr->zero) + gets(curr->one);\n\treturn curr;\n}\n\nint getans(Trie* curr, int toxor, int cv) {\n\n\tif (!curr) return cv;\n\n\tint ns = curr->sig - 1;\n\n\tbool inv = (toxor & (1 << ns));\n\tif (inv) {\n\t\tif (gets(curr->one) == (1 << ns))\n\t\t\treturn getans(curr->zero, toxor, cv | (1 << ns));\n\t\telse\n\t\t\treturn getans(curr->one, toxor, cv);\n\t}\n\telse {\n\t\tif (gets(curr->zero) == (1 << ns))\n\t\t\treturn getans(curr->one, toxor, cv | (1 << ns));\n\t\treturn getans(curr->zero, toxor, cv);\n\t}\n\n}\n\nint main() {\n\n\tscanf(\" %d%d\", &n, &m);\n\n\tarr = new Trie(30);\n\n\tfor (int i = 0; i < n; i++) {\n\t\tint v; scanf(\"%d\", &v);\n\t\tarr = add(arr, v);\n\t}\n\n\tint toxor = 0;\n\n\tfor (int i = 0; i < m; i++) {\n\t\tint v; scanf(\"%d\", &v);\n\t\ttoxor = toxor ^ v;\n\n\t\tprintf(\"%d\\n\", getans(arr, toxor, 0));\n\n\t}\n\n\n}"
}