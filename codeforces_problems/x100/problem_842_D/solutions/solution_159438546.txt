{
    "id": 159438546,
    "contestId": 842,
    "creationTimeSeconds": 1654300082,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "happymood"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#define ll  long long\r\n#define ull unsigned long long  \r\nusing namespace std;\r\n#define  inf 4e5+2\r\n#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL)\r\n#define mod1 1000000007\r\n#define mod 998244353\r\nconst int maxn=3e5+8;\r\n#define vpll  vector<pair<ll,ll>>\r\n#define  pq priority_queue\r\n#define  ff first\r\n#define  ss second \r\n#define pb  push_back\r\n#define pob pop_back\r\n#define lb lower_bound\r\n#define ld long double\r\n#define ub upper_bound\r\n#define LB 60\r\n#define setp(x) cout<<fixed<<setprecision(x)\r\n#define PQ_MIN  priority_queue <ll, vector<ll>, greater<ll> >\r\n#define setbit(x)   __builtin_popcount(x)\r\n#define all(x) (x).begin(),(x).end()\r\n#define pie 3.14159265358\r\n#define enter(a)   for(ll i=0;i<a.size();i++) cin>>a[i];\r\n#define show(a)     for(ll e: a) cout<<e<<\" \"; cout<<\"\\n\";\r\n#define pii pair<ll,ll>\r\nusing vi = vector<int>;\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\n  \r\n#define ordered_set tree<pair<ll,ll>, null_type,less<pair<ll,ll>>, rb_tree_tag,tree_order_statistics_node_update>\r\n\r\nll power1(ll n,ll p){\r\n ll r=1;\r\n while(p){\r\n  if(p%2){\r\n   r=(r*n)%mod;\r\n   p--;\r\n }\r\n p=p/2;\r\n n=(n*n)%mod;\r\n}\r\nreturn r;\r\n}\r\nll quer(int a,int b,int c){\r\n\r\n  cout<<\"? \"<<a<<\" \"<<b<<\" \"<<c<<\"\\n\";\r\n  fflush(stdout);\r\n  int k;\r\n  cin >> k;\r\n  return k;\r\n\r\n}\r\nconst int N=2e5+3;\r\nstruct data\r\n{\r\n  data* b[2];\r\n  int con=0;\r\n  data(){\r\n    b[0]=b[1]=NULL;\r\n  }\r\n};\r\ndata *root;\r\nvoid insert(data *cur,int x,int bi){\r\n    //cout<<1;\r\n     if(bi<0){\r\n      cur->con=1;\r\n      return ;\r\n    }\r\n    int b=(x>>bi)&1;\r\n    cur->con =0;\r\n    if(!cur->b[b])\r\n      cur->b[b] =new data();\r\n      insert(cur->b[b],x,bi-1);\r\n      if(cur->b[b])\r\n      cur->con+=cur->b[b]->con;\r\n     if(cur->b[!b])\r\n      cur->con+=cur->b[!b]->con;\r\n\r\n}\r\nint query(data*cur,int r,int bi){\r\n  if(bi<=0 || !cur)\r\n    return 0;\r\n  int ans=0;\r\n  int b=(r>>bi)&1;\r\n  if(cur->b[b]&&cur->b[b]->con == (1<<(bi)))\r\n  {\r\n    return (1<<(bi)|query(cur->b[!b],r,bi-1));\r\n  }\r\n  return query(cur->b[b],r,bi-1);\r\n\r\nreturn 0;\r\n}\r\nint main() {\r\n\r\n fastio;\r\n  int t = 1, d = 1;\r\n   //cin >> t;\r\n\r\n  while (t--) {\r\n    int i, j, m, l, k,r,n;\r\n    cin >> n >> m;\r\n    root =new data();\r\n    for(int i=1;i<=n;i++){\r\n      cin >> j;\r\n      insert(root,j,20);\r\n    \r\n    }\r\n    r=0;\r\n    while(m--){\r\n       cin >> j;\r\n       r=r^j;\r\n       cout<<query(root,r,20)<<\"\\n\";\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\n}",
    "suggested_categories": [
        "algorithms",
        "data structures",
        "bit manipulation",
        "dynamic programming",
        "programming practices",
        "coding standards",
        "performance optimization",
        "competitive programming",
        "io stream management",
        "code efficiency",
        "logical bitwise operations",
        "tree data structure",
        "priority queues",
        "mathematical computations",
        "numeric methods",
        "input validation",
        "output formatting",
        "complexity analysis",
        "error handling",
        "standard template library"
    ]
}