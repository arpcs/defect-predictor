{
    "id": 128963278,
    "contestId": 842,
    "creationTimeSeconds": 1631777724,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "FedShat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define all(c) c.begin(), c.end()\r\n#define rall(c) c.rbegin(), c.rend()\r\n[[maybe_unused]] constexpr int INF = (numeric_limits<int>::max()) / 2;\r\n[[maybe_unused]] constexpr long long INFLL = (numeric_limits<long long>::max()) / 2;\r\n[[maybe_unused]] constexpr __int128 INF128 = numeric_limits<__int128>::max();\r\n\r\ntemplate <class T> istream &operator>>(istream &is, vector<T> &a) {\r\n    for (auto &i : a)\r\n        is >> i;\r\n    return is;\r\n}\r\n\r\nstruct segtree {\r\n    int x = 0, n;\r\n    vector<int> tree, a;\r\n    \r\n    segtree() = default;\r\n    \r\n    void build(int v, int l, int r) {\r\n        if (l + 1 == r) {\r\n            tree[v] = binary_search(all(a), l);\r\n            return;\r\n        }\r\n        int m = (l + r) / 2;\r\n        build(2 * v + 1, l, m);\r\n        build(2 * v + 2, m, r);\r\n        tree[v] = tree[2 * v + 1] + tree[2 * v + 2];\r\n    }\r\n    \r\n    segtree(vector<int> a) : a(a) {\r\n        sort(all(a));\r\n        n = (1 << 20);\r\n        tree.resize(4 * n);\r\n        build(0, 0, n);\r\n    }\r\n    \r\n    void update(int y) {\r\n        x ^= y;\r\n    }\r\n    \r\n    int get(int v, int l, int r, int level = 19) {\r\n        if (l + 1 == r)\r\n            return l;\r\n        int m = (l + r) / 2;\r\n        if ((x >> level) & 1) {\r\n            if (tree[2 * v + 2] != m - l)\r\n                return get(2 * v + 2, l, m, level - 1);\r\n            else\r\n                return get(2 * v + 1, m, r, level - 1);\r\n        }\r\n        else {\r\n            if (tree[2 * v + 1] != m - l)\r\n                return get(2 * v + 1, l, m, level - 1);\r\n            else\r\n                return get(2 * v + 2, m, r, level - 1);\r\n        }\r\n    }\r\n    \r\n    int get() {\r\n        return get(0, 0, n);\r\n    }\r\n};\r\n\r\nint main() {\r\n    cin.tie(0)->sync_with_stdio(0);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<int> a(n);\r\n    cin >> a;\r\n    segtree t(a);\r\n    int xx = 0;\r\n    while (m--) {\r\n        int x;\r\n        cin >> x;\r\n        xx ^= x;\r\n        t.update(x);\r\n        set<int> gg;\r\n        for (int i : a)\r\n            gg.insert(i ^ xx);\r\n        for (int i = 0; i <= n; ++i)\r\n            if (gg.find(i) == g.end()) {\r\n                cout << i << \"\\n\";\r\n                break;\r\n            }\r\n//        cout << t.get() << \"\\n\";\r\n    }\r\n    // xcode mess\r\n    cout << \"\\n\";\r\n}\r\n"
}