{
    "id": 61190097,
    "contestId": 842,
    "creationTimeSeconds": 1569290970,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "2005LSZ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 73318400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+10,M=19;\nstruct node{\n    int s;\n    node *c[2];\n    node(){s=0;c[1]=c[0]=0;}\n}t[N*20];\nnode *rt=&t[1];\nint cnt=1;\nvoid insert(int s,int ct){\n    node *p=rt;\n    for(int i=M,x;i>=0;i--){\n        x=(bool)(s&(1<<i));\n        if(!p->c[x])\n            p->c[x]=&t[++cnt];\n        p->s+=ct;\n        p=p->c[x];\n    }\n    p->s+=ct;\n}\nint query(int s){\n    node *p=rt;\n    int ret=0;\n    for(int i=M;i>=0;i--){\n        bool x=(bool)(s&(1<<i));\n        if(!p->c[x])\n            return ret;\n        if(p->c[x]->s==(1<<i)){\n            ret+=(1<<i);\n            p=p->c[x^1];\n        } else p=p->c[x];\n        if(!p) return ret;\n    }\n    return ret;\n}\nint n,m;\nint a[N];\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1,x;i<=n;i++)\n        scanf(\"%d\",&a[i]);\n    sort(a+1,a+n+1);\n    n=unique(a+1,a+n+1)-a-1;\n    for(int i=1;i<=n;i++)\n        insert(a[i],1);\n    for(int i=1,x,X=0;i<=m;i++){\n        scanf(\"%d\",&x);\n        printf(\"%d\\n\",query(X^=x));\n    }\n}"
}