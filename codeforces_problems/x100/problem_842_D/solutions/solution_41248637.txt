{
    "id": 41248637,
    "contestId": 842,
    "creationTimeSeconds": 1533479982,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "bittudalal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 1513,
    "memoryConsumedBytes": 15769600,
    "source": "#include <bits/stdc++.h>\r\n#include <iostream>\r\n#define ll long long int\r\n#define mod 1000000007\r\n#define pb push_back\r\n#define pf push_front\r\nusing namespace std;\r\n \r\nint ans=0;\r\nstruct node{\r\n    int flag;\r\n    struct node *child[2];\r\n};\r\nstruct node *getnode()\r\n{\r\n    struct node *root;\r\n    root=(struct node *)malloc(sizeof(struct node));\r\n    root->flag=0;\r\n    root->child[0]=NULL;\r\n    root->child[1]=NULL;\r\n    return root;\r\n}\r\nvoid insert(int val,struct node *root)\r\n{\r\n    int i,j,k,l;\r\n    for(i=20;i>=0;i--)\r\n    {\r\n        j=0;\r\n        if((1<<i) & val)   j=1;\r\n        if((root->child[j])==NULL){\r\n            root->child[j]=getnode();\r\n        }\r\n        root=root->child[j];\r\n    }\r\n    root->flag=1;\r\n}\r\nint dfs(struct node *root)\r\n{\r\n    if(root==NULL)  return 0;\r\n    if((root->flag)==1){\r\n        return 2;\r\n    }\r\n    int i,j,k;\r\n    i=dfs(root->child[0]);\r\n    j=dfs(root->child[1]);\r\n    if(i==2 && j==2)\r\n    {\r\n        root->flag=2;\r\n        return 2;\r\n    }\r\n    else {\r\n        root->flag=0;\r\n        return 0;\r\n    }\r\n}\r\nvoid bfs(int val,struct node *root)\r\n{\r\n    int i,j,k,l;\r\n    for(i=20;i>=0;i--)\r\n    {\r\n        if(root==NULL || (root->flag)==1)   return;\r\n        j=0;\r\n        k=(1<<i);\r\n        if((1<<i) & val)   j=1;\r\n        if((root->child[j])==NULL){\r\n            root=root->child[j];\r\n        }\r\n        else if(((root->child[j])->flag)==0){\r\n            root=root->child[j];   \r\n        }\r\n        else {\r\n            ans=ans+k;\r\n            if(j==1)  root=root->child[0];\r\n            else  root=root->child[1];\r\n        }\r\n \r\n    }   \r\n    return;\r\n}\r\nint main ()\r\n{\r\n    int n,i,j,k,l;\r\n    cin>>n;\r\n    int q;\r\n    cin>>q;\r\n    int arr[n];\r\n    struct node *root;\r\n    root=getnode();\r\n    for(i=0;i<n;i++){\r\n         cin>>arr[i];\r\n         insert(arr[i],root);\r\n    }\r\n    int pk=0;\r\n    i=dfs(root);\r\n    while(q--)\r\n    {\r\n        cin>>i;\r\n        pk=pk^i;\r\n        ans=0;\r\n        bfs(pk,root);\r\n        cout<<ans<<endl;\r\n    }\r\n    return 0;\r\n}",
    "suggested_categories": [
        "data structures",
        "algorithms",
        "c++",
        "binary tree",
        "dynamic programming",
        "bit manipulation",
        "graph theory",
        "recursive functions",
        "memory management",
        "error handling",
        "code optimization",
        "modular arithmetic",
        "input/output handling",
        "code reusability",
        "complexity analysis",
        "programming logic",
        "tree traversal",
        "integer manipulation",
        "geometric data structures",
        "binary search"
    ]
}