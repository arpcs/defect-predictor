{
    "id": 218142521,
    "contestId": 1735,
    "creationTimeSeconds": 1691662333,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1735,
        "index": "D",
        "name": "Meta-set",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "hashing",
            "math"
        ]
    },
    "author": {
        "contestId": 1735,
        "members": [
            {
                "handle": "__declspec"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664721300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\n// #pragma GCC optimize(\"Ofast,unroll-loops\")\nusing namespace std;\n#define int long long\nusing ll = long long;\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define sz(x) ((int)(x).size())\n#define rep(i, n) for (int i = 0; i < n; ++i)\n#define rep1(i, n) for (int i = 1; i <= n; ++i)\n#define repp(i, s, n) for (int i = s; i < n; ++i)\nint rd() {\n    int i;\n    cin >> i;\n    return i;\n}\nconst int mod = 998244353;\nint fp(int b, int e) {\n    int r = 1;\n    while (e) {\n        if (e & 1) (r *= b) %= mod;\n        (b *= b) %= mod;\n        e >>= 1;\n    }\n    return r;\n}\n\narray<int, 20> a[1001];\nvoid solve() {\n    int n = rd(), k = rd();\n    set<array<int, 20>> s;\n    rep(i, n) {\n        rep(j, k) a[i][j] = rd();\n        s.insert(a[i]);\n    } \n    int ans = 0;\n    rep(i, n) {\n        set<array<array<int, 20>, 2>> st;\n        rep(j, n) {\n            if (i == j) continue;\n            array<int, 20> need{};\n            rep(x, k) {\n                if (a[i][x] == a[j][x]) need[x] = a[i][x];\n                else need[x] = 3 - a[i][x] - a[j][x];\n            }\n            if (s.count(need)) st.insert({min(need, a[j]), max(need, a[j])});\n        }\n        ans += st.size();\n    }\n    cout << ans;\n}\nsigned main() {\n    // freopen(\"trader.in\", \"r\", stdin);\n    // freopen(\"trader.out\", \"w\", stdout);\n    cin.tie(0)->sync_with_stdio(false);\n    int tc = 1;\n    cout << fixed << setprecision(10);\n    // cin >> tc;\n    for (int i = 1; i <= tc; ++i) {\n        // cout << \"Case #\" << i << \": \";\n        solve();\n    }\n}"
}