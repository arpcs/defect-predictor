{
    "id": 174864664,
    "contestId": 1735,
    "creationTimeSeconds": 1665065318,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1735,
        "index": "D",
        "name": "Meta-set",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "hashing",
            "math"
        ]
    },
    "author": {
        "contestId": 1735,
        "members": [
            {
                "handle": "Yusuf_Fares"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664721300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 2464,
    "memoryConsumedBytes": 108953600,
    "source": "#include <bits/stdc++.h>\r\n#define NMAX 1000\r\n#define KMAX 15\r\n#define int64 long long\r\n#define int unsigned long long\r\n\r\nusing namespace std;\r\n\r\nvector <int> v[NMAX + 1];\r\nint64 vput3[KMAX + 1];\r\nmap <vector <int>, int> mp;\r\n\r\nvoid prec_put3() {\r\n  vput3[0] = 1;\r\n  for (int i = 1; i <= KMAX; i++)\r\n    vput3[i] = vput3[i - 1] * 3;\r\n}\r\n\r\nint64 get_code (vector <int> &vcode) {\r\n  int64 code = 0;\r\n\r\n  for (int i = 0; i < vcode.size(); i++) {\r\n    int ceva = vcode[i];\r\n    code = code + vput3[i] * vcode[i];\r\n  }\r\n\r\n  return code;\r\n}\r\n\r\nint get_third_code(vector <int> &v1, vector <int> &v2) {\r\n  int i, k;\r\n  vector <int> v3;\r\n\r\n  k = v1.size();\r\n  for (i = 0; i < k; i++) {\r\n    if (v1[i] == v2[i])\r\n      v3.push_back(v1[i]);\r\n    else\r\n      v3.push_back(3 - v1[i] - v2[i]);\r\n  }\r\n\r\n  return mp[v3];\r\n}\r\n\r\nsigned main() {\r\n  #ifndef ONLINE_JUDGE\r\n    freopen(\"a.in\", \"r\", stdin);\r\n    freopen(\"a.out\", \"w\", stdout);\r\n  #endif // ONLINE_JUDGE\r\n\r\n  int n, k, i, j, val;\r\n  int64 sol;\r\n\r\n  cin >> n >> k;\r\n\r\n  prec_put3();\r\n  for (i = 0; i < n; i++) {\r\n    for (j = 0; j < k; j++) {\r\n      cin >> val;\r\n      v[i].push_back(val);\r\n    }\r\n\r\n//    int64 code = get_code(v[i]);\r\n//    auto it = mp.find(code);\r\n//    if (it == mp.end())\r\n//      mp.insert({code, i});\r\n    mp.insert({v[i], i});\r\n  }\r\n\r\n  sol = 0;\r\n  for (i = 0; i < n; i++) {\r\n    int cnti = 0;\r\n    for (j = 0; j < n; j++) {\r\n      if (i != j)\r\n        cnti += (get_third_code(v[i], v[j]) > j);\r\n    }\r\n\r\n    sol = sol + (int64)cnti * (cnti - 1) / 2;\r\n  }\r\n\r\n  cout << sol;\r\n  return 0;\r\n}\r\n"
}