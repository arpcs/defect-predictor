{
    "id": 180165039,
    "contestId": 1735,
    "creationTimeSeconds": 1667978032,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1735,
        "index": "D",
        "name": "Meta-set",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "hashing",
            "math"
        ]
    },
    "author": {
        "contestId": 1735,
        "members": [
            {
                "handle": "oleksg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664721300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "//created by Oleksandr Gorpynich\n#pragma GCC optimize(\"O2\")\n \n#include <fstream>\n#include <string>\n#include <iostream>\n#include <bitset>\n#include <math.h>\n#include <string>\n#include <algorithm>\n#include <assert.h>\n#include <vector>\n#include <queue>\n#include<stdio.h>\n#include<ctype.h>\n#include <iterator>\n#include <map>\n#include <set>\n\n#define ll long long\nusing namespace std;\n \n \nint n;\nint k;\n\nmap<ll, ll> exists;\nvector< vector<int> > nums;\n// vector<pair<int, int>> combinations;\n\nint findThird(int one, int two) {\n  vector<ll> third;\n  for (int x = 0; x < k; x++) {\n    if (nums[one][x] == nums[two][x]) {\n      third.push_back(nums[one][x]);\n    } else {\n      vector<ll> pos;\n      pos.push_back(0);\n      pos.push_back(1);\n      pos.push_back(2);\n      pos.erase(remove(pos.begin(), pos.end(), nums[one][x]), pos.end());\n      pos.erase(remove(pos.begin(), pos.end(), nums[two][x]), pos.end());\n      third.push_back(pos[0]);\n    }\n    // cout << third[third.size() - 1] << \" \";\n  }\n  // cout << \"\\n\";\n  ll cur = 1;\n  ll sum = 0;\n  for (int x = 0; x < k; x++) {\n    sum += third[x] * cur;\n    cur *= 3;\n  }\n  return sum;\n}\nint main() {\n  cin >> n >> k;\n  for (int x = 0; x < n; x++) {\n    ll num;\n    vector<int> digits;\n    ll cur = 1;\n    ll sum = 0;\n    for (int y = 0; y < k; y++) {\n      cin >> num;\n      digits.push_back(num);\n      sum += num * cur;\n      cur *= 3;\n    }\n    nums.push_back(digits);\n    exists[sum] = 1;\n  }\n  ll answer = 0;\n  set<ll> tests;\n  for (int x = 0; x < n; x++) {\n    for (int y = x + 1; y < n; y++) {\n      if (x != y) {\n        ll third = findThird(x, y);\n        if (exists.find(third) != exists.end()) {\n          exists[third] += 1;\n          tests.insert(third);\n        }\n      }\n    }\n  }\n  for (auto num: tests) {\n    if (exists.find(num) != exists.end() && exists[num] >= 3) {\n      answer = answer + ((exists[num] - 1)  + (exists[num] - 2)) * (exists[num] - 2) / 2;\n    }\n  }\n  cout << answer << \"\\n\";\n}"
}