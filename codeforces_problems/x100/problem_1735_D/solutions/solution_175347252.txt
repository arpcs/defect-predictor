{
    "id": 175347252,
    "contestId": 1735,
    "creationTimeSeconds": 1665406406,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1735,
        "index": "D",
        "name": "Meta-set",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "hashing",
            "math"
        ]
    },
    "author": {
        "contestId": 1735,
        "members": [
            {
                "handle": "Gaurav3478"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664721300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 1075,
    "memoryConsumedBytes": 56524800,
    "source": "#include <bits/stdc++.h>\r\n#include \"ext/pb_ds/assoc_container.hpp\"\r\n#include \"ext/pb_ds/tree_policy.hpp\"\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define ll            long long int\r\n#define double        long double\r\n#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)\r\n#define INF 1000000000000000005\r\n\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\ntemplate<class T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;\r\n\r\n// Debug Template, copied from Mikel_Arteta_8 (https://codeforces.com/blog/entry/68809)\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\n// End of debugging template\r\n\r\ntemplate<class key, class value, class cmp = std::less<key>>\r\nusing ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\nconst ll MOD = 1e9 + 7;\r\nconst ll N = 200005;\r\n\r\n/*---------------------------------------------------------------------------------------*/\r\nll inv(ll i) {if (i == 1) return 1; return (MOD - ((MOD / i) * inv(MOD % i)) % MOD) % MOD;}\r\nll mod_mul(ll a, ll b) {a = a % MOD; b = b % MOD; return (((a * b) % MOD) + MOD) % MOD;}\r\nll mod_add(ll a, ll b) {a = a % MOD; b = b % MOD; return (((a + b) % MOD) + MOD) % MOD;}\r\nll gcd(ll a, ll b) { if (b == 0) return a; return gcd(b, a % b);}\r\nll ceil_div(ll a, ll b) {return a % b == 0 ? a / b : a / b + 1;}\r\nll pwr(ll a, ll b) {a %= MOD; ll res = 1; while (b > 0) {if (b & 1) res = res * a % MOD; a = a * a % MOD; b >>= 1;} return res;}\r\n/*---------------------------------------------------------------------------------------*/\r\n\r\n/*\r\nloop over all strings i, over all strings j > i\r\nhash the required third card in a hashmap\r\nperform the necesarry calculations\r\n*/\r\n\r\nvoid solve() {  \r\n    map<string, ll> mp;\r\n    ll n, k;\r\n    cin >> n >> k;\r\n    vector<string> vect(n, \"\");\r\n    set<string> megaset;\r\n    for(ll i=0; i<n; i++) {\r\n        for(ll j=0; j<k; j++) {\r\n            char c;\r\n            cin >> c;\r\n            vect[i] += c;\r\n        }\r\n        megaset.insert(vect[i]);\r\n    }\r\n\r\n    debug(vect);\r\n    debug(megaset);\r\n\r\n    for(ll i=0; i<n; i++) {\r\n        for(ll j=i+1; j<n; j++) {\r\n            string req = \"\";\r\n            for(ll k1=0; k1<k; k1++) {\r\n                if(vect[i][k1] == vect[j][k1]) {\r\n                    req += vect[i][k1];\r\n                }\r\n                else {\r\n                    string temp = \"\";\r\n                    temp += vect[i][k1];\r\n                    temp += vect[j][k1];\r\n                    sort(temp.begin(), temp.end());\r\n                    if(temp == \"01\") {\r\n                        req += '2';\r\n                    }\r\n                    else if(temp == \"02\") {\r\n                        req += '1';\r\n                    }\r\n                    else if(temp == \"12\") {\r\n                        req += '0';\r\n                    }\r\n                }\r\n            }\r\n            mp[req]++;\r\n        }\r\n    }\r\n\r\n    debug(mp);\r\n\r\n    ll ans = 0;\r\n    for(auto it: mp) {\r\n        ll val = it.second;\r\n        if(megaset.find(it.first) != megaset.end()) {\r\n            ans += val*(val - 1)/2;\r\n        }\r\n    }\r\n\r\n    cout << ans << endl;\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    clock_t z = clock();\r\n\r\n    ll t = 1;\r\n    // cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n\r\n    cerr << \"Run Time : \" << ((double)(clock() - z) / CLOCKS_PER_SEC) << endl;\r\n\r\n    return 0;\r\n}"
}