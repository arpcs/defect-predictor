{
    "id": 18027127,
    "contestId": 666,
    "creationTimeSeconds": 1463900324,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "fengsuiyan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 2901,
    "memoryConsumedBytes": 38809600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\r\nconst int N = 3010, M = 5010;\r\n\r\nint n, m;\r\nint ans;\r\nvector<int> g[N];\r\ntuple<int, int, int, int> bst;\r\nint dis[N][N], mx[N][3], who[N][3], mx2[N][3], who2[N][3];\r\n\r\nvoid bfs(int s) {\r\n  dis[s][s] = 0;\r\n  queue<int> q;\r\n  q.push(s);\r\n  while (q.size()) {\r\n    int u = q.front();\r\n    q.pop();\r\n    for (int v : g[u]) {\r\n      if (dis[s][v] == -1) {\r\n        dis[s][v] = dis[s][u] + 1;\r\n        q.push(v);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvoid update(int x, int i, int j, int mx[N][3], int who[N][3]) {\r\n  if (x > mx[i][0]) {\r\n    mx[i][2] = mx[i][1];\r\n    who[i][2] = who[i][1];\r\n    mx[i][1] = mx[i][0];\r\n    who[i][1] = who[i][0];\r\n    mx[i][0] = x;\r\n    who[i][0] = j;\r\n  }\r\n  else if (x > mx[i][1]) {\r\n    mx[i][2] = mx[i][1];\r\n    who[i][2] = who[i][1];\r\n    mx[i][1] = x;\r\n    who[i][1] = j;\r\n  }\r\n  else if (x > mx[i][2]) {\r\n    mx[i][2] = x;\r\n    who[i][2] = j;\r\n  }\r\n}\r\n\r\nint main() {\r\n  scanf(\"%d%d\", &n, &m);\r\n  for (int i = 0, u, v; i < m; ++i) {\r\n    scanf(\"%d%d\", &u, &v);\r\n    if (u != v) {\r\n      g[u].push_back(v);\r\n    }\r\n  }\r\n  for (int i = 1; i <= n; ++i) {\r\n    sort(g[i].begin(), g[i].end());\r\n    g[i].erase(unique(g[i].begin(), g[i].end()), g[i].end());\r\n  }\r\n  memset(dis, -1, sizeof(dis));\r\n  for (int i = 1; i <= n; ++i) {\r\n    bfs(i);\r\n  }\r\n  for (int i = 1; i <= n; ++i) {\r\n    for (int j = 1; j <= n; ++j) {\r\n      if (dis[i][j] == -1) continue;\r\n      update(dis[i][j], i, j, mx, who);\r\n      update(dis[i][j], j, i, mx2, who2);\r\n    }\r\n  }\r\n  for (int i = 1; i <= n; ++i) {\r\n    for (int j = 1; j <= n; ++j) {\r\n      if (dis[i][j] == -1 || i == j) continue;\r\n      vector<int> ti, tj;\r\n      for (int k = 0; k < 3; ++k) {\r\n        if (who2[i][k] == j) continue;\r\n        ti.push_back(who2[i][k]);\r\n        if (ti.size() == 2) break;\r\n      }\r\n      for (int k = 0; k < 3; ++k) {\r\n        if (who[j][k] == i) continue;\r\n        tj.push_back(who[j][k]);\r\n        if (tj.size() == 2) break;\r\n      }\r\n      if (ti[0] == tj[0]) {\r\n        int t1 = dis[ti[0]][i];\r\n        int tt1 = dis[ti[1]][i];\r\n        int t2 = dis[j][tj[0]];\r\n        int tt2 = dis[j][tj[1]];\r\n        if (ans < t1 + tt2 + dis[i][j]) {\r\n          ans = t1 + tt2 + dis[i][j];\r\n          bst = make_tuple(ti[0], i, j, tj[1]);\r\n        }\r\n        if (ans < t2 + tt1 + dis[i][j]) {\r\n          ans = t2 + tt1 + dis[i][j];\r\n          bst = make_tuple(ti[1], i, j, tj[0]);\r\n        }\r\n      }\r\n      else {\r\n        if (ans < dis[ti[0]][i] + dis[j][tj[0]] + dis[i][j]) {\r\n          ans = dis[ti[0]][i] + dis[j][tj[0]] + dis[i][j];\r\n          bst = make_tuple(ti[0], i, j, tj[0]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  //printf(\"%d\\n\", ans);\r\n  printf(\"%d %d %d %d\\n\", get<0>(bst), get<1>(bst), get<2>(bst), get<3>(bst));\r\n  return 0;\r\n}\r\n"
}