{
    "id": 170570699,
    "contestId": 666,
    "creationTimeSeconds": 1662115444,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Ling_Lover"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 36352000,
    "source": "#include <cstdio>\r\n#include <cstring>\r\n#include <vector>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nconst int maxn = 3e3 + 5;\r\n\r\nint n, m;\r\nint dis[maxn][maxn];\r\nbool vis[maxn];\r\nvector<int> pre[maxn], nxt[maxn], g[maxn];\r\n\r\nvoid bfs(int s)\r\n{\r\n    queue<int> q;\r\n    memset(vis, false, (n + 1) * sizeof(bool));\r\n    q.push(s);\r\n    while (!q.empty())\r\n    {\r\n        int u = q.front();\r\n        q.pop();\r\n        vis[u] = true;\r\n        for (int v : g[u])\r\n        {\r\n            if (!vis[v])\r\n            {\r\n                dis[s][v] = dis[s][u] + 1;\r\n                q.push(v);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int ans = 0, sec[4];\r\n    scanf(\"%d%d\", &n, &m);\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        int u, v;\r\n        scanf(\"%d%d\", &u, &v);\r\n        g[u].push_back(v);\r\n    }\r\n    for (int i = 1; i <= n; i++) bfs(i);\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        for (int j = 1; j <= n; j++)\r\n        {\r\n            if (dis[i][j])\r\n            {\r\n                if (pre[i].size() < 3) pre[i].push_back(j);\r\n                else for (int k = 0; k < 3; k++) if (dis[j][i] > dis[pre[i][k]][i]) { pre[i][k] = j; break; }\r\n            }\r\n            if (dis[j][i])\r\n            {\r\n                if (nxt[i].size() < 3) nxt[i].push_back(j);\r\n                else for (int k = 0; k < 3; k++) if (dis[i][j] > dis[i][nxt[i][k]]) { nxt[i][k] = j; break; }\r\n            }\r\n        }\r\n    }\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        for (int j = 1; j <= n; j++)\r\n        {\r\n            if (!dis[i][j]) continue;\r\n            for (int k : pre[i])\r\n            {\r\n                if ((i == k) || (j == k)) continue;\r\n                for (int l : nxt[j])\r\n                {\r\n                    if ((i == l) || (j == l) || (k == l)) continue;\r\n                    int tmp = dis[k][i] + dis[i][j] + dis[j][l];\r\n                    if (tmp > ans) ans = tmp, sec[0] = k, sec[1] = i, sec[2] = j, sec[3] = l;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    printf(\"%d %d %d %d\\n\", sec[0], sec[1], sec[2], sec[3]);\r\n    return 0;\r\n}\r\n\r\n/*\r\n6 16\r\n1 4\r\n1 4\r\n1 1\r\n1 2\r\n2 6\r\n3 3\r\n3 4\r\n3 3\r\n4 6\r\n4 6\r\n5 1\r\n5 2\r\n5 5\r\n5 5\r\n5 2\r\n6 4\r\n\r\n5 1 2 4\r\n*/"
}