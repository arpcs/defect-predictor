{
    "id": 28724854,
    "contestId": 666,
    "creationTimeSeconds": 1500554033,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "M_yuxuan2004"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <map>\r\n#include <set>\r\n#include <cmath>\r\n#include <ctime>\r\n#include <stack>\r\n#include <queue>\r\n#include <cstdio>\r\n#include <cctype>\r\n#include <bitset>\r\n#include <string>\r\n#include <vector>\r\n#include <cstring>\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <functional>\r\n#define fuck(x) cout<<\"[\"<<x<<\"]\";\r\n#define FIN freopen(\"input.txt\",\"r\",stdin);\r\n#define FOUT freopen(\"output.txt\",\"w+\",stdout);\r\n//#pragma comment(linker, \"/STACK:102400000,102400000\")\r\nusing namespace std;\r\ntypedef long long LL;\r\ntypedef pair<int, int> PII;\r\n\r\nconst int MX = 3e3 + 5;\r\nconst int INF = 0x3f3f3f3f;\r\nconst int mod = 1e9 + 7;\r\n\r\nstruct Edge {\r\n    int v, nxt;\r\n} E[20000];\r\nint Head[MX], rear;\r\nvoid edge_init() {\r\n    rear = 0;\r\n    memset(Head, -1, sizeof(Head));\r\n}\r\nvoid edge_add(int u, int v) {\r\n    E[rear].v = v;\r\n    E[rear].nxt = Head[u];\r\n    Head[u] = rear++;\r\n}\r\n\r\nint n, m, d[MX], G[MX][MX];\r\nint to[2][MX], from[2][MX];\r\nint toid[2][MX], fromid[2][MX];\r\n\r\nbool check(int a, int b, int c, int d) {\r\n    int s[] = {a, b, c, d};\r\n    sort(s, s + 4);\r\n    int sz = unique(s, s + 4) - s;\r\n    return sz == 4;\r\n}\r\nint main() {\r\n    edge_init(); //FIN;\r\n    scanf(\"%d%d\", &n, &m);\r\n    for(int i = 1; i <= m; i++) {\r\n        int u, v;\r\n        scanf(\"%d%d\", &u, &v);\r\n        edge_add(u, v);\r\n    }\r\n    for(int i = 1; i <= n; i++) {\r\n        memset(d, INF, sizeof(d));\r\n        queue<int> Q;\r\n        d[i] = 0; Q.push(i);\r\n        while(!Q.empty()) {\r\n            int u = Q.front(); Q.pop();\r\n            for(int j = Head[u]; ~j; j = E[j].nxt) {\r\n                int v = E[j].v;\r\n                if(d[v] == INF) {\r\n                    d[v] = d[u] + 1;\r\n                    Q.push(v);\r\n                }\r\n            }\r\n        }\r\n        for(int j = 1; j <= n; j++) {\r\n            if(d[j] != INF) {\r\n                G[i][j] = d[j];\r\n                if(from[0][j] < d[j]) {\r\n                    from[1][j] = from[0][j]; fromid[1][j] = fromid[0][j];\r\n                    from[0][j] = d[j]; fromid[0][j] = i;\r\n                } else if(from[1][j] < d[j]) {\r\n                    from[1][j] = d[j]; fromid[1][j] = i;\r\n                }\r\n                if(to[0][i] < d[j]) {\r\n                    to[1][i] = to[0][i]; toid[1][i] = toid[0][i];\r\n                    to[0][i] = d[j]; toid[0][i] = j;\r\n                } else if(to[1][i] < d[j]) {\r\n                    to[1][i] = d[j]; toid[1][i] = j;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    int a, b, c, d, Max = 0;\r\n    for(int u = 1; u <= n; u++) {\r\n        for(int v = 1; v <= n; v++) {\r\n            for(int i = 0; i <= 1; i++) {\r\n                for(int j = 0; j <= 1; j++) {\r\n                    if(G[u][v] && from[i][u] && to[j][v]) {\r\n                        if(check(u, v, fromid[i][u], toid[j][v]) && Max < G[u][v] + from[i][u] + to[j][v]) {\r\n                            Max = G[u][v] + from[i][u] + to[j][v];\r\n                            a = fromid[i][u]; b = u; c = v; d = toid[j][v];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    printf(\"%d %d %d %d\\n\", a, b, c, d);\r\n    return 0;\r\n}"
}