{
    "id": 27178799,
    "contestId": 666,
    "creationTimeSeconds": 1495022793,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "LEo_LY"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 2090,
    "memoryConsumedBytes": 236851200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define Riep(n) for(int i=1;i<=n;i++)\r\n#define Riop(n) for(int i=0;i<n;i++)\r\n#define Rjep(n) for(int j=1;j<=n;j++)\r\n#define Rjop(n) for(int j=0;j<n;j++)\r\n#define mst(ss,b) memset(ss,b,sizeof(b));\r\ntypedef long long LL;\r\nconst LL mod=1e9+7;\r\nconst double PI=acos(-1.0);\r\nconst int inf=0x3f3f3f3f;\r\nconst int N=1e5+6;\r\nint n,m;\r\nint p[3003][3003],vis[3003];\r\nvector<int>ve[3003];\r\nstruct node\r\n{\r\n    int num,dis;\r\n};\r\nvector<node>to[3003],from[3003];\r\nqueue<int>qu;\r\nint bfs(int x)\r\n{\r\n    while(!qu.empty())qu.pop();\r\n    memset(vis,0,sizeof(vis));\r\n    qu.push(x);\r\n    vis[x]=1;\r\n    while(!qu.empty())\r\n    {\r\n        int fr=qu.front();\r\n        qu.pop();\r\n        vis[fr]=0;\r\n        int len=ve[fr].size();\r\n        Riop(len)\r\n        {\r\n            if(p[x][ve[fr][i]]>p[x][fr]+1)\r\n            {\r\n                p[x][ve[fr][i]]=p[x][fr]+1;\r\n            if(!vis[ve[fr][i]])\r\n            {\r\n                vis[ve[fr][i]]=1;\r\n                qu.push(ve[fr][i]);\r\n            }\r\n            }\r\n        }\r\n    }\r\n}\r\nint cmp(node x,node y)\r\n{\r\n    return x.dis>y.dis;\r\n}\r\nint main()\r\n{\r\n    scanf(\"%d%d\",&n,&m);\r\n    Riep(n)\r\n        Rjep(n)\r\n        if(i!=j)p[i][j]=inf;\r\n        else p[i][j]=0;\r\n    int u,v;\r\n    Riep(m)\r\n    {\r\n        scanf(\"%d%d\",&u,&v);\r\n        ve[u].push_back(v);\r\n    }\r\n    Riep(n)bfs(i);\r\n    node x;\r\n    Riep(n)\r\n    {\r\n        Rjep(n)\r\n        {\r\n            if(p[i][j]!=inf&&i!=j)\r\n            {\r\n                x.num=i,x.dis=p[i][j];\r\n                to[j].push_back(x);\r\n                x.num=j;\r\n                from[i].push_back(x);\r\n            }\r\n        }\r\n    }\r\n\r\n    Riep(n)sort(to[i].begin(),to[i].end(),cmp),sort(from[i].begin(),from[i].end(),cmp);\r\n    int dis=0,ans1,ans2,ans3,ans4,s1,s2,s3,s4;\r\n    Riep(n)\r\n    {\r\n        s2=i;\r\n        Rjep(n)\r\n        {\r\n            s3=j;\r\n            if(i==j||p[i][j]==inf)continue;\r\n            for(int k=0;k<4&&k<to[i].size();k++)\r\n            {\r\n                if(i==to[i][k].num||j==to[i][k].num)continue;\r\n                s1=to[i][k].num;\r\n                for(int d=0;d<5&&d<from[j].size();d++)\r\n                {\r\n                    if(i==from[j][d].num||j==from[j][d].num||s1==from[j][d].num)continue;\r\n                    s4=from[j][d].num;\r\n                    if(p[s1][s2]+p[s2][s3]+p[s3][s4]>dis)\r\n                    {\r\n                        dis=p[s1][s2]+p[s2][s3]+p[s3][s4];\r\n                        ans1=s1,ans2=s2,ans3=s3,ans4=s4;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    printf(\"%d %d %d %d\\n\",ans1,ans2,ans3,ans4);\r\n\r\n    return 0;\r\n}"
}