{
    "id": 114374112,
    "contestId": 666,
    "creationTimeSeconds": 1619534582,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 2433,
    "memoryConsumedBytes": 36249600,
    "source": "#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int inf=0x3f3f3f3f;\nint map[3003][3003];\nstruct Edge{\n\tint v,next;\n\tEdge(int v,int next){\n\t\tthis->v=v;\n\t\tthis->next=next;\n\t}\n\tEdge(){\n\t}\n};\nEdge edge[5005];\nint head[3003],cnt;\nbool vis[3003];\nvoid add_edge(int u,int v);\nvoid dfs(int u,int step,int cost);\nint ans[5],fake[5];\nint maxn;\nint bfs(int s);\nint main(){\n\tmemset(head,-1,sizeof(head));\n\tmemset(map,inf,sizeof(map));\n\tint n,m;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v,w;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tif(u==v){\n\t\t\tcontinue;\n\t\t}\n\t\tmap[u][v]=1;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(map[i][j]!=inf){\n\t\t\t\tadd_edge(i,j);\n\t\t\t}\n\t\t}\n\t}\n\tmemset(map,inf,sizeof(map));\n\tfor(int i=1;i<=n;i++){\n\t\tbfs(i);\n\t}\n\tmemset(head,-1,sizeof(head));\n\tcnt=0;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=n;j++){\n\t\t\tif(map[i][j]!=inf){\n\t\t\t\tadd_edge(i,j);\n\t\t\t}\n\t\t}\n\t}\n\tmemset(vis,false,sizeof(vis));\n\tfor(int i=1;i<=n;i++){\n\t\tdfs(i,1,0);\n\t}\n\tfor(int i=1;i<=4;i++){\n\t\tprintf(\"%d%c\",ans[i],i==4?'\\n':' ');\n\t}\n\treturn 0;\n} \nint bfs(int s){\n\tmap[s][s]=0;\n\tqueue<int>q;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];~i;i=edge[i].next){\n\t\t\tint v=edge[i].v;\n\t\t\tif(map[s][v]==inf){\n\t\t\t\tmap[s][v]=map[s][u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n}\nvoid dfs(int u,int step,int cost){\n\tfake[step]=u;\n\tif(step==4&&cost>=maxn){\n\t\tmaxn=cost;\n\t\tmemcpy(ans,fake,sizeof(fake));\n\t\treturn;\n\t}\n\telse if(step==4){\n\t\treturn;\n\t}\n\tvis[u]=true;\n\tfor(int i=head[u];~i;i=edge[i].next){\n\t\tint v=edge[i].v;\n\t\tint w=map[u][v];\n\t\tif(vis[v]){\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(v,step+1,cost+w);\n\t}\n\tvis[u]=false;\n}\nvoid add_edge(int u,int v){\n\tedge[cnt]=Edge(v,head[u]);head[u]=cnt++;\n}\n\t \t\t \t\t \t  \t \t \t \t\t\t   \t   \t\t"
}