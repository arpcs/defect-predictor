{
    "id": 109529708,
    "contestId": 666,
    "creationTimeSeconds": 1615352421,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Mohammad.Nour"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4300800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\n#define pb push_back\r\n#define F first\r\n#define S second\r\n\r\nconst int N = 1e3+5 ;\r\nint n, m, mx ;\r\nint dis[N][N] ;\r\n\r\nvector<int>g[5*N], ans;\r\nset<pair<int, int > > in[N], out[N] ;\r\n\r\n\r\nvoid bfs(int start)\r\n{\r\n    queue<pair<int, int>>q ;\r\n    dis[start][start] = 0 ;\r\n    q.push({start, 0 }) ;\r\n\r\n    while(q.size())\r\n    {\r\n        int u = q.front().F ;\r\n        int w = q.front().S;\r\n        q.pop() ;\r\n\r\n        if (dis[start][u] < w)\r\n            continue ;\r\n\r\n        for (auto v : g[u])\r\n        {\r\n            if (dis[start][v] > dis[start][u] + 1)\r\n            {\r\n                dis[start][v] = dis[start][u] + 1;\r\n                q.push({v, dis[start][v]}) ;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n#ifdef Mohammad\r\n    freopen(\"input.in\",\"r\",stdin);\r\n#endif\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    cin >> n >> m ;\r\n\r\n    for (int i = 1 ; i<= m ; i++)\r\n    {\r\n        int x, y ;\r\n        cin >> x >> y ;\r\n        g[x].pb(y) ;\r\n    }\r\n\r\n    for (int i = 1 ; i<= n ; i++)\r\n        for (int j = 1 ; j<= n ; j++)\r\n            dis[i][j] = 1e9 ;\r\n\r\n    for (int i = 1 ; i<= n ; i++)\r\n        bfs(i) ;\r\n\r\n    for (int i = 1 ; i<= n ; i++)\r\n        for (int j = 1 ; j<= n ; j++)\r\n        {\r\n            if (i == j || dis[i][j] == 1e9)\r\n                continue ;\r\n\r\n            in[j].insert({dis[i][j], i}) ;\r\n            out[i].insert({dis[i][j], j}) ;\r\n        }\r\n\r\n    for (int i = 1 ; i<= n; i++)\r\n    {\r\n        for (int j = 1 ; j<= n ; j++)\r\n        {\r\n            if (i == j || dis[i][j] == 1e9)\r\n                continue ;\r\n\r\n            int cnt = dis[i][j] ;\r\n            auto p = *in[i].rbegin() ;\r\n            auto t = *out[j].rbegin() ;\r\n\r\n            cnt += p.F ;\r\n            cnt += t.F ;\r\n\r\n            if (mx < cnt)\r\n            {\r\n                ans.clear() ;\r\n                ans.pb(p.S) ;\r\n                ans.pb(i) ;\r\n                ans.pb(j) ;\r\n                ans.pb(t.S) ;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (auto x : ans)\r\n        cout<<x<<\" \" ;\r\n}\r\n"
}