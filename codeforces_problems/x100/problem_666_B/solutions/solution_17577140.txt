{
    "id": 17577140,
    "contestId": 666,
    "creationTimeSeconds": 1461950991,
    "relativeTimeSeconds": 3291,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "zetamoo"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 12,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 38502400,
    "source": "#include <vector>\r\n#include <list>\r\n#include <map>\r\n#include <math.h>\r\n#include <cmath>\r\n#include <set>\r\n#include <queue>\r\n#include <deque>\r\n#include <string>\r\n#include <stack>\r\n#include <bitset>\r\n#include <algorithm>\r\n#include <functional>\r\n#include <numeric>\r\n#include <utility>\r\n#include <string.h>\r\n#include <sstream>\r\n#include <iostream>\r\n#include <iomanip>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <ctime>\r\nusing namespace std;\r\n\r\nvector<int>graph[3009];\r\nint path[3009][3009];\r\nvector<pair<int,int> >longestpath[3009];\r\nvector<pair<int,int> >longestpath1[3009];\r\n\r\nint bfs(int st)\r\n{\r\n    queue<pair<int,int> >q;\r\n    q.push(make_pair(0,st));\r\n    bool vis[3009]={0};\r\n    vis[st]=1;\r\n    while(q.size())\r\n    {\r\n        int i=q.front().second;\r\n        int x=q.front().first;\r\n        path[st][i]=x;\r\n        if(longestpath[st].size()<5)\r\n            longestpath[st].push_back(q.front());\r\n        else\r\n            longestpath[st][4]=q.front();\r\n        if(longestpath1[i].size()<5)\r\n            longestpath1[i].push_back(make_pair(x,st));\r\n        else\r\n            longestpath1[i][4]=make_pair(x,st);\r\n        sort(longestpath[st].rbegin(),longestpath[st].rend());\r\n        sort(longestpath1[st].rbegin(),longestpath1[st].rend());\r\n        for(int f=0;f<graph[i].size();f++)\r\n        {\r\n            if(!vis[graph[i][f]])\r\n            {\r\n                vis[graph[i][f]]=1;\r\n                q.push(make_pair(x+1,graph[i][f]));\r\n            }\r\n        }\r\n        q.pop();\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int n,m;\r\n    cin>>n>>m;\r\n    for(int f=0;f<m;f++)\r\n    {\r\n        int a,b;\r\n        cin>>a>>b;\r\n        graph[a].push_back(b);\r\n    }\r\n    memset(path,-1,sizeof path);\r\n    for(int f=1;f<=n;f++)\r\n        bfs(f);\r\n    int maxi=0,a,b,c,d;\r\n    for(int f=1;f<=n;f++)\r\n    {\r\n        for(int f1=1;f1<=n;f1++)\r\n        {\r\n            if(f!=f1&&path[f][f1]!=-1)\r\n            for(int f2=0;f2<longestpath1[f].size();f2++)\r\n            {\r\n                if(f!=longestpath1[f][f2].second&&f1!=longestpath1[f][f2].second)\r\n                for(int f3=0;f3<longestpath[f1].size();f3++)\r\n                {\r\n                    if(f!=longestpath[f1][f3].second&&f1!=longestpath[f1][f3].second&&longestpath1[f][f2].second!=longestpath[f1][f3].second)\r\n                    {\r\n                        if(maxi<path[f][f1]+longestpath1[f][f2].first+longestpath[f1][f3].first)\r\n                        {\r\n                            maxi=path[f][f1]+longestpath1[f][f2].first+longestpath[f1][f3].first;\r\n                            b=f;\r\n                            c=f1;\r\n                            a=longestpath1[f][f2].second;\r\n                            d=longestpath[f1][f3].second;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout<<a<<\" \"<<b<<\" \"<<c<<\" \"<<d<<endl;\r\n}\r\n"
}