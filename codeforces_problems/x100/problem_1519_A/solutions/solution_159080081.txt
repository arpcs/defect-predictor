{
    "id": 159080081,
    "contestId": 1519,
    "creationTimeSeconds": 1654016004,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "A",
        "name": "Red and Blue Beans",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "math"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "Michaela_Lehotska"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader;\r\nimport java.io.OutputStreamWriter;\r\nimport java.io.BufferedWriter;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\n\r\npublic class Submit {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\ttry (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\t\t\t\tInputReader reader = new InputReader()) {\r\n\t\t\tint t = reader.nextInt();\r\n\t\t\twhile (t-- > 0) {\r\n\t\t\t\tint a = reader.nextInt();\r\n\t\t\t\tint b = reader.nextInt();\r\n\t\t\t\tint d = reader.nextInt();\r\n\t\t\t\t\r\n\t\t\t\tif (d == 0 && Math.abs(a-b) == d) {\r\n\t\t\t\t\twriter.append(\"YES\" + System.lineSeparator());\r\n\t\t\t\t\twriter.flush();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tint min = a > b ? b : a;\r\n\t\t\t\tint max = a > b ? a : b;\r\n\t\t\t\tif (max / min > d) {\r\n\t\t\t\t\twriter.append(\"NO\");\r\n\t\t\t\t} else {\r\n\t\t\t\t\twriter.append(\"YES\");\r\n\t\t\t\t}\r\n\t\t\t\twriter.append(System.lineSeparator());\r\n\t\t\t\twriter.flush();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nclass InputReader implements AutoCloseable {\r\n\r\n\tprivate BufferedReader bufferedReader;\r\n\tprivate StringTokenizer tokenizer;\r\n\r\n\tpublic InputReader() {\r\n\t\tbufferedReader = new BufferedReader(new InputStreamReader(System.in));\r\n\t}\r\n\r\n\tpublic String next() {\r\n\t\twhile (tokenizer == null || !tokenizer.hasMoreElements()) {\r\n\t\t\ttry {\r\n\t\t\t\ttokenizer = new StringTokenizer(bufferedReader.readLine());\r\n\t\t\t} catch (IOException ex) {\r\n\t\t\t\tex.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn tokenizer.nextToken();\r\n\t}\r\n\r\n\tpublic char nextChar() {\r\n\t\tchar character = ' ';\r\n\t\ttry {\r\n\t\t\tcharacter = (char) bufferedReader.read();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\treturn character;\r\n\t}\r\n\r\n\tpublic int nextInt() {\r\n\t\treturn Integer.parseInt(next());\r\n\t}\r\n\r\n\tpublic long nextLong() {\r\n\t\treturn Long.parseLong(next());\r\n\t}\r\n\r\n\tpublic double nextDouble() {\r\n\t\treturn Double.parseDouble(next());\r\n\t}\r\n\r\n\tpublic String nextLine() {\r\n\t\tString line = \"\";\r\n\t\ttry {\r\n\t\t\tline = bufferedReader.readLine();\r\n\t\t} catch (IOException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t\treturn line;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void close() {\r\n\t\ttry {\r\n\t\t\tthis.bufferedReader.close();\r\n\t\t} catch (IOException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n"
}