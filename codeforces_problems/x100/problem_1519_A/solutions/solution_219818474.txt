{
    "id": 219818474,
    "contestId": 1519,
    "creationTimeSeconds": 1692635409,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "A",
        "name": "Red and Blue Beans",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "math"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "looklakshya"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\npublic class CodeForces {\n    public static void main(String[] zzzzzz) throws IOException {\n        FastReader sc = new FastReader();\n\n        int test = sc.nextInt();\n        while (test-- > 0) {\n\n            long red = sc.nextLong();\n            long blue = sc.nextInt();\n            long diff = sc.nextLong();\n\n            if (red < 1 || blue < 1) {\n                System.out.println(\"NO\");\n            } else {\n\n                long big = Math.max(red, blue);\n                long small = Math.min(red, blue);\n                long left = big - small;\n\n                boolean condition = (left / small) + (left % small) <= diff;\n                System.out.println(condition ? \"YES\" : \"NO\");\n            }\n\n        }\n\n    }\n\n    private static long find(long k) {\n        for (long i = 2; i <= k; i++) {\n            if ((i - 1) * (i - 1) <= k && k <= i * i) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n\n    private static void swap(long[] arr, int i, int j) {\n        long temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = arr[i];\n    }\n\n    private static int gcd(int a, int b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n\n    private static long gcd(long a, long b) {\n        return b == 0 ? a : gcd(b, a % b);\n    }\n\n}\n\n// Pair class\nclass Pair<E, V> implements Comparable<Pair<E, V>> {\n\n    public Pair(E first, V second) {\n        this.first = first;\n        this.second = second;\n    }\n\n    E first;\n    V second;\n\n    @Override\n    public int compareTo(Pair o) {\n        return (int) ((long) this.first - (long) o.first);\n    }\n\n    @Override\n    public String toString() {\n        return \"<\" + first + \",\" + second + \">\";\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((first == null) ? 0 : first.hashCode());\n        result = prime * result + ((second == null) ? 0 : second.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Pair other = (Pair) obj;\n        if (first == null) {\n            if (other.first != null)\n                return false;\n        } else if (!first.equals(other.first))\n            return false;\n        if (second == null) {\n            if (other.second != null)\n                return false;\n        } else if (!second.equals(other.second))\n            return false;\n        return true;\n    }\n}\n\n// Special class for taking fast I/O in Java\nclass FastReader {\n    BufferedReader br;\n    StringTokenizer st;\n\n    public FastReader() {\n        br = new BufferedReader(new InputStreamReader(System.in));\n    }\n\n    String next() {\n        while (st == null || !st.hasMoreElements()) {\n            try {\n                st = new StringTokenizer(br.readLine());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return st.nextToken();\n    }\n\n    int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    long nextLong() {\n        return Long.parseLong(next());\n    }\n\n    double nextDouble() {\n        return Double.parseDouble(next());\n    }\n\n    String nextLine() {\n        String str = \"\";\n        try {\n            if (st.hasMoreTokens()) {\n                str = st.nextToken(\"\\n\");\n            } else {\n                str = br.readLine();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return str;\n    }\n}\n"
}