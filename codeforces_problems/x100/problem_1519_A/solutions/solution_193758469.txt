{
    "id": 193758469,
    "contestId": 1519,
    "creationTimeSeconds": 1676488462,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1519,
        "index": "A",
        "name": "Red and Blue Beans",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "math"
        ]
    },
    "author": {
        "contestId": 1519,
        "members": [
            {
                "handle": "arvindf232"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619706900
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 0,
    "source": "// 2023.02.15 at 19:13:05 GMT\r\nimport java.io.BufferedInputStream\r\nimport java.io.File\r\nimport java.io.PrintWriter\r\nimport kotlin.system.measureTimeMillis\r\nimport java.util.TreeMap\r\nimport java.util.TreeSet\r\nimport kotlin.math.absoluteValue\r\nimport kotlin.random.Random\r\nimport kotlin.random.nextInt\r\n\r\n// 1. Modded\r\nconst val p = 1000000007L\r\nconst val pI = p.toInt()\r\nfun Int.adjust():Int{ if(this >= pI){ return this  - pI }else if (this < 0){ return this + pI };return this }\r\nfun Int.snap():Int{ if(this >= pI){return this - pI} else return this}\r\ninfix fun Int.mm(b:Int):Int{ return ((this.toLong() * b) % pI).toInt() }\r\ninfix fun Int.mp(b:Int):Int{ val ans = this + b;return if(ans >= pI) ans - pI else ans }\r\ninfix fun Int.ms(b:Int):Int{ val ans = this - b;return if(ans < 0) ans + pI else ans }\r\nfun Int.inverse():Int = intPow(this,pI-2,pI)\r\ninfix fun Int.modDivide(b:Int):Int{ return this mm (b.inverse()) }\r\nfun intPow(x:Int,e:Int,m:Int):Int{\r\n    var X = x ; var E =e ; var Y = 1\r\n    while(E > 0){\r\n        if(E and 1 == 0){\r\n            X = ((1L * X * X) % m).toInt()\r\n            E = E shr 1\r\n        }else{\r\n            Y = ((1L * X * Y) % m).toInt()\r\n            E -= 1\r\n        }\r\n    }\r\n    return Y\r\n}\r\n// 2. DP initial values\r\nconst val plarge = 1_000_000_727\r\nconst val nlarge = -plarge\r\nconst val phuge = 2_727_000_000_000_000_000L\r\nconst val nhuge = -phuge\r\n// 3. convenience conversions\r\nval Boolean.chi:Int get() = if(this) 1 else 0 //characteristic function\r\nval BooleanArray.chiarray:IntArray get() = IntArray(this.size){this[it].chi}\r\nval Char.code :Int get() = this.toInt() -  'a'.toInt()\r\n//3. hard to write stuff\r\nfun IntArray.put(i:Int,v:Int){ this[i] = (this[i] + v).adjust() }\r\nval mint:MutableList<Int> get() = mutableListOf<Int>()\r\nval mong:MutableList<Long> get() = mutableListOf<Long>()\r\nval mchar:MutableList<Char> get() = mutableListOf()\r\n//4. more outputs\r\nfun List<Char>.conca():String = this.joinToString(\"\")\r\nval CharArray.conca :String get() = this.joinToString(\"\")\r\nval IntArray.conca :String get() = this.joinToString(\" \")\r\n@JvmName(\"concaInt\")\r\nfun List<Int>.conca():String = this.joinToString(\" \")\r\nval LongArray.conca:String get() = this.joinToString(\" \")\r\n@JvmName(\"concaLong\")\r\nfun List<Long>.conca():String = this.joinToString(\" \")\r\n//5. Pair of ints\r\nconst val longmask = (1L shl 32) - 1\r\nfun makepair(a:Int, b:Int):Long = (a.toLong() shl 32) xor (longmask and b.toLong())\r\nval Long.first get() = (this ushr 32).toInt()\r\nval Long.second get() = this.toInt()\r\n//6. strings\r\nval String.size get() = this.length\r\nconst val randCount = 100\r\n//7. bits\r\nfun Int.has(i:Int):Boolean = (this and (1 shl i) != 0)\r\nfun Long.has(i:Int):Boolean = (this and (1L shl i) != 0L)\r\n//8 TIME\r\ninline fun TIME(f:()->Unit){\r\n    val t = measureTimeMillis(){\r\n        f()\r\n    }\r\n    println(\"$t ms\")\r\n}\r\n//9.ordered pair\r\nfun order(a:Int, b:Int):Pair<Int,Int>{\r\n    return Pair(minOf(a,b), maxOf(a,b))\r\n}\r\n//10 rand\r\nfun rand(x:Int) = Random.nextInt(x)\r\nfun rand(x:IntRange) = Random.nextInt(x)\r\nval coin:Boolean get() = Random.nextBoolean()\r\nconst val interactive = false\r\nobject Reader{\r\n    private const val BS = 1 shl 16\r\n    private const val NC = 0.toChar()\r\n    private val buf = ByteArray(BS)\r\n    private var bId = 0\r\n    private var size = 0\r\n    private var c = NC\r\n\r\n    var warningActive = true\r\n    var fakein = StringBuilder()\r\n\r\n    private var IN: BufferedInputStream = BufferedInputStream(System.`in`, BS)\r\n    val OUT: PrintWriter = PrintWriter(System.out)\r\n\r\n    private val char: Char\r\n        get() {\r\n            if(interactive){\r\n                return System.`in`.read().toChar()\r\n            }\r\n            while (bId == size) {\r\n                size = IN.read(buf) // no need for checked exceptions\r\n                if (size == -1) return NC\r\n                bId = 0\r\n            }\r\n            return buf[bId++].toChar()\r\n        }\r\n\r\n    fun nextInt(): Int {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextLong(): Long {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0L\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextString():String{\r\n        val ret = StringBuilder()\r\n        while (true){\r\n            c = char\r\n            if(!isWhitespace(c)){ break}\r\n        }\r\n        ret.append(c)\r\n        while (true){\r\n            c = char\r\n            if(isWhitespace(c)){ break}\r\n            ret.append(c)\r\n        }\r\n        return ret.toString()\r\n    }\r\n    fun isWhitespace(c:Char):Boolean{\r\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t'\r\n    }\r\n    fun rerouteInput(){\r\n        if(warningActive){\r\n            put(\"Custom test enabled\")\r\n            println(\"Custom test enabled\")\r\n            warningActive = false\r\n        }\r\n        val S = fakein.toString()\r\n        println(\"New Case \")\r\n        println(S.take(80))\r\n        println(\"...\")\r\n        fakein.clear()\r\n        IN = BufferedInputStream(S.byteInputStream(),BS)\r\n    }\r\n    fun flush(){\r\n        OUT.flush()\r\n    }\r\n    fun takeFile(name:String){\r\n        IN = BufferedInputStream(File(name).inputStream(),BS)\r\n    }\r\n}\r\nfun eat(){ val st1 = TreeSet<Int>(); val st2 = TreeMap<Int,Int>()}\r\nfun put(aa:Any){\r\n    Reader.OUT.println(aa)\r\n    if(interactive){ Reader.flush()}\r\n}\r\nfun done(){ Reader.OUT.close() }\r\nfun share(aa:Any){\r\n    if(aa is IntArray){Reader.fakein.append(aa.joinToString(\" \"))}\r\n    else if(aa is LongArray){Reader.fakein.append(aa.joinToString(\" \"))}\r\n    else if(aa is List<*>){Reader.fakein.append(aa.joinToString(\" \"))}\r\n    else{Reader.fakein.append(aa.toString())}\r\n    Reader.fakein.append(\"\\n\")\r\n}\r\n\r\nval getintfast:Int get() = Reader.nextInt()\r\nval getint:Int get(){ val ans = getlong ; if(ans > Int.MAX_VALUE) IntArray(1000000000); return ans.toInt() }\r\nval getlong:Long get() = Reader.nextLong()\r\nval getstr:String get() = Reader.nextString()\r\nfun getline(n:Int):IntArray{\r\n    return IntArray(n){getint}\r\n}\r\nfun getlineL(n:Int):LongArray{\r\n    return LongArray(n){getlong}\r\n}\r\nvar dmark = -1\r\ninfix fun Any.dei(a:Any){\r\n    dmark++\r\n    var str = \"<${dmark}>   \"\r\n    debug()\r\n    if(this is String){ str += this\r\n    }else if(this is Int){ str += this.toString()\r\n    }else if(this is Long){ str += this.toString()\r\n    }else{ str += this.toString()}\r\n    if(a is List<*>){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is IntArray){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is LongArray){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is BooleanArray){ println(\"$str :${a.map{if(it)'1' else '0'}.joinToString(\" \")}\")\r\n    }else if(a is Array<*>){\r\n        println(\"$str : \")\r\n        for(c in a){if(c is IntArray){println(c.joinToString(\" \"))}\r\n        else if(c is LongArray){println(c.joinToString(\" \"))}\r\n        else if(c is BooleanArray){println(c.map { if(it) '1' else '0' }.joinToString(\"\"))\r\n        }\r\n        }\r\n        println()\r\n    }else{ println(\"$str : $a\")\r\n    }\r\n}\r\nconst val just = \" \"\r\nfun crash(){\r\n    throw Exception(\"Bad programme\")}\r\nfun assert(a:Boolean){\r\n    if(!a){\r\n        throw Exception(\"Failed Assertion\")\r\n    }}\r\nenum class solveMode {\r\n    real, rand, tc\r\n}\r\nobject solve{\r\n    var mode:solveMode = solveMode.real\r\n    var tcNum:Int = 0\r\n    var rand:()->Unit = {}\r\n    var TC:MutableMap<Int,()->Unit> = mutableMapOf()\r\n    var tn:Long = 0\r\n    fun cases(onecase:()->Unit){\r\n        val t = if(mode == solveMode.real){if(singleCase) 1 else getint} else if(mode == solveMode.tc){1 } else randCount\r\n        if(pI != 998_244_353 && pI != 1_000_000_007){\r\n            throw Exception(\"Not usual primes!\")\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            tn = System.currentTimeMillis()\r\n        }\r\n        repeat(t){\r\n            if(mode == solveMode.tc){\r\n                TC[tcNum]?.let { it() }\r\n                Reader.rerouteInput()\r\n            }else if(mode == solveMode.rand){\r\n                rand()\r\n                Reader.rerouteInput()\r\n            }\r\n            onecase()\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            val dt = System.currentTimeMillis() - tn\r\n            println(\"Time $dt ms \")\r\n        }\r\n    }\r\n    fun rand(a:()->Unit){\r\n        this.rand = a\r\n    }\r\n    fun tc(id:Int = 0,a:()->Unit){\r\n        TC[id] = a\r\n    }\r\n    fun usetc(a:Int = 0 ){\r\n        this.tcNum = a\r\n        this.mode = solveMode.tc\r\n    }\r\n    fun userand(){\r\n        this.mode = solveMode.rand\r\n    }\r\n}\r\nfun debug(){}\r\n\r\n\r\ninfix fun Int.divceil(b:Int):Int{\r\n    return (this/b) + if(this % b > 0) 1 else 0\r\n}\r\ninfix fun Long.divceil(b:Long):Long{\r\n    return (this/b) + if(this % b > 0) 1L else 0L\r\n}\r\ninfix fun Int.div_neg_floor(b:Int):Int{\r\n    return (this/b) - if(this % b < 0) 1 else 0\r\n}\r\ninfix fun Long.div_neg_floor(b:Long):Long{\r\n    return (this/b) - if(this % b < 0) 1L else 0L\r\n}\r\nfun modCount(x:Long, mod:Long, l:Long, r:Long):Long{\r\n    val ans = ((r -x) div_neg_floor mod ) - ((l - x) divceil mod) + 1\r\n    return maxOf(ans,0)\r\n    //coun number of x mod mod in [l..r]\r\n}\r\nconst val singleCase = false\r\nfun main(){\r\n    solve.cases{\r\n\r\n        val r = getint\r\n        val b = getint\r\n        val d = getint\r\n\r\n        var atleast = (r -b).absoluteValue divceil d\r\n        atleast = maxOf(atleast, 1)\r\n        if(r >= atleast && b >= atleast){\r\n            put(\"YES\")\r\n        }else{\r\n            put(\"NO\")\r\n        }\r\n\r\n\r\n\r\n    }\r\n    done()\r\n}\r\n\r\n"
}