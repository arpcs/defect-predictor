{
    "id": 37798151,
    "contestId": 917,
    "creationTimeSeconds": 1525177297,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "99hgz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 121753600,
    "source": "#include <cstdio>\r\n#include <cstring>\r\n#include <cstdlib>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <queue>\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\ntypedef pair<int,int> pr;\r\nvector<int>vq[100010];\r\nstruct Triple{\r\n    int a,b,c;\r\n};\r\nstruct QUERY{\r\n    int u,v,z;\r\n}qs[100010];\r\nint n,m,q,u,v;\r\nchar ech[10],mst[100010];\r\nint ans[100010];\r\nint offline[100010][2],bg[100010],ed[100010],Slen,_ans[100010];\r\nchar S[100010];\r\nvector<pr>ps[100010];\r\nstruct LinkedList{\r\n    int tot,Head[100010],Next[200010];\r\n    pr Val[200010];\r\n    void add(int u,pr v){\r\n        tot++;\r\n        Next[tot]=Head[u];\r\n        Head[u]=tot;\r\n        Val[tot]=v;\r\n    }\r\n}ll;\r\n\r\nstruct SAM{\r\n    int fa[200010], a[200010][26], cnt, len[200010], root, last;\r\n    \r\n    int Head[200010],Next[200010],To[200010],tot,in[200010],out[200010],ts;\r\n    void addedge(int u,int v){\r\n        tot++;\r\n        Next[tot]=Head[u];\r\n        Head[u]=tot;\r\n        To[tot]=v;\r\n    }\r\n    void dfsid(int u){\r\n        in[u]=++ts;\r\n        for(int it=Head[u];it;it=Next[it])\r\n            dfsid(To[it]);\r\n        out[u]=ts;\r\n    }\r\n\r\n    void init(){\r\n        root=++cnt;\r\n    }\r\n    int extend(int last, int ch)\r\n    {\r\n        int p = last, np = ++cnt;\r\n        len[np] = len[p] + 1;\r\n        while (p && !a[p][ch])\r\n            a[p][ch] = np, p = fa[p];\r\n        if (!p)\r\n            fa[np] = root;\r\n        else\r\n        {\r\n            int q = a[p][ch];\r\n            if (len[q] == len[p] + 1)\r\n                fa[np] = q;\r\n            else\r\n            {\r\n                int nq = ++cnt;\r\n                len[nq] = len[p] + 1;\r\n                memcpy(a[nq], a[q], sizeof a[q]);\r\n                fa[nq] = fa[q];\r\n                fa[q] = fa[np] = nq;\r\n                while (p && a[p][ch] == q)\r\n                    a[p][ch] = nq, p = fa[p];\r\n            }\r\n        }\r\n        return np;\r\n    }\r\n    void edges(){\r\n        for(int i=2;i<=cnt;i++)\r\n            addedge(fa[i],i);\r\n    }\r\n}Sam[2];\r\n\r\nstruct TRIE{\r\n    int id,tot,ch[200010][26],pos[100010];\r\n    int fail[100010],ts,in[100010],out[100010],bit[100010],t2s[100010];\r\n    int Head[100010],Next[200010],To[200010],cnt;\r\n    void addedge(int u,int v){\r\n        cnt++;\r\n        Next[cnt]=Head[u];\r\n        Head[u]=cnt;\r\n        To[cnt]=v;\r\n    }\r\n\r\n    void buildac(){\r\n        queue<int>Q;\r\n        Q.push(0);\r\n        while(!Q.empty()){\r\n            int u=Q.front();\r\n            if(u!=fail[u])\r\n                addedge(fail[u],u);\r\n            Q.pop();\r\n            for(int i=0;i<26;i++){\r\n                int v=ch[u][i];\r\n                if(v){\r\n                    Q.push(v);\r\n                    if(u)\r\n                        fail[v]=ch[fail[u]][i];\r\n                }else\r\n                    ch[u][i]=ch[fail[u]][i];\r\n            }\r\n        }\r\n    }\r\n    void dfs(int u){\r\n        in[u]=++ts;\r\n        for(int it=Head[u];it;it=Next[it])\r\n            dfs(To[it]);\r\n        out[u]=ts;\r\n    }\r\n    void add(int x,int v){\r\n        for(;x<=ts;x+=(x&-x))\r\n            bit[x]+=v;\r\n    }\r\n    int sum(int x){\r\n        int res=0;\r\n        for(;x;x-=(x&-x))\r\n            res+=bit[x];\r\n        return res;\r\n    }\r\n    void buildsam(int u,int pre){\r\n        t2s[u]=pre;\r\n        for(int i=0;i<26;i++)\r\n            if(ch[u][i])\r\n                buildsam(ch[u][i],Sam[id].extend(pre,i));\r\n    }\r\n}Trie[2];\r\n\r\nnamespace Tree{\r\n    int cnt,Head[100010],Next[200010],To[200010],Val[200010],fa[100010];\r\n    bool vis[100010];\r\n    int ncnt,nHead[100010],nNext[200010],nTo[200010];\r\n    void addedge(int u,int v,int val){\r\n        cnt++;\r\n        Next[cnt]=Head[u];\r\n        To[cnt]=v;\r\n        Head[u]=cnt;\r\n        Val[cnt]=val;\r\n    }\r\n    void addnewedge(int u,int v){\r\n        //printf(\"addnewedge: %d %d\\n\", u,v);\r\n        ncnt++;\r\n        nNext[ncnt]=nHead[u];\r\n        nTo[ncnt]=v;\r\n        nHead[u]=ncnt;\r\n    }\r\n\r\n    int _rt,mn;\r\n\r\n    int getroot(int treesize, int x, int fa)\r\n    {\r\n        int sz=1,mx=0;\r\n        for (int i = Head[x]; i; i = Next[i])\r\n        {\r\n            int P = To[i];\r\n            if ((P != fa) && (!vis[P]))\r\n            {\r\n                int tmp=getroot(treesize, P, x);\r\n                sz+=tmp;\r\n                mx=max(mx,tmp);\r\n            }\r\n        }\r\n        mx=max(mx,treesize-sz);\r\n        if (mx<mn) mn=mx,_rt=x;\r\n        return sz;\r\n    }\r\n    int getroot(int u,int sz){\r\n        _rt=0;\r\n        mn=0x3f3f3f3f;\r\n        getroot(sz,u,u);\r\n        return _rt;\r\n    }\r\n\r\n    int getsize(int x, int fa)\r\n    {\r\n        int res = 1;\r\n        for (int i = Head[x]; i; i = Next[i])\r\n        {\r\n            int P = To[i];\r\n            if ((P != fa) && (!vis[P]))\r\n                res += getsize(P, x);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    void df(int u){\r\n        vis[u]=true;\r\n        for(int it=Head[u];it;it=Next[it]){\r\n            int v=To[it];\r\n            if(!vis[v]){\r\n                int tmp=getroot(v,getsize(v,u));\r\n                addnewedge(u,tmp);\r\n                fa[tmp]=u;\r\n                df(tmp);\r\n            }\r\n        }\r\n    }\r\n\r\n    int lca(int u,int v){\r\n        for(int x=u;x;x=fa[x])\r\n            vis[x]=true;\r\n        int res=0;\r\n        for(int x=v;x;x=fa[x])\r\n            if(vis[x]) {res=x;break;}\r\n        for(int x=u;x;x=fa[x])\r\n            vis[x]=false;\r\n        return res;\r\n    }\r\n\r\n    void clearson(int u,int f){\r\n        ll.Head[u]=0;\r\n        for(int it=Head[u];it;it=Next[it]){\r\n            int v=To[it];\r\n            if(!vis[v]&&v!=f)\r\n                clearson(v,u);\r\n        }\r\n    }\r\n\r\n    void checkson(int u,int f,int p0,int p1,int s0,int s1){\r\n        Trie[0].add(Trie[0].in[p0],1);\r\n        Trie[1].add(Trie[1].in[p1],1);\r\n        for(int it=ll.Head[u];it;it=ll.Next[it]){\r\n            pr tmp=ll.Val[it];\r\n            ans[tmp.se]+=Trie[tmp.fi].sum(Trie[tmp.fi].out[Trie[tmp.fi].pos[qs[tmp.se].z]])-Trie[tmp.fi].sum(Trie[tmp.fi].in[Trie[tmp.fi].pos[qs[tmp.se].z]]-1);\r\n            offline[tmp.se][tmp.fi]=tmp.fi?s1:s0;\r\n        }\r\n        for(int it=Head[u];it;it=Next[it]){\r\n            int v=To[it];\r\n            if(v!=f&&!vis[v])\r\n                checkson(v,u,Trie[0].ch[p0][Val[it]],Trie[1].ch[p1][Val[it]],Sam[0].a[s0][Val[it]],Sam[1].a[s1][Val[it]]);\r\n        }\r\n        Trie[0].add(Trie[0].in[p0],-1);\r\n        Trie[1].add(Trie[1].in[p1],-1);\r\n    }\r\n\r\n    void work(int u){\r\n        ll.tot=0;\r\n        clearson(u,u);\r\n        for(int x:vq[u])\r\n            ll.add(qs[x].u,make_pair(1,x)),ll.add(qs[x].v,make_pair(0,x));\r\n        \r\n        checkson(u,u,0,0,1,1);\r\n        for(int it=nHead[u];it;it=nNext[it]){\r\n            int v=nTo[it];\r\n            work(v);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d%d%d\", &n,&m,&q);\r\n    for(int i=1;i<n;i++){\r\n        scanf(\"%d%d%s\",&u,&v,ech);\r\n        Tree::addedge(u,v,ech[0]-'a');\r\n        Tree::addedge(v,u,ech[0]-'a');\r\n    }\r\n    for(int i=1;i<=m;i++){\r\n        scanf(\"%s\", mst);\r\n        int len=strlen(mst);\r\n        int cur=0;\r\n        for(int j=0;j<len;j++){\r\n            if(!Trie[0].ch[cur][mst[j]-'a'])\r\n                Trie[0].ch[cur][mst[j]-'a']=++Trie[0].tot;\r\n            cur=Trie[0].ch[cur][mst[j]-'a'];\r\n        }\r\n        Trie[0].pos[i]=cur;\r\n        cur=0;\r\n        for(int j=len-1;j>=0;j--){\r\n            if(!Trie[1].ch[cur][mst[j]-'a'])\r\n                Trie[1].ch[cur][mst[j]-'a']=++Trie[1].tot;\r\n            cur=Trie[1].ch[cur][mst[j]-'a'];\r\n        }\r\n        Trie[1].pos[i]=cur;\r\n\r\n        bg[i]=Slen+1;\r\n        for(int j=0;j<len;j++)\r\n            S[++Slen]=mst[j];\r\n        ed[i]=Slen;\r\n    }\r\n    for(int x=0;x<=1;x++)\r\n        Sam[x].init(),Trie[x].id=x,Trie[x].buildsam(0,Sam[x].root),Trie[x].buildac(),Trie[x].dfs(0),Sam[x].edges(),Sam[x].dfsid(1);\r\n    for(int i=1;i<=m;i++){\r\n        int cur0=Sam[0].root;\r\n        int len=ed[i]-bg[i]+1;\r\n        for(int j=bg[i];j<=ed[i];j++)\r\n            cur0=Sam[0].a[cur0][S[j]-'a'];\r\n        for(int x=cur0;Sam[0].len[x];x=Sam[0].fa[x])\r\n            for(int j=Sam[0].len[Sam[0].fa[x]]+1;j<=Sam[0].len[x];j++)\r\n                _ans[len-j]=x;\r\n        int cur1=Sam[1].root;\r\n        for(int j=ed[i];j>=bg[i];j--)\r\n            cur1=Sam[1].a[cur1][S[j]-'a'];\r\n        for(int x=cur1;Sam[1].len[x];x=Sam[1].fa[x])\r\n            for(int j=Sam[1].len[Sam[1].fa[x]]+1;j<=Sam[1].len[x];j++)\r\n                if(j!=len)\r\n                    ps[i].push_back(make_pair(_ans[j],x));\r\n    }\r\n    \r\n    Tree::df(1);\r\n    memset(Tree::vis,0,sizeof Tree::vis);\r\n    for(int i=1;i<=q;i++){\r\n        scanf(\"%d%d%d\",&qs[i].u,&qs[i].v,&qs[i].z);\r\n        int l=Tree::lca(qs[i].u,qs[i].v);\r\n        vq[l].push_back(i);\r\n    }\r\n    Tree::work(1);\r\n    /*printf(\"%d %d\\n\", offline[2][0],offline[2][1]);\r\n    for(auto p:ps[3])\r\n        printf(\"%d %d\\n\",p.fi,p.se);\r\n    printf(\"debug:%d %d\\n\",Sam[0].a[1][1],Sam[1].a[1][1]);*/\r\n\r\n    for(int i=1;i<=q;i++){\r\n        if(offline[i][0]&&offline[i][1])\r\n            for(auto p:ps[qs[i].z])\r\n                if(Sam[0].in[p.fi]<=Sam[0].in[offline[i][0]]&&Sam[0].out[p.fi]>=Sam[0].in[offline[i][0]]&&\r\n                   Sam[1].in[p.se]<=Sam[1].in[offline[i][1]]&&Sam[1].out[p.se]>=Sam[1].in[offline[i][1]])\r\n                    ans[i]++;\r\n        printf(\"%d\\n\", ans[i]);\r\n    }\r\n\r\n    //system(\"pause\");\r\n    return 0;\r\n}"
}