{
    "id": 38446515,
    "contestId": 917,
    "creationTimeSeconds": 1526788056,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "99hgz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 118,
    "timeConsumedMillis": 935,
    "memoryConsumedBytes": 471244800,
    "source": "#include <cstdio>\r\n#include <cstring>\r\n#include <cstdlib>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <queue>\r\n#include <assert.h>\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\ntypedef pair<int,int> pr;\r\nvector<int>vq[300010];\r\nstruct Triple{\r\n    int a,b,c;\r\n};\r\nstruct QUERY{\r\n    int u,v,z;\r\n}qs[300010];\r\nint n,m,q,u,v;\r\nchar ech[10],mst[300010];\r\nint ans[300010];\r\nint offline[300010][2],bg[300010],ed[300010],Slen,_ans[300010];\r\nchar S[300010];\r\nvector<pr>ps[300010];\r\nstruct LinkedList{\r\n    int tot,Head[300010],Next[300010];\r\n    pr Val[300010];\r\n    void add(int u,pr v){\r\n        tot++;\r\n        Next[tot]=Head[u];\r\n        Head[u]=tot;\r\n        Val[tot]=v;\r\n    }\r\n}ll;\r\nstruct Two{\r\n    int fi,se;\r\n};\r\nbool operator <(Two const &a,Two const &b){\r\n    if(a.fi==b.fi)return a.se<b.se;\r\n    return a.fi>b.fi; \r\n}\r\n\r\npriority_queue<Two>MatQ;\r\nstruct MATQ{\r\n    int id,x,y;\r\n};\r\nvector<MATQ>Matq[100010];\r\nstruct MAT{\r\n    int x1,x2,y1,y2;\r\n}Mat[300010];\r\nbool cmpforMat(MAT a,MAT b){\r\n    if(a.x1==b.x1)return a.y1<b.y1;\r\n    return a.x1<b.x1;\r\n}\r\nbool cmpforMatq(MATQ a,MATQ b){\r\n    if(a.x==b.x) return a.y<b.y;\r\n    return a.x<b.x;\r\n}\r\nstruct Four{\r\n    int a,b,c,d;\r\n};\r\n\r\nstruct ST{\r\n    int id;\r\n    int a[300010][26],ts;\r\n    Triple req[300010][26];\r\n    void addedge(int u,int v,Triple r){\r\n        int ch=0;\r\n        if (id)\r\n            ch=S[bg[r.a]+r.b-1]-'a';\r\n        else\r\n            ch=S[bg[r.a]+r.c-1]-'a';\r\n        //printf(\"addedge:%d %d %d %d %d\\n\",u,v,r.a,r.b,r.c);\r\n        a[u][ch]=v;\r\n        req[u][ch]=r;\r\n    }\r\n    Four mt(Four sta,int ch){\r\n        if(sta.d==0)\r\n            return sta;\r\n        if(sta.c==0){\r\n            if(a[sta.a][ch]==0)\r\n                return (Four){sta.a,0,0,0};\r\n            else{\r\n                if(req[sta.a][ch].c==req[sta.a][ch].b)\r\n                    return(Four){a[sta.a][ch],0,0,1};\r\n                else\r\n                    return(Four){sta.a,ch,1,1};\r\n            }\r\n        }else{\r\n            Triple rq=req[sta.a][sta.b];\r\n            int pos;\r\n            if(id)\r\n                pos=bg[rq.a]+rq.b-1+sta.c;\r\n            else\r\n                pos=bg[rq.a]+rq.c-1-sta.c;\r\n            if((S[pos]-'a')==ch){\r\n                if(pos==bg[rq.a]+(id?rq.c:rq.b)-1)\r\n                    return (Four){a[sta.a][sta.b],0,0,1};\r\n                else\r\n                    return (Four){sta.a,sta.b,sta.c+1,1};\r\n            }else\r\n                return(Four){sta.a,sta.b,sta.c,0};\r\n        }\r\n    }\r\n    int in[300010],out[300010];\r\n    void dfs(int x){\r\n        in[x]=++ts;\r\n        for(int i=0;i<26;i++)\r\n            if(a[x][i])\r\n                dfs(a[x][i]);\r\n        out[x]=ts;\r\n    }\r\n}St[2];\r\n\r\nstruct SAM{\r\n    int fa[300010], a[300010][26], cnt, len[300010], root, last, id;\r\n    int sfx[300010],s2t[300010];\r\n\r\n    void init(){\r\n        root=++cnt;\r\n    }\r\n    void extend(int x,int tid,int ps)\r\n    {\r\n        int now=a[last][x],pre=last;\r\n        if (now)\r\n        {\r\n            if (len[now]==len[pre]+1) last=now;  \r\n            else\r\n            {\r\n                int nows=++cnt;\r\n                sfx[nows]=ps;\r\n                s2t[nows]=tid;\r\n                len[nows]=len[pre]+1;\r\n                memcpy(a[nows],a[now],sizeof(a[now]));\r\n                fa[nows]=fa[now]; fa[now]=nows;\r\n                for (;pre&&a[pre][x]==now;pre=fa[pre]) a[pre][x]=nows;\r\n                last=nows;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            now=++cnt;\r\n            len[now]=len[pre]+1; last=now;\r\n            s2t[now]=tid;\r\n            sfx[now]=ps;\r\n            for (;pre&&!a[pre][x];pre=fa[pre]) a[pre][x]=now;\r\n            if (!pre) fa[now]=root;\r\n            else\r\n            {\r\n                int q=a[pre][x];\r\n                if (len[q]==len[pre]+1) fa[now]=q;\r\n                else\r\n                {\r\n                    int nows=++cnt;\r\n                    len[nows]=len[pre]+1;\r\n                    memcpy(a[nows],a[q],sizeof(a[q]));\r\n                    s2t[nows]=s2t[q];\r\n                    sfx[nows]=sfx[q];\r\n                    fa[nows]=fa[q]; fa[q]=fa[now]=nows;\r\n                    for (;pre&&a[pre][x]==q;pre=fa[pre]) a[pre][x]=nows;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    void buildst(){\r\n        for(int i=2;i<=cnt;i++){\r\n            if(id)\r\n                St[id].addedge(fa[i],i,(Triple){s2t[i],sfx[i]+len[fa[i]],sfx[i]+len[i]-1});\r\n            else\r\n                St[id].addedge(fa[i],i,(Triple){s2t[i],sfx[i]-len[i]+1,sfx[i]-len[fa[i]]});\r\n        }\r\n    }\r\n}Sam[2];\r\n\r\nstruct TRIE{\r\n    int id,tot,ch[300010][26],pos[300010];\r\n    int fail[300010],ts,in[300010],out[300010],bit[300010],t2s[300010];\r\n    int Head[300010],Next[300010],To[300010],cnt;\r\n    void addedge(int u,int v){\r\n        cnt++;\r\n        Next[cnt]=Head[u];\r\n        Head[u]=cnt;\r\n        To[cnt]=v;\r\n    }\r\n\r\n    void buildac(){\r\n        queue<int>Q;\r\n        Q.push(0);\r\n        while(!Q.empty()){\r\n            int u=Q.front();\r\n            if(u!=fail[u])\r\n                addedge(fail[u],u);\r\n            Q.pop();\r\n            for(int i=0;i<26;i++){\r\n                int v=ch[u][i];\r\n                if(v){\r\n                    Q.push(v);\r\n                    if(u)\r\n                        fail[v]=ch[fail[u]][i];\r\n                }else\r\n                    ch[u][i]=ch[fail[u]][i];\r\n            }\r\n        }\r\n    }\r\n    void dfs(int u){\r\n        in[u]=++ts;\r\n        for(int it=Head[u];it;it=Next[it])\r\n            dfs(To[it]);\r\n        out[u]=ts;\r\n    }\r\n    void add(int x,int v){\r\n        for(;x<=ts;x+=(x&-x))\r\n            bit[x]+=v;\r\n    }\r\n    int sum(int x){\r\n        int res=0;\r\n        for(;x;x-=(x&-x))\r\n            res+=bit[x];\r\n        return res;\r\n    }\r\n}Trie[2];\r\n\r\nnamespace Tree{\r\n    int cnt,Head[300010],Next[300010],To[300010],Val[300010],fa[300010];\r\n    bool vis[300010];\r\n    int ncnt,nHead[400010],nNext[400010],nTo[400010];\r\n    void addnewedge(int u,int v){\r\n        ncnt++;\r\n        nNext[ncnt]=nHead[u];\r\n        nTo[ncnt]=v;\r\n        nHead[u]=ncnt;\r\n    }\r\n    void addedge(int u,int v,int val){\r\n        cnt++;\r\n        Next[cnt]=Head[u];\r\n        To[cnt]=v;\r\n        Head[u]=cnt;\r\n        Val[cnt]=val;\r\n    }\r\n    int _rt,mn;\r\n\r\n    int getroot(int treesize, int x, int fa)\r\n    {\r\n        int sz=1,mx=0;\r\n        for (int i = Head[x]; i; i = Next[i])\r\n        {\r\n            int P = To[i];\r\n            if ((P != fa) && (!vis[P]))\r\n            {\r\n                int tmp=getroot(treesize, P, x);\r\n                sz+=tmp;\r\n                mx=max(mx,tmp);\r\n            }\r\n        }\r\n        mx=max(mx,treesize-sz);\r\n        if (mx<mn) mn=mx,_rt=x;\r\n        return sz;\r\n    }\r\n    int getroot(int u,int sz){\r\n        _rt=0;\r\n        mn=0x3f3f3f3f;\r\n        getroot(sz,u,u);\r\n        return _rt;\r\n    }\r\n\r\n    int getsize(int x, int fa)\r\n    {\r\n        int res = 1;\r\n        for (int i = Head[x]; i; i = Next[i])\r\n        {\r\n            int P = To[i];\r\n            if ((P != fa) && (!vis[P]))\r\n                res += getsize(P, x);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    void df(int u){\r\n        vis[u]=true;\r\n        for(int it=Head[u];it;it=Next[it]){\r\n            int v=To[it];\r\n            if(!vis[v]){\r\n                int tmp=getroot(v,getsize(v,u));\r\n                addnewedge(u,tmp);\r\n                fa[tmp]=u;\r\n                df(tmp);\r\n            }\r\n        }\r\n    }\r\n    int lca(int u,int v){\r\n        for(int x=u;x;x=fa[x])\r\n            vis[x]=true;\r\n        int res=0;\r\n        for(int x=v;x;x=fa[x])\r\n            if(vis[x]) {res=x;break;}\r\n        for(int x=u;x;x=fa[x])\r\n            vis[x]=false;\r\n        return res;\r\n    }\r\n\r\n    void clearson(int u,int f){\r\n        ll.Head[u]=0;\r\n        for(int it=Head[u];it;it=Next[it]){\r\n            int v=To[it];\r\n            if(!vis[v]&&v!=f)\r\n                clearson(v,u);\r\n        }\r\n    }\r\n\r\n    void checkson(int u,int f,int p0,int p1,Four s0,Four s1){\r\n        Trie[0].add(Trie[0].in[p0],1);\r\n        Trie[1].add(Trie[1].in[p1],1);\r\n        for(int it=ll.Head[u];it;it=ll.Next[it]){\r\n            pr tmp=ll.Val[it];\r\n            ans[tmp.se]+=Trie[tmp.fi].sum(Trie[tmp.fi].out[Trie[tmp.fi].pos[qs[tmp.se].z]])-Trie[tmp.fi].sum(Trie[tmp.fi].in[Trie[tmp.fi].pos[qs[tmp.se].z]]-1);\r\n            offline[tmp.se][tmp.fi^1]=tmp.fi?s0.a:s1.a;\r\n        }\r\n        for(int it=Head[u];it;it=Next[it]){\r\n            int v=To[it];\r\n            if(v!=f&&!vis[v])\r\n                checkson(v,u,Trie[0].ch[p0][Val[it]],Trie[1].ch[p1][Val[it]],St[0].mt(s0,Val[it]),St[1].mt(s1,Val[it]));\r\n        }\r\n        Trie[0].add(Trie[0].in[p0],-1);\r\n        Trie[1].add(Trie[1].in[p1],-1);\r\n    }\r\n\r\n    void work(int u){\r\n        vis[u]=true;\r\n\r\n        ll.tot=0;\r\n        clearson(u,u);\r\n        for(int x:vq[u])\r\n            ll.add(qs[x].u,make_pair(1,x)),ll.add(qs[x].v,make_pair(0,x));\r\n        \r\n        checkson(u,u,0,0,(Four){1,0,0,1},(Four){1,0,0,1});\r\n        for(int it=nHead[u];it;it=nNext[it]){\r\n            int v=nTo[it];\r\n            if(!vis[v])\r\n                work(v);\r\n        }\r\n    }\r\n}\r\n\r\nstruct _BIT{\r\n    int base[300010];\r\n    void add(int x,int delta){\r\n        for(;x<=300010;x+=(x&-x))base[x]+=delta;\r\n    }\r\n    int count(int x){\r\n        int res=0;\r\n        for(;x;x-=(x&-x))res+=base[x];\r\n        return res;\r\n    }\r\n}BIT;\r\n\r\nint main() {\r\n    //freopen(\"data.in\", \"r\", stdin);\r\n    //freopen(\"2.out\", \"w\", stdout);\r\n    \r\n    scanf(\"%d%d%d\", &n,&m,&q);\r\n    for(int i=1;i<n;i++){\r\n        scanf(\"%d%d%s\",&u,&v,ech);\r\n        Tree::addedge(u,v,ech[0]-'a');\r\n        Tree::addedge(v,u,ech[0]-'a');\r\n    }\r\n\r\n    Sam[1].id=St[1].id=1;\r\n    Sam[0].init(),Sam[1].init();\r\n\r\n    for(int i=1;i<=m;i++){\r\n        scanf(\"%s\", mst);\r\n        int len=strlen(mst);\r\n        int cur=0;\r\n        Sam[0].last=1;\r\n        for(int j=0;j<len;j++){\r\n            if(!Trie[0].ch[cur][mst[j]-'a'])\r\n                Trie[0].ch[cur][mst[j]-'a']=++Trie[0].tot;\r\n            cur=Trie[0].ch[cur][mst[j]-'a'];\r\n            Sam[0].extend(mst[j]-'a',i,j+1);\r\n        }\r\n        Trie[0].pos[i]=cur;\r\n        cur=0;\r\n        Sam[1].last=1;\r\n        for(int j=len-1;j>=0;j--){\r\n            if(!Trie[1].ch[cur][mst[j]-'a'])\r\n                Trie[1].ch[cur][mst[j]-'a']=++Trie[1].tot;\r\n            cur=Trie[1].ch[cur][mst[j]-'a'];\r\n            Sam[1].extend(mst[j]-'a',i,j+1);\r\n        }\r\n        Trie[1].pos[i]=cur;\r\n\r\n        bg[i]=Slen+1;\r\n        for(int j=0;j<len;j++)\r\n            S[++Slen]=mst[j];\r\n        ed[i]=Slen;\r\n    }\r\n    for(int x=0;x<=1;x++)\r\n        Trie[x].id=x,Trie[x].buildac(),Trie[x].dfs(0),Sam[x].buildst(),St[x].dfs(1);\r\n\r\n    for(int i=1;i<=m;i++){\r\n        int cur0=Sam[0].root;\r\n        int len=ed[i]-bg[i]+1;\r\n        for(int j=bg[i];j<=ed[i];j++){\r\n            cur0=Sam[0].a[cur0][S[j]-'a'];\r\n            cur0=cur0;\r\n            _ans[j-bg[i]+1]=cur0;\r\n        }\r\n        int cur1=Sam[1].root;\r\n        for(int j=ed[i];j>=bg[i];j--){\r\n            cur1=Sam[1].a[cur1][S[j]-'a'];\r\n            cur1=cur1;\r\n            if(j!=bg[i])\r\n                ps[i].push_back(make_pair(_ans[len-(ed[i]-j+1)],cur1));\r\n        }\r\n    }\r\n    /*for(int i=0;i<=1;i++){\r\n        for(int j=2;j<=Sam[i].cnt;j++)\r\n            printf(\"%d %d\\n\", Sam[i].len[j],Sam[i].len[Sam[i].fa[j]]);\r\n    }*/\r\n    \r\n    Tree::df(1);\r\n    memset(Tree::vis,0,sizeof Tree::vis);\r\n    for(int i=1;i<=q;i++){\r\n        scanf(\"%d%d%d\",&qs[i].u,&qs[i].v,&qs[i].z);\r\n        int l=Tree::lca(qs[i].u,qs[i].v);\r\n        vq[l].push_back(i);\r\n    }\r\n    Tree::work(1);\r\n\r\n    for(int i=1;i<=q;i++)\r\n        if(offline[i][0]&&offline[i][1])\r\n            Matq[qs[i].z].push_back((MATQ){i,St[0].in[offline[i][0]],St[1].in[offline[i][1]]});\r\n    for(int i=1;i<=m;i++){\r\n        int Matnum=0;\r\n        for(auto p:ps[i])\r\n            Mat[++Matnum]=(MAT){St[0].in[p.fi],St[0].out[p.fi],St[1].in[p.se],St[1].out[p.se]};\r\n        sort(Mat+1,Mat+1+Matnum,cmpforMat);\r\n        sort(Matq[i].begin(),Matq[i].end(),cmpforMatq);\r\n        int head=1;\r\n        for(auto q:Matq[i]){\r\n            while(head<=Matnum&&Mat[head].x1<=q.x){\r\n                BIT.add(Mat[head].y1,1);\r\n                BIT.add(Mat[head].y2+1,-1);\r\n                MatQ.push((Two){Mat[head].x2+1,head});\r\n                head++;\r\n            }\r\n            while(!MatQ.empty()&&MatQ.top().fi<=q.x){\r\n                Two tmp=MatQ.top();\r\n                MatQ.pop();\r\n                BIT.add(Mat[tmp.se].y1,-1);\r\n                BIT.add(Mat[tmp.se].y2+1,1);\r\n            }\r\n            ans[q.id]+=BIT.count(q.y);\r\n        }\r\n        while(!MatQ.empty()){\r\n            Two tmp=MatQ.top();\r\n            MatQ.pop();\r\n            BIT.add(Mat[tmp.se].y1,-1);\r\n            BIT.add(Mat[tmp.se].y2+1,1);\r\n        }\r\n    }\r\n    for(int i=1;i<=q;i++)\r\n        printf(\"%d\\n\", ans[i]);\r\n\r\n    //system(\"pause\");\r\n    return 0;\r\n}"
}