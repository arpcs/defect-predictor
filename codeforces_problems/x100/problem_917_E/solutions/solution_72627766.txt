{
    "id": 72627766,
    "contestId": 917,
    "creationTimeSeconds": 1583573426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "zbww"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 118,
    "timeConsumedMillis": 1231,
    "memoryConsumedBytes": 198860800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int maxn = 100010;\r\n\r\nchar buf[maxn];\r\n\r\nint n, m, q, ans[maxn];\r\nint l[maxn], e;\r\nstring s[maxn], rs[maxn];\r\nint A1_indo[maxn], A1_indr[maxn];\r\nint S1_indo[maxn], S1_indr[maxn];\r\nint qu[maxn], qv[maxn], qk[maxn], qp[maxn], qs[maxn];\r\n\r\nstruct Edge {\r\n\tint v, c, x;\r\n} E[maxn<<1];\r\n\r\ninline void addEdge(int u, int v, int c) {\r\n\tE[e].v = v, E[e].x = l[u], E[e].c = c, l[u] = e++;\r\n}\r\n\r\nstruct BIT {\r\n\tint *sum, sz;\r\n\tBIT(int s) {\r\n\t\tsz = s;\r\n\t\tsum = new int[s+1];\r\n\t\tfor (int i = 0; i <= s; i++) sum[i] = 0;\r\n\t}\r\n\tint lowbit(int x) {return x & (-x);}\r\n\tvoid add(int p, int v) {\r\n\t\tif (!p) return;\r\n\t\tfor (int i = p; i <= sz; i += lowbit(i))\r\n\t\t\tsum[i] += v;\r\n\t}\r\n\tint ask(int p) {\r\n\t\tif (!p) return 0;\r\n\t\tint ret = 0;\r\n\t\tfor (int i = p; i; i -= lowbit(i))\r\n\t\t\tret += sum[i];\r\n\t\treturn ret;\r\n\t}\r\n\tint ask(int l, int r) {\r\n\t\treturn ask(r) - ask(l-1);\r\n\t}\r\n};\r\n\r\nstruct segTree {\r\n\tvector<int> sta[maxn*4*4];\r\n\tvoid upd(int L, int R, int x, int l, int r, int rt) {\r\n\t\tif (L <= l && r <= R) {\r\n\t\t\tsta[rt].push_back(x);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint m = (l + r) >> 1;\r\n\t\tif (L <= m) upd(L, R, x, l, m, rt<<1);\r\n\t\tif (R > m) upd(L, R, x, m+1, r, rt<<1|1);\r\n\t}\r\n\tvoid cl(int L, int R, int l, int r, int rt) {\r\n\t\tif (L <= l && r <= R) {\r\n\t\t\tsta[rt].pop_back();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint m = (l + r) >> 1;\r\n\t\tif (L <= m) cl(L, R, l, m, rt<<1);\r\n\t\tif (R > m) cl(L, R, m+1, r, rt<<1|1);\r\n\t}\r\n\tvoid upd(int l, int r, int v) {\r\n\t\tupd(l, r, v, 1, 400000, 1);\r\n\t}\r\n\tvoid cl(int l, int r) {\r\n\t\tcl(l, r, 1, 400000, 1);\r\n\t}\r\n\tint ask(int p, int l, int r, int rt) {\r\n\t\tint ret = 0;\r\n\t\tif (!sta[rt].empty()) ret = * sta[rt].rbegin();\r\n\t\tif (l == r) return ret;\r\n\t\tint m = (l + r) >> 1;\r\n\t\tif (p <= m) return max(ret, ask(p, l, m, rt<<1));\r\n\t\telse return max(ret, ask(p, m+1, r, rt<<1|1));\r\n\t}\r\n\tint ask(int p) {\r\n\t\treturn ask(p, 1, 400000, 1);\r\n\t}\r\n};\r\n\r\nstruct ACAuto {\r\n\tint ch[maxn*2][26], fail[maxn*2], dfn[maxn*2], sz[maxn*2], tot, tim;\r\n\tvector<int> son[maxn*2];\r\n\tvoid init() {tot = 1, tim = 0; memset(ch[1], 0, sizeof(ch[1]));}\r\n\tACAuto() {init();}\r\n\tint newNode() {\r\n\t\t++ tot;\r\n\t\tmemset(ch[tot], 0, sizeof(ch[tot]));\r\n\t\treturn tot;\r\n\t}\r\n\tint addStr(string s) {\r\n\t\tint cur = 1;\r\n\t\tfor (int i = 0; i < s.size(); i++) {\r\n\t\t\tint x = s[i] - 'a';\r\n\t\t\tif (!ch[cur][x]) ch[cur][x] = newNode();\r\n\t\t\tcur = ch[cur][x];\r\n\t\t}\r\n\t\treturn cur;\r\n\t}\r\n\tvoid dfs(int u) {\r\n\t\tsz[u] = 1, dfn[u] = ++ tim;\r\n\t\tfor (int i = 0; i < son[u].size(); i++) {\r\n\t\t\tint v = son[u][i];\r\n\t\t\tdfs(v);\r\n\t\t\tsz[u] += sz[v];\r\n\t\t}\r\n\t}\r\n\tvoid build() {\r\n\t\tfor (int i = 1; i <= tot; i++) {fail[i] = 0; son[i].clear();}\r\n\t\tqueue<int> Q;\r\n\t\tfail[1] = 1;\r\n\t\tfor (int i = 0; i < 26; i++) {\r\n\t\t\tif (!ch[1][i]) ch[1][i] = 1;\r\n\t\t\telse {\r\n\t\t\t\tfail[ch[1][i]] = 1;\r\n\t\t\t\tQ.push(ch[1][i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (!Q.empty()) {\r\n\t\t\tint u = Q.front(); Q.pop();\r\n\t\t\tfor (int i = 0; i < 26; i++) {\r\n\t\t\t\tif (!ch[u][i]) ch[u][i] = ch[fail[u]][i];\r\n\t\t\t\telse {\r\n\t\t\t\t\tfail[ch[u][i]] = ch[fail[u]][i];\r\n\t\t\t\t\tQ.push(ch[u][i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 2; i <= tot; i++) son[fail[i]].push_back(i);\r\n\t\tdfs(1);\r\n\t}\r\n} A1;\r\n\r\nstruct SAM {\r\n\tint ch[maxn*4][26], maxlen[maxn*4], par[maxn*4], tot, last;\r\n\tint dfn[maxn*4], sz[maxn*4], tim;\r\n\tvector<int> son[maxn*4];\r\n\tint newNode() {\r\n\t\t++ tot;\r\n\t\tmaxlen[tot] = par[tot] = 0;\r\n\t\tmemset(ch[tot], 0, sizeof(ch[tot]));\r\n\t\treturn tot;\r\n\t}\r\n\tSAM() {tot = tim = 0; last = newNode();}\r\n\tvoid addchar(int c, int l) {\r\n\t\tif (ch[last][c] && maxlen[ch[last][c]] == l) {\r\n\t\t\tlast = ch[last][c];\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tint np = newNode(); maxlen[np] = l;\r\n\t\twhile (last && !ch[last][c]) {\r\n\t\t\tch[last][c] = np;\r\n\t\t\tlast = par[last];\r\n\t\t}\r\n\t\tif (!last) par[np] = 1;\r\n\t\telse {\r\n\t\t\tint q = ch[last][c];\r\n\t\t\tif (maxlen[q] == maxlen[last] + 1) {\r\n\t\t\t\tpar[np] = q;\r\n\t\t\t} else {\r\n\t\t\t\tint nq = newNode();\r\n\t\t\t\tpar[nq] = par[q];\r\n\t\t\t\tmemcpy(ch[nq], ch[q], sizeof(ch[nq]));\r\n\t\t\t\tmaxlen[nq] = maxlen[last] + 1;\r\n\t\t\t\tpar[q] = par[np] = nq;\r\n\t\t\t\twhile (last && ch[last][c] == q) {\r\n\t\t\t\t\tch[last][c] = nq;\r\n\t\t\t\t\tlast = par[last];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlast = np;\r\n\t}\r\n\tint addStr(string s) {\r\n\t\tlast = 1;\r\n\t\tfor (int i = 0; i < s.size(); i++) {\r\n\t\t\taddchar(s[i] - 'a', i+1);\r\n\t\t}\r\n\t\treturn last;\r\n\t}\r\n\tvoid dfs(int u) {\r\n\t\tsz[u] = 1, dfn[u] = ++ tim;\r\n\t\tfor (int i = 0; i < son[u].size(); i++) {\r\n\t\t\tint v = son[u][i];\r\n\t\t\tdfs(v);\r\n\t\t\tsz[u] += sz[v];\r\n\t\t}\r\n\t}\r\n\tvoid build() {\r\n\t\tfor (int i = 1; i <= tot; i++) son[i].clear();\r\n\t\tfor (int i = 2; i <= tot; i++) son[par[i]].push_back(i);\r\n\t\tdfs(1);\r\n\t}\r\n} S1;\r\n\r\nnamespace N_Q {\r\n\tint _len;\r\n\tvector<int> vi[maxn], vp[maxn], vs[maxn];\r\n\tACAuto Ao, Ar;\r\n\tvector<int> t_vs[maxn], t_vi[maxn];\r\n\tBIT B2(maxn*2);\r\n\t// \u4e00\u5b9a\u8981\u6ce8\u610f +1 \u95ee\u9898\r\n\tvoid dfs(int u) {\r\n\t\tint tl = _len - (u - 1);\r\n\t\tB2.add(Ar.dfn[tl + 1], 1);\r\n\t\tB2.add(Ar.dfn[tl + 1] + Ar.sz[tl + 1], -1);\r\n\t\tfor (int i = 0; i < t_vs[u].size(); i++) {\r\n\t\t\tans[t_vi[u][i]] += B2.ask(Ar.dfn[t_vs[u][i] + 1]);\r\n\t\t}\r\n\t\tfor (int i = 0; i < Ao.son[u].size(); i++) {\r\n\t\t\tint v = Ao.son[u][i];\r\n\t\t\tdfs(v);\r\n\t\t}\r\n\t\tB2.add(Ar.dfn[tl + 1], -1);\r\n\t\tB2.add(Ar.dfn[tl + 1] + Ar.sz[tl + 1], 1);\r\n\t}\r\n\tvoid _solve(int ind) {\r\n\t\t_len = int (s[ind].size());\r\n\t\tAo.init(); Ar.init(); Ao.addStr(s[ind]); Ar.addStr(rs[ind]);\r\n\t\tAo.build(); Ar.build();\r\n\t\tfor (int i = 1; i <= s[ind].size()+1; i++) t_vs[i].clear(), t_vi[i].clear();\r\n\t\tfor (int i = 0; i < vi[ind].size(); i++) t_vs[1 + vp[ind][i]].push_back(vs[ind][i]), t_vi[1 + vp[ind][i]].push_back(vi[ind][i]);\r\n\t\tdfs(1);\r\n\t}\r\n\tvoid solve() {\r\n\t\tfor (int i = 1; i <= m; i++) _solve(i);\r\n\t}\r\n}\r\n\r\nnamespace N_CC {\r\n\tsegTree T;\r\n\tBIT B(2*maxn);\r\n\tint _ind[maxn];\r\n\tint vis[maxn], sz[maxn], mx[maxn], col[maxn], dep[maxn], sta[maxn], top;\r\n\tvector<int> vu[maxn], vv[maxn], delo[maxn], delr[maxn];\r\n\tvoid dfs1(int u, int f, vector<int> &nl) {\r\n\t\tnl.push_back(u); sz[u] = 1; mx[u] = 0;\r\n\t\tfor (int p = l[u]; p >= 0; p = E[p].x) {\r\n\t\t\tint v = E[p].v;\r\n\t\t\tif (v != f && !vis[v]) {\r\n\t\t\t\tdfs1(v, u, nl);\r\n\t\t\t\tsz[u] += sz[v];\r\n\t\t\t\tmx[u] = max(mx[u], sz[v]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvoid dfs2(int u, int f) {\r\n\t\tsz[u] = 1;\r\n\t\tfor (int p = l[u]; p >= 0; p = E[p].x) {\r\n\t\t\tint v = E[p].v;\r\n\t\t\tif (v != f && !vis[v]) {\r\n\t\t\t\tdep[v] = dep[u] + 1;\r\n\t\t\t\tdfs2(v, u);\r\n\t\t\t\tsz[u] += sz[v];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvoid dfs3(int u, int f, int c) {\r\n\t\tcol[u] = c;\r\n\t\tfor (int p = l[u]; p >= 0; p = E[p].x) {\r\n\t\t\tint v = E[p].v;\r\n\t\t\tif (v != f && !vis[v]) {\r\n\t\t\t\tdfs3(v, u, c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvoid dfs4(int u, int f, int cA, int cS) {\r\n\t\tsta[++ top] = u;\r\n\t\tB.add(A1.dfn[cA], 1);\r\n\t\tif (cS) T.upd(S1.dfn[cS], S1.dfn[cS] + S1.sz[cS] - 1, dep[u]);\r\n\t\tfor (int i = 0; i < vu[u].size(); i++) {\r\n\t\t\tint x = vu[u][i];\r\n\t\t\t// \u4ece u \u8d70\u5230\u6839\r\n\t\t\tif (dep[u] > s[qk[x]].size()) {\r\n\t\t\t\tans[x] += B.ask(A1.dfn[A1_indr[qk[x]]] + A1.sz[A1_indr[qk[x]]] - 1) - B.ask(A1.dfn[A1_indr[qk[x]]] - 1);\r\n\t\t\t\tdelr[sta[1+s[qk[x]].size()]].push_back(x);\r\n\t\t\t}\r\n\t\t\t// \u6c42\u4ece\u6839\u5230\u8be5\u4e32\u7684\u4e32\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u4f7f\u5f97\u5b83\u53cd\u8fc7\u6765\u662f\u8be2\u95ee\u4e32\u7684\u4e00\u4e2a\u524d\u7f00\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b83\u6b63\u8fc7\u6765\u662f\u8be2\u95ee\u4e32\u53cd\u4e32\u7684\u4e00\u4e2a\u540e\u7f00\r\n\t\t\tqp[x] = T.ask(S1.dfn[S1_indr[qk[x]]]);\r\n\t\t}\r\n\t\tfor (int i = 0; i < vv[u].size(); i++) {\r\n\t\t\tint x = vv[u][i];\r\n\t\t\t// \u4ece u \u8d70\u5230\u6839\r\n\t\t\tif (dep[u] > s[qk[x]].size()) {\r\n\t\t\t\tans[x] += B.ask(A1.dfn[A1_indo[qk[x]]] + A1.sz[A1_indo[qk[x]]] - 1) - B.ask(A1.dfn[A1_indo[qk[x]]] - 1);\r\n\t\t\t\tdelo[sta[1+s[qk[x]].size()]].push_back(x);\r\n\t\t\t}\r\n\t\t\tqs[x] = T.ask(S1.dfn[S1_indo[qk[x]]]);\r\n\t\t}\r\n\t\tfor (int p = l[u]; p >= 0; p = E[p].x) {\r\n\t\t\tint v = E[p].v;\r\n\t\t\tif (v != f && !vis[v]) {\r\n\t\t\t\tdfs4(v, u, A1.ch[cA][E[p].c], S1.ch[cS][E[p].c]);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i < delr[u].size(); i++) {\r\n\t\t\tint x = delr[u][i];\r\n\t\t\tans[x] -= B.ask(A1.dfn[A1_indr[qk[x]]] + A1.sz[A1_indr[qk[x]]] - 1) - B.ask(A1.dfn[A1_indr[qk[x]]] - 1);\r\n\t\t}\r\n\t\tfor (int i = 0; i < delo[u].size(); i++) {\r\n\t\t\tint x = delo[u][i];\r\n\t\t\tans[x] -= B.ask(A1.dfn[A1_indo[qk[x]]] + A1.sz[A1_indo[qk[x]]] - 1) - B.ask(A1.dfn[A1_indo[qk[x]]] - 1);\r\n\t\t}\r\n\t\tif (cS) T.cl(S1.dfn[cS], S1.dfn[cS] + S1.sz[cS] - 1);\r\n\t\tB.add(A1.dfn[cA], -1);\r\n\t\t-- top;\r\n\t}\r\n\tvoid __solve(int c, vector<int> nl, vector<int> cur) {\r\n\t\tfor (int i = 0; i < nl.size(); i++) {\r\n\t\t\tint x = nl[i];\r\n\t\t\tvu[x].clear(); vv[x].clear();\r\n\t\t\tdelo[x].clear(); delr[x].clear();\r\n\t\t}\r\n\t\tfor (int i = 0; i < cur.size(); i++) {\r\n\t\t\tint x = cur[i];\r\n\t\t\tint u = qu[x], v = qv[x];\r\n\t\t\tvu[u].push_back(x), vv[v].push_back(x);\r\n\t\t}\r\n\t\tdfs4(c, 0, 1, 1);\r\n\t\tfor (int i = 0; i < cur.size(); i++) {\r\n\t\t\tint x = cur[i];\r\n\t\t\tN_Q::vi[qk[x]].push_back(x);\r\n\t\t\tN_Q::vp[qk[x]].push_back(qp[x]);\r\n\t\t\tN_Q::vs[qk[x]].push_back(qs[x]);\r\n\t\t}\r\n\t}\r\n\tvoid _solve(int u, int s, vector<int> vq) {\r\n\t\tvector<int> nl;\r\n\t\tdfs1(u, 0, nl);\r\n\t\tint c = 0;\r\n\t\tfor (int i = 0; i < nl.size(); i++) {\r\n\t\t\tint x = nl[i];\r\n\t\t\tmx[x] = max(mx[x], s - sz[x]);\r\n\t\t\tif (!c || mx[x] < mx[c]) c = x;\r\n\t\t}\r\n\t\tdep[c] = 0;\r\n\t\tdfs2(c, 0);\r\n\t\tcol[c] = 0;\r\n\t\tfor (int p = l[c]; p >= 0; p = E[p].x) {\r\n\t\t\tint v = E[p].v;\r\n\t\t\tif (!vis[v]) {\r\n\t\t\t\tdfs3(v, c, v);\r\n\t\t\t}\r\n\t\t}\r\n\t\tvector<int> cv, cs;\r\n\t\tfor (int p = l[c]; p >= 0; p = E[p].x) {\r\n\t\t\tint v = E[p].v;\r\n\t\t\tif (!vis[v]) {\r\n\t\t\t\tcv.push_back(v);\r\n\t\t\t\tcs.push_back(sz[v]);\r\n\t\t\t\t_ind[v] = (int) cv.size() - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tvector<int> cur;\r\n\t\tvector<vector<int> > cq(cv.size(), vector<int>());\r\n\t\tfor (int i = 0; i < vq.size(); i++) {\r\n\t\t\tint u = qu[vq[i]], v = qv[vq[i]];\r\n\t\t\tif (col[u] != col[v]) cur.push_back(vq[i]);\r\n\t\t\telse cq[_ind[col[u]]].push_back(vq[i]);\r\n\t\t}\r\n\t\t__solve(c, nl, cur);\r\n\t\tvis[c] = 1;\r\n\t\tfor (int i = 0; i < cv.size(); i++) _solve(cv[i], cs[i], cq[i]);\r\n\t}\r\n\tvoid solve() {\r\n\t\tvector<int> vq;\r\n\t\tfor (int i = 1; i <= q; i++) vq.push_back(i);\r\n\t\t_solve(1, n, vq);\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tmemset(l, -1, sizeof(l));\r\n\tscanf(\"%d%d%d\", &n, &m, &q);\r\n\tfor (int i = 1; i < n; i++) {\r\n\t\tint u, v; scanf(\"%d%d%s\", &u, &v, buf);\r\n\t\taddEdge(u, v, buf[0] - 'a'), addEdge(v, u, buf[0] - 'a');\r\n\t}\r\n\tfor (int i = 1; i <= m; i++) {\r\n\t\tscanf(\"%s\", buf);\r\n\t\ts[i] = rs[i] = buf;\r\n\t\treverse(rs[i].begin(), rs[i].end());\r\n\t\tA1_indo[i] = A1.addStr(s[i]); A1_indr[i] = A1.addStr(rs[i]);\r\n\t\tS1_indo[i] = S1.addStr(s[i]); S1_indr[i] = S1.addStr(rs[i]);\r\n\t}\r\n\tA1.build(), S1.build();\r\n\tfor (int i = 1; i <= q; i++) {\r\n\t\tscanf(\"%d%d%d\", &qu[i], &qv[i], &qk[i]);\r\n\t}\r\n\tN_CC::solve();\r\n\tN_Q::solve();\r\n\tfor (int i = 1; i <= q; i++) printf(\"%d\\n\", ans[i]);\r\n\treturn 0;\r\n}"
}