{
    "id": 155026790,
    "contestId": 917,
    "creationTimeSeconds": 1650972012,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "aszwz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 82329600,
    "source": "#include <stdio.h>\r\n#include <string.h>\r\n#include <vector>\r\n#include <algorithm>\r\n#define se 13131\r\nusing namespace std;\r\n#define ll unsigned long long\r\nint exgcd(int a,int b,int&x,int&y)\r\n{\r\n    if(b==0)\r\n    {\r\n        x=1;y=0;\r\n        return a;\r\n    }\r\n    int rt=exgcd(b,a%b,y,x);\r\n    y-=(a/b)*x;return rt;\r\n}\r\nstruct lin\r\n{\r\n    int l,r,k;lin(){}\r\n    lin(int x){l=r=x;k=1;}\r\n    void ins(int tyh)\r\n    {\r\n        k=tyh-r;r=tyh;\r\n    }\r\n    bool ck(int x)const\r\n    {\r\n        if(l==r)return 1;\r\n        return r+k==x;\r\n    }\r\n    int fd(int x)const\r\n    {\r\n        if(r<=x)return r;\r\n        int t=l+((x-l)/k)*k;\r\n        return t;\r\n    }\r\n    int cn()const{return l==r?0:(r-l)/k;}\r\n};\r\nint cal(const lin&A,const lin&B,int h)\r\n{\r\n    int a=A.k,b=B.k,c=h-A.l-B.l;\r\n    if(c<0)return 0;\r\n    int x,y,g=exgcd(a,b,x,y);\r\n    if(c%g)return 0;\r\n    a/=g;b/=g;c/=g;\r\n    x=(1ll*x*c%b+b)%b;y=(c-a*x)/b;\r\n    int s1=A.cn(),s2=B.cn();\r\n    if(y<0||x>s1)return 0;\r\n    int r=min((s1-x)/b,y/a),l=0;\r\n    if(y>s2)l=(y-s2+a-1)/a;\r\n    if(l>r)return 0;\r\n    return r-l+1;\r\n}\r\nint cal(const vector<lin>&v1,const vector<lin>&v2,int h)\r\n{\r\n    int jg=0;\r\n    for(lin a:v1)\r\n        for(lin b:v2)\r\n            if(a.l+b.l<=h&&h<=a.r+b.r)\r\n                jg+=cal(a,b,h);\r\n    return jg;\r\n}\r\nint getmx(const vector<lin>&ve,int x)\r\n{\r\n    for(int i=ve.size()-1;i>=0;i--)\r\n    {\r\n        if(ve[i].l<=x)\r\n            return ve[i].fd(x);\r\n    }\r\n    return 0;\r\n}\r\nint nx[100010];vector<lin> ve[100010];\r\nvoid KMP(char zf[100010],int n)\r\n{\r\n    nx[0]=-1;\r\n    for(int i=0;i<=n;i++)ve[i].clear();\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        int t=nx[i-1];\r\n        while(t!=-1&&zf[t]!=zf[i-1])t=nx[t];\r\n        nx[i]=t+1;\r\n    }\r\n    ve[0].push_back(0);\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        ve[i]=ve[nx[i]];\r\n        if(!ve[i].empty()&&ve[i].back().ck(i))\r\n        {\r\n            lin t=ve[i].back();\r\n            t.ins(i);ve[i].pop_back();\r\n            ve[i].push_back(t);\r\n        }\r\n        else ve[i].push_back(lin(i));\r\n    }\r\n}\r\nnamespace AC\r\n{\r\n    int trs[200010][26],sl=0,fa[200010],fb[200010];\r\n    int insert(char zf[100010])\r\n    {\r\n        int w=0;\r\n        for(int i=0;zf[i]!=0;i++)\r\n        {\r\n            int s=zf[i]-'a';\r\n            if(trs[w][s]==0)\r\n            {\r\n                trs[w][s]=++sl;\r\n                fa[sl]=w;fb[sl]=s;\r\n            }\r\n            w=trs[w][s];\r\n        }\r\n        return w;\r\n    }\r\n    int dl[200010],sp[200010],fr[200010],ne[200010],v[200010],bs=0;\r\n    void addb(int a,int b)\r\n    {\r\n        v[bs]=b;\r\n        ne[bs]=fr[a];\r\n        fr[a]=bs++;       \r\n    }\r\n    int wl[200010],wr[200010],tm,C[200010];\r\n    void dfs(int u)\r\n    {\r\n        wl[u]=++tm;\r\n        for(int i=fr[u];i!=-1;i=ne[i])\r\n            dfs(v[i]);\r\n        wr[u]=tm;\r\n    }\r\n    void bfs()\r\n    {\r\n        int he=0,ta=1;dl[0]=0;\r\n        while(he<ta)\r\n        {\r\n            int u=dl[he++];\r\n            if(u==0||fa[u]==0)sp[u]=0;\r\n            else sp[u]=trs[sp[fa[u]]][fb[u]];\r\n            for(int i=0;i<26;i++)\r\n            {\r\n                if(trs[u][i])dl[ta++]=trs[u][i];\r\n                else trs[u][i]=trs[sp[u]][i];\r\n            }\r\n        }\r\n        for(int i=0;i<=sl;i++)fr[i]=-1;\r\n        for(int i=1;i<=sl;i++)addb(sp[i],i);\r\n        dfs(0);\r\n    }\r\n    void ad(int i,int x)\r\n    {\r\n        for(int j=i;j<=tm;j+=j&(-j))\r\n            C[j]+=x;\r\n    }\r\n    int sm(int i)\r\n    {\r\n        int jg=0;\r\n        for(int j=i;j>0;j-=j&(-j))jg+=C[j];\r\n        return jg;\r\n    }\r\n    void add(int u,int x){ad(wl[u],x);};\r\n    int sum(int u){return sm(wr[u])-sm(wl[u]-1);}\r\n}\r\nint fr[100010],ne[200010],v[200010],w[200010],bs,ww[200010];ll H[100010],mi[100010];\r\nvoid addb(int a,int b,int c)\r\n{\r\n    v[bs]=b;\r\n    w[bs]=c;\r\n    ne[bs]=fr[a];\r\n    fr[a]=bs++;\r\n}\r\nint sd[100010],fa[100010],son[100010],le[100010],top[100010];char fb[100010];\r\nint dfs(int u,int f)\r\n{\r\n    sd[u]=sd[f]+1;fa[u]=f;\r\n    int mx=0;son[u]=-1;\r\n    for(int i=fr[u];i!=-1;i=ne[i])\r\n    {\r\n        int t=v[i];\r\n        if(t==f)continue;\r\n        fb[t]=w[i]+'a';\r\n        H[t]=H[u]*se+w[i]+'a';\r\n        int rt=dfs(t,u);\r\n        if(rt>mx)mx=rt,son[u]=t;\r\n    }\r\n    return le[u]=mx+1;\r\n}\r\nvoid dfs2(int u,int f,int tp)\r\n{\r\n    top[u]=tp;\r\n    if(son[u]==-1)return;\r\n    dfs2(son[u],u,tp);\r\n    for(int i=fr[u];i!=-1;i=ne[i])\r\n    {\r\n        if(v[i]!=son[u]&&v[i]!=f)\r\n            dfs2(v[i],u,v[i]);\r\n    }\r\n}\r\nint lg[100010],bz[17][100010];\r\nint getlca(int x,int y)\r\n{\r\n    if(sd[x]<sd[y])\r\n    {\r\n        int t=x;\r\n        x=y;y=t;\r\n    }\r\n    for(int i=16;i>=0;i--)\r\n    {\r\n        if(sd[bz[i][x]]>=sd[y])\r\n            x=bz[i][x];\r\n    }\r\n    int rt;if(x==y)return x;\r\n    for(int i=16;i>=0;i--)\r\n    {\r\n        if(bz[i][x]!=bz[i][y])\r\n            x=bz[i][x],y=bz[i][y];\r\n        else rt=bz[i][x];\r\n    }\r\n    return rt;\r\n}\r\nvector<int> li[100010],up[100010];\r\nvoid yucl(int n)\r\n{\r\n    dfs(1,0);dfs2(1,0,1);\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        int x=0;\r\n        while((2<<x)<=i)x+=1;\r\n        lg[i]=x;bz[0][i]=fa[i];\r\n    }\r\n    for(int i=1;i<=16;i++)\r\n    {\r\n        for(int j=1;j<=n;j++)\r\n            bz[i][j]=bz[i-1][bz[i-1][j]];\r\n    }\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        if(i==son[fa[i]])continue;\r\n        for(int s=0,u=i;s<le[i];s++,u=son[u])li[i].push_back(u);\r\n        for(int s=0,u=i;s<le[i];s++,u=fa[u])up[i].push_back(u);\r\n    }\r\n}\r\nint getkth(int x,int k)\r\n{\r\n    //if(k>sd[x])printf(\"lin\");\r\n    if(k==0)return x;\r\n    int g=lg[k];\r\n    x=bz[g][x];k^=(1<<g);\r\n    int s=sd[x]-k-sd[top[x]];\r\n    if(s>=0)return li[top[x]][s];\r\n    return up[top[x]][-s];\r\n}\r\nstruct SXw\r\n{\r\n    int z,i,x;SXw(){}\r\n    SXw(int Z,int I,int X):z(Z),i(I),x(X){}\r\n};\r\nvector<SXw> vx[100010];int ans[100010],cd[200010];\r\nvoid dfs3(int u,int f,int wz)\r\n{\r\n    AC::add(wz,1);\r\n    for(SXw z:vx[u])\r\n        ans[z.i]+=z.x*AC::sum(ww[z.z]);\r\n    for(int i=fr[u];i!=-1;i=ne[i])\r\n        if(v[i]!=f)\r\n            dfs3(v[i],u,AC::trs[wz][w[i]]);\r\n    AC::add(wz,-1);\r\n}\r\nvector<char> zf[100010];char S[100010];\r\nvector<vector<lin> > bo[100010],ob[100010];char ss[400010];\r\nint A[100010],B[100010],X[100010],C[100010],st[200010];ll ha[400010];\r\nll getha1(int a,int b)\r\n{\r\n    return H[b]-H[a]*mi[sd[b]-sd[a]];\r\n}\r\nll getha2(int l,int r)\r\n{\r\n    return ha[r]-ha[l-1]*mi[r-l+1];\r\n}\r\nint getlcp(int a,int b,int x,int y)\r\n{\r\n    int l=0,r=min(sd[b]-sd[a],cd[x]-y);\r\n    while(l<r)\r\n    {\r\n        int m=(l+r+1)>>1;\r\n        if(getha1(a,getkth(b,sd[b]-sd[a]-m))==getha2(st[x]+y,st[x]+y+m-1))\r\n            l=m;\r\n        else r=m-1;\r\n    }\r\n    return l;\r\n}\r\nint compare(int a,int b,int x,int y)\r\n{\r\n    int c=getlcp(a,b,x,y);\r\n    char c1=(sd[b]-sd[a]==c?0:getkth(b,sd[b]-sd[a]-c-1));\r\n    char c2=(y+c==cd[x]?0:ss[st[x]+y+c]);\r\n    return (c1<c2?-1:(c1==c2?0:1));\r\n}\r\nint x[800010],y[400010],sa[400010],sl[400010];\r\nint nu[400010];vector<int> px[200010];\r\nint findmx(int a,int b,int x,int &zd)\r\n{\r\n    /*zd=-1;int rt;\r\n    for(int i=0;i<cd[x];i++)\r\n    {\r\n        int t=getlcp(a,b,x,i);\r\n        if(t>zd)zd=t,rt=cd[x]-i;\r\n    }\r\n    return rt;*/\r\n    //if(cd[x]!=px[x].size())printf(\"err=%d\\n\",x);\r\n    int l=-1,r=cd[x]-1,rt=0;zd=-1;\r\n    while(l<r)\r\n    {\r\n        int m=(l+r+1)>>1;\r\n        if(compare(a,b,x,px[x][m])>=0)l=m;\r\n        else r=m-1;\r\n    }\r\n    if(l>=0)\r\n    {\r\n        int z=px[x][l],t=getlcp(a,b,x,z);\r\n        if(t>zd)zd=t,rt=cd[x]-z;\r\n    }\r\n    if(l+1<cd[x])\r\n    {\r\n        int z=px[x][l+1],t=getlcp(a,b,x,z);\r\n        if(t>zd)zd=t,rt=cd[x]-z;\r\n    }\r\n    return rt;\r\n}\r\nint getsa(int n)\r\n{\r\n    int m='z';\r\n    for(int i=1;i<=n;i++)sl[x[i]=ss[i]]+=1;\r\n    for(int i=1;i<=m;i++)sl[i]+=sl[i-1];\r\n    for(int i=n;i>0;i--)sa[--sl[ss[i]]]=i;\r\n    for(int i=1;i<=m;i++)sl[i]=0;\r\n    for(int e=1;e<=n;e*=2)\r\n    {\r\n        int k=0;\r\n        for(int i=n-e+1;i<=n;i++)y[k++]=i;\r\n        for(int i=0;i<n;i++)\r\n            if(sa[i]>e)y[k++]=sa[i]-e;\r\n        for(int i=0;i<n;i++)sl[x[i]]+=1;\r\n        for(int i=1;i<=m;i++)sl[i]+=sl[i-1];\r\n        for(int i=n-1;i>=0;i--)\r\n            sa[--sl[x[y[i]]]]=y[i];\r\n        for(int i=1;i<=m;i++)sl[i]=0;m=0;\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            if(i==0||x[sa[i]]!=x[sa[i-1]]||x[sa[i]+e]!=x[sa[i-1]+e])m+=1;\r\n            y[sa[i]]=m;\r\n        }\r\n        for(int i=0;i<n;i++)x[i]=y[i];\r\n        if(m==n)break;\r\n    }\r\n}\r\nint main()\r\n{\r\n    int n,m,q;\r\n    scanf(\"%d%d%d\",&n,&m,&q);\r\n    for(int i=1;i<=n;i++)\r\n        fr[i]=-1;\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        int a,b;char c[2];\r\n        scanf(\"%d%d%s\",&a,&b,c);\r\n        //a=i+2;b=rand()%(i+1)+1;\r\n        //c[0]=rand()%2+'a';\r\n        addb(a,b,c[0]-'a');\r\n        addb(b,a,c[0]-'a');\r\n    }\r\n    dfs(1,0);dfs2(1,0,1);yucl(n);\r\n    for(int i=1;i<=m;i++)\r\n    {\r\n        scanf(\"%s\",S);\r\n        //int s=rand()%10+1;S[s]=0;\r\n        //for(int j=0;j<s;j++)S[j]=rand()%2+'a';\r\n        int k=cd[i]=strlen(S);\r\n        ww[i]=AC::insert(S);\r\n        KMP(S,k);\r\n        for(int j=0;j<=k;j++)\r\n            bo[i].push_back(ve[j]);\r\n        st[i]=st[i-1]+cd[i-1]+1;\r\n        for(int j=0;j<k;j++)\r\n            ss[st[i]+j]=S[j];\r\n        ss[st[i]+k]=1;\r\n        for(int a=0,b=k-1;a<b;a++,b--)\r\n            swap(S[a],S[b]);\r\n        ww[i+m]=AC::insert(S);\r\n        KMP(S,k);\r\n        for(int j=0;j<=k;j++)\r\n            ob[i].push_back(ve[j]);\r\n    }\r\n    for(int i=1;i<=m;i++)\r\n    {\r\n        int t=i+m,k=cd[i];cd[t]=k;\r\n        st[t]=st[t-1]+cd[t-1]+1;\r\n        for(int j=0;j<k;j++)\r\n            ss[st[t]+j]=ss[st[i]+(k-1-j)];\r\n        ss[st[t]+k]=1;\r\n    }\r\n    int mm=st[m+m]+cd[m+m];mi[0]=1;\r\n    for(int i=1;i<=mm;i++)\r\n        ha[i]=ha[i-1]*se+ss[i];\r\n    for(int i=1;i<=n;i++)\r\n        mi[i]=mi[i-1]*se;\r\n    AC::bfs();getsa(mm);\r\n    for(int i=1;i<=m+m;i++)\r\n        for(int j=0;j<cd[i];j++)\r\n            nu[st[i]+j]=i;\r\n    for(int i=0;i<mm;i++)\r\n    {\r\n        int x=sa[i];\r\n        //printf(\"[%d]\\n\",x);\r\n        if(nu[x])px[nu[x]].push_back(x-st[nu[x]]);\r\n    }\r\n    for(int i=0;i<q;i++)\r\n    {\r\n        int a,b,x;\r\n        //a=rand()%n+1;b=rand()%n+1;x=rand()%m+1;\r\n        scanf(\"%d%d%d\",&a,&b,&x);\r\n        int c=getlca(a,b),s=cd[x];\r\n        A[i]=a;B[i]=b;C[i]=c;X[i]=x;\r\n        if(sd[a]-sd[c]>s)\r\n        {\r\n            int t=getkth(a,sd[a]-sd[c]-s);\r\n            vx[a].push_back(SXw(x+m,i,1));\r\n            vx[t].push_back(SXw(x+m,i,-1));\r\n        }\r\n        if(sd[b]-sd[c]>s)\r\n        {\r\n            int t=getkth(b,sd[b]-sd[c]-s);\r\n            vx[b].push_back(SXw(x,i,1));\r\n            vx[t].push_back(SXw(x,i,-1));\r\n        }\r\n    }\r\n    dfs3(1,0,0);\r\n    for(int i=0;i<q;i++)\r\n    {\r\n        int a=A[i],b=B[i],c=C[i],x=X[i],c1,c2;\r\n        int w1=findmx(c,a,x+m,c1),w2=findmx(c,b,x,c2);\r\n        int s1=getmx(bo[x][w1],c1),s2=getmx(ob[x][w2],c2);\r\n        //printf(\"[%d %d %d]\\n\",s1,s2,cd[x]);\r\n        ans[i]+=cal(bo[x][s1],ob[x][s2],cd[x]);\r\n        printf(\"%d\\n\",ans[i]);\r\n    }\r\n    return 0;\r\n}"
}