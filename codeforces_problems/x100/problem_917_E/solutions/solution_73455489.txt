{
    "id": 73455489,
    "contestId": 917,
    "creationTimeSeconds": 1584423501,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "djq_cpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 826,
    "memoryConsumedBytes": 225792000,
    "source": "#include <bits/stdc++.h>\r\n#define rep(i, n) for(int i = 0; i < (int)(n); i ++)\r\n#define rep1(i, n) for(int i = 1; i <= (int)(n); i ++)\r\n#define MP make_pair\r\n \r\nusing namespace std;\r\ntypedef long long LL;\r\ntypedef pair<int, int> PII;\r\nconst int MOD = 998244353;\r\n \r\nint n, m, q;\r\nint pos[100005];\r\nchar ch[100005];\r\nvector<pair<int, char> > G[100005]; \r\nint qu[100005], qv[100005], qt[100005];\r\nint ans[100005];\r\nint ql[100005], qr[100005];\r\n \r\nstruct SAM\r\n{\r\n\tint cnt, ver[100005];\r\n\tint nxt[200005][26];\r\n\tint par[200005], len[200005];\r\n\tint dfn[200005], dfo[200005], dcnt;\r\n\t\r\n\tint append(int cv, char ch)\r\n\t{\r\n\t\tcnt ++;\r\n\t\tlen[cnt - 1] = len[cv] + 1;\r\n\t\tfor(; cv != -1 && nxt[cv][ch] == -1; cv = par[cv]) nxt[cv][ch] = cnt - 1;\r\n\t\tif(cv == -1) {\r\n\t\t\tpar[cnt - 1] = 0;\r\n\t\t\treturn cnt - 1;\r\n\t\t}\r\n\t\tif(len[nxt[cv][ch]] == len[cv] + 1) {\r\n\t\t\tpar[cnt - 1] = nxt[cv][ch];\r\n\t\t\treturn cnt - 1;\r\n\t\t}\r\n\t\tint nv = cnt ++, ov = nxt[cv][ch];\r\n\t\trep(i, 26) nxt[nv][i] = nxt[ov][i];\r\n\t\tlen[nv] = len[cv] + 1;\r\n\t\tpar[nv] = par[ov];\r\n\t\tpar[ov] = nv;\r\n\t\tpar[cnt - 2] = nv;\r\n\t\tfor(; cv != -1 && nxt[cv][ch] == ov; cv = par[cv]) nxt[cv][ch] = nv;\r\n\t\treturn cnt - 2;\r\n\t}\r\n\t\r\n\tvoid init()\r\n\t{\r\n\t\tmemset(nxt, -1, sizeof(nxt));\r\n\t\tmemset(par, -1, sizeof(par));\r\n\t\tmemset(len, 0, sizeof(len));\r\n\t\tcnt = 1;\r\n\t\tdcnt = 0;\r\n\t}\r\n\t\r\n\tvector<int> T[200005];\r\n\tvoid dfs(int v)\r\n\t{\r\n\t\tdfn[v] = dcnt ++;\r\n\t\trep(i, T[v].size()) {\r\n\t\t\tint u = T[v][i];\r\n\t\t\tdfs(u);\r\n\t\t}\r\n\t\tdfo[v] = dcnt - 1;\r\n\t}\r\n\t\r\n\tvoid gen_upd()\r\n\t{\r\n\t\trep(i, cnt) T[i].clear();\r\n\t\trep(i, cnt) if(i > 0) T[par[i]].push_back(i);\r\n\t\tdfs(0);\r\n\t}\r\n\t\r\n\tint adds(int pos, char ch)\r\n\t{\r\n\t\treturn pos == -1 ? -1 : nxt[pos][ch];\r\n\t}\r\n}R, IR;\r\n \r\nstruct ACM\r\n{\r\n\tint cnt, ver[100005];\r\n\tint fail[100005], nxt[100005][26], rnxt[100005][26];\r\n\tvector<int> T[100005];\r\n\tint dfn[100005], dfo[100005], dcnt;\r\n\t\r\n\tvoid init()\r\n\t{\r\n\t\tcnt = 1;\r\n\t\tdcnt = 0;\r\n\t\tfail[0] = -1;\r\n\t\trep(i, 26) nxt[0][i] = -1;\r\n\t}\r\n\t\r\n\tint append(int cv, char ch)\r\n\t{\r\n\t\tif(nxt[cv][ch] == -1) {\r\n\t\t\trep(i, 26) nxt[cnt][i] = -1;\r\n\t\t\tnxt[cv][ch] = cnt ++;\r\n\t\t}\r\n\t\treturn nxt[cv][ch];\r\n\t}\r\n\t\r\n\tvoid dfs(int v)\r\n\t{\r\n\t\tdfn[v] = dcnt ++;\r\n\t\trep(i, T[v].size()) {\r\n\t\t\tint u = T[v][i];\r\n\t\t\tdfs(u);\r\n\t\t}\r\n\t\tdfo[v] = dcnt - 1;\r\n\t}\r\n\t\r\n\tvoid gen_upd()\r\n\t{\r\n\t\tqueue<int> que;\r\n\t\tque.push(0);\r\n\t\twhile(!que.empty()) {\r\n\t\t\tint v = que.front();\r\n\t\t\tque.pop();\r\n\t\t\trep(i, 26) rnxt[v][i] = nxt[v][i];\r\n\t\t\tif(fail[v] != -1) rep(i, 26) if(rnxt[v][i] == -1) rnxt[v][i] = rnxt[fail[v]][i];\r\n\t\t\trep(i, 26) if(rnxt[v][i] == -1) rnxt[v][i] = 0;\r\n\t\t\t\r\n\t\t\trep(i, 26) {\r\n\t\t\t\tint u = nxt[v][i];\r\n\t\t\t\tif(u == -1) continue;\r\n\t\t\t\tfor(fail[u] = fail[v]; fail[u] != -1 && nxt[fail[u]][i] == -1; fail[u] = fail[fail[u]]);\r\n\t\t\t\tif(fail[u] == -1) fail[u] = 0;\r\n\t\t\t\telse fail[u] = nxt[fail[u]][i];\r\n\t\t\t\tque.push(u);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\trep(i, cnt) T[i].clear();\r\n\t\trep(i, cnt) if(fail[i] != -1) T[fail[i]].push_back(i); \r\n\t\tdfs(0);\r\n\t}\r\n\t\r\n\tint adds(int pos, char ch)\r\n\t{\r\n\t\treturn rnxt[pos][ch];\r\n\t}\r\n}D, ID;\r\n \r\nbool del[100005];\r\nint siz[100005];\r\nint dv[100005], idv[100005];\r\nvoid dfs0(int v, int p)\r\n{\r\n\tsiz[v] = 1;\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u] || u == p) continue;\r\n\t\tdfs0(u, v);\r\n\t\tsiz[v] += siz[u];\r\n\t}\r\n}\r\n \r\nint cent(int v, int p, int tsiz)\r\n{\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u] || u == p) continue;\r\n\t\tif(siz[u] > tsiz / 2) return cent(u, v, tsiz);\r\n\t}\r\n\treturn v;\r\n}\r\n \r\nint qcnt, qtp[100005];\r\nint dep[100005];\r\nvector<int> cq[100005];\r\nvector<int> tq[100005], itq[100005];\r\nvoid dfs1(int v, int p, int d, int cval)\r\n{\r\n\tqtp[v] = cval;\r\n\tdep[v] = d;\r\n\ttq[v].clear();\r\n\titq[v].clear();\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u] || u == p) continue;\r\n\t\tdfs1(u, v, d + 1, cval);\r\n\t}\r\n}\r\n \r\nstruct fwt\r\n{\r\n\tint dat[262145];\r\n\tvoid add(int id, int val)\r\n\t{\r\n\t\twhile(id <= 262144) {\r\n\t\t\tdat[id] += val;\r\n\t\t\tid += id & -id;\r\n\t\t}\r\n\t}\r\n\t\r\n\tint query(int id)\r\n\t{\r\n\t\tint ret = 0;\r\n\t\twhile(id > 0) {\r\n\t\t\tret += dat[id];\r\n\t\t\tid -= id & -id;\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n}tre, itre;\r\n \r\nstruct segt\r\n{\r\n\tint spos[12000005], sdat[12000005], scnt;\r\n\tint dat[524288];\r\n\t\r\n\tvoid clear()\r\n\t{\r\n\t\twhile(scnt > 0) {\r\n\t\t\tscnt --;\r\n\t\t\tdat[spos[scnt]] = sdat[scnt];\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid modify_v(int v, int d)\r\n\t{\r\n\t\tspos[scnt] = v;\r\n\t\tsdat[scnt] = dat[v];\r\n\t\tdat[v] = d;\r\n\t\tscnt ++;\r\n\t}\r\n\t\r\n\tvoid modify(int l, int r, int d)\r\n\t{\r\n\t\tl += 262144; r += 262144;\r\n\t\twhile(l < r) {\r\n\t\t\tif(l & 1) modify_v(l, d);\r\n\t\t\tif(!(r & 1)) modify_v(r, d);\r\n\t\t\tl = l + 1 >> 1;\r\n\t\t\tr = r - 1 >> 1;\r\n\t\t}\r\n\t\tif(l == r) modify_v(l, d);\r\n\t}\r\n\t\r\n\tint query(int pos)\r\n\t{\r\n\t\tpos += 262144;\r\n\t\tint ret = 0;\r\n\t\twhile(pos > 0) {\r\n\t\t\tret = max(ret, dat[pos]);\r\n\t\t\tpos >>= 1;\r\n\t\t}\r\n\t\treturn ret;\r\n\t}\r\n\t\r\n\tvoid undo(int id)\r\n\t{\r\n\t\twhile(scnt > 0 && dat[spos[scnt - 1]] == id) {\r\n\t\t\tscnt --;\r\n\t\t\tdat[spos[scnt]] = sdat[scnt];\r\n\t\t}\r\n\t}\r\n}st;\r\n \r\nvoid dfs2(int v, int p, int cdv, int cidv)\r\n{\r\n\tdv[v] = cdv;\r\n\tidv[v] = cidv;\r\n\ttre.add(D.dfn[dv[v]] + 1, 1);\r\n\titre.add(ID.dfn[idv[v]] + 1, 1);\r\n\trep(i, tq[v].size()) ans[tq[v][i]] += tre.query(D.dfo[D.ver[qt[tq[v][i]]]] + 1) - tre.query(D.dfn[D.ver[qt[tq[v][i]]]]);\r\n\trep(i, itq[v].size()) ans[itq[v][i]] += itre.query(ID.dfo[ID.ver[qt[itq[v][i]]]] + 1) - itre.query(ID.dfn[ID.ver[qt[itq[v][i]]]]);\r\n\t\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u] || u == p) continue;\r\n\t\tdfs2(u, v, D.adds(cdv, G[v][i].second), ID.adds(cidv, G[v][i].second));\r\n\t}\r\n\ttre.add(D.dfn[dv[v]] + 1, -1);\r\n\titre.add(ID.dfn[idv[v]] + 1, -1);\r\n}\r\n \r\nvoid dfs3(int v, int p, int crv)\r\n{\r\n\tdv[v] = crv;\r\n\tif(crv != -1) st.modify(R.dfn[crv], R.dfo[crv], dep[v]);\r\n\trep(i, tq[v].size()) qr[tq[v][i]] = st.query(R.dfn[R.ver[qt[tq[v][i]]]]);\r\n\t\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u] || u == p) continue;\r\n\t\tdfs3(u, v, R.adds(crv, G[v][i].second));\r\n\t}\r\n\tst.undo(dep[v]);\r\n}\r\n \r\nvoid dfs4(int v, int p, int cirv)\r\n{\r\n\tidv[v] = cirv;\r\n\tif(cirv != -1) st.modify(IR.dfn[cirv], IR.dfo[cirv], dep[v]);\r\n\trep(i, itq[v].size()) ql[itq[v][i]] = st.query(IR.dfn[IR.ver[qt[itq[v][i]]]]);\r\n\t\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u] || u == p) continue;\r\n\t\tdfs4(u, v, IR.adds(cirv, G[v][i].second));\r\n\t}\r\n\tst.undo(dep[v]);\r\n}\r\n \r\nvoid deposit(int v, int id)\r\n{\r\n\tdfs0(v, -1);\r\n\tint tot = siz[v];\r\n\tv = cent(v, -1, tot);\r\n\t\r\n\tdel[v] = true;\r\n\tint cqc = qcnt;\r\n\tdep[v] = 0;\r\n\tqtp[v] = id;\r\n\ttq[v].clear();\r\n\titq[v].clear();\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u]) continue;\r\n\t\tdfs1(u, v, 1, qcnt ++);\r\n\t}\r\n\t\r\n\tvector<int> chq;\r\n\trep(i, cq[id].size()) if(qtp[qu[cq[id][i]]] != qtp[qv[cq[id][i]]]) chq.push_back(cq[id][i]);\r\n\telse cq[qtp[qu[cq[id][i]]]].push_back(cq[id][i]);\r\n\trep(i, chq.size()) {\r\n\t\titq[qu[chq[i]]].push_back(chq[i]);\r\n\t\ttq[qv[chq[i]]].push_back(chq[i]);\r\n\t}\r\n\t\r\n\tdfs2(v, -1, 0, 0);\r\n\tdfs3(v, -1, 0);\r\n\tdfs4(v, -1, 0);\r\n\t\r\n\trep(i, G[v].size()) {\r\n\t\tint u = G[v][i].first;\r\n\t\tif(del[u]) continue;\r\n\t\tdeposit(u, cqc ++);\r\n\t}\r\n}\r\n \r\nvector<int> hv[100005];\r\nint pf[100005], sf[100005];\r\nvector<PII> indf[100005], qdf[100005]; \r\n \r\nvoid solve_s(int cur)\r\n{\r\n\tD.init();\r\n\tID.init();\r\n\trep(i, pos[cur + 1] - pos[cur]) pf[i] = D.append(i == 0 ? 0 : pf[i - 1], ch[pos[cur] + i]);\r\n\tfor(int i = pos[cur + 1] - pos[cur] - 1; i >= 0; i --)\r\n\tsf[i] = ID.append(i == pos[cur + 1] - pos[cur] - 1 ? 0 : sf[i + 1], ch[pos[cur] + i]);\r\n\tD.gen_upd();\r\n\tID.gen_upd();\r\n\t\r\n\trep(i, D.cnt + 1) {\r\n\t\tindf[i].clear();\r\n\t\tqdf[i].clear();\r\n\t}\r\n\trep(i, pos[cur + 1] - pos[cur] - 1) {\r\n\t\tindf[D.dfn[pf[i]]].push_back(MP(sf[i + 1], 1));\r\n\t\tindf[D.dfo[pf[i]] + 1].push_back(MP(sf[i + 1], -1));\r\n\t}\r\n\trep(i, hv[cur].size()) if(ql[hv[cur][i]] > 0 && qr[hv[cur][i]] > 0)\r\n\tqdf[D.dfn[pf[ql[hv[cur][i]]] - 1]].push_back(MP(sf[pos[cur + 1] - pos[cur] - qr[hv[cur][i]]], hv[cur][i]));\r\n\t\r\n\trep(i, D.cnt + 1) {\r\n\t\trep(j, indf[i].size()) {\r\n\t\t\tint cur = indf[i][j].first;\r\n\t\t\ttre.add(ID.dfn[cur] + 1, indf[i][j].second);\r\n\t\t\ttre.add(ID.dfo[cur] + 2, -indf[i][j].second);\r\n\t\t}\r\n\t\trep(j, qdf[i].size()) {\r\n\t\t\tint cur = qdf[i][j].first;\r\n\t\t\tans[qdf[i][j].second] += tre.query(ID.dfn[cur] + 1);\r\n\t\t}\r\n\t}\r\n}\r\n \r\nint main()\r\n{\r\n\tscanf(\"%d%d%d\", &n, &m, &q);\r\n\trep(i, n - 1) {\r\n\t\tint u, v;\r\n\t\tchar c;\r\n\t\tscanf(\"%d%d %c\", &u, &v, &c);\r\n\t\tG[u].push_back(MP(v, c - 'a'));\r\n\t\tG[v].push_back(MP(u, c - 'a'));\r\n\t}\r\n\trep(i, m) {\r\n\t\tscanf(\"%s\", ch + pos[i]);\r\n\t\tpos[i + 1] = pos[i] + strlen(ch + pos[i]);\r\n\t}\r\n\trep(i, pos[m]) ch[i] -= 'a';\r\n\t\r\n\tR.init();\r\n\tIR.init();\r\n\tD.init();\r\n\tID.init();\r\n\trep(i, pos[m]) R.ver[i] = R.append(i == 0 ? 0 : R.ver[i - 1], ch[i]);\r\n\tfor(int i = pos[m] - 1; i >= 0; i --) IR.ver[i] = IR.append(i == pos[m] - 1 ? 0 : IR.ver[i + 1], ch[i]);\r\n\tR.gen_upd();\r\n\tIR.gen_upd();\r\n\trep(i, pos[m]) R.ver[i] = IR.ver[i] = -1;\r\n\trep(i, m) {\r\n\t\tR.ver[i] = 0;\r\n\t\tfor(int j = pos[i]; j < pos[i + 1]; j ++) R.ver[i] = R.adds(R.ver[i], ch[j]);\r\n\t\tIR.ver[i] = 0;\r\n\t\tfor(int j = pos[i + 1] - 1; j >= pos[i]; j --) IR.ver[i] = IR.adds(IR.ver[i], ch[j]);\r\n\t}\r\n\t\r\n\trep(i, m) {\r\n\t\tD.ver[i] = 0;\r\n\t\tfor(int j = pos[i]; j < pos[i + 1]; j ++) D.ver[i] = D.append(D.ver[i], ch[j]);\r\n\t\tID.ver[i] = 0;\r\n\t\tfor(int j = pos[i + 1] - 1; j >= pos[i]; j --) ID.ver[i] = ID.append(ID.ver[i], ch[j]);\r\n\t}\r\n\tD.gen_upd();\r\n\tID.gen_upd();\r\n \r\n\trep(i, q) {\r\n\t\tscanf(\"%d%d%d\", &qu[i], &qv[i], &qt[i]);\r\n\t\tqt[i] --;\r\n\t}\r\n\t\r\n\tqcnt = 1;\r\n\trep(i, q) cq[0].push_back(i);\r\n\tdeposit(1, 0);\r\n\t\r\n\trep(i, q) hv[qt[i]].push_back(i);\r\n\trep(i, m) solve_s(i);\r\n\t\r\n\trep(i, q) printf(\"%d\\n\", ans[i]);\r\n\treturn 0;\r\n}"
}