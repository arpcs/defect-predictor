{
    "id": 37296581,
    "contestId": 917,
    "creationTimeSeconds": 1523648506,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "TadijaSebez"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 111718400,
    "source": "#include <stdio.h>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <queue>\r\nusing namespace std;\r\n#define pb push_back\r\n#define mp make_pair\r\nconst int N=100050;\r\nconst int M=2*N;\r\nconst int H=2*M;\r\nint acgo[M][26],aclid[M],acrid[M],acnode[M],aclink[M],actid,actsz,acroot;\r\nvoid Insert(int &c, char *s, int lvl, int n, int id)\r\n{\r\n\tif(!c) c=++actsz;\r\n\tif(lvl==n){ acnode[id]=c;return;}\r\n\tInsert(acgo[c][s[lvl]-'a'],s,lvl+1,n,id);\r\n}\r\nvector<int> A[M];\r\nvoid DFSID(int u){ aclid[u]=++actid;for(int i=0;i<A[u].size();i++) DFSID(A[u][i]);acrid[u]=actid;}\r\nvoid BuildAhoCorasick()\r\n{\r\n\taclink[acroot]=acroot;\r\n\tint i;\r\n\tqueue<int> q;\r\n\tfor(i=0;i<26;i++)\r\n\t{\r\n\t\tif(acgo[acroot][i])\r\n\t\t{\r\n\t\t\taclink[acgo[acroot][i]]=acroot;\r\n\t\t\tq.push(acgo[acroot][i]);\r\n\t\t}\r\n\t\telse acgo[acroot][i]=acroot;\r\n\t}\r\n\twhile(q.size())\r\n\t{\r\n\t\tint u=q.front();\r\n\t\tq.pop();\r\n\t\tfor(i=0;i<26;i++)\r\n\t\t{\r\n\t\t\tint v=acgo[u][i];\r\n\t\t\tif(v)\r\n\t\t\t{\r\n\t\t\t\taclink[v]=acgo[aclink[u]][i];\r\n\t\t\t\tq.push(v);\r\n\t\t\t}\r\n\t\t\telse acgo[u][i]=acgo[aclink[u]][i];\r\n\t\t}\r\n\t}\r\n\tfor(i=acroot+1;i<=actsz;i++) A[aclink[i]].pb(i);\r\n\tDFSID(acroot);\r\n}\r\nint link[H],ssz[H],go[H][26],lid[H],rid[H],tid[H],root,tsz;\r\nvector<int> ids[H],qsu[H],qsv[H];char *st[H];\r\nstruct State{ int atnode,atlen,atedge;State(int a, int b, int c){ atnode=a,atlen=b,atedge=c;}};\r\nint AddNode(char *t, int len){ tsz++;st[tsz]=t;ssz[tsz]=len;link[tsz]=root;return tsz;}\r\nvoid AddRoot(){ root=AddNode(NULL,0);link[root]=root;}\r\nvoid Add(char *t, int n, int id)\r\n{\r\n\tif(!root) AddRoot();\r\n\tint atnode=root,atedge=0,atlen=0,pleaf=0,pnode=0,i;\r\n\tfor(i=0;i<=n;i++)\r\n\t{\r\n\t\twhile(1)\r\n\t\t{\r\n\t\t\tint tonode=atedge==n?0:go[atnode][t[atedge]-'a'];\r\n\t\t\tif(tonode && atlen>=ssz[tonode])\r\n\t\t\t{\r\n\t\t\t\tatlen-=ssz[tonode];\r\n\t\t\t\tatedge+=ssz[tonode];\r\n\t\t\t\tatnode=tonode;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(!tonode)\r\n\t\t\t{\r\n\t\t\t\tif(i!=n)\r\n\t\t\t\t{\r\n\t\t\t\t\tint leaf=AddNode(t+i,n-i);\r\n\t\t\t\t\tgo[atnode][t[i]-'a']=leaf;\r\n\t\t\t\t\tids[leaf].pb(id);\r\n\t\t\t\t\tif(pleaf) link[pleaf]=leaf;pleaf=leaf;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tids[atnode].pb(id);\r\n\t\t\t\t\tif(pleaf) link[pleaf]=atnode;pleaf=0;\r\n\t\t\t\t}\r\n\t\t\t\tif(pnode) link[pnode]=atnode;pnode=0;\r\n\t\t\t}\r\n\t\t\telse if(i==n || st[tonode][atlen]!=t[i])\r\n\t\t\t{\r\n\t\t\t\tint node=AddNode(st[tonode],atlen);\r\n\t\t\t\tssz[tonode]-=atlen;st[tonode]+=atlen;\r\n\t\t\t\tgo[atnode][st[node][0]-'a']=node;\r\n\t\t\t\tgo[node][st[tonode][0]-'a']=tonode;\r\n\t\t\t\tif(i!=n)\r\n\t\t\t\t{\r\n\t\t\t\t\tint leaf=AddNode(t+i,n-i);\r\n\t\t\t\t\tgo[node][t[i]-'a']=leaf;\r\n\t\t\t\t\tids[leaf].pb(id);\r\n\t\t\t\t\tif(pleaf) link[pleaf]=leaf;pleaf=leaf;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tids[node].pb(id);\r\n\t\t\t\t\tif(pleaf) link[pleaf]=node;pleaf=0;\r\n\t\t\t\t}\r\n\t\t\t\tif(pnode) link[pnode]=node;pnode=node;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(pnode) link[pnode]=atnode;pnode=0;\r\n\t\t\t\tatlen++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif(atnode==root)\r\n\t\t\t{\r\n\t\t\t\tatedge++;\r\n\t\t\t\tif(atlen) atlen--;\r\n\t\t\t\telse break;\r\n\t\t\t}\r\n\t\t\telse atnode=link[atnode];\r\n\t\t}\r\n\t}\r\n}\r\nState Move(State cur, char c)\r\n{\r\n\tif(cur.atlen==-1) return cur;\r\n\tif(cur.atlen==0)\r\n\t{\r\n\t\tint tonode=go[cur.atnode][c-'a'];\r\n\t\tif(!tonode) return State(cur.atnode,-1,-1);\r\n\t\tif(ssz[tonode]==1) return State(tonode,0,-1);\r\n\t\telse return State(cur.atnode,1,c-'a');\r\n\t}\r\n\telse\r\n\t{\r\n\t\tint tonode=go[cur.atnode][cur.atedge];\r\n\t\tif(c!=st[tonode][cur.atlen]) return State(cur.atnode,-1,-1);\r\n\t\tcur.atlen++;\r\n\t\tif(cur.atlen==ssz[tonode]) return State(tonode,0,-1);\r\n\t\telse return cur;\r\n\t}\r\n}\r\nstruct BIT\r\n{\r\n\tvector<int> sum;\r\n\tBIT(){}\r\n\tvoid Init(int _sz){ sum.resize(_sz+5);}\r\n\tvoid Set(int i, int f){ for(;i<sum.size();i+=i&-i) sum[i]+=f;}\r\n\tvoid Set(int l, int r, int f){ Set(l,f);Set(r+1,-f);}\r\n\tint Get(int i){int ret=0;for(;i;i-=i&-i) ret+=sum[i];return ret;}\r\n\tint Get(int l, int r){ return Get(r)-Get(l-1);}\r\n} Tree,FTree[N];\r\nvector<pair<int,char> > E[N];\r\nint fir[M],len[M];\r\nchar s[M];\r\nstruct Query{ int u,v,k;Query(int a=0, int b=0, int c=0){ u=a,v=b,k=c;}} Q[N];\r\nint stu[N],stv[N],done[N],m,sol[N];\r\nvector<int> Qa[N],Qb[N];\r\nint sz[N],vis[N],mark[N];\r\nvoid DFS(int u, int p, int &n)\r\n{\r\n\tn++;sz[u]=1;\r\n\tfor(int i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tif(v!=p && !vis[v]) DFS(v,u,n),sz[u]+=sz[v];\r\n\t}\r\n}\r\nint Find(int u, int p, int n)\r\n{\r\n\tfor(int i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tif(v!=p && !vis[v] && sz[v]>n/2) return Find(v,u,n);\r\n\t}\r\n\treturn u;\r\n}\r\nint Find(int u){ int n=0;DFS(u,u,n);return Find(u,u,n);}\r\nvoid Mark(int u, int p, int m)\r\n{\r\n\tmark[u]=m;\r\n\tfor(int i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tif(v!=p && !vis[v]) Mark(v,u,m);\r\n\t}\r\n}\r\nvoid Solve(int u, int p, int ac, State st)\r\n{\r\n\tTree.Set(aclid[ac],1);\r\n\tint i;\r\n\tfor(i=0;i<Qa[u].size();i++)\r\n\t{\r\n\t\tint id=Qa[u][i];\r\n\t\tint a=Q[id].u;\r\n\t\tint b=Q[id].v;\r\n\t\tint k=Q[id].k;\r\n\t\tif(mark[a] && mark[b] && mark[a]!=mark[b])\r\n\t\t{\r\n\t\t\tsol[id]+=Tree.Get(aclid[acnode[k+m]],acrid[acnode[k+m]]);\r\n\t\t\tstu[id]=st.atnode;\r\n\t\t\tdone[id]++;\r\n\t\t}\r\n\t}\r\n\tfor(i=0;i<Qb[u].size();i++)\r\n\t{\r\n\t\tint id=Qb[u][i];\r\n\t\tint a=Q[id].u;\r\n\t\tint b=Q[id].v;\r\n\t\tint k=Q[id].k;\r\n\t\tif(mark[a] && mark[b] && mark[a]!=mark[b])\r\n\t\t{\r\n\t\t\tsol[id]+=Tree.Get(aclid[acnode[k]],acrid[acnode[k]]);\r\n\t\t\tstv[id]=st.atnode;\r\n\t\t\tdone[id]++;\r\n\t\t}\r\n\t}\r\n\tfor(i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tchar w=E[u][i].second;\r\n\t\tif(v!=p && !vis[v]) Solve(v,u,acgo[ac][w-'a'],Move(st,w));\r\n\t}\r\n\tTree.Set(aclid[ac],-1);\r\n}\r\nvoid Decompose(int u)\r\n{\r\n\tu=Find(u);vis[u]=1;\r\n\tint i;\r\n\tfor(i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tif(!vis[v]) Mark(v,u,i+2);\r\n\t}\r\n\tmark[u]=1;\r\n\tfor(i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tchar w=E[u][i].second;\r\n\t\tif(!vis[v])\r\n\t\t{\r\n\t\t\tSolve(v,u,acgo[acroot][w-'a'],Move(State(root,0,-1),w));\r\n\t\t}\r\n\t}\r\n\tfor(i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tif(!vis[v]) Mark(v,u,0);\r\n\t}\r\n\tmark[u]=0;\r\n\tfor(i=0;i<E[u].size();i++)\r\n\t{\r\n\t\tint v=E[u][i].first;\r\n\t\tif(!vis[v]) Decompose(v);\r\n\t}\r\n}\r\nint qulid[N],qvlid[N],qurid[N],qvrid[N];\r\nvoid DFSST(int u, int dep)\r\n{\r\n\tdep+=ssz[u];\r\n\tint i;\r\n\tfor(i=0;i<ids[u].size();i++)\r\n\t{\r\n\t\tint id=ids[u][i];\r\n\t\tif(dep==len[id]) continue;\r\n\t\tif(id>m) lid[fir[id]+len[id]-dep]=++tid[id-m];\r\n\t\telse lid[fir[id]+len[id]-dep]=++tid[id];\r\n\t}\r\n\tfor(i=0;i<qsu[u].size();i++)\r\n\t{\r\n\t\tint id=qsu[u][i];\r\n\t\tint k=Q[id].k;\r\n\t\tqulid[id]=++tid[k];\r\n\t}\r\n\tfor(i=0;i<qsv[u].size();i++)\r\n\t{\r\n\t\tint id=qsv[u][i];\r\n\t\tint k=Q[id].k;\r\n\t\tif(qulid[id]==tid[k]) qvlid[id]=qulid[id];\r\n\t\telse qvlid[id]=++tid[k];\r\n\t}\r\n\tfor(i=0;i<26;i++) if(go[u][i]) DFSST(go[u][i],dep);\r\n\tfor(i=0;i<ids[u].size();i++)\r\n\t{\r\n\t\tint id=ids[u][i];\r\n\t\tif(dep==len[id]) continue;\r\n\t\tif(id>m) rid[fir[id]+len[id]-dep]=tid[id-m];\r\n\t\telse rid[fir[id]+len[id]-dep]=tid[id];\r\n\t}\r\n\tfor(i=0;i<qsu[u].size();i++)\r\n\t{\r\n\t\tint id=qsu[u][i];\r\n\t\tint k=Q[id].k;\r\n\t\tqurid[id]=tid[k];\r\n\t}\r\n\tfor(i=0;i<qsv[u].size();i++)\r\n\t{\r\n\t\tint id=qsv[u][i];\r\n\t\tint k=Q[id].k;\r\n\t\tqvrid[id]=tid[k];\r\n\t}\r\n}\r\nvoid SolveST(int u, int dep)\r\n{\r\n\tdep+=ssz[u];\r\n\tint i;\r\n\tfor(i=0;i<ids[u].size();i++)\r\n\t{\r\n\t\tint id=ids[u][i];\r\n\t\tif(id<=m)\r\n\t\t{\r\n\t\t\tint node=fir[id+m]+dep;\r\n\t\t\tif(node<fir[id+m]+len[id+m]) FTree[id].Set(lid[node],rid[node],1);\r\n\t\t}\r\n\t}\r\n\tfor(i=0;i<qsu[u].size();i++)\r\n\t{\r\n\t\tint id=qsu[u][i];\r\n\t\tint k=Q[id].k;\r\n\t\tsol[id]+=FTree[k].Get(qvlid[id]);\r\n\t}\r\n\tfor(i=0;i<26;i++) if(go[u][i]) SolveST(go[u][i],dep);\r\n\tfor(i=0;i<ids[u].size();i++)\r\n\t{\r\n\t\tint id=ids[u][i];\r\n\t\tif(id<=m)\r\n\t\t{\r\n\t\t\tint node=fir[id+m]+dep;\r\n\t\t\tif(node<fir[id+m]+len[id+m]) FTree[id].Set(lid[node],rid[node],-1);\r\n\t\t}\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tint n,q,i,j,u,v;char w;\r\n\tscanf(\"%i %i %i\",&n,&m,&q);\r\n\tfor(i=1;i<n;i++) scanf(\"%i %i %c\",&u,&v,&w),E[u].pb(mp(v,w)),E[v].pb(mp(u,w));\r\n\tfor(i=1;i<=m;i++)\r\n\t{\r\n\t\tscanf(\"%s\",s+fir[i]);\r\n\t\tlen[i]=strlen(s+fir[i]);\r\n\t\tfir[i+1]=fir[i]+len[i];\r\n\t}\r\n\tfor(i=m+1;i<=m*2;i++)\r\n\t{\r\n\t\tfor(j=len[i-m]-1;j>=0;j--)\r\n\t\t{\r\n\t\t\ts[fir[i]+len[i-m]-1-j]=s[fir[i-m]+j];\r\n\t\t}\r\n\t\tlen[i]=len[i-m];\r\n\t\tfir[i+1]=fir[i]+len[i];\r\n\t}\r\n\tfor(i=1;i<=2*m;i++) Insert(acroot,s+fir[i],0,len[i],i);\r\n\tBuildAhoCorasick();Tree.Init(actid);\r\n\tfor(i=1;i<=2*m;i++) Add(s+fir[i],len[i],i);\r\n\tfor(i=1;i<=q;i++)\r\n\t{\r\n\t\tscanf(\"%i %i %i\",&Q[i].u,&Q[i].v,&Q[i].k);\r\n\t\tQa[Q[i].u].pb(i);\r\n\t\tQb[Q[i].v].pb(i);\r\n\t}\r\n\tDecompose(1);\r\n\tfor(i=1;i<=q;i++)\r\n\t{\r\n\t\tif(done[i]==2)\r\n\t\t{\r\n\t\t\tqsu[stu[i]].pb(i);\r\n\t\t\tqsv[stv[i]].pb(i);\r\n\t\t}\r\n\t}\r\n\tids[root].clear();\r\n\tDFSST(root,0);\r\n\tfor(i=1;i<=m;i++) FTree[i].Init(tid[i]);\r\n\tSolveST(root,0);\r\n\tfor(i=1;i<=q;i++) printf(\"%i\\n\",sol[i]);\r\n\treturn 0;\r\n}"
}