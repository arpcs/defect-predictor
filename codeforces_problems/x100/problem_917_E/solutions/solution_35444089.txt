{
    "id": 35444089,
    "contestId": 917,
    "creationTimeSeconds": 1518952851,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 917,
        "index": "E",
        "name": "Upside Down",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 917,
        "members": [
            {
                "handle": "Los_Angelos_Laycurse"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1517236500
    },
    "programmingLanguage": "MS C++",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <stdio.h>\r\n#include <string>\r\n#include <vector> \r\nusing namespace std; \r\nstruct xxx\r\n{\r\n\tint x,flag,id;\r\n\tbool operator <(const xxx &temp)const\r\n\t{\r\n\t\tif(x==temp.x)\r\n\t\t\treturn flag<temp.flag;\r\n\t\treturn x<temp.x;\r\n\t}\r\n};\r\nxxx x[400000];\r\nint cnt;\r\nstruct segment\r\n{\r\n\tint l,r;\r\n};\r\nsegment sg[110000];\r\nint cnt_sg,arr[110000];\r\nstruct query\r\n{\r\n\tint u,v,k,id;\r\n};\r\nquery qy[110000],nw;\r\nint ex[110000];\r\nstruct pp\r\n{\r\n\tint id;\r\n\tchar ch;\r\n};\r\nvector<pp>adj[110000];\r\npp now;\r\nint tadj[110000][26];\r\nstring str[110000];\r\nchar tmp[110000];\r\nint n,m,num_q,ans[110000],list[110000],cnt_list,hs[110000],at[110000];\r\nconst int base=27,mod=1e9+9;\r\nvector<int>vr[2][110000];\r\nint us[2][110000],times,size[110000],st[110000],en[110000],pos[110000],dist[110000],ps[110000],pa[110000],pd[110000],pm[110000];\r\nbool vis[110000];\r\nint trie[110000][26],num_node[2],vec[110000],num_vec,deep[110000],stk[110000],to[110000];\r\nint pc[110000],bs[2][110000];\r\nvector<int>vw[3][110000];\r\nint per[110000],mi;\r\nbool cmp(int id1,int id2)\r\n{\r\n\treturn hs[id1]<hs[id2];\r\n}\r\nvoid construct_trie(int id,int pr,int pid,int dee)\r\n{\r\n\tint i,j,s,p,q,ip,ie; \r\n\tstk[dee]=id;\r\n\tto[id]=stk[min(1,dee)];\r\n\tfor(j=0;j<2;j++)\r\n\t{\r\n\t    for(i=0;i<vr[j][id].size();i++)\r\n    \t{\r\n\t    \tip=vr[j][id][i];\r\n\t\t\tif(us[j][ip]!=times)\r\n\t\t\t{\r\n\t    \t\tus[j][ip]=times;\r\n\t\t\t    if(j==0)\r\n\t\t\t       vec[num_vec++]=ip;\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\tpos[id]=pid;\r\n\tfor(i=0;i<adj[id].size();i++)\r\n\t{\r\n\t\tip=adj[id][i].id;\r\n\t\tif(ip==pr||vis[ip])\r\n\t\t    continue;\r\n        int ch=adj[id][i].ch-'a';\r\n        if(trie[pid][ch]==0)\r\n        {\r\n        \tpc[num_node[0]]=ch;\r\n        \ths[num_node[0]]=(1LL*hs[pid]*base+ch+1)%mod;\r\n            memset(trie[num_node[0]],0,sizeof(trie[num_node[0]]));\r\n        \ttrie[pid][ch]=num_node[0]++;\r\n\t\t}\r\n\t\tie=trie[pid][ch];\r\n        deep[ie]=deep[pid]+1;\r\n\t\tat[ip]=i; \r\n        construct_trie(ip,id,ie,dee+1);\r\n\t}\r\n}\r\nint binary(int left,int right,int x)\r\n{\r\n\tint mid;\r\n\twhile(left<=right)\r\n\t{\r\n\t\tmid=(left+right)>>1;\r\n\t\tif(hs[per[mid]]<x)\r\n\t\t   left=mid+1;\r\n        else if(x<hs[per[mid]])\r\n           right=mid-1;\r\n        else\r\n           return per[mid];\r\n\t}\r\n\treturn -1;\r\n}\r\nint lowbit(int x)\r\n{\r\n\treturn x&-x;\r\n}\r\nvoid dfs(int id)\r\n{\r\n\tint i,j,s,p,q;\r\n\tst[id]=cnt_list++;\r\n\tfor(i=0;i<26;i++)\r\n\t{\r\n\t\tif(trie[id][i]>0)\r\n\t\t   dfs(trie[id][i]);\r\n\t}\r\n//\tprintf(\"id=%d,cnt_list=%d\\n\",id,cnt_list);\r\n\ten[id]=cnt_list-1;\r\n}\r\nvoid get_size(int id,int pr)\r\n{\r\n\tint i,j,s,p,q,ip;\r\n\tsize[id]=1;\r\n\tfor(i=0;i<adj[id].size();i++)\r\n\t{\r\n\t\tip=adj[id][i].id;\r\n\t\tif(!vis[ip]&&ip!=pr)\r\n\t\t{\r\n\t\t\tget_size(ip,id);\r\n\t\t\tsize[id]+=size[ip];\r\n\t\t}\r\n\t}\r\n}\r\nvoid choose_root(int id,int pr,int now_sz,int &ch)\r\n{\r\n\tint i,j,s,p,q,ax=now_sz,ip;\r\n\tfor(i=0;i<adj[id].size();i++)\r\n\t{\r\n\t\tip=adj[id][i].id;\r\n\t\tif(ip==pr||vis[ip])\r\n\t\t    continue;\r\n\t\tif(ax<size[ip])\r\n\t\t\tax=size[ip];\r\n\t}\r\n\tif(mi>ax)\r\n\t{\r\n\t\tmi=ax;\r\n\t\tch=id; \r\n\t}\r\n\tfor(i=0;i<adj[id].size();i++)\r\n\t{\r\n\t\tip=adj[id][i].id;\r\n\t\tif(ip==pr||vis[ip])\r\n\t\t    continue;\r\n\t\tchoose_root(ip,id,now_sz+size[id]-size[ip],ch);\t\r\n\t}\r\n}\r\nvoid solve(int id)\r\n{\r\n\tint i,j,s,p,q,ip,ie,k;\r\n\ttimes++;\r\n\tvis[id]=true;\r\n\tnum_node[0]=1;\r\n\tnum_vec=0; \r\n\tdeep[0]=0; \r\n\ths[0]=0; \r\n\tmemset(trie[0],0,sizeof(trie[0]));\r\n\tconstruct_trie(id,-1,0,0);\r\n\tcnt_list=0;\r\n\tdfs(0);\r\n\tint nn=0;\r\n\tfor(i=0;i<num_vec;i++)\r\n\t{\r\n\t\tip=vec[i];\r\n\t\tvw[2][ip].clear();\r\n\t\tif(us[0][ip]==times&&us[1][ip]==times&&(qy[ip].u==id||qy[ip].v==id||to[qy[ip].u]!=to[qy[ip].v]))\r\n\t\t\tvec[nn++]=vec[i];\r\n\t}\r\n\tnum_vec=nn;\r\n\ttimes++; \r\n\tfor(i=0;i<num_node[0];i++)\r\n\t    per[i]=i;\r\n\tsort(per,per+num_node[0],cmp);\r\n\tfor(i=0;i<num_vec;i++)\r\n\t{\r\n\t\tip=vec[i];\r\n\t\tif(us[0][qy[ip].k]!=times)\r\n\t\t{\r\n\t\t\tie=qy[ip].k;\r\n\t\t\tint now_hash=0;\r\n\t\t\tvw[0][qy[ip].k].clear();\r\n\t\t\tvw[1][qy[ip].k].clear();\r\n\t\t\tvw[2][qy[ip].k].clear();\r\n\t\t\tfor(j=0;j<=str[ie].size();j++)\r\n\t\t\t{\r\n\t\t\t\tbs[0][j]=binary(0,num_node[0]-1,now_hash);\r\n\t\t\t\tif(j==str[ie].size())\r\n\t\t\t\t    break;\r\n\t\t\t\tnow_hash=(now_hash+1LL*ex[j]*(str[ie][j]-'a'+1))%mod; \r\n \t\t    }\r\n \t\t    now_hash=0; \r\n \t\t    int iq=binary(0,num_node[0]-1,now_hash);\r\n \t\t    bs[1][str[ie].size()]=iq;\r\n\t\t\tfor(j=str[ie].size()-1;j>=0;j--)\r\n \t\t    {\r\n \t\t        now_hash=(now_hash+1LL*ex[str[ie].size()-1-j]*(str[ie][j]-'a'+1))%mod;\r\n \t\t        bs[1][j]=binary(0,num_node[0]-1,now_hash);\r\n    \t    }\r\n    \t    for(j=0;j<=str[ie].size();j++)\r\n    \t    {\r\n    \t    \tif(bs[0][j]>=0&&bs[1][j]>=0)\r\n    \t    \t{\r\n\t    \t    \tvw[0][qy[ip].k].push_back(bs[0][j]);\r\n\t    \t    \tvw[1][qy[ip].k].push_back(bs[1][j]);\r\n\t    \t    }\r\n    \t    }\r\n    \t    us[0][qy[ip].k]=times;\r\n\t\t}\r\n\t    vw[2][qy[ip].k].push_back(ip);\r\n\t}\r\n\ttimes++;\r\n\tfor(i=0;i<=num_node[0];i++)\r\n\t    arr[i]=0;\r\n\tfor(i=0;i<num_vec;i++)\r\n\t{\r\n\t\tip=vec[i];\r\n\t\tif(us[0][qy[ip].k]!=times)\r\n\t\t{ \r\n\t\t\tcnt=0;\r\n\t\t\tfor(j=0;j<vw[0][qy[ip].k].size();j++)\r\n\t\t\t{\r\n\t\t\t\tx[cnt].x=st[vw[0][qy[ip].k][j]];\r\n\t\t\t\tx[cnt].flag=-1;\r\n\t\t\t\tx[cnt++].id=j;\r\n\t\t\t\tx[cnt].x=en[vw[0][qy[ip].k][j]];\r\n\t\t\t\tx[cnt].flag=1;\r\n\t\t\t\tx[cnt++].id=j;\r\n\t\t\t}\r\n\t\t\tfor(j=0;j<vw[2][qy[ip].k].size();j++)\r\n\t\t\t{\r\n\t\t\t\tie=vw[2][qy[ip].k][j];\r\n\t\t\t\tx[cnt].x=st[pos[qy[ie].u]];\r\n\t\t\t\tx[cnt].flag=0;\r\n\t\t\t\tx[cnt++].id=ie;\r\n\t\t\t}\r\n\t\t\tsort(x,x+cnt);\r\n\t\t\tfor(j=0;j<cnt;j++)\r\n\t\t\t{\r\n\t\t\t\tif(x[j].flag!=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tie=x[j].id;\r\n\t\t\t\t\tfor(s=st[vw[1][qy[ip].k][ie]]+1;s<=num_node[0];s+=lowbit(s))\r\n\t\t\t\t\t    arr[s]-=x[j].flag;\r\n\t                for(s=en[vw[1][qy[ip].k][ie]]+2;s<=num_node[0];s+=lowbit(s))\r\n\t                    arr[s]+=x[j].flag;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tie=x[j].id;\r\n\t\t\t\t\tfor(s=st[pos[qy[ie].v]]+1;s>0;s-=lowbit(s))\r\n\t\t\t\t\t     ans[ie]+=arr[s];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tus[0][qy[ip].k]=times;\r\n\t\t\tfor(j=0;j<cnt;j++)\r\n\t\t\t{\r\n\t\t\t\tif(x[j].flag!=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tie=x[j].id;\r\n\t\t\t\t\tfor(s=st[vw[1][qy[ip].k][ie]]+1;s<=num_node[0];s+=lowbit(s))\r\n\t\t\t\t\t    arr[s]=0;\r\n\t                for(s=en[vw[1][qy[ip].k][ie]]+2;s<=num_node[0];s+=lowbit(s))\r\n\t                    arr[s]=0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tvector<vector<query> >ve[2];\r\n\tve[0].clear();\r\n\tve[1].clear();\r\n\tvector<query>emp;\r\n\temp.clear();\r\n\t//if(id+1==5)\r\n\t  // printf(\"qy[0].u=%d,qy[0].v=%d\\n\",qy[0].u,qy[0].v);\r\n\tfor(i=0;i<adj[id].size();i++)\r\n\t{\r\n\t\tip=adj[id][i].id;\r\n\t\tve[0].push_back(emp);\r\n\t\tve[1].push_back(emp);\r\n\t//\tif(!vis[ip])\r\n\t//\t{\r\n\t//\t   ve[0][i].clear();\r\n\t//\t   ve[1][i].clear();\r\n\t//\t}\r\n\t}\r\n\tfor(i=0;i<num_vec;i++)\r\n\t{\r\n\t\tip=vec[i];\r\n\t\tif(to[qy[ip].u]!=id)\r\n\t\t   ve[0][at[to[qy[ip].u]]].push_back(qy[ip]);\r\n\t\tif(to[qy[ip].v]!=id)\r\n\t\t{\r\n\t\t//\tif(id+1==7&&ip==0)\r\n\t//\t\t{\r\n\t\t//\t\tputs(\"YOU\");\r\n\t\t//\t}\r\n\t\t   ve[1][at[to[qy[ip].v]]].push_back(qy[ip]);\r\n\t\t}\r\n\t}\r\n\t//printf(\"vis[5]=%d\\n\",vis[5]);\r\n\tfor(i=0;i<adj[id].size();i++)\r\n\t{\r\n\t\tip=adj[id][i].id;\r\n\t\tif(!vis[ip])\r\n\t\t{\r\n\t\t\tint root;\r\n\t\t\tcnt_list=0;\r\n\t\t\tget_size(ip,-1);\r\n\t\t\tmi=1e9+9;\r\n\t\t    choose_root(ip,-1,0,root);\r\n\t\t//\tputs(\"ab\");\r\n\t\t\tfor(j=0;j<ve[0][i].size();j++)\r\n\t\t\t{\r\n\t\t\t\tie=ve[0][i][j].id;\r\n\t\t\t\tqy[ie].v=ip;\r\n\t\t\t\tvr[1][ip].push_back(ie);\r\n\t\t\t}\r\n\t\t\tfor(j=0;j<ve[1][i].size();j++)\r\n\t\t\t{\r\n\t\t\t\tie=ve[1][i][j].id;\r\n\t\t\t\tqy[ie].u=ip;\r\n\t\t\t\tvr[0][ip].push_back(ie);\r\n\t\t\t}\r\n\t//\t\tputs(\"cd\");\r\n\t\t\tsolve(root);\r\n\t\t\tfor(j=0;j<ve[1][i].size();j++)\r\n\t\t\t{\r\n\t\t\t\tie=ve[1][i][j].id; \r\n\t\t\t\tvr[0][qy[ie].u].pop_back();\r\n\t\t\t\tqy[ie]=ve[1][i][j];\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tfor(j=0;j<ve[0][i].size();j++)\r\n\t\t\t{\r\n\t\t\t\tie=ve[0][i][j].id;\r\n\t\t\t\tvr[1][qy[ie].v].pop_back();\r\n\t\t\t\tqy[ie]=ve[0][i][j];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%d%d%d\",&n,&m,&num_q);\r\n\tint i,j,s,p,q,u,v;\r\n\tchar ch;\r\n\tfor(i=0;i<=100000;i++)\r\n\t{\r\n\t\tif(i==0)\r\n\t\t   ex[i]=1;\r\n        else\r\n           ex[i]=1LL*ex[i-1]*base%mod;\r\n\t}\r\n\tfor(i=0;i<n;i++)\r\n\t   adj[i].clear();\r\n\tfor(i=0;i<n-1;i++)\r\n\t{\r\n\t\tscanf(\"%d%d\",&u,&v);\r\n\t\tu--;\r\n\t\tv--;\r\n\t\tch=getchar();\r\n\t\twhile(ch<'a'||ch>'z')\r\n\t\t    ch=getchar();\r\n        now.id=v;\r\n        now.ch=ch;\r\n        adj[u].push_back(now);\r\n        now.id=u;\r\n        adj[v].push_back(now);\r\n\t}\r\n\tfor(i=0;i<m;i++)\r\n\t{\r\n\t\tscanf(\"%s\",tmp);\r\n\t\tstr[i]=tmp;\r\n\t}\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tvr[0][i].clear();\r\n\t    vr[1][i].clear();\r\n\t}\r\n\tfor(i=0;i<num_q;i++)\r\n\t{\r\n\t\tscanf(\"%d%d%d\",&qy[i].u,&qy[i].v,&qy[i].k);\r\n\t\tqy[i].u--;\r\n\t\tqy[i].v--;\r\n\t\tqy[i].k--;\r\n\t\tqy[i].id=i;\r\n\t\tvr[0][qy[i].u].push_back(i);\r\n\t\tvr[1][qy[i].v].push_back(i);\r\n\t}\r\n\tcnt_list=0;\r\n\t\r\n\tget_size(0,-1);\r\n\tmemset(ans,0,sizeof(ans));\r\n\tint root;\r\n\tmi=1e9+9;\r\n\tchoose_root(0,-1,0,root);\r\n\tsolve(root);\r\n\tfor(i=0;i<num_q;i++)\r\n\t{\r\n\t   printf(\"%d\\n\",ans[i]);\r\n\t //  printf(\"%d %d %d\\n\",qy[i].u+1,qy[i].v+1,qy[i].k+1);\r\n\t}\r\n\treturn 0;\r\n}\r\n/*\r\n10 6 7\r\n1 3 s\r\n10 1 d\r\n2 6 s\r\n5 2 d\r\n7 4 l\r\n8 9 d\r\n8 10 l\r\n7 2 d\r\n8 7 l\r\ndl\r\ndssld\r\nd\r\nd\r\nl\r\nsl\r\n4 5 4\r\n3 7 5\r\n10 6 2\r\n3 1 4\r\n7 5 6\r\n10 9 4\r\n9 8 4\r\n*/"
}