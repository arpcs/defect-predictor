{
    "id": 110036843,
    "contestId": 521,
    "creationTimeSeconds": 1615811606,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "realskc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 307200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nint k,n;\r\nlong long px[10],py[10];\r\nlong long mx[1010],my[1010];\r\nstruct frac{\r\n\tlong long p,q;\r\n\tvoid work(){\r\n\t\tlong long tmp=__gcd(p,q);\r\n\t\tif(tmp<0) tmp=-tmp;\r\n\t\tp=p/tmp;\r\n\t\tq=q/tmp;\r\n\t}\r\n\tbool operator==(const frac &ob)const{\r\n\t\tif(p!=ob.p) return 0;\r\n\t\tif(q!=ob.q) return 0;\r\n\t\treturn 1;\r\n\t}\r\n\tbool operator!=(const frac &ob)const{\r\n\t\tif(p!=ob.p) return 1;\r\n\t\tif(q!=ob.q) return 1;\r\n\t\treturn 0;\r\n\t}\r\n\tbool operator<(const frac &ob)const{\r\n\t\tif((p<0||p==0&&q<0)&&(ob.p>0||ob.p==0&&ob.q>0)) return 0;\r\n\t\tif((p>0||p==0&&q>0)&&(ob.p<0||ob.p==0&&ob.q<0)) return 1;\r\n\t\treturn p*ob.q<ob.p*q;\r\n\t}\r\n};\r\nstruct _{\r\n\tfrac arg;\r\n\tlong long dis;\r\n\tint id;\r\n\tbool operator<(const _ &ob)const{\r\n\t\tif(arg!=ob.arg) return arg<ob.arg;\r\n\t\treturn dis<ob.dis;\r\n\t}\r\n}ver[8][1010];\r\n_ produce(long long x,long long y,int id){\r\n\t_ rv;\r\n\trv.arg=(frac){y,x};\r\n\trv.arg.work();\r\n\trv.dis=x*x+y*y;\r\n\trv.id=id;\r\n\treturn rv;\r\n}\r\nint dfs(set<int> vec,set<int> red,int st){\r\n\tif(vec.size()>k-__builtin_popcount(st)) return 0;\r\n\tif(vec.empty()) return 1;\r\n\tint i,tmp;\r\n\tset<int> cpy;\r\n\tint tar=*vec.begin();\r\n\tred.insert(tar);\r\n\tfor(i=1;i<=k;++i){\r\n\t\tif(!(st>>i&1)){\r\n\t\t\tcpy=vec;\r\n\t\t\tcpy.erase(cpy.begin());\r\n\t\t\ttmp=lower_bound(ver[i]+1,ver[i]+1+n,produce(mx[tar]-px[i],my[tar]-py[i],tar))-ver[i];\r\n\t\t\tint ttmp=tmp;\r\n\t\t\twhile(ttmp>1&&ver[i][ttmp-1].arg==ver[i][tmp].arg) --ttmp;\r\n\t\t\twhile(ttmp<tmp){\r\n\t\t\t\tif(*red.lower_bound(ver[i][ttmp].id)==ver[i][ttmp].id){\r\n\t\t\t\t\t++ttmp;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tcpy.insert(ver[i][ttmp].id);\r\n\t\t\t\t++ttmp;\r\n\t\t\t\tif(cpy.size()>k) break;\r\n\t\t\t}\r\n\t\t\tif(dfs(cpy,red,st^1<<i)) return 1;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\nint main(){\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcin>>k>>n;\r\n\tint i;\r\n\tfor(i=1;i<=k;++i){\r\n\t\tcin>>px[i]>>py[i];\r\n\t}\r\n\tfor(i=1;i<=n;++i){\r\n\t\tcin>>mx[i]>>my[i];\r\n\t}\r\n\tint j;\r\n\tlong long x,y;\r\n\tfor(i=1;i<=k;++i){\r\n\t\tfor(j=1;j<=n;++j){\r\n\t\t\tx=mx[j]-px[i];\r\n\t\t\ty=my[j]-py[i];\r\n\t\t\tver[i][j]=produce(x,y,j);\r\n\t\t}\r\n\t\tsort(ver[i]+1,ver[i]+1+n);\r\n\t}\r\n\tint cnt=0;\r\n\tset<int> asdf;\r\n\tfor(i=1;i<=n;++i){\r\n\t\tasdf.insert(i);\r\n\t\tif(dfs(asdf,set<int>(),0)) ++cnt;\r\n\t\tasdf.clear();\r\n\t}\r\n\tcout<<cnt<<'\\n';\r\n\treturn 0;\r\n}\r\n"
}