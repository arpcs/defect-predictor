{
    "id": 134306509,
    "contestId": 521,
    "creationTimeSeconds": 1636027524,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "shangcheng"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 155,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 11366400,
    "source": "#include <set>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <algorithm>\r\ninline int max(int a,int b){return a>b?a:b;}\r\nconst int maxn = 1e5+5;\r\nint K,n,m,Ty[maxn];\r\nlong long a[maxn];\r\nstruct Op{\r\n\tint pos,ty,id;double coe;//0:plus 1:mult\r\n\tOp(int P=0,int T=0,int I=0,double C=0):pos(P),ty(T),id(I),coe(C){};\r\n\tbool operator <(Op b)const{return coe==b.coe?id<b.id:coe>b.coe;}\r\n};\r\nint mxas[maxn],mxid[maxn];\r\nstruct Plus{\r\n\tint id,pos,val;\r\n\tdouble coe(){return 1.*val/a[pos]+1;}\r\n\tPlus(int I=0,int P=0,int V=0):id(I),pos(P),val(V){};\r\n\tbool operator <(Plus b)const{\r\n\t\tdouble coet = 1.*val/a[pos]+1,coeb = 1.*b.val/a[b.pos]+1;\r\n\t\tif(coet == coeb)return id<b.id;\r\n\t\telse return coet>coeb;\r\n\t} \r\n}tmpP;\r\nstruct Mult{\r\n\tint id,val;\r\n\tMult(int I=0,int V=0):id(I),val(V){};\r\n\tbool operator <(Mult b)const{return val==b.val?id<b.id:val>b.val;}\r\n}tmpM;\r\nstd :: multiset <Op> darkvan;\r\nstd :: multiset <Plus> vark[maxn];\r\nstd :: multiset <Mult> dan;\r\nstd :: vector <int> ans;\r\nint main(){\r\n\tscanf(\"%d %d %d\",&K,&n,&m);\r\n\tfor(int i=1;i<=K;++i)scanf(\"%d\",&a[i]);\r\n\tfor(int i=1,ty,x,y;i<=n;++i){\r\n\t\tscanf(\"%d %d %d\",&ty,&x,&y),Ty[i] = ty;\r\n\t\tif(ty == 1){\r\n\t\t\tif(y-a[x]>mxas[x])mxas[x] = y-a[x],mxid[x] = i;\r\n\t\t}if(ty == 2)vark[x].insert(Plus(i,x,y));\r\n\t\tif(ty == 3)dan.insert(Mult(i,y));\r\n\t}\r\n\tfor(int i=1;i<=K;++i)\r\n\t\tif(mxas[i])vark[i].insert(Plus(mxid[i],i,mxas[i]));\r\n\ttmpM = *dan.begin();\r\n\tdarkvan.insert(Op(0,1,tmpM.id,tmpM.val));\r\n\tfor(int i=1;i<=K;++i)\r\n\t\tif(vark[i].size()){\r\n\t\t\ttmpP = *vark[i].begin();\r\n\t\t\tdarkvan.insert(Op(tmpP.pos,0,tmpP.id,tmpP.coe()));\r\n\t\t}\r\n\twhile(m-- && darkvan.size()){\r\n\t\tOp u = *darkvan.begin();\r\n\t\tdarkvan.erase(darkvan.find(u));\r\n\t\tif(u.coe < 1)break;\r\n\t\tans.push_back(u.id);\r\n\t\tif(u.ty == 1){\r\n\t\t\tdan.erase(dan.begin());\r\n\t\t\tif(dan.size()){\r\n\t\t\t\ttmpM = *dan.begin();\r\n\t\t\t\tdarkvan.insert(Op(0,1,tmpM.id,tmpM.val));\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\ttmpP = *vark[u.pos].begin();\r\n\t\t\tvark[u.pos].erase(vark[u.pos].begin());\r\n\t\t\ta[u.pos] += tmpP.val;\r\n\t\t\tif(vark[u.pos].size()){\r\n\t\t\t\ttmpP = *vark[u.pos].begin();\r\n\t\t\t\tdarkvan.insert(Op(tmpP.pos,0,tmpP.id,tmpP.coe()));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tauto Compare = [](int x,int y){return Ty[x]<Ty[y];};\r\n\tstd :: sort(ans.begin(),ans.end(),Compare);\r\n\tprintf(\"%d\\n\",ans.size());\r\n\tfor(int v:ans)printf(\"%d \",v);\r\n\treturn 0;\r\n}"
}