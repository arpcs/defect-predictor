{
    "id": 26670346,
    "contestId": 521,
    "creationTimeSeconds": 1493150958,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "LiChenKoh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n#include <assert.h>\nusing namespace std;\ntypedef long long ll;\ntypedef __float256 ld;\n#define PB push_back\n#define MP make_pair\n#define MOD 1000000007LL\n#define endl \"\\n\"\n#define fst first\n#define snd second\nconst ll UNDEF = -1;\nconst ll INF=1e18;\ntemplate<typename T> inline bool chkmax(T &aa, T bb) { return aa < bb ? aa = bb, true : false; }\ntemplate<typename T> inline bool chkmin(T &aa, T bb) { return aa > bb ? aa = bb, true : false; }\ntypedef pair<ll,ll> pll;\n\n\nstatic char stdinBuffer[1024];\nstatic char* stdinDataEnd = stdinBuffer + sizeof (stdinBuffer);\nstatic const char* stdinPos = stdinDataEnd;\n\nvoid readAhead(size_t amount)\n{\n    size_t remaining = stdinDataEnd - stdinPos;\n    if (remaining < amount) {\n       memmove(stdinBuffer, stdinPos, remaining);\n       size_t sz = fread(stdinBuffer + remaining, 1, sizeof (stdinBuffer) - remaining, stdin);\n       stdinPos = stdinBuffer;\n       stdinDataEnd = stdinBuffer + remaining + sz;\n       if (stdinDataEnd != stdinBuffer + sizeof (stdinBuffer))\n         *stdinDataEnd = 0;\n    }\n}\n\nint readInt()\n{\n    readAhead(16);\n\n    int x = 0;\n    bool neg = false;\n    while(*stdinPos==' '||*stdinPos=='\\n') ++stdinPos;\n    if (*stdinPos == '-') {\n       ++stdinPos;\n       neg = true;\n    }\n\n    while (*stdinPos >= '0' && *stdinPos <= '9') {\n       x *= 10;\n       x += *stdinPos - '0';\n       ++stdinPos;\n    }\n\n    return neg ? -x : x;\n}\n\n\nconst int maxn=1e5+2;\ntypedef pair<int,int> pii;\npii bestassign[maxn];\nvector<pii> vadd[maxn];\nvector<pii> vmul;\nll a[maxn];\nint main()\n{\n  ios_base::sync_with_stdio(false); cin.tie(0);\n  int k=readInt(),n=readInt(),m=readInt();\n  for (int i=0;i<k;i++) {\n    a[i]=readInt();\n  }\n  for (int i=1;i<=n;i++) {\n    int t=readInt();\n    int skill=readInt()-1;\n    int b=readInt();\n    if (t==1) {\n      chkmax(bestassign[skill], MP(b,-i));\n    }\n    else if (t==2) vadd[skill].PB(MP(b,i));\n    else {\n      if (b>1) vmul.PB(MP(b,i));\n    }\n  }\n  for (int skill=0;skill<k;skill++) {\n    int gain=bestassign[skill].fst - a[skill];\n    if (gain>0) {\n      vadd[skill].PB(MP(gain, bestassign[skill].snd));\n    }\n  }\n  sort(vmul.begin(),vmul.end(),greater<pii>());\n  vector<pair<ld, int> > valladd;\n  for (int skill=0;skill<k;skill++) {\n    sort(vadd[skill].begin(),vadd[skill].end(),greater<pii>());\n    int sz=vadd[skill].size();\n    for (auto &w: vadd[skill]) {\n      int add=w.fst,id=w.snd;\n      ll numer=a[skill]+add;\n      ll denom=a[skill];\n      ld frac=((ld)denom)/((ld)numer);\n      valladd.PB(MP(frac,id));\n      a[skill]+=add;\n    }\n  }\n  sort(valladd.begin(),valladd.end());\n  int finaladdsteps=min(m,(int)(valladd.size()));\n  {\n    int addsteps=finaladdsteps;\n    int prevmulsteps=min((int)(vmul.size()), m-addsteps);\n    --addsteps;\n    for (;addsteps>=0;addsteps--) {\n      int mulsteps=min((int)(vmul.size()), m-addsteps);\n      ld frac=valladd[addsteps].fst;\n      //printf(\"va:%f\\n\",(double)valladd[addsteps].fst);\n      if (mulsteps!=prevmulsteps) {\n        frac=frac*vmul[mulsteps-1].fst;\n        //printf(\"vm:%d\\n\",vmul[mulsteps-1].fst);\n      }\n      //printf(\"addsteps:%d mulsteps:%d frac:%f\\n\",addsteps,mulsteps,(double)frac);\n      if (frac>=1) {\n        finaladdsteps=addsteps;\n      }\n      prevmulsteps=mulsteps;\n    }\n  }\n  {\n    int addsteps=finaladdsteps;\n    int mulsteps=min((int)(vmul.size()), m-addsteps);\n    //printf(\"%d %d\\n\",addsteps,mulsteps);\n    printf(\"%d\\n\",addsteps+mulsteps);\n    vector<int> finalorder;\n    for (int i=0;i<addsteps;i++) {\n      finalorder.PB(valladd[i].snd);\n    }\n    sort(finalorder.begin(),finalorder.end());\n    for (auto &w:finalorder) {\n      printf(\"%d \",abs(w));\n    }\n    for (int i=0;i<mulsteps;i++) {\n      printf(\"%d \",vmul[i].snd);\n    }\n    printf(\"\\n\");\n  }\n}"
}