{
    "id": 192655356,
    "contestId": 1706,
    "creationTimeSeconds": 1675797204,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "B",
        "name": "Making Towers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1100,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "eivanov.nn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 819200,
    "source": "// https://codeforces.com/problemset/problem/1706/B\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define N 100000\r\n\r\nint last_index_for_color[N]; /* idx + 1 */\r\nint answers[N];\r\n\r\n/* O(n) soulution, for all collors it gives O(n^2) and for all tests: O(n^2 * t) */\r\n// int solve_for_color(const vector<int>& colors, int color)\r\n// {\r\n//     int answer = 0;\r\n//     size_t i = 0;\r\n//     int num_other_colors = 0;\r\n\r\n//     /* Find first with the color to start calculation */\r\n//     for (; i < colors.size(); ++i) {\r\n//         if (colors[i] == color)\r\n//                break;\r\n//     }\r\n\r\n//     for (; i < colors.size(); ++i) {\r\n//         if (colors[i] == color) {\r\n//             if (num_other_colors %2 == 0)\r\n//                 ++answer;\r\n//             num_other_colors = 0;\r\n//         } else {\r\n//             ++num_other_colors;\r\n//         }\r\n//     }\r\n\r\n//     return answer;\r\n// }\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n\r\n    int t;\r\n\r\n    cin >> t;\r\n    while (t--) {\r\n        int n;\r\n\r\n        memset(last_index_for_color, 0, sizeof(last_index_for_color));\r\n        memset(answers, 0, sizeof(answers));\r\n\r\n        cin >> n;\r\n        for (size_t i = 0; i < n; ++i) {\r\n            int c;\r\n\r\n            cin >> c;\r\n            /* Color is 1-base, convert */\r\n            c -= 1;\r\n            if (!last_index_for_color[c]) {\r\n                answers[c] = 1;\r\n            } else {\r\n                if ((i - last_index_for_color[c]) % 2 == 0)\r\n                    ++answers[c];\r\n            }\r\n            last_index_for_color[c] = i + 1;\r\n        }\r\n\r\n        for (size_t i = 0; i < n; ++i) {\r\n            if (i == 0)\r\n                cout << answers[i];\r\n            else\r\n                cout << \" \" << answers[i];\r\n        }\r\n        cout << endl;\r\n    }\r\n}\r\n"
}