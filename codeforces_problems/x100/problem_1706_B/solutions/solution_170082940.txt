{
    "id": 170082940,
    "contestId": 1706,
    "creationTimeSeconds": 1661789737,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "B",
        "name": "Making Towers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1100,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "Akarsh2810"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\nimport java.io.*;\r\npublic class B {\r\n    public static void main(String[] args) throws IOException {\r\n        Reader sc = new Reader();\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        int t = sc.nextInt();\r\n        while(t-- > 0) {\r\n            int n = sc.nextInt();\r\n            int[] arr = new int[n];\r\n            for(int i = 0;i < n;i++)\r\n                arr[i] = sc.nextInt();\r\n            boolean found = true;\r\n            for(int i = 0;i < n / 2;i++) {\r\n                if(arr[i] != arr[n - i - 1]) {\r\n                    found = false;\r\n                    break;\r\n                }\r\n            }\r\n            int[] ans = new int[n];\r\n            if(n == 1)\r\n                out.println(\"1\");\r\n            else if(n == 2) {\r\n                if(arr[0] == arr[1]) {\r\n                    if(arr[0] == 2)\r\n                        out.println(\"0\" + \" \" + \"2\");\r\n                    else\r\n                        out.println(\"2\" + \" \" + \"0\");\r\n                }\r\n                else\r\n                    out.println(\"1\" + \" \" + \"1\");\r\n            }\r\n            else if(n == 3) {\r\n                if(arr[0] == arr[1] && arr[1] == arr[2])\r\n                    ans[arr[0] - 1] = 3;\r\n                else if(arr[0] == arr[1] && arr[1] != arr[2]) {\r\n                    ans[arr[0] - 1] = 2;\r\n                    ans[arr[2] - 1] = 1;\r\n                }\r\n                else if(arr[0] != arr[1] && arr[1] == arr[2]) {\r\n                    ans[arr[0] - 1] = 1;\r\n                    ans[arr[2] - 1] = 2;\r\n                }\r\n                else\r\n                    ans[arr[0] - 1] = ans[arr[1] - 1] = ans[arr[2] - 1] = 1;\r\n                for(int i : ans)\r\n                    out.print(i + \" \");\r\n                out.println();\r\n            }\r\n            else if(found) {\r\n                for(int i = 0;i < n / 2;i++)\r\n                    ans[arr[i] - 1] = 2;\r\n                if(n % 2 == 1)\r\n                    ans[arr[n / 2] - 1] = 1;\r\n                for(int num : ans)\r\n                    out.print(num + \" \");\r\n                out.println();\r\n            }\r\n            else {\r\n                ans[arr[0] - 1] = 1;\r\n                int[] temp = new int[n];\r\n                for(int i = 0;i < n - 1;i++) {\r\n                    if(arr[i] == arr[i + 1])\r\n                        ans[arr[i] - 1] = Math.max(temp[arr[i] - 1], ++ans[arr[i] - 1]);\r\n                    else {\r\n                        if(ans[arr[i + 1] - 1] == 0)\r\n                            ans[arr[i + 1] - 1]++;\r\n                        if((i + 3) < n && arr[i] == arr[i + 3])\r\n                            ans[arr[i] - 1]++;\r\n                        else if((i + 3) < n && arr[i] != arr[i + 3]) {\r\n                            temp[arr[i] - 1] = ans[arr[i] - 1];\r\n                            ans[arr[i] - 1] = 1;\r\n                        }\r\n                        if(i == n - 4 && arr[i] == arr[i + 3]) {\r\n                            temp[arr[i] - 1] = ans[arr[i] - 1];\r\n                            ans[arr[i] - 1] = 1;\r\n                        }\r\n                    }\r\n                }\r\n                if(arr[n - 4] == arr[n - 1])\r\n                     ans[arr[n - 4] - 1] = temp[arr[n - 4] - 1];\r\n                for(int num : ans)\r\n                    out.print(num + \" \");\r\n                out.println();\r\n            }\r\n        }\r\n        out.flush();\r\n    }\r\n    static int[] bin(long n) {\r\n        long i;\r\n        List<Integer> list = new ArrayList<>();\r\n        list.add(0);\r\n        for(i = 1 << 30;i > 0;i /= 2) {\r\n            if((n & i) != 0)\r\n                list.add(1);\r\n            else\r\n                list.add(0);\r\n        }\r\n        int[] arr = new int[32];\r\n        for(i = 0;i < list.size();i++)\r\n            arr[(int)i] = list.get((int)i);\r\n        return arr;\r\n    }\r\n    static int[] sort(int[] arr,int n) {\r\n        List<Integer> list = new ArrayList<>();\r\n        for(int i = 0;i < n;i++)\r\n            list.add(arr[i]);\r\n        Collections.sort(list);\r\n        for(int i = 0;i < n;i++)\r\n            arr[i] = list.get(i);\r\n        return arr;\r\n    }\r\n    static int gcd(int a, int b) {\r\n    if (b == 0)\r\n        return a;\r\n    return gcd(b, a % b);\r\n    }\r\n    static int isPrime(int n) {\r\n    if(n < 2)\r\n        return 0;\r\n    if(n < 4)\r\n        return 1;\r\n    if((n % 2) == 0 || (n % 3) == 0)\r\n        return 0;\r\n    for(int i = 5; (i * i) <= n; i += 6)\r\n        if((n % i) == 0 || (n % (i + 2)) == 0)\r\n            return 0;\r\n    return 1;\r\n}\r\n    static class Reader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n        public Reader() {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                if(st.hasMoreTokens())\r\n                    str = st.nextToken(\"\\n\");\r\n                else\r\n                    str = br.readLine();\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n}\r\n// ********************* Custom Pair Class *********************\r\n//class Pair implements Comparable<Pair> {\r\n//    int a,b;\r\n//    public Pair(int a,int b) {\r\n//        this.a = a;\r\n//        this.b = b;\r\n//    }\r\n//    @Override\r\n//    public int compareTo(Pair other) {\r\n////        if(this.b == other.b)\r\n////            return Integer.compare(this.a,other.a);\r\n//        return Integer.compare(other.b,this.b);\r\n//    }\r\n//}\r\n//          ****************** Segment Tree ******************\r\n//public class SegmentTreeNode {\r\n//    public SegmentTreeNode left;\r\n//    public SegmentTreeNode right;\r\n//    public int Start;\r\n//    public int End;\r\n//    public int Sum;\r\n//    public SegmentTreeNode(int start, int end) {\r\n//        Start = start;\r\n//        End = end;\r\n//        Sum = 0;\r\n//    }\r\n//}\r\n//public SegmentTreeNode buildTree(int start, int end) {\r\n//    if(start > end)\r\n//        return null;\r\n//    SegmentTreeNode node = new SegmentTreeNode(start, end);\r\n//    if(start == end)\r\n//        return node;\r\n//    int mid = start + (end - start) / 2;\r\n//    node.left = buildTree(start, mid);\r\n//    node.right = buildTree(mid + 1, end);\r\n//    return node;\r\n//}\r\n//public void update(SegmentTreeNode node, int index) {\r\n//    if(node == null)\r\n//        return;\r\n//    if(node.Start == index && node.End == index) {\r\n//        node.Sum += 1;\r\n//        return;\r\n//    }\r\n//    int mid = node.Start + (node.End - node.Start) / 2;\r\n//    if(index <= mid)\r\n//        update(node.left, index);\r\n//    else\r\n//        update(node.right, index);\r\n//    node.Sum = node.left.Sum + node.right.Sum;\r\n//}\r\n//public int SumRange(SegmentTreeNode root, int start, int end) {\r\n//    if(root == null || start > end)\r\n//        return 0;\r\n//    if(root.Start == start && root.End == end)\r\n//        return root.Sum;\r\n//    int mid = root.Start + (root.End - root.Start) / 2;\r\n//    if(end <= mid)\r\n//        return SumRange(root.left, start, end);\r\n//    else if(start > mid)\r\n//        return SumRange(root.right, start, end);\r\n//    return SumRange(root.left, start, mid) + SumRange(root.right, mid + 1, end);\r\n//}"
}