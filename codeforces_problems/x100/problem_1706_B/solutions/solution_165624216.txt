{
    "id": 165624216,
    "contestId": 1706,
    "creationTimeSeconds": 1658719509,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "B",
        "name": "Making Towers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1100,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "macosta"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "Rust 2021",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 9625600,
    "source": "use std::{io, str::FromStr};\r\n\r\npub struct Input<B> {\r\n    reader: B,\r\n    buf: Vec<String>,\r\n}\r\nimpl<B: io::BufRead> Input<B> {\r\n    pub fn new(reader: B) -> Self {\r\n        Self {\r\n            reader,\r\n            buf: Vec::new(),\r\n        }\r\n    }\r\n\r\n    pub fn read<T: FromStr>(&mut self) -> T {\r\n        // Skip empty lines.\r\n        loop {\r\n            let buf_empty = if self.buf.is_empty() {\r\n                let mut input = String::new();\r\n                self.reader\r\n                    .read_line(&mut input)\r\n                    .expect(\"No more lines to read.\");\r\n                let mut added_something = false;\r\n                for word in input.split_whitespace().rev() {\r\n                    self.buf.push(word.to_string());\r\n                    added_something = true\r\n                }\r\n                !added_something\r\n            } else {\r\n                false\r\n            };\r\n            if !buf_empty {\r\n                break;\r\n            }\r\n        }\r\n        match self.buf.pop().unwrap().parse() {\r\n            Ok(x) => x,\r\n            Err(_) => panic!(\"unable to parse\"),\r\n        }\r\n    }\r\n}\r\n\r\nfn case<B: io::BufRead>(input: &mut Input<B>) {\r\n    let n = input.read::<usize>();\r\n    let mut last = vec![0; n];\r\n    let mut result = vec![0; n];\r\n    let mut colors = Vec::with_capacity(n);\r\n    for _ in 0..n {\r\n        let color = input.read::<usize>() - 1;\r\n        // any[color] = true;\r\n        colors.push(color);\r\n    }\r\n\r\n    for (zero_idx, &color) in colors.iter().enumerate() {\r\n        let idx = zero_idx + 1;\r\n        if last[color] == 0 || (idx - last[color] - 1) %2 == 0 {\r\n            last[color] = idx;\r\n            result[color] +=1;            \r\n        }\r\n        \r\n    }\r\n\r\n    for c in 0..n {\r\n        print!(\"{} \", result[c]);\r\n    } \r\n    println!();\r\n\r\n\r\n\r\n   \r\n}\r\n\r\n\r\npub fn run<B: io::BufRead>(reader: B) {\r\n    let mut input = Input::new(reader);\r\n    let cases = input.read::<i32>();\r\n\r\n    for _ in 0..cases {\r\n        case(&mut input);\r\n    }\r\n }\r\n \r\n fn main() {\r\n     run(io::BufReader::new(io::stdin()))\r\n }"
}