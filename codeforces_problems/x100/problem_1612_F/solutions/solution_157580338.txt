{
    "id": 157580338,
    "contestId": 1612,
    "creationTimeSeconds": 1652883256,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1612,
        "index": "F",
        "name": "Armor and Weapons",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1612,
        "members": [
            {
                "handle": "Hermes_the_Motorbike"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1637573700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 13004800,
    "source": "#define FASTIO\n#include <bits/stdc++.h>\n#define fi first\n#define se second\n#define mp make_pair\n#define eb emplace_back\n#define pb push_back\n#define BE(x) (x).begin(), (x).end()\n#define y1 ___y1\n#define max mymax\n#define min mymin\n#define pq priority_queue\n#define FOR(i, l, r) for (int i = (l), i##end = (r); i <= i##end; i++)\n#define ROF(i, r, l) for (int i = (r), i##end = (l); i >= i##end; i--)\nusing namespace std;\nusing uint = unsigned;\nusing ll = long long; using ull = unsigned ll;\nusing lll = __int128; using ulll = unsigned lll;\nusing pii = pair<int, int>;\nmt19937 rng(chrono::system_clock::now().time_since_epoch().count());\ninline ll rand(ll l, ll r) { return uniform_int_distribution<>(l, r)(rng); }\ntemplate <typename A, typename B>\nauto mymax(const A &x, const B &y) -> decltype(x>y?x:y) { return x > y ? x : y; }\ntemplate <typename A, typename B>\nauto mymin(const A &x, const B &y) -> decltype(x<y?x:y) { return x < y ? x : y; }\ntemplate <typename A, typename B>\ninline int chkmn(A &x, const B &y) { return x > y ? (x = y, 1) : 0; }\ntemplate <typename A, typename B>\ninline int chkmx(A &x, const B &y) { return x < y ? (x = y, 1) : 0; }\nconst int SZ = 1 << 20;\nchar ibuf[SZ], *li, *ri, obuf[SZ], *lo = obuf, *ro = obuf + SZ, sto[100], *orz = sto;\nstringstream ss;\ntemplate<typename A,typename B>void convert(A&a,const B&b){ss.clear(),ss << b,ss >> a;}\nstruct fastio {\n#ifdef FASTIO\n  void flush(){fwrite(obuf,1,lo-obuf,stdout),lo=obuf,fflush(stdout);}\n  void put(int c){if(lo==ro)flush();*lo++=c;}\n  int get(){if(li==ri)li=ibuf,ri=li+fread(ibuf,1,SZ,stdin);return*li++;}\n#else\n  void flush(){fflush(stdout);}\n  void put(int c){putchar(c);}\n  int get(){return getchar();}\n#endif\n  template<class T>typename enable_if<!is_integral<T>::value,void>::type\n  read(T &x) { string s; read(s); convert(x, s); }\n  template<class T>typename enable_if<!is_integral<T>::value,void>::type\n  write(const T &x) { string s; convert(s, x); write(s); }\n  template<class T>typename enable_if<is_integral<T>::value,void>::type\n  write(T x) {\n  \tif (x<0)put('-'),x=-x;\n  \twhile(x>=10)*orz++=x%10,x/=10;*orz++=x;\n  \twhile(orz!=sto)put((*--orz)^48);\n  }\n  template<class T>typename enable_if<is_integral<T>::value,void>::type\n  read(T &x) {\n  \tint ch=get(),tag=0;x=0;\n  \tfor(;ch<'0'||ch>'9';ch=get())tag|=(ch=='-');\n  \tfor(;ch>='0'&&ch<='9';ch=get())x=x*10+(ch^48);\n  \tif(tag)x=-x;\n  }\n  void write(char ch){put(ch);}\n  void read(char &ch){ch=get();}\n  template<typename Iter,typename=typename enable_if<is_base_of<input_iterator_tag,\n  \t\t typename iterator_traits<Iter>::iterator_category>::value>::type>\n  void read(Iter s, Iter t) { for (; s != t; ++s) read(*s); }\n  template <typename Iter, typename = typename enable_if<is_base_of<output_iterator_tag,\n  \t\t typename iterator_traits<Iter>::iterator_category>::value>::type>\n  void write(Iter s, Iter t) {\n  \tput('{');\n  \tif (s!=t)for(write(*s),++s;s!=t;++s)put(','),put(' '),write(*s);\n  \tput('}');\n  }\n  void write(const string &s) { for (char c: s) put(c); }\n  void write(const char *s) { for (; *s; s++) put(*s); }\n  void read(char *s) { for (int ch; !isspace(ch = get()); s++) *s = ch; *s = '\\0'; }\n  void read(string &s) { s = \"\"; for (int ch; !isspace(ch = get()); s += ch); }\n  template<typename...param>void read(vector<param...>&v){read(BE(v));}\n  template<typename...param>void write(const vector<param...>&v){write(BE(v));}\n  template<typename...param>void write(const set<param...>&v){write(BE(v));}\n  template<typename...param>void write(const multiset<param...>&v){write(BE(v));}\n  template<typename...param>void write(const map<param...>&v){write(BE(v));}\n  template<typename...param>void write(const multimap<param...>&v){write(BE(v));}\n  template<typename...param>void write(const unordered_set<param...>&v){write(BE(v));}\n  template<typename...param>void write(const unordered_multiset<param...>&v){write(BE(v));}\n  template<typename...param>void write(const unordered_map<param...>&v){write(BE(v));}\n  template<typename...param>void write(const unordered_multimap<param...>&v){write(BE(v));}\n  template <class A, class B> void write(const pair<A, B> &pr) {\n  \tput('('), write(pr.fi), put(','), put(' '), write(pr.se), put(')');\n  }\n  template<typename T>fastio&operator<<(const T&x){return write(x),*this;}\n  template<typename T>fastio&operator>>(T&x){return read(x),*this;}\n  fastio&operator>>(char *x){return read(x),*this;}\n} io;\nint __init__ = [](){\n\tatexit([](){ io.flush(); });\n#ifdef LOCAL\n\tfreopen(\"test.in\", \"r\", stdin), freopen(\"test.out\", \"w\", stdout);\n\tatexit([](){ system(\"grep VmPeak /proc/$PPID/status > /dev/tty\"); });\n#endif\n\treturn 0;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////////\n\nconst int N = 200100;\nint n, m, q;\n\nint main() {\n\tio >> n >> m >> q;\n\tset<pii> s1, s2, s, *cur = &s1, *pre = &s2;\n\tfor (int x, y; q; q--) io >> x >> y, s.insert(mp(x, y));\n\tint dis = 0;\n\tcur->insert(mp(1, 1));\n\twhile (cur->find(mp(n, m)) == cur->end()) {\n\t\tpre->clear(), swap(cur, pre), dis++;\n\t\tfor (auto pr: *pre) {\n\t\t\tint wow = pr.fi + pr.se + (s.find(pr) != s.end());\n\t\t\tcur->insert(mp(pr.fi, min(wow, m)));\n\t\t\tcur->insert(mp(min(n, wow), pr.se));\n\t\t}\n\t\tpre->clear(), swap(cur, pre);\n\t\tfor (auto pr: *pre) {\n\t\t\twhile (!cur->empty()) {\n\t\t\t\tauto it = cur->end(); --it;\n\t\t\t\tif (it->se > pr.se) break;\n\t\t\t\tcur->erase(it);\n\t\t\t}\n\t\t\tcur->insert(pr);\n\t\t}\n\t}\n\tio << dis;\n}\n"
}