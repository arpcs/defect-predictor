{
    "id": 149912001,
    "contestId": 1612,
    "creationTimeSeconds": 1647518486,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1612,
        "index": "F",
        "name": "Armor and Weapons",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1612,
        "members": [
            {
                "handle": "LinRui"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1637573700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 9318400,
    "source": "#include <cstdio>\n#include <algorithm>\n#include <string>\n#include <cassert>\n\nusing namespace std;\nnamespace Solution\n{\n#ifdef LOCAL\n#define DEBUG(x) x\n#else\n#define DEBUG(x)\n#endif\n\ttypedef long long LL;\n\tconst int N = 2e5 + 5, INF = 1e9;\n\tinline void ckmx(int &x, int y) { x = max(x, y); }\n\tint n, m;\n\tbool sw;\n\tbasic_string<int> s[N];\n\tinline int w(int x, int y) { return x + y + (*lower_bound(s[x].begin(), s[x].end(), y) == y); }\n\tint f[2][N];\n\tint main()\n\t{\n\t\tint q;\n\t\tscanf(\"%d %d\\n%d\", &n, &m, &q), n > m ? (swap(n, m), sw = true) : 0;\n\t\twhile (q--)\n\t\t{\n\t\t\tint x, y;\n\t\t\tscanf(\"%d %d\", &x, &y), sw ? swap(x, y) : void();\n\t\t\ts[x] += y;\n\t\t}\n\t\tfor (int j = 1; j <= n; ++j)\n\t\t\tf[0][j] = -INF, sort(s[j].begin(), s[j].end());\n\t\tf[0][1] = 1;\n\t\tfor (int i = 0;; ++i)\n\t\t{\n\t\t\tfor (int j = 1; j <= n; ++j)\n\t\t\t{\n\t\t\t\tif (f[0][j] <= 0)\n\t\t\t\t\tcontinue;\n\t\t\t\tif (j == n && f[0][j] == m)\n\t\t\t\t\tprintf(\"%d\\n\", i), exit(0);\n\t\t\t\tint res = w(j, f[0][j]);\n\t\t\t\tckmx(f[1][min(res, n)], f[0][j]);\n\t\t\t\tckmx(f[1][j], min(res, m));\n\t\t\t}\n\t\t\tfor (int j = 1; j <= n; ++j)\n\t\t\t\tf[0][j] = f[1][j], f[1][j] = -INF;\n\t\t}\n\t\treturn 0;\n\t}\n}\nint main()\n{\n#ifdef LOCAL\n\tassert(freopen(\"data.in\", \"r\", stdin));\n\tassert(freopen(\"data.out\", \"w\", stdout));\n#endif\n\tSolution::main();\n\treturn 0;\n}"
}