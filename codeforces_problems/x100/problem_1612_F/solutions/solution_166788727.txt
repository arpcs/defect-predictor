{
    "id": 166788727,
    "contestId": 1612,
    "creationTimeSeconds": 1659519281,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1612,
        "index": "F",
        "name": "Armor and Weapons",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1612,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1637573700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 73113600,
    "source": "#include <bits/stdc++.h>\n#define fi first\n#define se second\n#define mp make_pair\n#define TASK \"\"\n#define bit(x) (1LL << (x))\n#define getbit(x, i) (((x) >> (i)) & 1)\n#define ALL(x) (x).begin(), (x).end() \nusing namespace std;\ntemplate <typename T1, typename T2> bool mini(T1 &a, T2 b) {\n    if (a > b) {a = b; return true;} return false;\n}\ntemplate <typename T1, typename T2> bool maxi(T1 &a, T2 b) {\n    if (a < b) {a = b; return true;} return false;\n}\nmt19937_64 rd(chrono::steady_clock::now().time_since_epoch().count());\n\nint rand(int l, int r) {\n    return l + rd() % (r - l + 1);\n}\nconst int N = 2e5 + 5; \nconst int oo = 1e9;\nconst long long ooo = 1e18;\nconst int mod = 1e9 + 7; // 998244353;\nconst long double pi = acos(-1);\n\nint n, m, q;\nint d[N][33];\nmap<int, bool> appear[N];\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    #ifdef ONLINE_JUDGE\n    // freopen(TASK\".inp\",\"r\",stdin);\n    // freopen(TASK\".out\",\"w\",stdout);\n    #endif\n    cin >> n >> m >> q;\n    while(q--)\n    {\n        int x, y;\n        cin >> x >> y;\n        if(n > m) swap(x, y);\n        appear[x][y] = true;\n    }\n    if(n > m) swap(n, m); \n    memset(d, -0x3f, sizeof d);\n    d[1][0] = 1;\n    for(int k = 0; k < 30; k++)\n    for(int i = 1; i <= n; i++)\n        {\n            if(d[i][k] == d[0][0]) continue;\n            int j = d[i][k];\n            maxi(d[min(i + j + appear[i][j], n)][k + 1], j);\n            maxi(d[i][k + 1], min(m, i + j + appear[i][j]));\n        }\n\n    int ans = oo;\n    for(int k = 0; k < 30; k++) {\n        int j = d[n][k];\n        int cnt = k;\n        if(j == d[0][0]) continue;\n        while(j < m) {\n            j = j + n + appear[n][j];\n            ++cnt;\n        }\n        mini(ans, cnt);\n    }\n    cout << ans;\n    return 0;\n}\n\t \t\t\t\t   \t\t    \t \t   \t \t\t   \t"
}