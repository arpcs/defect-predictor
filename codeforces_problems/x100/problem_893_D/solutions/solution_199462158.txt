{
    "id": 199462158,
    "contestId": 893,
    "creationTimeSeconds": 1679949510,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 893,
        "index": "D",
        "name": "Credit Card",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 893,
        "members": [
            {
                "handle": "cyberlord"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1511449500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4300800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define FOR(I,A,B) for(long long i=I;i<A;i+=B)\r\n#define rep(I,A,B) for(long long j=I;j<=A;j+=B)\r\n#define repp(I,A,B) for(long long j=I;j>=A;j-=B)\r\n#define str(A) for(long long k=0;A[k]!='\\0';k++)\r\n#define pb push_back\r\n#define mp make_pair\r\n#define pii pair<long long,long long>\r\n#define all(v) v.begin(),v.end()\r\nvector < int >adj[100001];\r\nbool visit[100001];\r\nconst int mod = 1000000007;\r\nll\r\nmod_mult (ll a, ll b)\r\n{\r\n  return ((a % mod) * (b % mod)) % mod;\r\n}\r\n\r\nll\r\nmult (ll x, ll y)\r\n{\r\n  ll prod = 1;\r\n  while (y > 0)\r\n    {\r\n      if (y & 1)\r\n\tprod = mod_mult (prod, x);\r\n      x = mod_mult (x, x);\r\n      y /= 2;\r\n    }\r\n  return prod;\r\n}\r\n\r\nint\r\nmain ()\r\n{\r\n  ios_base::sync_with_stdio (false);\r\n  cin.tie (NULL);\r\n  cout.tie (NULL);\r\n  ll n, i, d, x, ans = 0;\r\n  vector < ll > v, zeros, carr;\r\n  cin >> n >> d;\r\n  for (int i = 0; i < n; i++)\r\n    {\r\n      cin >> x;\r\n      v.pb (x);\r\n      if (!i)\r\n\tcarr.pb (x);\r\n      else\r\n\tcarr.pb (x + carr[i - 1]);\r\n      if (!x)\r\n\tzeros.pb (i);\r\n    }\r\n    \r\n    if(zeros.size() == 0){\r\n        for(int i =0; i<n; i++){\r\n            if(carr[i]>d){\r\n                cout<<-1;\r\n                return 0;\r\n            }\r\n        }\r\n        cout<<0;\r\n        return  0;\r\n    }\r\n    \r\n    int p = zeros.size();\r\n    for(int i = 0; i<p-1; i++){\r\n        ll sum = 0;\r\n        for(int j = zeros[i]; j<zeros[i+1]; j++){\r\n            sum += v[j];\r\n        }\r\n        if(sum>d)\r\n        {\r\n            cout<<-1;\r\n            return 0;\r\n        }\r\n    }\r\n    \r\n    ll s = 0;\r\n    for(int  i = zeros[p-1]; i<n; i++){\r\n        s += v[i];\r\n        if(s>d)\r\n        {\r\n            cout<<-1; return 0;\r\n        }\r\n    }\r\n    \r\n    int start;\r\n    for(int i =0 ; i<zeros.size(); i++)\r\n    {\r\n        if(carr[zeros[i]]<0)\r\n        {\r\n            start=i;\r\n            break;\r\n        }\r\n    }\r\n        \r\n\r\n  ll amount_deposited = 0, last_index_deposited = -1;\r\n  for (int i = start; i < zeros.size (); i++)\r\n  {\r\n      \r\n                // cout<<i<<\" \"<<amount_deposited<<\" \"<<last_index_deposited<<\"\\n\";\r\n\r\n    if(last_index_deposited >=0 && zeros[i] != last_index_deposited){\r\n        if(carr[zeros[i]]-carr[last_index_deposited]<0){\r\n            ans++;\r\n            amount_deposited += abs(carr[zeros[i]]-carr[last_index_deposited]);\r\n            last_index_deposited = zeros[i];\r\n        }\r\n    }\r\n    else if(last_index_deposited < 0){\r\n        if(carr[zeros[i]]<0){\r\n            ans++;\r\n            amount_deposited = abs(carr[zeros[i]]);\r\n            last_index_deposited=zeros[i];\r\n        }   \r\n    }\r\n\r\n    for (int j = i; j < (int)zeros.size ()-1; j++)\r\n    {\r\n      ll segment_diff = carr[zeros[j + 1]] - carr[zeros[j]];\r\n      ll max_val = INT_MIN;\r\n      if(j < (int)zeros.size()-1)\r\n        for (int k = zeros[j]; k < zeros[j+1]; k++)\r\n          max_val = max (max_val, carr[k]);\r\n        \r\n    //   cout<<segment_diff<<\" \"<<max_val<<endl;\r\n      if (segment_diff < 0)\r\n       {\r\n          if (max_val + amount_deposited + abs(segment_diff) <= d)\r\n    \t  {\r\n    \t\tamount_deposited += abs(segment_diff);\r\n    \t\tlast_index_deposited = zeros[j+1];\r\n    \t  }\r\n          else\r\n    \t  {\r\n    \t    i = j;\r\n    \t    break;\r\n    \t  }\r\n      }\r\n    }\r\n }\r\n\r\n\r\n  cout << ans;\r\n\r\n  return 0;\r\n}\r\n"
}