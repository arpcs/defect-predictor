{
    "id": 126181192,
    "contestId": 893,
    "creationTimeSeconds": 1629206151,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 893,
        "index": "D",
        "name": "Credit Card",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 893,
        "members": [
            {
                "handle": "fvogel"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1511449500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4300800,
    "source": "/*\r\nFile created on 08/17/2021 at 13:31:24.\r\nLink to problem: \r\nDescription: \r\nTime complexity: O()\r\nSpace complexity: O()\r\nStatus: DEV (most of the time I don't update status, so it stays DEV which is the default value)\r\nCopyright: \u24b8 2021 Francois Vogel\r\n*/\r\n\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <functional>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define pii pair<int, int>\r\n#define f first\r\n#define s second\r\n\r\n#define vi vector<int>\r\n#define all(x) x.begin(), x.end()\r\n#define size(x) (int)(x.size())\r\n#define pb push_back\r\n#define ins insert\r\n#define cls clear\r\n\r\n#define int ll\r\n#define ll long long\r\n#define ld long double\r\n\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\n\r\nsigned main() {\r\n    cin.tie(0);\r\n    ios_base::sync_with_stdio(0);\r\n\r\n    int n, moneyLimitation;\r\n    cin >> n >> moneyLimitation;\r\n    int b [n];\r\n    for (int i = 0; i < n; i++) cin >> b[i];\r\n    int ps [n];\r\n    ps[0] = b[0];\r\n    for (int i = 1; i < n; i++) ps[i] = b[i]+ps[i-1];\r\n    int mx [n];\r\n    mx[n-1] = ps[n-1];\r\n    for (int i = n-2; i >= 0; i--) mx[i] = max(mx[i+1], ps[i]);\r\n    for (int i = 0; i < n; i++) mx[i] -= ps[i];\r\n    int money = 0;\r\n    int steps = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        if (b[i] == 0) {\r\n            if (money < 0) {\r\n                int add = 0;\r\n                for (int j = (1LL<<50); j; j /= 2) {\r\n                    int prop = add+j;\r\n                    if (money+prop <= moneyLimitation and money+prop+mx[i] <= moneyLimitation) add = prop;\r\n                }\r\n                money += add;\r\n                if (money < 0) {\r\n                    steps = -1;\r\n                    break;\r\n                }\r\n                steps++;\r\n            }\r\n        }\r\n        else money += b[i];\r\n        if (b[i] > moneyLimitation) {\r\n            steps = -1;\r\n            break;\r\n        }\r\n    }\r\n    cout << steps;\r\n\r\n    cout.flush();\r\n    int d = 0;\r\n    d++;\r\n}"
}