{
    "id": 173049827,
    "contestId": 893,
    "creationTimeSeconds": 1663844999,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 893,
        "index": "D",
        "name": "Credit Card",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 893,
        "members": [
            {
                "handle": "CoDeveRse_07"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1511449500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2150400,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp> // Common file\r\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key\r\n\r\n// find_by_order-> int ele=*find_by_order(idx);->gives idx th pos ele in ordered set and 0 based indexing is used;\r\n// order_of_key->  int n=order_of_key(x);-> gives the no of element strictly smaller than x;\r\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#define endl \"\\n\"\r\n#define ll long long\r\n#define pii pair<int,int>\r\n#define lui long unsigned int\r\n\r\n\r\nconst int N = 500005;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll MOD1 = 998244353;\r\nconst ll INF = 4e18;\r\nconst int BLK_SZ=555;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlong long binpow(long long a, long long b, long long m) {\r\n    a %= m;\r\n\r\n    long long res = 1;\r\n\r\n    while (b > 0) {\r\n\r\n        if (b & 1)\r\n\r\n            res = res * a % m;\r\n\r\n        a = a * a % m;\r\n\r\n        b >>= 1;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n\r\n\r\nint gcd_equation(int a, int b, int& x, int& y) {\r\n\r\n    x = 1, y = 0;\r\n\r\n    int x1 = 0, y1 = 1, a1 = a, b1 = b;\r\n\r\n    while (b1) {\r\n\r\n        int q = a1 / b1;\r\n\r\n        tie(x, x1) = make_tuple(x1, x - q * x1);\r\n\r\n        tie(y, y1) = make_tuple(y1, y - q * y1);\r\n\r\n        tie(a1, b1) = make_tuple(b1, a1 - q * b1);\r\n\r\n    }\r\n\r\n    return a1;\r\n}\r\n\r\nvoid prime_generator(vector<bool> &is_prime)\r\n{\r\n\r\n\r\n int n=N;\r\n\r\n is_prime.resize(n);\r\n\r\n fill(is_prime.begin(),is_prime.end(),true);\r\n\r\n\r\n\r\n\r\nis_prime[0] = is_prime[1] = false;\r\n\r\nfor (int i = 2; i * i <= n; i++) {\r\n\r\n    if (is_prime[i]) {\r\n\r\n        for (int j = i * i; j <= n; j += i)\r\n            is_prime[j] = false;\r\n\r\n    }\r\n}\r\n\r\n}\r\n\r\nvoid lowest_prime_factor(vector<int> &lp)\r\n{\r\n\r\n\r\n int n = 1000000;\r\n\r\n lp.resize(n+1);\r\n\r\n fill(lp.begin(),lp.end(),0);\r\n\r\n\r\nvector<int> pr;\r\n\r\nfor (int i=2; i <= n; ++i) {\r\n\r\n    if (lp[i] == 0) {\r\n\r\n        lp[i] = i;\r\n        pr.push_back(i);\r\n    }\r\n\r\n\r\n    for (int j=0; j < (int)pr.size() && pr[j] <= lp[i] && i*pr[j] <= n; ++j) {\r\n\r\n\r\n        lp[i * pr[j]] = pr[j];\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n}\r\n\r\nvoid ncr(int n,vector<ll> &factorial,vector<ll> &facinv,ll MOD)\r\n{\r\n\r\n\r\n\r\n         factorial[0]=1;\r\n\r\n         for(ll i=1;i<=n;i++)\r\n         {\r\n\r\n              factorial[i]=factorial[i-1]*i;\r\n\r\n              factorial[i]%=MOD;\r\n         }\r\n\r\n         ll modinv=binpow(factorial[n],MOD-2,MOD);\r\n\r\n         facinv[n]=modinv;\r\n\r\n         for(ll i=n-1;i>=0;i--)\r\n         {\r\n\r\n              facinv[i]=facinv[i+1]*(i+1);\r\n\r\n              facinv[i]%=MOD;\r\n\r\n         }\r\n\r\n\r\n}\r\n\r\n\r\nbool cycle_dectector_dg(int s,vector<int> adj[],vector<int> &vis)\r\n{\r\n       vis[s]=1;\r\n       for(auto child:adj[s])\r\n       {\r\n              if(vis[child]==0)\r\n              {\r\n               if(cycle_dectector_dg(child,adj,vis))return true;\r\n              }\r\n              else if(vis[child]==1)return true;\r\n       }\r\n      vis[s]=2;\r\n      return false;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nvoid solve(int test_no)\r\n{\r\n     \r\n\r\n  \r\n\r\n\r\n\r\n\r\n     int n,d;\r\n     cin>>n>>d;\r\n\r\n     vector<int> arr(n);\r\n\r\n     for(int i=0;i<n;i++)\r\n     {\r\n         cin>>arr[i];\r\n     }\r\n\r\n     vector<ll> req(n);\r\n\r\n     vector<ll> curr(n);\r\n\r\n\r\n    ll res=0;\r\n\r\n    bool ok=true;\r\n\r\n\r\n     for(int i=0;i<n;i++)\r\n     {\r\n         res+=arr[i];\r\n\r\n         if(res>d)\r\n         {\r\n            ok=false;\r\n            break;\r\n         }\r\n         else if(arr[i]==0)\r\n         {\r\n             if(res<0)\r\n             {\r\n                  req[i]=abs(res);\r\n\r\n                  res=0;\r\n\r\n             }\r\n         }\r\n\r\n\r\n         curr[i]=res;\r\n\r\n\r\n     }\r\n\r\n\r\n     if(!ok)\r\n     {\r\n           cout<<-1<<endl;\r\n\r\n     }\r\n     else\r\n     {\r\n          int idx=-1;\r\n\r\n          for(int i=0;i<n;i++)\r\n          {\r\n             if(req[i])\r\n             {\r\n                 idx=i;\r\n                 break;\r\n             }\r\n          }\r\n\r\n          if(idx==-1)\r\n          {\r\n            cout<<0<<endl;\r\n          }\r\n          else\r\n          {\r\n              int ans=1;\r\n\r\n              map<ll,int> mp;\r\n\r\n              ll val=req[idx];\r\n\r\n              mp[val]+=1;\r\n\r\n\r\n\r\n              for(int i=idx+1;i<n;i++)\r\n              {\r\n                  if(req[i])\r\n                  {\r\n                      \r\n                       if(val+req[i]<=d)\r\n                       {\r\n                          ll prev=-1;\r\n\r\n                \r\n                              auto it=mp.end();\r\n                              it--;\r\n\r\n                              prev=max(prev,it->first);\r\n\r\n                          \r\n\r\n                          ll have=d-prev;\r\n\r\n                          if(have>=req[i])\r\n                          {\r\n                              mp[val]-=1;\r\n                              if(mp[val]==0)\r\n                                  mp.erase(val);\r\n\r\n                              val+=req[i];\r\n                              mp[val]+=1;\r\n\r\n\r\n\r\n\r\n                          }\r\n                          else\r\n                          {\r\n\r\n                              ans+=1;\r\n\r\n                              req[i]-=have;\r\n\r\n                              val=req[i];\r\n                              \r\n\r\n                              mp.clear();\r\n\r\n                              mp[val]+=1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n                          }\r\n                       }\r\n                       else\r\n                       {\r\n                           ans+=1;\r\n\r\n                          \r\n                           auto it=mp.end();\r\n\r\n                           it--;\r\n\r\n                           ll prev=it->first;\r\n\r\n                           ll have=d-prev;\r\n\r\n                           req[i]-=have;\r\n\r\n                           mp.clear();\r\n\r\n                           mp[req[i]]+=1;\r\n\r\n                           val=req[i];\r\n\r\n\r\n\r\n\r\n                       }\r\n\r\n                  }\r\n                  else\r\n                  {\r\n                       mp[curr[i]]+=1;\r\n\r\n                  }\r\n              }\r\n\r\n\r\n              cout<<ans<<endl;\r\n          }\r\n     }\r\n\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nint main()\r\n{\r\n \r\n\r\n  // freopen(\"input.txt\", \"r\", stdin);\r\n  // freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n\r\nint test;test=1;\r\n// cin>>test; \r\n\r\nint test_no=1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfor(;test_no<=test;test_no++)\r\n{\r\n\r\n      solve(test_no);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n   // clock_t time_req = clock();\r\n\r\n   // cout<<(float)time_req/CLOCKS_PER_SEC << \" seconds\" << endl;\r\n\r\nreturn 0;\r\n      \r\n         \r\n     \r\n}"
}