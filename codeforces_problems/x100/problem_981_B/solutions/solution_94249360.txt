{
    "id": 94249360,
    "contestId": 981,
    "creationTimeSeconds": 1601417351,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 981,
        "index": "B",
        "name": "Businessmen Problems",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1000,
        "tags": [
            "sortings"
        ]
    },
    "author": {
        "contestId": 981,
        "members": [
            {
                "handle": "raynor30"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1527432600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 13004800,
    "source": "#include <bits/stdc++.h>\r\n#include <unistd.h>\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nconstexpr ll mod = 1e9 + 7;\r\n#define endl '\\n'\r\n\r\ntemplate <class T> using V = vector<T>;\r\ntemplate <class T> using VV = V<V<T>>;\r\n\r\nstruct Scanner {\r\n  int fd = -1;\r\n  char line[(1 << 15) + 1];\r\n  size_t st = 0, ed = 0;\r\n  void reread() {\r\n    memmove(line, line + st, ed - st);\r\n    ed -= st;\r\n    st = 0;\r\n    ed += ::read(fd, line + ed, (1 << 15) - ed);\r\n    line[ed] = '\\0';\r\n  }\r\n  bool succ() {\r\n    while (true) {\r\n      if (st == ed) {\r\n        reread();\r\n        if (st == ed) return false;\r\n      }\r\n      while (st != ed && isspace(line[st])) st++;\r\n      if (st != ed) break;\r\n    }\r\n    if (ed - st <= 50) {\r\n      bool sep = false;\r\n      for (size_t i = st; i < ed; i++) {\r\n        if (isspace(line[i])) {\r\n          sep = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!sep) reread();\r\n    }\r\n    return true;\r\n  }\r\n  template <class T, enable_if_t<is_same<T, string>::value, int> = 0>\r\n  bool read_single(T& ref) {\r\n    if (!succ()) return false;\r\n    while (true) {\r\n      size_t sz = 0;\r\n      while (st + sz < ed && !isspace(line[st + sz])) sz++;\r\n      ref.append(line + st, sz);\r\n      st += sz;\r\n      if (!sz || st != ed) break;\r\n      reread();\r\n    }\r\n    return true;\r\n  }\r\n  template <class T, enable_if_t<is_integral<T>::value, int> = 0>\r\n  bool read_single(T& ref) {\r\n    if (!succ()) return false;\r\n    bool neg = false;\r\n    if (line[st] == '-') {\r\n      neg = true;\r\n      st++;\r\n    }\r\n    ref = T(0);\r\n    while (isdigit(line[st])) {\r\n      ref = 10 * ref + (line[st++] & 0xf);\r\n    }\r\n    if (neg) ref = -ref;\r\n    return true;\r\n  }\r\n  template <class T> bool read_single(V<T>& ref) {\r\n    for (auto& d : ref) {\r\n      if (!read_single(d)) return false;\r\n    }\r\n    return true;\r\n  }\r\n  void read() {}\r\n  template <class H, class... T> void read(H& h, T&... t) {\r\n    bool f = read_single(h);\r\n    assert(f);\r\n    read(t...);\r\n  }\r\n  Scanner(FILE* fp) : fd(fileno(fp)) {}\r\n};\r\n \r\nstruct Printer {\r\npublic:\r\n  template <bool F = false> void write() {}\r\n  template <bool F = false, class H, class... T>\r\n  void write(const H& h, const T&... t) {\r\n    if (F) write_single(' ');\r\n    write_single(h);\r\n    write<true>(t...);\r\n  }\r\n  template <class... T> void writeln(const T&... t) {\r\n    write(t...);\r\n    write_single('\\n');\r\n  }\r\n\r\n  Printer(FILE* _fp) : fp(_fp) {}\r\n  ~Printer() { flush(); }\r\n\r\nprivate:\r\n  static constexpr size_t SIZE = 1 << 15;\r\n  FILE* fp;\r\n  char line[SIZE], small[50];\r\n  size_t pos = 0;\r\n  void flush() {\r\n    fwrite(line, 1, pos, fp);\r\n    pos = 0;\r\n  }\r\n  void write_single(const char& val) {\r\n    if (pos == SIZE) flush();\r\n    line[pos++] = val;\r\n  }\r\n  template <class T, enable_if_t<is_integral<T>::value, int> = 0>\r\n  void write_single(T val) {\r\n    if (pos > (1 << 15) - 50) flush();\r\n    if (val == 0) {\r\n      write_single('0');\r\n      return;\r\n    }\r\n    if (val < 0) {\r\n      write_single('-');\r\n      val = -val; // todo min\r\n    }\r\n    size_t len = 0;\r\n    while (val) {\r\n      small[len++] = char(0x30 | (val % 10));\r\n      val /= 10;\r\n    }\r\n    for (size_t i = 0; i < len; i++) {\r\n      line[pos + i] = small[len - 1 - i];\r\n    }\r\n    pos += len;\r\n  }\r\n  void write_single(const string& s) {\r\n    for (char c : s) write_single(c);\r\n  }\r\n  void write_single(const char* s) {\r\n    size_t len = strlen(s);\r\n    for (size_t i = 0; i < len; i++) write_single(s[i]);\r\n  }\r\n  template <class T> void write_single(const V<T>& val) {\r\n    auto n = val.size();\r\n    for (size_t i = 0; i < n; i++) {\r\n      if (i) write_single(' ');\r\n      write_single(val[i]);\r\n    }\r\n  }\r\n};\r\n\r\nScanner sc = Scanner(stdin);\r\nPrinter pr = Printer(stdout);\r\n#define int ll\r\n\r\nint32_t main() {\r\n  ios::sync_with_stdio(0); cin.tie(0);\r\n \r\n  ll n;\r\n  sc.read(n);\r\n  map<ll,ll> A,B;\r\n  for (int i = 0; i < n; ++i) {\r\n    ll a,x;\r\n    sc.read(a,x);\r\n    A[a] = x;\r\n  }\r\n  ll m;\r\n  sc.read(m);\r\n  for (int i = 0; i < m; ++i) {\r\n    ll a,x;\r\n    sc.read(a,x);\r\n    B[a] = x;\r\n  }\r\n  ll sum = 0;\r\n  for (auto& [k,c] : A) {\r\n    if (B.count(k)) {\r\n      sum += max(c,B[k]);\r\n      B.erase(k);\r\n    } else {\r\n      sum += c;\r\n    }\r\n  }\r\n\r\n  for (auto& [k,c] : B) sum += c;\r\n  pr.writeln(sum);\r\n\r\n  \r\n\r\n}\r\n"
}