{
    "id": 97151662,
    "contestId": 981,
    "creationTimeSeconds": 1604047083,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 981,
        "index": "B",
        "name": "Businessmen Problems",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1000,
        "tags": [
            "sortings"
        ]
    },
    "author": {
        "contestId": 981,
        "members": [
            {
                "handle": "akonic"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1527432600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 763,
    "memoryConsumedBytes": 8294400,
    "source": "#include<bits/stdc++.h>\r\n#include <algorithm>\r\n#define mod 1000000007\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define f(i,a,n) for(ll i=a;i<n;i++)\r\n#define vec vector<ll>\r\n#define mxh priority_queue<pair<int,int>>\r\n#define mh priority_queue<int,vector<int>,greater<int>>\r\n#define omap map<ll,ll>\r\n#define umap unordered_map<ll,ll>\r\n#define vpair vector<pair<ll,ll> >\r\n#define pb push_back\r\n//#include <boost/math/common_factor.hpp>\r\n\r\nusing namespace std;\r\nll ipow(ll base, ll exp)\r\n{\r\n    ll result = 1;\r\n    for (;;)\r\n    {\r\n        if (exp & 1)\r\n            result= (result*base)%mod;\r\n        exp >>= 1;\r\n        if (!exp)\r\n            break;\r\n        base= (base*base)%mod;\r\n    }\r\n\r\n    return result;\r\n}\r\nbool sortinrev(const pair<int,int> &a,\r\n               const pair<int,int> &b)\r\n{\r\n       return (a.first > b.first);\r\n}\r\nll fact(ll n)\r\n{\r\n    if (n >= mod)\r\n        return 0;\r\n\r\n    ll result = 1;\r\n    for (int i = 1; i <= n; i++)\r\n        result = (result * i) % mod;\r\n\r\n    return result;\r\n}\r\nbool is_prime(ll n) {\r\n    if (n == 1) {\r\n        return false;\r\n    }\r\n    ll i = 2;\r\n    while (i*i <= n) {\r\n        if (n % i == 0) {\r\n            return false;\r\n        }\r\n        i += 1;\r\n    }\r\n    return true;\r\n}\r\nbool areRotations(string str1, string str2)\r\n{\r\n   /* Check if sizes of two strings are same */\r\n   if (str1.length() != str2.length())\r\n        return false;\r\n\r\n   string temp = str1 + str1;\r\n  return (temp.find(str2) != string::npos);\r\n}\r\nbool pow2 (ll x)\r\n{\r\n    return x && (!(x&(x-1)));\r\n}\r\nll maxXorSum(ll n, ll k)\r\n{\r\n    if (k == 1)\r\n        return n;\r\n    ll res = 1;\r\n    while (res <= n)\r\n        res <<= 1;\r\n\r\n    // Return res - 1 which denotes\r\n    // a number with all bits set to 1\r\n    return res - 1;\r\n}\r\nll mcost(ll a[], ll n)\r\n{\r\n\r\n    ll y;\r\n    if (n % 2 == 1)\r\n        y = a[n / 2];\r\n    else\r\n        y = (a[n / 2] + a[(n - 2) / 2]) / 2;\r\n\r\n    ll s = 0;\r\n    for(ll i = 0; i < n; i++)\r\n        s += abs(a[i] - y);\r\n\r\n    return s;\r\n}\r\nll largest_subarray(ll a[], ll n)\r\n{\r\n    unordered_map<ll, ll> index;\r\n    ll ans = 0;\r\n    for (ll i = 0, j = 0; i < n; i++) {\r\n\r\n        j = max(index[a[i]], j);\r\n        ans = max(ans, i - j + 1);\r\n        index[a[i]] = i + 1;\r\n    }\r\n    return ans;\r\n}\r\nll b[101],sz;\r\npair<ll,ll> adj[101];\r\n\r\nvoid dfs(int s)\r\n{\r\n    b[s]=1;\r\n    for(int i=1;i<=sz;i++)\r\n    {    if(!b[i] && (adj[s].first==adj[i].first || adj[s].second==adj[i].second))\r\n            dfs(i);\r\n    }\r\n}\r\nvoid display(int a[], int n)\r\n{\r\n    for (int i = 0; i < n; i++) {\r\n        cout << a[i] << \"  \";\r\n    }\r\n    cout << endl;\r\n}\r\nvoid per(int a[], int n)\r\n{  ll d=0;\r\n    sort(a, a + n);\r\n  //  cout << \"Possible permutations are:\\n\";\r\n    do { ll s=0,x=1;\r\n        f(i,0,n)\r\n        {\r\n            s+=a[i];\r\n            if(s==0)\r\n            {\r\n                x=-1;\r\n            }\r\n        }\r\n        if(x==1)\r\n        {    cout<<\"YES\"<<endl;\r\n        d=1;\r\n            f(i,0,n)\r\n           {\r\n             cout<<a[i]<<\" \";\r\n           }cout<<endl;\r\n          break;\r\n        }\r\n    } while (next_permutation(a, a + n));\r\n    if(d==0)\r\n    {\r\n        cout<<\"NO\"<<endl;\r\n    }\r\n}\r\nint gcd(int a, int b)\r\n{\r\n    if (b == 0)\r\n        return a;\r\n\r\n    else\r\n        return gcd(b, a % b);\r\n}\r\n\r\nbool leftRotate(int a[], int d, int n)\r\n{\r\n\r\n    d = d % n;\r\n    int g_c_d = gcd(d, n);\r\n    for (int i = 0; i < g_c_d; i++) {\r\n        int temp = a[i];\r\n        int j = i;\r\n\r\n        while (1) {\r\n            int k = j + d;\r\n            if (k >= n)\r\n                k = k - n;\r\n\r\n            if (k == i)\r\n                break;\r\n\r\n            a[j] = a[k];\r\n            j = k;\r\n        }\r\n        a[j] = temp;\r\n    }\r\n    ll s=0,x=1;\r\n    f(i,0,n)\r\n    {\r\n        s+=a[i];\r\n        if(s==0)\r\n        {\r\n            x=0;\r\n        }\r\n    }\r\n    if(x==1)\r\n    {   cout<<\"YES\"<<endl;\r\n        f(i,0,n)\r\n        {\r\n            cout<<a[i]<<\" \";\r\n        }\r\n        cout<<endl;\r\n      return true;\r\n    }\r\n    return false;\r\n\r\n}\r\nll rec(ll n,ll k)\r\n{\r\n    if(n==1)\r\n    {\r\n        return 1;\r\n    }\r\n    if (k==1)\r\n    {\r\n        return n;\r\n    }\r\n    return ((n+rec(n-1,k-1))%mod);\r\n}\r\n\r\nbool isPerfectSquare(ll x)\r\n{\r\n  if(sqrt(x)*sqrt(x)==x)\r\n  {\r\n      return true;\r\n  }\r\n  return false;\r\n}\r\nbool isSubSequence(string str1,string str2, int m, int n)\r\n{\r\n   int j = 0,x=0,d=0;\r\n    if(str1[0]==str2[0])\r\n    {\r\n        for (int i=0; i<n&&j<m; i++)\r\n       {\r\n           if (str1[j] == str2[i])\r\n            {\r\n              j++;\r\n\r\n            }\r\n           else\r\n            {   d=i;\r\n                break;\r\n            }\r\n       }\r\n       if(j==m)\r\n       {\r\n           return true;\r\n       }\r\n       ll p=9,v=0;\r\n       for(int i=n-1;i>=d;i--)\r\n        {  //  cout<<\"l\";\r\n            if(v==10-j)\r\n            {\r\n                break;\r\n            }\r\n            if(str1[p]==str2[i])\r\n            {\r\n                p--;\r\n                v++;\r\n            }\r\n\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n       //cout<<j<<\" \"<<v<<\" \"<<d<<endl;\r\n        if(v+j==10)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n\r\n\r\n    }\r\n    else{\r\n         size_t found = str2.find(str1);\r\n        if (found != string::npos && str1[9]==str2[n-1])\r\n         {\r\n             return true;\r\n         }\r\n         else\r\n         {\r\n             return false;\r\n         }\r\n    }\r\n\r\n}\r\nll countDivisors(ll n)\r\n{\r\n    ll cnt = 0;\r\n    for (ll i = 1; i <= sqrt(n); i++) {\r\n        if (n % i == 0) {\r\n            // If divisors are equal,\r\n            // count only one\r\n            if (n / i == i)\r\n                cnt++;\r\n\r\n            else // Otherwise count both\r\n                cnt = cnt + 2;\r\n        }\r\n    }\r\n    return cnt;\r\n}\r\nint main()\r\n{\r\nint t;\r\n//cin>>t;\r\nt=1;\r\n\r\nwhile(t--)\r\n    {\r\n       ll n;\r\n       cin>>n;\r\n       omap m;\r\n       ll x,y;\r\n       f(i,0,n)\r\n       {\r\n           cin>>x>>y;\r\n           m[x]=y;\r\n       }\r\n       cin>>n;\r\n       f(i,0,n)\r\n       {\r\n           cin>>x>>y;\r\n           if(m[x]!=0)\r\n           {\r\n               m[x]=max(m[x],y);\r\n           }\r\n           else\r\n           {\r\n               m[x]=y;\r\n           }\r\n       }\r\n       ll s=0;\r\n       for(auto i=m.begin();i!=m.end();i++)\r\n       {\r\n           s+=i->second;\r\n       }\r\n       cout<<s<<endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}