{
    "id": 189871223,
    "contestId": 295,
    "creationTimeSeconds": 1674236582,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "helcsnewsxd"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 29696000,
    "source": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n\r\n#define fore(i, s, e) for(int i = s, thxdem=e; i < thxdem; i++)\r\n#define pb push_back\r\n#define fst first\r\n#define snd second\r\n#define SZ(a) ((int)a.size())\r\n#define ALL(a) a.begin(),a.end()\r\n#define FIN ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)\r\n#define mset(a, b) memset(a, b, sizeof(a))\r\n\r\ntypedef long long ll;\r\ntypedef pair<ll, ll> ii;\r\ntypedef vector<int> vi;\r\n\r\nconst ll MOD = 1e9+7;\r\nconst int MAXN = 57;\r\nll fact[MAXN], invFact[MAXN];\r\n\r\nint k, cnt[2];\r\nint minCam[MAXN][MAXN];\r\nll dp[MAXN][MAXN][10*MAXN][2];\r\n\r\nll comb(ll total, ll part){\r\n  ll ret = (invFact[part]*invFact[total-part])%MOD;\r\n  ret = (ret*fact[total])%MOD;\r\n  return ret;\r\n}\r\n\r\nll binPow(ll base, ll exp){\r\n  ll ret = 1;\r\n  while(exp){\r\n    if(exp&1) ret = (ret*base)%MOD;\r\n    base = (base*base)%MOD;\r\n    exp>>=1;\r\n  }\r\n  return ret;\r\n}\r\n\r\nvoid preload(){\r\n  mset(minCam, -1);\r\n  mset(dp, -1);\r\n\r\n  fact[0] = invFact[0] = 1;\r\n  fore(i, 1, MAXN){\r\n    fact[i] = (fact[i-1]*i)%MOD;\r\n    invFact[i] = (invFact[i-1]*binPow(i, MOD-2))%MOD;\r\n  }\r\n}\r\n\r\nint minRides(int cnt1, int cnt2){\r\n  if(!cnt1 && !cnt2) return 0;\r\n\r\n  int &res = minCam[cnt1][cnt2];\r\n  if(res != -1) return res;\r\n\r\n  res = 1e9;\r\n  fore(i, 0, cnt1+1)fore(j, 0, cnt2+1){\r\n    if(k < i+2*j || (!i && !j)) continue;\r\n\r\n    if(i == cnt1 && j == cnt2) res = min(res, 1);\r\n    else{\r\n      if(cnt[0]-(cnt1-i)) res = min(res, 2+minRides(cnt1-i+1, cnt2-j));\r\n      if(cnt[1]-(cnt2-j)) res = min(res, 2+minRides(cnt1-i, cnt2-j+1));\r\n    }\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nll doDP(int cnt1, int cnt2, int cam, bool izq){\r\n  if(cam < 0) return 0;\r\n  if(!cam) return (izq && cnt1 == cnt[0] && cnt2 == cnt[1]);\r\n  \r\n  ll &res = dp[cnt1][cnt2][cam][izq];\r\n  if(res != -1) return res;\r\n  \r\n  res = 0;\r\n  \r\n  fore(i, 0, cnt1+1) fore(j, 0, cnt2+1){\r\n    if(k < i+2*j || (!i && !j)) continue;\r\n    ll add = (comb(cnt1, i) * comb(cnt2, j))%MOD;\r\n    add = (add * doDP(cnt[0]-cnt1+i, cnt[1]-cnt2+j, cam-1, !izq))%MOD;\r\n    res = (res + add)%MOD;\r\n  }\r\n\r\n  return res;\r\n}\r\n\r\nint main() {\r\n  FIN;\r\n  preload();\r\n\r\n  int n; cin >> n >> k;\r\n  k /= 50;\r\n  fore(i, 0, n){\r\n    int x; cin >> x;\r\n    cnt[x/50-1]++;\r\n  }\r\n  \r\n  // IMPOSSIBLE Cases\r\n  if(k == 1){\r\n    if(cnt[0] > 1 || cnt[1]){\r\n      cout << \"-1\\n0\\n\";\r\n      return 0;\r\n    }\r\n  }else if(k == 2){\r\n    if(cnt[0] <= 1 && cnt[1]){\r\n      cout << \"-1\\n0\\n\";\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // OTHER Cases\r\n  pair<int, ll> ans;\r\n  ans.fst = minRides(cnt[0], cnt[1]);\r\n  ans.snd = doDP(cnt[0], cnt[1], ans.fst, 0);\r\n\r\n  cout << ans.fst << '\\n' << ans.snd << '\\n';\r\n\r\n  return 0;\r\n}"
}