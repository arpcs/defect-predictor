{
    "id": 100142210,
    "contestId": 295,
    "creationTimeSeconds": 1606850401,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "Setztezkin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 307200,
    "source": "#include<bits/stdc++.h>\r\n#define Fast ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef vector<int> vi;\r\nconst int mod = 1e9 + 7, maxn = 55;\r\nll ans[maxn][maxn][3], ncr[maxn][maxn];\r\nint lev[maxn][maxn][3], cnt1, cnt2, w;\r\nvoid bfs(int n1, int n2, int f1) {\r\n    memset(lev, -1, sizeof lev);\r\n    lev[n1][n2][f1] = 0;\r\n    queue<vi> q;\r\n    q.push({n1, n2, f1});\r\n    ans[n1][n2][f1] = 1;\r\n    //BFS\r\n    while(!q.empty()) {\r\n        vi u = q.front();\r\n        q.pop();\r\n        n1 = u[0];\r\n        n2 = u[1];\r\n        f1 = u[2];\r\n        if(!f1) {\r\n            for(int i = 0; i <= cnt1; i++) {\r\n                for(int j = 0; j <= cnt2; j++) {\r\n                    if(n1 + i <= cnt1 && n2 + j <= cnt2 && ( ( i * 50 ) + ( j * 100 ) ) <= w) {\r\n                        if(i + j == 0) continue;\r\n                        if(lev[n1+i][n2+j][!f1] == -1) {\r\n                            lev[n1+i][n2+j][!f1] = lev[n1][n2][f1] + 1;\r\n                            ans[n1+i][n2+j][!f1] += ( ( ( ncr[cnt1-n1][i] * ncr[cnt2-n2][j] ) % mod ) * ans[n1][n2][f1] ) % mod;\r\n                            ans[n1+i][n2+j][!f1] %= mod;\r\n                            q.push({n1 + i,n2 + j,!f1});\r\n                        }\r\n                        else if(lev[n1+i][n2+j][!f1] == lev[n1][n2][f1] + 1) {\r\n                            ans[n1+i][n2+j][!f1] += ( ( ( ncr[cnt1-n1][i] * ncr[cnt2-n2][j] ) % mod ) * ans[n1][n2][f1] ) % mod;\r\n                            ans[n1+i][n2+j][!f1] %= mod;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for(int i = 0; i <= cnt1; i++) {\r\n                for(int j = 0; j <= cnt2; j++) {\r\n                    if(n1 - i >= 0 && n2 - j >= 0 && ( ( i * 50 ) + ( j * 100 ) ) <= w) {\r\n                        if(i + j == 0 ) continue;\r\n                        if(lev[n1-i][n2-j][!f1] == -1) {\r\n                            lev[n1-i][n2-j][!f1] = lev[n1][n2][f1] + 1;\r\n                            ans[n1-i][n2-j][!f1] += ( ( ( ncr[n1][i] * ncr[n2][j] ) % mod ) * ans[n1][n2][f1] ) % mod;\r\n                            ans[n1-i][n2-j][!f1] %= mod;\r\n                            q.push({n1 - i, n2 - j, !f1});\r\n                        }\r\n                        else if(lev[n1-i][n2-j][!f1] == lev[n1][n2][f1] + 1) {\r\n                            ans[n1-i][n2-j][!f1] += ( ( ( ncr[n1][i] * ncr[n2][j] ) % mod ) * ans[n1][n2][f1] ) % mod;\r\n                            ans[n1-i][n2-j][!f1] %= mod;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return;\r\n}\r\nint main() {\r\n    Fast\r\n    for(int i = 0; i < 55; i++) for(int j = 0; j <= i; j++) {\r\n            if(j < 1 || i == j ) ncr[i][j] = 1;\r\n            else ncr[i][j] = (ncr[i - 1][j - 1] + ncr[i - 1][j]) % mod;\r\n    }\r\n    int n;\r\n    cin >> n >> w;\r\n    while(n--) {\r\n    \tint a;\r\n    \tcin >> a;\r\n    \tif(a == 50) cnt1++;\r\n    \telse cnt2++;\r\n\t}\r\n    bfs(0, 0, 0);\r\n    cout << lev[cnt1][cnt2][1] << '\\n' << ans[cnt1][cnt2][1] << '\\n';\r\n    return 0;\r\n}\r\n"
}