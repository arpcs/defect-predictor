{
    "id": 130934855,
    "contestId": 295,
    "creationTimeSeconds": 1633485566,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "boredApe"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/**********Copyright statement: This article is an original article by V5ZSQ, and follows the CC 4.0 BY-SA copyright agreement. \r\nPlease attach the link to the original source and this statement for reprinting.\r\nLink to this article: https://blog.csdn.net/V5ZSQ/article/details/78971540\r\n*******************/\r\n// https://www-codeleading-com.translate.goog/article/91513633887/?_x_tr_sl=zh-CN&_x_tr_tl=en&_x_tr_hl=en&_x_tr_pto=nui,sc\r\n\r\nby dp [i] [j] [k] Means on the river side (k = 0) Or across the river (k = 1), \r\nThe weight is 50 Kilogram people have i With a weight of 100 Kilogram people have j Number of plans, \r\ndis[i][j][k] is the minimum number of steps to reach this state, \r\nlet n0, n1 be the number of people with a weight of 50 and 100, the initial dis[n0][n1][0]=0,dp [n0][n1][0]=1,\r\nuse the queue to save the current state BFS transfer, each time x will be selected from i people with a weight of 50, and \r\ny from j people with a weight of 100 will be selected to let these If people go to the other side, as long as x+y>0,50x+100y\u2264k is satisfied, \r\nlet ii=n0\u2212i+x,jj=n1\u2212j+y, then take the boat this time, and state (i,j, k) becomes (ii,jj,1\u2212k). \r\nIf this state has not appeared before, then dis[i][j][k]+1 is the minimum number of steps to reach this state,\r\nand the state is enqueued and transferred. If this state has appeared before, and dis[ii][jj][1\u2212k]=dis[i][j][k]+1,\r\nit means that the current transition is also the optimal solution, and the number of solutions dp[ i][j][k]\u22c5Cxi\u22c5Cyj add to dp [ii] [jj] [1 \u2212 k]\r\nMiddle and last di s [n0] [n1] [1]. \r\nThat is the minimum number of steps to transfer everyone to the other side of the river, dp [n0] [n1] [1] Is the number of plans\r\n\r\n#include<cstdio>\r\n#include<iostream>\r\n#include<cstring>\r\n#include<algorithm>\r\n#include<cmath>\r\n#include<vector>\r\n#include<queue>\r\n#include<map>\r\n#include<set>\r\n#include<ctime>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef pair<int,int>P;\r\nconst int INF=0x3f3f3f3f,maxn=55;\r\n#define mod 1000000007\r\nint n,k,C[maxn][maxn],dis[maxn][maxn][2],dp[maxn][maxn][2];\r\nstruct node\r\n{\r\n    int x,y,z;\r\n};\r\nvoid add(int &x,int y)\r\n{\r\n    x=x+y>=mod?x+y-mod:x+y;\r\n}\r\nint main()\r\n{\r\n    C[0][0]=1;\r\n    for(int i=1;i<=50;i++)\r\n    {\r\n        C[i][0]=C[i][i]=1;\r\n        for(int j=1;j<i;j++)add(C[i][j],C[i-1][j-1]+C[i-1][j]);\r\n    }\r\n    scanf(\"%d%d\",&n,&k);\r\n    int n0=0,n1=0;\r\n    while(n--)\r\n    {\r\n        int temp;\r\n        scanf(\"%d\",&temp);\r\n        if(temp==50)n0++;\r\n        else n1++;\r\n    }\r\n    memset(dis,-1,sizeof(dis));\r\n    dis[n0][n1][0]=0,dp[n0][n1][0]=1;\r\n    queue<node>que;\r\n    que.push((node){n0,n1,0});\r\n    while(!que.empty())\r\n    {\r\n        node now=que.front();\r\n        que.pop();\r\n        int x=now.x,y=now.y,z=now.z;\r\n        for(int i=0;i<=x;i++)\r\n        {\r\n            if(i*50>k)break;\r\n            for(int j=0;j<=y;j++)\r\n            {\r\n                if(i+j==0)continue;\r\n                if(i*50+j*100>k)break;\r\n                int xx=n0-x+i,yy=n1-y+j,zz=1-z;\r\n                if(dis[xx][yy][zz]==-1)\r\n                {\r\n                    dis[xx][yy][zz]=dis[x][y][z]+1;\r\n                    dp[xx][yy][zz]=(ll)dp[x][y][z]*C[x][i]%mod*C[y][j]%mod;\r\n                    que.push((node){xx,yy,zz});\r\n                }\r\n                else if(dis[xx][yy][zz]==dis[x][y][z]+1)\r\n                    add(dp[xx][yy][zz],(ll)dp[x][y][z]*C[x][i]%mod*C[y][j]%mod);\r\n            }\r\n        }\r\n    }\r\n    printf(\"%d\\n%d\\n\",dis[n0][n1][1],dp[n0][n1][1]);\r\n    return 0;\r\n}"
}