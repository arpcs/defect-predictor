{
    "id": 82223084,
    "contestId": 295,
    "creationTimeSeconds": 1591019438,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "FlameDragon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define int long long\r\n\r\n\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define fs first\r\n#define sc second\r\n#define MP make_pair\r\n#define pb push_back\r\n#define fastio ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)\r\n#define sz(x) (int)x.size()\r\n#define sqr(x) ((x) * (x))\r\n\r\nconst int MOD = 1e9 + 7;\r\nconst int N = 55;\r\nconst int INF = 1e9;\r\nint d[N][N][2], cnt[N][N][2];\r\nint fact[N], invfact[N];\r\n\r\n\r\nint add(int a, int b) {\r\n    a += b;\r\n    if (a >= MOD)\r\n        a -= MOD;\r\n    return a;\r\n}\r\n\r\nint mul(int a, int b) {\r\n    return 1ll * a * b % MOD;\r\n}\r\n\r\nint binpow(int x, int st) {\r\n    int ret = 1;\r\n    while (st) {\r\n        if (st & 1)\r\n            ret = mul(ret, x);\r\n        x = mul(x, x);\r\n        st /= 2;\r\n    }\r\n    return ret;\r\n}\r\n\r\nint inv(int x) {\r\n    return binpow(x, MOD - 2);\r\n}\r\n\r\nint C(int n, int k) {\r\n    return mul(mul(fact[n], invfact[k]), invfact[n - k]);\r\n}\r\n\r\nsigned main() {\r\n    fastio;\r\n\r\n    fact[0] = invfact[0] = 1;\r\n    for (int i = 1; i < N; i++) {\r\n        fact[i] = mul(fact[i - 1], i);\r\n        invfact[i] = inv(fact[i]);\r\n        assert(mul(fact[i], invfact[i]) == 1);\r\n    }\r\n    int n, k;\r\n    cin >> n >> k;\r\n    int a = 0, b = 0;\r\n    k /= 50;\r\n    for (int i = 0; i < n; i++) {\r\n        int x;\r\n        cin >> x;\r\n        if (x == 50)\r\n            a++;\r\n        else b++;\r\n    }\r\n\r\n    for (int i = 0; i < N; i++) {\r\n        for (int j = 0; j < N; j++)\r\n            d[i][j][0] = d[i][j][1] = INF;\r\n    }\r\n\r\n    d[a][b][0] = 0;\r\n    cnt[a][b][0] = 1;\r\n    queue<pair<pair<int, int>, int>> q;\r\n    q.push({{a, b}, 0});\r\n    while (sz(q)) {\r\n        int x, y, type;\r\n        x = q.front().fs.fs;\r\n        y = q.front().fs.sc;\r\n        type = q.front().sc;\r\n        //cout << d[x][y][type] << ' ' << x << ' ' << y << ' '<< type<< endl;\r\n        if (x + y == 0)\r\n            break;\r\n        q.pop();\r\n        int from = -1;\r\n        if (type == 1) {\r\n            from = 1;\r\n        }\r\n\r\n        for (int i = 0; i <= (from == -1 ? x : a - x); i++) {\r\n            for (int j = 0; j <= (from == -1 ? y : b - y) && i + 2 * j <= k; j++){\r\n                if (i == 0 && j == 0) continue;\r\n                int nx = x + from * i;\r\n                int ny = y + from * j;\r\n                if (min(nx, ny) >= 0 && nx <= a && ny <= b && d[nx][ny][type ^ 1] >= d[x][y][type] + 1) {\r\n                    if (d[nx][ny][type ^ 1] > d[x][y][type] + 1)\r\n                        q.push({{nx, ny}, type ^ 1});\r\n                    d[nx][ny][type ^ 1] = d[x][y][type] + 1;\r\n                    cnt[nx][ny][type ^ 1] = add(cnt[nx][ny][type ^ 1], mul(cnt[x][y][type], mul(C((from == -1 ? x : a - x), i), C((from == -1 ? y : b - y), j))));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (d[0][0][1] == INF)\r\n        cout << \"-1\\n\";\r\n    else cout << d[0][0][1] << '\\n';\r\n    cout << cnt[0][0][1] << '\\n';\r\n}"
}