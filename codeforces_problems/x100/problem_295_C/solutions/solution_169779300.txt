{
    "id": 169779300,
    "contestId": 295,
    "creationTimeSeconds": 1661592318,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "Paritosh1912"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h> \r\nusing namespace std; \r\n#define int long long \r\n#define MOD 1000000007\r\nint nCr[51][51];\r\n\r\nint C(int n, int r)\r\n{\r\n    if(nCr[n][r] != 0) return nCr[n][r];\r\n    if(n<r) return 0;\r\n    if(n == r || r == 0) return nCr[n][r] = 1;\r\n    return nCr[n][r] = (C(n-1,r) + C(n-1,r-1))%MOD; \r\n}\r\n\r\nint A = 0, B = 0,k;\r\npair<int,int> dp[51][51][2];\r\n\r\nbool bfs()\r\n{\r\n    bool ch = 0;\r\n    queue<pair<int,int>> q;\r\n    q.push({A,B});\r\n    int turn = 0;\r\n    while(!q.empty())\r\n    {\r\n        int sz = q.size();\r\n        while(sz--)\r\n        {\r\n            int a = q.front().first, b = q.front().second;\r\n            //cout<<a<<\" \"<<b<<\" \"<<turn<<\"\\n\";\r\n            q.pop();\r\n            if(a == A && b == B && turn == 1) ch = 1;\r\n            int c = A-a, d = B-b;\r\n            for(int i = 0;i<=min(a,k/50);i++)\r\n            {   \r\n                for(int j = 0;j<=min(b,(k-50*i)/100);j++)\r\n                {\r\n                    if(i + j == 0) continue;\r\n                    pair<int,int>& res = dp[c+i][d+j][1-turn];\r\n                    if(res.first == 1e9)\r\n                    {\r\n                        res.first = 1 + dp[a][b][turn].first;\r\n                        res.second = (((C(a,i)*C(b,j))%MOD)*dp[a][b][turn].second)%MOD;\r\n                        q.push({c+i,d+j});\r\n                    }\r\n                    else if(res.first == 1 + dp[a][b][turn].first)\r\n                    {\r\n                        res.second = (res.second + (((C(a,i)*C(b,j))%MOD)*dp[a][b][turn].second)%MOD)%MOD;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        turn = 1-turn;\r\n    }\r\n    return ch;\r\n}\r\nsigned main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    int n;cin>>n>>k;\r\n    for(int i = 0;i<n;i++)\r\n    {\r\n        int x;cin>>x;\r\n        if(x == 50) A++;\r\n        else B++;\r\n    }\r\n    //memset(dp,INT_MAX,sizeof(dp));\r\n    for(int i = 0;i<51;i++) for(int j = 0;j<51;j++) for(int e = 0;e<2;e++) dp[i][j][e] = {1e9,0};\r\n    dp[A][B][0] = {0,1};\r\n    if(bfs() == 0) cout<<\"-1\\n0\\n\";\r\n    else cout<<dp[A][B][1].first<<\"\\n\"<<dp[A][B][1].second<<\"\\n\";\r\n    return 0;\r\n}"
}