{
    "id": 109761152,
    "contestId": 295,
    "creationTimeSeconds": 1615534782,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "sudo_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n\r\nusing namespace std;\r\n\r\nll rides[55][55][2];\r\nll ways[55][55][2];\r\n\r\nll mod = 1e9 + 7;\r\nll n, k;\r\nll cnt50, cnt100;\r\n\r\nll INF = 1e16;\r\n\r\nll dp[55][55];\r\nll nCr(ll n, ll r) \r\n{\r\n    if (r == 0 || r == n)\r\n        return 1;\r\n    if(dp[n][r] != -1)\r\n        return dp[n][r];\r\n    dp[n][r] = (nCr(n-1, r-1) + nCr(n-1, r)) % mod;\r\n    return dp[n][r];\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cin >> n >> k;\r\n    cnt50 = 0, cnt100 = 0;\r\n    for(ll i = 0; i < n; i++)\r\n    {\r\n        ll tmp;\r\n        cin >> tmp;\r\n        if(tmp == 50)\r\n            cnt50++;\r\n        else\r\n            cnt100++;\r\n    }\r\n\r\n    memset(rides, 0x3f, sizeof(rides));\r\n    memset(ways, 0, sizeof(ways));\r\n    memset(dp, -1, sizeof(dp));\r\n\r\n    rides[cnt50][cnt100][0] = 0;\r\n    ways[cnt50][cnt100][0] = 1;\r\n\r\n    queue<tuple<ll, ll, ll>> q;\r\n    q.push({cnt50, cnt100, 0});\r\n\r\n    ll dist = 0;\r\n    while(!q.empty())\r\n    {\r\n        dist++;\r\n        ll sz = q.size();\r\n        while(sz--)\r\n        {\r\n            auto [i, j, dir] = q.front();\r\n            q.pop();\r\n            for(ll di = 0; di <= i; di++)\r\n            {\r\n                for(ll dj = 0; dj <= j; dj++)\r\n                {\r\n                    if(di * 50 + dj * 100 > k)\r\n                        continue;\r\n                    if(di == 0 && dj == 0)\r\n                        continue;\r\n                    ll ni = cnt50 - (i - di), nj = cnt100 - (j - dj);\r\n                    ll ndir = !dir;\r\n                    if(rides[ni][nj][ndir] > dist)\r\n                    {\r\n                        rides[ni][nj][ndir] = dist;\r\n                        ways[ni][nj][ndir] = ways[i][j][dir] * nCr(i, di) % mod * nCr(j, dj) % mod;\r\n                        q.push({ni, nj, ndir});\r\n                    }\r\n                    else if(rides[ni][nj][ndir] == dist)\r\n                    {\r\n                        ways[ni][nj][ndir] = (ways[ni][nj][ndir] + ways[i][j][dir] * nCr(i, di) % mod * nCr(j, dj) % mod) % mod;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ll ret0 = rides[cnt50][cnt100][1], ret1 = ways[cnt50][cnt100][1];\r\n    if(ret0 < 0x3f3f3f3f3f3f3f3f)\r\n    {\r\n        cout << ret0 << endl << ret1 << endl;\r\n    }\r\n    else\r\n    {\r\n        cout << -1 << endl << 0 << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\r\n"
}