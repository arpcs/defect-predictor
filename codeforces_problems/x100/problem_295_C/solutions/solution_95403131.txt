{
    "id": 95403131,
    "contestId": 295,
    "creationTimeSeconds": 1602576507,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "GeorgeRaouf"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 5017600,
    "source": "#include <bits/stdc++.h>\r\n#define F first\r\n#define S second\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef pair<ll, ll>pll;\r\nconst int N = 55, M = 1e9 + 7, K = 205;\r\nint fifty, hundred, fact[N], inv[N], dp1[K][N][N], dp2[K][N][N];\r\nint k;\r\nint mul(int a, int b)\r\n{\r\n    return (1LL * a * b) % M;\r\n}\r\nint add(int a, int b)\r\n{\r\n    return (1LL * a + b) % M;\r\n}\r\nint solve1(int min_crosses, int have_50, int have_100);\r\nint fp(int b, int p)\r\n{\r\n    if(!p)  return 1;\r\n    ll ret = fp(b, p / 2);\r\n    ret = mul(ret, ret);\r\n    if(p & 1)   ret = mul(ret, b);\r\n    return ret;\r\n}\r\nvoid pre()\r\n{\r\n    memset(dp1, -1, sizeof(dp1));\r\n    memset(dp2, -1, sizeof(dp2));\r\n    fact[0] = inv[0] = 1;\r\n    for(int i = 1;i < N;++i)\r\n    {\r\n        fact[i] = mul(i, fact[i - 1]);\r\n        inv[i] = fp(fact[i], M - 2);\r\n    }\r\n}\r\nint ncr(int n, int r)\r\n{\r\n    return mul(fact[n], mul(inv[r], inv[n - r]));\r\n}\r\nint solve2(int min_crosses, int have_50, int have_100)\r\n{\r\n    if(!min_crosses)                                return (have_50 == fifty && have_100 == hundred);\r\n    if(~dp2[min_crosses][have_50][have_100])        return dp2[min_crosses][have_50][have_100];\r\n    ll ans = 0;\r\n    for(int i = 0;i <= have_50;++i)\r\n        for(int j = 0;j <= have_100;++j)\r\n            if(i + j > 0 && i * 50 + j * 100 <= k)\r\n                ans = add(ans, mul(solve1(min_crosses - 1, fifty - have_50 + i, hundred - have_100 + j), mul(ncr(have_50, i), ncr(have_100, j))));\r\n    return dp2[min_crosses][have_50][have_100] = ans;\r\n}\r\nint solve1(int min_crosses, int have_50, int have_100)\r\n{\r\n    if(min_crosses == -1)                           return 0;\r\n    if(!min_crosses)                                return (!have_50 && !have_100);\r\n    if(~dp1[min_crosses][have_50][have_100])        return dp1[min_crosses][have_50][have_100];\r\n    ll ans = 0;\r\n    for(int i = 0;i <= have_50;++i)\r\n        for(int j = 0;j <= have_100;++j)\r\n            if(i + j > 0 && i * 50 + j * 100 <= k)\r\n                ans = add(ans, mul(solve2(min_crosses - 1, fifty - have_50 + i, hundred - have_100 + j), mul(ncr(have_50, i), ncr(have_100, j))));\r\n    return dp1[min_crosses][have_50][have_100] = ans;\r\n}\r\nint main()\r\n{\r\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    pre();\r\n    int n;\r\n    cin >> n >> k;\r\n    for(int i = 0;i < n;++i)\r\n    {\r\n        int w;\r\n        cin >> w;\r\n        if(w == 50) ++fifty;\r\n        else        ++hundred;\r\n    }\r\n    for(int i = 1;i < 2 * N;++i)\r\n        if(solve1(i, fifty, hundred))\r\n            return cout << i << '\\n' << solve1(i, fifty, hundred), 0;\r\n    cout << \"-1\\n0\";\r\n    return 0;\r\n}\r\n"
}