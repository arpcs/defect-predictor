{
    "id": 105109406,
    "contestId": 295,
    "creationTimeSeconds": 1611363098,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "jvtr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define fastio cin.tie(NULL);cout.tie(NULL);ios_base::sync_with_stdio(0);\r\n#define sz(x) (int)x.size()\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define rep(i, a, b) for(int i = a; i < b; i++)\r\n#define MAXN 505\r\n#define INF 0x3f3f3f3f\r\n#define LINF 0x3f3f3f3f3f3f3f3f\r\n#define int long long\r\n#define pb push_back\r\n#define endl '\\n'\r\n#define F first\r\n#define S second\r\n\r\ntypedef long long ll;\r\ntypedef pair <int, int> pii;\r\ntypedef vector <int> vi;\r\ntypedef vector <pii> vii;\r\ntypedef tuple <int, int, int> i3;\r\n\r\nint n, k, total1, total2;\r\nconst int MOD = 1000000007;\r\n\r\n// int getMax(){\r\n//     int pivo = 0, qtd1 = total1, qtd2 = total2;\r\n\r\n//     if(total1){\r\n//         pivo = 50;\r\n//         qtd1--;\r\n//     } else {\r\n//         pivo = 100;\r\n//         qtd2--;\r\n//     }\r\n//     if(pivo < k) return -1;\r\n\r\n//     int cap = k - pivo, res = 0;\r\n//     while(true){\r\n//         if(qtd2){   \r\n//             int leva = cap / 100;\r\n//             if(leva > qtd2)\r\n//         } else if(qtd1){\r\n\r\n//         }\r\n//     }\r\n// }\r\n\r\nll binExp(ll a, ll b){\r\n    if(b == 0) return 1LL;\r\n    ll p = binExp(a, b / 2);\r\n    return (b & 1 ? (((p * p) % MOD) * a) % MOD : (p * p) % MOD);\r\n}\r\n\r\nll fat[MAXN], inv[MAXN];\r\n\r\nvoid setup(){\r\n    fat[0] = inv[0] = 1;\r\n    for(int i = 1; i <= MAXN - 1; i++) fat[i] = (fat[i - 1] * i) % MOD;\r\n    inv[MAXN - 1] = binExp(fat[MAXN - 1], MOD - 2);\r\n    for(int i = MAXN - 2; i >= 1; i--) inv[i] = (inv[i + 1] * (i + 1)) % MOD;\r\n}\r\n \r\nll comb(ll a, ll b){\r\n    if(b > a) return 0;\r\n    return (((fat[a] * inv[b]) % MOD) * inv[a - b]) % MOD;\r\n}\r\n\r\nint dist[55][55][2];\r\nint soma[55][55][2];\r\n\r\nint32_t main() {\r\n    cin >> n >> k;\r\n    \r\n    int aux;\r\n    for(int i = 1; i <= n; i++){\r\n        cin >> aux;\r\n        if(aux == 50) total1++;\r\n        else total2++;\r\n    }\r\n\r\n    setup();\r\n    memset(dist, INF, sizeof(dist));\r\n\r\n    queue <i3> fila;\r\n    dist[total1][total2][0] = 0;\r\n    soma[total1][total2][0] = 1;\r\n    fila.push({total1, total2, 0});\r\n\r\n    while(!fila.empty()){\r\n        auto atual = fila.front();\r\n        fila.pop();\r\n        int esq50, esq100, lado;\r\n        tie(esq50, esq100, lado) = atual;\r\n\r\n        if(esq50 == 0 and esq100 == 0) break;\r\n\r\n        int lado50 = (lado == 0 ? esq50 : total1 - esq50), lado100 = (lado == 0 ? esq100 : total2 - esq100);\r\n        for(int i = 0; i <= lado50; i++){\r\n            for(int j = 0; j <= lado100; j++){\r\n                if(i + j == 0) continue;\r\n                if(i * 50 + j * 100 > k) break;\r\n                int C = (comb(lado50, i) * comb(lado100, j)) % MOD;\r\n\r\n                int novo50, novo100;\r\n                if(lado == 0){\r\n                    novo50 = esq50 - i;\r\n                    novo100 = esq100 - j;\r\n                } else {\r\n                    novo50 = esq50 + i;\r\n                    novo100 = esq100 + j;\r\n                }\r\n\r\n                if(dist[esq50][esq100][lado] + 1 < dist[novo50][novo100][lado ^ 1]){\r\n                    fila.push({novo50, novo100, lado ^ 1});\r\n                    dist[novo50][novo100][lado ^ 1] = dist[esq50][esq100][lado] + 1;\r\n                    soma[novo50][novo100][lado ^ 1] = (soma[novo50][novo100][lado ^ 1] + (C * soma[esq50][esq100][lado] % MOD)) % MOD;\r\n                } else if(dist[esq50][esq100][lado] + 1 == dist[novo50][novo100][lado ^ 1]){\r\n                    soma[novo50][novo100][lado ^ 1] = (soma[novo50][novo100][lado ^ 1] + (C * soma[esq50][esq100][lado] % MOD)) % MOD;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // cout << LINF << \" \" << dist[0][0][1] << endl;\r\n    if(dist[0][0][1] == LINF){\r\n        cout << -1 << endl << 0 << endl;\r\n    } else {\r\n        cout << dist[0][0][1] << endl << soma[0][0][1] << endl;\r\n    }\r\n\r\n    return 0;\r\n}"
}