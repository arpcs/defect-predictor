{
    "id": 116197362,
    "contestId": 295,
    "creationTimeSeconds": 1621009240,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "David713"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 3993600,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <cstring>\r\nusing namespace std;\r\nconst int N = 55;\r\nconst int mod = 1e9+7;\r\n#define int long long\r\nint n, k, cnt1, cnt2, old, now;\r\nint c[N][N], a[N], dp[4][N][N];\r\nsigned main()\r\n{\r\n    for (int i = 0; i <= 50; i++)\r\n    {\r\n        c[i][0] = 1;\r\n        for (int j = 1; j <= i; j++) c[i][j] = (c[i-1][j-1] + c[i-1][j]) % mod;\r\n    }\r\n    scanf(\"%lld %lld\", &n, &k);\r\n    for (int i = 1; i <= n; i++) scanf(\"%lld\", &a[i]);\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        if (a[i] == 50) cnt1++;\r\n        else cnt2++;\r\n    }\r\n    old = 1, now = 0; // 0 - a, 1 - b\r\n    dp[now][cnt1][cnt2] = 1;\r\n    for (int i = 0; i < 2 * n; i++)\r\n    {\r\n        swap(old, now);\r\n        memset(dp[now], 0, sizeof(dp[now]));\r\n        for (int j = 0; j <= cnt1; j++)\r\n        {\r\n            for (int t = 0; t <= cnt2; t++)\r\n            {\r\n                if (j + t == 0 || j * 50 + t * 100 > k) continue;\r\n                for (int x = j; x <= cnt1; x++)\r\n                {\r\n                    for (int y = t; y <= cnt2; y++)\r\n                    {\r\n                        dp[now][cnt1 - x + j][cnt2 - y + t] = (dp[now][cnt1 - x + j][cnt2 - y + t] + dp[old][x][y] * c[x][j] % mod * c[y][t] % mod) % mod;\r\n                        // cout << dp[old][x][y] << \" \" << c[x][j] << \" \" << c[y][t] << endl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (dp[now][cnt1][cnt2])\r\n        {\r\n            printf(\"%lld\\n\", i * 2 + 1);\r\n            printf(\"%lld\", dp[now][cnt1][cnt2]);\r\n            return 0;\r\n        }\r\n        swap(old, now);\r\n        memset(dp[now], 0, sizeof(dp[now]));\r\n        for (int j = 0; j <= cnt1; j++)\r\n        {\r\n            for (int t = 0; t <= cnt2; t++)\r\n            {\r\n                if (j + t == 0 || j * 50 + t * 100 > k) continue;\r\n                for (int x = j; x <= cnt1; x++)\r\n                {\r\n                    for (int y = t; y <= cnt2; y++)\r\n                    {\r\n                        dp[now][cnt1 - x + j][cnt2 - y + t] = (dp[now][cnt1 - x + j][cnt2 - y + t] + dp[old][x][y] * c[x][j] % mod * c[y][t] % mod) % mod;\r\n                        // cout << dp[old][x][y] << \" \" << x << \" \" << y << endl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    puts(\"-1\");\r\n    puts(\"0\");\r\n    return 0;\r\n}"
}