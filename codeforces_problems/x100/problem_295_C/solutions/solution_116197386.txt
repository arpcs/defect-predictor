{
    "id": 116197386,
    "contestId": 295,
    "creationTimeSeconds": 1621009257,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "David713"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 3993600,
    "source": "#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\nconst int N = 55;\nconst int mod = 1e9+7;\n#define int long long\nint n, k, cnt1, cnt2, old, now;\nint c[N][N], a[N], dp[4][N][N];\nsigned main()\n{\n    for (int i = 0; i <= 50; i++)\n    {\n        c[i][0] = 1;\n        for (int j = 1; j <= i; j++) c[i][j] = (c[i-1][j-1] + c[i-1][j]) % mod;\n    }\n    scanf(\"%lld %lld\", &n, &k);\n    for (int i = 1; i <= n; i++) scanf(\"%lld\", &a[i]);\n    for (int i = 1; i <= n; i++)\n    {\n        if (a[i] == 50) cnt1++;\n        else cnt2++;\n    }\n    old = 1, now = 0; // 0 - a, 1 - b\n    dp[now][cnt1][cnt2] = 1;\n    for (int i = 0; i < 2 * n; i++)\n    {\n        swap(old, now);\n        memset(dp[now], 0, sizeof(dp[now]));\n        for (int j = 0; j <= cnt1; j++)\n        {\n            for (int t = 0; t <= cnt2; t++)\n            {\n                if (j + t == 0 || j * 50 + t * 100 > k) continue;\n                for (int x = j; x <= cnt1; x++)\n                {\n                    for (int y = t; y <= cnt2; y++)\n                    {\n                        dp[now][cnt1 - x + j][cnt2 - y + t] = (dp[now][cnt1 - x + j][cnt2 - y + t] + dp[old][x][y] * c[x][j] % mod * c[y][t] % mod) % mod;\n                        // cout << dp[old][x][y] << \" \" << c[x][j] << \" \" << c[y][t] << endl;\n                    }\n                }\n            }\n        }\n        if (dp[now][cnt1][cnt2])\n        {\n            printf(\"%lld\\n\", i * 2 + 1);\n            printf(\"%lld\", dp[now][cnt1][cnt2]);\n            return 0;\n        }\n        swap(old, now);\n        memset(dp[now], 0, sizeof(dp[now]));\n        for (int j = 0; j <= cnt1; j++)\n        {\n            for (int t = 0; t <= cnt2; t++)\n            {\n                if (j + t == 0 || j * 50 + t * 100 > k) continue;\n                for (int x = j; x <= cnt1; x++)\n                {\n                    for (int y = t; y <= cnt2; y++)\n                    {\n                        dp[now][cnt1 - x + j][cnt2 - y + t] = (dp[now][cnt1 - x + j][cnt2 - y + t] + dp[old][x][y] * c[x][j] % mod * c[y][t] % mod) % mod;\n                        // cout << dp[old][x][y] << \" \" << x << \" \" << y << endl;\n                    }\n                }\n            }\n        }\n    }\n    puts(\"-1\");\n    puts(\"0\");\n    return 0;\n}"
}