{
    "id": 103006108,
    "contestId": 295,
    "creationTimeSeconds": 1609568913,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "noticeMeSempai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 6041600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n\r\nconst int mod = 1e9 + 7, N = 55;\r\n\r\nint dp[4*N][N][N], C[N][N];\r\nbool can[4*N][N][N];\r\n\r\nsigned main(){\r\n    for(int i = 0; i < N; i++){\r\n        for(int j = C[i][0] = 1; j < N; j++)\r\n            C[i][j] = (C[i-1][j] + C[i-1][j-1])%mod;\r\n    }\r\n    int n, m;   cin >> n >> m;  m /= 50;\r\n    int c1 = 0, c2 = 0;\r\n    for(int i = 0; i < n; i++){\r\n        int temp;   cin >> temp;\r\n        if(temp == 50)  c1++;\r\n        else    c2++;\r\n    }\r\n    dp[0][c1][c2] = 1;\r\n    can[0][c1][c2] = 1;\r\n    for(int i = 0; i <= 4 * n + 5; i++){\r\n        if(i%2 == 1 and can[i][c1][c2]){\r\n            cout << i << endl << dp[i][c1][c2]%mod;\r\n            return 0;\r\n        }\r\n        for(int j = 0; j <= c1; j++){\r\n            for(int k = 0; k <= c2; k++){\r\n                if(can[i][j][k]){\r\n                    int val = dp[i][j][k];\r\n                    for(int x = 0; x <= j; x++){\r\n                        for(int y = 0; y <= k and x + 2*y <= m; y++){\r\n                            if(x+y > 0){\r\n                                can[i+1][c1-j+x][c2-k+y] = 1;\r\n                                dp[i+1][c1-j+x][c2-k+y] += ((C[j][x] * C[k][y])%mod*val)%mod;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << -1 << endl << 0;\r\n}"
}