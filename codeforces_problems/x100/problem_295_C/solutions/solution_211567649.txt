{
    "id": 211567649,
    "contestId": 295,
    "creationTimeSeconds": 1688097077,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "zzk2010"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 204800,
    "source": "// LUOGU_RID: 113579350\n#include <bits/stdc++.h>\r\n#define int long long\r\n#define FOR(i, a, b) for(int i = a; i <= b; i++)\r\n#define ROF(i, a, b) for(int i = a; i >= b; i--)\r\nusing namespace std;\r\nconst int N = 105, mod = 1e9+7;\r\nint fac[N], inv[N];\r\nint qpow(int a, int p) {\r\n\tint res = 1;\r\n\twhile (p) {\r\n\t\tif (p & 1) res = res * a % mod;\r\n\t\ta = a * a % mod;\r\n\t\tp >>= 1;\r\n\t}\r\n\treturn res;\r\n}\r\nvoid init() {\r\n\tfac[0] = 1;\r\n\tFOR(i, 1, N-1) fac[i] = fac[i-1] * i % mod;\r\n\tinv[N-1] = qpow(fac[N-1], mod-2);\r\n\tROF(i, N-2, 0) inv[i] = inv[i+1] * (i+1) % mod;\r\n\treturn;\r\n}\r\nint C(int n, int m) {\r\n\tif (n < m) return 0;\r\n\treturn fac[n] * inv[m] % mod * inv[n-m] % mod;\r\n}\r\nint dp[2][N][N], tot100, tot50, n, k;\r\nsigned main() {\r\n\tinit();\r\n\tcin >> n >> k;\r\n\tfor (int i = 1, x; i <= n; i++) {\r\n\t\tcin >> x;\r\n\t\ttot100 += (x == 100);\r\n\t\ttot50 += (x == 50);\r\n\t}\r\n\tdp[0][0][0] = 1;\r\n\tFOR(turn, 1, 4 * n) {\r\n\t\tFOR(oppo50, 0, tot50) FOR(oppo100, 0, tot100) dp[turn & 1][oppo50][oppo100] = 0;\r\n\t\tFOR(oppo50, 0, tot50) FOR(oppo100, 0, tot100) {\r\n\t\t\tif (turn & 1) {\r\n\t\t\t\tFOR(move50, 0, tot50-oppo50) FOR(move100, 0, tot100-oppo100) {\r\n\t\t\t\t\tif (!move50 && !move100) continue;\r\n\t\t\t\t\tif (move50 * 50 + move100 * 100 > k) continue;\r\n\t\t\t\t\tdp[turn & 1][oppo50+move50][oppo100+move100] += C(tot50-oppo50, move50) * C(tot100-oppo100, move100) % mod * dp[0][oppo50][oppo100] % mod;\r\n\t\t\t\t\tdp[turn & 1][oppo50+move50][oppo100+move100] %= mod;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tFOR(move50, 0, oppo50) FOR(move100, 0, oppo100) {\r\n\t\t\t\t\tif (!move50 && !move100) continue;\r\n\t\t\t\t\tif (move50 * 50 + move100 * 100 > k) continue;\r\n\t\t\t\t\tdp[turn & 1][oppo50-move50][oppo100-move100] += C(oppo50, move50) * C(oppo100, move100) % mod * dp[1][oppo50][oppo100] % mod;\r\n\t\t\t\t\tdp[turn & 1][oppo50-move50][oppo100-move100] %= mod;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (dp[turn & 1][tot50][tot100]) {\r\n\t\t\tcout << turn << '\\n' << dp[turn & 1][tot50][tot100];\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\tcout << \"-1\\n0\";\r\n\treturn 0;\r\n}"
}