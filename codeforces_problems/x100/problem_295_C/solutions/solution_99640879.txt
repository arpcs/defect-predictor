{
    "id": 99640879,
    "contestId": 295,
    "creationTimeSeconds": 1606394977,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "sanjay_thiru"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\nconst ll MOD=1e9+7;\nconst ll INF=1e15;\nconst ll maxn=51;\nvector<ll> fact,fact_inv;\nstruct state\n{\n\tll s,l,side;\n};\nll moves[51][51][2];\n// moves[i][j][k] : denotes the min no. of moves required to reach\n// the state with {i small people in left side, j big people in left side, boat in the kth shore}\n// from {n1 small people in left side,n2 large people in left side,boat in the 0th shore}\nll ways[51][51][2];\nll power(ll a,ll b)\n{\n\tll res=1;\n\twhile(b>0)\n\t{\n\t\tif(b%2) res=(res*a)%MOD;\n\t\tb/=2;\n\t\ta=(a*a)%MOD;\n\t}\n\treturn res;\n}\nll modInv(ll x)\n{\n\treturn power(x,MOD-2);\n}\nll ncr(ll n,ll r)\n{\n\tll num=(fact[n]*fact_inv[r])%MOD;\n\tnum=(num*fact_inv[n-r])%MOD;\n\treturn num;\n}\nvoid solve()\n{\n\tll n,k;\n\tcin>>n>>k;\n\tfor(ll i=0;i<=50;i++)\n\t{\n\t\tfor(ll j=0;j<=50;j++)\n\t\t{\n\t\t\tmoves[i][j][0]=moves[i][j][1]=INF;\n\t\t}\n\t}\n\tvector<ll> a(n);\n\tll small=0,big=0;\n\tfor(ll i=0;i<n;i++)\n\t{\n\t\tcin>>a[i];\n\t\tif(a[i]==50) small++;\n\t\telse big++;\n\t}\n\tqueue<state> q;\n\tq.push({small,big,0});\n\tmoves[small][big][0]=0;\n\tways[small][big][0]=1;\n\n\twhile(!q.empty())\n\t{\n\t\tstate cur=q.front();\n\t\tq.pop();\n\t\tll s=cur.s,l=cur.l;\n\t\tif(cur.side==1)\n\t\t{\n\t\t\ts=small-cur.s;\n\t\t\tl=big-cur.l;\n\t\t}\n\t\tfor(ll i=0;i<=s;i++)\n\t\t{\n\t\t\tfor(ll j=0;j<=l;j++)\n\t\t\t{\n\t\t\t\tif(i==0&&j==0) continue;\n\t\t\t\tif(i*50+j*100>k) continue;\n\t\t\t\tll x,y,z;\n\t\t\t\tif(cur.side==1)\n\t\t\t\t{\n\t\t\t\t\tx=cur.s+i;\n\t\t\t\t\ty=cur.l+j;\n\t\t\t\t\tz=1-cur.side;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tx=cur.s-i;\n\t\t\t\t\ty=cur.l-j;\n\t\t\t\t\tz=1-cur.side;\n\t\t\t\t}\n\t\t\t\tll wy=ways[cur.s][cur.l][cur.side];\n\t\t\t\twy=(wy*ncr(s,i))%MOD;\n\t\t\t\twy=(wy*ncr(l,j))%MOD;\n\n\t\t\t\tif(moves[x][y][z]==INF)\n\t\t\t\t{\n\t\t\t\t\tq.push({x,y,z});\n\t\t\t\t\tmoves[x][y][z]=moves[cur.s][cur.l][cur.side]+1;\n\t\t\t\t\tways[x][y][z]=wy;\n\t\t\t\t}\n\t\t\t\telse if(moves[x][y][z]==moves[cur.s][cur.l][cur.side]+1)\n\t\t\t\t{\n\t\t\t\t\tways[x][y][z]=(ways[cur.s][cur.l][cur.side]+wy)%MOD;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(moves[0][0][1]==INF) cout<<-1<<\"\\n\"<<0<<\"\\n\";\n\telse cout<<moves[0][0][1]<<\"\\n\"<<ways[0][0][1]<<\"\\n\";\n}\nint main()\n{\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tfact.resize(maxn+1);\n\tfact_inv.resize(maxn+1);\n\tfact[0]=fact_inv[0]=1;\n\tfor(ll i=1;i<=maxn;i++)\n\t{\n\t\tfact[i]=(fact[i-1]*i)%MOD;\n\t\tfact_inv[i]=modInv(fact[i]);\n\t}\n\tsolve();\n\treturn 0;\n}"
}