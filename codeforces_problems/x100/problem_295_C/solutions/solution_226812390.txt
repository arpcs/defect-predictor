{
    "id": 226812390,
    "contestId": 295,
    "creationTimeSeconds": 1696560891,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "ethankim8683"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nusing I=int;\r\nusing Lli=long long int;\r\nusing B=bool;\r\nconst I N=50;\r\nconst Lli MOD=1e9+7;\r\nconst I MAX=1e9;\r\nI wgts[N];\r\nLli facs[N+1];\r\npair<I,Lli>dp[N+1][N+1][2];\r\nqueue<tuple<I,I,I>>ques;\r\nLli mpw(Lli x,Lli y){\r\n  Lli res=1;\r\n  for(x%=MOD;y;y>>=1,(x*=x)%=MOD)if(y&1)(res*=x)%=MOD;\r\n  return res;\r\n}\r\nLli inv(Lli x){\r\n  return mpw(x,MOD-2);\r\n}\r\nLli bin(I n,I k){\r\n  return facs[n]*inv(facs[k]*facs[n-k])%MOD;\r\n}\r\nB cmb(pair<I,Lli>&a,pair<I,Lli>b){\r\n  if(b.first<a.first){a=b;return 1;}\r\n  if(b.first==a.first)(a.second+=b.second)%=MOD;\r\n  return 0;\r\n};\r\nvoid add(I x,I y,I z,I len,Lli cnt){\r\n  if(cmb(dp[x][y][z],{len,cnt}))ques.push({x,y,z});\r\n};\r\nI main(){\r\n  cin.tie(0)->sync_with_stdio(0);\r\n  fill(&dp[0][0][0],&dp[0][0][0]+(N+1)*(N+1)*2,pair<I,Lli>{MAX,0});\r\n  facs[0]=1;\r\n  for(I i=1;i<=N;i++)facs[i]=facs[i-1]*i%MOD;\r\n  I n,k;cin>>n>>k;\r\n  for(I i=0;i<n;i++)cin>>wgts[i];\r\n  I fif=0;\r\n  for(I i=0;i<n;i++)fif+=wgts[i]==50;\r\n  add(fif,n-fif,0,0,1);\r\n  while(ques.size()){\r\n    auto[x,y,z]=ques.front();ques.pop();\r\n    auto[len,cnt]=dp[x][y][z];\r\n    for(I i=0;i<=x;i++)for(I j=0;j<=y;j++)if(i+j>0){\r\n      if(i*50+j*100>k)continue;\r\n      add(fif-(x-i),n-fif-(y-j),!z,len+1,cnt*bin(x,i)%MOD*bin(y,j)%MOD);\r\n    }\r\n  }\r\n  auto[len,cnt]=dp[fif][n-fif][1];\r\n  printf(\"%i\\n%lli\",len==MAX?-1:len,cnt);\r\n}\r\n/*\r\nwe can use dynamic programming (with breadth-first search, since direction is\r\nnot always linear) storing by remaining number of 50 kilo people, 100 kilo\r\npeople and position of boat\r\n*/"
}