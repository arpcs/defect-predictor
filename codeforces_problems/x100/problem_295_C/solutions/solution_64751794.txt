{
    "id": 64751794,
    "contestId": 295,
    "creationTimeSeconds": 1573572583,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 295,
        "index": "C",
        "name": "Greg and Friends",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 295,
        "members": [
            {
                "handle": "Dio"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1365694200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 2150400,
    "source": "/**\r\n * code generated by JHelper\r\n * More info: https://github.com/AlexeyDmitriev/JHelper\r\n * @author parsa bahrami\r\n */\r\n\r\n#pragma GCC optimize(\"O2\")\r\n\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\ntypedef long long int ll;\r\ntypedef long double ld;\r\ntypedef pair<ll, ll> pll;\r\ntypedef pair<ld, ld> pld;\r\ntypedef pair<string, string> pss;\r\ntypedef pair<pll, bool> pbp;\r\n\r\ntemplate<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\n#define sz(x)                       (ll) x.size()\r\n#define jjoin(x)                    for (auto i : x) cout << i << endl;\r\n#define all(x)                      (x).begin(),(x).end()\r\n#define F                           first.first\r\n#define S                           first.second\r\n#define Z                           second\r\n#define Mp                          make_pair\r\n#define sep                         ' '\r\n#define error(x)                    cerr << #x << \" = \" << x << endl\r\n#define fast_io                     ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n#define set_random                  mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n#define kill(x)                     return cout << x << endl , 0;\r\n#define Hkill(x)                    cout << x << endl; exit(0);\r\n#define endl                        '\\n'\r\n\r\nll poww(ll a, ll b, ll md) {\r\n    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));\r\n}\r\n\r\nconst ll MAXN = 2e5 + 10;\r\nconst ll MAXA = 101;\r\nconst ll INF = 8e18;\r\nconst ll MOD = 1e9 + 7;\r\nconst ld PI = 4 * atan((ld) 1);\r\nll counting[MAXA][MAXA], dist[2][MAXA][MAXA], Count[2][MAXA][MAXA], W[MAXN], cnt50 = 0, cnt100 = 0, n, m;\r\n\r\nll cnt(ll i, ll j) {\r\n    if (counting[i][j] != -1) return counting[i][j];\r\n    if (i == j || i == 0) {\r\n        counting[i][j] = 1;\r\n        return 1;\r\n    }\r\n    counting[i][j] = (cnt(i, j - 1) + cnt(i - 1, j - 1)) % MOD;\r\n    return counting[i][j];\r\n}\r\n\r\nvoid bfs() {\r\n    memset(dist, 63, sizeof(dist));\r\n    queue<pbp> Q;\r\n    dist[0][cnt50][cnt100] = 0;\r\n    Count[0][cnt50][cnt100] = 1;\r\n    Q.push({{cnt50, cnt100}, 0});\r\n    while (sz(Q)) {\r\n        pbp X = Q.front();\r\n        Q.pop();\r\n        if (X.Z == 1) {\r\n            for (ll i = 0; i <= cnt50 - X.F; i++) {\r\n                for (ll j = 0; j <= cnt100 - X.S; j++) {\r\n                    if ((i || j) && i * 50 + j * 100 <= m) {\r\n                        if (dist[X.Z ^ 1][i + X.F][j + X.S] > dist[X.Z][X.F][X.S] + 1) {\r\n                            dist[X.Z ^ 1][i + X.F][j + X.S] = dist[X.Z][X.F][X.S] + 1;\r\n                            Q.push({{i + X.F, j + X.S}, X.Z ^ 1});\r\n                        }\r\n                        if (dist[X.Z ^ 1][i + X.F][j + X.S] == dist[X.Z][X.F][X.S] + 1) {\r\n                            Count[X.Z ^ 1][i + X.F][j + X.S] +=\r\n                                    (Count[X.Z][X.F][X.S] * cnt(i, cnt50 - X.F) * cnt(j, cnt100 - X.S)) % MOD;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            for (ll i = 0; i <= X.F; i++) {\r\n                for (ll j = 0; j <= X.S; j++) {\r\n                    if ((i || j) && i * 50 + j * 100 <= m) {\r\n                        if (dist[X.Z ^ 1][X.F - i][X.S - j] > dist[X.Z][X.F][X.S] + 1) {\r\n                            dist[X.Z ^ 1][X.F - i][X.S - j] = dist[X.Z][X.F][X.S] + 1;\r\n                            Q.push({{X.F - i, X.S - j}, X.Z ^ 1});\r\n                        }\r\n                        if (dist[X.Z ^ 1][X.F - i][X.S - j] == dist[X.Z][X.F][X.S] + 1) {\r\n                            Count[X.Z ^ 1][X.F - i][X.S - j] +=\r\n                                    (Count[X.Z][X.F][X.S] * cnt(i, X.F) * cnt(j, X.S)) % MOD;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nint main() {\r\n    fast_io;\r\n    set_random;\r\n    for (ll i = 0; i < MAXA; i++)\r\n        fill(counting[i], counting[i] + MAXA, -1);\r\n    cin >> n >> m;\r\n    for (ll i = 1; i <= n; i++) {\r\n        cin >> W[i];\r\n        cnt50 += (W[i] == 50), cnt100 += (W[i] == 100);\r\n    }\r\n    bfs();\r\n    if (Count[1][0][0] == 0)\r\n        dist[1][0][0] = -1;\r\n    cout << dist[1][0][0] << endl << (Count[1][0][0] % MOD) << endl;\r\n\r\n    return 0;\r\n}\r\n"
}