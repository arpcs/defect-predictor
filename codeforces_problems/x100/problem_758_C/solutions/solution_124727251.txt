{
    "id": 124727251,
    "contestId": 758,
    "creationTimeSeconds": 1627956868,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 758,
        "index": "C",
        "name": "Unfair Poll",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 758,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1484838300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 111,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 3788800,
    "source": "#include<bits/stdc++.h>\n \n \n#define int long long\nusing namespace std;\n\nint n,m,x,y;\nint mx,mn,s,r,c,k;\nsigned main(){\n\tcin>>n>>m>>k>>x>>y;\n\tif(n<=2){\n\t\tc=k%(m*n);\n\t\tr=k/(m*n);\n\t\tmx=r+(c>0);\n\t\tmn=r;\n\t\ts=r+((x-1)*m+y<=c);\n\t}\n\tif(n>2){\t\n\t\tr=k/(m*2*(n-1));\n\t\tc=k%(m*2*(n-1));\n\t\tmx=max(r*2+(c>m)+(c>m*n),r+(c>0));\n\t\tmn=r+(c>=m*n);\t\n\t\tif(x==n || x==1) s=r+(c>=(x-1)*m+y);\n\t\telse s=r*2+(c>=((x-1)*m+y))+(c>=(m*n+(n-1-x)*m+y));\n\t}\n\tcout<<mx<<' '<<mn<<' '<<s<<endl;\n}\n\t\t \t \t\t\t    \t  \t \t \t\t \t\t\t\t\t\t\t \t",
    "suggested_categories": [
        "c++ program",
        "algorithm",
        "mathematics",
        "code optimization",
        "input handling",
        "variable naming",
        "code readability",
        "conditional statements",
        "arithmetic operations",
        "integer data types",
        "code structure",
        "top-down design",
        "efficiency",
        "modulus operation",
        "complexity analysis",
        "formulas",
        "logical operations",
        "data interpretation",
        "variable assignments",
        "output formatting"
    ]
}