{
    "id": 182184097,
    "contestId": 499,
    "creationTimeSeconds": 1669155092,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 499,
        "index": "B",
        "name": "Lecture",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 499,
        "members": [
            {
                "handle": "Kempachi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1419438600
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class CODE {\r\n\r\n    public static void main(String[] args) {\r\n\r\n        try {\r\n            System.setIn(new FileInputStream(\"input.txt\"));\r\n            System.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\r\n        } catch (Exception e) {\r\n            System.err.println(\"Error\");\r\n        }\r\n\r\n\r\n\r\n\r\n        FastReader scn = new FastReader();\r\n        int n = scn.nextInt();\r\n        int mapped = scn.nextInt();\r\n        StringBuilder answer = new StringBuilder();\r\n        Map<String, String> map = new HashMap<>();\r\n\r\n\r\n        for (int i = 0; i < mapped; i++) {\r\n            String a = scn.next();\r\n            String b = scn.next();\r\n            if (a.length() < b.length()) {\r\n                map.put(b, a);\r\n            } else {\r\n                map.put(a, b);\r\n            }\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n            String s = scn.next();\r\n            if (map.containsKey(s)) {\r\n                answer.append(map.get(s) + \" \");\r\n            } else {\r\n                answer.append(s + \" \");\r\n            }\r\n        }\r\n        System.out.println(answer.toString());\r\n\r\n    }\r\n\r\n\r\n\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(\r\n                new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() { return Integer.parseInt(next()); }\r\n\r\n        long nextLong() { return Long.parseLong(next()); }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n"
}