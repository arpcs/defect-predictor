{
    "id": 230613864,
    "contestId": 499,
    "creationTimeSeconds": 1698713121,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 499,
        "index": "B",
        "name": "Lecture",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 499,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1419438600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 716800,
    "source": "#include <iostream>\n#include <bits/stdc++.h>\n#include <string>\n#define ll long long\n#define INF 1e12\n#define yy cout<<\"YES\"<<endl\n#define nn cout<<\"NO\"<<endl\n//bitwise operations\n#define set_bit(n,x) n=n|(1<<x)\n#define clear_bit(n,x) n=n&(~(1<<x))\n#define toggle_bit(n,x) n=n^(1<<x)\n#define get_bit(n,x) ((n>>x)&1)\n#define iloop for (int i = 0; i < int(n); i++)\nusing namespace std;\n\n/*\nDon't just set out to do a good job.\nSet out to do such a good job that the living,the dead and the unborn could not do it any better.\n*/\nvector<ll int> prime_factors(long long int n);\nint count_distinct_prime_factors(long long int n);\nvector<ll int> generate_divisors(ll int n);\nbool isPrime(ll int n);\nbool IsSubstring(string a,string b);\nbool check(string a, string b);\nstd::string findLongestCommonSubstring(const std::string& str1, const std::string& str2);\nbool compareSecond(pair<ll int, ll int>& pair1, pair<ll int, ll int >& pair2) {\n    return pair1.second < pair2.second;\n}\n\nbool compareStrings(const std::string& str1, const std::string& str2) {\n    if (str1.length() != str2.length()) {\n        return str1.length() < str2.length(); // Sort by length first\n    }\n    return str1 < str2; // If lengths are equal, sort lexicographically\n}\n\nint main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n    int t = 1;//cin>>t;\n    while (t--) {\n        int n,k;cin>>n>>k;\n        string a[k],b[k];\n        for(int i=0;i<k;i++){\n            cin>>a[i]>>b[i];\n        }\n        map<string,int> mp;\n        for(int i=0;i<k;i++){\n            mp[a[i]]=i;\n        }\n        vector<string> vec;\n        for(int i=0;i<n;i++){\n            string x;cin>>x;\n            if(a[mp[x]].length()<=b[mp[x]].length())\n                vec.push_back(a[mp[x]]);\n            else\n                vec.push_back(b[mp[x]]);\n        }\n        for(auto it:vec)\n            cout<<it<<' ';\n\n    }\n\n\n\n    // gg ezzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\n\n\n    return 0;\n}\n\nbool isPrime(ll int n) {\n    if (n <= 1) {\n        return false;\n    }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nvector<long long int> prime_factors(long long int n) {\n    vector<long long int> factors;\n    for (long long int i = 2; i * i <= n; i++) {\n        while (n % i == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push_back(n);\n    }\n    return factors;\n}\n\n\nint count_distinct_prime_factors(long long int n) {\n    vector<long long int> factors = prime_factors(n);\n    set<long long int> distinct_factors;\n    for (long long int factor : factors) {\n        distinct_factors.insert(factor);\n    }\n    return distinct_factors.size();\n}\n\nvector<ll int> generate_divisors(ll int n){\n    vector<ll int> vec;\n    ll int i;\n    for(i=1;i*i < n;i++){\n        if(n%i==0){\n            vec.push_back(i);vec.push_back(n/i);\n        }\n    }\n    if(i*i==n)\n        vec.push_back(i);\n    return vec;\n}\n\nbool check(string a, string b)\n{\n  int i, j;\n  for(i = 0, j = 0; i < a.size() && j < b.size(); i++ )\n    if( a[i] == b[j] ) j++;\n\n\n    if( j == b.size() ) return true;\n   else return false;\n\n}\n\nbool IsSubstring(string a,string b){\n    if (a.find(b) != std::string::npos)\n        return true;\n    else\n        return false;\n}\n\n\nstd::string findLongestCommonSubstring(const std::string& str1, const std::string& str2) {\n    int m = str1.length();\n    int n = str2.length();\n\n    int maxLength = 0;  // Length of the longest common substring\n    int endingIndex = 0; // Ending index of the longest common substring\n\n    // Create a table to store the length of common substrings\n    int dp[m + 1][n + 1];\n\n    // Fill the table using dynamic programming\n    for (int i = 0; i <= m; i++) {\n        for (int j = 0; j <= n; j++) {\n            if (i == 0 || j == 0)\n                dp[i][j] = 0;\n            else if (str1[i - 1] == str2[j - 1]) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n                if (dp[i][j] > maxLength) {\n                    maxLength = dp[i][j];\n                    endingIndex = i - 1;\n                }\n            } else {\n                dp[i][j] = 0;\n            }\n        }\n    }\n\n    // If no common substring is found\n    if (maxLength == 0) {\n        return \"\";\n    }\n\n    // Extract the longest common substring\n    std::string longestCommonSubstring = str1.substr(endingIndex - maxLength + 1, maxLength);\n    return longestCommonSubstring;\n}\n\t \t \t \t\t\t  \t\t\t\t\t\t \t  \t\t \t\t\t\t\t\t"
}