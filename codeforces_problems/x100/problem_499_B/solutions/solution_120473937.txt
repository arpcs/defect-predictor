{
    "id": 120473937,
    "contestId": 499,
    "creationTimeSeconds": 1624562051,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 499,
        "index": "B",
        "name": "Lecture",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 499,
        "members": [
            {
                "handle": "ACoder_25"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1419438600
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 512000,
    "source": "'''\r\n\r\n* Author : Ayushman Chahar #\r\n* About  : IT Sophomore    #\r\n* Insti  : VIT, Vellore    #\r\n\r\n'''\r\n\r\nimport os\r\nimport sys\r\nfrom collections import defaultdict\r\n# from itertools import *\r\n# from math import *\r\n# from queue import *\r\n# from heapq import *\r\n# from bisect import *\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nreadint = lambda: int(sys.stdin.readline().rstrip(\"\\r\\n\"))\r\nreadints = lambda: map(int, sys.stdin.readline().rstrip(\"\\r\\n\").split())\r\nreadstr = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nreadstrs = lambda: map(str, sys.stdin.readline().rstrip(\"\\r\\n\").split())\r\nreadarri = lambda: [int(_) for _ in sys.stdin.readline().rstrip(\"\\r\\n\").split()]\r\nreadarrs = lambda: [str(_) for _ in sys.stdin.readline().rstrip(\"\\r\\n\").split()]\r\n\r\n\r\ndef solve():\r\n    n, m = readints()\r\n    dd = defaultdict(str)\r\n    for _ in range(m):\r\n        a, b = readstrs()\r\n        dd[a] = b\r\n    arr = readarrs()\r\n    for i in range(n):\r\n        if(len(arr[i]) < len(dd[arr[i]])):\r\n            print(arr[i], end=' ')\r\n        elif(len(arr[i]) > len(dd[arr[i]])):\r\n            print(dd[arr[i]], end=' ')\r\n        else:\r\n            print(min(arr[i], dd[arr[i]]), end=' ')\r\n\r\n\r\ndef main():\r\n    t = 1\r\n    # t = readint()\r\n    for _ in range(t):\r\n        # print(\"Case #\" + str(_ + 1) + \": \", end=\"\")\r\n        solve()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()\r\n"
}