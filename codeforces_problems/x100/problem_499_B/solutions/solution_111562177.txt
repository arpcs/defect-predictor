{
    "id": 111562177,
    "contestId": 499,
    "creationTimeSeconds": 1617197052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 499,
        "index": "B",
        "name": "Lecture",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1000,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 499,
        "members": [
            {
                "handle": "N.T.49"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1419438600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n\r\n\r\nint main() {\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL);\r\n\tcout << fixed;\r\n\t\r\n\tint n, m;\r\n\tcin >> n >> m;\r\n\tmap<string,string> mp;\r\n\tfor(int i = 0; i<m; i++) {\r\n\t\tstring s1, s2;\r\n\t\tcin >> s1 >> s2;\r\n\t\tif(s2.length()<s1.length()) {\r\n\t\t\tmp.insert(make_pair(s1,s2));\r\n\t\t}else {\r\n\t\t\tmp.insert(make_pair(s2,s1));\r\n\t\t}\r\n\t}\r\n\tfor(int i =0; i<n; i++) {\r\n\t\tstring str;\r\n\t\tcin >> str;\r\n\t\tif(mp.find(str)!=mp.end()) {\r\n\t\t\tcout << mp.find(str)->second << \" \";\r\n\t\t}else {\r\n\t\t\tcout << str << \" \";\r\n\t\t}\r\n\t}cout << endl;\r\n\treturn 0;\r\n} \r\n",
    "defect_evaluation_v4": {
        "good solution": 90,
        "wrong solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 7,
        "bit manipulation": 2,
        "greedy": 4,
        "brute force": 6,
        "graphs": 3,
        "sortings": 3,
        "search": 3,
        "trees": 5,
        "strings": 7,
        "number theory": 2,
        "combinatorics": 2,
        "two pointers": 4,
        "geometry": 1,
        "shortest paths": 3,
        "divide and conquer": 2,
        "probabilities": 1,
        "data structures": 5,
        "game theory": 3,
        "2d, 3d": 1,
        "recursive": 4,
        "well-commented": 3,
        "self-documenting": 2,
        "complex": 7,
        "readable": 4,
        "well-named": 4,
        "efficient": 5,
        "reusable": 4,
        "documented": 3,
        "good error-handling": 4,
        "good solution": 5,
        "compilation error": 2,
        "runtime error": 3
    }
}