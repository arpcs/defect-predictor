{
    "id": 171451318,
    "contestId": 1661,
    "creationTimeSeconds": 1662675570,
    "relativeTimeSeconds": 1410,
    "problem": {
        "contestId": 1661,
        "index": "A",
        "name": "Array Balancing",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1661,
        "members": [
            {
                "handle": "hffhdbd"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1662674160
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define Fast_D cout << fixed << setprecision(13);\r\n#define FastIO             \\\r\n  ios::sync_with_stdio(0); \\\r\n  cin.tie(0);              \\\r\n  cout.tie(0);\r\n#define int long long int\r\n#define float double\r\n#define all(v) v.begin(), v.end()\r\n#define allr(v) v.rbegin(), v.rend()\r\n#define fi first\r\n#define se second\r\n#define dbg(x) cout << #x << \" : \" << x << endl;\r\n#define dbgt(x, t) cout << #x << \" : \" << x << \" and \" << #t << \" : \" << t << endl;\r\n#define print(x) cout << x << \"\\n\";\r\n#define print_c(i, x) cout << \"Case #\" << i << \": \" << x << endl;\r\n#define print_array(vec) \\\r\n  for (auto x : vec) {   \\\r\n    cout << x << \" \";    \\\r\n  }                      \\\r\n  cout << endl;\r\n#define cin_(vec)     \\\r\n  for (auto& v : vec) \\\r\n    cin >> v;\r\n#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>\r\n\r\nstruct pair_hash {\r\n  inline std::size_t operator()(const std::pair<int, int>& v) const {\r\n    return v.first * 31 + v.second;\r\n  }\r\n};\r\nint power(int a, int b, int m) {\r\n  a %= m;\r\n  int res = 1;\r\n  while (b > 0) {\r\n    if (b & 1)\r\n      res = res * a % m;\r\n    a = a * a % m;\r\n    b >>= 1;\r\n  }\r\n  return res;\r\n}\r\nint lcm(int a, int b) {\r\n  float gcd = __gcd(a, b);\r\n  float ret = float(a) / gcd;\r\n  ret = b * ret;\r\n  return ret;\r\n}\r\nint compute_hash(string const& s) {\r\n  const int p = 31;\r\n  const int m = 1e9 + 9;\r\n  int hash_value = 0;\r\n  int p_pow = 1;\r\n  for (char c : s) {\r\n    hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;\r\n    p_pow = (p_pow * p) % m;\r\n  }\r\n  return hash_value;\r\n}\r\nint inf = 1e18;\r\nint mod = 1e8;\r\nconst int Max = 1e5 + 1;\r\nint utils = inf;\r\n// // Factorial\r\n// vector<int> fac;\r\n// int modInverse(int n, int p) {\r\n//   return power(n, p - 2, p);\r\n// }\r\n// int nCr(int n, int r, int p) {\r\n//   if (n == r)\r\n//     return 1;\r\n//   return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) %\r\n//          p;\r\n// }\r\n\r\n// // Sieve of eratosthenes\r\n// vector<int> prime;\r\n// vector<int> factors_num(int x) {\r\n//   vector<int> v;\r\n//   while (prime[x]) {\r\n//     v.push_back(prime[x]);\r\n//     int temp = prime[x];\r\n//     while (x % temp == 0) {\r\n//       x /= temp;\r\n//     }\r\n//   }\r\n//   sort(all(v));\r\n//   return v;\r\n// }\r\n\r\n// int find(vector<int>& parent, int i) {\r\n//   if (parent[i] == -1)\r\n//     return i;\r\n//   return parent[i] = find(parent, parent[i]);\r\n// }\r\n// void Union(vector<int>& parent, int x, int y) {\r\n//   parent[x] = y;\r\n// }\r\n\r\n// // Make Lps Array\r\n// vector<int> makeLPS(string str) {\r\n//   vector<int> lps(str.size(), 0);\r\n//   int len = 0;\r\n\r\n//   int i = 1;\r\n//   while (i < str.size()) {\r\n//     if (str[i] == str[len]) {\r\n//       len++;\r\n//       lps[i] = len;\r\n//       i++;\r\n//     } else {\r\n//       if (len != 0) {\r\n//         len = lps[len - 1];\r\n//       } else {\r\n//         lps[i] = 0;\r\n//         i++;\r\n//       }\r\n//     }\r\n//   }\r\n//   return lps;\r\n// }\r\n\r\n// // Binary Search\r\n// int bin_search(vector<int>& vec, int foo, int st = 0) {\r\n//   int en = vec.size() - 1;\r\n//   while (st <= en) {\r\n//     int mid = (st + en) / 2;\r\n//     if (vec[mid] > foo) {\r\n//       en = mid - 1;\r\n//     } else {\r\n//       st = mid + 1;\r\n//     }\r\n//   }\r\n//   return en + 1;\r\n// }\r\nint dp[25][2];\r\nint rec(int idx, int flag, vector<int>& a, vector<int>& b) {\r\n  // cout << idx << \" \" << flag << endl;\r\n  if (idx == a.size())\r\n    return 0;\r\n  if (dp[idx][flag] != -1)\r\n    return dp[idx][flag];\r\n\r\n  if (flag == 0) {\r\n    int op1 = abs(a[idx] - a[idx - 1]) + abs(b[idx] - b[idx - 1]) + rec(idx + 1, 0, a, b);\r\n    int op2 = abs(b[idx] - a[idx - 1]) + abs(a[idx] - b[idx - 1]) + rec(idx + 1, 1, a, b);\r\n    return dp[idx][flag] = min(op1, op2);\r\n  }\r\n\r\n  int op1 = abs(a[idx] - b[idx - 1]) + abs(b[idx] - a[idx - 1]) + rec(idx + 1, 0, a, b);\r\n  int op2 = abs(b[idx] - b[idx - 1]) + abs(a[idx] - a[idx - 1]) + rec(idx + 1, 1, a, b);\r\n  return dp[idx][flag] = min(op1, op2);\r\n}\r\nvoid solve(int T) {\r\n  memset(dp, -1, sizeof(dp));\r\n  int n;\r\n  cin >> n;\r\n  vector<int> a(n), b(n);\r\n  cin_(a);\r\n  cin_(b);\r\n\r\n  cout << min(rec(1, 0, a, b), rec(1, 1, a, b)) << endl;\r\n}\r\n\r\nint32_t main() {\r\n#ifndef ONLINE_JUDGE\r\n  // for getting input from input.txt\r\n  freopen(\"input.txt\", \"r\", stdin);\r\n  // for writing output to output.txt\r\n  freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n  FastIO;\r\n  Fast_D;\r\n\r\n  // fac.assign(Max, 0);\r\n  // fac[0] = 1;\r\n  // for (int i = 1; i <= Max; i++)\r\n  //   fac[i] = (fac[i - 1] * i) % mod;\r\n\r\n  // prime.assign(1000001, -1);\r\n  // prime[0] = prime[1] = 0;\r\n  // for (int i = 2; i <= 100001; i++) {\r\n  //   if (prime[i] != -1)\r\n  //     continue;\r\n\r\n  //   for (int j = i; j <= 100001; j += i)\r\n  //     prime[j] = i;\r\n  // }\r\n\r\n  int T;\r\n  T = 1;\r\n  cin >> T;\r\n  for (int i = 1; i <= T; i++) {\r\n    solve(i);\r\n  }\r\n  cerr << \"time taken : \" << (float)clock() / CLOCKS_PER_SEC << \" secs\"\r\n       << \"\\n\";\r\n}"
}