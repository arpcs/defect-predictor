{
    "id": 156972794,
    "contestId": 1661,
    "creationTimeSeconds": 1652416600,
    "relativeTimeSeconds": 400,
    "problem": {
        "contestId": 1661,
        "index": "A",
        "name": "Array Balancing",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1661,
        "members": [
            {
                "handle": "Vendetta_With_Honour"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1652416200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<iostream>\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long int ll;\r\ntypedef long double lld;\r\n#define pb push_back\r\nconst long long int  mod = 1000000007;\r\n//const long long int  mod = 998244353 ;\r\n\r\n#include <ext/pb_ds/assoc_container.hpp> // Common file\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <functional> // for less\r\n#include <iostream>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n\r\ntypedef tree<int, null_type, less_equal<int>,\r\n            rb_tree_tag,\r\n            tree_order_statistics_node_update>\r\nordered_set;\r\n\r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nll fact(ll n){ ll ans=1; for(int i=1;i<=n;i++){ ans=(ans*i)%mod; } return ans;}\r\nll gcd(ll a,ll b){ if(b==0)return a; if(b>a) return gcd(b,a); return gcd(b,a%b);}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nvector<pair<char, ll>> comp_s(string &s){ vector<pair<char, ll>> v; v.pb({s[0], 1}); for(auto i = 0; i<s.size(); i++){ if(s[i] == v.back().first){ v.back().second++;} else{ v.pb({s[i], 1});} } return v; }\r\nbool isprime(ll n){if(n == 2){return true;}ll x = 0;for(int i = 2; i*i<=n; i++){if(n%i == 0){return false;}}return true;}\r\nvector<ll> prefix_function(string s, ll n){vector<ll> pi(n, 0);for(int i = 1; i<n; i++){ll cl = pi[i-1];while(cl > 0 && s[i] != s[cl]){cl = pi[cl-1];}if(s[i] == s[cl]){pi[i] = cl+1;}}return pi;}\r\n//------------------------------------  --------------------------------------------------------------------------------------------------------------------------------------------------//\r\n\r\nvoid solve(){\r\n    \r\n    int n; cin>>n;\r\n    vector<ll> a(n, 0), b(n, 0);\r\n    for(int i = 0; i<n; i++){\r\n        cin>>a[i];\r\n    }\r\n    for(int i = 0; i<n; i++){\r\n        cin>>b[i];\r\n    }\r\n    vector<ll> s(n, 0), ws(s, 0);\r\n    s[1] = abs(a[0] - b[1]) + abs(b[0] - a[1]);\r\n    ws[1] = abs(a[0]-a[1])+abs(b[0]-b[1]);\r\n    for(int i = 2; i<n; i++){\r\n        ll x = abs(a[i]-a[i-1]) + abs(b[i]-b[i-1]);\r\n        ll y = abs(a[i]-b[i-1])+abs(b[i]-a[i-1]);\r\n        s[i] = min(s[i-1] + x, ws[i-1] + y);\r\n        ws[i] = min(s[i-1] + y, ws[i-1] + x);\r\n    }\r\n    ll ans = min(s[n-1], ws[n-1]);\r\n    cout<<ans<<\"\\n\";\r\n}\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    int T;\r\n    //T = 1;\r\n    cin>>T;\r\n    while(T--){\r\n        //cout<<T<<\"\\n\";\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n",
    "suggested_categories": [
        "algorithm",
        "dynamic programming",
        "competitive programming",
        "mathematics",
        "data structures",
        "algorithms and data structures",
        "programming contest",
        "code optimization",
        "efficient programming",
        "competitive coding",
        "optimized algorithms",
        "complexity analysis",
        "c++ programming",
        "coding practice",
        "problem solving",
        "programming patterns",
        "online judge",
        "input-output handling",
        "algorithm design",
        "code efficiency"
    ]
}