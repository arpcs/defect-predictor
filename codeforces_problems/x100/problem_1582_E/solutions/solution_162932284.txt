{
    "id": 162932284,
    "contestId": 1582,
    "creationTimeSeconds": 1657049677,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "Tinky-Winky"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 702,
    "memoryConsumedBytes": 482201600,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n#define pb push_back\r\n#define F first\r\n#define S second\r\n#define B break\r\n#define C continue\r\n#define R return\r\n#define mid ((l+r)>>1)\r\n#define left (2*idx)\r\n#define right (2*idx+1)\r\n\r\nusing namespace  std;\r\n\r\nconst int Mod=1e9+7 , N=100009 , M=600;\r\n\r\nint n , a[N];\r\nll dp[N][M] , pre[N] ;\r\n\r\nint main(){\r\n    ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\n\r\n    int t;\r\n    cin >> t ;\r\n    while(t--){\r\n        int Ans=0;\r\n        cin >> n ;\r\n        for(int i=1 ; i<=n ; i++){\r\n            cin >> a[i];\r\n            pre[i]=pre[i - 1]+a[i];\r\n        }\r\n        pre[n+1]=0;\r\n        int x=0;\r\n        while(x*(x+1)/2<=n){\r\n            x++;\r\n        }\r\n        x--;\r\n        for(int i=1 ; i<=n+1 ; i++){\r\n            dp[i][0]=Mod;\r\n        }\r\n        for(int i=1 ; i<=n+1 ; i++){\r\n            for(int len=1 ; len<=x+1 ; len++){\r\n                dp[i][len]=0;\r\n            }\r\n        }\r\n        for(int i=n ; i ; i--){\r\n            for(int len=1 ; len<=x && i+len-1<=n ; len++){\r\n                dp[i][len]=max(dp[i][len],dp[i+1][len]);\r\n                if(dp[i+len][len-1]>pre[i+len-1]-pre[i-1])dp[i][len]=max(dp[i][len],pre[i+len-1]-pre[i-1]);\r\n                Ans = max(Ans , len*(dp[i][len]>0));\r\n            }\r\n        }\r\n        cout << Ans << endl ;\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}