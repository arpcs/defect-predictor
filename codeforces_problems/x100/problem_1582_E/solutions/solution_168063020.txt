{
    "id": 168063020,
    "contestId": 1582,
    "creationTimeSeconds": 1660385067,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "BeBeBe66666"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 4608000,
    "source": "from itertools import accumulate\r\nimport os, sys\r\nfrom io import BytesIO, IOBase\r\nfrom array import array\r\n\r\nfrom copy import deepcopy\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, 8192))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, 8192))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\n\r\ninput = lambda: sys.stdin.readline().strip()\r\nints = lambda: list(map(int, input().split()))\r\nInt = lambda: int(input())\r\n\r\n\r\ndef queryInteractive(a, b, c):\r\n    print('? {} {} {}'.format(a, b, c))\r\n    sys.stdout.flush()\r\n    return int(input())\r\n\r\n\r\ndef answerInteractive(x1, x2):\r\n    print('! {} {}'.format(x1, x2))\r\n    sys.stdout.flush()\r\n\r\n\r\ninf = 10000000000000\r\n\r\nT = Int()\r\nwhile T:\r\n    T -= 1\r\n    n = Int()\r\n    arr = ints()\r\n    prefix = [0] + list(accumulate(arr))\r\n\r\n    # print(check(2))\r\n    r = 1\r\n    while r * (r + 1) // 2 <= n:\r\n        r += 1\r\n    r -= 1\r\n    dp = [array('q', [inf] * (r + 1)) for _ in range(n + 1)]\r\n    t = r\r\n    for i in range(n + 1):\r\n        dp[i][0] = 0\r\n    for i in range(n):\r\n        for k in range(1, t + 1):\r\n            if i - t + k < 0:\r\n                continue\r\n            d = prefix[i + 1] - prefix[i - (t - k)]\r\n            if dp[i - (t - k)][k - 1] < d:\r\n                # if dp[i][k] != inf:\r\n                dp[i + 1][k] = min(dp[i][k], d)\r\n                # else:\r\n                #    dp[i + 1][k] = d\r\n            else:\r\n                dp[i + 1][k] = dp[i][k]\r\n        # print(dp)\r\n    for k in range(t, 0, -1):\r\n        if dp[n][k] != inf:\r\n            print(k)\r\n            break\r\n\r\n"
}