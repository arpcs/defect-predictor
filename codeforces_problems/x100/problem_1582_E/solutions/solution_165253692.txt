{
    "id": 165253692,
    "contestId": 1582,
    "creationTimeSeconds": 1658456448,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 51302400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int maxn = 100000 + 10;\nconst int SZ = 500;\n\nint n, a[maxn], m;\nbool dp[SZ][maxn];\nll sum[maxn];\n\ninline ll getS(int l, int r) {\n    if(l > r) return 0;\n    return sum[r] - sum[l - 1];\n}\n\ninline void work() {\n    scanf(\"%d\", &n);\n    for(int i = 1;i <= n;i ++) scanf(\"%d\", &a[i]);\n    sum[0] = 0;\n    for(int i = 1;i <= n;i ++) sum[i] = sum[i - 1] + a[i];\n    for(int i = n + 1;i <= n + 5;i ++) sum[i] = sum[i - 1];\n    for(int i = 1;i <= n + 1;i ++) {\n        int now = i * (i + 1) / 2;\n        if(now > n) {\n        \tm = i - 1;\n        \tbreak;\n\t\t\t\t}\n    }\n//    cout << m << endl;\n    for(int i = 0;i <= m;i ++) memset(dp[i],0,sizeof(dp[i]));\n    for(int i = 1;i <= n;i ++) dp[1][i] = 1; \n    int Ans = 1;\n    for(int i = 2;i <= m;i ++) {\n        ll Mx = -1; int k = n;\n        for(int j = n - i + 1;j >= 1;j --) {\n            while(j + i <= k) {\n                if(dp[i - 1][k]) {\n                    ll now = getS(k,k + (i - 1) - 1);\n                    Mx = max(Mx,now);\n                }\n                k --;\n            }\n            ll now = getS(j,j + i - 1);\n            if(now < Mx) {\n                dp[i][j] = 1;\n                Ans = max(Ans,i);\n            }\n        }\n    }\n    printf(\"%d\\n\", Ans);\n}\n\nint main() {\n    int T; scanf(\"%d\", &T);\n    while(T --) {\n        work();\n    }\n    return 0;\n}\n\t\t\t\t\t\t\t \t\t\t \t \t\t\t \t   \t\t \t  \t\t\t"
}