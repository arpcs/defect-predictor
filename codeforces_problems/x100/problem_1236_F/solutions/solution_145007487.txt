{
    "id": 145007487,
    "contestId": 1236,
    "creationTimeSeconds": 1643876041,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1236,
        "index": "F",
        "name": "Alice and the Cactus",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "dfs and similar",
            "graphs",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1236,
        "members": [
            {
                "handle": "eecs"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571319300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 826,
    "memoryConsumedBytes": 53862400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int maxn = 500010, P = 1000000007;\r\nint n, m, ans1, ans2, dep[maxn], pw[2 * maxn], fa[maxn];\r\nvector<int> G[maxn], H[maxn];\r\nvector<vector<int>> cyc;\r\n\r\nint main() {\r\n    scanf(\"%d %d\", &n, &m);\r\n    for (int i = 1, u, v; i <= m; i++) {\r\n        scanf(\"%d %d\", &u, &v);\r\n        G[u].push_back(v), G[v].push_back(u);\r\n    }\r\n    for (int i = pw[0] = 1; i <= 2 * n; i++) {\r\n        pw[i] = 1LL * (P + 1) / 2 * pw[i - 1] % P;\r\n    }\r\n    function<void(int)> dfs = [&](int u) {\r\n        for (int v : G[u]) {\r\n            if (!dep[v]) {\r\n                dep[v] = dep[fa[v] = u] + 1, dfs(v);\r\n            } else if (dep[v] < dep[u] - 1) {\r\n                vector<int> V;\r\n                for (int i = u; ; i = fa[i]) {\r\n                    V.push_back(i), H[i].push_back(dep[u] - dep[v] + 1);\r\n                    if (i == v) break;\r\n                }\r\n                cyc.push_back(V);\r\n            }\r\n        }\r\n    };\r\n    dfs(dep[1] = 1);\r\n    // E[x] = a - b + c\r\n    int sc = 0;\r\n    for (auto &vec : cyc) (sc += pw[vec.size()]) %= P;\r\n    ans1 = (1LL * pw[1] * n + sc - 1LL * pw[2] * m % P + P) % P;\r\n    // E[x^2] = (a - b + c)^2 = a^2 + b^2 + c^2 + 2(ac - ab - bc)\r\n    ans2 = (1LL * pw[1] * n + 1LL * pw[2] * n % P * (n - 1)) % P;\r\n    ans2 = (ans2 + 1LL * pw[2] * m) % P;\r\n    long long e4 = 1LL * m * (m - 1);\r\n    for (int i = 1; i <= n; i++) {\r\n        long long e3 = 1LL * G[i].size() * (G[i].size() - 1);\r\n        ans2 = (ans2 + e3 % P * pw[3]) % P, e4 -= e3;\r\n    }\r\n    ans2 = (ans2 + e4 % P * pw[4] + 1LL * sc * sc) % P;\r\n    for (int i = 1; i <= n; i++) {\r\n        int s = 0;\r\n        for (int j : H[i]) {\r\n            ans2 = (ans2 + 2LL * pw[j] * s) % P, (s += pw[j]) %= P;\r\n        }\r\n    }\r\n    for (auto &vec : cyc) {\r\n        ans2 = (1LL * ans2 + pw[vec.size()] - pw[2 * vec.size()] + P) % P;\r\n        ans2 = (ans2 + 2LL * pw[vec.size() + 1] * (n - vec.size())) % P;\r\n        int s = 0;\r\n        for (int u : vec) s += G[u].size() - 2;\r\n        ans2 = (ans2 - 2LL * pw[vec.size() + 1] * s % P + P) % P;\r\n        ans2 = (ans2 - 2LL * pw[vec.size() + 2] * (m - s - vec.size()) % P + P) % P;\r\n    }\r\n    ans2 = (ans2 - 2LL * pw[2] * (2 * m) % P + P) % P;\r\n    ans2 = (ans2 - 2LL * pw[3] * m % P * (n - 2) % P + P) % P;\r\n    printf(\"%lld\\n\", (ans2 - 1LL * ans1 * ans1 % P + P) % P);\r\n    return 0;\r\n}"
}