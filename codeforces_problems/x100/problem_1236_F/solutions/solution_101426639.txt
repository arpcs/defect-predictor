{
    "id": 101426639,
    "contestId": 1236,
    "creationTimeSeconds": 1608124177,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1236,
        "index": "F",
        "name": "Alice and the Cactus",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "dfs and similar",
            "graphs",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1236,
        "members": [
            {
                "handle": "tenkei"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571319300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 483,
    "memoryConsumedBytes": 45670400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define INF 2147483647\r\n#define infL (1LL<<60)\r\n#define inf (1<<30)\r\n#define inf9 (1000000000)\r\n#define MOD 1000000007//998244353//1000000007\r\n#define EPS 1e-9\r\n#define Gr 9.8\r\n#define PI acos(-1)\r\n#define REP(i,n) for(int (i)=0;(i)<(int)(n);(i)++)\r\n#define REQ(i,n) for(int (i)=1;(i)<=(int)(n);(i)++)\r\n#define lch (rt<<1)\r\n#define rch (rt<<1|1)\r\n#define readmp(n) for(int i=0,u,v;i<n;i++) {scanf(\"%d%d\",&u,&v); mp[u].push_back(v); mp[v].push_back(u);}\r\ntypedef  long long ll;\r\ntypedef pair<int, int> pii;\r\ntypedef pair<ll, ll> pll;\r\ntypedef long double ld;\r\ntypedef unsigned int uint;\r\ntypedef unsigned long long ull;\r\ntypedef ll ValType;\r\ntemplate<typename  T> void maxtt(T& t1, T t2) {\r\n    t1=max(t1,t2);\r\n}\r\ntemplate<typename  T> void mintt(T& t1, T t2) {\r\n    t1=min(t1,t2);\r\n}\r\n#define MAX 500135\r\n\r\nbool debug = 0;\r\nint n,m,k;\r\n//int dx[4] = {0,1,0,-1}, dy[4] = {1,0,-1,0};\r\nstring direc=\"URDL\";//\"RDLU\";\r\nconst ll MOD2 = (ll)MOD * (ll)MOD;\r\nll ln, lk, lm;\r\nvoid etp(bool f = 0) {\r\n    puts(f ?\"YES\" : \"NO\");\r\n    exit(0);\r\n}\r\nvoid addmod(int &x, int y, int mod = MOD){\r\n    x+=y; if (x>=mod) x-=mod;\r\n    if(x<0) x+=mod;\r\n    assert(x>=0 && x<mod);\r\n}\r\nvoid et(int x=-1) {\r\n    printf(\"%d\\n\", x); exit(0);\r\n}\r\nll fastPow(ll x, ll y, int mod=MOD) {\r\n    ll ans = 1;\r\n    while(y>0) {\r\n        if(y&1) ans = (x * ans)%mod;\r\n        x = x*x%mod;\r\n        y>>=1;\r\n    }\r\n    return ans;\r\n}\r\nll gcd1(ll x, ll y) {\r\n    return y?gcd1(y,x%y):x;\r\n}\r\n\r\n\r\nint u[MAX],v[MAX];\r\nvector<int> mp[MAX];\r\nint lev[MAX], N;\r\nint cutid[MAX],bcc[MAX],ccnt,bcnt ;\r\nvector<int> vb[MAX] ;\r\nstack<int> s ;\r\nint tarjan(int x,int f,int l){\r\n    int low ; lev[x]=low=l ;\r\n    s.push(x) ;\r\n    int iscut=0,son=0 ;\r\n    for(auto i : mp[x]) if(i!=f)\r\n    {\r\n        if(lev[i]!=-1){low=min(low,lev[i]) ; continue ;}\r\n        son++;\r\n        int tmp=tarjan(i,x,l+1) ; low=min(low,tmp) ;\r\n        if(tmp>=l)\r\n        {\r\n            iscut=1 ; bcnt++ ;\r\n            int top ;\r\n            do\r\n            {\r\n                bcc[top=s.top()]=bcnt ;\r\n                vb[bcnt].push_back(top) ;\r\n                s.pop() ;\r\n            }while(top!=i) ;\r\n            bcc[x]=bcnt ; vb[bcnt].push_back(x) ;\r\n        }\r\n    }\r\n    if((x!=f && iscut) || (x==f && son>1)) cutid[x]=++ccnt ;\r\n    return low ;\r\n}\r\n\r\nint inv[20], p[MAX], bccCnt[MAX], bccP[MAX];\r\nvector<int> lps;\r\nvoid fmain(int tid) {\r\n    scanf(\"%d%d\", &n, &m);\r\n    REQ(i,m) {\r\n        scanf(\"%d%d\",u+i,v+i); mp[u[i]].push_back(v[i]);\r\n        mp[v[i]].push_back(u[i]);\r\n    }\r\n    memset(lev, -1, sizeof lev);\r\n    tarjan(1, 0,  0);\r\n    REQ(i,19) inv[i]=fastPow(i, MOD-2);\r\n    REQ(i,bcnt) if (vb[i].size()>2){\r\n        for(int x: vb[i]) bccCnt[x]++;\r\n        lps.push_back(i);\r\n    }\r\n    //a*a\r\n    int aa = (ll)n*(n+1)%MOD* inv[4] %MOD;\r\n    int bb= 0;\r\n    REQ(i,m) {\r\n        int o = mp[u[i]].size()-1 + mp[v[i]].size()-1;\r\n        addmod(bb, inv[4]);\r\n        addmod(bb, (ll)o*inv[8]);\r\n        addmod(bb, (ll)inv[16]*(m-o-1)%MOD);\r\n    }\r\n    //\r\n    int cc=0, Sum=0;;\r\n    for(int id : lps) {\r\n        p[id]=fastPow(fastPow(2, vb[id].size()), MOD-2);\r\n        addmod(cc, p[id]);\r\n        for(int x: vb[id]) addmod(bccP[x], p[id]);\r\n        addmod(Sum, p[id]);\r\n    }\r\n    for(int id: lps) {\r\n        int ss=0;\r\n        for(int x: vb[id]) addmod(ss, bccP[x]-p[id]);\r\n        addmod(cc, (ll)p[id]*ss*2%MOD);\r\n        addmod(cc, (ll)(Sum-p[id]-ss)*p[id]%MOD);\r\n    }\r\n    //4\r\n    int ab=0;\r\n    REQ(i,n) {\r\n        addmod(ab, (ll)mp[i].size() * inv[4] % MOD);\r\n        addmod(ab, (ll)(m-mp[i].size()) * inv[8] % MOD);\r\n    }\r\n    int ac=0;\r\n    for(int id: lps) {\r\n        addmod(ac, (ll)vb[id].size() * p[id] % MOD);\r\n        addmod(ac, (ll)(n-vb[id].size()) * p[id] % MOD * inv[2] % MOD);\r\n    }\r\n    int bc=0;\r\n    for(int id: lps) {\r\n        addmod(bc, (ll)vb[id].size() * p[id] % MOD);\r\n        int es=0;\r\n        for(int x: vb[id]) es += mp[x].size()-2;\r\n        addmod(bc, (ll)es * p[id] % MOD * inv[2] % MOD);\r\n        addmod(bc, (ll)(m-es-vb[id].size()) * p[id] % MOD * inv[4] % MOD);\r\n    }\r\n    int Ans=0;\r\n    addmod(Ans, aa); addmod(Ans, bb); addmod(Ans, cc);\r\n    addmod(Ans, ac); addmod(Ans, ac);\r\n    addmod(Ans, -ab); addmod(Ans, -ab);\r\n    addmod(Ans, -bc); addmod(Ans, -bc);\r\n    int A=(ll)n*inv[2]%MOD;\r\n    int B=(ll)m*inv[4]%MOD;\r\n    int C=Sum;\r\n    int Ex = 0;\r\n    addmod(Ex, A); addmod(Ex, -B); addmod(Ex, C);\r\n    addmod(Ans,-(ll)Ex*Ex%MOD);\r\n    \r\n    printf(\"%d\\n\", Ans);\r\n}\r\nint main() {\r\n    int t=1;\r\n//    scanf(\"%d\", &t);\r\n    REQ(i,t) {\r\n        fmain(i);\r\n    }\r\n    return 0;\r\n}\r\n"
}