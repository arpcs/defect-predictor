{
    "id": 188341589,
    "contestId": 336,
    "creationTimeSeconds": 1673108074,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "J_Jonah_Jameson"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 94,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 3174400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nusing int32 = int32_t;\r\nusing int64 = int64_t;\r\n\r\nconst int32 MAXN = 200'000;\r\nconst int32 MOD = 1'000'000'007;\r\n\r\nint64 fastModularPower(int64 base, int64 power)\r\n{\r\n    int64 result = 1;\r\n    while (power > 0)\r\n    {\r\n        if (power % 2 == 1)\r\n        {\r\n            result = (result * base) % MOD;\r\n        }\r\n        base = (base * base) % MOD;\r\n        power /= 2;\r\n    }\r\n    return result;\r\n}\r\n\r\nint64 getInverse(int64 value)\r\n{\r\n    return fastModularPower(value, MOD - 2);\r\n}\r\n\r\nvector<int64> factorial(MAXN + 1, 1);\r\nvector<int64> inverse_factorial(MAXN + 1, 1);\r\n\r\nint64 choose(int64 n, int64 r)\r\n{\r\n    if (n < r)\r\n    {\r\n        return 0;\r\n    }\r\n    return (((factorial[n] * inverse_factorial[n - r]) % MOD) * inverse_factorial[r]) % MOD;\r\n}\r\n\r\nint32 main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    int32 N, M, G;\r\n    cin >> N >> M >> G;\r\n\r\n    for (int64 i = 1; i <= MAXN; ++i)\r\n    {\r\n        factorial[i] = (factorial[i - 1] * i) % MOD;\r\n    }\r\n\r\n    inverse_factorial[MAXN] = getInverse(factorial[MAXN]);\r\n    for (int64 i = MAXN - 1; i >= 1; --i)\r\n    {\r\n        inverse_factorial[i] = (inverse_factorial[i + 1] * (i + 1)) % MOD;\r\n    }\r\n\r\n    if (N == 0)\r\n    {\r\n        cout << (G == (M == 1 ? 1 : 0) ? 1 : 0) << \"\\n\";\r\n    }\r\n    else if (M == 0)\r\n    {\r\n        cout << (N % 2 != G ? 1 : 0) << \"\\n\";\r\n    }\r\n    else\r\n    {\r\n        int64 result = 0;\r\n        for (int32 zeroes = 0; zeroes <= N; ++zeroes)\r\n        {\r\n            if (zeroes % 2 == G)\r\n            {\r\n                if (zeroes == N && M == 1)\r\n                {\r\n                    continue;\r\n                }\r\n                result = (result + choose(N + M - zeroes - 1, M - 1)) % MOD;\r\n            }\r\n            else\r\n            {\r\n                if (zeroes == N && M == 1)\r\n                {\r\n                    result = (result + 1) % MOD;\r\n                }\r\n            }\r\n        }\r\n        cout << result << \"\\n\";\r\n    }\r\n    return 0;\r\n}"
}