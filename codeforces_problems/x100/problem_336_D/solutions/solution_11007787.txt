{
    "id": 11007787,
    "contestId": 336,
    "creationTimeSeconds": 1430847429,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "Baby_Steps"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 94,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 2355200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int MOD = 1000000007;\r\nconst int MN = 100005;\r\n\r\nint fact[2 * MN];\r\n\r\nint get_pow(int x, int p) {\r\n    if (p == 0) return 1;\r\n    if (p % 2) return (1LL * x * get_pow(1LL * x * x % MOD, p / 2)) % MOD;\r\n    return get_pow(1LL * x * x % MOD, p / 2);\r\n}\r\n\r\n\r\nint nCr(int n, int r) {\r\n    if (r < 0) return 0;\r\n    return (1LL * fact[n] * get_pow(fact[r], MOD - 2) % MOD) * get_pow(fact[n - r], MOD - 2) % MOD;\r\n}\r\n\r\nint solve(int n, int m, bool g) {\r\n    if (n < 0) return 0;\r\n    if (m + n == 1) {\r\n        if (n && !g) return 1;\r\n        if (m && g) return 1;\r\n        return 0;\r\n    }\r\n\r\n    if (g) {\r\n        return solve(n - 1, m, 0);\r\n    } else {\r\n        return (nCr(n + m - 1, m - 1) + solve(n - 1, m, 1)) % MOD;\r\n    }\r\n}\r\n\r\nint main() {\r\n    int n, m, g;\r\n    scanf(\"%d %d %d\", &n, &m, &g);\r\n\r\n    fact[0] = 1;\r\n    for (int i = 1; i <= n + m + 3; ++i) {\r\n        fact[i] = (1LL * i * fact[i - 1]) % MOD;\r\n    }\r\n\r\n    printf(\"%d\\n\", solve(n, m, g));\r\n    return 0;\r\n}\r\n"
}