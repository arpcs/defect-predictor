{
    "id": 4260768,
    "contestId": 336,
    "creationTimeSeconds": 1376126013,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "ericpts"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++0x",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 409600,
    "source": "#include <cstdio>\n#include <vector>\n#include <utility>\n\nusing namespace std;\n\nconst int MOD = int(1e9) + 7;\nint fact[int(1e5) + 10];\n\nvoid euclid(int & a, const int &x, int &b, const int &y)\n{\n    /*\n     * a*x + b*y = gcd(x,y)\n     * which is 1 in this case\n     * since MOD is a prime number\n     */\n    if(y == 0){\n        a = 1,\n        b = 0;\n    } else {\n        int _a,_b;\n        euclid(_a,y,_b,x % y);\n        a = _b;\n        b = _a - _b * (x / y);\n    }\n}\n\ninline int inv_mod(const int &val)\n{\n    int trash,ret;\n    euclid(ret,val,trash,MOD);\n    if(ret < 0)\n        ret += MOD;\n    return ret;\n}\n\ninline int comb(const int &n,const int &r)\n{\n    //n! / r! / (n-r)!;\n    return ( 1LL * ((1LL * fact[n] * inv_mod(fact[r]) ) % MOD) * inv_mod(fact[n-r]) ) % MOD;\n}\n\nlong long rez = 0;\n\nvoid fun(int zero,int one,bool g)\n{\n    while(1){\n        if(zero < 0 || one < 0)return;\n\n        if(zero + one == 1){\n            if(g == 0 && zero || g == 1 && one)\n                ++rez;\n            return ;\n        }\n        if(g == 1){\n            --zero;\n            g = 0;\n        }\n        else{\n            rez += comb(zero + one - 1, one - 1);\n            if(rez >= MOD)\n                rez -= MOD;\n            --zero;\n            g = 1;\n        }\n    }\n}\nint main()\n{\n    int n,m,g,i;\n    fact[0] = 1;\n    scanf(\"%d%d%d\",&n,&m,&g);\n    for(i = 1 ; i <= n + m ; ++ i)\n        fact[i] = 1LL * fact[i-1] * i % MOD;\n    fun(n,m,g);\n    printf(\"%d\\n\",int(rez % MOD));\n}\n"
}