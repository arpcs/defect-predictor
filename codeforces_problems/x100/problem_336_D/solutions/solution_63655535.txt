{
    "id": 63655535,
    "contestId": 336,
    "creationTimeSeconds": 1572266138,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "anshul_jindal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 60,
    "timeConsumedMillis": 248,
    "memoryConsumedBytes": 1638400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long int\n#define F first\n#define S second\n#define hell 1000000007\n\n  \n// To find GCD of a and b \nll gcd(ll a, ll b); \n  \n// To compute x raised to power y under modulo m \nll power(ll x, unsigned ll y, unsigned ll m); \n  \n// Function to find modular inverse of a under modulo m \n// Assumption: m is prime \nll modInverse(ll a, ll m) \n{ \n    ll g = gcd(a, m); \n    if (g != 1) \n        cout << \"Inverse doesn't exist\"; \n    else\n    { \n        // If a and m are relatively prime, then modulo inverse \n        // is a^(m-2) mode m \n        return power(a, m-2, m); \n    } \n} \n  \n// To compute x^y under modulo m \nll power(ll x, unsigned ll y, unsigned ll m) \n{ \n    if (y == 0) \n        return 1; \n    ll p = power(x, y/2, m) % m; \n    p = (p * p) % m; \n  \n    return (y%2 == 0)? p : (x * p) % m; \n} \n  \n// Function to return gcd of a and b \nll gcd(ll a, ll b) \n{ \n    if (a == 0) \n        return b; \n    return gcd(b%a, a); \n} \n\nstd::vector<ll> fac(200005);\n\nvoid calcfac()\n{\n  ll ans=1;\n  fac[0]=1;\n  for(ll i=1;i<=200000;i++)\n  {\n    fac[i]=(fac[i-1]*i)%hell;\n  }\n  return ;\n}\n\nll ncr(ll n, ll r)\n{\n  ll num1 = fac[n];\n  ll den1 = modInverse(fac[n-r],hell);\n  ll den2 = modInverse(fac[r],hell);\n\n  return ((num1*den1)%hell*den2)%hell;\n\n}\n\nint main()\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  \n  ll i,j,k,n,m,p,q,t,ans=0,sum=0,ct=0,flag=0;\n  ll g;\n  calcfac();\n  ll ct0=0,ct1=0;\n  cin>>n>>m>>g; //0->n, 1->m\n  ct0=n; ct1=m-1;\n  while(ct0+ct1>0 && ct1>=0 && ct0>=0)\n  {\n    //if(ct0==0) {ans=(ans+1)%hell; break;}\n    //else if(ct1==0) {ans=(ans+1)%hell; break;}\n    ans=(ans+ncr(ct0+ct1,min(ct0,ct1)))%hell;\n    ct0-=2;\n  }\n\n  if(n+m==1)\n    {if(n==0) cout<<g;\n      else\n      {\n        if(g==0) cout<<1;\n        else cout<<0;\n      }\n    return 0;\n    }\n  if(n%2!=0 && m==1) ans+=1;\n  if(g==0) cout<<ans;\n  else \n  {\n    cout<<(ncr(n+m,min(n,m))-ans+hell)%hell;\n  }\n\n\n  return 0;\n}\n\n\n"
}