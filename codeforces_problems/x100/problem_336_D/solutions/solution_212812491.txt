{
    "id": 212812491,
    "contestId": 336,
    "creationTimeSeconds": 1688814147,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "bkifhr7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 94,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 1638400,
    "source": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define ll long long\n\nconst ll mod = 1000000007;\nconst ll MAXIMUM = 200000;\n\nll fact[MAXIMUM+1];\n\n//10e9+5 representation = 111011100110101100101000000101\n\nstring bin = \"111011100110101100101000000101\";\n\nll pow(ll a){\n    ll ans = 1;\n    for (int i=0; i<30; i++){\n        ans = (ans * ans) % mod;\n        if (bin[i] == '1'){\n            ans = (ans * a) % mod;\n        }\n    }\n    return ans % mod;\n}\n\nll comb(ll a, ll b){\n    ll ans = (fact[a] * pow((fact[a-b] * fact[b]) % mod)) % mod;\n    return ans;\n}\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    ll n,m,g;\n    ll ans = 0;\n    fact[0] = 1;\n    for (ll i=1; i<=MAXIMUM; i++){\n        fact[i] = (fact[i-1] * i) % mod;\n    }\n    cin >> n >> m >> g;\n    if (m==0){\n        if (n%2!=g){\n            ans = 1;\n        }\n    } else {\n        for (ll i=g; i<=n; i += 2){\n            if (i+1 < n+m){\n                ans = (ans + comb(n+m-i-1, m-1)) % mod;\n            }\n        }\n        if ((m==1) && (n%2!=g)){\n            ans++;\n        }\n    }\n    cout << ans % mod;\n    return 0;\n}\n\n\t\t\t\t \t \t\t\t    \t   \t\t\t \t \t  \t\t\t"
}