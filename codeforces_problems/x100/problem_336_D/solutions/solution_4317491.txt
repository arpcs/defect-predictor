{
    "id": 4317491,
    "contestId": 336,
    "creationTimeSeconds": 1377032518,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "Sabelan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "Java 7",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 94,
    "timeConsumedMillis": 560,
    "memoryConsumedBytes": 102400,
    "source": "import java.util.Scanner;\nimport java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.TreeSet;\nimport java.util.HashMap;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author Sabelan\n */\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tScanner in = new Scanner(inputStream);\n\t\tPrintWriter out = new PrintWriter(outputStream);\n\t\tTaskD solver = new TaskD();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskD {\n  static final long MOD = (int) 1e9 + 7;\n  long[] fact;\n\n  public long choose(int n, int m) {\n    return Utils.multUnderMod(MOD, fact[n], Utils.modInverse(fact[m], MOD), Utils.modInverse(fact[n - m], MOD));\n  }\n\n  public void solve(int testNumber, Scanner in, PrintWriter out) {\n    int n = in.nextInt();\n    int m = in.nextInt();\n    int g = in.nextInt();\n\n    if (n == 0) {\n      if (m == 1) {\n        if (g == 1) out.println(1);\n        else out.println(0);\n        return;\n      }\n      if (g == 0) out.println(1);\n      else out.println(0);\n      return;\n    }\n\n    if (m == 0) {\n      if ((n & 1) != g) out.println(1);\n      else out.println(0);\n      return;\n    }\n\n    fact = Utils.fact(n + m, MOD);\n\n    long ans = 0;\n    for (int i = g; i <= n; i += 2) {\n      if (m == 1 && i == n) continue;\n      ans += choose(m - 1 + n - i, m - 1);\n      ans %= MOD;\n    }\n\n    if (m == 1 && (g != (n & 1))) {\n      ans++;\n      ans %= MOD;\n    }\n    out.println(ans);\n  }\n}\n\nclass Utils {\n\n  public static long multUnderMod(long mod, long... arr) {\n    long res = 1;\n    for (long a : arr) {\n      res *= a;\n      res %= mod;\n    }\n    return res;\n  }\n\n  public static long[] fact(int cap, long mod) {\n    long[] arr = new long[cap + 1];\n    arr[0] = 1;\n    for (int i = 1; i <= cap; i++)\n      arr[i] = (arr[i - 1] * i) % mod;\n    return arr;\n  }\n\n  public static long modInverse(long v, long modPrime) {\n    return modPow(v, modPrime - 2, modPrime);\n  }\n\n  public static long modPow(long v, long pow, long mod) {\n    v %= mod;\n    if (pow == 0) return 1;\n    if (pow == 1) {\n      return v;\n    }\n    if ((pow & 1) == 0) {\n      long a = modPow(v, pow / 2, mod);\n      a *= a;\n      a %= mod;\n      return a;\n    }\n    long a = modPow(v, pow - 1, mod);\n    a *= v;\n    a %= mod;\n    return a;\n  }\n\n  }\n\n"
}