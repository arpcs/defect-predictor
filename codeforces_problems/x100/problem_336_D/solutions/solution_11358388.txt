{
    "id": 11358388,
    "contestId": 336,
    "creationTimeSeconds": 1433000047,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "Sunnat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 624,
    "memoryConsumedBytes": 2252800,
    "source": "#include <stdio.h>\r\nconst int M = 1000000007;\r\nconst int maxn = 100001;\r\nint t[maxn << 2];\r\nint a[maxn];\r\nint p[maxn];\r\nint n, up, down1, down2;\r\nint A, B;\r\nint binpow(int a, int n){\r\n    int r = 1;\r\n    while(n){\r\n        if(n % 2) r = (1ll * r * a) % M;\r\n        n /= 2;\r\n        a = (1ll * a * a) % M;\r\n    }\r\n    return r;\r\n}\r\nvoid erotosfen(){\r\n    for(int i = 2; i <= n; i ++){\r\n        if(!p[i]){\r\n            p[i] = i;\r\n            if(1ll * i * i <= n){\r\n                for(int j = i * i; j <= n; j += i){\r\n                    if(!p[j]) p[j] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nvoid fillones(){\r\n    for(int i = (maxn << 2) - 1; i; i --) t[i] = 1;\r\n}\r\nvoid update(int v, int l, int r, int id){\r\n    if(l == r){\r\n        t[v] = binpow(l, a[l]);\r\n        return ;\r\n    }\r\n    int m = (l + r) / 2;\r\n    if(id > m) update(v * 2 + 1, m + 1, r, id);\r\n    else update(v * 2, l, m, id);\r\n    t[v] = (1ll * t[v * 2 + 1] * t[v * 2]) % M;\r\n}\r\nvoid add(int N, int k){\r\n    int P, c;\r\n    while(N > 1){\r\n        P = p[N];\r\n        c = 0;\r\n        while(p[N] == P){\r\n            N /= P;\r\n            c ++;\r\n        }\r\n        \r\n        a[P] += k * c;\r\n        update(1, 1, n, P);\r\n    }\r\n}\r\nvoid solve(int N, int k){\r\n    while(up > N){\r\n        add(up, -1);\r\n        add(up - k, 1);\r\n        up --;\r\n    }\r\n}\r\nint main(){\r\n    int g, res = 0;\r\n    scanf(\"%d %d %d\",&A,&B,&g);\r\n    if(B == 0){\r\n        if(g == 0) puts(A % 2 ? \"1\" : \"0\");\r\n        else puts(A % 2 ? \"0\" : \"1\");\r\n        return 0;\r\n    }\r\n    if(A == 0){\r\n        if(g == 1) puts(B == 1 ? \"1\" : \"0\");\r\n        else puts(B == 1 ? \"0\" : \"1\");\r\n        return 0;\r\n    }\r\n    if(g == 1 && A == 1){\r\n        puts(B == 1 ? \"0\" : \"1\");\r\n        return 0;\r\n    }\r\n    up = n = A + B;\r\n    erotosfen();\r\n    fillones();\r\n    \r\n    for(int i = 2; i <= B - 1; i ++) add(i, -1);\r\n    for(int i = 2; i <= n; i ++) add(i, 1);\r\n    for(int i = 2; i <= n - (B - 1); i ++) add(i, -1);\r\n    \r\n    while(A){\r\n        if(g == 1){\r\n            g = 0;\r\n        }else{\r\n            solve(A + B - 1, B - 1);\r\n            res = (res + t[1]) % M;\r\n            g = 1;\r\n        }\r\n        A --;\r\n    }\r\n    if(B < 3) res = (res + 1) % M;\r\n    printf(\"%d\",res);\r\n}"
}