{
    "id": 9368948,
    "contestId": 336,
    "creationTimeSeconds": 1420499586,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "fnch"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\n\r\npublic class Main {\r\n\r\n    IIO io;\r\n\r\n    Main(IIO io) {\r\n        this.io = io;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n//\r\n        Main m = new Main(new ConsoleIO());\r\n        m.solve();\r\n\r\n//        Tester test = new Tester();\r\n//        test.run();\r\n    }\r\n\r\n    public void solve() {\r\n        long mod = 1000000007;\r\n        int[] l = io.readIntArray();\r\n        int zeros = l[0];\r\n        int ones = l[1];\r\n        int start = l[2];\r\n        int n = zeros + ones;\r\n        long[] bigs = new long[n];\r\n        bigs[0] = 1;\r\n        for (int i = 1, j = ones; i <= zeros; i++, j++) {\r\n            bigs[i] = (bigs[i - 1] * j / i) % mod;\r\n        }\r\n        long res = 0;\r\n        for (; zeros >= 0; ) {\r\n            if (start == 0) {\r\n                if (ones > 0 && ones + zeros > 1) {\r\n                    res += bigs[zeros];\r\n                    res %= mod;\r\n                }\r\n                if (zeros == 1 && ones == 0)\r\n                    res++;\r\n                zeros--;\r\n                start = 1;\r\n            } else {\r\n                if (zeros == 0 && ones == 1)\r\n                    res++;\r\n                zeros--;\r\n                start = 0;\r\n            }\r\n        }\r\n        io.writeLine(Long.toString(res % mod));\r\n    }\r\n}\r\n\r\nclass ConsoleIO extends BaseIO {\r\n    BufferedReader br;\r\n\r\n    public ConsoleIO(){\r\n        br = new BufferedReader(new InputStreamReader(System.in));\r\n    }\r\n\r\n    public void writeLine(String s) {\r\n        System.out.println(s);\r\n    }\r\n\r\n    @Override\r\n    public void writeInt(int a) {\r\n        System.out.print(a);\r\n        System.out.print(' ');\r\n    }\r\n\r\n    public String readLine() {\r\n        try {\r\n            return br.readLine();\r\n        }\r\n        catch (Exception ex){\r\n            return \"\";\r\n        }\r\n    }\r\n}\r\nabstract class BaseIO implements IIO {\r\n    @Override\r\n    public int readInt() {\r\n        return Integer.parseInt(this.readLine());\r\n    }\r\n\r\n    @Override\r\n    public long readLong() {\r\n        return Long.parseLong(this.readLine());\r\n    }\r\n\r\n    @Override\r\n    public int[] readIntArray() {\r\n        String line = this.readLine();\r\n        String[] nums = line.split(\" \");\r\n        int[] res = new int[nums.length];\r\n        for (int i = 0; i < nums.length; i++) {\r\n            res[i] = Integer.parseInt(nums[i]);\r\n        }\r\n        return res;\r\n    }\r\n}\r\ninterface IIO {\r\n    void writeLine(String s);\r\n    void writeInt(int a);\r\n    String readLine();\r\n    int readInt();\r\n    long readLong();\r\n    int[] readIntArray();\r\n}\r\n\r\n"
}