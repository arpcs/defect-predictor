{
    "id": 4359159,
    "contestId": 336,
    "creationTimeSeconds": 1377645143,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "gangsterveggies"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 94,
    "timeConsumedMillis": 560,
    "memoryConsumedBytes": 8806400,
    "source": "#include <stdio.h>\n#include <string.h>\n\n#define MOD 1000000007\n\ntypedef long long int lld;\n\nint N, m, G;\nlld f[300050];\n\nlld fact(int vl)\n{\n  if (f[vl] != -1)\n    return f[vl];\n  return f[vl] = (((lld) vl) * fact(vl - 1)) % MOD;\n}\n\nlld pow(lld b, lld exp)\n{\n  if (exp == 0)\n    return 1;\n  if (exp == 1)\n    return b;\n  if (exp % 2)\n  {\n    lld sq = pow(b, exp / 2);\n    return (b * ((sq * sq) % MOD)) % MOD;\n  }\n  else\n  {\n    lld sq = pow(b, exp / 2);\n    return (sq * sq) % MOD;\n  }\n}\n\nlld divide(lld vl, lld di)\n{\n  return (vl * pow(di, MOD - 2)) % MOD;\n}\n\nint calc(int n, int g)\n{\n  if (!n)\n  {\n    if (m == 0)\n      return g != 0;\n    if (m == 1)\n      return g;\n    return !g;\n  }\n  if (g)\n  {\n    lld ans = fact(n + m);\n    ans = divide(ans, fact(n));\n    ans = divide(ans, fact(m));\n    return (ans - ((lld) calc(n, 0)) + MOD) % MOD;\n  }\n  else\n  {\n    lld ans = fact(n + m - 1);\n    ans = divide(ans, fact(n));\n    ans = divide(ans, fact(m - 1));\n    return (ans + ((lld) calc(n - 1, 1))) % MOD;\n  }\n}\n\nint main()\n{\n  memset(f, -1, sizeof f);\n  f[0] = 1;\n  scanf(\"%d %d %d\", &N, &m, &G);\n  printf(\"%d\\n\", calc(N, G));\n  return 0;\n}\n"
}