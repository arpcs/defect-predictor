{
    "id": 123166679,
    "contestId": 336,
    "creationTimeSeconds": 1626853688,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 336,
        "index": "D",
        "name": "Vasily the Bear and Beautiful Strings",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 336,
        "members": [
            {
                "handle": "luogu_bot5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1376062200
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 94,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 7168000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define int long long\r\n\r\ninline int read() {\r\n    int x = 0, f = 1;\r\n    char ch = getchar();\r\n    while (ch < '0' || ch > '9') {\r\n        if (ch == '-') f = -1;\r\n        ch = getchar();\r\n    }\r\n    while (ch >= '0' && ch <= '9') {\r\n        x = x * 10 + (ch ^ 48);\r\n        ch = getchar();\r\n    }\r\n    return x * f;\r\n}\r\n\r\nconst int mod = 1000000007;\r\nint n, m, g, jc[200010], inv[200010], ans;\r\n\r\ninline int fpow(int n, int p) {\r\n    n %= mod;\r\n    int ans = 1, base = n;\r\n    while (p) {\r\n        if (p & 1) ans = ans * base % mod;\r\n        base = base * base % mod;\r\n        p >>= 1;\r\n    }\r\n    return ans;\r\n}\r\n\r\ninline int C(int n, int m) {\r\n    return jc[n] * inv[n - m] % mod * inv[m] % mod;\r\n}\r\n\r\nsigned main() {\r\n    n = read();\r\n    m = read();\r\n    g = read();\r\n    jc[0] = 1;\r\n    for (int i = 1; i <= n + m; ++i) jc[i] = jc[i - 1] * i % mod;\r\n    inv[n + m] = fpow(jc[n + m], mod - 2);\r\n    for (int i = n + m - 1; i >= 0; --i) inv[i] = inv[i + 1] * (i + 1) % mod;\r\n    if (!n) return printf(\"%lld\", m == 1 ? g : g ^ 1) & 0;\r\n    if (!m) return printf(\"%lld\", n & 1 ? g ^ 1 : g) & 0;\r\n    if (g) {\r\n        for (int i = 1; i <= n; i += 2) ans = (ans + C(n + m - i - 1, m - 1)) % mod;\r\n        if (m == 1) {\r\n            if (n & 1) ans = (ans - 1 + mod) % mod;\r\n            else ans = (ans + 1) % mod;\r\n        }\r\n    } else {\r\n        for (int i = 0; i <= n; i += 2) ans = (ans + C(n + m - i - 1, m - 1)) % mod;\r\n        if (m == 1) {\r\n            if (n & 1) ans = (ans + 1) % mod;\r\n            else ans = (ans - 1 + mod) % mod;\r\n        }\r\n    }\r\n    printf(\"%lld\", ans);\r\n    return 0;\r\n}"
}