{
    "contestId": 1742,
    "index": "D",
    "name": "Coprime",
    "type": "PROGRAMMING",
    "rating": 1100,
    "tags": [
        "brute force",
        "greedy",
        "number theory"
    ],
    "desc": {
        "title": "D. Coprime",
        "statement": "<p>Given an array of $$$n$$$ positive integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 1000$$$). Find the maximum value of $$$i + j$$$ such that $$$a_i$$$ and $$$a_j$$$ are coprime,$$$^{\\dagger}$$$ or $$$-1$$$ if no such $$$i$$$, $$$j$$$ exist.</p><p>For example consider the array $$$[1, 3, 5, 2, 4, 7, 7]$$$. The maximum value of $$$i + j$$$ that can be obtained is $$$5 + 7$$$, since $$$a_5 = 4$$$ and $$$a_7 = 7$$$ are coprime.</p><p>$$$^{\\dagger}$$$ Two integers $$$p$$$ and $$$q$$$ are <a href=\"https://en.wikipedia.org/wiki/Coprime_integers\">coprime</a> if the only positive integer that is a divisor of both of them is $$$1$$$ (that is, their <a href=\"https://en.wikipedia.org/wiki/Greatest_common_divisor\">greatest common divisor</a> is $$$1$$$).</p>",
        "inputSpecification": "<p>The input consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains an integer $$$n$$$ ($$$2 \\leq n \\leq 2\\cdot10^5$$$)\u00a0\u2014 the length of the array.</p><p>The following line contains $$$n$$$ space-separated positive integers $$$a_1$$$, $$$a_2$$$,..., $$$a_n$$$ ($$$1 \\leq a_i \\leq 1000$$$)\u00a0\u2014 the elements of the array.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, output a single integer \u00a0\u2014 the maximum value of $$$i + j$$$ such that $$$i$$$ and $$$j$$$ satisfy the condition that $$$a_i$$$ and $$$a_j$$$ are coprime, or output $$$-1$$$ in case no $$$i$$$, $$$j$$$ satisfy the condition.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 2 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">7</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 3 5 2 4 7 7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 3 4 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5 4 3 15 12 16</div><div class=\"test-example-line test-example-line-even test-example-line-6\">5</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1 2 2 3 6</div>",
                "output": "\n6\n12\n9\n-1\n10\n7\n"
            }
        ],
        "note": "<p>For the first test case, we can choose $$$i = j = 3$$$, with sum of indices equal to $$$6$$$, since $$$1$$$ and $$$1$$$ are coprime.</p><p>For the second test case, we can choose $$$i = 7$$$ and $$$j = 5$$$, with sum of indices equal to $$$7 + 5 = 12$$$, since $$$7$$$ and $$$4$$$ are coprime.</p>"
    },
    "suggested_categories": [
        "number theory",
        "integer arrays",
        "divisors",
        "greatest common divisor",
        "optimization",
        "algorithm design",
        "number properties",
        "combinatorics",
        "mathematical programming",
        "prime numbers",
        "modular arithmetic",
        "big-o notation",
        "dynamic programming",
        "greedy algorithms",
        "mathematical operations",
        "optimal solutions",
        "test cases",
        "error handling",
        "complexity analysis",
        "problem solving"
    ]
}