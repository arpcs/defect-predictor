{
    "id": 227256310,
    "contestId": 1742,
    "creationTimeSeconds": 1696802660,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1742,
        "index": "D",
        "name": "Coprime",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1742,
        "members": [
            {
                "handle": "Deep1729"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665671700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 764,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define endl '\\n'\r\n#define int long long\r\n#define author Deepanshu Kumar\r\nconst int MOD = 1e9 + 7 ;\r\nconst int INF = LLONG_MAX >> 1;\r\n\r\nint factorial(int p)\r\n{\r\n    \r\n    return (p==1 || p==0) ? 1: p * factorial(p - 1); \r\n}\r\nint getmax(int arr[], int n){\r\n   if(n==1) return arr[0];\r\n \r\n   return max(arr[n-1], getmax(arr, n-1));\r\n}\r\nsigned main() {\r\n    ios::sync_with_stdio(false); cin.tie(NULL);\r\n \r\n        int t; cin >> t;\r\n        while (t--) {\r\n      int f[1024] ;\r\n      int n ;\r\n     cin>>n ;\r\n      memset(f,-1,sizeof f) ;\r\n       for(int i=0;i<n;i++){\r\n      int x ;\r\n      cin>>x ;\r\n      f[x]= i ;\r\n  }\r\n  int maxi = -1 ;\r\n   for(int x=1;x<=1000;x++){\r\n        for(int y=1;y<=1000;y++){\r\n            \r\n            if(gcd(x,y)== 1 && f[x] !=-1 && f[y] !=-1){\r\n                maxi = max( maxi, f[x]+1+f[y]+1) ;\r\n            }\r\n            \r\n        }\r\n   }\r\n   cout<< maxi <<endl ;\r\n \r\n     }\r\n\r\n return 0;\r\n\r\n        }\r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            \r\n         \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n      \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          \r\n          "
}