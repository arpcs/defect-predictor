{
    "id": 95292476,
    "contestId": 1101,
    "creationTimeSeconds": 1602440592,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1101,
        "index": "B",
        "name": "Accordion",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1101,
        "members": [
            {
                "handle": "ViditBhardwaj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1547217300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 588,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 2048000,
    "source": "// by VIDIT BHARDWAJ\r\n#include<bits/stdc++.h>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\ntypedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> pbds;\r\n\r\n// when we want to insert same element multiple times into pbds    \r\n// typedef tree<pair<int,int>,null_type,less<pair<int,int > >,rb_tree_tag,tree_order_statistics_node_update> pbds;\r\n\r\n#define int                     long long int\r\n#define pb                      push_back\r\n#define mk(arr,n,type)          type *arr=new type[n]; //mk(pos,n,vector<int>)\r\n#define setbits(x)              __builtin_popcountll(x)\r\n#define zerobits(x)             __builtin_ctzll(x)\r\n#define ps(x,y)                 fixed<<setprecision(y)<<x // cout<<ps(1.255114,4)\r\n#define tc(t)                   int t; cin>>t; while(t--)\r\n\r\nconst long long mod=1000000007;\r\nconst int inf=1000000000000000000;\r\nconst long double pi = 3.14159265358979323846264338;\r\n\r\nbool double_compare(double a, double b, double epsilon = 0.001)\r\n{\r\n    return std::abs(a - b) < epsilon;\r\n}\r\nint lcm(int a,int b){\r\n    return (a*b)/__gcd(a,b);\r\n}\r\nbool isPrime(int n) \r\n{ \r\n    if (n <= 1) \r\n        return false; \r\n    if (n <= 3) \r\n        return true; \r\n  \r\n    if (n % 2 == 0 || n % 3 == 0) \r\n        return false; \r\n  \r\n    for (int i = 5; i * i <= n; i = i + 6){\r\n        if (n % i == 0 || n % (i + 2) == 0) \r\n            return false; \r\n    }\r\n  \r\n    return true; \r\n} \r\n// Fermat's little theorem\r\nint pow(int a, unsigned int b,int mod1){\r\n\r\n    int ans=1;\r\n    while(b){\r\n\r\n        if(b&1ll){\r\n\r\n            ans*=a;\r\n            ans%=mod1;\r\n        }\r\n        b/=2;\r\n        a*=a;\r\n        a%=mod1;\r\n    }\r\n\r\n    return ans;\r\n}\r\nint inverse(int a,int mod1){\r\n\r\n    return pow(a,mod1-2,mod1);    // a^-1%p\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nsigned main()\r\n{\r\n    string str; cin>>str;\r\n    int n=str.size();\r\n\r\n    int l=0;\r\n    while(str[l]!='[' && l<n){\r\n        l++;\r\n    }\r\n    while(str[l]!=':' && l<n){\r\n        l++;\r\n    }\r\n\r\n    int r=n-1;\r\n    while(str[r]!=']' && r>=0){\r\n        r--;\r\n    }\r\n    while(str[r]!=':' && r>=0){\r\n        r--;\r\n    }\r\n\r\n    if(l>=r){\r\n        cout<<\"-1\"<<endl;\r\n    }\r\n    else{\r\n        int cnt=0;\r\n        for(int i=l;i<=r;i++){\r\n            if(str[i]=='|'){\r\n                cnt++;\r\n            }\r\n        }\r\n\r\n        cout<<cnt+4<<endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/*\r\n    [:|.....|:]\r\n*/"
}