{
    "id": 217210638,
    "contestId": 1627,
    "creationTimeSeconds": 1691218343,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "tr1ten"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 49868800,
    "source": "#include <cstdio>\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#include \"ext/pb_ds/assoc_container.hpp\"\r\n#include \"ext/pb_ds/tree_policy.hpp\"\r\nusing namespace __gnu_pbds;\r\ntemplate<class T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;\r\ntemplate<typename T> \r\nusing ordered_multiset = tree<T, null_type,less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;\r\n// find_by_order(k)  returns iterator to kth element starting from 0;\r\n// order_of_key(k) returns count of elements strictly smaller than k;\r\n// useful defs\r\ntypedef long long ll; \r\ntypedef vector<ll> vi;\r\ntypedef vector<vi> vii;\r\ntypedef pair<ll,ll> pi;\r\ntypedef vector<pi> vpi;\r\ntypedef unordered_map<ll,ll> mll;\r\n#define pb push_back\r\n#define mp make_pair\r\n#define rep(i,a,b) for (int i = (a); i < (b); i++)\r\n#define per(i,a,b) for (int i = (b)-1; i >= (a); i--)\r\n#define trav(a,arr) for (auto& a: (arr))\r\n#define sz(x) (int)(x).size()\r\n#define mk_vec(name,sz,value) vi name(sz,value)\r\n#define mk_mat(name,n,m,value) vii name(n, vi(m, value))\r\n#define contains(x) find(x) != string::npos\r\n#define tkv(vec,sz) rep(i,0,sz) cin>>vec[i]\r\n#define srv(vec) sort(vec.begin(), vec.end())\r\n#define all(x) x.begin(), x.end()\r\n#define less(a,b) a<b\r\n#define vsum(vec) accumulate(vec.begin(), vec.end(), 0L);\r\n#define vmax(vec) *max_element(vec.begin(), vec.end());\r\n#define vmin(vec) *min_element(vec.begin(), vec.end());\r\n#define pvc(vec) trav(x,vec) cout<<x<<\" \"; cout<<endl;\r\n#define put(x) cout<<(x)<<endl;\r\n#define put2(x,y) cout<<(x)<<\" \"<<(y)<<endl;\r\n#define put3(x,y,z) cout<<(x)<<\" \"<<(y)<<\" \"<<(z)<<endl;\r\n#define mod(x) (x + MOD)%MOD\r\n// debugging\r\n#define timed(x) {auto start = chrono::steady_clock::now(); x; auto end = chrono::steady_clock::now(); auto diff = end - start; cout << chrono::duration <double, milli> (diff).count() << \" ms\" << endl;}\r\n\r\n\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(long double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\n\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\nconst ll MOD = 1e9+7;\r\nconst ll INF = 1e10+5;\r\n\r\nstruct Ladder\r\n{\r\n    ll from_row;\r\n    ll from_col;\r\n    ll to_row;\r\n    ll to_col;\r\n    ll h;\r\n};\r\n\r\n// driver code\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    // freopen(\"input.in\",\"r\",stdin);\r\n    // freopen(\"output.out\",\"w\",stdout);\t  \r\n    int T=1;\r\n    cin>>T;\r\n    while(T--){\r\n        int n,m,k;\r\n        cin >> n >> m >>k;\r\n        vi xi(n+1);\r\n        rep(i,1,n+1) cin>>xi[i];\r\n        vector<set<int>> ladder_cols(n+1);\r\n        vector<vector<Ladder>> ladders(n+1);\r\n        unordered_map<ll,mll> health;\r\n        rep(i,0,k){\r\n            Ladder ld;\r\n            cin >> ld.from_row >> ld.from_col >> ld.to_row >> ld.to_col >> ld.h;\r\n            ladder_cols[ld.from_row].insert(ld.from_col);\r\n            ladder_cols[ld.to_row].insert(ld.to_col);\r\n            ladders[ld.from_row].push_back(ld);\r\n            \r\n        }\r\n        ladder_cols[1].insert(1);\r\n        ladder_cols[n].insert(m);\r\n        health[1][1] = 0;\r\n        auto exist= [&](int r,int c){\r\n            return health.count(r) && health[r].count(c);\r\n        };\r\n        \r\n        rep(row,1,n+1){ // find max health associ wi=ith each end point of ladder\r\n            priority_queue<pi> pq;\r\n            trav( col,ladder_cols[row]){\r\n                if(exist(row,col)) pq.push({health[row][col] , col} );\r\n            }\r\n            // debug(row,pq.size());\r\n            while(!pq.empty()){\r\n                auto p = pq.top();\r\n                // debug(row,p);\r\n                pq.pop();\r\n                if(p.first<health[row][p.second]) continue;\r\n                auto it = ladder_cols[row].lower_bound(p.second);\r\n                if(next(it)!=ladder_cols[row].end()){\r\n                    int nxt = *next(it);\r\n                    ll cost = abs(nxt-p.second)*xi[row];\r\n                    if(!exist(row,nxt) || health[row][nxt]<health[row][p.second] - cost ){\r\n                         health[row][nxt]=health[row][p.second] - cost;\r\n                        pq.push({health[row][nxt],nxt} );\r\n                    }\r\n                }\r\n                if((it)!=ladder_cols[row].begin()){\r\n                    int prv = *prev(it);\r\n                    ll cost = abs(prv-p.second)*xi[row];\r\n                    if(!exist(row,prv) || health[row][prv]<health[row][p.second] - cost ){\r\n                         health[row][prv]=health[row][p.second] - cost;\r\n                        pq.push({health[row][prv],prv} );\r\n                    }\r\n                }\r\n            }\r\n            trav(lad,ladders[row]){\r\n                if( exist(lad.from_row,lad.from_col) && (!exist(lad.to_row,lad.to_col) ||  health[lad.to_row][lad.to_col] <health[lad.from_row][lad.from_col]+lad.h )) {\r\n                    health[lad.to_row][lad.to_col] = health[lad.from_row][lad.from_col]+lad.h;\r\n                }\r\n            }\r\n            \r\n        }\r\n        if(!exist(n,m)) cout << \"NO ESCAPE\" << endl;\r\n        else cout << -health[n][m] << endl;\r\n\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}