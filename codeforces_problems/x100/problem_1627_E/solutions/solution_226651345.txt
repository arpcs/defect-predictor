{
    "id": 226651345,
    "contestId": 1627,
    "creationTimeSeconds": 1696446755,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Birehan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 1825,
    "memoryConsumedBytes": 92467200,
    "source": "\r\nimport sys, os, io\r\nfrom collections import defaultdict\r\n# input = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\n \r\ninf = 5 * 10**16\r\n \r\nfor _ in range(int(input())):\r\n    n, m, k = map(int, input().split())\r\n    a = list(map(int, input().split()))\r\n    go_to = defaultdict(list)\r\n    coords = set()\r\n    coords.add((1, 1))\r\n    coords.add((n, m))\r\n    for i in range(k):\r\n        p, q, r, s, t = map(int, input().split())\r\n        go_to[p * m + q] += [[r, s, t]]\r\n        coords.add((p, q))\r\n        coords.add((r, s))\r\n    coords = sorted(list(coords))\r\n    N, index = len(coords), {}\r\n    dp, prefix, suffix = [-inf] * N, [-inf] * N, [-inf] * N\r\n    for i in range(N): index[coords[i]] = i\r\n    pairs, i = [], 0\r\n    dp[0] = 0\r\n    while i < N:\r\n        j = i\r\n        while j + 1 < N and coords[j + 1][0] == coords[j][0]:\r\n            j += 1\r\n            if coords[j][0] == 1:\r\n                dp[j] = -a[0] * (coords[j][1] - 1)\r\n        pairs += [(i, j)]\r\n        i = j + 1\r\n    for start, end in pairs:\r\n        leftVal = rightVal = -inf\r\n        for i in range(start, end + 1):\r\n            x, y = coords[i]\r\n            leftVal = max(leftVal, prefix[i])\r\n            dp[i] = max(dp[i], leftVal - a[x - 1] * (y - 1))\r\n        for i in range(end, start - 1, -1):\r\n            x, y = coords[i]\r\n            rightVal = max(rightVal, suffix[i])\r\n            dp[i] = max(dp[i], rightVal - a[x - 1] * (m - y))\r\n        for i in range(start, end + 1):\r\n            if dp[i] == -inf: continue\r\n            x, y = coords[i]\r\n            for r, s, t in go_to[x * m + y]:\r\n                j = index[(r, s)]\r\n                dp[j] = max(dp[j], dp[i] + t)\r\n                prefix[j] = max(prefix[j], dp[j] + a[r - 1] * (s - 1))\r\n                suffix[j] = max(suffix[j], dp[j] + a[r - 1] * (m - s))\r\n    print(-dp[-1] if dp[-1] != -inf else \"NO ESCAPE\")",
    "suggested_categories": [
        "algorithm",
        "dynamic programming",
        "data structures",
        "complexity analysis",
        "optimization",
        "graph theory",
        "computational geometry",
        "problem solving",
        "python",
        "code quality",
        "code optimization",
        "input/output handling",
        "collections",
        "lists",
        "mapping",
        "non-linear data structures",
        "graph traversal",
        "conditional statements",
        "loop structures",
        "mathematics"
    ]
}