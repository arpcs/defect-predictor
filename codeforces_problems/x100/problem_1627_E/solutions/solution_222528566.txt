{
    "id": 222528566,
    "contestId": 1627,
    "creationTimeSeconds": 1694222803,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "2023zr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 732,
    "memoryConsumedBytes": 50278400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\nconst ll INF = 1e18;\r\nconst int N = 2e5 + 5;\r\nconst int M = 1e6 + 5;\r\n\r\n#define gc() (p1 == p2 && (p2 = (p1 = ibuf) + fread(ibuf, 1, SIZE, stdin), p1 == p2) ? EOF : *p1++)\r\nnamespace FastIO { static constexpr int SIZE = 1 << 21; char ibuf[SIZE], obuf[SIZE], *p1 = ibuf, *p2 = ibuf, *p3 = obuf; inline void read(char& c) { for(c = gc(); !std::isgraph(c); c = gc()); } inline void read(char* s) { char c = gc(); for(; !std::isgraph(c); c = gc());for(; std::isgraph(c); c = gc()) *s++ = c; *s = 0; } inline void read(std::string& s) { s.clear(); char c = gc(); for(; !std::isgraph(c); c = gc()); for(; std::isgraph(c); c = gc()) s.push_back(c); } inline void pc(char c) { if(p3 - obuf == SIZE) fwrite(obuf, 1, SIZE, stdout), p3 = obuf; *p3++ = c; } inline void write(char c) { pc(c); } inline void write(const char* s) { while(*s) pc(*s), ++s; } inline void write(std::string s) { for(const char c : s) pc(c); } template<typename _Tp>inline void read(_Tp& x) { x = 0; char c = gc(); int f = 0; for(; !std::isdigit(c); c = gc()) f |= c == '-'; for(; std::isdigit(c); c = gc()) x = (x << 1) + (x << 3) + (c ^ 48); return f ? x = ~x + 1 : 1, void(); } template<typename _Tp>inline void write(_Tp x) { static int stk[40]; int tp = 0; if(!x) return pc('0'), void(); if(x < 0) pc('-'), x = ~x + 1; while(x) stk[++tp] = x % 10, x /= 10; while(tp) pc(stk[tp--] + '0'); } template<typename _Tp>inline void writesp(_Tp x) { write(x), pc(' '); } template<typename _Tp>inline void writeln(_Tp x) { write(x), pc('\\n'); } template<typename _Tp, typename ...Args>inline void read(_Tp& x, Args& ...args) { read(x), read(args...); } template<typename _Tp, typename ...Args>inline void write(_Tp x, Args ...args) { write(x), write(args...); } template<typename _Tp, typename ...Args>inline void writesp(_Tp x, Args ...args) { writesp(x), writesp(args...); } template<typename _Tp, typename ...Args>inline void writeln(_Tp x, Args ...args) { writeln(x), writeln(args...); } inline void flush() { fwrite(obuf, p3 - obuf, 1, stdout); } }\r\nusing namespace FastIO;\r\n\r\nmap<ll, int> mp;\r\nint T, n, m, k, id;\r\nint e[M], ne[M], h[M], idx;\r\nll w[M], base[N], dis[M]; int vis[M];\r\nvector<int> t[N];\r\n\r\ninline void work(int x, int y)\r\n{\r\n\tll s = x * m + y;\r\n\tif(!mp.count(s))\r\n\t{\r\n\t\tmp[s] = ++ id;\r\n\t\tt[x].push_back(y);\r\n\t}\r\n}\r\n\r\ninline void add(int a, int b, ll c)\r\n{\r\n\te[ ++ idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx;\r\n}\r\n\r\ninline void spfa()\r\n{\r\n\tfor(register int i = 1 ; i <= id ; i ++)\r\n\t\tdis[i] = INF, vis[i] = 0;\r\n\tqueue <int> q;\r\n\tq.push(1);\r\n\tvis[1] = 1;\r\n\tdis[1] = 0;\r\n\twhile(!q.empty())\r\n\t{\r\n\t\tint x = q.front(); q.pop();\r\n\t\tvis[x] = 0; \r\n\t\tfor(register int i = h[x] ; i ; i = ne[i])\r\n\t\t{\r\n\t\t\tint y = e[i];\r\n\t\t\tif(dis[y] > dis[x] + w[i])\r\n\t\t\t{\r\n\t\t\t\tdis[y] = dis[x] + w[i];\r\n\t\t\t\tif(!vis[y])\r\n\t\t\t\t{\r\n\t\t\t\t\tq.push(y);\r\n\t\t\t\t\tvis[y] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\t\r\n\tcin >> T;\r\n\twhile(T --)\r\n\t{\r\n\t\tid = idx = 0; mp.clear();\r\n\t\tread(n, m, k);\r\n\t\tfor(register int i = 1 ; i <= n ; i ++) read(base[i]);\r\n\t\twork(1, 1);\r\n\t\tint a, b, c, d; ll v;\r\n\t\twhile(k --)\r\n\t\t{\r\n\t\t\tread(a, b, c, d, v);\r\n\t\t\twork(a, b); work(c, d);\r\n\t\t\tadd(mp[a * m + b], mp[c * m + d], - v);\r\n\t\t} \r\n\t\twork(n, m);\r\n\t\tfor(register int i = 1 ; i <= n ; i ++)\r\n\t\t{\r\n\t\t\tint siz = t[i].size();\r\n\t\t\tif(!siz) continue;\r\n\t\t\tsort(t[i].begin(), t[i].end());\r\n\t\t\tint last = mp[i * m + t[i][0]], now; ll val;\r\n\t\t\tfor(register int j = 1 ; j < siz ; j ++)\r\n\t\t\t{\r\n\t\t\t\tnow = mp[i * m + t[i][j]];\r\n\t\t\t\tval = base[i] * abs(t[i][j] - t[i][j - 1]);\r\n\t\t\t\tadd(last, now, val);\r\n\t\t\t\tadd(now, last, val);\r\n\t\t\t\tlast = now;\r\n\t\t\t}\r\n\t\t\tt[i].clear();\r\n\t\t}\r\n\t\tspfa();\r\n\t\tll s = n * m + m;\r\n\t\tif(dis[mp[s]] > INF / 2) writeln(\"NO ESCAPE\");\r\n\t\telse writeln(dis[mp[s]]);\r\n\t\tfor(int i = 1 ; i <= id ; i ++) h[i] = 0;\r\n\t}\r\n\tflush();\r\n\treturn 0;\r\n}"
}