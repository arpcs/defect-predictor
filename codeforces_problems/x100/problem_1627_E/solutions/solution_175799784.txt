{
    "id": 175799784,
    "contestId": 1627,
    "creationTimeSeconds": 1665599038,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "MridulAhi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 29081600,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n\r\nstruct custom_hash {\r\n        static uint64_t splitmix64(uint64_t x) {\r\n                // http://xorshift.di.unimi.it/splitmix64.c\r\n                x += 0x9e3779b97f4a7c15;\r\n                x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n                x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n                return x ^ (x >> 31);\r\n        }\r\n\r\n        size_t operator()(uint64_t x) const {\r\n                static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n                return splitmix64(x + FIXED_RANDOM);\r\n        }\r\n};\r\n\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\ntypedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;\r\n\r\n#define int long long\r\n#define sz(x) static_cast<int>((x).size())\r\n\r\nconst int mod = 998244353;\r\nconst int INF = 1e18;\r\n\r\n/* ----------------------------------------------------- GO DOWN ---------------------------------------------------------------------- */\r\n\r\n\r\n\r\n\r\n\r\n\r\nsigned main(){\r\n\r\n        ios::sync_with_stdio(0);\r\n        cin.tie(0);\r\n        cout.tie(0);\r\n        \r\n        int t;\r\n        cin >> t;\r\n\r\n        while (t--) {\r\n\r\n                int n, m, k;\r\n                cin >> n >> m >> k;\r\n\r\n                int c[n + 1];\r\n                for (int i = 1; i <= n; i++) cin >> c[i];\r\n\r\n                vector<vector<int>> ld[n + 1];\r\n                for (int i = 0; i < k; i++) {\r\n                        int x; cin >> x;\r\n                        vector<int> v(4);\r\n                        for (int j = 0; j < 4; j++) cin >> v[j];\r\n                        ld[x].push_back(v);\r\n                }\r\n\r\n                vector<vector<int>> dp[n + 1];\r\n                dp[1].push_back({1, 0});\r\n\r\n                int pos[m + 1];\r\n\r\n                for (int i = 1; i <= n; i++) {\r\n\r\n                        if (sz(dp[i]) == 0 || sz(ld[i]) == 0) continue;\r\n\r\n                        vector<vector<int>> v = dp[i];\r\n                        for (auto u : ld[i]) v.push_back(u);\r\n\r\n                        sort(v.begin(), v.end());\r\n\r\n                        int myet = INF;\r\n                        int xyet = 0;\r\n                        for (auto u : v) {\r\n                                if (sz(u) == 2) {\r\n                                        if (myet == INF) {\r\n                                                xyet = u[0];\r\n                                                myet = u[1];\r\n                                        }\r\n                                        else {\r\n                                                myet = min(u[1], myet + c[i] * (u[0] - xyet));\r\n                                                xyet = u[0];\r\n                                        }\r\n                                }\r\n                                else {\r\n                                        pos[u[0]] = INF;\r\n                                        myet += c[i] * (u[0] - xyet);\r\n                                        pos[u[0]] = min(pos[u[0]], myet);\r\n                                        xyet = u[0];\r\n                                }\r\n                        }\r\n\r\n                        reverse(v.begin(), v.end());\r\n\r\n                        myet = INF;\r\n                        xyet = 0;\r\n                        for (auto u : v) {\r\n                                if (sz(u) == 2) {\r\n                                        if (myet == INF) {\r\n                                                xyet = u[0];\r\n                                                myet = u[1];\r\n                                        }\r\n                                        else {\r\n                                                myet = min(u[1], myet - c[i] * (u[0] - xyet));\r\n                                                xyet = u[0];\r\n                                        }\r\n                                }\r\n                                else {\r\n                                        myet -= c[i] * (u[0] - xyet);\r\n                                        pos[u[0]] = min(pos[u[0]], myet);\r\n                                        xyet = u[0];\r\n                                }\r\n                        }\r\n\r\n                        for (auto u : ld[i]) {\r\n                                dp[u[1]].push_back({u[2], pos[u[0]] - u[3]});\r\n                        }\r\n\r\n                }\r\n\r\n                if (sz(dp[n]) == 0) cout << \"NO ESCAPE\\n\";\r\n                else {\r\n                        int ans = INF;\r\n                        for (auto u : dp[n]) {\r\n                                ans = min(ans, u[1] + c[n] * (m - u[0]));\r\n                        }\r\n                        cout << ans << \"\\n\";\r\n                }\r\n\r\n\r\n\r\n        }\r\n        \r\n        \r\n        \r\n\r\n}"
}