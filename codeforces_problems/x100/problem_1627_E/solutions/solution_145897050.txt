{
    "id": 145897050,
    "contestId": 1627,
    "creationTimeSeconds": 1644533322,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Jellybeans_333"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 18944000,
    "source": "size=int(input())    \r\nfor i in range(size):\r\n    ml =list(map(int,input().split()))\r\n    n= ml[0]\r\n    m= ml[1]\r\n    k= ml[2]\r\n    \r\n    c = list(map(int,input().split()))\r\n    ladder = [[] for __ in range(n)]\r\n    last=False\r\n    for j in range(k):\r\n         la = list(map(int, input().split()))\r\n         la_from = la[0]-1\r\n         if la[2]==n: last=True\r\n         ladder[la_from]+=[[la[1]-1,la[2]-1,la[3]-1,la[4]]]\r\n    if not last:\r\n        print(\"NO ESCAPE\")\r\n        continue\r\n    \r\n    if len(ladder[0])==0:\r\n        print(\"NO ESCAPE\")\r\n        continue\r\n    \r\n    out=[]\r\n    \r\n    \r\n    \r\n    def myfunc(nodex,nodey,cost):\r\n        global out\r\n        ncost=cost\r\n        if nodex==(n-1):\r\n            ncost += abs(nodey-(m-1))*c[nodex]\r\n            #print(ncost,' ',nodex,' ',nodey)\r\n            out +=[ncost]\r\n            return\r\n        leaf = len(ladder[nodex])\r\n        if leaf==0: return\r\n        for s in range(leaf):\r\n            #print(nodex,' ',nodey,' ',i)\r\n            ncost=cost\r\n            ncost += abs(nodey-ladder[nodex][s][0])*c[nodex]\r\n            #print(ncost,' ',nodex,' ',nodey)\r\n            ncost -= ladder[nodex][s][3]\r\n            #print(ncost,' ',nodex,' ',nodey)\r\n            \r\n            nx = ladder[nodex][s][1]\r\n            \r\n            ny = ladder[nodex][s][2]\r\n            \r\n            \r\n            myfunc(nx,ny,ncost)\r\n        \r\n   \r\n    \r\n    myfunc(0,0,0)\r\n    if len(out)==0 :\r\n        print(\"NO ESCAPE\")\r\n        continue\r\n    print(min(out))\r\n    \r\n   \r\n  "
}