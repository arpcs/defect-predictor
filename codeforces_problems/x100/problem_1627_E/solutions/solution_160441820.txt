{
    "id": 160441820,
    "contestId": 1627,
    "creationTimeSeconds": 1655133520,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "J_Jonah_Jameson"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvoid setI(string name)\r\n{\r\n    freopen((name + \".in\").c_str(), \"r\", stdin);\r\n}\r\n\r\nvoid setO(string name)\r\n{\r\n    freopen((name + \".out\").c_str(), \"w\", stdout);\r\n}\r\n\r\n// const int MOD = 998'244'353;\r\nconst int MOD = 1'000'000'007;\r\nconst long long INF = 1'000'000'000LL * 1'000'000'000;\r\n\r\nstruct Ladder\r\n{\r\n    int SC, ER, EC;\r\n    long long H;\r\n    Ladder(int sc, int er, int ec, long long h) : SC{sc}, ER{er}, EC{ec}, H{h}\r\n    {\r\n    }\r\n};\r\n\r\nvoid solveTestCase()\r\n{\r\n    int N, M, K;\r\n    cin >> N >> M >> K;\r\n\r\n    vector<long long> X(N + 1);\r\n    for (int i = 1; i <= N; ++i)\r\n    {\r\n        cin >> X[i];\r\n    }\r\n\r\n    vector<vector<int>> points(N + 1);\r\n    points[1].emplace_back(1);\r\n    points[N].emplace_back(M);\r\n\r\n    vector<vector<Ladder>> ladders(N + 1);\r\n    for (int i = 0; i < K; ++i)\r\n    {\r\n        int SR, SC, ER, EC, H;\r\n        cin >> SR >> SC >> ER >> EC >> H;\r\n        points[SR].emplace_back(SC);\r\n        points[ER].emplace_back(EC);\r\n        ladders[SR].emplace_back(SC, ER, EC, H);\r\n    }\r\n\r\n    vector<map<int, long long>> dp(N + 1);\r\n    for (int i = 1; i <= N; ++i)\r\n    {\r\n        sort(points[i].begin(), points[i].end());\r\n        for (int j : points[i])\r\n        {\r\n            dp[i][j] = INF;\r\n        }\r\n    }\r\n    dp[1][1] = 0;\r\n\r\n    for (int R = 1; R <= N; ++R)\r\n    {\r\n        vector<int> now = points[R];\r\n        int S = (int)now.size();\r\n        long long best = INF;\r\n\r\n        for (int i = 0; i < S; ++i)\r\n        {\r\n            int C = now[i];\r\n            if (0 < i)\r\n            {\r\n                best += X[R] * (C - now[i - 1]);\r\n            }\r\n            dp[R][C] = min(dp[R][C], best);\r\n            best = min(best, dp[R][C]);\r\n        }\r\n\r\n        best = INF;\r\n        for (int i = S - 1; i >= 0; --i)\r\n        {\r\n            int C = now[i];\r\n            if (i + 1 < S)\r\n            {\r\n                best += X[R] * (now[i + 1] - C);\r\n            }\r\n            dp[R][C] = min(dp[R][C], best);\r\n            best = min(best, dp[R][C]);\r\n        }\r\n\r\n        for (const auto &[C, NR, NC, H] : ladders[R])\r\n        {\r\n            dp[NR][NC] = min(dp[NR][NC], dp[R][C] - H);\r\n        }\r\n    }\r\n\r\n    if (dp[N][M] == INF)\r\n    {\r\n        cout << \"NO ESCAPE\\n\";\r\n    }\r\n    else\r\n    {\r\n        cout << dp[N][M] << \"\\n\";\r\n    }\r\n    return;\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    // setI(\"\");\r\n    // setO(\"\");\r\n\r\n    int number_of_test_cases = 1;\r\n    cin >> number_of_test_cases;\r\n\r\n    for (int test_case_number = 1; test_case_number <= number_of_test_cases; ++test_case_number)\r\n    {\r\n        solveTestCase();\r\n    }\r\n    return 0;\r\n}\r\n"
}