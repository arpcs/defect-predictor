{
    "id": 224033036,
    "contestId": 1627,
    "creationTimeSeconds": 1695125063,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Sentiro"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 10752000,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n \r\nconst ll INF = -1e18;\r\n \r\nvoid solve() {\r\n    int n, m, k, cnt = 1, a, b, c, d, h, e;\r\n    cin >> n >> m >> k;\r\n    int t[n + 1];\r\n    vector<ll> dp(k * 2 + 3, INF);\r\n    vector<array<int, 2>> to(k * 2 + 3);\r\n    vector<vector<array<int, 2>>> row(n + 1);\r\n    for (int i = 1; i <= n; ++i)\r\n        cin >> t[i];\r\n    row[1].push_back({1, cnt++});\r\n    dp[1] = 0;\r\n    while (k--) {\r\n        cin >> a >> b >> c >> d >> h;\r\n        dp[cnt] = INF;\r\n        row[a].push_back({b, cnt++});\r\n        dp[cnt] = INF;\r\n        row[c].push_back({d, cnt++});\r\n        to[cnt - 2] = {cnt - 1, h};\r\n    }\r\n    dp[cnt] = INF;\r\n    row[n].push_back({m, cnt});\r\n    for (int i = 1; i <= n; ++i) {\r\n        e = row[i].size();\r\n        sort(row[i].begin(), row[i].end());\r\n        for (int j = 1; j < e; ++j)\r\n            dp[row[i][j][1]] = max(dp[row[i][j][1]], dp[row[i][j - 1][1]] + 1LL * t[i] * (row[i][j - 1][0] - row[i][j][0]));\r\n        for (int j = e - 2; j >= 0; --j)\r\n            dp[row[i][j][1]] = max(dp[row[i][j][1]], dp[row[i][j + 1][1]] + 1LL * t[i] * (row[i][j][0] - row[i][j + 1][0]));\r\n        for (auto j : row[i])\r\n            if (to[j[1]][0] && dp[j[1]] != INF)\r\n                dp[to[j[1]][0]] = max(dp[to[j[1]][0]], dp[j[1]] + to[j[1]][1]);\r\n    }\r\n    if (dp[cnt] == INF)\r\n        cout << \"NO ESCAPE\\n\";\r\n    else\r\n        cout << - dp[cnt] << \"\\n\";\r\n}\r\n  \r\nint main() {\r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n    return 0;\r\n}"
}