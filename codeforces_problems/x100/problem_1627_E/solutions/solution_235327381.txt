{
    "id": 235327381,
    "contestId": 1627,
    "creationTimeSeconds": 1701497991,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "eysbutno"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 24780800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nusing pii = pair<int, int>;\r\n#define all(x) begin(x), end(x)\r\n#define pb push_back\r\n#define ins insert\r\n#define f first \r\n#define s second \r\n\r\nstruct Edge {\r\n    int r, f, s, t;\r\n};\r\nconst ll LINF = 1e18;\r\nvoid solve() {\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    vector<ll> x(n + 1);\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> x[i];\r\n    }\r\n    vector<vector<Edge>> adj(n + 1);\r\n    vector<set<int>> on(n + 1);\r\n    for (int i = 0; i < k; i++) {\r\n        int a, b, c, d, h;\r\n        cin >> a >> b >> c \r\n            >> d >> h;\r\n        adj[a].pb({b, c, d, h});\r\n        on[a].ins(b);\r\n        on[c].ins(d);\r\n    }\r\n    vector<map<int, ll>> dp(n + 1);\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j : on[i]) {\r\n            dp[i][j] = LINF;\r\n        }\r\n    }\r\n    dp[1][1] = 0;\r\n    dp[n][m] = LINF;\r\n    on[1].ins(1);\r\n    on[n].ins(m);\r\n    for (int i = 1; i <= n; i++) {\r\n        if (on[i].empty()) continue;\r\n        vector<int> locs(all(on[i]));\r\n        int sz = size(locs);\r\n        for (int j = 1; j < sz; j++) {\r\n            int l1 = locs[j], l2 = locs[j - 1];\r\n            dp[i][locs[j]] = min(dp[i][l1], \r\n                dp[i][l2] + x[i] * (l1 - l2));\r\n        }\r\n        for (int j = sz - 2; j >= 0; j--) {\r\n            int l1 = locs[j], l2 = locs[j + 1];\r\n            dp[i][locs[j]] = min(dp[i][l1],\r\n                dp[i][l2] + x[i] * (l2 - l1));\r\n        }\r\n        for (Edge& j : adj[i]) {\r\n            if (dp[i][j.r] != LINF) {\r\n                dp[j.f][j.s] = min(dp[j.f][j.s],\r\n                    dp[i][j.r] - j.t);\r\n            }\r\n        }\r\n    }\r\n    if (dp[n][m] != LINF) {\r\n        cout << dp[n][m];\r\n    } else {\r\n        cout << \"NO ESCAPE\";\r\n    }\r\n    cout << '\\n';\r\n    auto test = [&]() {\r\n        for (int i = 1; i <= n; i++) {\r\n            cout << i << \":\\n\";\r\n            for (int j : on[i]) {\r\n                cout << j << ' ' <<\r\n                    dp[i][j] << '\\n';\r\n            }\r\n            cout << '\\n';\r\n        }\r\n    };\r\n    // test();\r\n}\r\nint main() {\r\n    cin.tie(0) -> sync_with_stdio(0);\r\n    int t; cin >> t;\r\n    while (t--) solve();\r\n}\r\n/**\r\n * Do DP by floor.\r\n * To manage intermediate rooms:\r\n * You never strictly need to jump\r\n * over a set of rooms, so it makes sense\r\n * to just process the rooms in order.\r\n * Kaboom.\r\n*/"
}