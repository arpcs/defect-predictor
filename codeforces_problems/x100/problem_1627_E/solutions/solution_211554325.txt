{
    "id": 211554325,
    "contestId": 1627,
    "creationTimeSeconds": 1688078223,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "hanlulu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n//https://codeforces.com/contest/1627/problem/E\r\n\r\n/*ai<ci ensure no circle \r\nn*m is huge, so only save room with ladders in each row\r\nfor each node, the adjacent node is the room with ladders in this row and the room the ladder\r\nin this room connect to\r\nthe node(n,m) is special.maybe  no ladder, we loop the top row room to find who can reach (n,m) shorer.\r\ntimeout\uff1aas for each room check all the rooms has ladders in this row. too many \r\n*/\r\nint n , m ,t ,k;\r\n\r\nvector<long long> x;//cost move in each row. \r\nvector< vector<pair<int,int>> > rowlad;//rowlad[i]. row i the vector of ladders {id,col}\r\nvector<pair<int,int>> ladders;//laders point to which position\r\nvector<int> h;//h for ladders\r\n\r\nlong long dikas()\r\n{\r\n\tmap< pair <int,int>,long long> dis; \r\n\tset <  pair<long long, pair<int,int> > > myq;//first:dis, second{row,col}\r\n\tdis[{1,1}] = 0;\r\n\tmyq.insert({0,{1,1}}) ;\r\n\twhile (!myq.empty()){\r\n\t\tlong long  c = myq.begin()->first;\r\n\t\tint row = myq.begin()->second.first;\r\n\t\tint col = myq.begin()->second.second;\r\n\t\tmyq.erase(myq.begin());\t\r\n\t\t\r\n\t\tif (dis.count({row,col}) == 0 || dis[{row,col}] != c) continue;\t\r\n\t\t\r\n\t\tfor (auto p: rowlad[row]) \r\n\t\t{\r\n\t\t\tif (dis.count({row,p.second}) != 0 && dis[{row,p.second}] >= c + x[row] *abs(p.second-col)) \r\n\t\t\t\tcontinue;\r\n\t\t\tdis[{row,p.second}] = c + x[row] *abs(p.second-col)\t ;\r\n\t\t\t//ladid = p.first; col for lad room is p.second\r\n\t\t\tlong long newc = c +  x[row] *abs(p.second-col) - h[p.first];\r\n\t\t\t//ladders[p.first] is the new room\t\t\t\r\n\t\t\tif (dis.count(ladders[p.first]) == 0 || newc < dis[ladders[p.first]]) {\r\n\t\t\t\tdis[ladders[p.first]] = newc;\r\n\t\t\t\tmyq.insert({newc,ladders[p.first]});\r\n\t\t\t}\r\n\t\t}\t\t\r\n\t}\r\n\tlong long ans = 1e18;\r\n\tfor (int col =1 ; col <= m; col++) \r\n\t\tif (dis.count({n,col}) != 0) {\r\n\t\t\tans = min(ans, dis[{n,col}] + x[n] *abs(m-col));\r\n\t\t} \r\n\treturn ans;\t\r\n}\r\nint main() {\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\t\r\n\tcout.tie(0);\r\n \t//freopen(\"shortcut.in\",\"r\",stdin);\r\n \t//freopen(\"shortcut.out\",\"w\",stdout);\r\n\r\n \tcin >> t  ;\r\n\twhile (t--) {\r\n\t\tcin >> n >> m >> k;\r\n\t\tx = vector<long long>(n+1);//cost move in each row. \r\n\t\trowlad = vector< vector<pair<int,int>> > (n+1);//rowlad[i]. row i the vector of ladders {id,col}\r\n\t\tladders = vector<pair<int,int>> (k+1);//laders point to which position\r\n\t\th = vector<int> (k+1);//h for ladders\t\t\r\n\t\t\t\t\r\n\t\tfor (int i = 1; i <= n ; i++) cin >> x[i];\r\n\t   \tint a,b,c,d;\r\n\t   \tfor (int i = 0; i < k; i++){\r\n\t  \t\tcin >> a >> b >> c >> d >> h[i];\r\n\t\t\trowlad[a].push_back({i,b});\r\n\t\t\tladders[i]= {c,d};\r\n\t\t}\t\t\t\t\r\n\t\tlong long ans = dikas();\r\n\t\tif (ans == 1e18) cout << \"NO ESCAPE\" << '\\n';\t\t\r\n\t\telse cout << ans << '\\n';\r\n\t}\r\n \treturn 0;\r\n}"
}