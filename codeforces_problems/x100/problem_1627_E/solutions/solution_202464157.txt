{
    "id": 202464157,
    "contestId": 1627,
    "creationTimeSeconds": 1681722568,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Sinister_Shark"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "//////////////////////////////////////\r\n///       Harshit Maheshwari       ///\r\n/// Delhi Technological University ///\r\n//////////////////////////////////////\r\n#include <iostream>\r\n#include <bits/stdc++.h>\r\n#include <iomanip>\r\n#include <chrono>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>\r\n//<data type,null type =null for set,comparison order,type of tree (red_black_tree),tree policy for operations>\r\n#define ll long long\r\n#define ld long double\r\n#define mod 998244353\r\n#define vi vector<int>\r\n#define pi pair<int, int>\r\n#define pll pair<ll, ll>\r\n#define vl vector<ll>\r\n#define vii vector<pi>\r\n#define vll vector<pll>\r\n#define vs vector<string>\r\n#define vvl vector<vl>\r\n#define vb vector<bool>\r\n#define no cout << \"NO\\n\"\r\n#define yes cout << \"YES\\n\"\r\n#define zero cout << \"0\\n\"\r\n#define one cout << \"1\\n\"\r\n#define maxn 200030\r\n#define pb push_back\r\n#define forr(i, a, n) for (long long i = a; i < n; i++)\r\n#define forb(i, n, a) for (long long i = n; i >= a; i--)\r\n#define all(x) x.begin(), x.end()\r\n#define rev(x) reverse(all(x))\r\nusing namespace std;\r\nusing namespace chrono;\r\nusing namespace __gnu_pbds;\r\n// Debug Template, copied from Mikel_Arteta_8 (https://codeforces.com/blog/entry/68809)\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(long double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifdef Trikaaldarshi\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\n// End of debugging template\r\n//Reading template, copied from William Lin\r\ntemplate<class A> void read(vector<A>& v);\r\ntemplate<class A, size_t S> void read(array<A, S>& a);\r\ntemplate<class T> void read(T& x) { cin >> x; }\r\nvoid read(double& d) { string t; read(t); d=stod(t); }\r\nvoid read(long double& d) { string t; read(t); d=stold(t); }\r\ntemplate<class H, class... T> void read(H& h, T&... t) { read(h); read(t...); }\r\ntemplate<class A> void read(vector<A>& x) { for (auto& a:x) read(a); }\r\ntemplate<class A, size_t S> void read(array<A, S>& x) { for (auto& a: x) read(a); }\r\n//End of reading template\r\n\r\n// ll power(ll a, ll b){\r\n//     if (!b) return 1;\r\n//     ll val = power(a, b/2);\r\n//     val = (val * val) % mod;\r\n//     if (b & 1) val = (val * a) % mod;\r\n//     return val;\r\n// }\r\n\r\n// vi parent(maxn),rankk(maxn,0),sz(maxn,1);\r\n// vb cycle(maxn,false);\r\n\r\n// int findparent(int node){\r\n//     if(node==parent[node]) return node;\r\n//     return parent[node] = findparent(parent[node]);\r\n// }\r\n\r\n// void Union(int u,int v){\r\n//     u = findparent(u);\r\n//     v = findparent(v);\r\n//     if(u==v){\r\n//         cycle[u]=true;\r\n//         return;\r\n//     }\r\n//     if(rankk[u]<rankk[v]){\r\n//         parent[u]=v,sz[v]+=sz[u];\r\n//         cycle[v] = (cycle[v] or cycle[u]);\r\n//     }\r\n//     else if(rankk[v]<rankk[u]){\r\n//         parent[v] =u,sz[u]+=sz[v];\r\n//         cycle[u] = (cycle[u] or cycle[v]);\r\n//     }\r\n//     else{\r\n//         parent[v]=u;\r\n//         rankk[u]++;\r\n//         sz[u]+=sz[v];\r\n//         cycle[u] = (cycle[u] or cycle[v]);\r\n//     }\r\n// }\r\n\r\n// ///////////////////////////////////////\r\n// vl a(500005) , st(4*500005,0);\r\n// int left(int i){\r\n//     return (i<<1);\r\n// }\r\n// int right(int i){\r\n//     return ((i<<1)+1);\r\n// }\r\n// void build(int idx,int l,int r){\r\n//     if(l==r){\r\n//         st[idx] = a[l];\r\n//         return;\r\n//     }\r\n//     int mid = l + (r-l)/2;\r\n//     build(left(idx),l,mid);\r\n//     build(right(idx),mid+1,r);\r\n//     st[idx] = max(st[left(idx)],st[right(idx)]);\r\n// }\r\n// void update(int idx,int l,int r,int x,int val){\r\n//     if(l==r && l==x){\r\n//         a[l] = val;\r\n//         st[idx] = val;\r\n//         return;\r\n//     }\r\n//     int mid = l + (r-l)/2;\r\n//     if(x<=mid) update(left(idx),l,mid,x,val);\r\n//     else update(right(idx),mid+1,r,x,val);\r\n//     st[idx] = max(st[left(idx)],st[right(idx)]);\r\n// }\r\n// ll query(int idx,int low,int high,int l,int r){\r\n//     if(low>=l && high<=r){\r\n//         return st[idx];\r\n//     }\r\n//     if(high<l || low>r) return -1e16;\r\n//     int mid = low + (high-low)/2;\r\n//     ll p1 = query(left(idx),low,mid,l,r);\r\n//     ll p2 = query(right(idx),mid+1,high,l,r);\r\n//     return max(p1,p2);\r\n// }\r\n// ////////////////////////\r\n\r\n// vector<vl> adj(200001); \r\n// vl firstMax(200001),secondMax(200001),c(200001);\r\n// // calculate for every node x the maximum length of a path that goes through a child of x\r\n// void dfs(int v, int p){\r\n// \tfor (auto x : adj[v]) {\r\n// \t\tif (x == p) continue;\r\n// \t\tdfs(x, v);\r\n// \t\tif (firstMax[x] + 1 > firstMax[v])  secondMax[v] = firstMax[v],firstMax[v] = firstMax[x] + 1,c[v] = x;\r\n// \t\telse if (firstMax[x] + 1 > secondMax[v]) secondMax[v] = firstMax[x] + 1;\r\n// \t}\r\n// }\r\n// // calculate for every node x the maximum length of a path through its parent p\r\n// void dfs2(int v, int p) {\r\n// \tfor (auto x : adj[v]) {\r\n// \t\tif (x == p) continue;\r\n// \t\tif (c[v] == x) {\r\n// \t\t\tif (firstMax[x]<secondMax[v]+1)secondMax[x] = firstMax[x],firstMax[x] = secondMax[v] + 1,c[x] = v;\r\n// \t\t\telse  secondMax[x] = max(secondMax[x], secondMax[v] + 1);\r\n// \t\t} else secondMax[x] = firstMax[x],firstMax[x] = firstMax[v] + 1,c[x] = v;\r\n// \t\tdfs2(x, v);\r\n// \t}\r\n// }\r\n\r\n// vi spf(maxn,1);\r\n// void sieve(){\r\n//     for(int i=2; i<maxn; i++) spf[i] = i;\r\n//     for(int i=4; i<maxn; i+=2) spf[i] = 2;\r\n//     for(int i=3; i*i<maxn; i++) if(spf[i]==i) for (int j=i*i; j<maxn; j+=i) if (spf[j]==j) spf[j] = i;\r\n// }\r\n\r\nvoid solve() {\r\n    int n,m,k,cnt=1,a,b,c,d,h,e;\r\n    cin>>n>>m>>k;\r\n    vl dp(69*k,1e18),health(n+1);\r\n    vector<pll> destination(69*k);\r\n    vector<vll> row(n+1);\r\n    forr(i,1,n+1) cin>>health[i];\r\n    row[1].pb({1, cnt++});\r\n    dp[1] = 0;\r\n    forr(i,0,k){\r\n        cin >>a>>b>>c>>d>>h;\r\n        row[a].pb({b, cnt++});\r\n        row[c].pb({d, cnt++});\r\n        destination[cnt-2] = {cnt-1, h};\r\n    }\r\n    dp[cnt] = 1e18;\r\n    row[n].pb({m, cnt});\r\n    forr(i,1,n+1){\r\n        ll val = row[i].size();\r\n        sort(all(row[i]));\r\n        forr(j,1,val)\r\n            dp[row[i][j].second] = min(dp[row[i][j].second],dp[row[i][j-1].second] + health[i]*(row[i][j-1].first - row[i][j].first));\r\n        forb(j,val-2,0)\r\n            dp[row[i][j].second] = min(dp[row[i][j].second],dp[row[i][j+1].second] + health[i]*(row[i][j].first - row[i][j+1].first));\r\n        for (auto it : row[i])\r\n            if (destination[it.second].first and dp[it.second] != 1e18)\r\n                dp[destination[it.second].first] = min(dp[destination[it.second].first], dp[it.second]+destination[it.second].second);\r\n    }\r\n    if (dp[cnt] == 1e18) cout<<\"NO ESCAPE\"<<endl; else cout<<-dp[cnt]<<endl;\r\n}\r\n \r\n\r\nint main(){\r\n    auto begin = high_resolution_clock::now();\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    int t;\r\n    cin >> t;\r\n    // t = 1;\r\n    for (int i = 1; i <= t; i++){\r\n        // cout << \"Case #\" << i << \": \";\r\n        solve();\r\n    }\r\n    auto end = high_resolution_clock::now();\r\n    auto duration = duration_cast<microseconds>(end - begin);\r\n    debug(duration.count(), \" us\");\r\n    // cout<<duration.count()<<\" us\"<<endl;\r\n    return 0;\r\n}\r\n",
    "suggested_categories": [
        "algorithm",
        "data structures",
        "c++",
        "competitive programming",
        "code optimization",
        "template metaprogramming",
        "debugging",
        "code reading",
        "dynamic programming",
        "graph algorithms",
        "mathematics",
        "time complexity",
        "space complexity",
        "input/output handling",
        "error handling",
        "code profiling",
        "programming practices",
        "performance tuning",
        "software engineering",
        "programming patterns"
    ]
}