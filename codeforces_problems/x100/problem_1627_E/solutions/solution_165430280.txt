{
    "id": 165430280,
    "contestId": 1627,
    "creationTimeSeconds": 1658583008,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "784"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 16998400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing tp = tuple<ll,bool,ll>;\n\nconst ll inf = 9223372036854775807;\n\n/*\n1\n5 5 3\n411593 520888 718692 111623 920350\n1 1 5 1 85964\n1 4 4 1 419928\n4 2 5 4 569448\n*/\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n    ll t;\n    cin >> t;\n    while(t--){\n        ll n,m,k;\n        cin >> n >> m >> k;\n        vector<ll> x(n);\n        for(ll i=0;i<n;++i)\n            cin >> x[i];\n        vector<ll> dp(k+2,inf);\n        dp[0] = 0;\n        vector<ll> p(k+2);\n        vector<vector<tp> > g(n);\n        g[0].push_back(make_tuple(0,false,0));\n        g[n-1].push_back(make_tuple(m-1,true,k+1));\n        for(ll i=1;i<k+1;++i){\n            ll a,b,c,d,h;\n            cin >> a >> b >> c >> d >> h;\n            --a;\n            --b;\n            --c;\n            --d;\n            p[i] = -h;\n            g[a].push_back(make_tuple(b,true,i));\n            g[c].push_back(make_tuple(d,false,i));\n        }\n        for(ll i=0;i<n;++i){\n            sort(g[i].begin(),g[i].end());\n            pair<ll,ll> w = make_pair(-1,inf);\n            for(const auto& temp:g[i]){\n                auto [j,f,id] = temp;\n                if(!f){\n                    if(dp[id] != inf)\n                        if(w.second == inf || dp[id]+p[id]-w.second < x[i]*(j-w.first))\n                            w = make_pair(j,dp[id]+p[id]);\n                }\n                else{\n                    if(w.second != inf)\n                        dp[id] = min(dp[id],w.second+x[i]*(j-w.first));\n                }\n            }\n            w = make_pair(m,inf);\n            for(ll r=g[i].size()-1;r>-1;--r){\n                auto [j,f,id] = g[i][r];\n                if(!f){\n                    if(dp[id] != inf)\n                        if(w.second == inf || dp[id]+p[id]-w.second < x[i]*(w.first-j))\n                            w = make_pair(j,dp[id]+p[id]);\n                }\n                else{\n                    if(w.second != inf)\n                        dp[id] = min(dp[id],w.second+x[i]*(w.first-j));\n                }\n            }\n        }\n        if(dp[k+1] == inf)\n            cout << \"NO ESCAPE\\n\";\n        else\n            cout << dp[k+1] << \"\\n\";\n    }\n    return 0;\n}\n"
}