{
    "id": 161911676,
    "contestId": 1627,
    "creationTimeSeconds": 1656304294,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "1_2_3_4_5_9"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "PyPy 2",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 1013,
    "memoryConsumedBytes": 76083200,
    "source": "from __future__ import division, print_function\r\n\r\nimport os,sys\r\nfrom io import BytesIO, IOBase\r\n\r\nif sys.version_info[0] < 3:\r\n    from __builtin__ import xrange as range\r\n    from future_builtins import ascii, filter, hex, map, oct, zip\r\n\r\nfrom bisect import bisect_left as lower_bound, bisect_right as upper_bound \r\ndef so():  return int(input())\r\ndef st():  return input()\r\ndef mj():  return map(int,input().strip().split(\" \"))\r\ndef msj(): return list(map(str,input().strip().split(\" \")))\r\ndef le():  return list(map(int,input().split()))\r\ndef rc():  return map(float,input().split())\r\ndef lebe():return list(map(int, input()))\r\n\r\ndef dmain():\r\n    sys.setrecursionlimit(1000000)\r\n    threading.stack_size(1024000)\r\n    thread = threading.Thread(target=main)\r\n    thread.start()\r\ndef joro(L):\r\n    return(''.join(map(str, L)))\r\ndef joron(L):\r\n    return('\\n'.join(map(str, L)))\r\n\r\ndef decimalToBinary(n): return bin(n).replace(\"0b\",\"\")\r\n\r\n\r\ndef isprime(n):\r\n    for i in range(2,int(n**0.5)+1):\r\n        if n%i==0:\r\n            return False\r\n    return True\r\ndef npr(n, r):\r\n    return factorial(n) // factorial(n - r) if n >= r else 0\r\n \r\n \r\ndef ncr(n, r):\r\n    return factorial(n) // (factorial(r) * factorial(n - r)) if n >= r else 0\r\n \r\n \r\ndef lower_bound(li, num):\r\n    answer = -1\r\n    start = 0\r\n    end = len(li) - 1\r\n \r\n    while (start <= end):\r\n        middle = (end + start) // 2\r\n        if li[middle] >= num:\r\n            answer = middle\r\n            end = middle - 1\r\n        else:\r\n            start = middle + 1\r\n    return answer  # min index where x is not less than num\r\n \r\n \r\ndef upper_bound(li, num):\r\n    answer = -1\r\n    start = 0\r\n    end = len(li) - 1\r\n \r\n    while (start <= end):\r\n        middle = (end + start) // 2\r\n \r\n        if li[middle] <= num:\r\n            answer = middle\r\n            start = middle + 1\r\n \r\n        else:\r\n            end = middle - 1\r\n    return answer  # max index where x is not greater than num\r\ndef tir(a,b,c):\r\n    if(0==c):\r\n        return 1\r\n    if(len(a)<=b):\r\n        return 0\r\n    \r\n    if(c!=-1):\r\n        return (tir(a,1+b,c+a[b]) or tir(a,b+1,c-a[b]) or tir(a,1+b,c)) \r\n        \r\n        \r\n    else:\r\n        return (tir(a,1+b,a[b]) or tir(a,b+1,-a[b]) or tir(a,1+b,-1))\r\n   \r\n \r\ndef abs(x):\r\n    return x if x >= 0 else -x\r\n \r\n \r\ndef binary_search(li, val, lb, ub):\r\n    # print(lb, ub, li)\r\n    ans = -1\r\n    while (lb <= ub):\r\n        mid = (lb + ub) // 2\r\n        # print('mid is',mid, li[mid])\r\n        if li[mid] > val:\r\n            ub = mid - 1\r\n        elif val > li[mid]:\r\n            lb = mid + 1\r\n        else:\r\n            ans = mid  # return index\r\n            break\r\n    return ans\r\n \r\n \r\ndef kadane(x):  # maximum sum contiguous subarray\r\n    sum_so_far = 0\r\n    current_sum = 0\r\n    for i in x:\r\n        current_sum += i\r\n        if current_sum < 0:\r\n            current_sum = 0\r\n        else:\r\n            sum_so_far = max(sum_so_far, current_sum)\r\n    return sum_so_far\r\n\r\n                    \r\ndef pref(li):\r\n    pref_sum = [0]\r\n    for i in li:\r\n        pref_sum.append(pref_sum[-1] + i)\r\n    return pref_sum\r\n \r\n\r\n        \r\n        \r\ndef SieveOfEratosthenes(n):\r\n    prime = [True for i in range(n + 1)]\r\n    p = 2\r\n    li = []\r\n    while (p * p <= n):\r\n        if (prime[p] == True):\r\n            for i in range(p * p, n + 1, p):\r\n                prime[i] = False\r\n        p += 1\r\n \r\n    for p in range(2, len(prime)):\r\n        if prime[p]:\r\n            li.append(p)\r\n    return li\r\n \r\n \r\ndef primefactors(n):\r\n    factors = []\r\n    while (n % 2 == 0):\r\n        factors.append(2)\r\n        n //= 2\r\n    for i in range(3, int(sqrt(n)) + 1, 2):  # only odd factors left\r\n        while n % i == 0:\r\n            factors.append(i)\r\n            n //= i\r\n    if n > 2:  # incase of prime\r\n        factors.append(n)\r\n    return factors\r\n         \r\n    \r\ndef read():\r\n    sys.stdin  = open('input.txt', 'r')  \r\n    sys.stdout = open('output.txt', 'w') \r\ndef tr(n):\r\n    return n*(n+1)//2\r\nboi=int(998244353)\r\ndoi=int(1e9+7)\r\nhoi=int(6e5+5)\r\n\r\npoi=int(-1e18)\r\nyy=\"First\"\r\nn=\"Second\"\r\n\r\n\r\ndef bulli(x):\r\n    return bin(x).count('1')\r\n\r\nimport sys\r\n\r\n\r\nf=[0]*(hoi)\r\nr=[0]*hoi\r\n\r\n\r\ndef ty(a,b):\r\n    rr=1\r\n    while(b):\r\n        if(b%2):\r\n            rr=(rr*a)%boi\r\n        b=b//2\r\n        a=a*a%boi\r\n    return rr\r\ndef ncr(m,k):\r\n    if(m<0 or k<0 or k>m):\r\n        return 0\r\n    return f[m]*r[k]%boi*r[m-k]%boi\r\n    \r\n      \r\n    \r\n\r\n\r\n\r\n    \r\n\r\n            \r\ndef iu():\r\n    import sys\r\n    import math as my\r\n    import functools\r\n    input=sys.stdin.readline\r\n    from collections import deque, defaultdict\r\n    '''f[0]=1\r\n    for i in range(1,hoi):\r\n        f[i]=(f[i-1]*i)%boi\r\n    r[hoi-1]=ty(f[hoi-1],boi-2)\r\n    for i in range(hoi-2,-1,-1):\r\n        r[i]=r[i+1]*(i+1)%boi'''\r\n    d=1\r\n    a,b,c=mj()\r\n    K=le()\r\n    L=[0]*(a+1)\r\n    for i in range(1,1+a):\r\n        L[i]=K[i-1]\r\n    M=[poi]*(c*2+3)\r\n    u=[]\r\n    for i in range(2*c+3):\r\n        Lo=[]\r\n        for j in range(2):\r\n            Lo.append(0)\r\n        u.append(Lo)\r\n    v=defaultdict(list)\r\n    v[1].append((1,d))\r\n    d=1+d\r\n    M[1]=0\r\n    for i in range(c):\r\n        p,q,r,s,h=mj()\r\n        M[d]=poi\r\n        v[p].append((q,d))\r\n        d=1+d\r\n        M[d]=poi\r\n        v[r].append((s,d))\r\n        d=1+d\r\n        u[d-2][0]=d-1\r\n        u[d-2][1]=h\r\n    \r\n    M[d]=poi\r\n    v[a].append((b,d))\r\n    #print(u)\r\n    for i in range(1,1+a):\r\n        gh=len(v[i])\r\n        v[i].sort()\r\n        for j in range(1,gh):\r\n            M[v[i][j][1]]=max(L[i]*(v[i][j-1][0]-v[i][j][0])+M[v[i][j-1][1]],M[v[i][j][1]])\r\n        for j in range(gh-2,-1,-1):\r\n            M[v[i][j][1]]=max(L[i]*(v[i][j][0]-v[i][j+1][0])+M[v[i][j+1][1]],M[v[i][j][1]])\r\n        for yu in v[i]:\r\n            if(0!=u[yu[1]][0] and poi!=M[yu[1]]):\r\n                M[u[yu[1]][0]]=max(M[yu[1]]+u[yu[1]][1],M[u[yu[1]][0]])\r\n    if(M[d]!=poi):\r\n        print(-M[d])\r\n    else:\r\n        print(\"NO ESCAPE\")\r\n            \r\n    \r\n    \r\n    \r\n    \r\n        \r\n    \r\n    \r\n    \r\n    \r\n    \r\n                    \r\n    \r\n        \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n        \r\n    \r\n                \r\n                \r\n            \r\n    \r\n    \r\n        \r\n           \r\ndef main():\r\n    for i in range(so()):\r\n        #print(\"Case #\"+str(i+1)+\": \",end=\"\")\r\n        iu()\r\n        \r\n               \r\n    \r\n            \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n        \r\n                \r\n            \r\n        \r\n        \r\n    \r\n    \r\n            \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n        \r\n            \r\n        \r\n    \r\n    \r\n    \r\n    \r\n        \r\n            \r\n    \r\n        \r\n        \r\n        \r\n\r\n    \r\n    \r\n    \r\n    \r\n        \r\n        \r\n    \r\n        \r\n    \r\n    \r\n            \r\n    \r\n    \r\n    \r\n                \r\n            \r\n            \r\n    \r\n        \r\n\r\n                \r\n    \r\n        \r\n        \r\n\r\n            \r\n                    \r\n                \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n                    \r\n        \r\n                \r\n        \r\n        \r\n       \r\n    \r\n           \r\n          \r\n          \r\n                \r\n            \r\n        \r\n                \r\n    \r\n        \r\n        \r\n        \r\n       \r\n            \r\n                \r\n        \r\n\r\n\r\n\r\n\r\n# region fastio\r\n# template taken from https://github.com/cheran-senthil/PyRival/blob/master/templates/template.py\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\ndef print(*args, **kwargs):\r\n    \"\"\"Prints the values to a stream, or to sys.stdout by default.\"\"\"\r\n    sep, file = kwargs.pop(\"sep\", \" \"), kwargs.pop(\"file\", sys.stdout)\r\n    at_start = True\r\n    for x in args:\r\n        if not at_start:\r\n            file.write(sep)\r\n        file.write(str(x))\r\n        at_start = False\r\n    file.write(kwargs.pop(\"end\", \"\\n\"))\r\n    if kwargs.pop(\"flush\", False):\r\n        file.flush()\r\n\r\n\r\nif sys.version_info[0] < 3:\r\n    sys.stdin, sys.stdout = FastIO(sys.stdin), FastIO(sys.stdout)\r\nelse:\r\n    sys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\n\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\n# endregion\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    #read()\r\n    main()\r\n    #dmain()\r\n\r\n# Comment Read()"
}