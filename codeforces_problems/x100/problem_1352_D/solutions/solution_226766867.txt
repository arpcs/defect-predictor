{
    "id": 226766867,
    "contestId": 1352,
    "creationTimeSeconds": 1696522469,
    "relativeTimeSeconds": 2369,
    "problem": {
        "contestId": 1352,
        "index": "D",
        "name": "Alice, Bob and Candies",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1352,
        "members": [
            {
                "handle": "mikeac"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1696520100
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 8908800,
    "source": "import sys\r\n\r\n# import itertools\r\n# import math\r\n# import os\r\n# import random\r\n# from bisect import bisect, bisect_left\r\n# from collections import *\r\n# from functools import reduce\r\n# from heapq import heapify, heappop, heappush\r\n# from io import BytesIO, IOBase\r\n# from string import *\r\n\r\n# region fastio\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nsint = lambda: int(input())\r\nmint = lambda: map(int, input().split())\r\nints = lambda: list(map(int, input().split()))\r\n# print = lambda d: sys.stdout.write(str(d) + \"\\n\")\r\n# endregion fastio\r\n\r\n# # region interactive\r\n# def printQry(a, b) -> None:\r\n#     sa = str(a)\r\n#     sb = str(b)\r\n#     print(f\"? {sa} {sb}\", flush = True)\r\n\r\n# def printAns(ans) -> None:\r\n#     s = str(ans)\r\n#     print(f\"! {s}\", flush = True)\r\n# # endregion interactive\r\n\r\n# # region dfsconvert\r\n# from types import GeneratorType\r\n# def bootstrap(f, stack=[]):\r\n#     def wrappedfunc(*args, **kwargs):\r\n#         if stack:\r\n#             return f(*args, **kwargs)\r\n#         else:\r\n#             to = f(*args, **kwargs)\r\n#             while True:\r\n#                 if type(to) is GeneratorType:\r\n#                     stack.append(to)\r\n#                     to = next(to)\r\n#                 else:\r\n#                     stack.pop()\r\n#                     if not stack:\r\n#                         break\r\n#                     to = stack[-1].send(to)\r\n#             return to\r\n#     return wrappedfunc\r\n# # endregion dfsconvert\r\n\r\n# MOD = 998244353\r\n# MOD = 10 ** 9 + 7\r\n# DIR = ((-1, 0), (0, 1), (1, 0), (0, -1))\r\n\r\ndef solve() -> None:\r\n    n = sint()\r\n    nums = ints()\r\n    prev = moves = 0\r\n    s = [0] * 2\r\n    i, j = 0, n - 1\r\n    while i <= j:\r\n        curr = 0\r\n        while i <= j and curr <= prev:\r\n            if moves & 1:\r\n                curr += nums[j]\r\n                j -= 1\r\n            else:\r\n                curr += nums[i]\r\n                i += 1\r\n        s[moves & 1] += curr\r\n        prev = curr\r\n        moves += 1\r\n        \r\n    print(moves, *s)\r\n\r\nfor _ in range(int(input())):\r\n    solve()"
}