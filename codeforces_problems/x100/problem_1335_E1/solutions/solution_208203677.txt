{
    "id": 208203677,
    "contestId": 1335,
    "creationTimeSeconds": 1685731035,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "ssp_2000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 17817600,
    "source": "#include <bits/stdc++.h>\r\n#include <chrono>\r\n#include <thread>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <iostream>\r\n \r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n \r\n#define fi first\r\n#define se second\r\n#define mp make_pair\r\n#define pb push_back\r\n#define fbo find_by_order\r\n#define ook order_of_key\r\n \r\ntypedef long long ll;\r\ntypedef pair<ll,ll> ii;\r\ntypedef vector<int> vi;\r\ntypedef long double ld; \r\ntypedef tree<long long int, null_type, less_equal<long long int>, rb_tree_tag, tree_order_statistics_node_update> pbds;\r\ntypedef set<int>::iterator sit;\r\ntypedef map<int,int>::iterator mit;\r\ntypedef vector<int>::iterator vit;\r\nconst int N=200009;\r\n\r\n \r\n//This template is compiled by zscoder.\r\n \r\n//O(V^2E) Dinic Flow\r\n//Initialize : MaxFlow<# of vertices, Max Value> M;\r\ntemplate<int MX, ll INF> struct MaxFlow //by yutaka1999, have to define INF and MX (the Max number of vertices)\r\n{\r\n    struct edge\r\n    {\r\n        int to,cap,rev;\r\n        edge(int to=0,int cap=0,int rev=0):to(to),cap(cap),rev(rev){}\r\n    };\r\n    vector <edge> vec[MX];\r\n    int level[MX];\r\n    int iter[MX];\r\n    \r\n    void addedge(int s,int t,int c) //adds an edge of cap c to the flow graph\r\n    {\r\n        int S=vec[s].size(),T=vec[t].size();\r\n        vec[s].push_back(edge(t,c,T));\r\n        vec[t].push_back(edge(s,0,S));\r\n    }\r\n    void bfs(int s)\r\n    {\r\n        memset(level,-1,sizeof(level));\r\n        queue <int> que;\r\n        level[s] = 0;\r\n        que.push(s);\r\n        while (!que.empty())\r\n        {\r\n            int v = que.front();que.pop();\r\n            for(int i=0;i<vec[v].size();i++)\r\n            {\r\n                edge&e=vec[v][i];\r\n                if (e.cap>0&&level[e.to]<0)\r\n                {\r\n                    level[e.to]=level[v]+1;\r\n                    que.push(e.to);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    ll flow_dfs(int v,int t,ll f)\r\n    {\r\n        if (v==t) return f;\r\n        for(int &i=iter[v];i<vec[v].size();i++)\r\n        {\r\n            edge &e=vec[v][i];\r\n            if (e.cap>0&&level[v]<level[e.to])\r\n            {\r\n                ll d=flow_dfs(e.to,t,min(f,ll(e.cap)));\r\n                if (d>0)\r\n                {\r\n                    e.cap-=d;\r\n                    vec[e.to][e.rev].cap+=d;\r\n                    return d;\r\n                }\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n    ll maxflow(int s,int t) //finds max flow using dinic from s to t\r\n    {\r\n        ll flow = 0;\r\n        while(1)\r\n        {\r\n            bfs(s);\r\n            if (level[t]<0) return flow;\r\n            memset(iter,0,sizeof(iter));\r\n            while (1)\r\n            {\r\n                ll f=flow_dfs(s,t,INF);\r\n                if(f==0) break;\r\n                flow += f;\r\n            }\r\n        }\r\n    }\r\n};\r\n//End Dinic Flow\r\n \r\n//Spase Table Struct\r\n//SpaseTable<ll, 1000001, 20, ll(1e18)> ST;\r\ntemplate<typename TT, int MX, int LG, ll INF> struct SpaseTable //Waning : Change query return value manually if needed. INF is the dummy val\r\n{\r\n    TT st[LG][MX];\r\n    TT initial[MX];\r\n    \r\n    TT combine(TT a, TT b) //waning : change if neccesay\r\n    {\r\n        if(a<b) return a;\r\n        return b;\r\n    }\r\n    \r\n    SpaseTable()\r\n    {\r\n        for(int i = 0; i < MX; i++) initial[i] = INF;\r\n    }\r\n    \r\n    void init()\r\n    {\r\n        for(ll j = 0; j < LG; j++)\r\n        {\r\n            for(ll i = 0; i < MX; i++)\r\n            {\r\n                st[j][i] = INF;\r\n                if(i + (1<<j) - 1 < MX)\r\n                {\r\n                    if(j == 0) st[j][i] = initial[i];\r\n                    else st[j][i] = combine(st[j-1][i], st[j-1][i + (1<<(j-1))]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    TT query(int l, int r)\r\n    {\r\n        int k = 31 - __builtin_clz(r-l);\r\n        if(l==r) k=0;\r\n        return combine(st[k][l], st[k][r - (1<<k) + 1]);\r\n    }\r\n};\r\n \r\n//Segment Tree Lazy Prop begin. node and update ae just samples and should be changed according to problem\r\n//use init, upd, and query function ([l, r])\r\n//REMEMBER TO SET WIDTH WHEN INIT LEAVES!\r\ntemplate<typename T, typename U> struct SegmentTree //by socketnaut. see http://codeforces.com/blog/entry/20528\r\n{\r\n    int S, H;\r\n \r\n    T zero;\r\n    vector<T> value;\r\n \r\n    U noop;\r\n    vector<bool> dirty; //a.k.a is_lazy\r\n    vector<U> prop; //the update aray\r\n \r\n    SegmentTree<T, U>(int _S, T _zero = T(), U _noop = U()) {\r\n        zero = _zero, noop = _noop;\r\n        for (S = 1, H = 1; S < _S; ) S *= 2, H++;\r\n \r\n        value.resize(2*S, zero);\r\n        dirty.resize(2*S, false);\r\n        prop.resize(2*S, noop);\r\n    }\r\n \r\n    void init(vector<T> &leaves) {\r\n        copy(leaves.begin(), leaves.end(), value.begin() + S);\r\n \r\n        for (int i = S - 1; i > 0; i--)\r\n            value[i] = value[2 * i] + value[2 * i + 1];\r\n    }\r\n \r\n    void apply(int i, U &update) {\r\n        value[i] = update(value[i]);\r\n        if(i < S) {\r\n            prop[i] = prop[i] + update;\r\n            dirty[i] = true;\r\n        }\r\n    }\r\n \r\n    void rebuild(int i) {\r\n        for (int l = i/2; l; l /= 2) {\r\n            T combined = value[2*l] + value[2*l+1];\r\n            value[l] = prop[l](combined);\r\n        }\r\n    }\r\n \r\n    void propagate(int i) {\r\n        for (int h = H; h > 0; h--) {\r\n            int l = i >> h;\r\n \r\n            if (dirty[l]) {\r\n                apply(2*l, prop[l]);\r\n                apply(2*l+1, prop[l]);\r\n \r\n                prop[l] = noop;\r\n                dirty[l] = false;\r\n            }\r\n        }\r\n    }\r\n \r\n    void upd(int i, int j, U update) {\r\n        i += S, j += S;\r\n        propagate(i), propagate(j);\r\n \r\n        for (int l = i, r = j; l <= r; l /= 2, r /= 2) {\r\n            if((l&1) == 1) apply(l++, update);\r\n            if((r&1) == 0) apply(r--, update);\r\n        }\r\n \r\n        rebuild(i), rebuild(j);\r\n    }\r\n \r\n    T query(int i, int j){\r\n        i += S, j += S;\r\n        propagate(i), propagate(j);\r\n \r\n        T res_left = zero, res_right = zero;\r\n        for(; i <= j; i /= 2, j /= 2){\r\n            if((i&1) == 1) res_left = res_left + value[i++];\r\n            if((j&1) == 0) res_right = value[j--] + res_right;\r\n        }\r\n        return res_left + res_right;\r\n    }\r\n};\r\n \r\nstruct node \r\n{\r\n    int sum, width;\r\n    \r\n    node operator+(const node &n) \r\n    {\r\n        node tmp;\r\n        tmp.sum = sum + n.sum;\r\n        tmp.width = width + n.width;\r\n        return tmp;\r\n    }    \r\n};\r\n \r\nstruct update {\r\n    bool type; // 0 for add, 1 for reset\r\n    int value;\r\n \r\n    node operator()(const node &n) \r\n    {\r\n        node tmp;\r\n        if (type) \r\n        {\r\n            tmp.sum = n.width * value;\r\n            tmp.width = n.width;\r\n        }\r\n        else \r\n        {\r\n            tmp.sum = n.sum + n.width * value;\r\n            tmp.width = n.width;\r\n        }\r\n        return tmp;\r\n    }\r\n \r\n    update operator+(const update &u) \r\n    {\r\n        update tmp;\r\n        if (u.type) return u; //since it's a reset\r\n        tmp.type = type;\r\n        tmp.value = value + u.value;\r\n        return tmp;\r\n    }\r\n};\r\nbool isPower(long long int x, long long int y)\r\n{\r\n   \r\n    long long int res1 = log(y) / log(x);\r\n    long double res2 = log(y) / log(x); \r\n \r\n \r\n    return (res1 == res2);\r\n}\r\nbool isPrime(long long int n)\r\n{\r\n    // Corner case\r\n    if (n <= 1)\r\n        return false;\r\n \r\n    // Check from 2 to squae root of n\r\n    for (int i = 2; i <= sqrt(n); i++)\r\n        if (n % i == 0)\r\n            return false;\r\n \r\n    return true;\r\n}\r\nlong long int exponentMod(long long int A, long long int B, long long int C)  \r\n{  \r\n \r\n    if (A == 0)  \r\n \r\n        return 0;  \r\n \r\n    if (B == 0)  \r\n \r\n        return 1;  \r\n    long long int y;  \r\n \r\n    if (B % 2 == 0) {  \r\n \r\n        y = exponentMod(A, B / 2, C);  \r\n \r\n        y = (y * y) % C;  \r\n \r\n    }  \r\n    else {  \r\n \r\n        y = A % C;  \r\n \r\n        y = (y * exponentMod(A, B - 1, C) % C) % C;  \r\n \r\n    }  \r\n    return (long long int)((y + C) % C);  \r\n} \r\nbool isPerfectSquae(long double x)\r\n{\r\n    // Find floating point value of\r\n    // squae root of x.\r\n    if (x >= 0) {\r\n \r\n        long long sr = sqrt(x);\r\n         \r\n        // if product of squae root\r\n        //is equal, then\r\n        // return T/F\r\n        return (sr * sr == x);\r\n    }\r\n    // else return false if n<0\r\n    return false;\r\n}\r\nvoid primef(long long int n)\r\n{\r\n    long long int c=0;\r\n    for (int i = 2; i <= sqrt(n); i = i + 2)\r\n    {\r\n        \r\n        while (n % i == 0)\r\n        {\r\n            c++;\r\n            n = n/i;\r\n           \r\n        }\r\n    }\r\n    if(n>2)\r\n    {\r\n        c++;\r\n    }\r\n}\r\nbool isPowerOfTwo (long long int x) \r\n{ \r\n   \r\n    return x && (!(x&(x-1))); \r\n}\r\nlong long gcd(long long int a, long long int b)\r\n{\r\n  if (b == 0)\r\n    return a;\r\n  return gcd(b, a % b);\r\n}\r\n \r\n// Function to return LCM of two numbers\r\nlong long lcm(int a, int b)\r\n{\r\n    return (a / gcd(a, b)) * b;\r\n}\r\nbool comp(pair<ll,ll>p1,pair<ll,ll>p2)\r\n{\r\n    if(p1.first==p2.first)\r\n        return p1.second<p2.second;\r\n    else\r\n        return p1.first<p2.first;\r\n}\r\n    long long int calculate(long long int p,\r\n                    long long int q)\r\n{\r\n    long long int mod = 998244353, expo;\r\n    expo = mod - 2;\r\n\r\n    // Loop to find the value\r\n    // until the expo is not zero\r\n    while (expo) {\r\n\r\n        // Multiply p with q\r\n        // if expo is odd\r\n        if (expo & 1) {\r\n            p = (p * q) % mod;\r\n        }\r\n        q = (q * q) % mod;\r\n\r\n        // Reduce the value of\r\n        // expo by 2\r\n        expo >>= 1;\r\n    }\r\n    return p;\r\n}\r\n#define MAX 1000005\r\n \r\nll n;\r\npair<ll,ll>pp[MAX];\r\n \r\nll call(ll xx,ll yy)\r\n{\r\n    ll d = pp[yy].first - pp[xx].first;\r\n    ll v = pp[yy].first + d;\r\n    ll cnt = 2;\r\n    set<ll>st;\r\n    for(ll i = 1; i <= n; i++)\r\n    {\r\n        if(i == xx or i == yy)\r\n            continue;\r\n        if(pp[i].first == v)\r\n        {\r\n            cnt++;\r\n            v = v + d;\r\n        }\r\n        else\r\n        {\r\n            st.insert(pp[i].second);\r\n        }\r\n        if(cnt == n - 1)\r\n            break;\r\n    }\r\n    if(cnt == n - 1)\r\n    {\r\n        if(st.size() == 0)\r\n            return pp[n].second;\r\n        else\r\n            return *st.begin();\r\n    }\r\n    return -1;\r\n}\r\nbool check(string&s1,string&s2,string&s3)\r\n{\r\n      if((s2>=s1 && s2>=s3) || (s2<=s1 && s2<=s3))\r\n        return true;\r\n    else\r\n        return false;\r\n}\r\nll andOperator(ll x, ll y)\r\n{\r\n    // Iterate over all bits of y, starting from the lsb, if it's equal to 1, flip it\r\n    for(int i=0; i<(int)log2(y)+1;i++)\r\n    {\r\n        //repeat till x >= y, otherwise return the answer.\r\n        if (y <= x) {\r\n            return y;\r\n        }\r\n        if (y & (1 << i)) {\r\n            y &= ~(1UL << i);\r\n        }\r\n    }\r\n    return y;\r\n}\r\nlong long int spf[N];\r\nvoid sieve()\r\n{\r\n    spf[1] = 1;\r\n    for (int i=2; i<N; i++)      \r\n        spf[i] = i;\r\n  \r\n    for (int i=4; i<N; i+=2)\r\n        spf[i] = 2;\r\n \r\n    for (int i=3; i*i<N; i++)\r\n    {\r\n        if (spf[i] == i)\r\n        {\r\n            for (int j=i*i; j<N; j+=i)\r\n                if (spf[j]==j)\r\n                    spf[j] = i;\r\n        }\r\n    }\r\n}\r\nint msbPos(ll n)\r\n{\r\n    int msb_p = -1;\r\n    while (n)\r\n    {\r\n        n = n>>1;\r\n        msb_p++;\r\n    }\r\n    return msb_p;\r\n}\r\n \r\n// Function to find Bit-wise & of all numbers from x\r\n// to y.\r\nll help(ll x, ll y)\r\n{\r\n    ll res = 0; // Initialize result\r\n \r\n    while (x && y)\r\n    {\r\n        // Find positions of MSB in x and y\r\n        int msb_p1 = msbPos(x);\r\n        int msb_p2 = msbPos(y);\r\n \r\n        // If positions are not same, return\r\n        if (msb_p1 != msb_p2)\r\n            break;\r\n \r\n        // Add 2^msb_p1 to result\r\n        ll msb_val =  (1 << msb_p1);\r\n        res = res + msb_val;\r\n \r\n        // subtract 2^msb_p1 from x and y.\r\n        x = x - msb_val;\r\n        y = y - msb_val;\r\n    }\r\n \r\n    return res;\r\n}\r\nint main()\r\n{\r\n    #ifndef ONLINE_JUDGE\r\n    freopen(\"Error.txt\", \"w\", stderr);\r\n    freopen(\"input888.txt\", \"r\", stdin);\r\n    freopen(\"output9.txt\", \"w\", stdout);\r\n    #endif\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    ll t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        ll n;\r\n        cin>>n;\r\n        ll a[n];\r\n        for(int i=0;i<n;i++)\r\n        cin>>a[i];\r\n    map<ll,vector<ll>>mp;\r\n    ll fans=0;\r\n        for(long long int i=1;i<=26;i++)\r\n        {\r\n           ll c=0;\r\n           vector<ll>v;\r\n           for(int j=n-1;j>=0;j--)\r\n           {\r\n              if(a[j]==i)\r\n                c++;\r\n             v.pb(c);\r\n           }\r\n           reverse(v.begin(),v.end());\r\n           mp[i]=v;\r\n        }\r\n        for(int i=1;i<=26;i++)\r\n        {\r\n            ll min1=INT_MAX;\r\n            for(long long int j=0;j<n;j++)\r\n            {\r\n                  if(a[j]==i)\r\n                    min1=min(min1,j);\r\n            }\r\n            map<ll,ll>mp1;\r\n            if(min1!=INT_MAX)\r\n            {\r\n            for(int j=0;j<min1;j++)\r\n                mp1[a[j]]++;\r\n            ll c=0;\r\n            for(int j=min1;j<n;j++)\r\n            {\r\n                if(a[j]==i)\r\n                {\r\n                    c++;\r\n                    fans=max(fans,c);\r\n                }\r\n                else\r\n                {\r\n                    if(mp1.find(a[j])!=mp1.end())\r\n                    {\r\n                        ll y=mp[a[j]][j];\r\n                        fans=max(fans,c+mp1[a[j]]+y);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        }\r\n        cout<<fans<<endl;\r\n    }\r\n}\r\n"
}