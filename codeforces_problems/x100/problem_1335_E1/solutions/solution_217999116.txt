{
    "id": 217999116,
    "contestId": 1335,
    "creationTimeSeconds": 1691577620,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "SeyedAmirHs00"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#define int int16_t\n\nvoid solve() {\n  int n;\n  cin >> n;\n  vector<int> a(n);\n  for (auto &x : a) {\n    cin >> x;\n    x--;\n  }\n  const int A = 26;\n  int ans = 0;\n  vector<vector<vector<int>>> one_block(\n      n + 1, vector<vector<int>>(n + 1, vector<int>(A)));\n  vector<vector<int>> mx_one_block(n + 1, vector<int>(n + 1));\n  for (int len = 1; len <= n; len++) {\n    for (int l = 0; l <= n - len; l++) {\n      int r = l + len;\n      for (int i = 0; i < A; i++) {\n        int tmp = one_block[l + 1][r][i];\n        if (a[l] == i) {\n          tmp++;\n        }\n        one_block[l][r][i] = tmp;\n        mx_one_block[l][r] = max(mx_one_block[l][r], one_block[l][r][i]);\n        ans = max(ans, one_block[l][r][i]);\n      }\n    }\n  }\n  vector<vector<vector<int>>> three_block(\n      n + 1, vector<vector<int>>(n + 1, vector<int>(A)));\n  for (int len = 1; len <= n; len++) {\n    for (int l = 0; l <= n - len; l++) {\n      int r = l + len;\n      for (int i = 0; i < A; i++) {\n        three_block[l][r][i] =\n            max({three_block[l + 1][r][i], three_block[l][r - 1][i],\n                 mx_one_block[l][r]});\n        if (a[l] == a[r - 1] && a[l] == i && len > 1) {\n          three_block[l][r][i] =\n              max({three_block[l][r][i], 2 + three_block[l + 1][r - 1][i],\n                   2 + mx_one_block[l + 1][r - 1]});\n        }\n        ans = max(ans, three_block[l][r][i]);\n      }\n    }\n  }\n  cout << ans << '\\n';\n}\n\nint32_t main() {\n  cin.tie(0)->sync_with_stdio(0);\n  int t;\n  cin >> t;\n  while (t--) {\n    solve();\n  }\n}"
}