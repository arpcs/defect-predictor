{
    "id": 212236748,
    "contestId": 1335,
    "creationTimeSeconds": 1688565410,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "puneetvishnoi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n//#include<ext/pb_ds/assoc_container.hpp>\r\n//#include<ext/pb_ds/tree_policy.hpp>\r\n#define ll unsigned long long\r\n#define int long long\r\n#define lld long double\r\n#define mod 1000000007ll\r\n#define inf (1LL<<60)\r\n#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL)\r\nusing namespace std;\r\n//using namespace __gnu_pbds;\r\n//typedef tree<pair<int,int>,null_type,less<pair<int,int>>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;//find_by_order // order_of_key\r\n//typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;//find by order // order of key\r\nint expo(ll a, ll b) {a %= mod; ll res = 1; while (b > 0) {if (b & 1) res = (res * a) % mod; a = (a * a) % mod; b >>= 1;} return res;}\r\ndouble eps = 1e-7;\r\nconst int N = 1e5+1;\r\nint32_t main() {\r\n    fast_io;int t=1;cin>>t;\r\n    for(int T=0;T<t;T++){\r\n        int n;\r\n        cin>>n;\r\n        vector<int>v(n);\r\n        vector<vector<int>>ind(27,vector<int>());\r\n        for(int i=0;i<n;i++){\r\n            cin>>v[i];\r\n            ind[v[i]].push_back(i);\r\n        }\r\n        // for(int i=1;i<=n;i++){\r\n        //     cout<<ind[i].size()<<\" \";\r\n        // }\r\n        // cout<<endl;\r\n        int ans=1;\r\n        for(int i=1;i<27;i++){\r\n            for(int k=1;k<27;k++){\r\n                int curr=2;\r\n                int st=0;\r\n                int sz=ind[i].size()-1;\r\n                while(st<sz){\r\n                    ans=max(ans,curr);\r\n                    int l=ind[i][st];\r\n                    int r=ind[i][sz];\r\n                    int fr=INT_MAX,sc=INT_MIN;\r\n                    //cout<<i<<\" \"<<l<<\" \"<<r<<endl;\r\n                    auto it1=upper_bound(ind[k].begin(),ind[k].end(),l);\r\n                    if(it1==ind[k].end()){\r\n                        break;\r\n                    }\r\n                    else{\r\n                        fr=it1-ind[k].begin();\r\n                    }\r\n                    auto it2=lower_bound(ind[k].begin(),ind[k].end(),r);\r\n                    if(it2==ind[k].end()){\r\n                        //cout<<\" cvv \";\r\n                        int sz1=ind[k].size();\r\n                        sc=(sz1-1);\r\n                    }\r\n                    else{\r\n                        sc=it2-ind[k].begin();\r\n                        if(sc>0){\r\n                            sc--;\r\n                        }\r\n                        else{\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(sc>=fr){\r\n                        ans=max(ans,curr+sc-fr+1);\r\n                    }\r\n                    //cout<<k<<\":K \"<<fr<<\" \"<<sc<<\" \"<<ans<<endl;\r\n                    st++;\r\n                    sz--;\r\n                    curr+=2;\r\n                }\r\n            }            \r\n        }\r\n        cout<<ans<<endl;\r\n\r\n    }\r\n    return 0;\r\n}\r\n",
    "suggested_categories": [
        "algorithms",
        "data structures",
        "dynamic programming",
        "computational complexity",
        "c++ programming",
        "optimization",
        "mathematics",
        "algorithm analysis",
        "code efficiency",
        "competitive programming",
        "code optimization",
        "performance tuning",
        "problem solving",
        "time complexity",
        "space complexity",
        "programming contests",
        "c++ stl",
        "array manipulation",
        "binary search",
        "graph algorithms"
    ]
}