{
    "id": 199449252,
    "contestId": 1335,
    "creationTimeSeconds": 1679941064,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "coderpro2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 1638400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvoid solve()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    int a[n + 1];\r\n    for (int i = 1; i <= n; i++)\r\n        cin >> a[i];\r\n    int pref[n + 1][201];\r\n    memset(pref, 0, sizeof(pref));\r\n    int ans = 0;\r\n    for (int j = 1; j <= 200; j++)\r\n    {\r\n        for (int i = 1; i <= n; i++)\r\n            pref[i][j] = pref[i - 1][j] + (a[i] == j);\r\n        ans = max(ans, pref[n][j]);\r\n    }\r\n\r\n    for (int l = 1; l <= n; l++)\r\n    {\r\n        int X = a[l];\r\n        int left_part = pref[l][X];\r\n        int beg = l + 1, end = n;\r\n        while (beg <= end)\r\n        {\r\n            int mid = beg + (end - beg) / 2;\r\n            if (pref[n][X] - pref[mid - 1][X] >= left_part)\r\n                beg = mid + 1;\r\n            else\r\n                end = mid - 1;\r\n        }\r\n        int j = end;\r\n        if (j >= (l + 1))\r\n        {\r\n            // find max_freq[l+1 j-1]\r\n            ans = max(ans, 2 * left_part);\r\n            if (j >= (l + 2))\r\n            {\r\n                for (int t = 1; t <= 200; t++)\r\n                {\r\n                    ans = max(ans, 2 * left_part + (pref[j - 1][t] - pref[l][t]));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << ans << endl;\r\n}\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n}"
}