{
    "id": 210804893,
    "contestId": 1335,
    "creationTimeSeconds": 1687550957,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "Aratab"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 811,
    "memoryConsumedBytes": 3481600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int MAXN = (int)2e3 + 5;\r\nconst int M = 200;\r\nint a[MAXN];\r\nint lf[MAXN][M];\r\nint rf[MAXN][M];\r\nvector<int> b[MAXN];\r\n\r\nvoid dahiken() {\r\n  int n;\r\n  cin >> n;\r\n  for (int i=0; i<n; i++) {\r\n    cin >> a[i];\r\n    --a[i];\r\n  }\r\n  \r\n  for (int i=0; i<n; i++) {\r\n    lf[i][a[i]] = 1;\r\n    b[a[i]].push_back(i);\r\n    for (int j=0; j<M && i>0; j++) {\r\n      lf[i][j] += lf[i-1][j];\r\n    }\r\n  } \r\n  for (int i=n-1; i>=0; i--) {\r\n    rf[i][a[i]] = 1;\r\n    for (int j=0; j<M && i+1<n; j++) {\r\n      rf[i][j] += rf[i+1][j];\r\n    }\r\n  }\r\n  \r\n  function<int(int,int,int,int)> calc = [&](int l, int r, int x, int y) -> int {\r\n    //cerr << \"TEST3: \" << l << ' ' << r << ' ' << x << ' ' << y << '\\n';\r\n    return lf[l][x] + rf[r][x] + lf[r][y] - lf[l][y];\r\n  };\r\n  \r\n  int ans = 1;\r\n  for (int x=0; x<M; x++) {\r\n    if (lf[n-1][x] <= 1) continue;\r\n    ans = max(ans, lf[n-1][x]);\r\n    for (int y=0; y<M; y++) {\r\n      if (x == y) continue;\r\n      if (lf[n-1][y] == 0) continue;\r\n      if (lf[b[x].back()][y] - lf[b[x][0]][y] == 0) continue;\r\n      \r\n      int l = 0;\r\n      int r = b[x].size()-1;\r\n      for (int i=0; i<(int)b[x].size()/2; i++) {\r\n\tans = max(ans, calc(b[x][l+i], b[x][r-i], x, y));\r\n      }\r\n    }\r\n  }\r\n  \r\n  cout << ans << '\\n';\r\n  \r\n  for (int i=0; i<MAXN; i++) {\r\n    b[i].clear();\r\n    for (int j=0; j<M; j++) {\r\n      lf[i][j] = 0;\r\n      rf[i][j] = 0;\r\n    }\r\n  }\r\n}\r\n\r\nint main() {\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  \r\n  int t;\r\n  cin >> t;\r\n  while (t--) {\r\n    dahiken();\r\n  }\r\n}\r\n"
}