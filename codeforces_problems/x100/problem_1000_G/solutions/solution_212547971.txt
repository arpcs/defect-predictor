{
    "id": 212547971,
    "contestId": 1000,
    "creationTimeSeconds": 1688729905,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1000,
        "index": "G",
        "name": "Two-Paths",
        "type": "PROGRAMMING",
        "rating": 2700,
        "tags": [
            "data structures",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 1000,
        "members": [
            {
                "handle": "ziche"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530110100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 1341,
    "memoryConsumedBytes": 62668800,
    "source": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nconst int N = 3e5 + 5;\nconst int MAX_LEVEL = 19;\n\nint n, q, u, v, w;\nint a[N];\nstd::vector<std::pair<int, int>> adj[N];\nint tb[MAX_LEVEL][N];\nint lvl[N];\nlong long dpU[N], dpD[N];\nlong long sv1[N], sv2[N], sv3[N];\n\nvoid dfs0(int u, int p) {\n  tb[0][u] = p;\n  for (int i = 1; i < MAX_LEVEL; i++) {\n    tb[i][u] = tb[i - 1][tb[i - 1][u]];\n  }\n  for (const auto& v : adj[u]) {\n    if (v.first != p) {\n      lvl[v.first] = lvl[u] + 1;\n      dfs0(v.first, u);\n    }\n  }\n}\n\nint LCA(int u, int v) {\n  int d = lvl[v] - lvl[u];\n  for (int i = 0; i < MAX_LEVEL; i++) {\n    if (d >> i & 1) {\n      v = tb[i][v];\n    }\n  }\n  if (u == v) {\n    return u;\n  }\n  for (int i = MAX_LEVEL - 1; i >= 0; i--) {\n    if (tb[i][v] != tb[i][u]) {\n      v = tb[i][v];\n      u = tb[i][u];\n    }\n  }\n  return tb[0][u];\n}\n\nvoid dfs1(int u, int p) {\n  dpD[u] = a[u];\n  for (const auto& v : adj[u]) {\n    if (v.first != p) {\n      dfs1(v.first, u);\n      dpD[u] += std::max(0ll, dpD[v.first] - 2 * v.second);\n    }\n  }\n}\n\nvoid dfs2(int u, int p) {\n  for (const auto& v : adj[u]) {\n    if (v.first != p) {\n      dpU[v.first] = std::max(0ll, +dpU[u] + dpD[u] - std::max(0ll, dpD[v.first] - 2 * v.second) - 2 * v.second);\n      dfs2(v.first, u);\n    }\n  }\n}\n\nvoid dfs3(int u, int p) {\n  for (const auto& v : adj[u]) {\n    if (v.first != p) {\n      sv2[v.first] = sv2[u] - v.second;\n      sv3[v.first] = sv3[u] + (dpD[u] - std::max(0ll, dpD[v.first] - 2 * v.second));\n      dfs3(v.first, u);\n    }\n  }\n}\n\nlong long getExeclusion(int from, int to) {\n  std::swap(from, to);\n  long long ret = sv2[to] - sv2[from];\n  ret += sv3[to] - sv3[from];\n  return ret;\n}\n\nint main() {\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(NULL);\n\n  std::cin >> n >> q;\n  for (int i = 1; i <= n; i++) {\n    std::cin >> a[i];\n  }\n  for (int i = 1; i < n; i++) {\n    std::cin >> u >> v >> w;\n    adj[u].push_back(std::make_pair(v, w));\n    adj[v].push_back(std::make_pair(u, w));\n  }\n  dfs0(1, 0);\n  dfs1(1, 0);\n  dfs2(1, 0);\n  dfs3(1, 0);\n  for (int i = 0; i < q; i++) {\n    std::cin >> u >> v;\n    if (lvl[u] > lvl[v]) {\n      std::swap(u, v);\n    }\n    int lca = LCA(u, v);\n    if (lca == u) {\n      std::cout << dpU[u] + dpD[v] + getExeclusion(v, u) << \"\\n\";\n    } else {\n      std::cout << dpU[lca] + dpD[u] + dpD[v] + getExeclusion(u, lca) + getExeclusion(v, lca) - dpD[lca] << \"\\n\";\n    }\n  }\n  return 0;\n}\n// UJUHNYHjOeKHiVBQUtHVQSTprOSnAhJiNTrhvOSyLOOaiaYeApvJtkSRkzMnPaBEFaSRLNWOlJipPeiAIqaZLVpTrlAURbLQDDALrkrBNfppOmxMoGHgRhjqFmoWZpfC"
}