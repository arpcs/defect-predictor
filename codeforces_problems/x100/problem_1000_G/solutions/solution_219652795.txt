{
    "id": 219652795,
    "contestId": 1000,
    "creationTimeSeconds": 1692522785,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1000,
        "index": "G",
        "name": "Two-Paths",
        "type": "PROGRAMMING",
        "rating": 2700,
        "tags": [
            "data structures",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 1000,
        "members": [
            {
                "handle": "petewat.c"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530110100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 1154,
    "memoryConsumedBytes": 110796800,
    "source": "#include<iostream>\n#include<stack>\n#include<map>\n#include<vector>\n#include<string>\n#include<unordered_map>\n#include <queue>\n#include<cstring>\n#include<limits.h>\n#include<cmath>\n#include<set>\n#include<algorithm>\n#include<bitset>\nusing namespace std;\n#define ll long long\n#define f first\n#define endl \"\\n\"\n#define s second\n#define pii pair<int,int>\n#define ppii pair<int,pii>\n#define pll pair<ll,ll>\n#define pb push_back\n#define fastio ios::sync_with_stdio(false);cin.tie(NULL);\nconst int mxn=3*1e5,lg=20;\n#define int long long\nint n,q;\nint val[mxn+10],jump[mxn+10][lg+1],h[mxn+10],down[mxn+10],dist[mxn+10],up[mxn+10];\nint extra[mxn+10],all[mxn+10];\nvector<pii>adj[mxn+10];\nvoid solve(int cur,int p){\n    down[cur]=val[cur];\n    for(auto i:adj[cur]){\n        if(i.f==p)continue;\n        h[i.f]=h[cur]+1;\n        jump[i.f][0]=cur;\n        solve(i.f,cur);\n        down[cur]+=max(0ll,down[i.f]-(2*i.s));\n        extra[i.f]=max(0ll,down[i.f]-(2*i.s));\n        all[cur]+=extra[i.f];\n    }\n}\nvoid solve2(int cur,int p){\n    for(auto i:adj[cur]){\n        if(i.f==p)continue;\n        dist[i.f]=dist[cur]+(down[cur]-max(0ll,down[i.f]-(2*i.s)))-i.s;\n        up[i.f]=max(0ll,up[cur]+(down[cur]-max(0ll,down[i.f]-(2*i.s)))-2*i.s);\n        solve2(i.f,cur);\n    }\n}\nint b4a=0,b4b=0;\nint lca(int a,int b){\n    if(h[a]<h[b])swap(a,b);\n    int k=h[a]-h[b];\n    for(int i=0;i<=lg;i++)if(k&(1<<i))a=jump[a][i];\n    if(a==b)return a;\n    for(int i=lg;i>=0;i--){\n        if(jump[a][i]!=jump[b][i]){\n            a=jump[a][i];\n            b=jump[b][i];\n        }\n    }\n    b4a=a;\n    b4b=b;\n    return jump[a][0];\n}\nint32_t main(){\n    fastio\n    cin>>n>>q;\n    for(int i=1;i<=n;i++)cin>>val[i];\n    for(int i=0;i<n-1;i++){\n        int u,v,w;cin>>u>>v>>w;\n        adj[v].pb({u,w});\n        adj[u].pb({v,w});\n    }\n    solve(1,-1);\n    solve2(1,-1);\n    for(int i=1;i<=lg;i++)for(int j=1;j<=n;j++)jump[j][i]=jump[jump[j][i-1]][i-1];\n    while(q--){\n        int u,v;cin>>u>>v;\n        int node=lca(u,v);\n        if(node==u||node==v){\n            if(node==v)swap(u,v);\n            cout<<up[node]+down[v]+(dist[v]-dist[node])<<'\\n';\n        }\n        else{\n            int ans=down[u]+down[v]+up[node]+(dist[u]+dist[v])-(2*dist[node])-val[node]-all[node];\n            cout<<ans<<'\\n';\n        }\n    }   \n    /*\n    for(int i=1;i<=n;i++)cout<<down[i]<<'\\n';\n    cout<<'\\n';\n    for(int i=1;i<=n;i++)cout<<dist[i]<<'\\n';\n    */\n    return 0;\n}"
}