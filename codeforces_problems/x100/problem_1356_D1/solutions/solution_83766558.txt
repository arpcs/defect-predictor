{
    "id": 83766558,
    "contestId": 1356,
    "creationTimeSeconds": 1592152185,
    "relativeTimeSeconds": 174585,
    "problem": {
        "contestId": 1356,
        "index": "D1",
        "name": "Quantum Classification - 1",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1356,
        "members": [
            {
                "handle": "ruippeixotog"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1591977600
    },
    "programmingLanguage": "Q#",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 3174400,
    "source": "namespace Solution {\n    open Microsoft.Quantum.Convert;\n    open Microsoft.Quantum.Intrinsic;\n    open Microsoft.Quantum.Canon;\n    open Microsoft.Quantum.Arrays;\n    open Microsoft.Quantum.MachineLearning;\n    open Microsoft.Quantum.Math;\n\n    function WithProductKernel(scale : Double, sample : Double[]) : Double[] {\n        return sample + [scale * Fold(TimesD, 1.0, sample)];\n    }\n\n    function Preprocessed(samples : Double[][]) : Double[][] {\n        let scale = 1.0;\n\n        return Mapped(\n            WithProductKernel(scale, _),\n            samples\n        );\n    }\n\n    function DefaultSchedule(samples : Double[][]) : SamplingSchedule {\n        return SamplingSchedule([0..Length(samples) - 1]);\n    }\n\n    function ClassifierStructure() : ControlledRotation[] {\n        return [\n            ControlledRotation((0, new Int[0]), PauliX, 4),\n            ControlledRotation((0, new Int[0]), PauliZ, 5),\n            ControlledRotation((1, new Int[0]), PauliX, 6),\n            ControlledRotation((1, new Int[0]), PauliZ, 7),\n            ControlledRotation((0, [1]), PauliX, 0),\n            ControlledRotation((1, [0]), PauliX, 1),\n            ControlledRotation((1, new Int[0]), PauliZ, 2),\n            ControlledRotation((1, new Int[0]), PauliX, 3)\n        ];\n    }\n\n    operation TrainModel(\n        trainingVectors : Double[][],\n        trainingLabels : Int[],\n        initialParameters : Double[][]\n    ) : (Double[], Double) {\n        let samples = Mapped(\n            LabeledSample,\n            Zip(Preprocessed(trainingVectors), trainingLabels)\n        );\n        // Message(\"Ready to train.\");\n        let (optimizedModel, nMisses) = TrainSequentialClassifier(\n            Mapped(\n                SequentialModel(ClassifierStructure(), _, 0.0),\n                initialParameters\n            ),\n            samples,\n            DefaultTrainingOptions()\n                w/ LearningRate <- 0.1\n                w/ MinibatchSize <- 15\n                w/ Tolerance <- 0.005\n                w/ NMeasurements <- 10000\n                w/ MaxEpochs <- 16\n                w/ VerboseMessage <- Message,\n            DefaultSchedule(trainingVectors),\n            DefaultSchedule(trainingVectors)\n        );\n        // Message($\"Training complete, found optimal parameters {optimizedModel::Parameters} with bias {optimizedModel::Bias}\");\n        return (optimizedModel::Parameters, optimizedModel::Bias);\n    }\n\n    operation ValidateModel(\n        validationVectors : Double[][],\n        validationLabels : Int[],\n        parameters : Double[],\n        bias : Double\n    ) : Double {\n        let samples = Mapped(\n            LabeledSample,\n            Zip(Preprocessed(validationVectors), validationLabels)\n        );\n        let tolerance = 0.005;\n        let nMeasurements = 10000;\n        let results = ValidateSequentialClassifier(\n            SequentialModel(ClassifierStructure(), parameters, bias),\n            samples,\n            tolerance,\n            nMeasurements,\n            DefaultSchedule(validationVectors)\n        );\n        return IntAsDouble(results::NMisclassifications) / IntAsDouble(Length(samples));\n    }\n\n    operation ClassifyModel(\n        samples : Double[][],\n        tolerance : Double,\n        nMeasurements : Int\n    ) : Int[] {\n        let (structure, (parameters, bias)) = Solve();\n\n        let model = Default<SequentialModel>()\n            w/ Structure <- structure\n            w/ Parameters <- parameters\n            w/ Bias <- bias;\n        let features = Preprocessed(samples);\n        let probabilities = EstimateClassificationProbabilities(\n            tolerance, model,\n            features, nMeasurements\n        );\n        return InferredLabels(model::Bias, probabilities);\n    }\n\n    operation Solve() : (ControlledRotation[], (Double[], Double)) {\n        return (ClassifierStructure(), (\n            [0.05945643,2.9751678,2.04669902265625,0.6371834226562499,1.02284737265625,1.2615363726562498,4.05635587265625,5.392960322656251],\n            0.13271842945495516\n        ));\n    }\n}\n"
}