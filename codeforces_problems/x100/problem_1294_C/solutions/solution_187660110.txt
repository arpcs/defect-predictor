{
    "id": 187660110,
    "contestId": 1294,
    "creationTimeSeconds": 1672692286,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1294,
        "index": "C",
        "name": "Product of Three Numbers",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1294,
        "members": [
            {
                "handle": "dzhi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1579703700
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "// package c1294;\n\n//\n// Codeforces Round #615 (Div. 3) 2020-01-22 06:35\n// C. Product of Three Numbers\n// https://codeforces.com/contest/1294/problem/C\n// time limit per test 2 seconds; memory limit per test 256 megabytes\n// public class Pseudo for 'Source should satisfy regex [^{}]*public\\s+(final)?\\s*class\\s+(\\w+).*'\n//\n// You are given one integer number n. Find three a, b, c such that 2 <= a, b, c and a * b * c = n\n// or say that it is impossible to do it.\n//\n// If there are several answers, you can print any.\n//\n// You have to answer t independent test cases.\n//\n// Input\n//\n// The first line of the input contains one integer t (1 <= t <= 100) -- the number of test cases.\n//\n// The next n lines describe test cases. The i-th test case is given on a new line as one integer n\n// (2 <= n <= 10^9).\n//\n// Output\n//\n// For each test case, print the answer on it. Print \"NO\" if it is impossible to represent n as a *\n// b * c for some a, b, c such that 2 <= a, b, c.\n//\n// Otherwise, print \"YES\" and possible such representation.\n//\n// Example\n/*\ninput:\n5\n64\n32\n97\n2\n12345\noutput:\nYES\n2 4 8\nNO\nNO\nNO\nYES\n3 5 823\n*/\n//\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStreamReader;\nimport java.lang.invoke.MethodHandles;\nimport java.util.Random;\nimport java.util.StringTokenizer;\n\npublic class C1294C {\n  static final int MOD = 998244353;\n  static final Random RAND = new Random();\n\n  static int[] solve(int n) {\n    // ** + 1 is necessary in cases like 24 = 2 x 3 x 4 **\n    int r = (int) Math.cbrt(n) + 1;\n    for (int a = 2; a <= r; a++) {\n      if (n % a != 0) {\n        continue;\n      }\n      int m = n / a;\n      // System.out.format(\"  a:%d m:%d\\n\", a, m);\n\n      // ** use sqrt() here for cases like 90909083 = 11 x 5237 x 17359 **\n      int k = (int) Math.sqrt(m) + 1;\n      for (int b = a + 1; b <= k; b++) {\n        if (m % b != 0) {\n          continue;\n        }\n        int c = m / b;\n        if (c > b) {\n          return new int[] {a, b, c};\n        }\n      }\n    }\n    return null;\n  }\n\n  static void test(int n) {\n    int[] ans = solve(n);\n    System.out.println(ans == null ? \"NO\" : \"YES\");\n    if (ans != null) {\n      System.out.format(\"%d %d %d\\n\", ans[0], ans[1], ans[2]);\n    }\n  }\n\n  static boolean test = false;\n  static void doTest() {\n    if (!test) {\n      return;\n    }\n    long t0 = System.currentTimeMillis();\n    test(999999913);\n    System.out.format(\"%d msec\\n\", System.currentTimeMillis() - t0);\n    System.exit(0);\n  }\n\n  public static void main(String[] args) {\n    doTest();\n    MyScanner in = new MyScanner();\n    int T = in.nextInt();\n    for (int t = 1; t <= T; t++) {\n      int n = in.nextInt();\n      int[] ans = solve(n);\n      System.out.println(ans == null ? \"NO\" : \"YES\");\n      if (ans != null) {\n        System.out.format(\"%d %d %d\\n\", ans[0], ans[1], ans[2]);\n      }\n    }\n  }\n\n  static void myAssert(boolean cond) {\n    if (!cond) {\n      throw new RuntimeException(\"Unexpected\");\n    }\n  }\n\n  static class MyScanner {\n    BufferedReader br;\n    StringTokenizer st;\n\n    public MyScanner() {\n      try {\n        final String USERDIR = System.getProperty(\"user.dir\");\n        String cname = MethodHandles.lookup().lookupClass().getCanonicalName().replace(\".MyScanner\", \"\");\n        cname = cname.lastIndexOf('.') > 0 ? cname.substring(cname.lastIndexOf('.') + 1) : cname;\n        final File fin = new File(USERDIR + \"/io/c\" + cname.substring(1,5) + \"/\" + cname + \".in\");\n        br = new BufferedReader(new InputStreamReader(fin.exists()\n            ? new FileInputStream(fin) : System.in));\n      } catch (Exception e) {\n        br = new BufferedReader(new InputStreamReader(System.in));\n      }\n    }\n\n    public String next() {\n      try {\n        while (st == null || !st.hasMoreElements()) {\n          st = new StringTokenizer(br.readLine());\n        }\n        return st.nextToken();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n    public int nextInt() {\n      return Integer.parseInt(next());\n    }\n\n    public long nextLong() {\n      return Long.parseLong(next());\n    }\n  }\n}\n"
}