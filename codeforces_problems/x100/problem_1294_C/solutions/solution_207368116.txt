{
    "id": 207368116,
    "contestId": 1294,
    "creationTimeSeconds": 1685111954,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1294,
        "index": "C",
        "name": "Product of Three Numbers",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1294,
        "members": [
            {
                "handle": "rohit_nehara"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1579703700
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 512000,
    "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Codeforces { \r\n    public static class Pair implements Comparable<Pair> {\r\n    int val;\r\n    int idx;\r\n \r\n    public Pair(int x, int y)\r\n    {\r\n        this.val = x;\r\n        this.idx = y;\r\n    }\r\n \r\n    public String toString()\r\n    {\r\n        return \"( \" + val + \" , \" + idx + \" )\";\r\n    }\r\n \r\n    @Override public int compareTo(Pair a)\r\n    {\r\n        return this.val-a.val;\r\n    }\r\n}\r\n\r\n     static long mod = 1000000007;\r\n     public static void main(String[] args) {\r\n        try {\r\n            System.setIn(new FileInputStream(\"./input.txt\"));\r\n            System.setOut(new PrintStream(new FileOutputStream(\"output.txt\")));\r\n        }catch(Exception e){}\r\n        Scanner sc = new Scanner(System.in);\r\n        int te = sc.nextInt();\r\n        //te=1;\r\n        while(te-- >0) {\r\n                long n=sc.nextLong();\r\n               if(n%2==0){\r\n                long val3=n/8;\r\n                if((2*4*val3)==n && val3!=4 && val3!=2 && val3>1){\r\n                    System.out.println(\"YES\");\r\n                    System.out.println(\"2 4 \"+val3);\r\n                }else{\r\n                    System.out.println(\"NO\");\r\n                }\r\n               }else{\r\n                    long val3=n/15;\r\n                    if((3*5*val3)==n && val3!=5 && val3!=3 && val3>1){\r\n                        System.out.println(\"YES\");\r\n                        System.out.println(\"3 5 \"+val3);\r\n                    }\r\n                    else{\r\n                        System.out.println(\"NO\");\r\n                    }\r\n               }\r\n\r\n            } \r\n\r\n    } \r\n       public static int solveLeet(Integer[]dp,int idx,int end,int k,int cnt){\r\n        if(idx==end){\r\n            if(cnt==k){\r\n                return 1;\r\n            }\r\n           // return 0;\r\n        }\r\n        System.out.print(\"Idx \"+idx+\" cnt \"+cnt+\" \");\r\n        if(idx<0)return 0;\r\n        if(idx>=dp.length)return 0;\r\n         if(cnt>k)return 0;\r\n        if(dp[idx]!=null)return dp[idx]; \r\n       \r\n        int left =solveLeet(dp,idx-1,end,k,cnt+1)%1000000007;\r\n        int right =solveLeet(dp,idx+1,end,k,cnt+1)%1000000007;\r\n        int na =solveLeet(dp,idx+1,end,k,cnt)%1000000007; \r\n        return dp[idx]=(left+right)%1000000007;\r\n    }\r\n    // public static int dfsGrid(int [][] grid,int sr,int sc,boolean [][]vis){\r\n    //     if(sr>=grid.length || sc>=grid[0].length || sc<0 || sr<0 ||vis[sr][sc]  || grid[sr][sc]==0){ \r\n    //         return 0;\r\n    //     } \r\n    //      vis[sr][sc]=true;\r\n    //      int val1= dfsGrid(grid,sr-1,sc,vis);\r\n    //      int val2= dfsGrid(grid,sr,sc-1,vis);\r\n    //      int val3= dfsGrid(grid,sr+1,sc,vis);\r\n    //      int val4= dfsGrid(grid,sr,sc1,vis);\r\n    //      return val1+val2+val3+val4+grid[sr][sc];\r\n\r\n    // }\r\n    public static long getHash(String s){\r\n        long h=0;\r\n        for(int i=0;i<s.length();i++){\r\n            char ch=s.charAt(i);\r\n            h=(h*31+(ch-'a'+1))%mod;\r\n        }\r\n        return h;\r\n    }\r\n    public static void rotate(int[][] matrix) {\r\n        \r\n        for(int i=0;i<matrix.length;i++){\r\n            for(int j=i;j<matrix[0].length;j++){\r\n                int temp = matrix[i][j];\r\n                matrix[i][j] =matrix[j][i];\r\n                matrix[j][i]=temp; \r\n            }\r\n        }\r\n        for(int i=0;i<matrix.length;i++){\r\n            int start =0;\r\n            int end =matrix.length-1;\r\n            while(start<end){\r\n                int temp =matrix[i][start];\r\n                matrix[i][start]=matrix[i][end];\r\n                matrix[i][end]=temp;\r\n                start++;\r\n                end--;\r\n            }\r\n        }\r\n\r\n    }\r\n     public static String sortString(String inputString){ \r\n        char tempArray[] = inputString.toCharArray(); \r\n        Arrays.sort(tempArray); \r\n        return new String(tempArray);\r\n    }\r\n    public static void dfs(List<List<Integer>>graph, List<Integer>li, int src, boolean []vis){\r\n\r\n     for(int val : graph.get(src)){\r\n            if(vis[val])continue;\r\n            vis[val]=true;\r\n            li.add(val);\r\n            dfs(graph,li,src,vis);\r\n        }\r\n    }\r\n    public static long powFun(long x,long y){\r\n        if (y == 0)\r\n                return 1;\r\n            else if (y % 2 == 0)\r\n                return powFun(x, y / 2)%mod* powFun(x, y / 2)%mod;\r\n            else\r\n                return x%mod * powFun(x, y / 2)%mod * powFun(x, y / 2)%mod;\r\n    }\r\n      public static int lcs(String s1, String s2) {\r\n        int [][] t = new int [s1.length()+1][s2.length()+1]; \r\n        for(int i =1;i<t.length;i++){\r\n            for(int j =1;j<t[0].length;j++){\r\n                if(s1.charAt(i-1)==s2.charAt(j-1)){\r\n                    t[i][j] = 1+t[i-1][j-1];\r\n                }else {\r\n                    t[i][j] = Math.max(t[i-1][j],t[i][j-1]);\r\n                }\r\n            }\r\n        }\r\n        return t[t.length-1][t[0].length-1];\r\n    }\r\n\r\n    \r\n}\r\n\r\n"
}