{
    "id": 210723754,
    "contestId": 1176,
    "creationTimeSeconds": 1687497745,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1176,
        "index": "A",
        "name": "Divide it!",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "brute force",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1176,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560090900
    },
    "programmingLanguage": "C# 10",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n\n// Function to calculate the minimum number of moves required to obtain 1 from n\nlong long calculateMinMoves(long long n) {\n    long long moves = 0;\n\n    // Apply the operations as long as n is not equal to 1\n    while (n != 1) {\n        if (n % 2 == 0) {\n            n /= 2;\n        } else if (n % 3 == 0) {\n            n = 2 * n / 3;\n        } else if (n % 5 == 0) {\n            n = 4 * n / 5;\n        } else {\n            // If none of the operations can be applied, it is impossible to obtain 1\n            return -1;\n        }\n\n        moves++;\n    }\n\n    return moves;\n}\n\nint main() {\n    int q;\n    std::cin >> q;\n\n    for (int i = 0; i < q; i++) {\n        long long n;\n        std::cin >> n;\n\n        // Calculate the minimum number of moves required for each query\n        long long minMoves = calculateMinMoves(n);\n\n        std::cout << minMoves << std::endl;\n    }\n\n    return 0;\n}\n\n\t\t\t\t\t \t\t\t \t  \t \t\t     \t\t\t\t\t\t \t"
}