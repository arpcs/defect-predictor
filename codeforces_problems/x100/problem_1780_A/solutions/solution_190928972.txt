{
    "id": 190928972,
    "contestId": 1780,
    "creationTimeSeconds": 1674884239,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1780,
        "index": "A",
        "name": "Hayato and School",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1780,
        "members": [
            {
                "handle": "eneskayiklik"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1674657300
    },
    "programmingLanguage": "Kotlin 1.7",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 452,
    "memoryConsumedBytes": 20889600,
    "source": "import java.io.BufferedInputStream\r\nimport java.io.PrintWriter\r\nimport java.util.UUID\r\nimport kotlin.math.abs\r\nimport kotlin.math.max\r\nimport kotlin.math.min\r\nimport kotlin.math.pow\r\n\r\nfun main() {\r\n    repeat(getIntFast) { solve() }\r\n    Reader.OUT.close()\r\n}\r\n\r\nfun solve() {\r\n    val size = getIntFast\r\n    val list = getIntLine(size)\r\n    val firstOption = mutableListOf<Int>()\r\n    val secondOption = mutableListOf<Int>()\r\n\r\n    var oddCount = 0\r\n    var evenCount = 0\r\n    list.forEachIndexed { index, i ->\r\n        if (i % 2 == 1) {\r\n            firstOption.add(index + 1)\r\n            if (oddCount == 0) secondOption.add(index + 1).also { oddCount++ }\r\n        } else {\r\n            if (evenCount < 2) secondOption.add(index + 1).also { evenCount++ }\r\n        }\r\n    }\r\n    println(\r\n        if (firstOption.size >= 3) \"YES\\n${firstOption.take(3).joinToString(\" \")}\"\r\n        else if (secondOption.size >= 3) \"YES\\n${secondOption.joinToString(\" \")}\"\r\n        else \"NO\"\r\n    )\r\n}\r\n\r\ntailrec fun gcd(a: Int, b: Int): Int {\r\n    if(b == 0) return a\r\n    return if (a % b == 0) abs(b) else gcd(b, a % b)\r\n}\r\n\r\nval getIntFast: Int get() = Reader.nextInt()\r\nval getLong: Long get() = Reader.nextLong()\r\nval getString: String get() = Reader.nextString()\r\nfun getLongLine(n: Int) = LongArray(n) { getLong }\r\nfun getIntLine(n: Int) = IntArray(n) { getIntFast }\r\ninfix fun Int.pow(other: Int) = toDouble().pow(other.toDouble()).toInt()\r\n\r\nobject Reader {\r\n    private const val BS = 1 shl 16\r\n    private const val NC = 0.toChar()\r\n    private val buf = ByteArray(BS)\r\n    private var bId = 0\r\n    private var size = 0\r\n    private var c = NC\r\n\r\n    private var IN: BufferedInputStream = BufferedInputStream(System.`in`, BS)\r\n    val OUT: PrintWriter = PrintWriter(System.out)\r\n\r\n    private val char: Char\r\n        get() {\r\n            while (bId == size) {\r\n                size = IN.read(buf) // no need for checked exceptions\r\n                if (size == -1) return NC\r\n                bId = 0\r\n            }\r\n            return buf[bId++].toInt().toChar()\r\n        }\r\n\r\n    fun nextInt(): Int {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n\r\n    fun nextLong(): Long {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0L\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n\r\n    fun nextString(): String {\r\n        val ret = StringBuilder()\r\n        while (true) {\r\n            c = char\r\n            if (!isWhitespace(c)) {\r\n                break\r\n            }\r\n        }\r\n        ret.append(c)\r\n        while (true) {\r\n            c = char\r\n            if (isWhitespace(c)) {\r\n                break\r\n            }\r\n            ret.append(c)\r\n        }\r\n        return ret.toString()\r\n    }\r\n\r\n    private fun isWhitespace(c: Char): Boolean {\r\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t'\r\n    }\r\n}"
}