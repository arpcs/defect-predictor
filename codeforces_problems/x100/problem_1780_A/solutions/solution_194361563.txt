{
    "id": 194361563,
    "contestId": 1780,
    "creationTimeSeconds": 1676906365,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1780,
        "index": "A",
        "name": "Hayato and School",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1780,
        "members": [
            {
                "handle": "Zealotrahl"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1674657300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef pair<int,int> pi;\r\ntypedef vector<pi> vpi;\r\ntypedef vector<int> vi;\r\n\r\n#define PB push_back\r\n#define MP make_pair\r\n// Common memset settings\r\n//memset(memo, -1, sizeof memo); // dp memoization with -1\r\n//memset(arr, 0, sizeof arr); //clear array of integers\r\n\r\n\r\nstruct unionFind {\r\n  vector<int> parrent;\r\n  vector<int> size;\r\n  void init(int n) {\r\n    parrent.assign(n, 0);\r\n    size.assign(n, 0);\r\n    for(int i = 0;i<n;i++) {\r\n      parrent[i] = i;\r\n      size[i] = 1;\r\n    }\r\n  }\r\n\r\n  int get(int a) {\r\n    if(parrent[a] != a) {\r\n      parrent[a] = get(parrent[a]);\r\n    }\r\n    return parrent[a];\r\n  }\r\n\r\n  void unionFun(int a, int b) {\r\n    a = get(a);\r\n    b = get(b);\r\n\r\n    if(a == b) {\r\n      return;\r\n    }\r\n    if(size[a] > size[b]) {\r\n      swap(a,b);\r\n    }\r\n    parrent[a] = b;\r\n    size[b] += size[a];\r\n  }\r\n};\r\n\r\nstruct segtree {\r\n  vector<long long> tree;\r\n  int size;\r\n  void init(int n) {\r\n    size = 1;\r\n    while(size < n) {\r\n      size *= 2;\r\n    }\r\n    tree.assign(size*2 - 1, 0);\r\n  }\r\n\r\n  void build(vector<int> &a, int x, int lx, int rx) {\r\n    if(rx - lx == 1) {\r\n      if(lx < a.size())\r\n        tree[x] = a[lx];\r\n    } else {\r\n      int m = (lx + rx)/2;\r\n      build(a, 2*x + 1, lx, m);\r\n      build(a, 2*x + 2, m, rx);\r\n      tree[x] = tree[2*x + 1] + tree[2*x + 2];\r\n    }\r\n  }\r\n\r\n  void build(vector<int> &a) {\r\n    init(a.size());\r\n    build(a,0, 0, size);\r\n  }\r\n\r\n  void set(int i, int v, int x, int lx, int rx) {\r\n    if(rx - lx == 1) {\r\n      tree[x] = v;\r\n      return;\r\n    }\r\n    int m = (lx + rx)/2;\r\n    if(i < m) {\r\n      set(i, v, 2*x + 1, lx, m);\r\n    } else {\r\n      set(i, v, 2*x + 2, m, rx);\r\n    }\r\n    tree[x] = tree[2*x + 1] + tree[2*x + 2];\r\n  }\r\n  void set(int i, int v) {\r\n    set(i, v, 0, 0, size);\r\n  }\r\n\r\n  long long sum(int l, int r, int x, int lx, int rx) {\r\n    if(l >= rx || lx >= r) {\r\n      return 0;\r\n    }\r\n    if(lx >= l && rx <= r) {\r\n      return tree[x];\r\n    }\r\n    int m = (lx + rx)/2;\r\n    long long s1 = sum(l, r, 2*x + 1, lx, m);\r\n    long long s2 = sum(l, r, 2*x + 2, m, rx);\r\n    return s1 + s2;\r\n  }\r\n\r\n  long long sum(int l, int r){\r\n    return sum(l, r, 0, 0, size);\r\n  }\r\n};\r\n\r\nstruct P {\r\n  int x, y;\r\n  bool operator<(const P &p) {\r\n    if (x != p.x) return x < p.x;\r\n    else return y < p.y;\r\n  }\r\n};\r\n\r\nvoid subsetGenerate(int n){\r\n  for (int b = 0; b < (1<<n); b++) {\r\n    vector<int> subset;\r\n    for (int i = 0; i < n; i++) {\r\n      if (b&(1<<i)) subset.push_back(i);\r\n    }\r\n  }\r\n}\r\n\r\nvoid permutationGenerate(int n){\r\n  vector<int> permutation;\r\n  for (int i = 0; i < n; i++) {\r\n    permutation.push_back(i);\r\n  }\r\n  do {\r\n  // process permutation\r\n  } while (next_permutation(permutation.begin(),permutation.end()));\r\n}\r\n\r\nbool customSort(int a, int b) {\r\n  return a < b;\r\n}\r\n\r\n//#pragma GCC optimize(\"Ofast\")\r\n//#pragma GCC target(\"avx,avx2,fma\")\r\n//#pragma GCC optimization(\"unroll-loops\")\r\nint main(){\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  //freopen(\"input.txt\", \"r\", stdin);\r\n  //freopen(\"output.txt\", \"w\", stdout);\r\n  //string s\r\n  //getline(cin, s);\r\n  //printf(\"%.9f\\n\", x);\r\n  \r\n  int t;\r\n  cin >> t;\r\n  while(t--){\r\n    vector<int> even,odds;\r\n    int n;\r\n    cin >> n;\r\n    for(int i = 0;i<n;i++){\r\n      int x;\r\n      cin >> x;\r\n      if(x%2){\r\n        odds.push_back(i+1);\r\n      } else {\r\n        even.push_back(i+1);\r\n      }\r\n    }\r\n    if(odds.size() && (odds.size() > 2 || even.size() > 1)){\r\n      cout << \"YES\" << endl;\r\n      if(odds.size() > 2){\r\n        for(int i = 0;i<3;i++){\r\n          cout << odds[i] << \" \";\r\n        }\r\n        cout << endl;\r\n      } else {\r\n        for(int i = 0;i<2;i++){\r\n          cout << even[i] << \" \";\r\n        }\r\n        cout << odds[0] << endl;\r\n      }\r\n    } else {\r\n      cout << \"NO\" << endl;\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}"
}