{
    "id": 191176434,
    "contestId": 1780,
    "creationTimeSeconds": 1675021663,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1780,
        "index": "A",
        "name": "Hayato and School",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1780,
        "members": [
            {
                "handle": "Manga."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1674657300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": " /*\r\n                \u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2864\u2824\u28a4\u28e4\u2840\r\n                \u2800\u2800\u2800\u2800\u2800\u28a0\u280f\u2800\u2800\u2808\u2819\u28ff\u28e6\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\r\n                \u2800\u2800\u2800\u2800\u28a0\u280b\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2886\u2800\u2800\u2800\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u28e0\u28f6\u28fe\u28ff\u281f\u280b\u2813\u2844\r\n                \u2800\u2800\u2800\u2880\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2818\u28ff\u28ff\u28f7\u2840\u2800\u2800\u2800\u2800\u2800\u2882\u2880\u284e\u2800\u2800\u2800\u2800\u28e0\u28fe\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2839\u2844\r\n                \u2800\u2800\u2800\u287c\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28fe\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2800\u2800\u2800\u2800\u2800\u2847\r\n                \u2800\u2800\u2880\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2801\u2800\u2800\u2800\u2800\u2800\u2880\u2847\r\n                \u2800\u2800\u28b8\u2800\u2800\u2800\u28b0\u2845\u2800\u2800\u2800\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2800\u2800\u2800\u2800\u28b8\r\n                \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b7\u28e4\u28f4\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2844\u2800\u2807\r\n                \u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u28e0\r\n                \u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2870\u2801\r\n                \u2800\u2800\u2800\u28bb\u2840\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2807\r\n                \u2800\u2800\u2800\u2800\u28a7\u2800\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2806\r\n                \u2800\u2800\u2800\u2800\u2818\u2886\u2800\u2800\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f0\u28ff\u2846\u28ff\u28ff\u28ff\u285f\u28b0\u28f6\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\r\n                \u2800\u2800\u2800\u2800\u2800\u2808\u28a7\u2840\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\r\n                \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u28e4\u28f6\u28ff\u28ff\u2844\u2809\u2809\u28fd\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\r\n                \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2839\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2801\u2838\u28ff\u28ff\u28ff\u28ff\u2807\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\r\n                \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u28bf\u28c4\u28c0\u2800\u2808\u2889\u2809\u2801\u2800\u2880\u28c0\u28bf\u28ff\u28ff\u28ff\u281f\u2801\r\n                \u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28e4\u28f4\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u28a0\u2840\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u28f5\u28ff\u28ff\u28ff\u28c1\u2840\r\n                \u2800\u28c0\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2859\u283f\u28ff\u28ff\u28ff\u283f\u2883\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2840\r\n                \u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28e4\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2840\r\n\r\n                (`-')       (`-')  _              (`-')  _     (`-')   (`-')  _\r\n        ( OO).->    (OO ).-/       .->    (OO ).-/  <-.(OO )   (OO ).-/\r\n        /    '._    / ,---.    ,--.'  ,-. / ,---.   ,------,)  / ,---.\r\n        |'--...__)  | \\ /`.\\  (`-')'.'  / | \\ /`.\\  |   /`. '  | \\ /`.\\\r\n        `--.  .--'  '-'|_.' | (OO \\    /  '-'|_.' | |  |_.' |  '-'|_.' |\r\n           |  |    (|  .-.  |  |  /   /) (|  .-.  | |  .   .' (|  .-.  |\r\n           |  |     |  | |  |  `-/   /`   |  | |  | |  |\\  \\   |  | |  |\r\n           `--'     `--' `--'    `--'     `--' `--' `--' '--'  `--' `--'\r\n            hello , there <3\r\n\r\n\r\n\r\n*/\r\n\r\n#include <iostream>\r\n#include <stdlib.h>\r\n#include <cstring>\r\n#include <cctype>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <iomanip>\r\n#include <cmath>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <utility>\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std ;\r\n\r\n// FAST I/O\r\n#define GeekDav cin.tie(0), cout.tie(0), cin.sync_with_stdio(0), cout.sync_with_stdio(0) ;\r\n#define endl '\\n' ;\r\n\r\ntypedef long long ll ;\r\ntypedef long double ld ;\r\ntypedef unsigned long long ull ;\r\n\r\nconst ll   llmin  = -1e18 ;\r\nconst ll   llmax  =  1e18 ;\r\nconst int  imin   = -1e9  ;\r\nconst int  imax   =  1e9  ;\r\n// imax , imin may need sometime +/- 1\r\n\r\n// modluo\r\nconst int mod = 1e9 + 7  ;\r\nconst int mod2 = 998244353 ;\r\nconst int mod3 = 3e7 ;\r\nconst int bfkmod = 1000003 ;\r\n\r\n// Fast Functions\r\nll  fstp  ( int b , int p ) {\r\n    if (!p) return 1 ;\r\n    ll x = fstp ( b , p >> 1 ) ;\r\n    x = x * x  ;\r\n    if ( p & 1 ) x = x * b;\r\n    return  x ;\r\n}\r\n\r\nll  fstp2 ( int b , int p ) { if (!p) return 1 ; ll x = fstp ( b , p >> 1 ) ; x = x * x ; x %= mod2 ;  if ( p & 1 ) x *= b ; return  x % mod2  ; }\r\nint gcd  ( int a , int b ) { return ( (!b) ? a : gcd (b , a % b ) ) ; }\r\nll  gcdll  ( ll a , ll b ) { return ( (!b) ? a : gcd (b , a % b ) ) ; }\r\nll mm ( ll a , ll b ) { return (a*b)%mod ; }\r\n\r\n// no extra spaces ( \" \\n\" [i == n - 1] )\r\n\r\nll SumSeries ( ll x ) {\r\n    return ( ( x * ( x + 1 ) ) / 2  ) ;\r\n}\r\n\r\n// grid movements\r\nint dx[] = {-1 , 1 , 0 , 0};\r\nint dy[] = {0, 0 , 1  , -1};\r\n\r\nconst int OO = 0x3f3f3f3f ;\r\nconst ll LOO = 0x3f3f3f3f3f3f3f3f ;\r\n\r\nint dx_8[] = {-1,-1,0,1,1,1,0,-1};\r\nint dy_8[] = {0,1,1,1,0,-1,-1,-1};\r\n\r\nvoid solve () {\r\n    int n ; cin >> n;\r\n    int eve[3] , odd[3] , o = -1 , e = -1 ;\r\n    for ( int i = 0 ;  i < n ; i++ ) {\r\n        int x ; cin >> x ;\r\n        if( (x&1)  && (o < 3) ) odd[++o] = i+1 ;\r\n        if( !(x&1) && (e < 3) ) eve[++e] = i+1 ;\r\n    }\r\n    if ( o >= 2 ){\r\n        cout << \"YES\" << endl ;\r\n        cout << odd[0] << \" \" << odd[1] << \" \" << odd[2] << endl ;\r\n    }\r\n    else if ( e >= 1 && o != -1 ){\r\n        cout << \"YES\" << endl ;\r\n        cout << eve[0] << \" \" << eve[1] << \" \" << eve[0] << endl ;\r\n    }\r\n    else {\r\n        cout << \"NO\" << endl;\r\n    }\r\n    return ;\r\n}\r\n\r\nvoid test  ( int t = 1 ) {\r\n    // per-process use here to avoid re-calculate\r\n    // do test cases\r\n    for( int i = 0 ; i < t ; i++ ) solve() ;\r\n}\r\n\r\nint main() {\r\n    GeekDav\r\n    // preprocess() ;\r\n    // freopen(\"input.txt\" , \"r\" , stdin ) ;\r\n    // freopen(\"output.txt\", \"w\" , stdout ) ;\r\n\r\n    int t = 1 ;\r\n    cin >> t ;\r\n    // cin.ignore() ;\r\n\r\n    test(t)  ;\r\n    // test() ;\r\n\r\n    return 0 ;\r\n}\r\n\r\n/*\r\n  ::: holder spaceA\r\n\r\n*/\r\n"
}