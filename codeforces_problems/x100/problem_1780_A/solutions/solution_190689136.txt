{
    "id": 190689136,
    "contestId": 1780,
    "creationTimeSeconds": 1674755711,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1780,
        "index": "A",
        "name": "Hayato and School",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1780,
        "members": [
            {
                "handle": "Axel__Blaze"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1674657300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\u00a0\r\n#include <bits/stdc++.h>\r\n\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\n\r\nusing namespace __gnu_pbds;\r\n\r\n//you can use greater and lee_equal on the place of less\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key\r\n\r\n#define fastio()       ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define M              1000000007\r\n#define int            long long int\r\n#define F              first\r\n#define S              second\r\n#define pb             push_back\r\n#define si             set <int>\r\n#define vi             vector <int>\r\n#define pii            pair <int, int>\r\n#define vpi            vector <pii>\r\n#define vpp            vector <pair<int, pii>>\r\n#define mii            map <int, int>\r\n#define mpi            map <pii, int>\r\n#define spi            set <pii>\r\n#define endl           \"\\n\"\r\n#define sz(x)          ((int) x.size())\r\n#define all(p)         p.begin(), p.end()\r\n#define double         long double\r\n#define que_max        priority_queue <int>\r\n#define que_min        priority_queue <int, vi, greater<int>>\r\n#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)\r\n#define print(a)       for(auto x : a) cout << x << \" \"; cout << endl\r\n#define print1(a)      for(auto x : a) cout << x.F << \" \" << x.S << endl\r\n#define print2(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< \" \"; cout << endl\r\n\r\n//*****************************************************************************************s\r\n//ceil(log2(k)) //if k=15 then output will be 4 which is 2 ka power 4 = 16(15 ke uper wala power of 2)\r\n//floor(log2(k)) //if k=15 then output will be 3 which is 2 ka power3 = 8 (15 ke niche wala power of 2)\r\n//******************************************************************************************e\r\n\r\n//******************************* POWER OF TWO *****************************************//\r\nbool isPowerOfTwo(int n){if(n==0)return false;return (ceil(log2(n)) == floor(log2(n)));}\r\n//**************************************************************************************//\r\n\r\n//*************************XOR TILL N*****************************//s\r\nint XorTillN(int n)\r\n{\r\n  if(n%4 == 0)\r\n     return n;\r\n  if(n%4 == 1)\r\n     return 1;\r\n  if(n%4 == 2)\r\n     return n+1;\r\n  if(n%4 == 3)\r\n     return 0;\r\n  \r\n  return 0;\r\n}\r\n//***********************************************************//e\r\n\r\n//************************************************************s\r\n/*remember this\r\nto find out the index of the largest element in vector\r\nint itr = max_element(a.begin(), a.end()) - a.begin();\r\n*/ //here vector name is a;*************************************\r\n\r\n\r\n//****************most significant set bit********************************//\r\nint mostsignificantsetbit(int n)\r\n{\r\n\t// To find the position\r\n     // of the most significant set bit\r\n     int k = (int)(log2(n));\r\n     return k;\r\n}\r\n//*************************************END************************************************//\r\n\r\n//************msot significant set bit with number set bit at kth position ******************//\r\nint setBitNumber(int n)\r\n{\r\n \r\n    // To find the position\r\n    // of the most significant\r\n    // set bit\r\n    int k = (int)(log2(n));\r\n \r\n    // To return the the value\r\n    // of the number with set\r\n    // bit at k-th position \r\n    // for example for 11 it will return 8 and for 19 it will 16.\r\n    return 1 << k;\r\n\r\n//this too is also used \r\n//     int setBitNumber(int n)\r\n// {\r\n//     if (n == 0)\r\n//         return 0;\r\n \r\n//     int msb = 0;\r\n//     n = n / 2;\r\n//     while (n != 0) {\r\n//         n = n / 2;\r\n//         msb++;\r\n//     }\r\n \r\n//     return (1 << msb);\r\n// }\r\n}\r\n//***************************************END*************************************//\r\n//************count number of set bits*****************************************//\r\nint countSetBits(int n)\r\n{\r\n    int count = 0;\r\n    while (n) {\r\n        count += n & 1;\r\n        n >>= 1;\r\n    }\r\n    return count;\r\n}\r\n//**************************************END***********************************//\r\n\r\n//*************Right most set bit ****************************************//\r\nint getFirstSetBitPos(int n)\r\n{\r\n    return log2(n & -n) + 1;\r\n};\r\n//************************************END*******************************//\r\n\r\n\r\n//*************** LCM ************************************************\r\nint lcm(int a , int b)\r\n{\r\n\tint ans = (a * b)/__gcd(a,b);\r\n\treturn ans;\r\n}\r\n//*********************************END***************************************//\r\n\r\n//**********************a to the power b and power with mod *************************//\r\ninline int power(int a, int b)\r\n{\r\n\tint x = 1;\r\n\twhile (b)\r\n\t{\r\n\t\tif (b & 1) x *= a;\r\n\t\ta *= a;\r\n\t\tb >>= 1;\r\n\t}\r\n\treturn x;\r\n}\r\n\r\n//time comp -> O(log(b))\r\nint powerwithmod(int a,int b)\r\n{\r\n\tint result = 1;\r\n\r\n\twhile(b)\r\n\t{\r\n\t\tif(b&1)\r\n\t\t{\r\n\t\t\tresult = result * a;\r\n\t\t\tresult = result % M; \r\n\t\t}\r\n\t\ta = a * a;\r\n\t\ta = a % M;\r\n\t\tb = b>>1; // b = b/2 also works\r\n\t}\r\n\treturn result;\r\n}\r\n//***************************************END****************************************//\r\n\r\n//**************************(Sieve)************************************************//\r\nconst int N = 1000000;\r\nbool sieve[1000001];\r\nvoid createsieve()\r\n{\r\n\tfor(int i=2; i<=N; i++)\r\n\t{\r\n\t\tsieve[i] = true;\r\n\t}\r\n\tfor(int i=2; i*i<=N; i++)\r\n\t{\r\n\t\tif(sieve[i] == true)\r\n\t\t{\r\n\t\t\tfor(int j = i*i; j<=N; j+=i)\r\n\t\t\t{\r\n\t\t\t\tsieve[j] = false;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n//*******************************END**************************************//\r\n\r\n//*************is perfect square *********************************//\r\nbool isPerfectSquare(int x)\r\n{\r\n    // Find floating point value of\r\n    // square root of x.\r\n    if (x >= 0) {\r\n        int sr = sqrt(x);  \r\n        // if product of square root\r\n        //is equal, then\r\n        // return T/F\r\n        return (sr * sr == x);\r\n    }\r\n    // else return false if n<0\r\n    return false;\r\n}\r\n//************************************END***************************************************//\r\n\r\n//*********add and multiply with 1e9+7(combinatorics)**************************************//\r\n\tint inverse(int x)\r\n    {\r\n    \treturn powerwithmod(x , M-2);\r\n    }\r\n\tint mod(int x)\r\n    {\r\n        return ((x%M + M)%M);\r\n    }\r\n    int add(int a, int b){\r\n        return mod(mod(a)+mod(b));\r\n    }\r\n    int sub(int a, int b){\r\n        return mod(mod(a)-mod(b));\r\n    }\r\n    int mul(int a, int b){\r\n        return mod(mod(a)*mod(b));\r\n    }\r\n    int divm(int a , int b)\r\n    {\r\n    \treturn mul(a , inverse(b));\r\n    }\r\n    \r\n    // const int N = 1e5;\r\n    int fact[N];\r\n    void calculate_factorial()\r\n    {\r\n    \tfact[0] = 1;\r\n    \tfor(int i=1; i<N; i++)\r\n    \t{\r\n    \t\tfact[i] = mul(fact[i-1],i);\r\n    \t}\r\n    }\r\n    int ncr(int n , int r){\r\n    \treturn mul(mul(fact[n] , inverse(fact[r])) , inverse(fact[n-r]));\r\n    }\r\n//***********************************END***********************************************//\r\n\r\ntemplate <typename Arg1>\r\nvoid __f (const char* name, Arg1&& arg1) { cout << name << \" : \" << arg1 << endl; }\r\ntemplate <typename Arg1, typename... Args>\r\nvoid __f (const char* names, Arg1&& arg1, Args&&... args)\r\n{\r\n\tconst char* comma = strchr (names + 1, ',');\r\n\tcout.write (names, comma - names) << \" : \" << arg1 << \" | \"; __f (comma + 1, args...);\r\n}\r\n\r\n//const int N = 200005;\r\n\r\n\r\nvoid solve() \r\n{\r\n\tint n;\r\n\tcin>>n;\r\n\r\n\tint arr[n];\r\n\tint odd = 0;\r\n\tint even = 0;\r\n\tfor(int i=0; i<n; i++)\r\n\t{\r\n\t\tint x;\r\n\t\tcin>>x;\r\n\t\tif(x % 2 == 0)\r\n\t\t{\r\n\t\t\teven++;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\todd++;\r\n\t\t}\r\n\t\tarr[i] = x;\r\n\t}\r\n\tvi ans;\r\n\t// bug(odd , even);\r\n\tif(odd >= 3)\r\n\t{\r\n\t\tint cnt = 0;\r\n\t\tcout<<\"YES\"<<endl;\r\n\t\tfor(int i=0; i<n ; i++)\r\n\t\t{\r\n\t\t\tif(arr[i] % 2)\r\n\t\t\t{\r\n\t\t\t\tcout<<i+1<<\" \";\r\n\t\t\t\tcnt++;\r\n\t\t\t}\r\n\t\t\tif(cnt == 3) \r\n\t\t\t{\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcout<<endl;\r\n\t}\r\n\telse if(odd >= 1 and even >= 2)\r\n\t{\r\n\t\tcout<<\"YES\"<<endl;\r\n\t\tint cnt1=0;\r\n\t\tint cnt2 = 0;\r\n\t\tfor(int i=0; i<n; i++)\r\n\t\t{\r\n\t\t\tif(arr[i] % 2 == 0 and cnt1 < 2)\r\n\t\t\t{\r\n\t\t\t\tcout<<i+1<<\" \";\r\n\t\t\t\tcnt1++;\r\n\t\t\t}\r\n\t\t\telse if(arr[i] % 2 == 1 and cnt2 < 1)\r\n\t\t\t{\r\n\t\t\t\tcout<<i+1<<\" \";\r\n\t\t\t\tcnt2++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcout<<endl;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tcout<<\"NO\"<<endl;\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\nint32_t main()\r\n{\r\n\tfastio(); \r\n\r\n#ifndef ONLINE_JUDGE\r\n\tfreopen(\"input.txt\",  \"r\",  stdin);\r\n\tfreopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n\r\n\tclock_t z = clock();\r\n\t//createsieve();\r\n\tint t = 1;\r\n\tcin >> t;\r\n\twhile (t--) solve();\r\n\r\n\tcerr << \"Run Time : \" << ((double)(clock() - z) / CLOCKS_PER_SEC);\r\n\r\n\treturn 0;\r\n}"
}