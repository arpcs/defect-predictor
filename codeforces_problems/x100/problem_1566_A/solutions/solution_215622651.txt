{
    "id": 215622651,
    "contestId": 1566,
    "creationTimeSeconds": 1690304418,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1566,
        "index": "A",
        "name": "Median Maximization",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "binary search",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1566,
        "members": [
            {
                "handle": "2110030297"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631457300
    },
    "programmingLanguage": "Java 11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner;\r\n\r\npublic class MaximumPossibleMedian {\r\n\r\n    public static int maximumPossibleMedian(int y, int s) {\r\n        int medianPosition = (y + 1) / 2;\r\n        if (y % 2 == 1) {\r\n            medianPosition -= 1;\r\n        }\r\n        int medianElement = s / y;\r\n\r\n        return Math.min(medianElement, s - medianPosition * medianElement);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        \r\n        // Read the number of test cases\r\n        int t = scanner.nextInt();\r\n        \r\n        for (int i = 0; i < t; i++) {\r\n            // Read n and s for each test case\r\n            int y = scanner.nextInt();\r\n            int s = scanner.nextInt();\r\n\r\n            // Calculate and print the maximum possible median for this test case\r\n            int result = maximumPossibleMedian(n, s);\r\n            System.out.println(result);\r\n        }\r\n        \r\n        scanner.close();\r\n    }\r\n}\r\n"
}