{
    "id": 182087159,
    "contestId": 1566,
    "creationTimeSeconds": 1669094294,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1566,
        "index": "A",
        "name": "Median Maximization",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "binary search",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1566,
        "members": [
            {
                "handle": "charles95"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631457300
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 0,
    "source": "\r\nimport java.io.*;\r\nimport java.lang.reflect.Array;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.*;\r\nimport java.util.function.Function;\r\nimport java.util.stream.Collectors;\r\nimport java.util.stream.Stream;\r\n\r\n\r\npublic class Main {\r\n//class Codechef {\r\n\r\n    static FastReader sc;\r\n    static StringBuilder sb = new StringBuilder();\r\n    static int mod = (int) (Math.pow(10, 9)+7);\r\n    static final int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };\r\n    static final int[] dx8 = { -1, -1, -1, 0, 0, 1, 1, 1 }, dy8 = { -1, 0, 1, -1, 1, -1, 0, 1 };\r\n    static final int[] dx9 = { -1, -1, -1, 0, 0, 0, 1, 1, 1 }, dy9 = { -1, 0, 1, -1, 0, 1, -1, 0, 1 };\r\n    static HashSet<Character> set;\r\n    static final double eps = 1e-10;\r\n    static long [] arr = new long[100001];\r\n    static List<Integer> primeNumbers = new ArrayList<>();\r\n    public static void main(String[] args){\r\n        sc = new FastReader();\r\n        int testCases=1;\r\n        //primeSieve(40000000);\r\n        testCases=sc.nextInt();\r\n        while (testCases-->0) compute();\r\n        System.out.println(sb.toString());\r\n    }\r\n\r\n    public static void compute() {\r\n        //Arrays.sort(al,Comparator.comparingInt(ar -> ar.value));\r\n        //Arrays.sort(al,Comparator.comparingInt(ar -> ar.index));\r\n\r\n        //shortestCompletingWord()\r\n\r\n\r\n\r\n\r\n        //sb.append(Math.max(0,res+1)).append(\"\\n\");\r\n        int n=sc.nextInt();\r\n        int s=sc.nextInt();\r\n        int res = n/2;\r\n        res++;\r\n        int r=s/res;\r\n        //sb.append(res!=-1&&res<=n?\"YES\":\"NO\").append(\"\\n\");\r\n        sb.append(r).append(\"\\n\");\r\n\r\n\r\n            //int sec = Arrays.stream(arr).sorted().distinct().skip(1).findFirst().getAsInt();\r\n\r\n\r\n\r\n    }\r\n    public int distinctAverages(int[] nums) {\r\n        HashSet<Double> set = new HashSet<>();\r\n        Arrays.sort(nums);\r\n        int l=nums.length;\r\n        double t;\r\n        for(int i=0;i<l/2;i++){\r\n            t=nums[i]+nums[l-i-1];\r\n            t/=2;\r\n            set.add(t);\r\n        }\r\n        return set.size();\r\n    }\r\n    public double[] convertTemperature(double celsius) {\r\n        double [] res = {celsius+273.15,(celsius*1.8)+32};\r\n        return res;\r\n    }\r\n    public int unequalTriplets(int[] nums) {\r\n        int res=0,l=nums.length;\r\n        for(int i=0;i<l;i++){\r\n            for(int j=i+1;j<l;j++){\r\n                if(nums[i]!=nums[j]){\r\n                    for(int k=j+1;k<l;k++){\r\n                        if(nums[i]!=nums[k]&&nums[k]!=nums[j])\r\n                            res++;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    public int[] deckRevealedIncreasing(int[] deck) {\r\n        int l=deck.length;\r\n        int [] res = new int[l];\r\n        int j=1;\r\n        Arrays.sort(deck);\r\n        for(int i=0;i<l;i++){\r\n            if(i*2<l)\r\n                res[2*i]=deck[i];\r\n            else{\r\n                res[j]=deck[i];\r\n                j+=2;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    public static boolean isPerfectSquare(int n){\r\n        int nn = (int)Math.sqrt(n);\r\n        if(nn*nn==n) return true;\r\n        return false;\r\n    }\r\n    public int garbageCollection(String[] garbage, int[] travel) {\r\n        int res=0;\r\n        int gi=-1,mi=-1,pi=-1;\r\n        int gl =garbage.length;\r\n        for(int i=gl-1;i>=0;i--){\r\n            if(garbage[i].contains(\"G\")){\r\n                gi=i;\r\n                break;\r\n            }\r\n        }\r\n        for(int i=gl-1;i>=0;i--){\r\n            if(garbage[i].contains(\"P\")){\r\n                pi=i;\r\n                break;\r\n            }\r\n        }\r\n        for(int i=gl-1;i>=0;i--){\r\n            if(garbage[i].contains(\"M\")){\r\n                mi=i;\r\n                break;\r\n            }\r\n        }\r\n        System.out.println(gi+\" \"+pi+\" \"+mi);\r\n        for(int i=1;i<=gi;i++){\r\n            res+=travel[i-1];\r\n            if(garbage[i].contains(\"G\"))\r\n                res+=count(garbage[i],'G');\r\n        }\r\n        for(int i=1;i<=mi;i++){\r\n            res+=travel[i-1];\r\n            if(garbage[i].contains(\"M\"))\r\n                res+=count(garbage[i],'M');\r\n        }\r\n        for(int i=1;i<=pi;i++){\r\n            res+=travel[i-1];\r\n            if(garbage[i].contains(\"P\"))\r\n                res+=count(garbage[i],'P');\r\n        }\r\n        if(garbage[0].contains(\"P\"))\r\n            res+=count(garbage[0],'P');\r\n        if(garbage[0].contains(\"M\"))\r\n            res+=count(garbage[0],'M');\r\n        if(garbage[0].contains(\"G\"))\r\n            res+=count(garbage[0],'G');\r\n        return res;\r\n    }\r\n    public int count(String s,char p){\r\n        int res=0;\r\n        for(char c:s.toCharArray()){\r\n            if(c==(p))\r\n                res++;\r\n        }\r\n        return res;\r\n    }\r\n    public int reverseInt(int n){\r\n        StringBuffer sbr = new StringBuffer(String.valueOf(n));\r\n        return Integer.parseInt(sbr.reverse().toString());\r\n    }\r\n    public boolean equalFrequency(String word) {\r\n        int [] arr = new int[26];\r\n        for(char c:word.toCharArray())\r\n            arr[c-'a']++;\r\n        HashSet<Integer> set = new HashSet<>();\r\n        int max=-1;\r\n        for(int i:arr){\r\n            if(i>0)\r\n                set.add(i);\r\n            max=Math.max(max,i);\r\n        }\r\n        Integer[] inset = set.toArray(new Integer[set.size()]);\r\n        if(set.size()!=2) return false;\r\n        if(Math.abs(inset[0]-inset[1])!=1) return false;\r\n        int maxcnt=0;\r\n        for(int i:arr){\r\n            if(i==max)\r\n                maxcnt++;\r\n        }\r\n        return maxcnt==1?true:false;\r\n\r\n    }\r\n    public List<Boolean> prefixesDivBy5(int[] nums) {\r\n        int l = nums.length;\r\n        List<Boolean> ar = new ArrayList<>();\r\n        StringBuilder res = new StringBuilder();\r\n        for(int i:nums){\r\n            res.append(i);\r\n            if(Integer.parseInt(res.toString(),2)%5==0)\r\n                ar.add(true);\r\n            else\r\n                ar.add(false);\r\n        }\r\n        return ar;\r\n    }\r\n    static long factorial(int i){\r\n        long result = 1;\r\n\r\n        for (int factor = 2; factor <= i; factor++) {\r\n            result *= factor;\r\n        }\r\n\r\n        return result;\r\n    }\r\n    static void reverseRange(int [] arr , int start , int end){\r\n        int [] res= new int[end-start+1];\r\n        for(int i=start;i<end;i++)\r\n            res[i-start]=arr[i];\r\n        reverse(res);\r\n        for(int i:res)\r\n            System.out.print(i+\"--\");\r\n        System.out.println(\"\");\r\n        for(int i=start;i<end;i++)\r\n            arr[i]=res[i-start];\r\n    }\r\n\r\n    class LRU{\r\n/*      Pseudo code\r\n        int size; // size of cache\r\n        double linked list  // maintains elements;\r\n        head\r\n        tail\r\n        // constructor {\r\n        size = n\r\n        dll = new dll\r\n        head = tail\r\n        }\r\n\r\n        boolean checkforhit(int k){\r\n            for(tail -> head)\r\n                if(hit){\r\n                    updatedll()\r\n                    return true;\r\n                }\r\n            return false\r\n        }\r\n\r\n        void put(int k){\r\n            if(checkforhit(k))\r\n                get(k)\r\n            else\r\n                head = k\r\n                tail --;\r\n        }\r\n\r\n        int get(dll)\r\n            search and return k\r\n\r\n         void updatedll(int k){\r\n               //find node where val == k;\r\n               from val to head\r\n                    shift values back\r\n               head = k\r\n         }\r\n\r\n\r\n*/\r\n    }\r\n    class Bitset {\r\n\r\n        int [] arr;\r\n        boolean allv;\r\n        boolean onev;\r\n        int cnt;\r\n        int l;\r\n        public Bitset(int size) {\r\n            arr = new int[size];\r\n            l=size;\r\n            Arrays.fill(arr,0);\r\n            allv=false;\r\n            onev=false;\r\n            cnt=0;\r\n        }\r\n\r\n        public void fix(int idx) {\r\n            if(idx<=this.arr.length && arr[idx]==0){\r\n                arr[idx]=1;\r\n                onev=true;\r\n                cnt++;\r\n            }\r\n            if(cnt==l)\r\n                allv=true;\r\n\r\n        }\r\n\r\n        public void unfix(int idx) {\r\n            if(idx<=this.arr.length && arr[idx]==1){\r\n                arr[idx]=0;\r\n                allv=false;\r\n                cnt--;\r\n            }\r\n            if(cnt==0)\r\n                onev=false;\r\n\r\n        }\r\n\r\n        public void flip() {\r\n\r\n            for(int i=0;i<l;i++){\r\n                if(arr[i]==0)\r\n                    arr[i]=1;\r\n                else\r\n                    arr[i]=0;\r\n            }\r\n            cnt=l-cnt;\r\n            if(cnt==0)\r\n                onev=false;\r\n            else\r\n                onev=true;\r\n            if(cnt==l)\r\n                allv=true;\r\n            else\r\n                allv=false;\r\n        }\r\n\r\n        public boolean all() {\r\n\r\n            return this.allv;\r\n        }\r\n\r\n        public boolean one() {\r\n\r\n            return this.onev;\r\n        }\r\n\r\n        public int count() {\r\n\r\n            return cnt;\r\n        }\r\n\r\n        public String toString() {\r\n            StringBuilder sb = new StringBuilder();\r\n            for(int i:arr)\r\n                sb.append(i);\r\n            return sb.toString();\r\n        }\r\n    }\r\n    public long smallestNumber(long num) {\r\n        long res=0;\r\n        //Arrays.sort(pl,Comparator.comparingInt(ar -> ar.b).thenComparingInt());\r\n        ArrayList<Long> arr = new ArrayList<>();\r\n        long n=Math.abs(num);\r\n        int zc=0;\r\n        if(num==0)\r\n            return 0;\r\n        StringBuilder sb = new StringBuilder();\r\n        while(n>0){\r\n            arr.add(n%10);\r\n            if(n%10==0)\r\n                zc++;\r\n            n/=10;\r\n        }\r\n        if(num>0){\r\n            Collections.sort(arr);\r\n            sb.append(arr.get(zc));\r\n            for(int i=0;i<zc;i++)\r\n                sb.append(0);\r\n            for(int i=zc+1;i<arr.size();i++)\r\n                sb.append(arr.get(i));\r\n\r\n        }\r\n        else{\r\n            Collections.sort(arr,Collections.reverseOrder());\r\n            for(int i=0;i<arr.size();i++)\r\n                sb.append(arr.get(i));\r\n        }\r\n        res=Long.parseLong(sb.toString());\r\n        if(num<0)\r\n            res*=(-1);\r\n        return res;\r\n    }\r\n    static int getDigitSum(long n){\r\n        int t=0;\r\n        while(n>0){\r\n            t+=(n%10);\r\n            n/=10;\r\n        }\r\n        return t;\r\n    }\r\n    static class Node{\r\n        int n;\r\n        int a;\r\n        int s;\r\n\r\n        public int getA() {\r\n            return a;\r\n        }\r\n\r\n        public int getAvg() {\r\n            return s;\r\n        }\r\n\r\n        Node(int a, int s,int n){\r\n            this.a=a;\r\n            this.s=s;\r\n            this.n=n;\r\n        }\r\n    }\r\n/*\r\n\r\nsorting based on number then age\r\n\r\nComparator<Triplet> employeeAgeComparator\r\n                = Comparator.comparingInt(Triplet::getA).reversed();\r\n        final Function<Triplet, String> byTheirName = person -> person.getName();\r\n        Arrays.sort(tarr,employeeAgeComparator.thenComparing(byTheirName));\r\n */\r\n//Updation Required\r\n    //Fenwick Tree (customisable)\r\n    //Segment Tree (customisable)\r\n\r\n    //-----CURRENTLY PRESENT-------//\r\n    //Graph\r\n    //DSU\r\n    //powerMODe\r\n    //power\r\n    //Segment Tree (work on this one)\r\n    //Prime Sieve\r\n    //Count Divisors\r\n    //Next Permutation\r\n    //Get NCR\r\n    //isVowel\r\n    //Sort (int)\r\n    //Sort (long)\r\n    //Binomial Coefficient\r\n    //Pair\r\n    //Triplet\r\n    //lcm (int & long)\r\n    //gcd (int & long)\r\n    //gcd (for binomial coefficient)\r\n    //swap (int & char)\r\n    //reverse\r\n\r\n    //Fast input and output\r\n\r\n    //-------------------------------------------------------------------\r\n    //-------------------------------------------------------------------\r\n    //-------------------------------------------------------------------\r\n    //-------------------------------------------------------------------\r\n    //-------------------------------------------------------------------\r\n\r\n\r\n    static boolean isPrime(long n) {\r\n        if(n < 2) return false;\r\n        if(n == 2 || n == 3) return true;\r\n        if(n%2 == 0 || n%3 == 0) return false;\r\n        long sqrtN = (long)Math.sqrt(n)+1;\r\n        for(long i = 6L; i <= sqrtN; i += 6) {\r\n            if(n%(i-1) == 0 || n%(i+1) == 0) return false;\r\n        }\r\n        return true;\r\n    }\r\n    static boolean isPalindrome(String str)\r\n    {\r\n        int i = 0, j = str.length() - 1;\r\n        while (i < j) {\r\n            if (str.charAt(i) != str.charAt(j))\r\n                return false;\r\n            i++;\r\n            j--;\r\n        }\r\n        return true;\r\n    }\r\n    //GRAPH (basic structure)\r\n    public static class Graph{\r\n        public int V;\r\n        public ArrayList<ArrayList<Integer>> edges;\r\n\r\n        //2 -> [0,1,2] (current)\r\n        Graph(int V){\r\n            this.V  = V;\r\n            edges = new ArrayList<>(V+1);\r\n            for(int i= 0; i <= V; i++){\r\n                edges.add(new ArrayList<>());\r\n            }\r\n        }\r\n\r\n        public void addEdge(int from , int to){\r\n            edges.get(from).add(to);\r\n        }\r\n    }\r\n\r\n    //DSU (path and rank optimised)\r\n    public static class DisjointUnionSets {\r\n        int[] rank, parent;\r\n        int n;\r\n\r\n        public DisjointUnionSets(int n)\r\n        {\r\n            rank = new int[n];\r\n            parent = new int[n];\r\n            Arrays.fill(rank, 1);\r\n            Arrays.fill(parent,-1);\r\n            this.n = n;\r\n        }\r\n\r\n        public int find(int curr){\r\n            if(parent[curr] == -1)\r\n                return curr;\r\n\r\n            //path compression optimisation\r\n            return parent[curr] = find(parent[curr]);\r\n        }\r\n\r\n        public void union(int a, int b){\r\n            int s1 = find(a);\r\n            int s2 = find(b);\r\n\r\n            if(s1 != s2){\r\n                if(rank[s1] < rank[s2]){\r\n                    parent[s1] = s2;\r\n                    rank[s2] += rank[s1];\r\n                }else{\r\n                    parent[s2] = s1;\r\n                    rank[s1] += rank[s2];\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //with mod\r\n    public static long powerMOD(long x, long y)\r\n    {\r\n        long res = 1L;\r\n        while (y > 0)\r\n        {\r\n            // If y is odd, multiply x with result\r\n            if ((y & 1) != 0){\r\n                x %= mod;\r\n                res %= mod;\r\n                res = (res * x)%mod;\r\n            }\r\n            // y must be even now\r\n            y = y >> 1; // y = y/2\r\n            x%= mod;\r\n            x = (x * x)%mod;  // Change x to x^2\r\n        }\r\n        return res%mod;\r\n    }\r\n\r\n    //without mod\r\n    public static long power(long x, long y)\r\n    {\r\n        long res = 1L;\r\n        while (y > 0)\r\n        {\r\n            // If y is odd, multiply x with result\r\n            if ((y & 1) != 0){\r\n                res = (res * x);\r\n            }\r\n            // y must be even now\r\n            y = y >> 1; // y = y/\r\n            x = (x * x);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public static class segmentTree{\r\n\r\n        public long[] arr;\r\n        public long[] tree;\r\n        public long[] lazy;\r\n\r\n        segmentTree(long[] array){\r\n            int n = array.length;\r\n            arr = new long[n];\r\n            for(int i= 0; i < n; i++) arr[i] = array[i];\r\n            tree = new long[4*n + 1];\r\n            lazy = new long[4*n + 1];\r\n        }\r\n\r\n        public  void build(int[]arr, int s, int e, int[] tree, int index){\r\n\r\n            if(s == e){\r\n                tree[index] = arr[s];\r\n                return;\r\n            }\r\n\r\n            //otherwise divide in two parts and fill both sides simply\r\n            int mid = (s+e)/2;\r\n            build(arr, s, mid, tree, 2*index);\r\n            build(arr, mid+1, e, tree, 2*index+1);\r\n\r\n            //who will build the current position dude\r\n            tree[index] = Math.min(tree[2*index], tree[2*index+1]);\r\n        }\r\n\r\n        public  int query(int sr, int er, int sc, int ec, int index, int[] tree){\r\n\r\n            if(lazy[index] != 0){\r\n                tree[index] += lazy[index];\r\n\r\n                if(sc != ec){\r\n                    lazy[2*index+1] += lazy[index];\r\n                    lazy[2*index] += lazy[index];\r\n                }\r\n\r\n                lazy[index] = 0;\r\n            }\r\n\r\n            //no overlap\r\n            if(sr > ec || sc > er) return Integer.MAX_VALUE;\r\n\r\n            //found the index baby\r\n            if(sr <= sc && ec <= er) return tree[index];\r\n\r\n            //finding the index on both sides hehehehhe\r\n            int mid = (sc + ec)/2;\r\n            int left = query(sr, er, sc, mid, 2*index, tree);\r\n            int right = query(sr, er, mid+1, ec, 2*index + 1, tree);\r\n\r\n            return Integer.min(left, right);\r\n        }\r\n\r\n        //now we will do point update implementation\r\n        //it should be simple then we expected for sure\r\n        public  void update(int index, int indexr, int increment, int[] tree, int s, int e){\r\n\r\n            if(lazy[index] != 0){\r\n                tree[index] += lazy[index];\r\n\r\n                if(s != e){\r\n                    lazy[2*index+1] = lazy[index];\r\n                    lazy[2*index] = lazy[index];\r\n                }\r\n\r\n                lazy[index] = 0;\r\n            }\r\n\r\n            //no overlap\r\n            if(indexr < s || indexr > e) return;\r\n\r\n            //found the required index\r\n            if(s == e){\r\n                tree[index] += increment;\r\n                return;\r\n            }\r\n\r\n            //search for the index on both sides\r\n            int mid = (s+e)/2;\r\n            update(2*index, indexr, increment, tree, s, mid);\r\n            update(2*index+1, indexr, increment, tree, mid+1, e);\r\n\r\n            //now update the current range simply\r\n            tree[index] = Math.min(tree[2*index+1], tree[2*index]);\r\n        }\r\n\r\n        public  void rangeUpdate(int[] tree , int index, int s, int e, int sr, int er, int increment){\r\n\r\n            //if not at all in the same range\r\n            if(e < sr || er < s) return;\r\n\r\n            //complete then also move forward\r\n            if(s == e){\r\n                tree[index] += increment;\r\n                return;\r\n            }\r\n\r\n            //otherwise move in both subparts\r\n            int mid = (s+e)/2;\r\n            rangeUpdate(tree, 2*index, s, mid, sr, er, increment);\r\n            rangeUpdate(tree, 2*index + 1, mid+1, e, sr, er, increment);\r\n\r\n            //update current range too na\r\n            //i always forget this step for some reasons hehehe, idiot\r\n            tree[index] = Math.min(tree[2*index], tree[2*index + 1]);\r\n        }\r\n\r\n        public  void rangeUpdateLazy(int[] tree, int index, int s, int e, int sr, int er, int increment){\r\n\r\n            //update lazy values\r\n            //resolve lazy value before going down\r\n            if(lazy[index] != 0){\r\n                tree[index] += lazy[index];\r\n\r\n                if(s != e){\r\n                    lazy[2*index+1] += lazy[index];\r\n                    lazy[2*index] += lazy[index];\r\n                }\r\n\r\n                lazy[index] = 0;\r\n            }\r\n\r\n            //no overlap case\r\n            if(sr > e || s > er) return;\r\n\r\n            //complete overlap\r\n            if(sr <= s && er >= e){\r\n                tree[index] += increment;\r\n\r\n                if(s != e){\r\n                    lazy[2*index+1] += increment;\r\n                    lazy[2*index] += increment;\r\n                }\r\n                return;\r\n            }\r\n\r\n            //otherwise go on both left and right side and do your shit\r\n            int mid = (s + e)/2;\r\n            rangeUpdateLazy(tree, 2*index, s, mid, sr, er, increment);\r\n            rangeUpdateLazy(tree, 2*index + 1, mid+1, e, sr, er, increment);\r\n\r\n            tree[index] = Math.min(tree[2*index+1], tree[2*index]);\r\n            return;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    //ceil int\r\n    static int ceil(int x, int y) {\r\n        return (x % y == 0 ? x / y : (x / y + 1));\r\n    }\r\n\r\n    //ceil long\r\n    static long ceil(long x, long y) {\r\n        return (x % y == 0 ? x / y : (x / y + 1));\r\n    }\r\n\r\n    //sqrt\r\n    static long sqrt(long z) {\r\n        long sqz = (long) Math.sqrt(z);\r\n        while (sqz * 1L * sqz < z) {\r\n            sqz++;\r\n        }\r\n        while (sqz * 1L * sqz > z) {\r\n            sqz--;\r\n        }\r\n        return sqz;\r\n    }\r\n\r\n    //log base 2\r\n    static int log2(int N) {\r\n        int result = (int) (Math.log(N) / Math.log(2));\r\n        return result;\r\n    }\r\n\r\n    //power of two\r\n    static boolean isPowerOfTwo(int n)\r\n    {\r\n        if (n == 0)\r\n            return false;\r\n\r\n        while (n != 1) {\r\n            if (n % 2 != 0)\r\n                return false;\r\n            n = n / 2;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    public static int lower_bound(int[] arr, int x) {\r\n        int low = 0, high = arr.length - 1, mid = -1;\r\n        int ans = -1;\r\n        while (low <= high) {\r\n            mid = (low + high) / 2;\r\n\r\n            if (arr[mid] > x) {\r\n                high = mid - 1;\r\n            } else {\r\n                ans = mid;\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n\r\n    public static int upper_bound(int[] arr, int x) {\r\n        int low = 0, high = arr.length - 1, mid = -1;\r\n        int ans = arr.length;\r\n        while (low < high) {\r\n            mid = (low + high) / 2;\r\n\r\n            if (arr[mid] >= x) {\r\n                ans = mid;\r\n                high = mid - 1;\r\n            } else {\r\n                low = mid + 1;\r\n            }\r\n        }\r\n\r\n        return ans;\r\n    }\r\n\r\n    //prime sieve\r\n    public static void primeSieve(int n){\r\n        BitSet bitset = new BitSet(n+1);\r\n        for(long i = 0; i < n ; i++){\r\n            if (i == 0 || i == 1) {\r\n                bitset.set((int) i);\r\n                continue;\r\n            }\r\n            if(bitset.get((int) i)) continue;\r\n            primeNumbers.add((int)i);\r\n            for(long j = i; j <= n ; j+= i)\r\n                bitset.set((int)j);\r\n        }\r\n    }\r\n\r\n    //number of divisors\r\n    public static int countDivisors(long number){\r\n        if(number == 1) return 1;\r\n        List<Integer> primeFactors = new ArrayList<>();\r\n        int index = 0;\r\n        long curr = primeNumbers.get(index);\r\n        while(curr * curr <= number){\r\n            while(number % curr == 0){\r\n                number = number/curr;\r\n                primeFactors.add((int) curr);\r\n            }\r\n            index++;\r\n            curr = primeNumbers.get(index);\r\n        }\r\n\r\n        if(number != 1) primeFactors.add((int) number);\r\n        int current = primeFactors.get(0);\r\n        int totalDivisors = 1;\r\n        int currentCount = 2;\r\n        for (int i = 1; i < primeFactors.size(); i++) {\r\n            if (primeFactors.get(i) == current) {\r\n                currentCount++;\r\n            } else {\r\n                totalDivisors *= currentCount;\r\n                currentCount = 2;\r\n                current = primeFactors.get(i);\r\n            }\r\n        }\r\n        totalDivisors *= currentCount;\r\n        return totalDivisors;\r\n    }\r\n\r\n    //now adding next permutation function to java hehe\r\n    public static boolean next_permutation(int[] p) {\r\n        for (int a = p.length - 2; a >= 0; --a)\r\n            if (p[a] < p[a + 1])\r\n                for (int b = p.length - 1;; --b)\r\n                    if (p[b] > p[a]) {\r\n                        int t = p[a];\r\n                        p[a] = p[b];\r\n                        p[b] = t;\r\n                        for (++a, b = p.length - 1; a < b; ++a, --b) {\r\n                            t = p[a];\r\n                            p[a] = p[b];\r\n                            p[b] = t;\r\n                        }\r\n                        return true;\r\n                    }\r\n        return false;\r\n    }\r\n\r\n    //finding the value of NCR in O(RlogN) time and O(1) space\r\n    public static long getNcR(int n, int r)\r\n    {\r\n        long p = 1, k = 1;\r\n        if (n - r < r) r = n - r;\r\n\r\n        if (r != 0) {\r\n            while (r > 0) {\r\n                p *= n;\r\n                k *= r;\r\n                long m = __gcd(p, k);\r\n                p /= m;\r\n                k /= m;\r\n                n--;\r\n                r--;\r\n            }\r\n        }\r\n        else {\r\n            p = 1;\r\n        }\r\n        return p;\r\n    }\r\n\r\n    //is vowel function\r\n    public static boolean isVowel(char c)\r\n    {\r\n        return (c=='a' || c=='A' || c=='e' || c=='E' || c=='i' || c=='I' || c=='o' || c=='O' ||     c=='u' || c=='U');\r\n    }\r\n\r\n    public static boolean isSingleHole(char c)\r\n    {\r\n        return ( c=='A' || c=='D' ||  c=='O' ||  c=='R' ||   c=='P' || c=='Q');\r\n    }\r\n    //to sort the array with better method\r\n    public static void sort(int[] a) {\r\n        ArrayList<Integer> l=new ArrayList<>();\r\n        for (int i:a) l.add(i);\r\n        Collections.sort(l);\r\n        for (int i=0; i<a.length; i++) a[i]=l.get(i);\r\n    }\r\n\r\n    //sort long\r\n    public static void sort(long[] a) {\r\n        ArrayList<Long> l=new ArrayList<>();\r\n        for (long i:a) l.add(i);\r\n        Collections.sort(l);\r\n        for (int i=0; i<a.length; i++) a[i]=l.get(i);\r\n    }\r\n\r\n    //for calculating binomialCoeff\r\n    public static int binomialCoeff(int n, int k)\r\n    {\r\n        int C[] = new int[k + 1];\r\n        // nC0 is 1\r\n        C[0] = 1;\r\n        for (int i = 1; i <= n; i++) {\r\n            // Compute next row of pascal\r\n            // triangle using the previous row\r\n            for (int j = Math.min(i, k); j > 0; j--)\r\n                C[j] = C[j] + C[j - 1];\r\n        }\r\n        return C[k];\r\n    }\r\n\r\n    //Pair with int int\r\n    public static class Pair{\r\n        public int a;\r\n        public int b;\r\n        public String s;\r\n        public long l;\r\n        Pair(int a , int b){\r\n            this.a = a;\r\n            this.b = b;\r\n        }\r\n        Pair(long a , int b){\r\n            this.l = a;\r\n            this.b = b;\r\n        }\r\n        Pair(int a , String b){\r\n            this.a = a;\r\n            this.s = b;\r\n        }\r\n        @Override\r\n        public String toString(){\r\n            return a + \" -> \" + b;\r\n        }\r\n    }\r\n\r\n\r\n    //Triplet with int int int\r\n    public static class Triplet{\r\n\r\n        public int a;\r\n        public int b;\r\n        public int c;\r\n        public String name;\r\n        Triplet(String name,int a , int b, int c){\r\n            this.a = a;\r\n            this.b = b;\r\n            this.c = c;\r\n            this.name=name;\r\n        }\r\n\r\n        public int getA() {\r\n            return a;\r\n        }\r\n\r\n        public int getB() {\r\n            return b;\r\n        }\r\n\r\n        public int getC() {\r\n            return c;\r\n        }\r\n\r\n        public String getName() {\r\n            return name;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return \"Triplet{\" +\r\n                    \"a=\" + a +\r\n                    \", b=\" + b +\r\n                    \", c=\" + c +\r\n                    \", name='\" + name + '\\'' +\r\n                    '}';\r\n        }\r\n    }\r\n\r\n    //Shortcut function\r\n    public static long lcm(long a , long b){\r\n        return a * (b/gcd(a,b));\r\n    }\r\n\r\n    //let's make one for calculating lcm basically\r\n    public static int lcm(int a , int b){\r\n        return (a * b)/gcd(a,b);\r\n    }\r\n\r\n    //int version for gcd\r\n    public static int gcd(int a, int b){\r\n        if(b == 0)\r\n            return a;\r\n\r\n        return gcd(b , a%b);\r\n    }\r\n\r\n    //long version for gcd\r\n    public static long gcd(long a, long b){\r\n        if(b == 0)\r\n            return a;\r\n\r\n        return gcd(b , a%b);\r\n    }\r\n\r\n    //for ncr calculator(ignore this code)\r\n    public static long __gcd(long n1, long n2)\r\n    {\r\n        long gcd = 1;\r\n        for (int i = 1; i <= n1 && i <= n2; ++i) {\r\n            // Checks if i is factor of both integers\r\n            if (n1 % i == 0 && n2 % i == 0) {\r\n                gcd = i;\r\n            }\r\n        }\r\n        return gcd;\r\n    }\r\n\r\n    static boolean isOddBitsSet(int n){\r\n        if(Integer.bitCount(n)%2==0)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    //swapping two elements in an array\r\n    public static void swap(int[] arr, int left , int right){\r\n        int temp = arr[left];\r\n        arr[left] = arr[right];\r\n        arr[right] = temp;\r\n    }\r\n\r\n    public static void swap(long[] arr, int left , int right){\r\n        long temp = arr[left];\r\n        arr[left] = arr[right];\r\n        arr[right] = temp;\r\n    }\r\n\r\n    //for char array\r\n    public static void swap(char[] arr, int left , int right){\r\n        char temp = arr[left];\r\n        arr[left] = arr[right];\r\n        arr[right] = temp;\r\n    }\r\n\r\n    //reversing an array\r\n    public static void reverse(int[] arr){\r\n        int left = 0;\r\n        int right = arr.length-1;\r\n\r\n        while(left <= right){\r\n            swap(arr, left,right);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n\r\n    public static void reverse(long[] arr){\r\n        int left = 0;\r\n        int right = arr.length-1;\r\n\r\n        while(left <= right){\r\n            swap(arr, left,right);\r\n            left++;\r\n            right--;\r\n        }\r\n    }\r\n\r\n    public static long expo(long a, long b, long mod) {\r\n        long res = 1;\r\n        while (b > 0) {\r\n            if ((b & 1) == 1L) res = (res * a) % mod;  //think about this one for a second\r\n            a = (a * a) % mod;\r\n            b = b >> 1;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    //SOME EXTRA DOPE FUNCTIONS\r\n    public static long mminvprime(long a, long b) {\r\n        return expo(a, b - 2, b);\r\n    }\r\n\r\n    public static long mod_add(long a, long b, long m) {\r\n        a = a % m;\r\n        b = b % m;\r\n        return (((a + b) % m) + m) % m;\r\n    }\r\n\r\n    public static long mod_sub(long a, long b, long m) {\r\n        a = a % m;\r\n        b = b % m;\r\n        return (((a - b) % m) + m) % m;\r\n    }\r\n\r\n    public static long mod_mul(long a, long b, long m) {\r\n        a = a % m;\r\n        b = b % m;\r\n        return (((a * b) % m) + m) % m;\r\n    }\r\n\r\n    public static long mod_div(long a, long b, long m) {\r\n        a = a % m;\r\n        b = b % m;\r\n        return (mod_mul(a, mminvprime(b, m), m) + m) % m;\r\n    }\r\n\r\n    //O(n) every single time remember that\r\n    public static long nCr(long N, long K , long mod){\r\n        long upper = 1L;\r\n        long lower = 1L;\r\n        long lowerr = 1L;\r\n\r\n        for(long i = 1; i <= N; i++){\r\n            upper = mod_mul(upper, i, mod);\r\n        }\r\n\r\n        for(long i = 1; i <= K; i++){\r\n            lower = mod_mul(lower, i, mod);\r\n        }\r\n\r\n        for(long i = 1; i <= (N - K); i++){\r\n            lowerr = mod_mul(lowerr, i, mod);\r\n        }\r\n\r\n        // out.println(upper + \" \" + lower + \" \" + lowerr);\r\n        long answer = mod_mul(lower, lowerr, mod);\r\n        answer = mod_div(upper, answer, mod);\r\n\r\n        return answer;\r\n    }\r\n\r\n    // ll *fact = new ll[2 * n + 1];\r\n    // ll *ifact = new ll[2 * n + 1];\r\n    // fact[0] = 1;\r\n    // ifact[0] = 1;\r\n    // for (ll i = 1; i <= 2 * n; i++)\r\n    // {\r\n    // \tfact[i] = mod_mul(fact[i - 1], i, MOD1);\r\n    // \tifact[i] = mminvprime(fact[i], MOD1);\r\n    // }\r\n    //ifact is basically inverse factorial in here!!!!!(imp)\r\n    public static long combination(long n, long r, long m, long[] fact, long[] ifact) {\r\n        long val1 = fact[(int)n];\r\n        long val2 = ifact[(int)(n - r)];\r\n        long val3 = ifact[(int)r];\r\n        return (((val1 * val2) % m) * val3) % m;\r\n    }\r\n\r\n    static int[] readArray(int N) {\r\n        int[] res = new int[N];\r\n        for (int i = 0; i < N; i++) {\r\n            res[i] = (int) sc.nextInt();\r\n        }\r\n        return res;\r\n    }\r\n\r\n    static double[] readArrayDouble(int N) {\r\n        double[] res = new double[N];\r\n        for (int i = 0; i < N; i++) {\r\n            res[i] = sc.nextDouble();\r\n        }\r\n        return res;\r\n    }\r\n\r\n    static long[] readArrayLong(int N) {\r\n        long[] res = new long[N];\r\n        for (int i = 0; i < N; i++) {\r\n            res[i] = sc.nextLong();\r\n        }\r\n        return res;\r\n    }\r\n\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(new\r\n                    InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n\r\n}"
}