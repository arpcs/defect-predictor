{
    "id": 188954447,
    "contestId": 1490,
    "creationTimeSeconds": 1673505741,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "cpp10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "Java 17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 4505600,
    "source": "//package com.example.practice.codeforces.below2000;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\nimport java.util.ArrayDeque;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.StringTokenizer;\n\n//G. Old Floppy Drive\npublic class Solution124 {\n    public static void main (String [] args) throws IOException {\n        // Use BufferedReader rather than RandomAccessFile; it's much faster\n        final BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        PrintWriter out = new PrintWriter(System.out);\n        // input file name goes above\n        int Q = Integer.parseInt(input.readLine());\n        while (Q > 0) {\n            StringTokenizer st = new StringTokenizer(input.readLine());\n            final int n = Integer.parseInt(st.nextToken()), m = Integer.parseInt(st.nextToken());\n            final int[] ns = readArrayInt(n, input);\n            final int[] qs = readArrayInt(m, input);\n            printArray(calc(n, m, ns, qs), out);\n            Q--;\n        }\n        out.close();       // close the output file\n    }\n\n    private static long[] calc(final int n, final int m, final int[] ns, final int[] qs) {\n        int[] sta = new int[n];\n        long[] ss = new long[n];\n        int p = 0;\n        long sum = 0;\n        for (int i=0;i<n;++i){\n            sum += ns[i];\n            if (sum>0 && (p==0 || ss[sta[p-1]]<sum)){\n                sta[p++] = i;\n            }\n            ss[i] = sum;\n        }\n        long[] res = new long[m];\n        for (int i=0;i<m;++i){\n            long c = 0, rm;\n            if (sum > 0 && p > 0 && qs[i] > ss[sta[p-1]]){\n                c = (qs[i]-ss[sta[p-1]]) / sum;\n                if ((qs[i]-ss[sta[p-1]]) % sum > 0){\n                    c++;\n                }\n                rm = qs[i] - (c * sum);\n            }else {\n                rm = qs[i];\n            }\n            int l = 0, r = p - 1, mid;\n            while (l <= r) {\n                mid = (l + r) >> 1;\n                if (ss[sta[mid]] >= rm) {\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            if (l < p) {\n                res[i] = c * n + sta[l];\n            } else {\n                res[i] = -1;\n            }\n        }\n        return res;\n    }\n\n    private static void printArray(long[] ns, final PrintWriter out){\n        for (int i=0;i<ns.length;++i){\n            out.print(ns[i]);\n            if (i+1<ns.length)out.print(\" \");\n            else out.println();\n        }\n    }\n\n    private static void printArrayInt(int[] ns, final PrintWriter out){\n        for (int i=0;i<ns.length;++i){\n            out.print(ns[i]);\n            if (i+1<ns.length)out.print(\" \");\n            else out.println();\n        }\n    }\n\n    private static void printArrayVertical(long[] ns, final PrintWriter out){\n        for (long a : ns){\n            out.println(a);\n        }\n    }\n\n    private static void printArrayVerticalInt(int[] ns, final PrintWriter out){\n        for (int a : ns){\n            out.println(a);\n        }\n    }\n\n    private static void printArray2D(long[][] ns, final int len, final PrintWriter out){\n        int cnt = 0;\n        for (long[] kk : ns){\n            cnt++;\n            if (cnt > len)break;\n            for (int i=0;i<kk.length;++i){\n                out.print(kk[i]);\n                if (i+1<kk.length)out.print(\" \");\n                else out.println();\n            }\n        }\n    }\n\n    private static void printArray2DInt(int[][] ns, final int len, final PrintWriter out){\n        int cnt = 0;\n        for (int[] kk : ns){\n            cnt++;\n            if (cnt > len)break;\n            for (int i=0;i<kk.length;++i){\n                out.print(kk[i]);\n                if (i+1<kk.length)out.print(\" \");\n                else out.println();\n            }\n        }\n    }\n\n    private static long[] readArray(final int n, final BufferedReader input) throws IOException{\n        long[] ns = new long[n];\n        StringTokenizer st = new StringTokenizer(input.readLine());\n        for (int i=0;i<n;++i){\n            ns[i] = Long.parseLong(st.nextToken());\n        }\n        return ns;\n    }\n\n    private static int[] readArrayInt(final int n, final BufferedReader input) throws IOException{\n        int[] ns = new int[n];\n        StringTokenizer st = new StringTokenizer(input.readLine());\n        for (int i=0;i<n;++i){\n            ns[i] = Integer.parseInt(st.nextToken());\n        }\n        return ns;\n    }\n\n    private static long[] readArrayVertical(final int n, final BufferedReader input) throws IOException{\n        long[] ns = new long[n];\n        for (int i=0;i<n;++i){\n            ns[i] = Long.parseLong(input.readLine());\n        }\n        return ns;\n    }\n\n    private static long[][] readArray2D(final int n, final int len, final BufferedReader input) throws IOException{\n        long[][] ns = new long[len][];\n        for (int i=0;i<n;++i){\n            StringTokenizer st = new StringTokenizer(input.readLine());\n            ArrayList<Long> al = new ArrayList<>();\n            while (st.hasMoreTokens()){\n                al.add(Long.parseLong(st.nextToken()));\n            }\n            long[] kk = new long[al.size()];\n            for (int j=0;j<kk.length;++j){\n                kk[j] = al.get(j);\n            }\n            ns[i] = kk;\n        }\n        return ns;\n    }\n\n    private static int[][] readArray2DInt(final int n, final int len, final BufferedReader input) throws IOException{\n        int[][] ns = new int[len][];\n        for (int i=0;i<n;++i){\n            StringTokenizer st = new StringTokenizer(input.readLine());\n            ArrayList<Integer> al = new ArrayList<>();\n            while (st.hasMoreTokens()){\n                al.add(Integer.parseInt(st.nextToken()));\n            }\n            int[] kk = new int[al.size()];\n            for (int j=0;j<kk.length;++j){\n                kk[j] = al.get(j);\n            }\n            ns[i] = kk;\n        }\n        return ns;\n    }\n}"
}