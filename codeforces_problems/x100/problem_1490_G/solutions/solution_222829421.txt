{
    "id": 222829421,
    "contestId": 1490,
    "creationTimeSeconds": 1694378407,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "M.Ibrahem"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 12697600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nll sum,mx;\r\nbool can(ll num,ll target) {\r\n    ll k=sum * num;\r\n    return ( k + mx >= target);\r\n}\r\n//5 -5 1 -3 4\r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0), cout.tie(0);\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--) {\r\n        int n, m;\r\n        cin >> n >> m;\r\n        // sum :sum of arr\r\n        // mx  :max prefix in arr\r\n        ll arr[n], query[m];\r\n        sum = 0;\r\n        mx = -1e10;\r\n        for (int i = 0; i < n; i++) {\r\n            cin >> arr[i];\r\n            sum += arr[i];\r\n            mx = max(mx, sum);\r\n        }\r\n        for (int i = 0; i < m; i++) {\r\n            cin >> query[i];\r\n        }\r\n        priority_queue<pair<ll, pair<ll, ll>>> pq;\r\n        for (int i = 0; i < m; i++) {\r\n            if (sum <= 0|| query[i]<=mx) {\r\n                pq.push({-query[i], {0, i}});\r\n                continue;\r\n            }\r\n            ll l = 0, r = 1e9, numOfarr;\r\n            while (l <= r) {\r\n                ll mid = (l + r) / 2;\r\n                if (can(mid, query[i])) {\r\n                    numOfarr = mid;\r\n                    r = mid - 1;\r\n                } else {\r\n                    l = mid + 1;\r\n                }\r\n            }\r\n            pair<ll, pair<ll, ll>> temp;\r\n            temp.first = -(query[i] - (numOfarr * sum));//rem\r\n            temp.second.first = (numOfarr * n);//number of operations\r\n            temp.second.second = i;// index\r\n            pq.push(temp);\r\n            //numOfarr\r\n            //query[i]-(numOfarr*sum) ->rem\r\n        }\r\n        ll ans[m];\r\n        sum = 0;\r\n        // 7 1 3\r\n        // 2 9\r\n        //\r\n        for (int i = 0; i < n; i++) {\r\n            sum += arr[i];\r\n            while (!pq.empty() && sum >= -pq.top().first) {\r\n                ans[pq.top().second.second] = pq.top().second.first + i;\r\n                pq.pop();\r\n            }\r\n        }\r\n        while (!pq.empty()) {\r\n            ans[pq.top().second.second] = -1;\r\n            pq.pop();\r\n        }\r\n        for (int i = 0; i < m; i++) {\r\n            cout << ans[i] << ' ';\r\n        }\r\n        cout << '\\n';\r\n    }\r\n}"
}