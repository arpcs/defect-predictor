{
    "id": 236333750,
    "contestId": 1490,
    "creationTimeSeconds": 1702035924,
    "relativeTimeSeconds": 6924,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "xiaoping3418"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1702029000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 3174400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\nvoid solve();\nint32_t main() {\n    ios_base::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0);\n\tstd::cout << std::setprecision(9);\n\n    int32_t t = 1;\n\n    cin >> t;\n\twhile (t--) {\n        solve();\n    }\n\n    return 0;\n}\n\n\nvoid solve() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n, m;\n    cin >> n >> m;\n\n    vector<int64_t> a(n);\n    for (auto &it: a) cin >> it;\n\n    vector<int64_t> sum(n);\n\n    for (int i = 0; i < n; ++i) {\n        sum[i] = a[i];\n        if (i > 0) sum[i] += sum[i - 1];\n    }\n\n    int64_t mx = *max_element(sum.begin(), sum.end());\n    int64_t total = sum.back(); \n    \n    for (int i = 1; i <= n; ++i) {\n        sum[i] = max(sum[i - 1], sum[i]);\n    }\n    \n    for (int it = 0; it < m; ++it) {\n        int64_t x;\n        cin >> x;\n\n        if (x > mx and total <= 0) {\n            cout << -1 << \" \";\n            continue;\n        }\n\n        if (x <= mx) {\n            auto it1 = lower_bound(sum.begin(), sum.end(), x);\n            cout << it1 - sum.begin() << \" \";\n            continue;\n        }\n\n        int64_t k = (x - mx + total - 1) / total;\n\n        while (true) {\n            auto it1 = lower_bound(sum.begin(), sum.end(), x - k * total);\n            \n            if (it1 == sum.end()) {\n                k += 1;\n                continue;\n            }\n\n            cout << k * n + (it1 - sum.begin()) << \" \";\n            break;\n        }\n    }\n\n    cout << endl;\n}"
}