{
    "id": 188969351,
    "contestId": 1490,
    "creationTimeSeconds": 1673515096,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "najiudengwo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 14438400,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    static StreamTokenizer io = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\r\n    static PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n\r\n    public static int nextInt() throws IOException {\r\n        io.nextToken();\r\n        return (int) io.nval;\r\n    }\r\n\r\n    public static String next() throws IOException {\r\n        io.nextToken();\r\n        return io.sval;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        Kattio io = new Kattio();\r\n        int t = io.nextInt();\r\n        while(t-- > 0){\r\n            int n = io.nextInt(), m = io.nextInt();\r\n            int[] nums = new int[n];\r\n            for(int i = 0; i < n; i++)\r\n                nums[i] = io.nextInt();\r\n            long[] sum = new long[n + 1];\r\n            long[] max = new long[n + 1];\r\n            max[0] = Integer.MIN_VALUE;\r\n            for(int i = 1; i <= n; i++){\r\n                sum[i] = sum[i - 1] + nums[i - 1];\r\n                max[i] = Math.max(max[i - 1], sum[i]);\r\n            }\r\n            for(int i = 0; i < m; i++){\r\n                int x = io.nextInt();\r\n                if(x > max[n]){\r\n                    if(sum[n] <= 0)\r\n                        io.print(\"-1 \");\r\n                    else{\r\n                        long d = x - max[n];\r\n                        long step = (d + sum[n] - 1) / sum[n];\r\n                        long target = x - sum[n] * step;\r\n                        io.print((step * n + search(max, target) - 1) + \" \");\r\n                    }\r\n                }\r\n                else if(x <= max[n]){\r\n                    io.print((search(max, x) - 1) + \" \");\r\n                }\r\n            }\r\n            io.println();\r\n        }\r\n        io.close();\r\n    }\r\n\r\n    public static int search(long[] max, long t){\r\n        int l = 0, r = max.length - 1;\r\n        while(l <= r){\r\n            int mid = (l + r) / 2;\r\n            if(max[mid] >= t)\r\n                r = mid - 1;\r\n            else\r\n                l = mid + 1;\r\n        }\r\n        return l;\r\n    }\r\n\r\n\r\n    public static class Kattio extends PrintWriter {\r\n        private BufferedReader r;\r\n        private StringTokenizer st;\r\n\r\n        // \u6807\u51c6 IO\r\n        public Kattio() {\r\n            this(System.in, System.out);\r\n        }\r\n\r\n        public Kattio(InputStream i, OutputStream o) {\r\n            super(o);\r\n            r = new BufferedReader(new InputStreamReader(i));\r\n        }\r\n\r\n        // \u6587\u4ef6 IO\r\n        public Kattio(String intput, String output) throws IOException {\r\n            super(output);\r\n            r = new BufferedReader(new FileReader(intput));\r\n        }\r\n\r\n        // \u5728\u6ca1\u6709\u5176\u4ed6\u8f93\u5165\u65f6\u8fd4\u56de null\r\n        public String next() {\r\n            try {\r\n                while (st == null || !st.hasMoreTokens())\r\n                    st = new StringTokenizer(r.readLine());\r\n                return st.nextToken();\r\n            } catch (Exception e) {\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        public long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n    }\r\n}\r\n"
}