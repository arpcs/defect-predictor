{
    "id": 215375865,
    "contestId": 1490,
    "creationTimeSeconds": 1690211604,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "Beavers_are_really_cool"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 12800000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define all(x) x.begin(), x.end()\r\n\r\nlong long INF = 1000000000000000;\r\n\r\n#pragma GCC optimize(O3, O1, O2)\r\n#pragma comment(linker, \"/stack:200000000\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target( \"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx\" )\r\n#pragma GCC optimize(3)\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"profile-values,profile-reorder-functions,tracer\")\r\n#pragma GCC optimize(\"vpt\")\r\n#pragma GCC optimize(\"rename-registers\")\r\n#pragma GCC optimize(\"move-loop-invariants\")\r\n#pragma GCC optimize(\"unswitch-loops\")\r\n#pragma GCC optimize(\"function-sections\")\r\n#pragma GCC optimize(\"data-sections\")\r\n#pragma GCC optimize(\"branch-target-load-optimize\")\r\n#pragma GCC optimize(\"branch-target-load-optimize2\")\r\n#pragma GCC optimize(\"btr-bb-exclusive\")\r\n#pragma GCC optimize(\"inline\")\r\n#pragma GCC optimize(\"-fgcse\")\r\n#pragma GCC optimize(\"-fgcse-lm\")\r\n#pragma GCC optimize(\"-fipa-sra\")\r\n#pragma GCC optimize(\"-ftree-pre\")\r\n#pragma GCC optimize(\"-ftree-vrp\")\r\n#pragma GCC optimize(\"-fpeephole2\")\r\n#pragma GCC optimize(\"-ffast-math\")\r\n#pragma GCC optimize(\"-fsched-spec\")\r\n#pragma GCC optimize(\"-falign-jumps\")\r\n#pragma GCC optimize(\"-falign-loops\")\r\n#pragma GCC optimize(\"-falign-labels\")\r\n#pragma GCC optimize(\"-fdevirtualize\")\r\n#pragma GCC optimize(\"-fcaller-saves\")\r\n#pragma GCC optimize(\"-fcrossjumping\")\r\n#pragma GCC optimize(\"-fthread-jumps\")\r\n#pragma GCC optimize(\"-freorder-blocks\")\r\n#pragma GCC optimize(\"-fschedule-insns\")\r\n#pragma GCC optimize(\"inline-functions\")\r\n#pragma GCC optimize(\"-ftree-tail-merge\")\r\n#pragma GCC optimize(\"-fschedule-insns2\")\r\n#pragma GCC optimize(\"-fstrict-aliasing\")\r\n#pragma GCC optimize(\"-falign-functions\")\r\n#pragma GCC optimize(\"-fcse-follow-jumps\")\r\n#pragma GCC optimize(\"-fsched-interblock\")\r\n#pragma GCC optimize(\"-fpartial-inlining\")\r\n#pragma GCC optimize(\"no-stack-protector\")\r\n#pragma GCC optimize(\"-freorder-functions\")\r\n#pragma GCC optimize(\"-findirect-inlining\")\r\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\r\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\r\n#pragma GCC optimize(\"inline-small-functions\")\r\n#pragma GCC optimize(\"-finline-small-functions\")\r\n#pragma GCC optimize(\"-ftree-switch-conversion\")\r\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\r\n#pragma GCC optimize(\"-fexpensive-optimizations\")\r\n#pragma GCC optimize(\"inline-functions-called-once\")\r\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\r\n\r\nvector<long long> t;\r\nvector<long long> t2;\r\n\r\nvoid upd(long long v, long long vl, long long vr, long long i, long long x){\r\n    if(vl == vr){\r\n        t[v] += x;\r\n        t2[v] += x;\r\n        return;\r\n    }\r\n    long long m = (vr + vl) / 2;\r\n    if(i <= m){\r\n        upd(2 * v, vl, m, i, x);\r\n    }\r\n    else{\r\n        upd(2 * v + 1, m + 1, vr, i, x);\r\n    }\r\n    t[v] = t[2 * v] + t[2 * v + 1];\r\n    t2[v] = t2[2 * v];\r\n    t2[v] = max(t[2 * v] + t2[2 * v + 1], t2[v]);\r\n    t2[v] = max(t[v], t2[v]);\r\n}\r\n\r\nlong long find_ind(long long v, long long vl, long long vr, long long x){\r\n    if(vl == vr){\r\n        return vl;\r\n    }\r\n    long long m = (vl + vr) / 2;\r\n    if(t2[2 * v] >= x){\r\n        return find_ind(2 * v, vl, m, x);\r\n    }\r\n    return find_ind(2 * v + 1, m + 1, vr, x - t[2 * v]);\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    long long n, m, cur, maxim, summ, ans, tim;\r\n    cin >> tim;\r\n    for(long long _ = 0; _ < tim; _++){\r\n        cin >> n >> m;\r\n        t.clear();\r\n        t2.clear();\r\n        t.resize(4 * n + 1, 0);\r\n        t2.resize(4 * n + 1, 0);\r\n        maxim = 0;\r\n        summ = 0;\r\n        for(long long i = 0; i < n; i++){\r\n            cin >> cur;\r\n            upd(1, 1, n, i + 1, cur);\r\n            summ += cur;\r\n            maxim = max(maxim, summ);\r\n        }\r\n        for(long long i = 0; i < m; i++){\r\n            cin >> cur;\r\n            cur -= maxim;\r\n            if(cur > 0 && summ <= 0){\r\n                cout << -1 << \" \";\r\n                continue;\r\n            }\r\n            if(summ > 0 && cur > 0){\r\n                ans = n * ((cur + summ - 1) / summ);\r\n                cur = cur + maxim - (summ * (ans / n));\r\n            }\r\n            else{\r\n                ans = 0;\r\n                cur += maxim;\r\n            }\r\n            cout << find_ind(1, 1, n, cur) + ans - 1 << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}