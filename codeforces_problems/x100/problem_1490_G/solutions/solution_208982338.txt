{
    "id": 208982338,
    "contestId": 1490,
    "creationTimeSeconds": 1686221444,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "gameboygzm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "GNU C11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(1)\r\n#pragma GCC optimize(2)\r\n#pragma GCC optimize(3)\r\n#include <iostream>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <map>\r\n#include <set>\r\n#include <queue>\r\n#define x first\r\n#define y second\r\n#define int __int128\r\n#define ls u << 1\r\n#define rs u << 1 | 1\r\nusing namespace std;\r\ntypedef pair<int, int> PII;\r\n\r\n\r\n__int128 read()\r\n{\r\n\t//\u76f4\u63a5\u5728\u51fd\u6570\u91cc\u9762\u5b9e\u73b0\u8bfb\u5b57\u7b26\u4e32\u64cd\u4f5c\u66f4\u7b80\u6d01\r\n\t__int128 res=0;//\u521d\u59cb\u7ed3\u679c\u8d4b\u503c0\r\n\tchar scan[1005];\r\n\tscanf(\"%s\",scan);\r\n\tfor(int i=0;i<strlen(scan);i++)\r\n\t\tres*=10,res+=scan[i]-'0';//\u5b9e\u73b0\u8fdb\u4f4d\r\n\treturn res;//\u8fd4\u56de__int128\u7c7b\u578b0\r\n}\r\n\r\n\r\nvoid print(__int128 num)\r\n{//\u9012\u5f52\u8c03\u7528\uff0c\u5b9e\u73b0\u4ece\u9ad8\u4f4d\u5411\u4f4e\u4f4d\u8f93\u51fa\r\n\tif(num>9) \r\n\t\tprint(num/10);\r\n\tputchar(num%10+'0');\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int n, m;\r\n    n = read();\r\n    m = read();\r\n    vector<int> a(n + 1, 0), s(n + 1, 0), pre(n + 1, 0);\r\n    for (int i = 1; i <= n; i ++ )\r\n    {\r\n        a[i] = read();\r\n        s[i] = s[i - 1] + a[i];\r\n        pre[i] = max(pre[i - 1], s[i]);\r\n    }\r\n    \r\n    for (int i = 1, x; i <= m; i ++ )\r\n    {\r\n        x = read();\r\n        auto it = lower_bound(next(pre.begin()), pre.end(), x);\r\n        if (it == pre.end())\r\n        {\r\n            if (s[n] <= 0) {cout << -1 << ' ';}\r\n            else\r\n            {\r\n                // p + u * s[n] >= x\r\n                // u * s[n] > x - p\r\n                int l = 0, r = 1e9;\r\n                while (l < r){\r\n                    int mid = l + r >> 1;\r\n                    if (pre[n] + mid * s[n] >= x) r = mid;\r\n                    else l = mid + 1;\r\n                }\r\n                int sum = x - l * s[n];\r\n                auto it = lower_bound(next(pre.begin()), pre.end(), sum);\r\n                print(l * n + it - pre.begin() - 1);\r\n                printf(\" \");\r\n            }\r\n        }\r\n        else\r\n        {\r\n            print(it - pre.begin() - 1);\r\n            printf(\" \");\r\n        }\r\n    }\r\n    cout << endl;\r\n}\r\n\r\nsigned main()\r\n{\r\n    int T;\r\n    T = read();\r\n    while (T -- )\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}