{
    "id": 188942222,
    "contestId": 1490,
    "creationTimeSeconds": 1673494810,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "qishui7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 38297600,
    "source": "# Problem: G. Old Floppy Drive\r\n# Contest: Codeforces - Codeforces Round #702 (Div. 3)\r\n# URL: https://codeforces.com/problemset/problem/1490/G\r\n# Memory Limit: 256 MB\r\n# Time Limit: 2000 ms\r\n\r\nimport sys\r\nimport bisect\r\nimport random\r\nimport io, os\r\nfrom bisect import *\r\nfrom collections import *\r\nfrom contextlib import redirect_stdout\r\nfrom itertools import *\r\nfrom math import sqrt, gcd, inf\r\nfrom array import *\r\nfrom functools import lru_cache\r\nfrom types import GeneratorType\r\nfrom heapq import *\r\n\r\nRI = lambda: map(int, sys.stdin.buffer.readline().split())\r\nRS = lambda: map(bytes.decode, sys.stdin.buffer.readline().strip().split())\r\nRILST = lambda: list(RI())\r\nDEBUG = lambda *x: sys.stderr.write(f'{str(x)}\\n')\r\n\r\nMOD = 10 ** 9 + 7\r\nPROBLEM = \"\"\"https://codeforces.com/problemset/problem/1490/G\r\n\r\n\u8f93\u5165 t(\u22641e4) \u8868\u793a t \u7ec4\u6570\u636e\uff0c\u6bcf\u7ec4\u6570\u636e\u8f93\u5165 n(\u22642e5) m(\u22642e5) \u548c\u957f\u4e3a n \u7684\u6570\u7ec4 a(-1e9\u2264a[i]\u22641e9)\uff0c\u8868\u793a\u4e00\u4e2a\u7531\u6570\u7ec4 a \u65e0\u9650\u91cd\u590d\u7684\u5e8f\u5217 b\u3002\r\n\u7136\u540e\u8f93\u5165 m \u4e2a\u8be2\u95ee\uff0c\u6bcf\u4e2a\u8be2\u95ee\u8f93\u5165 x(1\u2264x\u22641e9)\u3002\r\n\u5bf9\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8f93\u51fa b \u7684\u524d\u7f00\u548c\u4e2d\u9996\u6b21 \u2265x \u7684\u4e0b\u6807\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u8f93\u51fa -1\u3002\r\n\u6240\u6709\u6570\u636e\u7684 n \u4e4b\u548c\u3001m \u4e4b\u548c\u5747\u4e0d\u8d85\u8fc7 2e5\u3002\r\n\u8f93\u5165\r\n3\r\n3 3\r\n1 -3 4\r\n1 5 2\r\n2 2\r\n-2 0\r\n1 2\r\n2 2\r\n0 1\r\n1 2\r\n\u8f93\u51fa\r\n0 6 2 \r\n-1 -1 \r\n1 3 \r\n\"\"\"\r\n\r\n\r\n#   311     ms\r\ndef solve():\r\n    t, = RI()\r\n    for _ in range(t):\r\n        n, m = RI()\r\n        a = RILST()\r\n        s = 0\r\n        z, y = [0], [0]\r\n        for i, v in enumerate(a):\r\n            s += v\r\n            if s > z[-1]:  # \u7c7b\u4f3c\u5355\u8c03\u961f\u5217\uff0c\u5411\u53f3\u65f6\u53ea\u9700\u8981\u66f4\u5927\u7684\u6570\uff0c\u5c0f\u7684\u6570\u5728\u524d\u8fb9\u5df2\u8fbe\u5230\r\n                z.append(s)\r\n                y.append(i)\r\n        mx = z[-1]\r\n\r\n        ans = []\r\n        q = RILST()\r\n        for x in q:\r\n            if x <= mx:\r\n                ans.append(y[bisect_left(z, x)])\r\n            elif s <= 0:\r\n                ans.append(-1)\r\n            else:\r\n                cnt = (x - mx + s - 1) // s\r\n                p = bisect_left(z, x - cnt * s)\r\n                ans.append(cnt * n + y[p])\r\n\r\n        print(*ans)\r\n\r\n\r\n#   311     ms\r\ndef solve3():\r\n    t, = RI()\r\n    for _ in range(t):\r\n        n, m = RI()\r\n        a = RILST()\r\n        pre = list(accumulate(a))\r\n        s = pre[-1]  # \u4e00\u8f6e\u80fd\u52a0\u591a\u5c11\r\n        sp = [(0, -1)]\r\n        for i, v in enumerate(pre):\r\n            if v > sp[-1][0]:  # \u7c7b\u4f3c\u5355\u8c03\u961f\u5217\uff0c\u5411\u53f3\u65f6\u53ea\u9700\u8981\u66f4\u5927\u7684\u6570\uff0c\u5c0f\u7684\u6570\u5728\u524d\u8fb9\u5df2\u8fbe\u5230\r\n                sp.append((v, i))  # \u8fbe\u5230\u6bcf\u4e2a\u503c\u7684\u6700\u5c0f\u4e0b\u6807\r\n        mx = sp[-1][0]\r\n\r\n        ans = []\r\n        q = RILST()\r\n        for x in q:\r\n            if x <= mx:\r\n                ans.append(sp[bisect_left(sp, (x, 0))][1])\r\n            elif s <= 0:\r\n                ans.append(-1)\r\n            else:\r\n                cnt = (x - mx + s - 1) // s\r\n                p = bisect_left(sp, (x - cnt * s, 0))\r\n                ans.append(cnt * n + sp[p][1])\r\n\r\n        print(*ans)\r\n\r\n\r\n#    639    ms list[tuple]\r\ndef solve2():\r\n    t, = RI()\r\n    for _ in range(t):\r\n        n, m = RI()\r\n        a = RILST()\r\n        pre = list(accumulate(a))\r\n        s = pre[-1]  # \u4e00\u8f6e\u80fd\u52a0\u591a\u5c11\r\n        ps = {}\r\n        for i, v in enumerate(pre):\r\n            if v not in ps:\r\n                ps[v] = i  # \u8fbe\u5230\u6bcf\u4e2a\u503c\u7684\u6700\u5c0f\u4e0b\u6807\r\n        sp = sorted([(k, v) for k, v in ps.items()])  # \u6392\u5e8f\u540e\u628a\u6bcf\u4e2a\u503c\u5bf9\u5e94\u4e0b\u6807\u66f4\u65b0\u4e3a\u540e\u7f00\u6700\u5927\u503c\uff1a\u56e0\u4e3a\u8fbe\u5230\u66f4\u5927\u7684\u6570\u7b49\u540c\u4e8e\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u6570\r\n        mx = sp[-1][0]\r\n        for i in range(len(sp) - 2, -1, -1):\r\n            if sp[i][1] > sp[i + 1][1]:\r\n                sp[i] = (sp[i][0], sp[i + 1][1])\r\n\r\n        ans = []\r\n        q = RILST()\r\n        if s <= 0:  # \u5982\u679c\u6bcf\u8f6e\u4e0d\u80fd\u589e\u957f\uff0c\u90a3\u53ea\u80fd\u770b\u8fd9\u4e2a\u8be2\u95ee\u662f\u5426\u5728\u524d\u7f00\u548c\u91cc\r\n            for x in q:\r\n                ans.append(-1 if x > mx else sp[bisect_left(sp, (x, 0))][1])\r\n        else:  # \u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u53e0\u52a0\u5b8c\u6574\u4e00\u8f6e\u589e\u957f\uff0c\u5219\u5c1d\u8bd5\r\n            for x in q:\r\n                if x <= mx:  # \u5982\u679c\u5c0f\u4e8e\u6700\u5927\u503c\uff0c\u5219\u5728\u7b2c\u4e00\u8f6e\u91cc\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8ex\u7684\u6570\u5bf9\u5e94\u7684\u4e0b\u6807\r\n                    ans.append(sp[bisect_left(sp, (x, 0))][1])\r\n                else:  # \u8d2a\u5fc3\uff1a\u5c1d\u8bd5\u7528\u6700\u5927\u6570\u4f5c\u4e3a\u6700\u540e\u4e00\u8f6e\uff0c\u8fd9\u6837\u524d\u8fb9\u8f6e\u6570\u624d\u5c11\r\n                    l = x - mx  # \u524d\u8fb9\u8f6e\u6570\u9700\u8981\u7d2f\u8ba1\u7684\u6570\r\n                    cnt = (l + s - 1) // s  # ceil\u6c42\u81f3\u5c11\u9700\u8981\u591a\u5c11\u8f6e\r\n                    l = cnt * s  # \u8fd9\u4e48\u591a\u8f6e\u5b9e\u9645\u80fd\u7d2f\u8ba1\u7684\u524d\u8fb9\u7684\u6570\r\n                    r = x - l  # \u90a3\u4e48\u6700\u540e\u4e00\u8f6e\u53ea\u9700\u8981\u8fd9\u4e48\u591a\r\n                    p = bisect_left(sp, (r, 0))\r\n                    ans.append(cnt * n + sp[p][1])  # \u8f6e\u6570*n+\u6700\u540e\u4e00\u8f6e\u7684\u4e0b\u6807\r\n        print(*ans)\r\n\r\n\r\n#    858   ms list[list]\r\ndef solve1():\r\n    t, = RI()\r\n    for _ in range(t):\r\n        n, m = RI()\r\n        a = RILST()\r\n        pre = list(accumulate(a))\r\n        s = pre[-1]  # \u4e00\u8f6e\u80fd\u52a0\u591a\u5c11\r\n        ps = {}\r\n        for i, v in enumerate(pre):\r\n            if v not in ps:\r\n                ps[v] = i  # \u8fbe\u5230\u6bcf\u4e2a\u503c\u7684\u6700\u5c0f\u4e0b\u6807\r\n        sp = sorted([[k, v] for k, v in ps.items()])  # \u6392\u5e8f\u540e\u628a\u6bcf\u4e2a\u503c\u5bf9\u5e94\u4e0b\u6807\u66f4\u65b0\u4e3a\u540e\u7f00\u6700\u5927\u503c\uff1a\u56e0\u4e3a\u8fbe\u5230\u66f4\u5927\u7684\u6570\u7b49\u540c\u4e8e\u8d85\u8fc7\u4e86\u8fd9\u4e2a\u6570\r\n        mx = sp[-1][0]\r\n        for i in range(len(sp) - 2, -1, -1):\r\n            sp[i][1] = min(sp[i][1], sp[i + 1][1])\r\n        ans = []\r\n        q = RILST()\r\n        if s <= 0:  # \u5982\u679c\u6bcf\u8f6e\u4e0d\u80fd\u589e\u957f\uff0c\u90a3\u53ea\u80fd\u770b\u8fd9\u4e2a\u8be2\u95ee\u662f\u5426\u5728\u524d\u7f00\u548c\u91cc\r\n            for x in q:\r\n                ans.append(-1 if x > mx else sp[bisect_left(sp, [x, 0])][1])\r\n        else:  # \u5982\u679c\u53ef\u4ee5\u901a\u8fc7\u53e0\u52a0\u5b8c\u6574\u4e00\u8f6e\u589e\u957f\uff0c\u5219\u5c1d\u8bd5\r\n            for x in q:\r\n                if x <= mx:  # \u5982\u679c\u5c0f\u4e8e\u6700\u5927\u503c\uff0c\u5219\u5728\u7b2c\u4e00\u8f6e\u91cc\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8ex\u7684\u6570\u5bf9\u5e94\u7684\u4e0b\u6807\r\n                    ans.append(sp[bisect_left(sp, [x, 0])][1])\r\n                else:  # \u8d2a\u5fc3\uff1a\u5c1d\u8bd5\u7528\u6700\u5927\u6570\u4f5c\u4e3a\u6700\u540e\u4e00\u8f6e\uff0c\u8fd9\u6837\u524d\u8fb9\u8f6e\u6570\u624d\u5c11\r\n                    l = x - mx  # \u524d\u8fb9\u8f6e\u6570\u9700\u8981\u7d2f\u8ba1\u7684\u6570\r\n                    cnt = (l + s - 1) // s  # ceil\u6c42\u81f3\u5c11\u9700\u8981\u591a\u5c11\u8f6e\r\n                    l = cnt * s  # \u8fd9\u4e48\u591a\u8f6e\u5b9e\u9645\u80fd\u7d2f\u8ba1\u7684\u524d\u8fb9\u7684\u6570\r\n                    r = x - l  # \u90a3\u4e48\u6700\u540e\u4e00\u8f6e\u53ea\u9700\u8981\u8fd9\u4e48\u591a\r\n                    p = bisect_left(sp, [r, 0])\r\n                    ans.append(cnt * n + sp[p][1])  # \u8f6e\u6570*n+\u6700\u540e\u4e00\u8f6e\u7684\u4e0b\u6807\r\n        print(*ans)\r\n\r\n\r\nif __name__ == '__main__':\r\n    solve()\r\n"
}