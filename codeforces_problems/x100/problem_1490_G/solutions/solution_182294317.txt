{
    "id": 182294317,
    "contestId": 1490,
    "creationTimeSeconds": 1669236680,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "ahmedyuu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 623,
    "memoryConsumedBytes": 35430400,
    "source": "import java.io.*;\r\nimport java.util.*;\r\nimport java.math.*;\r\n\r\npublic class A {\r\n\tstatic Scanner sc = new Scanner(System.in);\r\n\tstatic PrintWriter out = new PrintWriter(System.out);\r\n\tpublic static long search(long a [], long b) {\r\n\t\tlong l = 0,r =a.length-1,ans = Integer.MAX_VALUE;\r\n\t\tlong mid = 0;\r\n\t\twhile(l<=r) {\r\n\t\t\t mid = l+(r-l)/2l;\r\n\t\t\tif (a[(int)mid]>=b) {\r\n\t\t\t\tr=mid-1;\r\n\t\t\t\tans=a[(int)mid];\r\n\t\t\t}else {\r\n\t\t\t\tl = mid+1;\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tSystem.out.println();\r\n\t\tint t = sc.nextInt();\r\n\t\touter: while (t-- > 0) {\r\n\t\t\tint n = sc.nextInt(), m = sc.nextInt();\r\n\t\t\tlong a[] = sc.readArray(n),prefix[] = new long[n];\r\n\t\t\tTreeMap<Long,Long> pre = new TreeMap<>();\r\n\t\t\tlong h = 0;\r\n\t\t\tfor (long i = 0; i < n; i++) {\r\n\t\t\t\th += a[(int)i];\r\n\t\t\t\tprefix[(int)i] = h;\r\n\t\t\t\tif (!pre.containsKey(h))\r\n\t\t\t\t\tpre.put(h,i);\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\tlong q[] = sc.readArray(m);\r\n\t\t\tlong premax[] = new long[n];\r\n\t\t\tlong y = a[0];\r\n\t\t\tfor (int i = 0;i<n;i++) {\r\n\t\t\t\tpremax[i] = Math.max(y, prefix[i]);\r\n\t\t\t\ty = Math.max(prefix[i], y);\r\n\t\t\t}\r\n\t\t\tlong hg = Integer.MIN_VALUE;\r\n\t\t\tfor (int i = 0;i<n;i++) {\r\n\t\t\t\thg = Math.max(hg, prefix[i]);\r\n\t\t\t}\r\n\t\t\tfor (int i = 0;i<m;i++) {\r\n\t\t\t\tif (h<=0 && hg<q[i]) {\r\n\t\t\t\t\tout.print(-1+\" \");\r\n\t\t\t\t}else {\r\n\t\t\t\t\ty = search(premax,q[i]);\r\n\t\t\t\t\tif (y ==Integer.MAX_VALUE ) {\r\n\t\t\t\t\t\tlong uu = (long)Math.ceil((q[i]-hg)/(double)h);\r\n\t\t\t\t\t\tlong so2alsahl = q[i]-uu*h; \r\n\t\t\t\t\t\tif(so2alsahl == 0) {\r\n\t\t\t\t\t\t\tout.print(uu*a.length-1+\" \");\r\n\t\t\t\t\t\t}else {\r\n\t\t\t\t\t\t\tout.print(uu*a.length +pre.get(search(premax,so2alsahl))+\" \");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else {\r\n\t\t\t\t\t\tout.print(pre.get(y)+\" \");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t\t\r\n\t\t}\r\n\t\tout.close();\r\n\t}\r\n\r\n\tstatic class Pair implements Comparable<Pair> {\r\n\t\tlong first;\r\n\t\tlong second;\r\n\r\n\t\tpublic Pair(long first, long second) {\r\n\t\t\tthis.first = first;\r\n\t\t\tthis.second = second;\r\n\t\t}\r\n\r\n\t\tpublic int compareTo(Pair p) {\r\n\t\t\tif (first != p.first)\r\n\t\t\t\treturn Long.compare(first, p.first);\r\n\t\t\telse if (second != p.second)\r\n\t\t\t\treturn Long.compare(second, p.second);\r\n\t\t\telse\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic class Tuple implements Comparable<Tuple> {\r\n\t\tlong first;\r\n\t\tlong second;\r\n\t\tlong third;\r\n\r\n\t\tpublic Tuple(long a, long b, long c) {\r\n\t\t\tfirst = a;\r\n\t\t\tsecond = b;\r\n\t\t\tthird = c;\r\n\t\t}\r\n\r\n\t\tpublic int compareTo(Tuple t) {\r\n\t\t\tif (first != t.first)\r\n\t\t\t\treturn Long.compare(first, t.first);\r\n\t\t\telse if (second != t.second)\r\n\t\t\t\treturn Long.compare(second, t.second);\r\n\t\t\telse if (third != t.third)\r\n\t\t\t\treturn Long.compare(third, t.third);\r\n\t\t\telse\r\n\t\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic final Random random = new Random();\r\n\r\n//\tstatic void shuffleSort(long[] a) {\r\n//\t\tint n = a.length;\r\n//\t\tfor (int i = 0; i < n; i++) {\r\n//\t\t\tlong r = random.nextLong(n), temp = a[(int)r];\r\n//\t\t\ta[(int)r] = a[i];\r\n//\t\t\ta[i] = temp;\r\n//\t\t}\r\n//\t\tArrays.sort(a);\r\n//\t}\r\n\r\n\tstatic class Scanner {\r\n\t\tStringTokenizer st;\r\n\t\tBufferedReader br;\r\n\r\n\t\tpublic Scanner(InputStream s) {\r\n\t\t\tbr = new BufferedReader(new InputStreamReader(s));\r\n\t\t}\r\n\r\n\t\tpublic String next() throws IOException {\r\n\t\t\twhile (st == null || !st.hasMoreTokens())\r\n\t\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() throws IOException {\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() throws IOException {\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\r\n\t\tpublic String nextLine() throws IOException {\r\n\t\t\treturn br.readLine();\r\n\t\t}\r\n\r\n\t\tpublic double nextDouble() throws IOException {\r\n\t\t\tString x = next();\r\n\t\t\tStringBuilder sb = new StringBuilder(\"0\");\r\n\t\t\tdouble res = 0, f = 1;\r\n\t\t\tboolean dec = false, neg = false;\r\n\t\t\tint start = 0;\r\n\t\t\tif (x.charAt(0) == '-') {\r\n\t\t\t\tneg = true;\r\n\t\t\t\tstart++;\r\n\t\t\t}\r\n\t\t\tfor (int i = start; i < x.length(); i++)\r\n\t\t\t\tif (x.charAt(i) == '.') {\r\n\t\t\t\t\tres = Long.parseLong(sb.toString());\r\n\t\t\t\t\tsb = new StringBuilder(\"0\");\r\n\t\t\t\t\tdec = true;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsb.append(x.charAt(i));\r\n\t\t\t\t\tif (dec)\r\n\t\t\t\t\t\tf *= 10;\r\n\t\t\t\t}\r\n\t\t\tres += Long.parseLong(sb.toString()) / f;\r\n\t\t\treturn res * (neg ? -1 : 1);\r\n\t\t}\r\n\r\n\t\tpublic boolean ready() throws IOException {\r\n\t\t\treturn br.ready();\r\n\t\t}\r\n\r\n\t\tlong[] readArray(int n) throws IOException {\r\n\t\t\tlong[] a = new long[n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\ta[i] = nextLong();\r\n\t\t\treturn a;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static long gcd(long a, long b) {\r\n\t\treturn b == 0 ? a : gcd(b, a % b);\r\n\t}\r\n\r\n\tpublic static String concat(String s1, String s2) {\r\n\t\treturn new StringBuilder(s1).append(s2).toString();\r\n\t}\r\n\r\n\tstatic long lcm(long a, long b) {\r\n\t\treturn (a / gcd(a, b)) * b;\r\n\t}\r\n\r\n\tstatic boolean isPrime(int n) {\r\n\t\tif (n <= 1)\r\n\t\t\treturn false;\r\n\t\telse if (n == 2)\r\n\t\t\treturn true;\r\n\t\telse if (n % 2 == 0)\r\n\t\t\treturn false;\r\n\t\tfor (int i = 3; i <= Math.sqrt(n); i += 2) {\r\n\t\t\tif (n % i == 0)\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\r\n}"
}