{
    "id": 198621784,
    "contestId": 1490,
    "creationTimeSeconds": 1679489182,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "MiNOcean"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 7987200,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\n#define ri int\r\nusing namespace std;\r\ninline ll read(){\r\n char ch;ll f=1;\r\n while((ch=getchar())<'0'||ch>'9')\r\n  if(ch=='-')f=-1;\r\n ll res=ch-48;\r\n while((ch=getchar())>='0'&&ch<='9')\r\n  res=res*10+ch-48;\r\n return res*f;\r\n}\r\nconst int maxn=2e5+5;\r\nll T,n,m;\r\nll a[maxn],s[maxn],p[maxn],b[maxn],c[maxn];\r\nstruct node{\r\n ll w,id;\r\n};\r\nint main(){\r\n T=read();\r\n while(T--){\r\n  n=read();m=read();\r\n  ll x;\r\n  for(ri i=1;i<=n;i++){\r\n   a[i]=read();\r\n   s[i]=s[i-1]+a[i];\r\n  }\r\n  stack<node>stk;\r\n  for(ri i=n;i>=1;i--){\r\n   if(s[i]<0){p[i]=-1;continue;}\r\n   while(!stk.empty()&&stk.top().w<=s[i])stk.pop();\r\n   p[i]=(stk.empty()?-1:stk.top().id);\r\n   stk.push((node){s[i],i});\r\n  }\r\n  if(s[1]>0)x=1;\r\n  else x=p[1];\r\n  ll cnt=0;c[0]=-1e18;\r\n  while(x!=-1)\r\n   b[++cnt]=x,c[cnt]=s[x],x=p[x];\r\n//  for(ri i=1;i<=cnt;i++)\r\n//   cout<<b[i]<<\" \"<<c[i]<<endl;\r\n  while(m--){\r\n   x=read();ll ans=0;\r\n   if(s[n]<=0&&x>c[cnt]){\r\n    printf(\"-1 \");\r\n    continue;\r\n   }\r\n   if(x>c[cnt]){\r\n   \tll k=(x-c[cnt]+s[n]-1)/s[n];\r\n    ans+=k*n;\r\n    x-=s[n]*k;\r\n   }\r\n   ll pos=lower_bound(c+1,c+1+cnt,x)-c;\r\n   ans+=b[pos];\r\n   printf(\"%lld \",ans-1);\r\n  }\r\n  puts(\"\");\r\n  for(ri i=1;i<=n;i++)p[i]=0;\r\n }\r\n return 0;\r\n}\r\n"
}