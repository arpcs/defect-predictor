{
    "id": 194726461,
    "contestId": 1490,
    "creationTimeSeconds": 1677188685,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "Kirill_Maglysh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 9011200,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <set>\r\n#include <numeric>\r\n#include <queue>\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\n\r\nusing namespace __gnu_pbds;\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef tree<\r\n        ll,\r\n        null_type,\r\n        less<>,\r\n        rb_tree_tag,\r\n        tree_order_statistics_node_update>\r\n        ordered_set;\r\n\r\nconst ll INF18 = 1e18;\r\n\r\nvector<ll> xorPref;\r\n\r\nvoid resolveTest() {\r\n    ll n, q;\r\n    cin >> n >> q;\r\n    vector<ll> pref(n);\r\n    for (ll i = 0; i < n; ++i) {\r\n        cin >> pref[i];\r\n        if (i) {\r\n            pref[i] += pref[i - 1];\r\n        }\r\n    }\r\n\r\n    vector<pair<ll, ll>> sorted = {{pref[0], 0}};\r\n    for (ll i = 1; i < n; ++i) {\r\n        if (sorted.back().first < pref[i]) {\r\n            sorted.emplace_back(pref[i], i);\r\n        }\r\n    }\r\n\r\n    while (q--) {\r\n        ll need;\r\n        cin >> need;\r\n        if (sorted.back().first < need && pref.back() <= 0) {\r\n            cout << \"-1 \";\r\n            continue;\r\n        }\r\n\r\n        ll res = 0;\r\n        bool usedCyc = false;\r\n        if (sorted.back().first < need) {\r\n            ll cycN = (need - sorted.back().first + pref.back() - 1) / pref.back();\r\n            res += n * (cycN - 1) + (n - 1);\r\n            need -= pref.back() * cycN;\r\n            usedCyc = true;\r\n        }\r\n\r\n        if (need) {\r\n            ll id = lower_bound(sorted.begin(), sorted.end(), make_pair(need, -1LL)) - sorted.begin();\r\n            res += sorted[id].second;\r\n            if (usedCyc) {\r\n                ++res;\r\n            }\r\n        }\r\n\r\n        cout << res << ' ';\r\n    }\r\n    cout << '\\n';\r\n}\r\n\r\nvoid resolve() {\r\n    ll testN = 1;\r\n    cin >> testN;\r\n    while (testN--) {\r\n        resolveTest();\r\n    }\r\n}\r\n\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    resolve();\r\n    return 0;\r\n}\r\n"
}