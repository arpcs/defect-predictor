{
    "id": 188942934,
    "contestId": 1490,
    "creationTimeSeconds": 1673495703,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1490,
        "index": "G",
        "name": "Old Floppy Drive ",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 1490,
        "members": [
            {
                "handle": "Satinii"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1613486100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 6451200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nusing i64 = long long;\r\n\r\nvoid solve() {\r\n\tint n, m;\r\n\tcin >> n >> m;\r\n\tvector<vector<i64>> vec(3, vector<i64>(n + 1));\r\n\tvec[2][0] = LLONG_MIN;\r\n\tfor (int i = 1; i <= n; i++){\r\n\t\ti64 a; cin >> a;\r\n\t\tvec[0][i] = a;\r\n\t\tvec[1][i] = vec[1][i - 1] + a;\r\n\t\tvec[2][i] = max(vec[2][i - 1], vec[1][i]);\r\n\t}\r\n\tvector<i64> res(n, 0LL);\r\n\tfor (int i = 0; i < m; i++){\r\n\t\ti64 goal; cin >> goal;\r\n\t\tif (vec[1][n] <= 0 && vec[2][n] < goal){\r\n\t\t\tres[i] = -1;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\ti64 rep;\r\n\t\tif (vec[1][n] <= 0) rep = 0;\r\n\t\telse rep = max(0LL, (goal - vec[2][n] + vec[1][n] - 1) / vec[1][n]);\r\n\t\tint left = goal - rep * vec[1][n];\r\n\t\tint z = distance(vec[2].begin(), lower_bound(vec[2].begin(), vec[2].end(), left));\r\n\t\tres[i] = rep * n + z - 1;\r\n\t}\r\n\tfor (int i = 0; i < m; i++){\r\n\t\tcout<<res[i] <<\" \\n\"[i == m - 1];\r\n\t}\r\n\r\n\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr);\r\n \r\n    int t;\r\n    std::cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}