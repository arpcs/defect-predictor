{
    "id": 87948004,
    "contestId": 1307,
    "creationTimeSeconds": 1595637508,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "Lenstar"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 5939200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define N 61\r\n#define M 100010\r\n#define inf 1073741823\r\n#define pii pair<int,int>\r\n#define mkp(a,b) make_pair(a,b)\r\ninline int read() {\r\n    int x=0;\r\n    char ch=getchar();\r\n    while (!isdigit(ch)) ch=getchar();\r\n    while (isdigit(ch)) x=x*10+ch-'0',ch=getchar();\r\n    return x;\r\n}\r\nint tot=1;\r\nint fir[N],nex[M],got[M],tak[M],cst[M];\r\ninline void AddEdge(int x,int y,int z=0,int w=0) { \r\n    nex[++tot]=fir[x],fir[x]=tot,got[tot]=y,tak[tot]=z,cst[tot]=w;\r\n}\r\nint vis[N],dis[N],que[M],pre[N];\r\ninline int spfa(int s,int t,int n) {\r\n    int l=1,r=1;\r\n    for (int i=1;i<=n;i++) vis[i]=false,dis[i]=inf,pre[i]=0;\r\n    que[1]=s,dis[s]=0;\r\n    while (l<=r) {\r\n        int x=que[l];\r\n        for (int i=fir[x];i;i=nex[i]) {\r\n            int y=got[i],w=cst[i];\r\n            if (!tak[i] || dis[x]+w>=dis[y]) continue;\r\n            dis[y]=dis[x]+w,pre[y]=i;\r\n            if (!vis[y]) vis[y]=true,que[++r]=y;\r\n        }\r\n        ++l,vis[x]=false;\r\n    }\r\n    return dis[t]!=inf;\r\n}\r\ninline int getflow(int s,int t) {\r\n    int flow=inf;\r\n    for (int i=t;i!=s;i=got[pre[i]^1]) {\r\n        flow=min(flow,tak[pre[i]]);\r\n    }\r\n    return flow;\r\n}\r\ninline void update(int s,int t,int flow,int &maxflow,int &mincost) {\r\n    maxflow+=flow,mincost+=flow*dis[t];\r\n    for (int i=t;i!=s;i=got[pre[i]^1]) {\r\n        tak[pre[i]]-=flow,tak[pre[i]^1]+=flow;\r\n    }\r\n}\r\nvector<pair<int,int>> vec;\r\ninline pair<int,int> solve(int s,int t,int n) {\r\n    int maxflow=0,mincost=0;\r\n    while (spfa(s,t,n)) {\r\n        update(s,t,getflow(s,t),maxflow,mincost);\r\n        vec.push_back(mkp(maxflow,mincost));\r\n    }\r\n    return make_pair(maxflow,mincost);\r\n}\r\nint main() {\r\n    int n=read(),m=read();\r\n    for (int i=1;i<=m;i++) {\r\n        int x=read(),y=read(),w=read();\r\n        AddEdge(x,y,1,w),AddEdge(y,x,0,-w);\r\n    }\r\n    pair<int,int> res=solve(1,n,n);\r\n    int q=read();\r\n    while (q--) {\r\n        int x=read(); double res=1e18;\r\n        for (auto tmp:vec) res=min(res,(double)(x+tmp.second)/(double)tmp.first);\r\n        printf(\"%0.10lf\\n\",res);\r\n    }\r\n    return 0;\r\n}"
}