{
    "id": 148084607,
    "contestId": 1307,
    "creationTimeSeconds": 1646201571,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "xajd1920"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 102400,
    "source": "// Zeit und Raum trennen dich und mich. //\r\n// Informatik verbindet dich und mich. //\r\n#include<algorithm>\r\n#include<iostream>\r\n#include<cstring>\r\n#include<utility>\r\n#include<vector>\r\n#include<cstdio>\r\n#include<queue>\r\n#include<cmath>\r\n\r\n#define il inline\r\n#define db double\r\n#define ull unsigned long long\r\n#define pii pair<int,int>\r\n#define mk make_pair\r\n#define fi first\r\n#define se second\r\n#define int long long\r\n\r\nusing namespace std;\r\n\r\nil int read(){\r\n    int x=0,f=1; char ch=getchar();\r\n    while(ch<'0'||ch>'9') {if(ch=='-') f=-1;ch=getchar();}\r\n    while(ch>='0'&&ch<='9') {x=(x<<1)+(x<<3)+(ch^48); ch=getchar();}\r\n    return x*f;\r\n}\r\n\r\nconst int N=1010;\r\nconst int inf=1e9+10;\r\n\r\nint n,m,q;\r\nint head[N];\r\nint flow[N],cost[N],vis[N],pre[N],lst[N];\r\nint tot=1;\r\nint maxflow,mincost;\r\n\r\nstruct node{\r\n    int to,nxt,flow,cost;\r\n} e[N<<1];\r\n\r\nvector<pii> vec; \r\n\r\nil void adde(int x,int y,int f,int c){\r\n    e[++tot]={y,head[x],f,c};head[x]=tot;\r\n    e[++tot]={x,head[y],0,-c};head[y]=tot;\r\n}\r\n\r\nil bool Spfa(){\r\n    for(int i=1;i<=n;i++){\r\n        cost[i]=flow[i]=inf;\r\n        vis[i]=0;\r\n    }\r\n    queue<int> q;\r\n    q.push(1);\r\n    cost[1]=0;vis[1]=1;pre[n]=-1;\r\n    while(!q.empty()){\r\n        int u=q.front();q.pop();\r\n        vis[u]=0;\r\n        for(int i=head[u];i;i=e[i].nxt){\r\n            int v=e[i].to;\r\n            if(e[i].flow&&cost[v]>cost[u]+e[i].cost){\r\n                cost[v]=cost[u]+e[i].cost;\r\n                flow[v]=min(flow[u],e[i].flow);\r\n                pre[v]=u;\r\n                lst[v]=i;\r\n                if(!vis[v]) vis[v]=1,q.push(v);\r\n            }\r\n        }\r\n    }\r\n    return pre[n]!=-1;\r\n}\r\n\r\nil void SSP(){\r\n    while(Spfa()){\r\n        int now=n;\r\n        maxflow+=flow[n];\r\n        mincost+=cost[n]*flow[n];\r\n        vec.push_back(mk(maxflow,mincost));\r\n        while(now!=1){\r\n            e[lst[now]].flow-=flow[n];\r\n            e[lst[now]^1].flow+=flow[n];\r\n            now=pre[now];\r\n        }\r\n    }\r\n}\r\n\r\nsigned main(){\r\n    n=read();m=read();\r\n    for(int i=1;i<=m;i++){\r\n        int x=read(),y=read(),z=read();\r\n        adde(x,y,1,z);\r\n    }\r\n    SSP();\r\n    q=read();\r\n    for(int i=1;i<=q;i++){\r\n        int x=read();\r\n        double res=inf;\r\n        for(auto j:vec){\r\n            res=min(res,(double)((j.se+x)/(double)j.fi));\r\n        }\r\n        printf(\"%.10lf\\n\",res);\r\n    }\r\n    return 0;\r\n}"
}