{
    "id": 219902182,
    "contestId": 1307,
    "creationTimeSeconds": 1692702451,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "Xun_Xiaoyao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 409600,
    "source": "// LUOGU_RID: 122272582\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nint Qread()\r\n{\r\n    int x=0;char ch=getchar();\r\n    while(ch<'0'||ch>'9') ch=getchar();\r\n    while(ch>='0'&&ch<='9') x=x*10+(ch^48),ch=getchar();\r\n    return x;\r\n}\r\nint n;\r\nnamespace flow{\r\n    struct Edge{\r\n        int poi,nxt,val,dis;\r\n    }l[5010];\r\n    int edge_cnt;\r\n    int p[51];\r\n    void add_edge(int u,int v,int w)\r\n    {\r\n        l[++edge_cnt].nxt=p[u],l[edge_cnt].poi=v,l[edge_cnt].val=1,l[edge_cnt].dis=w,p[u]=edge_cnt;\r\n        l[++edge_cnt].nxt=p[v],l[edge_cnt].poi=u,l[edge_cnt].val=0,l[edge_cnt].dis=-w,p[v]=edge_cnt;\r\n    }\r\n    queue<int> Q;\r\n    bool vis[51];\r\n    int dis[51],fro[51];\r\n    bool SPFA()\r\n    {\r\n        memset(dis,0x3f,sizeof(dis));\r\n        dis[1]=0,Q.push(1),vis[1]=true;\r\n        while(!Q.empty())\r\n        {\r\n            int rea=Q.front();Q.pop();\r\n            vis[rea]=false;\r\n            for(int k=p[rea];k;k=l[k].nxt)\r\n            if(l[k].val&&dis[l[k].poi]>dis[rea]+l[k].dis)\r\n            {\r\n                dis[l[k].poi]=dis[rea]+l[k].dis,fro[l[k].poi]=k;\r\n                if(!vis[l[k].poi]) Q.push(l[k].poi),vis[l[k].poi]=true;\r\n            }\r\n        }\r\n        return dis[n]!=0x3f3f3f3f;\r\n    }\r\n    void EK(vector<int> &P)\r\n    {\r\n        while(SPFA())\r\n        {\r\n            P.push_back(dis[n]);\r\n            int cur=n;\r\n            while(cur!=1)\r\n            {\r\n                assert(cur);\r\n                l[fro[cur]].val^=1;\r\n                l[fro[cur]^1].val^=1;\r\n                cur=l[fro[cur]^1].poi;\r\n            }\r\n        }\r\n    }\r\n}\r\nint m,u,v,w,q,x,lm,fl;\r\nvector<int> P;\r\nint main()\r\n{\r\n    n=Qread(),m=Qread();\r\n    flow::edge_cnt=1;\r\n    for(int i=1;i<=m;i++)\r\n    {\r\n        u=Qread(),v=Qread(),w=Qread();\r\n        flow::add_edge(u,v,w);\r\n    }\r\n    flow::EK(P);\r\n    lm=P.size();\r\n    q=Qread();\r\n    while(q--)\r\n    {\r\n        x=Qread();\r\n        x+=P[0];\r\n        fl=1;\r\n        while(fl<lm&&x>=1ll*fl*P[fl])\r\n            x+=P[fl++];\r\n        printf(\"%.10lf\\n\",1.0*x/fl);\r\n    }\r\n    return 0;\r\n}"
}