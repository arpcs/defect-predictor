{
    "id": 108084848,
    "contestId": 1307,
    "creationTimeSeconds": 1613895934,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "Gemini17"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 592,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int MAXN=2000;\r\nconst int inf=0x3f3f3f3f;\r\ntemplate <typename T>\r\nvoid read(T &x) {\r\n\tT flag=1;\r\n\tchar ch=getchar();\r\n\tfor (; '0'>ch||ch>'9'; ch=getchar()) if (ch=='-') flag=-1;\r\n\tfor (x=0; '0'<=ch&&ch<='9'; ch=getchar()) x=x*10+ch-'0';\r\n\tx*=flag;\r\n}\r\nstruct node{\r\n\tint pre, to, val, cost;\r\n}edge[MAXN<<1];\r\nint head[MAXN], tot=1;\r\nint n, m;\r\nint cur[MAXN], d[MAXN];\r\nqueue<int> q;\r\nvoid add_edge(int u, int v, int w, int l) {\r\n\tedge[++tot]=node{head[u], v, w, l};\r\n\thead[u]=tot;\r\n\tedge[++tot]=node{head[v], u, 0, -l};\r\n\thead[v]=tot;\r\n}\r\nbool vis[MAXN];\r\nint Pre[MAXN], incf[MAXN];\r\nbool spfa(int s, int t) {\r\n\tfor (int i=1; i<=n; i++) vis[i]=false, d[i]=inf, cur[i]=head[i];\r\n\td[s]=0;\r\n\tvis[s]=true;\r\n\tq.push(s);\r\n\tincf[s]=inf;\r\n\twhile (!q.empty()) {\r\n\t\tint x=q.front(); q.pop();\r\n\t\tfor (int i=head[x]; i; i=edge[i].pre) {\r\n\t\t\tif (edge[i].val&&d[edge[i].to]>d[x]+edge[i].cost) {\r\n\t\t\t\td[edge[i].to]=d[x]+edge[i].cost;\r\n\t\t\t\tPre[edge[i].to]=i;\r\n\t\t\t\tincf[edge[i].to]=min(incf[x], edge[i].val);\r\n\t\t\t\tif (!vis[edge[i].to]) {\r\n\t\t\t\t\tq.push(edge[i].to);\r\n\t\t\t\t\tvis[edge[i].to]=true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tvis[x]=false;\r\n\t}\r\n\treturn d[t]<inf;\r\n}\r\nvector<double> FFlow, Cost;\r\nint cnt=0;\r\nint nowf, nowc;\r\nvoid update(int s, int t) {\r\n\tint x=t;\r\n\twhile (x!=s) {\r\n\t\tint i=Pre[x];\r\n\t\tedge[i].val-=incf[t];\r\n\t\tedge[i^1].val+=incf[t];\r\n\t\tx=edge[i^1].to;\r\n\t}\r\n\tnowf+=incf[t];\r\n\tnowc+=d[t]*incf[t];\r\n\tFFlow.push_back(nowf);\r\n\tCost.push_back(nowc);\r\n}\r\nint main() {\r\n\tread(n); read(m);\r\n\tfor (int i=1; i<=m; i++) {\r\n\t\tint u, v, w;\r\n\t\tread(u); read(v); read(w);\r\n\t\tadd_edge(u, v, 1, w);\r\n\t}\r\n\twhile (spfa(1, n)) update(1, n);\r\n\tint Q;\r\n\tread(Q);\r\n\tfor (int i=1; i<=Q; i++) {\r\n\t\tdouble x;\r\n\t\tscanf(\"%lf\", &x);\r\n\t\tdouble ans=1e9;\r\n\t\tfor (int j=0; j<(int)FFlow.size(); j++) {\r\n\t\t\tans=min(ans, (Cost[j]+x)/FFlow[j]);\r\n\t\t}\r\n\t\tcout << setprecision(10) << ans << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}"
}