{
    "id": 108353053,
    "contestId": 1307,
    "creationTimeSeconds": 1614138495,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "Lusterdawn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 1843200,
    "source": "#include <bits/stdc++.h>\r\n\r\nstd::vector<std::pair<int,int> > vec;\r\n\r\nnamespace Flow {\r\n\tconst int inf=1e9;\r\n\tconst int maxn = 3e4;\r\n\tconst int maxm = 3e4;\r\n\tint hd[maxn],dis[maxn],pre[maxn],preE[maxn],inq[maxn],tl=0,MinCost=0,MaxFlow=0,s,t;\r\n\tstruct edge {\r\n\t\tint v,w,c,nxt,rev;\r\n\t}E[maxm<<1];\r\n\t\r\n\tint add_edge_private(int u,int v,int w,int c){\r\n\t\tE[++tl].v=v;E[tl].w=w;E[tl].c=c;E[tl].nxt=hd[u];hd[u]=tl;return tl;\r\n\t}\r\n\t\r\n\tvoid add_edge(int u,int v,int c,int w){\r\n\t\t//printf(\"%d %d %d %d\\n\",u,v,c,w);\r\n\t\tint d1=add_edge_private(u,v,w,c);\r\n\t\tint d2=add_edge_private(v,u,-w,0);\r\n\t\tE[d1].rev=d2;E[d2].rev=d1;\r\n\t}\r\n\t\r\n\tint bellman_ford(){\r\n\t\tstd::memset(dis,127,sizeof(dis));\r\n\t\tstd::memset(inq,0,sizeof(inq));\r\n\t\tstd::queue<int>q;q.push(s);dis[s]=0;inq[s]=1;\r\n\t\twhile(!q.empty()){\r\n\t\t\tint u=q.front();q.pop();\r\n\t\t\tfor(int i=hd[u];i;i=E[i].nxt){\r\n\t\t\t\tint v=E[i].v;\r\n\t\t\t\tif(E[i].c==0)continue;\r\n\t\t\t\tif(dis[v]>dis[u]+E[i].w){\r\n\t\t\t\t\tdis[v]=dis[u]+E[i].w;\r\n\t\t\t\t\tpre[v]=u; preE[v] = i;\r\n\t\t\t\t\tif(!inq[v]){q.push(v);inq[v]=1;}\r\n\t\t\t\t}\r\n\t\t\t}inq[u]=0;\r\n\t\t}return dis[t]<dis[0];\r\n\t}\r\n\tvoid work(){\r\n\t\twhile(bellman_ford()) {\r\n\t\t\tint f = inf;\r\n\t\t\tint u = t;\r\n\t\t\twhile (u != s) {\r\n\t\t\t\tf = std::min(f,E[preE[u]].c);\r\n\t\t\t\tu = pre[u];\r\n\t\t\t}  u = t;\r\n\t\t\tMaxFlow += f;\r\n\t\t\twhile (u != s) {\r\n\t\t\t\tMinCost += E[preE[u]].w * f;\r\n\t\t\t\tE[preE[u]].c -= f;\r\n\t\t\t\tE[E[preE[u]].rev].c += f;\r\n\t\t\t\tu = pre[u];\r\n\t\t\t} \r\n\t\t//\tprintf(\"<%d %d>\\n\",MaxFlow,MinCost);\r\n\t\t\tvec.push_back( { MaxFlow,MinCost } ); \r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n\r\nint n,m,q,u,v,w;\r\ndouble x;\r\n\r\nint main() {\r\n\tscanf(\"%d%d\",&n,&m);\r\n\tFlow::s = 1; Flow::t = n;\r\n\tfor (int i = 1; i <= m; ++ i) {\r\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\r\n\t\tFlow::add_edge(u,v,1,w);\r\n\t} Flow::work();\r\n\tscanf(\"%d\",&q);\r\n\twhile (q --) {\r\n\t\tscanf(\"%lf\",&x);\r\n\t\tdouble ans = 1e9;\r\n\t\tfor (auto p:vec) \r\n\t\t\tans = std::min(ans,(p.second + x) / (double) p.first);\r\n\t\tprintf(\"%.8f\\n\",ans);\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}