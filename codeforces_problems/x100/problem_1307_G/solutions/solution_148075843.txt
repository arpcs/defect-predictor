{
    "id": 148075843,
    "contestId": 1307,
    "creationTimeSeconds": 1646191421,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 74649600,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define N 500005\n#define pi pair<int,int>\n#define fi first\n#define se second\nconst ll inf = 1e18+10;\nconst int INF = 1e9+10;\nconst double eps = 1e-10;\nconst ll mod = 998244353;\ninline ll read()\n{\n   ll f=0,g=1;\n   char ch=getchar();\n   while(ch<'0'||ch>'9') {if(ch=='-') g=-1;ch=getchar();}\n   while(ch>='0'&&ch<='9') f=(f<<1)+(f<<3)+(ch^48),ch=getchar();\n   return f*g;\n}\n\nint n,m,Q;\n\nvector<pi >F;\n\nnamespace Network_flow\n{\n  //\u7f51\u7edc\u6d41\n   struct edge\n   {\n       int to,next,flow,dis;\n   }e[N<<3];\n   \n   int s,t;\n   int head[N],cnt=1;\n   int maxflow,mincost;\n   int pre[N],dis[N],last[N],flow[N];\n   bool vis[N];\n   queue<int>q;\n\n   void add_edge(int x,int y,int z,int d)\n   {\n      e[++cnt]=(edge) {y,head[x],z,d};\n      head[x]=cnt;\n   }\n\n   void add(int x,int y,int z,int d=0)\n   {\n      add_edge(x,y,z,d);\n      add_edge(y,x,0,-d);\n   }\n   \n   bool bfs()\n   {\n      memset(dis,0,sizeof dis);\n      pre[s]=head[s]; dis[s]=1;\n      q.push(s);\n      while(!q.empty())\n      {\n         int now=q.front();q.pop();\n         for(int i=head[now];i;i=e[i].next)\n         {\n             int to=e[i].to;\n             if(e[i].flow&&!dis[to])\n             {\n                dis[to]=dis[now]+1;\n                pre[to]=head[to];\n                q.push(to);\n             }\n         }\n      }\n      return dis[t];\n   }\n   \n   bool spfa()\n   {\n       memset(dis,0x3f,sizeof dis);\n       memset(vis,0,sizeof vis);\n       memset(flow,0x3f,sizeof flow);\n       pre[t]=-1; dis[s]=0; vis[s]=1;\n       q.push(s);\n       while(!q.empty())\n       {\n          int now=q.front();q.pop();vis[now]=0;\n          for(int i=head[now];i;i=e[i].next)\n          {\n              int to=e[i].to; \n              if(e[i].flow&&dis[to]>dis[now]+e[i].dis)\n              {\n                  dis[to]=dis[now]+e[i].dis;\n                  pre[to]=now; last[to]=i;\n                  flow[to]=min(flow[now],e[i].flow);\n                  if(!vis[to]) vis[to]=1,q.push(to);\n              }\n          }\n       }\n       return pre[t]!=-1;\n   }\n\n   int dfs(int now,int sum)\n   {\n      if(now==t) return sum;\n      int res,out; res=out=0;\n      for(int i=pre[now];i&&sum;i=e[i].next)\n      {\n          int to=e[i].to;  pre[now]=i;\n          if(e[i].flow&&dis[to]==dis[now]+1)\n          {\n             res=dfs(to,min(e[i].flow,sum));\n             sum-=res; out+=res;\n             e[i].flow-=res; e[i^1].flow+=res;\n             if(!sum) break;\n          }\n      }\n      if(!out) dis[now]=0;\n      return out;\n   }\n   \n   pair<int,int> MCMF()\n   {\n       while(spfa())\n       {\n          int now=t;\n          maxflow+=flow[t];\n          mincost+=flow[t]*dis[t];\n          F.push_back({maxflow,mincost});\n          while(now!=s)\n          {\n             e[last[now]].flow-=flow[t];\n             e[last[now]^1].flow+=flow[t];\n             now=pre[now];\n          }\n       }\n       return make_pair(maxflow,mincost);\n   }\n    \n   void Clear()\n   {\n      cnt=1; memset(head,0,sizeof head);\n      maxflow=mincost=0;\n   }\n\n   int Dinic()\n   {\n       int d=0,ans=0;\n       while(bfs()) while(d=dfs(s,INF)) ans+=d;\n       return ans;\n   }\n}\nusing namespace Network_flow;\n\nint main()\n{\n   n=read(); m=read();\n   for(int i=1;i<=m;i++)\n   {\n      int x=read(),y=read(),z=read();\n      add(x,y,1,z);\n   }\n   s=1,t=n; MCMF();\n   Q=read();\n   for(int i=1,x;i<=Q;i++)\n   {\n      x=read();\n      double Res=inf;\n      for(auto d:F) Res=min(Res,(double)(d.se+x)/d.fi);\n      printf(\"%.10lf\\n\",Res);\n   }\n   return 0;\n}\n\n\n/*\n4\n2\n0 2\n2 0\n6\n0 1 1 0 1 0\n1 0 0 1 0 1\n1 0 0 1 0 0\n0 1 1 0 0 0\n1 0 0 0 0 1\n0 1 0 0 1 0\n0\n1\n0\n*/\n\n  \t \t   \t     \t\t \t \t \t       \t"
}