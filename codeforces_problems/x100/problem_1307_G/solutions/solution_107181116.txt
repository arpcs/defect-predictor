{
    "id": 107181116,
    "contestId": 1307,
    "creationTimeSeconds": 1613129921,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "jzp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 40140800,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <algorithm>\r\n#include <cctype>\r\n#include <vector>\r\n#define N 111\r\ntemplate<typename T> inline void read(T &x) {\r\n\tx = 0; char c = getchar(); bool flag = false;\r\n\twhile (!isdigit(c)) { if (c == '-') flag = true; c = getchar(); }\r\n\twhile (isdigit(c)) x = x * 10 + (c ^ 48), c =getchar();\r\n\tif (flag)\tx = -x;\r\n}\r\nusing namespace std;\r\nconst int inf = 987654321;\r\ntemplate<typename T> inline void MIN(T &a, T b) {\r\n\tif (b < a)\ta = b;\r\n}\r\nint n, m, s, t;\r\nstruct edge {\r\n\tint nxt, to, val, fare;\r\n\tedge(){}\r\n\tedge(int jzp, int zzz, int lsr, int chr) { nxt = jzp, to = zzz, val = lsr, fare = chr; }\r\n}e[2001000];\r\nint head[N], ecnt = 1, hcur[N];\r\ninline void addedge(int from, int to, int val, int fare) {\r\n\te[++ecnt] = edge(head[from], to, val, fare);\r\n\thead[from] = ecnt;\r\n}\r\ninline void Addedge(int u, int v, int w, int f) {\r\n\taddedge(u, v, w, f), addedge(v, u, 0, -f);\r\n}\r\n\r\nint que[2001000], front, rear, dis[N];\r\nbool vis[N];\r\ninline bool spfa() {\r\n\tmemset(dis, 0x3f, sizeof(dis));\r\n\tfront = rear = 0;\r\n\tmemcpy(hcur, head, sizeof(head));\r\n\r\n\tque[++rear] = s; dis[s] = 0; vis[s] = true;\r\n\twhile (front < rear) {\r\n\t\tint cur = que[++front]; vis[cur] = false;\r\n\t\tfor (int i = head[cur]; i; i = e[i].nxt) {\r\n\t\t\tint to  =e[i].to; if (!e[i].val || dis[to] <= dis[cur] + e[i].fare)\tcontinue;\r\n\t\t\tdis[to] = dis[cur] + e[i].fare;\r\n\t\t\tif (!vis[to])\tvis[to] = true, que[++rear] = to;\r\n\t\t}\r\n\t}\r\n\treturn dis[t] <= 1e9;\r\n}\r\nint dfs(int cur, int limi) {\r\n\tif (cur == t || !limi)\treturn limi;\r\n\tint flow = 0; vis[cur] = true;\r\n\tfor (int i = hcur[cur]; i; i = e[i].nxt) {\r\n\t\tint to = e[i].to; hcur[cur] = i;\r\n\t\tif (vis[to] || dis[to] != dis[cur] + e[i].fare)\tcontinue;\r\n\t\tint tmp = dfs(to, min(e[i].val, limi));\r\n\t\tif (!tmp)\tcontinue;\r\n\t\te[i].val -= tmp; e[i ^ 1].val += tmp;\r\n\t\tflow += tmp; limi -= tmp;\r\n\t\tif (!limi)\tbreak;\r\n\t}\r\n\tvis[cur] = false;\r\n\treturn flow;\r\n}\r\n\r\nvector<int> vec;\r\nint main() {\r\n\tread(n), read(m); s = 1, t = n;\r\n\tfor (int i = 1; i <= m; ++i) {//Bug\r\n\t\tint u, v, w; read(u), read(v), read(w);\r\n\t\tAddedge(u, v, 1, w);\r\n\t}\r\n\tint mxflow = 0;\r\n\twhile (spfa()) {\r\n\t\tint tmp = dfs(s, inf);\r\n\t\tfor (int i = 1; i <= tmp; ++i)\tvec.push_back(dis[t]);\r\n\t\tmxflow += tmp;\r\n\t}\r\n\tfor (int i = 1; i < mxflow; ++i)\tvec[i] += vec[i - 1];\r\n\tint  q; read(q);\r\n\twhile (q--) {\r\n\t\tint x; read(x);\r\n\t\tdouble ans = inf;\r\n\t\tfor (int i = 0; i < mxflow; ++i)\tMIN(ans, 1.0 * (vec[i] + x) / (i + 1));//bug\r\n\t\tprintf(\"%.8f\\n\", ans);\r\n\t}\r\n\treturn 0;\r\n}"
}