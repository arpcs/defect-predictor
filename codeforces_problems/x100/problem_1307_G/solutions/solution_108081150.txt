{
    "id": 108081150,
    "contestId": 1307,
    "creationTimeSeconds": 1613892979,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "AK-Dream"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n#define N 2505\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\ntemplate <typename T>\r\ninline void read(T &num) {\r\n\tT x = 0, f = 1; char ch = getchar();\r\n\tfor (; ch > '9' || ch < '0'; ch = getchar()) if (ch == '-') f = -1;\r\n\tfor (; ch <= '9' && ch >= '0'; ch = getchar()) x = (x << 3) + (x << 1) + (ch ^ '0');\r\n\tnum = x * f;\r\n}\r\n\r\nconst int inf = 0x3f3f3f3f;\r\nint n, m, Q;\r\nint head[N], pre[N<<1], to[N<<1], flow[N<<1], cost[N<<1], sz = 1;\r\nvector<int> A, B;\r\n\r\ninline void addedge(int u, int v, int w, int c) {\r\n\tpre[++sz] = head[u]; head[u] = sz; to[sz] = v; flow[sz] = w; cost[sz] = c;\r\n\tpre[++sz] = head[v]; head[v] = sz; to[sz] = u; flow[sz] = 0; cost[sz] = -c;\r\n}\r\n\r\nqueue<int> q;\r\nint dis[N], vis[N], lst[N]; \r\nbool SPFA() {\r\n\tfor (int i = 1; i <= n; i++) dis[i] = inf, vis[i] = lst[i] = 0;\r\n\tdis[1] = 0; vis[1] = 1; q.push(1);\r\n\twhile (!q.empty()) {\r\n\t\tint x = q.front(); q.pop(); vis[x] = 0;\r\n\t\tfor (int i = head[x]; i; i = pre[i]) {\r\n\t\t\tint y = to[i]; if (!flow[i]) continue;\r\n\t\t\tif (dis[y] > dis[x] + cost[i]) {\r\n\t\t\t\tdis[y] = dis[x] + cost[i];\r\n\t\t\t\tlst[y] = i;\r\n\t\t\t\tif (!vis[y]) vis[y] = 1, q.push(y);\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\treturn dis[n] != inf; \r\n} \r\n\r\nvoid mincost() {\r\n\tint F = 0, C = 0;\r\n\twhile (SPFA()) {\r\n\t\tint Fl = inf;\r\n\t\tfor (int i = n; i != 1; i = to[lst[i]^1]) Fl = min(Fl, flow[lst[i]]);\r\n\t\tF += Fl;\r\n\t\tfor (int i = n; i != 1; i = to[lst[i]^1]) {\r\n\t\t\tC += Fl * cost[lst[i]]; \r\n\t\t\tflow[lst[i]] -= Fl; \r\n\t\t\tflow[lst[i]^1] += Fl;\r\n\t\t}\r\n\t\tcout << F << \" \" << C << \"??\\n\";\r\n\t\tA.push_back(F); B.push_back(C);  \r\n\t}\r\n}\r\n\r\nint main() {\r\n\tread(n); read(m);\r\n\tfor (int i = 1, u, v, w; i <= m; i++) {\r\n\t\tread(u); read(v); read(w);\r\n\t\taddedge(u, v, 1, w);\r\n\t}\r\n\tmincost(); \r\n\tread(Q);\r\n\tfor (int i = 1, x; i <= Q; i++) {\r\n\t\tread(x);\r\n\t\tdouble ans = 1e12;\r\n\t\tfor (int j = 0; j < A.size(); j++) {\r\n\t\t\tans = min(ans, (B[j]+x)*1.0/A[j]);\r\n\t\t}\r\n\t\tprintf(\"%.10f\\n\", ans);\r\n\t} \r\n\treturn 0;\r\n} "
}