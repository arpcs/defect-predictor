{
    "id": 107512251,
    "contestId": 1307,
    "creationTimeSeconds": 1613462816,
    "relativeTimeSeconds": 5816,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "Flannery"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1613457000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 102400,
    "source": "// Problem: G. Cow and Exercise\r\n// Contest: Codeforces - Codeforces Round #621 (Div. 1 + Div. 2)\r\n// URL: https://codeforces.com/contest/1307/problem/G\r\n// Memory Limit: 256 MB\r\n// Time Limit: 1000 ms\r\n// \r\n// Powered by CP Editor (https://cpeditor.org)\r\n\r\n#include <bits/stdc++.h>\r\n\r\nconst int maxn = 59;\r\n\r\nstruct Edge{\r\n\tint to, next, c, f;\r\n}edge[maxn * maxn];\r\n\r\nint head[maxn], cnt = 1;\r\n\r\ninline void add(int from, int to, int c, int f){\r\n\tedge[++cnt].to = to;\r\n\tedge[cnt].c = c, edge[cnt].f = f;\r\n\tedge[cnt].next = head[from];\r\n\thead[from] = cnt;\r\n}\r\n\r\nint n, m, ans[maxn], tot;\r\nint dist[maxn], flow[maxn], pre[maxn], q[maxn * maxn], h, t;\r\nbool vist[maxn];\r\nint spfa(void){\r\n\tfor(int i = 1; i <= n; ++i) dist[i] = 0x3f3f3f3f;\r\n\tdist[1] = 0;\r\n\tfor(int i = 1; i <= n; ++i) flow[i] = 0;\r\n\tflow[1] = 0x3f3f3f3f;\r\n\tq[h = t = 1] = 1, vist[1] = 1;\r\n\twhile(h <= t){\r\n\t\tint node = q[h++]; vist[node] = 0;\r\n\t\tfor(int i = head[node]; i; i = edge[i].next)\r\n\t\t\tif(edge[i].c && dist[edge[i].to] > dist[node] + edge[i].f){\r\n\t\t\t\tdist[edge[i].to] = dist[node] + edge[i].f;\r\n\t\t\t\tflow[edge[i].to] = std::min(flow[node], edge[i].c);\r\n\t\t\t\tpre[edge[i].to] = i;\r\n\t\t\t\tif(!vist[edge[i].to])\r\n\t\t\t\t\tq[++t] = edge[i].to, vist[edge[i].to] = 1;\r\n\t\t\t}\r\n\t}\r\n\treturn flow[n];\r\n}\r\n\r\nint main(){\r\n\tscanf(\"%d%d\", &n, &m);\r\n\tfor(int i = 1, u, v, w; i <= m; ++i){\r\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\r\n\t\tadd(u, v, 1, w), add(v, u, 0, -w);\r\n\t}\r\n\twhile(spfa()){\r\n\t\tans[tot + 1] = ans[tot] + dist[n],\t++tot;\r\n\t\tfor(int i = n; i != 1; i = edge[pre[i] ^ 1].to) --edge[pre[i]].c, ++edge[pre[i] ^ 1].c;\r\n\t}\r\n\tint q; scanf(\"%d\", &q);\r\n\twhile(q--){\r\n\t\tint x; scanf(\"%d\", &x);\r\n\t\tlong double rs = 1e18;\r\n\t\tfor(int i = 1; i <= tot; ++i) rs = std::min(rs, (long double)(ans[i] + x) / i);\r\n\t\tprintf(\"%.10Lf\\n\", rs);\r\n\t}\r\n}"
}