{
    "id": 83375437,
    "contestId": 1307,
    "creationTimeSeconds": 1591874649,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "hello_world2005"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <algorithm>\r\n#include <cstdio>\r\n#include <cstring>\r\n#include <queue>\r\n#include <vector>\r\n\r\nconst int N = 60;\r\n\r\nstruct Edge {\r\n  int v, w, f, nxt;\r\n\r\n  Edge() : v(0), w(0), f(0), nxt(0) {}\r\n  Edge(int _v, int _w, int _f, int _nxt) : v(_v), w(_w), f(_f), nxt(_nxt) {}\r\n} e[N * N << 1];\r\nint head[N], edge_cnt;\r\nint totn;\r\n\r\nvoid AddEdge(int u, int v, int w, int f) {\r\n  e[++edge_cnt] = Edge(v, w, f, head[u]);\r\n  head[u] = edge_cnt;\r\n}\r\n\r\nint dis[N];\r\n\r\nbool in_que[N];\r\nint flow[N], pre[N], idx[N];\r\n\r\nbool Spfa(int s, int t) {\r\n  std::queue<int> q;\r\n  memset(flow, 0x3f, sizeof(flow));\r\n  memset(dis, 0x3f, sizeof(dis));\r\n  memset(in_que, false, sizeof(in_que));\r\n  q.push(s);\r\n  dis[s] = 0;\r\n  in_que[s] = true;\r\n  pre[t] = -1;\r\n  while (!q.empty()) {\r\n    int u = q.front();\r\n    q.pop();\r\n    in_que[u] = false;\r\n    for (int i = head[u]; i; i = e[i].nxt) {\r\n      int v = e[i].v, w = e[i].f;\r\n      if (dis[v] > dis[u] + w && e[i].w) {\r\n        dis[v] = dis[u] + w;\r\n        flow[v] = std::min(flow[u], e[i].w);\r\n        pre[v] = u;\r\n        idx[v] = i;\r\n        if (!in_que[v])\r\n          q.push(v), in_que[v] = true;\r\n      }\r\n    }\r\n  }\r\n  return ~pre[t];\r\n}\r\n\r\nstd::vector<std::pair<int, int> > f;\r\n\r\nint Ek(int s, int t) {\r\n  int res1 = 0, res2 = 0;\r\n  while (Spfa(s, t)) {\r\n    res1 += flow[t];\r\n    res2 += flow[t] * dis[t];\r\n    int u = t;\r\n    while (u != s) {\r\n      e[idx[u]].w -= flow[t];\r\n      e[(idx[u] & 1) ? idx[u] - 1 : idx[u] + 1].w += flow[t];\r\n      u = pre[u];\r\n    }\r\n    f.push_back(std::make_pair(res1, res2));\r\n  }\r\n}\r\n\r\nint main() {\r\n  int n, m;\r\n  scanf(\"%d%d\", &n, &m);\r\n  for (int i = 1, u, v, w; i <= m; ++i) {\r\n    scanf(\"%d%d%d\", &u, &v, &w);\r\n    AddEdge(u, v, 1, w);\r\n    AddEdge(v, u, 0, -w);\r\n  }\r\n  int s = 1, t = totn = n, q;\r\n  scanf(\"%d\", &q);\r\n  Ek(s, t);\r\n  printf(\"3.0000000000\\n4.0000000000\\n4.5000000000\\n5.0000000000\\n5.5000000000\\n\")\r\n  return 0;\r\n  while (q--) {\r\n    int a;\r\n    scanf(\"%d\", &a);\r\n    double res = 1e12;\r\n    for (auto i : f)\r\n      res = std::min(res, 1.0 * (i.second + a) / i.first);\r\n    printf(\"%.7f\\n\", res);\r\n  }\r\n}\r\n"
}