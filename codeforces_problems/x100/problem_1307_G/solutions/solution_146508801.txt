{
    "id": 146508801,
    "contestId": 1307,
    "creationTimeSeconds": 1644924448,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "felys"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 888,
    "memoryConsumedBytes": 8192000,
    "source": "#pragma GCC optimize(3)\r\n#include<bits/stdc++.h>\r\nconst int N=55,inf=1e9,Q=500050;\r\ndouble eps=1e-7;\r\nusing namespace std;\r\n\r\nbool equ(double x,double y){return abs(x-y)<=eps;}\r\n\r\nint n,m;\r\n\r\nstruct graphI{\r\n\tshort e[N][N],sz[N],id[N][N],fl[N][N];\r\n\tint s,t,n,w[N][N];\r\n\t#define _to e[k][i]\r\n\t#define _w w[k][i]\r\n\t#define fore(k) for(int i=1;i<=sz[k];i++)\r\n\tvoid add(int x,int y,int z){\r\n\t\t++sz[x];e[x][sz[x]]=y,w[x][sz[x]]=z,id[x][y]=sz[x];\r\n\t}\r\n\tvoid seti(int x,int y){fl[x][y]=1;}\r\n\tvoid addw(int x,int y,int z){w[x][id[x][y]]+=z;}\r\n\tvoid add(){int x,y,z;cin>>x>>y>>z;add(x,y,z);}\r\n\tgraphI(int _t){\r\n\t\tmemset(e,0,sizeof(e)),memset(sz,0,sizeof(sz)),memset(w,0,sizeof(w));\r\n\t\tmemset(fl,0,sizeof(fl));\r\n\t\tmemset(id,0,sizeof(id));\r\n\t\ts=1,t=_t,n=t;\r\n\t\tfor(int i=1;i<=n;i++)\r\n\t\t\tfor(int j=1;j<=n;j++)\r\n\t\t\t\tif(i!=j)add(i,j,0); \r\n\t}\r\n\tint dep[N],dept[N],nw[N];\r\n\tbool bfs(){\r\n\t\tfill(nw,nw+N,1);\r\n\t\tfill(dep,dep+N,-1);\r\n\t\tqueue<int> q;q.push(s);\r\n\t\tdep[s]=0;\r\n\t\twhile(q.size()){\r\n\t\t\tint k=q.front();q.pop();\r\n\t\t\tfore(k)if(_w&&dep[_to]==-1)\r\n\t\t\t\tdep[_to]=dep[k]+1,q.push(_to);\r\n\t\t}\r\n\t\treturn dep[t]!=-1;\r\n\t}\r\n\tvoid bfst(){\r\n\t\tfill(dept,dept+N,-1);\r\n\t\tqueue<int> q;q.push(t);\r\n\t\tdept[t]=0;\r\n\t\twhile(q.size()){\r\n\t\t\tint k=q.front();q.pop();\r\n\t\t\tfore(k)if(_w&&dept[_to]==-1)\r\n\t\t\t\tdept[_to]=1,q.push(_to);\r\n\t\t}\r\n\t}\r\n\tint dfs(int k,int fl){\r\n\t\tif(k==t||!fl)return fl;\r\n\t\tint rst=fl,f=0;\r\n\t\tfor(;nw[k]<=sz[k];nw[k]++){\r\n\t\t\tint i=nw[k];\r\n\t\t\tif(dep[_to]!=dep[k]+1)continue;\r\n\t\t\tif(!_w)continue;\r\n\t\t\tint nw=dfs(_to,min(rst,_w));\r\n\t\t\tif(!nw)dep[_to]=0;\r\n\t\t\tf+=nw,rst-=nw;\r\n\t\t\taddw(k,_to,-nw),addw(_to,k,nw);\r\n\t\t\tif(!rst)break;\r\n\t\t}\r\n\t\treturn f;\r\n\t}\r\n\tint dinic(){\r\n\t\tint ans=0;\r\n\t\twhile(bfs())\r\n\t\t\tans+=dfs(s,inf);\r\n\t\treturn ans;\r\n\t}\r\n\tauto gete(){\r\n//print();\r\n\t\tbfs();\r\n\t\tbfst();\r\n\t\tvector<pair<int,int>> res;\r\n\t\tfor(int k=1;k<=n;k++)\r\n\t\t\tfore(k)if(dep[k]!=-1&&dept[_to]!=-1){\r\n\t\t\t\tif(!fl[k][_to])continue;\r\n\t\t\t\tres.push_back({k,_to});\r\n\t\t\t}\r\n\t\treturn res;\r\n\t}\r\n\tvoid print(){\r\n\t\tcout<<\"DAG GRAPH\"<<endl;\r\n\t\tfor(int k=1;k<=n;k++)\r\n\t\t\tfore(k)\r\n\t\t\t\tcout<<k<<' '<<_to<<' '<<_w<<endl; cout<<endl;\r\n\t}\r\n};\r\n\r\nstruct graphD{\r\n\tshort e[N][N],sz[N],vis[N],id[N][N];\r\n\tdouble dis[N],dist[N],w[N][N];\r\n\tint s,t,n;\r\n\t#define _to e[k][i]\r\n\t#define _w w[k][i]\r\n\t#define fore(k) for(int i=1;i<=sz[k];i++)\r\n\tgraphD(int _t){\r\n\t\tmemset(e,0,sizeof(e)),memset(sz,0,sizeof(sz)),memset(w,0,sizeof(w));\r\n\t\tmemset(id,0,sizeof(id));\r\n\t\ts=1,t=_t,n=t;\r\n\t}\r\n\tvoid add(int x,int y,double z){\r\n\t\t++sz[x];e[x][sz[x]]=y,w[x][sz[x]]=z,id[x][y]=sz[x];\r\n\t}\r\n\tvoid addw(int x,int y,double z){w[x][id[x][y]]+=z;}\r\n\tvoid add(){int x,y;double z;cin>>x>>y>>z;add(x,y,z);}\r\n\tdouble getd(){\r\n\t\tfill(dis,dis+N,1e18);\r\n\t\tmemset(vis,0,sizeof(vis));\r\n\t\tdis[s]=0;\r\n\t\tfor(int i=1;i<n;i++){\r\n\t\t\tint k=0;\r\n\t\t\tfor(int j=1;j<=n;j++)\r\n\t\t\t\tif(!vis[j]&&dis[j]<=dis[k])\r\n\t\t\t\t\tk=j;\r\n\t\t\tvis[k]=1;\r\n\t\t\tfore(k)dis[_to]=min(dis[_to],dis[k]+_w);\r\n\t\t}\r\n\t\treturn dis[n];\r\n\t}\r\n\tdouble gett(){\r\n\t\tfill(dist,dist+N,1e18);\r\n\t\tmemset(vis,0,sizeof(vis));\r\n\t\tdist[t]=0;\r\n\t\tfor(int i=1;i<n;i++){\r\n\t\t\tint k=0;\r\n\t\t\tfor(int j=1;j<=n;j++)\r\n\t\t\t\tif(!vis[j]&&dist[j]<=dist[k])\r\n\t\t\t\t\tk=j;\r\n\t\t\tvis[k]=1;\r\n\t\t\tfor(int j=1;j<=n;j++)\r\n\t\t\t\tif(id[j][k])\r\n\t\t\t\t\tdist[j]=min(dist[j],dist[k]+w[j][id[j][k]]);\r\n\t\t}\r\n\t\treturn dist[1];\r\n\t}\r\n\tgraphI getdag(){\r\n\t\tgetd();\r\n\t\tgett();\r\n\t\tgraphI res(n);\r\n\t\tfor(int k=1;k<=n;k++)\r\n\t\t\tfore(k)\r\n\t\t\t\tif(dis[k]+_w+dist[_to]-eps<=dis[t])\r\n\t\t\t\t\tres.addw(k,_to,1),res.seti(k,_to);\r\n\t\treturn res;\r\n\t}\r\n};\r\n\r\ndouble DL[Q],K[Q];\r\ndouble initdis;\r\nint mx=0;\r\n\r\nvoid calc(){\r\n\tgraphD E(n);\r\n\tfor(int i=1;i<=m;i++)E.add();\r\n\tauto nowgraph=E,addgraph=E;\r\n\tauto daggraph=nowgraph.getdag();\r\n\tinitdis=E.getd();\r\n\tdouble nowt=0;\r\n\tfor(int T=1;nowt<=1e5;T++){\r\n\t\tmx=T;\r\n\t\tnowgraph=E;\r\n\t\tdouble nowdis=nowgraph.getd();\r\n\t\tdaggraph=nowgraph.getdag();\r\n//daggraph.print();\r\n\t\tint mincut=daggraph.dinic();\r\n//daggraph.print();\r\n\t\tauto cutedge=daggraph.gete();\r\n\t\tint numcut=cutedge.size();\r\n//assert(numcut==mincut); \r\n//cout<<endl;cout<<endl;for(auto x:cutedge)cout<<x.first<<' '<<x.second<<endl;\r\n\t\tdouble L=0,R=(1e5-nowt+5)/mincut,ans=L;\r\n\t\twhile(R-L>=eps){\r\n\t\t\tdouble mid=(L+R)/2;\r\n\t\t\taddgraph=nowgraph;\r\n\t\t\tfor(auto x:cutedge){\r\n//cout<<x.first<<' '<<x.second<<endl;\r\n\t\t\t\taddgraph.addw(x.first,x.second,mid);\r\n\t\t\t}\r\n\t\t\tauto adddis=addgraph.getd();\r\n\t\t\tif(adddis==nowdis+mid) ans=mid,L=mid;\r\n\t\t\telse R=mid;\r\n\t\t}\r\n\t\tnowt+=mincut*ans;\r\n\t\tDL[T]=mincut*ans;\r\n\t\tK[T]=mincut;\r\n\t\tfor(auto x:cutedge)\r\n\t\t\tE.addw(x.first,x.second,ans);\r\n\t}\r\n}\r\n\r\nvoid answer(){\r\n\tint q;cin>>q;\r\n\tfor(int i=1;i<=q;i++){\r\n\t\tdouble x;cin>>x;\r\n\t\tdouble res=initdis;\r\n\t\tfor(int j=1;j<=mx;j++){\r\n\t\t\tdouble nowans=min(DL[j],x);\r\n\t\t\tres+=nowans/K[j];\r\n\t\t\tx-=nowans;\r\n\t\t}\r\n\t\tprintf(\"%.12lf\\n\",res);\r\n\t}\r\n}\r\n\r\nvoid solve(){\r\n\tcin>>n>>m;\r\n\tcalc();\r\n\tanswer();\r\n}\r\n\r\nmain(){\r\n//\tfreopen(\"spfb.in\",\"r\",stdin);\r\n//\tfreopen(\"spfb.out\",\"w\",stdout);\r\n\tsolve();\r\n}\r\n"
}