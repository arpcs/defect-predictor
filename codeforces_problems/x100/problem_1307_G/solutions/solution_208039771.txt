{
    "id": 208039771,
    "contestId": 1307,
    "creationTimeSeconds": 1685612248,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "ducati"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 3379200,
    "source": "// LUOGU_RID: 111756427\n#include <bits/stdc++.h>\r\n#define int long long\r\n#define inf 1000000000000000007\r\nusing namespace std;\r\nconst int maxn=5005,maxm=50005;\r\n\r\nint read(){\r\n\tint s=0,w=1;char ch=getchar();\r\n\twhile (ch<'0'||ch>'9'){if (ch=='-')  w=-w;ch=getchar();}\r\n\twhile (ch>='0'&&ch<='9'){s=(s<<1)+(s<<3)+(ch^'0');ch=getchar();}\r\n\treturn s*w;\r\n}\r\nint n,m,q,s=1,t,maxflow,mincost,cnt=1;\r\nint head[maxn],dis[maxn],flow[maxn],pre[maxn],last[maxn],vis[maxn];\r\nstruct edge{int nxt,to,f,d;}e[2*maxm]; vector<pair<int,int> >vec;\r\nvoid add_edge(int u,int v,int f,int d){e[++cnt].to=v,e[cnt].f=f,e[cnt].d=d,e[cnt].nxt=head[u],head[u]=cnt;}\r\nbool SPFA(){\r\n\tfor (int i=1;i<=n;i++)  dis[i]=flow[i]=inf,vis[i]=0;\r\n\t\r\n\tqueue<int> q;\r\n\tq.push(s),dis[s]=0,vis[s]=1;\r\n\twhile (!q.empty()){\r\n\t\tint now=q.front();\r\n\t\tq.pop();\r\n\t\tvis[now]=0;\r\n\t\tfor (int i=head[now];i;i=e[i].nxt){\r\n\t\t\tint y=e[i].to;\r\n\t\t\tif (dis[y]>dis[now]+e[i].d&&e[i].f>0){\r\n\t\t\t\tflow[y]=min(flow[now],e[i].f);\r\n\t\t\t\tdis[y]=dis[now]+e[i].d;\r\n\t\t\t\tpre[y]=now,last[y]=i;\r\n\t\t\t\tif (!vis[y])  q.push(y),vis[y]=1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (dis[t]>=inf)  return false;\r\n\telse return true;\r\n}\r\nsigned main(){\r\n\tn=t=read(),m=read();\r\n\tfor (int i=1;i<=m;i++){\r\n\t\tint x=read(),y=read(),f=read();\r\n\t\tadd_edge(x,y,1,f),add_edge(y,x,0,-f);\r\n\t}\r\n\twhile (SPFA()){\r\n\t\tint now=t;\r\n\t\tmaxflow+=flow[t];\r\n\t\tmincost+=flow[t]*dis[t];\r\n\t\tvec.emplace_back(make_pair(maxflow,mincost));\r\n\t\twhile (now!=s){\r\n\t\t\te[last[now]].f-=flow[t];\r\n\t\t\te[last[now]^1].f+=flow[t];\r\n\t\t\tnow=pre[now];\r\n\t\t}\r\n\t}\r\n\tint q=read();\r\n\twhile (q--){\r\n\t\tint x=read(); double mn=1e18;\r\n\t\tfor (auto t:vec)  mn=min(mn,(double)(t.second+x)/t.first);\r\n\t\tprintf(\"%.10lf\\n\",mn);\r\n\t}\r\n\treturn 0;\r\n}"
}