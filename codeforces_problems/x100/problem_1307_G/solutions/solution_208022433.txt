{
    "id": 208022433,
    "contestId": 1307,
    "creationTimeSeconds": 1685599519,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "earthworm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define debug(fmt, ...) \\\r\n  fprintf(stderr, \"[%d] : \" fmt \"\\n\", __LINE__, ##__VA_ARGS__)\r\nbool Mbe;\r\nusing ll = long long;\r\nconstexpr int N = 55, M = 3e3 + 10;\r\nint n, m, q, k, num[N];\r\nnamespace flow {\r\nstruct edge_t {\r\n  int v, f, w, nxt;\r\n} e[M * 2];\r\nint n, s, t, etot, flow, cost, hd[N], dis[N], pre[N];\r\nbool vis[N];\r\nvoid init(int n, int s, int t) {\r\n  flow::n = n, flow::s = s, flow::t = t, etot = 1;\r\n}\r\nvoid add_edge(int u, int v, int f, int w) {\r\n  e[++etot] = {v, f, w, hd[u]}, hd[u] = etot;\r\n  e[++etot] = {u, 0, -w, hd[v]}, hd[v] = etot;\r\n}\r\nbool spfa() {\r\n  static int que[N];\r\n  int fr = 0, bk = 0;\r\n  fill(dis + 1, dis + n + 1, 1e9);\r\n  que[bk++] = s, dis[s] = 0;\r\n  while (fr != bk) {\r\n    int u = que[fr++];\r\n    vis[u] = 0, fr == N && (fr = 0);\r\n    for (int i = hd[u]; i; i = e[i].nxt)\r\n      if (e[i].f && dis[e[i].v] > dis[u] + e[i].w) {\r\n        pre[e[i].v] = i;\r\n        dis[e[i].v] = dis[u] + e[i].w;\r\n        if (!vis[e[i].v]) que[bk++] = e[i].v, vis[e[i].v] = 1, bk == N && (bk = 0);\r\n      }\r\n  }\r\n  return dis[t] != 1e9;\r\n}\r\nvoid update() {\r\n  ++flow;\r\n  for (int u = t; u != s; u = e[pre[u] ^ 1].v)\r\n    cost += e[pre[u]].w, --e[pre[u]].f, ++e[pre[u] ^ 1].f;\r\n}\r\nbool EK() {\r\n  if (!spfa()) return false;\r\n  return update(), true;\r\n}\r\n} // namespace flow\r\nbool Med;\r\nint main() {\r\n  // debug(\"Mem: %.4lfMB.\", fabs(&Med - &Mbe) / 1048576);\r\n  cin.tie(0)->sync_with_stdio(0);\r\n  cin >> n >> m;\r\n  flow::init(n, 1, n);\r\n  for (int i = 1, u, v, w; i <= m; ++i)\r\n    cin >> u >> v >> w, flow::add_edge(u, v, 1, w);\r\n  while (flow::EK()) ++k, num[k] = flow::cost;\r\n  cin >> q;\r\n  while (q--) {\r\n    int x;\r\n    cin >> x;\r\n    double ans = numeric_limits<double>::max();\r\n    for (int i = 1; i <= k; ++i)\r\n      ans = min(ans, 1.0 * (num[i] + x) / i);\r\n    cout << fixed << setprecision(8) << ans << '\\n';\r\n  }\r\n  return 0;\r\n}//3096934811897596845"
}