{
    "id": 99029946,
    "contestId": 1307,
    "creationTimeSeconds": 1605876119,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "orzdevinwang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(3)\n#pragma GCC target(\"avx,sse2,sse3,sse4,mmx\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n#include<bits/stdc++.h>\n#define L(i, j, k) for(int i = j, i##E = k; i <= i##E; i++)\n#define R(i, j, k) for(int i = j, i##E = k; i >= i##E; i--)\n#define ll long long\n#define db double\n#define pii pair<int, int>\n#define mkp make_pair\n#define db double\nusing namespace std;\nconst int N = 55;\nconst int M = N * N;\nconst int K = 1e5 + 7;\nconst int inf = 1e9 + 7;\nint n, m;\nint head[N], edge_id = 1;\nstruct node {\n\tint to, next, val, w;\n} e[M << 1];\nvoid add_edge(int u, int v, int val, int w) {\n\t++edge_id, e[edge_id].to = v, e[edge_id].val = val, e[edge_id].w = w, e[edge_id].next = head[u], e[edge_id].val = val, head[u] = edge_id;\n}\nvoid add(int u, int v, int val, int w) {\n\tadd_edge(u, v, val, w), add_edge(v, u, 0, -w);\n}\nint dis[N], fdis[N]; bool vis[N];\nint U[M], V[M], W[M];\nbool SPFA() {\n\tdeque<int> q;\n\tfill(dis + 1, dis + n + 1, inf);\n\tq.push_back(1), dis[1] = 0;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop_front();\n\t\tvis[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif(dis[v] > dis[u] + e[i].w && e[i].val) {\n\t\t\t\tdis[v] = dis[u] + e[i].w; \n\t\t\t\tif(!vis[v]) {\n\t\t\t\t\tif(!q.empty() && dis[v] < dis[q.front()]) q.push_front(v);\n                    else q.push_back(v);\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[n] < inf;\n}\nbool fSPFA() {\n\tdeque<int> q;\n\tfill(fdis + 1, fdis + n + 1, inf);\n\tq.push_front(n), fdis[n] = 0;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop_front();\n\t\tvis[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif(fdis[v] > fdis[u] + e[i ^ 1].w && e[i ^ 1].val) {\n\t\t\t\tfdis[v] = fdis[u] + e[i ^ 1].w; \n\t\t\t\tif(!vis[v]) {\n\t\t\t\t\tif(!q.empty() && dis[v] < dis[q.front()]) q.push_front(v);\n                    else q.push_back(v);\n\t\t\t\t\tvis[v] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[n] < inf;\n}\nvoid bfs1() {\n\tqueue<int> q; q.push(1), dis[1] = 0;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tvis[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif(dis[v] > dis[u] + e[i].w && e[i].val) dis[v] = dis[u] + e[i].w, q.push(v), vis[v] = 1;\n\t\t}\n\t}\n}\nvoid bfs2() {\n\tqueue<int> q; q.push(n), fdis[n] = 0;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tvis[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif(fdis[v] > fdis[u] + e[i ^ 1].w && e[i ^ 1].val) fdis[v] = fdis[u] + e[i ^ 1].w, q.push(v);\n\t\t}\n\t}\n}\nint dfs(int x, int flow) {\n\tif(vis[x]) return 0;\n\tif(x == n) return flow;\n\tint now = flow;\n\tvis[x] = 1;\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint v = e[i].to;\n\t\tif(!e[i].val || dis[v] != dis[x] + e[i].w) continue;\n\t\tint fl = dfs(v, min(now, e[i].val));\n\t\tnow -= fl, e[i].val -= fl, e[i ^ 1].val += fl;\n\t}\n\treturn flow - now;\n}\nvoid bfs() {\n\tqueue<int> q; q.push(1), vis[1] = 1;\n\twhile(!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor(int i = head[u]; i; i = e[i].next) {\n\t\t\tint v = e[i].to;\n\t\t\tif(e[i].val && dis[v] == dis[u] + e[i].w && !vis[v]) vis[v] = 1, q.push(v);\n\t\t}\n\t}\n}\ndb pp[K];\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tL(i, 1, m) {\n\t\tint u, v, w; scanf(\"%d%d%d\", &u, &v, &w), U[i] = u, V[i] = v, W[i] = w;\n\t\tadd(u, v, 1, w);\n\t}\n\tSPFA(), fSPFA();\n\tpp[0] = dis[n];\n\tint now = 0;\n\twhile(now <= 1e5) {\n\t\tbfs1(), bfs2();\n\t\tint flow = dfs(1, inf); db k = 1. / flow;\n\t\tL(i, now + 1, min(now + flow, 100000)) pp[i] = pp[i - 1] + k;\n\t\tfill(vis + 1, vis + n + 1, 0);\n\t\tnow = now + flow;\n\t\tbfs();\n\t\tint cnt = 0;\n\t\tL(i, 1, m) \n\t\t\tif(vis[U[i]] == vis[V[i]] || fdis[V[i]] + dis[U[i]] + e[i << 1].w != dis[n]) e[i << 1].val = 1, e[i << 1 | 1].val = 0;\n\t\t\telse W[i] ++, e[i << 1].w ++, e[i << 1 | 1].w --, e[i << 1].val = 1, e[i << 1 | 1].val = 0, ++cnt;\n\t\tfill(vis + 1, vis + n + 1, 0);\n\t\tL(i, 1, n) dis[i] ++, fdis[i] ++;\n\t}\n\tint q; scanf(\"%d\", &q);\n\twhile(q--) {\n\t\tint x; scanf(\"%d\", &x);\n\t\tprintf(\"%.10lf\\n\", pp[x]);\n\t}\n\treturn 0;\n}\n"
}