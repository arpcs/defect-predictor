{
    "id": 187141320,
    "contestId": 1307,
    "creationTimeSeconds": 1672318857,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "joke3579"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 81203200,
    "source": "// LUOGU_RID: 98238086\n#include <bits/stdc++.h>\r\nusing namespace std; \r\n#define rep(i,s,t) for (register int i = (s), i##_ = (t) + 1; i < i##_; ++ i)\r\n#define pre(i,s,t) for (register int i = (s), i##_ = (t) - 1; i > i##_; -- i)\r\nconst int N = 1e6 + 10, inf = 1e9;\r\nint M, s, t, n, m, q, t1, t2, t3, t4;\r\n\r\nint head[2][N], mlc = 1;\r\nstruct ep {\r\n    int to, next, flow, cost;\r\n} e[N << 2];\r\nvoid adde(int u, int v, int fl, int cs, bool __same = false) {\r\n    e[++ mlc] = { v, head[0][u], fl, cs };\r\n    head[0][u] = mlc;\r\n    e[++ mlc] = { u, head[0][v], (__same ? fl : 0), -cs };\r\n    head[0][v] = mlc;\r\n}\r\n\r\nint dis[N]; bool vis[N];\r\nbool spfa(int s, int t) {\r\n    rep(i,1,M) dis[i] = inf, vis[i] = false, head[1][i] = head[0][i];\r\n    queue<int> que;\r\n    dis[s] = 0, vis[s] = 1, que.emplace(s);\r\n    while (que.size()) {\r\n        int u = que.front(); que.pop(); vis[u] = 0;\r\n        for (int i = head[0][u], v, w; i; i = e[i].next) {\r\n            v = e[i].to, w = e[i].cost;\r\n            if (e[i].flow and dis[v] > dis[u] + w) {\r\n                dis[v] = dis[u] + w;\r\n                if (!vis[v]) que.emplace(v), vis[v] = 1;\r\n            }\r\n        }\r\n    } return dis[t] != inf;\r\n}\r\n\r\nint min_cost;\r\nint dfs(int u, int in, int t) {\r\n    if (u == t or in <= 0) return in;\r\n    vis[u] = 1;\r\n    int out = 0;\r\n    for (int i = head[1][u], v, w, res; i and in > 0; i = e[i].next) {\r\n        head[1][u] = i, v = e[i].to, w = e[i].cost;\r\n        if (!vis[v] and e[i].flow and dis[v] == dis[u] + w) {\r\n            res = dfs(v, min(in, e[i].flow), t);\r\n            if (res > 0) {\r\n                e[i].flow -= res, e[i ^ 1].flow += res;\r\n                in -= res, out += res;\r\n                min_cost += res * w;\r\n                if (in <= 0) break;\r\n            }\r\n        }\r\n    } vis[u] = 0;\r\n    return out;\r\n}\r\n\r\nint ans[N];\r\nvoid Dinic(int s, int t) {\r\n    rep(i,1,n) {\r\n        if (!spfa(s, t)) break;\r\n        dfs(s, 1, t); \r\n        ans[i] = min_cost;\r\n    } \r\n}\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(false); cin.tie(0), cout.tie(0);\r\n    cin >> n >> m; M = n, s = 1, t = n;\r\n    cout << setprecision(12) << fixed;\r\n    rep(i,1,m) cin >> t1 >> t2 >> t3, adde(t1, t2, 1, t3);\r\n    Dinic(s, t);\r\n    cin >> q;\r\n    while (q--) {\r\n        cin >> t1;\r\n        double ret = 1e18;\r\n        rep(i,1,n) {\r\n            if (!ans[i]) break;\r\n            ret = min(ret, 1. * (ans[i] + t1) / i);\r\n        } \r\n        cout << ret << '\\n';\r\n    }\r\n}"
}