{
    "id": 106741878,
    "contestId": 1307,
    "creationTimeSeconds": 1612701308,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "Flannery"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "Clang++17 Diagnostics",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 1126400,
    "source": "#include <cstdio>\r\n#include <cstring>\r\n#include <algorithm>\r\n\r\nconst int maxn = 59, maxm = 2509;\r\nint n, m, q, x, fee[maxn], tot;\r\n\r\nstruct Edge{\r\n\tint to, next, c, f;\r\n}edge[maxm << 1];\r\n\r\nint head[maxn], cnt = 1;\r\n\r\ninline void add(int from, int to, int c, int f){\r\n\tedge[++cnt].to = to;\r\n\tedge[cnt].c = c, edge[cnt].f = f;\r\n\tedge[cnt].next = head[from];\r\n\thead[from] = cnt;\r\n}\r\n\r\nint dist[maxn], pre[maxn];\r\nint spfa(void){\r\n\tstatic int q[maxn], h, t; q[h = t = 0] = 1;\r\n\tbool vist[maxn]; memset(vist, 0, (n + 1) * sizeof(bool)), vist[1] = 1;\r\n\tstatic int flow[maxn]; memset(flow, 0, (n + 1) * sizeof(int)), flow[1] = 1e9;\r\n\tmemset(dist, 0x3f, (n + 1) * sizeof(int)), dist[1] = 0;\r\n\twhile(h <= t){\r\n\t\tint node = q[h++];\r\n\t\tfor(int i = head[node]; i; i = edge[i].next)\r\n\t\t\tif(edge[i].c && dist[edge[i].to] > dist[node] + edge[i].f){\r\n\t\t\t\tdist[edge[i].to] = dist[node] + edge[i].f;\r\n\t\t\t\tflow[edge[i].to] = std::min(flow[node], edge[i].c);\r\n\t\t\t\tpre[edge[i].to] = i;\r\n\t\t\t\tif(!vist[edge[i].to]) q[++t] = edge[i].to, vist[edge[i].to] = 1;\r\n\t\t\t}\r\n\t\tvist[node] = 0;\r\n\t}\r\n\treturn flow[n];\r\n}\r\n\r\nint main(){\r\n\tscanf(\"%d%d\", &n, &m);\r\n\tfor(int i = 1, u, v, w; i <= m; ++i){\r\n\t\tscanf(\"%d%d%d\", &u, &v, &w);\r\n\t\tadd(u, v, 1, w), add(v, u, 0, -w);\r\n\t}\r\n\twhile(spfa()){\r\n\t\t++tot;\r\n\t\tfee[tot] = fee[tot - 1] + dist[n];\r\n\t\tfor(int i = n; i != 1; i = edge[pre[i] ^ 1].to) --edge[pre[i]].c, ++edge[pre[i] ^ 1].c;\r\n\t}\r\n\tscanf(\"%d\", &q);\r\n\twhile(q--){\r\n\t\tscanf(\"%d\", &x);\r\n\t\tdouble ans = 1e9;\r\n\t\tfor(int i = 1; i <= tot; ++i) ans = std::min(ans, double(fee[i] + x) / i);\r\n\t\tprintf(\"%.8f\\n\", ans);\r\n\t}\r\n}"
}