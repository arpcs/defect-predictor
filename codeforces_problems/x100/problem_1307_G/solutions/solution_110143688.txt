{
    "id": 110143688,
    "contestId": 1307,
    "creationTimeSeconds": 1615959755,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "linmuhan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 3584000,
    "source": "//Edmonds-Karp Maxflow\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int INF = 1 << 29, N = 20010, M = 200010;\r\nint head[N], ver[M], edge[M], nxt[M], v[N], incf[N], pre[N], cst[M];\r\nint n, m, sp, tp, tot;\r\nvoid add (int x, int y, int z, int c) {\r\n\tver[++ tot] = y, edge[tot] = z, nxt[tot] = head[x], head[x] = tot; cst[tot] = c;\r\n\tver[++ tot] = x, edge[tot] = 0, nxt[tot] = head[y], head[y] = tot; cst[tot] = -c;\r\n}\r\n\r\nint d[N];\r\nbool vis[N];\r\nqueue <int> q;\r\n\r\n\r\nvector <pair <int, int> > FFF;\r\n\r\n\r\n// \u5b66\u4e60 EK \u8d39\u7528\u6d41\r\n\r\n//int pre[N];\r\n\r\nint flow, cost;\r\nlong long spfa () {\r\n\tfor (int i=1;i<=n;i++) d[i] = INF, vis[i] = false;\r\n\tq.push (sp); vis[sp] = true; d[sp] = 0;\r\n\twhile (! q.empty ()) {\r\n\t\tint u = q.front (); q.pop (); vis[u] = false;\r\n\t\tfor (int i=head[u];i!=-1;i=nxt[i]) {\r\n\t\t\tint v = ver[i];\r\n            //cout << i << endl;\r\n\t\t\tif (d[v] > d[u] + cst[i] && edge[i]) {\r\n\t\t\t\tpre[v] = i;\r\n\t\t\t\td[v] = d[u] + cst[i];\r\n\t\t\t\tif (! vis[v]) {\r\n\t\t\t\t\tvis[v] = true;\r\n\t\t\t\t\tq.push (v);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    //cout << \"hello\" << endl;\r\n\treturn d[tp] != INF;\r\n}\r\n\r\nvoid EK () {\r\n\twhile (spfa ()) {\r\n\t\tint flw = INF;\r\n\t\tfor (int i=tp;i!=sp;i=ver[pre[i]^1]) flw = min (flw, edge[pre[i]]);\r\n\t\tflow += flw;\r\n\t\tcost += d[tp] * flw;\r\n\t\tfor (int i=tp;i!=sp;i=ver[pre[i]^1]) edge[pre[i]] -= flw, edge[pre[i] ^ 1] += flw;\r\n\t\tFFF.push_back (make_pair (flow, cost));\r\n\t}\r\n}\r\n\r\nint QQ;\r\n\r\nint main () {\r\n\tmemset (head, -1, sizeof head);\r\n\tscanf (\"%d %d\", &n, &m);\r\n\ttot = 1;\r\n\tint x, y, c;\r\n\tfor (int i=1;i<=m;i++) {\r\n\t\tscanf (\"%d %d %d\", &x, &y, &c);\r\n\t\tadd (x, y, 1, c);\r\n\t}\r\n\t\r\n\tsp = 1; tp = n;\r\n\tEK ();\r\n    //cout << \"hello\" << endl;\r\n\tscanf (\"%d\", &QQ);\r\n\twhile (QQ --) {\r\n\t\tscanf (\"%d\", &c);\r\n\t\tlong double res = 1.0 * INF;\r\n\t\tfor (unsigned int dii=0;dii<FFF.size();dii++) res = min (res, (long double) (FFF[dii].second + 1.0 * c) / (long double) (FFF[dii].first));\r\n\t\tprintf (\"%.10Lf\\n\", res);\r\n\t}\r\n}"
}