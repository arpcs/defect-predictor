{
    "id": 107156746,
    "contestId": 1307,
    "creationTimeSeconds": 1613090704,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "lhm_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\r\n#define maxn 5010\r\n#define inf 1000000000\r\nusing namespace std;\r\ntemplate<typename T> inline void read(T &x)\r\n{\r\n    x=0;char c=getchar();bool flag=false;\r\n    while(!isdigit(c)){if(c=='-')flag=true;c=getchar();}\r\n    while(isdigit(c)){x=(x<<1)+(x<<3)+(c^48);c=getchar();}\r\n    if(flag)x=-x;\r\n}\r\nint n,m,q;\r\nint dis[maxn];\r\nbool vis[maxn];\r\nvector<pair<int,int> > ve;\r\nstruct edge\r\n{\r\n    int to,nxt,v,c;\r\n    edge(int x=0,int y=0,int z=0,int w=0)\r\n    {\r\n        to=x,nxt=y,v=z,c=w;\r\n    }\r\n}e[maxn];\r\nint head[maxn],edge_cnt=1;\r\nvoid add(int from,int to,int val,int cost)\r\n{\r\n    e[++edge_cnt]=edge(to,head[from],val,cost),head[from]=edge_cnt;\r\n    e[++edge_cnt]=edge(from,head[to],0,-cost),head[to]=edge_cnt;\r\n}\r\nbool spfa()\r\n{\r\n    for(int i=1;i<=n;++i) vis[i]=false,dis[i]=inf;\r\n    queue<int> q;\r\n    q.push(1),vis[1]=true,dis[1]=0;\r\n    while(!q.empty())\r\n    {\r\n        int x=q.front();\r\n        q.pop(),vis[x]=false;\r\n        for(int i=head[x];i;i=e[i].nxt)\r\n        {\r\n            int y=e[i].to,c=e[i].c;\r\n            if(dis[y]<=dis[x]+c||!e[i].v) continue;\r\n            dis[y]=dis[x]+c;\r\n            if(!vis[y]) q.push(y),vis[y]=true;\r\n        }\r\n    }\r\n    return dis[n]!=inf;\r\n}\r\nint dfs(int x,int lim)\r\n{\r\n    if(x==n) return lim;\r\n    vis[x]=true;\r\n    int res=lim,flow;\r\n    for(int i=head[x];i;i=e[i].nxt)\r\n    {\r\n        int y=e[i].to,v=e[i].v;\r\n        if(dis[y]!=dis[x]+e[i].c||vis[y]||!v) continue;\r\n        if(flow=dfs(y,min(res,v)))\r\n        {\r\n            res-=flow,e[i].v-=flow,e[i^1].v+=flow;\r\n            if(!res) break;\r\n        }\r\n    }\r\n    return lim-res;\r\n}\r\nvoid dinic()\r\n{\r\n    int flow,v=0,s=0;\r\n    while(spfa())\r\n        while(flow=dfs(1,inf))\r\n            v+=flow,s+=flow*dis[n],ve.push_back(make_pair(v,s));\r\n}\r\nint main()\r\n{\r\n    read(n),read(m);\r\n    for(int i=1;i<=m;++i)\r\n    {\r\n        int x,y,v;\r\n        read(x),read(y),read(v),add(x,y,1,v);\r\n    }\r\n    dinic(),read(q);\r\n    while(q--)\r\n    {\r\n        int x;\r\n        double v=inf;\r\n        read(x);\r\n        for(int i=0;i<ve.size();++i)\r\n            v=min(v,(double)(x+ve[i].second)/ve[i].first);\r\n        printf(\"%.10lf\\n\",v);\r\n    }\r\n    return 0;\r\n}"
}