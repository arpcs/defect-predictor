{
    "id": 81575196,
    "contestId": 1307,
    "creationTimeSeconds": 1590548152,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "tyler178"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\n#define mset(a, b) memset(a, b, sizeof(a))\r\n#define mcpy(a, b) memcpy(a, b, sizeof(a))\r\nusing namespace std;\r\ntypedef long long LL;\r\nconst int N = 55;\r\nconst int INF = 0x3f3f3f3f;\r\n\r\ntemplate <typename T> inline void read(T &AKNOI) {\r\n\tT x = 0, flag = 1;\r\n\tchar ch = getchar();\r\n\twhile (!isdigit(ch)) {\r\n\t\tif (ch == '-') flag = -1;\r\n\t\tch = getchar();\r\n\t}\r\n\twhile (isdigit(ch)) {\r\n\t\tx = x * 10 + ch - '0';\r\n\t\tch = getchar();\r\n\t}\r\n\tAKNOI = flag * x;\r\n}\r\n\r\nint n, m, Q, f, sum[N];\r\n\r\nstruct Edge {\r\n\tint v, w, c, nxt;\r\n} e[N * N * 2];\r\nint first[N], eCnt;\r\n\r\ninline void AddEdge(int u, int v, int w, int c) {\r\n\te[++eCnt].v = v;\r\n\te[eCnt].w = w;\r\n\te[eCnt].c = c;\r\n\te[eCnt].nxt = first[u];\r\n\tfirst[u] = eCnt;\r\n}\r\n\r\ninline void Add(int u, int v, int w, int c) {\r\n\tAddEdge(u, v, w, c);\r\n\tAddEdge(v, u, 0, -c);\r\n}\r\n\r\nint dis[N], inq[N], pre[N];\r\nqueue<int> q;\r\n\r\nbool SPFA() {\r\n\tmset(dis, 0x3f);\r\n\tdis[1] = 0;\r\n\tq.push(1);\r\n\twhile (!q.empty()) {\r\n\t\tint u = q.front();\r\n\t\tq.pop(); inq[u] = 0;\r\n\t\tfor (int i = first[u]; i; i = e[i].nxt) {\r\n\t\t\tint v = e[i].v;\r\n\t\t\tif (e[i].w && dis[v] > dis[u] + e[i].c) {\r\n\t\t\t\tdis[v] = dis[u] + e[i].c;\r\n\t\t\t\tpre[v] = i;\r\n\t\t\t\tif (!inq[v]) {\r\n\t\t\t\t\tq.push(v);\r\n\t\t\t\t\tinq[v] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn dis[n] < INF;\r\n}\r\n\r\nint Augment() {\r\n\tfor (int i = pre[n]; i; i = pre[e[i ^ 1].v]) {\r\n\t\te[i].w -= 1;\r\n\t\te[i ^ 1].w += 1;\r\n\t}\r\n\treturn dis[n];\r\n}\r\n\r\nvoid init() {\r\n\tread(n); read(m);\r\n\teCnt = 1;\r\n\tfor (int i = 1, u, v, w; i <= m; ++i) {\r\n\t\tread(u); read(v); read(w);\r\n\t\tAdd(u, v, 1, w);\r\n\t}\r\n}\r\n\r\nvoid solve() {\r\n\twhile (SPFA()) {\r\n\t\tsum[++f] = Augment();\r\n\t\tsum[f] += sum[f - 1];\r\n\t}\r\n\tread(Q);\r\n\twhile (Q--) {\r\n\t\tint x; read(x);\r\n\t\tdouble ans = INF;\r\n\t\tfor (int i = 1; i <= f; ++i) {\r\n\t\t\tans = min(ans, 1.0 * (x + sum[i]) / i);\r\n\t\t}\r\n\t\tprintf(\"%.10lf\\n\", ans);\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tinit();\r\n\tsolve();\r\n\treturn 0;\r\n}\r\n"
}