{
    "id": 139421947,
    "contestId": 1307,
    "creationTimeSeconds": 1639592259,
    "relativeTimeSeconds": 2859,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "ProWizard84"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1639589400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1126400,
    "source": "#include <bits/stdc++.h>\r\n#define N\t50\r\n#define M\t(N * (N - 1))\r\n#define M_\t(M * 3)\r\n#define X\t100000\r\n#define INF\t0x3f3f3f3f\r\nint min(int a, int b) { return a < b ? a : b; }\r\nint oo[1 + M * 2], oh[1 + M * 2];\r\nint link(int o, int h) {\r\n\tstatic int _ = 1;\r\n\too[_] = o, oh[_] = h;\r\n\treturn _++;\r\n}\r\nint oo_[1 + M_ * 2], oh_[1 + M_ * 2], __;\r\nint link_(int o, int h) {\r\n\too_[__] = o, oh_[__] = h;\r\n\treturn __++;\r\n}\r\nint ae[N], ae_[N], dd[N], n;\r\nint ii[M], jj[M], ww[M]; char tt[M]; int ij[M_], cc[M_ * 2], m_;\r\nint pq[1 + N], iq[N], cnt;\r\nint less(int u, int v) { return dd[u] < dd[v]; }\r\nint i2(int i) {\r\n\treturn (i *= 2) > cnt ? 0 : i < cnt && less(pq[i + 1], pq[i]) ? i + 1 : i;\r\n}\r\nvoid pq_up(int u) {\r\n\tint i, j, v;\r\n\tfor (i = iq[u]; (j = i / 2) && less(u, v = pq[j]); i = j)\r\n\t\tpq[iq[v] = i] = v;\r\n\tpq[iq[u] = i] = u;\r\n}\r\nvoid pq_dn(int u) {\r\n\tint i, j, v;\r\n\tfor (i = iq[u]; (j = i2(i)) && less(v = pq[j], u); i = j)\r\n\t\tpq[iq[v] = i] = v;\r\n\tpq[iq[u] = i] = u;\r\n}\r\nvoid pq_add_last(int u) {\r\n\tpq[iq[u] = ++cnt] = u;\r\n}\r\nint pq_remove_first() {\r\n\tint u = pq[1], v = pq[cnt--];\r\n\tif (v != u)\r\n\t\tiq[v] = 1, pq_dn(v);\r\n\tiq[u] = 0;\r\n\treturn u;\r\n}\r\nvoid dijkstra(int n, int s) {\r\n\tmemset(dd, 0x3f, n * sizeof *dd);\r\n\tdd[s] = 0, pq_add_last(s);\r\n\twhile (cnt) {\r\n\t\tint i = pq_remove_first(), o;\r\n\t\tfor (o = ae[i]; o; o = oo[o]) {\r\n\t\t\tint h = oh[o];\r\n\t\t\tif (!tt[h]) {\r\n\t\t\t\tint j = jj[h], d = dd[i] + ww[h];\r\n\t\t\t\tif (dd[j] > d) {\r\n\t\t\t\t\tif (dd[j] == INF)\r\n\t\t\t\t\t\tpq_add_last(j);\r\n\t\t\t\t\tdd[j] = d, pq_up(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nvoid link2(int i, int j, int c) {\r\n\tint h = m_++;\r\n\tij[h] = i ^ j, cc[h << 1] = c, cc[h << 1 | 1] = 0;\r\n\tae_[i] = link_(ae_[i], h << 1);\r\n\tae_[j] = link_(ae_[j], h << 1 | 1);\r\n}\r\nint bfs(int s, int t) {\r\n\tstatic int qu[N];\r\n\tint i, head, cnt;\r\n\tfor (i = 0; i < n; i++)\r\n\t\tdd[i] = n;\r\n\thead = cnt = 0;\r\n\tdd[s] = 0, qu[head + cnt++] = s;\r\n\twhile (cnt) {\r\n\t\tint d, o;\r\n\t\ti = qu[cnt--, head++], d = dd[i] + 1;\r\n\t\tfor (o = ae_[i]; o; o = oo_[o]) {\r\n\t\t\tint h_ = oh_[o];\r\n\t\t\tif (cc[h_]) {\r\n\t\t\t\tint h = h_ >> 1, j = i ^ ij[h];\r\n\t\t\t\tif (dd[j] > d) {\r\n\t\t\t\t\tdd[j] = d;\r\n\t\t\t\t\tif (j == t)\r\n\t\t\t\t\t\treturn 1;\r\n\t\t\t\t\tqu[head + cnt++] = j;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\nint dfs(int i, int t) {\r\n\tint d, o;\r\n\tif (i == t)\r\n\t\treturn 1;\r\n\td = dd[i] + 1;\r\n\tfor (o = ae_[i]; o; o = oo_[o]) {\r\n\t\tint h_ = oh_[o];\r\n\t\tif (cc[h_]) {\r\n\t\t\tint h = h_ >> 1, j = i ^ ij[h];\r\n\t\t\tif (dd[j] == d && dfs(j, t)) {\r\n\t\t\t\tcc[h_]--, cc[h_ ^ 1]++;\r\n\t\t\t\treturn 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tdd[i] = n;\r\n\treturn 0;\r\n}\r\nvoid dinic(int s, int t) {\r\n\twhile (bfs(s, t))\r\n\t\twhile (dfs(s, t))\r\n\t\t\t;\r\n}\r\nint main() {\r\n\tstatic double ans[X + 1];\r\n\tstatic int dd1[N], dd2[N], xx[M];\r\n\tint m, q, h, x;\r\n\tscanf(\"%d%d\", &n, &m);\r\n\tx = 0;\r\n\twhile (x < X) {\r\n\t\tint k, y, z, d, d_;\r\n\t\tmemset(tt, 0, m * sizeof *tt);\r\n\t\tdijkstra(n, 0);\r\n\t\tmemcpy(dd1, dd, n * sizeof *dd);\r\n\t\td = dd1[n - 1];\r\n\t\tmemset(ae_, 0, n * sizeof *ae_), __ = 1, m_ = 0;\r\n\t\tfor (h = 0; h < m; h++) {\r\n\t\t\tint i = ii[h], j = jj[h], w = ww[h];\r\n\r\n\t\t\tif (dd1[i] + w == dd1[j]) {\r\n\t\t\t\ttt[h] = 1;\r\n\t\t\t\tlink2(0, j, 1), link2(i, n - 1, 1);\r\n\t\t\t\tif (xx[h] == 0)\r\n\t\t\t\t\tlink2(j, i, 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tdinic(0, n - 1);\r\n\t\td_ = INF;\r\n\t\tk = 0;\r\n\t\tfor (h = 0; h < m; h++) {\r\n\t\t\tint i = ii[h], j = jj[h];\r\n\r\n\t\t\tif (tt[h]) {\r\n\t\t\t\tif ((dd[i] == n) == (dd[j] == n))\r\n\t\t\t\t\ttt[h] = 0;\r\n\t\t\t\telse if (dd[i] != n) {\r\n\t\t\t\t\ttt[h] = 1;\r\n\t\t\t\t\tk++;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (xx[h] > 0) {\r\n\t\t\t\t\t\ttt[h] = 2;\r\n\t\t\t\t\t\tk--;\r\n\t\t\t\t\t\td_ = min(d_, d + xx[h]);\r\n\t\t\t\t\t} else\r\n\t\t\t\t\t\ttt[h] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tdijkstra(n, 0);\r\n\t\tmemcpy(dd2, dd, n * sizeof *dd);\r\n\t\td_ = min(d_, dd2[n - 1]);\r\n\t\tfor (h = 0; h < m; h++)\r\n\t\t\tif (tt[h] == 2)\r\n\t\t\t\td_ = min(d_, d + dd2[ii[h]] + ww[h] - dd1[jj[h]]);\r\n\t\ty = d_ - d <= (X - x) / k ? x + (d_ - d) * k : X;\r\n\t\tfor (z = x; z <= y; z++)\r\n\t\t\tans[z] = d + (double) (z - x) / k;\r\n\t\tx = y;\r\n\t}\r\n\tscanf(\"%d\", &q);\r\n\twhile (q--) {\r\n\t\tscanf(\"%d\", &x);\r\n\t\tprintf(\"%f\\n\", ans[x]);\r\n\t}\r\n\treturn 0;\r\n}"
}