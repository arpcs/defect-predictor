{
    "id": 97610981,
    "contestId": 1307,
    "creationTimeSeconds": 1604472780,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "goatzyq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 409600,
    "source": "\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing pii = pair<int, int>;\nusing db = double;\nusing vi = vector<int>;\n#define rep(i,a,n) for (int i=a;i<n;i++)\n#define per(i,a,n) for (int i=n-1;i>=a;i--)\n#define pb push_back\n#define mp make_pair\n#define all(x) (x).begin(),(x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\n#define debug(x) cout << #x <<\"\t\"<< x <<endl\nconst int inf = 0x3f3f3f3f;\nconst db eps = 1e-8;\nconst int mod = 1e9+7;\nll qpow(ll a, ll b){\n    ll ret = 1;\n    while(b){\n        if(b&1)ret = ret*a%mod;\n        a = a*a%mod;\n        b>>=1;\n    }\n    return ret;\n}\nconst int maxn = 1e5+7;\nusing i64 = long long;\nconst int MAXN = 50;\nconst int INF = 0x3f3f3f3f;\n \nstruct Edge {\n    int from, to, cap, flow, cost;\n    Edge(int u, int v, int c, int f, int w)\n        : from(u), to(v), cap(c), flow(f), cost(w) {}\n};\nstruct MCMF {\n    int n, m;\n    std::vector<Edge> edges;\n    std::vector<int> G[MAXN];\n    int inq[MAXN];\n    int d[MAXN];\n    int p[MAXN];\n    int a[MAXN];\n    void init(int n) {\n        this->n = n;\n        for (int i = 0; i < n; i++) G[i].clear();\n        edges.clear();\n    }\n    void AddEdge(int from, int to, int cap, int cost) {\n        edges.emplace_back(from, to, cap, 0, cost);\n        edges.emplace_back(to, from, 0, 0, -cost);\n        m = edges.size();\n        G[from].push_back(m - 2);\n        G[to].push_back(m - 1);\n    }\n    bool BellmanFord(int s, int t, int& flow, i64& cost) {\n        std::fill(d, d + n, INF);\n        std::fill(inq, inq + n, false);\n        d[s] = 0;\n        inq[s] = 1;\n        p[s] = 0;\n        a[s] = INF;\n        std::queue<int> q;\n        q.push(s);\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            inq[u] = 0;\n            for (int i = 0; i < G[u].size(); i++) {\n                Edge& e = edges[G[u][i]];\n                if (e.cap > e.flow && d[e.to] > d[u] + e.cost) {\n                    d[e.to] = d[u] + e.cost;\n                    p[e.to] = G[u][i];\n                    a[e.to] = std::min(a[u], e.cap - e.flow);\n                    if (!inq[e.to]) {\n                        q.push(e.to);\n                        inq[e.to] = 1;\n                    }\n                }\n            }\n        }\n        if (d[t] == INF) return false;\n        flow += a[t];\n        cost += (i64)d[t] * (i64)a[t];\n        path.emplace_back(a[t],d[t]);\n        for (int u = t; u != s; u = edges[p[u]].from) {\n            edges[p[u]].flow += a[t];\n            edges[p[u] ^ 1].flow -= a[t];\n        }\n        return true;\n    }\n    int MincostMaxflow(int s, int t, i64& cost) {\n        int flow = 0;\n        cost = 0;\n        while (BellmanFord(s, t, flow, cost))\n            ;\n        return flow;\n    }\n \n \n    std::vector<std::pair<int, int>> path;\n \n    void query(int p) {\n        int csum = 0, fsum = 0;\n        double ans = INF;\n        for (auto& [f, d] : path) {\n            if (ans < d) break;\n            csum += f * d;\n            fsum += f;\n            ans = (p + csum) * 1.0 / fsum;\n        }\n        printf(\"%.12f\\n\", ans);\n    }\n} solver;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n\tint n, m;\n\tcin >> n >> m;\n\tint s = 0, t = n-1;\n\tsolver.init(n);\n\tfor(int i=0, u, v, d; i<m; ++i){\n\t\tcin >> u >> v >> d;\n\t\t--u, --v;\n\t\tsolver.AddEdge(u, v, 1, d);\n\t}\n\tll cost;\n\tsolver.MincostMaxflow(s, t, cost);\n\tint q;\n\tcin >> q;\n\tfor(int i=0, p; i<q; ++i){\n\t\tcin >> p;\n\t\tsolver.query(p);\n\t}\n\n\n    return 0;\n}\n\n\n"
}