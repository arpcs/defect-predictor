{
    "id": 146733706,
    "contestId": 1307,
    "creationTimeSeconds": 1645101355,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "xuziyuan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 614400,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define rep(i,n) for(int i=0;i<n;++i)\r\n#define repn(i,n) for(int i=1;i<=n;++i)\r\n#define LL long long\r\n#define pii pair <int,int>\r\n#define pb push_back\r\n#define fi first\r\n#define se second\r\n#define mpr make_pair\r\n\r\nusing namespace std;\r\n\r\nvector <pii> v;\r\n\r\nstruct edge\r\n{\r\n\tint to,flow,cost,rev;\r\n\tedge(int a,int b,int c,int d):to(a),flow(b),cost(c),rev(d){}\r\n};\r\nnamespace minCostFlow\r\n{\r\n\tvector <edge> g[10010];\r\n\tint n,dist[10010],cur[10010];\r\n  bool inq[10010],vis[10010];\r\n\tqueue <int> q;\r\n\tvoid add_edge(int x,int y,int flow,int cost)\r\n\t{\r\n\t\tg[x].pb(edge(y,flow,cost,(int)g[y].size()));\r\n\t\tg[y].pb(edge(x,0,-cost,(int)g[x].size()-1));\r\n\t}\r\n  bool relax(int to,int fr,int e)\r\n  {\r\n    if(dist[to]>dist[fr]+e)\r\n    {\r\n      dist[to]=dist[fr]+e;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  bool spfa(int s,int t)\r\n  {\r\n    rep(i,n+3) dist[i]=1e9;\r\n    dist[s]=0;inq[s]=true;q.push(s);\r\n    while(!q.empty())\r\n    {\r\n      int p=q.front();q.pop();inq[p]=false;\r\n      rep(i,g[p].size()) if(g[p][i].flow>0)\r\n      {\r\n        if(relax(g[p][i].to,p,g[p][i].cost)&& !inq[g[p][i].to])\r\n        {\r\n          inq[g[p][i].to]=true;\r\n          q.push(g[p][i].to);\r\n        }\r\n      }\r\n    }\r\n    return dist[t]<1e9;\r\n  }\r\n  pii dfs(int pos,int t,int fl)\r\n  {\r\n    if(pos==t) return mpr(fl,0);\r\n    vis[pos]=true;\r\n    for(int i=cur[pos];i<g[pos].size();++i,++cur[pos]) if(!vis[g[pos][i].to]&&g[pos][i].flow>0&&dist[g[pos][i].to]==dist[pos]+g[pos][i].cost)\r\n    {\r\n      pii res=dfs(g[pos][i].to,t,min(fl,g[pos][i].flow));\r\n      if(res.fi>0)\r\n      {\r\n        res.se+=g[pos][i].cost*res.fi;\r\n        g[pos][i].flow-=res.fi;g[g[pos][i].to][g[pos][i].rev].flow+=res.fi;\r\n        vis[pos]=false;\r\n        return res;\r\n      }\r\n    }\r\n    vis[pos]=false;\r\n    return mpr(0,0);\r\n  }\r\n  pii mcmf(int s,int t)\r\n  {\r\n    pii ret=mpr(0,0);\r\n    while(spfa(s,t))\r\n    {\r\n      rep(i,n+3) cur[i]=0;\r\n      while(true)\r\n      {\r\n        pii val=dfs(s,t,1e9);\r\n        if(val.fi==0) break;\r\n        ret.fi+=val.fi;ret.se+=val.se;\r\n        v.pb(ret);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n}\r\n\r\nint n,m,q;\r\n\r\ndouble calc(int mid,int x){return (double)(v[mid].se+x)/(double)v[mid].fi;}\r\n\r\nint main()\r\n{\r\n  cin>>n>>m;\r\n  int x,y,z;\r\n  rep(i,m)\r\n  {\r\n    scanf(\"%d%d%d\",&x,&y,&z);\r\n    minCostFlow::add_edge(x,y,1,z);\r\n  }\r\n  minCostFlow::n=n;\r\n  minCostFlow::mcmf(1,n);\r\n  cin>>q;\r\n  rep(qn,q)\r\n  {\r\n    scanf(\"%d\",&x);\r\n    int lb=0,ub=v.size()-1;\r\n    while(ub-lb>5)\r\n    {\r\n      int d=(ub-lb)/3,mid=lb+d,mid2=ub-d;\r\n      if(calc(mid2,x)<=calc(mid,x)) lb=mid;\r\n      else ub=mid2;\r\n    }\r\n    double ans=1e18;\r\n    for(int i=lb;i<=ub;++i) ans=min(ans,calc(i,x));\r\n    printf(\"%.10lf\\n\",ans);\r\n  }\r\n  return 0;\r\n}"
}