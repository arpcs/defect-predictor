{
    "id": 122547612,
    "contestId": 1307,
    "creationTimeSeconds": 1626324876,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "RisingWizard"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 499,
    "memoryConsumedBytes": 3891200,
    "source": "//Petrozavodsk Winter-2016. JAG Contest <3\r\n#include <cmath>\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <string>\r\n#include <set>\r\n#include <map>\r\n#include <list>\r\n#include <time.h>\r\n#include <math.h>\r\n#include <random>\r\n#include <deque>\r\n#include <queue>\r\n#include <cassert>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#include <iomanip>\r\n#include <bitset>\r\n#include <sstream>\r\n#include <chrono>\r\n#include <cstring>\r\n\r\n#include <stdlib.h>\r\n#include<queue>\r\n#include<vector>\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<iostream>\r\n#include<algorithm>\r\nusing namespace std;\r\n\r\nconst int N = 205, M = 3005 << 1;\r\n\r\nint n, m, p, s, t;\r\n\r\nint top, head[N], to[M], nxt[M], c[M], l[M];\r\n\r\nvoid\r\naddedge (int u, int v, int cap, int len)\r\n{\r\n  to[top] = v, nxt[top] = head[u], c[top] = cap, l[top] = len, head[u] =\r\n    top++;\r\n}\r\n\r\nvector < pair < int, int >>paths;\r\n\r\nint dis[N], fa[N];\r\n\r\nbool inque[N];\r\n\r\nconst int INF = 1000000000;\r\n\r\nbool\r\ngo (int source, int target)\r\n{\r\n  for (int i = 0; i < n; ++i)\r\n    {\r\n      dis[i] = INF;\r\n    }\r\n  dis[source] = 0;\r\n  inque[source] = true;\r\n  queue < int >q;\r\n  q.push (source);\r\n  while (q.size ())\r\n    {\r\n      int u = q.front ();\r\n      inque[u] = false;\r\n      q.pop ();\r\n      for (int i = head[u]; ~i; i = nxt[i])\r\n\t{\r\n\t  if (c[i])\r\n\t    {\r\n\t      int v = to[i], nd = dis[u] + l[i];\r\n\t      if (dis[v] > nd)\r\n\t\t{\r\n\t\t  dis[v] = nd;\r\n\t\t  fa[v] = i;\r\n\t\t  if (!inque[v])\r\n\t\t    {\r\n\t\t      inque[v] = true;\r\n\t\t      q.push (v);\r\n\t\t    }\r\n\t\t}\r\n\t    }\r\n\t}\r\n    }\r\n  if (dis[target] == INF)\r\n    {\r\n      return false;\r\n    }\r\n  int f = INF;\r\n  int u = target;\r\n  while (u != source)\r\n    {\r\n      int e = fa[u];\r\n      f = min (f, c[e]);\r\n      u = to[e ^ 1];\r\n    }\r\n  paths.push_back (make_pair (f, dis[target]));\r\n  u = target;\r\n  while (u != source)\r\n    {\r\n      int e = fa[u];\r\n      c[e] -= f, c[e ^ 1] += f;\r\n      u = to[e ^ 1];\r\n    }\r\n  return true;\r\n}\r\n\r\nint main ()\r\n{\r\n#ifdef iq\r\n  freopen(\"a.in\", \"r\", stdin);\r\n#endif\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  cin >> n >> m;\r\n  s = 1, t = n;\r\n  --s, --t;\r\n  top = 0;\r\n  memset (head, -1, sizeof (head));\r\n  for (int i = 0; i < m; ++i)\r\n    {\r\n      int u, v, w;\r\n      cin >> u >> v >> w;\r\n      --u, --v;\r\n      addedge (u, v, 1, w);\r\n      addedge (v, u, 0, -w);\r\n    }\r\n  while (go (s, t))\r\n    {\r\n      continue;\r\n    }\r\n  int q;\r\n  cin >> q;\r\n  while (q--) {\r\n    int p;\r\n    cin >> p;\r\n    int csum = 0, fsum = 0;\r\n    for (int i = 0; i < (int) paths.size (); ++i)\r\n      {\r\n        csum += paths[i].first * paths[i].second;\r\n        fsum += paths[i].first;\r\n        double ans = (double) (p + csum) / fsum;\r\n        if (i + 1 == paths.size () || ans < paths[i + 1].second)\r\n        {\r\n          cout << fixed << setprecision(20) << ans << endl;\r\n          break;\r\n        }\r\n      }\r\n  }\r\n  return 0;\r\n}\r\n\r\n"
}