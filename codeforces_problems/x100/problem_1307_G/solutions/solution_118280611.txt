{
    "id": 118280611,
    "contestId": 1307,
    "creationTimeSeconds": 1622724984,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "OInfly"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nvoid read (int &x) {\r\n    char ch = getchar(); x = 0; while (!isdigit(ch)) ch = getchar();\r\n    while (isdigit(ch)) x = x * 10 + ch - 48, ch = getchar();\r\n} const int N = 55, M = N * 10;\r\nint n, m;\r\nint c = 1, h[N], nxt[M], to[M], w[M], o[M];\r\nvoid add (int u, int v, int val) {\r\n    to[++c] = v, w[c] = val, o[c] = 1, nxt[c] = h[u], h[u] = c;\r\n    to[++c] = u, w[c] = -val, o[c] = 0, nxt[c] = h[v], h[v] = c;\r\n}\r\nint d[N], in[N], p[N]; queue<int> q;\r\nint bfs () {\r\n    memset (d, 0x3f, sizeof (d));\r\n    d[1] = 0, in[1] = 1, q.push (1);\r\n    while (!q.empty()) {\r\n        int u = q.front(); q.pop(); in[u] = 0;\r\n        for (int i = h[u], v; i; i = nxt[i])\r\n            if (o[i] && d[v = to[i]] > d[u] + w[i]) {\r\n                d[v] = d[u] + w[i], p[v] = i;\r\n                if (!in[v]) in[v] = 1, q.push (v);\r\n            }\r\n    }\r\n    return d[n] < 1e9;\r\n}\r\nint flow, cost;\r\nstruct qaq { int x, y; } ; vector<qaq> qwq;\r\nvoid work () {\r\n    while (bfs ()) {\r\n        int mn = 1e9;\r\n        for (int i = n; i != 1; i = to[p[i] ^ 1])\r\n            mn = min (mn, o[p[i]]);\r\n        flow += mn, cost += d[n] * mn;\r\n        for (int i = n; i != 1; i = to[p[i] ^ 1])\r\n            o[p[i]] -= mn, o[p[i] ^ 1] += mn;\r\n        qwq.push_back ({flow, cost});\r\n    }\r\n}\r\nsigned main() {\r\n    read (n), read (m);\r\n    for (int i = 1, u, v, w; i <= m; ++i)\r\n        read (u), read (v), read (w), add (u, v, w);\r\n    work (); int q; read (q);\r\n    for (int i = 1, x; i <= q; ++i) {\r\n        read (x); double res = 1e18;\r\n        for (qaq j : qwq) res = min (res, double (j.y + x) / j.x);\r\n        printf (\"%.10lf\\n\", res);\r\n    }\r\n    return 0;\r\n}\r\n"
}