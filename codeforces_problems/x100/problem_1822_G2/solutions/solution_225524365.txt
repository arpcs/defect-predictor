{
    "id": 225524365,
    "contestId": 1822,
    "creationTimeSeconds": 1695823113,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "tempid."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 2792,
    "memoryConsumedBytes": 9830400,
    "source": "// Problem: G1. Magic Triples (Easy Version)\r\n// Contest: Codeforces - Codeforces Round 867 (Div. 3)\r\n// URL: https://codeforces.com/problemset/problem/1822/G1\r\n// Memory Limit: 256 MB\r\n// Time Limit: 4000 ms\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\ntypedef long long LL;\r\ntypedef pair<int, int> PII;\r\ntypedef pair<double, double> PDD;\r\n\r\nbool multi = 1;\r\n\r\nconst int INF = 0x3f3f3f3f3f3f3f3f;\r\n\r\nvector<int> get_divisors(int n){\r\n\tvector<int> divs;\r\n    for(int i=1;i<=n/i;i++)\r\n    {\r\n        if(n%i==0){\r\n            divs.push_back(i);\r\n            if(n/i!=i) divs.push_back(n/i);\r\n        }\r\n    }\r\n    sort(divs.begin(),divs.end());\r\n    return divs;\r\n}\r\n\r\nconst int blo = 1e6, V = 1e9;\r\n\r\nvoid solve() {\r\n\tint n;\r\n\tcin >> n;\r\n\tvector<int> a(n);\r\n\tfor(int i = 0; i < n; i++) cin >> a[i];\r\n\tmap<int, int> mp;\r\n\tfor(int i = 0; i < n; i++) {\r\n\t\tmp[a[i]]++;\r\n\t}\r\n\tint ans = 0;\r\n\tfor(auto [v, cnt]: mp) {\r\n\t\tans += cnt * (cnt - 1) * (cnt - 2);\r\n\t\tif(v < blo) {\r\n\t\t\tvector<int> divs = get_divisors(v);\r\n\t\t\tfor(int i = 1; i < divs.size(); i++) {\r\n\t\t\t\tif(v% divs[i] == 0 && mp.count(v / divs[i]) && mp.count(v * divs[i])) {\r\n\t\t\t\t\tans += cnt * mp[v / divs[i]] * mp[v * divs[i]];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else{\r\n\t\t\tfor(int i = 2; v * i <= V; i++) {\r\n\t\t\t\tif(v % i == 0 && mp.count(v / i) && mp.count(v * i)) \r\n\t\t\t\t\tans += mp[v / i] * cnt * mp[v * i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcout << ans << '\\n';\r\n}\r\n\r\nvoid init() {}\r\n\r\nsigned main() {\r\n\tios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n\tinit();\r\n\tint T = 1;\r\n\tif (multi) cin >> T;\r\n\twhile (T--) {\r\n\t\tsolve();\r\n\t}\r\n\t\r\n\treturn 0;\r\n}"
}