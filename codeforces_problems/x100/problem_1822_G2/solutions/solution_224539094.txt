{
    "id": 224539094,
    "contestId": 1822,
    "creationTimeSeconds": 1695339231,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "riverwalk7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1279,
    "memoryConsumedBytes": 95232000,
    "source": "#include <bits/stdc++.h>\r\n#define pb push_back\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int M = 1.6e6;\r\nconst int S = 625;\r\nconst int A = 1e9;\r\nint freq[M+S];\r\nunordered_map<int, vector<int> > square_divisors;\r\nvoid FastIO()\r\n{\r\n    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n}\r\nvoid Initialize()\r\n{\r\n    for(int i=S+1; i*i <= A; i++)\r\n    {\r\n        for(int j=1; j*i*i <= A; j++)\r\n        {\r\n            square_divisors[j*i*i].pb(i);\r\n        }\r\n    }\r\n}\r\nll Solve()\r\n{\r\n    int N; cin>>N;\r\n    vector<ll> a(N);\r\n    vector<int> r(N);\r\n    for(int i=0; i<N; i++)\r\n    {\r\n        cin>>a[i];\r\n        if(a[i] <= M)\r\n        {\r\n            ++freq[a[i]];\r\n        }\r\n    }\r\n    sort(a.begin(), a.end());\r\n    int cnt = 0;\r\n    ll good_triples = 0;\r\n    for(int i=0; i<N; i++)\r\n    {\r\n        if(i == 0 || a[i] == a[i-1])\r\n        {\r\n            ++cnt;\r\n        }\r\n        else\r\n        {\r\n            good_triples += cnt * ll(cnt-1) * ll(cnt-2);\r\n            r[i-cnt] = i;\r\n            cnt = 1;\r\n        }\r\n    }\r\n    good_triples += cnt * ll(cnt-1) * ll(cnt-2);\r\n    r[N-cnt] = N;\r\n    for(int i=2; i<=S; i++)\r\n    {\r\n        int counter0 = 0; int counter2 = 0;\r\n        for(int j=0; j<N; j++)\r\n        {\r\n            while(counter0 < N && a[counter0] < i * a[j])\r\n            {\r\n                ++counter0;\r\n            }\r\n            while(counter2 < N && a[counter2] < i * i * a[j])\r\n            {\r\n                ++counter2;\r\n            }\r\n            if(counter0 != N && counter2 != N && a[counter0] == i * a[j] && a[counter2] == i * i * a[j])\r\n            {\r\n                good_triples += ll(r[counter0]-counter0) * ll(r[counter2]-counter2);\r\n            }\r\n        }\r\n    }\r\n    for(int i=0; i<N; i++)\r\n    {\r\n        vector<int> cur_square_divisors = square_divisors[a[i]];\r\n        for(int j=0; j<cur_square_divisors.size(); j++)\r\n        {\r\n            good_triples += freq[a[i]/cur_square_divisors[j]] * ll(freq[a[i]/cur_square_divisors[j]/cur_square_divisors[j]]);\r\n        }\r\n    }\r\n    for(int i=0; i<N; i++)\r\n    {\r\n        if(a[i] <= M)\r\n        {\r\n            --freq[a[i]];\r\n        }\r\n    }\r\n    return good_triples;\r\n\r\n}\r\nint main()\r\n{\r\n    FastIO();\r\n    Initialize();\r\n    int T; cin>>T;\r\n    for(int i=0; i<T; i++)\r\n    {\r\n        cout<<Solve()<<'\\n';\r\n    }\r\n}\r\n"
}