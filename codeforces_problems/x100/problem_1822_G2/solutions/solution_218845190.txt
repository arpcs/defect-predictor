{
    "id": 218845190,
    "contestId": 1822,
    "creationTimeSeconds": 1692042923,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "raito3z"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 638,
    "memoryConsumedBytes": 7168000,
    "source": "\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class div3_867 {\r\n    public static void main(String[] args) {\r\n        problemG2(new Fast());\r\n    }\r\n\r\n    private static void problemG2(Fast fast) {\r\n        int t = fast.nextInt();\r\n        while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n            var map = new HashMap<Integer, Long>(n);\r\n            for (int i = 0; i < n; i++) {\r\n                map.merge(fast.nextInt(), 1L, Long::sum);\r\n            }\r\n            long sum = 0;\r\n            for (var value : map.values()) {\r\n                if (value >= 3) {\r\n                    sum += value * (value - 1) * (value - 2);\r\n                }\r\n            }\r\n            for (var i : map.keySet()) {\r\n\r\n                if (i <= (int) 1e6) {\r\n                    for (int k = 2; k * k <= i; k++) {\r\n                        if (i % k == 0) {\r\n                            sum += map.getOrDefault(i / k, 0L) * map.getOrDefault(i, 0L) * map.getOrDefault(i * k, 0L);\r\n                            if (i != k * k) {\r\n                                sum += map.getOrDefault(k, 0L) * map.getOrDefault(i, 0L) * map.getOrDefault(i / k * i, 0L);\r\n                            }\r\n                            // \u81ea\u5df1\u672c\u8eab\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u56e0\u5b50\r\n                        }\r\n                        // \u5047\u8bbe\u56e0\u5b50\u662f\u7684\u8303\u56f4\u662f1 - i \u6211\u4eec\u53ef\u4ee5\u53ea\u53d6\u5230 sqrt(i),\u56e0\u4e3a\u5927\u4e00\u70b9\u7684\u90a3\u4e2a\u56e0\u5b50\u53ef\u4ee5\u901a\u8fc7arr[i] / k\u6765\u8868\u793a\r\n                    }\r\n                    if (i != 1) {\r\n                        long cnt = (long) i * i;\r\n                        if (cnt <= Integer.MAX_VALUE) {\r\n                            sum += map.getOrDefault(1, 0L) * map.getOrDefault(i, 0L) * map.getOrDefault(i * i, 0L);\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (int b = 2; b <= 1000; b++) {\r\n                        if (i % b == 0) {\r\n                            long cnt = (long) i * b;\r\n                            if (cnt <= Integer.MAX_VALUE) {\r\n                                sum += map.getOrDefault(i / b, 0L) * map.getOrDefault(i, 0L) * map.getOrDefault(cnt, 0L);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            fast.write(sum + \"\\n\");\r\n        }\r\n        fast.flush();\r\n    }\r\n\r\n    private static void problemG1(Fast fast) {\r\n        int t = fast.nextInt();\r\n        while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n            var arr = new int[n];\r\n            var map = new HashMap<Integer, Long>(n);\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = fast.nextInt();\r\n                map.merge(arr[i], 1L, Long::sum);\r\n            }\r\n            long sum = 0;\r\n            int x = (int) 1e6;\r\n            for (var value : map.values()) {\r\n                if (value >= 3) {\r\n                    sum += value * (value - 1) * (value - 2);\r\n                }\r\n            }\r\n            for (var i : map.keySet()) {\r\n\r\n                for (int k = 2; k * k <= i; k++) {\r\n                    if (i % (k * k) == 0) {\r\n                        sum += map.getOrDefault(i, 0L) * map.getOrDefault(i / k, 0L) * map.getOrDefault(i / k / k, 0L);\r\n                    }\r\n                }\r\n            }\r\n            fast.write(sum + \"\\n\");\r\n        }\r\n        fast.flush();\r\n    }\r\n\r\n    static long maxCnt = 0;\r\n    private static void problemF(Fast fast) {\r\n        int t = fast.nextInt();\r\n\r\n        while(--t >= 0) {\r\n            maxCnt = 0;\r\n            var map = new HashMap<Integer, List<Integer>>();\r\n            int n = fast.nextInt();\r\n            int k = fast.nextInt();\r\n            int c = fast.nextInt();\r\n\r\n            for (int i = 1; i < n; i++) {\r\n                int u = fast.nextInt();\r\n                int v = fast.nextInt();\r\n                map.computeIfAbsent(u, value -> new ArrayList<>()).add(v);\r\n                map.computeIfAbsent(v, value -> new ArrayList<>()).add(u);\r\n            }\r\n\r\n            var list = new ArrayList<Integer>();\r\n\r\n            for (var v : map.get(1)) {\r\n                var len = dfsLen(v, 1, 1, map, c, k);\r\n                list.add(len);\r\n                // System.out.println(v + \" \" + len);\r\n            }\r\n\r\n            list.sort((a, b) -> b - a);\r\n            var ans = (long) list.get(0) * k;\r\n\r\n            if (c < k && list.size() > 1) {\r\n                ans += (long) list.get(1) * (k - c);\r\n            }\r\n\r\n            maxCnt = Math.max(maxCnt, ans);\r\n            fast.write(maxCnt + \"\\n\");\r\n\r\n        }\r\n\r\n        fast.flush();\r\n    }\r\n\r\n    private static int dfsLen(Integer u, int step, int fa, Map<Integer, List<Integer>> map, int c, int k) {\r\n        int max = step;\r\n        var list = new ArrayList<Integer>();\r\n\r\n        for (var v : map.get(u)) {\r\n            if (v != fa) {\r\n                var len = dfsLen(v, step + 1, u, map, c, k);\r\n                list.add(len - step);\r\n                max = Math.max(max, len);\r\n            }\r\n        }\r\n\r\n        list.sort((a, b) -> b - a);\r\n\r\n        if (list.size() > 1) {\r\n            long pre = (long)step * c;\r\n            long ans = (long) list.get(0) * k + (long) list.get(1) * (k - c) - pre;\r\n            maxCnt = Math.max(maxCnt, ans);\r\n        }\r\n\r\n        return max;\r\n    }\r\n\r\n    private static void problemE(Fast fast) {\r\n        int t = fast.nextInt();\r\n\r\n        go: while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n            String s = fast.nextLine();\r\n\r\n            if ((n & 1) == 1) {\r\n                fast.write(\"-1\\n\");\r\n                continue;\r\n            }\r\n\r\n            char[] chars = new char[n + 1];\r\n            var cMap = new HashMap<Character, Integer>();\r\n\r\n            for (int i = 1; i <= n; i++) {\r\n                chars[i] = s.charAt(i - 1);\r\n                cMap.merge(chars[i], 1, Integer::sum);\r\n            }\r\n\r\n            for (var num : cMap.values()) {\r\n                if (num > n >> 1) {\r\n                    fast.write(\"-1\\n\");\r\n                    continue go;\r\n                }\r\n            }\r\n\r\n            var map = new HashMap<Character, Integer>();\r\n\r\n            int sum = 0;\r\n            for (int i = 1; i <= n >> 1; i++) {\r\n                if (chars[i] == chars[n - i + 1]) {\r\n                    map.merge(chars[i], 1, Integer::sum);\r\n                    sum++;\r\n                }\r\n            }\r\n\r\n            int cnt = 0;\r\n\r\n            for (var value : map.values()) {\r\n                if (value << 1 > sum) {\r\n                    cnt = (value << 1) - sum;\r\n                    break;\r\n                }\r\n\r\n            }\r\n            cnt += (sum - cnt + 1) >> 1;\r\n            fast.write(cnt + \"\\n\");\r\n        }\r\n        fast.flush();\r\n    }\r\n\r\n    private static void dfs(int len, List<Integer> list, Boolean[] vis) {\r\n        if (list.size() == len) {\r\n            var set = new HashSet<Integer>();\r\n            int sum = 0;\r\n            for (var num : list) {\r\n                sum += num;\r\n                set.add(sum % len);\r\n            }\r\n            if (set.size() == len && list.get(len - 1) == 1) {\r\n                System.out.println(list);\r\n                int ans = 0;\r\n                for (var num : list) {\r\n                    ans += num;\r\n                    System.out.print(ans % len + \" \");\r\n                }\r\n                System.out.println();\r\n            }\r\n            return;\r\n        }\r\n        for (int i = 1; i <= len; i++) {\r\n            if (!vis[i]) {\r\n                vis[i] = true;\r\n                list.add(i);\r\n                dfs(len, list, vis);\r\n                vis[i] = false;\r\n                list.remove(list.size() - 1);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private static void problemD(Fast fast) {\r\n        int t = fast.nextInt();\r\n        while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n            if (n == 1) {\r\n                fast.write(1 + \"\\n\");\r\n                fast.flush();\r\n                continue;\r\n            } else if ((n & 1) == 1) {\r\n                fast.write(-1 + \"\\n\");\r\n                fast.flush();\r\n                continue;\r\n            }\r\n            var list = new ArrayList<Integer>();\r\n            int start = 0, end = n - 1;\r\n            for (int i = 1; i <= n >> 1; i++) {\r\n                list.add(start++);\r\n                list.add(end--);\r\n            }\r\n            fast.write(n + \" \");\r\n            for (int i = 1; i < n; i++) {\r\n                int pre = list.get(i - 1);\r\n                int cur = list.get(i);\r\n                if (cur > pre) {\r\n                    fast.write(cur - pre + \" \");\r\n                } else {\r\n                    fast.write(n + cur - pre + \" \");\r\n                }\r\n            }\r\n            fast.write(\"\\n\");\r\n            fast.flush();\r\n        }\r\n    }\r\n\r\n    private static void problemC(Fast fast) {\r\n        int t = fast.nextInt();\r\n        while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n\r\n            long sum = 5L * n;\r\n\r\n            sum +=  ((long) (n - 1) * (n - 2));\r\n            fast.write(sum + \"\\n\");\r\n        }\r\n        fast.flush();\r\n    }\r\n\r\n    private static void problemB(Fast fast) {\r\n        int t = fast.nextInt();\r\n        while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n            var arr = new Long[n];\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = fast.nextLong();\r\n            }\r\n            Arrays.sort(arr);\r\n            long ans = Math.max(arr[0] * arr[1], arr[n - 1] * arr[n - 2]);\r\n            fast.write(ans + \"\\n\");\r\n        }\r\n        fast.flush();\r\n    }\r\n\r\n    private static void problemA(Fast fast) {\r\n        int t = fast.nextInt();\r\n        while(--t >= 0) {\r\n            int n = fast.nextInt();\r\n            int time = fast.nextInt();\r\n            var times = new int[n + 1];\r\n            var values = new int[n + 1];\r\n            for (int i = 1; i <= n; i++) {\r\n                times[i] = fast.nextInt();\r\n            }\r\n            for (int i = 1; i <= n; i++) {\r\n                values[i] = fast.nextInt();\r\n            }\r\n            int max = -1;\r\n            int id = -1;\r\n            int skip = 0;\r\n            for (int i = 1; i <= n; i++) {\r\n                if (times[i] + skip <= time) {\r\n                    if (max < values[i]) {\r\n                        max = values[i];\r\n                        id = i;\r\n                    }\r\n                }\r\n                skip++;\r\n            }\r\n            fast.write(id + \"\\n\");\r\n        }\r\n        fast.flush();\r\n    }\r\n\r\n    private static class Fast\r\n    {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n        BufferedWriter bw;\r\n        public Fast()\r\n        {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n        String next()\r\n        {\r\n            while (st == null || !st.hasMoreElements())\r\n            {\r\n                try\r\n                {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n                catch (IOException e)\r\n                {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n        int nextInt()\r\n        {\r\n            return Integer.parseInt(next());\r\n        }\r\n        long nextLong()\r\n        {\r\n            return Long.parseLong(next());\r\n        }\r\n        double nextDouble()\r\n        {\r\n            return Double.parseDouble(next());\r\n        }\r\n        String nextLine()\r\n        {\r\n            String str = \"\";\r\n            try\r\n            {\r\n                str = br.readLine();\r\n            }\r\n            catch (IOException e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n        void write(String s) {\r\n            if (bw == null) {\r\n                bw = new BufferedWriter(new OutputStreamWriter(System.out));\r\n            }\r\n            try {\r\n                bw.write(s);\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n        void write(int c) {\r\n            if (bw == null) {\r\n                bw = new BufferedWriter(new OutputStreamWriter(System.out));\r\n            }\r\n            try {\r\n                bw.write(c);\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        }\r\n        void flush() {\r\n            if (bw != null) {\r\n                try {\r\n                    bw.flush();\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
}