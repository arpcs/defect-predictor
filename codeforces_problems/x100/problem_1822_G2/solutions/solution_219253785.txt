{
    "id": 219253785,
    "contestId": 1822,
    "creationTimeSeconds": 1692281322,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "kovaxis"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 1465,
    "memoryConsumedBytes": 819200,
    "source": "#pragma GCC optimize(\"Ofast\")\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\n#define repx(i, a, b) for (int i = a; i < b; i++)\n#define rep(i, n) repx(i, 0, n)\n#define invrepx(i, a, b) for (int i = b - 1; i >= a; i--)\n#define invrep(i, n) invrepx(i, 0, n)\n\n#define cerr \\\n    if (0) cerr\n\n// gets the prime factorization of a number in O(sqrt(n))\nvector<pair<ll, int>> factorize(ll x) {\n    vector<pair<ll, int>> f;\n    for (ll k = 2; x > 1; k++) {\n        if (k * k > x || k > 1000) {\n            f.push_back({x, 1});\n            break;\n        }\n        int n = 0;\n        while (x % k == 0) x /= k, n++;\n        if (n > 0) f.push_back({k, n});\n    }\n    return f;\n}\n\n// iterate over all divisors of a number.\n//\n// divisor count upper bound: n^(1.07 / ln ln n)\ntemplate <class OP>\nvoid divisors(ll x, OP op) {\n    auto facts = factorize(x);\n    vector<int> f(facts.size());\n    while (true) {\n        ll y = 1;\n        rep(i, f.size()) rep(j, f[i]) y *= facts[i].first;\n        op(y);\n\n        int i;\n        for (i = 0; i < f.size(); i++) {\n            f[i] += 1;\n            if (f[i] <= facts[i].second) break;\n            f[i] = 0;\n        }\n        if (i == f.size()) break;\n    }\n}\n\n// hackproof unordered map hash\nstruct Hash {\n    size_t operator()(const ll &x) const {\n        static const uint64_t RAND =\n            chrono::steady_clock::now().time_since_epoch().count();\n        uint64_t z = x + RAND + 0x9e3779b97f4a7c15;\n        z = (z ^ (z >> 30)) * 0xbf58476d1ce4e5b9;\n        z = (z ^ (z >> 27)) * 0x94d049bb133111eb;\n        return z ^ (z >> 31);\n    }\n};\n\n// hackproof unordered_map\ntemplate <class T, class U>\nusing umap = unordered_map<T, U, Hash>;\n\n// hackproof unordered_set\ntemplate <class T>\nusing uset = unordered_set<T, Hash>;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int TC;\n    cin >> TC;\n    while (TC--) {\n        int N;\n        cin >> N;\n        vector<int> A(N);\n        rep(i, N) cin >> A[i];\n\n        umap<int, int> nums;\n        rep(i, N) nums[A[i]] += 1;\n\n        ll ans = 0;\n        rep(i, N) {\n            int x = A[i];\n            divisors(x, [&](int b) {\n                cerr << \"middle = \" << x << \", b = \" << b << endl;\n                if ((ll)x * b < (ll)1e9 && nums.count(x / b) && nums.count(x * b)) {\n                    cerr << \"    it works!\" << endl;\n                    ll l = nums[x / b], r = nums[x * b];\n                    if (b == 1) l -= 1, r -= 2;\n                    ans += l * r;\n                }\n            });\n        }\n\n        cout << ans << \"\\n\";\n    }\n}\n"
}