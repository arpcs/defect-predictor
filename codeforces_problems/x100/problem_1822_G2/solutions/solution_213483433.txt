{
    "id": 213483433,
    "contestId": 1822,
    "creationTimeSeconds": 1689155497,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "devi_81374"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 2745,
    "memoryConsumedBytes": 164864000,
    "source": "\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class G {\r\n\t\r\n\tstatic IOHandler sc = new IOHandler();\r\n\tstatic PrintWriter out = new PrintWriter(System.out);\r\n\tstatic int [][] factors;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\t// TODO Auto-generated method stub\r\n\t\tgenFactors();\r\n\t\tint testCases = sc.nextInt();\r\n\t\t\r\n\t\tfor (int i = 1; i <= testCases; ++i) {\r\n\t\t\tsolve(i);\r\n\t\t}\r\n\t\t\r\n\t\tout.flush();\r\n\t}\r\n\t\r\n\tprivate static void genFactors() {\r\n\t\tfactors = new int[1_000_001][];\r\n\t\tint [] count = new int [1_000_0001];\r\n\t\t\r\n\t\tfor (int i = 2; i < factors.length; ++i) {\r\n\t\t\tfor (int j = i; j < factors.length; j += i) {\r\n\t\t\t\tcount[j]++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\tfor (int i = 1; i < factors.length; ++i) {\r\n\t\t\tfactors[i] = new int [count[i]];\r\n\t\t}\r\n\t\t\r\n\t\tArrays.fill(count, 0);\r\n\t\t\r\n\t\tfor (int i = 2; i < factors.length; ++i) {\r\n\t\t\tfor (int j = i; j < factors.length; j += i) {\r\n\t\t\t\tfactors[j][count[j]++] = i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static void solve(int t) {\r\n\t\tint n = sc.nextInt();\r\n\t\t\r\n\t\tint [] arr = sc.readArray(n);\r\n\t\tint max = 0;\r\n\t\t\r\n\t\tMap<Integer, Integer> map = new HashMap<>();\r\n\t\t\r\n\t\tfor (int num : arr) {\r\n\t\t\tmap.put(num, map.getOrDefault(num, 0) + 1);\r\n\t\t\tmax = Math.max(num, max);\r\n\t\t}\r\n\t\t\r\n\t\tlong result = 0;\r\n\t\t\r\n\t\tlong val;\r\n\t\tlong val2;\r\n\t\t\r\n\t\tlong pos;\r\n\t\t\r\n\t\tInteger target;\r\n\t\t\r\n\t\tint div, rt, half;\r\n\t\t\r\n\t\tfor (int num : map.keySet()) {\r\n\t\t\tval = map.get(num);\r\n\t\t\tval2 = 1;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor (int j = 0; j < 3; ++j) {\r\n\t\t\t\tval2 *= (val - j);\r\n\t\t\t}\r\n\t\t\tresult += val2;\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tif (num < factors.length) {\r\n\t\t\t\tfor (int test: factors[num]) {\r\n\t\t\t\t\tif ((long)num * test > max)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\r\n\t\t\t\t\tval2 = map.get(num);\r\n\t\t\t\t\tval2 *= map.getOrDefault(num / test, 0);\r\n\t\t\t\t\tval2 *= map.getOrDefault(num * test, 0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult += val2;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t\r\n\t\t\t\tfor (int i = 2; i * num <= max; ++i) {\r\n\t\t\t\t\tif (num % i != 0)\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\tval2 = map.get(num);\r\n\t\t\t\t\tval2 *= map.getOrDefault(num / i, 0);\r\n\t\t\t\t\tval2 *= map.getOrDefault(num * i, 0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tresult += val2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tout.println(result);\r\n\t}\r\n\t\r\n\tprivate static int root (int num) {\r\n\t\tint root = Math.max(0, (int)Math.sqrt(num) - 2 );\r\n\t\t\r\n\t\twhile ((root + 1) * (root + 1) <= num)\r\n\t\t\t++root;\r\n\t\t\r\n\t\treturn root;\r\n\t}\r\n\t\r\n\tprivate static class IOHandler {\r\n      BufferedReader br;\r\n      StringTokenizer st;\r\n \r\n      public IOHandler() {\r\n         br = new BufferedReader(new InputStreamReader(System.in));\r\n      }\r\n \r\n      String next() {\r\n          while (st == null || !st.hasMoreElements()) {\r\n              try {\r\n                  st = new StringTokenizer(br.readLine());\r\n              } catch (IOException e) {\r\n                  e.printStackTrace();\r\n              }\r\n          }\r\n          return st.nextToken();\r\n      }\r\n \r\n      int nextInt() {\r\n          return Integer.parseInt(next());\r\n      }\r\n      \r\n      int [] readArray(int n) {\r\n    \t  int [] res = new int [n];\r\n    \t  \r\n    \t  for (int i = 0; i < n; ++i)\r\n    \t\t  res[i] = nextInt();\r\n    \t  \r\n    \t  return res;\r\n      }\r\n      \r\n      int [] readArray2(int n) {\r\n    \t  int [] res = new int [n + 1];\r\n    \t  \r\n    \t  for (int i = 1; i <= n; ++i)\r\n    \t\t  res[i] = nextInt();\r\n    \t  \r\n    \t  return res;\r\n      }\r\n      \r\n      int [][] readGraph(int n, int m, int c) {\r\n    \t  int [][] graph = new int [n + 1][];\r\n    \t  \r\n    \t  int [] count = new int [n + 1];\r\n    \t  int [][] arr = new int [m][1 + c];\r\n    \t  \r\n    \t  int a, b;\r\n    \t  \r\n    \t  for (int i = 0; i < m; ++i) {\r\n    \t\t  a = sc.nextInt();\r\n    \t\t  b = sc.nextInt();\r\n    \t\t  \r\n    \t\t  arr[i][0] = a;\r\n    \t\t  arr[i][1] = b;\r\n    \t\t  \r\n    \t\t  ++count[a];\r\n    \t\t  ++count[b];\r\n    \t\t  \r\n    \t\t  for (int j = 2; j <= c; ++j) {\r\n    \t\t\t  arr[i][j] = sc.nextInt();\r\n    \t\t  }\r\n    \t  }\r\n    \t  \r\n    \t  for (int i = 0; i <= n; ++i) {\r\n    \t\t  graph[i] = new int [count[i] * c];\r\n    \t\t  count[i] = 0;\r\n    \t  }\r\n    \t  int swap;\r\n    \t  \r\n    \t  for (int [] tArr : arr) {\r\n    \t\t  for (int j = 1; j < tArr.length; ++j) {\r\n    \t\t\t  graph[tArr[0]][count[tArr[0]]++] = tArr[j]; \r\n    \t\t  }\r\n    \t\t  \r\n    \t\t  swap = tArr[0];\r\n    \t\t  tArr[0] = tArr[1];\r\n    \t\t  tArr[1] = swap;\r\n    \t\t  \r\n    \t\t  for (int j = 1; j < tArr.length; ++j) {\r\n    \t\t\t  graph[tArr[0]][count[tArr[0]]++] = tArr[j]; \r\n    \t\t  }\r\n    \t  }\r\n    \t  \r\n    \t  return graph;\r\n      }\r\n \r\n      long nextLong() {\r\n          return Long.parseLong(next());\r\n      }\r\n \r\n      double nextDouble() {\r\n          return Double.parseDouble(next());\r\n      }\r\n \r\n      String nextLine(){\r\n          String str = \"\";\r\n\t\t  try {\r\n\t\t     str = br.readLine();\r\n\t\t  } catch (IOException e) {\r\n\t\t     e.printStackTrace();\r\n\t\t  }\r\n\t\t  return str;\r\n      }\r\n\r\n   }\r\n\r\n}"
}