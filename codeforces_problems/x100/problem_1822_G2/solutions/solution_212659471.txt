{
    "id": 212659471,
    "contestId": 1822,
    "creationTimeSeconds": 1688745892,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "R4ND0M19"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 241254400,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <unordered_map>\r\n\r\nconst int N = 2e5 + 5;\r\nconst int M = 6e7;\r\n\r\nint a[N];\r\nint n;\r\n\r\nint book[M + 5];\r\n\r\nint maxn = 0;\r\n\r\nstd::unordered_map<int, int> mp;\r\n\r\nvoid init()\r\n{\r\n    maxn = 0;\r\n    scanf(\"%d\", &n);\r\n    for(int i = 1; i <= n; i++)\r\n        scanf(\"%d\", &a[i]), maxn = std::max(maxn, a[i]);\r\n    mp.clear();\r\n}\r\n\r\nvoid reinit()\r\n{\r\n    for(int i = 1; i <= n; i++) \r\n    {\r\n        if(a[i] <= M) book[a[i]]--;\r\n        else mp[a[i]]--;\r\n    }\r\n}\r\n\r\nvoid test()\r\n{\r\n}\r\n\r\ninline int check(long long x)\r\n{\r\n    if(x > maxn) return 0;\r\n    if(x <= M) return book[x];\r\n    return mp[x];\r\n}\r\n\r\nlong long combination(int n, int m)\r\n{\r\n    // printf(\"%d %d\\n\", n, m);\r\n    long long ans = 1;\r\n    if(n < 0 || m < 0) return 0;\r\n    if(n < m) return 0;\r\n    for(int i = n - m + 1; i <= n; i++)\r\n    {\r\n        ans *= i;\r\n    }\r\n    return ans;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    std::sort(a + 1, a + n + 1);\r\n    long long ans = 0;\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        if(a[i] <= M) book[a[i]]++;\r\n        else mp[a[i]]++;\r\n    }\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        if(a[i] == a[i - 1]) continue;\r\n        ans += combination(check(a[i]), 3);\r\n    }\r\n    // printf(\"ans: %lld\\n\", ans);\r\n    for(int i = 2; i < n; i++)\r\n    {\r\n        if(a[i] == a[i - 1]) continue;\r\n        int tmp = check(a[i]);\r\n        bool flg = true;\r\n        for(long long j = 1; j * j <= a[i]; j++)\r\n        {\r\n            if(1ll * a[i] * j > maxn) break;\r\n            if(a[i] % j == 0)\r\n            {    \r\n                if(a[i] / j != 1ll * a[i] * j)\r\n                    ans += tmp * check(a[i] / j) * check(1ll * a[i] * j);\r\n                // printf(\"%d %d %d\\n\", tmp, check(a[i] / j), check(1ll * a[i] * j)),\r\n                // printf(\"%d %d %lld\\n\", a[i] / j, a[i], 1ll * a[i] * j);\r\n                if(!flg) continue;\r\n                if(1ll * a[i] / j * a[i] > maxn) flg = false;\r\n                if(j != 1ll * a[i] / j * a[i] && j * j != a[i])\r\n                    ans += 1ll * tmp * check(j) * check(1ll * a[i] / j * a[i]);\r\n                    // printf(\"%d %d %d\\n\", tmp, check(j), check(1ll * a[i] / j * a[i])),\r\n                    // printf(\"%d %d %lld\\n\", j, a[i], 1ll * a[i] / j * a[i]);\r\n            }\r\n        }\r\n    }\r\n    printf(\"%lld\\n\", ans);\r\n}\r\n\r\nint main()\r\n{\r\n    // printf(\"hello\\n\");\r\n    int T;\r\n    scanf(\"%d\", &T);\r\n    while(T--)\r\n    {\r\n        init();\r\n        test();\r\n        solve();\r\n        reinit();\r\n    }\r\n    // printf(\"hello\\n\");\r\n    return 0;\r\n}"
}