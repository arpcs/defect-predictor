{
    "id": 211038410,
    "contestId": 1822,
    "creationTimeSeconds": 1687702620,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "Momken_Net3arf"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 1996,
    "memoryConsumedBytes": 211763200,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n//\r\n//#pragma GCC optimize(\"Ofast,no-stack-protector\")\r\n//#pragma GCC optimize(\"unroll-loops\")\r\n//#pragma GCC optimize(\"fast-math\")\r\n\r\n#define clr(v, d)\t\t\tmemset(v, d, sizeof(v))\r\n#define ll long long\r\n#define int long long\r\ntypedef tree< pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\n#define setp(item) cout<<fixed<<setprecision(item);\r\n#define PI 3.14159265358979323846264338327950\r\nint ceilSqrt(int a){\r\n    return ::ceil(sqrtl(a));\r\n}\r\nint  divC(int a,int b){\r\n    return a/b+(a%b!=0);\r\n}\r\nint gcd(int a, int b) { return ((b == 0) ? a : gcd(b, a % b)); }\r\nint lcm(int a,int b){return (a*b)/gcd(a,b);}\r\nconst ll OO =1e18+10, mod = 1e9+7,mod2=1e9+9,  N=1e6+5,M=25,MOD= 998244353, minOO=LLONG_MIN;\r\n\r\n/// Ew3a tsra2 el code yalla\r\n\r\n/// 3enak ya 7arami\r\nvector<vector<int>>divisors(N,{1});\r\nvoid pre(){\r\n    for (int i = 2; i < N; ++i) {\r\n        for (int j = i; j < N; j+=i) {\r\n            divisors[j].push_back(i);\r\n        }\r\n    }\r\n}\r\nvoid func(int index){\r\n    ll n;cin>>n;\r\n    vector<int>vec(n);\r\n    map<int,int>ma;\r\n    for (int i = 0; i < n; ++i) {\r\n        cin>>vec[i];\r\n        ma[vec[i]]++;\r\n    }\r\n    sort(vec.begin(),vec.end());\r\n    vec.resize(std::unique(vec.begin(), vec.end())-vec.begin());\r\n    ll res=0;\r\n    n=vec.size();\r\n    for (int j = 0; j < n; ++j) {\r\n        res+=ma[vec[j]]*(ma[vec[j]]-1)*(ma[vec[j]]-2);\r\n        if(vec[j]<=(int)1e6){\r\n            ll num=vec[j];\r\n            vector<int>mm;\r\n            if(num*num>(int)1e6)\r\n            {\r\n                if(ma.count(vec[j]*num)&&ma.count(vec[j]/num)){\r\n                    res+=ma[vec[j]]*ma[vec[j]/num]*ma[vec[j]*num];\r\n                }\r\n            }\r\n            for(ll i=2; i<=sqrt(num); i++ )\r\n            {\r\n                if(num%i==0)\r\n                {\r\n                    if(vec[j]%(i*i)==0)\r\n                        mm.push_back(i);\r\n                    if(i!=num/i) {\r\n                        ll re=num/i;\r\n                        if(vec[j]%(re*re)==0)\r\n                            mm.push_back(re);\r\n\r\n                    }\r\n                }\r\n            }\r\n            for(auto item:mm){\r\n                if(ma.count(vec[j]/item)&&vec[j]%(item*item)==0&&ma.count(vec[j]/(item*item))){\r\n                    res+=ma[vec[j]]*ma[vec[j]/item]*ma[vec[j]/(item*item)];\r\n                }\r\n            }\r\n        }else{\r\n            // solve as mid or use prime factorization in O(n^1/4)\r\n\r\n            for (int i = 2; i <=1000 ; ++i) {\r\n                if(vec[j]%i==0){\r\n                    if(ma.count(vec[j]*i)&&ma.count(vec[j]/i)){\r\n                        res+=ma[vec[j]]*ma[vec[j]/i]*ma[vec[j]*i];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout<<res<<endl;\r\n}\r\nsigned main() {\r\n    //freopen(\"input.txt\",\"rt\",stdin);\r\n    //freopen(\"output.txt\",\"wt\",stdout);\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    ll t=1;\r\n    pre();\r\n    cin>>t;\r\n    ll index=1;\r\n    while (t--){\r\n        func(index++);\r\n    }\r\n    return 0;\r\n}"
}