{
    "contestId": 1822,
    "index": "G2",
    "name": "Magic Triples (Hard Version)",
    "type": "PROGRAMMING",
    "rating": 2200,
    "tags": [
        "brute force",
        "data structures",
        "math",
        "number theory"
    ],
    "desc": {
        "title": "G2. Magic Triples (Hard Version)",
        "statement": "<p><span class=\"tex-font-style-bf\">This is the hard version of the problem. The only difference is that in this version, $$$a_i \\le 10^9$$$.</span></p><p>For a given sequence of $$$n$$$ integers $$$a$$$, a triple $$$(i, j, k)$$$ is called <span class=\"tex-font-style-it\">magic</span> if: </p><ul> <li> $$$1 \\le i, j, k \\le n$$$. </li><li> $$$i$$$, $$$j$$$, $$$k$$$ are pairwise distinct. </li><li> there exists a positive integer $$$b$$$ such that $$$a_i \\cdot b = a_j$$$ and $$$a_j \\cdot b = a_k$$$. </li></ul><p>Kolya received a sequence of integers $$$a$$$ as a gift and now wants to count the number of <span class=\"tex-font-style-it\">magic</span> triples for it. Help him with this task!</p><p>Note that there are no constraints on the order of integers $$$i$$$, $$$j$$$ and $$$k$$$.</p>",
        "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of the test case contains a single integer $$$n$$$ ($$$3 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the length of the sequence.</p><p>The second line of the test contains $$$n$$$ integers $$$a_1, a_2, a_3, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$)\u00a0\u2014 the elements of the sequence $$$a$$$.</p><p>The sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, output a single integer\u00a0\u2014 the number of <span class=\"tex-font-style-it\">magic</span> triples for the sequence $$$a$$$.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 7 7 2 7</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-even test-example-line-2\">6 2 18</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">9</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 3 4 5 6 7 8 9</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1000 993 986 179</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 10 100 1000 10000 100000 1000000</div><div class=\"test-example-line test-example-line-even test-example-line-6\">8</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1 1 2 2 4 4 8 8</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">9</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">1 1 1 2 2 2 4 4 4</div>",
                "output": "\n6\n1\n3\n0\n9\n16\n45\n"
            }
        ],
        "note": "<p>In the first example, there are $$$6$$$ <span class=\"tex-font-style-it\">magic</span> triples for the sequence $$$a$$$\u00a0\u2014 $$$(2, 3, 5)$$$, $$$(2, 5, 3)$$$, $$$(3, 2, 5)$$$, $$$(3, 5, 2)$$$, $$$(5, 2, 3)$$$, $$$(5, 3, 2)$$$.</p><p>In the second example, there is a single <span class=\"tex-font-style-it\">magic</span> triple for the sequence $$$a$$$\u00a0\u2014 $$$(2, 1, 3)$$$.</p>"
    },
    "suggested_categories": [
        "sequence manipulation",
        "mathematics",
        "number theory",
        "algorithm design",
        "combinatorics",
        "integer manipulation",
        "array processing",
        "optimization",
        "problem solving",
        "coding challenges",
        "data structures",
        "algorithmic thinking",
        "complexity analysis",
        "logical reasoning",
        "pattern recognition",
        "computational thinking",
        "competitive programming",
        "mathematical logic",
        "performance optimization",
        "algorithm analysis"
    ]
}