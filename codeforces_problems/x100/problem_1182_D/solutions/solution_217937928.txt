{
    "id": 217937928,
    "contestId": 1182,
    "creationTimeSeconds": 1691540044,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "afuafu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 234,
    "memoryConsumedBytes": 65638400,
    "source": "// LUOGU_RID: 119777045\n#include<bits/stdc++.h>\r\n#define int long long\r\n#define MOD 998244353\r\n#define P 13331\r\nusing namespace std;\r\nint n,k1,k2,k3,k4,k5,k6,deg[500003],head[500003],v1;\r\nstruct Edge{\r\n\tint st;\r\n\tint ed;\r\n\tint nxt;\r\n}E[500003];\r\nint totE,sz[500003],mx[500003],zx;\r\nint mx2[500003],wz[500003];\r\nvoid addEdge(int st,int ed){\r\n\tE[++totE].st=st;\r\n\tE[totE].ed=ed;\r\n\tE[totE].nxt=head[st];\r\n\thead[st]=totE;\r\n\treturn;\r\n}\r\nvoid dfs(int now,int p){\r\n\tsz[now]=1;\r\n\tfor(int i=head[now];i;i=E[i].nxt){\r\n\t\tif(E[i].ed==p)continue;\r\n\t\tdfs(E[i].ed,now);\r\n\t\tmx[now]=max(mx[now],sz[E[i].ed]);\r\n\t\tsz[now]+=sz[E[i].ed];\r\n\t}\r\n\tmx[now]=max(mx[now],n-sz[now]);\r\n\tif(mx[now]<mx[zx]||zx==0)zx=now;\r\n\treturn;\r\n}\r\nint q[500003][2],totq,vis[500003],dep[500003];\r\nbool chk(int X,int k){\r\n\tmemset(vis,0,sizeof(vis));\r\n\tvis[k]=1;\r\n\ttotq=0;\r\n\tq[++totq][0]=X;\r\n\tq[totq][1]=1;\r\n\tvis[X]=1;\r\n\tfor(int i=1;i<=totq;i++){\r\n\t\tfor(int j=head[q[i][0]];j;j=E[j].nxt){\r\n\t\t\tif(vis[E[j].ed])continue;\r\n\t\t\tvis[E[j].ed]=1;\r\n\t\t\tq[++totq][0]=E[j].ed;\r\n\t\t\tq[totq][1]=q[i][1]+1;\r\n\t\t}\r\n\t} \r\n\tfor(int i=1;i<totq;i++){\r\n\t\tif(q[i][1]!=q[i+1][1])continue;\r\n\t\tif(deg[q[i][0]]!=deg[q[i+1][0]])return false;\r\n\t}\r\n\treturn true;\r\n}\r\nvoid dfs2(int now,int p){\r\n\tmx2[now]=deg[now]-(p!=0);\r\n\twz[now]=now;\r\n\tfor(int i=head[now];i;i=E[i].nxt){\r\n\t\tif(E[i].ed==p)continue;\r\n\t\tdep[E[i].ed]=dep[now]+1;\r\n\t\tdfs2(E[i].ed,now);\r\n\t\tmx2[now]=max(mx2[now],mx2[E[i].ed]);\r\n\t\twz[now]=wz[E[i].ed];\r\n\t}\r\n\treturn;\r\n}\r\nint sum1,sum2;\r\nint stk[500003],tot;\r\nsigned main(){\r\n\tscanf(\"%lld\",&n);\r\n\tfor(int i=1;i<n;i++){\r\n\t\tscanf(\"%lld%lld\",&k1,&k2);\r\n\t\tif(i==1)v1=k1;\r\n\t\tdeg[k1]++;\r\n\t\tdeg[k2]++;\r\n\t\taddEdge(k1,k2);\r\n\t\taddEdge(k2,k1);\r\n\t}\r\n\tdfs(1,0);\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tif(mx[i]==mx[zx]){\r\n\t\t\tif(chk(i,0)){\r\n\t\t\t\tprintf(\"%lld\",i);\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t\tdep[i]=1;\r\n\t\t\tdfs2(i,0);\r\n\t\t\tsum1=sum2=0;\r\n\t\t\tfor(int j=head[i];j;j=E[j].nxt){\r\n\t\t\t\tif(mx2[E[j].ed]<=1)sum1++;\r\n\t\t\t\telse sum2++;\r\n\t\t\t}\r\n\t\t\tif(sum1+sum2==1)continue;\r\n\t\t\tif(sum1==0)continue;\r\n\t\t\tif(sum1>1&&sum2>0)continue;\r\n\t\t\tif(sum2==0){\r\n\t\t\t\ttot=0;\r\n\t\t\t\tfor(int j=head[i];j;j=E[j].nxt)stk[++tot]=dep[wz[E[j].ed]];\r\n\t\t\t\tsort(stk+1,stk+tot+1);\r\n\t\t\t\tif(stk[1]!=stk[2]){\r\n\t\t\t\t\tfor(int j=head[i];j;j=E[j].nxt){\r\n\t\t\t\t\t\tif(dep[wz[E[j].ed]]==stk[1]){\r\n\t\t\t\t\t\t\tif(chk(i,E[j].ed)){\r\n\t\t\t\t\t\t\t\tprintf(\"%lld\",wz[E[j].ed]);\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak; \r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(stk[tot]!=stk[tot-1]){\r\n\t\t\t\t\tfor(int j=head[i];j;j=E[j].nxt){\r\n\t\t\t\t\t\tif(dep[wz[E[j].ed]]==stk[tot]){\r\n\t\t\t\t\t\t\tif(chk(i,E[j].ed)){\r\n\t\t\t\t\t\t\t\tprintf(\"%lld\",wz[E[j].ed]);\r\n\t\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tfor(int j=head[i];j;j=E[j].nxt){\r\n\t\t\t\t\tif(mx2[E[j].ed]<=1){\r\n\t\t\t\t\t\tif(chk(i,E[j].ed)){\r\n\t\t\t\t\t\t\tprintf(\"%lld\",wz[E[j].ed]);\r\n\t\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tputs(\"-1\");\r\n\treturn 0;\r\n}",
    "suggested_categories": [
        "graph algorithms",
        "depth-first search (dfs)",
        "tree data structure",
        "algorithm design",
        "c++ programming",
        "data structures",
        "dynamic programming",
        "code optimization",
        "computational complexity",
        "mathematical algorithms",
        "network algorithms",
        "graph theory",
        "programming logic",
        "problem solving",
        "debugging",
        "software engineering",
        "algorithmic thinking",
        "critical thinking",
        "logical thinking",
        "data processing"
    ]
}