{
    "id": 128895809,
    "contestId": 1182,
    "creationTimeSeconds": 1631705003,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Junco_dh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 23040000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define mp make_pair\r\n#define pb push_back\r\n#define fi first\r\n#define se second\r\n#define LSB(x) ((x) & (-(x)))\r\n#define is_set(x, i) (((x)>>(i))&1)\r\n#define set_bit(x, i) {(x) |= 1ll<<(i);}\r\n#define unset_bit(x, i) {(x) = ((x) | (1ll<<(i))) ^ (1ll<<(i));}\r\n\r\n\r\n#ifdef JUNCO_DEBUG\r\n#define echoarr(x) {for(int _i=0,_n=min((size_t)15,sizeof(x)/sizeof(x[0]));_i<_n;_i++)\\\r\n {cout << x[_i] << \" \";} cout << endl;}\r\n#define echo(...) {cout<<\"->\";ECHO(#__VA_ARGS__, __VA_ARGS__ );cout<<endl;}\r\n#define echo2(x) {cout<<#x<<endl; for(auto el : x) {ECHO(el); cout << endl;}}\r\n#else\r\n#define echoarr(x)\r\n#define echo(...) \r\n#define echo2(x) \r\n#endif\r\n\r\nconst long double PI = acos(-1);\r\nconst long double eps = 1e-9;\r\nconst long long inf = LLONG_MAX / 10;\r\n\r\nvoid ECHO(string _s){cout<<_s;}\r\nvoid ECHO(bool _s){if(_s)cout<<\"true\";else cout<<\"false\";}\r\nvoid ECHO(char _s){cout<<_s;}\r\nvoid ECHO(long unsigned _s) {cout<<_s;}//for s.size()\r\nvoid ECHO(int _s){cout<<_s;}\r\nvoid ECHO(long long _s){if(_s == inf)cout << \"inf\";else cout<<_s;}\r\nvoid ECHO(double _s){cout<<_s;}\r\nvoid ECHO(long double _s){cout<<_s;}\r\nvoid ECHO(bitset<8> b) {cout << b;}//resize bitset\r\ntemplate<typename T> void ECHO(set<T> _s) {\r\n    for(auto el : _s) {ECHO(el); cout << \"_\";}\r\n}\r\ntemplate<typename T1, typename T2> void ECHO(map<T1, T2> _s) {\r\n    for(auto el : _s) {ECHO(el); cout << \"_\";}\r\n}\r\ntemplate<typename T1, typename T2> void ECHO(pair<T1, T2> _s) {\r\n    cout << \"(\"; ECHO(_s.fi); cout << \",\"; ECHO(_s.se); cout << \")\";\r\n}\r\ntemplate<typename T> void ECHO(vector<T> v) {\r\n    for(auto el : v) {ECHO(el); cout << \"_\";}\r\n}\r\ntemplate<typename T, typename ...Args> void ECHO(string _s, T x, Args... args){\r\n    int _i, c = 0;\r\n    for(_i = 0; _i < (int)_s.size(); _i++) {\r\n        if(c==0 && _s[_i]==',') break;\r\n        if(_s[_i] == '(') c++;\r\n        if(_s[_i] == ')') c--;\r\n    }\r\n    cout << \" (\" << _s.substr(0, _i) << \"): \"; ECHO(x);\r\n    while(_i < (int)_s.size() && (_s[_i] == ',' || _s[_i] == ' ')) _i++;\r\n    ECHO(_s.substr(_i), args...);\r\n}\r\n\r\ntemplate<typename T> // Input vector<T>.\r\nistream& operator >> (istream& is, vector<T>& v) {\r\n    for(T& el : v) is >> el;\r\n    return is;\r\n}\r\n\r\ntemplate<typename T> // Output vector<T>.\r\nostream& operator << (ostream& os, const vector<T>& v) {\r\n    bool _first = false;\r\n    for(T el : v) {\r\n        if(_first) os << \" \";\r\n        _first = true;\r\n        os << el;\r\n    }\r\n    return os;\r\n}\r\n\r\ntypedef long double ld;\r\ntypedef long long ll;\r\ntypedef vector<ll> vll;\r\ntypedef vector<int> vi;\r\ntypedef pair<int, int> pii;\r\ntypedef pair<ll, ll> pll;\r\n\r\nvector<vll> graph;\r\nvi dist;\r\n\r\nvoid dfs_dist(int u, int p) {\r\n    for(auto v : graph[u]) {\r\n        if(v == p) continue;\r\n        dist[v] = dist[u] + 1;\r\n        dfs_dist(v, u);\r\n    }\r\n}\r\npair<int, pii> get_diameter() {\r\n    int maxn = graph.size(), u;\r\n    dist.assign(maxn, -1);\r\n    dist[0] = 0;\r\n    dfs_dist(0, -1);\r\n    u = max_element(dist.begin(), dist.end()) - dist.begin();\r\n    dist[u] = 0;\r\n    dfs_dist(u, -1);\r\n    auto it = max_element(dist.begin(), dist.end());\r\n    return mp(*it, mp(u, it - dist.begin()));\r\n}\r\n\r\nvi parent;\r\nvoid dfs_parent(int u, int p) {\r\n    parent[u] = p;\r\n    for(auto v : graph[u]) {\r\n        if(v == p) continue;\r\n        dfs_parent(v, u);\r\n    }\r\n}\r\nvi get_diameter_vector() {\r\n    int u, v, maxn = graph.size();\r\n    pair<int, pii> diameter = get_diameter();\r\n    vi ans;\r\n    u = diameter.se.fi;\r\n    v = diameter.se.se;\r\n    parent.assign(maxn, 0);\r\n    dfs_parent(u, -1);\r\n    while(v != -1) {\r\n        ans.pb(v);\r\n        v = parent[v];\r\n    }\r\n    return ans;\r\n}\r\n\r\nll n;\r\nvector<ll> lvl;\r\n\r\nvoid dfs(ll u, ll p) {\r\n    for(auto v : graph[u]) {\r\n        if(v == p) continue;\r\n        lvl[v] = lvl[u] + 1;\r\n        dfs(v, u);\r\n    }\r\n}\r\n\r\nvoid check(ll ans) {\r\n    ll i;\r\n    if(ans == -1) return;\r\n    lvl.assign(n, 0);\r\n    lvl[ans] = 0;\r\n    dfs(ans, -1);\r\n    vector<pll> a(n);\r\n    for(i = 0; i < n; i++) a[i] = mp(lvl[i], (ll)graph[i].size());\r\n    sort(a.begin(), a.end());\r\n    // echo(a);\r\n    for(i = 1; i < n; i++) {\r\n        if(a[i].fi == a[i-1].fi && a[i].se != a[i-1].se) {\r\n            return;\r\n        }\r\n    }\r\n    cout << ans+1 << \"\\n\";\r\n    exit(0);\r\n}\r\n\r\nint dfs_min_heigh(int u, int p) {\r\n    if((int) graph[u].size() == 1) return 0;\r\n    if((int) graph[u].size() > 2) return -1;\r\n    for(auto v : graph[u]) {\r\n        if(v == p) continue;\r\n        int ans = dfs_min_heigh(v, u);\r\n        if(ans == -1) return -1;\r\n        return ans+1;\r\n    }\r\n    exit(-1);\r\n}\r\n\r\nint dfs_last(int u, int p) {\r\n    if((int) graph[u].size() == 1) return u;\r\n    for(auto v : graph[u]) {\r\n        if(v == p) continue;\r\n        return dfs_last(v, u);\r\n    }\r\n    exit(-1);\r\n}\r\n\r\nint main(){\r\n    ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);\r\n    ll i, u, v;\r\n    cin >> n;\r\n    graph.assign(n, vll());\r\n    for(i = 0; i < n-1; i++) {\r\n        cin >> u >> v;\r\n        u--; v--;\r\n        graph[u].pb(v);\r\n        graph[v].pb(u);\r\n    }\r\n    vi diameter = get_diameter_vector();\r\n    // echo(diameter);\r\n    check(diameter[0]);\r\n    check(diameter.back());\r\n    if((int) diameter.size() % 2 == 0) {\r\n        cout << \"-1\\n\";\r\n        return 0;\r\n    }\r\n    u = diameter[(int)diameter.size()/2];\r\n    check(u);\r\n    ll mn = inf, imn = -1;\r\n    for(auto el : graph[u]) {\r\n        int ans = dfs_min_heigh(el, u);\r\n        if(ans == -1) continue;\r\n        if(ans < mn) {\r\n            mn = ans;\r\n            imn = el;\r\n        }\r\n    }\r\n    if(imn != -1) {\r\n        u = dfs_last(imn, u);\r\n        check(u);\r\n    }\r\n\r\n    cout << \"-1\\n\";\r\n    \r\n\r\n    return 0;\r\n}\r\n"
}