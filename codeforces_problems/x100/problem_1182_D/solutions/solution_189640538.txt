{
    "id": 189640538,
    "contestId": 1182,
    "creationTimeSeconds": 1674045770,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 31539200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int base = 1e6 + 7;\nconst int MOD = 998244353; \nconst int MAX = 1e5 + 5;\nvector<int> adj[MAX];\nint hsh1[MAX],hsh2[MAX], ok[MAX];\nmultiset<int> hash_container[MAX];\nint cum_ok[MAX];\nbool chk(int i){\n  if(hash_container[i].size() <= 1) return 1;\n  int x = *hash_container[i].begin(), y = *hash_container[i].rbegin();\n  return x == y;\n}\nvoid dfs(int u,int par = 0){\n  ok[u] = 1;\n  int pre = -1;\n  for(auto &v : adj[u]){\n    if(v == par) continue;\n    dfs(v, u);\n    hash_container[u].insert(hsh1[v]);\n    if(pre == -1) pre = hsh1[v];\n    if(hsh1[v] != pre) ok[u] = 0;\n    hsh1[u] += hsh1[v] * base;\n    hsh1[u] %= MOD;\n    ok[u] &= ok[v];\n    cum_ok[u] += ok[v];\n  }\n  hsh1[u] += adj[u].size();\n}\nint ans = -1;\nvoid reroot(int u,int v){\n  hsh1[u] -= hsh1[v] * base;\n  cum_ok[u] -= ok[v];\n  ok[u] = (cum_ok[u] + 1 == adj[u].size());\n  hash_container[u].erase(hash_container[u].find(hsh1[v]));\n  ok[u] &= chk(u);\n  hsh1[u] %= MOD;\n  hsh1[u] = (hsh1[u] + MOD) % MOD;\n  hsh1[v] += base * hsh1[u];\n  hsh1[v] %= MOD;\n  cum_ok[v] += ok[u];\n  hash_container[v].insert(hsh1[u]);\n  ok[v] = cum_ok[v] == adj[v].size();\n  ok[v] &= chk(v);\n  \n}\nvoid dfs2(int u, int par = 0){\n  if(ok[u]) ans = u;\n  for(auto &v : adj[u]){\n    if(v == par) continue;\n    reroot(u, v);\n    dfs2(v, u);\n    reroot(v, u);\n  }\n}\nvoid solve(){\n  int n;\n  cin >> n;\n  for(int i = 1; i < n; i++){\n    int x, y;\n    cin >> x >> y;\n    adj[x].push_back(y);\n    adj[y].push_back(x);\n  }\n  dfs(1);\n  if(ok[1]){\n    cout << 1 << '\\n';\n    return ;\n  }\n  dfs2(1);\n  cout << ans << '\\n';\n}\n\nint32_t main(){\n  ios_base::sync_with_stdio(0), cin.tie(0);\n  int t = 1;\n  // cin >> t;\n  while(t--) solve();\n}\n \t\t   \t\t  \t   \t \t\t\t \t  \t \t \t\t\t\t"
}