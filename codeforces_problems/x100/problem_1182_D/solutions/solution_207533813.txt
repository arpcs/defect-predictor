{
    "id": 207533813,
    "contestId": 1182,
    "creationTimeSeconds": 1685254176,
    "relativeTimeSeconds": 6276,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Joydeep8822154667"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1685247900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 17612800,
    "source": "#ifndef _GLIBCXX_NO_ASSERT\r\n#include <cassert>\r\n#endif\r\n#include <cctype>\r\n#include <cerrno>\r\n#include <cfloat>\r\n#include <ciso646>\r\n#include <climits>\r\n#include <clocale>\r\n#include <cmath>\r\n#include <csetjmp>\r\n#include <csignal>\r\n#include <cstdarg>\r\n#include <cstddef>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <ctime>\r\n\r\n// C++\r\n#include <algorithm>\r\n#include <bitset>\r\n#include <complex>\r\n#include <deque>\r\n#include <exception>\r\n#include <fstream>\r\n#include <functional>\r\n#include <iomanip>\r\n#include <ios>\r\n#include <iosfwd>\r\n#include <iostream>\r\n#include <istream>\r\n#include <iterator>\r\n#include <limits>\r\n#include <list>\r\n#include <locale>\r\n#include <map>\r\n#include <memory>\r\n#include <new>\r\n#include <numeric>\r\n#include <ostream>\r\n#include <queue>\r\n#include <set>\r\n#include <sstream>\r\n#include <stack>\r\n#include <stdexcept>\r\n#include <streambuf>\r\n#include <string>\r\n#include <typeinfo>\r\n#include <utility>\r\n#include <valarray>\r\n#include <vector>\r\n\r\n#if __cplusplus >= 201103L\r\n#include <array>\r\n#include <atomic>\r\n#include <chrono>\r\n#include <codecvt>\r\n#include <condition_variable>\r\n#include <forward_list>\r\n#include <future>\r\n#include <initializer_list>\r\n#include <mutex>\r\n#include <random>\r\n#include <ratio>\r\n#include <regex>\r\n#include <scoped_allocator>\r\n#include <system_error>\r\n#include <thread>\r\n#include <tuple>\r\n#include <typeindex>\r\n#include <type_traits>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#endif\r\n\r\n#if __cplusplus >= 201402L\r\n#include <shared_mutex>\r\n#endif\r\n// #include <ext/pb_ds/assoc_container.hpp>\r\n// #include <ext/pb_ds/tree_policy.hpp>\r\n// using namespace __gnu_pbds;\r\n\r\nusing namespace std;\r\n#define ll long long int\r\nconst ll mod = 998244353;\r\n\r\n// #define ordered_set tree<ll, null_type,less<ll>, rb_tree_tag,tree_order_statistics_node_update>\r\n\r\nll modFact(ll n, ll p)\r\n{\r\n    if (n >= p)\r\n        return 0;\r\n\r\n    ll result = 1;\r\n    for (ll i = 1; i <= n; i++)\r\n        result = (result * i) % p;\r\n\r\n    return result;\r\n}\r\nll nextPerfectSquare(ll N)\r\n{\r\n    ll nextN = floor(sqrt(N)) + 1;\r\n\r\n    return nextN;\r\n}\r\n// ll power(ll x, ll y)\r\n// {\r\n//     ll ans = 1LL;\r\n//     if (y == 0)\r\n//     {\r\n//         return 1LL;\r\n//     }\r\n//     // cout<<y<<endl;\r\n//     while (y > 0)\r\n//     {\r\n//         y--;\r\n//         ans = ans * x;\r\n//         // cout<<x<<endl;\r\n//     }\r\n//     return ans;\r\n// }\r\n\r\nll sum_of_digit(ll n, ll val)\r\n{\r\n    if (n < 10)\r\n    {\r\n        val = val + n;\r\n        return val;\r\n    }\r\n    return sum_of_digit(n / 10, (n % 10) + val);\r\n}\r\nconst ll N = 2e5+4;\r\nvector<ll> vis(N, 0);\r\nvector<ll> vis1(N, 0);\r\nvector<ll> in(N, 0);\r\nvector<ll> level(N, 0);\r\nvector<ll> sub(N, 0);\r\nvector<ll> adj[N];\r\nvector<ll> lev[N];\r\nll n;\r\nvoid dfs(ll node,ll p){\r\n    sub[node]=1;\r\n    for(auto it:adj[node]){\r\n        if(it!=p){\r\n            dfs(it,node);\r\n            sub[node]+=sub[it];\r\n        }\r\n    }\r\n}\r\n\r\nbool check(ll node)\r\n{\r\n    queue<ll> q;\r\n    q.push(node);\r\n    vis1[node]=1;\r\n    while(!q.empty()){\r\n        ll node=q.front();\r\n        q.pop();\r\n        for(auto it:adj[node]){\r\n            if(!vis1[it]){\r\n                level[it]=1+level[node];\r\n                vis1[it]=1;\r\n                q.push(it);\r\n            }\r\n\r\n        }\r\n    }\r\n    dfs(node,-1);\r\n    \r\n    for(ll i=1;i<=n;i++){\r\n        lev[level[i]].push_back(i);\r\n        // cout<<level[i]<<\" \";\r\n    }\r\n    // cout<<endl;\r\n\r\n    for(ll i=0;i<=n;i++){\r\n        set<ll>st;\r\n        for(auto it:lev[i]){\r\n            st.insert(sub[it]);\r\n            // cout<<it<<\" \";\r\n        }\r\n        // cout<<endl;\r\n        if(st.size()>=2){\r\n            return false;\r\n\r\n        }\r\n    }\r\n    return true;\r\n    \r\n\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    ll t;\r\n\r\n    // cin >> t;\r\n\r\n    t = 1;\r\n\r\n    for (ll tt = 1; tt <= t; tt++)\r\n    {\r\n        \r\n        cin >> n;\r\n        for (int i = 0; i < n - 1; i++)\r\n        {\r\n            ll x, y;\r\n            cin >> x >> y;\r\n            adj[x].push_back(y);\r\n            adj[y].push_back(x);\r\n            in[x]++;\r\n            in[y]++;\r\n        }\r\n        if(n==1){\r\n                cout<<-1<<endl;\r\n                continue;\r\n        }\r\n        if(n==2){\r\n            cout<<1<<endl;\r\n            continue;\r\n        }\r\n        queue<ll> q;\r\n        set<ll> st;\r\n        for (ll i = 1; i <= n; i++)\r\n        {\r\n            if (in[i] == 1)\r\n            {\r\n                // st.insert(i);\r\n                q.push(i);\r\n                vis[i] = 1;\r\n            }\r\n        }\r\n        ll root = -1;\r\n        while (!q.empty())\r\n        {\r\n            ll x = q.front();\r\n            // st.erase(x);\r\n\r\n            vis[x] = 1;\r\n            if (in[x] <= 0)\r\n            {\r\n                root = x;\r\n                break;\r\n            }\r\n            ll ct = 0;\r\n            // cout << x << endl;\r\n            for (auto it : adj[x])\r\n            {\r\n\r\n                in[it]--;\r\n                if (!vis[it])\r\n                {\r\n                    // ct++;\r\n                    // cout << it << \" \" << in[it] << \" \"<<ct<<endl;\r\n                    if (in[it] == 1)\r\n                    {\r\n                        vis[it] = 1;\r\n                        // st.insert(it);\r\n                        q.push(it);\r\n                    }\r\n                }\r\n            }\r\n            if (root != -1)\r\n            {\r\n                break;\r\n            }\r\n            \r\n\r\n            \r\n            q.pop();\r\n        }\r\n        if (check(root))\r\n        {\r\n            cout << root << endl;\r\n        }\r\n        else\r\n        {\r\n            cout << \"-1\" << endl;\r\n        }\r\n    }\r\n}"
}