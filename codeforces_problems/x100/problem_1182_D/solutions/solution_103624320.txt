{
    "id": 103624320,
    "contestId": 1182,
    "creationTimeSeconds": 1610017666,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "codrac"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 3686400,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n#define fastio                        \\\r\n    ios_base::sync_with_stdio(false); \\\r\n    cin.tie(NULL);                    \\\r\n    cout.tie(NULL);\r\n#define arrinit \\\r\n    int n;      \\\r\n    cin >> n;   \\\r\n    int arr[n]; \\\r\n    loop(i, n) { cin >> arr[i]; }\r\n#define warrinit(n) \\\r\n    int arr[n];     \\\r\n    loop(i, n) { cin >> arr[i]; }\r\n#define init(arr, n, val)       \\\r\n    for (int i = 0; i < n; i++) \\\r\n        arr[i] = val;\r\n#define pref(arr, ps, n) \\\r\n    ps[0] = arr[0];      \\\r\n    loops(i, 1, n)       \\\r\n        ps[i] = arr[i] + ps[i - 1];\r\n#define ret return\r\n#define cont continue\r\n#define endl \"\\n\"\r\n#define ll long long\r\n\r\n#define loops(i, s, n) for (int i = s; i < n; i++)\r\n#define loop(i, n) for (int i = 0; i < n; i++)\r\n#define loopr(i, s, e) for (int i = s; i >= e; i--)\r\n#define loopitr(mp) for (auto itr = mp.begin(); itr != mp.end(); itr++)\r\n\r\n#define pii pair<int, int>\r\n#define pll pair<ll, ll>\r\n#define vi vector<int>\r\n#define pub push_back\r\n#define pob pop_back\r\n#define vpii vector<pair<int, int>>\r\n#define vall(v) v.begin(), v.end()\r\n#define mkp make_pair\r\n#define ff first\r\n#define ss second\r\n\r\n#define print(arr)        \\\r\n    for (auto x : arr)    \\\r\n        cout << x << \" \"; \\\r\n    cout << endl;\r\n#define cnt_bits __builtin_popcount\r\n#define ordered_set tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>\r\n#define eps 1e-9\r\nconst int mod = 1000000007;\r\n\r\nint leaf;\r\nint mn;\r\nvoid dfsUtil(int u, int p, vi adj[], int d = 0){\r\n    if(adj[u].size()-1 == 0){\r\n        if(d < mn) { leaf = u;}\r\n    }\r\n\r\n    for(auto v : adj[u]){\r\n        if(v != u) dfsUtil(v, u, adj, d+1);\r\n    }\r\n}\r\n\r\nint dfs(int r, vi adj[]){\r\n    mn = INT32_MAX;\r\n    dfsUtil(r, -1, adj);\r\n    ret leaf;\r\n}\r\n\r\nint main()\r\n{\r\n    fastio;\r\n    int n;\r\n    cin >> n;\r\n    int indeg[n];\r\n    init(indeg, n, 0);\r\n    vi adj[n];\r\n    loop(i, n - 1)\r\n    {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        u--, v--;\r\n        indeg[u]++;\r\n        indeg[v]++;\r\n        adj[u].pub(v);\r\n        adj[v].pub(u);\r\n    }\r\n    if (n == 1)\r\n    {\r\n        cout << 1 << endl;\r\n        ret 0;\r\n    }\r\n    if (n == 2)\r\n    {\r\n        cout << 1 << endl;\r\n        ret 0;\r\n    }\r\n\r\n    bool vis[n];\r\n    init(vis, n, false);\r\n    queue<int> q;\r\n\r\n    loop(i, n)\r\n    {\r\n        if (indeg[i] == 1)\r\n            q.push(i);\r\n    }\r\n    q.push(-1);\r\n\r\n    int cen1 = -1, cen2 = -1;\r\n    while (q.size() > 0)\r\n    {\r\n        int u = q.front();\r\n        q.pop();\r\n        if (u == -1)\r\n        {\r\n            q.push(-1);\r\n            if (q.size() == 2)\r\n            {\r\n                cen1 = q.front();\r\n                break;\r\n            }\r\n            else if (q.size() == 3)\r\n            {\r\n                cen1 = q.front();\r\n                q.pop();\r\n                cen2 = q.front();\r\n                break;\r\n            }\r\n            else if (q.front() == -1)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            vis[u] = true;\r\n            for (auto v : adj[u])\r\n                if (!vis[v])\r\n                {\r\n                    indeg[v]--;\r\n                    if (indeg[v] == 1)\r\n                        q.push(v);\r\n                }\r\n        }\r\n    }\r\n\r\n    if (cen1 == -1 && cen2 == -1)\r\n    {\r\n        cout << -1 << endl;\r\n        ret 0;\r\n    }\r\n    while (q.size() > 0)\r\n        q.pop();\r\n\r\n    bool cond = true;\r\n    auto solve = [&](int cen) {\r\n        init(vis, n, false);\r\n        q.push(cen1);\r\n        vis[cen] = true;\r\n        while (q.size() > 0)\r\n        {\r\n            int u = q.front();\r\n            q.pop();\r\n            int num;\r\n            for (auto v : adj[u])\r\n                if (!vis[v])\r\n                {\r\n                    num = adj[v].size() - 1;\r\n                    break;\r\n                }\r\n\r\n            for (auto v : adj[u])\r\n            {\r\n                if (!vis[v])\r\n                {\r\n                    vis[v] = true;\r\n                    if (adj[v].size() - 1 != num)\r\n                    {\r\n                        cond = false;\r\n                        break;\r\n                    }\r\n                    q.push(v);\r\n                }\r\n            }\r\n\r\n            if (!cond)\r\n                break;\r\n        }\r\n    };\r\n\r\n    solve(cen1);\r\n    if (cond)\r\n    {\r\n        cout << cen1 + 1 << endl;\r\n        ret 0;\r\n    }\r\n    solve(cen2);\r\n    if (cond)\r\n        cout << cen2 + 1 << endl;\r\n    else\r\n    {\r\n        if(cen2 == -1){\r\n            int leaf = dfs(cen2, adj);\r\n            solve(leaf);\r\n            if(cond)\r\n                cout<<leaf+1<<endl;\r\n            else cout<<-1<<endl;\r\n        }\r\n        else\r\n            cout<<-1<<endl;\r\n        \r\n    }\r\n}",
    "defect_evaluation_v4": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 0,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 100,
        "sortings": 0,
        "search": 0,
        "trees": 100,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 0,
        "readable": 0,
        "well-named": 0,
        "efficient": 0,
        "reusable": 0,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 0,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 0,
        "wrong solution": 95,
        "compilation error": 5,
        "runtime error": 0
    }
}