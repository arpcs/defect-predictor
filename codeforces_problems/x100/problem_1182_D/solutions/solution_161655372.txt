{
    "id": 161655372,
    "contestId": 1182,
    "creationTimeSeconds": 1656085474,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Giggity-"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 14950400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nlong long n , dp [200005] , siz [200005] , mod = 998244353 , p = 5783 , ff;\r\nvector < int > gr [200005];\r\nlong long pw ( long long x , long long y )\r\n{\r\n    if ( y == 0 ) return 1;\r\n    long long ans = pw ( x , y / 2 );\r\n    ans = ( ans * ans ) % mod;\r\n    if ( y % 2 ) ans = ( ans * x ) % mod;\r\n    return ans;\r\n}\r\nvoid dfs ( int x , int p )\r\n{\r\n    for ( int i = 0 ; i < gr [x] . size () ; i ++ )\r\n    {\r\n        int u = gr [x][i];\r\n        if ( u == p ) continue;\r\n        dfs ( u , x );\r\n        dp [x] = ( dp [x] + dp [u] ) % mod;\r\n        siz [x] += siz [u];\r\n    }\r\n    dp [x] = ( dp [x] + pw ( p , siz [x] ) * gr [x] . size () ) % mod;\r\n}\r\nvoid go ( int x , int p )\r\n{\r\n    int f = -1;\r\n    if ( ff == 0 ) return;\r\n    for ( int i = 0 ; i < gr [x] . size () ; i ++ )\r\n    {\r\n        int u = gr [x][i];\r\n        if ( u == p ) continue;\r\n        if ( f == -1 ) f = dp [u];\r\n        else if ( f != dp [u] )\r\n        {\r\n            ff = 0;\r\n            break;\r\n        }\r\n        go ( u , x );\r\n    }\r\n}\r\nvoid root ( int x , int p )\r\n{\r\n    if ( gr [x] . size () != 1 )\r\n    {\r\n        ff = 1;\r\n        int fff = 1 , f = -1;\r\n        for ( int i = 0 ; i < gr [x] . size () ; i ++ )\r\n        {\r\n            int u = gr [x][i];\r\n            if ( f == -1 ) f = dp [u];\r\n            else if ( f != dp [u] )\r\n            {\r\n                fff = 0;\r\n                break;\r\n            }\r\n        }\r\n        if ( fff )\r\n        {\r\n            go ( x , 0 );\r\n            if ( ff ) cout << x;\r\n            else cout << -1;\r\n            exit ( 0 );\r\n        }\r\n    }\r\n    for ( int i = 0 ; i < gr [x] . size () ; i ++ )\r\n    {\r\n        int u = gr [x][i];\r\n        if ( u == p ) continue;\r\n        long long odpx = dp [x] , odpu = dp [u];\r\n\r\n        dp [x] = ( dp [x] - dp [u] + mod ) % mod;\r\n        dp [x] = ( dp [x] - ( pw ( p , siz [x] ) * gr [x] . size () ) % mod + mod ) % mod;\r\n        dp [u] = ( dp [u] - ( pw ( p , siz [u] ) * gr [u] . size () ) % mod + mod ) % mod;\r\n\r\n\r\n        siz [x] -= siz [u];\r\n        siz [u] += siz [x];\r\n\r\n        dp [x] = ( dp [x] + pw ( p , siz [x] ) * gr [x] . size () ) % mod;\r\n        dp [u] = ( dp [u] + pw ( p , siz [u] ) * gr [u] . size () ) % mod;\r\n        dp [u] = ( dp [u] + dp [x] ) % mod;\r\n\r\n        root ( u , x );\r\n\r\n        dp [x] = odpx , dp [u] = odpu;\r\n\r\n        siz [u] -= siz [x];\r\n        siz [x] += siz [u];\r\n\r\n    }\r\n    dp [x] = ( dp [x] + pw ( p , siz [x] ) * gr [x] . size () ) % mod;\r\n}\r\nint main()\r\n{\r\n    cin >> n;\r\n    for ( int i = 2 ; i <= n ; i ++ )\r\n    {\r\n        int x , y;\r\n        cin >> x >> y;\r\n        gr [x] . push_back ( y );\r\n        gr [y] . push_back ( x );\r\n    }\r\n    dfs ( 1 , 0 );\r\n    root ( 1 , 0 );\r\n    cout << -1;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
}