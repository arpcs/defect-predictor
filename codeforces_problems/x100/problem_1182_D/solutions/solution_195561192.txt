{
    "id": 195561192,
    "contestId": 1182,
    "creationTimeSeconds": 1677757327,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "CQYZWJH"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 7884800,
    "source": "// LUOGU_RID: 103449548\n#include <bits/stdc++.h>\r\n#define re(i, x, y) for (int i = (x); i < (y); ++i)\r\n#define rep(i, x, y) for (int i = (x); i <= (y); ++i)\r\n\r\nusing namespace std;\r\n\r\nconst int maxn = 1e5 + 5;\r\nint n;\r\nint fr[maxn], c[maxn], dis[maxn], d[maxn];\r\nvector<int> g[maxn], S; \r\n\r\nbool dfs(int u, int fa) {\r\n    dis[u] = dis[fa] + 1;\r\n    if (!~d[dis[u]]) {\r\n        d[dis[u]] = g[u].size();\r\n    }\r\n    else if (d[dis[u]] != g[u].size()) {\r\n        return false;\r\n    }\r\n    for (auto v : g[u]) {\r\n        if ((v ^ fa) && !dfs(v, u)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nvoid chk(int x) {\r\n    memset(d, -1, sizeof(d));\r\n    if (dfs(x, 0)) {\r\n        printf(\"%d\\n\", x);\r\n        exit(0);\r\n    }\r\n}\r\n\r\nint main() {\r\n#ifdef sword\r\n    freopen(\"test.in\", \"r\", stdin);\r\n#endif\r\n\r\n    scanf(\"%d\", &n);\r\n    if (n == 1) {\r\n        puts(\"1\");\r\n        return 0;\r\n    }\r\n    int u, v;\r\n    re(i, 1, n) {\r\n        scanf(\"%d%d\", &u, &v);\r\n        g[u].emplace_back(v), g[v].emplace_back(u);\r\n    }\r\n    int cc = 0;\r\n    rep(i, 1, n) {\r\n        if (g[i].size() == 1) {\r\n            S.emplace_back(i);\r\n            c[i] = 1;\r\n            fr[i] = i;\r\n        }\r\n        else if (g[i].size() == 2) {\r\n            ++cc;\r\n        }\r\n        else {\r\n            cc = 114514;\r\n        }\r\n    }\r\n    if (cc == n - 2) {\r\n        printf(\"%d\\n\", S[0]);\r\n        return 0;\r\n    }\r\n    for ( ; ; ) {\r\n        vector<int> T;\r\n        for (auto u : S) {\r\n            for (auto v : g[u]) {\r\n                if (!c[v]) {\r\n                    T.emplace_back(v);\r\n                    fr[v] = fr[u];\r\n                }\r\n                ++c[v];\r\n            }\r\n        }\r\n        if (T.empty()) {\r\n            puts(\"-1\");\r\n            return 0;\r\n        }\r\n        if (T.size() == 1 && c[T[0]] == g[T[0]].size()) {\r\n            printf(\"%d\\n\", T[0]);\r\n            return 0;\r\n        }\r\n        int x = c[T[0]];\r\n        for (auto u : T) {\r\n            if (c[u] + 1 != g[u].size()) {\r\n                chk(fr[u]);\r\n                puts(\"-1\");\r\n                return 0;\r\n            }\r\n            if (x != c[u]) {\r\n                chk(fr[u]), chk(fr[T[0]]);\r\n                puts(\"-1\");\r\n                return 0;\r\n            }\r\n        }\r\n        S = T;\r\n    }\r\n    return 0;\r\n}"
}