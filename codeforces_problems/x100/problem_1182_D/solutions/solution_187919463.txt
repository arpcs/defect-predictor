{
    "id": 187919463,
    "contestId": 1182,
    "creationTimeSeconds": 1672835161,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "strange757"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 17100800,
    "source": "// LUOGU_RID: 98686058\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 1e5 + 5;\r\nint n, head[N], tot, st[N], top, sz[N], dep[N], mx[N], d[N];\r\nint f[N], f1, pos, rt, rt2, len2;\r\nstruct node{\r\n    int next, to;\r\n}edge[N<<2];\r\nvoid add(int u, int v){\r\n    tot++;\r\n    edge[tot].next = head[u];\r\n    edge[tot].to = v;\r\n    head[u] = tot;\r\n}\r\nvoid dfs(int u, int fa){\r\n    sz[u] = 1;\r\n    for(int i = head[u]; i; i = edge[i].next){\r\n        int v = edge[i].to;\r\n        if(v == fa) continue;\r\n        dfs(v, u);\r\n        sz[u] += sz[v];\r\n        mx[u] = max(mx[u], sz[v]);\r\n    }\r\n    mx[u] = max(mx[u], n - sz[u]);\r\n    if(mx[u] <= n/2) rt = u;\r\n}\r\nvoid dfs2(int u, int fa){\r\n    dep[u] = dep[fa] + 1;\r\n    if(!f[dep[u]]) f[dep[u]] = d[u];\r\n    else{\r\n        if(f[dep[u]] != d[u]) f1 = 0;\r\n    }\r\n    for(int i = head[u]; i; i = edge[i].next){\r\n        int v = edge[i].to;\r\n        if(v == fa) continue;\r\n        dfs2(v, u);\r\n    }\r\n}\r\nbool check(int x){\r\n    f1 = 1;\r\n    memset(f, 0, sizeof(f));\r\n    dfs2(x, 0);\r\n    return f1;\r\n}\r\nint pd(int u, int fa){\r\n    if(d[u] > 2) return 0;\r\n    if(d[u] == 1){\r\n        pos = u;\r\n        return 1;\r\n    }\r\n    for(int i = head[u]; i; i = edge[i].next){\r\n        int v = edge[i].to;\r\n        if(v == fa) continue;\r\n        int w = pd(v, u);\r\n        if(!w) return 0;\r\n        return w + 1;\r\n    }\r\n}\r\nint main(){\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0), cout.tie(0);\r\n    cin >> n;\r\n    int u, v;\r\n    for(int i = 1; i < n; i++){\r\n        cin >> u >> v;\r\n        add(u, v), add(v, u);\r\n        d[u]++, d[v]++;\r\n    }\r\n    dfs(1, 0);\r\n    if(check(rt)){\r\n        cout << rt;\r\n        return 0;\r\n    }\r\n    for(int i = head[rt]; i; i = edge[i].next){\r\n        int v = edge[i].to;\r\n        int w = pd(v, rt);\r\n        if(!w) continue;\r\n        if(rt2 && w != len2){\r\n            if(check(pos)){\r\n                cout << pos;\r\n                return 0;\r\n            }\r\n            break;\r\n        }\r\n        if(!rt2){\r\n            rt2 = pos, len2 = w;\r\n            if(check(pos)){\r\n                cout << pos;\r\n                return 0; \r\n            }\r\n        }\r\n    }\r\n    cout << -1;\r\n    return 0;\r\n}"
}