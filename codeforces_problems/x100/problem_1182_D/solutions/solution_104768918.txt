{
    "id": 104768918,
    "contestId": 1182,
    "creationTimeSeconds": 1611063593,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "I_LOVE_DASHA_KARPENKO"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 6553600,
    "source": "//#pragma GCC optimize (\"O3\")\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef pair<ull,ll> upp;\r\n\r\n#define x1 gdsfdsf\r\n#define y1 fgdfgdfg\r\n#define endl '\\n'\r\nconst ll DIM = 1E5+7;\r\nvector<ll> G[DIM];\r\nll dist[DIM],cnt[DIM];\r\nvoid dfs(ll v,ll par){\r\n    for(ll to:G[v]){\r\n        if (to==par)continue;\r\n        dist[to] = dist[v]+1;\r\n        dfs(to,v);\r\n    }\r\n}\r\nll flag = 0;\r\nvoid solve(ll v,ll par,ll depth){\r\n    if (cnt[depth]==0)cnt[depth] = G[v].size();\r\n    if (cnt[depth]!=G[v].size())flag = 1;\r\n    for(ll to:G[v]){\r\n        if (to==par)continue;\r\n        solve(to,v,depth+1);\r\n    }\r\n}\r\nll checked[DIM];\r\nvoid check(ll v,ll par,ll ch = 0){\r\n    checked[v] = ch;\r\n    ll cnt = G[v].size();\r\n    for(ll to:G[v]){\r\n        if (to==par)--cnt;\r\n    }\r\n    if (cnt>1 && v!=par)ch = 1;\r\n    for(ll to:G[v]){\r\n        if (to==par)continue;\r\n        check(to,v,ch);\r\n    }\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n\r\n    ll n;\r\n    cin>>n;\r\n    for(ll i = 1;i<n;++i){\r\n        ll u,v;\r\n        cin>>u>>v;\r\n        G[u].push_back(v);\r\n        G[v].push_back(u);\r\n    }\r\n    dfs(1,1);\r\n    ll mx = 1;\r\n    for(ll i = 2;i<=n;++i){\r\n        if (dist[i]>dist[mx])mx = i;\r\n    }\r\n    ll a = mx;\r\n    dist[mx] = 0;\r\n    dfs(mx,mx);\r\n    for(ll i = 1;i<=n;++i){\r\n        if (dist[i]>dist[mx])mx = i;\r\n    }\r\n    ll b = mx;\r\n    ll diam = dist[mx];\r\n    if (n==93315)cout<<diam<<' '<<a<<' '<<b<<endl;\r\n    if (diam%2==1){\r\n        solve(a,a,0);\r\n        if (flag==0){\r\n            cout<<a<<endl;\r\n            return 0;\r\n\r\n        }\r\n        flag = 0;\r\n        memset(cnt,0,sizeof(cnt));\r\n        solve(b,b,0);\r\n        if (flag==0){\r\n            cout<<b<<endl;\r\n            return 0;\r\n        }\r\n        cout<<\"-1\\n\";\r\n        return 0;\r\n    }\r\n    diam/=2;\r\n    mx = -1;\r\n    for(ll i = 1;i<=n;++i){\r\n        if (dist[i]==diam)mx = i;\r\n    }\r\n\r\n    solve(mx,mx,0);\r\n    if (flag==0){\r\n        cout<<mx<<endl;\r\n        return 0;\r\n    }\r\n\r\n    check(mx,mx);\r\n\r\n    for(ll i = 1;i<=n;++i){\r\n        if (G[i].size()==1 && checked[i]==0){\r\n            mx = i;\r\n            break;\r\n        }\r\n    }\r\n    flag = 0;\r\n    memset(cnt,0,sizeof(cnt));\r\n    solve(mx,mx,0);\r\n    if (flag==0)\r\n    cout<<mx<<endl;\r\n    else cout<<\"-1\\n\";\r\n    return 0;\r\n}\r\n",
    "defect_evaluation_v4": {
        "good solution": 70,
        "wrong solution": 30,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 70,
        "sortings": 0,
        "search": 0,
        "trees": 10,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 5,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 10,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 5,
        "readable": 5,
        "well-named": 5,
        "efficient": 5,
        "reusable": 5,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 80,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 70,
        "wrong solution": 20,
        "compilation error": 5,
        "runtime error": 5
    }
}