{
    "id": 188223127,
    "contestId": 1182,
    "creationTimeSeconds": 1673014310,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "LLYYCCZZ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 10444800,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 10;\r\n\r\nint n;\r\n\r\nvector<int> g[N];\r\n\r\nint siz[N] , rt , mn = 1e9 , dep[N];\r\n\r\nvoid dfs(int u , int father) {\r\n    siz[u] = 1;\r\n    int mx = 0;\r\n    for(auto v : g[u]) {\r\n        if(v == father) continue;\r\n        dep[v] = dep[u] + 1;\r\n        dfs(v , u);\r\n        siz[u] += siz[v];\r\n        mx = max(mx , siz[v]);\r\n    }\r\n    mx = max(mx , n - siz[u]);  \r\n    if(mx < mn) mn = mx , rt = u;\r\n    return;\r\n}\r\n\r\nint deg[N] , krt = 0;\r\n\r\nint redfs(int u , int father) {\r\n    if(deg[u] > 2) return 0;\r\n    if(deg[u] == 1) {\r\n        krt = u;\r\n        return 1;\r\n    }\r\n    for(auto v : g[u]) {\r\n        if(v == father) continue;\r\n        int res = redfs(v , u);\r\n        if(!res) return 0;\r\n        else return res + 1;\r\n    }\r\n    return 1;\r\n}\r\n\r\nvector<int> vec[N];\r\n\r\nvoid check(int x) {\r\n    dfs(x , -1);\r\n    for(int i = 1 ; i <= n ; ++ i) vec[i].clear();\r\n    for(int i = 1 ; i <= n ; ++ i) vec[dep[i]].push_back(i);\r\n    for(int i = 0 ; i < n ; ++ i) {\r\n        for(int j = 1 ; j < vec[i].size() ; ++ j) {\r\n            if(deg[vec[i][j]] != deg[vec[i][0]]) return;\r\n        }\r\n    }\r\n    cout << x << endl;\r\n    exit(0);\r\n}\r\n\r\nint main(void) {\r\n\r\n    scanf(\"%d\" , &n);\r\n\r\n    for(int i = 1 ; i < n ; ++ i) {\r\n        int u , v;\r\n        scanf(\"%d%d\" , &u , &v);\r\n        g[u].emplace_back(v) , g[v].emplace_back(u);\r\n        deg[u] ++ , deg[v] ++ ;\r\n    }\r\n\r\n    dfs(1 , -1);\r\n\r\n    check(rt);\r\n\r\n    redfs(rt , -1);\r\n\r\n    int lst = 0;\r\n\r\n    for(auto v : g[rt]) {\r\n        int len = redfs(v , rt);\r\n        if(!len) continue;\r\n        if(!lst) {\r\n            check(krt);\r\n            lst = len;\r\n        }\r\n        else if(len != lst) {\r\n            check(krt);\r\n            break;\r\n        }\r\n    }\r\n\r\n    puts(\"-1\");\r\n    \r\n    return 0;\r\n\r\n}"
}