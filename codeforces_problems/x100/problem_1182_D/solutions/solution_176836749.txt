{
    "id": 176836749,
    "contestId": 1182,
    "creationTimeSeconds": 1666073399,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Wolfram05"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 234,
    "memoryConsumedBytes": 3174400,
    "source": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nbool *visited;\r\n\r\nbool recurcheck(vector<vector<int>> &adj, int node)\r\n{\r\n    int temp, count = 0;\r\n    if(!visited[node])\r\n    {\r\n        visited[node] = true;\r\n        for(int i = 0; i < adj[node].size(); i++)\r\n        {\r\n            if(visited[adj[node][i]])\r\n            {\r\n                count++;\r\n                continue;\r\n            }\r\n            if(i == count)\r\n            {\r\n                temp = adj[adj[node][i]].size();\r\n                continue;\r\n            }\r\n            if((adj[adj[node][i]].size() != temp) && (!visited[adj[node][i]]) && (temp != 0))\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n        for(int i = 0; i < adj[node].size(); i++)\r\n        {\r\n            if(!recurcheck(adj, adj[node][i]))\r\n            {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nint main()\r\n{\r\n    int n, temp1, temp2;\r\n    cin >> n;\r\n    visited = new bool[n];\r\n    vector<vector<int>> adj(n);\r\n    for(int i = 0; i < n - 1; i++)\r\n    {\r\n        cin >> temp1 >> temp2;\r\n        adj[temp1 - 1].push_back(temp2 - 1);\r\n        adj[temp2 - 1].push_back(temp1 - 1);\r\n    }\r\n    \r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        visited[i] = false;\r\n    }\r\n    \r\n    int root = 0, degree = 0;;\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        if(adj[i].size() > degree)\r\n        {\r\n            root = i;\r\n            degree = adj[i].size();\r\n        }\r\n    }\r\n    int count = 0;\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        if(adj[i].size() == degree)\r\n        {\r\n            count++;\r\n        }\r\n    }\r\n    if(count > 1)\r\n    {\r\n        cout << \"-1\";\r\n        return 0;\r\n    }\r\n    if(recurcheck(adj, root))\r\n    {\r\n        cout << root + 1;\r\n    }\r\n    else \r\n    {\r\n        cout << \"-1\";\r\n    }\r\n    return 0;\r\n}"
}