{
    "id": 100696694,
    "contestId": 1182,
    "creationTimeSeconds": 1607432661,
    "relativeTimeSeconds": 3861,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "mel1c"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1607428800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> iint;\ntypedef pair<ll,ll> llll;\n#define ALL(x) (x).begin(),(x).end()\nconst ll zero = 0;\nconst ll one = 1;\nconst ll INF = 9223372036854775807; //10^18\nconst int inINF = 2147483647; //10^9\nconst ll MOD = 1000000007; //10^9+7\nconst ll MOD2 = 998244353;\nvoid Yes() {printf(\"Yes\\n\");}\nvoid No() {printf(\"No\\n\");}\nvoid YES() {printf(\"YES\\n\");}\nvoid NO() {printf(\"NO\\n\");}\n\nvoid bfs(int u, vector<vector<int>> &G, vector<int> &d, vector<int> &pre){\n    queue<int> q;\n    q.push(u);\n    fill(ALL(d), -1);\n    d[u] = 0;\n    pre[u] = -1;\n    while(!q.empty()){\n        int v = q.front(); q.pop();\n        for (int w : G[v]){\n            if(d[w] != -1) continue;\n            d[w] = d[v] + 1;\n            pre[w] = v;\n            q.push(w);\n        }\n    }\n}\n\nint main(){\n    int N;\n    cin >> N;\n    vector<vector<int>> G(N);\n    vector<int> deg(N, 0);\n    for (int i = 0; i < N-1; i++) {\n        int a, b;\n        cin >> a >> b;\n        a--; b--;\n        deg[a]++;\n        deg[b]++;\n        G[a].push_back(b);\n        G[b].push_back(a);\n    }\n    int u, v;\n    int ch = 0;\n    for (int i = 0; i < N; i++) {\n        if(deg[i] == 1){\n            if(ch == 0){\n                u = i;\n                ch = 1;\n            }\n            else if(ch == 1){\n                v = i;\n                break;\n            }\n        }\n    }\n\n    vector<int> distu(N), preu(N);\n    bfs(u, G, distu, preu);\n    if(distu[v] % 2 == 1){\n        printf(\"%d\\n\", -1);\n        return 0;\n    }\n    int dd = distu[v];\n    int r = v;\n    for (int i = 0; i < dd/2; i++) {\n        r = preu[r];\n    }\n    vector<int> dist(N), pre(N);\n    bfs(r, G, dist, pre);\n\n    vector<int> degree(N, -1);\n    for (int i = 0; i < N; i++) {\n        if(degree[dist[i]] == -1){\n            degree[dist[i]] = deg[i];\n        }\n        else{\n            if(degree[dist[i]] != deg[i]){\n                printf(\"%d\\n\", -1);\n                return 0;\n            }\n        }\n    }\n\n    printf(\"%d\\n\", r+1);\n\n\n\n\n}",
    "defect_evaluation_v4": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 100,
        "sortings": 0,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 10,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 0,
        "readable": 0,
        "well-named": 0,
        "efficient": 0,
        "reusable": 0,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 0,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 80,
        "wrong solution": 15,
        "compilation error": 0,
        "runtime error": 5
    }
}