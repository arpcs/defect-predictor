{
    "id": 134359571,
    "contestId": 1182,
    "creationTimeSeconds": 1636083396,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "QwQcOrZ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\n\nint read()\n{\n\tint s=0;\n\tchar c=getchar(),lc='+';\n\twhile (c<'0'||'9'<c) lc=c,c=getchar();\n\twhile ('0'<=c&&c<='9') s=s*10+c-'0',c=getchar();\n\treturn lc=='-'?-s:s;\n}\nvoid write(int x)\n{\n\tif (x<0) putchar('-'),x=-x;\n\tif (x<10) putchar(x+'0');\n\telse write(x/10),putchar(x%10+'0');\n}\nvoid print(int x,char c='\\n')\n{\n\twrite(x);\n\tputchar(c);\n}\nint n,siz[N],mx[N],deg[N],deep[N],rt,d[N],yes=1;\nvector<int>e[N];\nvoid dfs0(int now,int father)\n{\n\tsiz[now]=1;\n\tfor (int to:e[now])\n\t{\n\t\tif (to==father) continue;\n\t\tdfs0(to,now);\n\t\tsiz[now]+=siz[to];\n\t\tmx[now]=max(mx[now],siz[to]);\n\t}\n\tmx[now]=max(mx[now],n-siz[now]);\n\tif (mx[now]<=n/2) rt=now;\n}\nvoid dfs1(int now,int father)\n{\n\tdeep[now]=deep[father]+1;\n\tif (!d[deep[now]]) d[deep[now]]=deg[now];\n\t\t\t\t  else yes&=d[deep[now]]==deg[now];\n\tfor (int to:e[now])\n\t{\n\t\tif (to==father) continue;\n\t\tdfs1(to,now);\n\t}\n}\n\nsigned main()\n{\n\tn=read();\n\tfor (int i=1;i<n;i++)\n\t{\n\t\tint u=read(),v=read();\n\t\te[u].push_back(v);\n\t\te[v].push_back(u);\n\t\tdeg[u]++,deg[v]++;\n\t}\n\tdfs0(1,0);\n\tdfs1(rt,0);\n\tif (yes) return print(rt),0;\n\twhile (deg[rt]!=1)\n\t{\n\t\tbool flag=0;\n\t\tfor (int to:e[rt]) if (deg[to]<=2&&deep[to]>deep[now]){rt=to,flag=1;break;}\n\t\tif (!flag) return puts(\"-1\");\n\t}\n\tmemset(deep,0,sizeof(deep));\n\tmemset(d,0,sizeof(d));\n\tdfs1(rt,0);\n\t\n\treturn 0;\n}",
    "defect_evaluation_v4": {
        "good solution": 60,
        "wrong solution": 40,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 5,
        "bit manipulation": 0,
        "greedy": 5,
        "brute force": 20,
        "graphs": 40,
        "sortings": 5,
        "search": 5,
        "trees": 0,
        "strings": 5,
        "number theory": 0,
        "combinatorics": 5,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 5,
        "divide and conquer": 5,
        "probabilities": 0,
        "data structures": 20,
        "game theory": 0,
        "2d, 3d": 5,
        "recursive": 0,
        "well-commented": 5,
        "self-documenting": 0,
        "complex": 20,
        "readable": 5,
        "well-named": 5,
        "efficient": 5,
        "reusable": 5,
        "documented": 10,
        "good error-handling": 0,
        "good solution": 10,
        "compilation error": 0,
        "runtime error": 0
    }
}