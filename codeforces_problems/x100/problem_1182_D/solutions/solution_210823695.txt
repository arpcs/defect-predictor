{
    "id": 210823695,
    "contestId": 1182,
    "creationTimeSeconds": 1687575986,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "lijiahe2333"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 312,
    "memoryConsumedBytes": 18329600,
    "source": "#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 5, INF = 1e9 + 7;\r\n\r\nint n, root, kroot, minn, root1, len1;\r\nint h[N], ne[N << 1], e[N << 1], idx;\r\nint du[N], sz[N], dep[N];\r\nvector<int> s[N];\r\n\r\nvoid add(int a, int b) {\r\n    ne[idx] = h[a], e[idx] = b, h[a] = idx ++;\r\n}\r\n\r\nvoid dfs(int u, int fa) {\r\n    sz[u] = 1;\r\n    int maxn = 0;\r\n    for(int i = h[u]; ~i; i = ne[i]) {\r\n        int j = e[i];\r\n        if(j == fa) continue;\r\n        dfs(j, u);\r\n        maxn = max(maxn, sz[j]);\r\n        sz[u] += sz[j];\r\n    }\r\n    maxn = max(maxn, n - sz[u]);\r\n    if(maxn < minn) minn = maxn, root = u;\r\n}\r\n\r\nvoid dfs1(int u, int fa) {\r\n    dep[u] = dep[fa] + 1;\r\n    for(int i = h[u]; ~i; i = ne[i]) {\r\n        int j = e[i];\r\n        if(j == fa) continue;\r\n        dfs1(j, u);\r\n    }\r\n}\r\n\r\nvoid check(int u) {\r\n    dfs1(u, 0);\r\n    for(int i = 1; i <= n; ++ i) s[i].clear();\r\n    for(int i = 1; i <= n; ++ i) {\r\n        s[dep[i]].push_back(i);\r\n    }\r\n    for(int i = 1; i <= n; ++ i) {\r\n        for(int j = 1; j < s[i].size(); ++ j) {\r\n            if(du[s[i][j]] != du[s[i][0]]) return ;\r\n        }\r\n    }\r\n    cout << u << endl;\r\n    exit(0);\r\n}\r\n\r\nint find(int u, int fa) {\r\n    if(du[u] > 2) return 0;\r\n    if(du[u] == 1) {\r\n        kroot = u;\r\n        return 1;\r\n    }\r\n    for(int i = h[u]; ~i; i = ne[i]) {\r\n        int j = e[i];\r\n        if(j == fa) continue;\r\n        int res = find(j, u);\r\n        return res ? res + 1 : res;\r\n    }\r\n}\r\n\r\nint main() {\r\n    \r\n    memset(h, -1, sizeof h);\r\n    \r\n    cin >> n;\r\n    \r\n    for(int i = 1; i < n; ++ i) {\r\n        int a, b;\r\n        cin >> a >> b;\r\n        du[a] ++, du[b] ++;\r\n        add(a, b), add(b, a);\r\n    }\r\n    \r\n    minn = INF;\r\n    \r\n    dfs(1, 0);\r\n    check(root);\r\n    \r\n    int cnt = 0;\r\n    \r\n    for(int i = h[root]; ~i; i = ne[i]) {\r\n        int j = e[i];\r\n        int len = find(j, root);\r\n        if(!len) continue;\r\n        if(len != len1) {\r\n            check(kroot);\r\n            cnt ++;\r\n            len1 = len;\r\n            if(cnt > 1) break;\r\n        }\r\n    }\r\n    \r\n    puts(\"-1\");\r\n    \r\n    return 0;\r\n}"
}