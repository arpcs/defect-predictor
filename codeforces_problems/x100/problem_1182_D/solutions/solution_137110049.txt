{
    "id": 137110049,
    "contestId": 1182,
    "creationTimeSeconds": 1638004052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "andrei_boaca"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 935,
    "memoryConsumedBytes": 33177600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef pair<int,int> pii;\r\nint n;\r\nint deg[100005],nrcod;\r\nvector<int> muchii[100005];\r\nmap<pii,int> cod;\r\nmap<pii,int> whichcod;\r\nmultiset<int> s[100005];\r\nbool use[100005];\r\nint gettype(int nod)\r\n{\r\n    if(s[nod].empty())\r\n        return 1;\r\n    int x=(*s[nod].begin());\r\n    int y=*prev(s[nod].end());\r\n    if(x==y&&x!=-1&&y!=-1)\r\n    {\r\n        int cnt=s[nod].size();\r\n        if(whichcod[{cnt,x}]==0)\r\n        {\r\n            nrcod++;\r\n            whichcod[{cnt,x}]=nrcod;\r\n        }\r\n        return whichcod[{cnt,x}];\r\n    }\r\n    else\r\n        return -1;\r\n}\r\nvoid dfs(int nod,int par)\r\n{\r\n    if(muchii[nod].size()==1&&par!=0)\r\n    {\r\n        cod[{nod,par}]=1;\r\n        whichcod[{0,0}]=1;\r\n        if(nrcod==0)\r\n            nrcod++;\r\n        return;\r\n    }\r\n    for(int i=0;i<muchii[nod].size();i++)\r\n    {\r\n        int fiu=muchii[nod][i];\r\n        if(fiu!=par)\r\n        {\r\n            dfs(fiu,nod);\r\n            s[nod].insert(cod[{fiu,nod}]);\r\n        }\r\n    }\r\n    cod[{nod,par}]=gettype(nod);\r\n}\r\nvoid reroot(int nod,int fiu)\r\n{\r\n    s[nod].erase(s[nod].find(cod[{fiu,nod}]));\r\n    cod[{nod,fiu}]=gettype(nod);\r\n    s[fiu].insert(cod[{nod,fiu}]);\r\n    cod[{fiu,0}]=gettype(fiu);\r\n}\r\nvoid calc(int nod)\r\n{\r\n    use[nod]=1;\r\n    for(int i=0;i<muchii[nod].size();i++)\r\n    {\r\n        int fiu=muchii[nod][i];\r\n        int val=0;\r\n        if(!use[fiu])\r\n        {\r\n            reroot(nod,fiu);\r\n            calc(fiu);\r\n            reroot(fiu,nod);\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    cin>>n;\r\n    for(int i=1;i<n;i++)\r\n    {\r\n        int a,b;\r\n        cin>>a>>b;\r\n        muchii[a].push_back(b);\r\n        muchii[b].push_back(a);\r\n        deg[a]++;\r\n        deg[b]++;\r\n    }\r\n    dfs(1,0);\r\n    calc(1);\r\n    for(int root=1;root<=n;root++)\r\n    {\r\n        bool ok=1;\r\n        int initcod=-1;\r\n        for(int i=0;i<muchii[root].size()&&ok;i++)\r\n        {\r\n            int nod=muchii[root][i];\r\n            if(cod[{nod,root}]>0)\r\n            {\r\n                if(i==0)\r\n                    initcod=cod[{nod,root}];\r\n                else if(cod[{nod,root}]!=initcod)\r\n                    ok=0;\r\n            }\r\n            else\r\n                ok=0;\r\n        }\r\n        if(ok)\r\n        {\r\n            cout<<root;\r\n            return 0;\r\n        }\r\n    }\r\n    cout<<-1;\r\n    return 0;\r\n}\r\n"
}