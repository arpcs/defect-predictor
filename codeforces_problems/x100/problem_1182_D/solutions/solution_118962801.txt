{
    "id": 118962801,
    "contestId": 1182,
    "creationTimeSeconds": 1623328074,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "BlueDiamond"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 22835200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\nconst int M = (int) 1e9 + 9;\r\nconst int B = (int) 1e9 + 7;\r\n\r\nint add(int a, int b) {\r\n  a += b;\r\n  if (a >= M) {\r\n    return a - M;\r\n  }\r\n  if (a < 0) {\r\n    return a + M;\r\n  }\r\n  return a;\r\n}\r\n\r\nint mul(int a, int b) {\r\n  return a * (ll) b % M;\r\n}\r\n\r\nint pw(int a, int b) {\r\n  int r = 1;\r\n  while (b) {\r\n    if (b & 1) {\r\n      r = mul(r, a);\r\n    }\r\n    a = mul(a, a);\r\n    b /= 2;\r\n  }\r\n  return r;\r\n}\r\n\r\nint dv(int a, int b) {\r\n  return mul(a, pw(b, M - 2));\r\n}\r\n\r\n\r\nconst int N = (int) 1e5 + 7;\r\n\r\nint n, dist[N], sol[N], grad[N];\r\nvector<int> g[N];\r\nmultiset<int> kids[N];\r\n\r\nvoid algo(int a, int p, bool need = 1) {\r\n  sol[a] = 0;\r\n  if (need) {\r\n    kids[a].clear();\r\n    for (auto &b : g[a]) if (b != p) kids[a].insert(sol[b]);\r\n  }\r\n  if (kids[a].empty()) {\r\n    sol[a] = 3333;\r\n  } else {\r\n    auto bg = kids[a].begin(), nd = kids[a].end();\r\n    nd--;\r\n    if (*bg != *nd || *bg == -1) {\r\n      sol[a] = -1;\r\n    } else {\r\n      sol[a] = add(mul(*bg, B), grad[a]);\r\n    }\r\n  }\r\n}\r\n\r\nvoid dfs(int a, int p = -1) {\r\n  for (auto &b : g[a]) if (b != p) dfs(b, a);\r\n\r\n  algo(a, p);\r\n}\r\n\r\nvoid reroot(int a, int p) {\r\n//  kids[a].insert(sol[p]);\r\n//  algo(a, p, 0);\r\n\r\n  int init = (int) kids[a].size();\r\n\r\n  assert(kids[a].find(sol[p]) != kids[a].end());\r\n  kids[a].erase(kids[a].find(sol[p]));\r\n  algo(a, p, 0);\r\n  int kek = (int) kids[a].size();\r\n\r\n  ///cout << \" => \" << init << \" and \" << kek << \"\\n\";\r\n\r\n  kids[p].insert(sol[a]);\r\n  algo(p, -1, 0);\r\n}\r\n\r\nvoid go(int a, int p = -1) {\r\n  if (sol[a] != -1) {\r\n    cout << a << \"\\n\";\r\n    exit(0);\r\n  }\r\n  for (auto &b : g[a]) {\r\n    if (b != p) {\r\n      reroot(a, b);\r\n      go(b, a);\r\n      reroot(b, a);\r\n    }\r\n  }\r\n}\r\n\r\n\r\nsigned main() {\r\n  ios::sync_with_stdio(0); cin.tie(0);\r\n\r\n\r\n  cin >> n;\r\n  for (int i = 1; i < n; i++) {\r\n    int x, y;\r\n    cin >> x >> y;\r\n    g[x].push_back(y);\r\n    g[y].push_back(x);\r\n    grad[x]++;\r\n    grad[y]++;\r\n  }\r\n\r\n  int root = 2;\r\n  root = min(root, n);\r\n  dfs(root);\r\n  go(root);\r\n  cout << \"-1\\n\";\r\n\r\n  return 0;\r\n}\r\n",
    "defect_evaluation_v4": {
        "good solution": 40,
        "wrong solution": 60,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 15,
        "bit manipulation": 5,
        "greedy": 0,
        "brute force": 0,
        "graphs": 80,
        "sortings": 0,
        "search": 0,
        "trees": 90,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 90,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 30,
        "self-documenting": 0,
        "complex": 10,
        "readable": 10,
        "well-named": 50,
        "efficient": 25,
        "reusable": 30,
        "documented": 40,
        "good error-handling": 10,
        "good solution": 0,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 80,
        "wrong solution": 15,
        "compilation error": 5,
        "runtime error": 5
    }
}