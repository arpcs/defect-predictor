{
    "id": 136577250,
    "contestId": 1182,
    "creationTimeSeconds": 1637652522,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "A_Wallaby"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 18944000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\ntypedef pair<int,int> pi;\r\n#define f first\r\n#define s second\r\n#define FAST ios_base::sync_with_stdio(0); cin.tie(0);\r\n#define all(x) x.begin(),x.end()\r\n\r\nconst int maxn = 100010;\r\nconst int INF = LLONG_MAX/2;\r\nconst int mod = 1e9 + 7;\r\n\r\nint n;\r\nvector <int> adjlist[maxn];\r\npi st, ep;\r\nvector <int> diam;\r\nint dist[maxn];\r\n\r\nvoid dfs(int x, int p, int d) {\r\n\tst = max(st, pi(d,x));\r\n\tfor (auto i:adjlist[x]) if (i != p) {\r\n\t\tdfs(i, x, d + 1);\r\n\t}\r\n}\r\n\r\nvoid dfs2(int x, int p, int d) {\r\n\tep = max(ep, pi(d,x));\r\n\tfor (auto i:adjlist[x]) if (i != p) {\r\n\t\tdfs2(i, x, d + 1);\r\n\t}\r\n}\r\n\r\nvoid dfs3(int x, int p, int d) {\r\n\tdist[x] = d;\r\n\tfor (auto i:adjlist[x]) if (i != p) {\r\n\t\tdfs3(i, x, d + 1);\r\n\t}\r\n}\r\n\r\nbool trace(int x, int p) {\r\n\tbool ondiam = false;\r\n\tfor (auto i:adjlist[x]) if (i != p) {\r\n\t\tif (trace(i,x)) ondiam = true;\r\n\t}\r\n\tif (x == ep.s) ondiam = true;\r\n\t\r\n\tif (ondiam) diam.push_back(x);\r\n\treturn ondiam;\r\n}\r\n\r\nvoid validate(int root) {\r\n\tmemset(dist,0,sizeof dist);\r\n\tdfs3(root, -1, 0);\r\n\tmap<int,int> ans;\r\n\r\n\tfor (int i =1;i<=n;i++) {\r\n\t\tint degree = adjlist[i].size();\r\n\t\tint dd = dist[i];\r\n\t\tif (ans.find(dd) == ans.end()) ans[dd] = degree;\r\n\t\telse {\r\n\t\t\tif (ans[dd] != degree) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (i == n) {\r\n\t\t\tcout << root;\r\n\t\t\texit(0);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nint32_t main() {\r\n\tFAST\r\n\tcin >> n;\r\n\tfor (int i =0;i<n-1;i++) {\r\n\t\tint a,b; cin >> a >> b;\r\n\t\tadjlist[a].push_back(b);\r\n\t\tadjlist[b].push_back(a);\r\n\t}\r\n\t\r\n\tst = ep = pi(0, 0);\r\n\tdfs(1, -1, 0);\r\n\t\r\n\tdfs2(st.s, -1, 0);\r\n\t\r\n\tvalidate(st.s);\r\n\tvalidate(ep.s);\r\n\t\r\n\ttrace(st.s, -1);\r\n\t\r\n\t\r\n\tint centr = diam[diam.size()/2];\r\n\tvalidate(centr);\r\n\t\r\n\tmemset(dist,0,sizeof dist);\r\n\tdfs3(centr,-1, 0);\r\n\tpi top = pi(INF,0);\r\n\tfor (int i =1;i<=n;i++) {\r\n\t\tif (adjlist[i].size() == 1) top = min(top,pi(dist[i],i));\r\n\t} \r\n\t\r\n\tvalidate(top.s);\r\n\tcout << -1;\r\n}\r\n\r\n\r\n"
}