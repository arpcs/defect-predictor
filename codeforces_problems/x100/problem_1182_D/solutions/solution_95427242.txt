{
    "id": 95427242,
    "contestId": 1182,
    "creationTimeSeconds": 1602594048,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "wrinx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 14336000,
    "source": "//#pragma GCC optimize(\"Ofast\")\r\n#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n//#include <atcoder/all>\r\n\r\n#define F first\r\n#define S second\r\n//#define int long long\r\n#define ll long long\r\n//#define int  unsigned long long\r\n#define pb push_back\r\n//#define double long double\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n//using namespace atcoder;\r\n\r\ntypedef  tree< int , null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\nconst int N = 211000;\r\nconst int K = 17;\r\nconst int mod = 998244353;\r\nvector <int> g[N];\r\nint d[N], pr[N], f[N];\r\nvoid dfs(int v, int p = -1, int h = 0){\r\n    d[v] = h;\r\n    pr[v] = p;\r\n    for (auto u: g[v]){\r\n        if (u == p) continue;\r\n        dfs(u, v, h + 1);\r\n    }\r\n}\r\nvoid dfs2(int v, int p = -1, int h = 0){\r\n    if (f[h] == -1) f[h] = g[v].size();\r\n    else{\r\n        if (g[v].size() != f[h]){\r\n            cout << -1;\r\n            exit(0);\r\n        }\r\n    }\r\n    for (auto u: g[v]){\r\n        if (u == p) continue;\r\n        dfs2(u, v, h + 1);\r\n    }\r\n}\r\nmain(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    //freopen(\"output.txt\", \"w\", stdout);\r\n    int n;\r\n    cin >> n;\r\n    if (n == 1){\r\n        cout << 1;\r\n        return 0;\r\n    }\r\n    for (int i = 1; i < n; i++){\r\n        int u, v;\r\n        cin >> u >> v;\r\n        g[u].pb(v);\r\n        g[v].pb(u);\r\n    }\r\n    dfs(1);\r\n    int r = 1;\r\n    int x = 0;\r\n    for (int i = 1; i <= n; i++){\r\n        if (d[i] > x){\r\n            x = d[i];\r\n            r = i;\r\n        }\r\n    }\r\n    dfs(r);\r\n    x = 0;\r\n    int l = 0;\r\n    for (int i = 1; i <= n; i++){\r\n        if (d[i] > x){\r\n            x = d[i];\r\n            l = i;\r\n        }\r\n    }\r\n    if (d[l] % 2 == 1){\r\n        cout << -1;\r\n        return 0;\r\n    }\r\n    for (int i = 0; i < x / 2; i++){\r\n        l = pr[l];\r\n    }\r\n    for (int i = 0; i <= n; i++){\r\n        f[i] = -1;\r\n    }\r\n    dfs2(l);\r\n    cout << l << endl;\r\n}\r\n"
}