{
    "id": 97747608,
    "contestId": 1182,
    "creationTimeSeconds": 1604632862,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "mattagar6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 14848000,
    "source": "/*  \r\n *  Author: blondie \r\n */\r\n  \r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define forn(i, n) for(int i = 0; i < int(n); i++)\r\n#define ford(i, n) for(int i = int(n)-1; i >= 0; i--)\r\n#define fore(x, v) for(const auto& x : v)\r\n\r\nconst int nax = 1e5+5;\r\nconst int NONE = -2;\r\n\r\nvector<int> g[nax];\r\nint p[nax];\r\nmap<int,int> deg;\r\n\r\nint bfs(int u, vector<int>& d) {\r\n    memset(p, -1, sizeof p);\r\n    p[u] = NONE;\r\n    d[u] = 0;\r\n    vector<int> q{u};\r\n    forn(i, q.size()) {\r\n        u = q[i];\r\n        fore(v, g[u]) {\r\n            if(p[v] == -1) {\r\n                p[v] = u;\r\n                d[v] = d[u] + 1;\r\n                q.push_back(v);\r\n            }\r\n        }\r\n    }\r\n    return q.back();\r\n}\r\n\r\nbool dfs(int u, int d) {\r\n    if(!deg.count(d)) {\r\n        deg[d] = (int) g[u].size();\r\n    }\r\n    else if(deg[d] != (int) g[u].size()) {\r\n        return false;\r\n    }\r\n    fore(v, g[u]) {\r\n        if(v != p[u]) {\r\n            p[v] = u;\r\n            if(!dfs(v, d+1)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nvoid check(int u) {\r\n    deg.clear();\r\n    memset(p, -1, sizeof p);\r\n    if(dfs(u, 0)) {\r\n        cout << u+1 << endl;\r\n        exit(0);\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    \r\n    int n;\r\n    cin >> n;\r\n    if(n == 1) {\r\n        cout << \"1\\n\";\r\n        exit(0);\r\n    }\r\n\r\n    forn(i, n-1) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        --u, --v;\r\n        g[u].push_back(v);\r\n        g[v].push_back(u);\r\n    }\r\n    \r\n    vector<vector<int>> d(2, vector<int>(n));\r\n    \r\n    \r\n    int a = bfs(0, d[0]);\r\n    int b = bfs(a, d[1]);\r\n    \r\n    vector<int> path;\r\n    int cur = b;\r\n    while(cur != NONE) {\r\n        path.push_back(cur);\r\n        cur = p[cur];\r\n    }\r\n    int centre = path[path.size()/2];\r\n    check(centre);\r\n    \r\n    // must be a leaf\r\n    check(a);\r\n    check(b);\r\n    //cerr << a << \" \" << b << endl;\r\n    vector<int> degree(n);\r\n    queue<pair<int,int>> leaves;\r\n    forn(i, n) {\r\n        degree[i] = g[i].size();\r\n        if(degree[i] == 1 && i != a && i != b) {\r\n            //cerr << i << endl;\r\n            leaves.push({i, i});\r\n        }\r\n    }\r\n    \r\n    while(!leaves.empty()) {\r\n        auto [u, l] = leaves.front();\r\n        leaves.pop();\r\n        if(u == centre) {\r\n            //cerr << l << \"\\n\";\r\n            check(l);\r\n            break;\r\n        }\r\n        fore(v, g[u]) {\r\n            if(--degree[v] == 1 || v == centre) {\r\n                //cerr << \"adding \" << v << endl;\r\n                leaves.push({v, l});\r\n            }\r\n        }\r\n    }\r\n    \r\n    cout << \"-1\\n\";\r\n}\r\n"
}