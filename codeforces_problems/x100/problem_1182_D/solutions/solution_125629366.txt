{
    "id": 125629366,
    "contestId": 1182,
    "creationTimeSeconds": 1628738786,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "archiver"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 13516800,
    "source": "#include <algorithm>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <random>\n#include <set>\n#include <stack>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\nusing namespace std;\n\nusing LL = long long;\n\nconst int MAXN = 100010;\n\nint n;\nvector<int> x[MAXN];\nint z[MAXN], cnt[MAXN], p[MAXN];\n\n\nint d[MAXN], s[MAXN];\n\nint Bfs(int s) {\n  queue<int> Q;\n  Q.push(s);\n  z[s] = true;\n  d[s] = 0;\n  while (!Q.empty()) {\n    s = Q.front();\n    Q.pop();\n    for (int b : x[s]) {\n      if (z[b]) continue;\n      Q.push(b);\n      z[b] = true;\n      d[b] = d[s] + 1;\n      p[b] = s;\n    }\n  }\n  return s;\n}\n\nint BfsEdge(int s) {\n  queue<int> Q;\n  Q.push(s);\n  z[s] = true;\n  d[s] = 0;\n  while (!Q.empty()) {\n    s = Q.front();\n    Q.pop();\n    for (int b : x[s]) {\n      if (z[b] || x[b].size() > 2) continue;\n      if (x[b].size() == 1) return b;\n      Q.push(b);\n      z[b] = true;\n      d[b] = d[s] + 1;\n      p[b] = s;\n    }\n  }\n  return s;\n}\n\nvoid Dfs(int a, int fa) {\n  s[a] = 1;\n  for (int b : x[a]) {\n    if (b == fa) continue;\n    d[b] = d[a] + 1;\n    Dfs(b, a);\n    s[a] += s[b];\n  }\n}\n\nbool Check(int a) {\n  if (a == -1) return false;\n  memset(s, 0, sizeof(s));\n  memset(d, 0, sizeof(d));\n  Dfs(a, -1);\n  memset(p, -1, sizeof(p));\n  for (int i = 0; i < n; ++i) {\n    if (p[d[i]] == -1) {\n      p[d[i]] = s[i];\n      continue;\n    }\n    if (s[i] != p[d[i]]) return false;\n  }\n  return true;\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  cin >> n;\n  if (n == 1) {\n    cout << 1 << \"\\n\";\n    return 0;\n  }\n  for (int i = 1; i < n; ++i) {\n    int a, b;\n    cin >> a >> b;\n    --a;\n    --b;\n    x[a].push_back(b);\n    x[b].push_back(a);\n  }\n  int t = Bfs(0);\n  memset(z, 0, sizeof(z));\n  int s = Bfs(t);\n  int mid = -1, ed = -1;\n  if (d[s] % 2 == 0) {\n    memset(z, 0, sizeof(z));\n    mid = s;\n    int dist = d[s] / 2;\n    while (d[mid] != dist) {\n      z[mid] = true;\n      mid = p[mid];\n    }\n    z[p[mid]] = true;\n    ed = BfsEdge(mid);\n  }\n  if (Check(t)) {\n    cout << t + 1 << \"\\n\";\n    return 0;\n  }\n  if (Check(s)) {\n    cout << s + 1 << \"\\n\";\n    return 0;\n  }\n  if (Check(ed)) {\n    cout << ed + 1 << \"\\n\";\n    return 0;\n  }\n  if (Check(mid)) {\n    cout << mid + 1 << \"\\n\";\n    return 0;\n  }\n  cout << -1 << \"\\n\";\n  return 0;\n}"
}