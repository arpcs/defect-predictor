{
    "id": 205702634,
    "contestId": 1182,
    "creationTimeSeconds": 1683972231,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 9830400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 10;\nvector <int> g[N];\nint n,root,size[N],ma = 1e9; \nbool vis[N];\nvoid dfs_rt(int u,int fa){\n\tint c = 0;\n\tsize[u] = 1;\n\tfor(int v:g[u]){\n\t\tif(v==fa) continue;\n\t\tdfs_rt(v,u);\n\t\tsize[u] += size[v];\n\t\tc = max(c,size[v]);\n\t}\n\tc = max(c,n-size[u]);\n\tif(c<ma) ma = c,root = u;\n}\nbool dfs(int u,int fa,int d){\n\tif(!size[d]) size[d] = g[u].size();\n\telse if(g[u].size()!=size[d]) return 0;\n\tfor(int v:g[u]){\n\t\tif(v==fa) continue;\n\t\tif(!dfs(v,u,d+1)) return 0;\n\t}\n\treturn 1;\n}\nbool check(int u){\n\tmemset(size,0,sizeof(size));\n\treturn dfs(u,0,0);\n}\nint deep(int u,int fa,int d){\n\tif(u==root) return d;\n\tif(g[u].size()>2) return 0;\n\tfor(int v:g[u]) if(v!=fa)\n\treturn deep(v,u,d+1);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tint u,v;\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tdfs_rt(1,0);\n\tif(check(root)) \n\t{\n\t\tprintf(\"%d\",root);\n\t\treturn 0; \n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tif(g[i].size()==1){\n\t\t\tint d=deep(i,0,0);\n\t\t\tif(d&&!vis[d]){\n\t\t\t\tvis[d]=1;\n\t\t\t\tif(check(i)) \n\t\t\t\t{\n\t\t\t\t\tprintf(\"%d\",i);\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"-1\");\n\treturn 0;\n}\n   \t\t  \t \t    \t\t\t\t \t \t   \t\t \t\t"
}