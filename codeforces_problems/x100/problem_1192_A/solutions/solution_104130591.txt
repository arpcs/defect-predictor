{
    "id": 104130591,
    "contestId": 1192,
    "creationTimeSeconds": 1610468754,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "realcomplex"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 3306,
    "memoryConsumedBytes": 101478400,
    "points": 100.0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef pair<int, int> pii;\r\n\r\n#define fi first\r\n#define se second\r\n#define mp make_pair\r\n#define fastIO ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n\r\nconst int N = (int)151111;\r\n\r\nint dir[8][2] = {{-1,-1},{0,-1},{+1,-1},{+1,0},{+1,+1},{0,+1},{-1,+1},{-1,0}};\r\nint adj[4][2] = {{-1,0},{+1,0},{0,-1},{0,+1}};\r\n\r\nset<pii> graf;\r\nmap<ll, int> full;\r\nmap<pii, int> col;\r\nset<pii> inq;\r\n\r\nint ci[N], cj[N];\r\npriority_queue<int> cand;\r\n\r\nset<pii> vso;\r\n\r\nconst int D = (int)2e9 + 7;\r\n\r\nll getid(pii vv){\r\n    vv.fi += (int)1e9 + 3;\r\n    vv.se += (int)1e9 + 3;\r\n    return vv.fi * 1ll * D + vv.se;\r\n}\r\n\r\nvoid check(pii cur){\r\n    vso.insert(cur);\r\n    pii nx;\r\n    for(int q =0 ; q < 8 ; q ++ ){\r\n        nx = mp(cur.fi+dir[q][0],cur.se+dir[q][1]);\r\n        if(!vso.count(nx) && full.count(getid(nx))){\r\n            check(nx);\r\n        }\r\n    }\r\n}\r\n\r\nvoid add_outside(pii cur){\r\n    pii nx;\r\n    col[cur]=0;\r\n    for(int d = 0; d < 4; d ++ ){\r\n        nx = mp(cur.fi+adj[d][0],cur.se+adj[d][1]);\r\n        if(!graf.count(nx)) continue;\r\n        if(full.count(getid(nx))){\r\n            if(inq.count(nx)) continue;\r\n            inq.insert(nx);\r\n            col[nx]=0;\r\n            cand.push(full[getid(nx)]);\r\n        }\r\n        else{\r\n            if(!col.count(nx) || col[nx] > 0){\r\n                add_outside(nx);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid fillc(pii cur, int cl){\r\n    pii nx;\r\n    col[cur]=cl;\r\n    for(int d = 0; d < 4; d ++ ){\r\n        nx = mp(cur.fi+adj[d][0],cur.se+adj[d][1]);\r\n        if(!graf.count(nx)) continue;\r\n        if(full.count(getid(nx))) continue;\r\n        if(col.count(nx)) continue;\r\n        fillc(nx,cl);\r\n    }\r\n}\r\n\r\nbool is_valid(pii xx){\r\n    vector<int> q;\r\n    pii nx;\r\n    int cnt = 0;\r\n    for(int t = 0; t < 8 ; t ++ ){\r\n        nx = mp(xx.fi + dir[t][0], xx.se + dir[t][1]);\r\n        if(full.count(getid(nx))){\r\n            cnt ++ ;\r\n            q.push_back(-1);\r\n        }\r\n        else{\r\n            q.push_back(col[nx]);\r\n        }\r\n    }\r\n    if(cnt <= 1 || cnt >= 7) return true;\r\n    int pt, qt;\r\n    for(int t = 0 ; t < 8 ; t += 2){ // corner\r\n        pt = (t - 1 + 8) % 8;\r\n        qt = (t + 1) % 8;\r\n        if(q[t] == -1 && q[pt] >= 0 && q[pt] == q[qt]){\r\n            return false;\r\n        }\r\n    }\r\n    if(q[1] >= 0 && q[1] == q[5] && min({q[2],q[3],q[4]}) == -1 && min({q[0],q[6],q[7]}) == -1){\r\n        return false;\r\n    }\r\n    if(q[3] >= 0 && q[3] == q[7] && min({q[0],q[1],q[2]}) == -1 && min({q[4],q[5],q[6]}) == -1){\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nbool active[N];\r\n\r\nint main(){\r\n    fastIO;\r\n    int n, tip;\r\n    cin >> n >> tip;\r\n    pii nx;\r\n    pii low = mp((int)1e9 + 7, (int)1e9 + 7);\r\n    for(int i = 1; i <= n; i ++ ){\r\n        cin >> ci[i] >> cj[i];\r\n        active[i]=true;\r\n        graf.insert(mp(ci[i],cj[i]));\r\n        full[getid(mp(ci[i],cj[i]))]=i;\r\n        for(int j = 0 ;j < 8; j ++ ){\r\n            nx = mp(ci[i]+dir[j][0],cj[i]+dir[j][1]);\r\n            low = min(low, nx);\r\n            graf.insert(nx);\r\n        }\r\n    }\r\n    check(mp(ci[1],cj[1]));\r\n    if(vso.size() != n){\r\n        cout << \"NO\\n\";\r\n        return 0;\r\n    }\r\n    add_outside(low);\r\n    int cnt = 1;\r\n    for(auto v : graf){\r\n        if(full.count(getid(v)) || col.count(v)) continue;\r\n        fillc(v, cnt);\r\n        cnt ++ ;\r\n    }\r\n    int node;\r\n    vector<int> que;\r\n    int hi, wi;\r\n    for(int delet = 0; delet < n; delet ++ ){\r\n        while(!cand.empty()){\r\n            node = cand.top();\r\n            cand.pop();\r\n            if(!active[node]){\r\n                continue;\r\n            }\r\n            if(is_valid(mp(ci[node],cj[node]))){\r\n                active[node]=false;\r\n                que.push_back(node);\r\n                full.erase(getid(mp(ci[node],cj[node])));\r\n                hi = -1;\r\n                for(int i = 0 ; i < 2; i ++ ){\r\n                    wi = -1;\r\n                    for(int j = 0; j < 2; j ++ ){\r\n                        nx = mp(ci[node]+hi,cj[node]+wi);\r\n                        if(full.count(getid(nx)) && col.count(nx) && !inq.count(nx)){\r\n                            inq.insert(nx);\r\n                            cand.push(full[getid(nx)]);\r\n                        }\r\n                        wi *= -1;\r\n                    }\r\n                    hi *= -1;\r\n                }\r\n                add_outside(mp(ci[node],cj[node]));\r\n\r\n                break;\r\n            }\r\n            else{\r\n                inq.erase(mp(ci[node],cj[node]));\r\n            }\r\n        }\r\n    }\r\n    cout << \"YES\\n\";\r\n    reverse(que.begin(), que.end());\r\n    for(auto x : que){\r\n        cout << x << \" \";\r\n    }\r\n    cout << \"\\n\";\r\n    return 0;\r\n}\r\n"
}