{
    "id": 57820815,
    "contestId": 1192,
    "creationTimeSeconds": 1564182121,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "AlexanderL"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 1481,
    "memoryConsumedBytes": 63590400,
    "points": 100.0,
    "source": "#include <iostream>\r\n#include <iomanip>\r\n#include <tchar.h>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <string>\r\n#include <math.h>\r\n#include <set>\r\n#include <map>\r\n#include <chrono>\r\n\r\nusing namespace std;\r\nusing namespace std::chrono;\r\n\r\nvoid dump_assert(char* expr, char* file, unsigned int line) {\r\n\tcout << \"Assertion failed: \" << expr << \", \" << file << \":\" << line << endl;\r\n\texit(0);\r\n}\r\n\r\n#define assert(expression) (void)(                                                       \\\r\n          (!!(expression)) ||                                                              \\\r\n            (dump_assert(#expression,  __FILE__, (unsigned)(__LINE__)), 0) \\\r\n        )\r\n\r\n\r\ntypedef long long ll;\r\n\r\nstruct Building {\r\n\tint x;\r\n\tint y;\r\n\tint next[8];\r\n\tint loop_id[4];\r\n};\r\n\r\nint n;\r\nint step;\r\nBuilding b[150000];\r\nint res[150000];\r\n\r\nbool vis[150000] = {0};\r\nint q[150000];\r\n\r\nbool connected[150000] = {0};\r\n\r\nint dx[] = {1, 1, 0, -1, -1, -1, 0, 1};\r\nint dy[] = {0, 1, 1, 1, 0, -1, -1, -1};\r\n\r\nset<int> range;\r\n\r\nvoid dumpB(int p) {\r\n\tBuilding& bp = b[p];\r\n\tcout << \"b[\" << p << \"]=(\"  << bp.x << \", \"  << bp.y << \") (\" << bp.loop_id[0] << \",\"  << bp.loop_id[1] << \",\" << bp.loop_id[2] << \",\" << bp.loop_id[3] << \r\n\t\t\"), nxt=(\" << bp.next[0] << \",\" << bp.next[1] << \",\" << bp.next[2] << \",\" << bp.next[3] << \",\" <<\r\n\t\t\t      bp.next[4] << \",\" << bp.next[5] << \",\" << bp.next[6] << \",\" << bp.next[7] << \")\" << endl;\r\n}\r\n\r\nbool hasOtherSements(int p, int edir, int ldir) {\r\n        int dist = (edir - ldir) & 7;\r\n\tif (dist <= 1 || ((dist == 2) && ((edir & 1) == 0)))\r\n\t\treturn false;\r\n\tBuilding& bld = b[p];\r\n\tint inner_side = ((edir + 2) & 7) >> 1;\r\n\tint lid = bld.loop_id[inner_side];\r\n\tif (lid == 0)\r\n\t\treturn false;\r\n\tint sd = ((ldir + 2) & 7) >> 1;\r\n\tint ed = ((edir + 1) & 7) >> 1;\r\n\tfor (int d = sd; d != ed; d = (d + 1) & 3) \r\n\t\tif (bld.loop_id[d] == lid)\r\n\t\t\treturn true;\r\n\treturn false;\r\n}\r\n\r\nbool canRemove(int p) {\r\n\tint odir = 3;\r\n\twhile (odir >= 0 && b[p].loop_id[odir] != 1) odir--;\r\n\tif (odir < 0)\r\n\t\treturn false; // internal point\r\n\tint sdir = ((odir << 1) + 7) & 7;\r\n\tint cnt = 9;\r\n\twhile (b[p].next[sdir] < 0 && --cnt > 0) \r\n\t\tsdir = (sdir + 7) & 7;\r\n\tif (cnt == 0)\r\n\t\treturn true; // single point \r\n\tint edir = sdir;\r\n\tdo {\t\r\n\t\tint ldir = (edir + 1) & 7;\r\n\t\twhile (b[p].next[ldir] < 0)\r\n\t\t\tldir = (ldir + 1) & 7;\r\n\t\tif (hasOtherSements(p, edir, ldir))\r\n\t\t\treturn false;\r\n\t\tedir = ldir;\t\r\n\t\tint nxt;\r\n\t\twhile (b[p].next[nxt = (edir + 1) & 7] >= 0)\r\n\t\t\tedir = nxt;\r\n\t} while\t(edir != sdir);\r\n\treturn true;\t\r\n}\r\n\r\nint getClusterSize(int sp) {\r\n\tint first = 0;\r\n\tint last = 1;\r\n\tmemset(vis, 0, n);\r\n\tq[0] = sp;\r\n\tvis[sp] = true;\r\n\twhile (first < last && last < n) {\r\n\t\tint p = q[first++];\r\n\t\tfor (int d = 0; d < 8; ++d) {\r\n\t\t\tint np = b[p].next[d];\r\n\t\t\tif (np >= 0 && !vis[np]) {\r\n\t\t\t\tvis[np] = true;\r\n\t\t\t\tq[last++] = np;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn last;\r\n}\r\n\r\nvoid updateLoopId(int p, int edir, int ldir, int lid) {\r\n\tint sd = ((edir + 2) & 7) >> 1;\r\n\tint ed = ((ldir + 1) & 7) >> 1;\r\n\r\n\tint d = sd;\r\n\tdo {\r\n\t\tb[p].loop_id[d] = lid;\r\n\t\td = (d + 1) & 3;\r\n\t} while (d != ed);\r\n\r\n\tif (canRemove(p))\r\n\t\trange.insert(p);\r\n\telse\r\n\t\trange.erase(p);\r\n}\r\n\r\nvoid updateRange(int sp, int outdir, int lid) {\r\n\r\n        int cnt = 9;\r\n\tint edir = outdir;\r\n\twhile (b[sp].next[edir] < 0 && --cnt > 0) {\r\n\t\tedir = (edir + 7) & 7;\r\n\t}\r\n\tif (cnt == 0) { //signle point\t\r\n\t\tupdateLoopId(sp, 1, 1, 1);\r\n\t\treturn;\r\n\t} \r\n\tint p = sp;\r\n\tdo {\r\n\t\tint ldir = (edir + 2) & 7;\r\n\t\twhile (b[p].next[ldir] < 0) \r\n\t\t\tldir = (ldir + 1) & 7;\r\n\r\n\t\tupdateLoopId(p, edir, ldir, lid);\r\n\t        p = b[p].next[ldir];\r\n\t\tedir = (ldir + 4) & 7;\t\t\r\n\t} while (b[p].loop_id[((edir + 2) & 7) >> 1] != lid);\t\r\n}\r\n\r\n\r\nvoid removeNode(int p) {\r\n\tassert(canRemove(p));\r\n\r\n        range.erase(p);\r\n\r\n\tfor (int d= 0; d < 8; ++d)  {\r\n\t\tint pn = b[p].next[d];\r\n\t\tif (pn >= 0) {\r\n\t\t\tb[pn].next[(d + 4) & 7] = -1;\r\n\t\t}\r\n\t}\r\n\r\n\tint odir = 3;\r\n\twhile (odir >= 0 && b[p].loop_id[odir] != 1) odir--;\r\n\tassert(odir >= 0); //  point is not internal\r\n\r\n\tint cnt = 9;\r\n        int ed = (odir * 2 + 7) & 7;\r\n\twhile (b[p].next[ed] < 0 && --cnt > 0)\r\n\t\ted = (ed + 7) & 7;\r\n\r\n\tif (cnt == 0) {\r\n\t\treturn; //this is last point\r\n\t}\r\n\t\r\n\tint sp = b[p].next[ed];\r\n\tupdateRange(sp, (ed + 4) & 7, 1);\t\r\n}\r\n\r\nint _tmain(int argc, _TCHAR* argv[])\r\n{\r\n\thigh_resolution_clock::time_point startTime = high_resolution_clock::now();\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(NULL);\r\n\r\n        int t;\r\n        cin >> n >> t;\r\n        assert(n <= 150000);\r\n\r\n\tmap<pair<int, int>, int> points;\r\n\tint start = 0;\r\n        for (int i = 0; i < n; ++i) {\r\n\t\tmemset(b[i].loop_id, 0, sizeof(b[i].loop_id));\r\n\t\tcin >> b[i].x >> b[i].y;\r\n\t\tpoints[make_pair(b[i].x, b[i].y)] = i + 1;\r\n\t\tif (b[i].x > b[start].x)\r\n\t\t\tstart = i;\r\n\t}\r\n\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tfor (int d= 0; d < 8; ++d) {\r\n\t\t\tb[i].next[d] = points[make_pair(b[i].x + dx[d], b[i].y + dy[d])] - 1;\r\n\t\t}\r\n\t}\r\n\r\n\tint csize = getClusterSize(0);\r\n\tif (csize < n) {\r\n\t\tcout << \"NO\" << endl;\r\n\t\treturn 0;\r\n\t}\r\n\t// mark outer loop\r\n\tupdateRange(start, 0, 1);\r\n\r\n\t// mark internal loops (gaps)\r\n\tint lastLoopId = 2;\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tfor (int d = 0; d < 3; ++d) {\r\n\t\t\tif (b[i].loop_id[d] == 0 && b[i].next[2 * d] < 0) {\r\n\t\t\t\tupdateRange(i, 2 * d, lastLoopId++);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (int i = n - 1; i >= 0; i--) {\r\n\t\tassert(!range.empty());\r\n\t\tint p = *(range.rbegin());\r\n\t\tres[i] = p + 1;\r\n\t\tremoveNode(p);\r\n\t}\r\n\r\n\tcout << \"YES\" << endl;\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tcout << res[i] << endl;\r\n\t}\t\r\n\r\n\thigh_resolution_clock::time_point endTime = high_resolution_clock::now();\r\n\tauto duration = duration_cast<milliseconds>(endTime - startTime).count();\r\n\tcerr << \"execution time \" << duration << \" ms\" <<endl; \r\n\treturn 0;\r\n}\r\n"
}