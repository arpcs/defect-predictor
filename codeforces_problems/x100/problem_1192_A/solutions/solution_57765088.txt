{
    "id": 57765088,
    "contestId": 1192,
    "creationTimeSeconds": 1564084305,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "dacin21"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 1294,
    "memoryConsumedBytes": 39936000,
    "points": 100.0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nusing ull = unsigned long long;\r\nusing fl = long double;\r\ntemplate<typename T>\r\nusing min_heap = priority_queue<T, vector<T>, greater<T>>;\r\ntemplate<typename S, typename T>\r\nvoid xmin(S&a, T const&b){if(b<a) a=b;}\r\ntemplate<typename S, typename T>\r\nvoid xmax(S&a, T const&b){if(b>a) a=b;}\r\n\r\ntemplate<bool enabled>\r\nstruct Debug{\r\n    template<typename S, typename T = void> struct Tag_Printable : false_type {};\r\n    template<typename S> struct Tag_Printable<S, decltype((void)(cerr << declval<S>()))> : true_type {};\r\n    template<typename S, typename T = void> struct Tag_Iterable: false_type {};\r\n    template<typename S> struct Tag_Iterable<S, decltype((void)(begin(declval<S>()), end(declval<S>())))> : true_type {};\r\n    template<typename T, typename... Args>\r\n    Debug& print(T const&x, true_type, Args...){\r\n        #ifdef LOCAL_RUN\r\n        if(enabled){\r\n            cerr << boolalpha << x;\r\n        }\r\n        #endif // LOCAL_RUN\r\n        return *this;\r\n    }\r\n    template<typename T>\r\n    Debug& print(T const&x, false_type, true_type){\r\n        *this << \"[\";\r\n        bool first = true;\r\n        for(auto &e:x){\r\n            if(!first) *this << \", \";\r\n            *this << e;\r\n            first = false;\r\n        }\r\n        return *this << \"]\";\r\n    }\r\n    template<typename S, typename T>\r\n    Debug& print(pair<S, T> const&x, false_type, false_type){\r\n        return *this << \"(\" << x.first << \", \" << x.second << \")\";\r\n    }\r\n    template<typename T>\r\n    Debug& operator<<(T const&x){\r\n        return print(x, Tag_Printable<T>{}, Tag_Iterable<T>{});\r\n    }\r\n};\r\n// Debug<true> debug;\r\n Debug<false> debug; // disable debug printing\r\n#define named(x) string(#x) << \" : \" <<  x\r\n\r\n\r\nstruct Dsu{\r\n    Dsu(int n_) : n(n_), p(n, -1) {}\r\n\r\n    int f(int x){\r\n        return p[x]<0 ? x : p[x] = f(p[x]);\r\n    }\r\n    void u(int a, int b){\r\n        a=f(a);\r\n        b=f(b);\r\n        if(a!=b) p[a]=b;\r\n    }\r\n\r\n    int n;\r\n    vector<int> p;\r\n};\r\n\r\nstruct Dir{\r\n    int dx=0;\r\n    int dy=0;\r\n};\r\n\r\nDir ccw90(Dir const&d){\r\n    return Dir{-d.dy, d.dx};\r\n}\r\nDir operator+(Dir const&a, Dir const&b){\r\n    return Dir{a.dx+b.dx, a.dy+b.dy};\r\n}\r\n\r\nDir get_dir(int d){\r\n    switch(d){\r\n        case 0:\r\n            return Dir{-1, 0};\r\n        case 1:\r\n            return Dir{0, 1};\r\n        case 2:\r\n            return Dir{1, 0};\r\n        case 3:\r\n            return Dir{0, -1};\r\n        default:\r\n            assert(0);\r\n            return Dir{};\r\n    }\r\n}\r\n\r\n\r\nvoid solve(){\r\n    /// SOLVE HERE\r\n\r\n    int n, t;\r\n    cin >> n >> t;\r\n    vector<vector<int> > g(n);\r\n    int m = 0;\r\n    vector<pair<int, int> > encode;\r\n    map<pair<int, int>, int> decode;\r\n\r\n    auto dd = [&](int x, int y, Dir const&d) -> int{\r\n        auto it = decode.find(make_pair(x+d.dx, y+d.dy));\r\n        if(it == decode.end()) return -1;\r\n        return it->second;\r\n    };\r\n\r\n    auto add = [&](int i, int x, int y){\r\n        decode[make_pair(x, y)] = i;\r\n        for(int dx = -1;dx<=1;++dx){\r\n            for(int dy=-1;dy<=1;++dy){\r\n                if(abs(dx) + abs(dy) >= 1){\r\n                    auto it = decode.find(make_pair(x+dx, y+dy));\r\n                    if(it != decode.end()){\r\n                        g[i].push_back(it->second);\r\n                        g[it->second].push_back(i);\r\n                        ++m;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    for(int i=0;i<n;++i){\r\n        int x, y;\r\n        cin >> x >> y;\r\n        encode.push_back({x, y});\r\n        add(i, x, y);\r\n    }\r\n\r\n    vector<bool > vis_1(4*n);\r\n    Dsu uni(4*n);\r\n\r\n    auto do_edge = [&](int const x, int const y, int const d){\r\n        int me = dd(x, y, Dir{});\r\n        if(vis_1[4*me+d]) return;\r\n        vis_1[4*me+d] = true;\r\n        auto visit = [&](int u, int d_){\r\n            vis_1[4*u+d_] = true;\r\n            uni.u(4*me+d, 4*u+d_);\r\n        };\r\n        {\r\n            // check two blocks touching\r\n            Dir R = get_dir(d);\r\n            int a = dd(x, y, R);\r\n            if(a != -1){\r\n                visit(a, (d+2)%4);\r\n                return;\r\n            }\r\n        }\r\n        // walk around face\r\n        int X=x, Y=y, D=d;\r\n        auto step = [&](Dir const&D_, int d_offset) -> bool{\r\n            int b = dd(X, Y, D_);\r\n            const int new_d = (D + d_offset)%4;\r\n            if(b != -1){\r\n                visit(b, new_d);\r\n                X = X+D_.dx;\r\n                Y = Y+D_.dy;\r\n                D = new_d;\r\n                return true;\r\n            }\r\n            return false;\r\n\r\n        };\r\n        debug << \"GOGOGO \" << x << \" \" << y << \" \" << d << \"\\n\";\r\n        do{\r\n            debug << X << \" \" << Y << \" \" << D << \"\\n\";\r\n            auto R = get_dir(D);\r\n            auto U = get_dir((D+3)%4);\r\n            if(step(U+R, 1)){}\r\n            else if(step(U, 0)){}\r\n            else if(step(Dir{}, 3)){}\r\n            else{assert(0);}\r\n        } while(X!=x || Y!=y || D!=d);\r\n    };\r\n    for(auto const&e:decode) for(int i=0;i<4;++i){\r\n        do_edge(e.first.first, e.first.second, i);\r\n    }\r\n\r\n\r\n\r\n\r\n    Dsu l(n);\r\n\r\n    for(int i=0;i<n;++i){\r\n        for(auto const&e:g[i]) if(e<i){\r\n            l.u(i, e);\r\n        }\r\n    }\r\n\r\n    for(int i=1;i<n;++i){\r\n        if(l.f(0) != l.f(i)){\r\n            cout << \"NO\\n\";\r\n            return;\r\n        }\r\n    }\r\n    auto uni_ed = uni;\r\n\r\n    vector<char> vis(n, 0);\r\n    vector<bool> face_vis(4*n);\r\n    vector<vector<int> > ch(4*n);\r\n    for(int i=0;i<4*n;++i){\r\n        ch[uni.f(i)].push_back(i/4);\r\n    }\r\n    // mark infinite face\r\n    face_vis[uni.f(4*decode.begin()->second+0)] = true;\r\n\r\n\r\n    auto remove = [&](int u){\r\n        vis[u] = 1;\r\n        for(int i=0;i<4;++i){\r\n            uni_ed.u(4*u+i, 4*u);\r\n        }\r\n    };\r\n\r\n\r\n    auto is_cut_vertex = [&](int u){\r\n        array<array<char, 3>, 3> grid {};\r\n        auto g = [&](Dir const&dir){\r\n            return grid[dir.dx+1][dir.dy+1];\r\n        };\r\n        const int x = encode[u].first, y = encode[u].second;\r\n        // get image of 3x3 grid\r\n        for(int i=0;i<3;++i){\r\n            for(int j=0;j<3;++j){\r\n                const int a = dd(x, y, Dir{i-1, j-1});\r\n                if(a != -1 && !vis[a]) grid[i][j] = 1;\r\n            }\r\n        }\r\n        // case 1:\r\n        // X-X\r\n        // XuX\r\n        // X-X\r\n\r\n        for(int d=0;d<2;++d){\r\n            if(uni_ed.f(4*u+d) == uni_ed.f(4*u+d+2)){\r\n                auto U = get_dir(d);\r\n                auto L = ccw90(U);\r\n                auto D = ccw90(L);\r\n                auto R = ccw90(D);\r\n                if(g(L)|g(L+U)|g(L+D)){\r\n                    if(g(R)|g(R+U)|g(R+D)){\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // case 2:\r\n\r\n        // X|X\r\n        // -yX\r\n        // XXX\r\n        for(int d=0;d<4;++d){\r\n            if(uni_ed.f(4*u+d) == uni_ed.f(4*u+(d+3)%4)){\r\n                auto U = get_dir(d);\r\n                auto L = ccw90(U);\r\n                auto D = ccw90(L);\r\n                auto R = ccw90(D);\r\n                if(g(L+U)){\r\n                    if(g(D+L)|g(D)|g(D+R)|g(R)|g(R+U)){\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    auto is_border = [&](int u){\r\n        for(int i=0;i<4;++i){\r\n            if(face_vis[uni.f(4*u+i)]) return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    priority_queue<int> pq;\r\n    for(int i=0;i<n;++i){\r\n        if(is_border(i)){\r\n            pq.emplace(i);\r\n        }\r\n    }\r\n    vector<int> out;\r\n    int last = -1;\r\n    while(!pq.empty()){\r\n        int u = pq.top();\r\n        pq.pop();\r\n        if(u==last) continue;\r\n        last = u;\r\n        if(vis[u]) continue;\r\n        if(!is_border(u)) continue;\r\n        if(is_cut_vertex(u)) continue;\r\n        remove(u);\r\n        out.push_back(u);\r\n        for(int i=0;i<4;++i){\r\n            if(face_vis[uni.f(4*u+i)]) continue;\r\n            face_vis[uni.f(4*u+i)] = true;\r\n            for(auto const&e:ch[uni.f(4*u+i)]) pq.emplace(e);\r\n        }\r\n        for(auto const&e:g[u]) pq.push(e);\r\n    }\r\n    assert((int)out.size() == n);\r\n    reverse(out.begin(), out.end());\r\n    cout << \"YES\\n\";\r\n    for(auto const&e:out){\r\n        cout << e+1 << \"\\n\";\r\n    }\r\n\r\n\r\n}\r\n\r\nsigned gen(int T){\r\n    mt19937 rng(43151);\r\n    auto get_rand = [&](int64_t l, int64_t r){\r\n        return uniform_int_distribution<int64_t>(l, r)(rng);\r\n    }; (void) get_rand;\r\n    auto get_double = [&](double l, double r){\r\n        return uniform_real_distribution<double>(l, r)(rng);\r\n    };  (void) get_double;\r\n    ofstream o(\"gen.txt\");\r\n    o << T << \"\\n\";\r\n    for(int cas=0;cas<T;++cas){\r\n        const int X = 10;\r\n        const int n = get_rand(1, 50);\r\n\r\n        o << n << \" \" << 2 << \"\\n\";\r\n        set<pair<int, int> > s;\r\n        while((int)s.size() < n){\r\n            s.emplace(get_rand(1, X), get_rand(1, X));\r\n        }\r\n        vector<pair<int, int> > out(s.begin(), s.end());\r\n        shuffle(out.begin(), out.end(), rng);\r\n        for(auto const&e:out){\r\n            o << e.first << \" \" << e.second << \"\\n\";\r\n        }\r\n\r\n        o << \"\\n\";\r\n    }\r\n    o << endl;\r\n    o.close();\r\n    return 0;\r\n}\r\n\r\nsigned main()\r\n{\r\n    #ifdef LOCAL_RUN\r\n    freopen(\"in.txt\", \"r\", stdin);\r\n    //freopen(\"out.txt\", \"w\", stdout);\r\n    cin.exceptions(ios::badbit | ios::eofbit | ios::failbit);\r\n    cin.tie(0); ios_base::sync_with_stdio(false);\r\n    int TTT; cin >> TTT;\r\n\tif(TTT < 0) return gen(-TTT);\r\n\twhile(TTT--){\r\n    #else\r\n    cin.tie(0); ios_base::sync_with_stdio(false);\r\n    #endif // LOCAL_RUN\r\n\r\n    solve();\r\n\r\n    #ifdef LOCAL_RUN\r\n    cout << flush;\r\n    }\r\n    #endif // LOCAL_RUN\r\n    return 0;\r\n}\r\n"
}