{
    "id": 57775981,
    "contestId": 1192,
    "creationTimeSeconds": 1564111930,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "Hazyknight"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2901,
    "memoryConsumedBytes": 201932800,
    "points": 100.0,
    "source": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <string.h>\r\n#include <math.h>\r\n#include <time.h>\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <fstream>\r\n#include <iomanip>\r\n#include <vector>\r\n#include <bitset>\r\n#include <stack>\r\n#include <queue>\r\n#include <set>\r\n#include <map>\r\n#include <unordered_set>\r\n#include <unordered_map>\r\n \r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\n \r\nconst int MAXN = 1200005;\r\n \r\nint n,tp,MAXx,Y,id;\r\nint fa[MAXN];\r\nint r[MAXN];\r\nint c[MAXN];\r\nint ans[MAXN];\r\nint tot[MAXN];\r\n \r\nbool outside[MAXN];\r\nbool valid[MAXN];\r\nbool inheap[MAXN];\r\n \r\npriority_queue<int> Q,rQ;\r\nunordered_map<ll,int> g,vis;\r\n \r\nint getroot(int u)\r\n{\r\n\treturn u == fa[u] ? u : fa[u] = getroot(fa[u]);\r\n}\r\n\r\nll hashkey(ll x,ll y)\r\n{\r\n\treturn x * (2e9 + 1) + y;\r\n}\r\n \r\nvoid init()\r\n{\r\n\tfor (int i = 1;i < (1 << 9);i++)\r\n\t{\r\n\t\tif (i >> 4 & 1)\r\n\t\t\tcontinue;\r\n\t\tfor (int j = 0;j < 9;j++)\r\n\t\t\tfa[j] = j;\r\n\t\tfor (int dx1 = -1;dx1 <= 1;dx1++)\r\n\t\tfor (int dy1 = -1;dy1 <= 1;dy1++)\r\n\t\tif (dx1 || dy1)\r\n\t\tfor (int dx2 = -1;dx2 <= 1;dx2++)\r\n\t\tfor (int dy2 = -1;dy2 <= 1;dy2++)\r\n\t\tif (dx2 || dy2)\r\n\t\t{\r\n\t\t\tif (abs(dx1 - dx2) <= 1 && abs(dy1 - dy2) <= 1)\r\n\t\t\t{\r\n\t\t\t\tint u = dx1 * 3 + dy1 + 4,v = dx2 * 3 + dy2 + 4;\r\n\t\t\t\tif ((i >> u & 1) || (i >> v & 1))\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tif (getroot(u) != getroot(v))\r\n\t\t\t\t\tfa[getroot(u)] = getroot(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\tint lst = -1,ok = 1;\r\n\t\tfor (int j = 0;j < 9;j++)\r\n\t\t\tif (j != 4 && (~i >> j & 1))\r\n\t\t\t{\r\n\t\t\t\tif (lst == -1)\r\n\t\t\t\t\tlst = getroot(j);\r\n\t\t\t\tif (~lst && lst != getroot(j))\r\n\t\t\t\t{\r\n\t\t\t\t\tok = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\tvalid[i] = ok;\r\n\t}\r\n}\r\n \r\nvoid insert(int v)\r\n{\r\n\tinheap[v] = 1;\r\n\tQ.push(v);\r\n}\r\n \r\nvoid erase(int v)\r\n{\r\n\tinheap[v] = 0;\r\n\trQ.push(v);\r\n}\r\n \r\nvoid add(int x,int y)\r\n{\r\n\tif (vis[hashkey(x,y)] || g[hashkey(x,y)])\r\n\t\treturn;\r\n\tif (x > MAXx)\r\n\t{\r\n\t\tMAXx = x;\r\n\t\tY = y;\r\n\t}\r\n\tvis[hashkey(x,y)] = ++id;\r\n\tfa[id] = id;\r\n\tfor (int dx = -1;dx <= 1;dx++)\r\n\t\tfor (int dy = -1;dy <= 1;dy++)\r\n\t\t\tif ((!dx && dy) || (dx && !dy))\r\n\t\t\t{\r\n\t\t\t\tint mask = vis[hashkey(x + dx,y + dy)];\r\n\t\t\t\tif (mask)\r\n\t\t\t\t\tfa[getroot(id)] = getroot(mask);\r\n\t\t\t}\r\n}\r\n \r\nint pre[MAXN];\r\n \r\nint get(int u)\r\n{\r\n\treturn u == pre[u] ? u : pre[u] = get(pre[u]);\r\n}\r\n \r\nbool check(int x,int y)\r\n{\r\n\tfor (int i = 0;i < 9;i++)\r\n\t\tpre[i] = i;\r\n\tfor (int dx1 = -1;dx1 <= 1;dx1++)\r\n\tfor (int dy1 = -1;dy1 <= 1;dy1++)\r\n\tif ((dx1 || dy1) && vis[hashkey(x + dx1,y + dy1)])\r\n\tfor (int dx2 = -1;dx2 <= 1;dx2++)\r\n\tfor (int dy2 = -1;dy2 <= 1;dy2++)\r\n\tif ((dx2 || dy2) && getroot(vis[hashkey(x + dx1,y + dy1)]) == getroot(vis[hashkey(x + dx2,y + dy2)]))\r\n\t{\r\n\t\tif ((abs(dx1 - dx2) <= 1 && dy1 == dy2) || (abs(dy1 - dy2) <= 1 && dx1 == dx2))\r\n\t\t{\r\n\t\t\tint u = dx1 * 3 + dy1 + 4,v = dx2 * 3 + dy2 + 4;\r\n\t\t\tif (get(u) != get(v))\r\n\t\t\t\tpre[get(u)] = get(v);\r\n\t\t}\r\n\t}\r\n\tfor (int dx1 = -1;dx1 <= 1;dx1++)\r\n\tfor (int dy1 = -1;dy1 <= 1;dy1++)\r\n\tif (((!dx1 && dy1) || (dx1 && !dy1)) && vis[hashkey(x + dx1,y + dy1)])\r\n\tfor (int dx2 = -1;dx2 <= 1;dx2++)\r\n\tfor (int dy2 = -1;dy2 <= 1;dy2++)\r\n\tif (((!dx2 && dy2) || (dx2 && !dy2)) && (dx2 != dx1 || dy2 != dy1) && getroot(vis[hashkey(x + dx1,y + dy1)]) == getroot(vis[hashkey(x + dx2,y + dy2)]))\r\n\t{\r\n\t\tint u = dx1 * 3 + dy1 + 4,v = dx2 * 3 + dy2 + 4;\r\n\t\tif (get(u) != get(v))\r\n\t\t\treturn 0;\r\n\t}\r\n\treturn 1;\r\n}\r\n \r\nvoid dfs(int x,int y)\r\n{\r\n\tif (!vis[hashkey(x,y)])\r\n\t\treturn;\r\n\tvis[hashkey(x,y)] = 0;\r\n\tfor (int dx = -1;dx <= 1;dx++)\r\n\t\tfor (int dy = -1;dy <= 1;dy++)\r\n\t\t\tif ((!dx && dy) || (dx && !dy))\r\n\t\t\t{\r\n\t\t\t\tint mask = g[hashkey(x + dx,y + dy)];\r\n\t\t\t\tif (mask)\r\n\t\t\t\t{\r\n\t\t\t\t\toutside[mask] = 1;\r\n\t\t\t\t\tif (check(x + dx,y + dy) && valid[tot[mask]] && !inheap[mask])\r\n\t\t\t\t\t\tinsert(mask);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\tfor (int dx = -1;dx <= 1;dx++)\r\n\t\tfor (int dy = -1;dy <= 1;dy++)\r\n\t\t\tif (dx || dy)\r\n\t\t\t{\r\n\t\t\t\tint mask = g[hashkey(x + dx,y + dy)];\r\n\t\t\t\tif (mask)\r\n\t\t\t\t{\r\n\t\t\t\t\ttot[mask] |= (1 << (-dx * 3 - dy + 4));\r\n\t\t\t\t\tif (!valid[tot[mask]] && inheap[mask])\r\n\t\t\t\t\t\terase(mask);\r\n\t\t\t\t\tif (check(x + dx,y + dy) && outside[mask] && valid[tot[mask]] && !inheap[mask])\r\n\t\t\t\t\t\tinsert(mask);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\tdfs(x - 1,y);\r\n\tdfs(x,y - 1);\r\n\tdfs(x + 1,y);\r\n\tdfs(x,y + 1);\r\n}\r\n \r\nint main()\r\n{\r\n\tinit();\r\n\tMAXx = -1e9 - 1;\r\n\tscanf(\"%d%d\",&n,&tp);\r\n\tfor (int i = 1;i <= n;i++)\r\n\t{\r\n\t\tscanf(\"%d%d\",&r[i],&c[i]);\r\n\t\tg[hashkey(r[i],c[i])] = i;\r\n\t}\r\n\tfor (int i = 1;i <= n;i++)\r\n\t\tfor (int dx = -1;dx <= 1;dx++)\r\n\t\t\tfor (int dy = -1;dy <= 1;dy++)\r\n\t\t\t\tif (dx || dy)\r\n\t\t\t\t\tadd(r[i] + dx,c[i] + dy);\r\n\tdfs(MAXx,Y);\r\n\tfor (int i = n;i >= 1;i--)\r\n\t{\r\n\t\twhile (!rQ.empty() && Q.top() == rQ.top())\r\n\t\t{\r\n\t\t\tQ.pop();\r\n\t\t\trQ.pop();\r\n\t\t}\r\n\t\tint cur = Q.top();\r\n\t\tif (i != 1 && tot[cur] == 495)\r\n\t\t{\r\n\t\t\tputs(\"NO\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tans[i] = cur;\r\n\t\tinheap[cur] = 0;\r\n\t\tQ.pop();\r\n\t\tg[hashkey(r[cur],c[cur])] = 0;\r\n\t\tadd(r[cur],c[cur]);\r\n\t\tdfs(r[cur],c[cur]);\r\n\t}\r\n\tputs(\"YES\");\r\n\tfor (int i = 1;i <= n;i++)\r\n\t\tprintf(\"%d\\n\",ans[i]);\r\n\treturn 0;\r\n}"
}