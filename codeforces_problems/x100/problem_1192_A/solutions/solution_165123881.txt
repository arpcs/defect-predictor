{
    "id": 165123881,
    "contestId": 1192,
    "creationTimeSeconds": 1658408336,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "M_8625"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2230,
    "memoryConsumedBytes": 31948800,
    "points": 100.0,
    "source": "#include<cstdio>\n#include<vector>\n#include<map>\n#include<algorithm>\n#include<set>\nusing namespace std;\n\ntypedef pair<int, int> pii;\n#define X first\n#define Y second\n\nconst int dx[8] = {-1, 0, 1, 1, 1, 0, -1, -1}, dy[8] = {-1, -1, -1, 0, 1, 1, 1, 0};\nconst int next_edge_dx[4][4] = {{0, 1, 0, -1}, {1, 1, -1, -1}, {1, 0, -1, 0}, {0, 0, 0, 0}};\nconst int next_edge_dy[4][4] = {{-1, 0, 1, 0}, {-1, 1, 1, -1}, {0, 1, 0, -1}, {0, 0, 0, 0}};\nconst int next_edge_dir[4][4] = {{2, 3, 0, 1}, {3, 0, 1, 2}, {0, 1, 2, 3}, {1, 2, 3, 0}};\n\nuint64_t ptoh(pair<int, int> & p) {\n    constexpr int C0 = 1000000000 + 10;\n    uint64_t res = p.X+C0;\n    res <<= 32;\n    res += p.Y+C0;\n    return res;\n}\n\nvector<pii> where_am_i;\nmap<uint64_t, int> who_is_here;\nvector<bool> visited;\n\nset<int> egligible;\nvector<int> next_edge, prev_edge;\nvector<int> edge_parent;\nvector<int> edge_rank;\nint outer_boss;\n\nint get_boss(int eid) {\n\tif (edge_parent[eid] == -1) return eid;\n\treturn edge_parent[eid] = get_boss(edge_parent[eid]);\n}\n\nvoid join_sets(int eid1, int eid2) {\n\teid1 = get_boss(eid1);\n\teid2 = get_boss(eid2);\n\tif (eid1 == eid2) return;\n\tif (edge_rank[eid1] < edge_rank[eid2]) swap(eid1, eid2);\n\tedge_parent[eid2] = eid1;\n\tif (outer_boss == eid2) outer_boss = eid1;\n\tedge_rank[eid1] = max(edge_rank[eid1], edge_rank[eid2] + 1);\n}\n\nint find_next_edge(int edge_id) {\n\tpii position = where_am_i[edge_id / 4];\n\tint direction = edge_id % 4;\n\tfor (int i=0; i<4; i++) {\n\t\tpii nposition(position.X + next_edge_dx[i][direction], position.Y + next_edge_dy[i][direction]);\n\t\tauto it = who_is_here.find(ptoh(nposition));\n\t\tif (it != end(who_is_here)) {\n\t\t\tint next_tile_id = it->Y;\n\t\t\treturn next_tile_id * 4 + next_edge_dir[i][direction];\n\t\t}\n\t}\n}\n\nvoid find_and_join_next(int edge_id) {\n\tint next_eid = find_next_edge(edge_id);\n\tnext_edge[edge_id] = next_eid;\n\tprev_edge[next_eid] = edge_id;\n\tjoin_sets(edge_id, next_eid);\n}\n\nvoid join_edges(int tile_id) {\n\tpii position = where_am_i[tile_id];\n\tfor (int direction = 0; direction < 4; direction++) {\n\t\tfind_and_join_next(tile_id * 4 + direction);\n\t}\n}\n\n\nvoid check_egligible(int tile_id) {\n\tbool is_egligible = false;\n\tvector<int> distinct_loops;\n\tfor (int direction=0; direction<4; direction++) {\n\t\tint eid = tile_id * 4 + direction;\n\t\tif (get_boss(eid) == outer_boss) is_egligible = true;\n\t\tint next_eid = find_next_edge(eid);\n\t\tif (next_eid / 4 != tile_id) {\n\t\t\tdistinct_loops.push_back(get_boss(eid));\n\t\t}\n\t}\n\t\n\tfor (int i=0; i<distinct_loops.size(); i++) {\n\t\tfor (int j=0; j<i; j++) {\n\t\t\tif (distinct_loops[i] == distinct_loops[j]) is_egligible = false;\n\t\t}\n\t}\n\t\n\tif (is_egligible) {\n\t\tegligible.insert(tile_id);\n\t}\n\telse {\n\t\tif (egligible.count(tile_id) > 0) {\n\t\t\tegligible.erase(tile_id);\n\t\t}\n\t}\n}\n\nvoid get_possible_changes(int be_id, vector<int> &to_check) {\n\tto_check.push_back(be_id / 4);\n\twhile (true) {\n\t\tint next_edge_id = find_next_edge(be_id);\n\t\tto_check.push_back(next_edge_id/4);\n\t\tif (get_boss(next_edge_id) == outer_boss) break;\n\t\tbe_id = next_edge_id;\n\t}\n}\n\nvoid fix_edges_after_removal(int tile_id) {\n\tvector<int> to_check;\n\tfor (int direction=0; direction<4; direction++) {\n\t\tint edge_id = tile_id * 4 + direction;\n\t\tint previous_edge_id = prev_edge[edge_id];\n\t\tif (previous_edge_id / 4 != tile_id) {\n\t\t\tif (get_boss(previous_edge_id) == outer_boss) {\n\t\t\t\tget_possible_changes(previous_edge_id, to_check);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int direction = 0; direction<4; direction++) {\n\t\tint edge_id = tile_id * 4 + direction;\n\t\tint previous_edge_id = prev_edge[edge_id];\n\t\tif (previous_edge_id / 4 != tile_id) {\n\t\t\tfind_and_join_next(previous_edge_id);\n\t\t}\n\t}\n\tfor (int tile_id : to_check) {\n\t\tcheck_egligible(tile_id);\n\t}\n}\n\nvoid dfs(int id) {\n\tif (visited[id]) return;\n\tvisited[id] = true;\n\tfor (int dir = 0; dir < 8; dir++) {\n\t\tpii ncoor(where_am_i[id].X + dx[dir], where_am_i[id].Y + dy[dir]);\n\t\tif (who_is_here.count(ptoh(ncoor)) > 0) {\n\t\t\tdfs(who_is_here[ptoh(ncoor)]);\n\t\t}\n\t}\n}\n\n\n\n\n\nint main() {\n\tint n, t;\n\tscanf(\"%d %d\", &n, &t);\n\twhere_am_i.resize(n);\n\tfor (int i=0; i<n; i++) {\n\t\tscanf(\"%d %d\", &where_am_i[i].X, &where_am_i[i].Y);\n\t\twho_is_here[ptoh(where_am_i[i])] = i;\n\t}\n\t\n\tvisited.resize(n, false);\n\tdfs(0);\n\tfor (bool v : visited) {\n\t\tif (!v) {\n\t\t\tprintf(\"No\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\t\n\tnext_edge.resize(4*n);\n\tprev_edge.resize(4*n);\n\tedge_parent.resize(4*n, -1);\n\tedge_rank.resize(4*n, 0);\n\t\n\touter_boss == -1;\n\tfor (int i=0; i<n; i++) {\n\t\tjoin_edges(i);\n\t}\n\t\n\tint top_left = who_is_here.begin()->second;\n\touter_boss = get_boss(top_left * 4 + 3);\n\t\n\tfor (int i=0; i<n; i++) {\n\t\tcheck_egligible(i);\n\t}\n\t\n\t\n\tvector<int> result;\n\twhile (!egligible.empty()) {\n\t\t\n\t\t/*fprintf(stderr, \"egligible:\");\n\t\tfor (int x : egligible) {\n\t\t\tfprintf(stderr, \" %d\", x);\n\t\t}\n\t\tfprintf(stderr, \"\\n\");*/\n\t\t\n\t\tauto it = egligible.end();\n\t\tit--;\n\t\tint current = *it;\n\t\tegligible.erase(current);\n\t\twho_is_here.erase(ptoh(where_am_i[current]));\n\t\tfix_edges_after_removal(current);\n\t\t\n\t\tresult.push_back(current);\n\t}\n\tprintf(\"Yes\\n\");\n\treverse(result.begin(), result.end());\n\tfor (int id : result) {\n\t\tprintf(\"%d\\n\", id+1);\n\t}\n\t\n\treturn 0;\n}\n"
}