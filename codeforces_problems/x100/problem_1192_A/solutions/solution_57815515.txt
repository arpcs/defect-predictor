{
    "id": 57815515,
    "contestId": 1192,
    "creationTimeSeconds": 1564169251,
    "relativeTimeSeconds": 7351,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "limEmil"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1564161900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "PARTIAL",
    "testset": "TESTS",
    "passedTestCount": 65,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 11571200,
    "points": 22.0,
    "source": "#include <algorithm>\r\n#include <ctime>\r\n#include <iostream>\r\n#include <vector>\r\n#include <queue>\r\n#include <set>\r\n#include <map>\r\nusing std::swap;\r\nstruct Building\r\n{\r\n\tBuilding(int x_ = 0, int y_ = 0, int id_ = -1)\r\n\t\t: x(x_)\r\n\t\t, y(y_)\r\n\t\t, id(id_)\r\n\t{\r\n\t}\r\n\r\n\tint x, y;\r\n\tint id;\r\n};\r\nbool operator<(const Building& lhs, const Building& rhs)\r\n{\r\n\treturn lhs.x == rhs.x  ? lhs.y < rhs.y : lhs.x < rhs.x;\r\n}\r\n\r\nint xs, xe, ys, ye;\r\nbool MayExpand(int x, int y)\r\n{\r\n\treturn (xs - 1 <= x && x <= xe + 1 && ys - 1 <= y && y <= ye + 1);\r\n}\r\n\r\nstd::vector<Building> buildings;\r\nstd::vector<bool> built;\r\nstd::vector<int> ans;\r\nstd::vector< std::vector<int> > nei;\r\n\r\nvoid BFS(std::vector<Building>& border)\r\n{\r\n\tstd::vector<Building> newBorder;\r\n\tstd::queue<int> q;\r\n\tfor (int i= 0; i < border.size(); ++i)\r\n\t\tq.push(border[i].id);\r\n\twhile (!q.empty())\r\n\t{\r\n\t\tint id = q.front();\r\n\t\tq.pop();\r\n\t\tfor (int k = 0; k < nei[id].size(); ++k)\r\n\t\t{\r\n\t\t\tBuilding neighbor = buildings[nei[id][k]];\r\n\t\t\tif (!built[neighbor.id] && MayExpand(neighbor.x, neighbor.y))\r\n\t\t\t{\r\n\t\t\t\tans.push_back(neighbor.id);\r\n\t\t\t\tbuilt[neighbor.id] = true;\r\n\t\t\t\tnewBorder.push_back(neighbor);\r\n\t\t\t\tq.push(neighbor.id);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t--xs; ++xe;\r\n\t--ys; ++ye;\r\n\tswap(border, newBorder);\r\n}\r\n/*\r\nvoid Solve1(const std::vector<Building>& border)\r\n{\r\n\tstd::vector<Building> newBorder;\r\n\tfor (int i = 0; i < border.size(); ++i)\r\n\t{\r\n\t\tint id = border[i].id;\r\n\t\tfor (int j = 0; j < nei[id].size(); ++j)\r\n\t\t{\r\n\t\t\tint neighbor = nei[id][j];\r\n\t\t\tif (!built[neighbor])\r\n\t\t\t\tnewBorder.push_back(buildings[neighbor]);\r\n\t\t}\r\n\t}\r\n\tstd::sort(newBorder.begin(), newBorder.end());\r\n\tauto newEnd = std::unique(newBorder.begin(), newBorder.end());\r\n\tnewBorder.erase(newEnd, newBorder.end());\r\n}\r\n*/\r\nint main()\r\n{\r\n\tstd::ios::sync_with_stdio(false);\r\n\tstd::cin.tie(nullptr);\r\n\tstd::cout.tie(nullptr);\r\n\tint n, t;\r\n\tstd::cin >> n >> t;\r\n\tstd::vector<Building> temp(n);\r\n\tbuildings.resize(n);\r\n\tnei.resize(n);\r\n\tbuilt.resize(n, false);\r\n\tfor (int i = 0; i < n; ++i)\r\n\t{\r\n\t\tbuildings[i].id = i;\r\n\t\tstd::cin >> buildings[i].x >> buildings[i].y;\r\n\t\ttemp[i] = buildings[i];\r\n\t}\r\n\tstd::sort(temp.begin(), temp.end());\r\n\tfor (int i = 0; i < n; ++i)\r\n\t\tfor (int dx = -1; dx <= 1; ++dx)\r\n\t\t\tfor (int dy = -1; dy <= 1; ++dy)\r\n\t\t\t\tif (dx || dy)\r\n\t\t\t\t{\r\n\t\t\t\t\tauto it = std::lower_bound(temp.begin(), temp.end(), Building(temp[i].x + dx, temp[i].y + dy));\r\n\t\t\t\t\tif (it != temp.end() && it->x == temp[i].x + dx && it->y == temp[i].y + dy)\r\n\t\t\t\t\t\tnei[temp[i].id].push_back(it->id);\r\n\t\t\t\t}\r\n\t/*\r\n\tfor (int i = 0; i < n; ++i)\r\n\t\tfor (auto j = nei[i].begin(); j != nei[i].end(); ++j)\r\n\t\t\tstd::cout << i << \" --- \" << *j << std::endl;\r\n\t*/\r\n\tif (t == 1)\r\n\t{\r\n\t\t// std::srand(time(0)); rand();\r\n\t\tfor (int i = 0; i < 25; ++i)\r\n\t\t\tstd::cerr << rand();\r\n\t\tint start = (rand() * 4) % n;\r\n\t\txs = xe = buildings[start].x;\r\n\t\tys = ye = buildings[start].y;\r\n\t\tans.push_back(start);\r\n\t\tbuilt[start] = true;\r\n\t\tstd::vector<Building> border;\r\n\t\tborder.push_back(buildings[start]);\r\n\t\twhile (!border.empty())\r\n\t\t\tBFS(border);\r\n\t\tif (ans.size() == n)\r\n\t\t{\r\n\t\t\tstd::cout << \"YES\\n\";\r\n\t\t\tfor (int i = 0; i < n; ++i)\r\n\t\t\t\tstd::cout << ans[i] + 1 << '\\n';\r\n\t\t}\r\n\t\telse\r\n\t\t\tstd::cout << \"NO\\n\";\r\n\t}\r\n\r\n\tchar I;\r\n\tstd::cin >> I;\r\n}"
}