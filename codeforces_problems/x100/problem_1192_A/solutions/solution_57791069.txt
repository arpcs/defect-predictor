{
    "id": 57791069,
    "contestId": 1192,
    "creationTimeSeconds": 1564133295,
    "relativeTimeSeconds": 4995,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "idah"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1564128300
    },
    "programmingLanguage": "Python 3",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "points": 0.0,
    "source": "import random\r\n\r\nnum = int(input())\r\nsubtask = int(input())  # if \ubb38\uc744 \uc774\uc6a9\ud558\uc5ec subtask\ubcc4 \ubb38\uc81c\ub97c \uac01\uac01 \ud480\uc774\r\nposition = []\r\nfor i in range(num):\r\n    a = list(map(int, input().split()))\r\n    position.append(a)\r\n\r\nedge = []\r\nfor i in range(num):\r\n    for j in range(i, num):\r\n        if i != j:\r\n            buffer0 = abs(position[j][0] - position[i][0])\r\n            buffer1 = abs(position[j][1] - position[i][1])\r\n\r\n            if buffer0 <= 1 and buffer1 <= 1:\r\n                edge.append([i, j])\r\n\r\n# print(edge)\r\ngraph = []\r\n\r\n\r\ndef find_route(i, b, graph, edge):\r\n    for item in edge:\r\n        if b == item[0]:\r\n            graph[i].append(item[1])\r\n            return item[1]\r\n\r\n\r\nfor i, start in enumerate(edge):\r\n    graph.append([])\r\n    a = start[0]\r\n    b = start[1]\r\n    graph[i].append(a)\r\n    graph[i].append(b)\r\n\r\n    for j in range(num - 2):\r\n        b = find_route(i, b, graph, edge)\r\n\r\n\r\nif subtask == 1 or subtask == 2:\r\n    yn = \"YES\"\r\n    check = []\r\n    for item in graph:\r\n        buffer = 0\r\n        try:\r\n            for j in range(num):\r\n                buffer += (num - item[j]) * j\r\n            check.append(buffer)\r\n        except IndexError:\r\n            continue\r\n\r\n    if len(check) == 0:\r\n        yn = \"NO\"\r\n        print(yn)\r\n    else:\r\n        print(yn)\r\n        idx = check.index(max(check))\r\n        result = graph[idx]\r\n\r\n        for item in result:\r\n            print(item + 1)\r\n"
}