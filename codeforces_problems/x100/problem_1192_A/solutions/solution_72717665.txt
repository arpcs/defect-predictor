{
    "id": 72717665,
    "contestId": 1192,
    "creationTimeSeconds": 1583659335,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "Mr.Robot_28"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2183,
    "memoryConsumedBytes": 221286400,
    "points": 100.0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 1510000;\r\nint dx[8] = {-1, -1, -1, 0, 1, 1, 1, 0};\r\nint dy[8] = {1, 0, -1, -1, -1, 0, 1, 1};\r\nint UF[N];\r\nmap <pair <int, int> , int> Map, Map2;\r\nint n;\r\nstruct point{\r\n\tint x, y;\r\n}P[N];\r\nvector <int> E[N], G[N];\r\nint Num[N], cnt;\r\nset <pair <int, int> > Set;\r\nvoid DFS(int a)\r\n{\r\n\tNum[a] = ++cnt;\r\n\tfor(int i = 0; i < E[a].size(); i++)\r\n\t{\r\n\t\tint x = E[a][i];\r\n\t\tif(!Num[x])\r\n\t\t{\r\n\t\t\tDFS(x);\r\n\t\t}\r\n\t}\r\n}\r\nint vis[N], blocked[N] ,pos[N], w[N][9];\r\nint BN[N], ReNum[N], Q[N], head, tail;\r\nint find(int a)\r\n{\r\n\tif(a == UF[a]) return a;\r\n\telse return UF[a] = find(UF[a]);\r\n}\r\nvoid merge(int a, int b)\r\n{\r\n\ta = find(a);\r\n\tb = find(b);\r\n\tif(a != b)\r\n\t{\r\n\t\tUF[a] = b;\r\n\t}\r\n}\r\npriority_queue <int> PQ;\r\nvoid BFS()\r\n{\r\n\twhile(head < tail)\r\n\t{\r\n\t\tint x = Q[++head];\r\n\t\tfor(int i = 0; i < G[x].size(); i++){\r\n\t\t\tint t = G[x][i];\r\n\t\t\tif(vis[t])\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif(!blocked[t])\r\n\t\t\t{\r\n\t\t\t\tQ[++tail] = t;\r\n\t\t\t\tvis[t] = 1;\r\n\t\t\t}\r\n\t\t\telse if(!pos[t])\r\n\t\t\t{\r\n\t\t\t\tpos[t] = 1;\r\n\t\t\t\tPQ.push(ReNum[t]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nsigned main() {\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL);\r\n\tcout.tie(NULL);\r\n\tint i, j, sub;\r\n\tcin >> n >> sub;\r\n\tfor(int i = 1; i <= n; i++)\r\n\t{\r\n\t\tint x, y;\r\n\t\tcin >> x >> y;\r\n\t\tP[i] = {x, y};\r\n\t\tMap[{x, y}] = i;\r\n\t\tSet.insert({x, y});\r\n\t}\r\n\tfor(int i = 1; i <= n; i++)\r\n\t{\r\n\t\tfor(int j = 0; j < 8; j++)\r\n\t\t{\r\n\t\t\tint tx = P[i].x + dx[j], ty = P[i].y + dy[j];\r\n\t\t\tSet.insert({tx, ty});\r\n\t\t\tif(Map.count({tx, ty}))\r\n\t\t\t{\r\n\t\t\t\tE[i].push_back(Map[{tx, ty}]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tDFS(1);\r\n\tif(cnt != n)\r\n\t{\r\n\t\tcout << \"NO\";\r\n\t\treturn 0;\r\n\t}\r\n\tint c = 0;\r\n\tset <pair <int, int> > :: iterator it;\r\n\tfor(it = Set.begin(); it != Set.end(); it++)\r\n\t{\r\n\t\tMap2[*it] = ++c;\r\n\t}\r\n\tfor(it = Set.begin(); it != Set.end(); it++)\r\n\t{\r\n\t\tint a = Map2[*it];\r\n\t\tfor(int j = 1; j < 8; j+=2)\r\n\t\t{\r\n\t\t\tint tx = it -> first + dx[j], ty = it -> second + dy[j];\r\n\t\t\tif(Map2.count({tx, ty}))\r\n\t\t\t{\r\n\t\t\t\tG[a].push_back(Map2[{tx, ty}]);\r\n\t\t\t} \r\n\t\t}\r\n\t}\r\n\tfor(int i = 1; i <= n; i++)\r\n\t{\r\n\t\tfor(int j = 0; j < 8; j++)\r\n\t\t{\r\n\t\t\tint tx = P[i].x + dx[j], ty = P[i].y + dy[j];\r\n\t\t\tw[i][j] = Map2[{tx, ty}];\r\n\t\t}\r\n\t}\r\n\tfor(int i = 1; i <= n; i++)\r\n\t{\r\n\t\tBN[i] = Map2[{P[i].x, P[i].y}];\r\n\t\tReNum[BN[i]] = i;\r\n\t\tblocked[BN[i]] = 1;\r\n\t}\r\n\tfor(int i = 1; i <= c; i++)\r\n\t{\r\n\t\tUF[i] = i;\r\n\t}\r\n\tfor(int i = 1; i <= c; i++)\r\n\t{\r\n\t\tfor(int j = 0; j < G[i].size(); j++)\r\n\t\t{\r\n\t\t\tint x = G[i][j];\r\n\t\t\tif(!blocked[x] && !blocked[i])\r\n\t\t\t{\r\n\t\t\t\tmerge(i, x);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tQ[++tail] = 1;\r\n\tvis[1] = 1;\r\n\tBFS();\r\n\tvector <int> Res;\r\n\twhile(!PQ.empty())\r\n\t{\r\n\t\tint a = PQ.top();\r\n\t\tPQ.pop();\r\n\t\tint x = BN[a], ck = 0;\r\n\t\tif(!pos[x] || !blocked[x])\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tint pv = -1;\r\n\t\tfor(int i = 0; i < 8; i++)\r\n\t\t{\r\n\t\t\tint t = w[a][i];\r\n\t\t\tif(blocked[t])\r\n\t\t\t{\r\n\t\t\t\tpv = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(pv != -1)\r\n\t\t{\r\n\t\t\tint TP[9], cc = 0;\r\n\t\t\tfor(int i  = 0; i < 8; i++)\r\n\t\t\t{\r\n\t\t\t\tTP[i] = 0;\r\n\t\t\t}\r\n\t\t\tfor(int i = 0; i < 8; i++)\r\n\t\t\t{\r\n\t\t\t\tint t = w[a][(pv + i) % 8];\r\n\t\t\t\tif(blocked[t])\r\n\t\t\t\t{\r\n\t\t\t\t\tcc++;\r\n\t\t\t\t}\r\n\t\t\t\telse TP[(pv + i) % 8] = cc;\r\n\t\t\t}\r\n\t\t\tfor(int i = 1; i < 8; i += 2)\r\n\t\t\t{\r\n\t\t\t\tfor(int j = i + 2; j < 8; j += 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tint t1 = w[a][i], t2 = w[a][j];\r\n\t\t\t\t\tif(!blocked[t1] && !blocked[t2] && TP[i] != TP[j] && find(t1) == find(t2))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tck = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(ck)\r\n\t\t\t{\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t}\r\n\t\tRes.push_back(a);\r\n\t\tblocked[x] =0;\r\n\t\tQ[++tail] = x;\r\n\t\tvis[x] = 1;\r\n\t\tBFS();\r\n\t\tfor(int i = 0; i < G[x].size(); i++)\r\n\t\t{\r\n\t\t\tint z= G[x][i];\r\n\t\t\tif(!blocked[z])\r\n\t\t\t{\r\n\t\t\t\tmerge(x, z);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i = 0; i < E[a].size(); i++)\r\n\t\t{\r\n\t\t\tint z = E[a][i];\r\n\t\t\tPQ.push(z);\r\n\t\t}\r\n\t}\r\n\tcout << \"YES\\n\";\r\n\tfor(int i = Res.size() - 1; i >= 0; i--)\r\n\t{\r\n\t\tcout << Res[i] << \"\\n\";\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}