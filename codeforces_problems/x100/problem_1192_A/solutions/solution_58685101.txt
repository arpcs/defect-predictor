{
    "id": 58685101,
    "contestId": 1192,
    "creationTimeSeconds": 1565647070,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "haas"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2074,
    "memoryConsumedBytes": 69836800,
    "points": 100.0,
    "source": "#include <iostream>\n#include <map>\n#include <vector>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\ntypedef pair<int, int> pie;\n#define X first\n#define Y second\n\nconst int maxN = 150 * 1000 + 100;\nconst int adj[8][2] = { \n\t{-1, 0}, {-1, 1}, \n\t{0, 1}, {1, 1}, \n\t{1, 0}, {1,-1}, \n\t{0, -1}, {-1, -1}\n};\n\nint n, t;\npie a[maxN];\nint stats[maxN][16];\nvector <int> s;\nmap <pie, int> f;\nset <int, std::greater<int>> edge;\n\nbool ready(int idx) {\n\tint *stat = stats[idx];\n\tint side = 0, corner = 0;\n\tfor (int i = 0; i < 8; i += 2) \n\t\tside += (stat[i] != 0), \n\t\tcorner += (stat[i + 1] != 0);\n\tif (side == 0) return corner <= 1;\n\tif (side == 1)\n\t\tfor (int i = 0; i < 8; i += 2) \n\t\t\tif (stat[i])\n\t\t\t\treturn stat[i + 3] == 0 && stat[i + 5] == 0;\n\tif (side == 2) {\n\t\tfor (int i = 0; i < 8; i += 2)\n\t\t\tif (stat[i] && stat[i + 2]) {\n\t\t\t\tif (stat[i + 5]) return false;\n\t\t\t\tif (stat[i + 1] == 1 &&\n\t\t\t\t\tstat[i] == stat[i + 2] &&\n\t\t\t\t\tstat[i] < 0) return false;\n\t\t\t\treturn true;\n\t\t\t}\n\t\treturn false;\n\t}\n\tif (side == 3) {\n\t\tfor (int i = 0; i < 8; i += 2) if (stat[i] == 0) {\n\t\t\tif (stat[i+2] == stat[i+6] && stat[i+2] < 0) \n\t\t\t\treturn stat[i+3] != 1 && stat[i+5] != 1 && stat[i + 4] != 1;\n\t\t\tif (stat[i+2] == stat[i+4] && stat[i+2] < 0) \n\t\t\t\treturn stat[i+3] != 1;\n\t\t\tif (stat[i+4] == stat[i+6] && stat[i+4] < 0) \n\t\t\t\treturn stat[i+5] != 1;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint cnt = 0;\nvoid dfs1(pie x) {\n\tcnt++;\n\tf[x] = -f[x];\n\tfor (int i = 0; i < 8; i++) {\n\t\tpie y (x.X + adj[i][0], x.Y + adj[i][1]);\n\t\tauto yit = f.find(y);\n\t\tif (yit != f.end() && yit->Y < 0) dfs1(y);\n\t}\n}\n\nset<int> buffer;\n\nvoid dfs2(pie x, int color, bool updates) {\n\tf[x] = color;\n\n\tif (updates) \n\t\tfor (int i = 0, rev = 4; i < 8; i++, rev = (rev + 1) % 8) {\n\t\t\tpie y (x.X + adj[i][0], x.Y + adj[i][1]);\n\t\t\tauto yit = f.find(y);\n\t\t\tif (yit != f.end() && yit->Y > 0)\n\t\t\t\tbuffer.insert(yit->Y),\n\t\t\t\tstats[yit->Y][rev] = stats[yit->Y][rev + 8] = min(color, 1);\n\t\t}\n\n\tfor (int i = 0; i < 8; i += 2) {\n\t\tpie y (x.X + adj[i][0], x.Y + adj[i][1]);\n\t\tauto yit = f.find(y);\n\t\tif (yit != f.end() && yit->Y < color) dfs2(y, color, updates);\n\t}\n}\n\nint main() {\n\tios_base::sync_with_stdio(false);\n\tcin.tie(NULL);\n\tcin >> n >> t;\n\tfor (int i = 1; i <= n; i++) cin >> a[i].X >> a[i].Y;\n\t\n\tfor (int i = 1; i <= n; i++) f[a[i]] = -i;\n\tdfs1(a[1]);\n\tif (cnt != n) { cout << \"NO\" << endl; return 0; } \n\t\n\tint inf = -1e6;\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 0; j < 8; j++) {\n\t\t\tpie y(a[i].X + adj[j][0], a[i].Y + adj[j][1]);\n\t\t\tif (f.count(y) == 0) f[y] = inf;\n\t\t}\n\n\tint comp = 0;\n\tfor (auto x : f) if (x.Y == inf)\n\t\tdfs2(x.X, comp--, false);\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 0; j < 8; j++) {\n\t\t\tpie y (a[i].X + adj[j][0], a[i].Y + adj[j][1]);\n\t\t\tstats[i][j] = stats[i][j + 8] = min(f[y], 1);\n\t\t}\n\t\tif (ready(i)) edge.insert(i);\n\t}\n\n\twhile ((int)edge.size()) {\n\t\tint idx = *edge.begin();\n\t\tedge.erase(idx);\n\t\ts.push_back(idx);\n\t\tdfs2(a[idx], 0, true);\n\n\t\tfor (int x : buffer) {\n\t\t\tedge.erase(x);\n\t\t\tif (ready(x)) edge.insert(x);\n\t\t}\n\t\tbuffer.clear();\n\t}\n\t\n\treverse(s.begin(), s.end());\n\tif ((int)s.size() < n) { cout << \"NO\" << endl; return 13; }\n\n\tcout << \"YES\\n\";\n\tfor (int i = 0; i < (int)s.size(); i++)\n\t\tcout << s[i] << \"\\n\";\n\n\treturn 0;\n}\n"
}