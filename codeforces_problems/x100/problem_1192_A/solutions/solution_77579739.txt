{
    "id": 77579739,
    "contestId": 1192,
    "creationTimeSeconds": 1587492863,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "CarolinaMoura"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2386,
    "memoryConsumedBytes": 145305600,
    "points": 100.0,
    "source": "#include <bits/stdc++.h>\r\n\r\nstatic struct FASTIO {\r\n\r\n  char READ_CHARACTER; bool REMAINING_CHARACTER = false;\r\n\r\n  inline void ignore(); inline void flush();\r\n\r\n  template <typename T> inline bool READ_INT(T &x); template <typename T> inline bool READ_STRING(T &x);\r\n  /*                                                          Fast I/O Code Optimizer                                                          */\r\n  template<size_t N> inline bool READ_CHAR_ARRAY(char (&x)[N]); template<size_t N> inline bool READ_VAR(char (&x)[N]);\r\n  /*                    A tool to optimize execution time of C++ codes by replacing methods of reading and writing variables                   */\r\n  template <typename T> inline bool READ_CHAR(T &x); inline bool READ_CHAR_ARRAY(char*& x); inline bool READ_GETLINE(std::string &x);\r\n  /*                                                    Use it on fastio.pythonanywhere.com                                                    */\r\n  template <typename T> inline bool READ_FLOAT(T &x); template <typename T> inline bool READ_DOUBLE(T &x);\r\n  /*                                          Github Project: github.com/bfs07/Fast-IO-Code-Optimizer                                          */\r\n  template<std::size_t N> inline bool READ_BITSET(std::bitset<N> &bit); template<std::size_t N> inline bool READ_VAR(std::bitset<N> &bit);\r\n  inline bool READ_VAR(bool &x); inline bool READ_VAR(short int &x); inline bool READ_VAR(int &x); \r\n  inline bool READ_VAR(long int &x); inline bool READ_VAR(long long int &x); inline bool READ_VAR(unsigned short int &x);\r\n  inline bool READ_VAR(unsigned int &x); inline bool READ_VAR(unsigned long &x); inline bool READ_VAR(unsigned long long &x);\r\n  inline bool READ_VAR(std::string &x); inline bool READ_VAR(char &x); inline bool READ_VAR(char*& x); inline bool READ_VAR(float &x);\r\n  inline bool READ_VAR(double &x); inline bool READ_VAR(long double &x); template <typename T> inline void WRITE_INT(T x);\r\n  inline void WRITE_STRING(std::string &x); inline void WRITE_CHAR(char x); inline void WRITE_CHAR_ARRAY(const char *x);\r\n  inline void WRITE_FLOAT(float x); template <typename T> inline void WRITE_DOUBLE(T x); inline void WRITE_VAR(bool x);\r\n  inline void WRITE_VAR(short int x); inline void WRITE_VAR(int x); inline void WRITE_VAR(long int x); inline void WRITE_VAR(long long int x);\r\n  inline void WRITE_VAR(unsigned short int x); inline void WRITE_VAR(unsigned int x); inline void WRITE_VAR(unsigned long x);\r\n  inline void WRITE_VAR(unsigned long long x); inline void WRITE_VAR(char x); inline void WRITE_VAR(const char *x); \r\n  inline void WRITE_VAR(std::string &x); inline void WRITE_VAR(float x); inline void WRITE_VAR(double x); inline void WRITE_VAR(long double x);\r\n  template<std::size_t N> inline void WRITE_VAR(std::bitset<N> &bit); template<std::size_t N> inline void WRITE_BITSET(std::bitset<N> &bit);\r\n\r\n} __FIO__;\r\n\r\n\r\n#include <bits/stdc++.h>\r\n\r\n#define debug printf\r\n#define all(x) x.begin(),x.end()\r\n#define lp(i,a,b) for(int i = a ; i< b ; i++)\r\n#define ss second\r\n#define ff first\r\n#define ll long long\r\n#define pb push_back\r\n#define pii pair<int,int>\r\n#define mk make_pair\r\n\r\nconst int MAX = 850100 ;\r\nconst int MAXN = 150100 ;\r\nconst int inf = 1e9+10 ;\r\n\r\nusing namespace std ;\r\n\r\nint N , T , idx ;\r\nint X[MAX] , Y[MAX] , pai[MAX] , pai_aux[MAXN] ;\r\nint dx[8] = { 1,-1,0,0, 1,-1,1,-1 } , dy[8] = { 0,0,1,-1, -1,1, 1, -1} ;\r\nint dx_cyclic[8] = { -1 , -1 , 0 , 1 , 1 ,1 , 0, -1 } , dy_cyclic[8] = { 0 , -1 , -1 , -1, 0 , 1 , 1 ,1  } ;\r\npii id[MAX] ;\r\nbool is_full[MAX] , reachable[MAX] , checked[MAX] , freq[MAX] ;\r\nmap< pii , int > mp ;\r\nset<int> s ;\r\nvector<int> ans , fila , fila2 ;\r\nvector<int> componente[MAX] , adj[MAX] , adj_cyclic[MAX] ;\r\nset<int>::iterator it ;\r\n\r\n \r\n\r\nint get_code(int x, int y)\r\n{\r\n\r\n    if( mp.find( mk(x,y) ) == mp.end() ) return 0 ;\r\n    return mp.find( mk(x,y) )->ss ;\r\n\r\n}\r\n\r\nint find(int x)\r\n{\r\n    if( x == pai[x] ) return x ;\r\n    return pai[x] = find( pai[x] ) ;\r\n}\r\n\r\n\r\nbool identify_articulation(int name)\r\n{\r\n    int j = -1 ;\r\n\r\n    lp(i,0,8)\r\n        if( is_full[ adj_cyclic[name][i] ] ) { j = i ; break ; }\r\n\r\n    if( j == -1 ) return false ;\r\n\r\n    int beg = -1, en = beg , times = 0 ;\r\n    bool resp = false;\r\n\r\n    for(int i = (j+1)%8 ; true ; i = (i+1)%8 )\r\n    {\r\n\r\n        if( i == ((j+1)%8) && times == 1 ) break ;\r\n        else if( i == ((j+1)%8) && times == 0 ) times ++ ;\r\n\r\n        int c = adj_cyclic[name][i] ;\r\n\r\n        if( is_full[c] )\r\n        {\r\n\r\n            if( beg == -1 ) continue ;\r\n            if( beg % 2 == 1 && en == beg )  { beg = -1 ; continue ; }\r\n\r\n            if( freq[ find( adj_cyclic[name][beg]) ] ) resp = true ;\r\n            else freq[ find( adj_cyclic[name][beg]) ] = true ;\r\n\r\n            beg = -1 ;\r\n            continue ;\r\n        }\r\n\r\n        if( beg == -1 ) beg = en = i ;\r\n        else en = i ;\r\n\r\n    }\r\n\r\n    lp(i,0,8)\r\n        freq[ find( adj_cyclic[name][i]) ] = false ;\r\n\r\n    return resp ;\r\n\r\n}\r\n\r\nbool identify_infinity(int name)\r\n{\r\n    lp(i,0,4)\r\n    {\r\n        int c = adj[name][i] ;\r\n        if(c != 0 && reachable[ find(c) ]) return true ;\r\n    }\r\n\r\n    return false ;\r\n\r\n}\r\nbool check(int i) { return ( !identify_articulation(i) )&identify_infinity(i) ; }\r\n\r\ninline void to_change(int name)\r\n{\r\n\r\n    for(int i = 0 ; i < 8 ; i++ )\r\n    {\r\n\r\n        int c = adj[name][i] ;\r\n\r\n        if( c == 0 || !is_full[c] ) continue ;\r\n\r\n        if( !freq[c] )\r\n        {\r\n            freq[c] = true ;\r\n            fila2.pb(c) ;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nbool join(int a, int b, bool ok )\r\n{\r\n\r\n    a = find(a) ;\r\n    b = find(b) ;\r\n\r\n    if(a==b) return false ;\r\n\r\n    if( componente[a].size() > componente[b].size() ) swap( a , b  );\r\n\r\n    pai[a] = b ;\r\n    if( !reachable[b] && reachable[a] )\r\n    {\r\n\r\n        reachable[b] = true ;\r\n        if(ok) for(int i : componente[b] ) fila.pb(i) ;\r\n    }\r\n\r\n    for( int i : componente[a] )\r\n    {\r\n        componente[b].pb(i) ;\r\n        if( ok ) fila.pb(i) ;\r\n    }\r\n    componente[a].clear() ;\r\n\r\n\r\n    return true ;\r\n\r\n}\r\n\r\nint find_aux(int x)\r\n{\r\n    if( x == pai_aux[x] ) return x ;\r\n    return pai_aux[x] = find_aux( pai_aux[x] ) ;\r\n}\r\ninline void join_aux(int a, int b)\r\n{\r\n    a = find_aux(a) ;\r\n    b = find_aux(b) ;\r\n\r\n    if( rand() % 2 ) swap(a,b) ;\r\n\r\n    pai_aux[a] = b ;\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d%d\", &N , &T ) ;\r\n    lp(i,1,N+1)\r\n    {\r\n        scanf(\"%d%d\", &X[i] , &Y[i]) ;\r\n        mp.insert( mk( mk( X[i] , Y[i] ) , i ) ) ;\r\n        is_full[i] = true ;\r\n        pai_aux[i] = i ;\r\n    }\r\n\r\n    idx = N ;\r\n\r\n    lp(i,1,N+1)\r\n    {\r\n        for(int j = 0 ; j < 8 ; j++ )\r\n        {\r\n\r\n            int nx = dx[j] + X[i] ;\r\n            int ny = dy[j] + Y[i] ;\r\n\r\n            if( mp.find( mk(nx,ny) ) == mp.end() ) mp.insert( mk( mk(nx,ny) , ++idx ) ) ;\r\n\r\n            if( is_full[ get_code(nx,ny) ] ) join_aux( i , get_code(nx,ny) ) ;\r\n\r\n        }\r\n    }\r\n\r\n    lp(i,2,N+1)\r\n        if( find_aux(i) != find_aux(1) ) {  printf(\"NO\\n\") ; return 0 ; }\r\n\r\n    for(auto p : mp )\r\n    {\r\n        X[p.ss] = p.ff.ff ;\r\n        Y[p.ss] = p.ff.ss ;\r\n        pai[ p.ss ] = p.ss ;\r\n        componente[p.ss].pb( p.ss ) ;\r\n\r\n        for(int j = 0 , nx , ny , c ; j < 8 ; j++ )\r\n        {\r\n\r\n            nx = p.ff.ff + dx[j] ;\r\n            ny = p.ff.ss + dy[j] ;\r\n            c = get_code(nx,ny) ;\r\n\r\n            adj[p.ss].pb(c) ;\r\n\r\n            nx = p.ff.ff + dx_cyclic[j] ;\r\n            ny = p.ff.ss + dy_cyclic[j] ;\r\n            c = get_code(nx,ny) ;\r\n\r\n            adj_cyclic[p.ss].pb( c ) ;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    int id = -1 , mn = inf ;\r\n\r\n    for(auto p : mp )\r\n        if( p.ff.ff < mn ) mn = p.ff.ff , id = p.ss ;\r\n    reachable[id] = true ;\r\n\r\n    for(auto p : mp )\r\n    {\r\n\r\n        if( is_full[p.ss] ) continue ;\r\n\r\n        lp(i,0,4)\r\n            if( adj[p.ss][i] != 0 && !is_full[ adj[p.ss][i] ] )\r\n                join( p.ss , adj[p.ss][i] , false ) ;\r\n\r\n    }\r\n\r\n\r\n    lp(i,1,N+1)\r\n        if( check(i) )\r\n        {\r\n            s.insert(i) ;\r\n            checked[i] = true ;\r\n        }\r\n\r\n    while( s.size() > 0 )\r\n    {\r\n        it = prev( s.end() ) ;\r\n\r\n        int best_id = *it ;\r\n        s.erase(it) ;\r\n\r\n        ans.pb( best_id ) ;\r\n        is_full[best_id] = false ;\r\n        fila.pb(best_id) ;\r\n\r\n        lp(i,0,4)\r\n            if( !is_full[ adj[best_id][i] ] )\r\n                join( adj[best_id][i] , best_id , true ) ;\r\n\r\n        for(int i : fila ) to_change(i) ;\r\n        fila.clear() ;\r\n\r\n        for(int i : fila2 )\r\n        {\r\n            freq[i] = false ;\r\n\r\n            bool val = check(i) ;\r\n\r\n            if( val && !checked[i] )\r\n            {\r\n                s.insert(i) ;\r\n                checked[i] = true ;\r\n            }\r\n            else if( !val && checked[i] )\r\n            {\r\n                s.erase( s.find(i) ) ;\r\n                checked[i] = false ;\r\n            }\r\n\r\n        }\r\n\r\n        fila2.clear() ;\r\n\r\n    }\r\n\r\n    printf(\"YES\\n\") ;\r\n    reverse(all(ans)) ;\r\n    for(int i : ans ) printf(\"%d\\n\" , i ) ;\r\n\r\n}\r\n\r\n\r\n#undef all\r\n#undef lp\r\n#undef debug\r\n#undef all\r\n#undef lp\r\n#undef ss\r\n#undef ff\r\n#undef ll\r\n#undef pb\r\n#undef pii\r\n#undef mk\r\n\r\ninline void FASTIO::ignore() {\r\n  if(REMAINING_CHARACTER == true) REMAINING_CHARACTER = false; else READ_CHARACTER = getchar();\r\n}\r\n\r\ninline void FASTIO::flush() {\r\n  fflush(stdout);\r\n}\r\n\r\n// cin modifications\r\n\r\ntemplate <typename T>\r\ninline bool FASTIO::READ_INT(T &x) {\r\n  x = 0; T sig = 1;\r\n  if(!REMAINING_CHARACTER) READ_CHARACTER = getchar(), REMAINING_CHARACTER = true; else REMAINING_CHARACTER = false;\r\n  while (!isdigit(READ_CHARACTER) && READ_CHARACTER != EOF) sig = (READ_CHARACTER == '-' ? -sig : sig), READ_CHARACTER = getchar();\r\n  if(READ_CHARACTER == EOF) return REMAINING_CHARACTER = false, false;\r\n  while (isdigit(READ_CHARACTER)) x = x * 10 + READ_CHARACTER - '0', READ_CHARACTER = getchar();\r\n  x *= sig; REMAINING_CHARACTER = true;\r\n  return true;\r\n}\r\n\r\ntemplate <typename T>\r\ninline bool FASTIO::READ_STRING(T &x) {\r\n  x = \"\";\r\n  if(!REMAINING_CHARACTER) READ_CHARACTER = getchar(), REMAINING_CHARACTER = true; else REMAINING_CHARACTER = false;\r\n  while ((READ_CHARACTER == '\\n' || READ_CHARACTER == '\\t' || READ_CHARACTER == ' ')) READ_CHARACTER = getchar();\r\n  if(READ_CHARACTER == EOF) return REMAINING_CHARACTER = false, false;\r\n  while ((READ_CHARACTER != '\\n' && READ_CHARACTER != '\\t' && READ_CHARACTER != ' ' && READ_CHARACTER != EOF)) x += READ_CHARACTER, READ_CHARACTER = getchar();\r\n  REMAINING_CHARACTER = true;\r\n  return true;\r\n}\r\n\r\ninline bool FASTIO::READ_GETLINE(std::string &x) {\r\n  x = \"\";\r\n  if(!REMAINING_CHARACTER) READ_CHARACTER = getchar(), REMAINING_CHARACTER = true; else REMAINING_CHARACTER = false;\r\n  if(READ_CHARACTER == EOF) return REMAINING_CHARACTER = false, false;\r\n  while ((READ_CHARACTER != '\\n' && READ_CHARACTER != EOF)) x += READ_CHARACTER, READ_CHARACTER = getchar();\r\n  REMAINING_CHARACTER = false;\r\n  return true;\r\n}\r\n\r\ntemplate <typename T>\r\ninline bool FASTIO::READ_CHAR(T &x) {\r\n  if(!REMAINING_CHARACTER) READ_CHARACTER = getchar(), REMAINING_CHARACTER = true; else REMAINING_CHARACTER = false;\r\n  if(READ_CHARACTER == EOF) return REMAINING_CHARACTER = false, false;\r\n  while ((READ_CHARACTER == '\\n' || READ_CHARACTER == '\\t' || READ_CHARACTER == ' ')) READ_CHARACTER = getchar();\r\n  x = READ_CHARACTER; REMAINING_CHARACTER = false;\r\n  return true;\r\n}\r\n\r\n\r\ntemplate<size_t N>\r\ninline bool FASTIO::READ_CHAR_ARRAY(char (&x)[N]) {\r\n  if(!REMAINING_CHARACTER) READ_CHARACTER = getchar(), REMAINING_CHARACTER = true; else REMAINING_CHARACTER = false;\r\n  while ((READ_CHARACTER == '\\n' || READ_CHARACTER == '\\t' || READ_CHARACTER == ' ')) READ_CHARACTER = getchar();\r\n  if(READ_CHARACTER == EOF) return REMAINING_CHARACTER = false, false;\r\n  char *ptr = &x[0];\r\n  while ((READ_CHARACTER != '\\n' && READ_CHARACTER != '\\t' && READ_CHARACTER != ' ' && READ_CHARACTER != EOF)) *ptr++ = READ_CHARACTER, READ_CHARACTER = getchar();\r\n  *ptr = '\\0', REMAINING_CHARACTER = true;\r\n  return true;\r\n}\r\n\r\ninline bool FASTIO::READ_CHAR_ARRAY(char*& x) {\r\n  std::string y;\r\n  if(READ_STRING(y) == false)\r\n    return false;\r\n  x = new char[(int)y.size() + 1];\r\n  strcpy(x, y.c_str());\r\n  return true;\r\n}\r\n\r\ntemplate <typename T>\r\ninline bool FASTIO::READ_FLOAT(T &x) {\r\n  return (scanf(\"%f\", &x) != EOF);\r\n}\r\n\r\ntemplate <typename T>\r\ninline bool FASTIO::READ_DOUBLE(T &x) {\r\n  double y;\r\n  if(scanf(\"%lf\", &y) == EOF) return false;\r\n  x = y;\r\n  return true;\r\n}\r\n\r\ntemplate<std::size_t N>\r\ninline bool FASTIO::READ_BITSET(std::bitset<N> &x) {\r\n  if(!REMAINING_CHARACTER) READ_CHARACTER = getchar(), REMAINING_CHARACTER = true; else REMAINING_CHARACTER = false;\r\n  while ((READ_CHARACTER == '\\n' || READ_CHARACTER == '\\t' || READ_CHARACTER == ' ')) READ_CHARACTER = getchar();\r\n  if(READ_CHARACTER == EOF) return REMAINING_CHARACTER = false, false;\r\n  int i = 0; REMAINING_CHARACTER = true;\r\n  while (READ_CHARACTER == '0' || READ_CHARACTER == '1') x[i++] = READ_CHARACTER - '0', READ_CHARACTER = getchar();\r\n  return true;\r\n}\r\n\r\ninline bool FASTIO::READ_VAR(short int &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(int &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(long int &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(long long int &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(unsigned short int &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(unsigned int &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(unsigned long &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(unsigned long long &x) {\r\n  return READ_INT(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(std::string &x) {\r\n  return READ_STRING(x);    \r\n}\r\n\r\ninline bool FASTIO::READ_VAR(char &x) {\r\n  return READ_CHAR(x);\r\n}\r\n\r\ntemplate<size_t N>\r\ninline bool FASTIO::READ_VAR(char (&x)[N]) {\r\n  return READ_CHAR_ARRAY(x);\r\n}\r\n\r\ninline bool FASTIO::READ_VAR(char*& x) {\r\n  return READ_CHAR_ARRAY(x);\r\n}\r\n\r\ninline bool FASTIO::READ_VAR(float &x) {\r\n  return READ_FLOAT(x);\r\n}\r\n\r\ninline bool FASTIO::READ_VAR(double &x) {\r\n  return READ_DOUBLE(x);\r\n}\r\n\r\ninline bool FASTIO::READ_VAR(long double &x) {\r\n  return READ_DOUBLE(x);\r\n}\r\n\r\ntemplate<std::size_t N>\r\ninline bool FASTIO::READ_VAR(std::bitset<N> &x) {\r\n  return READ_BITSET(x);\r\n}\r\n\r\n// cout modifications\r\n\r\ntemplate <typename T>\r\ninline void FASTIO::WRITE_INT(T x) {\r\n  if (x < 0) {putchar('-'); x = -x; }\r\n  char writeBuffer[20], *writePtr = writeBuffer;\r\n  do {\r\n    *writePtr++ = '0' + x % 10;\r\n    x /= 10;\r\n  }\r\n  while (x);\r\n  do  { putchar(*--writePtr); }\r\n  while (writePtr > writeBuffer);\r\n}\r\n\r\ninline void FASTIO::WRITE_CHAR(char x) {\r\n  putchar(x);\r\n}\r\n\r\ninline void FASTIO::WRITE_CHAR_ARRAY(const char *x) {\r\n  while(*x != '\\0')\r\n    putchar(*x++);\r\n}\r\n\r\ninline void FASTIO::WRITE_STRING(std::string &x) {\r\n  for(char c: x) \r\n    putchar(c);\r\n}\r\n\r\ninline void FASTIO::WRITE_FLOAT(float x) {\r\n  printf(\"%f\", x);\r\n}\r\n\r\ntemplate <typename T>\r\ninline void FASTIO::WRITE_DOUBLE(T x) {\r\n  printf(\"%lf\", (double)x);\r\n}\r\n\r\ntemplate<std::size_t N>\r\ninline void FASTIO::WRITE_BITSET(std::bitset<N> &x) {\r\n  for(int i = (int)x.size() - 1; i >= 0; i--)\r\n    putchar(x[i] + 48);\r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(bool x) {\r\n  WRITE_INT(x);\r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(short int x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(int x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(long int x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(long long int x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(unsigned short int x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(unsigned int x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(unsigned long x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(unsigned long long x) {\r\n  WRITE_INT(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(std::string &x) {\r\n  WRITE_STRING(x);    \r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(char x) {\r\n  WRITE_CHAR(x);\r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(const char *x) {\r\n  WRITE_CHAR_ARRAY(x);\r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(float x) {\r\n  WRITE_FLOAT(x);\r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(double x) {\r\n  WRITE_DOUBLE(x);\r\n}\r\n\r\ninline void FASTIO::WRITE_VAR(long double x) {\r\n  WRITE_DOUBLE(x);\r\n}\r\n\r\ntemplate<std::size_t N>\r\ninline void FASTIO::WRITE_VAR(std::bitset<N> &x) {\r\n  WRITE_BITSET(x);\r\n}  \r\n\r\n\r\n"
}