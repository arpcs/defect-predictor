{
    "id": 89348009,
    "contestId": 1192,
    "creationTimeSeconds": 1596901566,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "Meijer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2994,
    "memoryConsumedBytes": 185036800,
    "points": 100.0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// macros\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair<int, int> ii;\r\ntypedef pair<ll, ll> lll;\r\ntypedef tuple<int, int, int> iii;\r\ntypedef vector<int> vi;\r\ntypedef vector<ii> vii;\r\ntypedef vector<iii> viii;\r\ntypedef vector<ll> vll;\r\ntypedef vector<lll> vlll;\r\n#define REP(a,b,c) for(int a=int(b); a<int(c); a++)\r\n#define RE(a,c) REP(a,0,c)\r\n#define RE1(a,c) REP(a,1,c+1)\r\n#define REI(a,b,c) REP(a,b,c+1)\r\n#define REV(a,b,c) for(int a=int(c-1); a>=int(b); a--)\r\n#define FOR(a,b) for(auto& a : b)\r\n#define all(a) a.begin(), a.end()\r\n#define INF 1e9\r\n#define EPS 1e-9\r\n#define pb push_back\r\n#define popb pop_back\r\n#define fi first\r\n#define se second\r\n#define sz size()\r\n\r\n// input\r\ntemplate<class T> void IN(T& x) {cin >> x;}\r\ntemplate<class H, class... T> void IN(H& h, T&... t) {IN(h); IN(t...); }\r\n\r\n// output\r\ntemplate<class T1, class T2> void OUT(const pair<T1,T2>& x);\r\ntemplate<class T> void OUT(const T& x) {cout << x;}\r\ntemplate<class H, class... T> void OUT(const H& h, const T&... t) {OUT(h); OUT(t...); }\r\ntemplate<class T1, class T2> void OUT(const pair<T1,T2>& x) {OUT(x.fi,\" \",x.se);}\r\ntemplate<class... T> void OUTL(const T&... t) {OUT(t..., \"\\n\"); }\r\n\r\n//===================//\r\n//  Added libraries  //\r\n//===================//\r\n\r\n//===================//\r\n//end added libraries//\r\n//===================//\r\n\r\nvoid program();\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    program();\r\n}\r\n\r\n\r\n//===================//\r\n//   begin program   //\r\n//===================//\r\n\r\nconst int MX = 14e5;\r\n\r\nint dx4[]={-1,0,1,0};\r\nint dy4[]={0,1,0,-1};\r\nint dx8[]={ 0, 1, 1, 1, 0,-1,-1,-1};\r\nint dy8[]={ 1, 1, 0,-1,-1,-1, 0, 1};\r\n\r\nint n, t, m;\r\nint R[MX], C[MX];\r\nbitset<MX> visited;\r\nmap<ii,int> posID;\r\nmap<ii,int> f;\r\nset<ii> build;\r\nset<ii> out;\r\nset<int> pq;\r\nvi ans;\r\nint outside;\r\nset<ii> updateDestroy;\r\n\r\nint p[MX], r[MX], sets;\r\nvoid buildDSU(int dsuSize) {\r\n    RE(i,dsuSize) p[i]=i, r[i]=0;\r\n    sets = dsuSize;\r\n}\r\nint getSet(int i) {return i==p[i]?i:p[i]=getSet(p[i]);}\r\nbool isSameSet(int i, int j) {return getSet(i)==getSet(j);}\r\nvoid unionSet(int i, int j) {\r\n    if(!isSameSet(i,j)) {\r\n        i=p[i], j=p[j];\r\n        sets--;\r\n        if(r[i] > r[j]) {\r\n            p[j] = i;\r\n        } else {\r\n            p[i] = j;\r\n            if(r[i] == r[j]) r[j]++;\r\n        }\r\n    }\r\n}\r\nbool isEmpty(int i) {\r\n    return isSameSet(i, outside);\r\n}\r\n\r\nbool hasEmptyConnected(ii p) {\r\n    int x=p.fi, y=p.se;\r\n    RE(d,4) {\r\n        int nx=x+dx4[d];\r\n        int ny=y+dy4[d];\r\n        if(out.count({nx,ny}))\r\n            return 1;\r\n    }\r\n   return 0;\r\n}\r\nbool canDestroy(ii p) {\r\n    if(!hasEmptyConnected(p)) return 0;\r\n    int x=p.fi, y=p.se;\r\n\r\n    int start=0;\r\n    bool isBuild[8];\r\n    RE(d,8) {\r\n        int nx=x+dx8[d];\r\n        int ny=y+dy8[d];\r\n        isBuild[d] = build.count({nx,ny});\r\n        if(isBuild[d]) {\r\n            start = d;\r\n        }\r\n    }\r\n    RE(d,4) {\r\n        int cd=d*2;\r\n        int nd=(cd+2)%8;\r\n        if(isBuild[cd] && isBuild[nd])\r\n            isBuild[(cd+1)%8]=1;\r\n    }\r\n\r\n    set<int> curRegions;\r\n    bool last=1;\r\n    int pos=(start+1)%8;\r\n    while(pos!=start) {\r\n        int nx=x+dx8[pos];\r\n        int ny=y+dy8[pos];\r\n        if(last && !isBuild[pos]) {\r\n            int reg = getSet(posID[{nx,ny}]);\r\n            if(curRegions.count(reg)) return 0;\r\n            curRegions.insert(reg);\r\n        }\r\n        last = isBuild[pos];\r\n        pos=(pos+1)%8;\r\n    }\r\n\r\n    return 1;\r\n}\r\nvoid updateBuild(ii p) {\r\n    if(canDestroy(p)) {\r\n        pq.insert(f[p]);\r\n    } else {\r\n        pq.erase(f[p]);\r\n    }\r\n}\r\nvoid addOutside(ii p) {\r\n    if(out.count(p)) return;\r\n    int x=p.fi, y=p.se;\r\n    bitset<8> isBuild;\r\n    RE(d,8) {\r\n        int nx=x+dx8[d];\r\n        int ny=y+dy8[d];\r\n        isBuild[d] = build.count({nx,ny});\r\n    }\r\n    if(!isBuild.count()) return;\r\n\r\n    out.insert(p);\r\n    RE(d,4) {\r\n        int nx=x+dx8[d*2];\r\n        int ny=y+dy8[d*2];\r\n        if(!isBuild[d*2])\r\n            addOutside({nx,ny});\r\n    }\r\n    RE(d,8) {\r\n        int nx=x+dx8[d];\r\n        int ny=y+dy8[d];\r\n        if(isBuild[d])\r\n            updateDestroy.insert({nx,ny});\r\n    }\r\n}\r\n\r\nvoid dfsPossible(ii p) {\r\n    if(!build.count(p)) return;\r\n    if(visited[f[p]]) return;\r\n    visited[f[p]] = 1;\r\n    int x=p.fi, y=p.se;\r\n    RE(d,8) {\r\n        int nx=x+dx8[d];\r\n        int ny=y+dy8[d];\r\n        dfsPossible({nx,ny});\r\n    }\r\n}\r\nbool isPossible() {\r\n    visited.reset();\r\n    dfsPossible({R[1],C[1]});\r\n    RE1(i,n) if(!visited[i]) return 0;\r\n    return 1;\r\n}\r\n\r\nvoid addPossible(ii p) {\r\n    if(posID.count(p)) return;\r\n    int res = posID.sz;\r\n    posID[p] = res;\r\n}\r\n\r\nvoid program() {\r\n    IN(n,t);\r\n    RE1(i,n) IN(R[i],C[i]);\r\n    RE1(i,n) build.insert({R[i],C[i]});\r\n    RE1(i,n) f[{R[i],C[i]}]=i;\r\n\r\n    // set outside(if there is a solution)\r\n    if(isPossible()) {\r\n        // create dsu\r\n        RE1(i,n) {\r\n            int x=R[i], y=C[i];\r\n            RE(d,8) {\r\n                int nx=x+dx8[d];\r\n                int ny=y+dy8[d];\r\n                addPossible({nx,ny});\r\n            }\r\n            addPossible({x,y});\r\n        }\r\n        m = posID.sz;\r\n        buildDSU(m);\r\n        FOR(p,posID) {\r\n            int x = p.fi.fi;\r\n            int y = p.fi.se;\r\n            if(build.count({x,y})) continue;\r\n            RE(d,4) {\r\n                int nx=x+dx4[d];\r\n                int ny=y+dy4[d];\r\n                if(build.count({nx,ny})) continue;\r\n                if(!posID.count({nx,ny})) continue;\r\n                unionSet(p.se, posID[{nx,ny}]);\r\n            }\r\n        }\r\n\r\n        ii start = *build.begin();\r\n        start.fi--;\r\n        outside = posID[start];\r\n        addOutside(start);\r\n        FOR(p,updateDestroy) updateBuild(p);\r\n        updateDestroy.clear();\r\n    }\r\n\r\n    // find solution\r\n    while(!pq.empty()) {\r\n        int p = *(--pq.end());\r\n        int x = R[p];\r\n        int y = C[p];\r\n        pq.erase(p);\r\n        build.erase({x,y});\r\n\r\n        // update dsu\r\n        RE(d,4) {\r\n            int nx=x+dx4[d];\r\n            int ny=y+dy4[d];\r\n            if(build.count({nx,ny})) continue;\r\n            if(!posID.count({nx,ny})) continue;\r\n            unionSet(posID[{x,y}], posID[{nx,ny}]);\r\n        }\r\n\r\n        addOutside({R[p],C[p]});\r\n        FOR(p,updateDestroy) updateBuild(p);\r\n        updateDestroy.clear();\r\n        ans.pb(p);\r\n    }\r\n\r\n    if(ans.sz == n) {\r\n        OUTL(\"YES\");\r\n        reverse(all(ans));\r\n        FOR(i,ans) OUTL(i);\r\n    } else {\r\n        OUTL(\"NO\");\r\n    }\r\n}\r\n\r\n"
}