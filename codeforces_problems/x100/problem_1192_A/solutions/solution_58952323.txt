{
    "id": 58952323,
    "contestId": 1192,
    "creationTimeSeconds": 1566041397,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "borcanirobert"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 2542,
    "memoryConsumedBytes": 95846400,
    "points": 100.0,
    "source": "// Map[(Point)] = indicele acelui punct in P\n// Set = set cu toate celulele punctelor si celulele vecine\n// E[i] = vector cu toate punctele vecine setate punctului P[i]\n// Map2[i] = al i-lea punct din Set\n// G[a] = 4vecinii punctului set[a], deci G retine 4vecinii tuturor punctelor relevante din plan (aduca a punctelor setate si a punctelor vecine)\n// w[i][j] = indicele din set al celui de-al j-lea vecin al punctului P[i]\n// BN[i] = indicele din set al pucntului P[i]\n// ReNum[i] = indicele din P al punctului Set[i]\n// blocked[i] = pucntul P[i] e inca nedistrus\n// pos[i] = puctul i a fost vizitat in BFS() ?\n\n#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <set>\n#include <map>\nusing namespace std;\n\nstruct Point{\n\tint x, y;\n};\n\nconst int di[] = {-1, -1, -1, 0, 1, 1, 1, 0};\nconst int dj[] = {-1, 0, 1, 1, 1, 0, -1, -1};\n\nusing PII = pair<int, int>;\nusing VI  = vector<int>;\nusing VVI = vector<VI>;\nusing VP  = vector<PII>;\nusing VVP = vector<VP>;\nusing VB  = vector<bool>;\n\nint N;\nvector<Point> P;\nmap<PII, int> Map, Map2;\nset<PII> Set;\nVVI E, G;\nVVI w;\nVI BN, ReNum;\nVB blocked, vis, pos;\n\nVI Num;\nint cnt;\n\nVI UF, h;\t\t// UF - Union Find\n\npriority_queue<int> PQ;\nqueue<int> Q;\nvoid BFS();\n\nvoid DFS(int s);\n\nvoid Merge(int a, int b);\nint Find(int a);\n\nvoid ReadData();\nvoid Solve();\n\nint main()\n{\n\tReadData();\n\tSolve();\n\n\treturn 0;\n}\n\nvoid ReadData()\n{\n\tint subtask;\n\n\tcin >> N >> subtask;\n\tP = vector<Point>(N + 1);\n\tfor (int i = 1; i <= N; ++i)\n\t{\n\t\tcin >> P[i].x >> P[i].y;\n\n\t\tMap[{P[i].x, P[i].y}] = i;\n\t\tSet.emplace(P[i].x, P[i].y);\n\t}\n\n\tcin.get();\n}\n\nvoid Solve()\n{\n\tE = VVI(N + 1);\n\tfor (int i = 1; i <= N; ++i)\n\t\tfor (int k = 0; k < 8; ++k)\n\t\t{\n\t\t\tint tx = P[i].x + di[k];\n\t\t\tint ty = P[i].y + dj[k];\n\n\t\t\tSet.emplace(tx, ty);\n\t\t\tif (Map.count({tx, ty}))\n\t\t\t\tE[i].push_back(Map[{tx, ty}]);\n\t\t}\n\n\tNum = VI(N + 1);\n\tDFS(1);\n\n\tif (cnt != N)\n\t{\n\t\tcout << \"NO\" << '\\n';\n\t\treturn;\n\t}\n\n\tcnt = 0;\n\tfor (const auto& p : Set)\n\t\tMap2[p] = ++cnt;\n\n\tG = VVI(cnt + 1);\n\tfor (const auto& p : Set)\n\t{\n\t\tint i = Map2[p];\n\t\tfor (int k = 1; k < 8; k += 2)\n\t\t{\n\t\t\tint tx = p.first + di[k];\n\t\t\tint ty = p.second + dj[k];\n\n\t\t\tif (Map2.count({tx, ty}))\n\t\t\t{\n\t\t\t\tG[i].push_back(Map2[{tx, ty}]);\n\t\t\t}\n\t\t}\n\t}\n\n\tw = VVI(N + 1, VI(8));\n\tfor (int i = 1; i <= N; ++i)\n\t{\n\t\tfor (int k = 0; k < 8; ++k)\n\t\t{\n\t\t\tint tx = P[i].x + di[k];\n\t\t\tint ty = P[i].y + dj[k];\n\n\t\t\tw[i][k] = Map2[{tx, ty}];\n\t\t}\n\t}\n\n\tBN = VI(N + 1);\n\tReNum = VI(cnt + 1);\n\tblocked = pos = VB(cnt + 1);\n\tfor (int i = 1; i <= N; ++i)\n\t{\n\t\tBN[i] = Map2[{P[i].x, P[i].y}];\n\t\tReNum[Map2[{P[i].x, P[i].y}]] = i;\n\n\t\tblocked[BN[i]] = true;\n\t}\n\n\th = UF = VI(cnt + 1);\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tUF[i] = i;\n\tfor (int i = 1; i <= cnt; ++i)\n\t\tfor (const int& v : G[i])\n\t\t\tif (!blocked[i] && !blocked[v])\n\t\t\t\tMerge(i, v);\n\n\tVI sol;\n\n\tvis = VB(cnt + 1);\n\tQ.push(1);\n\tvis[1] = true;\n\tBFS();\n\n\twhile (!PQ.empty())\n\t{\n\t\tint c = PQ.top();\n\t\tPQ.pop();\n\n\t\tint x = BN[c];\n\n\t\tif (!blocked[x] || !pos[x])\n\t\t\tcontinue;\n\n\t\tbool ck{false};\n\t\tint vbl{-1};\n\t\tfor (int k = 0; k < 8; ++k)\n\t\t{\n\t\t\tint v = w[c][k];\n\n\t\t\tif (blocked[v])\n\t\t\t\tvbl = k;\n\t\t}\n\n\t\tif (vbl != -1)\n\t\t{\n\t\t\tint nR{0};\n\t\t\tVI R(8);\n\t\t\tfor (int k = 0; k < 8; ++k)\n\t\t\t{\n\t\t\t\tint v = w[c][(vbl + k) % 8];\n\n\t\t\t\tif (blocked[v])\n\t\t\t\t\t++nR;\n\t\t\t\telse\n\t\t\t\t\tR[(vbl + k) % 8] = nR;\n\t\t\t}\n\n\t\t\tfor (int k1 = 1; k1 < 8 && !ck; k1 += 2)\n\t\t\t\tfor (int k2 = k1 + 2; k2 < 8 && !ck; k2 += 2)\n\t\t\t\t{\n\t\t\t\t\tint v1 = w[c][k1], v2 = w[c][k2];\n\n\t\t\t\t\tif (!blocked[v1] && !blocked[v2] && R[k1] != R[k2] && Find(v1) == Find(v2))\n\t\t\t\t\t\tck = true;\n\t\t\t\t}\n\n\t\t\tif (ck)\n\t\t\t\tcontinue;\n\t\t}\n\n\t\t// Daca ajung aici, inseamna ca punctul c nu e o articulatie\n\t\tsol.push_back(c);\n\n\t\tQ.push(x);\n\n\t\tblocked[x] = false;\n\t\tvis[x] = true;\n\t\tBFS();\n\n\t\tfor (const int& v : G[x])\n\t\t\tif (!blocked[v])\n\t\t\t\tMerge(x, v);\n\n\t\tfor (const int& v : E[c])\n\t\t\tPQ.push(v);\n\t}\n\n\treverse(sol.begin(), sol.end());\n\n\tcout << \"YES\" << '\\n';\n\tfor (const int& x : sol)\n\t\tcout << x << '\\n';\n}\n\nvoid DFS(int s)\n{\n\tNum[s] = ++cnt;\n\n\tfor (const int& next : E[s])\n\t\tif (!Num[next])\n\t\t{\n\t\t\tDFS(next);\n\t\t}\n}\n\nvoid BFS()\n{\n\twhile (!Q.empty())\n\t{\n\t\tint p = Q.front();\n\t\tQ.pop();\n\n\t\t//cout << p << \" : \";\n\n\t\tfor (const int& v : G[p])\n\t\t{\n\t\t\tif (vis[v])\n\t\t\t\tcontinue;\n\n\t\t//\tcout << v << \"; \";\n\n\t\t\tif (!blocked[v])\n\t\t\t{\n\t\t\t\tQ.push(v);\n\t\t\t\tvis[v] = true;\n\t\t\t}\n\t\t\telse\n\t\t\t\tif (!pos[v])\n\t\t\t\t{\n\t\t\t\t\tPQ.push(ReNum[v]);\n\t\t\t\t\tpos[v] = true;\n\t\t\t\t}\n\t\t}\n\t//\tcout << '\\n';\n\t}\n}\n\nvoid Merge(int a, int b)\n{\n\tint c1 = Find(a);\n\tint c2 = Find(b);\n\n\tif (c1 == c2)\n\t\treturn;\n\n\tif (h[c1] < h[c2])\n\t\tUF[c1] = c2;\n\telse\n\t{\n\t\tUF[c2] = c1;\n\t\tif (h[c1] == h[c2])\n\t\t\t++h[c1];\n\t}\n}\n\nint Find(int a)\n{\n\tif (a == UF[a])\n\t\treturn a;\n\treturn UF[a] = Find(UF[a]);\n}\n"
}