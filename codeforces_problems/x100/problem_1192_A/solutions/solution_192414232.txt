{
    "id": 192414232,
    "contestId": 1192,
    "creationTimeSeconds": 1675651984,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "A",
        "name": "Building Skyscrapers",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "Azimjonm0012"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 655,
    "memoryConsumedBytes": 40652800,
    "points": 100.0,
    "source": "#include <bits/stdc++.h>\r\r\n\r\r\nusing namespace std;\r\r\n\r\r\ntemplate <typename T>\r\r\nvoid unique(vector<T> &u) {\r\r\n  sort(u.begin(), u.end());\r\r\n  u.resize(unique(u.begin(), u.end()) - u.begin());\r\r\n}\r\r\n\r\r\n#define range(i, m, n) for(int i = m; i < n; i++)\r\r\n#define husk(i, m, n) for(int i = m; i > n; i--)\r\r\n\r\r\ntemplate <typename T>\r\r\nvoid debug_out(T t) {\r\r\n  cerr << t;\r\r\n}\r\r\n\r\r\ntemplate <typename A, typename B>\r\r\nvoid debug_out(pair<A, B> u) {\r\r\n  cerr << \"(\" << u.first << \" \" << u.second << \")\";\r\r\n}\r\r\n\r\r\ntemplate <typename T>\r\r\nvoid debug_out(vector<T> t) {\r\r\n  int sz = t.size();\r\r\n  for(int i = 0; i < sz; i++) {\r\r\n    debug_out(t[i]);\r\r\n    if(i != sz - 1) cerr << \", \";\r\r\n  }\r\r\n}\r\r\n\r\r\ntemplate <typename T>\r\r\nvoid debug_out(vector<vector<T>> t) {\r\r\n  int sz = t.size();\r\r\n  for(int i = 0; i < sz; i++) {\r\r\n    debug_out(t[i]);\r\r\n    if(i != sz - 1) cerr << endl;\r\r\n  }\r\r\n}\r\r\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\" << endl, debug_out(__VA_ARGS__), cerr << endl;\r\r\n\r\r\nclass dsu {\r\r\n public:\r\r\n  vector<int> p;\r\r\n  int n;\r\r\n\r\r\n  dsu(int _n) : n(_n) {\r\r\n    p.resize(n);\r\r\n    iota(p.begin(), p.end(), 0);\r\r\n  }\r\r\n\r\r\n  inline int get(int x) {\r\r\n    return (x == p[x] ? x : (p[x] = get(p[x])));\r\r\n  }\r\r\n\r\r\n  inline bool unite(int x, int y) {\r\r\n    x = get(x);\r\r\n    y = get(y);\r\r\n    if (x != y) {\r\r\n      p[x] = y;\r\r\n      return true;\r\r\n    }\r\r\n    return false;\r\r\n  }\r\r\n};\r\r\n\r\r\nstruct point {\r\r\n  int x, y, id = -1;\r\r\n  point(){};\r\r\n  point(int _x, int _y) : x(_x), y(_y) {};\r\r\n  bool operator < (const point &a) const {\r\r\n    return id > a.id;\r\r\n  }\r\r\n  bool operator == (const point &a) const {\r\r\n    return x == a.x && y == a.y;\r\r\n  }\r\r\n};\r\r\n\r\r\nvoid debug_out(point a) {\r\r\n  cerr << \"(\" << a.x << \" \" << a.y << \")\";\r\r\n}\r\r\n\r\r\nvector<int> dx = {0, 1, 1, 1, 0, -1, -1, -1};\r\r\nvector<int> dy = {1, 1, 0, -1, -1, -1, 0, 1};\r\r\n\r\r\npoint sp(point a, int id) {\r\r\n  return point(a.x + dx[id], a.y + dy[id]);\r\r\n}\r\r\n\r\r\nlong long dis(point a) {\r\r\n  return 1LL * a.x * INT_MAX + a.y;\r\r\n}\r\r\n\r\r\nint n, t;\r\r\n\r\r\nint main() {\r\r\n  scanf(\"%d%d\", &n, &t);\r\r\n  vector<point> a(n);\r\r\n  range(i, 0, n) {\r\r\n    scanf(\"%d%d\", &a[i].x, &a[i].y);\r\r\n    a[i].id = i;\r\r\n  }\r\r\n  sort(a.begin(), a.end(), [&](point u, point v){return make_pair(u.x, u.y) < make_pair(v.x, v.y);});\r\r\n  vector<vector<int>> edges(n, vector<int>(8, -1));\r\r\n  dsu ss(n);\r\r\n  int l = 0, r = 0;\r\r\n  range(i, 0, n) {\r\r\n    if(i < n - 1 && a[i].x == a[i + 1].x && a[i].y == a[i + 1].y - 1) {\r\r\n      edges[a[i].id][0] = a[i + 1].id;\r\r\n      edges[a[i + 1].id][4] = a[i].id;\r\r\n      ss.unite(a[i].id, a[i + 1].id);\r\r\n    }\r\r\n    while(r < n && make_pair(a[r].x, a[r].y) <= make_pair(a[i].x + 1, a[i].y + 1)) r++;\r\r\n    while(l < n && make_pair(a[l].x, a[l].y) < make_pair(a[i].x + 1, a[i].y - 1)) l++;\r\r\n    range(j, l, r) {\r\r\n      int dif = a[j].y - a[i].y;\r\r\n      int id;\r\r\n      if(!dif) id = 2;\r\r\n      else id = (dif > 0 ? 1 : 3);\r\r\n      edges[a[i].id][id] = a[j].id;\r\r\n      edges[a[j].id][(id + 4) % 8] = a[i].id;\r\r\n      ss.unite(a[i].id, a[j].id);\r\r\n    }\r\r\n  }\r\r\n  range(i, 0, n) if(ss.get(i) != ss.get(0)) {\r\r\n    printf(\"NO\");\r\r\n    return 0;\r\r\n  }\r\r\n  sort(a.begin(), a.end());\r\r\n  reverse(a.begin(), a.end());\r\r\n  printf(\"YES\\n\");\r\r\n  dsu st(4 * n + 1);\r\r\n  auto it = max_element(a.begin(), a.end(), [&](point a, point b){return a.y < b.y;});\r\r\n  st.unite(4 * n, 4 * it -> id);\r\r\n  vector<point> cur;\r\r\n  for(auto u : a) {\r\r\n    for(int i = 0; i < 8; i += 2) {\r\r\n      if(~edges[u.id][i]) continue;\r\r\n      point cc = sp(u, i);\r\r\n      cc.id = 4 * u.id + i / 2;\r\r\n      cur.push_back(cc);\r\r\n    }\r\r\n    for(int i = 1; i < 8; i += 2) {\r\r\n      if(edges[u.id][i - 1] == -1 && edges[u.id][i] == -1 && edges[u.id][(i + 1) % 8] == -1) st.unite(4 * u.id + i / 2, 4 * u.id + ((i + 1) % 8) / 2);\r\r\n    }\r\r\n  }\r\r\n  sort(cur.begin(), cur.end(), [&](point u, point v){return make_pair(u.x, u.y) < make_pair(v.x, v.y);});\r\r\n  l = 0;\r\r\n  range(i, 0, (int) cur.size()) {\r\r\n    point u = cur[i];\r\r\n    if(i < (int) cur.size() - 1 && make_pair(cur[i + 1].x, cur[i + 1].y) <= make_pair(u.x, u.y + 1)) st.unite(cur[i + 1].id, u.id);\r\r\n    while(l < (int) cur.size() && make_pair(cur[l].x, cur[l].y) < make_pair(u.x + 1, u.y)) l++;\r\r\n    if(cur[l].x == u.x + 1 && cur[l].y == u.y) st.unite(cur[l].id, u.id);\r\r\n  }\r\r\n  vector<int> alive(n, 1);\r\r\n  int iter = 0;\r\r\n  vector<int> pp(4 * n + 1);\r\r\n  auto valid = [&] (point v) {\r\r\n    iter++;\r\r\n    bool ok = false;\r\r\n    range(i, 0, 8) {\r\r\n      if(~edges[v.id][i] && alive[edges[v.id][i]]) {\r\r\n        int xs = 8;\r\r\n        i++;\r\r\n        if(i == 8) i = 0;\r\r\n        vector<int> pc;\r\r\n        while(xs--) {\r\r\n          if(~edges[v.id][i] && alive[edges[v.id][i]]) {\r\r\n            for(auto j : pc) {\r\r\n              if(pp[j] == iter) return false;\r\r\n            }\r\r\n            for(auto j : pc) pp[j] = iter;\r\r\n            pc.clear();\r\r\n          } else if(i % 2 == 0) {\r\r\n            pc.push_back(st.get(4 * v.id + i / 2));\r\r\n            ok |= st.get(4 * v.id + i / 2) == st.get(4 * n);\r\r\n          }\r\r\n          i++;\r\r\n          if(i == 8) i = 0;\r\r\n        }\r\r\n        break;\r\r\n      }\r\r\n      ok |= i == 7;\r\r\n    }\r\r\n    return ok;\r\r\n  };\r\r\n  set<point> pos;\r\r\n  range(i, 0, n) if(valid(a[i])) pos.insert(a[i]);\r\r\n  vector<vector<int>> in(4 * n + 1);\r\r\n  range(i, 0, 4 * n + 1) in[st.get(i)].push_back(i);\r\r\n  vector<int> res;\r\r\n  int cnt = 0;\r\r\n  vector<int> ap(n);\r\r\n  while(pos.size()) {\r\r\n    cnt++;\r\r\n    res.push_back(pos.begin() -> id);\r\r\n    point cc = *pos.begin();\r\r\n    pos.erase(pos.begin());\r\r\n    alive[cc.id] = 0;\r\r\n    vector<int> id, _id;\r\r\n    range(i, 0, 8) {\r\r\n      if(~edges[cc.id][i] && alive[edges[cc.id][i]]) id.push_back(edges[cc.id][i]);\r\r\n    }\r\r\n    for(int i = 0; i < 8; i += 2) {\r\r\n      if(edges[cc.id][i] == -1 || !alive[edges[cc.id][i]]) {\r\r\n        if(st.get(4 * n) != st.get(4 * cc.id + i / 2)) _id.push_back(st.get(4 * cc.id + i / 2));\r\r\n      }\r\r\n    }\r\r\n    unique(_id);\r\r\n    for(auto i : _id) {\r\r\n      for(auto j : in[i]) id.push_back(j / 4);\r\r\n    }\r\r\n    unique(id);\r\r\n    for(int i = 0; i < 8; i += 2) {\r\r\n      if(edges[cc.id][i] == -1 || !alive[edges[cc.id][i]]) {\r\r\n        st.unite(4 * cc.id + i / 2, 4 * n);\r\r\n      }\r\r\n    }\r\r\n    for(int i = 0; i < 8; i += 2) {\r\r\n      if(~edges[cc.id][i] && alive[edges[cc.id][i]]) {\r\r\n        int v = edges[cc.id][i];\r\r\n        st.unite(4 * v + ((i + 4) % 8) / 2, 4 * n);\r\r\n      }\r\r\n    }\r\r\n    for(auto i : id) {\r\r\n      if(ap[i] == cnt) continue;\r\r\n      ap[i] = cnt;\r\r\n      if(alive[i] && valid(a[i])) pos.insert(a[i]);\r\r\n      else pos.erase(a[i]);\r\r\n    }\r\r\n  }\r\r\n  reverse(res.begin(), res.end());\r\r\n  for(auto i : res) printf(\"%d\\n\", i + 1);\r\r\n  return 0;\r\r\n}\r\r\n"
}