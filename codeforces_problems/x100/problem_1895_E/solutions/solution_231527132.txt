{
    "id": 231527132,
    "contestId": 1895,
    "creationTimeSeconds": 1699234618,
    "relativeTimeSeconds": 6958,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "grematter"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1699227660
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 14131200,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n#define fast_io cin.tie(0);ios_base::sync_with_stdio(0);\nstring to_string(string s) { return '\"' + s + '\"';}\nstring to_string(char s) { return string(1, s);}\nstring to_string(const char* s) { return to_string((string) s);}\nstring to_string(bool b) { return (b ? \"true\" : \"false\");}\ntemplate <typename A> string to_string(A);\ntemplate <typename A, typename B>string to_string(pair<A, B> p) {return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";}\ntemplate <typename A> string to_string(A v) {bool f = 1; string r = \"{\"; for (const auto &x : v) {if (!f)r += \", \"; f = 0; r += to_string(x);} return r + \"}\";}\nvoid debug_out() { cout << endl; }\nvoid show() { cout << endl; }\nvoid pret() { cout << endl; exit(0);}\ntemplate <typename Head, typename... Tail> void debug_out(Head H, Tail... T) {cout << \" \" << to_string(H); debug_out(T...);}\ntemplate <typename Head, typename... Tail> void show(Head H, Tail... T) {cout <<H<<\" \"; show(T...);}\ntemplate <typename Head, typename... Tail> void pret(Head H, Tail... T) {cout <<H<<\" \"; pret(T...);}\n#define pr(...) cout << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\ntypedef long long ll;\n// #define int ll\ntypedef long double ld;\ntypedef vector<int> vi;\n#define disp(x) cout<<x<<\" \";\n#define rep(i,a,b) for(int i=a;i<(int)b;i++)\n#define fo(i,a,b) for(int i=a;i<=(int)b;i++)\n#define rf(i,a,b) for(int i=a;i>=(int)b;i--)\n#define mp make_pair\n#define pb emplace_back\n#define F first\n#define S second\n#define endl '\\n'\n//cout.setf(ios::fixed);cout.precision(18)\nconst int MOD = 1e9+7;\nconst int maxn = 300000+10;\nconst int win = 0;\nconst int draw = 1;\nconst int lose = 2;\n\nint outEdge[maxn + maxn];\npair <int, int> af[maxn];\npair <int, int> bf[maxn];\nint ax[maxn], ay[maxn], bx[maxn], by[maxn];\nbool visited[maxn + maxn];\nint verdict[maxn];\nint n, m;\n\nint findMono(int x) {\n    int l = 1, r = n;\n    if(af[1].first <= x) return -1;\n    int ans = l;\n    while(l <= r) {\n        int mid = (l + r )/ 2;\n        if(af[mid].first > x) {\n            ans = mid;\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return ans;\n}\n\nint findBi(int x) {\n    int l = 1, r = m;\n    if(bf[1].first <= x) return -1;\n    int ans = l;\n    while(l <= r) {\n        int mid = (l + r )/ 2;\n        if(bf[mid].first > x) {\n            ans = mid;\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return ans;\n}\n\nint find(int id) {\n    if(visited[id]) {\n        if(verdict[id] != -1) return verdict[id];\n        verdict[id] = draw;\n        return verdict[id];\n    }\n    visited[id] = 1;\n    int ans = -1;\n    if(outEdge[id] == -1) {\n        if(id > n) ans = lose;\n        else ans = win;\n\n        verdict[id] = ans;\n        return ans;\n    }\n    verdict[id] = find(outEdge[id]);\n    return verdict[id];\n}\n\nvoid f(){\n    cin >> n;\n    fo(i, 1, n) cin >> ax[i];\n    fo(i, 1, n) cin >> ay[i];\n    cin >> m;\n    fo(i, 1, m) cin >> bx[i];\n    fo(i, 1, m) cin >> by[i];\n    for (int i = 0; i < n + m +2; ++i)\n    {\n        outEdge[i] = -1;\n        visited[i] = 0;\n        verdict[i] = -1;\n    }\n    fo(i, 1, n) af[i] = {ax[i], ay[i]};\n    fo(i, 1, m) bf[i] = {bx[i], by[i]};\n    sort(af + 1, af + n + 1);\n    reverse(af + 1, af + n + 1);\n    sort(bf + 1, bf + m + 1);\n    reverse(bf + 1, bf + m + 1);\n\n    fo(i, 1, n) {\n        ay[i] = af[i].second;\n        af[i].second = i;\n    }\n    fo(j, 1, m) {\n        by[j] = bf[j].second;\n        bf[j].second = j;\n    }\n    fo(i, 2, n) {\n        if(ay[af[i - 1].second] > ay[i]) {\n            af[i].second = af[i - 1].second;\n        }\n    }\n    fo(i, 2, m) {\n        if(by[bf[i - 1].second] > by[i]) {\n            bf[i].second = bf[i - 1].second;\n        }\n    }\n    fo(i, 1, n) {\n        int id = findBi(ay[i]);\n        if(id != -1) {\n            outEdge[i] = n + bf[id].second;\n        }\n        // show(1, outEdge[i]);\n    }\n    fo(j, 1, m) {\n        int id = findMono(by[j]);\n        if(id != -1) {\n            outEdge[n + j] = af[id].second;\n        }\n        // show(n + j, outEdge[j]);\n    }\n    // fo(i, 1, n) {\n    //     pr(af[i], ay[i]);\n    // }\n    // fo(j, 1, m) {\n    //     pr(bf[j], by[j]);\n    // }\n    fo(i, 1, n) {\n        if(visited[i]) continue;\n        assert(-1 != find(i));\n    }\n    int ans[] = {0, 0, 0};\n    fo(i, 1, n) {\n        if(verdict[i] < 0 or verdict[i] > 2) continue;\n        // assert(verdict[i] >= 0 and verdict[i] < 3);\n        ans[verdict[i]]++;\n    }\n    show(ans[0], ans[1], ans[2]);\n}\n\nint32_t main(){\n    fast_io;\n    int t;\n    cin>>t;\n    while(t--){\n        // show(f());\n\n        f();\n\n        // if(f()){\n        //  show(\"YES\");\n        // }\n        // else show(\"NO\");\n    }\n    return 0;\n}",
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 0,
        "graphs": 0,
        "sortings": 20,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 10,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 20,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 30,
        "self-documenting": 30,
        "complex": 0,
        "readable": 30,
        "well-named": 30,
        "efficient": 0,
        "reusable": 10,
        "documented": 30,
        "good error-handling": 0,
        "good solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 100,
        "compilation error": 0,
        "runtime error": 0
    }
}