{
    "id": 233092859,
    "contestId": 1895,
    "creationTimeSeconds": 1700231224,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "bushra_9"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "Clang++20 Diagnostics",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <ctime>\r\n#include <cstdlib>\r\n\r\nenum Rank {\r\n    ACE = 1, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE, TEN, JACK, QUEEN, KING\r\n};\r\n\r\nenum Suit {\r\n    HEARTS, DIAMONDS, CLUBS, SPADES\r\n};\r\n\r\nclass Card {\r\npublic:\r\n    Card(Rank rank, Suit suit) : rank(rank), suit(suit) {}\r\n\r\n    void display() const {\r\n        std::string rankStr;\r\n        switch (rank) {\r\n            case ACE: rankStr = \"Ace\"; break;\r\n            case JACK: rankStr = \"Jack\"; break;\r\n            case QUEEN: rankStr = \"Queen\"; break;\r\n            case KING: rankStr = \"King\"; break;\r\n            default: rankStr = std::to_string(rank);\r\n        }\r\n\r\n        std::string suitStr;\r\n        switch (suit) {\r\n            case HEARTS: suitStr = \"Hearts\"; break;\r\n            case DIAMONDS: suitStr = \"Diamonds\"; break;\r\n            case CLUBS: suitStr = \"Clubs\"; break;\r\n            case SPADES: suitStr = \"Spades\"; break;\r\n        }\r\n\r\n        std::cout << rankStr << \" of \" << suitStr << std::endl;\r\n    }\r\n\r\nprivate:\r\n    Rank rank;\r\n    Suit suit;\r\n};\r\n\r\nclass Deck {\r\npublic:\r\n    Deck() {\r\n        for (int rank = ACE; rank <= KING; ++rank) {\r\n            for (int suit = HEARTS; suit <= SPADES; ++suit) {\r\n                cards.push_back(Card(static_cast<Rank>(rank), static_cast<Suit>(suit)));\r\n            }\r\n        }\r\n\r\n        // Shuffle the deck\r\n        std::srand(static_cast<unsigned int>(std::time(nullptr)));\r\n        std::random_shuffle(cards.begin(), cards.end());\r\n    }\r\n\r\n    Card drawCard() {\r\n        if (!cards.empty()) {\r\n            Card drawnCard = cards.back();\r\n            cards.pop_back();\r\n            return drawnCard;\r\n        } else {\r\n            // You may want to handle the case when the deck is empty\r\n            // For simplicity, let's just return a card with rank 0 and suit HEARTS\r\n            return Card(0, HEARTS);\r\n        }\r\n    }\r\n\r\nprivate:\r\n    std::vector<Card> cards;\r\n};\r\n\r\nint main() {\r\n    Deck deck;\r\n\r\n    for (int i = 0; i < 5; ++i) {\r\n        Card drawnCard = deck.drawCard();\r\n        drawnCard.display();\r\n    }\r\n\r\n    return 0;\r\n}"
}