{
    "id": 231575508,
    "contestId": 1895,
    "creationTimeSeconds": 1699270094,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Hayasa17"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 36147200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\nvoid solve(){\n\tint n;\n\tcin>>n;\n\tvector<pair<int,int>>A(n);\n\tfor(auto &[a,b]:A)cin>>a;\n\tfor(auto &[a,b]:A)cin>>b;\n\tint m;\n\tcin>>m;\n\tvector<pair<int,int>>B(m);\n\tfor(auto& [a,b]:B)cin>>a;\n\tfor(auto& [a,b]:B)cin>>b;\n\tsort(A.begin(),A.end());\n\tsort(B.begin(),B.end());\n\tvector<int>sa(n),sb(m);\n\tfor(int i=n-1;i>=0;--i){\n\t\tsa[i]=i;\n\t\tif(i<n-1&&A[sa[i+1]].second>A[i].second)\n\t\t\tsa[i]=sa[i+1];\n\t}\n\tfor(int i=m-1;i>=0;--i){\n\t\tsb[i]=i;\n\t\tif(i<m-1&&B[sb[i+1]].second>B[i].second)\n\t\t\tsb[i]=sb[i+1];\n\t}\n\tvector<vector<int>> G(n+m);\n\tvector<int>ind(n+m);\n\tfor(int i=0;i<n;++i){\n\t\tint t=lower_bound(B.begin(),B.end(),pair(A[i].second+1,0))-B.begin();\n\t\tif(t!=m)G[sb[t]+n].emplace_back(i),ind[i]++;\n\t}\n\tfor(int i=0;i<m;++i){\n\t\tint t=lower_bound(A.begin(),A.end(),pair(B[i].second+1,0))-A.begin();\n\t\tif(t!=n)G[sa[t]].emplace_back(i+n),ind[i+n]++;\n\t}\n\tvector<int>ans(n+m,-1);\n\tqueue<int>que;\n\tfor(int i=0;i<n+m;++i)\n\t\tif(!ind[i]){\n\t\t\tans[i]=i<n;\n\t\t\tque.push(i);\n\t\t}\n\twhile(!que.empty()){\n\t\tint x=que.front();\n\t\tque.pop();\n\t\tfor(int &y:G[x]){\n\t\t\tans[y]=ans[x];\n\t\t\tif(!--ind[y])que.push(y);\n\t\t}\n\t}\n\tans.resize(n);\n\tcout<<count(ans.begin(),ans.end(),1)<<\" \";\n\tcout<<count(ans.begin(),ans.end(),-1)<<\" \";\n\tcout<<count(ans.begin(),ans.end(),0)<<\" \";\n\tcout<<\"\\n\";\n}\nint main(){\n\tcin.tie(nullptr);\n\tios::sync_with_stdio(false);\n\t//freopen(\"hayasa\",\"r\",stdin);\n\t\n\tint T;\n\tcin>>T;\n\twhile(T--)solve();\n\treturn 0;\n}\n\n\t\n",
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 10,
        "brute force": 0,
        "graphs": 0,
        "sortings": 10,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 10,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 0,
        "readable": 0,
        "well-named": 0,
        "efficient": 10,
        "reusable": 0,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 80,
        "compilation error": 20,
        "runtime error": 0
    },
    "defect_evaluation_gpt_4": {
        "good solution": 90,
        "compilation error": 0,
        "runtime error": 10
    },
    "defect_evaluation_v1": {
        "good solution": 80,
        "compilation error": 10,
        "runtime error": 10
    }
}