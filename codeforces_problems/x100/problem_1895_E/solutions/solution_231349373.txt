{
    "id": 231349373,
    "contestId": 1895,
    "creationTimeSeconds": 1699109426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "RetiredNanfeng"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 36147200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\nvoid solve() {\r\n  int n; cin >> n;\r\n  vector<pair<int, int> > a(n);\r\n  for (auto &[x, y]: a) cin >> x;\r\n  for (auto &[x, y]: a) cin >> y;\r\n  int m; cin >> m;\r\n  vector<pair<int, int> > b(m);\r\n  for (auto &[x, y]: b) cin >> x;\r\n  for (auto &[x, y]: b) cin >> y;\r\n  \r\n  ranges::sort(a);\r\n  ranges::sort(b);\r\n\r\n  vector<int> sa(n), sb(m);\r\n  \r\n  for (int i = n - 1; i >= 0; i -- ) {\r\n    sa[i] = i;\r\n    if (i + 1 < n and a[sa[i + 1]].second >= a[i].second) {\r\n      sa[i] = sa[i + 1];\r\n    }\r\n  }\r\n\r\n  for (int i = m - 1; i >= 0; i -- ) {\r\n    sb[i] = i;\r\n    if (i + 1 < m and b[sb[i + 1]].second >= b[i].second) {\r\n      sb[i] = sb[i + 1];\r\n    }\r\n  }\r\n\r\n  vector<vector<int> > g(n + m);\r\n\r\n  vector<int> d(n + m);\r\n  \r\n  for (int i = 0; i < n; i ++ ) {\r\n    int j = ranges::lower_bound(b, pair(a[i].second + 1, 0)) - b.begin();\r\n    if (j != m) {\r\n      g[sb[j] + n].push_back(i);\r\n      d[i] += 1;\r\n    }\r\n  }\r\n\r\n  for (int i = 0; i < m; i ++ ) {\r\n    int j = ranges::lower_bound(a, pair(b[i].second + 1, 0)) - a.begin();\r\n    if (j != n) {\r\n      g[sa[j]].push_back(i + n);\r\n      d[i + n] += 1;\r\n    }\r\n  }\r\n  \r\n  vector<int> ans(n + m, -1);\r\n  queue<int> q;\r\n  for (int i = 0; i < n + m; i ++ ) if (d[i] == 0) {\r\n    ans[i] = i < n;\r\n    q.push(i);\r\n  }\r\n\r\n\r\n  while (not q.empty()) {\r\n    int u = q.front();\r\n    q.pop();\r\n    for (int v: g[u]) {\r\n      ans[v] = ans[u];\r\n      if (not (d[v] -= 1)) {\r\n        q.push(v);\r\n      }\r\n    }\r\n  }\r\n  \r\n  ans.resize(n);\r\n  cout << ranges::count(ans, 1) << \" \" << ranges::count(ans, -1) << \" \" \r\n       << ranges::count(ans, 0) << \"\\n\";\r\n}\r\n\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n  int T = 1; cin >> T;\r\n  while(T -- ) solve();\r\n  return 0;\r\n}",
    "category_evaluation": {
        "mathematics": 20,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 20,
        "graphs": 0,
        "sortings": 100,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 0,
        "readable": 0,
        "well-named": 0,
        "efficient": 100,
        "reusable": 0,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 70,
        "compilation error": 30,
        "runtime error": 0
    }
}