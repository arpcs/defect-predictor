{
    "id": 231353500,
    "contestId": 1895,
    "creationTimeSeconds": 1699111329,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "I_love_GSNQK"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 15052800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\npair<int, int> a[300005];\r\npair<int, int> b[300005];\r\nint max_def_a[300005];\r\nint max_def_b[300005];\r\nint nxt[600005];\r\nbool vis[600005];\r\n\r\nstruct DSU {\r\n  vector<int> par;\r\n  vector<int> cost;\r\n\r\n  DSU(int n = 0) {\r\n    par.assign(n + 5, -1);\r\n    cost.assign(n + 5, 0);\r\n  }\r\n\r\n  int root(int u) {\r\n    if (par[u] < 0)\r\n      return u;\r\n    return par[u] = root(par[u]);\r\n  }\r\n\r\n  int size(int u) {\r\n    return -par[root(u)];\r\n  }\r\n\r\n  bool join(int u, int v) {\r\n    // cerr << \"bruh \" << u << \" \" << v << endl;\r\n    u = root(u);\r\n    v = root(v);\r\n    if (u == v)\r\n      return false;\r\n    if (par[u] > par[v])\r\n      swap(u, v);\r\n    par[u] += par[v];\r\n    cost[u] += cost[v];\r\n    par[v] = u;\r\n    return true;\r\n  }\r\n};\r\n\r\nint32_t main() {\r\n  ios_base::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n#define task \"a\"\r\n  if (fopen(task \".inp\", \"r\")) {\r\n    freopen(task \".inp\", \"r\", stdin);\r\n    freopen(task \".out\", \"w\", stdout);\r\n  }\r\n  int tc;\r\n  cin >> tc;\r\n  while (tc--) {\r\n    int n;\r\n    cin >> n;\r\n    for (int i = 1; i <= n; i++) {\r\n      cin >> a[i].first;\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n      cin >> a[i].second;\r\n    }\r\n    int m;\r\n    cin >> m;\r\n    for (int i = 1; i <= m; i++) {\r\n      cin >> b[i].first;\r\n    }\r\n    for (int i = 1; i <= m; i++) {\r\n      cin >> b[i].second;\r\n    }\r\n    fill(vis, vis + n + m + 1, 0);\r\n    fill(nxt, nxt + n + m + 1, 0);\r\n    sort(a + 1, a + n + 1);\r\n    sort(b + 1, b + m + 1);\r\n    max_def_a[n] = n;\r\n    max_def_b[m] = m;\r\n    for (int i = n - 1; i >= 0; i--) {\r\n      if (a[i].second > a[max_def_a[i + 1]].second) {\r\n        max_def_a[i] = i;\r\n      } else {\r\n        max_def_a[i] = max_def_a[i + 1];\r\n      }\r\n    }\r\n    for (int i = m - 1; i >= 0; i--) {\r\n      if (b[i].second > b[max_def_b[i + 1]].second) {\r\n        max_def_b[i] = i;\r\n      } else {\r\n        max_def_b[i] = max_def_b[i + 1];\r\n      }\r\n    }\r\n    DSU dsu(n + m);\r\n    for (int i = 1; i <= n; i++) {\r\n      dsu.cost[i] = 1;\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n      int pos = upper_bound(b + 1, b + m + 1, pair<int, int>(a[i].second, 2e9)) - b;\r\n      if (pos != m + 1) {\r\n        nxt[i] = max_def_b[pos] + n;\r\n        // cerr << i << \" \" << max_def_b[pos] + n << endl;\r\n        dsu.join(i, max_def_b[pos] + n);\r\n      }\r\n    }\r\n    for (int i = 1; i <= m; i++) {\r\n      int pos = upper_bound(a + 1, a + n + 1, pair<int, int>(b[i].second, 2e9)) - a;\r\n      if (pos != n + 1) {\r\n        nxt[i + n] = max_def_a[pos];\r\n        // cerr << i + n << \" \" << max_def_a[pos] << endl;\r\n        dsu.join(i + n, max_def_a[pos]);\r\n      }\r\n    }\r\n    int win = 0, lose = 0, draw = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n      if (!nxt[i]) {\r\n        if (!vis[dsu.root(i)]) {\r\n          win += dsu.cost[dsu.root(i)];\r\n          vis[dsu.root(i)] = 1;\r\n        }\r\n      }\r\n    }\r\n    for (int i = 1; i <= m; i++) {\r\n      if (!nxt[i + n]) {\r\n        if (!vis[dsu.root(i + n)]) {\r\n          lose += dsu.cost[dsu.root(i + n)];\r\n          vis[dsu.root(i + n)] = 1;\r\n        }\r\n      }\r\n    }\r\n    draw = n - win - lose;\r\n    cout << win << \" \" << draw << \" \" << lose << \"\\n\";\r\n  }\r\n  return 0;\r\n}\r\n\r\n/*\r\n\u0111\u00e1nh b\u1eb1ng th\u1ebb a_i => th\u1ee7 a_i.second => c\u1ea7n \u0111\u00e1nh th\u1ebb atk > a_i.second, trong c\u00e1c th\u1ebb \u0111\u00f3 th\u00ec ch\u1ecdn th\u1eb1ng n\u00e0o th\u1ee7 l\u1edbn nh\u1ea5t, t\u01b0\u01a1ng t\u1ef1 v\u1edbi b_i\r\n\r\nn\u1ebfu kh\u00f4ng th\u1ebb n\u00e0o match \u0111\u01b0\u1ee3c v\u1edbi th\u1eb1ng i -> ngh\u0129a l\u00e0 k\u1ebft th\u00fac t\u1ea1i th\u1eb1ng i th\u00ec lu\u00f4n c\u00f3 l\u1ee3i, nh\u01b0 v\u1eady s\u1ed1 \u0111i\u1ec3m xu\u1ea5t ph\u00e1t s\u1ebd l\u00e0 s\u1ed1 th\u1eb1ng #1 trong tplt ch\u1ee9a i\r\n\r\nt\u01b0\u01a1ng t\u1ef1 v\u1edbi ph\u1ea7n 2\r\n*/"
}