{
    "id": 231404421,
    "contestId": 1895,
    "creationTimeSeconds": 1699150822,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "chinawcp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long \r\n#define ill __int128 \r\n#define ull unsigned long long\r\n#define ld long double\r\n#define yes \"Yes\"\r\n#define no \"No\"\r\nusing namespace std;\r\nconst int inf = 1e9;\r\nconst ll linf = 1e18;\r\nconst int maxn = 1e6 + 5;\r\nconst int N = 2e7 + 5;\r\nconst double eps = 1e-8;\r\nconst int mod = 1e9 + 7;\r\nconst double pi = acos(-1);\r\nconst int prime_bas = 2333;\r\n\r\nint sgn(double x){\r\n    if (fabs(x) < eps)\r\n        return 0;\r\n    if (x < 0)\r\n        return -1;\r\n    else\r\n        return 1;\r\n}\r\nll power(ll x, ll k, int mod = mod){\r\n    if(k == 1) return x;\r\n    if(k == 0) return 1;\r\n    ll tmp = power(x, k / 2, mod);\r\n    if(k & 1) return tmp * tmp % mod * x % mod;\r\n    return tmp * tmp % mod;\r\n}\r\nbool Mbe; double Tim;\r\ntemplate<size_t size>\r\nstruct Binary_Indexed_Tree_RMQ{\r\n    using T = int;\r\n    T inf = 1e9;\r\n    \r\n    T a[size], c[size];\r\n    inline int lowbit(int x){\r\n        return x & -x;\r\n    }\r\n    void init(int n, T val){\r\n        for(int i = 0; i <= n; i ++){\r\n            c[i] = a[i] = val;\r\n        }\r\n    }\r\n    inline void modify_max(int x, T v, int op = 0){\r\n        if(op) a[x] = max(a[x], v);\r\n        else a[x] = v;\r\n        if(x == 0) return;\r\n        while(x < (int)size){\r\n            c[x] = a[x];\r\n            for(int i = 1; i < lowbit(x); i <<= 1){\r\n                c[x] = max(c[x], c[x - i]);\r\n            }\r\n            x += lowbit(x);\r\n        }\r\n    }\r\n    inline void modify_min(int x, T v, int op = 0){\r\n        if(op) a[x] = min(a[x], v);\r\n        else a[x] = v;\r\n        if(x == 0) return;\r\n        while(x < (int)size){\r\n            c[x] = a[x];\r\n            for(int i = 1; i < lowbit(x); i <<= 1){\r\n                c[x] = min(c[x], c[x - i]);\r\n            }\r\n            x += lowbit(x);\r\n        }\r\n    }\r\n    inline T query_max(int l, int r){\r\n        if(l > r) return 0;\r\n        T ans = -inf ;\r\n        while(r >= l){\r\n            ans = max(a[r], ans);\r\n            r --;\r\n            for(; r - lowbit(r) >= l; r -= lowbit(r)){\r\n                ans = max(c[r], ans);\r\n            } \r\n        }\r\n        return ans;\r\n    }\r\n    inline T query_min(int l, int r){\r\n        if(l > r) return 0;\r\n        T ans = inf;\r\n        while(r >= l){\r\n            ans = min(a[r], ans);\r\n            r --;\r\n            for(; r - lowbit(r) >= l; r -= lowbit(r)){\r\n                ans = min(c[r], ans);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n};\r\nBinary_Indexed_Tree_RMQ<maxn> bir, bir2;\r\nvoid slove(){\r\n    int n, m; cin >> n;\r\n    vector<pair<int, int> > a(n + 1);\r\n    for(int i = 1; i <= n; i ++){\r\n        cin >> a[i].first;\r\n    }\r\n    for(int i = 1; i <= n; i ++){\r\n        cin >> a[i].second;\r\n    }\r\n    cin >> m;\r\n    vector<pair<int, int> > b(m + 1);\r\n    for(int i = 1; i <= m; i ++){\r\n        cin >> b[i].first;\r\n    }\r\n    for(int i = 1; i <= m; i ++){\r\n        cin >> b[i].second;\r\n    }\r\n    int mx1 = 0, mx2 = 0, mx = 0;\r\n    for(int i = 1; i <= n; i ++){\r\n        bir.modify_max(a[i].first, a[i].second, 1);\r\n        mx1 = max(mx1, a[i].first);\r\n        mx = max(mx, a[i].second);\r\n    }\r\n    for(int i = 1; i <= m; i ++){\r\n        bir2.modify_max(b[i].first, b[i].second, 1);\r\n        mx2 = max(mx2, b[i].first);\r\n        mx = max(mx, b[i].second);\r\n    }\r\n    int cnt1 = 0, cnt2 = 0, cnt3 = 0;\r\n    vector<int> vis(mx + 1, 0), cnt(mx + 1, 0);\r\n    int stp = 0;\r\n    auto dfs = [&vis, &cnt, &mx1, &mx2] (auto self, int x, int op) ->int{      \r\n        stp += 1;\r\n        assert(stp <= n * 3);                                                                                             \r\n        if(op == 1){\r\n            if(vis[x]) return vis[x];\r\n            if(cnt[x] == 1) return vis[x] = 2;\r\n            cnt[x] += 1;\r\n            int tmp = bir.query_max(x + 1, mx1);\r\n            if(tmp == 0) return vis[x] = 1;\r\n            vis[x] = self(self, tmp, 2);\r\n            cnt[x] -= 1;\r\n            return vis[x];\r\n        }\r\n        else{\r\n            int tmp = bir2.query_max(x + 1, mx2);\r\n            if(tmp == 0) return 3;\r\n            return self(self, tmp, 1);\r\n        }\r\n    };\r\n    vis[0] = 1;\r\n    for(int i = 1; i <= n; i ++){\r\n        int res = dfs(dfs, a[i].second, 2);\r\n        if(res == 1) cnt3 += 1; \r\n        else if(res == 2) cnt2 += 1;\r\n        else cnt1 += 1;\r\n    }   \r\n    for(int i = 1; i <= n; i ++){\r\n        bir.modify_max(a[i].first, 0);\r\n    }\r\n    for(int i = 1; i <= m; i ++){\r\n        bir2.modify_max(b[i].first, 0);\r\n    }\r\n    cout << cnt1 << \" \" << cnt2 << \" \" << cnt3 << '\\n';\r\n}\r\nbool Med;\r\nint main()\r\n{\r\n    fprintf(stderr, \"%.3lf MB\\n\", (&Med - &Mbe) / 1048576.0);\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0), cout.tie(0);\r\n    int t = 1, flag = 1;\r\n    cin >> t, Tim = clock(), flag = 0;\r\n    while(t --){\r\n        if(flag) Tim = clock(), flag = 0;\r\n        slove();\r\n    }\r\n    cerr << '\\n' << 1e3 * (clock() - Tim) / CLOCKS_PER_SEC << \" ms\";\r\n}",
    "category_evaluation": {
        "mathematics": 40,
        "dynamic programming": 20,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 60,
        "graphs": 0,
        "sortings": 0,
        "search": 20,
        "trees": 20,
        "strings": 0,
        "number theory": 20,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 80,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 40,
        "self-documenting": 40,
        "complex": 20,
        "readable": 80,
        "well-named": 100,
        "efficient": 60,
        "reusable": 40,
        "documented": 20,
        "good error-handling": 0,
        "good solution": 40,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 90,
        "compilation error": 10,
        "runtime error": 0
    }
}