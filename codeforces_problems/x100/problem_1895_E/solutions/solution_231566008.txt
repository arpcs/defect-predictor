{
    "id": 231566008,
    "contestId": 1895,
    "creationTimeSeconds": 1699264695,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "blob414"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n// #include <bits/extc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long int ll;\r\n#define int ll\r\ntypedef pair<int, int> pii;\r\n\r\ntemplate<typename A> ostream& operator<<(ostream &cout, vector<A> const &v);\r\ntemplate<typename A, typename B> ostream& operator<<(ostream &cout, pair<A, B> const &p) { return cout << \"(\" << p.first << \", \" << p.second << \")\"; }\r\ntemplate<typename A> ostream& operator<<(ostream &cout, vector<A> const &v) {\r\n    cout << \"[\"; for(int i = 0; i < v.size(); i++) {if (i) cout << \", \"; cout << v[i];} return cout << \"]\";\r\n}\r\ntemplate<typename A, typename B> istream& operator>>(istream& cin, pair<A, B> &p) {\r\n    cin >> p.first;\r\n    return cin >> p.second;\r\n}\r\n\r\n#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\r\n#define forn(x) for(int i=0; i<x; i++)\r\n#define wt(x) while(x--)\r\n#define coutv(x) for(auto it: x) cout<<it<<\" \";\r\n#define coutvp(v) for(auto e : v) cout << e.first << \" \" << e.second << \" \"<<endl;\r\n#define cina(arr, n) for(int i=0; i<n; i++) cin>>arr[i];\r\n#define watch(x) cout << (#x) << \" is \" << (x) << endl\r\n#define ii(x) int x; cin>>x;\r\n#define li(x) ll x; cin>>x;\r\n#define c2i(c) ((int)c-48)\r\n#define pbv(v1, v2) for(auto it: v2) v1.push_back(it);\r\n#define all(v) v.begin(), v.end()\r\n#define tup tuple<int, int, int>\r\n#define endl '\\n'\r\n#define MOD 1000000007\r\n\r\nvoid solve(){\r\n    int n; cin>>n;\r\n    int tot = n;\r\n    vector<pii> v(n); // attck, defence\r\n    map<pii, int> freq;\r\n    set<int> sx;\r\n    for(int i=0; i<n; i++) cin>>v[i].first, sx.insert(v[i].first);\r\n    for(int i=0; i<n; i++) cin>>v[i].second, sx.insert(v[i].second);\r\n    int m; cin>>m;\r\n    vector<pii> vx(m);\r\n    for(int i=0; i<m; i++) cin>>vx[i].first, sx.insert(vx[i].first);\r\n    for(int i=0; i<m; i++) cin>>vx[i].second, sx.insert(vx[i].second);\r\n    map<int, int> mp;\r\n    int x = 1;\r\n    for(auto it: sx) mp[it] = x++;\r\n    int mx = x;\r\n    for(int i=0; i<n; i++){\r\n        v[i].first = mp[v[i].first];\r\n        v[i].second = mp[v[i].second];\r\n    }\r\n    for(int i=0; i<m; i++){\r\n        vx[i].first = mp[vx[i].first];\r\n        vx[i].second = mp[vx[i].second];\r\n    }\r\n    for(auto it: v) freq[it]++;\r\n    set<pii> s(all(v));\r\n    v.clear(); v.assign(s.begin(), s.end());\r\n    s.clear();\r\n    for(auto it: vx) s.insert(it);\r\n    vx.clear(); vx.assign(s.begin(), s.end());\r\n    n = v.size(), m = vx.size();\r\n    vector<int> adj_rev[n+m+5];\r\n    vector<int> outdeg(n+m+5);\r\n    // suffix max in first\r\n    vector<int> atdef(mx+5, -1); // attck is index, def is value\r\n    map<pii, int> idx;\r\n    for(int i=0; i<n; i++){\r\n        atdef[v[i].first] = max(v[i].second, atdef[v[i].first]);\r\n        idx[v[i]] = i;\r\n    }\r\n    vector<pii> suff1(mx+5);\r\n    suff1[mx+4] = {-1, -1};\r\n    for(int i=mx+3; i>=0; i--){\r\n        suff1[i] = suff1[i+1];\r\n        if(atdef[i]>=suff1[i].second) suff1[i] = {idx[{i, atdef[i]}], atdef[i]};\r\n    }\r\n    for(int i=0; i<m; i++){\r\n        pii z = suff1[vx[i].second+1];\r\n        if(z.first==-1) continue;\r\n        int idxx = z.first;\r\n        if(v[idxx].first<=vx[i].second) continue;\r\n        adj_rev[idxx].push_back(n+i);\r\n        outdeg[n+i]++;\r\n    }\r\n    // suffix max in second\r\n    atdef.clear(); atdef.resize(mx+5, -1);\r\n    idx.clear();\r\n    for(int i=0; i<m; i++){\r\n        atdef[vx[i].first] = max(vx[i].second, atdef[vx[i].first]);\r\n        idx[vx[i]] = i;\r\n    }\r\n    vector<pii> suff2(mx+5);\r\n    suff2[mx+4] = {-1, -1};\r\n    for(int i=mx+3; i>=0; i--){\r\n        suff2[i] = suff2[i+1];\r\n        if(atdef[i]>=suff2[i].second) suff2[i] = {idx[{i, atdef[i]}], atdef[i]};\r\n    }\r\n    for(int i=0; i<n; i++){\r\n        pii z = suff2[v[i].second+1];\r\n        if(z.first==-1) continue;\r\n        int idxx = z.first;\r\n        if(vx[idxx].first<=v[i].second) continue;\r\n        adj_rev[idxx+n].push_back(i);\r\n        outdeg[i]++;\r\n    }\r\n    vector<int> ans(3);\r\n    function<void(int, int)> dfs = [&](int u, int x){\r\n        ans[x] += freq[v[u]];\r\n        for(auto it: adj_rev[u]){\r\n            dfs(it, x);\r\n        }\r\n    };\r\n    for(int i=0; i<n; i++){\r\n        if(outdeg[i]==0) dfs(i, 0);\r\n    }\r\n    for(int i=n; i<n+m; i++){\r\n        if(outdeg[i]==0) dfs(i, 2);\r\n    }\r\n    ans[1] = tot-ans[0]-ans[2];\r\n    cout<<ans[0]<<\" \"<<ans[1]<<\" \"<<ans[2]<<endl;\r\n}\r\n\r\nsigned main(){\r\n    fastio;\r\n    int t; cin>>t;\r\n    wt(t) solve();\r\n}\r\n",
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 10,
        "bit manipulation": 2,
        "greedy": 5,
        "brute force": 10,
        "graphs": 10,
        "sortings": 5,
        "search": 5,
        "trees": 2,
        "strings": 2,
        "number theory": 2,
        "combinatorics": 2,
        "two pointers": 2,
        "geometry": 2,
        "shortest paths": 2,
        "divide and conquer": 2,
        "probabilities": 2,
        "data structures": 2,
        "game theory": 2,
        "2d, 3d": 2,
        "recursive": 0,
        "well-commented": 5,
        "self-documenting": 5,
        "complex": 10,
        "readable": 10,
        "well-named": 10,
        "efficient": 5,
        "reusable": 5,
        "documented": 5,
        "good error-handling": 5,
        "good solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 90,
        "compilation error": 10,
        "runtime error": 0
    },
    "defect_evaluation_gpt_4": {
        "good solution": 90,
        "compilation error": 5,
        "runtime error": 5
    },
    "defect_evaluation_v1": {
        "good solution": 90,
        "compilation error": 5,
        "runtime error": 5
    }
}