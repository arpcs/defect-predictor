{
    "id": 236123681,
    "contestId": 1895,
    "creationTimeSeconds": 1701900093,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Dolfun"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 10240000,
    "source": "#include <bits/stdc++.h>\r\n#define fs first\r\n#define sn second\r\n#define pb push_back\r\n#define mkpr make_pair\r\n\r\nusing namespace std;\r\n#if (__cplusplus >= 202002L)\r\nnamespace R = ranges;\r\nnamespace V = views;\r\n#endif\r\n\r\nusing str = string;\r\nusing ll = long long;\r\nusing ld = long double;\r\nusing ull = unsigned ll;\r\nusing uint = unsigned int;\r\ntemplate <class T> using vec = vector<T>;\r\ntemplate <class T, class U> using pr = pair<T, U>;\r\ntemplate <class T, size_t N> using arr = array<T, N>;\r\ntemplate <class T, class U>\r\nusing umap = unordered_map<T, U>;\r\n\r\ntemplate <class T>\r\nostream& operator<<(ostream& out, const vec<T>& v) {\r\n  for (const auto& x : v)\r\n    out << x << ' ';\r\n  return out;\r\n}\r\n\r\ntemplate <class T>\r\nistream& operator>>(istream& in, vec<T>& v) {\r\n  for (auto& x : v)\r\n    in >> x;\r\n  return in;\r\n}\r\n\r\nvoid print(auto&&... args) {\r\n  ((cout << forward<decltype(args)>(args) << ' '), ...);\r\n}\r\n\r\nvoid println(auto&&... args) {\r\n  print(forward<decltype(args)>(args)...);\r\n  cout << '\\n';\r\n}\r\n/*---------------------------------------------------------------------*/\r\n\r\nvoid solve();\r\n\r\nint main() {\r\n#ifndef ONLINE_JUDGE\r\n\tfreopen(\"input.txt\", \"r\", stdin);\r\n\t// freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(nullptr); cout.tie(nullptr);\r\n\r\n  int t{ 1 };\r\n  cin >> t;\r\n  while (t--) {\r\n    solve();\r\n  }\r\n    \r\n  return 0;\r\n}\r\n\r\nusing int_pr = pr<int, int>;\r\n\r\nauto make_max_suffix(const vec<int_pr>& v) {\r\n  int n = v.size();\r\n  vec<int_pr> suf(n);\r\n  suf[n - 1] = { v[n - 1].sn, n - 1 };\r\n  for (int i = n - 2; i >= 0; --i) {\r\n    auto [mx, mxi] = suf[i + 1];\r\n    if (v[i].sn > mx) {\r\n      suf[i] = { v[i].sn, i };\r\n    } else suf[i] = suf[i + 1];\r\n  }\r\n  return suf;\r\n}\r\n\r\nbool comp(int p, int_pr q) {\r\n  return p < q.fs;\r\n}\r\n\r\nstruct Solution {\r\n  int n, m;\r\n  vec<int_pr> a, b;\r\n  vec<int_pr> suf_a, suf_b;\r\n  vec<char> state_a, state_b;\r\n  \r\n  Solution() {\r\n    cin >> n;\r\n    a.resize(n);\r\n    for (auto& p : a) cin >> p.fs;\r\n    for (auto& p : a) cin >> p.sn;\r\n\r\n    cin >> m;\r\n    b.resize(m);\r\n    for (auto& p : b) cin >> p.fs;\r\n    for (auto& p : b) cin >> p.sn;\r\n  }\r\n\r\n  int get_max_hp_a_index(int hp_b) {\r\n    auto i = upper_bound(a.begin(), a.end(), hp_b, comp) - a.begin();\r\n    if (i == n) return -1;\r\n    return suf_a[i].sn;\r\n  }\r\n\r\n  int get_max_hp_b_index(int hp_a) {\r\n    auto i = upper_bound(b.begin(), b.end(), hp_a, comp) - b.begin();\r\n    if (i == m) return -1;\r\n    return suf_b[i].sn;\r\n  }\r\n\r\n  void solve() {\r\n    sort(a.begin(), a.end());\r\n    sort(b.begin(), b.end());\r\n\r\n    suf_a = make_max_suffix(a);\r\n    suf_b = make_max_suffix(b);\r\n\r\n    state_a.resize(n, 'x');\r\n    state_b.resize(m, 'x');\r\n\r\n    for (int i = 0; i < n; ++i) {\r\n      dfs(i);\r\n    }\r\n\r\n    int cnt_w = 0, cnt_d = 0, cnt_l = 0;\r\n    for (auto c : state_a) {\r\n      if (c == 'a') ++cnt_w;\r\n      else if (c == 'b') ++cnt_l;\r\n      else ++cnt_d;\r\n    }\r\n\r\n    println(cnt_w, cnt_d, cnt_l);\r\n  }\r\n\r\n  char dfs(int i, bool a_turn = true) {\r\n    char& st = (a_turn ? state_a[i] : state_b[i]);\r\n    if (st != 'x' && st != '?') return st;\r\n\r\n    st = '?';\r\n\r\n    int hp = (a_turn ? a[i].sn : b[i].sn);\r\n    int next_i = (a_turn ? get_max_hp_b_index(hp) : get_max_hp_a_index(hp));\r\n    if (next_i == -1) {\r\n      return (st = (a_turn ? 'a' : 'b'));\r\n    }\r\n\r\n    char& next_st = (a_turn ? state_b[next_i] : state_a[next_i]);\r\n    if (next_st == '?') {\r\n      return (next_st = st = 'd');\r\n    }\r\n\r\n    if(next_st == 'a' || next_st == 'b') return (st = next_st);\r\n\r\n    return (st = dfs(next_i, !a_turn));\r\n  }\r\n};\r\n\r\nvoid solve() {\r\n  Solution s;\r\n  s.solve();\r\n}"
}