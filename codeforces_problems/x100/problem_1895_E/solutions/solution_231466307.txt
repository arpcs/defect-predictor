{
    "id": 231466307,
    "contestId": 1895,
    "creationTimeSeconds": 1699190281,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "derpwaffle21"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 9625600,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define ld long double\r\n#define debug(x) do { std::cerr << #x << \": \" << x << std::endl; } while (0)\r\n#define INF 1000000007\r\n#define LLINF 1000000000000007\r\n\r\nusing namespace std;\r\n\r\n#define UNDEF -1\r\n#define AWIN 0\r\n#define DRAW 1\r\n#define BWIN 2\r\n\r\nint n, m;\r\nvector<pair<int, int>> a(200010), b(200010);\r\nint suffixMaxA[200010], suffixMaxB[200010];\r\nint smaIdx[200010], smbIdx[200010];\r\nint res[2][200010], visited[2][200010];\r\n\r\nint findGreatest(int def, vector<pair<int, int>> &v, int sz)\r\n{\r\n    //debug('a');\r\n    return lower_bound(v.begin(), v.begin() + sz, make_pair(def + 1, -INF)) - v.begin();\r\n}\r\n\r\nint dfs(int side, int def, int idx)\r\n{\r\n    //cout << \"side : \" << side << \", def : \" << def << \", idx : \" << idx << '\\n';\r\n\r\n    if (res[side][idx] != UNDEF)\r\n        return res[side][idx];\r\n\r\n    if (visited[side][idx])\r\n        return res[side][idx] = DRAW;\r\n\r\n    visited[side][idx] = true;\r\n\r\n    int nextIdx, nextDef;\r\n\r\n    if (side == 0)\r\n    {\r\n        nextIdx = findGreatest(def, b, m);\r\n\r\n        if (nextIdx == m)\r\n            return res[side][idx] = AWIN;\r\n\r\n        nextDef = suffixMaxB[nextIdx];\r\n        nextIdx = smbIdx[nextIdx];\r\n    }\r\n    else if (side == 1)\r\n    {\r\n        nextIdx = findGreatest(def, a, n);\r\n\r\n        if (nextIdx == n)\r\n            return res[side][idx] = BWIN;\r\n\r\n        nextDef = suffixMaxA[nextIdx];\r\n        nextIdx = smaIdx[nextIdx];\r\n    }\r\n\r\n    assert(nextIdx >= 0);\r\n    \r\n    res[side][idx] = dfs(side ^ 1, nextDef, nextIdx);\r\n    visited[side][idx] = false;\r\n\r\n    return res[side][idx];\r\n}\r\n\r\nint main(void)\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(NULL); cout.tie(NULL);\r\n    cout << fixed << setprecision(0);\r\n\r\n    int _tc;\r\n\r\n    cin >> _tc;\r\n\r\n    while (_tc--)\r\n    {\r\n        cin >> n;\r\n\r\n        for (int i = 0; i < n; i++)\r\n            cin >> a[i].first;\r\n        for (int i = 0; i < n; i++)\r\n            cin >> a[i].second;\r\n\r\n        cin >> m;\r\n\r\n        for (int i = 0; i < m; i++)\r\n            cin >> b[i].first;\r\n        for (int i = 0; i < m; i++)\r\n            cin >> b[i].second;\r\n\r\n        sort(a.begin(), a.begin() + n);\r\n        sort(b.begin(), b.begin() + m);\r\n\r\n        suffixMaxA[n] = suffixMaxB[m] = -INF;\r\n\r\n        for (int i = n - 1; i >= 0; i--)\r\n        {\r\n            if (suffixMaxA[i + 1] < a[i].second)\r\n            {\r\n                suffixMaxA[i] = a[i].second;\r\n                smaIdx[i] = i;\r\n            }\r\n            else\r\n            {\r\n                suffixMaxA[i] = suffixMaxA[i + 1];\r\n                smaIdx[i] = smaIdx[i + 1];\r\n            }\r\n        }\r\n\r\n        for (int i = m - 1; i >= 0; i--)\r\n        {\r\n            if (suffixMaxB[i + 1] < b[i].second)\r\n            {\r\n                suffixMaxB[i] = b[i].second;\r\n                smbIdx[i] = i;\r\n            }\r\n            else\r\n            {\r\n                suffixMaxB[i] = suffixMaxB[i + 1];\r\n                smbIdx[i] = smbIdx[i + 1];\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            res[0][i] = UNDEF;\r\n            visited[0][i] = false;\r\n        }\r\n\r\n        for (int i = 0; i < m; i++)\r\n        {\r\n            res[1][i] = UNDEF;\r\n            visited[1][i] = false;\r\n        }\r\n\r\n/*\r\n        cout << \"A:\\n\";\r\n        for (int i = 0; i < n; i++)\r\n            cout << a[i].first << ' ';\r\n        cout << '\\n';\r\n        for (int i = 0; i < n; i++)\r\n            cout << a[i].second << ' ';\r\n        cout << '\\n';\r\n        cout << \"B:\\n\";\r\n        for (int i = 0; i < m; i++)\r\n            cout << b[i].first << ' ';\r\n        cout << '\\n';\r\n        for (int i = 0; i < m; i++)\r\n            cout << b[i].second << ' ';\r\n        cout << '\\n';*/\r\n\r\n        vector<int> cnt(3);\r\n\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            int t = dfs(0, a[i].second, i);\r\n            //cout << \"res: \" << t << '\\n';\r\n            cnt[t]++;\r\n        }\r\n\r\n        //if (m > 5)\r\n            //cout << \"res[1][5]: \" << res[1][5] << '\\n';\r\n\r\n        for (int i = 0; i < 3; i++)\r\n            cout << cnt[i] << ' ';\r\n        cout << '\\n';\r\n    }\r\n\r\n    return 0;\r\n}",
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 25,
        "bit manipulation": 0,
        "greedy": 0,
        "brute force": 10,
        "graphs": 0,
        "sortings": 15,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 20,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 50,
        "self-documenting": 40,
        "complex": 0,
        "readable": 60,
        "well-named": 40,
        "efficient": 10,
        "reusable": 20,
        "documented": 60,
        "good error-handling": 0,
        "good solution": 0,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 95,
        "compilation error": 5,
        "runtime error": 0
    }
}