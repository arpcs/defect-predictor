{
    "id": 231585941,
    "contestId": 1895,
    "creationTimeSeconds": 1699274779,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Zinn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 561,
    "memoryConsumedBytes": 18227200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nint const N=3e5+5,M=1e6+5;\r\nint n,m,nxt[N<<1],sufa[M],sufb[M],ans[N<<1];\r\nbool vis[N<<1];\r\nstruct Nd{\r\n    int x,y;\r\n}a[N],b[N];\r\nbool cmp(Nd aa,Nd bb)\r\n{\r\n    return aa.x<bb.x;\r\n}\r\nint dfs(int u)\r\n{\r\n    if(ans[u]) return ans[u];\r\n    else if(vis[u]) \r\n    {\r\n        if(ans[u]) return ans[u];\r\n        else return ans[u]=1;\r\n    }\r\n    vis[u]=1;\r\n    if(nxt[u]==-1)\r\n    {\r\n        if(u<=n) return ans[u]=0;\r\n        else return ans[u]=2;\r\n    }\r\n    return ans[u]=dfs(nxt[u]);\r\n}\r\nint findb(int v) // find the first one in b, whose x > v\r\n{\r\n    int L=1,R=m,mid,ret;\r\n    while(L<=R)\r\n    {\r\n        mid=(L+R)/2;\r\n        if(b[mid].x<=v) L=mid+1;\r\n        else ret=mid, R=mid-1;\r\n    }\r\n    return ret;\r\n}\r\nint finda(int v) // find the first one in a, whose x > v\r\n{\r\n    int L=1,R=n,mid,ret;\r\n    while(L<=R)\r\n    {\r\n        mid=(L+R)/2;\r\n        if(a[mid].x<=v) L=mid+1;\r\n        else ret=mid, R=mid-1;\r\n    }\r\n    return ret;\r\n}\r\nint main()\r\n{\r\n    int T; scanf(\"%d\",&T);\r\n    while(T--)\r\n    {\r\n        int mxax=0, mxbx=0;\r\n        scanf(\"%d\",&n);\r\n        for(int i=1;i<=n;i++) scanf(\"%d\",&a[i].x), mxax=max(mxax,a[i].x);\r\n        for(int i=1;i<=n;i++) scanf(\"%d\",&a[i].y);\r\n        scanf(\"%d\",&m);\r\n        for(int i=1;i<=m;i++) scanf(\"%d\",&b[i].x), mxbx=max(mxbx,b[i].x);\r\n        for(int i=1;i<=m;i++) scanf(\"%d\",&b[i].y);\r\n\r\n        sort(a+1,a+n+1,cmp); \r\n        int mx1=0,mxid=-1;\r\n        for(int i=n;i;i--)\r\n        {\r\n            if(mx1<a[i].y)\r\n            {\r\n                sufa[i]=i;\r\n                mx1=a[i].y; mxid=i;\r\n            }\r\n            else sufa[i]=mxid;\r\n        }\r\n        sort(b+1,b+m+1,cmp);\r\n        int mx2=0; mxid=-1;\r\n        for(int i=m;i;i--)\r\n        {\r\n            if(mx2<b[i].y)\r\n            {\r\n                sufb[i]=i;\r\n                mx2=b[i].y; mxid=i;\r\n            }\r\n            else sufb[i]=mxid;\r\n        }\r\n        \r\n        for(int i=1;i<=n+m;i++) \r\n            nxt[i]=0, vis[i]=0, ans[i]=0;\r\n        // printf(\"mxax=%d mxbx=%d\\n\",mxax,mxbx);\r\n        for(int i=1;i<=n;i++)\r\n            nxt[i] = (a[i].y>=mxbx)?-1:sufb[findb(a[i].y)]+n;\r\n        for(int j=1;j<=m;j++)\r\n            nxt[n+j] = (b[j].y>=mxax)?-1:sufa[finda(b[j].y)];\r\n        // for(int i=1;i<=n+m;i++) \r\n        //     printf(\"nxt[%d]=%d\\n\",i,nxt[i]);\r\n\r\n        int win=0, draw=0, lose=0;\r\n        for(int i=1,out;i<=n;i++)\r\n        {\r\n            out = dfs(i);\r\n            if(out==0) win++;\r\n            else if(out==1) draw++;\r\n            else lose++;\r\n        }\r\n        printf(\"%d %d %d\\n\",win,draw,lose);\r\n    }\r\n    return 0;\r\n}",
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 40,
        "bit manipulation": 0,
        "greedy": 5,
        "brute force": 20,
        "graphs": 0,
        "sortings": 20,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 5,
        "combinatorics": 5,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 5,
        "well-commented": 10,
        "self-documenting": 0,
        "complex": 20,
        "readable": 5,
        "well-named": 5,
        "efficient": 20,
        "reusable": 10,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 85,
        "compilation error": 5,
        "runtime error": 10
    },
    "defect_evaluation_v1": {
        "good solution": 80,
        "compilation error": 20,
        "runtime error": 0
    }
}