{
    "id": 231395844,
    "contestId": 1895,
    "creationTimeSeconds": 1699135566,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "loopido"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 49,
    "timeConsumedMillis": 2761,
    "memoryConsumedBytes": 12083200,
    "source": "#include <bits/stdc++.h>\r\n#define Long long long\r\nusing namespace std;\r\n\r\n#ifdef LOCAL\r\n#include \"bib/debug.h\"\r\n#else\r\n#define debug\r\n#define cerr if (false) cerr \r\n#endif\r\n\r\nvoid solve(int qq) {\r\n  int n, m;\r\n  cin >> n;\r\n  vector<pair<int, int>> A(n);\r\n  for (auto &c : A) cin >> c.first;\r\n  for (auto &c : A) cin >> c.second;\r\n  cin >> m;\r\n  vector<pair<int, int>> B(m);\r\n  for (auto &c : B) cin >> c.first;\r\n  for (auto &c : B) cin >> c.second;\r\n\r\n  auto cmp = [&](pair<int, int> &a, pair<int, int> &b) {\r\n    if (a.first == b.first) return a.second < b.second;\r\n    return a.first < b.first;\r\n  };\r\n\r\n  sort(A.begin(), A.end(), cmp);\r\n  sort(B.begin(), B.end(), cmp);\r\n  vector<pair<int, int>> BA(n + 1, make_pair(-1, -1));\r\n  for (int i = n - 1; i >= 0; i--) {\r\n    BA[i] = max(BA[i + 1], {A[i].second, i});\r\n  }\r\n\r\n  vector<pair<int, int>> BB(m + 1, make_pair(-1, -1));\r\n  for (int i = m - 1; i >= 0; i--) {\r\n    BB[i] = max(BB[i + 1], {B[i].second, i});\r\n  }\r\n\r\n\r\n  auto best = [&](int diff, vector<pair<int, int>> &CA, vector<pair<int, int>> &CBA) {\r\n    int nn = (int) CA.size();\r\n    auto k = lower_bound(CA.begin(), CA.end(), make_pair(diff + 1, (int) -1e9)) - CA.begin();\r\n    if (k >= nn) return -1;\r\n    return CBA[k].second;\r\n  };\r\n\r\n  vector<int> BestA(n);\r\n  for (int i = 0; i < n; i++) {\r\n    BestA[i] = best(A[i].second, B, BB);\r\n  }\r\n\r\n\r\n  vector<int> BestB(m);\r\n  for (int i = 0; i < m; i++) {\r\n    BestB[i] = best(B[i].second, A, BA);\r\n  }\r\n\r\n  int w = 0, d = 0, l = 0;\r\n  for (int i = 0; i < n; i++) {\r\n    // a play i\r\n    auto c1 = i;\r\n    int v = 1;\r\n    for (int j = 0; j < 3000; j++) {\r\n      auto c2 = BestA[c1];\r\n      if (c2 == -1) {\r\n        w++;\r\n        v = 0;\r\n        break;\r\n      }\r\n      auto c3 = BestB[c2];\r\n      if (c3 == -1) {\r\n        l++;\r\n        v = 0;\r\n        break;\r\n      }\r\n      c1 = c3;\r\n    }\r\n    d += v;\r\n  }\r\n\r\n  cout << w << ' ' << d << ' ' << l << '\\n';\r\n}\r\n\r\nint32_t main() {\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(0);\r\n\r\n  int tt = 1, qq = 0;\r\n  cin >> tt;\r\n  while (tt--) {\r\n    qq++;\r\n    // cout << \"Case #\" << qq << \": \";    \r\n\t  solve(qq);\r\n  }\r\n\r\n  return 0;\r\n}",
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 10,
        "bit manipulation": 5,
        "greedy": 5,
        "brute force": 5,
        "graphs": 0,
        "sortings": 60,
        "search": 5,
        "trees": 5,
        "strings": 5,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 5,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 10,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 5,
        "self-documenting": 10,
        "complex": 40,
        "readable": 50,
        "well-named": 10,
        "efficient": 60,
        "reusable": 5,
        "documented": 5,
        "good error-handling": 5,
        "good solution": 70,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 85,
        "compilation error": 5,
        "runtime error": 10
    },
    "defect_evaluation_gpt_4": {
        "good solution": 45,
        "compilation error": 50,
        "runtime error": 5
    },
    "defect_evaluation_v1": {
        "good solution": 90,
        "compilation error": 10,
        "runtime error": 0
    },
    "defect_evaluation_v3": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 80,
        "wrong solution": 15,
        "compilation error": 0,
        "runtime error": 5
    },
    "defect_evaluation_v4": {
        "good solution": 70,
        "wrong solution": 20,
        "compilation error": 5,
        "runtime error": 5
    }
}