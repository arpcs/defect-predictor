{
    "id": 231426947,
    "contestId": 1895,
    "creationTimeSeconds": 1699169272,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "llldddddd_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 11264000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=300010,M=1000010;\r\nint T;\r\nint n,m,f[M],ans[3];\r\nint max1[N],max2[N]; \r\nstruct card{\r\n\tint x,y;\r\n}a[N],b[N];\r\nbool cmp(card x,card y)\r\n{\r\n\treturn x.x<y.x;\r\n}\r\nint dfs(int x)\r\n{\r\n\tif(f[x]!=-1)return f[x];\r\n\tint l=1,r=m+1;\r\n\twhile(l<r){\r\n\t\tint mid=l+r>>1;\r\n\t\tif(b[mid].x>x)r=mid;\r\n\t\telse l=mid+1; \r\n\t}\r\n\tif(l==m+1)return f[x]=0;\r\n\tf[x]=1;\r\n\tint p=max2[l];\r\n\tl=1,r=n+1;\r\n\twhile(l<r){\r\n\t\tint mid=l+r>>1;\r\n\t\tif(a[mid].x>p)r=mid;\r\n\t\telse l=mid+1;\r\n\t} \r\n\tif(l==n+1)return f[x]=2;\r\n\treturn dfs(max1[l]);\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%d\",&T);\r\n\twhile(T--){\r\n\t\tscanf(\"%d\",&n);ans[0]=ans[1]=ans[2]=0;\r\n\t\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i].x);\r\n\t\tfor(int i=1;i<=n;i++)scanf(\"%d\",&a[i].y),f[a[i].y]=-1;\r\n\t\tscanf(\"%d\",&m);\r\n\t\tfor(int i=1;i<=m;i++)scanf(\"%d\",&b[i].x);\r\n\t\tfor(int i=1;i<=m;i++)scanf(\"%d\",&b[i].y);\r\n\t\tsort(a+1,a+1+n,cmp);sort(b+1,b+1+m,cmp);\r\n\t\tmax1[n]=a[n].y;max2[m]=b[m].y;\r\n\t\tfor(int i=n-1;i>=1;i--){\r\n\t\t\tmax1[i]=max(max1[i+1],a[i].y);\r\n\t\t}\r\n\t\tfor(int i=m-1;i>=1;i--){\r\n\t\t\tmax2[i]=max(max2[i+1],b[i].y);\r\n\t\t}\r\n\t\tfor(int i=1;i<=n;i++){\r\n\t\t\tint j=dfs(a[i].y);\r\n\t\t\t//cout<<j<<\"---\"<<endl; \r\n\t\t\tans[j]++;\r\n\t\t}\r\n\t\tfor(int i=0;i<3;i++)printf(\"%d \",ans[i]);\r\n\t\tprintf(\"\\n\");\r\n\t}\r\n\treturn 0;\r\n}",
    "category_evaluation": {
        "mathematics": 20,
        "dynamic programming": 10,
        "bit manipulation": 0,
        "greedy": 20,
        "brute force": 0,
        "graphs": 0,
        "sortings": 80,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 10,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 10,
        "well-commented": 0,
        "self-documenting": 0,
        "complex": 0,
        "readable": 0,
        "well-named": 0,
        "efficient": 50,
        "reusable": 0,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 100,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 95,
        "compilation error": 5,
        "runtime error": 0
    },
    "defect_evaluation_gpt_4": {
        "good solution": 95,
        "compilation error": 0,
        "runtime error": 5
    },
    "defect_evaluation_v1": {
        "good solution": 80,
        "compilation error": 15,
        "runtime error": 5
    }
}