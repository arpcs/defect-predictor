{
    "id": 231460781,
    "contestId": 1895,
    "creationTimeSeconds": 1699187664,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Asbeforezb"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 59699200,
    "source": "#include<iostream>\r\n#include<math.h>\r\n#include<vector>\r\n#include<algorithm>\r\n#include<set>\r\n#include<stack>\r\n#include<queue>\r\n#include<string.h>\r\n#include<map>\r\n#include<utility>\r\n#define pii pair<int,int>\r\nusing namespace std;\r\nconst int mod = 2e5 + 10;\r\nusing ll = long long;\r\n\r\nint t,n,m;\r\n\r\nstruct ty\r\n{\r\n    int attack,defense;\r\n};\r\n\r\nbool cmp(ty a,ty b)\r\n{\r\n    if(a.attack == b.attack) return a.defense < b.defense;\r\n    return a.attack < b.attack;\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0),cout.tie(0);\r\n    cin >> t;\r\n    while(t--)\r\n    {\r\n        cin >> n;\r\n        vector<ty>a(n);\r\n        for(int i = 0;i < n;i++) cin >> a[i].attack;\r\n        for(int i = 0;i < n;i++) cin >> a[i].defense;\r\n        cin >> m;\r\n        vector<ty>b(m);\r\n        for(int i = 0;i < m;i++) cin >> b[i].attack;\r\n        for(int i = 0;i < m;i++) cin >> b[i].defense;\r\n        sort(a.begin(),a.end(),cmp);\r\n        sort(b.begin(),b.end(),cmp);\r\n        //for(auto i : a) cout << i.attack << \" \" << i.defense << endl;\r\n        //cout << a[0].attack << \" \" << a[0].defense << endl;\r\n        vector<int>ma,bb;\r\n        for(int i = 0;i < n;i++)\r\n        {\r\n            if(ma.empty()) ma.push_back(i);\r\n            else\r\n            {\r\n                while(!ma.empty() && a[ma.back()].defense <= a[i].defense) ma.pop_back();\r\n                ma.push_back(i);\r\n            }\r\n        }\r\n        for(int i = 0;i < m;i++)\r\n        {\r\n            if(bb.empty()) bb.push_back(i);\r\n            else\r\n            {\r\n                while(!bb.empty() && b[bb.back()].defense <= b[i].defense) bb.pop_back();\r\n                bb.push_back(i);\r\n            }\r\n        }\r\n        vector<vector<int>>enter(n+m),out(n+m);\r\n        for(int i = 0;i < n;i++)\r\n        {\r\n            if(b[bb.back()].attack > a[i].defense)\r\n            {\r\n                int l = 0,r = bb.size()-1,mid;\r\n                while(l <= r)\r\n                {\r\n                    mid = (l+r) >> 1;\r\n                    if(b[bb[mid]].attack > a[i].defense) r = mid - 1;\r\n                    else l = mid + 1;\r\n                }\r\n                enter[i].push_back(bb[l]+n);\r\n                out[bb[l]+n].push_back(i);\r\n            }\r\n        }\r\n        for(int i = 0;i < m;i++)\r\n        {\r\n            if(a[ma.back()].attack > b[i].defense)\r\n            {\r\n                int l = 0,r = ma.size()-1,mid;\r\n                while(l <= r)\r\n                {\r\n                    mid = (l+r) >> 1;\r\n                    if(a[ma[mid]].attack > b[i].defense) r = mid - 1;\r\n                    else l = mid + 1;\r\n                }\r\n                enter[n+i].push_back(ma[l]);\r\n                out[ma[l]].push_back(n+i);\r\n            }\r\n        }\r\n        vector<int>ans(n+m);\r\n        queue<int>q;\r\n        for(int i = 0;i < n+m;i++)\r\n        {\r\n            if(enter[i].empty())\r\n            {\r\n                q.push(i);\r\n                if(i < n) ans[i] = 1;\r\n                else ans[i] = -1;\r\n            }\r\n        }\r\n        while(!q.empty())\r\n        {\r\n            int cnt = q.front();\r\n            q.pop();\r\n            for(auto i : out[cnt])\r\n            {\r\n                if (!ans[i])\r\n                {\r\n                    ans[i] = ans[cnt];\r\n                    q.push(i);\r\n                }\r\n            }\r\n        }\r\n        int sum1 = 0,sum2 = 0,sum3 = 0;\r\n        for(int i = 0;i < n;i++)\r\n        {\r\n            if(ans[i] == 1) sum1++;\r\n            else if(ans[i] == 0) sum2++;\r\n            else sum3++;\r\n        }\r\n        cout << sum1 << \" \" << sum2 << \" \" << sum3 << endl;\r\n    }\r\n}\r\n",
    "category_evaluation": {
        "mathematics": 5,
        "dynamic programming": 10,
        "bit manipulation": 0,
        "greedy": 10,
        "brute force": 20,
        "graphs": 5,
        "sortings": 40,
        "search": 5,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 30,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 10,
        "self-documenting": 5,
        "complex": 15,
        "readable": 5,
        "well-named": 5,
        "efficient": 30,
        "reusable": 20,
        "documented": 0,
        "good error-handling": 0,
        "good solution": 40,
        "compilation error": 0,
        "runtime error": 0
    }
}