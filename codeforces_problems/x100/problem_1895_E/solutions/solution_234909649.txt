{
    "id": 234909649,
    "contestId": 1895,
    "creationTimeSeconds": 1701253108,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "dushki"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 4915200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint t, n[2], a[2][2][300001];\r\n\r\npair<int, int> get_win(int ind) {\r\n    int ans = 0, curr_max = 0; \r\n    multiset<pair<int, int> > A, B;\r\n    int max_def = -1, last = -1;\r\n    for (int i = 1; i <= n[ind]; i++)\r\n        A.insert({a[ind][1][i], a[ind][0][i]});\r\n    for (int i = 1; i <= n[1-ind]; i++) \r\n        B.insert({a[1-ind][0][i], a[1-ind][1][i]});\r\n    multiset<pair<int, int> >::iterator it = A.end();\r\n    it--;\r\n    while(true) {\r\n        multiset<pair<int, int> >::iterator it1 = B.lower_bound({(*it).first + 1, 0});\r\n        int temp = (*it1).first;\r\n        while(it1 != B.end() && (*it1).first != last) {\r\n            max_def = max(max_def, (*it1).second);\r\n            it1++;\r\n        } \r\n        last = temp;\r\n        cout << curr_max << \" \" << last << \" \" << max_def << endl;\r\n        if (curr_max > max_def) {\r\n            ans++; curr_max = max(curr_max, (*it).second);} \r\n        else\r\n            break;\r\n        \r\n        if (it == A.begin())\r\n            break;\r\n        it--;\r\n    } \r\n    return {ans, curr_max};\r\n} \r\n\r\nint main() {\r\n    cin >> t;\r\n    while(t--) {\r\n        cin >> n[0];\r\n        for (int i  = 1; i <= n[0]; i++) \r\n            cin >> a[0][0][i];\r\n        for (int i  = 1; i <= n[0]; i++) \r\n            cin >> a[0][0][i];\r\n        cin >> n[1];\r\n        for (int i  = 1; i <= n[1]; i++) \r\n            cin >> a[1][0][i];\r\n        for (int i  = 1; i <= n[1]; i++) \r\n            cin >> a[1][0][i];\r\n\r\n        int ans1 = get_win(0).first;\r\n        int mx = get_win(1).second;\r\n        int ans2 = 0;\r\n        for (int i = 1; i <= n[0]; i++) \r\n            ans2 += (a[0][1][i] < mx);\r\n        cout << ans1 << \" \" << n[0] - ans1 - ans2 << \" \" << ans2 << endl;\r\n    } \r\n} "
}