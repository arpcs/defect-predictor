{
    "id": 233219384,
    "contestId": 1895,
    "creationTimeSeconds": 1700251760,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "arsynal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 1747,
    "memoryConsumedBytes": 12185600,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nint t,n,m;\r\n\r\nint main()\r\n{\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        cin>>n;\r\n\r\n        vector<int>Init_Attack_1(n+1);\r\n        vector<pair<int,int>>Attack_1(n+1),Defense_1(n+1);\r\n        int Win=0,Lose=0;\r\n\r\n        for(int i=1;i<=n;++i)\r\n        {\r\n            cin>>Init_Attack_1[i];\r\n            Attack_1[i].first=Init_Attack_1[i];\r\n            Attack_1[i].second=i;\r\n        }\r\n\r\n        for(int i=1;i<=n;++i)\r\n        {\r\n            cin>>Defense_1[i].first;\r\n            Defense_1[i].second=i;\r\n        }\r\n\r\n        sort(Attack_1.begin()+1,Attack_1.end());\r\n        sort(Defense_1.begin()+1,Defense_1.end());\r\n\r\n        cin>>m;\r\n        vector<int>Init_Attack_2(m+1);\r\n        vector<pair<int,int>>Attack_2(m+1),Defense_2(m+1);\r\n\r\n        for(int i=1;i<=m;++i)\r\n        {\r\n            cin>>Init_Attack_2[i];\r\n            Attack_2[i].first=Init_Attack_2[i];\r\n            Attack_2[i].second=i;\r\n        }\r\n\r\n        for(int i=1;i<=m;++i)\r\n        {\r\n            cin>>Defense_2[i].first;\r\n            Defense_2[i].second=i;\r\n        }\r\n\r\n        sort(Attack_2.begin()+1,Attack_2.end());\r\n        sort(Defense_2.begin()+1,Defense_2.end());\r\n\r\n        vector<bool>Win_1(n+1,0),Lose_1(n+1,0);\r\n        vector<bool>Win_2(m+1,0),Lose_2(m+1,0);\r\n\r\n        int cnt1_Defense=n;\r\n        int cnt2_Defense=1,cnt2_Attack=m;\r\n\r\n        while(cnt1_Defense>=1)\r\n        {\r\n            while(cnt2_Attack>=1&&Lose_2[Attack_2[cnt2_Attack].second])--cnt2_Attack;\r\n\r\n            int Max_Attack=0;\r\n            while(cnt1_Defense>=1&&Defense_1[cnt1_Defense].first>=Attack_2[cnt2_Attack].first)\r\n            {\r\n                ++Win;\r\n                Win_1[Defense_1[cnt1_Defense].second]=1;\r\n                Max_Attack=max(Max_Attack,Init_Attack_1[Defense_1[cnt1_Defense].second]);\r\n                --cnt1_Defense;\r\n            }\r\n\r\n            if(!Max_Attack)break;\r\n\r\n            while(cnt2_Defense<=m&&Max_Attack>Defense_2[cnt2_Defense].first)\r\n            {\r\n                Lose_2[Defense_2[cnt2_Defense].second]=1;\r\n                ++cnt2_Defense;\r\n            }\r\n        }\r\n\r\n        cnt2_Defense=m;\r\n        cnt1_Defense=1;int cnt1_Attack=n;\r\n\r\n        while(cnt2_Defense>=1)\r\n        {\r\n            while(cnt1_Attack>=1&&Lose_1[Attack_1[cnt1_Attack].second])--cnt1_Attack;\r\n\r\n            int Max_Attack=0;\r\n            while(cnt2_Defense>=1&&Defense_2[cnt2_Defense].first>=Attack_1[cnt1_Attack].first)\r\n            {\r\n                Win_2[Defense_2[cnt2_Defense].second]=1;\r\n                Max_Attack=max(Max_Attack,Init_Attack_2[Defense_2[cnt2_Defense].second]);\r\n                --cnt2_Defense;\r\n            }\r\n\r\n            if(!Max_Attack)break;\r\n\r\n            while(cnt1_Defense<=n&&Max_Attack>Defense_1[cnt1_Defense].first)\r\n            {\r\n                ++Lose;\r\n                Lose_1[Defense_1[cnt1_Defense].second]=1;\r\n                ++cnt1_Defense;\r\n            }\r\n        }\r\n\r\n        cout<<Win<<\" \"<<n-Win-Lose<<\" \"<<Lose<<'\\n';\r\n    }\r\n}\r\n"
}