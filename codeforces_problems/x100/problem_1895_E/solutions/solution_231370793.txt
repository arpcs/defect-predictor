{
    "id": 231370793,
    "contestId": 1895,
    "creationTimeSeconds": 1699119297,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Renauga"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 10854400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\n\r\ntemplate <typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\ntemplate <typename T>\r\nusing ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\n// PRAGMAS (do these even work?)\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,avx,avx2\")\r\n#pragma GCC optimization (\"O3\")\r\n#pragma GCC optimization (\"unroll-loops\")\r\n\r\n// DEFINE STATEMENTS\r\nconst long long inf = 1e18;\r\nconst int infi = 1e9;\r\n#define num1 1000000007\r\n#define num2 998244353\r\n#define pb push_back\r\n#define pob pop_back\r\n#define fr first\r\n#define sec second\r\n#define fix(f,n) std::fixed<<std::setprecision(n)<<f\r\n#define all(x) x.begin(), x.end()\r\n#define epsilon (double)(0.000000001)\r\n#define popcount __builtin_popcountll\r\n#define fileio(x) freopen(\"input.txt\", \"r\", stdin); freopen(x, \"w\", stdout);\r\n#define out(x) cout << ((x) ? \"YES\\n\" : \"NO\\n\")\r\n#define sz(x) x.size()\r\n#define start_clock() auto start_time = std::chrono::high_resolution_clock::now();\r\n#define measure() auto end_time = std::chrono::high_resolution_clock::now(); cerr << (end_time - start_time)/std::chrono::milliseconds(1) << \"ms\" << endl;\r\n \r\n \r\ntypedef long long ll;\r\ntypedef vector<long long> vll;\r\ntypedef pair<long long, long long> pll;\r\ntypedef vector<pair<long long, long long>> vpll;\r\ntypedef vector<int> vii;\r\n\r\n// DEBUG FUNCTIONS \r\n#ifndef ONLINE_JUDGE\r\n\r\ntemplate<typename T>\r\nvoid __p(T a) {\r\n\tcout<<a;\r\n}\r\ntemplate<typename T, typename F>\r\nvoid __p(pair<T, F> a) {\r\n\tcout<<\"{\";\r\n\t__p(a.first);\r\n\tcout<<\",\";\r\n\t__p(a.second);\r\n\tcout<<\"}\";\r\n}\r\ntemplate<typename T>\r\nvoid __p(std::vector<T> a) {\r\n\tcout<<\"{\";\r\n\tfor(auto it=a.begin(); it<a.end(); it++)\r\n\t\t__p(*it),cout<<\",}\"[it+1==a.end()];\r\n}\r\ntemplate<typename T>\r\nvoid __p(std::set<T> a) {\r\n\tcout<<\"{\";\r\n\tfor(auto it=a.begin(); it!=a.end();){\r\n\t\t__p(*it); \r\n\t\tcout<<\",}\"[++it==a.end()];\r\n\t}\r\n\r\n}\r\ntemplate<typename T, typename F>\r\nvoid __p(std::map<T,F> a) {\r\n\tcout<<\"{\\n\";\r\n\tfor(auto it=a.begin(); it!=a.end();++it)\r\n\t{\r\n\t\t__p(it->first);\r\n\t\tcout << \": \";\r\n\t\t__p(it->second);\r\n\t\tcout<<\"\\n\";\r\n\t}\r\n\tcout << \"}\\n\";\r\n}\r\n\r\ntemplate<typename T, typename ...Arg>\r\nvoid __p(T a1, Arg ...a) {\r\n\t__p(a1);\r\n\t__p(a...);\r\n}\r\ntemplate<typename Arg1>\r\nvoid __f(const char *name, Arg1 &&arg1) {\r\n\tcout<<name<<\" : \";\r\n\t__p(arg1);\r\n\tcout<<endl;\r\n}\r\ntemplate<typename Arg1, typename ... Args>\r\nvoid __f(const char *names, Arg1 &&arg1, Args &&... args) {\r\n\tint bracket=0,i=0;\r\n\tfor(;; i++) //for handling function calls\r\n\t\tif(names[i]==','&&bracket==0)\r\n\t\t\tbreak;\r\n\t\telse if(names[i]=='(')\r\n\t\t\tbracket++;\r\n\t\telse if(names[i]==')')\r\n\t\t\tbracket--;\r\n\tconst char *comma=names+i;\r\n\tcout.write(names,comma-names)<<\" : \";\r\n\t__p(arg1);\r\n\tcout<<\" | \";\r\n\t__f(comma+1,args...);\r\n}\r\n#define trace(...) cout<<\"Line:\"<<__LINE__<<\" \", __f(#__VA_ARGS__, __VA_ARGS__)\r\n#else\r\n#define trace(...)\r\n#define error(...)\r\n#endif\r\n\r\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());  //use rng() to get a random number\r\n\r\n\r\nint log2n(ll n) {\r\n\treturn (63-__builtin_clzll(n));\r\n}\r\n\r\n\r\n//string stuff\r\n\r\nvector<int> zfunc(const string& s) {\r\n\tint n=s.length();\r\n\tvector<int> z(n,0);\r\n\tfor(int i=1,l=0,r=0;i<n;i++) {\r\n\t\tif(i<r) z[i] = min(z[i-l],r-i);\r\n\t\twhile(i+z[i]<n&&s[i+z[i]]==s[z[i]]) z[i]++;\r\n\t\tif(i+z[i]>r) {\r\n\t\t\tr = i+z[i];\r\n\t\t\tl = i;\r\n\t\t} \r\n\t}\r\n\treturn z;\r\n}\r\n\r\nvector<int> pfunc(const string& s) {\r\n\tint n=s.length();\r\n\tvector<int> pi(n);\r\n\tfor(int i=1, j=0;i<n;i++) {\r\n\t\twhile(j>0&&s[i]!=s[j]) j = pi[j-1];\r\n\t\tif(s[i]==s[j]) j++;\r\n\t\tpi[i]=j;\r\n\t}\r\n\treturn pi;\r\n}\r\n\r\nvector<int> suffix_arr(string s) {\r\n\ts+='$';\r\n\tint n=s.length();\r\n\tconst int alphabet = 128;\r\n\tvector<int> p(n),c(n,0), cnt(max(alphabet,n),0), pn(n),cn(n,0); // p is starting index of suff that is i'th in sorted order\r\n\t\t\t\t\t\t   // c is equivalence class of suff starting at i\r\n\tfor(int i=0;i<n;i++) {\r\n\t\tcnt[s[i]]++;\r\n\t}\r\n\tfor(int i=1;i<alphabet;i++) {\r\n\t\tcnt[i]+=cnt[i-1];\r\n\t}\r\n\tfor(int i=n-1;i>=0;i--) {\r\n\t\tp[--cnt[s[i]]]=i;\r\n\t}\r\n\tfor(int i=1;i<n;i++) {\r\n\t\tc[p[i]] = c[p[i-1]];\r\n\t\tif(s[p[i]]!=s[p[i-1]]) c[p[i]]++;\r\n\t}\r\n\tfor(int h=1;h<n;h<<=1) { //suffixes are sorted till length h\r\n\t\tfill(cnt.begin(),cnt.end(),0);\r\n\t\tfor(int i=0;i<n;i++) {\r\n\t\t\tpn[i] = p[i]-h;\r\n\t\t\tif(pn[i]<0) pn[i]+=n;\r\n\t\t\tcnt[c[pn[i]]]++;\r\n\t\t}\r\n\t\tfor(int i=1;i<n;i++) {\r\n\t\t\tcnt[i]+=cnt[i-1];\r\n\t\t}\r\n\t\tfor(int i=n-1;i>=0;i--) {\r\n\t\t\tp[--cnt[c[pn[i]]]]=pn[i];\r\n\t\t}\r\n\t\tcn[p[0]]=0;\r\n\t\tfor(int i=1;i<n;i++) {\r\n\t\t\tcn[p[i]]=cn[p[i-1]];\r\n\t\t\tif(make_pair(c[p[i]],c[(p[i]+h)%n])!=make_pair(c[p[i-1]],c[(p[i-1]+h)%n])) cn[p[i]]++;\r\n\t\t}\r\n\t\tc=cn;\r\n\t}\r\n\tp.erase(p.begin());\r\n\treturn p;\r\n}\r\n\r\nvector<int> construct_lcp(const string& s, const vector<int>& p) {\r\n\tint n = p.size();\r\n\tvector<int> rank(n);\r\n\tfor(int i=0;i<n;i++) {\r\n\t\trank[p[i]]=i;\r\n\t}\r\n\tvector<int> lcp(n-1);\r\n\tint k=0;\r\n\tfor(int i=0;i<n;i++) {\r\n\t\tif(rank[i]==n-1) {\r\n\t\t\tk=0;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tint j = p[rank[i]+1];\r\n\t\twhile(i+k<n && j+k<n && s[i+k]==s[j+k]) k++;\r\n\t\tlcp[rank[i]]=k;\r\n\t\tif(k) k--;\r\n\t}\r\n\treturn lcp;\r\n}\r\n\r\n\r\n/* tree stuff, required for binary lifting\r\ncall dfs_calc(1,0)\r\n\r\n\r\nint LOGN = 18; //will be log2n(n-1)+1 or ceiling of log2n(n)\r\nll MAXN = 100000;\r\nll n;\r\nvector<vector<int>> g;\r\nvector<ll> depth(MAXN+1,0);\r\nvector<vector<int>> up(MAXN+1,vector<int>(LOGN,0));//max lift is 2^(LOGN)-1\r\n\r\nvoid dfs_calc(int node, int parent) {\r\n\tif(node!=1) depth[node]=depth[parent]+1;\r\n\tup[node][0]=parent;\r\n\tfor(int i=1;i<LOGN;i++) {\r\n\t\tup[node][i] = up[up[node][i-1]][i-1];\r\n\t}\r\n\tfor(int child:g[node]) {\r\n\t\tif(child!=parent) {\r\n\t\t\tdfs_calc(child,node);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint kthancestor(int a, int k) {\r\n\tfor(int i=0;i<LOGN;i++) {\r\n\t\tif(k&(1<<i)) {\r\n\t\t\ta = up[a][i];\t\r\n\t\t}\r\n\t}\r\n\treturn a;\r\n}\r\n\r\nint lca(int a, int b) {\r\n\tif(depth[a]<depth[b]) {\r\n\t\tswap(a,b);\r\n\t}\r\n\tint diff = depth[a]-depth[b];\r\n\ta = kthancestor(a,diff);\r\n\tif(a==b) return a;\r\n\tfor(int step=LOGN-1;up[a][0]!=up[b][0];step--) {\r\n\t\tif(up[a][step]!=up[b][step]) {\r\n\t\t\ta = up[a][step];\r\n\t\t\tb = up[b][step];\r\n\t\t}\r\n\t}\r\n\treturn up[a][0];\r\n}\r\n\r\nint distance(int a, int b) {\r\n\treturn depth[a]+depth[b]-2*depth[lca(a,b)];\r\n}\r\n\r\n*/\r\n\r\n\r\nll extgcd(ll a, ll b, ll& x, ll& y) {\r\n    x = 1, y = 0;\r\n    ll x1 = 0, y1 = 1;\r\n    while (b) {\r\n        ll q = a / b;\r\n        tie(x, x1) = make_tuple(x1, x - q * x1);\r\n        tie(y, y1) = make_tuple(y1, y - q * y1);\r\n        tie(a, b) = make_tuple(b, a - q * b);\r\n    }\r\n    return a;\r\n}\r\n\r\nconst int mod = 1e9+7;\r\n\r\nstruct mint {\r\n    ll x;\r\n    mint() : x(0) {}\r\n    mint(ll y) {\r\n        if(y>=0&&y<mod) x=y;\r\n        else {\r\n\t\t\tx=y%mod;\r\n        \tif(x<0) x+=mod;\r\n\t\t}\r\n    }\r\n    mint operator-() {return mint(-x+mod);}\r\n    mint operator ~() const {ll a,b; extgcd(x,mod,a,b); return a;}\r\n    mint& operator+=(const mint& a) {if((x+=a.x)>=mod) x-=mod; return *this;}\r\n    mint& operator-=(const mint& a) {if((x-=a.x)<0) x+=mod; return *this;}\r\n    mint& operator*=(const mint& a) {x=(x*a.x)%mod; return *this;}\r\n    mint& operator/=(const mint& a) {this->operator*=(~a);return *this;}\r\n    mint operator ++() { ++x; if(x == mod) x = 0; return (*this); }\r\n\tmint operator ++(int) { x++; if(x == mod) x = 0; return mint(x-1); }\r\n\tmint operator --() { --x; if(x == -1) x = mod-1; return (*this); }\r\n\tmint operator --(int) { x--; if(x == -1) x = mod-1; return mint(x+1); }\r\n    mint pow(ll b) const {\r\n        mint res(1);\r\n        mint a(*this);\r\n        while(b) {\r\n            if(b&1) res*=a;\r\n            a*=a;\r\n            b>>=1;\r\n        }\r\n        return res;\r\n    }\r\n    mint operator +(const mint& a) const { return mint(*this) += a;}\r\n    mint operator -(const mint& a) const { return mint(*this) -= a;}\r\n    mint operator *(const mint& a) const { return mint(*this) *= a;}\r\n    mint operator /(const mint& a) const { return mint(*this) /= a;}\r\n    bool operator <(const mint& a) const { return x < a.x;}\r\n    bool operator <=(const mint& a) const { return x <= a.x;}\r\n    bool operator >(const mint& a) const { return x > a.x;}\r\n    bool operator >=(const mint& a) const { return x >= a.x;}\r\n    bool operator ==(const mint& a) const { return x == a.x;}\r\n    bool operator !=(const mint& a) const { return x != a.x;}\r\n    \r\n    friend istream& operator >>(istream& is, mint p) { return is >> p.x; }\r\n    friend ostream& operator <<(ostream& os, mint p){ return os << p.x; }\r\n};\r\n\r\nvector<mint> fact,invfact;\r\nvoid init_combo(ll n) {\r\n\tfact.resize(n+1,1);\r\n\tinvfact.resize(n+1);\r\n\tfor(ll i=1;i<=n;i++) {\r\n\t\tfact[i]=fact[i-1]*i;\r\n\t}\r\n\tinvfact[n]=~fact[n];\r\n\tfor(ll i=n;i>0;i--) {\r\n\t\tinvfact[i-1]=invfact[i]*i;\r\n\t}\r\n}\r\n\r\nmint ncr(ll n, ll r) {\r\n\tif(n<0||r<0||n<r) return mint(0);\r\n\treturn fact[n]*invfact[r]*invfact[n-r];\r\n}\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin>>n;\r\n    vector<pair<int,int>> a(n);\r\n    for(int i=0;i<n;i++) cin>>a[i].first;\r\n    for(int i=0;i<n;i++) cin>>a[i].second;\r\n    sort(a.begin(), a.end());\r\n    int m;\r\n    cin>>m;\r\n    vector<pair<int,int>> b(m);\r\n    for(int i=0;i<m;i++) cin>>b[i].first;\r\n    for(int i=0;i<m;i++) cin>>b[i].second;\r\n    sort(b.begin(), b.end());\r\n    vector<int> nexa(n, -1), nexb(m, -1), suffa(n), suffb(m);\r\n    suffa[n-1] = n-1;\r\n    for(int i=n-2;i>=0;i--) {\r\n        suffa[i] = suffa[i+1];\r\n        if(a[i].second > a[suffa[i]].second) suffa[i] = i;\r\n    }\r\n    suffb[m-1] = m-1;\r\n    for(int i=m-2;i>=0;i--) {\r\n        suffb[i] = suffb[i+1];\r\n        if(b[i].second > b[suffb[i]].second) suffb[i] = i;\r\n    }\r\n    for(int i=0;i<n;i++) {\r\n        pair<int,int> to_find = {a[i].second, 1e9};\r\n        int j = lower_bound(b.begin(), b.end(), to_find) - b.begin();\r\n        if(j != m) {\r\n            nexa[i] = suffb[j];\r\n        }\r\n    }\r\n    for(int i=0;i<m;i++) {\r\n        pair<int,int> to_find = {b[i].second, 1e9};\r\n        int j = lower_bound(a.begin(), a.end(), to_find) - a.begin();\r\n        if(j != n) {\r\n            nexb[i] = suffa[j];\r\n        }\r\n    }\r\n    trace(nexa);\r\n    trace(nexb);\r\n    for(int i=0;i<n;i++) {\r\n        if(nexa[i] == -1) nexa[i] = n;\r\n        else nexa[i] = nexb[nexa[i]];\r\n    }\r\n    for(int j=0;j<20;j++) {\r\n        auto tmpnexa = nexa;\r\n        for(int i=0;i<n;i++) {\r\n            if(nexa[i] != -1 && nexa[i] != n) {\r\n                tmpnexa[i] = nexa[nexa[i]];\r\n            }\r\n        }\r\n        nexa = tmpnexa;\r\n    }\r\n    vector<int> cnt(3, 0);\r\n    for(int i=0;i<n;i++) {\r\n        if(nexa[i] == -1) cnt[2]++;\r\n        else if(nexa[i] == n) cnt[0]++;\r\n        else cnt[1]++;\r\n    }\r\n    for(int i:{0,1,2}) cout<<cnt[i]<<' ';\r\n    cout<<'\\n';\r\n}\r\n\r\nint main() {\r\n\tios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\tint t=1;\r\n\tcin>>t;\r\n    for(int i=1;i<=t;i++) {\r\n        solve();\r\n    }\r\n\treturn 0;\r\n}\r\n\r\n/*\r\n1. Check borderline constraints. Can a variable you are dividing by be 0?\r\n2. Use ll while using bitshifts\r\n3. Do not erase from set while iterating it\r\n4. Initialise everything\r\n5. Read the task carefully, is something unique, sorted, adjacent, guaranteed??\r\n6. DO NOT use if(!mp[x]) if you want to iterate the map later\r\n7. Are you using i in all loops? Are the i's conflicting?\r\n*/ ",
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 5,
        "bit manipulation": 2,
        "greedy": 9,
        "brute force": 10,
        "graphs": 2,
        "sortings": 10,
        "search": 2,
        "trees": 0,
        "strings": 5,
        "number theory": 6,
        "combinatorics": 2,
        "two pointers": 6,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 5,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 7,
        "self-documenting": 6,
        "complex": 7,
        "readable": 10,
        "well-named": 6,
        "efficient": 5,
        "reusable": 0,
        "documented": 9,
        "good error-handling": 0,
        "good solution": 10,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation": {
        "good solution": 70,
        "compilation error": 10,
        "runtime error": 20
    }
}