{
    "id": 231335824,
    "contestId": 1895,
    "creationTimeSeconds": 1699102905,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "I_Love_you_Tithi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 47,
    "timeConsumedMillis": 2605,
    "memoryConsumedBytes": 89804800,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp> \r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n#define getbit(n, i) (((n) & (1LL << (i))) != 0) \r\n#define setbit0(n, i) ((n) & (~(1LL << (i)))) \r\n#define setbit1(n, i) ((n) | (1LL << (i))) \r\n#define togglebit(n, i) ((n) ^ (1LL << (i))) \r\n#define lastone(n) ((n) & (-(n))) \r\nchar gap = 32;\r\n#define int long long\r\n#define ll long long \r\n#define lll __int128_t\r\n#define pb push_back\r\ntypedef tree<\r\nint,\r\nnull_type,\r\nless<int>,\r\nrb_tree_tag,\r\ntree_order_statistics_node_update>\r\nordered_set;\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\nll hashPrime = 1610612741;\r\n#define mx 1000001\r\nint Tree[4 * mx];\r\n\r\nint query(int node, int b, int e, int i, int j)\r\n{\r\n    if (i > e || j < b)\r\n        return 0; \r\n    if (b >= i && e <= j)\r\n        return Tree[node]; \r\n    int Left = node * 2; \r\n    int Right = node * 2 + 1;\r\n    int mid = (b + e) / 2;\r\n    int p1 = query(Left, b, mid, i, j);\r\n    int p2 = query(Right, mid + 1, e, i, j);\r\n    return max(p1, p2); \r\n}\r\nvoid update(int node, int b, int e, int i, int newvalue)\r\n{\r\n    if (i > e || i < b)\r\n        return; \r\n    if (b >= i && e <= i) { \r\n        Tree[node] = newvalue;\r\n        return;\r\n    }\r\n    int Left = node * 2; \r\n    int Right = node * 2 + 1;\r\n    int mid = (b + e) / 2;\r\n    update(Left, b, mid, i, newvalue);\r\n    update(Right, mid + 1, e, i, newvalue);\r\n    Tree[node] = max(Tree[Left], Tree[Right]);\r\n}\r\n\r\n\r\nint Tree1[4 * mx];\r\n\r\nint query1(int node, int b, int e, int i, int j)\r\n{\r\n    if (i > e || j < b)\r\n        return 0; \r\n    if (b >= i && e <= j)\r\n        return Tree1[node]; \r\n    int Left = node * 2; \r\n    int Right = node * 2 + 1;\r\n    int mid = (b + e) / 2;\r\n    int p1 = query1(Left, b, mid, i, j);\r\n    int p2 = query1(Right, mid + 1, e, i, j);\r\n    return max(p1, p2); \r\n}\r\nvoid update1(int node, int b, int e, int i, int newvalue)\r\n{\r\n    if (i > e || i < b)\r\n        return; \r\n    if (b >= i && e <= i) { \r\n        Tree1[node] = newvalue;\r\n        return;\r\n    }\r\n    int Left = node * 2; \r\n    int Right = node * 2 + 1;\r\n    int mid = (b + e) / 2;\r\n    update1(Left, b, mid, i, newvalue);\r\n    update1(Right, mid + 1, e, i, newvalue);\r\n    Tree1[node] = max(Tree1[Left], Tree1[Right]);\r\n}\r\n\r\n\r\n\r\nvector<int> max_val1(1000001);\r\nvector<int> max_val2(1000001);\r\nvoid solve() {\r\n    int n; cin >> n;\r\n    int ax[n + 1];\r\n    for(int i = 1; i <= n; i++) cin >> ax[i];\r\n    int ay[n + 1];\r\n    for(int i = 1; i <= n; i++) cin >> ay[i];\r\n    int m;\r\n    cin >> m;\r\n    int bx[m + 1];\r\n    for(int i = 1; i <= m; i++) cin >> bx[i];\r\n    int by[m + 1];\r\n    for(int i = 1; i <= m; i++) cin >> by[i];\r\n\r\n    for(int i = 1; i <= n; i++) {\r\n        max_val1[ax[i]] = max(max_val1[ax[i]], ay[i]);\r\n        update(1, 1, mx, ax[i], max_val1[ax[i]]);\r\n    }\r\n\r\n    for(int i = 1; i <= m; i++) {\r\n        max_val2[bx[i]] = max(max_val2[bx[i]], by[i]);\r\n        update1(1, 1, mx, bx[i], max_val2[bx[i]]);\r\n    }\r\n\r\n    int win = 0;\r\n    int draw = 0;\r\n    int lose = 0;\r\n\r\n    // for(int i = 1; i <= n; i++) {\r\n    //     int val = query1(1, 1, mx, ay[i] + 1, mx);\r\n    //     if(val == 0) {\r\n    //         win++;\r\n    //         continue;\r\n    //     }\r\n    //     int val1 = query(1, 1, mx, val + 1, mx);\r\n    //     if(val1 == 0) {\r\n    //         lose++;\r\n    //     }\r\n    //     else {\r\n    //         int val3 = query1(1, 1, mx, val1 + 1, mx);\r\n    //         if(val3 == 0) {\r\n    //             win++;\r\n    //         }\r\n    //         else {\r\n    //             int val4 = query(1, 1, mx, val3 + 1, mx);\r\n    //             if(val4 == 0) {\r\n    //                 lose++;\r\n    //             }\r\n    //             else {\r\n    //                 int val5 = query1(1, 1, mx, val4 + 1, mx);\r\n    //                 if(val5 == 0) {\r\n    //                     win++;\r\n    //                 }\r\n    //                 else {\r\n    //                     int val6 = query(1, 1, mx, val5 + 1, mx);\r\n    //                     if(val6 == 0) {\r\n    //                         lose++;\r\n    //                     }\r\n    //                     else {\r\n    //                         int val7 = query1(1, 1, mx, val6 + 1, mx);\r\n    //                         if(val7 == 0) {\r\n    //                             win++;\r\n    //                         }\r\n    //                         else {\r\n    //                             int val8 = query(1, 1, mx, val7 + 1, mx);\r\n    //                             if(val8 == 0) {\r\n    //                                 lose++;\r\n    //                             }\r\n    //                             else {\r\n    //                                 draw++;\r\n    //                             }\r\n    //                         }\r\n    //                     }\r\n    //                 }\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    for(int i = 1; i <= n; i++) {\r\n        int prev = ay[i];\r\n        for(int j = 1; j <= 30; j++) {\r\n            prev = query1(1, 1, mx, prev + 1, mx);\r\n            if(prev == 0) {\r\n                win++;\r\n                break;\r\n            }\r\n            else {\r\n                prev = query(1, 1, mx, prev + 1, mx);\r\n                if(prev == 0) {\r\n                    lose++;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if(prev != 0) draw++;\r\n    }\r\n    cout << win << \" \" << draw << \" \" << lose << \"\\n\";\r\n\r\n\r\n    for(int i = 1; i <= n; i++) {\r\n        max_val1[ax[i]] = 0;\r\n        update(1, 1, mx, ax[i], 0);\r\n    }\r\n    for(int i = 1; i <= m; i++) {\r\n        max_val2[bx[i]] = 0;\r\n        update1(1, 1, mx, bx[i], 0);\r\n    }\r\n\r\n\r\n}\r\nsigned main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int t; cin >> t;\r\n    while(t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}",
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 5,
        "bit manipulation": 1,
        "greedy": 15,
        "brute force": 30,
        "graphs": 5,
        "sortings": 10,
        "search": 5,
        "trees": 5,
        "strings": 5,
        "number theory": 5,
        "combinatorics": 5,
        "two pointers": 1,
        "geometry": 1,
        "shortest paths": 1,
        "divide and conquer": 1,
        "probabilities": 1,
        "data structures": 10,
        "game theory": 1,
        "2d, 3d": 1,
        "recursive": 5,
        "well-commented": 80,
        "self-documenting": 60,
        "complex": 10,
        "readable": 80,
        "well-named": 80,
        "efficient": 5,
        "reusable": 5,
        "documented": 80,
        "good error-handling": 5,
        "good solution": 60,
        "compilation error": 1,
        "runtime error": 1
    },
    "defect_evaluation": {
        "good solution": 70,
        "compilation error": 10,
        "runtime error": 20
    },
    "defect_evaluation_gpt_4": {
        "good solution": 90,
        "compilation error": 0,
        "runtime error": 10
    },
    "defect_evaluation_v1": {
        "good solution": 80,
        "compilation error": 20,
        "runtime error": 0
    },
    "defect_evaluation_v3": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    },
    "defect_evaluation_gpt4_v4": {
        "good solution": 70,
        "wrong solution": 15,
        "compilation error": 0,
        "runtime error": 15
    },
    "defect_evaluation_v4": {
        "good solution": 80,
        "wrong solution": 20,
        "compilation error": 0,
        "runtime error": 0
    }
}