{
    "id": 157921533,
    "contestId": 1316,
    "creationTimeSeconds": 1653149238,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "FranceWhale"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 1294,
    "memoryConsumedBytes": 13516800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define int long long \r\n\r\nbool set_bit(int mask, int k) {\r\n\treturn mask & (1ll << k);\r\n}\r\n\r\nsigned main() {\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(nullptr);\r\n\tint n, p, k;\r\n\tcin >> n >> p >> k;\r\n\tvector<pair<int, int>> aud(n + 5);\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tcin >> aud[i].first;\r\n\t\taud[i].second = i;\r\n\t}\r\n\tvector<vector<int>> player(n + 5, vector<int>(p + 5));\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tfor (int j = 1; j <= p; j++) {\r\n\t\t\tcin >> player[i][j];\r\n\t\t}\r\n\t}\r\n\t// sort people in non-increasing order of their audience strength\r\n\tsort(aud.begin() + 1, aud.begin() + n + 1, greater<pair<int, int>>());\r\n\t// space optimization\r\n\tvector<int> dp((1ll << p) + 5, -1e18);\r\n\tdp[0] = 0;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tvector<int> dq(dp);\r\n\t\tfor (int mask = 0; mask < (1ll << p); mask++) {\r\n\t\t\tint cnt = __builtin_popcount(mask);\r\n\t\t\t// # of players cannot exceed the number of people currently considered\r\n\t\t\tif (cnt > i) continue;\r\n\t\t\tfor (int j = 1; j <= p; j++) {\r\n\t\t\t\tif (!set_bit(mask, j - 1)) continue;\r\n\t\t\t\t// pick i-th person to play in j-th position\r\n\t\t\t\tdq[mask] = max(dq[mask], dp[mask ^ (1ll << (j - 1))] + player[aud[i].second][j]);\r\n\t\t\t}\r\n\t\t\t// if the # of remaining people does not exceed k, then it's \r\n\t\t\t// optimal to select them as audience \r\n\t\t\tif (i == cnt || i - cnt > k) continue;\r\n\t\t\tdq[mask] = max(dq[mask], dp[mask] + aud[i].first);\r\n\t\t}\r\n\t\tswap(dp, dq);\r\n\t}\r\n\tcout << dp[(1ll << p) - 1] << '\\n';\r\n\treturn 0;\r\n}\r\n"
}