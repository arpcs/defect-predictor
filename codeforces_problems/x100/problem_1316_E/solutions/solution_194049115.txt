{
    "id": 194049115,
    "contestId": 1316,
    "creationTimeSeconds": 1676668475,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "popkarsd"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 2183,
    "memoryConsumedBytes": 107520000,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\nint n,p,k, a;\r\nvector<int> people[100001];\r\nlong long dp[100001][(1<<7)+1];\r\nbool comp(vector<int> a, vector<int> b){\r\n    return a[0] >= b[0];\r\n}\r\nint lengthofmask(int mask){\r\n    int ret = 0;\r\n    if (mask ==0 )return ret;\r\n    for (int i=1; i<=(1<<p)-1; i = i << 1){\r\n        if (i&mask) ret++;\r\n    }\r\n    return ret;\r\n}\r\nvector<int> iteratethrough(int mask){\r\n    vector<int> ret;\r\n    if (mask == 0) return ret;\r\n    int index=0;\r\n    for (int i=1; i<=(1<<p)-1; i = i << 1){\r\n        index++;\r\n        if (i&mask){\r\n            ret.push_back(index);\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\nint main(){\r\n    cin >> n >> p >> k;\r\n    for (int i=1; i<=n; i++){\r\n        cin >> a;\r\n        people[i].push_back(a);\r\n    }\r\n    for (int i=1; i<=n; i++){\r\n        for (int j=1; j<=p; j++){\r\n            cin >> a;\r\n            people[i].push_back(a);\r\n        }\r\n    }\r\n    sort(people+1, people+1+n, comp);\r\n\r\n\r\n    //iterate over people \r\n    for (int i=1; i<=n; i++){\r\n        //iterate over subsets of players\r\n        for (int mask=0; mask<(1<<p); mask++){\r\n            if (i-lengthofmask(mask) <= 0) continue;\r\n            //dp[i][mask] = max()\r\n            //if person i  becomes a player\r\n            long long max1=0;\r\n            for (int j : iteratethrough(mask)){\r\n                max1 = max(max1, dp[i-1][mask-(1 << (j-1))] + people[i][j]);\r\n            }\r\n            long long max2=0;\r\n            //if there are still audience seats left, put i in audience seat\r\n            if ((i-1)-lengthofmask(mask) < k){\r\n                max2 = dp[i-1][mask] + people[i][0];\r\n            }\r\n            //if there are no audience seats left\r\n            else{\r\n                max2 = dp[i-1][mask];\r\n            }\r\n            //cout << i << \" \" << mask << \" \" << lengthofmask(mask) << \" \" << max1 << \" \" << max2 << endl;\r\n            dp[i][mask] = max(max1, max2);\r\n        }\r\n    }\r\n    // for (int i=1; i<=n; i++){\r\n    //     for (int mask=0; mask<(1<<p); mask++){\r\n    //         cout << dp[i][mask] << \" \";\r\n    //     }\r\n    //     cout << endl;\r\n    // }\r\n    cout << dp[n][(1 << p)-1];\r\n}"
}