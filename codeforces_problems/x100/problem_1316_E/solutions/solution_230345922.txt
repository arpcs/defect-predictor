{
    "id": 230345922,
    "contestId": 1316,
    "creationTimeSeconds": 1698572667,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "AhmedRamadan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 670,
    "memoryConsumedBytes": 10547200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint n, p, k, done;\r\nlong long dp[1 << 7], b[1 << 17][1 << 3];\r\narray<long long, 2> a[1 << 17];\r\n// long long lol(int idx = 0, int mask = 0, int o = 0) {\r\n    // if(idx == n) return (o == p ? 0 : LLONG_MIN);\r\n    // long long &ret = dp[idx][mask];\r\n    // if(~ ret) return ret;\r\n    // ret = lol(idx + 1, mask, o) + (idx < o + k ? a[idx][0] : 0);\r\n    // for(int i = 0; i < p; i ++) {\r\n        // if(mask >> i & 1) continue;\r\n        // ret = max(ret, lol(idx + 1, mask | (1 << i), o + 1) + b[a[idx][1]][i]);\r\n    // }\r\n    // return ret;\r\n// } \r\n\r\nint main() {\r\n    cin.tie(nullptr)->sync_with_stdio(false);\r\n    int t = 1;\r\n    // cin >> t;\r\n    while(t --) {\r\n        cin >> n >> p >> k;\r\n        for(int i = 0; i < n; i ++) cin >> a[i][0], a[i][1] = i;\r\n        for(int i = 0; i < n; i ++) {\r\n            for(int j = 0; j < p; j ++) {\r\n                cin >> b[i][j];\r\n            }\r\n        }\r\n        sort(a, a + n, greater<>());\r\n        // for(int i = 0; i < n; i ++) fill(dp[i], dp[i] + (1 << 7), LLONG_MIN);\r\n        fill(dp, dp + (1 << 7), LLONG_MIN);\r\n        done = (1 << p) - 1;\r\n        dp[done] = 0;\r\n        for(int i = n - 1; i >= 0; i --) {\r\n            for(int j = 0; j <= done; j ++) {\r\n                int o = __builtin_popcount(j);\r\n                // dp[i][j] = dp[i + 1][j];\r\n                if(i < o + k) dp[j] += a[i][0];\r\n                for(int k = 0; k < p; k ++) {\r\n                    if(j >> k & 1) continue;\r\n                    dp[j] = max(dp[j], dp[j | (1 << k)] + b[a[i][1]][k]);\r\n                }\r\n            }\r\n        }\r\n        cout << dp[0];\r\n        // cout << lol();\r\n    }\r\n    return 0;\r\n}\r\n"
}