{
    "id": 86725697,
    "contestId": 682,
    "creationTimeSeconds": 1594623324,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 4608000,
    "source": "#include <algorithm>\n#include <cstdio>\n#include <vector>\nusing namespace std;\n#define int long long\ntypedef pair<int, int> point;\npoint operator-(point a, point b) {\n    return make_pair(a.first - b.first, a.second - b.second);\n}\n\nint det(point a, point b) { return a.first * b.second - a.second * b.first; }\n\nvector<point> convex_hull(point *ps, int n) {\n    sort(ps, ps + n);\n    int k = 0;\n    vector<point> qs(n * 2);\n    for (int i = 0; i < n; i++) {\n        while (k > 1 && det(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) <= 0)\n            k--;\n        qs[k++] = ps[i];\n    }\n    for (int i = n - 2, t = k; i >= 0; i--) {\n        while (k > t && det(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) <= 0)\n            k--;\n        qs[k++] = ps[i];\n    }\n    qs.resize(k - 1);\n    return qs;\n}\nconst int MAXN = 5050;\npoint points[MAXN];\n\nint area(point a, point b, point c) {\n    return abs((b.first - a.first) * (c.second - a.second) -\n               (c.first - a.first) * (b.second - a.second));\n}\n\n#define OUT &\ndouble findMaxTri(int n, point OUT a, point OUT b, point OUT c) {\n    vector<point> ps = convex_hull(points, n);\n    int psc = (int)ps.size();\n    bool flag = true;\n    int ai = 0, bi = 1, ci = 2;\n    int ans = area(ps[ai], ps[bi], ps[ci]);\n    while (flag) {\n        flag = false;\n        for (int i = 0; i < psc; i++) {\n            int tmp;\n            tmp = area(ps[ai], ps[bi], ps[i]);\n            if (tmp > ans) {\n                ans = tmp;\n                ci = i;\n                flag = true;\n            }\n            tmp = area(ps[ai], ps[i], ps[ci]);\n            if (tmp > ans) {\n                ans = tmp;\n                bi = i;\n                flag = true;\n            }\n            tmp = area(ps[i], ps[bi], ps[ci]);\n            if (tmp > ans) {\n                ans = tmp;\n                ai = i;\n                flag = true;\n            }\n        }\n    }\n    a = ps[ai];\n    b = ps[bi];\n    c = ps[ci];\n    return ans;\n}\n#undef int\nint main() {\n    int n, s;\n    scanf(\"%d%d\", &n, &s);\n    for (int i = 0; i < n; i++) {\n        scanf(\"%lld%lld\", &points[i].first, &points[i].second);\n    }\n    point a, b, c;\n    findMaxTri(n, a, b, c);\n    printf(\"%lld %lld\\n\", a.first + b.first - c.first,\n           a.second + b.second - c.second);\n    printf(\"%lld %lld\\n\", a.first + c.first - b.first,\n           a.second + c.second - b.second);\n    printf(\"%lld %lld\\n\", b.first + c.first - a.first,\n           b.second + c.second - a.second);\n}\n  \t\t\t \t\t \t\t \t\t  \t\t\t   \t   \t   \t"
}