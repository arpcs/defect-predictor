{
    "id": 119962057,
    "contestId": 682,
    "creationTimeSeconds": 1624087129,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "hzk_cpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 409600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\nconst int N=5000;\r\n\r\nstruct vec{\r\n  LL x,y;\r\n  vec(LL X=0,LL Y=0){x=X;y=Y;}\r\n  vec operator + (const vec &p)const{return vec(x+p.x,y+p.y);}\r\n  vec operator - (const vec &p)const{return vec(x-p.x,y-p.y);}\r\n  vec operator - ()const{return vec(-x,-y);}\r\n  LL operator * (const vec &p)const{return x*p.x+y*p.y;}\r\n  LL operator % (const vec &p)const{return x*p.y-y*p.x;}\r\n  LL operator ~ ()const{return x*x+y*y;}\r\n  bool operator == (const vec &p)const{return x==p.x&&y==p.y;}\r\n  bool operator != (const vec &p)const{return x!=p.x||y!=p.y;}\r\n  bool Quad(){return y>0||!y&&x>=0;}\r\n}ltl;\r\nvec operator * (const vec &a,const LL &p){return vec(a.x*p,a.y*p);}\r\nvec operator * (const LL &p,const vec &a){return vec(a.x*p,a.y*p);}\r\nvec operator / (const vec &a,const LL &p){return vec(a.x/p,a.y/p);}\r\ntypedef vec point;\r\ntypedef vector<point> polygon;\r\n\r\nbool Check_coll(vec a,vec b){return !(a%b);}\r\nbool Check_left(vec a,vec b){return b%a>0;}\r\nbool Check_cmpxy(vec a,vec b){return a.y==b.y?a.x<b.x:a.y<b.y;}\r\n\r\nbool operator < (vec a,vec b){\r\n  a=a-ltl;b=b-ltl;\r\n  if (Check_coll(a,b)&&a*b>=0) return ~a<~b;\r\n  return a.Quad()^b.Quad()?a.Quad()<b.Quad():Check_left(b,a);\r\n}\r\n\r\nint n;\r\nLL m;\r\npolygon a;\r\n\r\nvoid into(){\r\n  scanf(\"%d%lld\",&n,&m);\r\n  a.resize(n);\r\n  for (point &x:a)\r\n\tscanf(\"%lld%lld\",&x.x,&x.y);\r\n}\r\n\r\npolygon Graham(polygon a){\r\n  int n=a.size();\r\n  polygon res;\r\n  ltl=a[0];\r\n  for (point x:a)\r\n\tif (Check_cmpxy(x,ltl)) ltl=x;\r\n  sort(a.begin(),a.end());\r\n  for (point x:a){\r\n\tfor (;res.size()>=2&&!Check_left(x-res.back(),res.back()-res[res.size()-2]);res.pop_back());\r\n\tres.push_back(x);\r\n  }\r\n  return res;\r\n}\r\n\r\npolygon ans;\r\nLL s;\r\n\r\nvoid Get_ans(){\r\n  int n=a.size();\r\n  a.push_back(a[0]);\r\n  for (int i=0;i<n;++i)\r\n\tfor (int j=(i+1)%n,k=(j+1)%n;j^i;j=(j+1)%n){\r\n\t  for (;k^i&&(a[j]-a[i])%(a[k+1]-a[i])>(a[j]-a[i])%(a[k]-a[i]);k=(k+1)%n);\r\n\t  LL t=(a[j]-a[i])%(a[k]-a[i]);\r\n\t  if (t>s) ans={a[i],a[j],a[k]},s=t;\r\n\t}\r\n  point x=ans[0],y=ans[1],z=ans[2];\r\n  ans[0]=x+y-z;\r\n  ans[1]=x+z-y;\r\n  ans[2]=y+z-x;\r\n}\r\n\r\nvoid work(){\r\n  a=Graham(a);\r\n  Get_ans();\r\n}\r\n\r\nvoid outo(){\r\n  printf(\"%lld %lld\\n\",ans[0].x,ans[0].y);\r\n  printf(\"%lld %lld\\n\",ans[1].x,ans[1].y);\r\n  printf(\"%lld %lld\\n\",ans[2].x,ans[2].y);\r\n}\r\n\r\nint main(){\r\n  int T=1;\r\n  //scanf(\"%d\",&T);\r\n  for (;T--;){\r\n    into();\r\n    work();\r\n    outo();\r\n  }\r\n  return 0;\r\n}"
}