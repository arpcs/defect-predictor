{
    "id": 86725967,
    "contestId": 682,
    "creationTimeSeconds": 1594623547,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "Puelloc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 3993600,
    "source": "// Alyona and ztriangles\r\n\r\n#include <algorithm>\r\n#include <cstdio>\r\n#include <vector>\r\nusing namespace std;\r\n#define int long long\r\ntypedef pair<int, int> point;\r\npoint operator-(point a, point b) {\r\n    return make_pair(a.first - b.first, a.second - b.second);\r\n}\r\n\r\nint det(point a, point b) { return a.first * b.second - a.second * b.first; }\r\n\r\nvector<point> convex_hull(point *ps, int n) {\r\n    sort(ps, ps + n);\r\n    int k = 0;\r\n    vector<point> qs(n * 2);\r\n    for (int i = 0; i < n; i++) {\r\n        while (k > 1 && det(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) <= 0)\r\n            k--;\r\n        qs[k++] = ps[i];\r\n    }\r\n    for (int i = n - 2, t = k; i >= 0; i--) {\r\n        while (k > t && det(qs[k - 1] - qs[k - 2], ps[i] - qs[k - 1]) <= 0)\r\n            k--;\r\n        qs[k++] = ps[i];\r\n    }\r\n    qs.resize(k - 1);\r\n    return qs;\r\n}\r\nconst int MAXN = 5050;\r\npoint points[MAXN];\r\n\r\nint area(point a, point b, point c) {\r\n    return abs((b.first - a.first) * (c.second - a.second) -\r\n               (c.first - a.first) * (b.second - a.second));\r\n}\r\n\r\n#define OUT &\r\ndouble findMaxTri(int n, point OUT a, point OUT b, point OUT c) {\r\n    vector<point> ps = convex_hull(points, n);\r\n    int psc = (int)ps.size();\r\n    bool flag = true;\r\n    int ai = 0, bi = 1, ci = 2;\r\n    int ans = area(ps[ai], ps[bi], ps[ci]);\r\n    while (flag) {\r\n        flag = false;\r\n        for (int i = 0; i < psc; i++) {\r\n            int tmp;\r\n            tmp = area(ps[ai], ps[bi], ps[i]);\r\n            if (tmp > ans) {\r\n                ans = tmp;\r\n                ci = i;\r\n                flag = true;\r\n            }\r\n            tmp = area(ps[ai], ps[i], ps[ci]);\r\n            if (tmp > ans) {\r\n                ans = tmp;\r\n                bi = i;\r\n                flag = true;\r\n            }\r\n            tmp = area(ps[i], ps[bi], ps[ci]);\r\n            if (tmp > ans) {\r\n                ans = tmp;\r\n                ai = i;\r\n                flag = true;\r\n            }\r\n        }\r\n    }\r\n    a = ps[ai];\r\n    b = ps[bi];\r\n    c = ps[ci];\r\n    return ans;\r\n}\r\n#undef int\r\nint main() {\r\n    int n, s;\r\n    scanf(\"%d%d\", &n, &s);\r\n    for (int i = 0; i < n; i++) {\r\n        scanf(\"%lld%lld\", &points[i].first, &points[i].second);\r\n    }\r\n    point a, b, c;\r\n    findMaxTri(n, a, b, c);\r\n    printf(\"%lld %lld\\n\", a.first + b.first - c.first,\r\n           a.second + b.second - c.second);\r\n    printf(\"%lld %lld\\n\", a.first + c.first - b.first,\r\n           a.second + c.second - b.second);\r\n    printf(\"%lld %lld\\n\", b.first + c.first - a.first,\r\n           b.second + c.second - a.second);\r\n}"
}