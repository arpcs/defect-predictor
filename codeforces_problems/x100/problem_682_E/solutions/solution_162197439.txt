{
    "id": 162197439,
    "contestId": 682,
    "creationTimeSeconds": 1656476375,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "raid_shadow_legends"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n#define pb push_back\r\n#define x first\r\n#define y second\r\n#define ii pair<int, int> \r\nusing namespace std;\r\n\r\nconst int maxn = 5000 + 100; \r\nint n; \r\n\r\nii P[maxn];\r\n\r\nvector<ii> hull; \r\n\r\nint cross(ii O, ii A, ii B) {\r\n\treturn (A.x - O.x) * (B.y - O.y) - (A.y - O.y) * (B.x - O.x); \t\r\n} \r\n\r\nvoid convex(int n) {\r\n\thull.resize(n * 2); \r\n\tint k = 0; \r\n\tfor (int i = 0; i < n; i++) {\r\n\t\twhile (k >= 2 && cross(hull[k - 1], P[i], hull[k - 2]) >= 0) k--; \r\n\t\thull[k++] = P[i]; \r\n\t}\r\n\tfor(int i = n - 2, t = k + 1; i >= 0; i--) {\r\n\t\twhile (k >= t && cross(hull[k - 1], P[i], hull[k - 2]) >= 0) k--; \r\n\t\thull[k++] = P[i]; \r\n\t}\r\n\thull.resize(k - 1); \r\n}\r\n\r\nint area(ii A, ii B, ii C) {\r\n\treturn abs((B.x - A.x) * (C.y - A.y) - (B.y - A.y) * (C.x - A.x)); \r\n}\r\n\r\nvoid find_max() {\r\n\tint n = hull.size(); \r\n\tint maxarea = 0, a1, a2, a3; \r\n\t\r\n\tfor (int i = 0; i < n; i++) \r\n\t\thull.pb(hull[i]); \r\n\t\r\n\tfor(int it1 = 0; it1 < n; it1++) {\r\n\t\tint it3 = it1 + 2; \r\n\t\tfor(int it2 = it1 + 1; it2 < it1 + n; it2++) {\r\n\t\t\tint old = area(hull[it1], hull[it2], hull[it3]);\r\n\t\t\twhile(it3 + 1 < it1 + n) {\r\n\t\t\t\tint newarea = area(hull[it1], hull[it2], hull[it3 + 1]); \r\n\t\t\t\tif(newarea <= old) \r\n\t\t\t\t\tbreak; \r\n\t\t\t\told = newarea; \r\n\t\t\t\tit3++; \r\n\t\t\t}\r\n\t\t\tif(old > maxarea) {\r\n\t\t\t\tmaxarea = old; \r\n\t\t\t\ta1 = it1; \r\n\t\t\t\ta2 = it2; \r\n\t\t\t\ta3 = it3; \t\r\n\t\t\t} \r\n\t\t}\t\r\n\t} \r\n\t\r\n\tint X3 = hull[a1].x + hull[a2].x - hull[a3].x; \r\n\tint X1 = hull[a2].x + hull[a3].x - hull[a1].x; \r\n\tint X2 = hull[a3].x + hull[a1].x - hull[a2].x; \r\n\t\r\n\tint Y3 = hull[a1].y + hull[a2].y - hull[a3].y; \r\n\tint Y1 = hull[a2].y + hull[a3].y - hull[a1].y; \r\n\tint Y2 = hull[a3].y + hull[a1].y - hull[a2].y; \r\n\t\r\n\tcout << X1 << ' ' << Y1 << '\\n'; \r\n\tcout << X2 << ' ' << Y2 << '\\n'; \r\n\tcout << X3 << ' ' << Y3 << '\\n'; \r\n}\r\n\r\nsigned main() {\r\n\tios_base::sync_with_stdio(0); cin.tie(0);\r\n  int S; \r\n\tcin >> n >> S; \r\n\tfor(int i = 0; i < n; i++) \r\n\t\tcin >> P[i].x >> P[i].y;\r\n\tsort(P, P + n); \r\n\tconvex(n); \r\n\tfind_max(); \r\n\treturn 0; \r\n}"
}