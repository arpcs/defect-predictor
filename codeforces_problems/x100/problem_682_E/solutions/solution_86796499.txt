{
    "id": 86796499,
    "contestId": 682,
    "creationTimeSeconds": 1594700720,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 4096000,
    "source": "#include<iostream>\n#include<cstring>\n#include<string>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<cstdio>\n#include<map>\nusing namespace std;\ntypedef long long ll;\n#define eps 1e-9\n#define ls (rt << 1)\n#define rs (rt << 1 | 1)\n#define pi acos(-1.0)\n#define SIZE 1010\nconst int INF = 0x3f3f3f3f;\nconst int maxn = 5e3 + 10;\nll n ,S;\nstruct Point {\n    double x, y;\n    int id;\n    Point () {}\n    Point (double x_, double y_) : x(x_), y(y_) {}\n    void input() {scanf(\"%lf %lf\", &x, &y); }\n    bool operator<(const Point& b) const {\n        return (x < b.x) || (x == b.x && y < b.y);\n    }\n    void output() {printf(\"%.0f %.0f\\n\", x, y); }\n}p[maxn], ch[maxn];\n\nint dcmp (double x) {  //\u7cbe\u5ea6\n    if (fabs(x) < eps) return 0;\n    else return x < 0 ? -1 : 1;\n}\n\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\t//\u53c9\u79ef\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\t//\u70b9\u79ef\nPoint operator *(Point a, double t) { return Point(a.x * t, a.y * t); }\t//\u5411\u91cf\u6570\u4e58\nPoint operator +(Point a, Point b) { return Point(a.x + b.x, a.y + b.y); }\t//\u5411\u91cf\u52a0\u6cd5\nPoint operator -(Point a, Point b) { return Point(a.x - b.x, a.y - b.y); }\t//\u5411\u91cf\u51cf\u6cd5\nPoint operator / (Point a, double p) { return Point(a.x / p, a.y / p); }\t//\u5411\u91cf\u6570\u4e58\u7684\u9664\u6cd5\u5f62\u5f0f\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\t //\u5224\u65ad\u5411\u91cf\u662f\u5426\u76f8\u540c\ndouble len(Point a) { return sqrt(dot(a, a)); }\t//\u5411\u91cf\u7684\u6a21\u957f\n\nint andrew(Point p[], Point ch[], int n) {\t//\u5b89\u5fb7\u9c81\u7b97\u6cd5\u6c42\u51f8\u5305\uff0c\u8fd4\u56de\u9876\u70b9\u6570\n\tsort(p + 1, p + n + 1);\n\tint top = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\twhile ((top > 1) && (cross(ch[top] - ch[top - 1], p[i] - ch[top]) <= 0)) --top;\n\t\tch[++top] = p[i];\n\t}\n\tint tmp = top;\n\tfor (int i = n - 1; i; --i) {\n\t\twhile ((top > tmp) && (cross(ch[top] - ch[top - 1], p[i] - ch[top]) <= 0)) --top;\n\t\tch[++top] = p[i];\n\t}\n\tif (n > 1) top--;\n\treturn top;\n}\nint p1, p2, p3;\n//void Rotating_calipers(int n, Point p[]) { // \u65cb\u8f6c\u5361\u58f3\u6c42\u6700\u8fdc\u70b9\u5bf9 O(n)\n//\tdouble ans = -1, maxd = -1; ++n; // ans \u4ee3\u8868\u5c40\u90e8\u6700\u5927\u4e09\u89d2\u5f62 maxd\u4ee3\u8868\u6700\u5927\u8ddd\u79bb \u4e24\u8005\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u8d1f\u6570\n//\tint k = 2;\n//\tfor (int i = 0; i < n; i++) {\n//\t\tint j = i + 1;\n//\t\twhile (cross(p[i] - p[j], p[i] - p[k]) < cross(p[i] - p[j], p[i] - p[(k + 1) % n])) {\n//\t\t\tk = (k + 1) % n;\n//\t\t}\n//\t\tif (fabs(cross(p[i] - p[j], p[i] - p[k])) > ans) {\n//\t\t\tans = fabs(cross(p[i] - p[j], p[i] - p[k]));\n////            cout << ans << \"\\n\";\n////            cout << i << \" \" << j << \" \" << k << \"\\n\";\n//\t\t\tp1 = i; p2 = j; p3 = k;\n//\t\t}\n//\t}\n//}\ndouble Rotating_calipers(int n, Point p[]) { // \u65cb\u8f6c\u5361\u58f3\u6c42\u6700\u5927\u4e09\u89d2\u5f62 O(n ^ 2)\n\tdouble ans = 0; ++n;\n\tfor (int i = 0; i < n; ++i) {\n\t\tint k = 2;\n\t\tfor (int j = i + 1; j <= n; ++j) {\n\t\t\twhile (cross(p[i] - p[j], p[i] - p[k]) < cross(p[i] - p[j], p[i] - p[(k + 1) % n])) {\n\t\t\t\tk = (k + 1) % n;\n\t\t\t}\n\t\t\tif (fabs(cross(p[i] - p[j], p[i] - p[k])) > ans) {\n\t\t\t\tans = fabs(cross(p[i] - p[j], p[i] - p[k]));\n\t\t\t\tp1 = i, p2 = j, p3 = k;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0.5 * ans; // \u8fd4\u56de\u6700\u5927\u4e09\u89d2\u5f62\u9762\u79ef\n}\nint main () {\n    scanf(\"%lld%lld\", &n, &S);\n    for (int i = 1; i <= n; i++) p[i].input(), p[i].id = i;\n    int top = andrew(p, ch, n);\n    ch[0] = ch[top];\n//    for (int i = 1; i <= top; i++) {\n//        cout << ch[i].x << \" \" << ch[i].y << '\\n';\n//    }\n    Rotating_calipers(top, ch);\n//    cout << p1 << \" \" << p2 << \" \" << p3 << \"\\n\";\n//    ch[p1].output();\n//    ch[p2].output();\n//    ch[p3].output();\n    Point md = (ch[p1] + ch[p2]) / 2;\n    Point dr = md - ch[p3];\n    Point ans = ch[p3] + dr + dr;\n    ans.output();\n    md = (ch[p2] + ch[p3]) / 2;\n    dr = md - ch[p1];\n    ans = ch[p1] + dr + dr;\n    ans.output();\n    md = (ch[p3] + ch[p1]) / 2;\n    dr = md - ch[p2];\n    ans = ch[p2] + dr + dr;\n    ans.output();\n    return 0;\n}\n\n/*\n4 1\n0 0\n1 0\n0 1\n1 1\n*/\n\n\t\t\t\t \t \t      \t\t\t\t  \t \t \t  \t  \t"
}