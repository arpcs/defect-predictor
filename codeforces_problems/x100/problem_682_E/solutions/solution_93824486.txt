{
    "id": 93824486,
    "contestId": 682,
    "creationTimeSeconds": 1601073222,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "retah"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 204800,
    "source": "#include<bits/stdc++.h> \r\n#define rg register \r\n#define dou double \r\n#define i60 long long \r\n#define fp( i , x , y ) for( rg int i=(x); i<=(y); ++i ) \r\n#define fq( i , x , y ) for( rg int i=(y); i>=(x); --i )  \r\nusing namespace std ; \r\nconst int N = 5e3+10 ;  \r\nstruct node { \r\n  dou x , y ; \r\n  friend node operator - ( node A , node B ) \r\n   { return (node){ A.x-B.x , A.y-B.y } ;  } \r\n  friend node operator + ( node A , node B ) \r\n   { return (node){ A.x+B.x , A.y+B.y } ; }  \r\n  friend dou operator * ( node A , node B ) \r\n   { return A.x*B.y - A.y*B.x ; }    \r\n} a[N] , sta[N] , p1 , p2 , p3 , pa[N] ;    \r\nint n , top ; \r\nbool cmp( node A , node B ) \r\n{ return (A.x==B.x?A.y<B.y:A.x<B.x) ; }  \r\nvoid print( node A ) \r\n{ printf( \"%.0lf %.0lf\\n\" , A.x , A.y ) ; }  \r\ndou S( node A , node B , node C ) \r\n{ return fabs( (A-B) * (B-C) ) ; }  \r\nsigned main( ) { \r\n  i60 tS ; int tx , ty , _n ; \r\n  scanf( \"%d %lld\" , &n , &tS ) ; \r\n  fp( i , 1 , n ) \r\n    scanf( \"%d %d\" , &tx , &ty ) , a[i] = (node){ tx , ty } ;  \r\n  sort( a+1 , a+1+n , cmp ) ; \r\n  fp( i , 1 , n ) { \r\n    while( top > 1 && (sta[top]-sta[top-1])*(a[i]-sta[top]) <= 0 ) top -- ; \r\n\tsta[++top] = a[i] ;  \r\n  } \r\n  fp( i , 1 , top ) pa[i] = sta[i] ; \r\n  _n = top ; top = 0 ; \r\n  fp( i , 1 , n ) { \r\n    while( top > 1 && (sta[top]-sta[top-1])*(a[i]-sta[top]) >= 0 ) top -- ; \r\n    sta[++top] = a[i] ;  \r\n  } \r\n  fp( i , 2 , top-1 ) pa[_n+i-1] = sta[top-i+1] ; \r\n  _n += top-2 ;  \r\n  dou ans = -1.0 ; \r\n  fp( i , 1 , _n ) {  \r\n  //  printf( \"%d \" , i ) ; print( pa[i] )  ; \r\n    int p = i+2 ;   \r\n    fp( j , i+1 , _n ) {  \r\n      p = max( p , j+1 ) ;  \r\n      while( S(pa[i],pa[j],pa[p]) <= S(pa[i],pa[j],pa[p+1]) && p <= _n ) p ++ ; \r\n\t  if( ans < S(pa[i],pa[j],pa[p]) ) \r\n\t     p1 = pa[i] , p2 = pa[j] , p3 = pa[p] , ans = S(pa[i],pa[j],pa[p]) ; \r\n\t} \r\n  } \r\n  print( p1+p2-p3 ) ; \r\n  print( p1+p3-p2 ) ; \r\n  print( p2+p3-p1 ) ;   \r\n  return 0 ; \r\n} "
}