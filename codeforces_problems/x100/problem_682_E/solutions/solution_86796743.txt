{
    "id": 86796743,
    "contestId": 682,
    "creationTimeSeconds": 1594701133,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "bokchoy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 4096000,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<string>\r\n#include<cmath>\r\n#include<algorithm>\r\n#include<vector>\r\n#include<cstdio>\r\n#include<map>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define eps 1e-9\r\n#define ls (rt << 1)\r\n#define rs (rt << 1 | 1)\r\n#define pi acos(-1.0)\r\n#define SIZE 1010\r\nconst int INF = 0x3f3f3f3f;\r\nconst int maxn = 5e3 + 10;\r\nll n ,S;\r\nstruct Point {\r\n    double x, y;\r\n    int id;\r\n    Point () {}\r\n    Point (double x_, double y_) : x(x_), y(y_) {}\r\n    void input() {scanf(\"%lf %lf\", &x, &y); }\r\n    bool operator<(const Point& b) const {\r\n        return (x < b.x) || (x == b.x && y < b.y);\r\n    }\r\n    void output() {printf(\"%.0f %.0f\\n\", x, y); }\r\n}p[maxn], ch[maxn];\r\n\r\nint dcmp (double x) {  //\ufffd\ufffd\ufffd\ufffd\r\n    if (fabs(x) < eps) return 0;\r\n    else return x < 0 ? -1 : 1;\r\n}\r\n\r\ndouble cross(Point a, Point b) { return a.x * b.y - a.y * b.x; }\t//\ufffd\ufffd\ufffd\r\ndouble dot(Point a, Point b) { return a.x * b.x + a.y * b.y; }\t//\ufffd\ufffd\ufffd\r\nPoint operator *(Point a, double t) { return Point(a.x * t, a.y * t); }\t//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\nPoint operator +(Point a, Point b) { return Point(a.x + b.x, a.y + b.y); }\t//\ufffd\ufffd\ufffd\ufffd\ufffd\u04f7\ufffd\r\nPoint operator -(Point a, Point b) { return Point(a.x - b.x, a.y - b.y); }\t//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\nPoint operator / (Point a, double p) { return Point(a.x / p, a.y / p); }\t//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u02f5\u0133\ufffd\ufffd\ufffd\ufffd\ufffd\u02bd\r\nbool operator == (const Point& a, const Point& b) { return dcmp(a.x - b.x) == 0 && dcmp(a.y - b.y) == 0; }\t //\ufffd\u0436\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u01f7\ufffd\ufffd\ufffd\u036c\r\ndouble len(Point a) { return sqrt(dot(a, a)); }\t//\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0123\ufffd\ufffd\r\n\r\nint andrew(Point p[], Point ch[], int n) {\t//\ufffd\ufffd\ufffd\ufffd\u00b3\ufffd\u3de8\ufffd\ufffd\u0379\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0636\ufffd\ufffd\ufffd\ufffd\ufffd\r\n\tsort(p + 1, p + n + 1);\r\n\tint top = 0;\r\n\tfor (int i = 1; i <= n; ++i) {\r\n\t\twhile ((top > 1) && (cross(ch[top] - ch[top - 1], p[i] - ch[top]) <= 0)) --top;\r\n\t\tch[++top] = p[i];\r\n\t}\r\n\tint tmp = top;\r\n\tfor (int i = n - 1; i; --i) {\r\n\t\twhile ((top > tmp) && (cross(ch[top] - ch[top - 1], p[i] - ch[top]) <= 0)) --top;\r\n\t\tch[++top] = p[i];\r\n\t}\r\n\tif (n > 1) top--;\r\n\treturn top;\r\n}\r\nint p1, p2, p3;\r\n//void Rotating_calipers(int n, Point p[]) { // \ufffd\ufffd\u05ea\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u0536\ufffd\ufffd\ufffd O(n)\r\n//\tdouble ans = -1, maxd = -1; ++n; // ans \ufffd\ufffd\ufffd\ufffd\u05b2\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd maxd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \ufffd\ufffd\ufffd\u07f1\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u03aa\ufffd\ufffd\ufffd\ufffd\r\n//\tint k = 2;\r\n//\tfor (int i = 0; i < n; i++) {\r\n//\t\tint j = i + 1;\r\n//\t\twhile (cross(p[i] - p[j], p[i] - p[k]) < cross(p[i] - p[j], p[i] - p[(k + 1) % n])) {\r\n//\t\t\tk = (k + 1) % n;\r\n//\t\t}\r\n//\t\tif (fabs(cross(p[i] - p[j], p[i] - p[k])) > ans) {\r\n//\t\t\tans = fabs(cross(p[i] - p[j], p[i] - p[k]));\r\n////            cout << ans << \"\\n\";\r\n////            cout << i << \" \" << j << \" \" << k << \"\\n\";\r\n//\t\t\tp1 = i; p2 = j; p3 = k;\r\n//\t\t}\r\n//\t}\r\n//}\r\ndouble Rotating_calipers(int n, Point p[]) { // \ufffd\ufffd\u05ea\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd O(n ^ 2)\r\n\tdouble ans = 0; ++n;\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tint k = (i + 2) % n;\r\n\t\tfor (int j = i + 1; j <= n; ++j) {\r\n\t\t\twhile (cross(p[i] - p[j], p[i] - p[k]) < cross(p[i] - p[j], p[i] - p[(k + 1) % n])) {\r\n\t\t\t\tk = (k + 1) % n;\r\n\t\t\t}\r\n\t\t\tif (fabs(cross(p[i] - p[j], p[i] - p[k])) > ans) {\r\n\t\t\t\tans = fabs(cross(p[i] - p[j], p[i] - p[k]));\r\n\t\t\t\tp1 = i, p2 = j, p3 = k;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0.5 * ans; // \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\r\n}\r\nint main () {\r\n    scanf(\"%lld%lld\", &n, &S);\r\n    for (int i = 1; i <= n; i++) p[i].input(), p[i].id = i;\r\n    int top = andrew(p, ch, n);\r\n    ch[0] = ch[top];\r\n//    for (int i = 1; i <= top; i++) {\r\n//        cout << ch[i].x << \" \" << ch[i].y << '\\n';\r\n//    }\r\n    Rotating_calipers(top, ch);\r\n//    cout << p1 << \" \" << p2 << \" \" << p3 << \"\\n\";\r\n//    ch[p1].output();\r\n//    ch[p2].output();\r\n//    ch[p3].output();\r\n    Point md = (ch[p1] + ch[p2]) / 2;\r\n    Point dr = md - ch[p3];\r\n    Point ans = ch[p3] + dr + dr;\r\n    ans.output();\r\n    md = (ch[p2] + ch[p3]) / 2;\r\n    dr = md - ch[p1];\r\n    ans = ch[p1] + dr + dr;\r\n    ans.output();\r\n    md = (ch[p3] + ch[p1]) / 2;\r\n    dr = md - ch[p2];\r\n    ans = ch[p2] + dr + dr;\r\n    ans.output();\r\n    return 0;\r\n}\r\n\r\n/*\r\n4 1\r\n0 0\r\n1 0\r\n0 1\r\n1 1\r\n*/\r\n"
}