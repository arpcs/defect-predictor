{
    "id": 195036954,
    "contestId": 682,
    "creationTimeSeconds": 1677415113,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "cool_milo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 204800,
    "source": "#include<bits/stdc++.h>\n#define double int\nusing namespace std;\nconst int N = 5005,P = 1e9+7;\n\nint x[N],y[N],n;\nint stk[N],ans;\n\nnamespace Geometry{\n\tstruct Vector{\n\t\tdouble x,y;\n\t\tbool operator < (const Vector &A)const{\n\t\t\tif(x != A.x)\treturn x < A.x;\n\t\t\treturn y < A.y;\n\t\t}\n\t\tVector(double _x = 0,double _y = 0){\n\t\t\tx = _x,y = _y;\n\t\t}\n\t\tdouble Length(){\n\t\t\treturn hypot(x,y);\n\t\t}\n\t\tdouble operator * (const Vector& A)const{\n\t\t\treturn x * A.x + y * A.y;//dot \n\t\t}\n\t\tdouble operator ^ (const Vector& A)const{\n\t\t\treturn x * A.y - A.x * y;//x1y2-x2y1,cross,u^v>0->u is to the clockwise of v.\n\t\t}\n\t\tVector operator + (const Vector& A)const{\n\t\t\treturn Vector(x + A.x,y + A.y);\n\t\t}\n\t\tVector operator - (const Vector& A)const{\n\t\t\treturn Vector(x - A.x,y - A.y);\n\t\t}\n\t};\n\ttypedef vector<Vector> Polygon;//what the...\n\t\n\tdouble Area(Polygon A){\n\t\tdouble ans = 0;\n\t\tfor(int i=0;i<(signed)A.size();i++){\n\t\t\tans += A[i] ^ A[(i + 1) % A.size()]; \n\t\t}\n\t\treturn ans * 0.5;\n\t}\n\t\n\tstruct Convexhull{\n\t\tPolygon U,D,S;//up,down,all;\n\t\tint Size(){\n\t\t\treturn U.size() + D.size() - 2;\n\t\t} \n\t\tvoid construct(Polygon A){\n\t\t\tU.clear(),D.clear(),S.clear();\n\t\t\tsort(A.begin(),A.end());\n\t\t\tint stk[N],top = 0;\n\t\t\tbool used[N]; \n\t\t\tstk[++top] = 0,used[0] = 1;\n\t\t\tfor(int i=1;i<(signed)A.size();i++){\n\t\t\t\twhile(top > 1 && ((A[stk[top]] - A[stk[top - 1]]) ^ (A[i] - A[stk[top]])) < 0){\n\t\t\t\t\tused[stk[top]] = 0,top--;\n\t\t\t\t}\n\t\t\t\tused[i] = 1,stk[++top] = i;\n\t\t\t}\n\t\t\tfor(int i=0;i<=(signed)A.size();i++){\n\t\t\t\tif(used[i]){\n\t\t\t\t\tD.push_back(A[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemset(used,0,sizeof(used));\n\t\t\tused[(signed)A.size() - 1] = 1;\n\t\t\tfor(int i=(signed)A.size() - 2;i>=0;i--){\n\t\t\t\twhile(top > 1 && ((A[stk[top]] - A[stk[top - 1]]) ^ (A[i] - A[stk[top]])) < 0){\n\t\t\t\t\tused[stk[top]] = 0,top--;\n\t\t\t\t}\n\t\t\t\tused[i] = 1,stk[++top] = i;\n\t\t\t}\n\t\t\tfor(int i=0;i<=(signed)A.size();i++){\n\t\t\t\tif(used[i]){\n\t\t\t\t\tU.push_back(A[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treverse(U.begin(),U.end());\n\t\t\tfor(int i=0;i<(signed)D.size()-1;i++){\n\t\t\t\tS.push_back(D[i]);\n\t\t\t}\n\t\t\tfor(int i=0;i<(signed)U.size()-1;i++){\n\t\t\t\tS.push_back(U[i]); \n\t\t\t}\n\t\t}\n\t\tdouble Circumference(){\n\t\t\tdouble ans = 0;\n\t\t\tfor(int i=0;i<(signed)S.size() - 1;i++){\n\t\t\t\tans += (S[i + 1] - S[i]).Length(); \n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t\tdouble Area(){\n\t\t\treturn Geometry::Area(S);\n\t\t}\n\t\tPolygon Rotating_Calipers(){\n\t\t\t//\u65cb\u8f6c\u5361\u58f3\uff0c\u8fd4\u56de\u4e00\u4e2a\u591a\u8fb9\u5f62\n\t\t\tPolygon ans;\n\t\t\tfor(int i=0;i<3;i++)\tans.push_back(Vector(0,0));\n\t\t\tint j = 2;\n\t\t\tPolygon tmp1,tmp2;\n\t\t\tfor(int i=0;i<(signed)S.size();i++){\n\t\t\t\twhile(1){\n\t\t\t\t\ttmp1.clear(),tmp2.clear();\n\t\t\t\t\ttmp1.push_back(S[i]),tmp1.push_back(S[(i + 1) % S.size()]),tmp1.push_back(S[j]);\n\t\t\t\t\ttmp2.push_back(S[i]),tmp2.push_back(S[(i + 1) % S.size()]),tmp2.push_back(S[(j + 1) % S.size()]);\n\t\t\t\t\tif(Geometry::Area(tmp1) >= Geometry::Area(tmp2)){\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\t\n\t\t\t\t\tj = (j + 1) % S.size();\n\t\t\t\t}\n\t\t\t\tif(Geometry::Area(tmp1) > Geometry::Area(ans)){\n\t\t\t\t\tans = tmp1;\n\t\t\t\t}\n\t\t\t} \n\t\t\treturn ans;\n\t\t}\n\t};\n\t\n}\n\nusing namespace Geometry;\n\nPolygon D,T,A;\nConvexhull C;\n\nint main()\n{\n\tscanf(\"%d%*d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d %d\",&x[i],&y[i]),D.push_back(Vector(x[i],y[i]));\n\tC.construct(D);\n\tint s = C.S.size(); \n\tfor(int i=0;i<(signed)C.S.size();i++)\n\t{\n\t\tint k = (i + 2) >= s ? (i + 2) - s : i + 2;\n\t\tPolygon tmp1,tmp2;\n\t\tfor(int j=i + 1 >= s ? i + 1 - s : i + 1;j != i;j = j + 1 >= s ? j + 1 - s : j + 1){\n\t\t\twhile(1){\n\t\t\t\ttmp1.clear();\n\t\t\t\ttmp2.clear();\n\t\t\t\ttmp1.push_back(C.S[i]),tmp1.push_back(C.S[j]),tmp1.push_back(C.S[k]);\n\t\t\t\ttmp2.push_back(C.S[i]),tmp2.push_back(C.S[j]),tmp2.push_back(C.S[k + 1 >= s ? k + 1 - s : k + 1]);\n\t\t\t\tif(Area(tmp1) >= Area(tmp2))\tbreak;\n\t\t\t\tk = k + 1 >= s ? k + 1 - s : k + 1;\n\t\t\t}\n\t\t\tif(Area(tmp1) > Area(T))\tT = tmp1;\n\t\t}\n\t}\n\tA.resize(3);\n\tA[0] = T[0] + (T[2] - T[1]);\n\tA[1] = T[1] + (T[0] - T[2]);\n\tA[2] = T[2] + (T[1] - T[0]);\n//\tcout<<Area(A)<<\"?\"<<' '<<T.size()<<endl; \n//\tA[0] = Vector(96,85);\n//\tA[1] = Vector(76,89);\n//\tA[2] = Vector(-166,-175);\n//\tcout<<Area(A)<<endl;\n\tfor(int i=0;i<3;i++)\n\t\tprintf(\"%d %d\\n\",(int)A[i].x,(int)A[i].y); \n }\n/*\n6 6\n0 1\n1 0\n1 2\n2 0\n2 2\n3 1\n*/\n/*\n  start coding at:16:19\n  finish debugging at:\n  stupid mistakes:\n*/\n\n\t\t\t \t \t\t   \t\t\t\t\t \t   \t\t\t\t  \t\t \t"
}