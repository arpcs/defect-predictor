{
    "id": 206605740,
    "contestId": 1821,
    "creationTimeSeconds": 1684567397,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1821,
        "index": "F",
        "name": "Timber",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "fft",
            "math"
        ]
    },
    "author": {
        "contestId": 1821,
        "members": [
            {
                "handle": "binsjl"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682001300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 99,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 9625600,
    "source": "#include <iostream>\n\nusing namespace std;\n\nconstexpr int MAXN = 3e5;\nconst int MOD = 998244353;\n\nlong long my_pow(long long a, long long n) {\n    long long result = 1;\n    while (n) {\n        if (n & 1) {\n            result = result * a % MOD;\n        }\n        a = a * a % MOD;\n        n >>= 1;\n    }\n    return result;\n}\nlong long inverse(long long a) {\n    return my_pow(a, MOD - 2);\n}\n\nlong long factorial[MAXN * 2 + 1];\nlong long factorial_inverse[MAXN * 2 + 1];\n\nlong long combinatorial(long long a, long long b) {\n    return factorial[a] * factorial_inverse[b] % MOD * factorial_inverse[a - b] % MOD;\n}\n\nint main() {\n    ios::sync_with_stdio(0); cin.tie(0);\n\n    factorial[0] = 1;\n    for (int i = 1; i <= MAXN * 2; ++i) {\n        factorial[i] = factorial[i - 1] * i % MOD;\n    }\n    factorial_inverse[MAXN * 2] = inverse(factorial[MAXN * 2]);\n    for (int i = MAXN * 2 - 1; i >= 0; --i) {\n        factorial_inverse[i] = factorial_inverse[i + 1] * (i + 1) % MOD;\n    }\n\n    int n, m, k;\n    cin >> n >> m >> k;\n    long long result = 0;\n    for (int i = 0; i <= m; ++i) {\n        long long j = n - (long long)(k + 1) * m - (long long)k * i;\n        if (j >= 0) {\n            result = (result + combinatorial(m, i) * combinatorial(m + j, m) % MOD * my_pow(2, m - i) % MOD * ((i & 1) ? (MOD - 1) : 1)) % MOD;\n        }\n    }\n    cout << result << '\\n';\n    return 0;\n}"
}