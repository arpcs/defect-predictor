{
    "id": 206414045,
    "contestId": 1821,
    "creationTimeSeconds": 1684480072,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1821,
        "index": "F",
        "name": "Timber",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "fft",
            "math"
        ]
    },
    "author": {
        "contestId": 1821,
        "members": [
            {
                "handle": "CNBI"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682001300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\nconst int MOD = 998244353;\r\nint gcd(int a, int b) {\r\n    return b == 0 ? a : gcd(b, a % b);\r\n}\r\nint findLargestDivisibleSubset(int n, int m) {\r\n    vector<int> dp(m + 1);\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j = i + 1; j <= m; j++) {\r\n            for (int k = i + j; k <= n; k++) {\r\n                if (j == k) continue;\r\n                int g = gcd(j - k, i - i);\r\n                int left = dp[j], right = dp[j - k + m] - 1, maxLeft = max(left, right);\r\n                int maxRight = max(dp[j - k + m - 1], dp[j - k + m - 2]);\r\n                if (g == 1) {\r\n                    dp[j] = maxLeft + 1;\r\n                } else {\r\n                    dp[j] = max(maxLeft, maxRight) + 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return dp[1];\r\n}\r\nint main() {\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    vector<int> dp(m + 1);\r\n    for (int i = 1; i <= m; i++) {\r\n        dp[i] = 1;\r\n    }\r\n    dp[0] = 1;\r\n    int ans = findLargestDivisibleSubset(n, m);\r\n    ans %= MOD;\r\n    cout << ans << endl;\r\n    return 0;\r\n\uff5d"
}