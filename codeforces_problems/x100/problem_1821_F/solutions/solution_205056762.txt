{
    "id": 205056762,
    "contestId": 1821,
    "creationTimeSeconds": 1683533378,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1821,
        "index": "F",
        "name": "Timber",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "fft",
            "math"
        ]
    },
    "author": {
        "contestId": 1821,
        "members": [
            {
                "handle": "Iridescent41"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682001300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 4812800,
    "source": "/*\r\nWhen my time comes, forget the wrong that I've done.\r\nHelp me leave behind some reasons to be missed.\r\nDon't resent me, when you're feeling empty.\r\nKeep me in your memory, leave out all the rest.\r\n*/\r\n#pragma GCC optimize(\"Ofast,no-stack-protector\")\r\n#pragma GCC target(\"avx2,fma\")\r\n#include <cstdio>\r\n#include <iostream>\r\n#include <algorithm>\r\n#define LL long long\r\n#define ULL unsigned long long\r\nusing namespace std;\r\nconst int MAXN = 3e5 + 5;\r\nconst int Mod = 998244353;\r\n\r\ntemplate <typename T>\r\ninline void read(T& x) {\r\n  x = 0; int f = 1; char c = getchar(); while (c < '0' || c > '9') { if (c == '-') f = -f; c = getchar(); }\r\n  while (c >= '0' && c <= '9') { x = (x << 3) + (x << 1) + (c ^ 48), c = getchar(); } x *= f;\r\n}\r\ntemplate <typename T, typename... Args>\r\ninline void read (T &x, Args&... Arg) { read (x), read (Arg...); }\r\ntemplate <typename T>\r\ninline T Abs(T x) { return x < 0 ? -x : x; }\r\ntemplate <typename T>\r\ninline T Max(T x, T y) { return x > y ? x : y; }\r\ntemplate <typename T>\r\ninline T Min(T x, T y) { return x < y ? x : y; }\r\n\r\nint n, m, k;\r\nLL qpow(LL x, int y) {\r\n  LL res = 1;\r\n  while (y) {\r\n    if (y & 1) res = res * x % Mod;\r\n    x = x * x % Mod, y >>= 1;\r\n  }\r\n  return res;\r\n}\r\nLL res, fac[MAXN], inv[MAXN];\r\nLL binom(int x, int y) { return fac[x] * inv[y] % Mod * inv[x - y] % Mod; }\r\nLL g(int x) { return binom(m, x) * binom(n - m * k - x * k, m) % Mod; }\r\n\r\nint main() {\r\n\r\n  read(n, m, k);\r\n  fac[0] = inv[0] = 1; for (int i = 1; i <= n; i++) fac[i] = fac[i - 1] * i % Mod, inv[i] = qpow(fac[i], Mod -2);\r\n\r\n  for (int i = 0, f = 1; i <= m; i++, f = -f) res = (res + (f * g(i) * qpow(2, m - i) + Mod) % Mod) % Mod;\r\n\r\n  printf(\"%lld\\n\", res);\r\n\r\n  return 0;\r\n}"
}