{
    "id": 35774766,
    "contestId": 251,
    "creationTimeSeconds": 1519764073,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 251,
        "index": "C",
        "name": "Number Transformation",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 251,
        "members": [
            {
                "handle": "Noureldin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1354807800
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 404,
    "memoryConsumedBytes": 20684800,
    "source": "import java.io.*;\r\nimport java.lang.reflect.Array;\r\nimport java.math.*;\r\nimport java.text.DecimalFormat;\r\nimport java.util.*;\r\n\r\n\r\n\r\n\r\npublic class Main {\r\n\r\n    private static long gcd(long a,long b) {\r\n         while (b > 0) {\r\n             long t = a%b;\r\n             a = b;\r\n             b = t;\r\n         }\r\n         return a;\r\n    }\r\n\r\n    private static int K;\r\n    private static long solve(int st,int en) throws Exception {\r\n        boolean [] vis = new boolean[st + 1];\r\n        Queue<Integer> q = new LinkedList<>();\r\n        q.add(st); vis[st] = true;\r\n        for (int d = 0;!q.isEmpty();d++) {\r\n            for (int L = q.size();L > 0;L--) {\r\n                int u = q.poll();\r\n                if (u == en) {\r\n//                    System.err.println(\"from \" + st + \" to \" + en + \" need \" + d);\r\n                    return d;\r\n                }\r\n                int v = u - 1;\r\n                if (v >= 0 && !vis[v]) {\r\n                    vis[v] = true;\r\n                    q.add(v);\r\n                }\r\n                for (int k = 2;k <= K;k++) {\r\n                    v = u - u%k;\r\n                    if (!vis[v]) {\r\n                        vis[v] = true;\r\n                        q.add(v);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        throw new Exception(\"couldn't find sol\");\r\n    }\r\n    public static void main(String[] args) throws Exception {\r\n        IO io = new IO(null, null);\r\n\r\n        long a = io.getNextLong(),b = io.getNextLong();\r\n        K = io.getNextInt();\r\n        long LCM = 1;\r\n        for (int i = 1;i <= K;i++)\r\n            LCM = (i/gcd(i,LCM)) * LCM;\r\n\r\n        long u = ((b - LCM + 1)/LCM)*LCM,v = a - a%LCM,ans = 0;\r\n        if (u == v) {\r\n            if (u == 0) ans = solve((int)a,(int)b);\r\n            else ans = solve((int)(a%LCM + LCM),(int)(b%LCM));\r\n        }\r\n        else {\r\n            ans = solve((int)(a%LCM),0);\r\n            ans += solve((int)LCM,(int)(b%LCM));\r\n            ans += ((v-u)/LCM - 1)*solve((int)LCM,0);\r\n        }\r\n        io.println(ans);\r\n        io.close();\r\n    }\r\n}\r\n\r\n\r\n\r\nclass IO{\r\n    private BufferedReader br;\r\n    private StringTokenizer st;\r\n    private PrintWriter writer;\r\n    private String inputFile,outputFile;\r\n\r\n    public boolean hasMore() throws IOException{\r\n        if(st != null && st.hasMoreTokens()) return true;\r\n        if(br != null && br.ready()) return true;\r\n        return false;\r\n    }\r\n    public String getNext() throws FileNotFoundException, IOException{\r\n        while(st == null || !st.hasMoreTokens()) st = new StringTokenizer(br.readLine());\r\n        return st.nextToken();\r\n    }\r\n\r\n    public String getNextLine() throws FileNotFoundException, IOException{\r\n        return br.readLine().trim();\r\n    }\r\n\r\n    public int getNextInt() throws FileNotFoundException, IOException{\r\n        return Integer.parseInt(getNext());\r\n    }\r\n    public long getNextLong() throws FileNotFoundException, IOException{\r\n        return Long.parseLong(getNext());\r\n    }\r\n\r\n    public void print(double x,int num_digits) throws  IOException{\r\n        writer.printf(\"%.\" + num_digits + \"f\" ,x);\r\n    }\r\n    public void println(double x,int num_digits) throws  IOException{\r\n        writer.printf(\"%.\" + num_digits + \"f\\n\" ,x);\r\n    }\r\n    public void print(Object o) throws  IOException{\r\n        writer.print(o.toString());\r\n    }\r\n\r\n    public void println(Object o) throws  IOException{\r\n        writer.println(o.toString());\r\n    }\r\n    public IO(String x,String y) throws FileNotFoundException, IOException{\r\n        inputFile = x;\r\n        outputFile = y;\r\n        if(x != null) br = new BufferedReader(new FileReader(inputFile));\r\n        else br = new BufferedReader(new InputStreamReader(System.in));\r\n        if(y != null) writer = new PrintWriter(new BufferedWriter(new FileWriter(outputFile)));\r\n        else writer = new PrintWriter(new OutputStreamWriter(System.out));\r\n    }\r\n\r\n    protected void close() throws IOException{\r\n        br.close();\r\n        writer.close();\r\n    }\r\n    public void outputArr(Object [] A) throws IOException{\r\n        int L = A.length;\r\n        for (int i = 0;i < L;i++) {\r\n            if(i > 0) writer.print(\" \");\r\n            writer.print(A[i]);\r\n        }\r\n        writer.print(\"\\n\");\r\n    }\r\n}\r\n ",
    "suggested_categories": [
        "java programming",
        "algorithm design",
        "code optimization",
        "mathematical programming",
        "input/output handling",
        "exception handling",
        "queue data structure",
        "loop manipulation",
        "integer manipulation",
        "array manipulation",
        "file handling",
        "error handling",
        "numeric computation",
        "algorithm complexity",
        "data structure implementation",
        "code organization",
        "class design",
        "string formatting",
        "code readability",
        "code comments"
    ]
}