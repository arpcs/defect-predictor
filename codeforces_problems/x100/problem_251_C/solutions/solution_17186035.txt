{
    "id": 17186035,
    "contestId": 251,
    "creationTimeSeconds": 1459944416,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 251,
        "index": "C",
        "name": "Number Transformation",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 251,
        "members": [
            {
                "handle": "fengsuiyan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1354807800
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 2252800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 100;\r\nconst long long INF = (long long)1e18 + 10;\r\n\r\nlong long a, b;\r\nint k;\r\nlong long dp[N];\r\n\r\nint main() {\r\n  scanf(\"%lld%lld\", &a, &b);\r\n  scanf(\"%d\", &k);\r\n  long long t = a / k * k - k;\r\n  fill(dp, dp + N, INF);\r\n  dp[a - t] = 0;\r\n  for (long long i = a - 1; i >= t; --i) {\r\n    dp[i - t] = min(dp[i - t + 1] + 1, dp[i - t]); \r\n    for (int j = 2; j <= k; ++j) {\r\n      if (i % j == 0) {\r\n        for (int q = 1; q < j; ++q) {\r\n          dp[i - t] = min(dp[i - t], dp[i - t + q] + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (b >= t) {\r\n    printf(\"%d\\n\", dp[b - t]);\r\n    return 0;\r\n  }\r\n  long long s = b / k * k + 2 * k;\r\n  long long o;\r\n  if (s >= t) {\r\n    o = dp[s - t];\r\n  }\r\n  else {\r\n    o = dp[0];\r\n    o += (t - s) / k * 2;\r\n  }\r\n  fill(dp, dp + N, INF);\r\n  dp[s - b] = o;\r\n  for (long long i = s - 1; i >= b; --i) {\r\n    dp[i - b] = min(dp[i - b], dp[i - b + 1] + 1);\r\n    for (int j = 2; j <= k; ++j) {\r\n      if (i % j == 0) {\r\n        for (int q = 1; q < j; ++q) {\r\n          dp[i - b] = min(dp[i - b], dp[i - b + q] + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  printf(\"%lld\\n\", dp[0]);\r\n  return 0;\r\n}\r\n"
}