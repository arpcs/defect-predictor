{
    "id": 223675368,
    "contestId": 272,
    "creationTimeSeconds": 1694911776,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 272,
        "index": "C",
        "name": "Dima and Staircase",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 272,
        "members": [
            {
                "handle": "_3bdo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1360769400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 1308,
    "memoryConsumedBytes": 6860800,
    "source": "#include<bits/stdc++.h>\r\ntypedef long long ll;\r\nusing namespace std;\r\nconst int N = 1e5 + 1;\r\nint nums[N], n;\r\nstring s;\r\nstruct Node\r\n{\r\n     ll val, lazy;\r\n     Node(ll _val = 0, ll _lazy = 0)\r\n     {\r\n          val = _val;\r\n          lazy = _lazy;\r\n     }\r\n};\r\nNode merge(Node a, Node b)\r\n{\r\n     Node ans;\r\n     ans.val = max(a.val, b.val);\r\n     return ans;\r\n}\r\nstruct segment_tree\r\n{\r\n     vector <Node> tree;\r\n     void build(int i, int l, int r)\r\n     {\r\n          if (l == r)\r\n          {\r\n               tree[i] = Node(nums[l]);\r\n               return;\r\n          }\r\n          int mid = (l + r) >> 1;\r\n          build(2 * i, l, mid);\r\n          build(2 * i + 1, mid + 1, r);\r\n          tree[i] = merge(tree[2 * i], tree[2 * i + 1]);\r\n     }\r\n     void propagate(int i, int low, int high)\r\n     {\r\n          if (!tree[i].lazy) return;\r\n          tree[i].val = tree[i].lazy;\r\n          if (low < high)\r\n          {\r\n               tree[2 * i].lazy = tree[i].lazy;\r\n               tree[2 * i + 1].lazy = tree[i].lazy;\r\n          }\r\n          tree[i].lazy = 0;\r\n     }\r\n     void update(int i, int low, int high, int l, int r,ll val)\r\n     {\r\n          propagate(i, low, high);\r\n          if (high < l || r < low) return;\r\n          if (l <= low && r >= high)\r\n          {\r\n               tree[i].lazy = val;\r\n               propagate(i, low, high);\r\n               return;\r\n          }\r\n          int mid = (low + high) >> 1;\r\n          update(2 * i, low, mid, l, r, val);\r\n          update(2 * i + 1, mid + 1, high, l, r, val);\r\n          tree[i] = merge(tree[2 * i], tree[2 * i + 1]);\r\n     }\r\n     int get(int i, int low, int high, int l, int r)\r\n     {\r\n          propagate(i, low, high);\r\n          if (high < l || r < low) return 0;\r\n          if (l <= low && r >= high) return tree[i].val;\r\n          int mid = (low + high) >> 1;\r\n          return max(get(2 * i, low, mid, l, r),\r\n               get(2 * i + 1, mid + 1, high, l, r));\r\n     }\r\n};\r\nvoid solve()\r\n{\r\n     cin >> n;\r\n     for (int i = 1; i <= n; i++) cin >> nums[i];\r\n     segment_tree tree;\r\n     tree.tree.resize(n << 2);\r\n     tree.build(1, 1, n);\r\n     int m;\r\n     cin >> m;\r\n     while (m--)\r\n     {\r\n          ll w, h;\r\n          cin >> w >> h;\r\n\r\n          ll height = tree.get(1, 1, n, 1, w);\r\n          ll cur = h + height;\r\n          cerr << \"ans = \";\r\n          cout << height << endl;\r\n          tree.update(1, 1, n, 1, w, cur);\r\n     }\r\n\r\n}\r\nint main()\r\n{\r\n     ios_base::sync_with_stdio(NULL);\r\n     cin.tie(NULL); cout.tie(NULL);\r\n\r\n     int t = 1;\r\n     //cin >> t;\r\n     while (t--) solve();\r\n};"
}