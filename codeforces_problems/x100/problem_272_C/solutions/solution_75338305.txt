{
    "id": 75338305,
    "contestId": 272,
    "creationTimeSeconds": 1585913583,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 272,
        "index": "C",
        "name": "Dima and Staircase",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 272,
        "members": [
            {
                "handle": "LastThread"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1360769400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 3993600,
    "source": "/*\n * \tHow to be brave\n * \tHow can I love when I am afraid to fall...\n*/\n#include<bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n// #include<boost/multiprecision/cpp_int.hpp>\n// using namespace boost::multiprecision;\nusing namespace __gnu_pbds;\nusing namespace std;\n#define int long long\n#define mod 1000000007\n#define FAST ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\n#define f(i,n) for(int i=0;i<n;i++)\n#define fp(i,k,n) for(int i=k;i<=n;i++)\n#define fr(i,k,n) for(int i=k;i>=n;i--)\n#define pb push_back\n#define F first\n#define S second\n#define all(a) a.begin(),a.end()\ntypedef tree<int,null_type,less_equal<int>,rb_tree_tag,tree_order_statistics_node_update>ordered_set;\n\nint node[4*100005],a[100005];\n\nvoid build(int t,int tl,int tr)\n{\n    if(tl==tr)\n    {\n        node[t]=a[tl];\n        return;\n    }\n    int mid=(tl+tr)/2;\n    build(2*t,tl,mid);\n    build(2*t+1,mid+1,tr);\n    node[t]=max(node[2*t],node[2*t+1]);\n}\n\nint get(int t,int l,int r,int tl, int tr)\n{\n    if(tr<tl || l>r || l>tr || r<tl)\n        return 0;\n    if(tl>=l && tr<=r)\n        return node[t];\n    int mid=(tl+tr)/2;\n    return max(get(2*t,l,r,tl,mid),get(2*t+1,l,r,mid+1,tr));\n    \n}   \n\nvoid update(int t,int l,int r,int tl,int tr,int val)\n{\n     if(tr<tl || l>r || l>tr || r<tl)\n        return ;\n    if(tl==tr)\n        {\n            node[t]=val;\n            return;\n        }\n    int mid=(tl+tr)/2;\n    if(mid<=r)\n        update(2*t,l,r,tl,mid,val);\n    else\n        update(2*t+1,l,r,mid+1,tr,val);\n    node[t]=max(node[2*t],node[2*t+1]);\n}\n\nvoid solve()\n{\n  int n;\n  cin >> n;\n  f(i,n)\n    cin >> a[i];\n   build(1,0,n-1);\n   int m;\n   cin >> m;\n   while(m--)\n   {\n       int w,h;\n       cin >> w>> h;\n       int maxm=get(1,0,w-1,0,n-1);\n       cout << maxm << '\\n';\n       update(1,0,w-1,0,n-1,maxm+h);\n   }\n  return;\n}\nsigned main()\n{\n  FAST\n  int T=1;\n  // cin >> T;\n  while(T--)\n  {\n    solve();\n  }\n  return 0;\n}\n"
}