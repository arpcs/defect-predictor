{
    "id": 92798513,
    "contestId": 272,
    "creationTimeSeconds": 1600094644,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 272,
        "index": "C",
        "name": "Dima and Staircase",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 272,
        "members": [
            {
                "handle": "singhhr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1360769400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 3993600,
    "source": "// To implement segment tree with lazy propagation for range update and finding maximum in a range\r\n\r\n#include <bits/stdc++.h> \r\nusing namespace std; \r\n\r\n#define MAX 200000\r\n#define lli long long int\r\n\r\nlli tree[MAX]={0}; \r\nlli lazy[MAX]={0};\r\nlli maxi; \r\n\r\n// Recursive function to update in a range\r\nvoid updateRangeUtil(lli si,lli ss,lli se,lli us,lli ue,lli diff) \r\n{ \r\n if(lazy[si]!=0) \r\n { \r\n  tree[si]=lazy[si]; \r\n  if(ss!=se) \r\n  { \r\n   lazy[si*2+1]=lazy[si]; \r\n   lazy[si*2+2]=lazy[si]; \r\n  } \r\n  lazy[si]=0; \r\n } \r\n if(ss>se || ss>ue || se<us) \r\n  return; \r\n if(ss>=us && se<=ue) \r\n { \r\n  tree[si]=maxi+diff; \r\n  if(ss!=se) \r\n  { \r\n   lazy[si*2+1]=maxi+diff; \r\n   lazy[si*2+2]=maxi+diff; \r\n  } \r\n  return; \r\n } \r\n lli mid=(ss+se)/2; \r\n updateRangeUtil(si*2+1,ss,mid,us,ue,diff); \r\n updateRangeUtil(si*2+2,mid+1,se,us,ue,diff); \r\n tree[si]=max(tree[si*2+1],tree[si*2+2]); \r\n} \r\n\r\n// Function to update a range of values in segment tree \r\nvoid updateRange(lli n,lli us,lli ue,lli diff) \r\n{ \r\n updateRangeUtil(0,0,n-1,us,ue,diff); \r\n} \r\n\r\n// Recursive function to get the maximum element in given a range of the array\r\nlli getMaxUtil(lli ss,lli se,lli qs,lli qe,lli si) \r\n{ \r\n if(lazy[si]!=0) \r\n { \r\n  tree[si]=lazy[si];\r\n  if(ss!=se) \r\n  { \r\n   lazy[si*2+1]=lazy[si]; \r\n   lazy[si*2+2]=lazy[si]; \r\n  } \r\n  lazy[si]=0; \r\n } \r\n if(ss>se || ss>qe || se<qs) \r\n  return 0; \r\n if(ss>=qs && se<=qe) \r\n  return tree[si]; \r\n lli mid=(ss+se)/2; \r\n return max(getMaxUtil(ss,mid,qs,qe,2*si+1),getMaxUtil(mid+1,se,qs,qe,2*si+2)); \r\n} \r\n\r\n// Function to get the maximum element in given a range of the array\r\nlli getMax(lli n,lli qs,lli qe) \r\n{ \r\n if(qs<0 || qe>n-1 || qs>qe) \r\n { \r\n  cout<<\"Invalid Input\"; \r\n  return -1; \r\n } \r\n return getMaxUtil(0,n-1,qs,qe,0); \r\n} \r\n\r\n// Recursive function that constructs Segment Tree for array[ss..se] \r\nvoid constructSTUtil(lli arr[],lli ss,lli se,lli si) \r\n{ \r\n if(ss>se) \r\n  return; \r\n if(ss==se) \r\n { \r\n  tree[si]=arr[ss]; \r\n  return; \r\n } \r\n lli mid=(ss+se)/2; \r\n constructSTUtil(arr,ss,mid,si*2+1); \r\n constructSTUtil(arr,mid+1,se,si*2+2); \r\n tree[si]=max(tree[si*2+1],tree[si*2+2]); \r\n} \r\n\r\n// Function to construct a segment tree from a given array \r\nvoid constructST(lli arr[],lli n) \r\n{ \r\n constructSTUtil(arr,0,n-1,0); \r\n} \r\n\r\nint main() \r\n{ \r\n lli n;\r\n cin>>n;\r\n lli arr[n];\r\n for(lli i=0;i<n;i++)\r\n  cin>>arr[i];\r\n constructST(arr,n); \r\n lli m;\r\n long long int w,h;\r\n cin>>m;\r\n for(lli i=0;i<m;i++)\r\n {\r\n  cin>>w>>h;\r\n  maxi=getMax(n,0,w-1);\r\n  cout<<maxi<<'\\n';\r\n  updateRange(n,0,w-1,h);\r\n }  \r\n return 0; \r\n} "
}