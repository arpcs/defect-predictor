{
    "id": 171627211,
    "contestId": 272,
    "creationTimeSeconds": 1662823412,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 272,
        "index": "C",
        "name": "Dima and Staircase",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 272,
        "members": [
            {
                "handle": "louay000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1360769400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 1526,
    "memoryConsumedBytes": 6758400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nvoid push(unsigned long long tree[], unsigned long long lazy[], int index){\r\n    if(lazy[index]){\r\n        tree[index] = lazy[index];\r\n        lazy[index * 2] = lazy[index * 2 + 1] = lazy[index];\r\n        lazy[index] = 0;\r\n        return;\r\n    }\r\n}\r\nvoid build(unsigned long long tree[], int original[], int index, int leftS, int rightS){\r\n    if(leftS == rightS) tree[index] = original[leftS];\r\n    else{\r\n        int mid = leftS + (rightS - leftS) /2;\r\n        build(tree, original, index * 2, leftS, mid);\r\n        build(tree, original, index * 2 + 1, mid + 1, rightS);\r\n        tree[index] = max(tree[index * 2],tree[index * 2 + 1]);\r\n    }\r\n}\r\nvoid updateRange(unsigned long long tree[], unsigned long long lazy[], int leftQ, int rightQ, int index, int leftS, int rightS, unsigned long long val){\r\n    push(tree, lazy, index);\r\n    if(leftQ > rightS || rightQ < leftS) return;\r\n    if(leftQ <= leftS && rightS <= rightQ){\r\n        lazy[index] += val;\r\n        return;\r\n    }\r\n    int mid = leftS + (rightS - leftS) / 2;\r\n    updateRange(tree, lazy, leftQ, rightQ, index * 2, leftS, mid, val);\r\n    updateRange(tree, lazy, leftQ, rightQ, index * 2 + 1, mid + 1, rightS, val);\r\n    unsigned long long x = (lazy[index * 2] != 0)? lazy[index * 2] : tree[index * 2];\r\n    unsigned long long y = (lazy[index * 2 + 1] != 0)? lazy[index * 2 + 1] : tree[index * 2 + 1];\r\n    tree[index] = max(x, y);\r\n}\r\nunsigned long long getMax(unsigned long long tree[], unsigned long long lazy[], int leftQ, int rightQ, int index, int leftS, int rightS){\r\n    push(tree, lazy, index);\r\n    if(leftQ > rightS || rightQ < leftS) return 0;\r\n    if(leftQ <= leftS && rightS <= rightQ) return tree[index];\r\n    int mid = leftS + (rightS - leftS) / 2;\r\n    unsigned long long x = getMax(tree, lazy, leftQ, rightQ, index * 2, leftS, mid);\r\n    unsigned long long y = getMax(tree, lazy, leftQ, rightQ, index *2 + 1, mid + 1, rightS);\r\n    return max(x ,y);\r\n}\r\n\r\nint main(){\r\n    int stairNum; cin >> stairNum;\r\n    int stairs[stairNum];\r\n    for (int i = 0; i < stairNum; ++i) cin >> stairs[i];\r\n\r\n    unsigned long long tree[stairNum * 4];\r\n    unsigned long long lazy[stairNum * 4];\r\n    memset(tree, 0, sizeof tree);\r\n    memset(lazy, 0, sizeof lazy);\r\n    build(tree, stairs, 1, 0, stairNum - 1);\r\n    int boxNum, w, h; cin >> boxNum;\r\n    while (boxNum--){\r\n//        for (int i = 0; i < stairNum * 4; ++i) cout << tree[i] << \" \";\r\n//        cout << endl;\r\n        cin >> w >> h;\r\n        unsigned long long maxi = getMax(tree, lazy, 0, w - 1, 1, 0, stairNum - 1);\r\n        cout << maxi << \"\\n\";\r\n        updateRange(tree, lazy, 0, w - 1, 1, 0, stairNum - 1, maxi + h);\r\n    }\r\n//    for (int i = 0; i < stairNum * 4; ++i) cout << tree[i] << \" \";\r\n//    cout << endl;\r\n\r\n    return 0;\r\n}"
}