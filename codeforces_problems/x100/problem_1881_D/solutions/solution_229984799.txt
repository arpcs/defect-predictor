{
    "id": 229984799,
    "contestId": 1881,
    "creationTimeSeconds": 1698397749,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1881,
        "index": "D",
        "name": "Divide and Equalize",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1881,
        "members": [
            {
                "handle": "AryanVashistha"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1697121300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvoid sieveOfEratosthenes(int n, vector<int> &prime) {\r\n    vector<bool> isPrime(n+1, true);\r\n    isPrime[0] = isPrime[1] = false;\r\n\r\n    for (int p = 2; p * p <= n; p++) {\r\n        if (isPrime[p]) {\r\n            for (int i = p * p; i <= n; i += p) {\r\n                isPrime[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (int p = 2; p <= n; p++) {\r\n        if (isPrime[p]) {\r\n            prime.push_back(p);\r\n        }\r\n    }\r\n}\r\n\r\nint countPrimeFactors(int number, int prime) {\r\n    int count = 0;\r\n    while (number % prime == 0) {\r\n        count++;\r\n        number /= prime;\r\n    }\r\n    return count;\r\n}\r\n\r\nint main() {\r\n    int t;cin>>t;\r\n    while(t--){\r\n        int n;\r\n        cin >> n;\r\n        vector<int> input_arr(n);\r\n        for (int i = 0; i < n; i++) cin >> input_arr[i];\r\n\r\n        int maxi_no = *max_element(input_arr.begin(), input_arr.end());\r\n\r\n        vector<int> prime_nos;\r\n        sieveOfEratosthenes(maxi_no, prime_nos);\r\n\r\n        for (auto prime : prime_nos) {\r\n            int power_sum = 0;\r\n            for (auto num : input_arr) {\r\n                power_sum += countPrimeFactors(num, prime);\r\n            }\r\n\r\n            if (power_sum % n != 0) {\r\n                cout << \"NO\"<<endl;\r\n                return 0; // Exit early, no need to check other primes\r\n            }\r\n        }\r\n\r\n        cout << \"YES\"<<endl;\r\n        return 0;\r\n    }\r\n\r\n}\r\n"
}