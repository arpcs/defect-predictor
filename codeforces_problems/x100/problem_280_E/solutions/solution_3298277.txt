{
    "id": 3298277,
    "contestId": 280,
    "creationTimeSeconds": 1363174872,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "konstantanter"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 921,
    "memoryConsumedBytes": 1228800,
    "source": "#include<cstdio>\r\n#include<cstdlib>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<ctime>\r\n#include<cctype>\r\n#include<complex>\r\n#include<algorithm>\r\n#include<vector>\r\n#include<queue>\r\n#include<set>\r\n#include<map>\r\n#define un using namespace\r\nun std;\r\n#define pb push_back\r\n#define mp make_pair\r\n#define c0 first\r\n#define c1 second\r\n#define sqr(x)((x)*(x))\r\n#define clr(x)memset(x,0,sizeof(x))\r\n#define clr1(x)memset(x,-1,sizeof(x))\r\n\r\ntypedef long long ll;\r\n#ifdef __unix__\r\n#define LLD \"%lld\"\r\n#else\r\n#define LLD \"%I64d\"\r\n#endif\r\ntypedef pair<int,int> pii;\r\n\r\n#define P 1000000007\r\n#define eps 1e-12\r\n\r\nint n,Q,A,B;\r\nstruct point{\r\n    double x,y;\r\n    inline point(){x=y=0;}\r\n    inline point(double _x,double _y){x=_x;y=_y;}\r\n    inline bool operator<(const point a)const{return y+eps<a.y;}\r\n};\r\ntypedef vector<point>vp;\r\nvp D;\r\nvp::iterator up,down;\r\ndouble ansX[10000],ans;\r\ninline double get_min_point(){\r\n    up=lower_bound(D.begin(),D.end(),point(0,-eps));\r\n    if(fabs(up->y)<=eps)return up->x;\r\n    down=up-1;\r\n    return(up->y*down->x-up->x*down->y)/(up->y-down->y);\r\n}\r\ndouble solve(int i){\r\n    if(i==n)return max(min(get_min_point(),(double)Q),(double)(n-1)*A+1);\r\n    double X;\r\n    scanf(\"%lf\",&X);\r\n    if(i==0){\r\n        D.pb(point(1.0,-1e30));\r\n        D.pb(point(1.0,2.0*(1-X)));\r\n        D.pb(point((double)Q,2.0*(Q-X)));\r\n        ansX[i]=solve(i+1);\r\n        ans+=sqr(X-ansX[i]);\r\n        return 0;\r\n    }\r\n    double min_point=get_min_point();\r\n    vp::iterator pos=D.begin();\r\n    if(A!=B){\r\n        if(fabs(up->y)<=eps)pos=D.insert(up,*up);\r\n        else{\r\n            pos=D.insert(up,point(min_point,0));\r\n            pos=D.insert(pos,point(min_point,0));\r\n        }\r\n    }\r\n    for(vp::iterator it=D.begin();it!=D.end();it++){\r\n        if(it<=pos)it->x+=A;\r\n        else it->x+=B;\r\n        it->y+=2.0*(it->x-X);\r\n    }\r\n    ansX[i]=solve(i+1);\r\n    ans+=sqr(X-ansX[i]);\r\n    return ansX[i]<min_point+A?ansX[i]-A:ansX[i]>min_point+B?ansX[i]-B:min_point;\r\n}\r\n\r\nint main(){\r\n    scanf(\"%d%d%d%d\",&n,&Q,&A,&B);\r\n    solve(0);\r\n    for(int i=-1;++i!=n;)printf(\"%lf \",ansX[i]);\r\n    printf(\"\\n%lf\\n\",ans);\r\n}"
}