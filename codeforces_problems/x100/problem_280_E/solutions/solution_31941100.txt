{
    "id": 31941100,
    "contestId": 280,
    "creationTimeSeconds": 1509521317,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "sunset"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\n#define xx first\r\n#define yy second\r\n#define mp make_pair\r\n#define pb push_back\r\n#define mset(x, y) memset(x, y, sizeof x)\r\n#define mcpy(x, y) memcpy(x, y, sizeof x)\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef pair <int, int> pii;\r\n\r\ninline int Read()\r\n{\r\n\tint x = 0, f = 1, c = getchar();\r\n\tfor (; !isdigit(c); c = getchar())\r\n\t\tif (c == '-')\r\n\t\t\tf = -1;\r\n\tfor (;  isdigit(c); c = getchar())\r\n\t\tx = x * 10 + c - '0';\r\n\treturn x * f;\r\n}\r\n\r\nconst int MAXN = 6005;\r\n\r\npair <double, double> c[MAXN << 1];\r\ndouble ret, x[MAXN], ans[MAXN];\r\nint n, m, t, p, a, b;\r\n\r\nint main()\r\n{\r\n#ifdef wxh010910\r\n\tfreopen(\"data.in\", \"r\", stdin);\r\n#endif\r\n\tn = Read(), t = Read(), a = Read(), b = Read();\r\n\tfor (int i = 1; i <= n; i ++)\r\n\t{\r\n\t\tx[i] = Read();\r\n\t\tif (i == 1)\r\n\t\t\tc[m ++] = mp(1, 2 * (1 - x[i])), c[m ++] = mp(t, 2 * (t - x[i]));\r\n\t\telse\r\n\t\t{\r\n\t\t\tfor (int j = m - 1; j > p; j --)\r\n\t\t\t\tc[j + 2] = c[j];\r\n\t\t\tm += 2, c[++ p] = mp(ans[i - 1], 0), c[p + 1] = mp(ans[i - 1], 0);\r\n\t\t\tfor (int j = 0; j <= p; j ++)\r\n\t\t\t\tc[j].xx += a;\r\n\t\t\tfor (int j = p + 1; j < m; j ++)\r\n\t\t\t\tc[j].xx += b;\r\n\t\t\tfor (int j = 0; j < m; j ++)\r\n\t\t\t\tc[j].yy += 2 * (c[j].xx - x[i]);\r\n\t\t}\r\n\t\tif (c[0].yy >= 0)\r\n\t\t\tp = -1, ans[i] = c[0].xx;\r\n\t\telse\r\n\t\t{\r\n\t\t\tfor (p = 0; p < m; p ++)\r\n\t\t\t\tif (c[p].yy <= 0 && c[p + 1].yy > 0)\r\n\t\t\t\t\tbreak;\r\n\t\t\tans[i] = c[p].xx - c[p].yy * (c[p + 1].xx - c[p].xx) / (c[p + 1].yy - c[p].yy);\r\n\t\t}\r\n\t}\r\n\tans[n] = min(ans[n], (double)t);\r\n\tfor (int i = n - 1; i; i --)\r\n\t\tans[i] = max(min(ans[i], ans[i + 1] - a), ans[i + 1] - b);\r\n\tfor (int i = 1; i <= n; i ++)\r\n\t\tprintf(\"%lf%c\", ans[i], i == n ? '\\n' : ' '), ret += (ans[i] - x[i]) * (ans[i] - x[i]);\r\n\treturn printf(\"%lf\\n\", ret), 0;\r\n}\r\n"
}