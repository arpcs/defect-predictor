{
    "id": 207125259,
    "contestId": 280,
    "creationTimeSeconds": 1685006850,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "GeZhiyuan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 188313600,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e6 + 5;\r\n\r\nclass Quadratic{\r\npublic:\r\n\tlong double l, r, a, b;\r\n\tinline Quadratic(){\r\n\t\tl = r = 0;\r\n\t\ta = b = 0;\r\n\t}\r\n\tinline Quadratic(long double l_, long double r_, long double a_, long double b_){\r\n\t\tl = l_, r = r_;\r\n\t\ta = a_, b = b_;\r\n\t}\r\n\tinline void operator += (Quadratic C){\r\n\t\ta += C.a, b += C.b;\r\n\t}\r\n\tinline void operator <<= (long double d){\r\n\t\tl += d, r += d;\r\n\t\tb -= 2 * a * d;\r\n\t}\r\n};\r\n\r\nmt19937 rng(time(0));\r\n\r\ninline long double sqr(long double x){\r\n\treturn x * x;\r\n}\r\n\r\nint tot = 0, ls[N] = {}, rs[N] = {}, fix[N] = {};\r\nlong double mov[N] = {};\r\nQuadratic quad[N] = {}, laz[N] = {};\r\n\r\ninline long double top(Quadratic q){\r\n\treturn q.b / q.a / -2;\r\n}\r\n\r\ninline int node(Quadratic f){\r\n\ttot ++;\r\n\tls[tot] = rs[tot] = 0, fix[tot] = rng();\r\n\tmov[tot] = 0, quad[tot] = f, laz[tot] = Quadratic();\r\n\treturn tot;\r\n}\r\n\r\ninline void apply(int u, long double d, Quadratic q){\r\n\tquad[u] <<= d, laz[u] <<= d;\r\n\tmov[u] += d;\r\n\tquad[u] += q, laz[u] += q;\r\n}\r\n\r\ninline void push(int u){\r\n\tif(ls[u]) apply(ls[u], mov[u], laz[u]);\r\n\tif(rs[u]) apply(rs[u], mov[u], laz[u]);\r\n\tmov[u] = 0, laz[u] = Quadratic();\r\n}\r\n\r\ninline void split(int w, long double x, int &u, int &v){\r\n\tif(w){\r\n\t\tpush(w);\r\n\t\tif(quad[w].r < x){\r\n\t\t\tu = w;\r\n\t\t\tsplit(rs[u], x, rs[u], v);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tv = w;\r\n\t\t\tsplit(ls[v], x, u, ls[v]);\r\n\t\t}\r\n\t}\r\n\telse u = 0, v = 0;\r\n}\r\n\r\ninline int merge(int u, int v){\r\n\tif(u && v){\r\n\t\tif(fix[u] < fix[v]){\r\n\t\t\tpush(u);\r\n\t\t\trs[u] = merge(rs[u], v);\r\n\t\t\treturn u;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tpush(v);\r\n\t\t\tls[v] = merge(u, ls[v]);\r\n\t\t\treturn v;\r\n\t\t}\r\n\t}\r\n\telse return u + v;\r\n}\r\n\r\ninline long double query(int u){\r\n\tpush(u);\r\n\tlong double x = top(quad[u]);\r\n\tif(x < quad[u].l && ls[u]) return query(ls[u]);\r\n\telse if(x > quad[u].r && rs[u]) return query(rs[u]);\r\n\telse return min(max(x, quad[u].l), quad[u].r);\r\n}\r\n\r\ninline int find(int u){\r\n\tpush(u);\r\n\tif(ls[u]) return find(ls[u]);\r\n\telse return u;\r\n}\r\n\r\ninline int limit(int u, long double m){\r\n\tif(u){\r\n\t\tpush(u);\r\n\t\tif(quad[u].l < m){\r\n\t\t\tif(quad[u].r < m) rs[u] = limit(rs[u], m);\r\n\t\t\telse quad[u].r = m, rs[u] = 0;\r\n\t\t\treturn u;\r\n\t\t}\r\n\t\telse return limit(ls[u], m);\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\nint n = 0, m = 0, a = 0, b = 0, rt = 0;\r\nlong double x[N] = {}, y[N] = {}, ans = 0;\r\n\r\nint main(){\r\n\tscanf(\"%d %d %d %d\", &n, &m, &a, &b);\r\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%Lf\", &x[i]);\r\n\tif(a * (n - 1) == m - 1){\r\n\t\tfor(int i = 1 ; i <= n ; i ++){\r\n\t\t\ty[i] = 1 + a * (i - 1);\r\n\t\t\tans += sqr(y[i] - x[i]);\r\n\t\t}\r\n\t\tfor(int i = 1 ; i <= n ; i ++) printf(\"%.6Lf \", y[i]);\r\n\t\tprintf(\"\\n\");\r\n\t\tprintf(\"%.6Lf\", ans);\r\n\t\treturn 0;\r\n\t}\r\n\trt = node(Quadratic(1, m, 1, -2 * x[1]));\r\n\ty[1] = x[1];\r\n\tfor(int i = 2 ; i <= n ; i ++){\r\n\t\tint rtu = 0, rtv = 0;\r\n\t\tsplit(rt, y[i - 1], rtu, rtv);\r\n\t\t\r\n\t\tint v = find(rtv);\r\n\t\tif(quad[v].l < y[i - 1]){\r\n\t\t\tint u = node(quad[v]);\r\n\t\t\tquad[u].r = quad[v].l = y[i - 1];\r\n\t\t\trtu = merge(rtu, u);\r\n\t\t}\r\n\t\t\r\n\t\tapply(rtu, a, Quadratic(0, 0, 1, -2 * x[i])); apply(rtv, b, Quadratic(0, 0, 1, -2 * x[i]));\r\n\t\tif(a < b) rt = merge(rtu, merge(node(Quadratic(y[i - 1] + a, y[i - 1] + b, 1, -2 * x[i])), rtv));\r\n\t\telse rt = merge(rtu, rtv);\r\n\t\trt = limit(rt, m);\r\n\t\ty[i] = query(rt);\r\n\t}\r\n\tans = sqr(y[n] - x[n]);\r\n\tfor(int i = n - 1 ; i >= 1 ; i --){\r\n\t\tif(y[i + 1] - y[i] < a) y[i] = y[i + 1] - a;\r\n\t\telse if(y[i + 1] - y[i] > b) y[i] = y[i + 1] - b;\r\n\t\tans += sqr(y[i] - x[i]);\r\n\t}\r\n\tfor(int i = 1 ; i <= n ; i ++) printf(\"%.6Lf \", y[i]);\r\n\tprintf(\"\\n\");\r\n\tprintf(\"%.6Lf\", ans);\r\n\treturn 0;\r\n}\r\n\r\n\r\n",
    "suggested_categories": [
        "numerical computation",
        "algorithm optimization",
        "mathematics",
        "random number generation",
        "data structures",
        "code efficiency",
        "algorithm design",
        "c++ programming",
        "computational geometry",
        "binary search trees",
        "dynamic programming",
        "numerical methods",
        "randomized algorithms",
        "quadratic equations",
        "computational complexity",
        "mathematical modeling",
        "programming techniques",
        "optimization techniques",
        "code refactoring",
        "performance tuning"
    ]
}