{
    "id": 3317389,
    "contestId": 280,
    "creationTimeSeconds": 1363279748,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "konstantanter"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 1046,
    "memoryConsumedBytes": 1331200,
    "source": "#include <stdio.h>\r\n#include <math.h>\r\n\r\n#define maxn 6600\r\n\r\ntypedef struct quad {\r\n    double a, b, c;     \r\n} quad;\r\ntypedef double arrR[maxn];\r\n\r\ndouble Q, A, B;\r\narrR x, opt, delta;\r\nint aux;\r\n\r\nquad add(quad f, quad g) { return (quad){f.a + g.a, f.b + g.b, f.c + g.c}; }\r\ndouble minimum(quad f) { return -f.b / (2 * f.a); }\r\ndouble eval(quad f, double x) { return f.a * x * x + f.b * x + f.c; }\r\ndouble sqr(double x) { return x * x;}\r\nquad init(double x) { return (quad){1, -2 * x, x * x}; } \r\ndouble bound(double h, double v) { return fmax(1 + h, fmin(Q, v)); }\r\n\r\ndouble get_opt(int k, quad f, double H)\r\n{\r\n    double y = bound(H, minimum(f));\r\n    aux = k;\r\n    if (k == 0) {\r\n        return y;\r\n    }\r\n    if (opt[k] < y - H - B) {\r\n        delta[k] = B;\r\n        return get_opt(k - 1, add(f, init(x[k] + H + B)), H + B);\r\n    } else if (opt[k] > y - H - A) {\r\n        delta[k] = A;\r\n        return get_opt(k - 1, add(f, init(x[k] + H + A)), H + A);\r\n    } \r\n    return y;\r\n}\r\n\r\nint main ()\r\n{\r\n    int n, i, j;\r\n    \r\n    scanf(\"%d%lf%lf%lf\", &n, &Q, &A, &B);\r\n    for (i = 1; i <= n; ++i) {\r\n        scanf(\"%lf\", &x[i]);\r\n        opt[i] = get_opt(i - 1, init(x[i]), 0);\r\n    }\r\n\r\n    double ans = 0;\r\n    for (i = n; i; i = aux) {\r\n        get_opt(i - 1, init(x[i]), 0);\r\n        for (j = i - 1; j > aux; --j) {\r\n            opt[j] = opt[j + 1] - delta[j];\r\n        }\r\n    }\r\n    for (i = 1; i <= n; ++i) {\r\n        ans += sqr(opt[i] - x[i]);\r\n        printf(\"%.6lf \", opt[i]);\r\n    }\r\n    printf(\"\\n%.6lf\\n\", ans);\r\n    return 0; \r\n}\r\n\r\n"
}