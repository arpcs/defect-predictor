{
    "id": 39424705,
    "contestId": 280,
    "creationTimeSeconds": 1529461901,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "none44353"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 512000,
    "source": "#include <cstdio>\r\n#include <iostream>\r\n\r\ntypedef std :: pair <double, double> pdd;\r\n\r\ninline int Get() {\r\n\tchar ch;\r\n\twhile ((ch = getchar()) < '0' || ch > '9');\r\n\tint Num = ch - '0';\r\n\twhile ((ch = getchar()) >= '0' && ch <= '9')\r\n\t\tNum = (Num << 3) + (Num << 1) + ch - '0';\r\n\treturn Num;\r\n}\r\n\r\nconst int N = 6e3 + 6;\r\n\r\nint n, t, a, b, at, m, c[N];\r\ndouble ans[N], res;\r\npdd p[N << 2];\r\n\r\nint main() {\r\n\tn = Get(), t = Get(), a = Get(), b = Get();\r\n\tfor (int i = 1; i <= n; ++i) {\r\n\t\tint x = c[i] = Get();\r\n\t\tif (i == 1) p[m++] = std :: make_pair(1, 2 * (1 - x)), p[m++] = std :: make_pair(t, 2 * (t - x));\r\n\t\telse {\r\n\t\t\tfor (int j = m - 1; j > at; --j) p[j + 2] = p[j];\r\n\t\t\tm += 2, ++at, p[at] = p[at + 1] = std :: make_pair(ans[i - 1], 0);\r\n\t\t\tfor (int j = 0; j <= at; ++j) p[j].first += a;\r\n\t\t\tfor (int j = at + 1; j < m; ++j) p[j].first += b;\r\n\t\t\tfor (int j = 0; j < m; ++j) p[j].second += 2 * (p[j].first - x); \r\n\t\t}\r\n\t\t\r\n\t\tif (p[0].second >= 0) at = -1, ans[i] = p[0].first;\r\n\t\telse {\r\n\t\t\tfor (at = 0; at < m; ++at)\r\n\t\t\t\tif (p[at].second <= 0 && p[at + 1].second > 0) break;\r\n\t\t\tans[i] = p[at].first - p[at].second * (p[at].first - p[at + 1].first) / (p[at].second - p[at + 1].second);\r\n\t\t}\r\n\t}\r\n\t\r\n\tans[n] = std :: min(ans[n], (double)t);\r\n\tfor (int i = n - 1; i; --i) ans[i] = std :: max(ans[i + 1] - b, std :: min(ans[i + 1] - a, ans[i]));\r\n\tfor (int i = 1; i <= n; ++i) printf(\"%lf \", ans[i]), res += (ans[i] - c[i]) * (ans[i] - c[i]);\r\n\tprintf(\"\\n%lf\\n\", res);\r\n}"
}