{
    "id": 3314811,
    "contestId": 280,
    "creationTimeSeconds": 1363247938,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "Jacob"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++0x",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 102400,
    "source": "#include <cstdio>\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nconst double eps = 1e-9;\r\n\r\nint main(void) {\r\n    int n, q, a, b;\r\n    scanf(\"%d%d%d%d\", &n, &q, &a, &b);\r\n    vector<int> x(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        scanf(\"%d\", &x[i]);\r\n        //x[i] -= i*a;\r\n    }\r\n    //q -= (n-1)*a;\r\n    //b -= a;\r\n    vector<double> y(n);\r\n    vector<int> from(n, -1);\r\n    y[0] = x[0];\r\n    for (int i = 1; i < n; ++i) {\r\n\r\n        double shiftSum = 0.0;\r\n        //y[i] = x[i];\r\n        shiftSum = 0.0;\r\n        double curPos = x[i];\r\n        int j;\r\n        double shift = 0.0;\r\n        double maxShift = q - curPos;\r\n        double minShift = 1.0 - curPos;\r\n        for (j = i - 1; j >= 0; j--) {\r\n            shift = max(minShift, min(maxShift, shiftSum / (i - j)));\r\n            double pos = curPos + shift;\r\n            if (pos >= y[j] + a - eps && pos <= y[j] + b + eps)\r\n                break;\r\n            if (pos >= y[j] + b) {\r\n                curPos -= b;\r\n            } else {\r\n                curPos -= a;\r\n            }\r\n            // maxShift = min(maxShift, q - curPos);\r\n            minShift = max(minShift, 1.0 - curPos);\r\n            shiftSum += x[j] - curPos;\r\n        }\r\n        shift = max(minShift, min(maxShift, shiftSum / (i - j)));\r\n        y[i] = x[i] + shift;\r\n        from[i] = j;\r\n        //for (j = j + 1; j <= i; ++j)\r\n        //    y[j] += shift;\r\n        /* if (y[i-1] - eps <= x[i] && x[i] <= y[i-1] + b + eps) {\r\n            y[i] = x[i];\r\n            continue;\r\n        }\r\n\r\n        if (x[i] < y[i-1]) {\r\n            // downdragging\r\n            double sumX = x[i];\r\n            for (int j = 1; i >= j; ++j) {\r\n                sumX += x[i - j];\r\n                double reqY = min(1.0*q, max(1.0, sumX / (j + 1)));\r\n                double minY = (i == j) ? 1.0 : y[i - j - 1];\r\n                if (reqY > minY - eps) {\r\n                    y[i] = reqY;\r\n                    for (int k = 1; k <= j; ++k) {\r\n                        y[i - k] = min(y[i-k], reqY);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            double sumX = x[i];\r\n            // updragging\r\n            for (int j = 1; i >= j; ++j) {\r\n                sumX += x[i - j] + 1.0*b*j;\r\n                double reqY = max(1.0 + 1.0*b*j, min(1.0*q, sumX / (j + 1)));\r\n                double maxY = (i == j) ? 1e20 : (y[i - j - 1] + 1.0*b*(j + 1));\r\n                double minY = (i == j) ? 1.0 : y[i - j - 1];\r\n                if (reqY < maxY + eps) {\r\n                    y[i] = reqY;\r\n                    for (int k = 1; k <= j; ++k) {\r\n                        y[i - k] = max(y[i-k], reqY - 1.0*k*b);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }*/\r\n    }\r\n    vector<double> ry(n);\r\n\r\n    for (int i = n-1; i >= 0;) {\r\n        double shift = y[i] - x[i];\r\n        ry[i] = y[i];\r\n        for (int j = i - 1; j > from[i]; --j) {\r\n            if (ry[j+1] >= y[j] + b)\r\n                ry[j] = ry[j+1] - b;\r\n            else\r\n                ry[j] = ry[j+1] - a;\r\n        }\r\n        i = from[i];\r\n    }\r\n\r\n    double res = 0.0;\r\n    for (int i = 0; i < n; ++i) {\r\n        double d = ry[i] - x[i];\r\n        res += d*d;\r\n        printf(\"%.9lf \", ry[i]);\r\n    }\r\n    printf(\"\\n%.9lf\\n\", res);\r\n}\r\n"
}