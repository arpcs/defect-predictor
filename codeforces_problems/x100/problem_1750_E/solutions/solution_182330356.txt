{
    "id": 182330356,
    "contestId": 1750,
    "creationTimeSeconds": 1669279232,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "YocyCraft"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Problem1750E {\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\r\n\t\tint caseNum = Integer.valueOf(br.readLine());\r\n\t\tfor (int testCase = 1; testCase <= caseNum; testCase++) {\r\n\t\t\tint n = Integer.valueOf(br.readLine());\r\n\t\t\tchar[] input=br.readLine().toCharArray();\r\n\t\t\tlong cost=0;\r\n//\t\t\tfor(int i=0;i<n;i++) {\r\n//\t\t\t\tint diff=0;\r\n//\t\t\t\tint minDiff=0;\r\n//\t\t\t\tfor(int j=i;j<n;j++) {\r\n//\t\t\t\t\tdiff+=(input[j]=='(')?1:-1;\r\n//\t\t\t\t\tif(diff<minDiff) minDiff=diff;\r\n//\t\t\t\t\tcost+=(diff>0)?diff:-diff;\r\n//\t\t\t\t\tcost+=Math.min(diff,0)-minDiff;\r\n//\t\t\t\t}\r\n//\t\t\t}\r\n\t\t\tint[] sum=new int[n+1];\r\n\t\t\tsum[0]=0;\r\n\t\t\tfor(int i=1;i<=n;i++) {\r\n\t\t\t\tsum[i]=sum[i-1]+((input[i-1]=='(')?1:-1);\r\n\t\t\t\tcost+=i*(n+1-i);\r\n\t\t\t}\r\n\t\t\tArrays.sort(sum);\r\n\t\t\tfor(int i=0;i<=n;i++) {\r\n\t\t\t\tcost+=(2*i-n)*sum[i];\r\n\t\t\t}\r\n\t\t\tcost/=2;\r\n\t\t\tArrayList<Integer> stack=new ArrayList<>();\r\n\t\t\tfor(int i=0;i<n;i++) {\r\n\t\t\t\tif(input[i]=='(') {\r\n\t\t\t\t\tstack.add(i);\r\n\t\t\t\t}else {\r\n\t\t\t\t\tif(!stack.isEmpty()) {\r\n\t\t\t\t\t\tint top=stack.size()-1;\r\n\t\t\t\t\t\tint l=stack.get(top);\r\n\t\t\t\t\t\tstack.remove(top);\r\n\t\t\t\t\t\tcost-=(l+1)*(n-i);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(cost);\r\n\t\t}\r\n\t}\r\n}"
}