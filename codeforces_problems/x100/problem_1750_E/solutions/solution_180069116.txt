{
    "id": 180069116,
    "contestId": 1750,
    "creationTimeSeconds": 1667903864,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "avi0000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 29,
    "timeConsumedMillis": 467,
    "memoryConsumedBytes": 16486400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef vector<long long> vl;\r\nll MOD=998244353;\r\nll expo(ll a,ll b){\r\n    ll ans=1;\r\n    while(b>0){\r\n        if(b&1){\r\n            ans*=a;\r\n            ans%=MOD;\r\n        }\r\n        a*=a;\r\n        a%=MOD;\r\n        b=(b>>1);\r\n    }\r\n    return ans;\r\n}\r\n\r\nint main(){\r\n    #ifndef ONLINE_JUDGE                 \r\n        freopen(\"input.txt\", \"r\", stdin);                                                \r\n        freopen(\"output.txt\", \"w\", stdout);  \r\n        freopen(\"error.txt\", \"w\", stderr);                        \r\n    #endif  \r\n\r\n    int tt=1;\r\n    cin>>tt;\r\n    while(tt--){    \r\n        int n;\r\n        cin>>n;\r\n        string s;\r\n        cin>>s;\r\n        vl p(n+1,0);\r\n        multiset<pair<ll,ll>> s1={{0,0}};\r\n        for(int i=0;i<n;i++){\r\n            p[i+1]=p[i]+(s[i]==')'?-1:1);\r\n            s1.insert({p[i+1],i+1});\r\n        }\r\n        ll ans=0;\r\n        set<ll> q={-1,n+1};\r\n        int i=0;\r\n        for(auto e:s1){\r\n            ll j=e.second;\r\n            auto it=q.lower_bound(j);\r\n            ans-=((*it-j)*(j-*--it)-1)*e.first;\r\n            q.insert(j);\r\n            ans+=i*e.first;\r\n            i++;\r\n        }\r\n        cout<<ans<<\"\\n\";\r\n    }  \r\n}"
}