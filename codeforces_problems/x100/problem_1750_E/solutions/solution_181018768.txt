{
    "id": 181018768,
    "contestId": 1750,
    "creationTimeSeconds": 1668456747,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "efficient"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/*\r\nif p[r] - p[l] >= 0:\r\noptimal is p[r] - p[l] + max(p[l] - p[l + 1], p[l] - p[l + 2], ..., p[l] - p[r])\r\n\r\nelse:\r\noptimal is p[l] - p[r] + max(p[l] - p[l + 1], p[l] - p[l + 2], ..., p[l] - p[r]) - (p[l] - p[r])\r\n = max(p[l] - p[l + 1], p[l] - p[l + 2], ..., p[l] - p[r])\r\n\r\nthus in total it is just max(p[l], p[r]) - min(p[l + 1], ..., p[r])\r\n*/"
}