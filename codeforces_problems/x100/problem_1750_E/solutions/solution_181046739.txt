{
    "id": 181046739,
    "contestId": 1750,
    "creationTimeSeconds": 1668494479,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "S_Bharat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 29,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 5324800,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nstruct bit\r\n{\r\n\tvector<int> a;\r\n\tvoid resize(int n)\r\n\t{\r\n\t\ta = vector<int>(n + 1);\r\n\t}\r\n\tvoid update(int pos, int val)\r\n\t{\r\n\t\tint n = a.size() - 1;\r\n\t\tfor (int i = pos; i <= n; i += i & (-i))\r\n\t\t{\r\n\t\t\ta[i] += val;\r\n\t\t}\r\n\t}\r\n\tint query(int pos)\r\n\t{\r\n\t\tint ans = 0;\r\n\t\tfor (int i = pos; i; i -= i & (-i))\r\n\t\t{\r\n\t\t\tans += a[i];\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n\tint query(int st, int dr)\r\n\t{\r\n\t\treturn query(dr) - query(st - 1);\r\n\t}\r\n};\r\nint32_t main()\r\n{\r\n\tcin.tie(nullptr)->ios_base::sync_with_stdio(false);\r\n\tint q;\r\n\tcin >> q;\r\n\twhile (q--)\r\n\t{\r\n\t\tint n;\r\n\t\tstring s;\r\n\t\tcin >> n >> s;\r\n\t\ts = '$' + s;\r\n\t\tvector<int> pref(n + 1);\r\n\t\tfor (int i = 1; i <= n; ++i)\r\n\t\t{\r\n\t\t\tpref[i] = pref[i - 1] + (s[i] == ')' ? -1 : 1);\r\n\t\t}\r\n\t\tvector<int> dp(n + 2);\r\n\t\tstack<int> paranteze;\r\n\t\tfor (int i = n; i >= 1; --i)\r\n\t\t{\r\n\t\t\tif (s[i] == '(')\r\n\t\t\t{\r\n\t\t\t\tif (!paranteze.empty())\r\n\t\t\t\t{\r\n\t\t\t\t\tdp[i] = dp[paranteze.top() + 1];\r\n\t\t\t\t\tparanteze.pop();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tdp[i] = dp[i + 1] + (n - i + 1);\r\n\t\t\t\tparanteze.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tint ans = 0;\r\n\t\tfor (int i = 1; i <= n; ++i)\r\n\t\t{\r\n\t\t\tans += dp[i];\r\n\t\t}\r\n\t\tmap<int, int> norm;\r\n\t\tvector<int> lesgo = pref;\r\n\t\tsort(lesgo.begin(), lesgo.end());\r\n\t\tint p = 1;\r\n\t\tfor (int i = 0; i <= n; ++i)\r\n\t\t{\r\n\t\t\tif (norm.find(lesgo[i]) == norm.end())\r\n\t\t\t{\r\n\t\t\t\tnorm[lesgo[i]] = p++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i <= n; ++i)\r\n\t\t{\r\n\t\t\tlesgo[i] = norm[pref[i]];\r\n\t\t}\r\n\t\tp--;\r\n\t\tbit tree;\r\n\t\ttree.resize(p);\r\n\t\tfor (int i = 0; i <= n; ++i)\r\n\t\t{\r\n\t\t\tans += tree.query(1, lesgo[i]) * pref[i];\r\n\t\t\ttree.update(lesgo[i], 1);\r\n\t\t}\r\n\t\ttree.resize(p);\r\n\t\tfor (int i = n; i >= 0; --i)\r\n\t\t{\r\n\t\t\tans += tree.query(lesgo[i], p) * -pref[i];\r\n\t\t\ttree.update(lesgo[i], 1);\r\n\t\t}\r\n\t\tcout << ans << '\\n';\r\n\t}\r\n}"
}