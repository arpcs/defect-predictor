{
    "id": 226494072,
    "contestId": 113,
    "creationTimeSeconds": 1696361886,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 113,
        "index": "E",
        "name": "Sleeping",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2700,
        "tags": [
            "combinatorics",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 113,
        "members": [
            {
                "handle": "Raad_Meryan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1315494000
    },
    "programmingLanguage": "Python 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "def digit_changes(time):\r\n    return bin(time).count('1')\r\n\r\ndef count_changes(h, m, k, h1, m1, h2, m2):\r\n    def count_to(h, m):\r\n        cnt = 0\r\n        for i in range(h):\r\n            cnt += times_changed[m][k]\r\n            cnt += digit_changes(i) * m\r\n        for i in range(m):\r\n            cnt += digit_changes(i)\r\n        return cnt\r\n    \r\n    times_changed = [[0] * (k+1) for _ in range(max(h, m)+1)]\r\n    for i in range(1, max(h, m)+1):\r\n        changes = digit_changes(i)\r\n        times_changed[i][1] = times_changed[i-1][1] + changes\r\n        for j in range(2, k+1):\r\n            times_changed[i][j] = times_changed[i-1][j]\r\n            if changes >= j:\r\n                times_changed[i][j] += 1\r\n    \r\n    cnt_to_start = count_to(h1, m1)\r\n    cnt_to_end = count_to(h2, m2+1)\r\n    return cnt_to_end - cnt_to_start\r\n\r\n# input parsing\r\nh, m, k = map(int, input().split())\r\nh1, m1 = map(int, input().split())\r\nh2, m2 = map(int, input().split())\r\n\r\n# handling time wrapping cases\r\nif h1 > h2 or (h1 == h2 and m1 > m2):\r\n    # time passes midnight\r\n    print(count_changes(h, m, k, h1, m1, h-1, m-1) + count_changes(h, m, k, 0, 0, h2, m2))\r\nelse:\r\n    print(count_changes(h, m, k, h1, m1, h2, m2))\r\n"
}