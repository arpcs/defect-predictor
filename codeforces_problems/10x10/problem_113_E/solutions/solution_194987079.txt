{
    "id": 194987079,
    "contestId": 113,
    "creationTimeSeconds": 1677351894,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 113,
        "index": "E",
        "name": "Sleeping",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2700,
        "tags": [
            "combinatorics",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 113,
        "members": [
            {
                "handle": "skywalkerr."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1315494000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/*\r\n\tAlways be patient and never give up !\r\n\tAt the same time , time is expensive \r\n   ?? \r\n*/\r\n#include <bits/stdc++.h>\r\n#include <stack>\r\n#include <vector>\r\n#include <string>\r\n#include <queue>\r\n#include <map>\r\n     \r\n#define ll long long\r\n#define dl double long\r\n#define rep(a, b, c) for(int a = b; a <= c; ++a)\r\n#define per(a, b, c) for(int a = b; a >= c; --a)\r\n#define vt vector\r\n#define pii pair<ll,ll>\r\n#define fack false\r\n#define ssort(a,n) sort(a+1,a+1+n)\r\n#define ff first\r\n#define ss second\r\n#define mp make_pair\r\n#define pb push_back\r\n#define pf push_front\r\n#define all(x) x.begin(), x.end()\r\n  \r\nconst ll INF = 9e18;\r\nconst int MOD = 1e9 + 7;\r\nconst int N = 1e6 ;\r\nconst int P = 1e3 + 550;\r\n \r\nusing namespace std ;\r\n \r\ntemplate < class A > void Rsort ( vt < A >& v ) { sort ( all ( v ) ) ; reverse ( all ( v ) ) ; }\r\ntemplate < class A > void print ( vt < A >& v ) { for ( auto x : v ) cout << x << \" \" ; }\r\ntemplate < class A > void read ( vt < A >& v ) { for ( auto& a : v ) cin >> a ; }\r\n \r\nvoid file ( string s ) {\r\n    freopen((s + \".in\").c_str(), \"r\", stdin);\r\n    freopen((s + \".out\").c_str(), \"w\", stdout);\r\n}\r\n \r\nvoid Time_Limit () {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n}\r\n\r\nstring adj1 = \"lios\" , adj2 = \"liala\" ;\r\nstring noun1 = \"etr\" , noun2 = \"etra\" ;\r\nstring verb1 = \"initis\" , verb2 = \"inites\" ;\r\n\r\nstring get_type ( string s ) {\r\n\tll l = s.size() ;\r\n\tl -- ;\r\n\tif ( s[l] == 's' && s[l-1] == 'o' && s[l-2] == 'i' && s[l-3] == 'l' ) {\r\n\t\treturn \"adj\" ;\r\n\t}else\r\n\tif ( s[l] == 'a' && s[l-1] == 'l' && s[l-2] == 'a' && s[l-3] == 'i' && s[l-4] == 'l' ) {\r\n\t\treturn \"adj\" ;\r\n\t}else\r\n\tif ( s[l] == 'r' && s[l-1] == 't' && s[l-2] == 'e' ) {\r\n\t\treturn \"noun\" ;\r\n\t}else\r\n\tif ( s[l] == 'a' && s[l-1] == 'r' && s[l-2] == 't' && s[l-3] == 'e' ) {\r\n\t\treturn \"noun\" ;\r\n\t}else\r\n\tif ( s[l] == 's' && s[l-1] == 'i' && s[l-2] == 't' && s[l-3] == 'i' && s[l-4] == 'n' && s[l-5] == 'i' ) {\r\n\t\treturn \"verb\" ;\r\n\t}else\r\n\tif ( s[l] == 's' && s[l-1] == 'e' && s[l-2] == 't' && s[l-3] == 'i' && s[l-4] == 'n' && s[l-5] == 'i' ) {\r\n\t\treturn \"verb\" ;\r\n\t}else\r\n\t\treturn \"Not\" ;\r\n}\r\n\r\nvoid test () {\r\n\tstring s ;\r\n\tvector < string > v ;\r\n\twhile ( cin >> s ) {\r\n\t\tv.pb(s) ;\r\n\t\tif ( get_type(s) != \"Not\" ) {\r\n\t\t\tif ( get_type(s) == \"noun\" ) {\r\n\t\t\t\tif ( s[s.size()-1] != 'r' && s[s.size()-1] != 'a' ) {\r\n\t\t\t\t\tcout << \"NO\" ;\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}\r\n\t\t\t}else\r\n\t\t\tif ( get_type ( s ) == \"adj\" ) {\r\n\t\t\t\tif ( s[s.size()-1] != 's' && s[s.size()-1] != 'a' ) {\r\n\t\t\t\t\tcout << \"NO\" ;\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}\r\n\t\t\t}else\r\n\t\t\tif ( get_type ( s ) == \"verb\" ) {\r\n\t\t\t\tif ( s[s.size()-2] != 'i' && s[s.size()-2] != 'e' ) {\r\n\t\t\t\t\tcout << \"NO\" ;\r\n\t\t\t\t\treturn ;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}else\r\n\t\tif ( get_type(s) == \"Not\" ) {\r\n\t\t\tcout << \"NO\" ;\r\n\t\t\treturn ;\r\n\t\t}\r\n\t\tif ( s == \"\" ) break ;\r\n\t}\r\n\tif ( v.size() == 1 ) {\r\n\t\tif ( get_type(v[0]) != \"Not\" ) {\r\n\t\t\tcout << \"YES\" ;\r\n\t\t}\r\n\t}else{\r\n\t\tll j = 0 , m = 0 ;\r\n\t\tll nn = 0 ;\r\n\t\tll aj = 0 ;\r\n\t\tll vb = 0 ;\r\n\t\trep ( i , 0 , v.size() - 1 ) {\r\n\t\t\tif ( get_type(v[i]) == \"noun\" && ( aj > 0 || aj == 0 ) ) nn ++ ;\r\n\t\t\tif ( get_type(v[i]) == \"verb\" && nn > 0 && aj >= 0 ) vb ++ ;\r\n\t\t\telse\r\n\t\t\tif ( get_type(v[i]) == \"verb\" && (nn == 0 ) ) {\r\n\t\t\t\tcout << \"NO\" ;\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\tif ( get_type(v[i]) == \"adj\" && nn == 0 ) aj ++ ;\r\n\t\t\telse\r\n\t\t\tif ( get_type(v[i]) == \"adj\" && nn > 0 ) {\r\n\t\t\t\tcout << \"NO\" ;\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif ( get_type(v[i]) == \"noun\" ) {\r\n\t\t\t\tif ( v[i][v[i].size()-1] == 'a' ) {\r\n\t\t\t\t\tj ++ ;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tm ++ ;\r\n\t\t\t\t}\r\n\t\t\t}else\r\n\t\t\tif ( get_type(v[i]) == \"adj\" ) {\r\n\t\t\t\tif ( v[i][v[i].size()-1] == 'a' ) {\r\n\t\t\t\t\tj ++ ;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tm ++ ;\r\n\t\t\t\t}\r\n\t\t\t}else\r\n\t\t\tif ( get_type(v[i]) == \"verb\" ) {\r\n\t\t\t\tif ( v[i][v[i].size()-2] == 'i' ) {\r\n\t\t\t\t\tm ++ ;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tj ++ ;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif ( j == 0 && m > 0 && nn == 1 ) {\r\n\t\t\tcout << \"YES\" ;\r\n\t\t}else\r\n\t\tif ( j > 0 && m == 0 && nn == 1 ) {\r\n\t\t\tcout << \"YES\" ;\r\n\t\t}else\r\n\t\t\tcout << \"NO\" ;\r\n\t}\r\n}\r\n\r\nint main () {\r\n\tTime_Limit () ;\r\n\ttest() ;\r\n\treturn 0 ;\r\n}"
}