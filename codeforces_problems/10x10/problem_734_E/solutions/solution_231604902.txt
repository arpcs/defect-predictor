{
    "id": 231604902,
    "contestId": 734,
    "creationTimeSeconds": 1699282085,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 734,
        "index": "E",
        "name": "Anton and Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "dfs and similar",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 734,
        "members": [
            {
                "handle": "LordWorm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1479227700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 38502400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nconst int MOD = 1e9+7;\r\nconst int MAXN = 2e5 + 10;\r\nint col[MAXN], group[MAXN];\r\nll dp[MAXN];\r\nint cnt;\r\nvector<vector<int>> E, newE;\r\nll D;\r\nvoid dfs(int u, int c) {\r\n  group[u] = cnt;\r\n  for (int v : E[u]) {\r\n    if (group[v] == -1 && col[v] == c) {\r\n      dfs(v, c);\r\n    }\r\n  } \r\n}\r\nvoid cal(int u, int f) {\r\n  for (int v : newE[u]) {\r\n    if (f == v) continue;\r\n    cal(v, u);\r\n    D = max(D, dp[u] + dp[v] + 1);\r\n    dp[u] = max(dp[u], dp[v] + 1);\r\n  } \r\n}\r\nvoid solve() {\r\n  int n;\r\n  cin >> n;\r\n  E.resize(n + 1);\r\n  for (int i = 1; i <= n; ++i) {\r\n    cin >> col[i];\r\n  }\r\n  for (int i = 1; i <= n - 1; ++i) {\r\n    int u, v;\r\n    cin >> u >> v;\r\n    E[u].push_back(v);\r\n    E[v].push_back(u);\r\n  }\r\n  memset(group, -1, sizeof(group)); \r\n  \r\n  for (int i = 1; i <= n; ++i) {\r\n    if (group[i] == -1) {\r\n      ++cnt;\r\n      dfs(i, col[i]);\r\n    }\r\n  }\r\n  newE.resize(cnt + 1);\r\n  for (int i = 1; i <= n; ++i) {\r\n    for (int &v : E[i]) {\r\n      if (col[v] != col[i]) {\r\n        newE[group[i]].push_back(group[v]);\r\n      }\r\n    }\r\n  }\r\n \r\n  cal(1, -1);\r\n  cout << ((D >> 1) + (D & 1)) << '\\n';\r\n  return;\r\n}\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n#ifdef LOCAL\r\n  freopen(\"/Users/xiangyanxin/code/Algorithom/in.txt\", \"r\", stdin);\r\n  freopen(\"/Users/xiangyanxin/code/Algorithom/out.txt\", \"w\", stdout);\r\n#endif\r\n  int T = 1;\r\n  while (T--) {\r\n    solve();\r\n  }\r\n  return 0;\r\n}"
}