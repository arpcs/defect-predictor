{
    "id": 232593622,
    "contestId": 734,
    "creationTimeSeconds": 1699864431,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 734,
        "index": "E",
        "name": "Anton and Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "dfs and similar",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 734,
        "members": [
            {
                "handle": "Vector.Li"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1479227700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 12083200,
    "source": "// LUOGU_RID: 134896248\n#include <bits/stdc++.h>\r\n#define long long long\r\n\r\nusing namespace std;\r\n\r\nconst int V = (int) 2E5;\r\n\r\nstruct DisjointSets {\r\n\tvector<int> p, s;\r\n\tDisjointSets() {\r\n\t\r\n\t}\r\n\tDisjointSets(int n) : p(n), s(n, 1) {\r\n\t\tiota(p.begin(), p.end(), 0);\r\n\t}\r\n\tint find(int u) {\r\n\t\tif (p[u] == u) {\r\n\t\t\treturn u;\r\n\t\t}\r\n\t\treturn p[u] = find(p[u]);\r\n\t}\r\n\tbool merge(int u, int v) {\r\n\t\tu = find(u), v = find(v);\r\n\t\tif (u == v) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (s[u] < s[v]) {\r\n\t\t\tswap(u, v);\r\n\t\t}\r\n\t\tp[v] = u;\r\n\t\ts[u] = s[u] + s[v];\r\n\t\treturn true;\r\n\t} \r\n\tint size(int u) {\r\n\t\treturn s[find(u)];\r\n\t}\r\n\tbool same(int u, int v) {\r\n\t\treturn find(u) == find(v);\r\n\t}\r\n};\r\n\r\nint n;\r\nint c[V];\r\nint p[V], d[V];\r\nvector<int> e1[V], e2[V];\r\nDisjointSets s; \r\n\r\nvoid DFS(int u) {\r\n\tfor (auto v : e2[u]) {\r\n\t\tif (v != p[u]) {\r\n\t\t\tp[v] = u;\r\n\t\t\td[v] = d[u] + 1;\r\n\t\t\tDFS(v); \r\n\t\t}\r\n\t}\r\n} \r\n\r\nvoid solve() {\r\n\tcin >> n;\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tcin >> c[i];\r\n\t}\r\n\tfor (int i = 0; i < n - 1; i++) {\r\n\t\tint u, v;\r\n\t\tcin >> u >> v;\r\n\t\tu = u - 1, v = v - 1;\r\n\t\te1[u].push_back(v);\r\n\t\te1[v].push_back(u);\r\n\t}\r\n\t\r\n\ts = DisjointSets(n);\r\n\tfor (int u = 0; u < n; u++) {\r\n\t\tfor (auto v : e1[u]) {\r\n\t\t\tif (c[u] == c[v]) {\r\n\t\t\t\ts.merge(u, v);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor (int u = 0; u < n; u++) {\r\n\t\tfor (auto v : e1[u]) {\r\n\t\t\tif (c[u] != c[v]) {\r\n\t\t\t\te2[s.find(u)].push_back(s.find(v));\r\n\t\t\t\te2[s.find(v)].push_back(s.find(u));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tp[s.find(0)] = -1;\r\n\td[s.find(0)] = 0;\r\n\tDFS(0);\r\n\t\r\n\tint x = max_element(d, d + n) - d;\r\n\tp[x] = -1;\r\n\td[x] = 0;\r\n\tDFS(x);\r\n\t\r\n\tcout << (*max_element(d, d + n) + 1) / 2 << \"\\n\";\r\n}\r\n\r\nint main() {\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(nullptr);\r\n\tsolve();\r\n\treturn 0;\r\n} "
}