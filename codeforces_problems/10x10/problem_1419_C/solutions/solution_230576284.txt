{
    "id": 230576284,
    "contestId": 1419,
    "creationTimeSeconds": 1698685605,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1419,
        "index": "C",
        "name": "Killjoy",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1500,
        "tags": [
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1419,
        "members": [
            {
                "handle": "Mukul457"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1600526100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 1024000,
    "source": "//May the code be with you!\r\n\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\ntemplate <typename PB>\r\n#define ll long long int\r\n#define be begin()\r\n#define en end()\r\n#define pb push_back\r\n#define pyes cout << \"Yes\\n\"\r\n#define pno cout << \"No\\n\"\r\n#define ce cout << '\\n'\r\n#define endl '\\n'\r\n#define pie 3.141592653589793238462643383279502884197169399\r\n#define print(x) cout<<x<<endl\r\n#define printb(x) cout<<x<<\" \"\r\n#define rev(v) reverse(v.begin(), v.end())\r\n#define srt(v) sort(v.begin(), v.end())\r\n#define all(v) v.begin(), v.end()\r\n#define mnv(v) *min_element(v.begin(), v.end())\r\n#define mxv(v) *max_element(v.begin(), v.end())\r\n#define fi first\r\n#define se second\r\n#define vll vector<ll>\r\n#define vp vector<pair<ll,ll>>\r\n#define trav(v) for (auto it = v.begin(); it != v.end(); it++)\r\n#define rep(i, n) for (ll i = 0; i < n; i++)\r\nconst ll mod = 1e9 + 7;\r\nll gcd(ll a, ll b){\r\n  if (b == 0) return a;\r\n  return gcd(b, a%b);\r\n}\r\nbool is_prime[1000000];\r\nvoid sieve_of_eratosthenes(int n)\r\n{\r\n    memset(is_prime, true, sizeof(is_prime));\r\n    is_prime[0] = is_prime[1] = false;\r\n    for (int p = 2; p * p <= n; p++) {\r\n        if (is_prime[p]) {\r\n            for (int i = p * p; i <= n; i += p) {\r\n                is_prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nll dfs(ll node, ll par, vector<vector<ll>>& adj)\r\n{\r\n    ll height = 1;\r\n    for (auto nbr : adj[node])\r\n    {\r\n        if (nbr != par)\r\n        {\r\n            height = max(height, dfs(nbr, node, adj) + 1);\r\n        }\r\n    }\r\n    return height;\r\n}\r\n\r\nmap<ll,vector<ll>> edge;\r\nmap<ll,ll>visited,parent;\r\nvoid bfs(ll num){\r\n     visited[num] = 1;\r\n\r\n     for(ll x:edge[num])\r\n     {\r\n        if(visited[x]==0)\r\n        {\r\n            parent[x] = num;\r\n            bfs(x);\r\n        }\r\n     }\r\n}\r\n\r\nint binary(const std::vector<ll>& arr, ll target) {\r\n    int left = 0;\r\n    int right = arr.size() - 1;\r\n\r\n    while (left <= right) {\r\n        int mid = left + (right - left) / 2; // Prevents potential overflow\r\n\r\n         if (arr[mid] < target) {\r\n            left = mid + 1;\r\n        }\r\n        else {\r\n            right = mid - 1;\r\n        }\r\n    }\r\n    return left;\r\n}\r\n\r\nvoid solve(){\r\n    ll n,x,k=0,ans=0;\r\n    cin>>n>>x;\r\n    vll v;\r\n    for(ll i=0;i<n;i++){\r\n        ll t;\r\n        cin>>t;\r\n        v.pb(t);\r\n        if(t==x){\r\n            k++;\r\n        }\r\n        ans+=t;\r\n    }\r\n    if(k==n){\r\n        print(0);\r\n    }\r\n    else if(k>0 || (ans%n==0 && ans/n==x)){\r\n        print(1);\r\n    }\r\n    else{\r\n        print(2);\r\n    }\r\n}\r\n\r\nint main(){\r\n    ll t=1;\r\n    ios::sync_with_stdio(false);\r\n    cin>>t;\r\n    while(t--){\r\n        solve();\r\n    }\r\n}\r\n"
}