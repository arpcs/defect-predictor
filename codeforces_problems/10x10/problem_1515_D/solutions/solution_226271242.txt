{
    "id": 226271242,
    "contestId": 1515,
    "creationTimeSeconds": 1696239075,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1515,
        "index": "D",
        "name": "Phoenix and Socks",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1500,
        "tags": [
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1515,
        "members": [
            {
                "handle": "kartikchauhan189"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619966100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 967,
    "memoryConsumedBytes": 1638400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\n#define frl(i,j,n) for(int i =j; i<n; ++i)\r\n#define all(x) (x).begin(), (x).end() // 1 + all(x) - 2 gives element from index 1  and from 2 elements before end()\r\n#define vi(v,n) vector<int> v(n);\r\n#define ll long long\r\n#define ld long double\r\n#define printv(v) for(auto x : v) cout << x << ' ';\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\ntemplate <typename T>\r\nusing o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate <typename T>\r\nusing o_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n// member functions :\r\n// 1. order_of_key(k) : number of elements strictly lesser than k\r\n// 2. find_by_order(k) : k-th element in the set (0-indexed)\r\n//3. st.erase(st.find_by_order(st.order_of_key(k))) :to erase a single occurence of k from the set\r\n\r\ntemplate <class key, class value, class cmp = std::less<key>>\r\nusing o_map = __gnu_pbds::tree<key, value, cmp, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;\r\n\r\n \r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n\r\n\r\n\r\nint N = 1e7 + 100;\r\nvector<int> sieve;\r\n\r\nvoid call_sieve(){\r\n    sieve = vector<int>(N,0);\r\n    sieve[0] = sieve[1] = 1;\r\n\r\n    for(int i = 2; i<N; i++){\r\n        if(sieve[i] == 0){\r\n            sieve[i] = i;\r\n            for(int j = i+i; j<N; j+=i){\r\n                if(sieve[j] == 0) sieve[j] = i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvector<int> getDivisors(int n){\r\n    vector<pair<int,int>> fact;\r\n\r\n    while(n>1){\r\n\r\n        int curr = sieve[n];\r\n\r\n        int cnt = 0;\r\n\r\n        while(n%curr == 0){\r\n            cnt++;\r\n            n/=curr;\r\n        }\r\n        fact.push_back({curr,cnt});\r\n    }\r\n    vector<int> divisors;\r\n\r\n    auto fx = [&](const auto &self, int indx,int prev) -> void{\r\n        if(indx == fact.size()){\r\n            divisors.push_back(prev);\r\n            return;\r\n        }\r\n\r\n        int curr = 1;\r\n        for(int i = 0; i<=fact[indx].second;i++){\r\n            self(self, indx+1, prev*curr);\r\n            curr*=fact[indx].first;\r\n        }\r\n    };\r\n\r\n    fx(fx,0,1);\r\n    return divisors;\r\n}\r\n\r\nvoid solve(){\r\n    int n, l, r;\r\n    cin >> n >> l >> r;\r\n    int M = 2e5  +5;\r\n    vector<int> a(M), b(M);\r\n\r\n    frl(i,0,l){\r\n        int x;\r\n        cin >> x;\r\n        a[x]++;\r\n    }\r\n\r\n    frl(i,0,r){\r\n        int x;\r\n        cin >> x;\r\n        b[x]++;\r\n    }\r\n\r\n\r\n    frl(i,0,M){\r\n        int mn = min(a[i],b[i]);\r\n        a[i] -= mn;\r\n        b[i] -= mn;\r\n        l-=mn, r -=mn;\r\n        // match all matchable pairs\r\n    }\r\n\r\n    if(l<r){\r\n        swap(a,b);\r\n        swap(l,r);\r\n    }\r\n\r\n    int ans = 0;\r\n    \r\n    frl(i,0,n+1){\r\n        int extra = l -  r;\r\n        if(a[i]/2*2 <= extra) {ans += a[i]/2; l-=a[i]/2*2;}\r\n        else{\r\n            ans += extra/2;\r\n            l -= extra;\r\n        }\r\n    }\r\n\r\n    int diff = l-r;\r\n    ans += diff/2;\r\n    l -= diff/2;\r\n    r += diff/2;\r\n    ans += l;\r\n    cout << ans << \"\\n\";\r\n}\r\n\r\nint32_t main(){\r\nios::sync_with_stdio(0);\r\ncin.tie(0);\r\ncout.tie(0);\r\n//*look out for out of bounds\r\n\r\n    int t = 1;\r\n    cin >> t;\r\n    // call_sieve();\r\n    while(t--){\r\n        solve(); \r\n\r\n    }\r\n}"
}