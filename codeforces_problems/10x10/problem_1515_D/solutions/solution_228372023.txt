{
    "id": 228372023,
    "contestId": 1515,
    "creationTimeSeconds": 1697435249,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1515,
        "index": "D",
        "name": "Phoenix and Socks",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1500,
        "tags": [
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1515,
        "members": [
            {
                "handle": "Nishu_Coder"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1619966100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n#define int long long\r\n//fflush(stdout);\r\n\r\nsigned main() \r\n{\r\n    int t;\r\n    cin >> t;\r\n  \r\n  while(t--)\r\n  {\r\n    int n,l,r;\r\n    cin >> n >> l >> r;\r\n    \r\n    vector<int>arr(n);\r\n    \r\n    for(int i = 0;i<n;i++)\r\n    {\r\n        cin >> arr[i];\r\n    }\r\n    \r\n    vector<int>v1;\r\n    vector<int>v2;\r\n    \r\n    multiset<int> s , t , temp;\r\n    for(int i = 0;i<l;i++)\r\n    {\r\n        s.insert(arr[i]);\r\n        v1.push_back(arr[i]);\r\n    }\r\n    \r\n    for(int i = l;i<n;i++)\r\n    {\r\n        t.insert(arr[i]);\r\n        v2.push_back(arr[i]);\r\n    }\r\n    /*let us see what are we doing here.\r\n    */\r\n    temp = s;\r\n    for(auto it : temp) {\r\n        auto x = s.find(it) , y = t.find(it);\r\n        if(x != s.end() && y != t.end()) {\r\n            s.erase(s.find(x));\r\n            t.erase(t.find(y));\r\n        }\r\n    }//we have removed the similar elements.\r\n    \r\n    \r\n    //next setp.what are we doing here.\r\n    \r\n    map<int , int> m1 , m2;\r\n    //after flusing we are taking frequencies.\r\n    for(auto it : s) m1[it]++;\r\n    for(auto it : t) m2[it]++;\r\n\r\n    int cnt2 = 0 , cnt1 = 0;\r\n    for(auto it : m1) \r\n    {\r\n        cnt1 += it.second / 2;  // pairing up the numbers of same colour.\r\n    }\r\n    for(auto it : m2) {\r\n        cnt2 += it.second / 2;//pairing up numbers of same colors as well.\r\n    }\r\n    \r\n    /*\r\n    if the above 2 steps is done accurately.\r\n    then i will have 2 maps with all one frquencies or zero.\r\n    */\r\n    \r\n    \r\n    //now it will get easier for us to visualize.\r\n    \r\n    int ans = 0;\r\n    int x = s.size() , y = t.size();\r\n//     cout<<cnt1<<\" \"<<cnt2<<endl;\r\n    if(s.size() >= t.size()) \r\n    {\r\n        int m = x - y;             // all elements of the minimum map must change colour\r\n        ans = y + min(m / 2 , cnt1);         // m / 2 is the required number of pairs i should to waste only 1$\r\n        m = max(0LL , m / 2 - cnt1);               \r\n        ans += m * 2;                              // if still m remains it must change colour and also \r\n    }\r\n    else {\r\n        int m = y - x;\r\n        ans = x + min(m / 2 , cnt2);\r\n        m = max(0LL , m / 2 - cnt2);\r\n        ans += m * 2;\r\n    }\r\n    cout<<ans<<endl;\r\n    \r\n\r\n     \r\n  }\r\n  \r\n  \r\n    \r\n  \r\n    \r\n    return 0;\r\n}\r\n"
}