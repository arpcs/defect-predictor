{
    "id": 114338991,
    "contestId": 571,
    "creationTimeSeconds": 1619509219,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 571,
        "index": "D",
        "name": "Campus",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 3100,
        "tags": [
            "binary search",
            "data structures",
            "dsu",
            "trees"
        ]
    },
    "author": {
        "contestId": 571,
        "members": [
            {
                "handle": "wyl123456"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1440261000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 81,
    "timeConsumedMillis": 1247,
    "memoryConsumedBytes": 91443200,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\n#define pii pair<int, int>\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\n\r\nconst int N=1e6+100;\r\nint n, m, x[N], y[N], mx[N], sz[N], siz[N], fa[N], dfn[N], id[N], Time, tot, cnode; char op[N];\r\nll ans[N], arr[N]; vector< pii > qry[N]; vector< int > nxt[N];\r\n#define lowbit(x) (x & -x)\r\nvoid mdf(int x, int w) {while(x <= tot) arr[x] += w, x += lowbit(x); }\r\nll sum(int x) { ll res=0; while(x) res += arr[x], x -= lowbit(x); return res; }\r\n\r\nint getfa(int x) { return x == fa[x] ? x : fa[x]=getfa(fa[x]); }\r\nint find(int x) { if(x == fa[x]) return x; int t=find(fa[x]); mx[x]=max(mx[fa[x]], mx[x]); return fa[x]=t; }\r\nvoid merge(int x, int y) { x=find(x), y=find(y), fa[x]=fa[y]=++cnode, fa[cnode]=cnode; }\r\n\r\nvoid dfs(int u, int lst) { dfn[u]=++Time, siz[u]=1; for(auto v:nxt[u]) dfs(v, u), siz[u] += siz[v]; }\r\n\r\nint main() {\r\n\tcin >> n >> m;\r\n\tfor(int i=1;i <= m;++i) {\r\n\t\top[i]='!'; while(!isupper(op[i])) op[i]=getchar(); \r\n\t\tif(op[i] == 'U' || op[i] == 'M') cin >> x[i] >> y[i];\r\n\t\telse cin >> x[i];\t\t\r\n\t}\r\n\ttot=n; for(int i=1;i <= n;++i) fa[i]=i, sz[i]=1;\r\n\r\n\tfor(int i=1;i <= m;++i) if(op[i] == 'U') {\r\n\t\tnxt[++tot].push_back(getfa(x[i])), nxt[tot].push_back(getfa(y[i]));\r\n\t\tsz[tot]=sz[getfa(x[i])]+sz[getfa(y[i])], fa[tot]=fa[getfa(x[i])]=fa[getfa(y[i])]=tot;\r\n\r\n\t} else if(op[i] == 'A') id[i]=getfa(x[i]);\t\r\n\t++tot, fa[tot]=tot; for(int i=1;i < tot;++i) if(getfa(i) == i) nxt[tot].push_back(i);\r\n\tdfs(tot, 0); cnode=n; for(int i=1;i <= tot;++i) fa[i]=i, mx[i]=0;\r\n\tfor(int i=1;i <= m;++i) {\r\n\t\tif(op[i] == 'M') merge(x[i], y[i]);\r\n\t\tif(op[i] == 'Z') mx[find(x[i])]=i;\r\n\t\tif(op[i] == 'Q') {\r\n\t\t\tfind(x[i]); qry[mx[x[i]]].push_back(pii(-i, dfn[x[i]]));\r\n\t\t\tqry[i].push_back(pii(i, dfn[x[i]]));\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i <= m;++i) {\r\n\t\tif(op[i] == 'A') mdf(dfn[id[i]], sz[id[i]]), mdf(dfn[id[i]]+siz[id[i]], -sz[id[i]]);\r\n\t\tfor(auto t:qry[i]) ans[abs(t.fi)] += (t.fi > 0 ? 1 : -1) * sum(t.se);\r\n\t}\r\n\tfor(int i=1;i <= m;++i) if(op[i] == 'Q') printf(\"%lld\\n\", ans[i]);\r\n\treturn 0;\r\n}"
}