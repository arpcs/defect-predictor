{
    "id": 168867384,
    "contestId": 156,
    "creationTimeSeconds": 1660840001,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 156,
        "index": "D",
        "name": "Clues",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "combinatorics",
            "graphs"
        ]
    },
    "author": {
        "contestId": 156,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1330536600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "# include  <bits/stdc++.h>\n\nconst  int MAXN =  100000 ;\n\nint N , MOD , M , K ;\n\nint Fa [ MAXN +  5 ] , Size [ MAXN +  5 ] ;\n\nint  Find ( int x )  { \n    return  ( Fa [ x ]  == x )  ? x :  ( Fa [ x ]  =  Find ( Fa [ x ] ) ) ; \n}\n\nint  Pow ( int x ,  int y )  { \n    int ret =  1 ; \n    while  ( y )  { \n        if  ( y &  1 ) \n            ret =  ( long  long ) ret * x % MOD ; \n        x =  ( long  long ) x * x % MOD ; \n        y >>=  1 ; \n    }\n    return ret ; \n}\n\nint  main ( )  { \n    scanf ( \"%d%d%d\" ,  & N ,  & M ,  & MOD ) ; \n    for  ( int i =  1 ; i <= N ; i ++ ) \n        Fa [ i ]  = i , Size [ i ]  =  1 ; \n    for  ( int i =  1 ; i <= M; [i ++ )  { \n        int u , v ;  scanf ( \"%d%d\" ,  & u ,  & v ) ; \n        int x =  Find ( u ) , y =  Find ( v ) ; \n        if  ( x != y ) \n            Fa [ x ]  = y , Size [ y ]  + = Sizex ] ; \n    } \n    int Ans =  1 ; \n    for  ( int i =  1 ; i <= N ; i ++ )  { \n        Find ( Fa [ i ] ) ; \n        if  ( Fa [ i ]  == i ) \n            K ++ , Ans =  ( long  long ) Ans * Size [ i ]  %MOD ; \n    }\n    if  ( K ==  1 ) \n        return  printf ( \"%d\" ,  1  % MOD ) ,  0 ; \n    Ans =  ( long  long ) Ans *  Pow ( N , K -  2 )  % MOD ; \n    printf ( \"%d\" , Ans ) ; \n    return  0 ; \n}\n\t \t \t\t  \t\t\t \t\t \t \t \t \t\t  \t\t  \t\t"
}