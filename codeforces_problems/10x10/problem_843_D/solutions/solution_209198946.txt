{
    "id": 209198946,
    "contestId": 843,
    "creationTimeSeconds": 1686403446,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 843,
        "index": "D",
        "name": "Dynamic Shortest Path",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3400,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 843,
        "members": [
            {
                "handle": "liqingyang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1503592500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 30822400,
    "source": "// LUOGU_RID: 112478209\n#include<iostream>\r\n#include<vector>\r\n#include<queue>\r\n#include<cstring>\r\nusing namespace std;\r\nconst long long oo=1e18;\r\nint n,m,q,sum=0;\r\nvector<pair<int,int> > e[100010];\r\npair<int,int> id[100010];\r\nlong long f[100010];\r\ninline void dijkstra()\r\n{\r\n\tpriority_queue<pair<int,int> > q;\r\n\tstatic bool mark[100010];\r\n\tmemset(f,0x3f,sizeof(f));\r\n\tq.push({f[1]=0,1});\r\n\twhile(!q.empty())\r\n\t{\r\n\t\tint now=q.top().second;\r\n\t\tq.pop();\r\n\t\tif(mark[now])\r\n\t\t{\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tmark[now]=1;\r\n\t\tfor(int i=0;i<e[now].size();i++)\r\n\t\t{\r\n\t\t\tint t=e[now][i].first;\r\n\t\t\tint v=e[now][i].second;\r\n\t\t\tif(f[t]>f[now]+v)\r\n\t\t\t{\r\n\t\t\t\tf[t]=f[now]+v;\r\n\t\t\t\tq.push({-f[t],t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\ninline void dijkstra(int k)\r\n{\r\n\tstatic vector<int> F[1000010];\r\n\tstatic long long g[100010];\r\n\tmemset(g,0x3f,sizeof(g));\r\n\tstatic bool mark[100010];\r\n\tmemset(mark,0,sizeof(mark));\r\n\tF[0].emplace_back(1),g[1]=0;\r\n\tint len=0;\r\n\twhile(1)\r\n\t{\r\n\t\tint now=0;\r\n\t\twhile(!now&&len<=k)\r\n\t\t{\r\n\t\t\twhile(!F[len].empty())\r\n\t\t\t{\r\n\t\t\t\tif(!mark[F[len].back()])\r\n\t\t\t\t{\r\n\t\t\t\t\tnow=F[len].back();\r\n\t\t\t\t\tF[len].pop_back();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tF[len].pop_back();\r\n\t\t\t}\r\n\t\t\tlen+=!now;\r\n\t\t}\r\n\t\tif(!now)\r\n\t\t{\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\tmark[now]=1;\r\n\t\tfor(int i=0;i<e[now].size();i++)\r\n\t\t{\r\n\t\t\tint t=e[now][i].first;\r\n\t\t\tint v=e[now][i].second;\r\n\t\t\tif(g[t]>g[now]+v)\r\n\t\t\t{\r\n\t\t\t\tg[t]=g[now]+v;\r\n\t\t\t\tF[min((long long)k+1,g[t]-f[t])]\r\n\t\t\t\t.emplace_back(t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tmemcpy(f,g,sizeof(f)),F[k+1].clear(); \r\n}\r\nint main()\r\n{\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(0);\r\n\tcin>>n>>m>>q;\r\n\tfor(int i=1,x,y,z;i<=m;i++)\r\n\t{\r\n\t\tcin>>x>>y>>z;\r\n\t\te[x].emplace_back(make_pair(y,z));\r\n\t\tid[i]={x,e[x].size()-1};\r\n\t}\r\n\tdijkstra();\r\n\twhile(q--)\r\n\t{\r\n\t\tint op,k;\r\n\t\tcin>>op>>k;\r\n\t\tif(op==1)\r\n\t\t{\r\n\t\t\tif(sum)\r\n\t\t\t{\r\n\t\t\t\tdijkstra(sum);\r\n\t\t\t\tsum=0;\r\n\t\t\t}\r\n\t\t\tcout<<(f[k]<oo?f[k]:-1)<<'\\n';\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tfor(int i=1,x;i<=k;i++)\r\n\t\t\t{\r\n\t\t\t\tcin>>x;\r\n\t\t\t\te[id[x].first][id[x].second].second++;\r\n\t\t\t}\r\n\t\t\tsum+=k;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}"
}