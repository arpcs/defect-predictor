{
    "id": 217089363,
    "contestId": 843,
    "creationTimeSeconds": 1691137529,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 843,
        "index": "D",
        "name": "Dynamic Shortest Path",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3400,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 843,
        "members": [
            {
                "handle": "Hanx16"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1503592500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 62976000,
    "source": "// LUOGU_RID: 119004067\n#include<bits/stdc++.h>\nusing namespace std;\nconstexpr int _N = 1e5 + 5;\nint n, m, q;\nstruct Edge { int nxt, to, w; } edge[_N];\nint tot, head[_N];\nvoid AddEdge(int x, int y, int w) {\n\tedge[++tot] = { head[x], y, w }; head[x] = tot;\n}\nint dis[_N], f[_N];\nbool vis[_N];\nvoid Dij() {\n\tmemset(dis, 0x3f, sizeof dis);\n\tmemset(vis, 0, sizeof vis);\n\tdis[1] = 0;\n\tpriority_queue<pair<int, int>> q;\n\tq.emplace(0, 1);\n\twhile (!q.empty()) {\n\t\tint x = q.top().second; q.pop();\n\t\tif (vis[x]) continue;\n\t\tvis[x] = 1;\n\t\tfor (int i = head[x]; i; i = edge[i].nxt) {\n\t\t\tint v = edge[i].to, w = edge[i].w;\n\t\t\tif (dis[v] > dis[x] + w) {\n\t\t\t\tdis[v] = dis[x] + w;\n\t\t\t\tq.emplace(-dis[v], v);\n\t\t\t}\n\t\t}\n\t}\n}\nqueue<int> qu[_N];\nvoid Maintain(int maxn) {\n\tmemset(f, 0x3f, sizeof f);\n\tf[1] = 0; qu[0].emplace(1);\n\tint curmax = 0;\n\tfor (int i = 0; i <= curmax; ++i) while (!qu[i].empty()) {\n\t\tint x = qu[i].front(); qu[i].pop();\n\t\tif (f[x] < i) continue;\n\t\tfor (int i = head[x]; i; i = edge[i].nxt) {\n\t\t\tint v = edge[i].to, w = dis[x] - dis[v] + edge[i].w;\n\t\t\tif (f[v] > f[x] + w) {\n\t\t\t\tf[v] = f[x] + w;\n\t\t\t\tif (f[v] > maxn) continue;\n\t\t\t\tqu[f[v]].emplace(v);\n\t\t\t\tcurmax = max(curmax, f[v]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; ++i)\n\t\tdis[i] = min(dis[0], dis[i] + f[i]);\n}\nsigned main() {\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n\tcin >> n >> m >> q;\n\tfor (int i = 1, x, y, v; i <= m; ++i) {\n\t\tcin >> x >> y >> v;\n\t\tAddEdge(x, y, v);\n\t}\n\tDij();\n\tfor (int i = 1, opt, x; i <= q; ++i) {\n\t\tcin >> opt >> x;\n\t\tif (opt == 1) cout << (dis[x] >= dis[0] ? -1 : dis[x]) << '\\n';\n\t\telse {\n\t\t\tfor (int j = 1, e; j <= x; ++j)\n\t\t\t\tcin >> e, ++edge[e].w;\n\t\t\tMaintain(min(n - 1, x));\n\t\t}\n\t}\n}"
}