{
    "id": 190719134,
    "contestId": 843,
    "creationTimeSeconds": 1674790802,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 843,
        "index": "D",
        "name": "Dynamic Shortest Path",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3400,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 843,
        "members": [
            {
                "handle": "Jekyll-Y"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1503592500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 195,
    "timeConsumedMillis": 7097,
    "memoryConsumedBytes": 78028800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define ll long long\r\n#define fir first\r\n#define sec second\r\n#define mpr make_pair\r\n\r\ntypedef pair <ll, int> Pair;\r\n\r\nconst int N = 1e5 + 10;\r\nconst ll INF = 0x3f3f3f3f3f3f3f3f;\r\n\r\nint n, m, q;\r\n\r\nint cnt, head[N];\r\n\r\nstruct edge\r\n{\r\n    int to, nxt, cost;\r\n    edge(int v = 0, int x = 0, int c = 0) :\r\n        to(v), nxt(x), cost(c) {}\r\n};\r\n\r\nedge e[N << 1];\r\n\r\nvoid add(int u, int v, int c)\r\n{\r\n    e[++cnt] = edge(v, head[u], c); head[u] = cnt;\r\n}\r\n\r\nbool vis[N];\r\n\r\nll dis[N];\r\n\r\nvoid dij(int s)\r\n{\r\n    priority_queue <Pair, vector <Pair>, greater <Pair> > q;\r\n    memset(dis, 0x3f, sizeof(dis));\r\n    memset(vis, false, sizeof(vis));\r\n    dis[s] = 0; q.push(mpr(0, s));\r\n    while(!q.empty())\r\n    {\r\n        int x = q.top().sec; q.pop();\r\n        if(vis[x])continue;\r\n        vis[x] = true;\r\n        for(int i = head[x]; i; i = e[i].nxt)\r\n        {\r\n            int v = e[i].to, c = e[i].cost;\r\n            if(dis[v] > dis[x] + c)\r\n            {\r\n                dis[v] = dis[x] + c;\r\n                q.push(mpr(dis[v], v));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nqueue <int> que[N];\r\n\r\nll Max, f[N];\r\n\r\nvoid bfs(int t)\r\n{\r\n\tMax = 0;\r\n\tfor(int j = 0; j <= Max; j++)\r\n    {\r\n\t\twhile(!que[j].empty())\r\n\t\t{\r\n\t\t\tint x = que[j].front(); que[j].pop();\r\n\t\t\tif(f[x] < j) continue;\r\n\t\t\tfor(int i = head[x]; i; i = e[i].nxt)\r\n\t\t\t{\r\n\t\t\t\tint v = e[i].to, c = dis[x] + e[i].cost - dis[v];\r\n\t\t\t\tif(f[v] > f[x] + c)\r\n\t\t\t\t{\r\n\t\t\t\t\tf[v] = f[x] + c;\r\n\t\t\t\t\tif(f[v] <= min(t, n - 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tque[f[v]].push(v);\r\n\t\t\t\t\t\tMax = max(Max, f[v]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t    }\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d%d%d\", &n, &m, &q);\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        int x, y, z;\r\n        scanf(\"%d%d%d\", &x, &y, &z);\r\n        add(x, y, z);\r\n    }\r\n    dij(1);\r\n    while(q--)\r\n    {\r\n        int opt; scanf(\"%d\", &opt);\r\n        if(opt == 1)\r\n        {\r\n            int t; scanf(\"%d\", &t);\r\n            if(dis[t] == INF)\r\n                printf(\"-1\\n\");\r\n            else printf(\"%lld\\n\", dis[t]);\r\n        }\r\n        else\r\n        {\r\n            int c; scanf(\"%d\", &c);\r\n            for(int i = 1; i <= c; i++)\r\n            {\r\n                int x; scanf(\"%d\", &x);\r\n                e[x].cost++;\r\n            }\r\n            for(int i = 1; i <= n; i++)\r\n                f[i] = INF;\r\n            f[1] = 0; que[0].push(1);\r\n            bfs(c); for(int i = 1; i <= n; i++)\r\n                dis[i] = min(INF, f[i] + dis[i]);\r\n        }\r\n    }\r\n    return 0;\r\n}"
}