{
    "id": 141419960,
    "contestId": 367,
    "creationTimeSeconds": 1641141343,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 367,
        "index": "D",
        "name": "Sereja and Sets",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "bitmasks",
            "dfs and similar"
        ]
    },
    "author": {
        "contestId": 367,
        "members": [
            {
                "handle": "nbmnb"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1385479800
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 33689600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nconst int maxN = 1e5 + 69;\r\nconst int maxM = 20 + 1;\r\nint n, m, d;\r\nvector<int> a[maxM];\r\nint nex[maxM][maxN];\r\nint dp[1 << maxM];\r\nsigned main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n    cin >> n >> m >> d;\r\n    for (int i = 0; i < m; i++) {\r\n        int s;\r\n        cin >> s;\r\n        while (s--) {\r\n            int x;\r\n            cin >> x;\r\n            a[i].push_back(x);\r\n        }\r\n        a[i].push_back(n + 1);\r\n        sort(a[i].begin(), a[i].end());\r\n    }\r\n    for (int i = 0; i < m; i++) {\r\n        for (int j = 0; j <= n; j++) {\r\n            int id = upper_bound(a[i].begin(), a[i].end(), j + d) - a[i].begin();\r\n            id--;\r\n            if (id >= 0) nex[i][j] = a[i][id];\r\n        }\r\n    }\r\n\r\n    int ans = m;\r\n\r\n    for (int mask = 1; mask < (1 << m); mask++) {\r\n        for (int ones = mask; ones; ones -= ones & -ones)\r\n            dp[mask] = max(dp[mask], dp[mask ^ (ones & -ones)]);\r\n        while (1) {\r\n            int cur = 0;\r\n            for (int ones = mask; ones; ones -= ones & -ones) {\r\n                int i = 31 - __builtin_clz(ones);\r\n                cur = max(cur, nex[i][dp[mask]]);\r\n            }\r\n            if (cur <= dp[mask]) break;\r\n            dp[mask] = cur;\r\n        }\r\n\r\n        if (dp[mask] == n + 1) \r\n            ans = min(ans, (int)__builtin_popcount(mask));\r\n    }\r\n    cout << ans;\r\n}"
}