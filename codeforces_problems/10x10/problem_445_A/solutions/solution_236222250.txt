{
    "id": 236222250,
    "contestId": 445,
    "creationTimeSeconds": 1701962551,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 445,
        "index": "A",
        "name": "DZY Loves Chessboard",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1200,
        "tags": [
            "dfs and similar",
            "implementation"
        ]
    },
    "author": {
        "contestId": 445,
        "members": [
            {
                "handle": "mohdabuzaid15"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1404651900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "//  \ufdfd\r\n// Author : Ansari Mohd Abuzaid\r\n\r\n#include <iostream>\r\n#include <cmath>\r\n#include <climits>\r\n#include <bits/stdc++.h>\r\n#include <cstring>\r\nusing namespace std;\r\n#define ll long long int\r\n#define ull unsigned long long int\r\n#define ld unsigned long double\r\n#define e endl\r\n#define nl cout << endl;\r\n#define sortvec(a) sort(a.begin(), a.end());\r\n// vector queues shorcuts\r\n#define vll vector<ll>\r\n#define vvll vector<vector<ll>>\r\n#define vb vector<bool>\r\n#define vchr vector<char>\r\n#define vstr vector<string>\r\n#define pusb push_back\r\n#define popb pop_back\r\n#define pusf push_front\r\n#define popf pop_front\r\n// Array Input and Output\r\n#define inparr(a, n)           \\\r\n    for (ll i = 0; i < n; i++) \\\r\n    cin >> a[i]\r\n#define outarr(a, n)           \\\r\n    for (ll i = 0; i < n; i++) \\\r\n    {                          \\\r\n        cout << a[i] << \" \";   \\\r\n    }                          \\\r\n    cout << endl;\r\n#define inp2arr(a, n, m)           \\\r\n    for (ll i = 0; i < n; i++)     \\\r\n    {                              \\\r\n        for (ll j = 0; j < m; j++) \\\r\n        {                          \\\r\n            cin >> a[i][j];        \\\r\n        }                          \\\r\n    }\r\n#define out2arr(a, n, m)            \\\r\n    for (ll i = 0; i < n; i++)      \\\r\n    {                               \\\r\n        for (ll j = 0; j < m; j++)  \\\r\n        {                           \\\r\n            cout << a[i][j] ; \\\r\n        }                           \\\r\n        cout << endl;               \\\r\n    }\r\n#define inpvec(a, n)           \\\r\n    for (ll i = 0; i < n; i++) \\\r\n    {                          \\\r\n        int mid;               \\\r\n        cin >> mid;            \\\r\n        a.push_back(mid);      \\\r\n    }\r\n#define copyarr(a, b, n)       \\\r\n    for (ll i = 0; i < n; i++) \\\r\n    {                          \\\r\n        b[i] = a[i];           \\\r\n    }\r\n// LOOPS\r\n#define fl(i, a, b) for (ll i = a; i < b; i++)\r\n#define flr(i, a, b) for (ll i = a; i > b; i--)\r\n#define fle(i, a, b) for (ll i = a; i <= b; i++)\r\n#define flre(i, a, b) for (ll i = a; i >= b; i--)\r\n\r\n// single double input output\r\n#define pf(a) cout << a << endl;\r\n#define pf2(a, b) cout << a << \" \" << b << endl;\r\n#define inp(a) cin >> a;\r\n#define inp2(a, b) cin >> a >> b;\r\n#define ret return;\r\n\r\n#define NO cout << \"NO\" << endl;\r\n#define YES cout << \"YES\" << endl;\r\n#define str string\r\n#define mod 1000000007\r\n// #define pi 3.1415926535897932384626\r\nconst long double pi = acos(-1);\r\n// #define pi 3.141075920803576\r\n\r\n// debugging\r\nvoid dbg_out() { cerr << endl; }\r\ntemplate <typename Head, typename... Tail>\r\nvoid dbg_out(Head H, Tail... T)\r\n{\r\n    cerr << ' ' << H;\r\n    dbg_out(T...);\r\n}\r\n#define deb(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\r\n\r\n// SOME USEFUL FUNCTIONS\r\n\r\n// returns vector pair with sorted elements and its previous indices\r\nvvll sortArrPrevIndices(ll a[], ll n)\r\n{\r\n    vvll vp;\r\n\r\n    // Inserting element in pair vector\r\n    // to keep track of previous indexes\r\n    for (int i = 0; i < n; ++i)\r\n    {\r\n        vp.push_back({a[i], i});\r\n    }\r\n\r\n    // Sorting pair vector\r\n    sort(vp.begin(), vp.end());\r\n\r\n    // Displaying sorted element\r\n    // with previous indexes\r\n    // corresponding to each element\r\n    // cout << \"Element\\t\"\r\n    //      << \"index\" << endl;\r\n    // for (int i = 0; i < vp.size(); i++) {\r\n    //     cout << vp[i].first << \"\\t\"\r\n    //          << vp[i].second << endl;\r\n    // }\r\n    return vp;\r\n}\r\n\r\n// returns a map which contains frequency of elements\r\nmap<ll, ll> freqmap(ll *a, ll n)\r\n{\r\n    map<ll, ll> freq;\r\n    // outarr(a,n);\r\n    fl(i, 0, n)\r\n    {\r\n        if (freq.find(a[i]) == freq.end())\r\n        {\r\n            freq[a[i]] = 1;\r\n        }\r\n        else\r\n        {\r\n            freq[a[i]]++;\r\n        }\r\n    }\r\n    return freq;\r\n}\r\n\r\nstring isPalindrome(str S)\r\n{\r\n    str P = S;\r\n\r\n    reverse(P.begin(), P.end());\r\n\r\n    if (S == P)\r\n    {\r\n        return \"yes\";\r\n    }\r\n    else\r\n    {\r\n        return \"no\";\r\n    }\r\n}\r\n\r\nint largestPower(int n, int p)\r\n{\r\n    // Initialize result\r\n    int x = 0;\r\n\r\n    // Calculate x = n/p + n/(p^2) + n/(p^3) + ....\r\n    while (n)\r\n    {\r\n        n /= p;\r\n        x += n;\r\n    }\r\n    return x;\r\n}\r\n\r\n// Utility function to do modular exponentiation.\r\n// It returns (x^y) % p\r\n// binpoww function\r\nint power(int x, int y, int p)\r\n{\r\n    int res = 1; // Initialize result\r\n    x = x % p;   // Update x if it is more than or\r\n    // equal to p\r\n    while (y > 0)\r\n    {\r\n        // If y is odd, multiply x with result\r\n        if (y & 1)\r\n            res = (res * x) % p;\r\n\r\n        // y must be even now\r\n        y = y >> 1; // y = y/2\r\n        x = (x * x) % p;\r\n    }\r\n    return res;\r\n}\r\n\r\n// Returns n! % p\r\nint modFact(int n, int p)\r\n{\r\n    if (n >= p)\r\n        return 0;\r\n\r\n    int res = 1;\r\n\r\n    // Use Sieve of Eratosthenes to find all primes\r\n    // smaller than n\r\n    bool isPrime[n + 1];\r\n    memset(isPrime, 1, sizeof(isPrime));\r\n    for (int i = 2; i * i <= n; i++)\r\n    {\r\n        if (isPrime[i])\r\n        {\r\n            for (int j = 2 * i; j <= n; j += i)\r\n                isPrime[j] = 0;\r\n        }\r\n    }\r\n\r\n    // Consider all primes found by Sieve\r\n    for (int i = 2; i <= n; i++)\r\n    {\r\n        if (isPrime[i])\r\n        {\r\n            // Find the largest power of prime 'i' that divides n\r\n            int k = largestPower(n, i);\r\n\r\n            // Multiply result with (i^k) % p\r\n            res = (res * power(i, k, p)) % p;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n// returns distinct elements from the array\r\nint dist(ll *arr, ll n)\r\n{\r\n    unordered_set<int> s;\r\n    int res = 0;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n\r\n        if (s.find(arr[i]) == s.end())\r\n        {\r\n            s.insert(arr[i]);\r\n            res++;\r\n        }\r\n    }\r\n    return res;\r\n}\r\nint diststr(str arr, ll j, ll n)\r\n{\r\n    unordered_set<char> s;\r\n    int res = 0;\r\n    for (int i = j; i < n; i++)\r\n    {\r\n\r\n        if (s.find(arr[i]) == s.end())\r\n        {\r\n            s.insert(arr[i]);\r\n            res++;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\n// returns the frequency of a particular element from the array\r\nint freqnum(ll *a, ll n, ll x)\r\n{\r\n    int count = 0;\r\n    for (int i = 0; i < n; i++)\r\n        if (a[i] == x)\r\n            count++;\r\n    return count;\r\n}\r\n\r\n// returns the frequency of a particular character from the string\r\nint freqchar(str a, ll n, char x)\r\n{\r\n    int count = 0;\r\n    for (int i = 0; i < n; i++)\r\n        if (a[i] == x)\r\n            count++;\r\n    return count;\r\n}\r\n\r\n// returns element from array which is repeated maximum no. of times\r\nint maxFreq(ll *arr, ll n, ll k)\r\n{\r\n    for (int i = 0; i < n; i++)\r\n        arr[arr[i] % k] += k;\r\n\r\n    int max = arr[0], result = 0;\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        if (arr[i] > max)\r\n        {\r\n            max = arr[i];\r\n            result = i;\r\n        }\r\n    }\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        arr[i] = arr[i] % k;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nint SumOfDigitsNum(int x)\r\n{\r\n    int n = 0;\r\n    while (x != 0)\r\n    {\r\n        n = n + x % 10;\r\n        x = x / 10;\r\n    }\r\n    return n;\r\n}\r\n\r\nint SumOfDigitsStr(string x)\r\n{\r\n    int n = 0;\r\n    fl(i, 0, x.length())\r\n    {\r\n\r\n        n = n + x[i] - 48;\r\n    }\r\n    return n;\r\n}\r\n\r\n// sum of elements of array\r\nll sumarr(ll *a, ll n)\r\n{\r\n    ll mp22 = 0;\r\n    fl(i, 0, n)\r\n    {\r\n        mp22 = mp22 + a[i];\r\n    }\r\n    return mp22;\r\n}\r\n// position of the particular element from the array\r\nint pos(str s, ll n, char x)\r\n{\r\n    int p = 0;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        if (s[i] == x)\r\n        {\r\n            return i + 1;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nint gcd(int a, int b)\r\n{\r\n    int result = min(a, b); // Find Minimum of a and b\r\n    while (result > 0)\r\n    {\r\n        if (a % result == 0 && b % result == 0)\r\n        {\r\n            break;\r\n        }\r\n        result--;\r\n    }\r\n    return result; // return gcd of a and b\r\n}\r\n\r\nint lcm(int a, int b)\r\n{\r\n    int greater = max(a, b);\r\n    int smallest = min(a, b);\r\n    for (int i = greater;; i += greater)\r\n    {\r\n        if (i % smallest == 0)\r\n            return i;\r\n    }\r\n}\r\n\r\n// An iterative binary search function.\r\nint binarySearch(int arr[], int l, int r, int x)\r\n{\r\n    while (l <= r)\r\n    {\r\n        int m = l + (r - l) / 2;\r\n\r\n        // Check if x is present at mid\r\n        if (arr[m] == x)\r\n            return m;\r\n\r\n        // If x greater, ignore left half\r\n        if (arr[m] < x)\r\n            l = m + 1;\r\n\r\n        // If x is smaller, ignore right half\r\n        else\r\n            r = m - 1;\r\n    }\r\n\r\n    // If we reach here, then element was not present\r\n    return -1;\r\n}\r\n\r\nll maxe = 0;\r\n// Depth-First Search\r\nvoid DFS(ll startRow, ll startCol, vector<vector<ll>> &grid, vector<vector<bool>> &visited)\r\n{\r\n    ll count = 0;\r\n    ll n = grid.size();\r\n    ll m = grid[0].size();\r\n    // Create a stack of pairs to store cell coordinates (row, col)\r\n    stack<pair<ll, ll>> st;\r\n    st.push({startRow, startCol});\r\n\r\n    while (!st.empty())\r\n    {\r\n        // Pop the top cell from the stack\r\n        ll row = st.top().first;\r\n        ll col = st.top().second;\r\n        st.pop();\r\n\r\n        // Check if the cell is out of bounds or already visited\r\n        if (row < 0 || col < 0 || row >= n || col >= m || visited[row][col])\r\n            continue;\r\n\r\n        if ((row <= n && col <= m) || (row >= 0 && col >= 0))\r\n        {\r\n            if (grid[row][col] == 0)\r\n            {\r\n\r\n                continue;\r\n            }\r\n        }\r\n\r\n        // Mark the current cell as visited\r\n        visited[row][col] = true;\r\n\r\n        // Process the current cell (you can print the value here)\r\n\r\n        // cout << grid[row][col] << \" \";\r\n        count += grid[row][col];\r\n        // Push all unvisited neighbors of the current cell into the stack\r\n        st.push({row - 1, col}); // Up\r\n        st.push({row + 1, col}); // Down\r\n        st.push({row, col - 1}); // Left\r\n        st.push({row, col + 1}); // Right\r\n    }\r\n    // pf(count);\r\n    maxe = max(maxe, count);\r\n}\r\n\r\nbool prime(ll num)\r\n{\r\n    if (num <= 1)\r\n    {\r\n        return false;\r\n    }\r\n    if (num <= 3)\r\n    {\r\n        return true;\r\n    }\r\n    for (ll i = 2; i <= sqrt(num); ++i)\r\n    {\r\n        if (num % i == 0)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// sieveofEratosthenes for prime from 1 to n;\r\nvoid SieveOfEratosthenes(vb &prime, int n)\r\n{\r\n    // Create a boolean array \"prime[0..n]\" and initialize\r\n    // all entries it as true. A value in prime[i] will\r\n    // finally be false if i is Not a prime, else true.;\r\n\r\n    for (int p = 2; p * p <= n; p++)\r\n    {\r\n        // If prime[p] is not changed, then it is a prime\r\n        if (prime[p] == true)\r\n        {\r\n            // Update all multiples of p greater than or\r\n            // equal to the square of it numbers which are\r\n            // multiple of p and are less than p^2 are\r\n            // already been marked.\r\n            for (int i = p * p; i <= n; i += p)\r\n                prime[i] = false;\r\n        }\r\n    }\r\n}\r\n\r\nvb SieveOfEratosthenesInRange(int m, int n)\r\n{\r\n    // Create a boolean array \"prime[0..n]\" and initialize\r\n    // all entries it as true. A value in prime[i] will\r\n    // finally be false if i is Not a prime, else true.\r\n    vb prime(n + 1, true);\r\n    // memset(prime, true, sizeof(prime));\r\n\r\n    for (int p = 2; p * p <= n; p++)\r\n    {\r\n        // If prime[p] is not changed, then it is a prime\r\n        if (prime[p] == true)\r\n        {\r\n            // Update all multiples of p greater than or\r\n            // equal to the square of it. Numbers which are\r\n            // multiples of p and are less than p^2 are\r\n            // already marked.\r\n            for (int i = max(p * p, (m + p - 1) / p * p); i <= n; i += p)\r\n            {\r\n                prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return prime;\r\n}\r\n\r\nint isPerfectSquare(long double x)\r\n{\r\n    // Find floating point value of\r\n    // square root of x.\r\n    if (x >= 0)\r\n    {\r\n\r\n        long long sr = sqrt(x);\r\n\r\n        // if product of square root\r\n        // is equal, then\r\n        // return T/F\r\n        if (sr * sr == x)\r\n            ;\r\n        {\r\n            return sr;\r\n        }\r\n    }\r\n    // else return false if n<0\r\n    return 0;\r\n}\r\n\r\n// below are the modular arithmetic functions\r\nlong add(long a, long b)\r\n{\r\n    return (((long)(a + mod) % mod + (b + mod) % mod) % mod);\r\n}\r\nlong sub(long a, long b)\r\n{\r\n    return (((long)(a + mod) % mod + ((-1 * b) + mod) % mod) % mod);\r\n}\r\n\r\nll mul(ll a, ll b)\r\n{\r\n    return (((ll)a % mod * b % mod) % mod);\r\n}\r\nlong inv(long x)\r\n{\r\n    return pow(x, mod - 2);\r\n}\r\n\r\n// long div(long x, long y)\r\n// {\r\n//     return mul(x, inv(y));\r\n// }\r\n\r\nll poww(ll a, ll b)\r\n{\r\n    a %= mod;\r\n    ll res = 1;\r\n    while (b > 0)\r\n    {\r\n        if ((b & 1) != 0)\r\n            res = mul(res, a);\r\n        a = mul(a, a);\r\n        b /= 2;\r\n    }\r\n    return res;\r\n}\r\n\r\n// abs() works as defined for all input integers, except for one integer: the INT_MIN. For 32-bit integers, the value of INT_MIN is -2147483648. abs( INT_MIN ) returns INT_MIN back!\r\n// so this can be used for safer operations\r\n// https://codeyarns.com/tech/2012-02-14-c-abs-and-its-quirk-with-int_min.html#gsc.tab=0\r\nunsigned int absu(int value)\r\n{\r\n    return (value < 0) ? -((unsigned int)value) : (unsigned int)value;\r\n}\r\n\r\nstring removeSpecialCharacter(str s)\r\n{\r\n    // str\r\n    str mp22 = \"\";\r\n    for (int i = 0; i < s.size(); i++)\r\n    {\r\n\r\n        if ((s[i] >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z') || (s[i] >= '0' && s[i] <= '9'))\r\n        {\r\n            mp22 += s[i];\r\n        }\r\n    }\r\n    // pf(mp22);\r\n    return mp22;\r\n    // cout << s;\r\n}\r\n// functions used to sort 2-d array acc to  the particular column\r\nbool sortcol0(const vector<ll> &v1, const vector<ll> &v2)\r\n{\r\n    return v1[0] < v2[0];\r\n}\r\nbool sortcol1(const vector<ll> &v1, const vector<ll> &v2)\r\n{\r\n    return v1[1] > v2[1];\r\n}\r\n// Ascii lowercase - 97-122\r\n// uppercase - 65-90\r\nbool sorted(vll a, ll mid)\r\n{\r\n    fl(i, 0, a.size())\r\n    {\r\n        a[i] = abs(a[i] - mid);\r\n    }\r\n    fl(i, 0, a.size() - 1)\r\n    {\r\n        if (a[i] > a[i + 1])\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n// problem solving function\r\nvoid testcase()\r\n{\r\n    ll n,m;\r\n    inp2(n,m);\r\n    char a[n][m];\r\n    inp2arr(a,n,m);\r\n    char st='W';\r\n    char prev;\r\n    ll ct=0;\r\n    fl(i,0,n){\r\n        ct=0;\r\n        fl(j,0,m){\r\n            if (a[i][j]=='.' && i==0)\r\n            {\r\n                if (ct==0)\r\n                {\r\n                    a[i][j]='B';\r\n                    prev='B';\r\n                    ct++;\r\n                }\r\n                else{\r\n                    if (prev=='B')\r\n                    {\r\n                        a[i][j]='W';\r\n                        prev='W';\r\n                    }\r\n                    else\r\n                    {\r\n                        a[i][j]='B';\r\n                        prev='B';\r\n                    }\r\n                    \r\n                    \r\n                }\r\n            }\r\n            else if (a[i][j]=='.' && a[i-1][j]=='B')\r\n            {\r\n                a[i][j]='W';\r\n                prev='W';\r\n            }\r\n            else if (a[i][j]=='.' && a[i-1][j]=='W')\r\n            {\r\n                a[i][j]='B';\r\n                prev='B';\r\n            }\r\n            else if (a[i][j]=='.' && a[i][j-1]=='W' && j>0)\r\n            {\r\n                a[i][j]='B';\r\n                prev='B';\r\n            }\r\n            else if (a[i][j]=='.' && a[i][j-1]=='B' && j>0)\r\n            {\r\n                a[i][j]='W';\r\n                prev='W';\r\n            }\r\n            else if (a[i][j]=='.')\r\n            {\r\n                a[i][j]='B';\r\n                prev='B';\r\n            }\r\n        }\r\n    }\r\n    out2arr(a,n,m);\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    // freopen(\"input.txt\", \"r\", stdin);\r\n    // freopen(\"output.txt\", \"w\", stdout);\r\n    int n;\r\n    // cin >> n;\r\n    int t1, t2, t3, t4;\r\n    str s;\r\n    // for (int i = 1; i <= n; i++)\r\n    // {\r\n        // if (i == 554)\r\n        // {\r\n        //     inp(s);\r\n        //     // inp2(t3,t4)\r\n        //     deb(s);\r\n        //     int arr[1];\r\n        //     pf(arr[10000000]);\r\n        // }\r\n        testcase();\r\n    // }\r\n\r\n    return 0;\r\n}"
}