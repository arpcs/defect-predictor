{
    "id": 232934098,
    "contestId": 1029,
    "creationTimeSeconds": 1700119065,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1029,
        "index": "D",
        "name": "Concatenated Multiples",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1029,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1535122200
    },
    "programmingLanguage": "Java 21",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 69,
    "timeConsumedMillis": 936,
    "memoryConsumedBytes": 17203200,
    "source": "import java.util.Scanner;\nimport java.util.HashMap;\n\npublic class Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int k = sc.nextInt();\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = sc.nextInt();\n        }\n        sc.close();\n\n        int D = 10;\n        HashMap[] cnt = new HashMap[D];\n        for (int i = 0; i < D; i++) {\n            cnt[i] = new HashMap();\n        }\n        for (int i = 0; i < n; i++) {\n            int dlen = (\"\" + a[i]).length() - 1;\n            int val = (k - a[i] % k) % k;\n            cnt[dlen].put(val, (int) cnt[dlen].getOrDefault(val, 0) + 1);\n        }\n\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            int dlen = (\"\" + a[i]).length() - 1;\n            int val = a[i] % k;\n            for (int d = 0; d < D; d++) {\n                val = (int) (10l * val % k);\n                ans += (int) cnt[d].getOrDefault(val, 0);\n                if (d == dlen && (val + a[i] % k) % k == 0) {\n                    ans --;\n                }\n            }\n        }\n\n        System.out.println(\"\" + ans);\n    }\n}\n\n\t\t\t\t\t\t  \t\t \t\t\t \t   \t  \t\t \t  \t\t\t"
}