{
    "id": 198724941,
    "contestId": 1710,
    "creationTimeSeconds": 1679567821,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1710,
        "index": "D",
        "name": "Recover the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 3400,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1710,
        "members": [
            {
                "handle": "KevinYao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658673300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 16588800,
    "source": "// LUOGU_RID: 105618821\n// Author: kyEEcccccc\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nusing LL = long long;\r\nusing ULL = unsigned long long;\r\n\r\n#define F(i, l, r) for (int i = (l); i <= (r); ++i)\r\n#define FF(i, r, l) for (int i = (r); i >= (l); --i)\r\n#define MAX(a, b) ((a) = max(a, b))\r\n#define MIN(a, b) ((a) = min(a, b))\r\n#define SZ(a) ((int)((a).size()) - 1)\r\n\r\nconst int N = 2005;\r\n\r\nstruct Dsu\r\n{\r\n\tint a[N];\r\n\tvoid init(int n) { iota(a + 1, a + n + 1, 1); }\r\n\tint get_anc(int x) { return x == a[x] ? x : (a[x] = get_anc(a[x])); }\r\n\tbool mer(int x, int y)\r\n\t{\r\n\t\tx = get_anc(x), y = get_anc(y);\r\n\t\tif (x == y) return 0;\r\n\t\treturn a[y] = x, 1;\r\n\t}\r\n\tbool is_same(int x, int y) { return get_anc(x) == get_anc(y); }\r\n} dsu;\r\n\r\nint n, is[N][N];\r\n\r\nvoid work(void)\r\n{\r\n\tcin >> n;\r\n\tF(i, 1, n)\r\n\t{\r\n\t\tstring tmp; cin >> tmp;\r\n\t\tF(j, i, n) is[i][j] = tmp[j - i] - '0';\r\n\t}\r\n\r\n\tdsu.init(n);\r\n\tvector<pair<int, int>> ans;\r\n\tF(len, 2, n)\r\n\t{\r\n\t\tF(l, 1, n - len + 1)\r\n\t\t{\r\n\t\t\tint r = l + len - 1;\r\n\t\t\tif (!is[l][r] || dsu.is_same(l, r)) continue;\r\n\t\t\tvector<pair<int, int>> vec;\r\n\t\t\tint p = dsu.get_anc(r);\r\n\t\t\twhile (p > l)\r\n\t\t\t{\r\n\t\t\t\tint nl = dsu.get_anc(p - 1);\r\n\t\t\t\tif (nl > l) vec.emplace_back(nl, p - 1);\r\n\t\t\t\tp = nl;\r\n\t\t\t}\r\n\t\t\tif (vec.empty())\r\n\t\t\t{\r\n\t\t\t\tans.emplace_back(l, r);\r\n\t\t\t\tdsu.mer(l, r);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tassert(vec.size() > 1);\r\n\t\t\tans.emplace_back(vec[1].first, r);\r\n\t\t\tdsu.mer(vec[1].first, r);\r\n\t\t\tF(i, 0, SZ(vec))\r\n\t\t\t{\r\n\t\t\t\tif (i == 1) continue;\r\n\t\t\t\tans.emplace_back(l, vec[i].second);\r\n\t\t\t\tdsu.mer(l, vec[i].second);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tassert(ans.size() == n - 1);\r\n\r\n\tfor (auto pi : ans) cout << pi.first << ' ' << pi.second << '\\n';\r\n}\r\n\r\nsigned main(void)\r\n{\r\n\t// freopen(\".in\", \"r\", stdin);\r\n\t// freopen(\".out\", \"w\", stdout);\r\n\tios::sync_with_stdio(0), cin.tie(nullptr);\r\n\r\n\tint _; cin >> _;\r\n\twhile (_--) work();\r\n\t\r\n\treturn 0;\r\n}"
}