{
    "id": 208843583,
    "contestId": 103,
    "creationTimeSeconds": 1686103197,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 103,
        "index": "B",
        "name": "Cthulhu",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs"
        ]
    },
    "author": {
        "contestId": 103,
        "members": [
            {
                "handle": "xiuyuan-cao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1312714800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 47,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "//\r\n// Created by Xiuyuan Cao on 2023/6/7.\r\n//\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <queue>\r\n#include <limits>\r\n#include <map>\r\n#include <unordered_set>\r\n#include <set>\r\n#include <unordered_map>\r\n#include <string.h>\r\n#include <cmath>\r\n#include <stack>\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\n\r\n\r\nvoid solve(){\r\n    int n,m;\r\n    cin>>n>>m;\r\n    vector<int> degree(n);\r\n    unordered_map<int,vector<int>> edges;\r\n    for(int i=0;i<m;i++){\r\n        int a,b;\r\n        cin>>a>>b;\r\n        a--;\r\n        b--;\r\n        degree[a]++;\r\n        degree[b]++;\r\n        edges[a].push_back(b);\r\n        edges[b].push_back(a);\r\n    }\r\n    queue<int> queue;\r\n    unordered_set<int> cycle;\r\n    for(int i=0;i<n;i++){\r\n        cycle.insert(i);\r\n    }\r\n    for(int i=0;i<n;i++){\r\n        if(degree[i]==1){\r\n            queue.push(i);\r\n            cycle.erase(i);\r\n        }\r\n    }\r\n    while(queue.size()!=0){\r\n        int levelCount=queue.size();\r\n        for(int i=0;i<levelCount;i++){\r\n            int current=queue.front();queue.pop();\r\n            for(int next:edges[current]){\r\n                degree[next]--;\r\n                if(cycle.count(next)!=0&&degree[next]==1){\r\n                    queue.push(next);\r\n                    cycle.erase(next);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if(cycle.size()==0){\r\n        cout<<\"NO\"<<endl;\r\n        return;\r\n    }\r\n    for(int i:cycle){\r\n        if(degree[i]!=2){\r\n            cout<<\"NO\";\r\n            return;\r\n        }\r\n    }\r\n    for(int i:cycle){\r\n        queue.push(i);\r\n        break;\r\n    }\r\n    while(queue.size()){\r\n        int levelCount=queue.size();\r\n        for(int i=0;i<levelCount;i++){\r\n            int current=queue.front();queue.pop();\r\n            cycle.erase(current);\r\n            for(int next:edges[current]){\r\n                if(cycle.count(next)!=0){\r\n                    queue.push(next);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout<<(cycle.empty()?\"FHTAGN!\":\"NO\");\r\n\r\n\r\n}\r\n\r\n\r\nint main(){\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    solve();\r\n}"
}