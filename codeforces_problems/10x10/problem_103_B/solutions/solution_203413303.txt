{
    "id": 203413303,
    "contestId": 103,
    "creationTimeSeconds": 1682411710,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 103,
        "index": "B",
        "name": "Cthulhu",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs"
        ]
    },
    "author": {
        "contestId": 103,
        "members": [
            {
                "handle": "bkifhr8"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1312714800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\n// primes 2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101\n// abcdefghijklmnopqrstuvwxyz\n#define PI 3.14159265359\ntypedef long long ll;//CLAWNS CAN NOT STOP SAYing   \u064a\u0627\u0631\u0628 \u0641\u0643 \u0627\u0644\u062f\u064a\u0642\u0629\n#define FAST ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(0);\nusing namespace std;\nvector<ll>v[200];\nbool vis[200]={0};\nbool f=0;\n\nll dfs(ll n,ll x)\n{\n    vis[n]=1;\n\n    for(auto i:v[n])\n    {\n        if(i==x)\n        {\n            continue;\n        }\n        if(vis[i]==1)\n        {\n           f=1;\n        }\n        else\n        {\n            dfs(i,n);\n        }\n\n    }\n}\nvoid clawn()\n{\n    ll n,m,a,b;\n    cin>>n>>m;\n\n    set<ll>s;\n    for(ll i=0;i<m;i++)\n    {\n        cin>>a>>b;\n        s.emplace(a);\n        s.emplace(b);\n        v[a].push_back(b);\n        v[b].push_back(a);\n    }\n for(auto i:s)\n {\n    if(vis[i]==0)\n        dfs(i,-1);\n }\n if(f==1)\n     cout<<\"FHTAGN!\";\n else\n     cout<<\"NO\";\n}\nint main() {\n    FAST;\n    int t=1;\n  //  cin >> t;\n    while (t--) {\n       clawn();\n    }\n    return 0;\n}\n\n\n\n\n\n\n\t   \t \t\t \t  \t\t\t  \t\t\t\t\t \t\t\t\t\t\t"
}