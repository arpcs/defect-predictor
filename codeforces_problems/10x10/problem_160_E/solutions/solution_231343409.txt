{
    "id": 231343409,
    "contestId": 160,
    "creationTimeSeconds": 1699106547,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 160,
        "index": "E",
        "name": "Buses and People",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 160,
        "members": [
            {
                "handle": "Sparkle_Twilight"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1331046000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 49,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 16793600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;const int N=1e5+10;struct node{int l,r,id,t;}pb[N*4];struct node1{int r,id;}tree[N*10];int n,m,a1,a2,a3,tim[N*4],ans[N<<1];bool cmp(node x,node y){if(x.l!=y.l)return x.l<y.l;if(x.t!=y.t)return x.t>y.t;return x.id<y.id;}inline void insert(int x,int l,int r,node p){if(l==r){tree[x]=(node1){p.r,p.id};return;}int mid=(l+r)>>1;if(p.t<=mid)insert(x<<1,l,mid,p);else insert(x<<1|1,mid+1,r,p);tree[x].r=max(tree[x<<1].r,tree[x<<1|1].r);}inline int query(int x,int l,int r,int pos,int lim){if(tree[x].r<lim)return-1;if(l==r)return tree[x].id;int mid=(l+r)>>1;if(pos<=mid){int tmp=query(x<<1,l,mid,pos,lim);if(tmp!=-1)return tmp;}return query(x<<1|1,mid+1,r,pos,lim);}int main(){scanf(\"%d%d\",&n,&m);for(int i=1;i<=n+m;i++){scanf(\"%d%d%d\",&a1,&a2,&a3);pb[i]=(node){a1,a2,i,a3};tim[i]=a3;}sort(tim+1,tim+1+n+m);sort(pb+1,pb+1+n+m,cmp);for(int i=1;i<=n+m;i++){pb[i].t=lower_bound(tim+1,tim+1+n+m,pb[i].t)-tim;if(pb[i].id<=n)insert(1,1,n+m,pb[i]);else ans[pb[i].id-n]=query(1,1,n+m,pb[i].t,pb[i].r);}for(int i=1;i<=m;i++)printf(\"%d \",ans[i]);return 0;}"
}