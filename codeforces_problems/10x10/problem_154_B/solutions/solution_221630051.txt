{
    "id": 221630051,
    "contestId": 154,
    "creationTimeSeconds": 1693713489,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 154,
        "index": "B",
        "name": "Colliders",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1600,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 154,
        "members": [
            {
                "handle": "Vinnie26"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1330095600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define rep(i,n) for (int i = 0; i < n; ++i)\r\n#define REP(i,k,n) for (int i = k; i <n; ++i)\r\n#define REPR(i,k,n) for (int i = k; i >= n; --i)\r\n#define F first\r\n#define S second\r\n\r\ntypedef long long ll;\r\ntypedef pair<int,int> pii;\r\ntypedef pair<ll,ll> pll;\r\n\r\nset<int> prime_divisors;\r\n\r\nconst int N=350;\r\nbool is_prime[N+1];\r\nvector<int> only_prime;\r\nvoid Sieve(ll n){\r\n    is_prime[0]=is_prime[1]=false;\r\n    for(ll i=2;i<=n;i++) is_prime[i]=true;\r\n    for(ll i=2;i<=n;i++){\r\n        if(!is_prime[i]) continue;\r\n        only_prime.push_back(i);\r\n        for(ll j=2*i;j<=n;j+=i){\r\n            is_prime[j]=false;\r\n        }\r\n    }\r\n}\r\n\r\nvoid IngresaOsale_divisores(int num,char ga){\r\n    int copia=num;\r\n    rep(i,only_prime.size()){\r\n        if(copia%only_prime[i]==0){\r\n            if(ga=='+') prime_divisors.insert(only_prime[i]);\r\n            else prime_divisors.erase(only_prime[i]); \r\n            while(copia>1 and copia%only_prime[i]==0){\r\n                copia/=only_prime[i];\r\n            }\r\n\r\n        }\r\n        if(copia==1) break;\r\n    }\r\n    if(copia>1){\r\n        if(ga=='+') prime_divisors.insert(copia);\r\n        else prime_divisors.erase(copia); \r\n    }\r\n\r\n}\r\n\r\nbool is_relative(int num,int* divisor){\r\n    for(auto x: prime_divisors){\r\n        if(num%x==0){\r\n            *divisor=x;\r\n            return true;\r\n            break;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvoid solve(){\r\n    int n,m;\r\n    cin>>n>>m;\r\n    vector<int> bitset(n,0);\r\n    vector<int> num_encendidos;\r\n    while(m--){\r\n        char sign;\r\n        int num;\r\n        cin>>sign>>num;\r\n        if(sign=='+'){\r\n            if(bitset[num-1]==1) cout<<\"Already on\"<<endl;\r\n            else {\r\n                if(num_encendidos.empty()){\r\n                    bitset[num-1]=1;\r\n                    num_encendidos.push_back(num);\r\n                    IngresaOsale_divisores(num,sign);\r\n                    cout<<\"Success\"<<endl;\r\n                } else{\r\n                    int divisor=0;\r\n                    if(is_relative(num,&divisor)){\r\n                        for(auto x:num_encendidos){\r\n                            if(x%divisor==0){\r\n                                cout<<\"Conflict with \"<<x<<endl;\r\n                                break;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        bitset[num-1]=1;\r\n                        num_encendidos.push_back(num);\r\n                        IngresaOsale_divisores(num,sign);\r\n                        cout<<\"Success\"<<endl;\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if(bitset[num-1]==0) cout<<\"Already off\"<<endl;\r\n            else{\r\n                bitset[num-1]=1;\r\n                num_encendidos.erase(remove(num_encendidos.begin(), num_encendidos.end(), num), num_encendidos.end());\r\n                cout<<\"Success\"<<endl;\r\n                IngresaOsale_divisores(num,sign);\r\n            } \r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nint main(){\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    Sieve(N);\r\n    int t=1;\r\n    while(t--){\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}"
}