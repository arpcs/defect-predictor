{
    "id": 226649453,
    "contestId": 154,
    "creationTimeSeconds": 1696445589,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 154,
        "index": "C",
        "name": "Double Profiles",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2300,
        "tags": [
            "graphs",
            "hashing",
            "sortings"
        ]
    },
    "author": {
        "contestId": 154,
        "members": [
            {
                "handle": "BigBlueHedgehog"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1330095600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 2402,
    "memoryConsumedBytes": 208588800,
    "source": "#include <bits/stdc++.h>\r\n#include <cstdio>\r\nusing namespace std;\r\n\r\n/*#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"O3\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC target(\"avx2\")*/\r\n\r\nconst long long p = 1000037, mod = 1e9 + 7;\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n#ifdef KUVARDINA\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<long long> st(n);\r\n    st[0] = 1;\r\n    for (int i = 1; i < n; ++i) st[i] = st[i - 1] * p;\r\n    vector<pair<int, int>> fr;\r\n    vector<set<int>> g(n);\r\n    vector<vector<int>> help(n);\r\n    int a, b;\r\n    for (int i = 0; i < m; ++i) {\r\n        cin >> a >> b;\r\n        a--; b--;\r\n        g[a].insert(b);\r\n        g[b].insert(a);\r\n        fr.push_back({a, b});\r\n    }\r\n    vector<vector<long long>> h(n);\r\n    unordered_map<long long, long long> cnt;\r\n    long long ans = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        int j = 0;\r\n        h[i].resize(g[i].size());\r\n        if (g[i].empty()) {\r\n            ans += cnt[0];\r\n            cnt[0]++;\r\n            continue;\r\n        }\r\n        for (auto x : g[i]) {\r\n            help[i].push_back(x);\r\n            if (j == 0) {\r\n                h[i][j] = (x + 1);\r\n            } else {\r\n                h[i][j] = h[i][j - 1] + st[j] * (x + 1);\r\n            }\r\n            j++;\r\n        }\r\n        //cout << h[i][g[i].size() - 1] << \" \";\r\n        ans += cnt[h[i][g[i].size() - 1]];\r\n        cnt[h[i][g[i].size() - 1]]++;\r\n    }\r\n    for (auto [a, b] : fr) {\r\n        int n1 = h[a].size(), n2 = h[b].size();\r\n        int i1 = lower_bound(help[a].begin(), help[a].end(), b) - help[a].begin();\r\n        int i2 = lower_bound(help[b].begin(), help[b].end(), a) - help[b].begin();\r\n        long long x1, x2;\r\n        if (i1 == 0) {\r\n            x1 = h[a][n1 - 1] - h[a][i1];\r\n        } else {\r\n            x1 = h[a][n1 - 1] - h[a][i1] + h[a][i1 - 1] * p;\r\n        }\r\n        if (i2 == 0) {\r\n            x2 = h[b][n2 - 1] - h[b][i2];\r\n        } else {\r\n            x2 = h[b][n2 - 1] - h[b][i2] + h[b][i2 - 1] * p;\r\n        }\r\n        if (x1 == x2) ans++;\r\n    }\r\n    cout << ans;\r\n}\r\n"
}