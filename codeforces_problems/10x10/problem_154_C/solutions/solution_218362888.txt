{
    "id": 218362888,
    "contestId": 154,
    "creationTimeSeconds": 1691765339,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 154,
        "index": "C",
        "name": "Double Profiles",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2300,
        "tags": [
            "graphs",
            "hashing",
            "sortings"
        ]
    },
    "author": {
        "contestId": 154,
        "members": [
            {
                "handle": "No.name11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1330095600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 670,
    "memoryConsumedBytes": 229580800,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\n#define fast ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\n#define ll long long\r\n#define ld long double\r\n#define el \"\\n\"\r\n#define ordered_set tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\nconst ll N = 1e6 + 5, LOG = 22, mod = 1e9 + 7, INF = 1e18;\r\nconst ld pi = acos(-1);\r\nconst ld eps = 1e-4;\r\nint dx[] = {0, -1, 0, 1, -1, 1, -1, 1};\r\nint dy[] = { -1, 0, 1, 0, 1, -1, -1, 1};\r\nint tr[N * 4][10], id, cnt[N * 7];\r\nll n, m, x, y, k;\r\nvector<int> conn[N];\r\n\r\nint solve(string &s) {\r\n    int cur = 0;\r\n    for (auto j : s) {\r\n        if (tr[cur][j - '0'] == 0) {\r\n            tr[cur][j - '0'] = ++id;\r\n        }\r\n        cur = tr[cur][j - '0'];\r\n    }\r\n    return cnt[cur]++;\r\n}\r\n\r\nvoid remove(string &s) {\r\n    int cur = 0;\r\n    for (auto j : s) {\r\n        if (tr[cur][j - '0'] == 0) {\r\n            tr[cur][j - '0'] = ++id;\r\n        }\r\n        cur = tr[cur][j - '0'];\r\n    }\r\n    cnt[cur]--;\r\n}\r\n\r\n\r\nll solve (vector<int>&sz) {\r\n    ll ans = 0;\r\n    for (auto j : sz) {\r\n        string s;\r\n        //conn[j].push_back(j);\r\n        sort(conn[j].begin(), conn[j].end());\r\n        for (auto k : conn[j]) {\r\n            s += to_string(k);\r\n        }\r\n        //cout << j << \" \" << s << el;\r\n        ans += solve(s);\r\n    }\r\n    for (auto k : sz) {\r\n        string s;\r\n        for (auto j : conn[k]) {\r\n            s += to_string(j);\r\n        }\r\n        remove(s);\r\n    }\r\n    for (auto j : sz) {\r\n        string s;\r\n        conn[j].push_back(j);\r\n        sort(conn[j].begin(), conn[j].end());\r\n        for (auto k : conn[j]) {\r\n            s += to_string(k);\r\n        }\r\n        //cout << j << \" \" << s << el;\r\n        ans += solve(s);\r\n    }\r\n    for (auto k : sz) {\r\n        string s;\r\n        for (auto j : conn[k]) {\r\n            s += to_string(j);\r\n        }\r\n        remove(s);\r\n    }\r\n\r\n    //cout << \"DONE \" << ans << el;\r\n    return ans;\r\n}\r\n\r\nvoid dowork() {\r\n    cin >> n >> m;\r\n    for (int i = 0; i < m; i++) {\r\n        cin >> x >> y;\r\n        conn[x].push_back(y);\r\n        conn[y].push_back(x);\r\n    }\r\n    vector<pair<int, int>>sz;\r\n    ll ans = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n        if (conn[i].size() == 0) {\r\n            ans++;\r\n            continue;\r\n        }\r\n        sz.push_back({conn[i].size(), i});\r\n    }\r\n    sort(sz.begin(), sz.end());\r\n    ans = ans * (ans - 1);\r\n    ans /= 2;\r\n    vector<int>cur;\r\n    for (int i = 0; i < sz.size(); i++) {\r\n        if (cur.size() == 0 || sz[i].first == sz[i - 1].first) {\r\n            cur.push_back(sz[i].second);\r\n        }\r\n        else {\r\n            ans += solve(cur);\r\n            cur.clear();\r\n            cur.push_back(sz[i].second);\r\n        }\r\n    }\r\n    ans += solve(cur);\r\n    cout << ans << el;\r\n}\r\n\r\nsigned main() {\r\n    fast\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    int t = 1;\r\n    //cin >> t;\r\n    for (int i = 1; i <= t; i++) {\r\n        dowork();\r\n    }\r\n    return 0;\r\n}"
}