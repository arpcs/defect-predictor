{
    "id": 234970667,
    "contestId": 96,
    "creationTimeSeconds": 1701282246,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 96,
        "index": "B",
        "name": "Lucky Numbers (easy)",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "binary search",
            "bitmasks",
            "brute force"
        ]
    },
    "author": {
        "contestId": 96,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1310137200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n#include <queue>\n\n#define speed                \\\n    ios::sync_with_stdio(0); \\\n    cin.tie(0);              \\\n    cout.tie(0)\ntypedef long long ll;\n#define f(var, a, b) for (ll var = a; var < b; var++)\n#define vec vector<ll>\n#define el '\\n'\n#define EPS 1e-9\n#define fixed(n) fixed << setprecision(n)\n#define all(vec) vec.begin(), vec.end()\n#define rall(vec) vec.rbegin(), vec.rend()\n#define sz(x) int(x.size())\n\nconstexpr int INF = 1 << 30, Mod = 1e9 + 7;\nconstexpr ll LINF = 1LL << 62;\nusing namespace std;\n\nll get_minimum_lucky(int number_of_digits)\n{\n    number_of_digits = (number_of_digits + 1) / 2;\n    ll super_lucky = 0;\n    for (int i = 0; i < number_of_digits; i++)\n        super_lucky = super_lucky * 10 + 4;\n    for (int i = 0; i < number_of_digits; i++)\n        super_lucky = super_lucky * 10 + 7;\n    return super_lucky;\n}\nvoid solve()\n{\n    string num;\n    cin >> num;\n    int digits = sz(num);\n    if (digits & 1)\n        return cout << get_minimum_lucky(digits) << '\\n', void();\n    ll super_lucky = LINF;\n    for (int mask = 0; mask < (1 << digits); mask++)\n    {\n        ll curr_lucky = 0, diff_cnt = 0;\n        for (int i = 0; i < digits; i++)\n            if ((mask >> i) & 1)\n                curr_lucky = curr_lucky * 10 + 7, diff_cnt++;\n            else\n                curr_lucky = curr_lucky * 10 + 4, diff_cnt--;\n        if (!diff_cnt && curr_lucky >= stoll(num))\n            super_lucky = min(super_lucky, curr_lucky);\n    }\n    if (super_lucky == LINF)\n        super_lucky = get_minimum_lucky(digits + 2);\n    cout << super_lucky << '\\n';\n}\nint main()\n{\n    speed;\n    ll testcases = 1;\n    // cin >> testcases;\n    for (ll i = 0; i < testcases; i++)\n    {\n        solve();\n    }\n    return 0;\n}\n\n\t\t  \t\t\t\t\t\t\t \t\t     \t\t\t  \t\t\t"
}