{
    "id": 231509728,
    "contestId": 386,
    "creationTimeSeconds": 1699213284,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 386,
        "index": "D",
        "name": "Game with Points",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "dp",
            "graphs",
            "implementation",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 386,
        "members": [
            {
                "handle": "Bahamin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1389906900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1843200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\r\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }\r\nvoid dbg_out() { cerr << endl; }\r\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\r\n#ifdef LOCAL\r\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\r\n#else\r\n#define dbg(...)\r\n#endif\r\n\r\n#define ar array\r\n#define ll long long\r\n#define ld long double\r\n#define sze(x) ((int)x.size())\r\n#define all(a) (a).second.firstegin(), (a).end()\r\n#define sui cout.tie(NULL); cin.tie(NULL); ios_base::sync_with_stdio(false)\r\n#define mset(a, x) memset(a, x, sizeof(a))\r\ntypedef priority_queue <int, vector<int>, greater<int> > max_heap;\r\ntypedef priority_queue <int> min_heap;\r\nconst int MAX_N = 1e5 + 5;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll INF = 1e9;\r\nconst ld EPS = 1e-9;\r\n\r\nvector<pair<int, char>> adj[75];\r\nmap<pair<int, int>, char> colors;\r\nint dis[75][75][75];\r\nmap<pair<int, pair<int, int>>, pair<pair<int, pair<int, int>>, pair<int, int>>> par;\r\n\r\nvector<pair<pair<int, pair<int, int>>, pair<int, int>>> adjc(pair<int, pair<int, int>> u)\r\n{\r\n    vector<pair<pair<int, pair<int, int>>, pair<int, int>>> ans;\r\n    vector<int> nod;\r\n    nod.push_back(u.first); nod.push_back(u.second.first); nod.push_back(u.second.second);\r\n    for (int i = 0; i < 4; i++)\r\n    {\r\n        vector<int> others;\r\n        for (int j = 0; j < 4; j++) if (i != j) others.push_back(j);\r\n        for (pair<int, char> v : adj[nod[i]]) \r\n        {\r\n            if (v.first != nod[others[0]] && v.first != nod[others[1]] && v.second == colors[make_pair(nod[others[0]], nod[others[1]])])\r\n            {\r\n                pair<int, pair<int, int>> newhalatNode;\r\n                pair<int, int> change;\r\n                if (i == 0) newhalatNode.second.first = u.second.first, newhalatNode.second.second = u.second.second, newhalatNode.first = v.first, change = make_pair(u.first, v.first);\r\n                if (i == 1) newhalatNode.first = u.first, newhalatNode.second.second = u.second.second, newhalatNode.second.first = v.first, change = make_pair(u.second.first, v.first);\r\n                if (i == 2) newhalatNode.second.first = u.second.first, newhalatNode.first = u.first, newhalatNode.second.second = v.first, change = make_pair(u.second.second, v.first);\r\n                ans.push_back(make_pair(newhalatNode, change));\r\n            }\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n\r\nvoid bfs(pair<int, pair<int, int>> u)\r\n{\r\n    queue<pair<int, pair<int, int>>> qu;\r\n    for (int i = 0; i < 75; i++)\r\n    {\r\n        for (int j = 0; j < 75; j++)\r\n        {\r\n            for (int k = 0; k < 75; k++) dis[i][j][k] = INF;\r\n        }\r\n    }\r\n    qu.push(u);\r\n    dis[u.first][u.second.first][u.second.second] = 0;\r\n    while (!qu.empty())\r\n    {\r\n        pair<int, pair<int, int>> x = qu.front();\r\n        qu.pop();\r\n        for (pair<pair<int, pair<int, int>>, pair<int, int>> v : adjc(x)) if(dis[v.first.first][v.first.second.first][v.first.second.second] > dis[x.first][x.second.first][x.second.second] + 1) {qu.push(v.first); dis[v.first.first][v.first.second.first][v.first.second.second] = dis[x.first][x.second.first][x.second.second] + 1; par[v.first] = make_pair(x, v.second);}\r\n    }\r\n}   \r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    int a, b, c;\r\n    cin >> a >> b >> c;\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        string s;\r\n        cin >> s;\r\n\r\n        for (int j = 1; j <= n; j++) \r\n            if (s[j - 1] != '*') adj[i].push_back(make_pair(j, s[j - 1])), colors[make_pair(i, j)] = s[j - 1];\r\n    }\r\n    pair<int, pair<int, int>> st;\r\n    st.first = a;\r\n    st.second.first = b;\r\n    st.second.second = c;\r\n    bfs(st);\r\n    pair<int, pair<int, int>> best;\r\n    int mi = INF;\r\n    for (int i = 1; i <= 3; i++)\r\n    {\r\n        for (int j = 1; j <= 3; j++)\r\n        {\r\n            for (int k = 1; k <= 3; k++) \r\n            {\r\n                if (i != j && i != k && j != k) \r\n                {\r\n                    if (dis[i][j][k] < mi)\r\n                    {\r\n                        pair<int, pair<int, int>> newhalatNode;\r\n                        newhalatNode.first = i;\r\n                        newhalatNode.second.first = j;\r\n                        newhalatNode.second.second = k;\r\n                        mi = dis[i][j][k], best = newhalatNode;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (mi == INF) {cout << -1 << endl; return;}\r\n    cout << mi << endl;\r\n    pair<int, pair<int, int>> last = best;\r\n    while (last.first != st.first || last.second.first != st.second.first || last.second.second != st.second.second)\r\n    {\r\n        cout << par[last].second.first << \" \" << par[last].second.second << endl;\r\n        last = par[last].first;\r\n    }\r\n}\r\n\r\nint main() {\r\n    sui;\r\n    int tc = 1;\r\n    // cin >> tc;\r\n    for (int t = 1; t <= tc; t++) {\r\n        solve();\r\n    }\r\n}"
}