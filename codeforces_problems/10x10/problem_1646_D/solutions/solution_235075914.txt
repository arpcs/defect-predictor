{
    "id": 235075914,
    "contestId": 1646,
    "creationTimeSeconds": 1701359330,
    "relativeTimeSeconds": 5930,
    "problem": {
        "contestId": 1646,
        "index": "D",
        "name": "Weight the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1646,
        "members": [
            {
                "handle": "_3bdo"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1701353400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 6451200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define all(a) a.begin(), a.end()\r\n\r\nconst int N = 2e5 + 1;\r\nvector<int> tree[N];\r\nint degree[N], weight[N], n;\r\n\r\nvoid solve() {\r\n    cin >> n;\r\n    for (int i = 1; i < n; i++) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n\r\n        tree[u].push_back(v);\r\n        tree[v].push_back(u);\r\n\r\n        ++degree[u];\r\n        ++degree[v];\r\n    }\r\n\r\n    vector<pair<int, int>> nodes;\r\n    for (int node = 1; node <= n; node++)\r\n        nodes.push_back({degree[node], node});\r\n\r\n    sort(all(nodes));\r\n\r\n    int good = 0;\r\n    for (auto c:nodes) {\r\n        int node = c.second;\r\n        if (weight[node]) continue;\r\n\r\n        ++good;\r\n        ll sum = 0;\r\n        for (auto next : tree[node]) {\r\n            if (!weight[next]) weight[next] = 1;\r\n            sum += weight[next];\r\n        }\r\n        weight[node] = sum;\r\n    }\r\n    ll sum = 0;\r\n    for (int node = 1; node <= n; node++)\r\n        sum += weight[node];\r\n\r\n    cout << good << \" \" << sum << endl;\r\n    for (int node = 1; node <= n; node++)\r\n        cout << weight[node] << \" \";\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(NULL);\r\n    cin.tie(NULL), cout.tie(NULL);\r\n\r\n    int t = 1;\r\n    // cin >> t;\r\n    while (t--) solve();\r\n}"
}