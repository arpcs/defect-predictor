{
    "id": 227634807,
    "contestId": 848,
    "creationTimeSeconds": 1697009127,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 848,
        "index": "D",
        "name": "Shake It!",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2900,
        "tags": [
            "combinatorics",
            "dp",
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 848,
        "members": [
            {
                "handle": "cqbzdj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504272900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 102400,
    "source": "// LUOGU_RID: 128725373\n#include<bits/stdc++.h>\r\n#define LL long long\r\n#define mes(s, x) memset(s, x, sizeof s)\r\n#define Maxn 105\r\n#define mod 1000000007\r\nusing namespace std;\r\nLL read(){\r\n    char c = getchar();\r\n    while(!(c == '-' || ('0' <= c && c <= '9'))) c = getchar();\r\n    short flag = 1;\r\n    if(c == '-'){\r\n        flag = -1;\r\n        c = getchar();\r\n    }\r\n    LL tot = 0;\r\n    while('0' <= c && c <= '9'){\r\n        tot = 10 * tot + c - '0';\r\n        c = getchar();\r\n    }\r\n    return flag * tot;\r\n}\r\nLL inv[Maxn];\r\nint dp[Maxn][Maxn], dps[Maxn][Maxn], C[Maxn];\r\nint main(){\r\n    // freopen(\"party.in\", \"r\", stdin);\r\n    // freopen(\"party.out\", \"w\", stdout);\r\n    int n = read(), m = read() - 1;\r\n    if(n < m){\r\n        puts(\"0\");\r\n        return 0;\r\n    }\r\n    if(n == m){\r\n        puts(\"1\");\r\n        return 0;\r\n    }\r\n    inv[1] = 1;\r\n    for(int i = 2; i <= n; i++) inv[i] = mod - mod / i * inv[mod % i] % mod;\r\n    //\r\n    dp[0][0] = dps[0][0] = 1;\r\n    for(int i = 1; i <= n; i++){\r\n        for(int j = 1; j <= n; j++){\r\n            C[1] = 0;\r\n            for(int k = 0; k < i; k++){\r\n                C[1] = (C[1] + 1ll * dp[k][j - 1] * (dps[i - k - 1][j] + dps[i - k - 1][j - 1])) % mod;\r\n            }\r\n            for(int k = 2; i * k <= n && j * k <= n; k++) C[k] = 1ll * C[k - 1] * (C[1] + k - 1) % mod * inv[k] % mod;\r\n            for(int p = n; p >= i; p--){\r\n                for(int q = n; q >= j; q--){\r\n                    for(int o = 1; o * i <= p && o * j <= q; o++){\r\n                        dp[p][q] = (dp[p][q] + 1ll * dp[p - o * i][q - o * j] * C[o]) % mod;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for(int j = n; j >= 0; j--) dps[i][j] = (dp[i][j] + dps[i][j + 1]) % mod;\r\n    }\r\n    printf(\"%d\", dp[n][m]);\r\n    return 0;\r\n}"
}