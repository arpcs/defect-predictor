{
    "id": 200840205,
    "contestId": 1063,
    "creationTimeSeconds": 1680677938,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1063,
        "index": "D",
        "name": "Candies for Children",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "math"
        ]
    },
    "author": {
        "contestId": 1063,
        "members": [
            {
                "handle": "propane"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1539511500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<vector>\r\nusing namespace std;\r\nusing LL = long long;\r\n\r\nint main(){\r\n\r\n#ifdef LOCAL\r\n    freopen(\"data.in\", \"r\", stdin);\r\n    freopen(\"data.out\", \"w\", stdout);\r\n#endif\r\n\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ios::sync_with_stdio(0);\r\n\r\n    LL n, L, R, k;\r\n    cin >> n >> L >> R >> k;\r\n    LL len = (R - L + n) % n + 1;\r\n    if (k < len){\r\n        cout << -1 << '\\n';\r\n        return 0;\r\n    }\r\n    if (len == n){\r\n        auto check = [&](LL x){\r\n            return x >= n && x <= 2 * n;\r\n        };\r\n        LL ans = -1;\r\n        for(LL i = 1; i * i <= k; i++){\r\n            if (k % i == 0){\r\n                if (check(i)) ans = max(ans, i - n);\r\n                if (check(k / i)) ans = max(ans, k / i - n);\r\n            }\r\n        }\r\n        k++;\r\n        for(LL i = 1; i * i <= k; i++){\r\n            if (k % i == 0){\r\n                if (check(i)) ans = max(ans, i - n);\r\n                if (check(k / i)) ans = max(ans, k / i - n);\r\n            }\r\n        }        \r\n        cout << ans << '\\n';\r\n        return 0;\r\n    }\r\n\r\n    auto get = [&](LL L, LL R){\r\n        L = max(L, n), R = min(R, 2 * n);\r\n        if (L > R) return -1LL;\r\n        LL t = k / L;\r\n        LL l1 = L - 1, r1 = R;\r\n        while(l1 < r1){\r\n            LL mid = (l1 + r1 + 1) / 2;\r\n            if (k - mid * t >= len && k - mid * t - len + (k - mid * t != 2 * len) + n - len >= mid - n) l1 = mid;\r\n            else r1 = mid - 1;\r\n        }\r\n        LL l2 = L, r2 = R + 1;\r\n        while(l2 < r2){\r\n            LL mid = (l2 + r2) / 2;\r\n            if (k - mid * t <= 2 * len && k - mid * t - len <= mid - n) r2 = mid;\r\n            else l2 = mid + 1;\r\n        }\r\n        if (l2 > r1) return -1LL;\r\n        return r1;\r\n    };\r\n\r\n    LL ans = -1;\r\n    if (k >= len && k <= 2 * len){\r\n        ans = max(ans, n - len + k - len);\r\n        if (k != 2 * len) ans = max(ans, n - len + k - len + 1);\r\n    }\r\n    for(LL l = 1, r; l <= k; l = r + 1){\r\n        r = k / (k / l);\r\n        ans = max(ans, get(l, r) - n);\r\n    }\r\n    cout << ans << '\\n';\r\n    \r\n}"
}