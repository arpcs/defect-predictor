{
    "id": 223325763,
    "contestId": 453,
    "creationTimeSeconds": 1694684364,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 453,
        "index": "C",
        "name": "Little Pony and Summer Sun Celebration",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 453,
        "members": [
            {
                "handle": "3sFening"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1406907000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 24,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 4505600,
    "source": "// LUOGU_RID: 124684044\n/*\r\n         /\\_/\\\r\n    ____/ o o \\\r\n  /~____   v  /\r\n (______)__m_m)\r\n \r\n   A CUTE CAT\r\n*/\r\n \r\n#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\ninline int read() {\r\n\tint x = 0, f = 1;\r\n\tchar ch = getchar();\r\n\twhile (! isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\r\n\twhile (isdigit(ch)) { x = x * 10 + ch - 48; ch = getchar(); }\r\n\treturn x * f;\r\n}\r\n \r\nconst int maxn = 1e5 + 10;\r\n \r\nqueue<int> q; bool f[maxn], vis[maxn]; int s, n, m, en, h[maxn];\r\nstruct Node { int u, v, nxt; } e[maxn << 1];\r\n \r\nvoid add_edge(int u, int v) {\r\n\te[++ en] = Node {u, v, h[u]}, h[u] = en; }\r\n \r\nvoid dfs(int u) {\r\n\tq.push(u), f[u] ^= 1, vis[u] = 1;\r\n\tfor (int i = h[u]; i; i = e[i].nxt) {\r\n\t\tint v = e[i].v; if (vis[v]) continue;\r\n\t\tdfs(v), q.push(u), f[u] ^= 1;\r\n\t\tif (f[v]) q.push(v), q.push(u), f[v] ^= 1, f[u] ^= 1;\r\n\t}\r\n}\r\n \r\nint main() {\r\n\t\r\n\tn = read(), m = read();\r\n\tfor (int i = 1; i <= m; i ++) {\r\n\t\tint u = read(), v = read(); add_edge(u, v), add_edge(v, u); }\r\n\tfor (int i = 1; i <= n; i ++) if (f[i] = read()) s = i; dfs(s);\r\n\tfor (int i = 1; i <= n; i ++) if (!vis[i] && f[i]) return printf(\"-1\\n\"), 0;\r\n\t\r\n\tif (f[s]) q.pop(); printf(\"%zu\\n\", q.size()); \r\n\twhile (!q.empty()) printf(\"%d \", q.front()), q.pop();\r\n\t\r\n\treturn 0;\r\n}\r\n "
}