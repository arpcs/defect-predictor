{
    "id": 229095305,
    "contestId": 453,
    "creationTimeSeconds": 1697905961,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 453,
        "index": "C",
        "name": "Little Pony and Summer Sun Celebration",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 453,
        "members": [
            {
                "handle": "Bahamin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1406907000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1433600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\r\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }\r\nvoid dbg_out() { cerr << endl; }\r\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\r\n#ifdef LOCAL\r\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\r\n#else\r\n#define dbg(...)\r\n#endif\r\n\r\n#define ar array\r\n#define ll long long\r\n#define ld long double\r\n#define sze(x) ((int)x.size())\r\n#define all(a) (a).begin(), (a).end()\r\n#define sui cout.tie(NULL); cin.tie(NULL); ios_base::sync_with_stdio(false)\r\n#define mset(a, x) memset(a, x, sizeof(a))\r\ntypedef priority_queue <int, vector<int>, greater<int> > max_heap;\r\ntypedef priority_queue <int> min_heap;\r\nconst int MAX_N = 1e5 + 5;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll INF = 1e9;\r\nconst ld EPS = 1e-9;\r\n\r\nvector<int> adj[100005];\r\nbool odd[100005];\r\nvector<int> ans;\r\nbool mark[100005];\r\n\r\nvoid dfs(int u, int p)\r\n{\r\n    mark[u] = true;\r\n    if (p != 0 || adj[u].size()) ans.push_back(u), odd[u] ^= 1;\r\n    for (int v : adj[u]) if (!mark[v]) {dfs(v, u); ans.push_back(u); odd[u] ^= 1;}\r\n\r\n    if (odd[u] && p != 0) {ans.push_back(p); ans.push_back(u); odd[u] ^= 1; odd[p] ^= 1;}\r\n}\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n\r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        int a, b;\r\n        cin >> a >> b;\r\n\r\n        adj[a].push_back(b);\r\n        adj[b].push_back(a);\r\n    }\r\n\r\n    for (int i = 0; i < n; i++) cin >> odd[i];\r\n    dfs(1, 0);\r\n    cout << ans.size() << endl;\r\n    for (int x : ans) cout << x << \" \";\r\n    cout << endl;\r\n}\r\n\r\nint main() {\r\n    sui;\r\n    int tc = 1;\r\n    // cin >> tc;\r\n    for (int t = 1; t <= tc; t++) {\r\n        solve();\r\n    }\r\n}"
}