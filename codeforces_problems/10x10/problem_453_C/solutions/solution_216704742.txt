{
    "id": 216704742,
    "contestId": 453,
    "creationTimeSeconds": 1690891324,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 453,
        "index": "C",
        "name": "Little Pony and Summer Sun Celebration",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 453,
        "members": [
            {
                "handle": "LuoLi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1406907000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 24,
    "timeConsumedMillis": 373,
    "memoryConsumedBytes": 6963200,
    "source": "#include <iostream> \r\n#include <vector>\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 10;\r\n\r\nint n, m, x[N];\r\nvector<int> g[N];\r\nvector<int> path;\r\nbool vis[N];\r\n\r\nvoid addNode(int v) {\r\n    path.push_back(v);\r\n    if(x[v] == 0) x[v] = 1;\r\n    else x[v] = 0;\r\n}\r\n\r\nvoid dfs(int v, int p = -1) {\r\n    vis[v] = true;\r\n    addNode(v);\r\n\r\n    for(auto to : g[v]) {\r\n        if(vis[to]) continue;\r\n        dfs(to, v);\r\n        addNode(v);\r\n    }\r\n\r\n    if(x[v] == 1) {\r\n        if(p != -1) {\r\n            addNode(p);\r\n            addNode(v);\r\n        } else {\r\n            x[v] = 0;\r\n            path.pop_back();\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    cin>>n>>m;\r\n    for(int i = 1; i<=m; i++) {\r\n        int u, v; cin>>u>>v;\r\n        g[u].push_back(v);\r\n        g[v].push_back(u);\r\n    }\r\n    for(int i = 1; i<=n; i++) {\r\n        cin>>x[i];\r\n    }\r\n    int root = -1;\r\n    for(int i = 1; i<=n; i++) {\r\n        if(x[i] == 1) {\r\n            root = i;\r\n        }\r\n    }\r\n    if(root == -1) {\r\n        cout<<\"0\\n\";\r\n        return 0;\r\n    }\r\n    dfs(root);\r\n    for(int i = 1; i<=n; i++) {\r\n        if(x[i] == 1) {\r\n            cout<<\"-1\\n\";\r\n            return 0;\r\n        }\r\n    }\r\n    cout<<path.size()<<\"\\n\";\r\n    for(auto node : path) cout<<node<<\" \";\r\n    return 0;\r\n}   "
}