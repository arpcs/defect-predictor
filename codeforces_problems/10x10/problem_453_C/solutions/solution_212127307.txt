{
    "id": 212127307,
    "contestId": 453,
    "creationTimeSeconds": 1688492791,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 453,
        "index": "C",
        "name": "Little Pony and Summer Sun Celebration",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 453,
        "members": [
            {
                "handle": "t0mmyn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1406907000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <vector>\r\n#include <string>\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <map>\r\n#include <set>\r\n#include <tuple>\r\n#include <utility>\r\n#define greedy int\r\n#define mindset main()\r\n\r\nusing namespace std;\r\n#define FOR(a,b,c) for(int a = b; a < (c); a++)\r\n#define FORR(a,b,c) for(int a = b; a > (c); a--)\r\n \r\n#define READ(x) long long x;cin>>x;\r\n#define READAR(x,n) vll x(n); FOR(readar,0,n) cin >> x[readar];\r\n\r\n#define speedfirst ios_base::sync_with_stdio(false); cin.tie(NULL); \r\n \r\ntypedef long long ll;\r\ntypedef vector<int> vi;\r\ntypedef vector<long long> vll;\r\ntypedef pair<ll,ll> pll;\r\ntypedef vector<pll> vpll;\r\ntypedef tuple<ll,ll,ll> tll;\r\n\r\nll MOD = 998244353;\r\n\r\n/*//Combinatorics mod MOD\r\nvll FACT(1e5);\r\n\r\nll fastexp(ll a, ll p) {\r\n    ll r = 1;\r\n    while(p) {\r\n        if(p&1) r = r*a % MOD;\r\n        a = a*a % MOD;\r\n        p >>= 1;\r\n    }\r\n    return r;\r\n}\r\n\r\nll modinv(ll x) {\r\n    return fastexp(x,MOD-2);\r\n}\r\n\r\nvoid DOFACTS() {\r\n    FACT[0] = 1;\r\n    FOR(i,1,FACT.size()) {\r\n        FACT[i] = i*FACT[i-1] % MOD;\r\n    }\r\n}\r\n\r\nll gcd(ll a, ll b) {\r\n   if (b == 0)\r\n   return a;\r\n   return gcd(b, a % b);\r\n}\r\n*/\r\n\r\n//segment tree, courtesy of https://cp-algorithms.com/data_structures/segment_tree.html\r\n/*\r\nint tree[4*200000];\r\nvoid build(int v, int tl, int tr) {\r\n    if (tl == tr) {\r\n        tree[v] = 0;\r\n    } else {\r\n        int tm = (tl + tr) / 2;\r\n        build(v*2, tl, tm);\r\n        build(v*2+1, tm+1, tr);\r\n        tree[v] = tree[v*2] + tree[v*2+1];\r\n    }\r\n}\r\nint sum(int v, int tl, int tr, int l, int r) {\r\n    if (l > r) \r\n        return 0;\r\n    if (l == tl && r == tr) {\r\n        return tree[v];\r\n    }\r\n    int tm = (tl + tr) / 2;\r\n    return sum(v*2, tl, tm, l, min(r, tm))\r\n           + sum(v*2+1, tm+1, tr, max(l, tm+1), r);\r\n}\r\nvoid update(int v, int tl, int tr, int pos, int new_val) {\r\n    if (tl == tr) {\r\n        tree[v] = new_val;\r\n    } else {\r\n        int tm = (tl + tr) / 2;\r\n        if (pos <= tm)\r\n            update(v*2, tl, tm, pos, new_val);\r\n        else\r\n            update(v*2+1, tm+1, tr, pos, new_val);\r\n        tree[v] = tree[v*2] + tree[v*2+1];\r\n    }\r\n}\r\nvoid add(int v, int tl, int tr, int pos, int new_val) {\r\n    if (tl == tr) {\r\n        tree[v] += new_val;\r\n    } else {\r\n        int tm = (tl + tr) / 2;\r\n        if (pos <= tm)\r\n            add(v*2, tl, tm, pos, new_val);\r\n        else\r\n            add(v*2+1, tm+1, tr, pos, new_val);\r\n        tree[v] = tree[v*2] + tree[v*2+1];\r\n    }\r\n}\r\n*/\r\n\r\n\r\nvector<vll> adj;\r\n\r\nvector<vll> children;\r\nvector<bool> vis;\r\nvll n1;\r\nvll X;\r\n\r\n\r\nvoid dfs(ll n) {\r\n    vis[n] = true;\r\n    if(X[n]) n1[n]++;\r\n    for(auto a: adj[n]) {\r\n        if(!vis[a]) {\r\n            children[n].push_back(a);\r\n            dfs(a);\r\n            n1[n] += n1[a];\r\n        }\r\n    }\r\n}\r\n\r\nvll path;\r\nvll nv;\r\n\r\nbool visit(ll n, bool pg) {\r\n    path.push_back(n);\r\n    nv[n]++;\r\n    ll r = 0;\r\n\r\n    vll cv;\r\n\r\n    for(auto c: children[n]) {\r\n        if(n1[c] > 0) {\r\n            cv.push_back(c);\r\n        }\r\n    }\r\n\r\n    for(auto c: cv) {\r\n        bool rc = visit(c, (pg && c == cv.back() && (nv[n]%2 == X[n])));\r\n        if(pg && c == cv.back() && (nv[n]%2 == X[n])) break;\r\n        path.push_back(n);\r\n        nv[n]++;\r\n        if(rc) {\r\n            visit(c, (pg && c == cv.back() && (nv[n]%2 == X[n])));\r\n            if(pg && c == cv.back() && (nv[n]%2 == X[n])) break;\r\n            path.push_back(n);\r\n            nv[n]++;\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    return nv[n]%2 != X[n];\r\n}\r\n\r\ngreedy mindset {\r\n    speedfirst;\r\n    READ(N); READ(M);\r\n\r\n    adj = vector<vll>(N);\r\n\r\n    FOR(i,0,M) {\r\n        READ(U); READ(V); U--; V--;\r\n        adj[U].push_back(V);\r\n        adj[V].push_back(U);\r\n    }\r\n\r\n    READAR(Y, N); X=Y;\r\n\r\n    // unwinnable if graph disconnected\r\n\r\n    children = vector<vll>(N);\r\n    vis = vector<bool>(N, false);\r\n    n1 = vll(N,0);\r\n    ll i0 = 0;\r\n    while(i0 < N && !X[i0]) i0++;\r\n    if(i0 == N) {cout << 0 << endl; return 0;}\r\n    dfs(i0);\r\n    FOR(i,0,N) if(X[i] && !vis[i]) {cout << -1 << endl; return 0;}\r\n\r\n\r\n    // now the problem is confirmed solvable.\r\n    nv = vll(N);\r\n\r\n    visit(i0, true);\r\n\r\n    cout << path.size() << endl;\r\n    for(auto p: path)\r\n        cout << p+1 << endl;\r\n\r\n}"
}