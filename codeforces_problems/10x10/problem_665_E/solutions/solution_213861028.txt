{
    "id": 213861028,
    "contestId": 665,
    "creationTimeSeconds": 1689400498,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 665,
        "index": "E",
        "name": "Beautiful Subarrays",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "divide and conquer",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 665,
        "members": [
            {
                "handle": "Luke_Cai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461164400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 2698,
    "memoryConsumedBytes": 364748800,
    "source": "#include <bits/stdc++.h>\r\n#define N 1000005\r\nusing namespace std;\r\nint cnt[N * 30], tire[N * 30][2], n, a[N], tot = 1, k;\r\nvoid Insert(int x) {\r\n    int now = 1;\r\n    for (int i = 30; i >= 0; i--) {\r\n        int y = x >> i & 1;\r\n        if (tire[now][y] == 0)\r\n            tire[now][y] = ++tot;\r\n        now = tire[now][y];\r\n        cnt[now]++;\r\n    }\r\n}\r\nint Query(int x, int k) {\r\n    int ans = 0;\r\n    int now = 1;\r\n    for (int i = 30; i >= 0; i--) {\r\n        int y = x >> i & 1;\r\n        if ((k >> i & 1))\r\n            now = tire[now][y ^ 1];\r\n        else {\r\n            ans += cnt[tire[now][y ^ 1]];\r\n            // if (cnt[tire[now][y ^ 1]])\r\n            //     cout << \"time 1: \" << cnt[tire[now][y ^ 1]] << ' ' << now << ' ' << i << ' ' << y << ' ' << tire[now][y] << endl;\r\n            now = tire[now][y];\r\n        }\r\n    }\r\n    // cout << cnt[now] << ' ' << now << endl;\r\n    ans += cnt[now];\r\n    return ans;\r\n}\r\nint main() {\r\n    ios::sync_with_stdio, cin.tie(0), cout.tie(0);\r\n    cin >> n >> k;\r\n    for (int i = 1; i <= n; i++) cin >> a[i];\r\n    for (int i = 1; i <= n; i++) a[i] ^= a[i - 1];\r\n    // cout << a[1] << endl;\r\n    long long ans = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n        Insert(a[i - 1]);\r\n        int x = Query(a[i], k);\r\n        // ans += Query(a[i], k);\r\n        ans += x;\r\n    }\r\n    // cout << cnt[0] << endl;\r\n    cout << ans << endl;\r\n}\r\n/*\r\nc = haha\r\nc = hahahaha\r\ne = hahahahahahahaha\r\nd = hhahahaha\r\n\r\n*/"
}