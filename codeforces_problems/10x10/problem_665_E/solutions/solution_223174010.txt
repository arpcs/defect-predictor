{
    "id": 223174010,
    "contestId": 665,
    "creationTimeSeconds": 1694587179,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 665,
        "index": "E",
        "name": "Beautiful Subarrays",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "divide and conquer",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 665,
        "members": [
            {
                "handle": "markywy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461164400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 1591,
    "memoryConsumedBytes": 420864000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int N = 1e6 + 5, D = 29;\r\ninline int read(){\r\n    int s = 0, f = 1;\r\n    char c = getchar();\r\n    while(c < '0' || c > '9') { if (c == '-') f = -1; c = getchar(); }\r\n    while(c >= '0' && c <= '9') {s = (s << 3) + (s << 1) + c - '0'; c = getchar(); }\r\n    return s * f;\r\n}\r\ninline void write(ll x){\r\n    if (x < 0) putchar('-'), x = -x;\r\n    if (x > 9) write(x / 10);\r\n    putchar(x % 10 + '0');\r\n}\r\nstruct node{\r\n    int cnt;\r\n    int ch[2];\r\n}trie[N * (D + 5)];\r\n#define cnt(p) trie[p].cnt\r\n#define ch(p, x) trie[p].ch[x]\r\nint ncnt, root[N];\r\nint n, k, a[N], pre[N];\r\ninline void insert(int &x, int y, int val, int len){\r\n    x = ++ncnt; trie[x] = trie[y]; ++cnt(x);\r\n    if (len < 0) return;\r\n    int nxt = (val >> len) & 1;\r\n    insert(ch(x, nxt), ch(y, nxt), val, len - 1);\r\n}\r\ninline int query(int x, int y, int cur, int val, int len){\r\n    if (cur + (1 << len + 1) - 1 < k) return 0;\r\n    if (cur >= k) return cnt(x) - cnt(y);\r\n    if (len < 0) return 0;\r\n    int nxt = ((val >> len) & 1) ^ 1; ll res = 0;\r\n    if (cnt(ch(x, nxt)) - cnt(ch(y, nxt))) \r\n        res += query(ch(x, nxt), ch(y, nxt), cur + (1 << len), val, len - 1);\r\n    if (cnt(ch(x, nxt ^ 1)) - cnt(ch(y, nxt ^ 1))) \r\n        res += query(ch(x, nxt ^ 1), ch(y, nxt ^ 1), cur, val, len - 1);\r\n    return res;\r\n}\r\nint main(){\r\n    n = read(), k = read();\r\n    ll ans = 0;\r\n    root[0] = ++ncnt;\r\n    for (int i = 1; i <= n; i++){\r\n        a[i] = read(), pre[i] = pre[i - 1] ^ a[i];\r\n        ans += query(root[i - 1], root[0], 0, pre[i], D) + (pre[i] >= k);\r\n        insert(root[i], root[i - 1], pre[i], D);\r\n    }\r\n    write(ans);\r\n    return 0;\r\n}"
}