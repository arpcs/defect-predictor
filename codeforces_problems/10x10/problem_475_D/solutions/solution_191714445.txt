{
    "id": 191714445,
    "contestId": 475,
    "creationTimeSeconds": 1675345048,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 475,
        "index": "D",
        "name": "CGCDSSQ",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 475,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1412514000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 732,
    "memoryConsumedBytes": 25804800,
    "source": "// author: Ali Safwat\n#include <bits/extc++.h>\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\n#define Caraxes  ios_base :: sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\n#define int long long int\n#define F first\n#define S second\nusing namespace std;\n// using namespace __gnu_pbds;\n\ntemplate< typename  T = int >\nstd :: vector < T > get(int size = 0, std :: istream& in_stream = std :: cin);\n\nconst int N = 1e5 + 5, LOG = 20;\nint gc[N][LOG],a[N],lg[N];\nstruct SparseTable{\n    void build( int n ) {\n        for (int i = 2; i <= n; ++i) {\n            lg[i] = lg[i >> 1] + 1;\n        }\n\n        for (int i = 0; i < n; ++i)\n            gc[i][0] = a[i];\n\n        for (int j = 1; j < LOG; ++j)\n            for (int i = 0; i + (1 << j) <= n; ++i)\n                gc[i][j] = __gcd(gc[i][j - 1], gc[i + (1 << (j - 1))][j - 1]);\n    }\n\n    int query( int L, int R ){\n        int j = lg[R - L + 1];\n        return __gcd(gc[L][j],gc[R - (1 << j) + 1][j]);\n    }\n\n}spt;\nvoid Dracarys() {\n    int n;\n    cin >> n;\n    for(int i = 0;i < n; ++i){\n        cin >> a[i];\n    }\n    spt.build(n);\n    map < int, int > mp;\n    for(int i = 0;i <n ; ++i){\n        int g = a[i], l,r,mid,ans,idx = i;\n        while(idx < n){\n            int l = idx, r = n  - 1, ans = 0;\n            while(l <= r){\n                mid = l + (r - l) / 2;\n                if(spt.query(i,mid) == g){\n                    l = mid + 1;\n                    ans = mid;\n                }else {\n                    r = mid - 1;\n                }\n            }\n            mp[g] += (ans - idx + 1);\n            idx = ans + 1;\n            g = spt.query(i,idx);\n        }\n\n    }\n    int q,x;\n    cin >> q;\n    while(q--){\n        cin >> x;\n        cout << mp[x] << '\\n';\n    }\n}\n\nsigned main()\n{\n    Caraxes;\n    int test = 1;\n  //  cin >> test;\n    while(test--) {\n        Dracarys();\n    }\n}\n\ntemplate< typename  T>\nstd :: vector < T > get(int size , std :: istream& in_stream){\n    if(!size){\n        in_stream >> size;\n    }\n    std :: vector < T > array(size);\n    for(auto& i : array)\n        in_stream >> i;\n    return array;\n}\n\t   \t\t\t\t\t \t \t\t \t\t\t\t\t   \t \t\t \t\t"
}