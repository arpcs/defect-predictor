{
    "id": 205950303,
    "contestId": 475,
    "creationTimeSeconds": 1684134248,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 475,
        "index": "D",
        "name": "CGCDSSQ",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 475,
        "members": [
            {
                "handle": "_SIR_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1412514000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n#define ll long long\r\n#define f first\r\n#define s second\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntemplate <typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n// order_of_key (k) : Number of items strictly smaller than k .\r\n// find_by_order(k) : K-th element in a set (counting from zero). 555\r\nconst int mx = 1e5 + 10;\r\nint sp[mx][22];\r\nint lg[mx];\r\nint q(int l, int r) {\r\n    int x = lg[r - l + 1];\r\n    return __gcd(sp[l][x], sp[r - (1 << x) + 1][x]);\r\n}\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL); cout.tie(NULL);\r\n    int n; cin >> n;\r\n    for (int i = 2; i <= n; i++)lg[i] = lg[i / 2] + 1;\r\n    for (int i = 1; i <= n; i++)cin >> sp[i][0];\r\n    for (int j = 1; j <= lg[n]; j++) {\r\n        for (int i = 1; i + (1 << (j - 1)) <= n; i++) {\r\n            sp[i][j] = __gcd(sp[i][j - 1], sp[i + (1 << (j - 1))][j - 1]);\r\n        }\r\n    }\r\n    map<int, ll>ans;\r\n    for (int i = n; i >= 1; i--) {\r\n        int j = i;\r\n        while (j <= n) {\r\n            int l = j, h = n, idx = j;\r\n            int y = q(i,j);\r\n            while (l <= h) {\r\n                int x = (l + h) >> 1;\r\n                if (y == q(i, x)) {\r\n                    idx = x, l = x + 1;\r\n                    continue;\r\n                }\r\n                h = x - 1;\r\n            }\r\n            ans[y] += 1LL * (idx - j + 1);\r\n            j = idx + 1;\r\n        }\r\n    }\r\n    int q; cin >> q;\r\n    while (q--) {\r\n        int x; cin >> x;\r\n        cout << ans[x] << '\\n';\r\n    }\r\n    return 0;\r\n}\r\n\u00a0"
}