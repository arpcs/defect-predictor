{
    "id": 206856760,
    "contestId": 475,
    "creationTimeSeconds": 1684769253,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 475,
        "index": "D",
        "name": "CGCDSSQ",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 475,
        "members": [
            {
                "handle": "Dr.rabi3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1412514000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 17510400,
    "source": "/*** \u0648\u064e\u0645\u064e\u0627 \u062a\u064e\u0648\u0652\u0641\u0650\u064a\u0642\u0650\u064a \u0625\u0650\u0644\u0651\u064e\u0627 \u0628\u0650\u0627\u0644\u0644\u0651\u064e\u0647\u0650 \u06da \u0639\u064e\u0644\u064e\u064a\u0652\u0647\u0650 \u062a\u064e\u0648\u064e\u0643\u0651\u064e\u0644\u0652\u062a\u064f \u0648\u064e\u0625\u0650\u0644\u064e\u064a\u0652\u0647\u0650 \u0623\u064f\u0646\u0650\u064a\u0628\u064f ***/\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#define ordered_set tree<int, null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>\r\n#define ll long long\r\n#define ld long double\r\n#define ed '\\n'\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define fixed(x) fixed<<setprecision(x)\r\n#define memo(dp,x) memset(dp,x,sizeof(dp))\r\n#define sumOf(a) (ll)((-1 + sqrt(8 * a + 1)) / 2)\r\n#define watch(x) cout << #x << \" = { \" << x << \" }\\n\";\r\n#define Good_Bay return\r\n\r\nconstexpr int mod = 1e9 + 7, oo = 0x3f3f3f3f, N = 2e5 + 5;\r\nconst double pi = acos(-1), EPS = 1e-7;\r\nconstexpr ll OO = 0x3f3f3f3f3f3f3f3f;\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n\r\ntemplate < typename T > istream& operator >> (istream& in, vector < T >& v) {\r\n    for (auto& x : v) in >> x;\r\n    return in;\r\n}\r\n\r\ntemplate < typename T > ostream& operator << (ostream& out, const vector < T >& v) {\r\n    for (const T& x : v) out << x << ' ';\r\n    return out;\r\n}\r\n\r\nvoid Accept() { // for VS code\r\n    ios_base::sync_with_stdio(false);\r\n    cout.tie(nullptr);\r\n    cin.tie(nullptr);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n}\r\nint dy[] = { 0 , 1 , -1 ,  0 , 1 , -1 ,  1 , -1 };\r\nint dx[] = { 1 , 0 ,  0 , -1 , 1 , -1 , -1 ,  1 };\r\ntemplate < typename T > class SparesTable {\r\n    vector<vector<T>>st;\r\n    vector<T>val;\r\n    vector<int> LOG;\r\n    int n;\r\n    T(*operation)(T, T);\r\n    int P;\r\npublic:\r\n    SparesTable(vector<T>& v, T (*func)(T, T)) {\r\n        operation = func;\r\n        n = v.size();\r\n        P = __lg(n) + 1;\r\n        st = vector<vector<T>>(P, vector<T>(n));\r\n        LOG = vector<int>(n + 1);\r\n        for (int i = 2;i <= n;i++) LOG[i] = LOG[i / 2] + 1;\r\n        for (int i = 0;i < n;i++) st[0][i] = v[i];\r\n        for (int p = 1;(1 << p) <= n;p++) {\r\n            for (int i = 0;i + (1 << p) <= n;i++) {\r\n                st[p][i] = operation(st[p - 1][i], st[p - 1][i + (1 << (p - 1))]);\r\n            }\r\n        }\r\n    }\r\n    T query(int l, int r) {\r\n        T ans;\r\n        for (int p = P - 1;p >= 0;p--) {\r\n            if ((1 << p) <= r - l + 1) {\r\n                ans += st[p][l];\r\n                l += (1 << p);\r\n            }\r\n        }\r\n        return ans;\r\n    }\r\n    T FQuery(int l, int r) {\r\n        int p2 = LOG[r - l + 1];\r\n        return operation(st[p2][l], st[p2][r - (1 << p2) + 1]);\r\n    }\r\n};\r\nvoid doWork(int tt) {\r\n    int n;\r\n    cin >> n;\r\n    vector<int>v(n);\r\n    unordered_map<int, ll>mp;\r\n    cin >> v;\r\n    SparesTable<int> stGCD(v, [](int a, int b) {return __gcd(a, b);});\r\n    for (int i = 0;i < n;i++) {\r\n        int l = i, r1 = i, r2 = i;\r\n        while (r1 < n) {\r\n            int g = stGCD.FQuery(l, r1);\r\n            int lo = r1, hi = n - 1, x = 0;\r\n            while (lo <= hi) {\r\n                int md = (lo + hi) >> 1;\r\n                if (stGCD.FQuery(l, md) == g)lo = md + 1, x = md;\r\n                else hi = md - 1;\r\n            }\r\n            r2 = x;\r\n            mp[g] += r2 - r1 + 1;\r\n            r1 = r2 + 1;\r\n        }\r\n    }\r\n    int q;\r\n    cin >> q;\r\n    while (q--) {\r\n        int x;\r\n        cin >> x;\r\n        cout << mp[x] << ed;;\r\n    }\r\n}\r\nint main() {\r\n    Accept();\r\n    int t = 1;\r\n    // cin >> t;\r\n    for (int i = 1;i <= t;i++) {\r\n        // cout << \"Case \"<<i<<\": \",\r\n        doWork(i);\r\n        // cout << ed;\r\n        if (i < t)cout << ed;\r\n    }\r\n    Good_Bay 0;\r\n}\r\n"
}