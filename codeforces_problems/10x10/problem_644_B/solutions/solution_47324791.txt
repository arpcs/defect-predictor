{
    "id": 47324791,
    "contestId": 644,
    "creationTimeSeconds": 1545385544,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 644,
        "index": "B",
        "name": "Processing Queries",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1700,
        "tags": [
            "*special",
            "constructive algorithms",
            "data structures",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 644,
        "members": [
            {
                "handle": "Playfair"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1458118800
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    static InputReader in = new InputReader(System.in);\r\n    static PrintWriter out = new PrintWriter(System.out);\r\n\r\n    public static void main(String[] args) {\r\n        new Solution().solve();\r\n        out.close();\r\n    }\r\n\r\n    static class Solution {\r\n        void solve() {\r\n            int n = in.nextInt();\r\n            int b = in.nextInt();\r\n            int[] t = new int[n];\r\n            int[] d = new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                t[i] = in.nextInt();\r\n                d[i] = in.nextInt();\r\n            }\r\n            Queue<Integer> queue = new LinkedList<>();\r\n            queue.add(0);\r\n            int waitingQuery = 1;\r\n            long time = t[0];\r\n            long[] e = new long[n];\r\n            Arrays.fill(e, -1);\r\n            while (!queue.isEmpty()) {\r\n                int currentQuery = queue.remove();\r\n                time += d[currentQuery];\r\n                e[currentQuery] = time;\r\n                while (waitingQuery < n && t[waitingQuery] < time) {\r\n                    if (queue.size() < b) {\r\n                        queue.add(waitingQuery);\r\n                    }\r\n                    waitingQuery++;\r\n                }\r\n                if (queue.isEmpty() && waitingQuery < n) {\r\n                    queue.add(waitingQuery);\r\n                    time = t[waitingQuery];\r\n                }\r\n            }\r\n            for (int i = 0; i < n; i++) {\r\n                out.printf(\"%d \", e[i]);\r\n            }\r\n            out.println();\r\n        }\r\n    }\r\n\r\n    static class InputReader {\r\n        BufferedReader reader;\r\n        StringTokenizer tokenizer;\r\n\r\n        InputReader(InputStream inStream) {\r\n            this.reader = new BufferedReader(new InputStreamReader(inStream));\r\n            this.tokenizer = null;\r\n        }\r\n\r\n        /**\r\n         * @return String the whole line (including all whitespaces)\r\n         *         or null line is empty\r\n         */\r\n        String nextLine() {\r\n            this.tokenizer = null;\r\n            String line = null;\r\n            try {\r\n                line = this.reader.readLine();\r\n            }\r\n            catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n            return line;\r\n        }\r\n\r\n        /**\r\n         * @return String next token, or null if the current line is empty\r\n         */\r\n        String next() {\r\n            while (this.tokenizer == null || !this.tokenizer.hasMoreTokens()) {\r\n                String line = nextLine();\r\n                if (line == null) return null;\r\n                this.tokenizer = new StringTokenizer(line);\r\n            }\r\n            return this.tokenizer.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        char nextChar() {\r\n            return next().charAt(0);\r\n        }\r\n    }\r\n}\r\n"
}