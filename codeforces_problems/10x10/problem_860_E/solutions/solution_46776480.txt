{
    "id": 46776480,
    "contestId": 860,
    "creationTimeSeconds": 1544302366,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 860,
        "index": "E",
        "name": "Arkady and a Nobody-men",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2700,
        "tags": [
            "data structures",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 860,
        "members": [
            {
                "handle": "sepehr81"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1505653500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 1107,
    "memoryConsumedBytes": 128307200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define F first\r\n#define S second\r\n#define ll long long\r\n#define ld long double\r\n#define clr(x) memset((x),0,sizeof(x))\r\n\r\nconst int MX = 5e5 + 10, MD = 1e9 + 7, LG = 20;\r\nint n, m, a[MX], ans2[MX], tmp, p[MX], par[MX][LG + 10], h[MX], st[MX], en[MX], Time, root;\r\nll res[MX], ans;\r\nvector <int> adj[MX], stage[MX];\r\nvector <pair <int, int>> lca;\r\nvoid pre_dfs(int v){\r\n    st[v] = Time++;\r\n    stage[h[v]].push_back(v);\r\n    for(int i = 1; i < LG; i++) par[v][i] = par[par[v][i - 1]][i - 1];\r\n    for(auto u: adj[v]){\r\n        if(u == p[v]) continue;\r\n        par[u][0] = v;\r\n        h[u] = h[v] + 1;\r\n        pre_dfs(u);\r\n    }\r\n    en[v] = Time;\r\n}\r\nbool ancestor(int u, int v){return st[u] <= st[v] && en[u] >= en[v];}\r\nint getpar(int v, int k){\r\n    for(int i = LG - 1; i >= 0; i--) if(k & (1 << i)) v = par[v][i];\r\n    return v;\r\n}\r\nint LCA(int u, int v){\r\n    for(int i = LG - 1; i >= 0; i--){\r\n        if(par[v][i] != par[u][i]) u = par[u][i], v = par[v][i];\r\n    }\r\n    return par[v][0];\r\n}\r\nvoid dfs(int v){\r\n    for(auto u: adj[v]){\r\n        res[u] = h[u] + ans2[u] + res[v];\r\n        dfs(u);\r\n    }\r\n}\r\nint main(){\r\n    scanf(\"%d\", &n);\r\n    for(int i = 1; i <= n; i++){\r\n        scanf(\"%d\", &p[i]);\r\n        if(p[i])adj[p[i]].push_back(i);\r\n        else root = i;\r\n    }\r\n    pre_dfs(root);\r\n    for(int i = 0; i < MX; i++){\r\n        if(!stage[i].size()) break;\r\n        for(int rev = 0; rev < 2; rev++){\r\n            stack <int> st;\r\n            lca.clear();\r\n            ans = 0;\r\n            for(int j = 0; j < stage[i].size() - 1; j++) lca.push_back({h[LCA(stage[i][j], stage[i][j + 1])] + 1, 1});\r\n            for(int j = 0; j < stage[i].size() - 1; j++){\r\n                while(!st.empty() && lca[st.top()].F > lca[j].F){\r\n                    lca[j].S += lca[st.top()].S;\r\n                    ans -= 1ll * lca[st.top()].F * lca[st.top()].S;\r\n                    st.pop();\r\n                }\r\n                ans += 1ll * lca[j].F * lca[j].S;\r\n                ans2[stage[i][j + 1]] += ans;\r\n                st.push(j);\r\n            }\r\n            reverse(stage[i].begin(), stage[i].end());\r\n        }\r\n    }\r\n    dfs(root);\r\n    for(int i = 1; i <= n; i++) printf(\"%lld \", res[i]);\r\n\r\n\r\n\r\n}\r\n"
}