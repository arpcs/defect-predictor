{
    "id": 58429747,
    "contestId": 98,
    "creationTimeSeconds": 1565176906,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 98,
        "index": "A",
        "name": "Help Victoria the Wise",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "implementation"
        ]
    },
    "author": {
        "contestId": 98,
        "members": [
            {
                "handle": "adityagupta1089"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1311346800
    },
    "programmingLanguage": "Haskell",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 102400,
    "source": "import Data.List\n\nmain :: IO ()\nmain = do\n    vals <- getLine\n    print $ getCnt vals\n\ngetCnt xs = length . nubBy (cubeEq) . perms $ xs\n    where\n        perms :: Eq a => [a] -> [[a]]\n        perms [x] = [[x]]\n        perms xs = concatMap (\\x -> map (x:) (perms (removeFirst x xs))) xs\n        removeFirst :: Eq a => a -> [a] -> [a]\n        removeFirst x (y:ys)\n            | x == y = ys\n            | otherwise = y : removeFirst x ys\n\ncubeEq xs ys = any (==ys) (eqs xs)\n    where\n        -- z axis\n        eqs :: [Char] -> [[Char]]\n        eqs [f,b,l,r,u,d] =\n            concatMap eqs' [\n                [f,b,u,d,r,l],\n                [f,b,r,l,d,u],\n                [f,b,d,u,r,l],\n                [f,b,l,r,u,d]\n            ]\n        -- x axis\n        eqs' :: [Char] -> [[Char]]\n        eqs' [f,b,l,r,u,d] =\n            concatMap eqs'' [\n                [f,b,l,r,u,d],\n                [d,u,l,r,f,b],\n                [b,f,l,r,d,u],\n                [u,d,l,r,b,f]\n            ]\n        -- y axis\n        eqs'' :: [Char] -> [[Char]]\n        eqs'' [f,b,l,r,u,d] = [\n                [f,b,l,r,u,d],\n                [r,l,f,b,u,d],\n                [b,f,r,l,u,d],\n                [l,r,b,f,u,d]\n            ]\n"
}