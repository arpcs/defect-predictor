{
    "id": 227970035,
    "contestId": 1476,
    "creationTimeSeconds": 1697166805,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1476,
        "index": "E",
        "name": "Pattern Matching",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "bitmasks",
            "data structures",
            "dfs and similar",
            "graphs",
            "hashing",
            "sortings",
            "strings"
        ]
    },
    "author": {
        "contestId": 1476,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1611930900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 49,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 22835200,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int n, m, k;\n    cin >> n >> m >> k;\n\n    vector<vector<int>> G(n);\n    vector<int> deg(n);\n    map<string, int> mp;\n\n    for (int i = 0; i < n; ++i)\n    {\n        string s;\n        cin >> s;\n        mp[s] = i;\n    }\n\n    for (int i = 0; i < m; ++i)\n    {\n        string s;\n        int val;\n        cin >> s >> val;\n        bool flag = false;\n        --val;\n        for (int i = 0; i < 1 << k; ++i)\n        {\n            string ns = s;\n            for (int j = 0; j < k; ++j)\n                if (i >> j & 1)\n                    ns[j] = '_';\n\n            auto it = mp.find(ns);\n            if (it != mp.end())\n            {\n                if (it->second == val)\n                {\n                    flag = true;\n                }\n                else\n                {\n                    G[val].emplace_back(it->second);\n                    ++deg[it->second];\n                }\n            }\n        }\n        if (!flag)\n        {\n            cout << \"NO\" << endl;\n            return 0;\n        }\n    }\n\n    queue<int> q;\n    for (int i = 0; i < n; ++i)\n        if (deg[i] == 0)\n            q.emplace(i);\n    vector<int> topo;\n    while (not q.empty())\n    {\n        int v = q.front();\n        q.pop();\n        topo.emplace_back(v);\n        for (int u : G[v])\n            if (--deg[u] == 0)\n                q.emplace(u);\n    }\n    if ((int)topo.size() < n)\n    {\n        cout << \"NO\" << endl;\n        return 0;\n    }\n    cout << \"YES\" << endl;\n    for (int v : topo)\n    {\n        cout << v + 1 << \" \";\n    }\n    cout << endl;\n}\n \t\t\t \t\t\t  \t \t\t\t \t  \t \t  \t \t\t\t"
}