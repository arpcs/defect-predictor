{
    "id": 72039885,
    "contestId": 1297,
    "creationTimeSeconds": 1582897728,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1297,
        "index": "F",
        "name": "Movie Fan",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1297,
        "members": [
            {
                "handle": "armoking"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1582810500
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 512000,
    "source": "import java.io.*\r\nimport java.util.*\r\nimport kotlin.math.*\r\n \r\nclass Pr {\r\n    var a = 0\r\n    var b = 0\r\n}\r\n \r\nfun Solve() {\r\n    val n = readInt()\r\n    val m = readInt()\r\n    val addAction = HashMap<Int, ArrayDeque<Int>>()\r\n    val remAction = HashMap<Int, ArrayDeque<Int>>()\r\n    val set = TreeSet<Int>()\r\n    val a = IntArray(n)\r\n    val b = IntArray(n)\r\n    for (i in range(n)) {\r\n        a[i] = readInt()\r\n        b[i] = readInt()\r\n        if (addAction[a[i]] == null) {\r\n            addAction[a[i]] = ArrayDeque()\r\n        }\r\n        if (remAction[b[i]] == null) {\r\n            remAction[b[i]] = ArrayDeque()\r\n        }\r\n        addAction[a[i]]!!.add(i)\r\n        remAction[b[i]]!!.add(i)\r\n        set.add(a[i])\r\n    }\r\n    var d = 0\r\n    val pq = PriorityQueue<Int>()\r\n    val ans = IntArray(n)\r\n    var x = 0\r\n    while (true) {\r\n        if (addAction.containsKey(x)) {\r\n            for (value in addAction[x]!!) {\r\n                pq.add(b[value])\r\n            }\r\n        }\r\n        var curm = m\r\n        while (curm-- > 0) {\r\n            if (pq.isEmpty()) break\r\n            val cur = pq.poll()\r\n            d = max(d, x - cur)\r\n            val index = remAction[cur]!!.pollLast()\r\n            ans[index] = x\r\n        }\r\n        if (pq.isNotEmpty()) {\r\n            x++\r\n        } else {\r\n            val it = set.higher(x) ?: break\r\n            x = it\r\n        }\r\n    }\r\n    out.print(d.toString() + \"\\n\")\r\n    for (i in range(n)) {\r\n        out.print(ans[i].toString() + \" \")\r\n    }\r\n    out.print(\"\\n\")\r\n}\r\n \r\nfun solve() {\r\n    var t = readInt();\r\n    while (t-- > 0) {\r\n        Solve()\r\n    }\r\n}\r\n \r\n// INPUT-OUTPUT\r\nval fileName = \"\"\r\nvar reader = BufferedReader(InputStreamReader(System.`in`))\r\nvar out = PrintWriter(System.out)\r\nfun readLine() = reader.readLine()\r\nval __inputData__ = ArrayDeque<String>()\r\nfun readString(): String {\r\n    while (__inputData__.isEmpty()) __inputData__.addAll(readLine().split(\" \"))\r\n    return __inputData__.pollFirst()\r\n}\r\n \r\nfun readInt() = readString()!!.toInt()\r\nfun readLong() = readString()!!.toLong()\r\nfun readDouble() = readString()!!.toDouble()\r\nfun readIntArray() = readLine()!!.split(\" \").map { it.toInt() }.toIntArray()\r\nfun readLongArray() = readLine()!!.split(\" \").map { it.toLong() }.toLongArray()\r\n/////////////////////\r\n \r\n// SORTS\r\nfun RadixSort(f: LongArray): LongArray {\r\n    return RadixSort(f, f.size)\r\n}\r\n \r\nfun RadixSort(f: LongArray, n: Int): LongArray {\r\n    var f = f\r\n    var to = LongArray(n)\r\n    val b = IntArray(65537)\r\n    run {\r\n        Arrays.fill(b, 0)\r\n        for (i in 0 until n) b[1 + (f[i] and 0xffff).toInt()]++\r\n        for (i in 1..65536) b[i] += b[i - 1]\r\n        for (i in 0 until n) to[b[(f[i] and 0xffff).toInt()]++] = f[i]\r\n        val d = f\r\n        f = to\r\n        to = d\r\n    }\r\n    run {\r\n        Arrays.fill(b, 0)\r\n        for (i in 0 until n) b[1 + (f[i] ushr 16 and 0xffff).toInt()]++\r\n        for (i in 1..65536) b[i] += b[i - 1]\r\n        for (i in 0 until n) to[b[(f[i] ushr 16 and 0xffff).toInt()]++] = f[i]\r\n        val d = f\r\n        f = to\r\n        to = d\r\n    }\r\n    run {\r\n        Arrays.fill(b, 0)\r\n        for (i in 0 until n) b[1 + (f[i] ushr 32 and 0xffff).toInt()]++\r\n        for (i in 1..65536) b[i] += b[i - 1]\r\n        for (i in 0 until n) to[b[(f[i] ushr 32 and 0xffff).toInt()]++] = f[i]\r\n        val d = f\r\n        f = to\r\n        to = d\r\n    }\r\n    run {\r\n        Arrays.fill(b, 0)\r\n        for (i in 0 until n) b[1 + (f[i] ushr 48 and 0xffff).toInt()]++\r\n        for (i in 1..65536) b[i] += b[i - 1]\r\n        for (i in 0 until n) to[b[(f[i] ushr 48 and 0xffff).toInt()]++] = f[i]\r\n        val d = f\r\n        f = to\r\n        to = d\r\n    }\r\n    if (f.last() < 0) {\r\n        var itr1 = 0\r\n        var itr2 = 0\r\n        val positive = LongArray(n)\r\n        val negative = LongArray(n)\r\n        for (i in range(n)) {\r\n            if (f[i] < 0) {\r\n                negative[itr1++] = f[i]\r\n            } else {\r\n                positive[itr2++] = f[i]\r\n            }\r\n        }\r\n        for (i in range(itr1)) {\r\n            f[i] = negative[i]\r\n        }\r\n        for (i in range(itr2)) {\r\n            f[i + itr1] = positive[i]\r\n        }\r\n    }\r\n    return f\r\n}\r\n \r\nfun RadixSort(f: IntArray): IntArray {\r\n    return RadixSort(f, f.size)\r\n}\r\n \r\nfun RadixSort(f: IntArray, n: Int): IntArray {\r\n    var f = f\r\n    var to = IntArray(n)\r\n    val b = IntArray(65537)\r\n    run {\r\n        Arrays.fill(b, 0)\r\n        for (i in 0 until n) b[1 + (f[i] and 0xffff).toInt()]++\r\n        for (i in 1..65536) b[i] += b[i - 1]\r\n        for (i in 0 until n) to[b[(f[i] and 0xffff).toInt()]++] = f[i]\r\n        val d = f\r\n        f = to\r\n        to = d\r\n    }\r\n    run {\r\n        Arrays.fill(b, 0)\r\n        for (i in 0 until n) b[1 + (f[i] ushr 16 and 0xffff).toInt()]++\r\n        for (i in 1..65536) b[i] += b[i - 1]\r\n        for (i in 0 until n) to[b[(f[i] ushr 16 and 0xffff).toInt()]++] = f[i]\r\n        val d = f\r\n        f = to\r\n        to = d\r\n    }\r\n    if (f.last() < 0) {\r\n        var itr1 = 0\r\n        var itr2 = 0\r\n        val positive = IntArray(n)\r\n        val negative = IntArray(n)\r\n        for (i in range(n)) {\r\n            if (f[i] < 0) {\r\n                negative[itr1++] = f[i]\r\n            } else {\r\n                positive[itr2++] = f[i]\r\n            }\r\n        }\r\n        for (i in range(itr1)) {\r\n            f[i] = negative[i]\r\n        }\r\n        for (i in range(itr2)) {\r\n            f[i + itr1] = positive[i]\r\n        }\r\n    }\r\n    return f\r\n}\r\n//////////////////////\r\n \r\n// PYTHON STYLE\r\nfun range(n: Int) = 0 until n\r\n/////////////////////\r\n \r\nfun main() {\r\n    if (!fileName.equals(\"\")) {\r\n        reader = BufferedReader(InputStreamReader(FileInputStream(fileName + \".in\")))\r\n        out = PrintWriter(FileOutputStream(fileName + \".out\"))\r\n    }\r\n    solve()\r\n    out.close()\r\n}"
}