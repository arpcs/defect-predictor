{
    "id": 211580177,
    "contestId": 117,
    "creationTimeSeconds": 1688107944,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 117,
        "index": "E",
        "name": "Tree or not Tree",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2900,
        "tags": [
            "data structures",
            "divide and conquer",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 117,
        "members": [
            {
                "handle": "vansx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1316790000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 17203200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=1e5+10;\r\nint n,m,Q,u,v,x,y,t,idx,tot,sx,sy,fg,ring[2][N],val[N<<2],tag[N<<2],dfn[N],son[N],siz[N],dep[N],fa[N],top[N],ok[2][N],f[20][N];\r\nstruct Edge{\r\n\tint v,nxt;\r\n}e[N*2];\r\nint head[N],ne;\r\ninline void add_edge(int u,int v){e[ne]={v,head[u]};head[u]=ne++;}\r\nvoid predfs(int x){\r\n\tdfn[x]=++tot;\r\n\tfor(int i=head[x];i!=-1;i=e[i].nxt){\r\n\t\tint v=e[i].v;if(v==fa[x])continue;\r\n\t\tif(!dfn[v]){\r\n\t\t\tdep[v]=dep[x]+1;fa[v]=x;predfs(v);\r\n\t\t}else if(dfn[v]>dfn[x]){\r\n\t\t\tsx=v;sy=x;\r\n\t\t\tfor(;v!=x;v=fa[v]){ring[0][++idx]=v;ok[0][v]=idx;}\r\n\t\t\tring[0][++idx]=x;ok[0][x]=idx;\r\n\t\t}\r\n\t}\r\n}\r\ninline int lca(int x,int y){\r\n\twhile(top[x]!=top[y]){\r\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\r\n\t\tx=fa[top[x]];\r\n\t\t//cout<<x<<\" \"<<y<<endl;\r\n\t}if(dep[x]>dep[y])return y;\r\n\treturn x;\r\n}\r\nvoid dfs1(int x){\r\n\tsiz[x]=1;son[x]=-1;\r\n\tfor(int i=head[x];i!=-1;i=e[i].nxt){\r\n\t\tint v=e[i].v;if(dep[v]!=dep[x]+1)continue;\r\n\t\tdfs1(v);siz[x]+=siz[v];\r\n\t\tif(son[x]==-1||siz[v]>siz[son[x]])son[x]=v;\r\n\t}\r\n}\r\nvoid dfs2(int x,int pre){\r\n\tdfn[x]=++tot;top[x]=pre;\r\n\tif(son[x]==-1)return;\r\n\tdfs2(son[x],pre);\r\n\tfor(int i=head[x];i!=-1;i=e[i].nxt){\r\n\t\tint v=e[i].v;if(dep[v]!=dep[x]+1||v==son[x])continue;\r\n\t\tdfs2(v,v);\r\n\t}\r\n}\r\ninline void pushup(int o){val[o]=val[o<<1]+val[o<<1|1];}\r\ninline void pushdown(int o,int l,int r){\r\n\tif(tag[o]==0)return;\r\n\tint mid=(l+r)>>1;\r\n\ttag[o<<1]^=1;tag[o<<1|1]^=1;\r\n\tval[o<<1]=(mid-l+1)-val[o<<1];\r\n\tval[o<<1|1]=(r-mid)-val[o<<1|1];\r\n\ttag[o]=0;\r\n}\r\nvoid update(int o,int l,int r,int ql,int qr){\r\n\tif(ql<=l&&r<=qr){\r\n\t\ttag[o]^=1;val[o]=(r-l+1)-val[o];\r\n\t\treturn;\r\n\t}\r\n\tint mid=(l+r)>>1;pushdown(o,l,r);\r\n\tif(ql<=mid)update(o<<1,l,mid,ql,qr);\r\n\tif(qr>mid)update(o<<1|1,mid+1,r,ql,qr);\r\n\tpushup(o);\r\n}\r\nint query(int o,int l,int r,int ql,int qr){\r\n\tif(ql<=l&&r<=qr)return val[o];\r\n\tint mid=(l+r)>>1,ret=0;pushdown(o,l,r);\r\n\tif(ql<=mid)ret+=query(o<<1,l,mid,ql,qr);\r\n\tif(qr>mid)ret+=query(o<<1|1,mid+1,r,ql,qr);\r\n\treturn ret;\r\n}\r\nvoid tree_update(int x,int y){\r\n\t//cout<<x<<\" \"<<y<<\" ##\\n\";\r\n\twhile(top[x]!=top[y]){\r\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\r\n\t\t//cout<<dfn[top[x]]<<\" \"<<dfn[x]<<endl;\r\n\t\tupdate(1,1,n,dfn[top[x]],dfn[x]);x=fa[top[x]];\r\n\t}\r\n\tif(dep[x]==dep[y])return;\r\n\tif(dep[x]>dep[y])swap(x,y);\r\n\t//cout<<dfn[son[x]]<<\" \"<<dfn[y]<<endl;\r\n\tupdate(1,1,n,dfn[son[x]],dfn[y]);\r\n}\r\nint tree_query(int x,int y){\r\n\tint ans=0;\r\n\twhile(top[x]!=top[y]){\r\n\t\tif(dep[top[x]]<dep[top[y]])swap(x,y);\r\n\t\tans+=query(1,1,n,dfn[top[x]],dfn[x]);x=fa[top[x]];\r\n\t}\r\n\tif(dep[x]==dep[y])return ans;\r\n\tif(dep[x]>dep[y])swap(x,y);\r\n\tans+=query(1,1,n,dfn[son[x]],dfn[y]);\r\n\treturn ans;\r\n}\r\nint T,tmp;\r\ninline void solve(int x,int y){\r\n\tint z=lca(x,y),tz=z;int l=dep[x]+dep[y]-dep[z]*2;\r\n\tz=lca(x,sx);int tx=dep[x]+dep[sx]-dep[z]*2;\r\n\tz=lca(y,sy);tx+=dep[y]+dep[sy]-dep[z]*2;\r\n\tz=lca(x,sy);int ty=dep[x]+dep[sy]-dep[z]*2;\r\n\tz=lca(y,sx);ty+=dep[y]+dep[sx]-dep[z]*2;\r\n\ttx++;ty++; \r\n\tz=lca(x,y);\r\n\t//cout<<tx<<\" \"<<ty<<\" @@\\n\";\r\n\tif(tx>ty)swap(sx,sy),t^=1;\r\n\t//cout<<ok[t][x]<<endl;\r\n\tif(l<min(tx,ty)){tree_update(x,y);return;}\r\n\tif(l>min(tx,ty)){fg^=1;tree_update(x,sx);tree_update(y,sy);return;}\r\n\tif(!ok[t][x]&&!ok[t][y]&&!ok[t][z]){\r\n\t\tint tz=lca(sx,y);\r\n\t\tif(tz==x){\r\n\t\t\ttree_update(x,sx);\r\n\t\t\tx=sx;\r\n\t\t}\r\n\t\ttz=lca(x,sy);\r\n\t\tif(tz==y){\r\n\t\t\ttree_update(y,sy);\r\n\t\t\ty=sy;\r\n\t\t}\r\n\t}\r\n\t//if(x==1&&y==10)cout<<\"!!DSFFS\\n\";\r\n\t//cout<<x<<\" \"<<y<<endl;\r\n\tz=lca(x,y);\r\n\tif(x==z){\r\n\t\tint fx,fy;\r\n\t\tif(ok[t][x]==0){\r\n\t\t\tint k=dep[y]-dep[x];\r\n\t\t\tint xx=y;\r\n\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\tif(ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t}\r\n\t\t\ttree_update(x,xx);\r\n\t\t\tx=xx;\r\n\t\t\tfx=ring[t][idx];\r\n\t\t\tfy=ring[t][ok[t][x]+1];\r\n\t\t}else{\r\n\t\t\tfx=fa[x];\r\n\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\tfy=ring[t][ok[t][x]+1];\r\n\t\t}\r\n\t\t//cout<<fx<<\" \"<<fy<<\" !!\\n\";\r\n\t\tif(fx>fy)tree_update(x,y);\r\n\t\telse{fg^=1;tree_update(x,sx);tree_update(y,sy);} \r\n\t}else if(y==z){\r\n\t\tint fx,fy;\r\n\t\tif(ok[t][x]==0){\r\n\t\t\tint k=dep[x]-dep[y];\r\n\t\t\tint xx=x;\r\n\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\tif(!ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t}\r\n\t\t\txx=f[0][xx];\r\n\t\t\ttree_update(x,xx);\r\n\t\t\tx=xx;\r\n\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\telse fx=ring[t][ok[t][x]-1];\r\n\t\t\tfy=fa[x];\r\n\t\t}else{\r\n\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\telse fx=ring[t][ok[t][x]-1];\r\n\t\t\tfy=fa[x];\r\n\t\t}\r\n\t\tif(fx>fy)tree_update(x,y);\r\n\t\telse{fg^=1;tree_update(x,sx);tree_update(y,sy);} \r\n\t}else{\r\n\t\tif((ok[t][x]==0)&&(ok[t][y]==0)){\r\n\t\t\tint k=dep[x]-dep[z];\r\n\t\t\tint xx=x;\r\n\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\tif(!ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t}\r\n\t\t\tif(xx!=z)xx=f[0][xx];\r\n\t\t\ttree_update(x,xx);\r\n\t\t\tx=xx;\r\n\t\t\tk=dep[y]-dep[z];\r\n\t\t\txx=y;\r\n\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\tif(!ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t}\r\n\t\t\tif(xx!=z)xx=f[0][xx];\r\n\t\t\ttree_update(y,xx);\r\n\t\t\ty=xx;\r\n\t\t\tint fx,fy;\r\n\t\t\tif(dep[x]<dep[y]){\r\n\t\t\t\tif(ok[t][x]==0){\r\n\t\t\t\t\tint k=dep[y]-dep[x];\r\n\t\t\t\t\tint xx=y;\r\n\t\t\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\t\t\tif(ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttree_update(x,xx);\r\n\t\t\t\t\tx=xx;\r\n\t\t\t\t\tfx=ring[t][idx];\r\n\t\t\t\t\tfy=ring[t][ok[t][x]+1];\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfx=fa[x];\r\n\t\t\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\t\t\tfy=ring[t][ok[t][x]+1];\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(ok[t][x]==0){\r\n\t\t\t\t\tint k=dep[x]-dep[y];\r\n\t\t\t\t\tint xx=x;\r\n\t\t\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\t\t\tif(!ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t\t\t}\r\n\t\t\t\t\txx=f[0][xx];\r\n\t\t\t\t\ttree_update(x,xx);\r\n\t\t\t\t\tx=xx;\r\n\t\t\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\t\t\telse fx=ring[t][ok[t][x]-1];\r\n\t\t\t\t\tfy=fa[x];\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\t\t\telse fx=ring[t][ok[t][x]-1];\r\n\t\t\t\t\tfy=fa[x];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(fx>fy)tree_update(x,y);\r\n\t\t\telse{fg^=1;tree_update(x,sx);tree_update(y,sy);} \r\n\t\t\treturn;\r\n\t\t}if(ok[t][x]){\r\n\t\t\ttree_update(y,z);\r\n\t\t\ty=z;\r\n\t\t\tint fx,fy;\r\n\t\t\tif(ok[t][x]==0){\r\n\t\t\t\tint k=dep[x]-dep[y];\r\n\t\t\t\tint xx=x;\r\n\t\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\t\tif(!ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t\t}\r\n\t\t\t\txx=f[0][xx];\r\n\t\t\t\ttree_update(x,xx);\r\n\t\t\t\tx=xx;\r\n\t\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\t\telse fx=ring[t][ok[t][x]-1];\r\n\t\t\t\tfy=fa[x];\r\n\t\t\t}else{\r\n\t\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\t\telse fx=ring[t][ok[t][x]-1];\r\n\t\t\t\tfy=fa[x];\r\n\t\t\t}\r\n\t\t\tif(fx>fy)tree_update(x,y);\r\n\t\t\telse{fg^=1;tree_update(x,sx);tree_update(y,sy);} \r\n\t\t\treturn;\r\n\t\t}\r\n\t\ttree_update(x,z);\r\n\t\tx=z;\r\n\t\tint fx,fy;\r\n\t\tif(ok[t][x]==0){\r\n\t\t\tint k=dep[y]-dep[x];\r\n\t\t\tint xx=y;\r\n\t\t\tfor(int i=19;i>=0;i--){\r\n\t\t\t\tif((1<<i)>k)continue;\r\n\t\t\t\tif(ok[t][f[i][xx]])xx=f[i][xx];\r\n\t\t\t}\r\n\t\t\ttree_update(x,xx);\r\n\t\t\tx=xx;\r\n\t\t\tfx=ring[t][idx];\r\n\t\t\tfy=ring[t][ok[t][x]+1];\r\n\t\t}else{\r\n\t\t\tfx=fa[x];\r\n\t\t\tif(ok[t][x]==1)fx=ring[t][idx];\r\n\t\t\tfy=ring[t][ok[t][x]+1];\r\n\t\t}\r\n\t\t//cout<<fx<<\" \"<<fy<<endl;\r\n\t\tif(fx>fy)tree_update(x,y);\r\n\t\telse{fg^=1;tree_update(x,sx);tree_update(y,sy);} \r\n\t}\r\n}\r\nint main(){\r\n\t//freopen(\"zood.in\",\"r\",stdin);\r\n\t//freopen(\"zood.out\",\"w\",stdout);\r\n\tmemset(head,-1,sizeof head);\r\n\tscanf(\"%d%d\",&n,&Q);m=n;\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tscanf(\"%d%d\",&u,&v);\r\n\t\tadd_edge(u,v);add_edge(v,u);\r\n\t}dep[1]=1;predfs(1);tot=0;\r\n\tfor(int i=1;i<=idx;i++)ring[1][idx-i+1]=ring[0][i];\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tif(ok[0][i]!=0)ok[1][i]=idx-ok[0][i]+1;\r\n\t}\r\n\tfor(int i=1;i<=n;i++)f[0][i]=fa[i];\r\n\tfor(int j=1;j<=19;j++){\r\n\t\tfor(int i=1;i<=n;i++)f[j][i]=f[j-1][f[j-1][i]];\r\n\t}\r\n\t//cout<<sx<<\" \"<<sy<<endl;\r\n\tdfs1(1);dfs2(1,1);\r\n\tfor(int i=1;i<=Q;i++){\r\n\t\tT=i;\r\n\t\tscanf(\"%d%d\",&x,&y);\r\n\t\tsolve(x,y);\r\n\t\tint ans=n-val[1]-fg+(fg&&tree_query(sx,sy)==idx-1);\r\n\t\t//cout<<val[1]<<\" !$##$\\n\";\r\n\t\tif(i==1)tmp=ans;\r\n\t\tprintf(\"%d\\n\",ans);\r\n\t}\r\n\treturn 0;\r\n}"
}