{
    "id": 83772413,
    "contestId": 1356,
    "creationTimeSeconds": 1592157253,
    "relativeTimeSeconds": 179653,
    "problem": {
        "contestId": 1356,
        "index": "B2",
        "name": "Decrement",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1356,
        "members": [
            {
                "handle": "Rotsor"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1591977600
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 1024000,
    "source": "namespace Solution {\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Arrays;\r\n\r\n    operation Inc_worker (register : Qubit[], count:Int) : Unit is Adj+Ctl {\r\n        if(count == Length(register)) {\r\n        } else \r\n        {\r\n            Controlled Inc_worker([register[count]], (register, count + 1));\r\n            X(register[count]);\r\n        }\r\n    }\r\n\r\n    operation Solve (register : LittleEndian) : Unit is Adj+Ctl {\r\n        Adjoint Inc_worker(register!, 0);\r\n    }\r\n}"
}