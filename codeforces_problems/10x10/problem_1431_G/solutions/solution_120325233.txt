{
    "id": 120325233,
    "contestId": 1431,
    "creationTimeSeconds": 1624395379,
    "relativeTimeSeconds": 8779,
    "problem": {
        "contestId": 1431,
        "index": "G",
        "name": "Number Deletion Game",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "*special",
            "dp",
            "games",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "lethan3"
            },
            {
                "handle": "PurpleCrayon"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 86353,
        "teamName": "kotlin gang",
        "ghost": false,
        "startTimeSeconds": 1624386600
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "import kotlin.Throws\r\nimport java.io.IOException\r\nimport kotlin.jvm.JvmStatic\r\nimport java.io.BufferedReader\r\nimport java.io.InputStreamReader\r\nimport java.util.StringTokenizer\r\nimport java.util.Arrays\r\n\r\n    var len = 0\r\n    var moves = 0\r\n\r\n    fun dp(r: Int, moves: Int, dp: Array<LongArray>, pref: LongArray, array: LongArray): Long {\r\n        if (moves * 2 > r + 1) return Long.MIN_VALUE\r\n        //println(\"$r $moves\")\r\n        if (dp[r][moves] != -1L) return dp[r][moves]\r\n        return if (r + 1 == moves * 2) {\r\n            pref[moves * 2] - pref[moves] - (pref[moves] - pref[0]).also {\r\n                dp[r][moves] = it\r\n            }\r\n        } else {\r\n            if (moves == 0) return 0\r\n            var ans: Long = 0\r\n            var i = r - moves * 2\r\n            while (i < r - 1) {\r\n                //if (r - i * 2 - 1 < 0) break\r\n                if (i < 0) {\r\n                    i += 2\r\n                    continue\r\n                }\r\n                val add =\r\n                    pref[r + 1] - pref[(i + r) / 2 + 1] - (pref[(i + r) / 2 + 1] - pref[i + 1])\r\n                //println(\"$i $r $add\")\r\n                ans = Math.max(ans, dp(i, moves - (r - i) / 2, dp, pref, array) + add)\r\n                ans = Math.max(ans, dp(i, moves, dp, pref, array))\r\n                i += 2\r\n            }\r\n            if (r % 2 == 0) {\r\n                ans = Math.max(ans, dp(r - 1, moves, dp, pref, array))\r\n            }\r\n            ans.also { dp[r][moves] = it }\r\n        }\r\n    }\r\n\r\n    fun main(args: Array<String>) {\r\n        val br = BufferedReader(InputStreamReader(System.`in`))\r\n        var st = StringTokenizer(br.readLine())\r\n        len = st.nextToken().toInt()\r\n        moves = st.nextToken().toInt()\r\n        var array = LongArray(len)\r\n        var pref = LongArray(len + 1)\r\n        pref[0] = 0\r\n        st = StringTokenizer(br.readLine())\r\n        for (i in 0 until len) {\r\n            array[i] = st.nextToken().toInt().toLong()\r\n        }\r\n        Arrays.sort(array)\r\n        for (i in 0 until len) {\r\n            pref[i + 1] = pref[i] + array[i]\r\n        }\r\n        var dp = Array(len) { LongArray(len) }\r\n        for (i in 0 until len) {\r\n            for (j in 0 until len) {\r\n                dp[i][j] = -1\r\n            }\r\n        }\r\n        println(dp(len - 1, moves, dp, pref, array))\r\n    }\r\n"
}