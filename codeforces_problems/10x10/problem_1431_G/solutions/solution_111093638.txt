{
    "id": 111093638,
    "contestId": 1431,
    "creationTimeSeconds": 1616731347,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "G",
        "name": "Number Deletion Game",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "*special",
            "dp",
            "games",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Aced-by-B"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 72,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 2252800,
    "source": "import java.lang.AssertionError\r\n \r\nprivate fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readLong() = readLn().toLong() // single long\r\nprivate fun readDouble() = readLn().toDouble() // single double\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\nprivate fun readDoubles() = readStrings().map { it.toDouble() } // list of doubles\r\n \r\nprivate fun myAssert(x: Boolean) {\r\n    if (!x) {\r\n        throw AssertionError()\r\n    }\r\n}\r\n \r\nfun main(args: Array<String>) {\r\n    var (n, k) = readInts()\r\n    var a = readInts().sorted()\r\n    var dp = Array(n + 1) {IntArray(k + 1) {-1}}\r\n    dp[0][0] = 0\r\n    for (i in 0 until n) {\r\n        for (j in 0..k) {\r\n            if (dp[i][j] == -1) {\r\n                continue\r\n            }\r\n            dp[i + 1][j] = maxOf(dp[i + 1][j], dp[i][j])\r\n            var limit = minOf(k - j, (n - i) / 2)\r\n            var add = 0\r\n            for (x in 1..limit) {\r\n                add += a[i + 2 * x - 2]\r\n                add += a[i + 2 * x - 1]\r\n                add -= 2 * a[i + x - 1]\r\n                dp[i + 2 * x][j + x] = maxOf(dp[i + 2 * x][j + x], dp[i][j] + add)\r\n            }\r\n        }\r\n    }\r\n    println(dp[n][k])\r\n}"
}