{
    "id": 229952100,
    "contestId": 1774,
    "creationTimeSeconds": 1698378088,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1774,
        "index": "F2",
        "name": "Magician and Pigs (Hard Version)",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1774,
        "members": [
            {
                "handle": "Call_me_Eric"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1671287700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 196,
    "timeConsumedMillis": 686,
    "memoryConsumedBytes": 19251200,
    "source": "// LUOGU_RID: 131810712\n#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\ninline int read(){\r\n    int x = 0, f=  1;char ch = getchar();\r\n    while(ch < '0' || ch > '9'){if(ch == '-') f = -1;ch = getchar();}\r\n    while(ch >= '0' && ch <= '9'){x = (x << 1) + (x << 3) + (ch ^ 48);ch = getchar();}\r\n    return x * f;\r\n}\r\nconst int maxn = 8e5 + 10, mod = 998244353,maxx = 1e9;\r\nint n;\r\nint a[maxn], b[maxn];\r\n\r\nvector<int> vec;\r\nint pw[maxn];\r\n\r\nsigned main(){\r\n    n = read();int sum = 0;pw[0] = 1;\r\n    for(int i = 1;i <= n;i++){\r\n        pw[i] = pw[i - 1] << 1;pw[i] %= mod;\r\n        a[i] = read();if(a[i] != 3)b[i] = read();\r\n        if(a[i] == 2){sum += b[i];}sum = min(sum,maxx);\r\n        if(a[i] == 3){b[i] = sum;sum <<= 1;}sum = min(sum,maxx);\r\n    }\r\n    int ans = 0, times = 1;sum = 0;\r\n    for(int i = n;i;i--){\r\n        switch(a[i]){\r\n            case 1:{\r\n                int x = b[i] - sum, res = 1;if(x <= 0)break;\r\n                for(int i = 0;i < vec.size();i++){\r\n                    if(vec[i] < x){\r\n                        res = (res + pw[vec.size() - i - 1]) % mod;\r\n                        x -= vec[i];\r\n                    }\r\n                }\r\n                ans = (ans + res * times) % mod;\r\n                break;\r\n            }\r\n            case 2:{sum += b[i];break;}\r\n            case 3:{\r\n                if(b[i] >= maxx)break;\r\n                if(b[i] == 0){times <<= 1;times %= mod;break;}\r\n                vec.push_back(b[i]);\r\n                break;\r\n            }\r\n            default: break;\r\n        }\r\n    }\r\n    printf(\"%lld\\n\",ans);\r\n    return 0;\r\n}"
}