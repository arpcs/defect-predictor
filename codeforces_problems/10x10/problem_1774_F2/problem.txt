{
    "contestId": 1774,
    "index": "F2",
    "name": "Magician and Pigs (Hard Version)",
    "type": "PROGRAMMING",
    "points": 1000.0,
    "rating": 2700,
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "implementation"
    ],
    "desc": {
        "title": "F2. Magician and Pigs (Hard Version)",
        "statement": "<p><span class=\"tex-font-style-bf\">This is the hard version of the problem. The only difference between the two versions is the constraint on $$$n$$$ and $$$x$$$. You can make hacks only if both versions of the problem are solved.</span></p><p>Little09 has been interested in magic for a long time, and it's so lucky that he meets a magician! The magician will perform $$$n$$$ operations, each of them is one of the following three:</p><ul><li> $$$1\\ x$$$: Create a pig with $$$x$$$ Health Points. </li><li> $$$2\\ x$$$: Reduce the Health Point of all living pigs by $$$x$$$. </li><li> $$$3$$$: Repeat all previous operations. Formally, assuming that this is the $$$i$$$-th operation in the operation sequence, perform the first $$$i-1$$$ operations (including \"Repeat\" operations involved) in turn.</li></ul><p>A pig will die when its Health Point is less than or equal to $$$0$$$. </p><p>Little09 wants to know how many living pigs there are after all the operations. Please, print the answer modulo $$$998\\,244\\,353$$$.</p>",
        "inputSpecification": "<p>The first line contains a single integer $$$n$$$ ($$$1\\leq n\\leq 8\\cdot 10^5$$$) \u00a0\u2014 the number of operations.</p><p>Each of the following $$$n$$$ lines contains an operation given in the form described in the problem statement. It's guaranteed that $$$1\\leq x\\leq 10^9$$$ in operations of the first two types.</p>",
        "outputSpecification": "<p>Print a single integer \u00a0\u2014 the number of living pigs after all the operations, modulo $$$998\\,244\\,353$$$.</p>",
        "samples": [
            {
                "input": "\n4\n1 8\n2 3\n3\n3\n",
                "output": "\n2"
            },
            {
                "input": "\n6\n1 5\n1 6\n2 2\n3\n1 4\n3\n",
                "output": "\n5"
            },
            {
                "input": "\n12\n2 1\n1 15\n1 9\n3\n1 12\n2 2\n1 13\n3\n2 1\n1 9\n1 8\n3\n",
                "output": "\n17"
            }
        ],
        "note": "<p>In the first example, the operations are equivalent to repeating four times: create a pig with $$$8$$$ Health Points and then reduce the Health Points of all living pigs by $$$3$$$. It is easy to find that there are two living pigs in the end with $$$2$$$ and $$$5$$$ Health Points.</p>"
    }
}