{
    "id": 189173944,
    "contestId": 1307,
    "creationTimeSeconds": 1673677933,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "G",
        "name": "Cow and Exercise",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3100,
        "tags": [
            "flows",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "The_Greatest_Code"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 10444800,
    "source": "// LUOGU_RID: 99731680\n#include <bits/stdc++.h>\nusing namespace std;\nconst long long inf=1e14;\nint n,m,s,t,head[200010],tot=1,vis[200010],pre[200010],que;\nlong long dis[200010],inc[200010],maxflow,minval;\nstruct node{\n    int to,nex;\n    long long f,val;\n}e[200010];\nstruct fv{\n\tint f,v;\n};\nvector<fv> ans;\nqueue<int> q;\nvoid add(int u,int v,long long w,long long c){\n    e[++tot].to=v,e[tot].f=w,e[tot].val=c;\n    e[tot].nex=head[u],head[u]=tot;\n    e[++tot].to=u,e[tot].f=0,e[tot].val=-c;\n    e[tot].nex=head[v],head[v]=tot;\n}\nbool SPFA(){\n    for(int i=1;i<=n;i++){\n        dis[i]=inf;\n        vis[i]=0;\n    }\n    dis[s]=0;\n    vis[s]=1;\n    inc[s]=inf;\n    q.push(s);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop();\n        for(int i=head[u];i;i=e[i].nex){\n            int v=e[i].to;\n            if(e[i].f>0&&dis[v]>dis[u]+e[i].val){\n                dis[v]=dis[u]+e[i].val;\n                pre[v]=i;\n                inc[v]=min(inc[u],e[i].f);\n                if(!vis[v]){\n                    q.push(v);\n                    vis[v]=1;\n                }\n            }\n        }\n        vis[u]=0;\n    }\n    if(dis[t]!=inf) return true ;\n    return false ;\n}\nvoid update(){\n    int x=t;\n    while(x!=s){\n    \tint i=pre[x];\n    \te[i].f-=inc[t];\n    \te[i^1].f+=inc[t];\n    \tx=e[i^1].to;\n\t}\n\tmaxflow+=inc[t];\n\tminval+=dis[t]*inc[t];\n\t//cout<<maxflow<<' '<<minval<<endl;\n\tans.push_back((fv){maxflow,minval});\n}\nint main(){\n    cin>>n>>m;\n    s=1,t=n;\n    for(int i=1;i<=m;i++){\n        int u,v;\n        long long w;\n        scanf(\"%d%d%lld\",&u,&v,&w);\n        add(u,v,1,w);\n    }\n    while(SPFA()) update();\n    cin>>que;\n    for(int i=1;i<=que;i++){\n    \tint x;\n    \tdouble res=inf;\n    \tscanf(\"%d\",&x);\n    \tfor(int j=0;j<ans.size();j++){\n    \t\tres=min(res,1.0*(ans[j].v+x)/ans[j].f);\n\t\t}\n\t\tprintf(\"%.9lf\\n\",res);\n\t}\n    return 0;\n} "
}