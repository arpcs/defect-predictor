{
    "id": 167713608,
    "contestId": 1582,
    "creationTimeSeconds": 1660113663,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "qishui7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 607,
    "memoryConsumedBytes": 17612800,
    "source": "import os\r\nimport sys\r\nfrom collections import *\r\nfrom itertools import *\r\nfrom math import *\r\nfrom array import *\r\nfrom functools import lru_cache\r\nimport heapq\r\nimport bisect\r\nimport random\r\nimport re\r\n\r\nif sys.hexversion == 50924784:\r\n    sys.stdin = open('cfinput.txt')\r\nelse:\r\n    input = sys.stdin.readline\r\nMOD = 10 ** 9 + 7\r\n\r\n\r\ndef RI():\r\n    return map(int, input().split())\r\n\r\n\r\ndef RILST():\r\n    return list(RI())\r\n\r\n\r\ndef solve1(n, a):\r\n    a = a[::-1]  # \u9006\u5e8f\uff0c\u9898\u76ee\u8f6c\u5316\u6210\uff1a\u5b50\u6570\u7ec4\u957f\u5ea6+1\u9012\u589e\uff0c\u4f46\u6c42\u548c\u9012\u51cf\r\n    # print(a)\r\n    pre = list(accumulate(a, initial=0))\r\n    # print(pre)\r\n    m = int((1 + 8 * n) ** 0.5 - 1) // 2\r\n    f = [[0] * (n + 1) for _ in range(m + 2)]  # f[i][j]\u4ee3\u8868 \u4ece\u4ee5j\u4e3a\u7ed3\u5c3e\u7684\u524d\u7f00\u91cc\uff0c\u9009\u51fai\u4e2a\u5b50\u6570\u7ec4\uff0c\u6700\u540e\u4e00\u7ec4\u6570\u7ec4\u7684\u6700\u5927\u548c\uff08ij\u5747\u4ece1\u5f00\u59cb\uff09\r\n    f[0] = [inf] * (n + 1)\r\n    ans = 1\r\n    # print(f,m)\r\n    for i in range(1, m + 1):\r\n        if ans < i - 1:\r\n            return print(ans)\r\n        for j in range(i * (i + 1) // 2, n + 1):\r\n            f[i][j] = f[i][j - 1]\r\n            s = pre[j] - pre[j - i]\r\n            if s < f[i - 1][j - i]:\r\n                ans = i\r\n                f[i][j] = max(f[i][j], s)\r\n        # print(f)\r\n\r\n    print(ans)\r\n\r\n\r\ndef solve2(n, a):\r\n    a = a[::-1]  # \u9006\u5e8f\uff0c\u9898\u76ee\u8f6c\u5316\u6210\uff1a\u5b50\u6570\u7ec4\u957f\u5ea6+1\u9012\u589e\uff0c\u4f46\u6c42\u548c\u9012\u51cf\r\n    pre = list(accumulate(a, initial=0))\r\n    # print(pre)\r\n    m = int((1 + 8 * n) ** 0.5 - 1) // 2\r\n    f = [0] * (n + 1)  # f[i][j]\u4ee3\u8868 \u4ece\u4ee5j\u4e3a\u7ed3\u5c3e\u7684\u524d\u7f00\u91cc\uff0c\u9009\u51fai\u4e2a\u5b50\u6570\u7ec4\uff0c\u6700\u540e\u4e00\u7ec4\u6570\u7ec4\u7684\u6700\u5927\u548c\uff08ij\u5747\u4ece1\u5f00\u59cb\uff09\r\n    f = [inf] * (n + 1)\r\n    g = [0] * (n + 1)\r\n    ans = 1\r\n    # print(f,m)\r\n    for i in range(1, m + 1):\r\n        if ans < i - 1:\r\n            return print(ans)\r\n        g[i * (i + 1) // 2 - 1] = 0\r\n        for j in range(i * (i + 1) // 2, n + 1):\r\n            g[j] = g[j - 1]\r\n            s = pre[j] - pre[j - i]\r\n            if s < f[j - i]:\r\n                ans = i\r\n                g[j] = max(g[j], s)\r\n        f, g = g, f\r\n        # print(f,g)\r\n\r\n    print(ans)\r\n\r\n\r\ndef solve(n, a):\r\n    # \u9006\u5e8f\uff0c\u9898\u76ee\u8f6c\u5316\u6210\uff1a\u5b50\u6570\u7ec4\u957f\u5ea6+1\u9012\u589e\uff0c\u4f46\u6c42\u548c\u9012\u51cf\r\n    pre = list(accumulate(a[::-1], initial=0))\r\n    m = int((1 + 8 * n) ** 0.5 - 1) // 2  # \u957f\u5ea6\u4e3an\u7684\u6570\u7ec4\u6700\u591a\u80fd\u9009\u51fam\u7ec4\r\n    # f[i][j]\u4ee3\u8868 \u4ece\u4ee5j\u4e3a\u7ed3\u5c3e\u7684\u524d\u7f00\u91cc\uff0c\u9009\u51fai\u4e2a\u5b50\u6570\u7ec4\uff0c\u6700\u540e\u4e00\u7ec4\u6570\u7ec4\u7684\u6700\u5927\u548c\uff08ij\u5747\u4ece1\u5f00\u59cb\uff09\r\n    f = [inf] * (n + 1)  # f[0][j]\u90fd\u7f6eINF\uff0c\u56e0\u4e3a\u957f\u5ea6\u4e3a1\u7684\u6570\u7ec4\u65e0\u6c42\u548c\u4e0a\u9650\u8981\u6c42,\u8ba4\u4e3a\u957f\u5ea60\u7684\u6570\u7ec4\u6c42\u548c\u90fd\u662finf\r\n    g = [0] * (n + 1)  # \u5b9e\u6d4b\u6eda\u52a8\u6570\u7ec4\u65f6\u95f4\u4f18\u5316\u4e00\u5c0f\u534a\r\n\r\n    ans = 1\r\n    for i in range(1, m + 1):\r\n        if ans < i - 1:  # \u9009\u4e0d\u51fai-1\u7ec4\uff0c\u63d0\u524d\u9000\u51fa\r\n            return print(ans)\r\n\r\n        g[i * (i + 1) // 2 - 1] = 0  # \u957f\u5ea6\u4e0d\u591f\u9009\u4e0d\u51fa\u6765\uff0c\u7ed3\u5c3e\u6bb5\u6c42\u548c\u7f6e0\uff0c\u65b9\u4fbf\u8f6c\u79fb\r\n        for j in range(i * (i + 1) // 2, n + 1):\r\n            s = pre[j] - pre[j - i]\r\n            # if s < f[j - i]:  # \u672c\u6bb5\u7b26\u5408\u8981\u6c42\uff0c\u5c1d\u8bd5\u4ee5\u5b83\u7ed3\u5c3e\uff08\u4f5c\u4e3a\u7b2ci\u4e2a\u5b50\u6bb5\uff09\r\n            #     ans = i\r\n            g[j] = max(g[j-1], s if s < f[j - i] else 0)\r\n            if g[j]:\r\n                ans = i\r\n            # g[j] = g[j - 1]  # \u4ece\u524d\u7f00\u8f6c\u79fb\r\n            # s = pre[j] - pre[j - i]\r\n            # if s < f[j - i]:  # \u672c\u6bb5\u7b26\u5408\u8981\u6c42\uff0c\u5c1d\u8bd5\u4ee5\u5b83\u7ed3\u5c3e\uff08\u4f5c\u4e3a\u7b2ci\u4e2a\u5b50\u6bb5\uff09\r\n            #     ans = i\r\n            #     g[j] = max(g[j], s)\r\n\r\n            # s = pre[j] - pre[j - i]\r\n            # if s < f[j - i]:  # \u7b26\u5408\u8981\u6c42\uff0c\u5c1d\u8bd5\u4ee5\u672c\u6bb5\u7ed3\u5c3e\uff08\u4f5c\u4e3a\u7b2ci\u4e2a\u5b50\u6bb5\uff09\r\n            #     ans = i\r\n            #     g[j] = max(g[j - 1], s)  # \u4ece\u524d\u7f00\u8f6c\u79fb\r\n            # else:  # \u672c\u6bb5\u4e0d\u7b26\u8981\u6c42\uff0c\u4f9d\u7136\u4f7f\u7528\u4e4b\u524d\u7684\u6bb5\u4f5c\u4e3a\u7ed3\u5c3e\r\n            #     g[j] = g[j - 1]\r\n\r\n        f, g = g, f\r\n\r\n    print(ans)\r\n\r\n\r\nif __name__ == '__main__':\r\n    t, = RI()\r\n    for _ in range(t):\r\n        n, = RI()\r\n        a = RILST()\r\n        solve(n, a)\r\n"
}