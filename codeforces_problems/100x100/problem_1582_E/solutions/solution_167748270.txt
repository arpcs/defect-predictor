{
    "id": 167748270,
    "contestId": 1582,
    "creationTimeSeconds": 1660134173,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "ggghg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 1263,
    "memoryConsumedBytes": 476160000,
    "source": "import java.io.*;\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    static int N = 310;\r\n    static int n, m, k;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        FastScanner f = new FastScanner();\r\n        PrintWriter w = new PrintWriter(System.out);\r\n        int T = f.nextInt();\r\n        while (T-- > 0) {\r\n            int n = f.nextInt();\r\n            long[] arr = new long[n + 1], sum = new long[n + 1];\r\n            for (int i = 1; i <= n; i++) arr[i] = f.nextInt();\r\n            int max = 500;\r\n            long[][] dp = new long[n + 10][max + 10];\r\n            for (int i = 1; i <= n; i++) sum[i] = sum[i - 1] + arr[i];\r\n            for (int i = 0; i < dp.length; i++) {\r\n                Arrays.fill(dp[i], -1);\r\n            }\r\n            //dp[i][j] \u4e3a\u7b2ck\u7ec4 \u5e76\u4e14\u6700\u5de6\u8fb9\u90a3\u7ec4\u6700\u5927\u7684\u65b9\u6848\u6570\r\n            for (int i = 0; i < n + 10; i++) dp[i][0] = Long.MAX_VALUE;\r\n\r\n            for (int i = n; i >= 1; i--) {\r\n                for (int j = 1; j <= max; j++) {\r\n\r\n                    if (i + j - 1 <= n) {\r\n                        long now = sum[i + j - 1] - sum[i - 1];\r\n                        if (now < dp[i + j][j - 1]) {\r\n                            dp[i][j] = Math.max(dp[i][j], now);\r\n                        }\r\n                    }\r\n                    dp[i][j] = Math.max(dp[i][j], dp[i + 1][j]);\r\n                }\r\n            }\r\n            int ans = 0;\r\n            for (int j = 1; j <= max; j++) {\r\n                if (dp[1][j] != -1) ans = j;\r\n            }\r\n            w.println(ans);\r\n        }\r\n        w.flush();\r\n    }\r\n\r\n\r\n    static class Read {\r\n        BufferedReader bf;\r\n        StringTokenizer st;\r\n        BufferedWriter bw;\r\n\r\n        public Read() {\r\n            bf = new BufferedReader(new InputStreamReader(System.in));\r\n            st = new StringTokenizer(\"\");\r\n            bw = new BufferedWriter(new OutputStreamWriter(System.out));\r\n        }\r\n\r\n        public String nextLine() throws IOException {\r\n            return bf.readLine();\r\n        }\r\n\r\n        public String next() throws IOException {\r\n            while (!st.hasMoreTokens()) {\r\n                st = new StringTokenizer(bf.readLine());\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        public char nextChar() throws IOException {\r\n            return next().charAt(0);\r\n        }\r\n\r\n        public int nextInt() throws IOException {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        public double nextDouble() throws IOException {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        public float nextFloat() throws IOException {\r\n            return Float.parseFloat(next());\r\n        }\r\n\r\n        public byte nextByte() throws IOException {\r\n            return Byte.parseByte(next());\r\n        }\r\n\r\n        public short nextShort() throws IOException {\r\n            return Short.parseShort(next());\r\n        }\r\n\r\n        public BigInteger nextBigInteger() throws IOException {\r\n            return new BigInteger(next());\r\n        }\r\n\r\n        public void println(int a) throws IOException {\r\n            bw.write(String.valueOf(a));\r\n            bw.newLine();\r\n            return;\r\n        }\r\n\r\n        public void print(int a) throws IOException {\r\n            bw.write(String.valueOf(a));\r\n            return;\r\n        }\r\n\r\n        public void println(String a) throws IOException {\r\n            bw.write(a);\r\n            bw.newLine();\r\n            return;\r\n        }\r\n\r\n        public void print(String a) throws IOException {\r\n            bw.write(a);\r\n            return;\r\n        }\r\n\r\n        public void println(long a) throws IOException {\r\n            bw.write(String.valueOf(a));\r\n            bw.newLine();\r\n            return;\r\n        }\r\n\r\n        public void print(long a) throws IOException {\r\n            bw.write(String.valueOf(a));\r\n            return;\r\n        }\r\n\r\n        public void println(double a) throws IOException {\r\n            bw.write(String.valueOf(a));\r\n            bw.newLine();\r\n            return;\r\n        }\r\n\r\n        public void print(double a) throws IOException {\r\n            bw.write(String.valueOf(a));\r\n            return;\r\n        }\r\n    }\r\n\r\n    private static class FastScanner {\r\n        final private int BUFFER_SIZE = 1 << 16;\r\n        private DataInputStream din;\r\n        private byte[] buffer;\r\n        private int bufferPointer, bytesRead;\r\n\r\n        private FastScanner() throws IOException {\r\n            din = new DataInputStream(System.in);\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        private short nextShort() throws IOException {\r\n            short ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ') c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg) c = read();\r\n            do ret = (short) (ret * 10 + c - '0');\r\n            while ((c = read()) >= '0' && c <= '9');\r\n            if (neg) return (short) -ret;\r\n            return ret;\r\n        }\r\n\r\n        private int nextInt() throws IOException {\r\n            int ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ') c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg) c = read();\r\n            do ret = ret * 10 + c - '0';\r\n            while ((c = read()) >= '0' && c <= '9');\r\n            if (neg) return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            long ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ') c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg) c = read();\r\n            do ret = ret * 10 + c - '0';\r\n            while ((c = read()) >= '0' && c <= '9');\r\n            if (neg) return -ret;\r\n            return ret;\r\n        }\r\n\r\n        private char nextChar() throws IOException {\r\n            byte c = read();\r\n            while (c <= ' ') c = read();\r\n            return (char) c;\r\n        }\r\n\r\n        private String nextString() throws IOException {\r\n            StringBuilder ret = new StringBuilder();\r\n            byte c = read();\r\n            while (c <= ' ') c = read();\r\n            do {\r\n                ret.append((char) c);\r\n            } while ((c = read()) > ' ');\r\n            return ret.toString();\r\n        }\r\n\r\n        private void fillBuffer() throws IOException {\r\n            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);\r\n            if (bytesRead == -1) buffer[0] = -1;\r\n        }\r\n\r\n        private byte read() throws IOException {\r\n            if (bufferPointer == bytesRead) fillBuffer();\r\n            return buffer[bufferPointer++];\r\n        }\r\n    }\r\n}"
}