{
    "id": 167769365,
    "contestId": 1582,
    "creationTimeSeconds": 1660142130,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "yiyiyize"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 468,
    "memoryConsumedBytes": 406425600,
    "source": "#include <bits/stdc++.h>\r\n#define PII pair<int,int>\r\n#define ll long long\r\n\r\nusing namespace std;\r\n\r\nconst double eps = 1e-8;\r\nconst int maxn = 1e5 + 10;\r\nconst int mod = 1e9 + 7;\r\nconst int INF = 1<<30;\r\ninline void swap(int &x, int &y){x^=y^=x^=y;}\r\ninline int gcd(int a,int b) {return !b ? a : gcd(b,a%b);}\r\n\r\nll dp[maxn][505];\r\nll sum[maxn], a[maxn];\r\nint main(){\t\r\n    int T;\r\n    scanf(\"%d\", &T);\r\n    while(T--){\r\n        //memset(dp, 0, sizeof(dp));\r\n        int n;\r\n        scanf(\"%d\", &n);\r\n        int ans = 1;\r\n        for(int i = 1; i <= n; ++i){\r\n            scanf(\"%lld\", &a[i]);\r\n            for(int j = 0; j <= 500; ++j)dp[i][j] = 0;\r\n        }\r\n        for(int i = n; i >= 1; --i)\r\n            sum[i] = sum[i + 1] + a[i];\r\n        dp[n][1] = a[n];\r\n        for(int i = n - 1; i >= 1; --i){\r\n            dp[i][1] = max(dp[i + 1][1], a[i]);\r\n            for(int j = 2; j <= 500 && i + j <= n; ++j){\r\n                dp[i][j] = dp[i + 1][j];\r\n                if(dp[i+j][j-1]!=0 && sum[i] - sum[i+j] < dp[i+j][j-1]){\r\n                    dp[i][j] = max(dp[i][j], sum[i] - sum[i+j]);\r\n                    ans = max(ans, j);\r\n                } \r\n            }\r\n        }\r\n        printf(\"%d\\n\", ans);\r\n    }\r\n    return 0;\r\n}\r\n"
}