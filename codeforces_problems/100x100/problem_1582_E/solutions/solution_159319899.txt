{
    "id": 159319899,
    "contestId": 1582,
    "creationTimeSeconds": 1654242874,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "E",
        "name": "Pchelyonok and Segments",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures",
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "procodgok"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#pragma GCC optimize(\"Ofast\")\r\n#include <bits/stdc++.h>\r\n#define ll         long long int\r\n#define umap       unordered_map\r\n#define mod        1000000007ll\r\n#define pb         push_back\r\n#define all(x)     (x).begin(), (x).end()\r\n#define rall(x)    (x).rbegin(), (x).rend()\r\n#define MN(a,b,c)  min(a,min(b,c))\r\n#define MX(a,b,c)  max(a,max(b,c))\r\n#define pr1         pair<ll,ll>\r\n#define F          first\r\n#define S          second\r\n#define mP         make_pair\r\n#define f(i,n)     for(ll i=0;i<n;i++)\r\n#define f1(i,x,y)  for(ll i=x;i<=y;i++)\r\n#define f2(i,x,y)  for(ll i=x;i>=y;i--)\r\n#define yes        cout<<\"Yes\"<<\"\\n\"\r\n#define no         cout<<\"No\"<<\"\\n\"\r\n#define modsum(a,b)  ((a%mod)+(b%mod))%mod\r\n#define modpro(a,b)  ((a%mod)*(b%mod))%mod\r\n#define moddif(a,b)  ((a%mod)-(b%mod)+mod)%mod\r\n#define modsumt(a,b,c) modsum(a,modsum(b,c))\r\n//__builtin_popcount(x)\r\n//__builtin_parity(x)   =(number of set bits)%2\r\n//__builtin_clz(x)      to count the number of leading  zeroes \r\n//__builtin_ctz(x)      to count the number of trailing zeroes \r\n//__gcd(a,b)\r\n// Binary Search \r\n// TO AVOID GETTING INFINITE LOOP\r\n// mid = (l+r)/2      l=mid+1   r=mid\r\n// mid = (l+r+1)/2    l=mid     r=mid-1\r\n//std::cout << std::fixed; std::cout << std::setprecision(12); std::cout << z ;\r\nusing namespace std;\r\n/*void calc_pow2()\r\n{\r\n    pow2[0]=1;\r\n    for(ll i=1;i<63;i++) pow2[i]=2*pow2[i-1];\r\n}*/\r\nll modularExponentiation(ll x,ll n,ll M)\r\n{\r\n    ll result=1;\r\n    while(n>0)\r\n    {\r\n        if(n % 2 ==1)\r\n            result=modpro(result,x);\r\n        x=modpro(x,x);\r\n        n=n/2;\r\n    }\r\n    return result;\r\n}\r\nll binaryExponentiation(ll x,ll n)\r\n{\r\n    ll result=1.0;\r\n    while(n>0)\r\n    {\r\n        if(n % 2 ==1)\r\n            result=result * x;\r\n        x=x*x;\r\n        n=n/2;\r\n    }\r\n    return result;\r\n}\r\nll pow1(ll x,ll y)\r\n{\r\n    ll z=1;\r\n    while(y--){z=z*x;}\r\n    return z;\r\n}\r\nbool isprime(ll n)\r\n{\r\n    // Corner cases\r\n    if (n <= 1)\r\n        return false;\r\n    if (n <= 3)\r\n        return true;\r\n \r\n    // This is checked so that we can skip\r\n    // middle five numbers in below loop\r\n    if (n % 2 == 0 || n % 3 == 0)\r\n        return false;\r\n \r\n    for (ll i = 5; i * i <= n; i = i + 6)\r\n        if (n % i == 0 || n % (i + 2) == 0)\r\n            return false;\r\n \r\n    return true;\r\n}\r\n// Returns n^(-1) mod p \r\nll  modInverse(ll n, ll p) \r\n{ \r\n    return modularExponentiation(n, p - 2, p); \r\n} \r\nll check(ll x,ll y)\r\n{\r\n    ll z=1;\r\n    ll ans=0;\r\n    while(z<x){ans++;z*=y;}\r\n    return ans;\r\n}\r\nll count11bits(ll n)\r\n{\r\n    ll x=0;\r\n    while(n>0)\r\n    {\r\n        x++;\r\n        n=(n&(n-1));\r\n    }\r\n    return x;\r\n}\r\nll get_gcd(ll a,ll b)\r\n{\r\n   if(a<b) swap(a,b);\r\n   if(a==b || b==0) return a;\r\n   else     return get_gcd(b,a%b);\r\n}\r\n/*\r\n BFS\r\n vector <ll> visited(n+1,0);\r\n vector <ll>  parent(n+1);\r\n vector <ll>   level(n+1);\r\n queue <ll> q;\r\n q.push(1);\r\n visited[1]=1;\r\n level[1]=0;\r\n while(!q.empty())\r\n {\r\n      ll node = q.front();\r\n      q.pop();\r\n      for(auto z : v[node])\r\n      {\r\n         if(!visited[z])\r\n         {\r\n            level[z]=1+level[node];\r\n            parent[z]=node;\r\n            visited[z]=1;\r\n            q.push(z);\r\n         }\r\n      }\r\n }\r\n vector <pair<ll,ll>> lev_node(n);\r\n f(i,n) lev_node[i]={level[i+1],i+1};\r\n*/\r\n/*\r\n// DSU\r\nll parent[200005];\r\nll depth[200005];\r\nvoid set_values(ll n)\r\n{\r\n    for(ll i=1;i<=n;i++)\r\n    {\r\n        parent[i]=i;\r\n        depth[i]=0;\r\n    }\r\n}\r\n // Path Compression\r\nll find_Parent(ll node)\r\n{\r\n    if(node==parent[node])\r\n    {\r\n       return node;\r\n    } \r\n    return parent[node] = find_Parent(parent[node]);\r\n}\r\nvoid Union(ll u,ll v)\r\n{\r\n    u=find_Parent(u);\r\n    v=find_Parent(v);\r\n    if(depth[u]<depth[v])\r\n    {\r\n        parent[u] = v;\r\n    }\r\n    else if(depth[v]<depth[u])\r\n    {\r\n        parent[v] = u;\r\n    }\r\n    else \r\n    {\r\n        parent[v] = u;\r\n        // since Depth of u and v are same depth of u will increase by 1\r\n        depth[u]++;\r\n    }\r\n}*/\r\nint main()\r\n{\r\n ios_base::sync_with_stdio(false);\r\n cin.tie(NULL);\r\n ll t;cin>>t;\r\n while(t--)\r\n {\r\n     ll n;cin>>n;\r\n     vector <ll> pref(n,0);\r\n     for(ll i=0;i<n;i++)\r\n     {\r\n         cin>>pref[i];\r\n         if(i>0) pref[i]+=pref[i-1];\r\n     }\r\n     ll l=1,r=1e5;\r\n     ll k;\r\n     while(l<=r)\r\n     {\r\n        ll mid=(l+r)/2;\r\n        ll val=mid*mid+mid;val/=2;\r\n        if(val<=n)\r\n        {\r\n            k=mid;\r\n            l=mid+1;\r\n        }\r\n        else r=mid-1;\r\n     }\r\n     l=1,r=k;\r\n     k=1;\r\n     while(l<=r)\r\n     {\r\n        ll mid=(l+r)/2;\r\n        ll dp[n][mid+1];\r\n        memset(dp,0,sizeof(dp));\r\n        vector <ll> val(mid+1);\r\n        for(ll i=0;i<n;i++)\r\n        {\r\n            for(ll j=mid;j>=1;j--)\r\n            {\r\n               if((i+1)>=val[j])\r\n               {\r\n                  ll R=i,L=i-j+1;\r\n                  dp[i][j]=pref[R];\r\n                  if(L!=0) dp[i][j]-=pref[L-1];\r\n                  if(j!=mid)\r\n                  {\r\n                     if(dp[L-1][j+1]>0 && dp[L-1][j+1]<dp[i][j]) {}\r\n                     else                                        dp[i][j]=0;\r\n                  }\r\n                  if(i!=0 && dp[i-1][j]>0) dp[i][j]=min(dp[i][j],dp[i-1][j]);\r\n               }\r\n               else break;\r\n            }\r\n        }\r\n        if(dp[n-1][1]>0)\r\n        {\r\n            k=mid;\r\n            l=mid+1;\r\n        }\r\n        else r=mid-1;\r\n     }\r\n     cout<<k<<\"\\n\";\r\n }\r\n}"
}