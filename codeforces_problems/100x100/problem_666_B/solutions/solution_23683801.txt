{
    "id": 23683801,
    "contestId": 666,
    "creationTimeSeconds": 1484062612,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Jubair_2147483647"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 1326,
    "memoryConsumedBytes": 348672000,
    "source": "#include<cstdio>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<iostream>\r\n#include<cmath>\r\n#include<string>\r\n#include<map>\r\n#include<list>\r\n#include<queue>\r\n#include<utility>\r\n#include<sstream>\r\n#include<cstdlib>\r\n#include<cctype>\r\n#include<math.h>\r\n#include<set>\r\n#include<stack>\r\n#include<fstream>\r\n#include<numeric>\r\n#include<string>\r\n#include<vector>\r\n#include<iterator>\r\nusing namespace std;\r\nstruct edge{\r\n    short int node,val,save;\r\n    edge(){\r\n    node=0,val=0,save=0;\r\n    }\r\n   // node(int x,int y):x(x),y(y){}\r\n    bool operator < (const edge & p) const\r\n    {\r\n        return val>p.val;\r\n    }\r\n};\r\nvector<int>vc[3500];\r\nvector<edge>new_edge[3500],into[3500];\r\nshort int vis[3500],vis2[3500],level[3500],my[3500][3500],cnt[3500][3500];\r\nedge nd[3500][5];\r\nvoid make(int v,int w,int p)\r\n{\r\n    if(p>nd[v][1].val){\r\n            nd[v][3]=nd[v][2];\r\n       nd[v][2]=nd[v][1];\r\n    nd[v][1].val=p;\r\n    nd[v][1].node=w;\r\n    }\r\n    else if(p>nd[v][2].val){\r\n       nd[v][3]=nd[v][2];\r\n       nd[v][2].val=p;\r\n       nd[v][2].node=w;\r\n    }\r\n    else if(p>nd[v][3].val){\r\n        nd[v][3].val=p;\r\n        nd[v][3].node=w;\r\n    }\r\n}\r\nvoid dijk(int u)\r\n{\r\n    memset(vis,0,sizeof vis);\r\n    vis[u]=1;\r\n    level[u]=0;\r\n    queue<int>q;\r\n\r\n    q.push(u);\r\n    while(!q.empty()){\r\n        int v=q.front();\r\n        q.pop();\r\n        for(int i=0;i<vc[v].size();i++){\r\n            int w=vc[v][i];\r\n            if(vis[w]==0){\r\n                vis[w]=1;\r\n\r\n                level[w]=level[v]+1;\r\n              //   if(u==5&&w==6)cout<<level[6]<<endl;\r\n                my[u][w]=level[w];\r\n                make(u,w,level[w]);\r\n                q.push(w);\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\nint main()\r\n{\r\n    int i,j,k,l,m,n,ma=0,v1,v2,v3,v4,v,w;\r\n    cin>>n>>m;\r\n    for(i=1;i<=m;i++){\r\n        cin>>l>>k;\r\n        vc[l].push_back(k);\r\n    }\r\n    for(i=1;i<=n;i++)dijk(i);\r\n   // cout<<my[5][6]<<endl;\r\n    for(i=1;i<=n;i++){\r\n        for(j=1;j<=n;j++){\r\n            if(j==i||my[i][j]==0)continue;\r\n              edge pr;\r\n              pr=nd[j][1];\r\n              if(nd[j][1].node!=i&&nd[j][1].node){\r\n                pr.val+=my[i][j];\r\n                pr.save=j;\r\n                into[i].push_back(pr);\r\n              }\r\n               pr=nd[j][2];\r\n              if(nd[j][2].node!=i&&nd[j][2].node){\r\n                pr.val+=my[i][j];\r\n                pr.save=j;\r\n                into[i].push_back(pr);\r\n              }\r\n                pr=nd[j][3];\r\n              if(nd[j][3].node!=i&&nd[j][3].node){\r\n                pr.val+=my[i][j];\r\n                pr.save=j;\r\n                into[i].push_back(pr);\r\n              }\r\n        }\r\n    }\r\n  for(i=1;i<=n;i++)sort(into[i].begin(),into[i].end());\r\n  for(i=1;i<=n;i++){\r\n    memset(vis,0,sizeof vis);\r\n    memset(vis2,0,sizeof vis2);\r\n    for(j=0;j<into[i].size();j++){\r\n            v=into[i][j].save;\r\n            w=into[i][j].node;\r\n    if(cnt[v][w]==i)continue;\r\n    cnt[v][w]=i;\r\n    if(vis[w]==2)continue;\r\n    if(vis2[v]==2)continue;\r\n    vis[w]++;\r\n    vis2[v]++;\r\n        new_edge[i].push_back(into[i][j]);\r\n      if(new_edge[i].size()==10)break;\r\n    }\r\n  }\r\n  for(i=1;i<=n;i++){\r\n    for(j=1;j<=n;j++){\r\n        if(my[i][j]==0||i==j)continue;\r\n        for(k=0;k<new_edge[j].size();k++){\r\n            if(new_edge[j][k].save==i||new_edge[j][k].node==i)continue;\r\n            l=my[i][j]+new_edge[j][k].val;\r\n            if(l>ma){\r\n                ma=l;\r\n              //  cout<<i<<\" \"<<j<<\" \"<<new_edge[j][k].node<<\" \"<<new_edge[j][k].save<<\" \"<<my[i][j]<<\" \"<<new_edge[j][k].val<<endl;\r\n                v1=i,v2=j,v3=new_edge[j][k].save,v4=new_edge[j][k].node;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n  }\r\n//  cout<<ma<<endl;\r\n  cout<<v1<<\" \"<<v2<<\" \"<<v3<<\" \"<<v4<<endl;\r\n}\r\n"
}