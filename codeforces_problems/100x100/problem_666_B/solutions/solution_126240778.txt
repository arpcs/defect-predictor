{
    "id": 126240778,
    "contestId": 666,
    "creationTimeSeconds": 1629272109,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "luogu_bot4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 2167,
    "memoryConsumedBytes": 238284800,
    "source": "#include <cstdio>\r\n#include <cstring>\r\n#include <queue>\r\n#include <vector>\r\n#include <algorithm>\r\ntypedef std::pair<int ,int> PP;\r\nconst int INF = 0x7f7f7f7f;\r\nconst int N = 3005, M = 5005;\r\nint n, m, u, v;\r\nint idx;\r\nint head[N];\r\nint dis[N][N], vis[N];\r\nint ans[5];\r\nstd::vector<PP> p2[N], p3[N];\r\nstruct Edge { int to, nxt ; } edg[M];\r\nvoid addE(int fr, int to) {edg[idx] = (Edge){to, head[fr]}; head[fr] = idx++;}\r\nvoid bfs(int id)\r\n{\r\n    dis[id][id] = 0;\r\n    std::queue<int> q;\r\n    q.push(id);\r\n    while(!q.empty()){\r\n        int x = q.front(), y; q.pop();\r\n        for(int e=head[x]; e; e=edg[e].nxt){\r\n            y = edg[e].to;\r\n            if(dis[id][y] > dis[id][x] + 1){\r\n                dis[id][y] = dis[id][x] + 1;\r\n                if(vis[y] < id) vis[y] = id, q.push(y);\r\n            }\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    idx = 2;\r\n    memset(dis, 127, sizeof(dis));\r\n    scanf(\"%d%d\",&n,&m);\r\n    for(int i=1; i<=m ;i++){\r\n        scanf(\"%d%d\",&u,&v);\r\n        addE(u,v);\r\n    }\r\n    for(int i=1; i<=n; i++) bfs(i);\r\n    for(int i=1; i<=n; i++){\r\n        for(int j=1; j<=n; j++) if(i != j){\r\n            if(dis[j][i] != INF) p2[i].push_back(std::make_pair(dis[j][i], j));\r\n            if(dis[i][j] != INF) p3[i].push_back(std::make_pair(dis[i][j], j));\r\n        }\r\n        std::sort(p2[i].begin(), p2[i].end());\r\n        std::sort(p3[i].begin(), p3[i].end());\r\n    }\r\n    int A, B, C, D, capB, capC, iA, iD;\r\n    for(B=1; B<=n; B++){\r\n        capB = p2[B].size();\r\n        for(C=1; C<=n; C++) if(B != C && dis[B][C] != INF){\r\n            capC = p3[C].size();\r\n            for(iA=capB-1; iA>=0 && iA>=capB-3; iA--) {\r\n                A = p2[B][iA].second;\r\n                if(A == B || A == C) continue;\r\n                for(iD=capC-1; iD>=0 && iD>=capC-3; iD--){\r\n                    D = p3[C][iD].second;\r\n                    if(D == A || D == B || D == C) continue;\r\n                    if(ans[0] < dis[A][B] + dis[B][C] + dis[C][D]){\r\n                        ans[0] = dis[A][B] + dis[B][C] + dis[C][D];\r\n                        ans[1] = A, ans[2] = B, ans[3] = C, ans[4] = D;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    printf(\"%d %d %d %d\",ans[1], ans[2], ans[3], ans[4]);\r\n    return 0;\r\n}"
}