{
    "id": 178591456,
    "contestId": 666,
    "creationTimeSeconds": 1667141226,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Resory"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 36352000,
    "source": "// LUOGU_RID: 92296731\n#include <cstdio>\r\n#include <queue>\r\n\r\nconst int maxn = 3e3 + 5,maxm = 5e3 + 5;\r\n\r\nstruct Edge {\r\n    int v,g;\r\n    Edge(int to = 0,int nxt = 0): v(to),g(nxt) {}\r\n} edge[maxm]; int head[maxn];\r\nint n,m,tot,ans,ansa,ansb,ansc,ansd;\r\nint dis[maxn][maxn],node[maxn][3][2];\r\n\r\ntemplate < class T >\r\ninline T read() {\r\n#define gc c = getchar()\r\n    T d = 0; int f = 0,gc;\r\n    for(;c < 48 || c > 57;gc) f |= (c == '-');\r\n    for(;c > 47 && c < 58;gc) d = (d << 1) + (d << 3) + (c ^ 48);\r\n#undef gc\r\n    return f ? -d : d;\r\n}\r\n\r\ninline void addEdge(int u,int v) { edge[++ tot] = Edge(v,head[u]); head[u] = tot; }\r\n\r\ninline void bfs(int s) {\r\n    std::queue < int > q;\r\n    for(int i = 1;i <= n;i ++) dis[s][i] = (i != s) * 1e9;\r\n    q.push(s); int cnt = n;\r\n    for(int u;!q.empty();) {\r\n        u = q.front(); q.pop();\r\n        cnt --; if(cnt < 3) node[s][cnt][0] = u;\r\n        for(int v,i = head[u];i;i = edge[i].g) {\r\n            v = edge[i].v;\r\n            if(dis[s][v] == 1e9) dis[s][v] = dis[s][u] + 1,q.push(v);\r\n        }\r\n    }\r\n}\r\n\r\ninline void maxx(int& a,int b) { a = a > b ? a : b; }\r\n\r\nint main() {\r\n    n = read < int > (),m = read < int > ();\r\n    for(int u,v,i = 1;i <= m;i ++) {\r\n        u = read < int > (),v = read < int > ();\r\n        addEdge(u,v);\r\n    }\r\n    for(int i = 1;i <= n;i ++) bfs(i);\r\n    for(int i = 1;i <= n;i ++)\r\n        for(int j = 1;j <= n;j ++) {\r\n            for(int k = 0;k < 3;k ++)\r\n                if(dis[j][i] > dis[node[i][k][1]][i]) {\r\n                    for(int l = 2;l > k;l --) node[i][l][1] = node[i][l - 1][1];\r\n                    node[i][k][1] = j;\r\n                    break;\r\n                }\r\n        }\r\n    for(int b = 1;b <= n;b ++)\r\n        for(int c = 1;c <= n;c ++) {\r\n            if(b == c) continue;\r\n            for(int a,i = 0;i < 3;i ++) for(int d,j = 0;j < 3;j ++) {\r\n                a = node[b][i][1],d = node[c][j][0];\r\n                if(a == c || a == d || b == d) continue;\r\n                int cur = dis[a][b] + dis[b][c] + dis[c][d];\r\n                if(ans < cur) ans = cur,ansa = a,ansb = b,ansc = c,ansd = d;\r\n            }\r\n        }\r\n    printf(\"%d %d %d %d\\n\",ansa,ansb,ansc,ansd);\r\n    return 0;\r\n}"
}