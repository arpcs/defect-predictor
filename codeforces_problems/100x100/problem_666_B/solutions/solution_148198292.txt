{
    "id": 148198292,
    "contestId": 666,
    "creationTimeSeconds": 1646311118,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Ankit_332"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#pragma GCC optimize(\"O2\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define ll     long long\r\n#define test   int tt; cin>>tt; while(tt--)\r\n#define ff     first\r\n#define ss     second\r\n#define pb     push_back\r\n#define ppb    pop_back\r\n#define pf     push_front\r\n#define ppf    pop_front\r\n\r\ntemplate <typename T> using Ordered_Set_Tree =\r\n        tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate <typename T> using Ordered_Multiset_Tree =\r\n        tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\n///DEBUG\r\nvoid _Print(int t) {cerr << t;}\r\nvoid _Print(string t) {cerr << t;}\r\nvoid _Print(char t) {cerr << t;}\r\nvoid _Print(long long t) {cerr << t;}\r\nvoid _Print(double t) {cerr << t;}\r\nvoid _Print(unsigned long long t) {cerr << t;}\r\n\r\ntemplate <class T, class V> void _Print(pair <T, V> &p);\r\ntemplate <class T> void _Print(list <T> &v);\r\ntemplate <class T> void _Print(vector <T> &v);\r\ntemplate <class T, class V> void _Print(T *v, V sz);\r\ntemplate <class T, class V, class P> void _Print(T *v, V sz, P sm);\r\ntemplate <class T> void _Print(set <T> &v);\r\ntemplate <class T, class V> void _Print(map <T, V> &v);\r\ntemplate <class T> void _Print(multiset <T> &v);\r\n\r\ntemplate <class T, class V> void _Print(pair <T, V> &p) {cerr << \"{\"; _Print(p.ff); cerr << \",\"; _Print(p.ss); cerr << \"}\\n\\n\";}\r\ntemplate <class T> void _Print(list <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(vector <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V> void _Print(T *v, V sz) {cerr << \"[ \"; for(int i=0; i<sz; i++) {_Print(v[i]); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V, class P> void _Print(T *v, V sz, P sm) {cerr << \"[\\n\"; for(int i=0; i<sz; i++) { for(int j=0; j<sm; j++) {_Print(v[i][j]); cerr << \" \";} cerr << \"\\n\";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(set <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(multiset <T>& v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V> void _Print(map <T, V> &v) {cerr << \"[ \"; for (auto i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\n///DEBUG\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    int n, m;\r\n    cin>>n>>m;\r\n\r\n    vector<vector<int>> graph(n);\r\n\r\n    for(int i=0; i<m; i++)\r\n    {\r\n        int u, v;\r\n        cin>>u>>v;\r\n\r\n        u--, v--;\r\n\r\n        graph[u].pb(v);\r\n        //graph[v].pb(u);\r\n    }\r\n\r\n    set<pair<int, int>> distances[n];\r\n\r\n    int dist[8][8];\r\n    fill(dist[0], dist[0]+n*n, INT_MAX);\r\n\r\n\r\n\r\n    for(int i=0; i<n; i++)\r\n    {\r\n        queue<int> que;\r\n        dist[i][i] = 0;\r\n\r\n        que.push(i);\r\n\r\n        while(que.size())\r\n        {\r\n            auto u = que.front();\r\n            que.pop();\r\n\r\n            for(auto v: graph[u])\r\n            {\r\n                if(dist[i][v] == INT_MAX)\r\n                {\r\n                    dist[i][v] = 1+dist[i][u];\r\n                    que.push(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    set<pair<int, int>, greater<pair<int, int>>> sp[n];\r\n\r\n    for(int i=0; i<n; i++)\r\n    {\r\n        for(int j=0; j<n; j++)\r\n        {\r\n            if(i==j || dist[i][j]==INT_MAX)\r\n                continue;\r\n\r\n            sp[i].insert({dist[i][j], j});\r\n        }\r\n    }\r\n\r\n    int ans = 0;\r\n    vector<int> v;\r\n\r\n    for(int i=0; i<n; i++)\r\n    {\r\n        for(int j=0; j<n; j++)\r\n        {\r\n            if(i==j || dist[i][j]==INT_MAX)\r\n                continue;\r\n\r\n            ///Farthest from i -> a\r\n            int a=-1, v1, b=-1, v2;\r\n\r\n            for(auto [k, v]: sp[i])\r\n            {\r\n                if(v==j)    continue;\r\n\r\n                if(a==-1)\r\n                {\r\n                    a = v;\r\n                    v1 = k;\r\n                }\r\n\r\n                b = v;\r\n                v2 = k;\r\n\r\n                break;\r\n            }\r\n\r\n            ///Farthest from j -> c\r\n            int c=-1, v3, d=-1, v4;\r\n\r\n            for(auto [k, v]: sp[j])\r\n            {\r\n                if(v==i)    continue;\r\n\r\n                if(c==-1)\r\n                {\r\n                    c = v;\r\n                    v3 = k;\r\n                }\r\n\r\n                d = v;\r\n                v4 = k;\r\n\r\n                break;\r\n            }\r\n\r\n            if(a==-1 || c==-1)\r\n                continue;\r\n\r\n            if(a != c)\r\n            {\r\n                if(ans < dist[i][j]+v1+v3)\r\n                {\r\n                    ans = dist[i][j]+v1+v3;\r\n                    v.clear();\r\n                    v.pb(a+1);\r\n                    v.pb(i+1);\r\n                    v.pb(j+1);\r\n                    v.pb(c+1);\r\n                }\r\n                else\r\n                    continue;\r\n            }\r\n            else if(v1+v4 >= v2+v3  &&  d!=-1)\r\n            {\r\n                if(ans < dist[i][j]+v1+v4)\r\n                {\r\n                    ans = dist[i][j]+v1+v4;\r\n                    v.clear();\r\n                    v.pb(a+1);\r\n                    v.pb(i+1);\r\n                    v.pb(j+1);\r\n                    v.pb(d+1);\r\n                }\r\n                else\r\n                    continue;\r\n            }\r\n            else if(b!=-1)\r\n            {\r\n                if(ans < dist[i][j]+v2+v3)\r\n                {\r\n                    ans = dist[i][j]+v2+v3;\r\n                    v.clear();\r\n                    v.pb(b+1);\r\n                    v.pb(i+1);\r\n                    v.pb(j+1);\r\n                    v.pb(c+1);\r\n                }\r\n                else\r\n                    continue;\r\n            }\r\n        }\r\n    }\r\n\r\n    for(auto e: v)\r\n        cout<<e<<\" \";\r\n    cout<<\"\\n\";\r\n}\r\n"
}