{
    "id": 23383120,
    "contestId": 666,
    "creationTimeSeconds": 1482946068,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Ali.Pi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 390,
    "memoryConsumedBytes": 38502400,
    "source": "#include <cstdio>\r\n#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n#include <queue>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\ntypedef pair <int, int> ii;\r\n\r\nconst int Maxn = 3005;\r\nconst int Inf = 1000000000;\r\n\r\nint n, m;\r\nvector <int> neigh[Maxn];\r\nint dist[Maxn][Maxn];\r\nii my[Maxn][3], his[Maxn][3];\r\nint res = -Inf;\r\nint ba, bb, bc, bd;\r\n\r\nvoid Solve(int v, int dist[])\r\n{\r\n\tfill(dist, dist + n + 1, Inf); dist[v] = 0;\r\n\tqueue <int> Q; Q.push(v);\r\n\twhile (!Q.empty()) {\r\n\t\tv = Q.front(); Q.pop();\r\n\t\tfor (int i = 0; i < neigh[v].size(); i++) {\r\n\t\t\tint u = neigh[v][i];\r\n\t\t\tif (dist[v] + 1 < dist[u]) {\r\n\t\t\t\tdist[u] = dist[v] + 1;\r\n\t\t\t\tQ.push(u);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid Insert(ii best[], ii val)\r\n{\r\n\tif (val.first > best[0].first) best[2] = best[1], best[1] = best[0], best[0] = val;\r\n\telse if (val.first > best[1].first) best[2] = best[1], best[1] = val;\r\n\telse if (val.first > best[2].first) best[2] = val;\r\n}\r\n\r\nvoid Propose(int cand, int a, int b, int c, int d)\r\n{\r\n\tif (cand > res) {\r\n\t\tres = cand;\r\n\t\tba = a; bb = b; bc = c; bd = d;\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tscanf(\"%d %d\", &n, &m);\r\n\twhile (m--) {\r\n\t\tint a, b; scanf(\"%d %d\", &a, &b);\r\n\t\tneigh[a].push_back(b);\r\n\t}\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tSolve(i, dist[i]);\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tmy[i][0] = my[i][1] = his[i][0] = his[i][1] = ii(-Inf, 0);\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tfor (int j = 1; j <= n; j++) if (i != j && dist[i][j] != Inf) {\r\n\t\t\tInsert(my[i], ii(dist[i][j], j));\r\n\t\t\tInsert(his[j], ii(dist[i][j], i));\r\n\t\t}\r\n\tfor (int i = 1; i <= n; i++) if (his[i][0].first != -Inf)\r\n\t\tfor (int j = 1; j <= n; j++) if (i != j && dist[i][j] != Inf && my[j][0].first != -Inf)\r\n\t\t\tfor (int l = 0; l < 3; l++) if (his[i][l].first != -Inf)\r\n\t\t\t\tfor (int z = 0; z < 3; z++) if (my[j][z].first != -Inf)\r\n\t\t\t\t\tif (his[i][l].second != j && his[i][l].second != my[j][z].second && i != my[j][z].second)\r\n\t\t\t\t\t\tPropose(his[i][l].first + dist[i][j] + my[j][z].first, his[i][l].second, i, j, my[j][z].second);\r\n\tprintf(\"%d %d %d %d\\n\", ba, bb, bc, bd);\r\n\treturn 0;\r\n}\r\n"
}