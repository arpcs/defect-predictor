{
    "id": 162016749,
    "contestId": 666,
    "creationTimeSeconds": 1656399036,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 1450,
    "memoryConsumedBytes": 38092800,
    "source": "#include <bits/stdc++.h>\n#define Lnnnb return 0;\n#define ll int\n///#define endl '\\n'\n#define maxn 3030\n#define inf 1000000000\n\nusing namespace std;\nll n,m,vis[maxn],dis[maxn][maxn];\nmap<ll,ll>mp[maxn];\nvector<ll>poi,e[maxn];\nqueue<ll>q;\nstruct node{\n    ll id,dis;\n    friend bool operator < (const node &a1 , const node &a2){\n        if(a1.dis != a2.dis)return a1.dis > a2.dis;\n        return a1.id < a2.id;\n    }\n};\nset<node>in[maxn],out[maxn];\n\nvoid dij(ll s){\n    for(ll i = 1 ; i <= n ; ++i){\n        vis[i] = 0;\n    }\n    q.push(s);\n    while(!q.empty()){\n        ll now = q.front();\n        q.pop();\n        vis[now] = 1;\n        for(ll i = 0 ; i < e[now].size() ; ++i){\n            ll v = e[now][i];\n            if(!vis[v]){\n                dis[s][v] = dis[s][now] + 1;\n                vis[v] = 1;\n                q.push(v);\n            }\n        }\n    }\n}\n\nvoid scan(){\n    cin >> n >> m ;\n    for(ll i = 1 ,l,r; i <= m ; ++i){\n        cin >> l >> r ;\n        if(l == r)continue;\n        if(mp[l][r])continue;\n        mp[l][r] = 1;\n        e[l].push_back(r);\n    }\n}\n\nvoid solve(){\n    for(ll i = 1 ; i <= n ; ++i){\n        dij(i);\n        for(ll j = 1 ; j <= n ; ++j){\n            if(dis[i][j] != 0){\n                out[i].insert({j,dis[i][j]});\n                in[j].insert({i,dis[i][j]});\n                if(out[i].size() >= 4){\n                    set<node>::iterator it = out[i].end();\n                    --it;\n                    out[i].erase(it);\n                }\n                if(in[j].size() >= 4){\n                    set<node>::iterator it = in[j].end();\n                    --it;\n                    in[j].erase(it);\n                }\n            }\n        }\n    }\n    ll ans = 0;\n    for(ll i = 1 ; i <= n ; ++i){\n        for(ll j = 1 ; j <= n ; ++j){\n            if(i != j && dis[i][j] != 0){\n                ll l = 0 , r = 0 , now = dis[i][j];\n                for(set<node>::iterator it = in[i].begin() ; it != in[i].end() ; ++it){\n                    if( (it -> id != i) && (it -> id != j) ){\n                        l = it->id;\n                        now += it->dis;\n                        break;\n                    }\n                }\n                for(set<node>::iterator it = out[j].begin() ; it != out[j].end() ; ++it){\n                    if( (it -> id != i) && (it -> id != j) && (it -> id != l) ){\n                        r = it->id;\n                        now += it->dis;\n                        break;\n                    }\n                }\n                if(l && r && now > ans){\n                    ans = now;\n                    poi.clear();\n                    poi.push_back(l);\n                    poi.push_back(i);\n                    poi.push_back(j);\n                    poi.push_back(r);\n                }\n            }\n        }\n    }\n///cout << ans << endl ;\n    for(ll i = 0 ; i <= 3 ; ++i){\n        cout << poi[i] << \" \" ;\n    }\n}\n\nint main(){\n    ios::sync_with_stdio(false);   cin.tie(0);cout.tie(0);\n        scan();\n        solve();\n}\n\n\t\t\t\t\t\t   \t\t\t \t\t\t     \t  \t\t  \t\t\t"
}