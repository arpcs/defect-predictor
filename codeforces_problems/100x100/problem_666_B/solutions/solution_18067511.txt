{
    "id": 18067511,
    "contestId": 666,
    "creationTimeSeconds": 1464161728,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Mhammad1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 1482,
    "memoryConsumedBytes": 38707200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef pair<int,int> pp; \r\nint n,m; \r\nvector<int> G[3005];\r\nint dist[3005][3005];\r\nbool vis[3005];\r\n\r\nvector<int> far1[3005];\r\nvector<int> far2[3005];\r\nvoid bfs(int u) {\r\n    memset(vis,0,sizeof vis);\r\n    \r\n\tfor(int i=1; i<=n; i++) dist[u][i] = -1e5;\r\n    queue<pp> q; q.push(make_pair(0, u)); \r\n    \r\n    dist[u][u]=0;\r\n    while(!q.empty()) {\r\n        pp cur = q.front(); q.pop(); \r\n        int v = cur.second, w = cur.first; \r\n\t\tvis[v]=1;\r\n        for(int i=0; i<(int)G[v].size(); i++) {\r\n            int vv = G[v][i]; \r\n\t\t\tif(vis[vv])continue;\r\n\t\t\tvis[vv]=1,dist[u][vv]=w+1;\r\n\t\t\tq.push(make_pair(w+1,vv));\r\n        }\r\n    }\r\n}\r\nint main() {\r\n    scanf(\"%d%d\",&n,&m); \r\n    for(int i=0; i<m; i++) {\r\n        int from,to;\r\n        scanf(\"%d%d\", &from,&to);\r\n        G[from].push_back(to);\r\n    }\r\n    \r\n    \r\n    for(int i=1; i<=n; i++) {\r\n        bfs(i);\r\n    }\r\n\t\r\n//\tfor(int i=1; i<=n; i++) {\r\n//\t\tfor(int j=1; j<=n; j++) {\r\n//\t\t\tcout << \"Dist[\"<<i << \"][\" << j << \"] = \" << dist[i][j] << \"\\n\";\r\n//\t\t}\r\n//\t}\r\n    \r\n    for(int i=1; i<=n; i++) {\r\n        int cnt = 4; \r\n        memset(vis,0,sizeof vis);\r\n        while (cnt--) {\r\n            \r\n            int mx = -1, cur = -1;\r\n            for(int j=1; j<=n; j++) {\r\n                if (vis[j]) continue;\r\n                if (dist[i][j] > mx) mx = dist[i][j], cur = j;\r\n            }\r\n            \r\n            if (cur < 0) break;\r\n            vis[cur]=1;\r\n\t\t\tfar2[i].push_back(cur);\r\n        }\r\n    }\r\n\t\r\n\t for(int i=1; i<=n; i++) {\r\n        int cnt = 5; \r\n        memset(vis,0,sizeof vis);\r\n        while (cnt--) {\r\n            \r\n            int mx = -1, cur = -1;\r\n            for(int j=1; j<=n; j++) {\r\n                if (vis[j]) continue;\r\n                if (dist[j][i] > mx) mx = dist[j][i], cur = j;\r\n            }\r\n            \r\n            if (cur < 0) break;\r\n            vis[cur]=1;\r\n\t\t\tfar1[i].push_back(cur);\r\n        }\r\n    }\r\n    \r\n    vector<int> ans;\r\n    int mx = 0;\r\n    for(int i = 1; i<=n; i++) {\r\n        for(int j=1; j<=n; j++) {\r\n            if(i==j) continue;\r\n            \r\n            for(int k1 = 0; k1 < (int)far1[i].size(); k1++) {\r\n                int v1 = far1[i][k1];\r\n                if (v1 == i || v1 == j) continue;\r\n                \r\n                for(int k2 = 0; k2<(int)far2[j].size(); k2++) {\r\n\t\t\t\t\tint v2 = far2[j][k2];\r\n                    if (v2 == i || v2 == j || v2 == v1) continue;\r\n                    \r\n                    int cur = dist[v1][i] + dist[i][j] + dist[j][v2];\r\n                    if (cur > mx) {\r\n                        mx = cur; \r\n                        ans.clear(); \r\n                        ans.push_back(v1), ans.push_back(i), ans.push_back(j), ans.push_back(v2);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    for(int i=0; i<(int)ans.size(); i++) printf(\"%d%c\", ans[i], (i==ans.size()-1)? '\\n' : ' ');\r\n    return 0; \r\n}"
}