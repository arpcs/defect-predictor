{
    "id": 17830492,
    "contestId": 666,
    "creationTimeSeconds": 1462878390,
    "relativeTimeSeconds": 4590,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "zDule98"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1462873800
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 1559,
    "memoryConsumedBytes": 66764800,
    "source": "#include <cstdio>\n#include <vector>\n#include <queue>\n#include <algorithm>\nusing namespace std;\nvector<int> graph[4000];\nint dist[4000][4000];\nint n,m;\nvoid bfs(int u)\n{\n    for(int i = 1; i <= n; i++)\n        dist[u][i] = -1;\n    dist[u][u] = 0;\n    queue<int> q;\n    q.push(u);\n    while(!q.empty())\n    {\n        int v = q.front();\n        q.pop();\n        for(int w : graph[v])\n        {\n            if (dist[u][w] > dist[u][v]+1 || dist[u][w] == -1)\n            {\n                dist[u][w] = dist[u][v]+1;\n                q.push(w);\n            }\n        }\n    }\n}\nbool cmp(pair<int,int> i, pair<int,int> j)\n{\n    return i > j;\n}\npair<int, int> toMe[4000][4];\npair<int, int> fromMe[4000][4];\npair<int, int> pom[4000];\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    while(m--)\n    {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        graph[u].push_back(v);\n    }\n    for(int i = 1; i <= n; i++)\n        bfs(i);\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = 1; j <= n; j++)\n            pom[j] = {dist[j][i],j};\n        for(int k = 0; k < 3; k++)\n        {\n            nth_element(pom+1,pom+1+k,pom+n+1,cmp);\n            toMe[i][k] = pom[1+k];\n        }\n    }\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = 1; j <= n; j++)\n            pom[j] = {dist[i][j],j};\n        for(int k = 0; k < 3; k++)\n        {\n            nth_element(pom+1,pom+1+k,pom+n+1,cmp);\n            fromMe[i][k] = pom[1+k];\n        }\n    }\n    vector<int> sv = {};\n    int sol = 0;\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = 1; j <= n; j++)\n        {\n            if (i == j)\n                continue;\n            if (dist[i][j] == -1)\n                continue;\n            for(int k = 0; k < 3; k++)\n                for(int l = 0; l < 3; l++)\n                {\n                    int u = toMe[i][k].second;\n                    int v = fromMe[j][l].second;\n                    if (u == v || u == i || u == j || i == v || j == v)\n                        continue;\n                    if (dist[u][i] == -1 || dist[j][v] == -1)\n                        continue;\n                    int sum = dist[u][i] + dist[i][j] + dist[j][v];\n                   // if (i == 1 && j == 8)\n                    //    printf(\"%d %d %d\\n\",u,v,sum);\n                    if (sum > sol)\n                    {\n                        sol = sum;\n                        sv = {u,i,j,v};\n                    }\n                }\n        }\n    }\n    //printf(\"%d\\n\",sol);\n    for(int v : sv)\n        printf(\"%d \",v);\n    printf(\"\\n\");\n    return 0;\n}\n"
}