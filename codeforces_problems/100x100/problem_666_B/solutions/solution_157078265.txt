{
    "id": 157078265,
    "contestId": 666,
    "creationTimeSeconds": 1652461449,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "luogu_bot5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 842,
    "memoryConsumedBytes": 36761600,
    "source": "# include <cstdio>\n# include <iostream>\n# include <cmath>\n# include <algorithm>\n# include <cstring>\n# include <map>\n# include <vector>\n# include <stack>\n# include <queue>\n# include <unordered_map>\n\nusing namespace std;\n\nconst int MAXN = 3e3 + 10;\nint n, m, dis[MAXN][MAXN];\n\nstruct edge {\n    int from, to, next, w;\n}Edge[MAXN << 2];\n\nint tot = 1;\nint head[MAXN];\nvoid add(int from, int to, int w) {\n    tot++;\n    Edge[tot].to = to;\n    Edge[tot].from = from;\n    Edge[tot].w = w;\n    Edge[tot].next = head[from];\n    head[from] = tot;\n}\n\nqueue <int> q;\n\nvoid dijkstra(int s) {\n    memset (dis[s], 0x3f, sizeof dis[s]);\n    dis[s][s] = 0;\n    q.push(s);\n    while (!q.empty()) {\n        int nod = q.front();\n        q.pop();\n        for (int i = head[nod]; i != 0; i = Edge[i].next) {\n            int to = Edge[i].to;\n            if (dis[s][to] > dis[s][nod] + 1) {\n                dis[s][to] = dis[s][nod] + 1;\n                q.push(to);\n            }\n        }\n    }\n} \nint f[MAXN][3], g[MAXN][3];\n\nbool check (int a, int b, int c, int d) {\n    if (!a || !d) return false;\n    if (a == b || a == c || a == d || b == c || b == d || c == d) return false;\n    else return true;\n}\nint main() {\n//return 0;\n    cin >> n >> m;\n    // if (n == 8) {\n    //     cout << \"2 1 8 7\" <<endl ;\n    //     return 0;\n    // }\n\n    for (int i = 1; i <= m; i++) {\n        int from, to;\n        cin >> from >> to;\n        add(from, to, 1);\n    }\n\n    for( int i = 1; i <= n; i++) {\n        dijkstra(i);\n    }\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (dis[j][i] == 0x3f3f3f3f) continue;\n            if (!f[i][0] || dis[f[i][0]][i] <= dis[j][i]) {\n                f[i][2] = f[i][1];\n                f[i][1] = f[i][0];\n                f[i][0] = j;\n            } else if (!f[i][1] || dis[f[i][1]][i] <= dis[j][i]) {\n                f[i][2] = f[i][1];\n                f[i][1] = j;\n            } else if (!f[i][2] || dis[f[i][2]][i] < dis[j][i]) {\n                f[i][2] = j;\n            }\n        }\n    }\n\n    for (int i = 1; i <= n; i++) {\n        for (int j = 1; j <= n; j++) {\n            if (dis[i][j] == 0x3f3f3f3f) continue;\n            if (!g[i][0] || dis[i][g[i][0]] <= dis[i][j]) {\n                g[i][2] = g[i][1];\n                g[i][1] = g[i][0];\n                g[i][0] = j;\n            } else if (!g[i][1] || dis[i][g[i][1]] <= dis[i][j]) {\n                g[i][2] = g[i][1];\n                g[i][1] = j;\n            } else if (!g[i][2] || dis[i][g[i][2]] < dis[i][j]) {\n                g[i][2] = j;\n            }\n        }\n    }\n\n    int ans1, ans2, ans3, ans4, ans = -1;\n\n    for (int b =1; b <= n; b++) {\n        for (int c = 1; c <= n; c++) {\n            if (dis[b][c] == 0x3f3f3f3f) continue;\n            for (int x = 0; x < 3; x++) {\n                for (int y = 0; y < 3; y++) {\n                    if (check(f[b][x], b, c, g[c][y])) {\n                        if (ans < dis[f[b][x]][b] + dis[b][c] + dis[c][g[c][y]]) {\n                            ans = dis[f[b][x]][b] + dis[b][c] + dis[c][g[c][y]];\n                            ans1 = f[b][x], ans2 = b, ans3 = c, ans4 = g[c][y];\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    cout << ans1 << \" \" << ans2 << \" \" << ans3 << \" \" << ans4 << endl ;\n\n\n    return 0;\n}"
}