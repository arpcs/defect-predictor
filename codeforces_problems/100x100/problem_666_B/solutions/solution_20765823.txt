{
    "id": 20765823,
    "contestId": 666,
    "creationTimeSeconds": 1474326323,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "crazyhamada10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 36249600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define pb push_back\r\n#define mp make_pair\r\n#define mod 3001\r\n\r\nvector <int> adj[mod];\r\nint dist[mod][mod];\r\nint maxi[mod][3];\r\n\r\nvoid BFS(int src){\r\n    queue <int> pq;\r\n    pq.push(src);\r\n    dist[src][src] = 0;\r\n    while(!pq.empty()){\r\n        int top = pq.front(); pq.pop();\r\n        for(int i=0; i<(int)adj[top].size(); i++){\r\n            int child = adj[top][i];\r\n            if(dist[src][child] == -1){\r\n                pq.push(child);\r\n                dist[src][child] = dist[src][top]+1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nint main (){\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    memset(dist, -1, sizeof dist);\r\n    memset(maxi, -1, sizeof maxi);\r\n    int n,m,from,to;\r\n    scanf(\"%d %d\",&n,&m);\r\n    for (int i=0; i<m; i++){\r\n        scanf(\"%d %d\",&from,&to);\r\n        if(from != to){\r\n            adj[from-1].pb(to-1);\r\n        }\r\n    }\r\n    int temp;\r\n    for(int i=0; i<n; i++){\r\n        BFS(i);\r\n        temp = 0;\r\n        for (int j=0; j<n; j++){\r\n            if(i != j && dist[i][j] > temp){\r\n                temp = dist[i][j];\r\n                maxi[i][0] = j;\r\n            }\r\n        }\r\n        if(maxi[i][0] != -1){\r\n            temp = 0;\r\n            for (int j=0; j<n; j++){\r\n                if(maxi[i][0] != j && i != j && dist[i][j] > temp){\r\n                    temp = dist[i][j];\r\n                    maxi[i][1] = j;\r\n                }\r\n            }\r\n            if(maxi[i][1] != -1){\r\n                temp = 0;\r\n                for (int j=0; j<n; j++){\r\n                    if(maxi[i][1] != j && maxi[i][0] != j && i != j && dist[i][j] > temp){\r\n                        temp = dist[i][j];\r\n                        maxi[i][2] = j;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    int sumr=0, ar=0,br=1,cr=2,dr=3;\r\n    int sum,a,b,c,d;\r\n    for(int p=0; p<n; p++){\r\n        a = p;\r\n        for(int i=0; i<3; i++){\r\n            if(maxi[a][i] != -1){\r\n                b = maxi[a][i];\r\n                for(int j=0; j<3; j++){\r\n                    if(maxi[b][j] != -1 && maxi[b][j] != a){\r\n                        c = maxi[b][j];\r\n                        for(int k=0; k<3; k++){\r\n                            if(maxi[c][k] != -1 && maxi[c][k] != a && maxi[c][k] != b){\r\n                                d = maxi[c][k];\r\n                                sum = dist[a][b] + dist[b][c] + dist[c][d];\r\n                                if(sum > sumr){\r\n                                    sumr = sum;\r\n                                    ar=a; br=b; cr=c; dr=d;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    //printf(\"%d\\n\",sumr);\r\n    printf(\"%d %d %d %d\",ar+1,br+1,cr+1,dr+1);\r\n    return 0;\r\n}\r\n\r\n"
}