{
    "id": 160812231,
    "contestId": 666,
    "creationTimeSeconds": 1655381402,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "Ruiqun2009"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 41,
    "timeConsumedMillis": 1357,
    "memoryConsumedBytes": 39116800,
    "source": "#include <bits/stdc++.h>\n#define Getchar() p1 == p2 and (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++\nchar buf[1 << 21], *p1, *p2;\ninline int read (void)\n{\n\tint x = 0; char c = Getchar(); bool f = (c != '-');\n\twhile (c < '0' or c > '9') c = Getchar(), f &= c != '-';\n\twhile (c >= '0' and c <= '9') x = x * 10 + c - 48, c = Getchar();\n\treturn f ? x : -x;\n}\nconst int inf = 0x7f7f7f7f;\nint n, m, dis[3001][3001];\nstd::vector<int> e[3001];\nstd::vector<std::pair<int, int>> I[3001], O[3001];\nstd::array<int, 5> ans;\nsigned main ()\n{\n\tn = read(); m = read();\n\tfor (int i = 1, u, v; i <= m; i++) u = read(), v = read(), e[u].push_back(v);\n\tfor (int s = 1; s <= n; s++)\n\t{\n\t\tfor (int t = 1; t <= n; t++) dis[s][t] = inf;\n\t\tstd::queue<int> q; q.push(s); dis[s][s] = 0;\n\t\twhile (!q.empty())\n\t\t{\n\t\t\tint u = q.front(); q.pop();\n\t\t\tfor (int v: e[u]) if (dis[s][v] == inf) q.push(v), dis[s][v] = dis[s][u] + 1;\n\t\t}\n\t}\n\tfor (int s = 1; s <= n; s++)\n\t{\n\t\tstd::priority_queue<std::pair<int, int>> q;\n\t\tfor (int t = 1; t <= n; t++) if (t != s and dis[s][t] < inf) q.push({dis[s][t], t});\n\t\tfor (int k = 1; k <= 3 and !q.empty(); k++) O[s].push_back(q.top()), q.pop();\n\t\twhile (!q.empty()) q.pop();\n\t\tfor (int t = 1; t <= n; t++) if (t != s and dis[t][s] < inf) q.push({dis[t][s], t});\n\t\tfor (int k = 1; k <= 3 and !q.empty(); k++) I[s].push_back(q.top()), q.pop();\n\t}\n\tfor (int b = 1; b <= n; b++) for (int c = 1; c <= n; c++) if (b != c and dis[b][c] < inf)\n\t\tfor (auto [x, a]: I[b]) if (a != c) for (auto [y, d]: O[c]) if (d != b) if (a != d) ans = std::max(ans, {x + y + dis[b][c], a, b, c, d});\n\treturn !printf(\"%d %d %d %d\\n\", ans[1], ans[2], ans[3], ans[4]);\n}"
}