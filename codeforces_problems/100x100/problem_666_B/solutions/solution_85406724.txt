{
    "id": 85406724,
    "contestId": 666,
    "creationTimeSeconds": 1593376858,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 666,
        "index": "B",
        "name": "World Tour",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 666,
        "members": [
            {
                "handle": "lookcook"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461947700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 3686400,
    "source": "#include <bits/stdc++.h>\n\n//#define int long long\n\nusing namespace std;\n\nsigned main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    int n, m;\n    cin >> n >> m;\n    int d[n+1][n+1];\n    vector<int> adj[n+1];\n    for (int i = 0; i < m; i++) {\n        int u, v;\n        cin >> u >> v;\n        adj[u].push_back(v);\n    }\n    for (int i = 0; i <= n; i++) for (int j = 0; j <= n; j++) d[i][j] = 0;\n    for (int source = 1; source <= n; source++) {\n        bool vis[n+1];\n        for (int i = 0; i <= n; i++) vis[i] = false;\n        queue<int> q;\n        vis[source] = true;\n        q.emplace(source);\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : adj[u]) {\n                if (vis[v]) continue;\n                q.emplace(v);\n                d[source][v] = d[source][u] + 1;\n                vis[v] = true;\n            }\n        }\n    }\n\n    priority_queue<pair<int, pair<int,int>>> pq; // {cost, {u, v}}\n    for (int i = 1; i <= n; i++) for (int j = 1; j <= n; j++) pq.emplace(make_pair(d[i][j], make_pair(i, j)));\n\n    int dp[n+1][4];\n    for (int i = 0; i <= n; i++) for (int j = 0; j < 4; j++) dp[i][j] = 0;\n\n    bool vis[n+1];\n    for (int i = 0; i <= n; i++) vis[i] = false;\n\n    int par[n+1][4];\n    for (int i = 0; i <= n; i++) for (int j = 0; j < 4; j++) par[i][j] = 0;\n\n    while (!pq.empty()) {\n        pair<int, pair<int,int>> p = pq.top();\n        pq.pop();\n        int u = p.second.first;\n        int v = p.second.second;\n        /*if (vis[u] && vis[v]) continue;\n        vis[u] = true;\n        vis[v] = true;*/\n        for (int i = 0; i < 3; i++) {\n            if (dp[u][i] != 0 || i == 0) {\n                if (dp[u][i] + d[u][v] > dp[v][i+1]) {\n                    dp[v][i+1] = dp[u][i] + d[u][v];\n                    par[v][i+1] = u;\n                }\n            }\n        }\n    }\n\n    int res = 0;\n    int v = -1;\n    for (int i = 1; i <= n; i++) {\n        if (dp[i][3] > res) {\n            res = dp[i][3];\n            v = i;\n        }\n    }\n    stack<int> s;\n    int cur = 3;\n    s.emplace(v);\n    while (cur != 0) {\n        s.emplace(par[v][cur]);\n        v = par[v][cur];\n        cur--;\n    }\n    cout << res << '\\n';\n    while (!s.empty()) {\n        cout << s.top() << \" \";\n        s.pop();\n    }\n}\n/*\n\n */\n"
}