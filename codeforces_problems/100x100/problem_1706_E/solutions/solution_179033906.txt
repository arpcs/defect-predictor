{
    "id": 179033906,
    "contestId": 1706,
    "creationTimeSeconds": 1667460518,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "crs-line"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 54476800,
    "source": "// LUOGU_RID: 92650536\n#include<cmath>\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<iostream>\r\n#include<algorithm>\r\n#define lid(a) (a<<1)\r\n#define rid(a) (a<<1|1)\r\n#define maxn(a) maxn[a]\r\nusing namespace std;\r\nconst int N=200003,lim=19;\r\ninline int read()\r\n{\r\n    int x=0,f=1; char c;\r\n    while(!isdigit(c=getchar())) if(c=='-') f=-1;\r\n    do x=(x<<1)+(x<<3)+(c^48); while(isdigit(c=getchar()));\r\n    return x*f;\r\n}\r\nint H,L,S,Q,kk,tot;\r\nint fa[N<<1],head[N<<1],val[N<<1],dep[N<<1],maxn[N<<2],fid[N<<1][lim+2];\r\nstruct node{int next,to;}edge[N<<2];\r\nint find(int x){ return (fa[x]==x)?fa[x]:(fa[x]=find(fa[x])); }\r\nvoid add(int x,int y){ edge[++kk]=(node){head[x],y}; head[x]=kk; }\r\nint Getlca(int x,int y)\r\n{\r\n    if(dep[x]<dep[y]) swap(x,y);\r\n    for(int j=lim;j>=0;j--)\r\n    {\r\n        if(dep[fid[x][j]]>=dep[y]) x=fid[x][j];\r\n        if(x==y) return x;\r\n    }\r\n    for(int j=lim;j>=0;j--) if(fid[x][j]!=fid[y][j]) x=fid[x][j],y=fid[y][j];\r\n    return fid[x][0];\r\n}\r\nvoid Pre_process(int nn,int fa)\r\n{\r\n    memset(fid[nn],0,sizeof(fid[nn]));\r\n    dep[nn]=dep[fa]+1; fid[nn][0]=fa;\r\n    for(int j=1;(1<<j)<=dep[nn]-1;j++) fid[nn][j]=fid[fid[nn][j-1]][j-1];\r\n    for(int i=head[nn];i;i=edge[i].next)\r\n    {\r\n        int cc=edge[i].to;\r\n        if(cc==fa) continue;\r\n        Pre_process(cc,nn);\r\n    }\r\n}\r\nvoid build(int nn,int l,int r)\r\n{\r\n    if(l==r) return maxn(nn)=val[l],void();\r\n    int mid=(l+r)>>1;\r\n    build(lid(nn),l,mid); build(rid(nn),mid+1,r);\r\n    maxn(nn)=max(maxn(lid(nn)),maxn(rid(nn)));\r\n}\r\nint Chemaxn(int nn,int l,int r,int F,int T)\r\n{\r\n    if(F>T) return 0; if(l==F&&r==T) return maxn(nn); int mid=(l+r)>>1;\r\n    if(T<=mid) return Chemaxn(lid(nn),l,mid,F,T);\r\n    else if(F>mid) return Chemaxn(rid(nn),mid+1,r,F,T);\r\n    else return max(Chemaxn(lid(nn),l,mid,F,mid),Chemaxn(rid(nn),mid+1,r,mid+1,T));\r\n}\r\nsigned main()\r\n{\r\n    S=read();\r\n    while(S--)\r\n    {\r\n        tot=H=read(); L=read(); Q=read();\r\n        kk=0; memset(head,0,sizeof(int)*(H<<1|1)); for(int i=1;i<=H<<1;i++) fa[i]=i;\r\n        for(int i=1;i<=L;i++)\r\n        {\r\n            int x=read(),y=read(),a=find(x),b=find(y); if(a==b) continue; \r\n            val[++tot]=i; fa[a]=fa[b]=tot; add(a,tot); add(tot,a); add(b,tot); add(tot,b);\r\n        }\r\n        Pre_process(tot,0); for(int i=1;i<=H-1;i++) val[i]=val[Getlca(i,i+1)]; build(1,1,H-1);\r\n        for(int i=1,l,r;i<=Q;i++) l=read(),r=read(),printf(\"%d \",Chemaxn(1,1,H-1,l,r-1));\r\n        putchar('\\n');\r\n    }\r\n    return 0;\r\n}\r\n"
}