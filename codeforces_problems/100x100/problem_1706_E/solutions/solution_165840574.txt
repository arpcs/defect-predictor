{
    "id": 165840574,
    "contestId": 1706,
    "creationTimeSeconds": 1658888440,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "Sam_Saleh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 38297600,
    "source": "#include <bits/stdc++.h>\r\ntypedef long long ll;\r\nusing namespace std;\r\nconst ll MAX=2e5+9;\r\nvector<ll>adj[2*MAX];\r\nvector<ll> nodes;\r\nll weight[MAX];\r\nll seg[4*MAX];\r\nll first[MAX];\r\nll par[MAX];\r\nll dep[MAX];\r\nvoid initialize(ll n)\r\n{\r\n    for (ll i=1; i<=n; i++)\r\n        par[i] = i,\r\n        dep[i] = 0,\r\n        first[i] = 0,\r\n        weight[i] = 0,\r\n        adj[i].clear();\r\n    for (ll i=1; i<=4*n+4; i++)\r\n        seg[i] = 0;\r\n    nodes.clear();\r\n}\r\nll parent(ll x)\r\n{\r\n    if (x==par[x])\r\n        return x;\r\n    x = parent(par[x]);\r\n    return x;\r\n}\r\nbool same(ll x,ll y)\r\n{\r\n    x = parent(x);\r\n    y = parent(y);\r\n    return x==y;\r\n}\r\nvoid merge(ll x,ll y)\r\n{\r\n    par[x] = y;\r\n}\r\nvoid add_edge(ll x,ll y)\r\n{\r\n    adj[x].push_back(y);\r\n    adj[y].push_back(x);\r\n}\r\nvoid dfs(ll cur,ll last)\r\n{\r\n    dep[cur] = dep[last]+1;\r\n    nodes.push_back(cur);\r\n    for (auto i : adj[cur])\r\n        if (i!=last)\r\n        {\r\n            dfs(i,cur);\r\n            nodes.push_back(cur);\r\n        }\r\n}\r\n#define mid (l+r)/2\r\nvoid add(ll loc,ll val,ll cur,ll l,ll r)\r\n{\r\n    if (r<l || r<loc || loc<l)\r\n        return ;\r\n    else if (l==r)\r\n        return void(seg[cur] = val);\r\n    add(loc,val,2*cur,l,mid);\r\n    add(loc,val,2*cur+1,mid+1,r);\r\n    seg[cur] = min(seg[2*cur],seg[2*cur+1]);\r\n}\r\nll get(ll a,ll b,ll cur,ll l,ll r)\r\n{\r\n    if (r<l || r<a || b<l)\r\n        return 1e18;\r\n    else if (a<=l && r<=b)\r\n        return seg[cur];\r\n    ll x = get(a,b,2*cur,l,mid);\r\n    ll y = get(a,b,2*cur+1,mid+1,r);\r\n    return min(x,y);\r\n}\r\nll binary_search(ll a,ll b,ll val,ll cur,ll l,ll r)\r\n{\r\n    if (r<l || r<a || b<l)\r\n        return 0;\r\n    if (seg[cur]>val)\r\n        return 0;\r\n    if (l==r)\r\n        return l;\r\n    ll t = binary_search(a,b,val,2*cur,l,mid);\r\n    if (t)\r\n        return t;\r\n    return binary_search(a,b,val,2*cur+1,mid+1,r);\r\n}\r\nclass mfst\r\n{\r\npublic:\r\n    ll m;\r\n    vector<ll> seg;\r\n    vector<ll> mn,mx;\r\n    mfst(ll n)\r\n    {\r\n        m = 1<<(ll)ceil(log2(n));\r\n        for (ll i=-1; i<=2*m+5; i++)\r\n            seg.push_back(0),\r\n            mn.push_back(1e18),\r\n            mx.push_back(-1e18);\r\n    }\r\n    #define mid (l+r)/2\r\n    void mn_ad(ll loc,ll val,ll cur,ll l,ll r)\r\n    {\r\n        if (r<l || r<loc || loc<l)\r\n            return ;\r\n        else if (l==r)\r\n            return void(mn[cur]=val);\r\n        mn_ad(loc,val,2*cur,l,mid);\r\n        mn_ad(loc,val,2*cur+1,mid+1,r);\r\n        mn[cur] = min(mn[2*cur],mn[2*cur+1]);\r\n    }\r\n    void mn_add(ll loc,ll val)\r\n    {\r\n        mn_ad(loc,val,1,1,m);\r\n    }\r\n    ll mn_ge(ll a,ll b,ll cur,ll l,ll r)\r\n    {\r\n        if (r<l || r<a || b<l)\r\n            return 1e18;\r\n        else if (a<=l && r<=b)\r\n            return mn[cur];\r\n        ll x = mn_ge(a,b,2*cur,l,mid);\r\n        ll y = mn_ge(a,b,2*cur+1,mid+1,r);\r\n        return min(x,y);\r\n    }\r\n    ll mn_get(ll x,ll y)\r\n    {\r\n        return mn_ge(x,y,1,1,m);\r\n    }\r\n    void mx_ad(ll loc,ll val,ll cur,ll l,ll r)\r\n    {\r\n        if (r<l || r<loc || loc<l)\r\n            return ;\r\n        else if (l==r)\r\n            return void(mx[cur]=val);\r\n        mx_ad(loc,val,2*cur,l,mid);\r\n        mx_ad(loc,val,2*cur+1,mid+1,r);\r\n        mx[cur] = max(mx[2*cur],mx[2*cur+1]);\r\n    }\r\n    void mx_add(ll loc,ll val)\r\n    {\r\n        mx_ad(loc,val,1,1,m);\r\n    }\r\n    ll mx_ge(ll a,ll b,ll cur,ll l,ll r)\r\n    {\r\n        if (r<l || r<a || b<l)\r\n            return -1e18;\r\n        else if (a<=l && r<=b)\r\n            return mx[cur];\r\n        ll x = mx_ge(a,b,2*cur,l,mid);\r\n        ll y = mx_ge(a,b,2*cur+1,mid+1,r);\r\n        return max(x,y);\r\n    }\r\n    ll mx_get(ll x,ll y)\r\n    {\r\n        return mx_ge(x,y,1,1,m);\r\n    }\r\n    void ad(ll loc,ll val,ll cur,ll l,ll r)\r\n    {\r\n        if (r<l || r<loc || loc<l)\r\n            return ;\r\n        else if (l==r)\r\n            return void(seg[cur] += val);\r\n        ad(loc,val,2*cur,l,mid);\r\n        ad(loc,val,2*cur+1,mid+1,r);\r\n        seg[cur] = seg[2*cur]+seg[2*cur]+1;\r\n    }\r\n    void add(ll loc,ll val)\r\n    {\r\n        ad(loc,val,1,1,m);\r\n    }\r\n    ll ge(ll a,ll b,ll cur,ll l,ll r)\r\n    {\r\n        if (r<l || r<a || b<l)\r\n            return 0;\r\n        else if (a<=l && r<=b)\r\n            return seg[cur];\r\n        ll x = ge(a,b,2*cur,l,mid);\r\n        ll y = ge(a,b,2*cur+1,mid+1,r);\r\n        return x+y;\r\n    }\r\n    ll get(ll a,ll b)\r\n    {\r\n        return ge(a,b,1,1,m);\r\n    }\r\n};\r\nvoid solve()\r\n{\r\n    ll n,m,q;\r\n    cin>>n>>m>>q;\r\n    ll now = n;\r\n    initialize(n+m+6);\r\n    for (ll i=1; i<=m; i++)\r\n    {\r\n        ll x,y;\r\n        cin>>x>>y;\r\n        if (same(x,y))\r\n            continue;\r\n        x = parent(x);\r\n        y = parent(y);\r\n        par[x] = now+1;\r\n        par[y] = now+1;\r\n        add_edge(x,++now);\r\n        add_edge(y,now);\r\n        weight[now] = max({i,weight[x],weight[y]});\r\n    }\r\n    nodes.push_back(0);\r\n    dfs(now,now);\r\n    ll k = nodes.size();\r\n    for (ll i=1; i<k; i++)\r\n    {\r\n        if (first[nodes[i]]==0)\r\n            first[nodes[i]] = i;\r\n        add(i,dep[nodes[i]],1,1,k);\r\n    }\r\n    mfst s(n+3);\r\n    for (ll i=1; i<=n; i++)\r\n        s.mx_add(i,first[i]),\r\n        s.mn_add(i,first[i]);\r\n    while (q--)\r\n    {\r\n        ll l,r;\r\n        cin>>l>>r;\r\n        if (l==r)\r\n        {\r\n            cout<<0<<\" \";\r\n            continue;\r\n        }\r\n        ll x = s.mn_get(l,r);\r\n        ll y = s.mx_get(l,r);\r\n        ll z = get(x,y,1,1,k);\r\n        z = binary_search(x,y,z,1,1,k);\r\n        z = weight[nodes[z]];\r\n        cout<<z<<\" \";\r\n    }\r\n    cout<<\"\\n\";\r\n}\r\nint main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ll tes;\r\n    cin>>tes;\r\n    while (tes--)\r\n        solve();\r\n    return 0;\r\n}\r\n"
}