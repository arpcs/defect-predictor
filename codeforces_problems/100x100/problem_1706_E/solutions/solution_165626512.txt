{
    "id": 165626512,
    "contestId": 1706,
    "creationTimeSeconds": 1658721764,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "cschenshuo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 159539200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=1e6+10;\r\nstruct RMQ\r\n{\r\n    int Log[N],f[N][22];\r\n    int Query(int l,int r)\r\n    {\r\n        int k=Log[r-l+1]/Log[2];\r\n        return max(f[l][k],f[r-(1<<k)+1][k]);\r\n    }\r\n    void PreLog()\r\n    {\r\n        for (int i=0;i<=21;i++)\r\n            for (int j=(1<<i);j<(1<<(i+1));j++) Log[j]=i;\r\n    }\r\n    void Prework(int n,int* a)\r\n    {\r\n        int t=Log[n]/Log[2]+1;\r\n        for (int i=1;i<=n;i++) f[i][0]=a[i];\r\n        for (int j=1;j<t;j++)\r\n            for (int i=1;i<=n-(1<<j)+1;i++)\r\n                f[i][j]=max(f[i][j-1],f[i+(1<<(j-1))][j-1]);\r\n    }\r\n}st;\r\nstruct Edge\r\n{\r\n    int x,y,v;\r\n    bool operator < (const Edge& b) const\r\n    {\r\n        return v<b.v;\r\n    }\r\n}e[N];\r\nstruct Kruskal\r\n{\r\n    int fa[N],cnt,dep[N],val[N],siz[N],hson[N],f[N],topf[N];\r\n    int head[N],tot,nxt[N<<1],ver[N<<1];\r\n    int Get_fa(int x)\r\n    {\r\n        if (x==fa[x]) return x;\r\n            else return fa[x]=Get_fa(fa[x]);\r\n    }\r\n    void Pre(int n)\r\n    {\r\n        for (int i=1;i<=(n<<3);i++)\r\n        {\r\n            head[i]=val[i]=dep[i]=siz[i]=hson[i]=f[i]=topf[i]=0;\r\n            fa[i]=i;\r\n        }\r\n        tot=0;\r\n        cnt=n;\r\n    }\r\n    void Add_edge(int x,int y)\r\n    {\r\n        ver[++tot]=y; nxt[tot]=head[x]; head[x]=tot;\r\n        ver[++tot]=x; nxt[tot]=head[y]; head[y]=tot;\r\n    }\r\n    void Dfs1(int u,int dad)\r\n    {\r\n        dep[u]=dep[dad]+1;\r\n        siz[u]=1;\r\n        f[u]=dad;\r\n        for (int i=head[u];i;i=nxt[i])\r\n            if (ver[i]!=dad)\r\n            {\r\n                Dfs1(ver[i],u);\r\n                siz[u]+=siz[ver[i]];\r\n                if (siz[ver[i]]>siz[hson[u]]) hson[u]=ver[i];\r\n            }\r\n    }\r\n    void Dfs2(int u,int tp)\r\n    {\r\n        topf[u]=tp;\r\n        if (hson[u]) Dfs2(hson[u],tp);\r\n        for (int i=head[u];i;i=nxt[i])\r\n            if (ver[i]!=hson[u]&&ver[i]!=f[u]) Dfs2(ver[i],ver[i]);\r\n    }\r\n    void Init(int n,int m,Edge* a)\r\n    {\r\n        for (int i=1;i<=m;i++)\r\n        {\r\n            int fx=Get_fa(a[i].x), fy=Get_fa(a[i].y);\r\n            if (fx==fy) continue;\r\n            fa[fx]=fa[fy]=++cnt;\r\n            Add_edge(fx,cnt);\r\n            Add_edge(fy,cnt);\r\n            val[cnt]=a[i].v;\r\n        }\r\n        Dfs1(cnt,cnt);\r\n        Dfs2(cnt,cnt);\r\n    }\r\n    int Get_ans(int x,int y)\r\n    {\r\n        while (topf[x]!=topf[y])\r\n        {\r\n            if (dep[topf[x]]<dep[topf[y]]) swap(x,y);\r\n            x=f[topf[x]];\r\n        }\r\n        if (dep[x]>dep[y]) swap(x,y);\r\n        return val[x];\r\n    }\r\n}kr;\r\nint Read()\r\n{\r\n    int x=0, f=1;\r\n    char ch=getchar();\r\n    for (;!isdigit(ch);ch=getchar()) if (ch=='-') f=-1;\r\n    for (;isdigit(ch);ch=getchar()) x=(x<<1)+(x<<3)+(ch&15);\r\n    return x*f;\r\n}\r\nint T,n,m,q,f[N];\r\nint main()\r\n{\r\n    //freopen(\"1.in\",\"r\",stdin);\r\n    //freopen(\"1.out\",\"w\",stdout);\r\n    st.PreLog();\r\n    T=Read();\r\n    for (int c=1;c<=T;c++)\r\n    {\r\n        n=Read();\r\n        m=Read();\r\n        q=Read();\r\n        for (int i=1;i<=m;i++)\r\n        {\r\n            e[i].x=Read();\r\n            e[i].y=Read();\r\n            e[i].v=i;\r\n        }\r\n        kr.Pre(n);\r\n        kr.Init(n,m,e);\r\n        for(int i=1;i<n;i++)\r\n            f[i]=kr.Get_ans(i,i+1);\r\n        st.Prework(n-1,f);\r\n        for (int i=1,l,r;i<=q;i++)\r\n        {\r\n            l=Read();\r\n            r=Read();\r\n            if (l==r) printf(\"0 \");\r\n                else printf(\"%d \",st.Query(l,r-1));\r\n        }\r\n        puts(\"\");\r\n    }\r\n}"
}