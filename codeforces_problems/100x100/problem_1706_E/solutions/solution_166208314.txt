{
    "id": 166208314,
    "contestId": 1706,
    "creationTimeSeconds": 1659172883,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "hongbui"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nstruct dsu {\r\n\tvector<int> ds, wt;\r\n\tdsu(int n) {\r\n\t\tds.assign(n, -1);\r\n\t\twt.assign(n, INT_MAX);\r\n\t}\r\n\tint find(int i) {\r\n\t\treturn ds[i] < 0 ? i : find(ds[i]);\r\n\t}\r\n\tvoid merge(int i, int j, int weight) {\r\n\t\ti = find(i), j = find(j);\r\n\t\tif (i != j) {\r\n\t\t\tif (ds[i] > ds[j])\r\n\t\t\t\tswap(i, j);\r\n\t\t\tds[i] += ds[j], ds[j] = i;\r\n\t\t\twt[j] = weight;\r\n\t\t}\r\n\t}\r\n\tint weight(int i, int j) {\r\n\t\tint w = 0;\r\n\r\n\t\twhile (i != j) {\r\n\t\t\tif (wt[i] < wt[j])\r\n\t\t\t\tw = wt[i], i = ds[i];\r\n\t\t\telse\r\n\t\t\t\tw = wt[j], j = ds[j];\r\n\t\t}\r\n\t\treturn w;\r\n\t}\r\n};\r\n\r\n\r\nstruct segtree {\r\n\tvector<int> tr; int n;\r\n\tsegtree(vector<int> v) {\r\n\t\tn = v.size();\r\n\t\ttr.resize(n * 2);\r\n\t\tfor (int i = 0; i < n; i++)\r\n\t\t\ttr[n + i] = v[i];\r\n\t\tfor (int i = n - 1; i > 0; i--)\r\n\t\t\tpull(i);\r\n\t}\r\n\tvoid pull(int i) {\r\n\t\ttr[i] = max(tr[i * 2], tr[i * 2 + 1]);\r\n\t}\r\n\tint query(int l, int r) {\r\n\t\tint x = 0;\r\n\r\n\t\tfor (l += n, r += n; l <= r; l /= 2, r /= 2) {\r\n\t\t\tif (l & 1)\r\n\t\t\t\tx = max(x, tr[l++]);\r\n\t\t\tif (~r & 1)\r\n\t\t\t\tx = max(x, tr[r--]);\r\n\t\t}\r\n\t\treturn x;\r\n\t}\r\n};\r\n\r\nvoid run() {\r\n\tint n, m, q;\r\n\tscanf(\"%d%d%d\", &n, &m, &q);\r\n\r\n\tdsu ds(n);\r\n\tfor (int w = 1; w <= m; w++) {\r\n\t\tint i, j;\r\n\t\tscanf(\"%d%d\", &i, &j), i--, j--;\r\n\t\tds.merge(i, j, w);\r\n\t}\r\n\r\n\tvector<int> weights(n - 1);\r\n\tfor (int i = 0; i < n - 1; i++)\r\n\t\tweights[i] = ds.weight(i, i + 1);\r\n\r\n\tsegtree st(weights);\r\n\twhile (q--) {\r\n\t\tint l, r;\r\n\t\tscanf(\"%d%d\", &l, &r), l--, r--;\r\n\t\tprintf(\"%d \", l == r ? 0 : st.query(l, r - 1));\r\n\t}\r\n\tprintf(\"\\n\");\r\n}\r\nsigned main(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int sotest = 1;\r\n    //cin >> sotest;\r\n\r\n    while (sotest--){\r\n        run();\r\n    }\r\n}\r\n\r\n"
}