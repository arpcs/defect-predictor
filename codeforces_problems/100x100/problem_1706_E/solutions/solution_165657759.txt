{
    "id": 165657759,
    "contestId": 1706,
    "creationTimeSeconds": 1658745501,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1706,
        "index": "E",
        "name": "Qpwoeirut and Vertices",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "dsu",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1706,
        "members": [
            {
                "handle": "petyb"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658154900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define all(v) v.begin(), v.end()\r\n#define pb push_back\r\n#define debug(x) for (auto a: x) cout << a << \" \"; cout << endl\r\n#define ll long long\r\n\r\nconst int INF = 1e9 + 7;\r\n\r\nstruct DSU {\r\n    vector <int> p;\r\n    vector <int> sz;\r\n\r\n    DSU (int n) {\r\n        p.resize(n);\r\n        for (int i = 0; i < n; i++) p[i] = i;\r\n        sz.resize(n, 1);\r\n    }\r\n\r\n    int get(int v){\r\n        if (p[v] == v) return v;\r\n        return p[v] = get(p[v]);\r\n    }\r\n\r\n    void unite(int u, int v){\r\n        u = get(u);\r\n        v = get(v);\r\n        if (u == v) return;\r\n        if (sz[u] > sz[v]) {\r\n            p[v] = u;\r\n            sz[u] += sz[v];\r\n        }\r\n        else {\r\n            p[u] = v;\r\n            sz[v] += sz[u];\r\n        }\r\n    }\r\n};\r\n\r\nstruct ST {\r\n    int n;\r\n    vector <vector <int> > t;\r\n    vector <int> lg;\r\n\r\n    ST (vector <int> a){\r\n        n = a.size();\r\n        lg.resize(n + 1);\r\n        lg[1] = 0;\r\n        for (int i = 2; i <= n; i++) {\r\n            lg[i] = lg[i / 2] + 1;\r\n        }\r\n        t.resize(lg[n] + 1, vector <int> (n + 1));\r\n        for (int i = 0; i < n; i++){\r\n            t[0][i] = a[i];\r\n        }\r\n        for (int pw = 1; pw <= lg[n]; pw++){\r\n            for (int i = 0; i + (1 << (pw - 1)) <= n; i++){\r\n                t[pw][i] = max(t[pw - 1][i], t[pw - 1][i + (1 << (pw - 1))]);\r\n            }\r\n        }\r\n    }\r\n\r\n    int get(int l, int r){\r\n        int d = r - l + 1;\r\n        return max(t[lg[d]][l], t[lg[d]][r - (1 << (lg[d])) + 1]);\r\n    }\r\n\r\n};\r\n\r\nstruct EDGE {\r\n    int u, v, w;\r\n};\r\n\r\nvector < vector < pair <int, int > > > binup;\r\n\r\nvector <vector <pair <int, int> > > g;\r\nvector <int> used;\r\nvector <int> pr;\r\nvector <int> tin;\r\nvector <int> tout;\r\n\r\nint max_h = 0, h = 1, t = 0;\r\n\r\nvoid dfs(int v){\r\n    used[v] = 1;\r\n    tin[v] = t++;\r\n    for (auto [u, w]: g[v]){\r\n        if (!used[u]){\r\n            pr[u] = v;\r\n            h++;\r\n            max_h = max(max_h, h);\r\n            dfs(u);\r\n            h--;\r\n        }\r\n    }\r\n    tout[v] = t++;\r\n}\r\n\r\nbool anc(int u, int v){\r\n    return tin[v] <= tin[u] && tout[u] <= tout[v];\r\n}\r\n\r\nint lca(int u, int v){\r\n    int u1;\r\n    if (!anc(u, v) && !anc(v, u)){\r\n        u1 = u;\r\n        for (int pw = max_h - 1; pw >= 0; pw--){\r\n            if (!anc(binup[pw][u1].first, v)){\r\n                u1 = binup[pw][u1].first;\r\n            }\r\n        }\r\n        u1 = binup[0][u1].first;\r\n    }\r\n    else if (anc(u, v)){\r\n        u1 = v;\r\n    }\r\n    else {\r\n        u1 = u;\r\n    }\r\n    int max_res = 0;\r\n    for (int pw = max_h - 1; pw >= 0; pw--){\r\n        if (anc(binup[pw][u].first, u1)){\r\n            max_res = max(max_res, binup[pw][u].second);\r\n            u = binup[pw][u].first;\r\n        }\r\n        if (anc(binup[pw][v].first, u1)){\r\n            max_res = max(max_res, binup[pw][v].second);\r\n            v = binup[pw][v].first;\r\n        }\r\n    }\r\n    return max_res;\r\n}\r\n\r\nvoid solve(){\r\n    max_h = 0;\r\n    h = 1;\r\n    t = 0;\r\n    g.clear();\r\n    used.clear();\r\n    binup.clear();\r\n    pr.clear();\r\n    tin.clear();\r\n    tout.clear();\r\n    int n, m, q;\r\n    cin >> n >> m >> q;\r\n    g.resize(n);\r\n    used.resize(n);\r\n    pr.resize(n);\r\n    tin.resize(n);\r\n    tout.resize(n);\r\n    vector < EDGE > edges(m);\r\n    for (int i = 0; i < m; i++){\r\n        int u, v;\r\n        cin >> u >> v;\r\n        edges[i].w = i + 1;\r\n        edges[i].u = u - 1;\r\n        edges[i].v = v - 1;\r\n    }\r\n    DSU dsu(n);\r\n    for (int i = 0; i < m; i++){\r\n        if (dsu.get(edges[i].u) != dsu.get(edges[i].v)){\r\n            dsu.unite(edges[i].u, edges[i].v);\r\n            g[edges[i].u].pb({edges[i].v, edges[i].w});\r\n            g[edges[i].v].pb({edges[i].u, edges[i].w});\r\n        }\r\n    }\r\n    dfs(0);\r\n    binup.resize(max_h, vector < pair <int, int> > (n));\r\n    binup[0][0] = {0, g[0][0]};\r\n    for (int i = 1; i < n; i++){\r\n        binup[0][i].first = pr[i];\r\n        for (int j = 0; j < g[i].size(); j++){\r\n            if (g[i][j].first == binup[0][i].first){\r\n                binup[0][i].second = g[i][j].second;\r\n            }\r\n        }\r\n    }\r\n    for (int pw = 1; pw < max_h; pw++){\r\n        for (int i = 0; i < n; i++){\r\n            binup[pw][i].first = binup[pw - 1][binup[pw - 1][i].first].first;\r\n            binup[pw][i].second = max(binup[pw - 1][i].second, binup[pw - 1][binup[pw - 1][i].first].second);\r\n        }\r\n    }\r\n    vector <int> res(n - 1);\r\n    for (int i = 0; i < n - 1; i++){\r\n        res[i] = lca(i, i + 1);\r\n    }\r\n    ST st(res);\r\n    vector <int> ans;\r\n    while (q--){\r\n        int l, r;\r\n        cin >> l >> r;\r\n        if (l == r){\r\n            ans.pb(0);\r\n            continue;\r\n        }\r\n        l--;\r\n        r--;\r\n        ans.pb(st.get(l, r - 1));\r\n    }\r\n    for (auto x: ans) cout << x << \" \";\r\n}\r\n\r\nint main()\r\n{\r\n    int q;\r\n    cin >> q;\r\n    while (q--){\r\n        solve(); cout << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n\r\n"
}