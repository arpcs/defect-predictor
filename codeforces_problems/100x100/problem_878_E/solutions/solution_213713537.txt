{
    "id": 213713537,
    "contestId": 878,
    "creationTimeSeconds": 1689304651,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 878,
        "index": "E",
        "name": "Numbers on the blackboard",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3300,
        "tags": [
            "combinatorics",
            "dp"
        ]
    },
    "author": {
        "contestId": 878,
        "members": [
            {
                "handle": "luogu_bot1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509029100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 41881600,
    "source": "// LUOGU_RID: 115420509\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long \r\n#define max_n 410101\r\n#define mo 1000000007\r\nvoid read(int &p)\r\n{\r\n    int k = 1;\r\n    p = 0;\r\n    char c = getchar();\r\n    while(c < '0' || c > '9')\r\n    {\r\n        if(c == '-')\r\n        {\r\n            k =  -1;\r\n        }\r\n        c = getchar();\r\n    }\r\n    while(c >='0' && c <= '9')\r\n    {\r\n        p = p * 10 + c - '0';\r\n        c = getchar();\r\n    }\r\n    p *= k;\r\n    return ;\r\n}\r\nvoid write_(int x)\r\n{\r\n    if(x < 0)\r\n    {\r\n        putchar('-');\r\n        x = -x;\r\n    }\r\n    if(x > 9)\r\n    {\r\n        write_(x / 10);\r\n    }\r\n    putchar(x % 10 + '0');\r\n}\r\nvoid writesp(int x)\r\n{\r\n    write_(x);\r\n    putchar(' ');\r\n}\r\nvoid writeln(int x)\r\n{\r\n    write_(x);\r\n    puts(\"\");\r\n}\r\nint n,m;\r\nint lg2[max_n],nums[max_n],sum[max_n];\r\nstruct Query\r\n{\r\n    int l,r,id;\r\n    bool operator<(Query q2)\r\n    const {\r\n        if(this->r != q2.r)\r\n        {\r\n            return this->r < q2.r;\r\n        }\r\n        else\r\n        {\r\n            return this->l > q2.l;\r\n        }\r\n    }\r\n}querys[max_n];\r\nint sum2[max_n],ans[max_n],pow_2[max_n],st[max_n],ans_sum[max_n],inv[max_n];\r\nsigned main()\r\n{\r\n    read(n),read(m);\r\n    pow_2[0] = inv[0] = 1;\r\n    for(int i = 1;i <= n;i++)\r\n    {\r\n        read(nums[i]);\r\n        pow_2[i] = (pow_2[i - 1] << 1LL) % mo;\r\n        inv[i] = inv[i - 1] * 500000004 % mo; // \u9884\u5904\u7406\u9006\u5143\r\n\r\n        ans_sum[i] = (ans_sum[i - 1] + pow_2[i] * nums[i]) % mo; // \u9884\u5904\u7406\u4e0d\u5206\u5757\u8d21\u732e\r\n    }\r\n    for(int i = 1;i <= m;i++)\r\n    {\r\n        read(querys[i].l);       \r\n        read(querys[i].r);\r\n        querys[i].id = i;\r\n    }\r\n    stable_sort(querys + 1,querys + m + 1);// \u6309\u7167\u53f3\u533a\u95f4\u6392\u5e8f\r\n    for(int i = 1,j = 1,l,r;i <= m;i++)\r\n    {\r\n        l = querys[i].l,r = querys[i].r;\r\n        for(;j <= r;j++)\r\n        {    \r\n            st[++st[0]] = j;\r\n            sum[st[0]] = nums[j];\r\n            // \u5b58\u5728\u591a\u4f59\u7684\u5757\u4e14\u5f53\u524d\u5757\u5927\u4e8e 0\r\n            while(st[0] > 1 && sum[st[0]] > 0)\r\n            {\r\n                // \u4e3a\u4e86\u907f\u514d\u7206\u70b8\u7684\u6570\u5b57\u5927\u5c0f\uff0c\u7279\u6b8a\u5904\u7406\u4e00\u4e9b\u60c5\u51b5\r\n                if(st[st[0]] - st[st[0] - 1] >= 40 || (1LL << (st[st[0]] - st[st[0] - 1])) > (0x7fffff7f - sum[st[0] - 1])/ sum[st[0]])\r\n                {\r\n                    sum[st[0] - 1] = 0x7fffff7f;\r\n                }\r\n                else\r\n                {\r\n                    sum[st[0] - 1] += (1LL << (st[st[0]] - st[st[0] - 1])) * sum[st[0]];\r\n                }\r\n                --st[0];\r\n            }\r\n            if(sum[st[0]] < 0x7fffff7f)\r\n            {\r\n                sum2[st[0]] = (sum2[st[0] - 1] + sum[st[0]]) % mo;\r\n            }\r\n            else\r\n            {\r\n                sum2[st[0]] = ans_sum[j];\r\n            }\r\n        }\r\n        st[st[0] + 1] = r + 1;\r\n        int pos = upper_bound(st + 1,st + st[0] + 2,l) - st;\r\n        (ans[querys[i].id] = ((sum2[st[0]] - sum2[pos - 1]) * 2 + ((ans_sum[st[pos] - 1] - ans_sum[l - 1]) * inv[l]) % mo ) % mo+ mo) %= mo;\r\n    }\r\n    for(int i = 1;i <= m;i++)\r\n    {\r\n        writeln(ans[i]);\r\n    }\r\n    return 0;\r\n}"
}