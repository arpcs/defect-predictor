{
    "id": 64908758,
    "contestId": 878,
    "creationTimeSeconds": 1573780324,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 878,
        "index": "E",
        "name": "Numbers on the blackboard",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3300,
        "tags": [
            "combinatorics",
            "dp"
        ]
    },
    "author": {
        "contestId": 878,
        "members": [
            {
                "handle": "luogu_bot4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509029100
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 4403200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define rep(i, a, b) for (int i = (a), i##end = (b); i <= i##end; ++i)\r\n#define per(i, a, b) for (int i = (a), i##end = (b); i >= i##end; --i)\r\n\r\nmt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\r\n\r\ntypedef long long ll;\r\nconst int maxn = 1e5 + 10, P = 1e9 + 7;\r\nint n, q, a[maxn], ans[maxn];\r\n\r\nstruct Querys {\r\n  int l, r, tid;\r\n} Q[maxn];\r\n\r\nint pw2[maxn], sum[maxn];\r\n\r\nint par[maxn], pre[maxn], val[maxn], sz[maxn];\r\n\r\nint query(int l, int r) {\r\n  return (sum[l] - 1ll * sum[r + 1] * pw2[r - l + 1] % P + P) % P;\r\n}\r\n\r\nint find(int x) {\r\n  return par[x] == x ? x : par[x] = find(par[x]);\r\n}\r\n\r\nvoid unite(int x, int y) {\r\n  x = find(x), y = find(y), par[y] = x;\r\n  if ((val[x] > 0 && sz[x] > 30) || (sz[x] > 30 && val[y] > 0) || (val[x] + ((ll) val[y] << sz[x])) > 1 << 30) {\r\n    val[x] = 1 << 30;\r\n  } else {\r\n    val[x] += val[y] << sz[x];\r\n  }\r\n  sz[x] += sz[y];\r\n}\r\n\r\nint main() {\r\n  pw2[0] = 1;\r\n  rep(i, 1, 1e5) pw2[i] = 2ll * pw2[i - 1] % P;\r\n  scanf(\"%d %d\", &n, &q);\r\n  rep(i, 1, n) scanf(\"%d\", a + i), par[i] = i, sz[i] = 1;\r\n  rep(i, 1, q) scanf(\"%d %d\", &Q[i].l, &Q[i].r), Q[i].tid = i;\r\n  sort(Q + 1, Q + q + 1, [] (Querys x, Querys y) {\r\n    return x.r < y.r;\r\n  });\r\n  per(i, n, 1) sum[i] = (2ll * sum[i + 1] + a[i] + P) % P;\r\n  for (int i = 1, j = 1; i <= n; i++) {\r\n    val[i] = a[i];\r\n    while (find(i) > 1 && val[find(i)] > 0) {\r\n      unite(find(i) - 1, i);\r\n    }\r\n    int rt = find(i);\r\n    pre[rt] = (query(rt, i) + pre[find(rt - 1)]) % P;\r\n    for (; j <= q && Q[j].r == i; j++) {\r\n      int x = Q[j].l, cur = find(x);\r\n      ans[Q[j].tid] = (2ll * (pre[rt] - pre[cur] + P) + query(x, cur + sz[cur] - 1)) % P;\r\n    }\r\n  }\r\n  rep(i, 1, q) printf(\"%d\\n\", ans[i]);\r\n  return 0;\r\n}"
}