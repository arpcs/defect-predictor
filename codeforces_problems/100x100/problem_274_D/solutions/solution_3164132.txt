{
    "id": 3164132,
    "contestId": 274,
    "creationTimeSeconds": 1361397015,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 274,
        "index": "D",
        "name": "Lovely Matrix",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 274,
        "members": [
            {
                "handle": "kolina"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1361374200
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 8089600,
    "source": "#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n#include <vector>\r\n#include <stack>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <queue>\r\n#include <map>\r\n#include <cstdlib>\r\n#include <queue>\r\n#include <set>\r\n#include <iomanip>\r\n\r\nusing namespace std;\r\n\r\nint main(){\r\n\t//freopen(\"input.txt\",\"r\",stdin);\r\n\t//freopen(\"output.txt\",\"w\",stdout);\r\n\tint n,m;\r\n\tcin >>n >>m;\r\n\tvector<vector <set<int> > > states(n);\r\n\tvector<vector<int> > position(m,vector<int>(n,-1));\r\n\tvector<long long> sum(m);\r\n\tfor (int i=0; i<n; ++i){\r\n\t\tvector<pair<int,int > > cur;\r\n\t\tfor (int i=0; i<m; ++i){\r\n\t\t\tint x;\r\n\t\t\tcin >>x;\r\n\t\t\tcur.push_back(make_pair(x,i));\r\n\t\t}\r\n\t\tsort(cur.begin(),cur.end());\r\n\t\tint pos=0;\r\n\t\twhile (pos<m && cur[pos].first==-1)\r\n\t\t\t++pos;\r\n\t\twhile (pos<m){\r\n\t\t\tif (pos && cur[pos-1].first!=-1 && cur[pos-1].first==cur[pos].first){\r\n\t\t\t\tint s=(int)states[i].size();\r\n\t\t\t\tsum[cur[pos].second]+=s-1;\r\n\t\t\t\tstates[i][s-1].insert(cur[pos].second);\r\n\t\t\t\tposition[cur[pos].second][i]=s-1;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tint s=(int)states[i].size();\r\n\t\t\t\tstates[i].push_back(set<int>());\r\n\t\t\t\tstates[i][s].insert(cur[pos].second);\r\n\t\t\t\tsum[cur[pos].second]+=s;\r\n\t\t\t\tposition[cur[pos].second][i]=s;\r\n\t\t\t}\r\n\t\t\t++pos;\r\n\t\t}\r\n\t}\r\n\tvector<int> place(n),ans;\r\n\tqueue<int> q;\r\n\tfor (int i=0; i<m; ++i)\r\n\t\tif (!sum[i])\r\n\t\t\tq.push(i);\r\n\twhile (!q.empty()){\r\n\t\tint v=q.front();\r\n\t\tq.pop();\r\n\t\tans.push_back(v);\r\n\t\tfor (int i=0; i<n; ++i){\r\n\t\t\tint t=place[i];\r\n\t\t\tif (t==position[v][i]){\r\n\t\t\t\tstates[i][t].erase(v);\r\n\t\t\t\tif (states[i][t].empty()){\r\n\t\t\t\t\t++place[i];\r\n\t\t\t\t\tif (place[i]<(int)states[i].size())\r\n\t\t\t\t\t\tfor (set<int>::iterator it=states[i][t+1].begin(); it!=states[i][t+1].end(); ++it){\r\n\t\t\t\t\t\t\tint g=*it;\r\n\t\t\t\t\t\t\tsum[g]-=t+1;\r\n\t\t\t\t\t\t\tif (!sum[g])\r\n\t\t\t\t\t\t\t\tq.push(g);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif ((int)ans.size()==m)\r\n\t\tfor (int i=0; i<m; ++i)\r\n\t\t\tcout <<ans[i]+1 <<\" \";\r\n\telse\r\n\t\tcout <<-1;\r\n\treturn 0;\r\n}"
}