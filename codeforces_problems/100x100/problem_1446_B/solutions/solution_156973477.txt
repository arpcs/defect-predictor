{
    "id": 156973477,
    "contestId": 1446,
    "creationTimeSeconds": 1652417467,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1446,
        "index": "B",
        "name": "Catching Cheaters",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1446,
        "members": [
            {
                "handle": "CoDeveRse_07"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605450900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 108,
    "timeConsumedMillis": 716,
    "memoryConsumedBytes": 101068800,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp> // Common file\r\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key\r\n\r\n// find_by_order-> int ele=*find_by_order(idx);->gives idx th pos ele in ordered set and 0 based indexing is used;\r\n// order_of_key->  int n=order_of_key(x);-> gives the no of element strictly smaller than x;\r\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#define endl \"\\n\"\r\n#define ll long long\r\n#define f first\r\n#define s second\r\n#define pii pair<int,int>\r\n#define lui long unsigned int\r\n\r\n\r\nconst int N = 5000005;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll MOD1 = 998244353;\r\nconst ll INF = 1e18;\r\nconst int BLK_SZ=555;\r\n\r\n\r\n\r\n\r\n\r\n\r\nlong long binpow(long long a, long long b, long long m) {\r\n    a %= m;\r\n\r\n    long long res = 1;/**/\r\n\r\n    while (b > 0) {\r\n\r\n        if (b & 1)\r\n\r\n            res = res * a % m;\r\n\r\n        a = a * a % m;\r\n\r\n        b >>= 1;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n\r\n\r\nint gcd_equation(int a, int b, int& x, int& y) {\r\n\r\n    x = 1, y = 0;\r\n\r\n    int x1 = 0, y1 = 1, a1 = a, b1 = b;\r\n\r\n    while (b1) {\r\n\r\n        int q = a1 / b1;\r\n\r\n        tie(x, x1) = make_tuple(x1, x - q * x1);\r\n\r\n        tie(y, y1) = make_tuple(y1, y - q * y1);\r\n\r\n        tie(a1, b1) = make_tuple(b1, a1 - q * b1);\r\n\r\n    }\r\n\r\n    return a1;\r\n}\r\n\r\nvoid prime_generator(vector<bool> &is_prime)\r\n{\r\n\r\n\r\n int n=N;\r\n\r\n is_prime.resize(n);\r\n\r\n fill(is_prime.begin(),is_prime.end(),true);\r\n\r\n\r\n\r\n\r\nis_prime[0] = is_prime[1] = false;\r\n\r\nfor (int i = 2; i * i <= n; i++) {\r\n\r\n    if (is_prime[i]) {\r\n\r\n        for (int j = i * i; j <= n; j += i)\r\n            is_prime[j] = false;\r\n\r\n    }\r\n}\r\n\r\n}\r\n\r\nvoid lowest_prime_factor(vector<int> &lp)\r\n{\r\n\r\n\r\n int n = 10000000;\r\n\r\n lp.resize(n+1);\r\n\r\n fill(lp.begin(),lp.end(),0);\r\n\r\n\r\nvector<int> pr;\r\n\r\nfor (int i=2; i <= n; ++i) {\r\n\r\n    if (lp[i] == 0) {\r\n\r\n        lp[i] = i;\r\n        pr.push_back(i);\r\n    }\r\n\r\n\r\n    for (int j=0; j < (int)pr.size() && pr[j] <= lp[i] && i*pr[j] <= n; ++j) {\r\n\r\n\r\n        lp[i * pr[j]] = pr[j];\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n}\r\n\r\nvoid ncr(int n,vector<ll> &factorial,vector<ll> &facinv,ll MOD)\r\n{\r\n\r\n\r\n\r\n         factorial[0]=1;\r\n\r\n         for(ll i=1;i<=n;i++)\r\n         {\r\n\r\n              factorial[i]=factorial[i-1]*i;\r\n\r\n              factorial[i]%=MOD;\r\n         }\r\n\r\n         ll modinv=binpow(factorial[n],MOD-2,MOD);\r\n\r\n         facinv[n]=modinv;\r\n\r\n         for(ll i=n-1;i>=0;i--)\r\n         {\r\n\r\n              facinv[i]=facinv[i+1]*(i+1);\r\n\r\n              facinv[i]%=MOD;\r\n\r\n         }\r\n\r\n\r\n}\r\n\r\n\r\nbool cycle_dectector_dg(int s,vector<int> adj[],vector<int> &vis)\r\n{\r\n       vis[s]=1;\r\n       for(auto child:adj[s])\r\n       {\r\n              if(vis[child]==0)\r\n              {\r\n               if(cycle_dectector_dg(child,adj,vis))return true;\r\n              }\r\n              else if(vis[child]==1)return true;\r\n       }\r\n      vis[s]=2;\r\n      return false;\r\n}\r\n\r\nbool cycle_dectector_ug(int s,int par,vector<int>adj[],vector<int> &vis)\r\n{\r\n      vis[s]=1;\r\n      for(auto child:adj[s])\r\n      {\r\n           if(child==par)continue;\r\n\r\n           if(vis[child])return true;\r\n           else\r\n           {\r\n            if(cycle_dectector_ug(child,s,adj,vis))return true;\r\n           }\r\n      }\r\n    return false;\r\n}\r\n\r\nbool is_bipartite(int s,vector<int> &vis,vector<int> adj[],vector<int> &col,int curr,int &one,int &sz)\r\n{\r\n\r\n      col[s]=curr;\r\n\r\n      sz+=1;\r\n\r\n\r\n\r\n      if(curr==1)\r\n        one+=1;\r\n\r\n\r\n      vis[s]=1;\r\n\r\n      for(auto child:adj[s])\r\n      {\r\n\r\n          if(vis[child])\r\n          {\r\n               if(col[child]==col[s])\r\n                return false;\r\n          }\r\n          else\r\n          {\r\n              if(is_bipartite(child,vis,adj,col,(curr^1),one,sz)==false)\r\n                return false;\r\n\r\n          }\r\n      }\r\n\r\n       return true;\r\n  }\r\n\r\n\r\n\r\nvoid dijkstra(int s,vector<pair<int,int>> adj[],vector<ll> &dist,vector<int> &mina_edge)\r\n{\r\n  \r\n     int n=dist.size();\r\n\r\n     vector<int> vis(n,0);\r\n\r\n     \r\n\r\n     dist[s]=0;\r\n\r\n\r\n\r\n\r\n priority_queue < pair<ll,int>,vector<pair<ll,int>>,greater<pair<ll,int>> > mnheap;    // mnheap.push(), mnheap.top(), mnheap.pop()\r\n\r\n   mnheap.push({0,s});\r\n\r\n\r\n   while(!mnheap.empty())\r\n   {\r\n       ll node=mnheap.top().second;\r\n       ll d=mnheap.top().first;\r\n\r\n       mnheap.pop();\r\n\r\n\r\n       if(vis[node])continue;\r\n\r\n\r\n       vis[node]=1;\r\n\r\n       for(auto child:adj[node])\r\n       {\r\n\r\n            if(dist[node]!=INF)\r\n            {\r\n                  ll curr=d+child.second;\r\n\r\n                  if(dist[child.first]>curr)\r\n                  {\r\n                      dist[child.first]=curr;\r\n\r\n                      mina_edge[child.first]=min(child.second,mina_edge[node]);\r\n\r\n\r\n                      mnheap.push({curr,child.first});\r\n                  }\r\n            }\r\n       }\r\n   }\r\n\r\n}\r\n\r\nint dp[5001][5001];\r\n\r\nint solve(int idx1,int idx2,int n,int m,string &a,string &b)\r\n{\r\n\r\n    if(idx1>=n)return 0;\r\n\r\n    if(idx2>=m)return 0;\r\n\r\n    if(dp[idx1][idx2]!=-1)\r\n        return dp[idx1][idx2];\r\n\r\n\r\n     int ans=0;\r\n\r\n        if(a[idx1]==b[idx2])\r\n        {\r\n            int temp=2+solve(idx1+1,idx2+1,n,m,a,b);\r\n\r\n            ans=max(ans,temp);\r\n\r\n            temp=-1+solve(idx1+1,idx2,n,m,a,b);\r\n\r\n            ans=max(ans,temp);\r\n\r\n            temp=-1+solve(idx1,idx2+1,n,m,a,b);\r\n\r\n            ans=max(ans,temp);\r\n\r\n\r\n\r\n        }\r\n        else\r\n        {\r\n\r\n           int temp=-1+solve(idx1+1,idx2,n,m,a,b);\r\n\r\n            ans=max(ans,temp);\r\n\r\n            temp=-1+solve(idx1,idx2+1,n,m,a,b);\r\n\r\n            ans=max(ans,temp);\r\n\r\n        }\r\n\r\n        return dp[idx1][idx2]=ans;\r\n\r\n\r\n}\r\n\r\n\r\nint main()\r\n{\r\n \r\n\r\n  // freopen(\"input.txt\", \"r\", stdin);\r\n  // freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n\r\nint test;test=1;\r\n// cin>>test;\r\n\r\nint test_no=1;\r\n\r\n\r\n\r\n    \r\n\r\n  \r\n  \r\n\r\n   \r\nwhile(test--)\r\n{  \r\n\r\n   \r\n \r\n    int n,m;\r\n    cin>>n>>m;\r\n\r\n    string a,b;\r\n\r\n    cin>>a>>b;\r\n\r\n    int ans=0;\r\n\r\n  memset(dp,-1,sizeof(dp));\r\n\r\n\r\n\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n          for(int j=0;j<m;j++)\r\n          {\r\n              int temp=solve(i,j,n,m,a,b);\r\n\r\n              ans=max(ans,temp);\r\n          }\r\n    }\r\n\r\n    cout<<ans<<endl;\r\n\r\n\r\n   \r\n\r\n\r\n\r\n}\r\n\r\n\r\n   clock_t time_req = clock();\r\n\r\n   // cout<<(float)time_req/CLOCKS_PER_SEC << \" seconds\" << endl;\r\n\r\nreturn 0;\r\n      \r\n         \r\n     \r\n}"
}