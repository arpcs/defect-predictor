{
    "id": 174057128,
    "contestId": 1446,
    "creationTimeSeconds": 1664526917,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1446,
        "index": "B",
        "name": "Catching Cheaters",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1446,
        "members": [
            {
                "handle": "hasan2006"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605450900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 56115200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n#define TL ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\r\n#define rall(s) s.rbegin(),s.rend()\r\n#define all(s) s.begin(),s.end()\r\n#define pb push_back\r\n#define fi first\r\n#define se second\r\n#define ll long long\r\n#define ld long double\r\n#define YES cout<<\"YES\\n\"\r\n#define Yes cout<<\"Yes\\n\"\r\n#define yes cout<<\"yes\\n\"\r\n#define NO cout<<\"NO\\n\"\r\n#define No cout<<\"No\\n\"\r\n#define no cout<<\"no\\n\"\r\n\r\nconst int N = 1e6 + 9;\r\nll a[N]  = {}, b[N] = {} ,tree[N] = {} , Mx , tree1[N] = {} , le[N] , ri[N] , Mn , size1 , size2 ,ans[N] = {};\r\nvector<pair<int,int>>v;\r\n\r\n\r\nvoid build_tree(){\r\nfor(int i = size2; i >= 1; i --){\r\n     tree[i] = 1e10;\r\n     tree1[i] = 0;\r\n     if(i > size1){\r\n          le[i] = ri[i] = i;\r\n     }else{\r\n     le[i] = le[2 * i + 1] , ri[i] = ri[2 * i + 2];\r\n     }\r\n}\r\n}\r\nvoid change(int i){\r\n     tree[i] = min(tree[2 * i],tree[2 * i + 1]);\r\n     tree1[i] = max(tree[2 * i],tree[2 * i + 1]);\r\n     if(i == 1)\r\n          return;\r\n     change(i / 2);\r\n}\r\n\r\nvoid get(int i , int l , int r , int o){\r\n     if(le[i] > r || ri[i] < l)\r\n          return;\r\n     if(le[i] >= l && ri[i] <= r)\r\n          if(o == 0)\r\n          Mn = min(Mn, tree[i]);\r\n          else\r\n               Mx = max(Mx , tree1[i]);\r\n     get(2 * i , l , r , o);\r\n     get(2 * i  + 1 , l , r , o);\r\n}\r\nvoid solve()\r\n{\r\n     ll  q , f , l , r,  s = 0, x , y , i , n , m , j , k , mn = 1e10,mx = -1e9;\r\n     cin>>n>>x;\r\n     size1 = (1 << 18) - 1;\r\n     size2 = (1 << 19) - 1;\r\n     build_tree();\r\n     for(i = 1; i <= x; i++){\r\n          cin>>k;\r\n          if(ans[k] == 0){\r\n           Mn = 1e10 ,Mx = 0;\r\n           get(1 , k + size1, n + size1 , 0);\r\n           if(k != 1)\r\n           get(1 , 1 + size1, k  - 1 + size1 , 1);\r\n           r = min(Mn , n);\r\n           l = max(Mx, 1ll);\r\n           while(l != r){\r\n               m = (l + r) / 2;\r\n               cout<<\"? \"<<1<<\" \"<<m<<\"\\n\";\r\n               cin>>f;\r\n               s = m - f;\r\n               tree[s + size1] = min(tree[s + size1] , m);\r\n               tree1[s + size1] = max(tree1[s + size1] , m);\r\n               change((s + size1) / 2);\r\n               if(m - f >= k){\r\n                    r = m;\r\n               }else {\r\n               l = m + 1;\r\n               }\r\n          }\r\n          ans[k] = l;\r\n          }\r\n          cout<<\"! \"<<ans[k]<<\"\\n\";\r\n     }\r\n}\r\n\r\nint main(){\r\n     TL\r\n     /*#ifndef ONLINE_JUDGE\r\n     freopen(\"input.txt\", \"r\", stdin);\r\n     freopen(\"output.txt\", \"w\", stdout);\r\n     #endif*/\r\n\r\nint t = 1;\r\n\r\n//cin>>t;\r\nwhile(t--)\r\n     {\r\n     solve();\r\n     }\r\n\r\n}\r\n\r\n"
}