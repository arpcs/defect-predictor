{
    "id": 111184465,
    "contestId": 1446,
    "creationTimeSeconds": 1616825690,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1446,
        "index": "B",
        "name": "Catching Cheaters",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1446,
        "members": [
            {
                "handle": "om12"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605450900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define mod 1000000007\r\n#define ll long long int\r\n#define pb push_back\r\n#define debug1(x) cout<<#x<<\" \"<<x<<endl;\r\n#define debug2(x,y) cout<<#x<<\" \"<<x<<\" \"<<#y<<\" \"<<y<<endl;\r\n#define debug3(x,y,z) cout<<#x<<\" \"<<x<<\" \"<<#y<<\" \"<<y<<\" \"<<#z<<\" \"<<z<<endl;\r\n#define present(c,x) ((c).find(x) != (c).end())\r\n#define null NULL\r\n#define mp make_pair\r\n#define sz(x)\t(ll)x.size()\r\n#define fi first\r\n#define se second\r\n#define boost ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define inf 1e17\r\n#define flush fflush(stdout);\r\n#define fr(i,a,b) for(int i=a;i<b;i++)\r\n#define all(x) (x).begin(),(x).end()\r\n#define prDouble(x) cout<<fixed<<setPrecision(10)<<x\r\n#define endl '\\n'\r\nconst int N=5005;\r\nvoid lcsAlgo(string S1, string S2, int m, int n) {\r\n  int LCS_table[m + 1][n + 1]={{0}};\r\n    //memset(LCS_table,0,)\r\n  // Building the mtrix in bottom-up way\r\n  int index=0;\r\n  for (int i = 0; i <= m; i++) {\r\n    for (int j = 0; j <= n; j++) {\r\n      if (i == 0 || j == 0)\r\n        LCS_table[i][j] = 0;\r\n      else if (S1[i - 1] == S2[j - 1])\r\n        LCS_table[i][j] = max(LCS_table[i][j], LCS_table[i - 1][j - 1] + 2);\r\n      else\r\n        LCS_table[i][j] = max(LCS_table[i - 1][j], LCS_table[i][j - 1])-1;\r\n        index=max(LCS_table[i][j],index);\r\n    }\r\n  }\r\n\r\n   \r\n  cout<<index<<\"\\n\";\r\n  // Printing the sub sequences\r\n  //cout << \"S1 : \" << S1 << \"\\nS2 : \" << S2 << \"\\n\";// << lcsAlgo << \"\\n\";\r\n  //debug1(index);\r\n}\r\n\r\n\r\nvoid solve(){\r\n    int n,m;\r\n    cin>>n>>m;\r\n    string S1,S2;\r\n    cin>>S1>>S2;\r\n    lcsAlgo(S1, S2, n, m);\r\n    \r\n}\r\n\r\n\r\n\r\n\r\nint main(){\r\n    boost;\r\n    int t;\r\n    t=1;\r\n    while(t--){\r\n        solve();\r\n    }\r\n}"
}