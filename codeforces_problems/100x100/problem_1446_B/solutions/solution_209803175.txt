{
    "id": 209803175,
    "contestId": 1446,
    "creationTimeSeconds": 1686858293,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1446,
        "index": "B",
        "name": "Catching Cheaters",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1446,
        "members": [
            {
                "handle": "crocodile24"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605450900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\r\n#define ll              long long \r\n#define loop(i,m,n)     for(ll i=m; i<n; i++)\r\n#define pb              push_back\r\n#define mp              make_pair\r\n#define F               first\r\n#define S               second\r\n#define all(x)          x.begin(),x.end()\r\n#define print(x)        for(auto t : x){cout << t;}cout <<\"\\n\";\r\n#define printl(x)      for(auto t : x)cout << t <<\"\\n\";\r\n\r\n#define sum(a)     ( accumulate ((a).begin(), (a).end(), 0ll))\r\n#define minel(a)    (*min_element((a).begin(), (a).end()))\r\n#define maxel(a)    (*max_element((a).begin(), (a).end()))\r\n#define mini(a)     min_element(a.begin(), a.end())-a.begin()\r\n#define maxi(a)    max_element(a.begin(), a.end())-a.begin()\r\n#define lowb(a, x) ( lower_bound((a).begin(), (a).end(), (x)) - (a).begin())\r\n#define uppb(a, x) ( upper_bound((a).begin(), (a).end(), (x)) - (a).begin())\r\n#define M 1000000007\r\n\r\n\r\n/////////////////////////\r\n const ll INF = 9e17;\r\n// ll color[200001];\r\n// bool vis[200001];\r\n// vector<ll> adj[200001];\r\n\r\nclass DisjointSet {\r\n    vector<int> rank, parent, size;\r\npublic:\r\n    DisjointSet(int n) {\r\n        rank.resize(n + 1, 0);\r\n        parent.resize(n + 1);\r\n        size.resize(n + 1);\r\n        for (int i = 0; i <= n; i++) {\r\n            parent[i] = i;\r\n            size[i] = 1;\r\n        }\r\n    }\r\n\r\n    int findUPar(int node) {\r\n        if (node == parent[node])\r\n            return node;\r\n        return parent[node] = findUPar(parent[node]);\r\n    }\r\n\r\n    void unionByRank(int u, int v) {\r\n        int ulp_u = findUPar(u);\r\n        int ulp_v = findUPar(v);\r\n        if (ulp_u == ulp_v) return;\r\n        if (rank[ulp_u] < rank[ulp_v]) {\r\n            parent[ulp_u] = ulp_v;\r\n        }\r\n        else if (rank[ulp_v] < rank[ulp_u]) {\r\n            parent[ulp_v] = ulp_u;\r\n        }\r\n        else {\r\n            parent[ulp_v] = ulp_u;\r\n            rank[ulp_u]++;\r\n        }\r\n    }\r\n\r\n    void unionBySize(int u, int v) {\r\n        int ulp_u = findUPar(u);\r\n        int ulp_v = findUPar(v);\r\n        if (ulp_u == ulp_v) return;\r\n        if (size[ulp_u] < size[ulp_v]) {\r\n            parent[ulp_u] = ulp_v;\r\n            size[ulp_v] += size[ulp_u];\r\n        }\r\n        else {\r\n            parent[ulp_v] = ulp_u;\r\n            size[ulp_u] += size[ulp_v];\r\n        }\r\n    }\r\n};\r\n\r\nvoid sieve(ll n ){\r\n    bool prime[n+1];\r\n    memset(prime , true , sizeof(prime));\r\n    for(ll i = 2 ; i*i <= n;i++){\r\n        if(prime[i]){\r\n            for(int j = i*i;j<=n;j+=i){\r\n                prime[j] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nvoid solve(){\r\n     ll n , m;\r\n     cin >> n >> m;\r\n     string s1 , s2 ;\r\n     cin >> s1;\r\n     cin >> s2;\r\n     ll dp[n+1][m+1];\r\n     memset(dp,0,sizeof(dp));\r\nll ans = 0;\r\n     for(int i = 1;i<=n;i++){\r\n        for(int j = 1;j<=m;j++){\r\n            if(s1[i-1] == s2[j-1]){\r\n                dp[i][j] = max(dp[i][j] , dp[i-1][j-1]+2);\r\n            }\r\n            else{\r\n                dp[i][j] = max(dp[i-1][j] , dp[i][j-1] )-1;\r\n            }\r\n            ans = max(ans , dp[i][j]);\r\n        }\r\n     }\r\n\r\n     cout << ans << endl;\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nvoid sublime(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(NULL);\r\n    #ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n    #endif \r\n\r\n}\r\nint main(){\r\n\r\n    //freopen(\"speeding.in\", \"r\", stdin);    \r\n     sublime();\r\n    // // freopen(\"input.in\", \"r\", stdin);\r\n    // // freopen(\"output.out\", \"w\", stdout);\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(NULL);\r\n    ll t=1  ;\r\n    //cin >> t;\r\n    while(t>0){\r\n       solve();\r\n        t--;\r\n    }\r\n\r\n\r\n\r\n\r\n     \r\n\r\n\r\n\r\n\r\n\r\n}"
}