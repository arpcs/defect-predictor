{
    "id": 98827026,
    "contestId": 1446,
    "creationTimeSeconds": 1605714487,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1446,
        "index": "B",
        "name": "Catching Cheaters",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1446,
        "members": [
            {
                "handle": "Kogarashi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605450900
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class LongestCommonSubString {\r\n\tstatic class FastReader \r\n\t{ \r\n\t\tBufferedReader br; \r\n\t\tStringTokenizer st; \r\n\r\n\t\tpublic FastReader() \r\n\t\t{ \r\n\t\t\tbr = new BufferedReader(new\r\n\t\t\t\t\tInputStreamReader(System.in)); \r\n\t\t} \r\n\r\n\t\tString next() \r\n\t\t{ \r\n\t\t\twhile (st == null || !st.hasMoreElements()) \r\n\t\t\t{ \r\n\t\t\t\ttry\r\n\t\t\t\t{ \r\n\t\t\t\t\tst = new StringTokenizer(br.readLine()); \r\n\t\t\t\t} \r\n\t\t\t\tcatch (IOException e) \r\n\t\t\t\t{ \r\n\t\t\t\t\te.printStackTrace(); \r\n\t\t\t\t} \r\n\t\t\t} \r\n\t\t\treturn st.nextToken(); \r\n\t\t} \r\n\r\n\t\tint nextInt() \r\n\t\t{ \r\n\t\t\treturn Integer.parseInt(next()); \r\n\t\t} \r\n\r\n\t\tlong nextLong() \r\n\t\t{ \r\n\t\t\treturn Long.parseLong(next()); \r\n\t\t} \r\n\r\n\t\tdouble nextDouble() \r\n\t\t{ \r\n\t\t\treturn Double.parseDouble(next()); \r\n\t\t} \r\n\r\n\t\tString nextLine() \r\n\t\t{ \r\n\t\t\tString str = \"\"; \r\n\t\t\ttry\r\n\t\t\t{ \r\n\t\t\t\tstr = br.readLine(); \r\n\t\t\t} \r\n\t\t\tcatch (IOException e) \r\n\t\t\t{ \r\n\t\t\t\te.printStackTrace(); \r\n\t\t\t} \r\n\t\t\treturn str; \r\n\t\t} \r\n\t} \r\n\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tFastReader f=new FastReader();\r\n\t\tint len1=f.nextInt();\r\n\t\tint len2=f.nextInt();\r\n\t\tString s1=f.nextLine();\r\n\t\tString s2=f.nextLine();\r\n\t\tchar X[]=s1.toCharArray();\r\n\t\tchar Y[]=s2.toCharArray();\r\n\t\tint m=s1.length();\r\n\t\tint n=s2.length();\r\n\t\tint LCStuff[][] = new int[m + 1][n + 1]; \r\n        int result = 0;  // To store length of the longest common substring \r\n          \r\n        // Following steps build LCSuff[m+1][n+1] in bottom up fashion \r\n        for (int i = 0; i <= m; i++)  \r\n        { \r\n            for (int j = 0; j <= n; j++)  \r\n            { \r\n                if (i == 0 || j == 0) \r\n                    LCStuff[i][j] = 0; \r\n                else if (X[i - 1] == Y[j - 1]) \r\n                { \r\n                    LCStuff[i][j] = LCStuff[i - 1][j - 1] + 1; \r\n                    result = Integer.max(result, LCStuff[i][j]); \r\n                }  \r\n                else\r\n                    LCStuff[i][j] = 0; \r\n            } \r\n        }\r\n        \r\n        \r\n  \r\n\t\tint arr[][]=new int[m+1][n+1];\r\n\t\tfor(int i=0;i<n+1;i++) {\r\n\t\t\tarr[0][i]=0;\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i=0;i<m+1;i++) {\r\n\t\t\tarr[i][0]=0;\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i=1;i<=m;i++) {\r\n\t\t\tfor(int j=1;j<=n;j++) {\r\n\t\t\t\tif(s1.charAt(i-1)==s2.charAt(j-1)) {\r\n\t\t\t\t\tarr[i][j]=1+arr[i-1][j-1];\r\n\t\t\t\t}else {\r\n\t\t\t\t\tarr[i][j]=Math.max(arr[i-1][j],arr[i][j-1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(result+arr[m][n]);\r\n\t}\r\n\t\r\n\t\r\n\r\n}\r\n"
}