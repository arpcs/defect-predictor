{
    "id": 228259905,
    "contestId": 1352,
    "creationTimeSeconds": 1697356102,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1352,
        "index": "D",
        "name": "Alice, Bob and Candies",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1352,
        "members": [
            {
                "handle": "BoaHancock"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1589034900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nclass fastIO {\r\nprivate:\r\n    char ibuf[50007], *p1 = ibuf, *p2 = ibuf, obuf[50007], *p3 = obuf, sta[50];\r\n    bool file_end = false;\r\n    char get() {\r\n        return p1 == p2 && (p2 = (p1 = ibuf) + fread(ibuf, 1, 50007, stdin), p1 == p2) ? (file_end = true), char(EOF): *p1++;\r\n    }\r\n    void put(const char x) {\r\n        p3 - obuf < 50007 ? *p3 ++ = x : (fwrite(obuf, p3 - obuf, 1, stdout), p3 = obuf, *p3++ = x);\r\n    }\r\npublic:\r\n    explicit operator bool() { return !file_end; }\r\n    size_t flush() {\r\n        size_t f = fwrite(obuf, p3 - obuf, 1, stdout);\r\n        p3 = obuf;\r\n        *p3 = 0;\r\n        return f;\r\n    }\r\n    fastIO &operator>>(char &t) {\r\n        for (t = get(); !isgraph(t); t = get());\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<is_same<any, char>::value, any>::type tpval() {\r\n        char t;\r\n        for (t = get(); !isgraph(t); t = get());\r\n        return t;\r\n    }\r\n    fastIO &operator>>(char *t) {\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())*t = c, t++;\r\n        *t = 0;\r\n        return *this;\r\n    }\r\n    fastIO &operator>>(string &t) {\r\n        t.clear();\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())t += c;\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<is_same<any, string>::value, any>::type tpval() {\r\n        string t;\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())t += c;\r\n        return t;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_signed<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __int128_t>::value, fastIO>::type &operator>>(any &t) {\r\n        t = 0;\r\n        bool y = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get())if (c == 45)y = true;\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        if (y == 1)t = -t;\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_signed<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __int128_t>::value, any>::type tpval() {\r\n        any t = 0;\r\n        bool y = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get())if (c == 45)y = true;\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        if (y == 1)t = -t;\r\n        return t;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_unsigned<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __uint128_t>::value, fastIO>::type &operator>>(any &t) {\r\n        t = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get());\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_unsigned<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __uint128_t>::value, any>::type tpval() {\r\n        any t = 0;\r\n        char c = get();\r\n        for (; !isdigit(c); c = get());\r\n        for (; isdigit(c); c = get())t = t * 10 + c - 48;\r\n        return t;\r\n    }\r\n    template<typename any1, typename any2>\r\n    fastIO &operator>>(pair<any1, any2> &t) { return *this >> t.first >> t.second; }\r\n    template<typename any1, typename any2>\r\n    pair<any1, any2> tpval() { return pair<any1, any2>(tpval<any1>(), tpval<any2>()); }\r\n    template<typename any>\r\n    fastIO &read(any &t) { return *this >> t; }\r\n    fastIO &read(char *t) {\r\n        char c;\r\n        for (c = get(); !isgraph(c); c = get());\r\n        for (; isgraph(c); c = get())*t = c, t++;\r\n        *t = 0;\r\n        return *this;\r\n    }\r\n    template<typename any, typename...args>\r\n    fastIO &read(any &t1, args &...t2) { return (*this >> t1).read(t2...); }\r\n    fastIO &operator<<(const char t) {\r\n        put(t);\r\n        return *this;\r\n    }\r\n    fastIO &operator<<(const char *t) {\r\n        for (; *t; t++)put(*t);\r\n        return *this;\r\n    }\r\n    fastIO &operator<<(const string &t) {\r\n        for (const char it: t)put(it);\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_signed<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __int128_t>::value, fastIO>::type &operator<<(any t) {\r\n        if (!t) {\r\n            put(48);\r\n            return *this;\r\n        }\r\n        int len = 0;\r\n        if (t < 0)t = -t, put(45);\r\n        while (t)sta[len++] = char(t % 10 + 48), t /= 10;\r\n        while (len--)put(sta[len]);\r\n        return *this;\r\n    }\r\n    template<typename any>\r\n    typename enable_if<\r\n            (is_unsigned<any>::value && is_integral<any>::value && !is_same<any, char>::value) ||\r\n            is_same<any, __uint128_t>::value, fastIO>::type &operator<<(any t) {\r\n        if (!t) {\r\n            put(48);\r\n            return *this;\r\n        }\r\n        int len = 0;\r\n        while (t)sta[len++] = char(t % 10 + 48), t /= 10;\r\n        while (len--)put(sta[len]);\r\n        return *this;\r\n    }\r\n    template<typename any1, typename any2>\r\n    fastIO &operator<<(const pair<any1, any2> &t) { return *this << t.first << ' ' << t.second; }\r\n    template<typename any>\r\n    fastIO &write(const any &t) { return *this << t; }\r\n    template<typename any, typename...args>\r\n    fastIO &write(const any &t1, const args &...t2) { return (*this << t1).write(t2...); }\r\n\r\n    ~fastIO() { fwrite(obuf, p3 - obuf, 1, stdout); }\r\n}FastIO;\r\n#define cin FastIO\r\n#define cout FastIO\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    vector<int> v(n);\r\n    vector<bool> vis(n, false);\r\n    for(int i = 0; i < n; ++ i) {\r\n        cin >> v[i];\r\n    }\r\n    int l = 0, r = n - 1, suml = 0, sumr = 0, step = 0;\r\n    int lasl = 0, lasr = 0;\r\n    while(l <= r) {\r\n        ++ step;\r\n        lasl = 0;\r\n        while (lasl <= lasr && !vis[l]) {\r\n            suml += v[l], lasl += v[l];\r\n            vis[l] = true, ++ l;\r\n        }\r\n        lasr = 0;\r\n        while (sumr <= suml && !vis[r]) {\r\n            sumr += v[r], lasr += v[r];\r\n            vis[r] = true, -- r;\r\n        }\r\n    }\r\n    cout << step << ' ' << suml << ' ' << sumr << '\\n';\r\n}\r\nint32_t main() {\r\n#ifdef ONLINE_JUDGE\r\n#else\r\n    freopen(\"FuDiWeiU.in\", \"r\", stdin);\r\n    freopen(\"FuDiWeiU.out\", \"w\", stdout);\r\n#endif\r\n    int T = 1;\r\n    cin >> T;\r\n    while(T --) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}