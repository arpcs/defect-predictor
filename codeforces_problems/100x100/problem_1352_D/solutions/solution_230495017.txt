{
    "id": 230495017,
    "contestId": 1352,
    "creationTimeSeconds": 1698669138,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1352,
        "index": "D",
        "name": "Alice, Bob and Candies",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1352,
        "members": [
            {
                "handle": "eren_yeagar"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1589034900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define int long long int\r\n#define debug(x) cout<<#x<<\" is \"<<x<<endl;\r\n\r\nconst int mod = 1e9+7;\r\nconst double pi = 3.141592653589793;\r\nconst double eps = 1e-9;\r\n\r\n// struct custom_hash {\r\n//     static uint64_t splitmix64(uint64_t x) {\r\n//         // http://xorshift.di.unimi.it/splitmix64.c\r\n//         x += 0x9e3779b97f4a7c15;\r\n//         x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n//         x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n//         return x ^ (x >> 31);\r\n//     }\r\n\r\n//     size_t operator()(uint64_t x) const {\r\n//         static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n//         return splitmix64(x + FIXED_RANDOM);\r\n//     }\r\n// };\r\n\r\nint gcdextended(int a, int b, int* x, int* y){\r\n    if(a==0)\r\n    {\r\n        *x = 0;\r\n        *y = 1;\r\n        return b;\r\n    }\r\n    int x1,y1;\r\n    int g = gcdextended(b%a, a, &x1, &y1);\r\n    *x = y1 - (b/a)*x1;\r\n    *y = x1;\r\n    return g;\r\n}\r\n\r\nvoid sieve(int n, vector <int> &primes){\r\n    bool nums[n+1];\r\n    memset(nums, true, sizeof(nums));\r\n    nums[0] = false;\r\n    nums[1] = false;\r\n    for(int i=2; i*i<=n; i++)\r\n    {\r\n        if(nums[i])\r\n        {\r\n            primes.push_back(i);\r\n            for(int j=i*i; j<=n; j+=i)\r\n            {\r\n                nums[j] = false;\r\n            }\r\n        }\r\n    }\r\n    for(int i=sqrt(n); i<=n; i++)\r\n    {\r\n        if(nums[i])\r\n            primes.push_back(i);\r\n    }\r\n}\r\n\r\n\r\n/*\r\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\r\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*\r\n*/\r\n\r\nvoid tatakae(){\r\n\r\n    int n;\r\n    cin>>n;\r\n    vector <int> nums(n);\r\n    for(int i=0; i<n; i++)\r\n        cin>>nums[i];\r\n    int alice = 0;\r\n    int bob = 0;\r\n    int total = 0;\r\n    int current = 0;\r\n    int i = -1;\r\n    int j = n;\r\n    int moves = 0;\r\n    bool flag = true;\r\n    while(i+1<j){\r\n        if(flag){\r\n            while(current <= total && i+1<j){\r\n                i++;\r\n                alice += nums[i];\r\n                current += nums[i];\r\n            }\r\n            flag = !flag;\r\n        }\r\n        else{\r\n            while(current <= total && i+1<j){\r\n                j--;\r\n                bob += nums[j];\r\n                current += nums[j];\r\n            }\r\n            flag = !flag;\r\n        }\r\n        total = current;\r\n        current = 0;\r\n        moves++;\r\n    }\r\n    cout<<moves<<\" \"<<alice<<\" \"<<bob<<\"\\n\";\r\n\r\n}\r\n\r\nsigned main(){\r\n\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    cout<<fixed<<setprecision(16);\r\n\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    //freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    int t=1;\r\n    cin>>t;\r\n    for(int i=0; i<t; i++)\r\n        tatakae();\r\n}"
}