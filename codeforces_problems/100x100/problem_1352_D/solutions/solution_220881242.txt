{
    "id": 220881242,
    "contestId": 1352,
    "creationTimeSeconds": 1693240747,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1352,
        "index": "D",
        "name": "Alice, Bob and Candies",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1352,
        "members": [
            {
                "handle": "rp20"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1589034900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long int\r\n#define vii vector<pair<ll, ll>>\r\n#define ff(i, a, b) for (ll i = a; i < b; ++i)\r\n#define fr(i, a, b) for (ll i = a; i >= b; --i)\r\n#define vs vector<string>\r\n#define vec vector<ll>\r\n#define mpll map<ll, ll>\r\n#define mpcl map<char, ll>\r\n#define mpsl map<string, ll>\r\n#define pb push_back\r\n#define vvi vector<vector<ll>>\r\n#define bs(v, a) binary_search(v.begin(), v.end(), a)\r\n// #define endl\r\n\r\n#define srtv(v, n) sort(v.begin(), v.end())\r\n#define isortarry(arr, n) sort(arr, arr + n)\r\n#define dsortarry(arr, n) sort(arr, arr + n, greater<int>())\r\n#define mod 1000000007\r\n\r\nll f(vector<ll> &arr, ll ind, ll k, vector<ll> &dp)\r\n{\r\n    if (ind == 0)\r\n    {\r\n        return 0;\r\n    }\r\n    if (dp[ind] != -1)\r\n    {\r\n        return dp[ind];\r\n    }\r\n    ll maxi = INT_MAX;\r\n    ff(i, 1, k + 1)\r\n    {\r\n        if (ind - i >= 0)\r\n        {\r\n            ll j = f(arr, ind - i, k, dp) + abs(arr[ind] - arr[ind - i]);\r\n            maxi = min(maxi, j);\r\n        }\r\n    }\r\n    return dp[ind] = maxi;\r\n}\r\n// get total set bit\r\nll getsetbit(ll num)\r\n{\r\n    return __builtin_popcount(num);\r\n}\r\n// check whether it is possible to place cow at min distance of mid or not\r\nbool check(int x, vec &v, ll n, ll k)\r\n{\r\n    ll cnt = 1;\r\n    ll co = v[0];\r\n    ff(i, 1, n)\r\n    {\r\n        if (v[i] - co >= x)\r\n        {\r\n            cnt++;\r\n            co = v[i];\r\n        }\r\n        if (cnt == k)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/*************FIND GCD OF TWO NUMBERS*************/\r\nll gcd(ll a, ll b)\r\n{\r\n    if (b == 0)\r\n        return a;\r\n    else\r\n        return gcd(b, a % b);\r\n}\r\n/*************FIND LCM OF TWO NUMBERS*************/\r\nll lcm(ll a, ll b)\r\n{\r\n    return (a * b) / gcd(a, b);\r\n}\r\n/*************POWER OF A TO B*************/\r\n// ll ul = 1e9 + 7;\r\nll power(ll a, ll b)\r\n{\r\n\r\n    ll ans = 1;\r\n    while (b != 0)\r\n    {\r\n        if (b & 1)\r\n        {\r\n            b--;\r\n            ans = (ans * a);\r\n        }\r\n        else\r\n        {\r\n            a = (a * a);\r\n            b /= 2;\r\n        }\r\n    }\r\n    return ans;\r\n}\r\n\r\n/*************FIND NUMBER OF DIGIT IN A*************/\r\nll digits(ll n)\r\n{\r\n    ll k = 0;\r\n\r\n    ll q = n;\r\n    while (q > 0)\r\n    {\r\n        q = q / 10;\r\n        k++;\r\n    }\r\n    return k;\r\n}\r\nbool prime(ll n)\r\n{\r\n    if (n == 1 || n == 0)\r\n    {\r\n        return false;\r\n    }\r\n    if (n == 2 || n == 3)\r\n    {\r\n        return true;\r\n    }\r\n    ff(i, 2, sqrt(n) + 1)\r\n    {\r\n        if (n % i == 0)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nvoid factor(ll p, vector<ll> &ans)\r\n{\r\n\r\n    for (int i = 2; i * 1ll * i <= p; ++i)\r\n    {\r\n        if (p % i == 0)\r\n        {\r\n            ans.pb(i);\r\n            if (i != p / i)\r\n            {\r\n                ans.pb(p / i);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/*************YOUR CODE GOES HERE*************/\r\n// const int N = (int)1e5 + 5;\r\n// int a[N], b[N];\r\n// ll xxx = 1e9;\r\n// string s;\r\nvoid bfs(vector<vector<int>> &vis, vector<vector<int>> &v, int row, int col, int n)\r\n{\r\n    queue<pair<int, int>> q;\r\n    q.push({row, col});\r\n    // int ans = 0;\r\n    vis[row][col] = 1;\r\n    // ans += v[row][col];\r\n    int delr[4] = {-1, 0, 1, 0};\r\n    int delc[4] = {0, 1, 0, -1};\r\n\r\n    while (!q.empty())\r\n    {\r\n\r\n        int a = q.front().first;\r\n        int b = q.front().second;\r\n        q.pop();\r\n        for (int i = -1; i <= 1; i++)\r\n        {\r\n            for (int j = -1; j <= 1; j++)\r\n            {\r\n                int nrow = a + i;\r\n                int ncol = b + j;\r\n                if (nrow >= 0 && nrow < 2 && ncol >= 0 && ncol < n && vis[nrow][ncol] == 0 && v[nrow][ncol] != 1)\r\n                {\r\n                    q.push({nrow, ncol});\r\n                    vis[nrow][ncol] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nbool sum(ll x, ll arr[], int n)\r\n{\r\n    ll f = 0;\r\n    ll cnt = 1, maxi = arr[0], mini = arr[0];\r\n    ff(i, 1, n)\r\n    {\r\n        maxi = arr[i];\r\n        ll p = (maxi - mini + 1) / 2;\r\n        if (p <= x)\r\n        {\r\n\r\n            continue;\r\n        }\r\n        else\r\n        {\r\n            cnt++;\r\n            mini = arr[i];\r\n            if (cnt > 3)\r\n            {\r\n                f = 1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!f)\r\n    {\r\n        return true;\r\n    }\r\n    else\r\n    {\r\n\r\n        return false;\r\n    }\r\n}\r\n// factorial function\r\nll fact(ll n)\r\n{\r\n    if (n == 0)\r\n        return 1;\r\n    ll res = 1;\r\n    for (int i = 2; i <= n; i++)\r\n        res = res * i;\r\n    return res;\r\n}\r\nll nCr(ll n, ll r)\r\n{\r\n    return fact(n) / (fact(r) * fact(n - r));\r\n}\r\n// ll mod = 1e9 + 7;\r\n\r\nbool f0(ll x, ll arr[], ll sum, ll n)\r\n{\r\n    x = n - x;\r\n    if (sum % x != 0)\r\n    {\r\n        return false;\r\n    }\r\n    ll val = sum / x;\r\n    int curr = 0;\r\n    ff(i, 0, n)\r\n    {\r\n        curr += arr[i];\r\n        if (curr == val)\r\n        {\r\n            curr = 0;\r\n        }\r\n        else if (curr > val)\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n    if (curr == 0)\r\n    {\r\n        return true;\r\n    }\r\n}\r\n// ll n;\r\nvector<ll> vis;\r\nvoid dfs(ll c, ll p, vector<vector<ll>> &v)\r\n{\r\n    // if (vis[c]==0)\r\n    // {\r\n    //     vis[c] = 1;\r\n    // }\r\n    for (auto it : v[c])\r\n    {\r\n        if (it != p)\r\n        {\r\n            dfs(it, c, v);\r\n            vis[c] += vis[it];\r\n        }\r\n    }\r\n    if (vis[c] == 0)\r\n    {\r\n        vis[c] = 1;\r\n    }\r\n}\r\n// finding square root of number\r\nll square(ll x)\r\n{\r\n    if (x == 0)\r\n    {\r\n        return 0;\r\n    }\r\n    ll s = 0;\r\n    ll e = x;\r\n    long long int mid = s + (e - s) / 2;\r\n    long long ans = -1;\r\n    while (s <= e)\r\n    {\r\n        long long p = mid * mid;\r\n        if (p == x)\r\n        {\r\n            return mid;\r\n        }\r\n        if (p < x)\r\n        {\r\n            ans = mid;\r\n            s = mid + 1;\r\n        }\r\n        else\r\n        {\r\n            e = mid - 1;\r\n        }\r\n        mid = s + (e - s) / 2;\r\n    }\r\n    return ans;\r\n}\r\n// recurence of 0-1 knapsack\r\nll knapsack(ll ind, vec &page, vec &price, ll x, vector<vector<ll>> &dp)\r\n{\r\n    if (ind == 0)\r\n    {\r\n        if (x >= price[0])\r\n        {\r\n            return page[0];\r\n        }\r\n        return 0;\r\n    }\r\n    if (dp[ind][x] != -1)\r\n    {\r\n        return dp[ind][x];\r\n    }\r\n    ll notpick = 0 + knapsack(ind - 1, page, price, x, dp);\r\n    ll pick = INT_MIN;\r\n    if (x >= price[ind])\r\n    {\r\n        pick = page[ind] + knapsack(ind - 1, page, price, x - price[ind], dp);\r\n    }\r\n    ll ans = max(pick, notpick);\r\n    return dp[ind][x] = (ans) % mod;\r\n}\r\nbool ispossible(ll ind, vec &v, ll k, vector<vector<ll>> &dp)\r\n{\r\n\r\n    // base case\r\n    if (k == 0)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    if (ind == 0)\r\n    {\r\n        if (k == v[0])\r\n        {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    if (dp[ind][k] != -1)\r\n    {\r\n        return dp[ind][k];\r\n    }\r\n\r\n    bool notpick = ispossible(ind - 1, v, k, dp);\r\n    bool pick = false;\r\n    if (k >= v[ind])\r\n    {\r\n        pick = ispossible(ind - 1, v, k - v[ind], dp);\r\n    }\r\n    return dp[ind][k] = pick | notpick;\r\n}\r\nll coins(ll ind, ll x, vec &arr, vector<vector<ll>> &dp)\r\n{\r\n    // base case\r\n    // if target has achieved\r\n    // if (x == 0)\r\n    // {\r\n    //     return 1;\r\n    // }\r\n    // index =0\r\n    if (ind == 0)\r\n    {\r\n        if (x % arr[ind] == 0)\r\n        {\r\n            return x / arr[ind];\r\n        }\r\n        return INT_MAX;\r\n    }\r\n    if (dp[ind][x] != -1)\r\n    {\r\n        return dp[ind][x];\r\n    }\r\n    // its my mood to not pick the element\r\n    ll notpick = 0 + coins(ind - 1, x, arr, dp);\r\n    // its my mood to pick the element\r\n    ll pick = INT_MAX;\r\n    if (x >= arr[ind])\r\n    {\r\n\r\n        pick = 1 + coins(ind, x - arr[ind], arr, dp);\r\n    }\r\n    // return total possible ways\r\n    return dp[ind][x] = min(pick, notpick);\r\n}\r\n// recurence of josephus problem\r\nvoid Josh(vector<ll> &person, ll k, ll index, vec &ans)\r\n{\r\n    // Base case , when only one person is left\r\n    if (person.size() == 1)\r\n    {\r\n        // cout << person[0] << endl;\r\n        ans.pb(person[0]);\r\n        return;\r\n    }\r\n\r\n    // find the index of first person which will die\r\n    index = ((index + k) % person.size());\r\n    ans.pb(person[index]);\r\n\r\n    // remove the first person which is going to be killed\r\n    person.erase(person.begin() + index);\r\n\r\n    // recursive call for n-1 persons\r\n    Josh(person, k, index, ans);\r\n}\r\nbool checkp(string s)\r\n{\r\n    ll l = 0;\r\n    ll r = s.length() - 1;\r\n    while (l < r)\r\n    {\r\n        if (s[l] != s[r])\r\n        {\r\n            return false;\r\n        }\r\n        l++;\r\n        r--;\r\n    }\r\n    return true;\r\n}\r\nbool books(ll s, ll x, vec &v, ll t)\r\n{\r\n    ll res = 0;\r\n    ff(i, 0, x + 1)\r\n    {\r\n        res += v[i];\r\n    }\r\n    if (res <= t)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nll ct = 0;\r\nll f(ll n, vec &dp)\r\n{\r\n    ct++;\r\n    if (n <= 2)\r\n    {\r\n        return 1;\r\n    }\r\n    if (dp[n] != -1)\r\n    {\r\n        return dp[n];\r\n    }\r\n    return f(n - 1, dp) + f(n - 2, dp);\r\n}\r\nll mods = 1000000007;\r\nbool dfs(ll ind, vec &vis, vec adj[], vec &temp)\r\n{\r\n    vis[ind] = 1;\r\n    temp.pb(ind);\r\n    for (auto it : adj[ind])\r\n    {\r\n        if (!vis[it])\r\n        {\r\n            if (dfs(it, vis, adj, temp))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            temp.pb(it);\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nll frog(vec &v, ll ind, vec &dp)\r\n{\r\n    if (ind == 0)\r\n    {\r\n        return 0;\r\n    }\r\n    if (dp[ind] != -1)\r\n    {\r\n        return dp[ind];\r\n    }\r\n    ll f1 = frog(v, ind - 1, dp) + abs(v[ind] - v[ind - 1]);\r\n    ll f2 = INT_MAX;\r\n    if (ind >= 2)\r\n    {\r\n        f2 = frog(v, ind - 2, dp) + abs(v[ind] - v[ind - 2]);\r\n    }\r\n    return dp[ind] = min(f1, f2);\r\n}\r\nll frogk(ll ind, ll k, vec &v, vec &dp)\r\n{\r\n    if (ind == 0)\r\n    {\r\n        return 0;\r\n    }\r\n    if (dp[ind] != -1)\r\n    {\r\n        return dp[ind];\r\n    }\r\n    ll minstep = INT_MAX;\r\n    ff(i, 1, k + 1)\r\n    {\r\n\r\n        ll f2 = INT_MAX;\r\n        if (ind - i >= 0)\r\n        {\r\n            f2 = frogk(ind - i, k, v, dp) + abs(v[ind] - v[ind - i]);\r\n        }\r\n        minstep = min(minstep, f2);\r\n    }\r\n    // return min(f1, f2);\r\n    return dp[ind] = minstep;\r\n}\r\nbool can(vector<ll> &v, ll k)\r\n{\r\n    ll n = v.size();\r\n\r\n    vec pre(n + 1, 0);\r\n\r\n    ff(i, 1, n + 1)\r\n    {\r\n        pre[i] = pre[i - 1] + v[i - 1];\r\n    }\r\n\r\n    ll f = 0;\r\n    ff(i, k, n + 1)\r\n    {\r\n        if ((pre[i] - pre[i - k]) % k != 0 || pre[i] % k != 0)\r\n        {\r\n            f = 1;\r\n            break;\r\n        }\r\n    }\r\n    if (!f)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\nbool f(vec &a, vec &b, ll mid)\r\n{\r\n    ll x = 0;\r\n    ll y = 0;\r\n    ff(i, 0, a.size())\r\n    {\r\n        if (a[i] <= mid)\r\n        {\r\n            x++;\r\n        }\r\n    }\r\n    ff(j, 0, b.size())\r\n    {\r\n        if (b[j] >= mid)\r\n        {\r\n            y++;\r\n        }\r\n    }\r\n    if (x >= y)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nbool ispal(ll n)\r\n{\r\n    ll ans = 0;\r\n    ll p = n;\r\n    while (p != 0)\r\n    {\r\n        ll req = p % 10;\r\n\r\n        ans = ans * 10 + req;\r\n        p /= 10;\r\n    }\r\n    if (ans == n)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nbool binary(ll l, ll r, vec &pre, ll s)\r\n{\r\n    if (pre[r] - pre[l - 1] <= s)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n// find all prime upto number n\r\nvec allp;\r\nvoid sieve(int n)\r\n{\r\n\r\n    bool prime[n + 1];\r\n    memset(prime, true, sizeof(prime));\r\n\r\n    for (int p = 2; p * p <= n; p++)\r\n    {\r\n\r\n        if (prime[p] == true)\r\n        {\r\n\r\n            for (int i = p * 2; i <= n; i += p)\r\n            {\r\n                prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (int p = 2; p <= n; p++)\r\n    {\r\n        if (prime[p])\r\n        {\r\n            allp.pb(p);\r\n        }\r\n    }\r\n}\r\n// comperator function\r\n\r\nbool cmp(const pair<ll, ll> &p1, const pair<ll, ll> &p2)\r\n{\r\n    if (p1.first > p2.first)\r\n    {\r\n        return true;\r\n    }\r\n    else if (p1.first == p2.first && p1.second < p2.second)\r\n    {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    ll n;\r\n    cin >> n;\r\n    vec v(n);\r\n    ff(i, 0, n)\r\n    {\r\n        cin >> v[i];\r\n    }\r\n    ll i = 0;\r\n    ll j = n - 1;\r\n    ll f = 0;\r\n    ll alice = 0;\r\n    ll bob = 0;\r\n    ll suma = 0;\r\n    ll sumb = 0;\r\n    ll cnt = 0;\r\n    ll sum = 0;\r\n\r\n    while (i <= j)\r\n    {\r\n        sum = 0;\r\n        if (!f)\r\n        {\r\n            while (i <= j)\r\n            {\r\n                sum += v[i];\r\n                if (sum > bob)\r\n                {\r\n                    suma += sum;\r\n                    f = 1;\r\n                    i++;\r\n                    alice = sum;\r\n\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    i++;\r\n                }\r\n                // i++;\r\n            }\r\n            cnt++;\r\n            continue;\r\n\r\n            // alice = sum;\r\n        }\r\n        if (f)\r\n        {\r\n            while (i <= j)\r\n            {\r\n                sum += v[j];\r\n                if (sum > alice)\r\n                {\r\n                    sumb += sum;\r\n                    f = 0;\r\n                    j--;\r\n                    bob = sum;\r\n                    break;\r\n                }\r\n                else\r\n                {\r\n                    j--;\r\n                }\r\n            }\r\n            // bob = sum;\r\n            cnt++;\r\n            continue;\r\n        }\r\n        // cnt++;\r\n    }\r\n    if (f && sum <= alice)\r\n    {\r\n        sumb += sum;\r\n    }\r\n    else if (!f && sum <= bob)\r\n    {\r\n        suma += sum;\r\n    }\r\n\r\n    {\r\n    }\r\n    cout << cnt << \" \" << suma << \" \" << sumb << endl;\r\n}\r\n\r\n/*************YOUR CODE GOES HERE*************/\r\nint main()\r\n{\r\n    ll t;\r\n    cin >> t;\r\n\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n    // solve();\r\n\r\n    return 0;\r\n}"
}