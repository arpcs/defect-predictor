{
    "id": 224515315,
    "contestId": 1062,
    "creationTimeSeconds": 1695319195,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1062,
        "index": "A",
        "name": "A Prank",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1300,
        "tags": [
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1062,
        "members": [
            {
                "handle": "Harwinvanak"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542209700
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 716800,
    "source": "import java.util.*;\r\nimport java.io.*;\r\nimport java.text.*;\r\npublic class main{\r\n\t static int [] counts;\r\n\t static int mod = 1_000_000_007;\r\n\t static PrintWriter out = new PrintWriter(System.out);\r\n\t static int cycle = 0;\r\n\t static int noncycle =0;\r\n\t static HashSet<Integer> mainset;\r\n\t static HashMap<Integer, Integer>mapbottom;\r\n\t static int [] visited;\r\n\t static int [] parent;\r\n\t public static void main(String[] args) throws IOException{\r\n\t \tMyReader reader = new MyReader();\r\n\t \t// int t = reader.nextInt();\r\n\t \tint x = 0;\r\n\t \t// mainLoop:while(t-- > 0){\r\n\t \t\tint n = reader.nextInt();\r\n\t \t\tint [] arr = new int[n];\r\n\t \t\tfor(int i = 0; i < n; i++){\r\n\t \t\t\tarr[i] = reader.nextInt();\r\n\t \t\t}\r\n\t \t\t// if(arr.length < 3){\r\n\t \t\t// \tout.println(0);\r\n\t \t\t// }\r\n\t \t\t// else{\r\n\t \t\t// out.println(0);\r\n\t \t\t\tint last = -1;\r\n\t \t\t\tint length = 0;\r\n\t \t\t\tint maxlength = 0;\r\n\t \t\t\tfor(int i = 0; i < n; i++){\r\n\t \t\t\t\tif(arr[i] - last != 1){\r\n\t \t\t\t\t\tif(length > maxlength){\r\n\t \t\t\t\t\t\tmaxlength =length;\r\n\t \t\t\t\t\t}\r\n\t \t\t\t\t\tlength = 1;\r\n\t \t\t\t\t}\r\n\t \t\t\t\telse{\r\n\t \t\t\t\t\tlength++;\r\n\t \t\t\t\t}\r\n\t \t\t\t\tlast = arr[i];\r\n\t \t\t\t}\r\n\t \t\t\t// \r\n\r\n\t \t\t\tmaxlength = Math.max(length, maxlength);\r\n\t \t\t\t\t \t\t\t// out.println(maxlength+\" fef\");\r\n\t \t\t\tif(maxlength == 1){\r\n\t \t\t\t\tout.println(0);\r\n\t \t\t\t}\r\n \t\t\t\telse if(maxlength == n && (arr[0] == 1 || arr[arr.length - 1] == 1000)){\r\n \t\t\t\t\tout.println(maxlength - 1);\r\n \t\t\t\t}\r\n \t\t\t\telse{\r\n \t\t\t\t\tout.println(maxlength - 2);\r\n \t\t\t\t}\r\n\t \t\t// }\r\n\t \t// }\r\n\t \tout.close();\r\n\t }\r\n\t public static void union(int a, int b){\r\n\t \tint p1 = find(a);\r\n\t \tint p2 = find(b);\r\n\t \tparent[p2] = p1;\r\n\t }\r\n\r\n\t public static int find(int a){\r\n\t \twhile(parent[a] != a){\r\n\t \t\treturn parent[a] = find(parent[a]);\r\n\t \t}\r\n\t \treturn a;\r\n\t }\r\n\t public static int change(int a){\r\n\t \tif(parent[a] != a){\r\n\t \t\tchange(parent[a]);\r\n\t \t}\r\n\t \treturn parent[a] = -1;\r\n\t }\r\n\t public static void addFactors(int x){\r\n\t \tfor(int i = 1; i * i <= x; i++){\r\n\t \t\tif(x % i == 0){\r\n\t \t\t\tmainset.add(i);\r\n\t \t\t\tif(x/i != i){\r\n\t \t\t\t\tmainset.add(x/i);\r\n\t \t\t\t}\r\n\t \t\t\telse{\r\n\t \t\t\t\tbreak;\r\n\t \t\t\t}\r\n\t \t\t}\r\n\t \t}\r\n\t }\r\n\t  public static int findFactors(int x){\r\n\t  \tint lowest = Integer.MAX_VALUE;\r\n\t \tfor(int i = 1; i * i <= x; i++){\r\n\t \t\tif(x % i == 0){\r\n\t \t\t\tif(!mainset.contains(i)){\r\n\t \t\t\t\tlowest = Math.min(lowest, i);\r\n\t \t\t\t\tbreak;\r\n\t \t\t\t}\r\n\t \t\t\tif(x/i != i){\r\n\t \t\t\t\tif(!mainset.contains(x/i)){\r\n\t \t\t\t\t\tlowest = Math.min(lowest, x/i);\r\n\t \t\t\t\t}\r\n\t \t\t\t}\r\n\t \t\t\telse{\r\n\t \t\t\t\tbreak;\r\n\t \t\t\t}\r\n\t \t\t}\r\n\t \t}\r\n\t \treturn lowest;\r\n\t }\r\n\tpublic static long biExp(long x){\r\n\t\tif(x == 0){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tif(x == 1){\r\n\t\t\treturn 2l;\r\n\t\t}\r\n\t\tlong ans = biExp(x/2);\r\n\t\tans = (ans * ans) % mod;\r\n\t\tans *= x % 2 != 0 ? 2 : 1;\r\n\t\tans = ans % mod;\r\n\t\treturn ans;\r\n\t}\r\n\tpublic static void createSubsets(int n){\r\n\t\tArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();\r\n\t\tlist.add(new ArrayList<Integer>());\r\n\t\tfor(int i = 1; i <= n; i++){\r\n\t\t\tint size = list.size();\r\n\t\t\tfor(int j = 0; j < size; j++){\r\n\t\t\t\tArrayList<Integer> temp = new ArrayList<Integer>(list.get(j));\r\n\t\t\t\ttemp.add(i);\r\n\t\t\t\tlist.add(temp);\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(list);\r\n\t}\r\n\tpublic static void createSubRec(int start, int k, int [] nums, ArrayList<ArrayList<Integer>> list, ArrayList<Integer> tempList){\r\n\t\tif(tempList.size() == k){\r\n\t\t\tlist.add(new ArrayList<Integer>(tempList));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tfor(int i = start; i < nums.length; i++){\r\n\t\t\ttempList.add(nums[i]);\r\n\t\t\tcreateSubRec(i + 1, k, nums, list, tempList);\r\n\t\t\ttempList.remove(tempList.size() - 1);\r\n\t\t}\r\n\t}\r\n\tpublic static void createPerm(int start, int[] nums, ArrayList<ArrayList<Integer>> mset, ArrayList<Integer> temp){\r\n\t\tif(temp.size() == 3){\r\n\t\t\tmset.add(new ArrayList<Integer>(temp));\r\n\t\t}\r\n\t\tfor(int num : nums){\r\n\t\t\tif(!temp.contains(num)){\r\n\t\t\t\ttemp.add(num);\r\n\t\t\t\tcreatePerm(start, nums, mset, temp);\r\n\t\t\t\ttemp.remove(temp.size() - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tpublic static long gcd(long a, long b){\r\n\t\tif(b == 0){\r\n\t\t\treturn a;\r\n\t\t}\r\n\t\treturn gcd(b, a % b);\r\n\t}\r\n\tpublic static long lcm(long a, long b){\r\n\t\treturn (a * b)/gcd(a, b);\r\n\t}\r\n\t\r\n}\r\nclass Pair{\r\n\tint index;\r\n\tint value;\r\n\tPair(int index, int value){\r\n\t\tthis.index = index;\r\n\t\tthis.value = value;\r\n\t}\r\n}\r\nclass MyReader{\r\n    BufferedReader reader;\r\n    StringTokenizer token;\r\n    \r\n    MyReader(){\r\n        try{\r\n            reader = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n        catch(Exception e){\r\n            \r\n        }\r\n    }\r\n    public String next() throws IOException{\r\n        if(token == null || !token.hasMoreElements()){\r\n            token = new StringTokenizer(reader.readLine());\r\n        }\r\n        return token.nextToken();\r\n    }\r\n    public int nextInt() throws IOException{\r\n        return Integer.parseInt(next());\r\n    }\r\n    public long nextLong() throws IOException{\r\n       return Long.parseLong(next());\r\n    }\r\n}"
}