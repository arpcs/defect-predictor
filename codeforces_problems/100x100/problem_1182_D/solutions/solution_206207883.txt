{
    "id": 206207883,
    "contestId": 1182,
    "creationTimeSeconds": 1684325529,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "gonghengjie"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 7782400,
    "source": "// LUOGU_RID: 110594985\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define RI register int\r\ninline int read() {\r\n\tint q=0;char ch=' ';\r\n\twhile(ch<'0'||ch>'9') ch=getchar();\r\n\twhile(ch>='0'&&ch<='9') q=q*10+ch-'0',ch=getchar();\r\n\treturn q;\r\n}\r\nconst int N=100005,inf=0x3f3f3f3f;\r\nint n,tot,rt,mi,krt,rt2,len_rt2;\r\nint h[N],ne[N<<1],to[N<<1],du[N],sz[N],dep[N];\r\nvector<int> orz[N];\r\n\r\ninline void add(int x,int y) {to[++tot]=y,ne[tot]=h[x],h[x]=tot;}\r\ninline void getrt(int x,int las) {\r\n\tsz[x]=1;int bl=0;\r\n\tfor(RI i=h[x];i;i=ne[i])\r\n\t\tif(to[i]!=las) getrt(to[i],x),bl=max(bl,sz[to[i]]),sz[x]+=sz[to[i]];\r\n\tbl=max(bl,n-sz[x]);\r\n\tif(bl<mi) mi=bl,rt=x;\r\n}\r\ninline void dfs(int x,int las) {\r\n\tdep[x]=dep[las]+1;\r\n\tfor(RI i=h[x];i;i=ne[i]) if(to[i]!=las) dfs(to[i],x);\r\n}\r\ninline void check(int x) {\r\n\tdfs(x,0);\r\n\tfor(RI i=1;i<=n;++i) orz[i].clear();\r\n\tfor(RI i=1;i<=n;++i) orz[dep[i]].push_back(i);\r\n\tfor(RI i=1;i<=n;++i) {\r\n\t\tfor(RI j=1;j<orz[i].size();++j)\r\n\t\t\tif(du[orz[i][j]]!=du[orz[i][0]]) return;\r\n\t}\r\n\tprintf(\"%d\\n\",x);exit(0);\r\n}\r\ninline int is_line(int x,int las) {\r\n\tif(du[x]>2) return 0;\r\n\tif(du[x]==1) {krt=x;return 1;}\r\n\tfor(RI i=h[x];i;i=ne[i])\r\n\t\tif(to[i]!=las) {\r\n\t\t\tint res=is_line(to[i],x);\r\n\t\t\tif(!res) return 0;\r\n\t\t\telse return res+1;\r\n\t\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tint x,y;\r\n\tn=read();\r\n\tfor(RI i=1;i<n;++i) x=read(),y=read(),add(x,y),add(y,x),++du[x],++du[y];\r\n\tmi=inf,getrt(1,0);\r\n\tcheck(rt);\r\n\tfor(RI i=h[rt];i;i=ne[i]) {\r\n\t\tint len=is_line(to[i],rt);\r\n\t\tif(!len) continue;\r\n\t\tif(rt2&&len!=len_rt2) {check(krt);break;}\r\n\t\tif(!rt2) rt2=krt,len_rt2=len,check(krt);\r\n\t}\r\n\tputs(\"-1\");\r\n\treturn 0;\r\n}"
}