{
    "id": 92741856,
    "contestId": 1182,
    "creationTimeSeconds": 1600022305,
    "relativeTimeSeconds": 5005,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Byobe"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1600017300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(\"O3,no-stack-protector\")\r\n#pragma GCC target( \\\r\n    \"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nstruct Solver {\r\n  int len;\r\n  vector<vector<int>> graph;\r\n  vector<int> check;\r\n\r\n  auto Dist(int v) {\r\n    queue<int> q;\r\n    vector<int> dist(len, -1);\r\n    vector<int> prev(len, -1);\r\n    prev[v] = v;\r\n    dist[v] = 0;\r\n    q.push(v);\r\n    while (q.size()) {\r\n      int u = q.front();\r\n      q.pop();\r\n      for (int x : graph[u]) if (dist[x] == -1) {\r\n        dist[x] = dist[u] + 1;\r\n        prev[x] = u;\r\n        q.push(x);\r\n      }\r\n    }\r\n    return make_pair(dist, prev);\r\n  }\r\n\r\n  bool DfsFirst(int v, int p, int dep) {\r\n    if (check[dep] == -1) {\r\n      check[dep] = graph[v].size();\r\n    } else if (check[dep] != graph[v].size()) {\r\n      return true;\r\n    }\r\n    for (int u : graph[v]) if (u != p) {\r\n      if (DfsFirst(u, v, dep + 1)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  bool Check(int root) {\r\n    check.resize(len, -1);\r\n\r\n    return DfsFirst(root, -1, 0);\r\n  }\r\n\r\n  void Solve() {\r\n    cin >> len;\r\n    graph.resize(len);\r\n    for (int e = 0; e < len - 1; ++e) {\r\n      int x, y;\r\n      cin >> x >> y;\r\n\r\n      --x;--y;\r\n\r\n      graph[x].push_back(y);\r\n      graph[y].push_back(x);\r\n    }\r\n    const auto& [d1, p1] = Dist(0);\r\n    int v1 = distance(begin(d1), max_element(begin(d1), end(d1)));\r\n\r\n    const auto& [d2, p2] = Dist(v1);\r\n    int v2 = distance(begin(d2), max_element(begin(d2), end(d2)));\r\n\r\n    if (d2[v2] % 2) {\r\n      cout << -1 << '\\n';\r\n      return;\r\n    }\r\n\r\n    int c = v2;\r\n    for (int i = 0; i < d2[v2] / 2; ++i) {\r\n      c = p2[c];\r\n    }\r\n\r\n    for (int i = 0; i < graph[c].size(); ++i) {\r\n      int v = graph[c][i];\r\n      if (graph[v].size() == 1) {\r\n        swap(graph[c][i], graph[c][graph[c].size() - 1]);\r\n        break;\r\n      }\r\n    }\r\n    int v = -1;\r\n    if (graph[graph[c].back()].size() == 1) {\r\n      v = graph[c].back();\r\n      graph[c].pop_back();\r\n    }\r\n\r\n    if (not Check(c)) {\r\n      if (v != -1) {\r\n        c = v;\r\n      }\r\n      cout << c + 1 << '\\n';\r\n    } else {\r\n      cout << -1 << '\\n';\r\n    }\r\n  }\r\n};\r\n\r\nint main() {\r\n  std::ios_base::sync_with_stdio(false);\r\n  std::cin.tie(nullptr);\r\n\r\n  Solver().Solve();\r\n  return 0;\r\n}\r\n"
}