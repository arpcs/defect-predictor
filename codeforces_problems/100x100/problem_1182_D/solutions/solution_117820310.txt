{
    "id": 117820310,
    "contestId": 1182,
    "creationTimeSeconds": 1622332476,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "VVHack"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 11161600,
    "source": "/******************************************************************************\n\n                              Online C++ Compiler.\n               Code, Compile, Run and Debug C++ program online.\nWrite your code in this editor and press \"Run\" button to compile and execute it.\n\n*******************************************************************************/\n\n#include <iostream>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <unordered_set>\n\nusing namespace std;\n\nstruct PathInfo\n{\n  int len = 0;\n  int childIdx = 0;\n};\n\nstruct Node\n{\n  vector<int> neighbors;\n  bool visited = false;\n  PathInfo longest, secondLongest;\n\n  int getMaxPathLength()\n  {\n    return longest.len + secondLongest.len;\n  }\n};\n\nvoid computeMaxPaths(int nodeIdx, vector<Node> &tree, int &maxPathLen, int &maxNodeIdx)\n{\n  auto &node = tree[nodeIdx];\n  node.visited = true;\n  for (int childIdx : node.neighbors)\n  {\n    auto &child = tree[childIdx];\n    if (child.visited)\n      continue;\n    computeMaxPaths(childIdx, tree, maxPathLen, maxNodeIdx);\n    // cout << childIdx << \" \" << child.longest.len <<\n    if (child.longest.len + 1 > node.longest.len)\n    {\n      // cout << \"This happens\" << endl;\n      node.longest.len = child.longest.len + 1;\n      node.longest.childIdx = childIdx;\n    }\n    else if (child.longest.len + 1 > node.secondLongest.len)\n    {\n      // cout << \"This also happens\" << endl;\n      node.secondLongest.len = child.longest.len + 1;\n      node.secondLongest.childIdx = childIdx;\n    }\n  }\n  if (node.getMaxPathLength() > maxPathLen)\n  {\n    maxPathLen = node.getMaxPathLength();\n    maxNodeIdx = nodeIdx;\n  }\n  node.visited = false;\n}\n\nint getLongersPathMidPoint(vector<Node> &tree, int maxNodeIdx)\n{\n  auto &maxNode = tree[maxNodeIdx];\n  int tot = maxNode.getMaxPathLength();\n  int distance = maxNode.longest.len - tot / 2;\n  int nodeIdx = maxNodeIdx;\n  for (int i = 0; i < distance; ++i)\n  {\n    nodeIdx = tree[nodeIdx].longest.childIdx;\n  }\n  return nodeIdx;\n}\n\nbool verify(vector<Node> &tree, int rootIdx)\n{\n  auto &root = tree[rootIdx];\n  int numCurLevel = 1;\n  int curDegree = -1;\n  int numNextLevel = 0;\n  int curLevel = 1;\n\n  for (auto &n : tree)\n  {\n    n.visited = false;\n  }\n\n  queue<int> bfsq;\n  bfsq.push(rootIdx);\n\n  while (!bfsq.empty())\n  {\n    int nodeIdx = bfsq.front();\n    bfsq.pop();\n    numCurLevel--;\n    // cout << \"Processing node \" << nodeIdx << \" at level \" << curLevel << \", remaining in level \" << numCurLevel << endl;\n    auto &node = tree[nodeIdx];\n    tree[nodeIdx].visited = true;\n    if (curDegree == -1)\n    {\n      // cout << \"Level \" << curLevel << \", node \" << nodeIdx << \" setting degree \" << node.neighbors.size() << endl;\n      curDegree = node.neighbors.size();\n    }\n    else if (node.neighbors.size() != curDegree)\n    {\n      // cout << \"We reject node \" << nodeIdx << \" at level \" << curLevel << \" for having a degree of \" << node.neighbors.size() << \" instead of \" << curDegree << endl;\n      return false;\n    }\n    for (int n : node.neighbors)\n    {\n      if (tree[n].visited)\n        continue;\n      // cout << \"Adding node \" << n << \" at level \" << curLevel + 1 << endl;\n      bfsq.push(n);\n      numNextLevel++;\n    }\n    // cout << \"Node \" << nodeIdx << \" adding \" << node.neighbors.size() - 1 << \" nodes to the level \" << curLevel + 1 << endl;\n    // numNextLevel += (node.neighbors.size() - 1);\n    if (numCurLevel == 0)\n    {\n      // cout << \"End of level \" << curLevel << endl;\n      numCurLevel = numNextLevel;\n      curDegree = -1;\n      numNextLevel = 0;\n      curLevel++;\n    }\n  }\n  return true;\n}\n\nint getTopLeaf(vector<Node> &tree, int semiTop)\n{\n  for (auto &n : tree)\n  {\n    n.visited = false;\n  }\n  queue<int> bfsq;\n  bfsq.push(semiTop);\n  while (!bfsq.empty())\n  {\n    int nodeIdx = bfsq.front();\n    bfsq.pop();\n    tree[nodeIdx].visited = true;\n    // cout << nodeIdx << endl;\n    if (tree[nodeIdx].neighbors.size() == 1)\n      return nodeIdx;\n    for (int childIdx : tree[nodeIdx].neighbors)\n    {\n      if (tree[childIdx].neighbors.size() < 3 && !tree[childIdx].visited)\n      {\n        bfsq.push(childIdx);\n      }\n    }\n  }\n  return -1;\n}\n\nint main()\n{\n  int N;\n  cin >> N;\n  vector<Node> tree(N + 1);\n\n  for (int i = 0; i < N - 1; ++i)\n  {\n    int n1, n2;\n    cin >> n1 >> n2;\n    tree[n1].neighbors.push_back(n2);\n    tree[n2].neighbors.push_back(n1);\n  }\n\n  int maxPathLen = 0, maxNodeIdx = 1;\n  computeMaxPaths(1, tree, maxPathLen, maxNodeIdx);\n  // if (maxPathLen % 2 == 1) {\n  //  cout << -1 << endl;\n  //  return 0;\n  // }\n  int rootIdx = getLongersPathMidPoint(tree, maxNodeIdx);\n  if (verify(tree, rootIdx))\n  {\n    cout << rootIdx << endl;\n  }\n  else\n  {\n    int topIdx = getTopLeaf(tree, rootIdx);\n    if (verify(tree, topIdx))\n    {\n      cout << topIdx << endl;\n    }\n    else\n    {\n      cout << -1 << endl;\n    }\n  }\n  return 0;\n}"
}