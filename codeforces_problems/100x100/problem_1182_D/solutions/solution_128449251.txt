{
    "id": 128449251,
    "contestId": 1182,
    "creationTimeSeconds": 1631301044,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "AlanSkarica"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 14028800,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\n#define ld long double\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\n\r\nconst int MAX = 1e5 + 5;\r\nint n;\r\nvector<int> edges[MAX];\r\nvector<int> degree(MAX);\r\nvector<int> level(MAX);\r\nvector<int> level2(MAX);\r\nvector<int> degreeLevel[MAX];\r\n\r\nvoid dfs(int a, int prev) {\r\n    level[a] = level[prev] + 1;\r\n    degreeLevel[level[a]].push_back(degree[a]);\r\n    for (auto e : edges[a]) {\r\n        if (e == prev) continue;\r\n        dfs(e, a);\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nvoid dfs2(int a, int prev) {\r\n    level2[a] = level2[prev] + 1;\r\n    for (auto e : edges[a]) {\r\n        if (e == prev) continue;\r\n        if (degree[e] > 2) continue;\r\n        dfs(e, a);\r\n    }\r\n}\r\n\r\nbool check(int root) {\r\n    for (int i = 1; i <= n; i++) {\r\n        level[i] = 0;\r\n        degreeLevel[i].clear();\r\n    }\r\n    dfs(root, 0);\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        if (degreeLevel[i].empty()) break;\r\n        for (auto e : degreeLevel[i]) {\r\n            if (e != degreeLevel[i][0]) return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    int a, b, c = -1, d = -1;\r\n    cin >> n;\r\n\r\n    for (int i = 0; i < n - 1; i++) {\r\n        cin >> a >> b;\r\n        edges[a].push_back(b);\r\n        edges[b].push_back(a);\r\n        degree[a]++;\r\n        degree[b]++;\r\n    }\r\n\r\n    if (n <= 3) {\r\n        cout << 1 << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n\r\n    for (int i = 1; i <= n; i++) if (degree[i] == 1) {a = i; break;}\r\n\r\n    if (check(a)) {\r\n        cout << a << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n\r\n    int mmax = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n        if (level[i] > mmax) {\r\n            mmax = level[i];\r\n            b = i;\r\n        }\r\n    }\r\n\r\n    if (check(b)) {\r\n        cout << b << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n    int z = level[a] + level[b];\r\n    if (z % 2) {\r\n        cout << -1 << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n    cout << level[a] << \" \" << level[b] << endl;\r\n\r\n    for (int i = 1; i <= n; i++) if (level[i] * 2 == z) {c = i; break;}\r\n\r\n    if (check(c)) {\r\n        cout << c << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n    dfs2(c, 0);\r\n\r\n    mmax = 0;\r\n    for (int i = 1; i <= n; i++)  {\r\n        if (level2[i] > mmax && degree[i] == 1) {\r\n            mmax = level2[i];\r\n            d = i;\r\n        }\r\n    }\r\n\r\n    if (d == -1) {\r\n        cout << -1 << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n    if (check(d)) {\r\n        cout << d << \"\\n\";\r\n        return 0;\r\n    }\r\n    else {\r\n        cout << -1 << \"\\n\";\r\n        return 0;\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}