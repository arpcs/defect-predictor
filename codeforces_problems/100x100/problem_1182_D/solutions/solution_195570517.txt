{
    "id": 195570517,
    "contestId": 1182,
    "creationTimeSeconds": 1677762022,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 11366400,
    "source": "#include <bits/stdc++.h>\n#define fi first\n#define se second\n#define mp make_pair\n#define pb push_back\n#define eb emplace_back\ntypedef long long ll;\nusing namespace std;\nconst int maxn = 1e5 + 5;\nconst int maxm = 2e6 + 5;\nconst ll mod = 998244353;\nint n, G, sz[maxn], msz[maxn], dep[maxn], len[maxn];\nvector<int> e[maxn], p[maxn];\nvoid dfs_G(int u, int from) {\n\tsz[u] = 1;\n\tfor(int v : e[u]) {\n\t\tif(v == from) {\n\t\t\tcontinue;\n\t\t}\n\t\tdfs_G(v, u);\n\t\tsz[u] += sz[v];\n\t\tmsz[u] = max(msz[u], sz[v]);\n\t}\n\tmsz[u] = max(msz[u], n - sz[u]);\n\tif(!G || msz[u] < msz[G]) {\n\t\tG = u;\n\t}\n}\nvoid dfs(int u, int from) {\n\tdep[u] = dep[from] + 1;\n\tp[dep[u]].eb(u);\n\tlen[u] = sz[u] = 1;\n\tfor(int v : e[u]) {\n\t\tif(v == from) {\n\t\t\tcontinue;\n\t\t}\n\t\tdfs(v, u);\n\t\tlen[u] = max(len[u], len[v] + 1);\n\t\tsz[u] += sz[v];\n\t}\n}\nint find(int u, int from) {\n\tfor(int v : e[u]) {\n\t\tif(v == from) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn find(v, u);\n\t}\n\treturn u;\n}\nbool check(int u, int from) {\n\tfor(int i = 1; i <= n; i++) {\n\t\tp[i].clear();\n\t}\n\tdfs(u, from);\n\tfor(int i = 1; i <= n; i++) {\n\t\tint x = 0;\n\t\tfor(int j : p[i]) {\n\t\t\tif(!x) {\n\t\t\t\tx = (int)e[j].size();\n\t\t\t}\n\t\t\telse if(x != (int)e[j].size()) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\treturn 1;\n}\nint main() {\n#ifdef DEBUG\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcin >> n;\n\tfor(int i = 1, u, v; i < n; i++) {\n\t\tcin >> u >> v;\n\t\te[u].eb(v);\n\t\te[v].eb(u);\n\t}\n\tdfs_G(1, 0);\n\tif(check(G, 0)) {\n\t\tcout << G << '\\n';\n\t\treturn 0;\n\t}\n\tvector<int> t;\n\tfor(int i : e[G]) {\n\t\tif(sz[i] == len[i]) {\n\t\t\tt.eb(i);\n\t\t}\n\t}\n\tif((int)t.size() == 1) {\n\t\tif(check(G, t[0])) {\n\t\t\tcout << find(t[0], G) << '\\n';\n\t\t\treturn 0;\n\t\t}\n\t}\n\tif((int)t.size() > 1) {\n\t\tmap<int, int> cnt;\n\t\tfor(int i : t) {\n\t\t\tcnt[sz[i]]++;\n\t\t}\n\t\tif((int)cnt.size() > 2) {\n\t\t\tcout << \"-1\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\tint s = 0;\n\t\tfor(auto i : cnt) {\n\t\t\tif(i.se == 1) {\n\t\t\t\ts = i.fi;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(!s) {\n\t\t\tcout << \"-1\\n\";\n\t\t\treturn 0;\n\t\t}\n\t\tint p = 0;\n\t\tfor(int j : t) {\n\t\t\tif(sz[j] == s) {\n\t\t\t\tp = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(check(G, p)) {\n\t\t\tcout << find(p, G) << '\\n';\n\t\t\treturn 0;\n\t\t}\n\t}\n\tcout << \"-1\\n\";\n\treturn 0;\n}\n\n   \t\t  \t \t \t   \t \t\t  \t\t\t \t\t \t\t\t"
}