{
    "id": 149533625,
    "contestId": 1182,
    "creationTimeSeconds": 1647181079,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Jerry_yuu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(3)\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"inline\")\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n#define int long long\r\nint read()\r\n{\r\n    int x=0,f=1;char ch=getchar();\r\n    while (ch<'0'||ch>'9'){if (ch=='-') f=-1;ch=getchar();}\r\n    while (ch>='0'&&ch<='9'){x=x*10+ch-48;ch=getchar();}\r\n    return x*f;\r\n}\r\nint fac[50];\r\nvoid init(){\r\n    fac[0]=fac[1]=1;\r\n    for(int i=2;i<=20;i++) {\r\n        fac[i]=fac[i-1]*i;\r\n    }\r\n}\r\nint C(int n,int m) {\r\n    return fac[n]/fac[n-m]/fac[m];\r\n}\r\n#define maxn 300005\r\n#define maxm 600005\r\n#define inf 0x3f3f3f3f3f3f3f3f\r\nint n,m;\r\n\r\nvector<int> v[maxn];\r\nint du[maxn];\r\n\r\nint rt=0;\r\nint minn=inf;\r\nint sz[maxn];\r\n\r\n//void dfs(int x,int pre) {\r\n//    int maxx=0;\r\n//    sz[x]=1;\r\n//    for(auto p:v[x]) {\r\n//        if(p==pre) continue;\r\n//        dfs(p,x);\r\n//        sz[x]+=sz[p];\r\n//        maxx=max(maxx,sz[p]);\r\n//    }\r\n//    maxx=max(maxx,n-sz[x]);\r\n//    if(maxx<minn) {\r\n//        minn=maxx;rt=x;\r\n//    }\r\n//}\r\nvoid getrt(int x, int pre) {\r\n    sz[x] = 1;\r\n    int maxx = 0;\r\n    for (auto &to:v[x]) {\r\n        if (to == pre)\r\n            continue;\r\n        getrt(to, x);\r\n        maxx = max(maxx, sz[to]);\r\n        sz[x] += sz[to];\r\n    }\r\n    maxx = max(maxx, n - sz[x]);\r\n    if (maxx < minn)\r\n        minn = maxx, rt = x;\r\n}\r\n\r\nint d[maxn];\r\nvoid dfs1(int x,int pre) {\r\n    d[x]=d[pre]+1;\r\n    for(auto p:v[x]) {\r\n        if(p==pre) continue;\r\n        dfs1(p,x);\r\n    }\r\n}\r\nvector<int> h[maxn];\r\nbool check(int x) {\r\n    dfs1(x,0);\r\n    for(int i=1;i<=n;i++) h[i].clear();\r\n    for(int i=1;i<=n;i++) h[d[i]].push_back(i);\r\n    for(int i=1;i<=n;i++) {\r\n        for(auto p:h[i]) {\r\n            if(du[p]!=du[h[i][0]]) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nint krt;\r\n\r\nint get_line(int x,int pre) {\r\n    if(du[x]>2) return 0;\r\n    if(du[x]==1) {\r\n        krt=x;return 1;\r\n    }\r\n    for(auto p:v[x]) {\r\n        if(p==pre) continue;\r\n        int cnt=get_line(p,x);\r\n        if(cnt==0) return 0;\r\n        return cnt+1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nvoid solve() {\r\n    n=read();\r\n    for(int i=1;i<=n-1;i++) {\r\n        int x=read(),y=read();\r\n        v[x].push_back(y);\r\n        v[y].push_back(x);\r\n        du[x]++;du[y]++;\r\n    }\r\n    dfs(1,0);\r\n    //cout<<rt;\r\n    if(check(rt)) {cout<<rt;return;}\r\n    int rt2=0,len_rt2=0;\r\n    for(auto p:v[rt]) {\r\n        int cnt=get_line(p,rt);\r\n        if(cnt==0) continue;\r\n        if(rt2&&cnt!=len_rt2) {\r\n            if(check(krt)) {\r\n                cout<<krt;return;\r\n            }\r\n            else {\r\n                cout<<-1;return;\r\n            }\r\n        }\r\n        if(rt2==0) {\r\n            rt2=krt,len_rt2=cnt;\r\n            check(krt);\r\n        }\r\n    }\r\n    cout<<-1;\r\n}\r\n\r\n\r\n\r\nsigned main() {\r\n    int T=1;\r\n    while (T--) {\r\n        solve();\r\n    }\r\n}"
}