{
    "id": 132975028,
    "contestId": 1182,
    "creationTimeSeconds": 1635133584,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Snowfall"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 8704000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nvector<int>v[100005];\r\nint par[100005],ck[100005],cs[100005],from[100005],de[100005],de2[100005];\r\nint cks(int ff,int pv,int dp)\r\n{\r\n    int cc=0;\r\n    for(int i = 0;i < v[ff].size() && cc!=1;i++)\r\n    {\r\n        int go=v[ff][i];\r\n        if(go!=pv)\r\n        {\r\n            if(cs[dp]==0)\r\n            {\r\n                cs[dp]=de2[go];\r\n            }\r\n            else if(cs[dp]!=de2[go])\r\n            {\r\n                return 1;\r\n            }\r\n            cc=max(cc,cks(go,ff,dp+1));\r\n        }\r\n    }\r\n    return cc;\r\n}\r\nmain()\r\n{\r\n\tint t,a,b;\r\n    scanf(\"%d\",&t);\r\n    for(int i = 1;i < t;i++)\r\n    {\r\n        scanf(\"%d%d\",&a,&b);\r\n        v[a].push_back(b);\r\n        v[b].push_back(a);\r\n        de[a]++;\r\n        de[b]++;\r\n        de2[a]++;\r\n        de2[b]++;\r\n    }\r\n    queue<int>q;\r\n    queue<pair<int,int> >q2;\r\n    queue<pair<int,pair<int,int> > >q3;\r\n    ck[1]=1;\r\n    q.push(1);\r\n    while(!q.empty())\r\n    {\r\n        int cur=q.front();\r\n        q.pop();\r\n        for(int i = 0;i < v[cur].size();i++)\r\n        {\r\n            int go=v[cur][i];\r\n            if(ck[go]==0)\r\n            {\r\n                ck[go]=1;\r\n                q.push(go);\r\n            }\r\n        }\r\n        if(q.size()==0)\r\n        {\r\n            q2.push({cur,1});\r\n            ck[cur]=2;\r\n        }\r\n        // printf(\"%d\\n\",2);\r\n    }\r\n    int la=0,bt;\r\n    while(!q2.empty())\r\n    {\r\n        int cur=q2.front().first,co=q2.front().second;\r\n        q2.pop();\r\n        for(int i = 0;i < v[cur].size();i++)\r\n        {\r\n            int go=v[cur][i];\r\n            if(ck[go]==1)\r\n            {\r\n                par[go]=cur;\r\n                ck[go]=2;\r\n                q2.push({go,co+1});\r\n            }\r\n        }\r\n        if(q2.size()==0)\r\n        {\r\n            la=cur;\r\n            bt=co/2;\r\n        }\r\n    }\r\n    while(bt>0)\r\n    {\r\n        la=par[la];\r\n        bt--;\r\n    }\r\n    for(int i = 0;i < 100005;i++)\r\n    {\r\n        cs[i]=0;\r\n    }\r\n    int cp=cks(la,-1,0);\r\n    if(cp==0)\r\n    {\r\n        printf(\"%d\",la);\r\n        return 0;\r\n    }\r\n    for(int i = 0;i < 100005;i++)\r\n    {\r\n        cs[i]=0;\r\n    }\r\n    for(int i = 1;i <= t;i++)\r\n    {\r\n        if(de[i]==1)\r\n        {\r\n            q3.push({i,{1,i}});\r\n            de[i]=0;\r\n        }\r\n    }\r\n    while(!q3.empty())\r\n    {\r\n        int cur=q3.front().first,co=q3.front().second.first;\r\n        int ce=0;\r\n        q3.pop();\r\n        for(int i = 0;i < v[cur].size();i++)\r\n        {\r\n            int go=v[cur][i];\r\n            if(de[go]<3)\r\n            {\r\n                ce=1;\r\n                de[go]--;\r\n                if(de[go]==0)\r\n                q3.push({go,{co+1,q3.front().second.second}});\r\n            }\r\n        }\r\n        if(ce==0)\r\n        {\r\n            cs[co]++;\r\n            from[co]=q3.front().second.second;\r\n            if(from[co]==8470)\r\n            return -1;\r\n        }\r\n    }\r\n    int tar=1,ccc=0;\r\n    for(int i = 1;i <= 100000;i++)\r\n    {\r\n        if(cs[i]==1)\r\n        {\r\n            tar=from[i];\r\n            ccc++;\r\n            // printf(\"yy%d %d\\n\",tar,i);\r\n        }\r\n    }\r\n    for(int i = 0;i < 100005;i++)\r\n    {\r\n        cs[i]=0;\r\n    }\r\n    cp=cks(tar,-1,0);\r\n    if(cp==0)\r\n    {\r\n        printf(\"%d\",tar);\r\n        return 0;\r\n    }\r\n    printf(\"-1\");\r\n}\r\n"
}