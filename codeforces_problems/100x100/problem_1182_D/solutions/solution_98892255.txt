{
    "id": 98892255,
    "contestId": 1182,
    "creationTimeSeconds": 1605793813,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Cornflakes"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 17715200,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n#define openfile(x) freopen(x\".in\",\"r\",stdin),freopen(x\".out\",\"w\",stdout)\n#define closefile fclose(stdin),fclose(stdout)\n#define line cerr<<\"--------------------\\n\"\n#define see(x) cerr<<x<<\" \"\n#define seeln(x) cerr<<x<<endl\n#define out(x) cerr<<#x<<\" = \"<<x<<\" \"\n#define outln(x) cerr<<#x<<\" = \"<<x<<endl\n#define outarr(x,l,r) cerr<<#x\"[\"<<l<<\"-\"<<r<<\"] = \"; for (int _i=l;_i<=r;++_i) cerr<<x[_i]<<\" \";cerr<<endl;\ntypedef pair<int,int> P;\ntemplate <class T> void read(T &x){x=0; char c=getchar(); int f=0;while (c<'0'||c>'9') f|=(c=='-'),c=getchar();while (c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();if (f) x=-x;}\ntemplate <class T> bool checkmax(T &a,T b){return b>a ? a=b,1 : 0;}\ntemplate <class T> bool checkmin(T &a,T b){return b<a ? a=b,1 : 0;}\nconst int mod = 1e9+7;\ntemplate <class T> void my_add(T &a,T b){b %= mod; a = a + b > mod ? a + b - mod : a + b;}\ntemplate <class T> void my_sub(T &a,T b){b %= mod; a = a - b < 0 ? a - b + mod : a - b;}\nnamespace moonpie {\n    const int N=1e5+5;\n    int s,t,mid,len=0,n,dep[N],dgr[N],siz[N],root[N],son[N];\n    int dd[N],cnt=0,vis[N];\n    vector<int> g[N];\n    set<int> d[N];\n    void prp(int u,int fa) {\n        if(dep[u]>=len) {\n            len=dep[u];\n            t=u;\n        }\n        for(int i=0;i<g[u].size();++i) {\n            int v = g[u][i]; if(v==fa) continue;\n            dep[v] = dep[u]+1; \n            prp(v,u);\n        }\n    }\n    bool get_d(int u,int fa) {\n        if(u==t) {\n            dd[++cnt]=u;\n            return 1;\n        }\n        bool res=0;\n        for(int i=0;i<g[u].size();++i) {\n            int v=g[u][i]; if(v==fa) continue;\n            if(get_d(v,u)) {\n                dd[++cnt]=u;\n                res=1;\n            }\n        }\n        return res;\n    }\n    void dfs(int u,int fa) {\n        d[dep[u]].insert(dgr[u]);\n        for(int i=0;i<g[u].size();++i) {\n            int v=g[u][i]; if(v==fa) continue;\n            dep[v] = dep[u]+1;\n            dfs(v,u);\n        }\n    }\n    bool check() {\n        for(int i=0;i<=n;++i) {\n            if(d[i].size()>1) return 0;\n        }\n        return 1;\n    }\n    bool OK(int root) {\n        for(int i=0;i<=n;++i) d[i].clear();\n        dep[root]=0;\n        dfs(root,0);\n        if(check()) {\n            cout<<root<<endl;\n            return 1;\n        }\n        return 0;\n    }\n    void solve() {\n        cin>>n;\n        for(int u,v,i=1;i<n;++i) {\n            scanf(\"%d%d\",&u,&v);\n            g[u].push_back(v);\n            g[v].push_back(u);\n            dgr[u]++; dgr[v]++;\n        }\n        \n        dep[1]=0;\n        prp(1,0);\n        \n        s=t;\n        dep[s]=0;\n        prp(s,0);\n\n        get_d(s,0);\n\n        // cout<<s<<\" - \"<<t<<\" \"<<len<<endl;\n        // outarr(dd,1,cnt);\n\n        if(OK(s)) return;\n        if(OK(t)) return ;\n\n        ++len;\n        if(len&1) {\n            if(OK(dd[len/2+1])) return;\n        }\n\n        queue<int> Q;\n        Q.push(dd[len/2+1]);\n        vis[dd[len/2+1]]=1;\n        while(!Q.empty()) {\n            int u=Q.front(); Q.pop();\n            if(dgr[u]==1) {\n                if(OK(u)) return;\n                else break;\n            }\n            for(int i=0;i<g[u].size();++i) {\n                int v=g[u][i]; if(vis[v]) continue;\n                vis[v]=1; Q.push(v);\n            }\n        } \n\n        cout<<\"-1\\n\";\n\n    }\n}\nsigned main() {\n    moonpie::solve();\n    return 0;\n}"
}