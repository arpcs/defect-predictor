{
    "id": 220760209,
    "contestId": 1182,
    "creationTimeSeconds": 1693162300,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "rajan_46"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\r\n// Author : RIYUZAKI\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint f(int node, int v, vector<int> &vis, vector<vector<int>> &adj)\r\n{\r\n    if (v == node)\r\n        return 1;\r\n    vis[v] = 1;\r\n    for (auto it : adj[v])\r\n    {\r\n        if (!vis[it])\r\n        {\r\n            if (f(node, it, vis, adj) != -1)\r\n                return 1 + f(node, it, vis, adj);\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nint dist(int node, int v, vector<vector<int>> &adj, int n)\r\n{\r\n    vector<int> vis(n, 0);\r\n    int ans = f(node, v, vis, adj);\r\n    return ans;\r\n}\r\n\r\nbool isit(int node, vector<vector<int>> &adj, vector<int> &indeg)\r\n{\r\n    int n = indeg.size();\r\n    for (int v1 = 0; v1 < n; v1++)\r\n    {\r\n        for (int v2 = 0; v2 < n; v2++)\r\n        {\r\n            if (v1 == v2)\r\n                continue;\r\n            if (indeg[v1] == indeg[v2])\r\n            {\r\n                if (dist(node, v1, adj, n) == dist(node, v2, adj, n))\r\n                    return true;\r\n                else\r\n                    return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nint fun(int n, vector<vector<int>> &adj, vector<int> &indeg)\r\n{\r\n    vector<int> isPoss(n, 0);\r\n    // put isPoss = -1 if not possible..\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        if (isPoss[i] == -1)\r\n            continue;\r\n        if (isit(i, adj, indeg))\r\n            return i;\r\n        else\r\n        {\r\n            for (int j = 0; j < n; j++)\r\n            {\r\n                if (indeg[j] == indeg[i])\r\n                    isPoss[j] = -1;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nint main()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    vector<vector<int>> adj(n);\r\n    vector<int> indeg(n, 0);\r\n    int u, v;\r\n    for (int i = 0; i < n - 1; i++)\r\n    {\r\n        cin >> u >> v;\r\n        adj[u].push_back(v);\r\n        adj[v].push_back(u);\r\n        indeg[u]++;\r\n        indeg[v]++;\r\n    }\r\n    int ans = fun(n, adj, indeg);\r\n    cout << ans << endl;\r\n    return 0;\r\n}"
}