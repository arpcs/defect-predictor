{
    "id": 180265795,
    "contestId": 1182,
    "creationTimeSeconds": 1668058090,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "ReanimateTF"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 10956800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define inf 100010\r\nvector<int>l[inf];\r\nint n,f[inf],cnt[inf],mxp[inf],vis[inf],\r\n\tdep[inf],rfr[inf],bc[inf],bs[inf],ans=1e9,mp;\r\nvoid dfs(int p,int fa){\r\n    f[p]=fa,cnt[p]=1;\r\n    for(int i=0;i<l[p].size();i++){\r\n        int to=l[p][i];\r\n        if(to==fa)continue;\r\n        dfs(to,p);\r\n        cnt[p]+=cnt[to];\r\n    }\r\n}\r\nvoid find(int p,int fa){\r\n    if(vis[p])return;\r\n    vis[p]=1;\r\n    int hson=0,sums=0;\r\n    for(int i=0;i<l[p].size();i++){\r\n        int to=l[p][i];\r\n        if(to==fa)continue;\r\n        sums+=cnt[to];\r\n        if(cnt[hson]<cnt[to])\r\n            hson=to;\r\n    }\r\n    if(ans>max(n-sums-1,cnt[hson])){\r\n        ans=max(n-sums-1,cnt[hson]);\r\n        mp=p;\r\n    }\r\n    if(n-sums-1>cnt[hson])\r\n        find(fa,f[fa]);\r\n    else\r\n        find(hson,p);\r\n}\r\nvoid fd(int p,int fa){\r\n\tfor(int i=0;i<l[p].size();i++){\r\n\t\tint to=l[p][i];\r\n\t\tif(to==fa)continue;\r\n\t\tdep[to]=dep[p]+1;\r\n\t\tfd(to,p);\r\n\t}\r\n}\r\nbool check(int x){\r\n\tdep[x]=0;\r\n\tfd(x,0);\r\n\tmemset(rfr,0,sizeof(rfr));\r\n\tfor(int i=1;i<=n;i++){\r\n    \tif(rfr[dep[i]]==0){\r\n    \t\trfr[dep[i]]=l[i].size();\r\n\t\t}else if(rfr[dep[i]]!=l[i].size()){\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\treturn 1;\r\n}\r\nvoid fbc(int p,int fa){\r\n    for(int i=0;i<l[p].size();i++){\r\n\t\tint to=l[p][i];\r\n\t\tif(to==fa)continue;\r\n\t\tfbc(to,p);\r\n\t\tif(l[p].size()==2)\r\n        \tbc[p]=(bc[to]==-1?-1:bc[to]+1),\r\n        \tbs[p]=(bc[to]==-1?-1:bs[to]);\r\n        else bc[p]=-1;\r\n\t}\r\n}\r\nint main(){\r\n    cin>>n;\r\n    for(int i=1,u,v;i<n;i++){\r\n        cin>>u>>v;\r\n        l[u].push_back(v);\r\n        l[v].push_back(u);\r\n    }\r\n    dfs(1,0);\r\n    find(1,0);\r\n    if(check(mp)){\r\n    \tcout<<mp;\r\n    \treturn 0;\r\n\t}else{\r\n\t\tfor(int i=1;i<=n;i++)\r\n    \t\tbs[i]=i,bc[i]=0;\r\n    \tfbc(mp,0);\r\n    \tset<int>s;\r\n\t\tfor(int i=0;i<l[mp].size();i++){\r\n\t\t\tint to=l[mp][i];\r\n\t\t\tif(bc[to]!=-1&&s.find(bc[to])==s.end())s.insert(bc[to]);\r\n\t\t}\r\n\t\tif(s.size()>2){\r\n\t\t\tputs(\"-1\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tfor(int i=0;i<l[mp].size();i++){\r\n\t\t\tint to=l[mp][i];\r\n\t\t\tif(bc[to]!=-1&&s.find(bc[to])!=s.end()){\r\n\t\t\t\ts.erase(bc[to]);\r\n\t\t\t\tif(check(bs[to])){\r\n\t\t\t\t\tcout<<bs[to];\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tputs(\"-1\");\r\n}\r\n/*\r\n17\r\n1 2\r\n1 3\r\n1 4\r\n1 5\r\n1 6\r\n1 7\r\n1 8\r\n1 9\r\n2 10\r\n3 11\r\n4 12\r\n5 13\r\n6 14\r\n7 15\r\n8 16\r\n9 17\r\n*/"
}