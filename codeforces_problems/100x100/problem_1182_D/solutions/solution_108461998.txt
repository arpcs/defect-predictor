{
    "id": 108461998,
    "contestId": 1182,
    "creationTimeSeconds": 1614244506,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "hkxadpall"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 22323200,
    "source": "/*************************************\r\n * @problem:      Complete Mirror.\r\n * @author:       brealid.\r\n * @time:         2021-02-25.\r\n*************************************/\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef unsigned uint32;\r\ntypedef long long int64;\r\ntypedef unsigned long long uint64;\r\n\r\nnamespace file_io {\r\n    void set_to_file(string file_name, bool set_in = true, bool set_out = true) {\r\n        if (set_in) freopen((file_name + \".in\").c_str(), \"r\", stdin);\r\n        if (set_out) freopen((file_name + \".out\").c_str(), \"w\", stdout);\r\n    }\r\n    void set_to_stdio(bool set_in = true, bool set_out = true) {\r\n        if (set_in) freopen(\"con\", \"r\", stdin);\r\n        if (set_out) freopen(\"con\", \"w\", stdout);\r\n    }\r\n}\r\n\r\n#define USE_FREAD  // \u4f7f\u7528 fread  \u8bfb\u5165\uff0c\u53bb\u6ce8\u91ca\u7b26\u53f7\r\n#define USE_FWRITE // \u4f7f\u7528 fwrite \u8f93\u51fa\uff0c\u53bb\u6ce8\u91ca\u7b26\u53f7\r\n\r\n#ifdef USE_FREAD\r\nnamespace iB { char buf[1 << 21], *p1 = buf, *p2 = buf; }\r\n#define getchar() (iB::p1 == iB::p2 && (iB::p2 = (iB::p1 = iB::buf) + fread(iB::buf, 1, 1 << 21, stdin), iB::p1 == iB::p2) ? EOF : *iB::p1++)\r\n#endif\r\n#ifdef USE_FWRITE\r\nnamespace oB { char buf[1 << 21], *p1 = buf, *p2 = buf + (1 << 21); }\r\n#define putchar(ch) ((oB::p1 == oB::p2 && fwrite(oB::p1 = oB::buf, 1, 1 << 21, stdout)), *oB::p1++ = ch)\r\n#endif\r\nnamespace Fastio {\r\n    struct Reader {\r\n        char endch;\r\n        Reader() { endch = '\\0'; }\r\n        Reader& operator >> (char &ch) { // ignore character ' ', '\\r', '\\n', '\\t'\r\n            ch = getchar();\r\n            while (ch == ' ' || ch == '\\r' || ch == '\\n' || ch == '\\t') ch = getchar();\r\n            return *this;\r\n        }\r\n        Reader& operator >> (char *str) {\r\n            while (((*str = getchar()) == ' ' || *str == '\\n' || *str == '\\r' || *str == '\\t') && *str != EOF);\r\n            while ((*++str = getchar()) != ' ' && *str != '\\n' && *str != '\\r' && *str != '\\t' && *str != EOF);\r\n            *str = '\\0';\r\n            return *this;\r\n        }\r\n        template <typename Int>\r\n        Reader& operator >> (Int &d) {\r\n            bool flag = 0;\r\n            endch = getchar();\r\n            while ((!isdigit(endch)) && endch != '-' && endch != EOF) endch = getchar();\r\n            if (endch == '-') flag = 1, endch = getchar();\r\n            d = endch & 15;\r\n            while (isdigit(endch = getchar())) d = (d << 3) + (d << 1) + (endch & 15);\r\n            if (flag) d = -d;\r\n            return *this;\r\n        }\r\n        template <typename T>\r\n        inline T get() {\r\n            T Val;\r\n            (*this) >> Val;\r\n            return Val;\r\n        }\r\n    };\r\n\r\n    struct Writer {\r\n        ~Writer() {\r\n            #ifdef USE_FWRITE\r\n            fwrite(oB::buf, 1, oB::p1 - oB::buf, stdout);\r\n            #endif\r\n        }\r\n        Writer& operator << (const char ch) {\r\n            putchar(ch);\r\n            return *this;\r\n        }\r\n        Writer& operator << (const char *ch) {\r\n            while (*ch) putchar(*(ch++));\r\n            return *this;\r\n        }\r\n        Writer& operator << (char* ss) { return *this << (const char *)ss; }\r\n        template <typename Int>\r\n        Writer& operator << (Int x) {\r\n            static char buffer[33];\r\n            static int top = 0;\r\n            if (!x) {\r\n                putchar('0');\r\n                return *this;\r\n            }\r\n            if (x < 0) putchar('-'), x = -x;\r\n            while (x) {\r\n                buffer[++top] = '0' | (x % 10);\r\n                x /= 10;\r\n            }\r\n            while (top) putchar(buffer[top--]);\r\n            return *this;\r\n        }\r\n    };\r\n    void flush_output() {\r\n#ifdef USE_FWRITE\r\n        fwrite(oB::buf, 1, oB::p1 - oB::buf, stdout);\r\n        oB::p1 = oB::buf;\r\n#else\r\n        fflush(stdout);\r\n#endif\r\n    }\r\n}\r\nFastio::Reader kin;\r\nFastio::Writer kout;\r\n\r\nconst int N = 1e5 + 7;\r\n\r\nint n;\r\nint subtree_leaf[N]; // -1 if leaf_count over 1, leaf_id otherwise\r\nset<int> orig_graph[N], g[N];\r\n\r\nsigned main() {\r\n    kin >> n;\r\n    if (n == 1) {\r\n        kout << \"1\\n\";\r\n        return 0;\r\n    }\r\n    for (int i = 1, u, v; i < n; ++i) {\r\n        kin >> u >> v;\r\n        g[u].insert(v), g[v].insert(u);\r\n    }\r\n    set<int> LeafyNodes;\r\n    for (int i = 1; i <= n; ++i) {\r\n        if (g[i].size() == 1) {\r\n            LeafyNodes.insert(i);\r\n            subtree_leaf[i] = i;\r\n        }\r\n        orig_graph[i] = g[i];\r\n    }\r\n    int RemainNodes = n - LeafyNodes.size();\r\n    while (RemainNodes) {\r\n        map<int, int> SonCount;\r\n        set<int> FatherNodes;\r\n        for (set<int>::iterator it = LeafyNodes.begin(); it != LeafyNodes.end(); ++it) {\r\n            int u = *it, fa = *g[u].begin();\r\n            g[fa].erase(u);\r\n            if (subtree_leaf[fa]) subtree_leaf[fa] = -1;\r\n            else subtree_leaf[fa] = subtree_leaf[u];\r\n            FatherNodes.insert(fa);\r\n        }\r\n        for (set<int>::iterator it = FatherNodes.begin(); it != FatherNodes.end(); ++it)\r\n            ++SonCount[orig_graph[*it].size()];\r\n        if (SonCount.size() > 2) {\r\n            kout << \"-1\\n\";\r\n            return 0;\r\n        }\r\n        if (SonCount.size() == 2) {\r\n            pair<int, int> p1 = *SonCount.begin(), p2 = *++SonCount.begin();\r\n            if (p1.second != 1 && p2.second != 1) {\r\n                kout << \"-1\\n\";\r\n                return 0;\r\n            }\r\n            int WantDegree = (p1.second == 1 ? p1.first : p2.first);\r\n            for (set<int>::iterator it = FatherNodes.begin(); it != FatherNodes.end(); ++it) {\r\n                int u = *it;\r\n                if ((int)orig_graph[u].size() == WantDegree) {\r\n                    if (~subtree_leaf[u]) {\r\n                        for (int node = subtree_leaf[u], fa = *g[node].begin(); node != u; fa = *g[node = fa].begin()) {\r\n                            g[fa].insert(node);\r\n                            ++RemainNodes;\r\n                        }\r\n                        FatherNodes.erase(it);\r\n                        break;\r\n                    } else {\r\n                        kout << \"-1\\n\";\r\n                        return 0;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        queue<int> ToErase;\r\n        for (set<int>::iterator it = FatherNodes.begin(); it != FatherNodes.end(); ++it) {\r\n            int u = *it;\r\n            if (g[u].size() > 1) {\r\n                if (~subtree_leaf[u]) {\r\n                    ToErase.push(u);\r\n                    for (int node = subtree_leaf[u], fa = *g[node].begin(); node != u; fa = *g[node = fa].begin()) {\r\n                        g[fa].insert(node);\r\n                        ++RemainNodes;\r\n                    }\r\n                } else {\r\n                    kout << \"-1\\n\";\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n        for (; !ToErase.empty(); ToErase.pop()) FatherNodes.erase(ToErase.front());\r\n        if (RemainNodes == 2 && FatherNodes.size() == 2) {\r\n            kout << \"-1\\n\";\r\n            return 0;\r\n        }\r\n        LeafyNodes = FatherNodes;\r\n        RemainNodes -= LeafyNodes.size();\r\n    }\r\n    if (LeafyNodes.size() > 1) kout << \"-1\\n\";\r\n    else kout << *LeafyNodes.begin() << '\\n';\r\n    return 0;\r\n}"
}