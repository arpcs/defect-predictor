{
    "id": 94554497,
    "contestId": 1182,
    "creationTimeSeconds": 1601715156,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "hzk_cpp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 9625600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\nconst int N=100000;\r\n\r\nint n;\r\nstruct side{\r\n  int y,next;\r\n}e[N*2+9];\r\nint lin[N+9],cs;\r\n\r\nvoid Ins(int x,int y){e[++cs].y=y;e[cs].next=lin[x];lin[x]=cs;}\r\nvoid Ins2(int x,int y){Ins(x,y);Ins(y,x);}\r\n\r\nint deg[N+9];\r\n\r\nvoid into(){\r\n  scanf(\"%d\",&n);\r\n  for (int i=1;i<n;++i){\r\n\tint x,y;\r\n\tscanf(\"%d%d\",&x,&y);\r\n\tIns2(x,y);\r\n\t++deg[x];++deg[y];\r\n  }\r\n}\r\n\r\nint ht[N+9],cht;\r\nint siz[N+9];\r\n\r\nvoid Dfs_heart(int k,int fa){\r\n  int flag=1;\r\n  siz[k]=1;\r\n  for (int i=lin[k];i;i=e[i].next)\r\n\tif (e[i].y^fa){\r\n\t  Dfs_heart(e[i].y,k);\r\n\t  siz[k]+=siz[e[i].y];\r\n\t  if (siz[e[i].y]>n>>1) flag=0;\r\n\t}\r\n  if (flag&&n-siz[k]<=n>>1) ht[++cht]=k;\r\n}\r\n\r\nint dep[N+9];\r\n\r\nvoid Dfs_dep(int k,int fa){\r\n  dep[k]=dep[fa]+1;\r\n  for (int i=lin[k];i;i=e[i].next)\r\n\tif (e[i].y^fa) Dfs_dep(e[i].y,k);\r\n}\r\n\r\nint now[N+9];\r\n\r\nbool Check_ans(int rot){\r\n  Dfs_dep(rot,0);\r\n  for (int i=1;i<=n;++i) now[i]=0;\r\n  for (int i=1;i<=n;++i){\r\n\tif (!now[dep[i]]) now[dep[i]]=deg[i];\r\n\tif (deg[i]^now[dep[i]]) return 0;\r\n  }\r\n  return 1;\r\n}\r\n\r\nint d[N+9],cd;\r\n\r\nvoid Dfs_d(int k,int fa){\r\n  d[++cd]=k;\r\n  for (int i=lin[k];i;i=e[i].next)\r\n\tif (e[i].y^fa) Dfs_d(e[i].y,k);\r\n}\r\n\r\nbool Check_d(){\r\n  for (int i=1;i<cd;++i)\r\n\tif (deg[d[i]]^2) return 0;\r\n  if (deg[d[cd]]^1) return 0;\r\n  return 1;\r\n}\r\n\r\nint vis[N+9];\r\n\r\nint Get_ans(int k){\r\n  if (Check_ans(k)) return k;\r\n  for (int i=1;i<=n;++i) vis[i]=0;\r\n  int cnt=0;\r\n  for (int i=lin[k];i;i=e[i].next){\r\n\tint y=e[i].y;\r\n\tcd=0;\r\n\tDfs_d(y,k);\r\n\tif (!Check_d()) continue;\r\n\tif (vis[cd]) continue;\r\n\tvis[cd]=1;\r\n\tif (Check_ans(d[cd])) return d[cd];\r\n\tif (++cnt>=2) return 0;\r\n  }\r\n  return 0;\r\n}\r\n\r\nint ans;\r\n\r\nvoid Get_ans(){\r\n  for (int i=1;i<=1;++i)\r\n\tif (ans=Get_ans(ht[i])) return;\r\n  ans=-1;\r\n}\r\n\r\nvoid work(){\r\n  Dfs_heart(1,0);\r\n  Get_ans();\r\n}\r\n\r\nvoid outo(){\r\n  printf(\"%d\\n\",ans);\r\n}\r\n\r\nint main(){\r\n  into();\r\n  work();\r\n  outo();\r\n  return 0;\r\n}"
}