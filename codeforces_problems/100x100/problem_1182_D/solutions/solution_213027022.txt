{
    "id": 213027022,
    "contestId": 1182,
    "creationTimeSeconds": 1688937854,
    "relativeTimeSeconds": 4154,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "praveenseervi5678"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1688933700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef vector<ll> vll;\r\ntypedef vector<int> vii;\r\ntypedef pair<ll, ll> pll;\r\ntypedef pair<int, int> pii;\r\ntypedef vector<pll> vpll;\r\n#define ff first\r\n#define ss second\r\n#define pb push_back\r\n#define all(v) v.begin(), v.end()\r\n#define done(x){ cout << x << endl;return;}\r\n#define f(i, n) for (int i = 0; i < n; i++)\r\n#define f1(i, n) for (int i = 1; i < n; i++)\r\n#define rep(i, st, end) for(ll i = st; i < end; i++)\r\nconst ll mod = 1e9 + 7;\r\nconst ll N = 2e5+ 1;\r\nvoid solve(void){\r\n    ll n;\r\n    cin>>n;\r\n    vll adj[n+1];\r\n    ll visited[n+1];\r\n    f(i,n-1){\r\n        ll u,v;\r\n        cin>>u>>v;\r\n        adj[u].pb(v);\r\n        adj[v].pb(u);\r\n        visited[u]=0;\r\n        visited[v]=0;\r\n    }\r\n    queue<pair<ll,ll>>q;\r\n    f1(i,n+1){\r\n        if(adj[i].size()==1){\r\n            // cout<<i<<endl;\r\n            q.push({i,i});\r\n            visited[i]=1;\r\n        }\r\n    }\r\n    // return ;\r\n    ll ans;\r\n    ll level=1;\r\n    while(!q.empty()){\r\n        ll size=q.size();\r\n        // cout<<size<<endl;\r\n        if(size==1){\r\n            done(q.front().first)\r\n        }\r\n        f(i,size){\r\n            auto itr=q.front();\r\n            q.pop();\r\n            int f=itr.first;\r\n            int p=itr.second;\r\n            for(auto it:adj[f]){\r\n                if(!visited[it]){\r\n                    visited[it]=level+1;\r\n                    q.push({it,f});\r\n                    ans=it;\r\n                }\r\n                else{\r\n                    if(it==p){\r\n                        continue;\r\n                    }\r\n                    if(level+1!=visited[it]){\r\n                        done(-1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        level++;\r\n    }\r\n    done(ans)\r\n}\r\nint main(){\r\n    ll t;\r\n    t = 1;\r\n    // scanf(\"%lld\",&t);\r\n    while (t--)\r\n        solve();\r\n    return 0;\r\n}"
}