{
    "id": 173088268,
    "contestId": 1182,
    "creationTimeSeconds": 1663864438,
    "relativeTimeSeconds": 5638,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "anothercpaccount"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1663858800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 234,
    "memoryConsumedBytes": 4096000,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nint n;\n\nint getroot(vector<int> *edges, vector<int> *cp, vector<int> *pp,\n    int *mark) {\n    cp->clear();\n    pp->clear();\n    for (int i = 0; i < n; i++) {\n        if (mark[i])\n            cp->push_back(i);\n    }\n    while (true) {\n        pp->clear();\n        int d;\n        for (int i = 0; i < cp->size(); i++) {\n            int x = cp->at(i);\n            if (i == 0)\n                d = edges[x].size();\n            else if (d != edges[x].size()) {\n                return -1;\n            }\n            for (int y : edges[x]) {\n                if (!mark[y]) {\n                    mark[y] = 1;\n                    pp->push_back(y);\n                }\n            }\n        }\n        if (pp->empty())\n            break;\n        swap(cp, pp);\n    }\n    if (cp->size() == 0)\n        return -1;\n    int root = cp->at(0);\n    mark[root] = 2;\n    while (cp->size() > 0) {\n        pp->clear();\n        int d;\n        for (int i = 0; i < cp->size(); i++) {\n            int x = cp->at(i);\n            if (i == 0)\n                d = edges[x].size();\n            else if (d != edges[x].size()) {\n                return -1;\n            }\n            for (int y : edges[x]) {\n                if (mark[y] != 2) {\n                    mark[y] = 2;\n                    pp->push_back(y);\n                }\n            }\n        }\n        swap(cp, pp);\n    }\n    return root;\n}\n\nint main() {\n    cin >> n;\n    vector<int> edges[n];\n    int a,b,c;\n    for (int i = 0; i < n-1; i++) {\n        cin >> a >> b;\n        edges[a-1].push_back(b-1);\n        edges[b-1].push_back(a-1);\n    }\n    vector<int> cur, prev;\n    int mark[n] = {0};\n    vector<int> orig;\n    for (int i = 0; i < n; i++) {\n        if (edges[i].size() == 1) {\n            mark[i] = 1;\n            cur.push_back(i);\n            orig.push_back(i);\n        }\n    }\n    if (n == 1) {\n        cout << \"1\\n\";\n        return 0;\n    }\n    int root = getroot(edges, &cur, &prev, mark);\n    if (root == -1) {\n        for (int i = 0; i < n; i++)\n            mark[i] = 0;\n        for (int i : orig)\n            mark[i] = 1;\n        mark[orig[0]] = 0;\n        root = getroot(edges, &cur, &prev, mark);\n        if (root == -1) {\n            for (int i = 0; i < n; i++)\n                mark[i] = 0;\n            for (int i : orig)\n                mark[i] = 1;\n            mark[orig[1]] = 0;\n            root = getroot(edges, &cur, &prev, mark);\n        }\n    } \n    cout << ((root == -1)? -1 : root+1);\n    cout << '\\n';\n    return 0;\n}"
}