{
    "id": 188151705,
    "contestId": 1182,
    "creationTimeSeconds": 1672964208,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "xixike"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 9011200,
    "source": "#include <bits/stdc++.h>\r\n#define pb push_back\r\n\r\nusing namespace std;\r\n\r\nnamespace IO{\r\n    inline int read(){\r\n        int x = 0, f = 1;\r\n        char ch = getchar();\r\n        while(!isdigit(ch)) {if(ch == '-') f = -1; ch = getchar();}\r\n        while(isdigit(ch)) x = (x << 3) + (x << 1) + ch - '0', ch = getchar();\r\n        return x * f;\r\n    }\r\n\r\n    template <typename T> inline void write(T x){\r\n        if(x < 0) putchar('-'), x = -x;\r\n        if(x > 9) write(x / 10);\r\n        putchar(x % 10 + '0');\r\n    }\r\n}\r\nusing namespace IO;\r\n\r\nconst int N = 1e5 + 10;\r\nint n, deg[N];\r\nvector <int> G[N];\r\nint siz[N], mx[N], rt;\r\n\r\ninline void get_root(int x, int fa){\r\n    siz[x] = 1, mx[x] = 0;\r\n    for(auto y : G[x]){\r\n        if(y == fa) continue;\r\n        get_root(y, x), siz[x] += siz[y];\r\n        mx[x] = max(mx[x], siz[y]);\r\n    }\r\n    mx[x] = max(mx[x], n - siz[x]);\r\n    if(!rt || mx[rt] > mx[x]) rt = x;\r\n}\r\n\r\nvector <int> vec[N];\r\nint dep[N];\r\n\r\ninline void dfs(int x, int fa){\r\n    dep[x] = dep[fa] + 1;\r\n    for(auto y : G[x])\r\n        if(y != fa) dfs(y, x);\r\n}\r\n\r\ninline bool chk(int x){\r\n    dfs(x, 0);\r\n    for(int i = 1; i <= n; ++i) vec[i].clear();\r\n    for(int i = 1; i <= n; ++i) vec[dep[i]].pb(i);\r\n    for(int i = 1; i <= n; ++i)\r\n        for(int j = 1; j < (int)vec[i].size(); ++j)\r\n            if(deg[vec[i][0]] != deg[vec[i][j]]) return 0;\r\n    write(x), puts(\"\");\r\n    exit(0);\r\n}\r\n\r\nint krt, rt2, len2;\r\n\r\ninline int is_line(int x, int fa){\r\n    if(deg[x] > 2) return 0;\r\n    if(deg[x] == 1) return krt = x, 1;\r\n    for(auto y : G[x])\r\n        if(y != fa){\r\n            int res = is_line(y, x);\r\n            return !res ? 0 : res + 1;\r\n        }\r\n}\r\n\r\nsigned main(){\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"test.in\", \"r\", stdin);\r\n    freopen(\"test.out\", \"w\", stdout);\r\n#endif\r\n    n = read();\r\n    for(int i = 1; i < n; ++i){\r\n        int u = read(), v = read();\r\n        G[u].pb(v), G[v].pb(u), deg[u]++, deg[v]++;\r\n    }\r\n    get_root(1, 0), chk(rt);\r\n    for(auto y : G[rt]){\r\n        int len = is_line(y, rt);\r\n        if(!len) continue;\r\n        if(rt2 && len != len2) {chk(krt); break;}\r\n        if(!rt2) rt2 = krt, len2 = len, chk(krt);\r\n    }\r\n    puts(\"-1\");\r\n    return 0;\r\n}"
}