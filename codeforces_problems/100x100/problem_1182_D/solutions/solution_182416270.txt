{
    "id": 182416270,
    "contestId": 1182,
    "creationTimeSeconds": 1669343478,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "quan7929"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 9830400,
    "source": "// LUOGU_RID: 95356646\n#include<bits/stdc++.h>\r\n#define rg register int\r\n#define ll long long\r\n#define ci const int\r\nusing namespace std;\r\ninline int read(){char ch(getchar());int res(0);while(ch<48||ch>57)ch=getchar();while(ch>=48&&ch<=57)res=(res<<1)+(res<<3)+(ch^48),ch=getchar();return res;}\r\nci N=1e5+5,mod=1e9+7,M=1.3e6;\r\nint n,p[N],len,siz[N],head[N],nx[N<<1],to[N<<1],tot,val[N],rt,d[N];bool vis[M],ok[N];\r\ninline void add(ci x,ci y){\r\n\tto[++tot]=y,nx[tot]=head[x],head[x]=tot;\r\n}\r\nvoid fdrt(ci x,ci f){\r\n\tsiz[x]=1;int mx=0;\r\n\tfor(rg i=head[x],y;i;i=nx[i])\r\n\t\tif((y=to[i])^f)fdrt(y,x),siz[x]+=siz[y],mx=max(mx,siz[y]);\r\n\tmx=max(mx,n-siz[x]);\r\n\tif(mx<=(n>>1))rt=x;\r\n}\r\nvoid dfs(ci x,ci f){\r\n\tval[x]=siz[x]=ok[x]=1;\r\n\tfor(rg i=head[x],y,las=-1;i;i=nx[i])\r\n\t\tif((y=to[i])^f)\r\n\t\t\tdfs(y,x),siz[x]+=siz[y],val[x]+=(ll)val[y]*p[siz[x]]%mod,val[x]-=val[x]<mod?0:mod,\r\n\t\t\tok[x]&=(ok[y]&&(las==-1||las==val[y])),las=val[y];\r\n}\r\nvoid pd(ci x){\r\n\tdfs(x,0);\r\n\tif(ok[x]){\r\n\t\tprintf(\"%d\",x);\r\n\t\texit(0);\r\n\t}\r\n}\r\nstruct pr{\r\n\tint l,ed;\r\n\tpr(int l=0,int ed=0):l(l),ed(ed){}\r\n};\r\ninline pr ch(int x){\r\n\tint l=0,las=rt;\r\n\twhile(1){\r\n\t\t++l;\r\n\t\tif(d[x]>2)return pr(0,0);\r\n\t\telse if(d[x]==2){\r\n\t\t\tif(to[head[x]]^las)las=x,x=to[head[x]];\r\n\t\t\telse las=x,x=to[nx[head[x]]];\r\n\t\t}\r\n\t\telse if(d[x]==1)return pr(l,x);\r\n\t}\r\n}\r\nint main(){\r\n\tn=read();\r\n\tfor(rg i=2;i<M&&len<n;++i){\r\n\t\tif(!vis[i])p[++len]=i;\r\n\t\tfor(rg j=1;j<=len&&i*p[j]<M;++j){\r\n\t\t\tvis[i*p[j]]=1;\r\n\t\t\tif(i%p[j]==0)break;\r\n\t\t}\r\n\t}\r\n\tfor(rg i=1,x,y;i^n;++i)++d[x=read()],++d[y=read()],add(x,y),add(y,x);\r\n\tfdrt(1,0),pd(rt);\r\n\tfor(rg i=head[rt],x,las=-1;i;i=nx[i]){\r\n\t\tconst pr tmp=ch(x=to[i]);\r\n\t\tif(tmp.l){\r\n\t\t\tif(las==-1)pd(tmp.ed),las=tmp.l;\r\n\t\t\telse if(las!=tmp.l){\r\n\t\t\t\tpd(tmp.ed),puts(\"-1\");\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\t\r\n\tputs(\"-1\");return 0;\r\n}"
}