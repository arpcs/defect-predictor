{
    "id": 161962991,
    "contestId": 1182,
    "creationTimeSeconds": 1656342099,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "Olympia"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint dfs (vector<vector<int> > &adj, vector<int>&sub, int curNode, int prevNode) {\r\n    for (int i: adj[curNode]) {\r\n        if (i != prevNode) {\r\n            sub[curNode] += dfs(adj, sub, i, curNode);\r\n        }\r\n    }\r\n    return sub[curNode];\r\n}\r\nvoid find_centroid (vector<vector<int> > &adj, vector<int>& sub, vector<int>& centroids, int curNode, int prevNode) {\r\n    int n = adj.size();\r\n    bool fine = (sub[prevNode] - sub[curNode] < n/2);\r\n    for (int i: adj[curNode]) {\r\n        if (i != prevNode) {\r\n            find_centroid(adj, sub, centroids, i, curNode);\r\n            if (sub[i] >= n/2) {\r\n                fine = false;\r\n            }\r\n        }\r\n    }\r\n    if (fine) {\r\n        centroids.push_back(curNode);\r\n    }\r\n}\r\nbool check (vector<vector<int> > &adj, int curNode) {\r\n    queue<pair<int,int> > q;\r\n    q.push(make_pair(curNode, 0));\r\n    vector<int> depth;\r\n    depth.assign(adj.size(), -1);\r\n    while (!q.empty()) {\r\n        pair<int,int> p = q.front();\r\n        q.pop();\r\n        if (depth[p.first] != -1) {\r\n            continue;\r\n        }\r\n        depth[p.first] = p.second;\r\n        for (int i: adj[p.first]) {\r\n            q.push(make_pair(i, p.second + 1));\r\n        }\r\n    }\r\n    vector<vector<int> > d;\r\n    for (int i = 0; i < adj.size(); i++) {\r\n        while (d.size() <= depth[i]) {\r\n            vector<int> dummy;\r\n            d.push_back(dummy);\r\n        }\r\n        d[depth[i]].push_back(i);\r\n    }\r\n    for (int i = 0; i < d.size(); i++) {\r\n        set<int> s;\r\n        for (int j: d[i]) {\r\n            s.insert(adj[j].size());\r\n        }\r\n        if (s.size() > 1) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nint main() {\r\n    int n;\r\n    cin >> n;\r\n    vector<vector<int> > adj(n);\r\n    for (int i = 0; i < n - 1; i++) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        u--, v--;\r\n        adj[u].push_back(v), adj[v].push_back(u);\r\n    }\r\n    vector<int> sub; \r\n    sub.assign(n, 1);\r\n    dfs(adj, sub, 0, 0);\r\n    assert(sub[0] == n);\r\n    vector<int> centroids;\r\n    find_centroid(adj, sub, centroids, 0, 0);\r\n    for (int i: centroids) {\r\n        if (check(adj, i)) {\r\n            cout << i + 1 << '\\n';\r\n            exit(0);\r\n        } \r\n    }\r\n    cout << -1;\r\n}"
}