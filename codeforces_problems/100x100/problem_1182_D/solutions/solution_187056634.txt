{
    "id": 187056634,
    "contestId": 1182,
    "creationTimeSeconds": 1672244159,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1182,
        "index": "D",
        "name": "Complete Mirror",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "hashing",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1182,
        "members": [
            {
                "handle": "LiZnB_love_ZX"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560258300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 24678400,
    "source": "//\n//  d.cpp\n//  2022-12-28 22:42\n//\n//  Created by liznb\n//\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define endl '\\n'\n\nsigned main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  int n; cin >> n;\n  vector<vector<int>> g(n + 1);\n\n  for (int i = 1; i <= n - 1; i++) {\n    int u, v; cin >> u >> v;\n    g[u].emplace_back(v);\n    g[v].emplace_back(u);\n  }\n\n  vector<long long> cnt(n + 1, 0), d(n + 1, 0), dep(n + 1, 0);\n  function<void(int, int)> dfs1 = [&] (int pos, int fa) {\n    cnt[pos] = 1;\n    for (auto &v : g[pos]) {\n      if (v == fa) continue;\n      dfs1(v, pos);\n      dep[v] = dep[pos] + 1;\n      d[pos] += cnt[v] + d[v];\n      cnt[pos] += cnt[v];\n    }\n  };\n  dfs1(1, -1);\n\n  long long dis = d[1], ans = 1e18;\n  vector<int> p; // \u5b58\u653e\u91cd\u5fc3\n  function<void(int, int)> dfs2 = [&] (int pos, int fa) {\n    if (dis < ans) {\n      ans = dis;\n      p = {pos};\n    } else if (dis == ans) {\n      p.emplace_back(pos);\n    }\n\n    for (auto &v : g[pos]) {\n      if (v == fa) continue;\n      dis -= cnt[v];\n      dis += n - cnt[v];\n      dfs2(v, pos);\n      dis += cnt[v];\n      dis -= n - cnt[v];\n    }\n  };\n\n  dfs2(1, -1);\n\n\n  for (auto &it : p) {\n    auto sol = [&](int s) {\n      // hash \u5f00\u59cb\n      const int MOD = 2147483647;\n      const array<int, 2> P = {48271, 16807};\n\n      auto h = [&](int x, const int p) {\n        return 1ll * x * p % MOD;\n      };\n\n      // O(n) \u6709\u6839\u6811 hash\n      vector<array<int, 2>> h_root(n + 1);\n      function<void(int, int)> get_hash = [&](int pos, int fa) {\n        h_root[pos] = {1, 1};\n        for (auto &v : g[pos]) {\n          if (v == fa) continue;\n          get_hash(v, pos);\n          for (int i = 0; i < 2; i++)\n            h_root[pos][i] = (1ll * h_root[pos][i] + h(h_root[v][i], P[i])) % MOD;\n        }\n      };\n\n      vector<array<int, 2>> ck, backup;\n      vector<int> name;\n      for (auto v : g[s]) {\n        get_hash(v, s);\n        ck.emplace_back(h_root[v]);\n        name.emplace_back(v);\n      }\n      backup = ck;\n\n      sort(ck.begin(), ck.end());\n      ck.erase(unique(ck.begin(), ck.end()), ck.end());\n\n      function<bool(int, int)> check = [&](int pos, int fa) {\n        vector<array<int, 2>> hash;\n        for (auto v : g[pos]) {\n          if (v == fa) continue;\n          hash.emplace_back(h_root[v]);\n          if (!check(v, pos)) return false;\n        }\n        sort(hash.begin(), hash.end());\n        hash.erase(unique(hash.begin(), hash.end()), hash.end());\n        if (hash.size() >= 2) return false;\n        return true;\n      };\n\n      if (ck.size() > 2) return false;\n      if (ck.size() == 2) {\n        map<array<int, 2>, int> tot;\n        for (auto &it : backup) tot[it]++;\n        if (tot[ck[0]] >= 2 && tot[ck[1]] >= 2) return false;\n        vector<int> goal;\n        for (int j = 0; j < (int) backup.size(); j++) {\n          if (tot[backup[j]] == 1) {\n            goal.emplace_back(name[j]);\n          }\n        }\n        auto check_line = [&](int pos, int fa) {\n          int p = pos;\n          while (g[p].size() == 2) {\n            for (auto &v : g[p]) {\n              if (v == fa) continue;\n              fa = p;\n              p = v;\n              break;\n            }\n          }\n          if (g[p].size() > 2) return 0ll;\n          return p;\n        };\n        for (auto &it : goal) {\n          if (check_line(it, s) && check(s, it)) {\n            cout << check_line(it, s) << endl;\n            exit(0);\n          }\n        }\n        return false;\n      } else return check(s, -1);\n    };\n    if (sol(it)) { \n      cout << it << endl;\n      return 0;\n    }\n  }\n\n  cout << -1;\n\n  return 0;\n}\n"
}