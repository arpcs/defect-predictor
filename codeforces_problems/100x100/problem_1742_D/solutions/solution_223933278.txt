{
    "id": 223933278,
    "contestId": 1742,
    "creationTimeSeconds": 1695062989,
    "relativeTimeSeconds": 4969,
    "problem": {
        "contestId": 1742,
        "index": "D",
        "name": "Coprime",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1742,
        "members": [
            {
                "handle": "frzcodes12"
            },
            {
                "handle": "Safawt"
            },
            {
                "handle": "FamAShihata"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 125485,
        "teamName": "FAST",
        "ghost": false,
        "startTimeSeconds": 1695058020
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import java.util.ArrayList;\r\nimport java.util.Arrays;\r\nimport java.util.HashSet;\r\nimport java.util.Scanner;\r\n\r\npublic class CoprimesContest {\r\n    public static void main(String[] args) {\r\n        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31};\r\n\r\n        Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        while (t-- > 0) {\r\n            ArrayList<HashSet<Integer>> factors = new ArrayList<>();\r\n            for (int i = 0; i < 11; i++) {\r\n                factors.add(new HashSet<>());\r\n            }\r\n\r\n            int n = sc.nextInt();\r\n            for (int i = 1; i <= n; i++) {\r\n                int number = sc.nextInt();\r\n                for (int j = 0; j < 11; j++) {\r\n                    if (number % primes[j] == 0) {\r\n                        factors.get(j).add(i);\r\n                    }\r\n                }\r\n            }\r\n\r\n            int result = -1;\r\n            for (int i = n; i >= 1; i--) {\r\n                for (int j = i; j >= 1; j--) {\r\n                    boolean coprime = true;\r\n                    for (HashSet<Integer> factor : factors) {\r\n                        if (factor.contains(i) && factor.contains(j)) {\r\n                            coprime = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (coprime) {\r\n                        result = Math.max(i + j, result);\r\n                    }\r\n                }\r\n            }\r\n            System.out.println(result);\r\n        }\r\n    }\r\n}"
}