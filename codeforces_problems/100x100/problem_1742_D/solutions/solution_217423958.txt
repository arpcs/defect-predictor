{
    "id": 217423958,
    "contestId": 1742,
    "creationTimeSeconds": 1691309630,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1742,
        "index": "D",
        "name": "Coprime",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1742,
        "members": [
            {
                "handle": "Mostafa_Issa"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665671700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 4300800,
    "source": "// RECTANGLE AND SQUARE AREA:\r\n/*\r\nlong long area(int bl_x, int bl_y, int tr_x, int tr_y) {\r\n    long long length = tr_y - bl_y;\r\n    long long width = tr_x - bl_x;\r\n    return length * width;\r\n}\r\n/*\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\n// CHECK RECTANGLES OR SQUARES INTERSECTION:\r\n/*\r\nbool intersect(vector<int> s1, vector<int> s2) {\r\n\tint bl_a_x = s1[0], bl_a_y = s1[1], tr_a_x = s1[2], tr_a_y = s1[3];\r\n\tint bl_b_x = s2[0], bl_b_y = s2[1], tr_b_x = s2[2], tr_b_y = s2[3];\r\n\r\n\t// no overlap\r\n\tif (bl_a_x >= tr_b_x || tr_a_x <= bl_b_x || bl_a_y >= tr_b_y ||\r\n\t    tr_a_y <= bl_b_y) {\r\n\t\treturn false;\r\n\t} else {\r\n\t\treturn true;\r\n\t}\r\n}\r\n*/\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n// INTERSECTION AREA:\r\n/*\r\nint inter_area(vector<int> s1, vector<int> s2) {\r\n\tint bl_a_x = s1[0], bl_a_y = s1[1], tr_a_x = s1[2], tr_a_y = s1[3];\r\n\tint bl_b_x = s2[0], bl_b_y = s2[1], tr_b_x = s2[2], tr_b_y = s2[3];\r\n\r\n\treturn ((min(tr_a_x, tr_b_x) - max(bl_a_x, bl_b_x)) *\r\n\t        (min(tr_a_y, tr_b_y) - max(bl_a_y, bl_b_y)));\r\n}\r\n*/\r\n\r\n//////////////////////////////////////////////////////////////////////////////\r\n\r\n// GENERATING SUBSETS WITH RECURSOIN (SLOW):\r\n\r\n/*\r\nvector <vector<int>> subs;\r\nvector <int> sub;\r\n\r\nvector <vector <int>> gen_sub(int n, int k) {\r\n    if (k > n) {\r\n        subs.pb(sub);\r\n        return subs;\r\n    }    \r\n    else {\r\n        sub.pb(k);\r\n        gen_sub(n, k + 1);\r\n        sub.pop_back();\r\n        gen_sub(n, k + 1);\r\n    }\r\n    return subs;\r\n}\r\n\r\n*/\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\n//GENERATING SUBSETS WTTH BITMASK (FAST):\r\n/*\r\nvector <vector <int>> gen_sub(vector <int> set, int n) {\r\n    vector <vector <int>> subsets;\r\n    for (int i = 0; i < (1 << n); i++) {\r\n        vector <int> sub;\r\n        for (int j = 0; j < n; j++) if (i & (1 << j)) sub.pb(set[j]);\r\n        subsets.pb(sub);\r\n    }\r\n    return subsets;\r\n}\t    \r\n*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n// POLICY-BASED STRUCTURE - INDEXED_SET:\r\n/*\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\nusing namespace __gnu_pbds;\r\ntemplate <class T>\r\nusing indexed_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\n*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n//BINARY SEARCH:\r\n\r\n/*\r\nbool binary_search(vector <int> v, int start, int end, int key) {\r\n    while (start <= end) {\r\n        int mid = (start + end)/2;\r\n        if (v[mid] == key) return true;\r\n        if (v[mid] > size) end = mid - 1;\r\n        else start = mid + 1;\r\n    }\r\n    return false;\r\n} \r\n*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n//MAXIMUM SUBARRY SUM:\r\n\r\n/*\r\nint best = 0, sum = 0;\r\nfor (int k = 0; k < n; k++) {\r\n    sum = max(array[k],sum+array[k]);\r\n    best = max(best,sum);\r\n}\r\ncout << best << \"\\n\";\r\n*/\r\n\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\n//NUMBERS SUM FORMULA BETWEEN A AND B:\r\n\r\n/* \r\nsum = n(a + b) / 2. n is the number of the numbers which equal to b - a;\r\n*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n//SUM OF NUMBERS BETWEEN 1 AND N:\r\n\r\n/*\r\nsum = n * (n + 1) / 2;\r\n*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\n#define fast_io ios_base::sync_with_stdio(false); cin.tie(NULL);\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define pb push_back\r\n#define rep(i, a, b) for (int i = a; i < b; i++)\r\n#define repq(i, a, b) for (int  i = a; i <= b; i++)\r\n#define sq(a) a * a\r\n\r\nint main() {\r\n    fast_io\r\n    int t, n; cin >> t;\r\n    unordered_map <int, vector <int> > mp;\r\n    repq (i, 1, 1000) repq (j, 1, 1000) if (__gcd(i, j) == 1) mp[i].pb(j);\r\n    while(t--) {\r\n        cin >> n;\r\n        int a[n], ans = -1;\r\n        unordered_map <int, int> pos;\r\n        rep (i, 0, n) {\r\n            cin >> a[i];\r\n            pos[a[i]] = i + 1;\r\n        }    \r\n        repq (i, 1, 1000) {\r\n            if (mp[i].size()) {\r\n                int mx = 0;\r\n                rep (j, 0, mp[i].size()) mx = max(mx, pos[mp[i][j]]);\r\n                if (mx && pos[i]) ans = max(ans, pos[i] + mx);\r\n            }    \r\n        }\r\n        cout << ans << '\\n';\r\n    }\r\n}\r\n\r\n\r\n"
}