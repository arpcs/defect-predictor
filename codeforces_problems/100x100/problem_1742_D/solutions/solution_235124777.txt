{
    "id": 235124777,
    "contestId": 1742,
    "creationTimeSeconds": 1701368924,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1742,
        "index": "D",
        "name": "Coprime",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1742,
        "members": [
            {
                "handle": "Bhanu1312"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665671700
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\n\r\npublic class Main {\r\n\r\n    private static boolean isCoprime(int a, int b) {\r\n\r\n        while (b != 0) {\r\n            int temp = b;\r\n            b = a % b;\r\n            a = temp;\r\n        }\r\n        return a == 1;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n\r\n        Scanner s = new Scanner(System.in);\r\n        int t = s.nextInt();\r\n\r\n        while (--t >= 0) {\r\n\r\n            int n = s.nextInt();\r\n\r\n            int[] nums = new int[1001];\r\n\r\n            for (int idx = 0; idx < n; ++idx) {\r\n\r\n                int val = s.nextInt();\r\n                nums[val] = Math.max(nums[val], idx + 1);\r\n\r\n            }\r\n\r\n            int maxSum = -1;\r\n\r\n            for (int i = 1; i <= 1000; ++i) {\r\n\r\n                if (nums[i] == 0)\r\n                    continue;\r\n\r\n                for (int j = i; j <= 1000; ++j) {\r\n\r\n                    if (nums[j] == 0)\r\n                        continue;\r\n\r\n                    if (isCoprime(i, j)) {\r\n\r\n                        maxSum = Math.max(maxSum, nums[i] + nums[j]);\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            System.out.println(maxSum);\r\n\r\n        }\r\n        s.close();\r\n    }\r\n}"
}