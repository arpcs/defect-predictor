{
    "id": 226587628,
    "contestId": 1742,
    "creationTimeSeconds": 1696423334,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1742,
        "index": "D",
        "name": "Coprime",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1742,
        "members": [
            {
                "handle": "Tomatos03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665671700
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 826,
    "memoryConsumedBytes": 66969600,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.HashSet;\r\n\r\npublic class Main {\r\n\tpublic static void main (String[] argv) throws IOException {\r\n\t\tIOReader in = new IOReader();\r\n\t\tint t = in.nextInt();\r\n\t\tHashMap<Integer, HashSet<Integer>> map = new HashMap<>(1000);\r\n\t\tfor (int i = 1; i <= 1000; i++) {\r\n\t\t\tfor (int j = 1; j <= 1000; j++) {\r\n\t\t\t\tif (gcd(i, j)) {\r\n\t\t\t\t\tif (!map.containsKey(i)) map.put(i, new HashSet<>(1000));\r\n\t\t\t\t\tmap.get(i).add(j);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile (t-- > 0) {\r\n\t\t\tint n = in.nextInt();\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tString[] nums = in.next().split(\" \");\r\n\t\t\tHashMap<Integer, Integer> cur = new HashMap<>();\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\ta[i] = Integer.parseInt(nums[i]);\r\n\t\t\t\tcur.put(a[i], i + 1);\r\n\t\t\t}\r\n\t\t\tint ans = -1;\r\n\t\t\tfor (int i = 1; i <= 1000; i++) {\r\n\t\t\t\tHashSet<Integer> temp = map.get(i);\r\n\t\t\t\tfor (Integer j : temp) {\r\n\t\t\t\t\tif (cur.containsKey(i) && cur.containsKey(j)) {\r\n\t\t\t\t\t\tans = Math.max(ans, cur.get(i) + cur.get(j));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tSystem.out.println(ans);\r\n\t\t}\r\n\t\tin.close();\r\n\t}\r\n\r\n\tpublic static boolean gcd (int a , int b) {\r\n\t\twhile (b != 0) {\r\n\t\t\tint r = a % b;\r\n\t\t\ta = b;\r\n\t\t\tb = r;\r\n\t\t}\r\n\t\treturn a == 1;\r\n\t}\r\n}\r\n\r\n\r\nclass IOReader {\r\n\tBufferedReader in;\r\n\tpublic IOReader() {\r\n\t\tin = new BufferedReader(new InputStreamReader(System.in));\r\n\t}\r\n\r\n\tpublic Integer nextInt() throws IOException {\r\n\t\treturn Integer.parseInt(in.readLine());\r\n\t}\r\n\r\n\tpublic String next() throws IOException {\r\n\t\treturn in.readLine();\r\n\t}\r\n\r\n\tpublic Long nextLong() throws IOException {\r\n\t\treturn Long.parseLong(in.readLine());\r\n\t}\r\n\r\n\tpublic Double nextDouble() throws IOException {\r\n\t\treturn Double.parseDouble(in.readLine());\r\n\t}\r\n\r\n\tpublic void close() throws IOException {\r\n\t\tin.close();\r\n\t}\r\n}\r\n"
}