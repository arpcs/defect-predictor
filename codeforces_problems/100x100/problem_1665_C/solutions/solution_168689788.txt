{
    "id": 168689788,
    "contestId": 1665,
    "creationTimeSeconds": 1660735820,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "cxy2774952383"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\r\n#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nconst int maxN = 2e5 + 7;\r\n\r\nint T, n, son[maxN], cnt[maxN];\r\n\r\nbool cmp(int x, int y)\r\n{\r\n    return x > y;\r\n}\r\n\r\nbool check(int x)\r\n{\r\n    int sum = 0;\r\n    for(int i = 1; i <= cnt[0]; ++i) {\r\n        if(cnt[i] > x)\r\n            sum += cnt[i] - x;\r\n        else\r\n            break;\r\n    }\r\n    return sum <= x;\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d\", &T);\r\n    while(T--) {\r\n        memset(son, 0, sizeof son);\r\n        cnt[0] = 0;\r\n        scanf(\"%d\", &n);\r\n        for(int i = 1; i < n; ++i) {\r\n            int x; scanf(\"%d\", &x);\r\n            son[x]++;\r\n        }\r\n        sort(son + 1, son + 1 + n, cmp);\r\n        int mt = 0;\r\n        while(son[n] == 0)\r\n            n--;\r\n        for(int i = 1; i <= n; ++i) {\r\n            ++mt;\r\n            son[i] -= (n - i + 1);\r\n            if(son[i] > 1)\r\n                cnt[++cnt[0]] = son[i] - 1;\r\n        }\r\n        if(cnt[0] == 0) \r\n            printf(\"%d\\n\", mt + 1);\r\n        else {\r\n            sort(cnt + 1, cnt + 1 + cnt[0], cmp);\r\n            int sum = 0;\r\n            for(int i = 1; i <= cnt[0]; ++i)\r\n                sum += cnt[i];\r\n            int l = 1, r = sum;\r\n            while(l < r) {\r\n                int mid = (l + r) >> 1;\r\n                if(check(mid))\r\n                    r = mid;\r\n                else\r\n                    l = mid + 1;\r\n            }\r\n            printf(\"%d\\n\", l + mt + 1);\r\n        }\r\n    }\r\n    return 0;   \r\n}\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <cstring>\r\nusing namespace std;\r\nconst int N = 1e5 + 10;\r\nint a[N], son_size[N], cnt[N];\r\nint ans, n;\r\nbool cmp(int x, int y)\r\n{\r\n    return x > y;\r\n}\r\nbool check(int x){\r\n    int sum = 0;\r\n    for(int i = 1; i <= cnt[0]; ++i) {\r\n        if(cnt[i] > x)\r\n            sum += cnt[i] - x;\r\n        else\r\n            break;\r\n    }\r\n    return sum <= x;\r\n}\r\nint main()\r\n{\r\n    int T;\r\n    scanf(\"%d\", &T);\r\n    while (T--)\r\n    {\r\n        scanf(\"%d\", &n);\r\n        for (int i = 1; i < n; i++)\r\n        {\r\n            int x;\r\n            scanf(\"%d\", &x);\r\n            son_size[x]++;\r\n        }\r\n        sort(son_size + 1, son_size + 1 + n, cmp);\r\n        int mt = 0;\r\n        while (son_size[n] == 0){\r\n            n--;\r\n        }\r\n        for (int i = 1; i <= n; ++i)\r\n        {\r\n            ++mt;\r\n            son_size[i] -= (n - i + 1);\r\n            if (son_size[i] > 1)\r\n                cnt[++cnt[0]] = son_size[i] - 1;\r\n        }\r\n        if (cnt[0] == 0)\r\n            printf(\"%d\\n\", mt + 1);\r\n        else\r\n        {\r\n            sort(cnt + 1, cnt + 1 + cnt[0], cmp);\r\n            int sum = 0;\r\n            for (int i = 1; i <= cnt[0]; ++i)\r\n                sum += cnt[i];\r\n            int l = 1, r = sum;\r\n            while (l < r)\r\n            {\r\n                int mid = (l + r) >> 1;\r\n                if (check(mid))\r\n                    r = mid;\r\n                else\r\n                    l = mid + 1;\r\n            }\r\n            printf(\"%d\\n\", l + mt + 1);\r\n        }\r\n    }\r\n    return 0;\r\n}"
}