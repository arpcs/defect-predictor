{
    "id": 162454231,
    "contestId": 1665,
    "creationTimeSeconds": 1656687754,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "Green_fat_loves_red_thin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 2560000,
    "source": "# include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n# define IOS ios::sync_with_stdio(0),cin.tie(0),cout.tie(0)\r\nconst int inf = 2e9;\r\nconst int mod = 998244353;\r\nconst int N = 3e5 + 10;\r\nconst int M = 1e6 + 10;\r\n\r\n\r\nint deg[N], a[N];\r\nsigned main() {\r\n#ifdef LYC\r\n\tfreopen(\"cin.txt\", \"r\", stdin);\r\n\t//freopen(\"cout.txt\", \"w\", stdout);\r\n#endif \r\n\tIOS;\r\n\tint T; cin >> T;\r\n\twhile (T--) {\r\n\t\tint n; cin >> n;\r\n\r\n\t\tfor (int i = 1; i <= n; i++)deg[i] = 0;\r\n\r\n\t\tfor (int i = 1; i < n; i++) {\r\n\t\t\tint x; cin >> x;\r\n\t\t\tdeg[x]++;\r\n\t\t}\r\n\r\n\t\tint cnt = 0;\r\n\t\tfor (int i = 1; i <= n; i++)\r\n\t\t\tif (deg[i])a[++cnt] = deg[i];\t\t\r\n\r\n\t\ta[++cnt] = 1;\t\t\r\n\r\n\t\tsort(a + 1, a + 1 + cnt, greater<int>());\r\n\t\t\t\r\n\t\tpriority_queue<int>qe;\r\n\t\tint ans = cnt;\r\n\t\tfor (int i = 1; i <= cnt; i++) {\r\n\t\t\ta[i] -= cnt - i + 1;\r\n\t\t\tif (a[i] > 0)qe.push(a[i]);\r\n\t\t}\r\n\r\n\t\tint now = 0;\r\n\t\twhile (qe.size()) {\r\n\t\t\tint tmp = qe.top(); qe.pop();\r\n\t\t\tnow++; ans++;\r\n\t\t//\tcout << now << ' ' << ans << ' ' << tmp << '\\n';\r\n\t\t\tif (now >= tmp || (!qe.size() && now >= tmp - 1) ||\r\n\t\t\t\t(qe.size() && now >= tmp - 1 && qe.top() != tmp))break;\r\n\t\t\ttmp--;\r\n\t\t\tqe.push(tmp);\r\n\t\t}\r\n\t\tcout << ans << '\\n';\r\n\t}\r\n\r\n\r\n\r\n\r\n}"
}