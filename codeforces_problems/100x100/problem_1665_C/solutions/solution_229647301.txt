{
    "id": 229647301,
    "contestId": 1665,
    "creationTimeSeconds": 1698213788,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "heheudontknowme"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 9011200,
    "source": "#include <iostream>\r\nusing namespace std;\r\n#include <bits/stdc++.h>\r\n#include <vector>\r\n#include <cstdlib>\r\nusing namespace std;\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    int t;\r\n    cin >> t;\r\n    while(t--){   \r\n   int n;\r\n   cin >> n;\r\n   vector<vector<int>>g(n,vector<int>());\r\n   for(int i=0;i<n-1;i++){\r\n    int x;\r\n    cin >> x;\r\n    g[x-1].push_back(i+1);\r\n    g[i+1].push_back(x-1);\r\n   }\r\n   vector<int> levelsize;\r\n   queue<int>q;\r\n   vector<int> visited(n,0);\r\n   q.push(0);\r\n   visited[0]=1;\r\n   while(q.size()){\r\n    if(q.front()==0){\r\n        levelsize.push_back(g[q.front()].size());\r\n    }\r\n    else{\r\n        if(g[q.front()].size()-1){\r\n        levelsize.push_back(g[q.front()].size()-1);\r\n        }\r\n    }\r\n        for(auto p:g[q.front()]){\r\n            if(visited[p]==0){\r\n                visited[p]=1;\r\n            q.push(p);\r\n            }\r\n        }\r\n        q.pop();\r\n    }\r\n    levelsize.push_back(1);\r\n    //levelsize={5,5,1,1};\r\n   int time=0;\r\n   \r\n   int flag=0;\r\n   sort(levelsize.begin(),levelsize.end(),greater<int>());\r\n   int j=levelsize.size();\r\n   time=j;\r\n   for(int i=0;i<j;i++){\r\n    levelsize[i]-=(j-i);\r\n    if(levelsize[i]>0){\r\n        flag=1;\r\n    }\r\n   }\r\n    while(flag){\r\n        int count=0;\r\n        flag=0;\r\n        time++;\r\n        int maxindex=0;\r\n   int maxvalue=levelsize[0];\r\n    for(int i=0;i<levelsize.size();i++){\r\n        if(levelsize[i]>maxvalue){\r\n            maxindex=i;\r\n            maxvalue=levelsize[i];\r\n        }\r\n        // if(levelsize[i]==0){\r\n        //     break;\r\n        // }\r\n        if(levelsize[i]>0){\r\n            levelsize[i]--;\r\n            if(levelsize[i]>0){\r\n                flag=1;\r\n                count++;\r\n            }\r\n        }   \r\n    }\r\n        levelsize[maxindex]--;\r\n        if(count==1 && levelsize[maxindex]==0){\r\n            break;\r\n        }\r\n    }\r\n    cout << time << endl;\r\n   }\r\n    return 0;\r\n}"
}