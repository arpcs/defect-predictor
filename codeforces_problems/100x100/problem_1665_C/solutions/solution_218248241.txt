{
    "id": 218248241,
    "contestId": 1665,
    "creationTimeSeconds": 1691729061,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "omsingh_4459"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 32563200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nvoid fastio()\r\n{\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(NULL);\r\n}\r\nvoid dfs(int u, int p, vector<int>&vec, vector<int>adj[], vector<bool>&vis){\r\n  vis[u]=true;\r\n \r\n  for(auto v : adj[u]){\r\n    if(!vis[v]){\r\n     \r\n      dfs( v, u, vec, adj, vis);\r\n    }\r\n  }\r\n  vec[p]++;\r\n  return;\r\n}\r\nvoid fun(vector<int>& a, int &ans) {\r\n    if (a.empty()) return;\r\n    int n = a.size();\r\n    int last = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        if (a[i] == a[0]) {\r\n            last = i;\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    --a[last];\r\n    for (int i = 0; i < n; ++i) --a[i];\r\n    ++ans;\r\n    while (!a.empty() && a.back() <= 0) {\r\n        a.pop_back();\r\n    }\r\n    fun(a, ans);\r\n}\r\nint32_t main()\r\n{\r\n  fastio();\r\n  int t;\r\n  cin >> t;\r\n  while (t--)\r\n  {\r\n    int n;\r\n    cin>>n;\r\n    int a[n];\r\n    vector<int>adj[n+1];\r\n    for(int i=1; i<n; i++){\r\n      cin>>a[i];\r\n      adj[a[i]].push_back(i+1);\r\n      adj[i+1].push_back(a[i]);\r\n    }\r\n    \r\n    vector<int>vec(n+1, 0);\r\n    vector<bool>vis(n+1, false);\r\n    dfs( 1, 0, vec, adj, vis);\r\n    sort(vec.begin(), vec.end(), greater<int>());\r\n    int ans = 0;\r\n    \r\n    \r\n      while(vec.size()>0 && vec[vec.size()-1]<=0 ){\r\n        vec.pop_back();\r\n      }\r\n      for(int i=0; i<vec.size(); i++){\r\n        vec[i]-=(vec.size()-i);\r\n        ans++;\r\n      }\r\n      sort(vec.begin(), vec.end(), greater<int>());\r\n      while(vec.size()>0 && vec[vec.size()-1]<=0 ){\r\n        vec.pop_back();\r\n      }\r\n      fun(vec, ans);\r\n\r\n    cout<<ans<<endl;\r\n  }\r\n  return 0;\r\n}\r\n"
}