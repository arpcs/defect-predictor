{
    "id": 208086980,
    "contestId": 1665,
    "creationTimeSeconds": 1685641391,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1665,
        "index": "C",
        "name": "Tree Infection",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "greedy",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1665,
        "members": [
            {
                "handle": "alexk07"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1649428500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 10956800,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <set>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\nconst ll inf = 1e18;\r\nconst ll mod = 1e9 + 7;\r\n\r\n#define REP(i, a, b) for (ll i = a; i < b; i++)\r\n#define REP1(i, a, b) for (ll i = b; i > a; i--)\r\n\r\nll cmp(vector<ll> i, vector<ll> j) {\r\n    return i.size() > j.size();\r\n}\r\n\r\nvoid solve() {\r\n    ll n; cin >> n;\r\n    vector<ll> p(n);\r\n    REP(i, 0, n - 1) cin >> p[i];\r\n    vector<vector<ll>> g(n);\r\n    REP(i, 0, n - 1) {\r\n        g[p[i] - 1].push_back(i);\r\n    }\r\n    sort(g.begin(), g.end(), cmp);\r\n    ll ans = 0;\r\n    vector<ll> ind;\r\n    REP(i, 0, n) {\r\n        vector<ll> ind1;\r\n        ll col = 0;\r\n        REP(j, 0, ind.size()) {\r\n            if (g[ind[j]].size() > 1) {\r\n                g[ind[j]].pop_back();\r\n                ind1.push_back(ind[j]);\r\n                col++;\r\n            }\r\n            else if (g[ind[j]].size() == 1) {\r\n                g[ind[j]].pop_back();\r\n                col++;\r\n            }\r\n        }\r\n        ind = ind1;\r\n        if (g[i].size() != 0) {\r\n            ind.push_back(i);\r\n            g[i].pop_back();\r\n            col++;\r\n        }\r\n        else {\r\n            if (ind.size() != 0) {\r\n                g[ind[ind.size() - 1]].pop_back();\r\n                if (g[ind[ind.size() - 1]].size() == 0) {\r\n                    ind.pop_back();\r\n                }\r\n                col++;\r\n            }\r\n        }\r\n        if (col == 0) break;\r\n        ans++;\r\n    }\r\n    cout << ans + 1 << \"\\n\";\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ll t; cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}