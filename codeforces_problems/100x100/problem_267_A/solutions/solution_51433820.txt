{
    "id": 51433820,
    "contestId": 267,
    "creationTimeSeconds": 1552883094,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 267,
        "index": "A",
        "name": "Subtractions",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 267,
        "members": [
            {
                "handle": "zNerd"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1358002800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 16076800,
    "source": "//============================================================================\r\n// Name        : competitive_programing.cpp\r\n// Author      : .Data_Nerd.\r\n// Description : problem solving training\r\n//============================================================================\r\n\r\n#include <iostream>\r\n#include <bits/stdc++.h>\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define ld long double\r\n#define PI acos(-1)\r\n#define dot(a, b) (conj(a) * (b)).real()\r\n#define cross(a, b) (conj(a) * (b)).imag()\r\n#define Data_Nerd ios_base::sync_with_stdio(); cin.tie(0); cout.tie(0);\r\n#define Y imag()\r\n#define X real()\r\n#define EPS 1e-7\r\n#define mo 1e9 + 7\r\nusing namespace std;\r\ntypedef complex <ld> point;\r\ntypedef vector <point> polygon;\r\ntypedef tuple <ld, ld, ld> line;\r\ntypedef vector <point> spolygon;\r\n\r\nline lineeq(point x, point y){\r\n\tll a = y.Y - x.Y;\r\n\tll b = x.X - y.X;\r\n\tll c = -a * x.X - b * x.Y;\r\n\tll gcd = abs(__gcd(a, __gcd(b, c)));\r\n\tif(a < 0 || (a == 0 && b < 0)) gcd *= -1;\r\n\ta /= gcd; b /= gcd; c /= gcd;\r\n\treturn line(a, b, c);\r\n}\r\n\r\npoint getpoint(line l1, line l2){\r\n\tld y = (get<0>(l1) * get<2>(l2) - get<0>(l2) * get<2>(l1)) / (get<0>(l2) * get<1>(l1) - get<0>(l1) * get<1>(l2));\r\n\tld x = (get<2>(l1) * get<1>(l2) - get<2>(l2) * get<1>(l1)) / (get<0>(l2) * get<1>(l1) - get<0>(l1) * get<1>(l2));\r\n\treturn point(x, y);\r\n}\r\n\r\nbool onray(point a, point b, point c){\r\n\treturn dot(b - a, c - a) > -EPS;\r\n}\r\n\r\nll fact(ll n){\r\n\tif(n == 0) return 1;\r\n\treturn n * fact(n - 1);\r\n}\r\n\r\nbool isPrime(ll q){\r\n\tif(q == 0 || q == 1) return false;\r\n\tfor(int i = 2; i * i <= q; i++) if(q % i == 0) return false;\r\n\treturn true;\r\n}\r\n\r\npoint rotate(point p, ld a){\r\n\treturn p * polar((ld)1, a * PI / 180);\r\n}\r\n\r\nbool canBe(line l1, line l2){\r\n\tif(get<0>(l2) * get<1>(l1) - get<0>(l1) * get<1>(l2) != 0) return true;\r\n\treturn false;\r\n}\r\n\r\nld getangle(point p){\r\n\treturn arg(p) * 180 / PI;\r\n}\r\n\r\nll fp(ll base, ll x, ll mod){\r\n\tif(x == 0) return 1;\r\n\tll ans = fp(base, x / 2, mod);\r\n\tans = (ans * ans) % mod;\r\n\tif(x % 2)\r\n\t\tans = ((base % mod) * ans) % mod;\r\n\treturn ans;\r\n}\r\n\r\nll GCD(ll a, ll b){\r\n\tif(b == 0) return a;\r\n\tif(a == 0) return b;\r\n\treturn GCD(b, a % b);\r\n}\r\n\r\nll fac[(int)1e6 + 7], inv[(int)1e6 + 7];\r\n\r\nvoid precalc(int n){\r\n\tfac[0] = fac[1] = 1;\r\n\tfor(int i = 2; i < 1e6 + 7; i++){\r\n\t\tfac[i] = fac[i - 1] * i;\r\n\t\tinv[i] = fp(fac[i], (ll)mo - 2, (ll)mo);\r\n\t}\r\n}\r\n\r\nll ncr(ll n, ll r){\r\n\treturn (((fac[n] * inv[r]) % (ll)mo) * fac[n - r]) % (ll)mo;\r\n}\r\n\r\nll npr(ll n, ll r){\r\n\treturn (fac[n] * inv[n - r]) % (ll)mo;\r\n}\r\n\r\nint main() {\r\n\tData_Nerd\r\n\tint n; cin >> n;\r\n\twhile(n--){\r\n\t\tll a, b, ans = 0; cin >> a >> b;\r\n\t\twhile(a > 0 && b > 0){\r\n\t\t\t//cout << a << ' ' << b << endl;\r\n\t\t\tif(a < b){\r\n\t\t\t\t//cout << \"1\\n\";\r\n\t\t\t\tans += b / a;\r\n\t\t\t\tb = b % a;\r\n\t\t\t}else if(b < a){\r\n\t\t\t\t//cout << \"2\\n\";\r\n\t\t\t\tans += a / b;\r\n\t\t\t\ta = a % b;\r\n\t\t\t}else{\r\n\t\t\t\t//cout << \"3\\n\";\r\n\t\t\t\tans++;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcout << ans << endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n"
}