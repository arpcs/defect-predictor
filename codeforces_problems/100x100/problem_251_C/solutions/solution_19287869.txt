{
    "id": 19287869,
    "contestId": 251,
    "creationTimeSeconds": 1469045829,
    "relativeTimeSeconds": 6429,
    "problem": {
        "contestId": 251,
        "index": "C",
        "name": "Number Transformation",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 251,
        "members": [
            {
                "handle": "Sumeet.Varma"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1469039400
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 592,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class R153qC {\r\n\r\n    public static void main(String[] args) {\r\n        InputReader in = new InputReader(System.in);\r\n        PrintWriter w = new PrintWriter(System.out);\r\n        \r\n        long a = in.nextLong();\r\n        long b = in.nextLong();\r\n        int k = in.nextInt();\r\n        \r\n        int lcm = 1;\r\n        for (int i = 2; i <= k; i++)\r\n            lcm = lcm(lcm, i);\r\n        \r\n        long x1 = a / lcm;\r\n        int y1 = (int)(a % lcm);\r\n        \r\n        long x2 = b / lcm;\r\n        int y2 = (int)(b % lcm);\r\n        \r\n        if(x1 == x2) {\r\n            w.println(bfs(y1, lcm,k)[y2]);\r\n        } else {\r\n            int d1[] = bfs(y1, lcm, k);\r\n            int d2[] = bfs(0, lcm, k);\r\n            long ans = d1[0] + d2[y2] + getCycle(0, d2, k) * (x1 - x2 - 1);\r\n            w.println(ans);\r\n        }\r\n        \r\n        w.close();\r\n    }\r\n    \r\n    static int getCycle(int source, int d[], int k) {\r\n        int ans = d.length;\r\n        for (int i = 0; i < d.length; i++) {\r\n            boolean f = false;\r\n            f |= (i - 1 + 20 * d.length) % d.length == source;\r\n            for (int j = 2; j <= k; j++)\r\n                f |= (i - (i % j) + 20 * d.length) % d.length == source && i % j != 0;\r\n            if (f)\r\n                ans = Math.min(ans, d[i] + 1);\r\n        }\r\n        return ans;\r\n    }\r\n    \r\n    static int[] bfs(int source, int lcm, int k) {\r\n        int d[] = new int[lcm];\r\n        Arrays.fill(d, -1);\r\n        d[source] = 0;\r\n        \r\n        Queue<Integer> q = new LinkedList<Integer>();\r\n        q.add(source);\r\n        while (!q.isEmpty()) {\r\n            int c = q.remove();\r\n            int cc = (c - 1 + 20 * lcm) % lcm;\r\n            if(d[cc] == -1) {\r\n                d[cc] = d[c] + 1;\r\n                q.add(cc);\r\n            }\r\n            for (int i = 2; i <= k; i++) {\r\n                cc = (c - (c % i) + 20 * lcm) % lcm;\r\n                if(d[cc] == -1) {\r\n                    d[cc] = d[c] + 1;\r\n                    q.add(cc);\r\n                }\r\n            }\r\n        }\r\n        \r\n        return d;\r\n    }\r\n\r\n    static int gcd(int a, int b) {\r\n        if (a == 0)\r\n            return b;\r\n        if (b == 0)\r\n            return a;\r\n        if (a >= b)\r\n            return gcd(a % b, b);\r\n        else\r\n            return gcd(a, b % a);\r\n    }\r\n    \r\n    static int lcm(int a, int b) {\r\n        return a * b / gcd(a, b);\r\n    }\r\n    \r\n    static class InputReader {\r\n\r\n        private final InputStream stream;\r\n        private final byte[] buf = new byte[8192];\r\n        private int curChar, snumChars;\r\n        private SpaceCharFilter filter;\r\n\r\n        public InputReader(InputStream stream) {\r\n            this.stream = stream;\r\n        }\r\n\r\n        public int snext() {\r\n            if (snumChars == -1)\r\n                throw new InputMismatchException();\r\n            if (curChar >= snumChars) {\r\n                curChar = 0;\r\n                try {\r\n                    snumChars = stream.read(buf);\r\n                } catch (IOException e) {\r\n                    throw new InputMismatchException();\r\n                }\r\n                if (snumChars <= 0)\r\n                    return -1;\r\n            }\r\n            return buf[curChar++];\r\n        }\r\n\r\n        public int nextInt() {\r\n            int c = snext();\r\n            while (isSpaceChar(c)) {\r\n                c = snext();\r\n            }\r\n            int sgn = 1;\r\n            if (c == '-') {\r\n                sgn = -1;\r\n                c = snext();\r\n            }\r\n            int res = 0;\r\n            do {\r\n                if (c < '0' || c > '9')\r\n                    throw new InputMismatchException();\r\n                res *= 10;\r\n                res += c - '0';\r\n                c = snext();\r\n            } while (!isSpaceChar(c));\r\n            return res * sgn;\r\n        }\r\n\r\n        public long nextLong() {\r\n            int c = snext();\r\n            while (isSpaceChar(c)) {\r\n                c = snext();\r\n            }\r\n            int sgn = 1;\r\n            if (c == '-') {\r\n                sgn = -1;\r\n                c = snext();\r\n            }\r\n            long res = 0;\r\n            do {\r\n                if (c < '0' || c > '9')\r\n                    throw new InputMismatchException();\r\n                res *= 10;\r\n                res += c - '0';\r\n                c = snext();\r\n            } while (!isSpaceChar(c));\r\n            return res * sgn;\r\n        }\r\n\r\n        public int[] nextIntArray(int n) {\r\n            int a[] = new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                a[i] = nextInt();\r\n            }\r\n            return a;\r\n        }\r\n\r\n        public String readString() {\r\n            int c = snext();\r\n            while (isSpaceChar(c)) {\r\n                c = snext();\r\n            }\r\n            StringBuilder res = new StringBuilder();\r\n            do {\r\n                res.appendCodePoint(c);\r\n                c = snext();\r\n            } while (!isSpaceChar(c));\r\n            return res.toString();\r\n        }\r\n\r\n        public boolean isSpaceChar(int c) {\r\n            if (filter != null)\r\n                return filter.isSpaceChar(c);\r\n            return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t' || c == -1;\r\n        }\r\n\r\n        public interface SpaceCharFilter {\r\n            public boolean isSpaceChar(int ch);\r\n        }\r\n    }\r\n}"
}