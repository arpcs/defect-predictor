{
    "id": 84313469,
    "contestId": 1356,
    "creationTimeSeconds": 1592561006,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1356,
        "index": "D1",
        "name": "Quantum Classification - 1",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1356,
        "members": [
            {
                "handle": "masayoshi64"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1591977600
    },
    "programmingLanguage": "Q#",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\ufeffnamespace Library{\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Math;\r\n    open Microsoft.Quantum.Diagnostics;\r\n    open Microsoft.Quantum.Arithmetic;\r\n    operation mz(q:Qubit):Bool{\r\n        if(Measure([PauliZ], [q])==One){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    operation my(q:Qubit):Bool{\r\n        if(Measure([PauliY], [q])==One){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    //|->\u306b\u5bfe\u3057\u3066true\u3092\u8fd4\u3059\r\n    operation mx(q:Qubit):Bool{\r\n        if(Measure([PauliX], [q])==One){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    operation add1 (register : LittleEndian) : Unit is Adj+Ctl {\r\n        let n = Length(register!);\r\n        using(p = Qubit[n+1]){\r\n            X(p[0]);\r\n            for(i in 1..n){\r\n                CCNOT(p[i-1], register![i-1], p[i]);\r\n                CNOT(p[i-1], register![i-1]);\r\n            }\r\n            for(j in 1..n){\r\n                let i = n+1-j;\r\n                CNOT(p[i-1], register![i-1]);\r\n                CCNOT(p[i-1], register![i-1], p[i]);\r\n                CNOT(p[i-1], register![i-1]);\r\n            }\r\n            X(p[0]);\r\n        }\r\n    }\r\n    operation sub1 (register : LittleEndian) : Unit is Adj+Ctl {\r\n        let n = Length(register!);\r\n        for(i in 0..n-1){\r\n            X(register![i]);\r\n        }\r\n        add1(register);\r\n        for(i in 0..n-1){\r\n            X(register![i]);\r\n        }\r\n    }\r\n}\r\n\r\nnamespace Solution {\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Library;\r\n    open Microsoft.Quantum.MachineLearning;\r\n    operation Solve () : (ControlledRotation[], (Double[], Double)) {\r\n        let controlledRotation = ControlledRotation((0, new Int[0]), PauliY, 0);\r\n        return ([controlledRotation], ([0.1998177394499976], -0.497854069347608));\r\n    }\r\n}\r\n//function to test\r\nnamespace Func{\r\n    \r\n}\r\nnamespace Test {\r\n\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Diagnostics;\r\n    open Microsoft.Quantum.Convert;\r\n    open Func;\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.MachineLearning;\r\n    //erase when you submit.\r\n    @EntryPoint()\r\n    operation RunQsharp () : Unit\r\n    {   \r\n        Message(\"owari\");\r\n    }\r\n}\r\n\r\nnamespace Training{\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Diagnostics;\r\n    open Microsoft.Quantum.Convert;\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.MachineLearning;\r\n    function ClassifierStructure() : ControlledRotation[] {\r\n        return [\r\n            ControlledRotation((0, new Int[0]), PauliX, 4),\r\n            ControlledRotation((0, new Int[0]), PauliZ, 5),\r\n            ControlledRotation((1, new Int[0]), PauliX, 6),\r\n            ControlledRotation((1, new Int[0]), PauliZ, 7),\r\n            ControlledRotation((0, [1]), PauliX, 0),\r\n            ControlledRotation((1, [0]), PauliX, 1),\r\n            ControlledRotation((1, new Int[0]), PauliZ, 2),\r\n            ControlledRotation((1, new Int[0]), PauliX, 3)\r\n        ];\r\n    }\r\n}"
}