{
    "id": 83810863,
    "contestId": 1356,
    "creationTimeSeconds": 1592197749,
    "relativeTimeSeconds": 220149,
    "problem": {
        "contestId": 1356,
        "index": "D1",
        "name": "Quantum Classification - 1",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1356,
        "members": [
            {
                "handle": "zekigurbuz"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1591977600
    },
    "programmingLanguage": "Q#",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 3481600,
    "source": "// https://docs.microsoft.com/en-us/quantum/\n// https://cnot.io/quantum_computing/\n// https://algassert.com/quirk#circuit={%22cols%22:[]}\n// https://lapastillaroja.net/wp-content/uploads/2016/09/Intro_to_QC_Vol_1_Loceff.pdf\n// https://github.com/desireevl/awesome-quantum-computing\n// https://www.youtube.com/watch?v=F_Riqjdh2oM\n// https://homepages.cwi.nl/~rdewolf/qcnotes.pdf\n// https://github.com/microsoft/Quantum\n// file:/Users/zeki/Downloads/qsharp-quick-reference.pdf\n\nnamespace Solution {\n\n//    open Microsoft.Quantum.Arrays;\n//    open Microsoft.Quantum.Measurement;\n//    open Microsoft.Quantum.Intrinsic;\n//    open Microsoft.Quantum.Canon;\n//    open Microsoft.Quantum.Convert;\n//    open Microsoft.Quantum.Math;\n//    open Microsoft.Quantum.Arithmetic;\n    open Microsoft.Quantum.MachineLearning;\n\n//    operation Set (desired: Result, q1: Qubit) : Unit {\n//        let current = M(q1);\n//        if (desired != current) { X(q1); }\n//    }\n\n    function gen_rotations() : ControlledRotation[] {\n        return [\n            ControlledRotation((0, new Int[0]), PauliX, 0),\n            ControlledRotation((0, new Int[0]), PauliZ, 1),\n            ControlledRotation((1, new Int[0]), PauliX, 2),\n            ControlledRotation((1, new Int[0]), PauliZ, 3),\n            ControlledRotation((0, [1]), PauliX, 4),\n            ControlledRotation((1, [0]), PauliX, 5),\n            ControlledRotation((1, new Int[0]), PauliZ, 6)\n        ];\n    }\n\n    function gen_parameters() : Double[] {\n        return [0.060057,3.00522,1.25083,0.63527,0.25771,0.49881,3.32186,4.56396];\n    }\n\n    function gen_bias() : Double {\n        return 0.1215;\n    }\n\n    operation Solve () : (ControlledRotation[], (Double[], Double)) {\n        return (gen_rotations(), (gen_parameters(), gen_bias()));\n    }\n}"
}