{
    "id": 83770196,
    "contestId": 1356,
    "creationTimeSeconds": 1592155270,
    "relativeTimeSeconds": 177670,
    "problem": {
        "contestId": 1356,
        "index": "D1",
        "name": "Quantum Classification - 1",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1356,
        "members": [
            {
                "handle": "ruippeixotog"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1591977600
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 6963200,
    "source": "namespace Solution {\n    open Microsoft.Quantum.Convert;\n    open Microsoft.Quantum.Intrinsic;\n    open Microsoft.Quantum.Canon;\n    open Microsoft.Quantum.Arrays;\n    open Microsoft.Quantum.MachineLearning;\n    open Microsoft.Quantum.Math;\n\n    function DefaultSchedule(samples : Double[][]) : SamplingSchedule {\n        return SamplingSchedule([0..Length(samples) - 1]);\n    }\n\n    function ClassifierStructure() : ControlledRotation[] {\n        return [\n            ControlledRotation((0, new Int[0]), PauliX, 0),\n            ControlledRotation((0, new Int[0]), PauliZ, 1)\n        ];\n    }\n\n    operation TrainModel(\n        trainingVectors : Double[][],\n        trainingLabels : Int[],\n        initialParameters : Double[][]\n    ) : (Double[], Double) {\n        let samples = Mapped(\n            LabeledSample,\n            Zip(trainingVectors, trainingLabels)\n        );\n        let (optimizedModel, nMisses) = TrainSequentialClassifier(\n            Mapped(\n                SequentialModel(ClassifierStructure(), _, 0.0),\n                initialParameters\n            ),\n            samples,\n            DefaultTrainingOptions()\n                w/ LearningRate <- 0.1\n                w/ MinibatchSize <- 15\n                w/ Tolerance <- 0.005\n                w/ NMeasurements <- 10000\n                w/ MaxEpochs <- 16\n                w/ VerboseMessage <- Message,\n            DefaultSchedule(trainingVectors),\n            DefaultSchedule(trainingVectors)\n        );\n        return (optimizedModel::Parameters, optimizedModel::Bias);\n    }\n\n    operation ValidateModel(\n        validationVectors : Double[][],\n        validationLabels : Int[],\n        parameters : Double[],\n        bias : Double\n    ) : Double {\n        let samples = Mapped(\n            LabeledSample,\n            Zip(validationVectors, validationLabels)\n        );\n        let tolerance = 0.005;\n        let nMeasurements = 10000;\n        let results = ValidateSequentialClassifier(\n            SequentialModel(ClassifierStructure(), parameters, bias),\n            samples,\n            tolerance,\n            nMeasurements,\n            DefaultSchedule(validationVectors)\n        );\n        return IntAsDouble(results::NMisclassifications) / IntAsDouble(Length(samples));\n    }\n\n    operation Solve() : (ControlledRotation[], (Double[], Double)) {\n        return (\n            ClassifierStructure(),\n            ([2.0114147733377417, 3.520153553245436], 0.0014500000000000068)\n        );\n    }\n}\n"
}