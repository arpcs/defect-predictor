{
    "id": 84292376,
    "contestId": 1356,
    "creationTimeSeconds": 1592544018,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1356,
        "index": "D1",
        "name": "Quantum Classification - 1",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1356,
        "members": [
            {
                "handle": "zekigurbuz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1591977600
    },
    "programmingLanguage": "Q#",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 6963200,
    "source": "// https://docs.microsoft.com/en-us/quantum/\r\n// https://cnot.io/quantum_computing/\r\n// https://algassert.com/quirk#circuit={%22cols%22:[]}\r\n// https://lapastillaroja.net/wp-content/uploads/2016/09/Intro_to_QC_Vol_1_Loceff.pdf\r\n// https://github.com/desireevl/awesome-quantum-computing\r\n// https://www.youtube.com/watch?v=F_Riqjdh2oM\r\n// https://homepages.cwi.nl/~rdewolf/qcnotes.pdf\r\n// https://github.com/microsoft/Quantum\r\n// file:/Users/zeki/Downloads/qsharp-quick-reference.pdf\r\n\r\nnamespace Solution {\r\n\r\n    open Microsoft.Quantum.Arrays;\r\n    open Microsoft.Quantum.Measurement;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Convert;\r\n    open Microsoft.Quantum.Math;\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.MachineLearning;\r\n\r\n    operation Set (desired: Result, q1: Qubit) : Unit {\r\n        let current = M(q1);\r\n        if (desired != current) { X(q1); }\r\n    }\r\n\r\n    function gen_rotations() : ControlledRotation[] {\r\n        return [\r\n            ControlledRotation((0, new Int[0]), PauliY, 0)\r\n        ];\r\n    }\r\n\r\n    function gen_parameters() : Double[] {\r\n        return [-185.4591724902147];\r\n    }\r\n\r\n    function gen_bias() : Double {\r\n        return 0.01399800746;\r\n    }\r\n\r\n    // @EntryPoint()\r\n    // operation begin() : Unit {\r\n    //     let x = Solve();\r\n    //     Message(\"done\");\r\n    // }\r\n\r\n    operation Solve () : (ControlledRotation[], (Double[], Double)) {\r\n        return (gen_rotations(), (gen_parameters(), gen_bias()));\r\n    }\r\n}"
}