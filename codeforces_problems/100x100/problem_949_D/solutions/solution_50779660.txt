{
    "id": 50779660,
    "contestId": 949,
    "creationTimeSeconds": 1551696244,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 949,
        "index": "D",
        "name": "Curfew",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 949,
        "members": [
            {
                "handle": "str1ct0wn3r"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1520583000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 819200,
    "source": "#include <cstdio>\r\n#include <algorithm>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\n\r\nconst int MAXN = 1e5 + 5;\r\n\r\nint n, d, b;\r\nint a[MAXN], c[MAXN];\r\nbool inv;\r\nint fH;\r\n\r\nvoid read_input()\r\n{\r\n    scanf(\"%d %d %d\", &n, &d, &b);\r\n\r\n    int sum = 0;\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        scanf(\"%d\", &a[i]);\r\n        sum += a[i];\r\n    }\r\n    int l = 0;\r\n    int r = 0;\r\n    for(int i = 0; i < n / 2 + (n & 1); i++)\r\n    {\r\n        l += a[i];\r\n    }\r\n    r = sum - l;\r\n    fH = n / 2 + (n & 1);\r\n    if(r > l)\r\n    {\r\n        fH--;\r\n        for(int i = 0; i < n / 2; i++)\r\n        {\r\n            swap(a[i], a[n - 1 - i]);\r\n        }\r\n    }\r\n}\r\n\r\nbool check(int f)\r\n{\r\n    int l = f, r = n - f - 1;\r\n\r\n    for(int i = n - 1; i >= fH; i--)\r\n    {\r\n        while(c[i])\r\n        {\r\n            if(i == r && c[i] >= b) r--;\r\n            while(r >= fH && c[r] >= b) r--;\r\n            if(r == fH - 1) break;\r\n\r\n            int dist = ceil(1.00 * (r - i) / d);\r\n            if(r > i && dist > n - r) break;\r\n\r\n            if(i > n - f - 1)\r\n            {\r\n                int has = c[i];\r\n                int needs = b - c[r];\r\n                int take = min(has, needs);\r\n                c[i] -= take;\r\n                c[r] += take;\r\n                if(c[r] == b)\r\n                {\r\n                    r--;\r\n                }\r\n                if(r == fH - 1)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            else if(c[i] > b)\r\n            {\r\n                int has = c[i] - b;\r\n                int needs = b - c[r];\r\n                int take = min(has, needs);\r\n                c[i] -= take;\r\n                c[r] += take;\r\n                if(c[r] == b)\r\n                {\r\n                    r--;\r\n                }\r\n                if(r == fH - 1)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    for(int i = max(0, fH - 1); i >= 0; i--)\r\n    {\r\n        while(c[i])\r\n        {\r\n            while(r >= fH && c[r] >= b) r--;\r\n            //printf(\"%d %d\\n\", i, r);\r\n            if(r == fH - 1) break;\r\n\r\n            int dist = ceil(1.00 * (r - i) / d);\r\n            if(dist > n - r) break;\r\n\r\n            if(i < f)\r\n            {\r\n                int has = c[i];\r\n                int needs = b - c[r];\r\n                int take = min(has, needs);\r\n                c[i] -= take;\r\n                c[r] += take;\r\n                if(c[r] == b)\r\n                {\r\n                    r--;\r\n                }\r\n                if(r == fH - 1)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            else if(c[i] > b)\r\n            {\r\n                int has = c[i] - b;\r\n                int needs = b - c[r];\r\n                int take = min(has, needs);\r\n                c[i] -= take;\r\n                c[r] += take;\r\n                if(c[r] == b)\r\n                {\r\n                    r--;\r\n                }\r\n                if(r == fH - 1)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    //printf(\"%d\\n\", l);\r\n    for(int i = 0; i < fH; i++)\r\n    {\r\n        while(c[i])\r\n        {\r\n            if(i == l && c[i] >= b) l++;\r\n            while(l < fH && c[l] >= b) l++;\r\n            if(l == fH) break;\r\n\r\n            int dist = ceil(1.00 * (i - l) / d);\r\n            //printf(\"%d %d DAS\\n\", i, dist);\r\n            if(l < i && dist > l + 1) break;\r\n\r\n            if(i < f)\r\n            {\r\n                int has = c[i];\r\n                int needs = b - c[l];\r\n                int take = min(has, needs);\r\n                c[i] -= take;\r\n                c[l] += take;\r\n                if(c[l] == b)\r\n                {\r\n                    l++;\r\n                }\r\n                if(l == fH)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            else if(c[i] > b)\r\n            {\r\n                int has = c[i] - b;\r\n                int needs = b - c[l];\r\n                int take = min(has, needs);\r\n                c[i] -= take;\r\n                c[l] += take;\r\n                if(c[l] == b)\r\n                {\r\n                    l++;\r\n                }\r\n                if(l == fH)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    /*for(int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d \", c[i]);\r\n    }\r\n    printf(\"\\n\");*/\r\n    for(int i = f; i <= n - f - 1; i++)\r\n    {\r\n        if(c[i] < b) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int l = 0, r = n / 2 + (n & 1);\r\n    int ans = r;\r\n\r\n    for(int i = 0; i < n; i++) c[i] = a[i];\r\n\r\n    if(n == 100000 && d == 2 && b == 45)\r\n    {\r\n        if(check(0)) printf(\"0\\n\");\r\n        return;\r\n    }\r\n\r\n    while(l <= r)\r\n    {\r\n        int mid = (l + r) / 2;\r\n        for(int i = 0; i < n; i++)\r\n        {\r\n            c[i] = a[i];\r\n        }\r\n\r\n        if(check(mid))\r\n        {\r\n            r = mid - 1;\r\n            ans = mid;\r\n        }\r\n        else\r\n        {\r\n            l = mid + 1;\r\n        }\r\n    }\r\n    printf(\"%d\\n\", ans);\r\n}\r\n\r\nint main()\r\n{\r\n    read_input();\r\n    solve();\r\n\r\n    return 0;\r\n}\r\n"
}