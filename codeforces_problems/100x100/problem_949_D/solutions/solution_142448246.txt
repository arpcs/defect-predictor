{
    "id": 142448246,
    "contestId": 949,
    "creationTimeSeconds": 1641976080,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 949,
        "index": "D",
        "name": "Curfew",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 949,
        "members": [
            {
                "handle": "max67"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1520583000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 16076800,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nconst int N=1e6+1e3;\r\nint s1[N],s2[N];\r\nint n,m,d;\r\nsigned main()\r\n{\r\n    scanf(\"%lld%lld%lld\",&n,&d,&m);\r\n    for(int i=1;i<=n;i++)scanf(\"%lld\",&s1[i]),s2[i]=s1[i],s1[i]+=s1[i-1];\r\n    for(int i=n;i>=1;i--)s2[i]+=s2[i+1];\r\n    int c1=0,c2=0,t=(n+1)/2;\r\n    for(int i=1;i<=t;i++)c1+=(s1[min(n,i*(d+1))]-c1*m>=m);\r\n    for(int i=n;i>t;i--)c2+=(n*m-s1[max(0ll,n-(n+1-i)*(d+1))]-c2*m>=m);\r\n    printf(\"%lld\\n\",max(t-c1,n-t-c2));\r\n    return 0;\r\n}\r\n/*\r\n\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u5bbf\u7ba1\uff0c\u90a3\u4e48\u6240\u6709\u540c\u5b66\u90fd\u5f80\u5de6\u8dd1\u3002\r\n\u8003\u8651\u4e24\u4e2a\u5bbf\u7ba1\u3002\u5047\u8bbe\u6709\u5de6\u8fb9\u6709 x \u4e2a\u623f\u95f4,\u628a\u524d xb \u4e2a\u5f53\u4f5c\u5de6\u8fb9\u7684\u3002\r\n\u663e\u7136\uff0c\u8d2a\u5fc3\u642c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u53f3\u8fb9\u7684\u7b54\u6848\u3002\r\n\u5373\u6700\u574f\u60c5\u51b5\u5de6\u8fb9\u53ea\u7528\u4e86\u4e00\u534a\u7684\u4efd\u989d\uff0c\u4e14\u662f\u79bb\u7ec8\u70b9\u8fd1\u7684\uff0c\u4e0e\u628a\u53f3\u8fb9\u5f53\u4f5c\u5de6\u8fb9\u7684\u60c5\u51b5\uff08\u6700\u8d2a\u5fc3\u60c5\u51b5\uff09\u76f8\u540c\r\n\u6240\u4ee5\u5999\u554a\uff01\r\n*/"
}