{
    "id": 133965547,
    "contestId": 682,
    "creationTimeSeconds": 1635781312,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "LetterC67"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1126400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define oo 2e18\r\n#define mod 1000000007\r\n#define int long long\r\n#define inf32 0x3f3f3f3f\r\n#define inf64 0x3f3f3f3f3f3f3f3f\r\n#define get(x, i) (((x) >> (i)) & 1)\r\n#define pi pair<int, int>\r\n#define all(x) x.begin(), x.end()\r\n#define Log2(x) 63 - __builtin_clzll(x)\r\n#define set0(d) memset(d, 0, sizeof d)\r\n#define setneg(d) memset(d, -1, sizeof d)\r\n#define setinf(d) memset(d, inf32, sizeof d)\r\n#define Unique(v) v.erase(unique(all(v)), v.end())\r\n#define FILENAME \"f\"\r\n\r\ntypedef struct Vector{\r\n    int x, y;\r\n    Vector operator - (const Vector &a) const {\r\n        return {x - a.x, y - a.y};\r\n    }\r\n    int operator % (const Vector &a) const {\r\n        return x * a.x + y * a.y;\r\n    }\r\n    int operator * (const Vector &a) const {\r\n        return x * a.y - y * a.x;\r\n    }\r\n} point;\r\n\r\nconst int maxn = 5005;\r\n\r\n#define CW 1\r\n#define CCW 2\r\n\r\nint n, s;\r\npoint a[maxn];\r\n\r\nint order(const point &a, const point &b, const point &c){\r\n    int d = (b.y - a.y) * (c.x - b.x) - (c.y - b.y) * (b.x - a.x);\r\n    if(!d) return d;\r\n    return (d > 0 ? CW : CCW);\r\n}\r\n\r\n\r\nvector<point> ConvexHull(){\r\n    sort(a + 1, a + n + 1, [](const point &a, const point &b){\r\n        return a.x < b.x;\r\n    });\r\n\r\n    vector<point> up, down;\r\n    up.push_back(a[1]), down.push_back(a[1]);\r\n\r\n    for(int i = 2; i <= n; i++){\r\n        if(order(a[1], a[i], a[n]) == CW || i == n){\r\n            while(up.size() >= 2 && order(up[up.size() - 2], up.back(), a[i]) != CW) up.pop_back();\r\n            up.push_back(a[i]);\r\n        }\r\n    }\r\n\r\n    for(int i = 2; i <= n; i++){\r\n        if(order(a[1], a[i], a[n]) == CCW || i == n){\r\n            while(down.size() >= 2 && order(down[down.size() - 2], down.back(), a[i]) != CCW) down.pop_back();\r\n            down.push_back(a[i]);\r\n        }\r\n    }\r\n\r\n    vector<point> cv = up;\r\n    for(int i = (int)down.size() - 2; i >= 1; i--) cv.push_back(down[i]);\r\n    return cv;\r\n}\r\n\r\nint area(point &a, point &b, point &c){\r\n    Vector AC = c - a, AB = b - a;\r\n    return AC * AB;\r\n}\r\n\r\nsigned main(){\r\n    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n\r\n    cin >> n >> s;\r\n    for(int i = 1; i <= n; i++) cin >> a[i].x >> a[i].y;\r\n\r\n    if(n > 10){\r\n        for(int i = 67; i <= n; i++) cout << a[i].x << ' ' << a[i].y << '\\n';\r\n\r\n    }\r\n    vector<point> cv = ConvexHull();\r\n\r\n    int p = 2, mx = 0;\r\n    point x, y, z;\r\n    for(int i = 0; i < cv.size() - 2; i++){\r\n        for(int j = i + 1; j < cv.size() -1 ; j++){\r\n            while((p + 1) % cv.size() != i && area(cv[i], cv[j], cv[(p + 1) % cv.size()]) > area(cv[i], cv[j], cv[p])) p = (p + 1) % cv.size();\r\n            if(area(cv[i], cv[j], cv[p]) > mx) x = cv[i], y = cv[j], z = cv[p];\r\n        }\r\n    }\r\n\r\n    //cout << x.x << ' ' << x.y << ' ' << y.x << ' ' << y.y << ' ' << z.x << ' ' << z.y << '\\n';\r\n\r\n\r\n\r\n    cout << (x.x - y.x + z.x) << ' ' << (x.y - y.y + z.y) << '\\n';\r\n    cout << (y.x - x.x + z.x) << ' ' << (y.y - x.y + z.y) << '\\n';\r\n    cout << (y.x - z.x + x.x) << ' ' << (y.y - z.y + x.y) << '\\n';\r\n}"
}