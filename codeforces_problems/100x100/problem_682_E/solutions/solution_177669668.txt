{
    "id": 177669668,
    "contestId": 682,
    "creationTimeSeconds": 1666540825,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "IvanovAl"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nstruct point {\r\n    long long x, y;\r\n};\r\n\r\n//bool comp(point A, point B) {\r\n//    return A.x < B.x;\r\n//}\r\n\r\nbool B_r_OA(point O, point A, point B) {\r\n    return (B.x - O.x) * (A.y - O.y) > (B.y - O.y) * (A.x - O.x);\r\n}\r\n\r\ndouble dlina(point A, point B) {\r\n    return sqrt((A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y));\r\n}\r\n\r\ndouble square(point O, point A, point B) {\r\n    double a = dlina(O, A), b = dlina(A, B), c = dlina(B, O);\r\n    double p = (a + b + c) / 2;\r\n    return sqrt(p*(p-a)*(p-b)*(p-c));\r\n}\r\n\r\n\r\nint main() {\r\n    vector<point> mnvo;\r\n    point O = { unsigned int(-1), 0 }, p1 = {0,0}, p2 = { 0,0 }, p3 = { 0,0 };\r\n    long long n, a, b, it1, it2, size, s;\r\n    cin >> n >> s;\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> a >> b;\r\n        mnvo.push_back({a, b});\r\n        if (a < O.x) {\r\n            O = { a, b };\r\n        }\r\n    }\r\n    sort(mnvo.begin(), mnvo.end(), [O](point A, point B) {return (B.x - O.x) * (A.y - O.y) < (B.y - O.y) * (A.x - O.x); });\r\n\r\n    /*for (auto i : mnvo) {\r\n        cout << i.x << \" \" << i.y << endl;\r\n    }*/\r\n\r\n    int cur = 0;\r\n\r\n    while (cur < mnvo.size() - 2) {\r\n        if (B_r_OA(mnvo[cur], mnvo[cur + 1], mnvo[cur + 2])) {\r\n            while (cur >= 0 and B_r_OA(mnvo[cur], mnvo[cur + 1], mnvo[cur + 2])) {\r\n                mnvo.erase(mnvo.begin() + cur + 1);\r\n                cur--;\r\n            }\r\n        }\r\n        else {\r\n            cur++;\r\n        }\r\n    }\r\n\r\n    /*for (auto i : mnvo) {\r\n        cout << i.x << \" \" << i.y << endl;\r\n    }*/\r\n    double maxs = 0;\r\n    size = mnvo.size();\r\n    for (int i = 0; i < size; i++) {\r\n        it1 = i + 1;\r\n        it2 = i + 2;\r\n        while ((it2 % size) != i) {\r\n            //cout << i << \" \" << it1 << \" \" << it2 << endl;\r\n            if (square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]) > maxs) {\r\n                maxs = square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]);\r\n                p1 = mnvo[i];\r\n                p2 = mnvo[it1 % size];\r\n                p3 = mnvo[it2 % size];\r\n            }\r\n            while (square(mnvo[i], mnvo[it1 % size], mnvo[(it2 + 1) % size]) > square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]) and it2 % size != i) {\r\n                it2++;\r\n                if (square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]) > maxs) {\r\n                    maxs = square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]);\r\n                    p1 = mnvo[i];\r\n                    p2 = mnvo[it1 % size];\r\n                    p3 = mnvo[it2 % size];\r\n                }\r\n            }\r\n            if (square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]) > maxs) {\r\n                maxs = square(mnvo[i], mnvo[it1 % size], mnvo[it2 % size]);\r\n                p1 = mnvo[i];\r\n                p2 = mnvo[it1 % size];\r\n                p3 = mnvo[it2 % size];\r\n            }\r\n            it1++;\r\n            if (it1 == it2)\r\n                it2++;\r\n        }\r\n    }\r\n\r\n    long long sumx = p1.x + p2.x + p3.x, sumy = p1.y + p2.y + p3.y;\r\n\r\n   /* cout << square(mnvo[0], mnvo[1 % size], mnvo[2 % size])  << \" \" << mnvo.size() << endl;\r\n    cout << p1.x << \" \" << p1.y << \" \" << p2.x << \" \" << p2.y << \" \" << p3.x << \" \" << p3.y << endl;\r\n    cout << mnvo[0].x << \" \" << mnvo[0].y << \" \" << mnvo[1 % size].x << \" \" << mnvo[1 % size].y << \" \" << mnvo[2 % size].x << \" \" << mnvo[2 % size].y << endl;*/\r\n\r\n\r\n    cout << sumx - 2 * p1.x << \" \" << sumy - 2 * p1.y << endl;\r\n    cout << sumx - 2 * p2.x << \" \" << sumy - 2 * p2.y << endl;\r\n    cout << sumx - 2 * p3.x << \" \" << sumy - 2 * p3.y << endl;\r\n\r\n    return 0;\r\n}\r\n    "
}