{
    "id": 79636534,
    "contestId": 682,
    "creationTimeSeconds": 1589103166,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "qq17770027225"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 5427200,
    "source": "#include<bits/stdc++.h>\r\n#define pi 2*acos(0.0)\r\n#define double long long \r\nusing namespace std;\r\nstruct Point {double x,y;Point(){}Point(double a,double b){x=a,y=b;}}p[50005],st[50005];\r\ntypedef Point Vector;\r\nconst double eps=1e-10;\r\nVector operator+(Vector A,Vector B) {return Vector(A.x+B.x,A.y+B.y);}//\u5411\u91cf+\u5411\u91cf=\u5411\u91cf\uff0c\u5411\u91cf+\u70b9=\u70b9 \r\nVector operator-(Vector A,Vector B) {return Vector(A.x-B.x,A.y-B.y);}//\u70b9-\u70b9=\u5411\u91cf\r\nVector operator*(Vector A,double p) {return Vector(A.x*p,A.y*p);}//\u5411\u91cf*\u6570=\u5411\u91cf\r\nVector operator/(Vector A,double p) {return Vector(A.x/p,A.y/p);}//\u5411\u91cf/\u6570=\u5411\u91cf \r\nbool operator<(const Point &a,const Point &b) {return a.x<b.x||(a.x==b.x&&a.y<b.y);}\r\nint dcmp(double x){if(fabs(x)<eps) return 0;else return x<0?-1:1;}//\u5224\u76f8\u7b49\r\nbool operator==(const Point &a,const Point &b) {return dcmp(a.x-b.x)==0&&dcmp(a.y-b.y)==0;}\r\ndouble Dot(Vector A,Vector B) {return A.x*B.x+A.y*B.y;}//\u70b9\u79ef a.b=|a||b|cos\r\ndouble Length(Vector A) {return sqrt(Dot(A,A));}//\u5411\u91cf\u957f\u5ea6 \r\ndouble Angle(Vector A,Vector B) {return acos(Dot(A,B)/Length(A)/Length(B));}//\u5939\u89d2\r\ndouble Cross(Vector A,Vector B) {return A.x*B.y-A.y*B.x;}//\u53c9\u79efaxb=|a||b|sin\r\ndouble Area2(Point A,Point B,Point C) {return fabs(Cross(B-A,C-A));}\r\nVector Rotate(Vector A,double rad){return Vector(A.x*cos(rad)-A.y*sin(rad),A.x*sin(rad)+A.y*cos(rad));}\r\n//\u76f4\u7ebf\u4ea4\u70b9\uff0c\u70b9\u5230\u76f4\u7ebf\u8ddd\u79bb\uff0c\u70b9\u5230\u7ebf\u6bb5\u8ddd\u79bb ,\u70b9\u5728\u76f4\u7ebf\u4e0a\u6295\u5f71\u70b9,\u7ebf\u6bb5\u76f8\u4ea4\u5224\u5b9a ,\u70b9\u662f\u5426\u5728\u7ebf\u6bb5\u4e0a\r\nstruct Line\r\n{\r\n\tPoint p,v;\r\n\tdouble ang;\r\n\tfriend bool operator<(Line x,Line y)\r\n\t{\r\n\t\treturn fabs(x.ang-y.ang)<eps?Cross(x.v-x.p,y.v-x.p)>eps:x.ang-y.ang<eps;\r\n\t} \r\n}a[1000],q[1000];\r\nPoint Jd(Line x,Line y) \r\n{\r\n\tPoint P=x.p,Q=y.p;\r\n\tVector v=x.p-x.v,w=y.p-y.v;\r\n\tVector u=P-Q;\r\n\tdouble t=Cross(w,u)/Cross(v,w);\r\n\treturn P+v*t;\r\n}\r\ndouble Dtl(Point P,Point A,Point B) {Vector v1=B-A,v2=P-A;return fabs(Cross(v1,v2))/Length(v1);}\r\ndouble Dts(Point P,Point A,Point B) {\r\n\tif(A==B)return Length(P-A);Vector v1=B-A,v2=P-A,v3=P-B;if(dcmp(Dot(v1,v2)<0)) return Length(v2);\r\n\telse if(dcmp(Dot(v1,v3))>0) return Length(v3);else return fabs(Cross(v1,v2))/Length(v1);}\r\nPoint Gjp(Point P,Point A,Point B) {Vector v=B-A;return A+v*(Dot(v,P-A))/(Dot(v,v));}\r\nbool Spi(Point a1,Point a2,Point b1,Point b2){\r\n\tdouble c1=Cross(a2-a1,b1-a1),c2=Cross(a2-a1,b2-a1),c3=Cross(b2-b1,a1-b1),c4=Cross(b2-b1,a2-a1);\r\n\treturn dcmp(c1)*dcmp(c2)<0&&dcmp(c3)*dcmp(c4)<0;}\r\nbool Onseg(Point p,Point a1,Point a2){return dcmp(Cross(a1-p,a2-p))==0&&dcmp(Dot(a1-p,a2-p))<0;}\r\n//\u591a\u8fb9\u5f62\u6709\u5411\u9762\u79ef,\u70b9\u5728\u591a\u8fb9\u5f62\u5185\u5224\u5b9a \r\ndouble Parea(Point *p,int n) {\r\n\tdouble area=0;p[n+1]=p[1];for(int i=1;i<=n;i++) area+=Cross(p[i],p[i+1]);return area/2.0;} \r\n//\u76f4\u7ebf\u548c\u5706\u7684\u4ea4\u70b9 \r\nbool cmp(Point a,Point b)\r\n{\r\n\tif(fabs(a.x-b.x)>eps) return a.x+eps<b.x;\r\n\telse return a.y+eps<b.y;\r\n}\r\nbool cmp1(Point a,Point b)//\u9006\u65f6\u9488\u6392\u5e8f \r\n{\r\n\tdouble tmp=Cross(a-p[1],b-p[1]);\r\n\treturn tmp>0||(tmp==0&&Length(a)<Length(b));\r\n}\r\n/*struct Circle{\r\n\tPoint o;double r;\r\n\tCircle(){}\r\n\tCircle(Point _o,double _r){o=_o,r=_r;}\r\n\tfriend vector<Point> operator &(const Circle &c1,const Circle &c2)//\u5706\u4ea4\u70b9 \r\n\t{\r\n\t\tdouble d=Length(c1.o-c2.o);\r\n\t\tif(d>c1.r+c2.r+eps||d<fabs(c1.r-c2.r)-eps) return vector<Point>();\r\n\t\tdouble dt=(c1.r*c1.r-c2.r*c2.r)/d,d1=(d+dt)/2.0;\r\n\t\tPoint dir=(c2.o-c1.o)/d,pcrs=c1.o+dir*d1;\r\n\t\tdt=sqrt(max(0.0,c1.r*c1.r-d1*d1));swap(dir.x,dir.y),dir.x=-dir.x;\r\n\t\treturn vector<Point> {pcrs+dir*dt,pcrs-dir*dt}; \r\n\t} \r\n};*/\r\nbool pd(Line i,Line j,Line k)\r\n{\r\n\tPoint P=Jd(i,j);\r\n\treturn Cross(k.v-k.p,P-k.p)<eps;\r\n}\r\nint ConvexHull(Point *p,Point *st,int n)//\u6c42\u51f8\u5305 \r\n{\r\n\tsort(p,p+n,cmp);int m=0;\r\n\tfor(int i=0;i<n;i++) {while(m>1&&Cross(st[m-1]-st[m-2],p[i]-st[m-2])<=0) --m;st[m++]=p[i];}\r\n\tint k=m;\r\n\tfor(int i=n-2;i>=0;i--) {while(m>k&&Cross(st[m-1]-st[m-2],p[i]-st[m-2])<=0) --m;st[m++]=p[i];}\r\n\tif(n>1) --m;return m;\r\n} \r\nint Half_Plane(Line *a,int la,Point *b)//\u534a\u5e73\u9762\u4ea4 \r\n{\r\n\tsort(a+1,a+1+la);\r\n\tint cnt=0;\r\n\tfor(int i=1;i<=la;i++) \r\n\t{\r\n\t\tif(fabs(a[i].ang-a[i-1].ang)>eps) cnt++;\r\n\t\ta[cnt]=a[i];\r\n\t}\r\n\tint head=1,tail=0;\r\n\tq[++tail]=a[1],q[++tail]=a[2];\r\n\tfor(int i=3;i<=cnt;i++)\r\n\t{\r\n\t\twhile(head<tail&&pd(q[tail-1],q[tail],a[i])) tail--;\r\n\t\twhile(head<tail&&pd(q[head+1],q[head],a[i])) head++;\r\n\t\tq[++tail]=a[i];\r\n\t}\r\n\twhile(head<tail&&pd(q[tail-1],q[tail],q[head])) tail--;\r\n\twhile(head<tail&&pd(q[head+1],q[head],q[tail])) head++;\r\n\tq[tail+1]=q[head];cnt=0;\r\n\tfor(int i=head;i<=tail;i++) b[++cnt]=Jd(q[i],q[i+1]);\r\n\treturn cnt;\r\n}\r\nvoid print(Point X)\r\n{\r\n\tcout<<X.x<<\" \"<<X.y<<\"\\n\"; \r\n}\r\n#define ll long long \r\nstruct qw\r\n{\r\n\tll a,b,c;\r\n\tqw(){}\r\n\tqw(ll x,ll y,ll z) {a=x;b=y;c=z;} \r\n};\r\nll n,s; \r\nint main()\r\n{\r\n\tcin>>n>>s;\r\n\tfor(int i=0;i<n;i++) cin>>p[i].x>>p[i].y;\r\n\tn=ConvexHull(p,st,n);\r\n\t\r\n\tdouble mx=0;qw ans;\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\tint k=i+1;\r\n\t\tfor(int j=i+2;j<n;j++)\r\n\t\t{\r\n\t\t\tif(Area2(st[i],st[j],st[k])<Area2(st[i],st[j],st[(k+1)%n])) k=(k+1)%n;\r\n\t\t\tif(Area2(st[i],st[j],st[k])>mx) mx=Area2(st[i],st[j],st[k]),ans=qw(i,j,k);\r\n\t\t}\r\n\t}\r\n\t\r\n\tPoint X=st[ans.a]-(st[ans.b]-st[ans.c]),Y=st[ans.a]+(st[ans.b]-st[ans.c]);\r\n\tPoint O=st[ans.b]-(st[ans.a]-st[ans.c]),P=st[ans.b]+(st[ans.a]-st[ans.c]);\r\n\tif(O==X||O==Y) O=P;\r\n\tprint(X);\r\n\tprint(Y);\r\n\tprint(O);\r\n} "
}