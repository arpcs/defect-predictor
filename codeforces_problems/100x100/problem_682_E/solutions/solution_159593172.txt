{
    "id": 159593172,
    "contestId": 682,
    "creationTimeSeconds": 1654484723,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "Quuns"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 24166400,
    "source": "#include<bits/stdc++.h>\r\n#define rep(i,a,b) for(int i=(a);i<=(b);++i)\r\n#define dep(i,a,b) for(int i=(a);i>=(b);--i)\r\n#define lowbit(x) (x&(-x))\r\n#define debug(x) cout<<#x<<\" :\"<<x<<endl\r\n#define debug1(x) cout<<#x<<\" :\"<<x<<\" \"\r\nusing namespace std;\r\ntypedef unsigned long long ull;\r\ntypedef long long ll;\r\ntypedef double db;\r\nconst int N=1e6+20;\r\nconst int MAX=10000007;\r\nconst ll mod = 1e9+7;\r\ninline ll read() {\r\n    char c=getchar();ll x=0,f=1;\r\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\r\n    while(c>='0'&&c<='9'){x=x*10+c-'0',c=getchar();}\r\n    return x*f;\r\n}\r\n/*\r\n\r\n\u65cb\u8f6c\u5361\u58f3 + \u51f8\u5305 + \u6700\u5927\u9762\u79ef\u4e09\u89d2\u5f62 + \u6784\u9020\r\n\r\n*/\r\nll q[N];\r\nll n,m;\r\nll a[N],b[N];\r\n#define eps 1e-8\r\nconst db pi=acos(-1);\r\ninline int sgn(db x){//\u7b26\u53f7\u51fd\u6570 0\u8868\u793a0\uff0c1\u8868\u793a\u6b63\u6570\uff0c-1\u8868\u793a\u8d1f\u6570 \r\n    if(fabs(x)<eps)return 0;\r\n    return x>0?1:-1;\r\n}\r\ninline int dcmp(db x,db y){//\u6bd4\u8f83x\u548cy\u7684\u5927\u5c0f,0:\u76f8\u7b49\uff0c1\u4e3a\u5927\u4e8e\uff0c-1\u4e3a\u5c0f\u4e8e \r\n    if(fabs(x-y)<eps)return 0;\r\n    else return x<y?-1:1;\r\n}\r\nstruct Point{\r\n    db x,y;\r\n    Point():x(),y(){}\r\n    Point(db _x,db _y):x(_x),y(_y){}\r\n    void input(){\r\n        scanf(\"%lf %lf\",&x,&y);\r\n    }\r\n}p[5001]; \r\nstruct Line{\r\n    Point s,e;\r\n    Line():s(),e(){}\r\n    Line(Point _s,Point _e):s(_s),e(_e){}\r\n};\r\n\r\n\r\ntypedef Point Vector;\r\ntypedef Line Sement;\r\ninline Vector operator+ (Vector A,Vector B){return Vector(A.x+B.x,A.y+B.y);} \r\ninline Vector operator- (Vector A,Vector B){return Vector(A.x-B.x,A.y-B.y);} \r\ninline Vector operator* (Vector A,db k){return Vector(A.x*k,A.y*k);}\r\ninline Vector operator/ (Vector A,db k){return Vector(A.x/k,A.y/k);}\r\ninline bool operator== (Point A,Point B){return dcmp(A.x,B.x)==0&&dcmp(A.y,B.y)==0;}\r\ninline bool operator< (Point A,Point B){return A.x<B.x||(A.x==B.x&&A.y<B.y);}\r\n\r\n\r\ninline double angle(Vector v) { return atan2(v.y, v.x); }\r\ninline db msqrt(db x){return (x<0?0:sqrt(x));}\r\ninline db det(Vector a,Vector b){return a.x*b.y-a.y*b.x;}// \u8fd4\u56de\u4e24\u5411\u91cf\u7684\u53c9\u79ef \r\ninline db Cross(Vector a,Vector b){return a.x*b.y-a.y*b.x;}// \u8fd4\u56de\u4e24\u5411\u91cf\u7684\u53c9\u79ef \r\ninline db dot(Vector a,Vector b){return a.x*b.x+a.y*b.y;}//\u8fd4\u56de\u4e24\u5411\u91cf\u7684\u70b9\u79ef \r\ninline db Length(Vector A){return msqrt(dot(A,A));};//\u8fd4\u56de\u5411\u91cf\u7684\u957f\u5ea6\r\ninline db Length2(Vector A){return dot(A,A);}//\u8fd4\u56de\u5411\u91cf\u957f\u5ea6\u7684\u5e73\u65b9 \r\ninline Vector Unit(Vector x) { return x / Length(x); }  //\u5355\u4f4d\u5411\u91cf\r\n\r\ninline Vector Rotate(Vector A, db rad)//\u9006\u65f6\u9488\u65cb\u8f6crad\u00b0\r\n{\r\n    return Vector(A.x * cos(rad) - A.y*sin(rad), A.x*sin(rad) + A.y * cos(rad));\r\n}\r\ninline db cross3p(Point a,Point b,Point c){//\u4e09\u4e2a\u4f20\u53c2\u70b9 \u8fd4\u56deab->ac\u7684\u53c9\u79ef \r\n    return fabs(det(b-a,c-a));\r\n}\r\n// \u70b9\u96c6\u51f8\u5305\r\n// \u5982\u679c\u5e0c\u671b\u5728\u51f8\u5305\u7684\u8fb9\u4e0a\u6709\u8f93\u5165\u70b9\uff0c\u628a\u4e24\u4e2a <= \u6539\u6210 <\r\n// \u6ce8\u610f\uff1a\u8f93\u5165\u70b9\u96c6\u4f1a\u88ab\u4fee\u6539 O(nlogn)\r\nvector<Point> ConvexHull(vector<Point> ps) /// \u5df2\u9a8c\u8bc1\r\n{\r\n    int n=ps.size();if(n<=1)return ps;\r\n    sort(ps.begin(),ps.end());\r\n    vector<Point>qs(n*2);int k=0;\r\n    for(int i=0;i<n;qs[k++]=ps[i++])\r\n        while(k>1&&cross3p(qs[k-2],qs[k-1],ps[i])<0)--k;\r\n    for(int i=n-2,t=k;i>=0;qs[k++]=ps[i--])\r\n        while(k>t&&cross3p(qs[k-2],qs[k-1],ps[i])<0)--k;\r\n    qs.resize(k-1);\r\n    return qs;\r\n}\r\ninline db Dist_toLine(Point p,Line v){//\u8fd4\u56de\u70b9\u5230\u76f4\u7ebf\u7684\u8ddd\u79bb \r\n    Vector v1,v2;\r\n    v1=v.e-v.s;v2=p-v.s;\r\n    return fabs(det(v1,v2)/Length(v1));\r\n}\r\nint main(){\r\n    n = read();m = read();\r\n    vector<Point>ve;\r\n    rep(i,1,n){\r\n        p[i].input();\r\n        ve.push_back(p[i]);\r\n    }\r\n\r\n    db max_s = 0;\r\n    int ind[30];\r\n    vector<Point>kep = ConvexHull(ve);\r\n    int sz = kep.size();\r\n    int r = 1;\r\n\r\n    for(int i=0;i<sz-2;++i){\r\n        r = (i+1)%sz;\r\n        for(int j = (i+1)%sz;j<sz-1&&r != i;++j){//\u679a\u4e3e\u51f8\u5305\u4e0a\u7684\u4e24\u6761\u7ebf\u6bb5[ij]\r\n            //\u9762\u79ef \u5361\u58f3\r\n            while(dcmp(cross3p(kep[i],kep[(j)%sz],kep[r]),cross3p(kep[i],kep[(j)%sz],kep[(r+1)%sz]))<0)r=(r+1)%sz;\r\n            if(r == i || r == j)continue;//\u8fb9\u754c\r\n            db s = cross3p(kep[i],kep[(j)%sz],kep[r]);\r\n            if(dcmp(s,max_s)>0){\r\n                max_s = s;\r\n                ind[1] = i;\r\n                ind[2] = (j)%sz;\r\n                ind[3] = r;\r\n            }\r\n        }\r\n    }\r\n    Point a,b,c;\r\n    // a = kep[ind[1]]-kep[ind[3]]+kep[ind[2]];\r\n    // b = kep[ind[2]]-kep[ind[1]]+kep[ind[3]];\r\n    // c = kep[ind[3]]-kep[ind[2]]+kep[ind[1]];\r\n    a = (kep[ind[1]]-kep[ind[3]])+(kep[ind[2]]-kep[ind[3]])+(kep[ind[3]]);\r\n    b = (kep[ind[1]]-kep[ind[3]])+(kep[ind[3]]-kep[ind[2]])+(kep[ind[3]]);\r\n    c = (kep[ind[3]]-kep[ind[1]])+(kep[ind[2]]-kep[ind[3]])+(kep[ind[3]]);\r\n    printf(\"%.f %.f\\n\",a.x,a.y);\r\n    printf(\"%.f %.f\\n\",b.x,b.y);\r\n    printf(\"%.f %.f\\n\",c.x,c.y); \r\n\r\n}"
}