{
    "id": 206602691,
    "contestId": 682,
    "creationTimeSeconds": 1684565824,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "Licykoc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing i64 = long long;\r\n\r\nstruct point {\r\n  i64 x, y;\r\n  point(i64 x = 0, i64 y = 0) : x(x), y(y) {}\r\n\r\n  friend point operator - (const auto &lhs, const auto &rhs) {\r\n    return point(lhs.x - rhs.x, lhs.y - rhs.y);\r\n  }\r\n\r\n  friend i64 operator * (const auto &lhs, const auto &rhs) {\r\n    return lhs.x * rhs.y - lhs.y * rhs.x;\r\n  }\r\n};\r\n\r\nsigned main() {\r\n  std::istream &fin = std::cin;\r\n  std::ostream &fout = std::cout;\r\n\r\n  int n;\r\n  i64 S;\r\n  fin >> n >> S;\r\n\r\n  std::vector<point> a(n);\r\n\r\n  for (int i = 0; i < n; ++i) {\r\n    fin >> a[i].x >> a[i].y;\r\n  }\r\n\r\n  if (n == 3) {\r\n    for (int i = 0; i < n; ++i) {\r\n      fout << a[i].x << ' ' << a[i].y << '\\n';\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  auto area = [&](point a, point b, point c) {\r\n    return std::abs((b - a) * (c - a));\r\n  };\r\n\r\n  std::array<int, 3> b = {0, 1, 2};\r\n  i64 max = area(a[b[0]], a[b[1]], a[b[2]]);\r\n\r\n  for (int t = 0; t < n; ++t) {\r\n    for (int i = 0; i < n; ++i) {\r\n      if (area(a[i], a[b[1]], a[b[2]]) > max) {\r\n        b[0] = i;\r\n        max = area(a[b[0]], a[b[1]], a[b[2]]);\r\n      }\r\n\r\n      if (area(a[b[0]], a[i], a[b[2]]) > max) {\r\n        b[1] = i;\r\n        max = area(a[b[0]], a[b[1]], a[b[2]]);\r\n      }\r\n\r\n      if (area(a[b[0]], a[b[1]], a[i]) > max) {\r\n        b[2] = i;\r\n        max = area(a[b[0]], a[b[1]], a[b[2]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  auto [A, B] = a[b[0]];\r\n  auto [C, D] = a[b[1]];\r\n  auto [E, F] = a[b[2]];\r\n\r\n  fout <<  A + C - E << ' ' <<  B + D - F << '\\n';\r\n  fout <<  A - C + E << ' ' <<  B - D + F << '\\n';\r\n  fout << -A + C + E << ' ' << -B + D + F << '\\n';\r\n}"
}