{
    "id": 89390718,
    "contestId": 682,
    "creationTimeSeconds": 1596967540,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "rainbow_no_hydrogen"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 10137600,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <cmath>\r\n#include <iomanip>\r\nusing namespace std;\r\n\r\nconst int MAX = 2e5 + 5;\r\nconst double eps = 1e-10;\r\n\r\n\r\nstruct Point{\r\n    double  x, y;\r\n    Point(){}\r\n    Point(double x, double y):x(x),y(y) {}\r\n    bool operator < (const Point& b) const {return x < b.x || (x == b.x && y < b.y);}\r\n    Point operator - (const Point& b) const { return Point(x - b.x, y - b.y); }\r\n    Point operator + (const Point& b) const { return Point(x + b.x, y + b.y); }\r\n    Point operator / (double p) { return Point(x / p, y / p); }\r\n};\r\ndouble cross(Point a, Point b) {return a.x * b.y - a.y * b.x; }\r\n\r\nPoint p[MAX];\r\nPoint ch[MAX];\r\nlong long n, s;\r\nint andrew(Point p[], Point ch[],int n) {\r\n    sort(p, p + n);\r\n    int top = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        while((top > 1) && (cross(ch[top] - ch[top - 1], p[i] - ch[top]) <= 0)) --top;\r\n        ch[++top] = p[i];\r\n    }\r\n    int tmp = top;\r\n    for(int i = n - 2; i >= 0; --i) {\r\n        while((top > tmp) && (cross(ch[top] - ch[top - 1], p[i] - ch[top]) <= 0)) --top;\r\n        ch[++top] = p[i];\r\n    }\r\n    if(n > 1) top--;\r\n    return top;\r\n}\r\n\r\nint p1, p2, p3;\r\nvoid  Rotating_calipers(int n, Point p[]) {\r\n\tdouble ans = -1; ++n;\r\n\tint j = 2;\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\twhile (cross(p[i] - p[i + 1], p[i] - p[j]) < cross(p[i] - p[i + 1], p[i] - p[(j + 1) % n])) {\r\n\t\t\tj = (j + 1) % n;\r\n\t\t}\r\n\t\tif (fabs(cross(p[i] - p[i + 1], p[i] - p[j])) > ans) {\r\n            ans = fabs(cross(p[i] - p[i + 1], p[i] - p[j]));\r\n\t\t\tp1 = i, p2 = i + 1, p3 = j;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\nint p1, p2, p3;\r\nvoid Rotating_calipers(int n, Point p[]) {\r\n    double ans = -1;++n;\r\n\tfor (int i = 0; i < n; ++i) {\r\n\t\tint k = 2;\r\n\t\tfor (int j = i + 1; j < n; ++j) {\r\n\t\t\twhile (cross(p[i] - p[j], p[i] - p[k]) < cross(p[i] - p[j], p[i] - p[(k + 1) % n])) {\r\n\t\t\t\tk = (k + 1) % n;\r\n\t\t\t}\r\n\t\t\tif (fabs(cross(p[i] - p[j], p[i] - p[k])) > ans) {\r\n\t\t\t\tans = fabs(cross(p[i] - p[j], p[i] - p[k]));\r\n\t\t\t\tp1 = i, p2 = j, p3 = k;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n*/\r\nint main() {\r\n    scanf(\"%lld %lld\", &n, &s);\r\n\tfor(int i = 0; i < n; ++i)\r\n        scanf(\"%lf %lf\", &p[i].x, &p[i].y);\r\n\tint top = andrew(p, ch, n);\r\n\tRotating_calipers(top, ch);\r\n\r\n\tPoint mid = (ch[p1] + ch[p2]) / 2;\r\n\tPoint dr = mid - ch[p3];//\ufffd\ufffd\u03bb\ufffd\ufffd\r\n\tPoint ans = ch[p3] + dr + dr;\r\n\tprintf(\"%.0lf %.0lf\\n\", ans.x, ans.y);\r\n\r\n\tmid = (ch[p3] + ch[p2]) / 2;\r\n\tdr = mid - ch[p1];\r\n\tans = ch[p1] + dr + dr;\r\n\tprintf(\"%.0lf %.0lf\\n\", ans.x, ans.y);\r\n\r\n\tmid = (ch[p3] + ch[p1]) / 2;\r\n\tdr = mid - ch[p2];\r\n\tans = ch[p2] + dr + dr;\r\n\tprintf(\"%.0lf %.0lf\\n\", ans.x, ans.y);\r\n}\r\n"
}