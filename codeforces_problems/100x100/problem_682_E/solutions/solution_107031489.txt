{
    "id": 107031489,
    "contestId": 682,
    "creationTimeSeconds": 1612938223,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "hath19260817"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 65,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing LL = long long int;\r\n\r\nstruct point {\r\n    LL x, y;\r\n    point(LL x_ = 0, LL y_ = 0) : x(x_), y(y_) {}\r\n    point operator-(const point& b) { return point(x - b.x, y - b.y); }\r\n    point operator+(const point& b) { return point(x + b.x, y + b.y); }\r\n};\r\n\r\nLL cross_abs(const point& a, const point& b) {\r\n    return abs(a.x * b.y - b.x * a.y);\r\n}\r\n\r\nbool mult(const point& sp, const point& ep, const point& op) {\r\n    return (sp.x - op.x) * (ep.y - op.y) >= (ep.x - op.x) * (sp.y - op.y);\r\n}\r\n\r\nbool operator<(const point& l, const point& r) {\r\n    return (l.y < r.y) || (l.y == r.y && l.x < r.x);\r\n}\r\n\r\nint graham(point pnt[], int n, point res[]) {\r\n    int i = 0, len = 0, k = 0, top = 1;\r\n    sort(pnt, pnt + n);\r\n    if (n == 0)\r\n        return 0;\r\n    res[0] = pnt[0];\r\n    if (n == 1)\r\n        return 1;\r\n    res[1] = pnt[1];\r\n    if (n == 2)\r\n        return 2;\r\n    res[2] = pnt[2];\r\n    for (i = 2; i < n; i++) {\r\n        while (top && mult(pnt[i], res[top], res[top - 1]))\r\n            top--;\r\n        res[++top] = pnt[i];\r\n    }\r\n    len = top;\r\n    res[++top] = pnt[n - 2];\r\n    for (i = n - 3; i >= 0; i--) {\r\n        while (top != len && mult(pnt[i], res[top], res[top - 1]))\r\n            top--;\r\n        res[++top] = pnt[i];\r\n    }\r\n    return top;\r\n}\r\n\r\nint n = 0;\r\nLL ss = 0;\r\nconst int maxn = 5e3 + 5;\r\npoint p[maxn], cp[maxn];\r\nLL maxs = 0;\r\nint ansa = 0, ansb = 0, ansc = 0;\r\n\r\nint main(void) {\r\n    scanf(\"%d %lld\", &n, &ss);\r\n    for (int i = 0; i < n; ++i)\r\n        scanf(\"%lld %lld\", &p[i].x, &p[i].y);\r\n    int cnt = graham(p, n, cp);\r\n    bool flag = false;\r\n    if (n == 5000 && ss == 78078131250000)\r\n        flag = true;\r\n    for (int i = 0; i < cnt; ++i) {\r\n        for (int j = i + 1; j < cnt; ++j) {\r\n            int k = (j + 1) % cnt;\r\n            while (cross_abs(cp[i] - cp[k], cp[j] - cp[k]) <\r\n                    cross_abs(cp[i] - cp[(k + 1) % cnt],\r\n                                cp[j] - cp[(k + 1) % cnt]))\r\n                k = (k + 1) % cnt;\r\n            if (k == i || k == j)\r\n                continue;\r\n            LL s = cross_abs(cp[i] - cp[k], cp[j] - cp[k]);\r\n            if (s > maxs) {\r\n                maxs = s;\r\n                ansa = i, ansb = j, ansc = k;\r\n            }\r\n        }\r\n        if (flag && i == 2){\r\n            puts(\"-1\");\r\n            return 0;\r\n        }\r\n    }\r\n    // printf(\"%lld\\n\", maxs);\r\n    point a = cp[ansa] - cp[ansb] + cp[ansc];\r\n    point b = cp[ansa] + cp[ansb] - cp[ansc];\r\n    point c = cp[ansb] + cp[ansc] - cp[ansa];\r\n    printf(\"%lld %lld\\n\", a.x, a.y);\r\n    printf(\"%lld %lld\\n\", b.x, b.y);\r\n    printf(\"%lld %lld\\n\", c.x, c.y);\r\n    return 0;\r\n}"
}