{
    "id": 199759722,
    "contestId": 682,
    "creationTimeSeconds": 1680125517,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "E",
        "name": "Alyona and Triangles",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "liuyubobobo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n\ntemplate<typename T>\nclass ConvexHull {\npublic:\n    vector<vector<T>> solve(vector<vector<T>>& points) {\n\n        if(points.size() <= 3) return points;\n\n        int leftmost = 0;\n        for(int i = 1; i < points.size(); i ++){\n            if(points[i][0] < points[leftmost][0] ||\n               (points[i][0] == points[leftmost][0] && points[i][1] < points[leftmost][1]))\n                leftmost = i;\n        }\n\n        swap(points[0], points[leftmost]);\n\n        vector<T> start = points[0];\n        for(vector<T>& p: points) p[0] -= start[0], p[1] -= start[1];\n\n        sort(points.begin() + 1, points.end(), [](const vector<T>& p1, const vector<T>& p2){\n            T det = p1[0] * (p2[1] - p1[1]) - (p2[0] - p1[0]) * p1[1];\n            if(det == 0) return p1[0] * p1[0] + p1[1] * p1[1] < p2[0] * p2[0] + p2[1] * p2[1];\n            return det > 0;\n        });\n\n        for(int i = points.size() - 2; i >= 0; i --)\n            if(cross_value(points[0], points.back(), points[i]) != 0){\n                for(int l = i + 1, r = points.size() - 1; l < r; l ++, r --)\n                    swap(points[l], points[r]);\n                break;\n            }\n\n        vector<vector<T>> res = {points[0], points[1]};\n        for(int i = 2; i < points.size(); i ++){\n            while(res.size() >= 2 && cross_value(res[res.size() - 2], res.back(), points[i]) < 0)\n                res.pop_back();\n            res.push_back(points[i]);\n        }\n\n        for(vector<T>& p: res) p[0] += start[0], p[1] += start[1];\n\n        return res;\n    }\n\nprivate:\n    T cross_value(const vector<T>& p1, const vector<T>& p2, const vector<T>& p3){\n        //        int a = p2[0] - p1[0], b = p2[1] - p1[1];\n        //        int c = p3[0] - p2[0], d = p3[1] - p2[1];\n        return (p2[0] - p1[0]) * (p3[1] - p2[1]) - (p2[1] - p1[1]) * (p3[0] - p2[0]);\n    }\n};\n\nlong long get_triangle_area_2x(const vector<long long>& a, const vector<long long>& b, const vector<long long>& c){\n\n    long long x1 = a[0], y1 = a[1];\n    long long x2 = b[0], y2 = b[1];\n    long long x3 = c[0], y3 = c[1];\n\n    long long max_dx = max({abs(x1 - x2), abs(x1 - x3), abs(x2 - x3)});\n    long long max_dy = max({abs(y1 - y2), abs(y1 - y3), abs(y2 - y3)});\n\n    long long res = max_dx * max_dy * 2ll;\n    res -= abs(x1 - x2) * abs(y1 - y2);\n    res -= abs(x1 - x3) * abs(y1 - y3);\n    res -= abs(x2 - x3) * abs(y2 - y3);\n    return res;\n}\n\nint main() {\n\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n\n    int n; long long S; cin >> n >> S;\n\n    vector<vector<long long>> points(n, vector<long long>(2));\n    for(int i = 0; i < n; i ++)\n        cin >> points[i][0] >> points[i][1];\n\n    vector<vector<long long>> res = (new ConvexHull<long long>())->solve(points);\n    long long maxS = 0;\n    vector<long long> resa, resb, resc;\n    for(int i = 0; i < res.size(); i ++){\n        vector<long long> a = res[i], b = res[(i + 1) % res.size()];\n        for(const vector<long long>& c: points){\n            if(c == a || c == b) continue;\n            long long curS = get_triangle_area_2x(a, b, c);\n            if(curS > maxS)\n                maxS = curS, resa = a, resb = b, resc = c;\n        }\n    }\n\n    cout << resc[0] - resb[0] + resa[0] << ' ' << resc[1] - resb[1] + resa[1] << '\\n';\n    cout << resa[0] + resb[0] - resc[0] << ' ' << resa[1] + resb[1] - resc[1] << '\\n';\n    cout << resb[0] - resa[0] + resc[0] << ' ' << resb[1] - resa[1] + resc[1] << '\\n';\n\n    return 0;\n}\n"
}