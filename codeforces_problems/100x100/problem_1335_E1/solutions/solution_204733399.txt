{
    "id": 204733399,
    "contestId": 1335,
    "creationTimeSeconds": 1683374298,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "mikeac"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 7782400,
    "source": "import sys\r\nfrom bisect import *\r\nfrom collections import *\r\nfrom functools import *\r\nfrom heapq import *\r\nfrom itertools import *\r\nfrom math import *\r\nfrom random import *\r\nfrom string import *\r\n\r\n# region fastio\r\ninput = lambda: sys.stdin.readline().rstrip()\r\nints = lambda: list(map(int, input().split()))\r\n# endregion fastio\r\n\r\n# MOD = 998244353\r\n# MOD = 10 ** 9 + 7\r\n# DIR = ((-1, 0), (0, 1), (1, 0), (0, -1))\r\n\r\ndef solve() -> None:\r\n    n = int(input())\r\n    arr = ints()\r\n\r\n    # pos = [[] for _ in range(201)]\r\n    pos = defaultdict(list)\r\n    # pres = [[0] * 201 for _ in range(n + 1)]\r\n    pres = [Counter() for _ in range(n + 1)]\r\n    for i, a in enumerate(arr):\r\n        pos[a].append(i)\r\n        for j in range(201):\r\n            # pres[i + 1][j] = pres[i][j] + int(j == a)\r\n            if pres[i][j]:\r\n                pres[i + 1][j] = pres[i][j]\r\n            if j == a:\r\n                pres[i + 1][j] += 1\r\n    \r\n    ans = 1\r\n    for i, a in enumerate(arr):\r\n        if pres[i + 1][a] * 2 > pres[-1][a]: continue\r\n        out = pres[i + 1][a]\r\n        r = pos[a][-out]\r\n        # for j in range(201):\r\n        #     ans = max(ans, out * 2 + pres[r][j] - pres[i + 1][j])\r\n        for k, v in pres[r].items():\r\n            ans = max(ans, out * 2 + v - pres[i + 1][k])\r\n    \r\n    print(ans)\r\n\r\nfor _ in range(int(input())):\r\n    solve()\r\n\r\n# # region interactive\r\n# def printQry(a, b) -> None:\r\n#     sa = str(a)\r\n#     sb = str(b)\r\n#     print(f\"? {sa} {sb}\", flush = True)\r\n\r\n# def printAns(ans) -> None:\r\n#     s = str(ans)\r\n#     print(f\"! {s}\", flush = True)\r\n# # endregion interactive\r\n\r\n# # region dfsconvert\r\n# from types import GeneratorType\r\n# def bootstrap(f, stack=[]):\r\n#     def wrappedfunc(*args, **kwargs):\r\n#         if stack:\r\n#             return f(*args, **kwargs)\r\n#         else:\r\n#             to = f(*args, **kwargs)\r\n#             while True:\r\n#                 if type(to) is GeneratorType:\r\n#                     stack.append(to)\r\n#                     to = next(to)\r\n#                 else:\r\n#                     stack.pop()\r\n#                     if not stack:\r\n#                         break\r\n#                     to = stack[-1].send(to)\r\n#             return to\r\n#     return wrappedfunc\r\n# # endregion dfsconvert"
}