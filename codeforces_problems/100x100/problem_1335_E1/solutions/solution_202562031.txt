{
    "id": 202562031,
    "contestId": 1335,
    "creationTimeSeconds": 1681791329,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "AceKnight7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 5324800,
    "source": "        \r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,&@@@@@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@%@@@%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,@@@@,,,,@@@@@@@@@@@@@@@@@%@@@@@%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@%%@@@@@%@@@@@@%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%%@@@@@%%@@@@@%%%&@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,#@,,*@@@@@@@@@@@@@@@@@%%%@@@@@%@@@@@%%%%&@@@@@@%@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@%%%@@@@@%%@@@@&%%%%%@@%@@@@&@@@@%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@%%%@@@@@%%%@@@@%%%%%%@@%@@@@%@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@%%%@@@@@%%%@@@%%%%%%%@@%@@@@%%@@@%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,@@@@@@@@@@%@@@@@@@@%%%@@@@%@%%%@@@%%%%%%%@&%&%@@&%@@&%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,@@@@@@%@@@%@@@@@@@@%%%%@@@@%%%%%@@%%%%%%%%%%%%%%@@%%@%%%%%@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,@@@@@@%@@@%@@@@@@@@%%%%@@@%%%%%%@@%%%%%%%%%%%%%%&@%%@%%%%%@@@@@@@@&@@@@%@@@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,@@@@@@%@@@%%@@@&@@@%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%@%%%%%%%%&@@&%@@@@@@@@%%&@@@@@%%@@@@%%@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,@@@,@@%%@@@%%@@@%@@@%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%&@@@%&@@@@@@@%%%%@@@@%%%@@@%%%@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,@@@,*@@%%@@%%@@@%%@@%%%%%@@@%%%%%%%%%%%%#%%%%%%%%%%%%%%%%%%%%@@@@%%@@@&@@@#%%%%@@@@%%@@@%%%%@@%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,@,@(,@@@%&@@%%@@@%%@@%%%%%@@@%%%%%%%%%%%%/%%%%%%%%%%%%%%%%%%%%@@@@%%%@@%@@@//%%%%@@@@%%@@%%%%@@%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,(,,,@,,@@%%@@%%%@%%%%@@%%%%%@@@%%%%%%%%%%%///%%%/(%%%%%%%%%%%%%%@@@@@%%%@%@@@&//#%#&@@@%%%%%%%%%@%%%%@@@%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,/,,@@%%@@%%%%%%%%@%%%%%%%@@%%%%#/%%%%%///%%%//(%(%%%%%%%%%%/&@@@@(%%&%%@@@////%/@@@@%%%%%%%%&%%%%@@@%%@@@@%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,@@%%%&%%%%%%%%@%%%%%%%@%%%%%///%%%%///%%%///#(/%%%%%%%///%@@@@/%%%%%@@.     ( .@@%%%%%%%%%%%%%%@%%%@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,@@%%%%%%%%%%%%@%%%%%%%@%#%%#///#%%%/////%#///#//%%%%%#///&@@@@//&%%*@            %%%%%%%%%%%%%%@%%%%%@@%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,#%%%%%%%%%%%%%%%%%%%%%%//#%/////%*%*/////////////%%/%////@@@/@@@@ %(     ,,       %%( #%%%%%%%%%%%%%%%@%%%@%@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%%%///%  (((((((((((, ///////(%//////@@///@@@        ,,       %% //%%%%%%%%%%%%%%%%%%%@@%@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%%/* %((@@@@@./(.@@@@#( /////#//////(////@@@                 #//@/%%%%%%%%%%%%%%%%%%%@@@%@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,%%%%%%%%%%%%%%%%%%%%// ((@@@@@@@@.%@@@@@@(/////////@///#@@#/////@@@        %////@@@/%%%%%%%%%%%%%%%%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,#%%%%%%%%%%%%%%%%%%/%///@@(@@@@@@@@@@@@(@@@/@@@/////@@/@@@@@@////////(@@@@@@@@@@@@@@@%%%%%%%%%%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,%%%,%%,%%%%%%%%%%%%%#////@@@@@@@@@@@&#///////////////#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%//%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,(,,,%,,,%%%%%%%%%%%%%%/@@/@@&//////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@%%%%///%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,*,,,,,%%%%%%#%%%%%%%@@@@@@//////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@/%#%/////%%%%%%&@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,%,%%%%//%%%%%%%@@@@@//////////////////////////&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,%,%%%/////%/%%@%@@@@@(/////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@////%@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,#,%%%,,////////@@@@@@@@////////////////////////%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@(/&@@@/#@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,///////@@@@@@@@////////////////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@//////@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,/////@@@@@@@@@///////////////////////@@@@@@@@@@@@@@@@@@@#@@@@@@@@@@/%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,##////@@@@@@@@@@@@@//////////////////@@@@@@@@@@@@@@@@@(/@@@@@@@@@#(%%@@&%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,(#,,,##,*@@@@@@@@@///////////////////////////////////@@@@@@@@@@@@/%%%%@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,##,,,@@@@@@@&//////////@@@@@@@@@@@@@&//@@@@@@@@@@@@@@@@@@@/%%%%%%@@@@@@&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,,,#%@@@@@@(//////////////@@@@@@@@@@@@@@@@@@@@@@@@@@@@/%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,,,####@@@@@@/////////////////%%#///////@@@@@@@@@@@@///%%%%@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,#,#####@@@@@/////////////////(@@@@@@@@@@@@@@@@(/////%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,*,,#####(//@@@@//////////////@@@@@@@@@@@@@@&////////% %         &@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,           # ###//////@@&///////////@@@@@@@@@@@///////////.% #              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,            ###/////////@/////////@@@@@@@/////////////// %              @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                 , ////////////////////////////////,  ///                /@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,  .                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                       @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                        @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                         @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                 @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                           @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,,,,,                                                                                                 @@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,,,,,                                                                                                          %@@@@@@@@@@@@@@@@@@@@@\r\n//,,,,,,,,,,,,,,,,,,                                                                                                                  *@@@@@@@@@@@@@@@@@\r\n//,                                                                                                                                          .@@@@@@@@@@\r\n//                                                                                                                      \r\n//clear adj and visited vector declared globally after each test case\r\n//check for long long overflow   \r\n//Mod wale question mein last mein if dalo ie. Ans<0 then ans+=mod;\r\n//Incase of close mle change language to c++17 or c++14  \t\t\r\n#include <algorithm>\r\n#include <array>\r\n#include <bitset>\r\n#include <cassert>\r\n#include <chrono>\r\n#include <cmath>\r\n#include <complex>\r\n#include <deque>\r\n#include <forward_list>\r\n#include <fstream>\r\n#include <functional>\r\n#include <iomanip>\r\n#include <ios>\r\n#include <iostream>\r\n#include <limits>\r\n#include <list>\r\n#include <map>\r\n#include <numeric>\r\n#include <queue>\r\n#include <random>\r\n#include <set>\r\n#include <sstream>\r\n#include <stack>\r\n#include <string>\r\n#include <tuple>\r\n#include <type_traits>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#include <utility>\r\n#include <vector>\r\n#include <iomanip>\r\n#include <cstring>\r\n//#include <sys/resource.h>\r\n\r\nusing namespace std;\r\nusing namespace chrono;\r\n//#include \"ext/pb_ds/assoc_container.hpp\"\r\n//#include \"ext/pb_ds/tree_policy.hpp\"\r\n \r\n//using namespace __gnu_pbds;\r\n \r\n//template<class T> \r\n//using ordered_set = tree<T, null_type,less<T>, rb_tree_tag, tree_order_statistics_node_update> ;\r\n \r\n//template<class key, class value, class cmp = std::less<key>>\r\n//using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n// find_by_order(k)  returns iterator to kth element starting from 0;\r\n// order_of_key(k) returns count of elements strictly smaller than k;\r\n \r\n \r\n#pragma GCC optimize (\"O3\")\r\n#pragma GCC optimize(\"Ofast\")\r\n//#pragma GCC target (\"sse4\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n \r\n \r\n \r\n \r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef complex<ld> cd;\r\n \r\ntypedef pair<int, int> pi;\r\ntypedef pair<ll,ll> pl;\r\ntypedef pair<ld,ld> pd;\r\n \r\ntypedef vector<int> vi;\r\ntypedef vector<ld> vd;\r\ntypedef vector<ll> vl;\r\ntypedef vector<pi> vpi;\r\ntypedef vector<pl> vpl;\r\ntypedef vector<cd> vcd;\r\n \r\n \r\n \r\ntemplate<class T> using pq = priority_queue<T>;\r\ntemplate<class T> using pqg = priority_queue<T, vector<T>, greater<T>>;\r\n \r\n#define FOR(i, a, b) for (int i=a; i<(b); i++)\r\n#define F0R(i, a) for (int i=0; i<(a); i++)\r\n#define FORd(i,a,b) for (int i = (b)-1; i >= a; i--)\r\n#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)\r\n#define trav(a,x) for (auto& a : x)\r\n#define uid(a, b) uniform_int_distribution<int>(a, b)(rng)\r\n#define lim numeric_limits\r\nusing uint = unsigned int;\r\nusing ull = unsigned long long;\r\n \r\n#define sz(x) (int)(x).size()\r\n#define mp make_pair\r\n#define pb push_back\r\n#define f first\r\n#define s second\r\n#define lb lower_bound\r\n#define ub upper_bound\r\n#define all(x) x.begin(), x.end()\r\n#define ins insert\r\n#define getunique(v) {sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end());}\r\n#define inf (1ll<<60)\r\n#define debug(x) cerr<< #x <<\" = \"<<x<<\"\\n\"\r\n#define debug2(x,y) cerr<< #x <<\" = \"<<x<<\" , \"<< #y <<\" = \"<<y<<\"\\n\"\r\n//#define int int64_t\r\n\r\n\r\n// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html\r\ntemplate<class Fun> class y_combinator_result {\r\n    Fun fun_;\r\npublic:\r\n    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}\r\n    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }\r\n};\r\ntemplate<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }\r\n \r\n \r\ntemplate<typename A, typename B> ostream& operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }\r\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> ostream& operator<<(ostream &os, const T_container &v) { os << '{'; string sep; for (const T &x : v) os << sep << x, sep = \", \"; return os << '}'; }\r\n\r\ntemplate<class P, class Q = vector<P>, class R = less<P> > ostream& operator << (ostream& out, priority_queue<P, Q, R> const& M){\r\n    static priority_queue<P, Q, R> U;\r\n    U = M;\r\n    out << \"{ \";\r\n    while(!U.empty())\r\n        out << U.top() << \" \", U.pop();\r\n    return (out << \"}\");\r\n}\r\ntemplate<class P> ostream& operator << (ostream& out, queue<P> const& M){\r\n    static queue<P> U;\r\n    U = M;\r\n    out << \"{\"; string sep;\r\n    while(!U.empty()){\r\n        out << sep << U.front(); sep = \", \"; U.pop();\r\n    }\r\n    return (out << \"}\");\r\n}\r\n \r\nvoid dbg_out() { cerr << endl; }\r\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr << ' ' << H; dbg_out(T...); }\r\n \r\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\r\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\r\ntemplate<typename T> using matrix = vector<vector<T> >;\r\ntemplate<typename T> using rubik = vector<vector<vector<T> > >;\r\n \r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\nll myRand(ll B) {\r\n    return (ull)rng() % B;\r\n}\r\n \r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(long double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\n\r\n\r\ntemplate<typename T>\r\nvoid __print(stack<T> s) {int f = 0; cerr << '{'; while (!s.empty()) cerr << (f++ ? \",\" : \"\"), __print(s.top()), s.pop(); cerr << \"}\";}\r\ntemplate<typename T>\r\nvoid __print(queue<T> q) {int f = 0; cerr << '{'; while (!q.empty()) cerr << (f++ ? \",\" : \"\"), __print(q.front()), q.pop(); cerr << \"}\";}\r\n\r\ntemplate<typename T, typename V>\r\nvoid _print_a(T a, V sz) { int i = -1, f = 0; cerr << '['; while (++i < sz) cerr << (f++ ? \",\" : \"\"), __print(a[i]); cerr << \"]\";}\r\ntemplate<typename T, typename V, typename... W>\r\nvoid _print_a(T a, V sz, W... szs) { int i = -1, f = 0; cerr << '['; while (++i < sz) cerr << (f++ ? \",\" : \"\"), _print_a(a[i], szs...); cerr << \"]\";}\r\n\r\n\r\n//**************************************************************************************************\r\n \r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << \", \"; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \", \" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifdef DEBUG\r\n#define dbg(x...) cerr << \"\\e[91m\"<<__func__<<\":\"<<__LINE__<<\" [\" << #x << \"] = [\"; _print(x); cerr << \"\\e[39m\" << endl;\r\n#else\r\n#define dbg(x...)\r\n#endif\r\ntemplate <typename T>\r\nstd::istream& operator >>(std::istream& input, std::pair <T, T> & data)\r\n{\r\n    input >> data.x >> data.y;\r\n    return input;\r\n}\r\ntemplate <typename T>\r\nstd::istream& operator >>(std::istream& input, std::vector<T>& data)\r\n{\r\n    for (T& x : data)\r\n        input >> x;\r\n    return input;\r\n}\r\ntemplate <typename T>\r\nstd::ostream& operator <<(std::ostream& output, const pair <T, T> & data)\r\n{\r\n    output << \"(\" << data.x << \",\" << data.y << \")\";\r\n    return output;\r\n}\r\ntemplate <typename T>\r\nstd::ostream& operator <<(std::ostream& output, const std::vector<T>& data)\r\n{\r\n    for (const T& x : data)\r\n        output << x << \" \";\r\n    return output;\r\n}\r\nstd::ostream& operator <<(std::ostream& output, const __int128 &x)\r\n{\r\n    __int128 n = x;\r\n    if (n == 0) {\r\n        output << \"0\";\r\n        return output;\r\n    }\r\n    if (n < 0) {\r\n        n = -n;\r\n        output << \"-\";\r\n    }\r\n    string s;\r\n    while (n) {\r\n        s += '0' + (n%10);\r\n        n /= 10;\r\n    }\r\n    reverse(all(s));\r\n    cout << s;\r\n    return output;\r\n}\r\n//*******************************************************************************\r\nll __pow(ll x, ll y, int M) {ll res = 1;while(y>0){if(y&1) res = (res*x)%M; y>>=1; x = (x*x)%M;}return res%M;}\r\nll __pow(ll x, ll y) {ll res = 1;while(y>0){if(y&1) res = (res*x); y>>=1; x = (x*x);}return res;}\r\nint mi(int x, int M) {return __pow(x, M-2, M);}\r\nll gcd(ll a, ll b) {if(b==0) return a; return gcd(b, a % b);}\r\nint add(int a, int b, int M) {return (a+b) % M;}\r\nint mul(int a, int b, int M) {return (a*b) % M;}\r\nint sub(int a, int b, int M) {return (a-b+M) % M;}\r\nvoid umax(int &a, int b) {a = max(a, b);}\r\nvoid umin(int &a, int b) {a = min(a, b);}\r\n//************************************************Code starts**********************************\r\n \r\nconst char nl = '\\n';\r\nconst int maxn = 2e5+7;\r\nvi adj[maxn];\r\n \r\n \r\n\r\nvoid solve()\r\n{\r\n\tint n; cin>>n;\r\n\tvi v(n); cin>>v;\r\n\t\r\n\tvector<vector<ll>> pref(28,vector<ll>(n+1,0));\r\n\t\r\n\tmap<ll,ll> mp1;\r\n\t\r\n\tfor(int i=0;i<n;i++)\r\n\t{\r\n\t\tmp1[v[i]]++;\r\n\t}\r\n\t\r\n\tfor(int i=1;i<=26;i++)\r\n\t{\r\n\t\tif(v[0] == i)\r\n\t\t   pref[i][0] = 1;\r\n\t\t\r\n\t\tfor(int j=1;j<n;j++)\r\n\t\t{\r\n\t\t\tif(v[j] == i)\r\n\t\t\t\tpref[i][j] = pref[i][j-1]+1;\r\n\t\t\telse\r\n\t\t\t\tpref[i][j] = pref[i][j-1];\r\n\t\t}\r\n\t}\r\n\t\r\n\tll ans = 1;\r\n\tfor(int x=1;x<=26;x++)\r\n\t{\r\n\t\tfor(int y=1;y<=26;y++)\r\n\t\t{\r\n\t\t\tint i1 = 0,j1 = n-1;\r\n\t\t\tfor(int j=1;j<=mp1[x]/2;j++)\r\n\t\t\t{\r\n\t\t\t\twhile(i1<j1 and v[i1]!=x)\r\n\t\t\t\t\ti1++;\r\n\t\t\t\t\r\n\t\t\t\twhile(j1>i1 and v[j1]!=x)\r\n\t\t\t\t\tj1--;\r\n\t\t\t\t\r\n\t\t\t\tll d1 = 0;\r\n\t\t\t\tif(j1-i1>=1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(j1-1>=0)\r\n\t\t\t\t\td1 = pref[y][j1-1];\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t\t\td1-=pref[y][i1];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tans = max(ans,d1+2*j);\r\n\t\t\t\t\r\n\t\t\t\ti1++;\r\n\t\t\t\tj1--;\r\n\t\t\t\t\r\n\t\t\t\t//_print(i1,j1);\r\n\t\t\t\t\r\n\t\t\t\tif(i1>=j1)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tans = max(ans,mp1[y]);\r\n\t\t}\r\n\t}\r\n\t\r\n\tcout<<ans<<\"\\n\";\r\n \r\n \r\n}\r\nsigned main()\r\n\t{\r\n\t\tstd::ios::sync_with_stdio(false);\r\n\t\tcin.tie(0);\r\n\t\tcin.exceptions(cin.failbit);\r\n        //struct rlimit rl;\r\n        //const rlim_t kStackSize = 60L * 1024L * 1024L;\r\n        //assert(!getrlimit(RLIMIT_STACK, &rl));\r\n        //rl.rlim_cur = kStackSize;\r\n        //assert(!setrlimit(RLIMIT_STACK, &rl));\r\n\t\tint T;\r\n\t\tT=1;\r\n\t\tcin>>T;\r\n\t\t// cin.ignore(); must be there when using getline(cin, s)\r\n        //auto start1 = high_resolution_clock::now();\r\n\t\twhile(T--)\r\n\t\t{\r\n\t\t\tsolve();\r\n\t\t\t\r\n \r\n\t\t}\r\n        \r\n         // auto stop1 = high_resolution_clock::now();\r\n        // auto duration = duration_cast<microseconds>(stop1 - start1);\r\n\r\n          // cerr << \"Time: \" << duration . count() / 1000 << endl;\r\n\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t\t\r\n\t}\r\n \r\n \r\n\t/* stuff you should look for\r\n    * int overflow, array bounds\r\n    * special cases (n=1?), set tle\r\n    * do smth instead of nothing and stay organized\r\n*/"
}