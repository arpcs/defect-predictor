{
    "id": 226576164,
    "contestId": 1335,
    "creationTimeSeconds": 1696418015,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "lui215"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long int\r\n\r\nconst int mod = 1e9 + 7;\r\n\r\nvoid update(map<int, int> &mp, int x)\r\n{\r\n    mp[x]--;\r\n    if (mp[x] == 0)\r\n    {\r\n        mp.erase(x);\r\n    }\r\n    if (x - 1 > 0)\r\n        mp[x - 1]++;\r\n}\r\n\r\nint helper(int x, vector<int> &arr, vector<int> count)\r\n{\r\n    int l = 0, r = arr.size() - 1;\r\n    int left_freq = 0, right_freq = 0;\r\n    map<int, int> mp;\r\n    for (int cnt : count)\r\n        mp[cnt]++;\r\n    int ans = 0;\r\n    while (l < r)\r\n    {\r\n        left_freq += arr[l] == x;\r\n        update(mp, count[arr[l]]);\r\n        count[arr[l]]--;\r\n        while (l < r && left_freq > right_freq)\r\n        {\r\n            right_freq += arr[r] == x;\r\n            update(mp, count[arr[r]]);\r\n            count[arr[r]]--;\r\n            r--;\r\n        }\r\n        if (l >= r)\r\n            break;\r\n        ans = max(ans, 2 * left_freq + (mp.size() > 0 ? mp.rbegin()->first : 0));\r\n        l++;\r\n    }\r\n    return ans;\r\n}\r\n\r\nvoid runCases()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    vector<int> arr(n);\r\n    int max_el = 0;\r\n    set<int> s;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        cin >> arr[i];\r\n        max_el = max(max_el, arr[i]);\r\n        s.insert(arr[i]);\r\n    }\r\n    vector<int> count(max_el + 1);\r\n    int ans = 0;\r\n    for (int x : arr)\r\n    {\r\n        count[x]++;\r\n        ans = max(ans, count[x]);\r\n    }\r\n    for (int x : s)\r\n    {\r\n        ans = max(ans, helper(x, arr, count));\r\n    }\r\n    cout << ans << \"\\n\";\r\n}\r\n\r\nsigned main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int T;\r\n    cin >> T;\r\n    while (T--)\r\n    {\r\n        runCases();\r\n    }\r\n}\r\n"
}