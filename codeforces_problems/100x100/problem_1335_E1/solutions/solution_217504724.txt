{
    "id": 217504724,
    "contestId": 1335,
    "creationTimeSeconds": 1691350292,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "nitro007"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 204800,
    "source": "\ufeff//#define _CRT_DISABLE_PERFCRIT_LOCKS\r\n#pragma warning(disable:4996)\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\n//\u043d\u0435 \u0437\u0430\u0431\u0443\u0434\u044c \u0437\u0430\u043a\u043e\u043c\u0435\u0435\u043d\u0442\u0438\u0442\u044c LOCAL\r\n//#define LOCAL\r\n\r\nint countElementsBetween(const multiset<int>& myset, int a, int b) {\r\n    auto it_low = myset.upper_bound(a);  \r\n    auto it_high = myset.lower_bound(b); \r\n\r\n    return std::distance(it_low, it_high); \r\n}\r\n\r\nint main() {\r\n#ifdef LOCAL\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    ios_base::sync_with_stdio(false); std::cin.tie(0), cout.tie(0);\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        int n;\r\n        cin >> n;\r\n        map<int, multiset<int>> cache;\r\n        for (int i = 0; i < n; i++) {\r\n            int t;\r\n            cin >> t;\r\n            cache[t].insert(i);\r\n        }\r\n        int res = 0;\r\n        for (auto elem : cache)\r\n            res = max(res, (int)elem.second.size());//case where X = 0\r\n\r\n        for (int i=1;i<=26;i++){\r\n            if (cache.count(i)){\r\n                auto it = cache[i].begin();\r\n                auto it2 = cache[i].end();\r\n                it2--; // position of the last\r\n                int cnt = 1;\r\n                while (it != it2)\r\n                { \r\n                    int index = *it;\r\n                    int index_last = *it2;\r\n                    int intern = 0;\r\n                    for (int j = 1; j <= 26; j++) { // among 26 diff\r\n                        if (i != j && cache.count(j)) { // find longest that is \r\n                            multiset<int>& st = cache[j];\r\n                            int els = countElementsBetween(st, index, index_last);\r\n                            intern = max(intern, els);\r\n                        }\r\n                    }\r\n                    res = max(res, 2 * cnt + intern);\r\n                    cnt++;\r\n                    it++;\r\n                    if (it == it2)\r\n                        break;\r\n                    it2--;\r\n                }\r\n            }\r\n        }\r\n        cout << res << endl;\r\n    }\r\n}"
}