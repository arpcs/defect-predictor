{
    "id": 226569379,
    "contestId": 1335,
    "creationTimeSeconds": 1696414315,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "lui215"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 921600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long int\r\n\r\nconst int mod = 1e9 + 7;\r\n\r\nvoid runCases()\r\n{\r\n    int n;\r\n    cin >> n;\r\n    vector<int> arr(n);\r\n    int max_el = 0;\r\n    vector<bool> isPresent(27);\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        cin >> arr[i];\r\n        max_el = max(max_el, arr[i]);\r\n        isPresent[arr[i]] = true;\r\n    }\r\n    int ans = 0;\r\n    vector<vector<int>> left(max_el + 1, vector<int>(n)), right(max_el + 1, vector<int>(n));\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = 1; j <= max_el; j++)\r\n        {\r\n\r\n            if (!isPresent[j])\r\n                continue;\r\n            int curr = arr[i] == j;\r\n            left[j][i] = i > 0 ? left[j][i - 1] + curr : curr;\r\n            ans = max(ans, left[j][i]);\r\n        }\r\n    }\r\n    for (int i = n - 1; i >= 0; i--)\r\n    {\r\n        for (int j = 1; j <= max_el; j++)\r\n        {\r\n            if (!isPresent[j])\r\n                continue;\r\n            int curr = arr[i] == j;\r\n            right[j][i] = i < n - 1 ? right[j][i + 1] + curr : curr;\r\n        }\r\n    }\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = 1; j <= max_el; j++)\r\n        {\r\n            if (!isPresent[j])\r\n                continue;\r\n            int count = left[j][i];\r\n            int lo = i + 2, hi = n - 1;\r\n            int index = -1;\r\n            while (lo <= hi)\r\n            {\r\n                int mid = lo + (hi - lo) / 2;\r\n                if (right[j][mid] == count)\r\n                {\r\n                    lo = mid + 1;\r\n                    index = mid;\r\n                }\r\n                else if (right[j][mid] > count)\r\n                {\r\n                    lo = mid + 1;\r\n                }\r\n                else\r\n                {\r\n                    hi = mid - 1;\r\n                }\r\n            }\r\n            if (index == -1)\r\n                continue;\r\n            int max_in_between = 0;\r\n            for (int k = 1; k <= max_el; k++)\r\n            {\r\n                max_in_between = max(max_in_between, left[k][index - 1] - left[k][i]);\r\n            }\r\n            ans = max(ans, max_in_between + 2 * count);\r\n        }\r\n    }\r\n    cout << ans << \"\\n\";\r\n}\r\n\r\nsigned main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int T;\r\n    cin >> T;\r\n    while (T--)\r\n    {\r\n        runCases();\r\n    }\r\n}\r\n"
}