{
    "id": 232343047,
    "contestId": 1335,
    "creationTimeSeconds": 1699691666,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "surajiyer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 32665600,
    "source": "#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(long double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\n\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\n\r\n#define vi vector <int>\r\n#define vii vector <pair<int,int>>\r\n#define vvi vector <vector<int>>\r\n#define pb push_back\r\n#define mp make_pair\r\n\r\n#define all(a) a.begin(), a.end()\r\n#define allr(a) a.rbegin(), a.rend()\r\n#define rep(a,b,c) for(int a {b}; a<c; ++a)\r\n#define repr(a,b,c) for(int a {b}; a>c; --a)\r\n\r\n#define int int_fast64_t\r\nconst int M = 1e9+7;\r\nconst int M2 = 998244353;\r\nconst int MAX = 1e6;\r\n\r\nint bexp (int a, int b) { int res = 1; while (b) { if (b&1) res = res * a; a = a * a; b>>=1; } return res; }\r\nint mexp (int a, int b, int m) { a%=m; int res = 1; while (b) { if (b&1) res = res * a % m; a = a * a % m; b>>=1; } return res; }\r\nint inv (int a, int m) { return mexp(a,m-2,m); }\r\nint get_hash (string s) { int h = 0; for (char c: s) h = (h*31+(c-'a'+1))%M; return h; }\r\nvector <int> rabin_karp (string s, string t) { int n = s.length(), m = t.length(); long long p = 1; for (int i = 0; i < m - 1; i++) p = (p * 31) % M; vector<int> pos; long long ht = get_hash(t); long long hs = get_hash(s.substr(0, m)); if (hs == ht) pos.push_back(0); for (int l = 1, r = m; r < n; l++, r++) { int del = ((s[l - 1] - 'a' + 1) * p) % M; int add = s[r] - 'a' + 1; hs = ((hs - del + M) * 31 + add) % M; if (hs == ht) pos.push_back(l); } return pos; }\r\nvector <int> soe (MAX);\r\nvoid make_soe () { for (int i = 2; i <= MAX; i++) soe[i] = 1; for (int i = 2; i * i <= MAX; i++) { if (soe[i] == 0) continue; for (int j = i * i; j <= MAX; j += i) soe[j] = 0; } }\r\nvector <int> spf (MAX);\r\nvoid make_spf () { for (int i = 2; i <= MAX; i++) spf[i] = i; for (int i = 2; i * i <= MAX; i++) { if (spf[i] != i) continue; for (int j = i * i; j <= MAX; j += i) if (spf[j] == j) spf[j] = i; } }\r\nvector <int> fact (MAX);\r\nvector <int> modinv (MAX);\r\nvoid make_fact() { fact[0] = 1; modinv[0] = 1; for (int i = 1; i <= MAX; i++) { fact[i] = (fact[i - 1] * i) % M; modinv[i] = inv(fact[i], M); } }\r\nint ncr (int n, int r) { if (r > n) return 0; int nr = fact[n]; int invdr = (modinv[r] * modinv[n - r]) % M; return (nr * invdr) % M; }\r\nint ncrdirect (int n, int r) { int res = 1; for (int i = 1; i <= min(r, n - r); i++) res = (res * (n - i + 1)) / i; return res; }\r\n\r\nvoid solve (int tc) {\r\n\tint n;\r\n\tcin >> n;\r\n\tint arr [n];\r\n\trep (i,0,n) cin >> arr[i];\r\n\tmap<int, int> m;\r\n\tvvi vec (27, vi (n, 0));\r\n\trep (i,0,n) {\r\n\t\tm[arr[i]] += 1;\r\n\t\tvec[arr[i]][i] = 1;\r\n\t}\r\n\trep(i,1,27) {\r\n\t\trep (j,1,n) {\r\n\t\t\tvec[i][j] += vec[i][j - 1];\r\n\t\t}\r\n\t}\r\n\tdebug(vec);\r\n\tint res = 0;\r\n\t// a b a where a == b\r\n\trep (i,1,27) res = max(res, m[i]);\r\n\t// a b a where a != b\r\n\trep (i,1,n) {\r\n\t\trep (j,i,n - 1) {\r\n\t\t\tint mid = 0, sides = 0;\r\n\t\t\t// a b a\r\n\t\t\trep (b,1,27) {\r\n\t\t\t\t// i ... j is range of b\r\n\t\t\t\tmid = max(mid, (vec[b][j] - vec[b][i - 1]));  \r\n\t\t\t}\r\n\t\t\trep (a,1,27) {\r\n\t\t\t\t// 0 ... i - 1 and j + 1 ... n - 1 are ranges of a\r\n\t\t\t\tsides = max(sides, 2 * min((vec[a][i - 1]), (vec[a][n - 1] - vec[a][j])));\r\n\t\t\t}\r\n\t\t\tres = max(res, mid + sides);\r\n\t\t}\r\n\t}\r\n\tcout << res << \"\\n\";\r\n}\r\n\r\nsigned main () {\r\n\r\n\t// freopen(\"input.txt\", \"r\", stdin);\r\n\t// freopen(\"output.txt\", \"w\", stdout);\r\n\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\r\n\tauto start = chrono::steady_clock::now();\r\n\r\n\tint tc = 1;\r\n\tcin >> tc;\r\n\trep(i,1,tc + 1) solve(i);\r\n\r\n\tauto end = chrono::steady_clock::now(); auto diff = end - start;\r\n\tcerr << \"time taken : \" << chrono::duration <double, milli> (diff).count() << \" ms\" << endl;\r\n\r\n\treturn 0;\r\n}\r\n\r\n// when can the problem be TRUE?\r\n// look for what's there, not what you want to be there\r\n// before implementing your logic, think of counter test cases\r\n// the solution may lie in the constraints\r\n// when you can't iterate over n, you have to iterate over logn - binary search"
}