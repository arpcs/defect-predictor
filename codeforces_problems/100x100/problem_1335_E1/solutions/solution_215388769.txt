{
    "id": 215388769,
    "contestId": 1335,
    "creationTimeSeconds": 1690217359,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1335,
        "index": "E1",
        "name": "Three Blocks Palindrome (easy version)",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1335,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1586788500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 716800,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define el \"\\n\"\n#define all(v) v.begin(),v.end()\n#define sz(v) (int)v.size()\n#define V vector\n#define pb push_back\n#define eb emplace_back\n#define P pair\n#define F first\n#define S second\n#define rep0(i,n) for(int i=0;i<n;++i)\n#define rep(i,s,e) for(int i=s;i<=e;++i)\n#define mems(arr,val) memset(arr,val,sizeof arr)//(int)[0,-1]\n#define fio ios_base::sync_with_stdio(0),cin.tie(0),cout.tie(0);\n\nconst int N = 35;\nvector<int> freq [N];\n\nvoid res(){\n    for(int i=1; i<N-4; i++)\n        freq[i].clear();\n}\nvoid solve() {\n    res();\n    int n,a,ans = 1;\n    cin >> n;\n    for(int i=1; i<N-4; i++)\n        freq[i].push_back(0);\n\n    for(int i=1; i<=n; i++){\n        for(int j=1; j<N-4; j++){\n            freq[j].push_back(freq[j][i-1]);\n        }\n        cin >> a;\n        freq[a][i]++;\n    }\n    for(int i=1; i<N-4; i++){\n        int &d = freq[i][n];\n        ans = max(ans,d);\n        for(int j=0; j<d/2; j++){\n            int low = lower_bound(all(freq[i]), j + 1) - begin(freq[i]);\n            int r = lower_bound(all(freq[i]),d - j) - begin(freq[i]);\n            for(int k=1; k<N-4; k++){\n                int sum = freq[k][r-1] - freq[k][low];\n                ans = max(ans,2*(j+1)+sum);\n            }\n        }\n    }\n    cout << ans << el;\n}\n\nint main() {\n    fio\n    int tc{ 1 };\n    cin >> tc;\n    while (tc--) {\n        solve();\n    }\n    return 0;\n}\n   \t  \t\t  \t  \t \t    \t \t\t \t \t"
}