{
    "id": 10228281,
    "contestId": 521,
    "creationTimeSeconds": 1426002643,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "klamathix"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++0x",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 1228800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nconst int MAXN = 100 * 1000 + 5;\r\n\r\nclass Fraction {\r\n    public:\r\n    ll numerator, denominator;\r\n    Fraction(ll a, ll b) {\r\n        numerator = a;\r\n        denominator = b;\r\n    }\r\n\r\n    bool operator <(const Fraction& other) const {\r\n        return numerator * other.denominator < denominator * other.numerator;\r\n    }\r\n};\r\n\r\nint main() {\r\n    //ifstream cin(\"testD.in\");\r\n    int k, n, m; cin >> k >> n >> m;\r\n\r\n    vector<int> v(k, 0);\r\n    for(int i = 0; i < k; ++i)\r\n        cin >> v[i];\r\n    \r\n    vector<int> t(n, 0);\r\n    vector<int> assign(k, 0);\r\n    vector<int> tassign(k, -1);\r\n\r\n    vector<pair<int, int>> List[MAXN];\r\n    vector<pair<Fraction, int>> events;\r\n\r\n    for(int i = 0; i < n; ++i) {\r\n        int target, value;\r\n        cin >> t[i] >> target >> value;\r\n        target--;\r\n        if(t[i] == 3) \r\n            events.push_back(make_pair(Fraction(value, 1), i));\r\n        else if(t[i] == 2) \r\n            List[target].push_back(make_pair(value, i));\r\n        else if(assign[target] < value) {\r\n            assign[target] = value;\r\n            tassign[target] = i;\r\n        }\r\n    }\r\n    \r\n\r\n    for(int target = 0; target < k; ++target) {\r\n        if(tassign[target] != -1)\r\n            List[target].insert(List[target].begin(), make_pair(assign[target] - v[target], tassign[target]));\r\n        sort(List[target].rbegin(), List[target].rend());\r\n        //cerr << List[target].size() << \" \" << target << \"\\n\";\r\n        ll numerator = v[target], denominator = v[target];\r\n        for(int i = 0; i < (int) List[target].size(); ++i) {\r\n            events.push_back(make_pair(Fraction(numerator + List[target][i].first, denominator), List[target][i].second));\r\n            numerator += List[target][i].first;\r\n            denominator += List[target][i].first;\r\n        }\r\n    }\r\n\r\n    sort(events.rbegin(), events.rend());\r\n        \r\n    vector<int> sol;\r\n    \r\n    //for(auto tmp : events) {\r\n      //  cerr << tmp.first.numerator << \" \" << tmp.first.denominator << \"   \" << tmp.second << \"\\n\";\r\n    //}\r\n\r\n    for(int j = 1; j <= 3; ++j)\r\n        for(int i = 0; i < m; ++i) \r\n            if(t[events[i].second] == j)\r\n                sol.push_back(events[i].second);\r\n\r\n    cout << sol.size() << \"\\n\";\r\n    for(auto tmp : sol)\r\n        cout << tmp + 1 << \" \";\r\n}"
}