{
    "id": 202705547,
    "contestId": 521,
    "creationTimeSeconds": 1681907451,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "Dispensable"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 155,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 9625600,
    "source": "// LUOGU_RID: 108489659\n#include <bits/stdc++.h>\n#define int long long \nusing namespace std;\ninline int read() {\n    int x = 0, f = 1; char ch = getchar();\n    while (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\n    while (isdigit(ch)) { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }\n    return x * f;\n}\nconst int MAXN = 100010;\nint N, M, K, A[MAXN];\nint opt[MAXN], a[MAXN], b[MAXN];\nint cover[MAXN]; double mul[MAXN];\nvector<int>add[MAXN];\nint ans[MAXN], Ans[MAXN];\nsigned main() {\n    N = read(), M = read(), K = read();\n    for (int i = 1; i <= N; i++) A[i] = read();\n    for (int i = 1; i <= M; i++) {\n        opt[i] = read(), a[i] = read(), b[i] = read();\n        if (opt[i] == 1) {\n            if (b[i] > b[cover[a[i]]])\n                cover[a[i]] = i;\n        }\n        if (opt[i] == 2) \n            add[a[i]].emplace_back(i);\n        if (opt[i] == 3)\n            mul[i] = (double)b[i];\n    }\n    for (int i = 1; i <= N; i++) {\n        if (b[cover[i]] > A[i]) {\n            b[cover[i]] = b[cover[i]] - A[i];\n            add[i].emplace_back(cover[i]);\n        }\n    }\n    for (int i = 1; i <= N; i++) {\n        //cerr << \"#\" << i << \"\\n\";\n        sort(add[i].begin(), add[i].end(), [](int x, int y) {\n            return b[x] > b[y]; \n        });\n        for (int j = 0; j < (int)add[i].size(); j++) {\n            //cerr << add[i][j] << \" \" << b[add[i][j]] << \"\\n\";\n            mul[add[i][j]] = (double)(A[i] + b[add[i][j]]) / (double)(A[i]);\n            A[i] += b[add[i][j]];\n        }\n    }\n    for (int i = 1; i <= M; i++) ans[i] = i;\n    sort(ans + 1, ans + M + 1, [](int x, int y) {\n        return mul[x] > mul[y];\n    });\n    int cnt = 0;\n    for (int i = 1; i <= K; i++) {\n        if (mul[ans[i]] >= 1.0) Ans[++cnt] = ans[i];\n        else break;\n    }\n    sort(Ans + 1, Ans + cnt + 1, [](int x, int y) {\n        return opt[x] < opt[y];\n    });\n    printf(\"%lld\\n\", cnt);\n    for (int i = 1; i <= cnt; i++)\n        printf(\"%lld \", Ans[i]);\n}\n"
}