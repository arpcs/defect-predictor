{
    "id": 56787312,
    "contestId": 521,
    "creationTimeSeconds": 1562749183,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 155,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 13721600,
    "source": "#include <bits/stdc++.h>\n#define rep(i, a, b) for (int i = a; i <= b; i++)\n#define drep(i, a, b) for (int i = a; i >= b; i--)\n#define REP(i, a, b) for (int i = a; i < b; i++)\n#define mp make_pair\n#define pb push_back\n#define xx first\n#define yy second\nusing namespace std;\ntypedef pair<int, int> pii;\ntypedef long long ll;\nconst int inf = 0x3f3f3f3f;\nconst ll INF = 0x3f3f3f3f3f3f3f3fll;\n//*****************************************\n\nconst int maxn = 100005;\nconst int mod = 1e9 + 7;\n\nstruct Frac {\n\tll fz, fm;\n\tint id;\n\tFrac() {}\n\tFrac(ll _fz, ll _fm, int _id) :\n\t\tfz(_fz), fm(_fm), id(_id) {}\n\t\n\tbool operator < (const Frac& B) const {\n\t\treturn fz * B.fm  < B.fz * fm;\n\t}\n} frac[maxn];\n\nvector<pii> assign[maxn], add[maxn], multiply[maxn];\n\nint init[maxn];\nint op[maxn];\n\nint main() {\n\tint K, n, m; scanf(\"%d%d%d\", &K, &n, &m);\n\n\trep(i, 1, K) scanf(\"%d\", init + i);\n\t\n\trep(i, 1, n) {\n\t\tint t, I, b; scanf(\"%d%d%d\", &t, &I, &b);\n\t\top[i] = t;\n\t\tif (t == 1) {\n\t\t\tassign[I].pb(mp(b, i));\n\t\t}\n\t\telse if (t == 2) {\n\t\t\tadd[I].pb(mp(b, i));\n\t\t}\n\t\telse {\n\t\t\tmultiply[I].pb(mp(b, i));\n\t\t}\n\t}\n\n\tvector<Frac> V;\n\trep(i, 1, K) {\n\t\tsort(assign[i].begin(), assign[i].end(), greater<pii>());\n\t\tif ((int)assign[i].size() && assign[i][0].xx > init[i]) {\n\t\t\tadd[i].emplace_back(assign[i][0].xx - init[i], assign[i][0].yy);\n\t\t}\n\t\tsort(add[i].begin(), add[i].end(), greater<pii>());\n\t\tsort(multiply[i].begin(), multiply[i].end(), greater<pii>());\n\n\t\tll sum = init[i];\n\t\tfor (pii t : add[i]) {\n\t\t\tint x = t.xx, id = t.yy;\n\t\t\tV.emplace_back(x, sum, id);\n\t\t\tsum += x;\n\t\t}\n\n\t\tfor (pii t : multiply[i]) {\n\t\t\tV.emplace_back(t.xx - 1, 1, t.yy);\n\t\t}\n\t}\n\n\tsort(V.begin(), V.end());\n\n\tint sz = V.size();\n\tint lim = min(m, sz);\n\tprintf(\"%d\\n\", lim);\n\tfor (int i = sz - 1; i >= sz - lim; i--) {\n\t\tif (op[V[i].id] == 1) printf(\"%d \", V[i].id);\n\t}\n\tfor (int i = sz - 1; i >= sz - lim; i--) {\n\t\tif (op[V[i].id] == 2) printf(\"%d \", V[i].id);\n\t}\n\tfor (int i = sz - 1; i >= sz - lim; i--) {\n\t\tif (op[V[i].id] == 3) printf(\"%d \", V[i].id);\n\t}\n\n\treturn 0;\n}\n"
}