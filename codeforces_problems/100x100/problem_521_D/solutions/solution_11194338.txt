{
    "id": 11194338,
    "contestId": 521,
    "creationTimeSeconds": 1432234434,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 521,
        "index": "D",
        "name": "Shop",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2800,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 521,
        "members": [
            {
                "handle": "Radewoosh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1425279600
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 155,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 19148800,
    "source": "#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nstruct ule\n{\n    int typ;\n    int roz;\n    int num;\n    long long licz;\n    long long mia;\n    ule()\n    {\n        licz=num=roz=0;\n        mia=1;\n    }\n};\n\nbool operator < (ule a, ule b)\n{\n    return ((long double) a.licz)/a.mia < ((long double) b.licz)/b.mia;\n}\n\nint k;\nint n, m;\n\nlong long tab[100007];\n\nule dop;\n\nule row[100007];\nvector < ule > mno;\nvector < ule > dod;\n\nint p1;\nint p2;\nlong long p3;\n\nvector < ule > wyn;\n\nbool mniej(ule a, ule b)\n{\n    if (a.typ==b.typ)\n    return a.roz<b.roz;\n    return a.typ<b.typ;\n}\n\nint main()\n{\n    scanf(\"%d%d%d\", &k, &n, &m);\n    for (int i=1; i<=k; i++)\n    {\n        scanf(\"%lld\", &tab[i]);\n    }\n    for (int i=1; i<=n; i++)\n    {\n        scanf(\"%d%d%lld\", &p1, &p2, &p3);\n        dop.typ=p1;\n        dop.roz=i;\n        dop.num=p2;\n        dop.licz=p3;\n        dop.mia=1;\n        if (p1==1)\n        {\n            row[p2]=max(row[p2], dop);\n        }\n        if (p1==2)\n        {\n            dod.push_back(dop);\n        }\n        if (p1==3)\n        {\n            mno.push_back(dop);\n        }\n    }\n    for (int i=1; i<=k; i++)\n    {\n        if (row[i].licz>tab[i])\n        {\n            dop.typ=row[i].typ;\n            dop.roz=row[i].roz;\n            dop.num=row[i].num;\n            dop.licz=row[i].licz-tab[i];\n            dop.mia=1;\n            dod.push_back(dop);\n        }\n    }\n    sort(dod.begin(), dod.end());\n    while(!dod.empty())\n    {\n        dop.typ=dod.back().typ;\n        dop.roz=dod.back().roz;\n        dop.num=dod.back().num;\n        dop.mia=tab[dod.back().num];\n        dop.licz=tab[dod.back().num]+dod.back().licz;\n        mno.push_back(dop);\n        tab[dod.back().num]=dop.licz;\n        dod.pop_back();\n    }\n    sort(mno.begin(), mno.end());\n    reverse(mno.begin(), mno.end());\n    for (int i=0; i<mno.size() && i<m; i++)\n    {\n        wyn.push_back(mno[i]);\n    }\n    sort(wyn.begin(), wyn.end(), mniej);\n    printf(\"%d\\n\", wyn.size());\n    for (int i=0; i<wyn.size(); i++)\n    {\n        printf(\"%d \", wyn[i].roz);\n    }\n    return 0;\n}\n"
}