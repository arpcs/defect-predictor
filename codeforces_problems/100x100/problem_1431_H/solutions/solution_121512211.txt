{
    "id": 121512211,
    "contestId": 1431,
    "creationTimeSeconds": 1625602566,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "yongwhan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1933,
    "memoryConsumedBytes": 62976000,
    "source": "import java.lang.Long.max\r\n\r\nfun main() {\r\n    val (N, M, K) = readLine()!!.split(' ').map { it.toInt() }\r\n    val A = readLine()!!.split(' ').map { it.toLong() }\r\n    val B = readLine()!!.split(' ').map { it.toLong() }\r\n    val C = (0 until N).map { readLine()!!.split(' ').map { it.toLong() } }\r\n\r\n    val AOpen = (0 until N).map { i ->\r\n        A[i] to (0 until B.count { it <= A[i] }).map { j -> C[i][j] }.max()!!\r\n    }\r\n    val BOpen = (0 until M).map { i ->\r\n        B[i] to (0 until A.count { it <= B[i] }).map { j -> C[j][i] }.max()!!\r\n    }\r\n\r\n    val open = (AOpen + BOpen).sortedBy { it.first }\r\n    val ans = (0 until N+M).map { i ->\r\n        var ans = 0L\r\n        var cur = 0L\r\n        var mx = open[0].second + (if (i == 0) K else 0)\r\n        (1 until N+M).forEach {\r\n            val missing = (open[it].first - cur + mx - 1) / mx\r\n            cur += missing * mx\r\n            ans += missing\r\n            var self = open[it].second + (if (i == it) K else 0)\r\n            mx = max(mx, self)\r\n        }\r\n\r\n        ans\r\n    }.min()\r\n    println(ans)\r\n}"
}