{
    "id": 98220993,
    "contestId": 1431,
    "creationTimeSeconds": 1605199979,
    "relativeTimeSeconds": 8279,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Potassium"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1981,
    "memoryConsumedBytes": 64307200,
    "source": "import java.util.*\r\nimport kotlin.collections.ArrayDeque\r\n\r\nfun readLn() = readLine()!!\r\nfun readInt() = readLn().toInt()\r\nfun readInts() = readLn().split(\" \").map{ it.toInt() }\r\nfun readLong() = readLn().toLong()\r\nfun readLongs() = readLn().split(\" \").map{ it.toLong() }\r\n\r\nconst val MOD107 = 1000000007L\r\nconst val MOD998 = 998244353L\r\nfun binpow(b : Long, p : Long, mod : Long) : Long {\r\n    var pw = p\r\n    var cur = b\r\n    var ans = 1L\r\n    while (pw > 0) {\r\n        if ((pw and 1) > 0)\r\n            ans = (ans * cur) % mod\r\n\r\n        cur = (cur * cur) % mod\r\n        pw = pw shr 1\r\n    }\r\n    return ans\r\n}\r\n\r\nclass comp : Comparator<Long> {\r\n    override fun compare(o1: Long?, o2: Long?): Int {\r\n        return o2!!.compareTo(o1!!)\r\n    }\r\n}\r\n\r\nfun main() {\r\n    var (n, m, k) = readLongs()\r\n    var a = readLongs()\r\n    var b = readLongs()\r\n\r\n    var c = Array<Array<Long>>(n.toInt()) { Array<Long>(m.toInt()) { 0 } }\r\n    var mp = TreeMap<Long, Long>()\r\n    for (i in c.indices) {\r\n        var x = readLongs()\r\n        for (j in c[i].indices) {\r\n            c[i][j] = x[j]\r\n            var req = Math.max(a[i], b[j])\r\n            mp.put( req, Math.max(mp.getOrDefault(req, 0), x[j]) )\r\n        }\r\n    }\r\n\r\n    val sz = mp.size\r\n    var x = MutableList(0) { 0L }\r\n    var y = MutableList(0) { 0L }\r\n    for (i in mp.entries) {\r\n        x.add(i.key)\r\n        y.add(i.value)\r\n    }\r\n\r\n    for (i in 1 until sz)\r\n        y[i] = Math.max(y[i], y[i - 1])\r\n\r\n    fun go() : Long {\r\n        var now = 0L\r\n        var used = 0L\r\n        var mov = 0L\r\n\r\n        for (i in 0 until sz - 1) {\r\n            mov = Math.max(mov, y[i])\r\n            var nxt = x[i + 1]\r\n            var dist = nxt - now\r\n\r\n            if (dist <= 0)\r\n                continue\r\n\r\n            var take = (dist + mov - 1) / mov\r\n            used += take\r\n            now += take * mov\r\n        }\r\n\r\n        return used\r\n    }\r\n\r\n    var ans = Long.MAX_VALUE\r\n    for (i in 0 until sz) {\r\n        y[i] += k\r\n        ans = Math.min(ans, go())\r\n        y[i] -= k\r\n    }\r\n\r\n    println(ans)\r\n}"
}