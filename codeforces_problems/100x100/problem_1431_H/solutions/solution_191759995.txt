{
    "id": 191759995,
    "contestId": 1431,
    "creationTimeSeconds": 1675366935,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "KrK"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.7",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 2510,
    "memoryConsumedBytes": 193740800,
    "source": "import java.util.Scanner\r\n\r\nfun Gen(i: Int, j: Int, col: Long, cand: Long, mx: Int, used: Boolean, n: Int, m: Int, k: Int, a: LongArray, b: LongArray, byrow: Array<IntArray>, bycol: Array<IntArray>): Long {\r\n    if (i >= n && j >= m)\r\n        return cand\r\n    else if (i < n && (j >= m || a[i + 1] <= b[j + 1])) {\r\n        var tims: Long = 0\r\n        if (a[i + 1] > col)\r\n            tims = (a[i + 1] - col - 1) / mx + 1\r\n        var res = Gen(i + 1, j, col + mx * tims, cand + tims, maxOf(mx, byrow[i + 1][j]), used, n, m, k, a, b, byrow, bycol)\r\n        if (!used)\r\n            res = minOf(res, Gen(i + 1, j, col + mx * tims, cand + tims, maxOf(mx, byrow[i + 1][j] + k), true, n, m, k, a, b, byrow, bycol))\r\n        return res    \r\n    } else {\r\n        var tims: Long = 0\r\n        if (b[j + 1] > col)\r\n            tims = (b[j + 1] - col - 1) / mx + 1\r\n        var res = Gen(i, j + 1, col + mx * tims, cand + tims, maxOf(mx, bycol[j + 1][i]), used, n, m, k, a, b, byrow, bycol)\r\n        if (!used)\r\n            res = minOf(res, Gen(i, j + 1, col + mx * tims, cand + tims, maxOf(mx, bycol[j + 1][i] + k), true, n, m, k, a, b, byrow, bycol))\r\n        return res\r\n    }\r\n}\r\n\r\nfun main() {\r\n  val input = Scanner(System.`in`)\r\n  val n = input.nextInt()\r\n  val m = input.nextInt()\r\n  val k = input.nextInt()\r\n  val a = LongArray(n + 1)\r\n  val b = LongArray(m + 1)\r\n  val B = Array(n + 1) { IntArray(m + 1) }\r\n  val byrow = Array(n + 1) { IntArray(m + 1) }\r\n  val bycol = Array(m + 1) { IntArray(n + 1) }\r\n  for (i in 1..n)\r\n    a[i] = input.nextLong()\r\n  for (i in 1..m)\r\n    b[i] = input.nextLong()\r\n  for (i in 1..n)\r\n    for (j in 1..m)\r\n        B[i][j] = input.nextInt()\r\n  for (i in 1..n) {\r\n    byrow[i][1] = B[i][1]\r\n    for (j in 2..m)\r\n        byrow[i][j] = maxOf(byrow[i][j - 1], B[i][j])\r\n  }\r\n  for (j in 1..m) {\r\n      bycol[j][1] = B[1][j]\r\n      for (i in 2..n)\r\n        bycol[j][i] = maxOf(bycol[j][i - 1], B[i][j])\r\n  }\r\n  println(Gen(0, 0, 0, 0, 0, false, n, m, k, a, b, byrow, bycol))\r\n}\r\n"
}