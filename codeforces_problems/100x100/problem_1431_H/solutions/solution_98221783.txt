{
    "id": 98221783,
    "contestId": 1431,
    "creationTimeSeconds": 1605200553,
    "relativeTimeSeconds": 8853,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "shilov"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1372,
    "memoryConsumedBytes": 28979200,
    "source": "private class H1 {\r\n    fun solve() {\r\n        val n = nextInt()\r\n        val m = nextInt()\r\n        val k = nextInt()\r\n        val a = nextLongArray(n)\r\n        val b = nextLongArray(m)\r\n        val c = nextLongArray(n, m)\r\n        val unlockedA = BooleanArray(n) { false }\r\n        val unlockedB = BooleanArray(m) { false }\r\n        var i = 0\r\n        var j = 0\r\n        var currentPower = 0L\r\n        val unlock = mutableListOf<Unlock>()\r\n        while (i < n || j < m) {\r\n            if (i == n || (j < m && a[i] > b[j])) {\r\n                unlockedB[j] = true\r\n                for (x in a.indices) {\r\n                    if (unlockedA[x] && c[x][j] > currentPower) {\r\n                         currentPower = c[x][j]\r\n                    }\r\n                }\r\n                unlock.add(Unlock(b[j], currentPower))\r\n                j++\r\n            } else {\r\n                unlockedA[i] = true\r\n                for (x in b.indices) {\r\n                    if (unlockedB[x] && c[i][x] > currentPower) {\r\n                        currentPower = c[i][x]\r\n                    }\r\n                }\r\n                unlock.add(Unlock(a[i], currentPower))\r\n                i++\r\n            }\r\n        }\r\n        var bestAns = 1000000000000000000L\r\n        for (i in 0 until unlock.size) {\r\n            var curAns = 0L\r\n            currentPower = 0L\r\n            var point = 0L\r\n            j = 0\r\n            while (j < unlock.size) {\r\n                while (j < unlock.size && unlock[j].points <= point) {\r\n                    var newPower = unlock[j].newPower\r\n                    if (j == i) {\r\n                        newPower += k\r\n                    }\r\n                    currentPower = Math.max(currentPower, newPower)\r\n                    j++\r\n                }\r\n                if (j != unlock.size) {\r\n                    val next = unlock[j].points\r\n                    val steps = (next - point - 1) / currentPower + 1\r\n                    curAns += steps\r\n                    point += currentPower * steps\r\n                }\r\n            }\r\n            bestAns = Math.min(bestAns, curAns)\r\n        }\r\n        println(bestAns)\r\n    }\r\n\r\n    data class Unlock(val points: Long, val newPower: Long)\r\n\r\n    var tokenBuffer = listOf<String>()\r\n    var bufferPosition = 0\r\n\r\n    private fun checkBuffer() {\r\n        if (bufferPosition == tokenBuffer.size) {\r\n            tokenBuffer = nextLine().split(\" \")\r\n            bufferPosition = 0\r\n        }\r\n    }\r\n\r\n    fun nextLine() = readLine()!!\r\n    fun nextInt(): Int {\r\n        checkBuffer()\r\n        return tokenBuffer[bufferPosition++].toInt()\r\n    }\r\n\r\n    fun nextLong(): Long {\r\n        checkBuffer()\r\n        return tokenBuffer[bufferPosition++].toLong()\r\n    }\r\n\r\n    fun nextDouble(): Double {\r\n        checkBuffer()\r\n        return tokenBuffer[bufferPosition++].toDouble()\r\n    }\r\n\r\n    fun nextToken(): String {\r\n        checkBuffer()\r\n        return tokenBuffer[bufferPosition++]\r\n    }\r\n\r\n    fun nextIntArray(n: Int): IntArray = IntArray(n) { nextInt() }\r\n\r\n    fun nextIntArray(n: Int, m: Int): Array<IntArray> = Array(n) { IntArray(m) { nextInt() } }\r\n\r\n    fun nextDoubleArray(n: Int): DoubleArray = DoubleArray(n) { nextDouble() }\r\n\r\n    fun nextDoubleArray(n: Int, m: Int): Array<DoubleArray> = Array(n) { DoubleArray(m) { nextDouble() } }\r\n\r\n    fun nextLongArray(n: Int): LongArray = LongArray(n) { nextLong() }\r\n\r\n    fun nextLongArray(n: Int, m: Int): Array<LongArray> = Array(n) { LongArray(m) { nextLong() } }\r\n}\r\n\r\nfun main() {\r\n    val reader = H1().solve()\r\n\r\n}\r\n"
}