{
    "id": 98214609,
    "contestId": 1431,
    "creationTimeSeconds": 1605195309,
    "relativeTimeSeconds": 3609,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "Benq"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 904,
    "memoryConsumedBytes": 28979200,
    "source": "/**\r\n * Description: Kotlin tips for dummies\r\n * Source:\r\n    * https://codeforces.com/blog/entry/71089\r\n    * Kotlin Reference\r\n    * https://kotlinlang.org/docs/tutorials/competitive-programming.html\r\n */\r\n\r\n/// episode 1: https://codeforces.com/contest/1170\r\n/// episode 2: https://codeforces.com/contest/1211\r\n/// episode 3: https://codeforces.com/contest/1297\r\n\r\nimport java.io.*\r\nimport java.util.*\r\nimport kotlin.system.exitProcess\r\n\r\n// @JvmField val INPUT = File(\"input.txt\").inputStream()\r\n// @JvmField val OUTPUT = File(\"output.txt\").outputStream()\r\n\r\n/// https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-field/\r\n\r\nclass Kattio: PrintWriter {\r\n    @JvmField val r: BufferedReader\r\n    @JvmField var st = StringTokenizer(\"\")\r\n    constructor(): this(System.`in`,System.out) {}\r\n    constructor(i: InputStream, o: OutputStream): super(o,false) { r = i.bufferedReader() }\r\n    fun rLine(): String? = r.readLine()\r\n\r\n    fun read(): String { // if no input left returns empty string\r\n        while (st.hasMoreTokens().not()) st =\r\n            StringTokenizer(rLine() ?: return \"\", \" \")\r\n        return st.nextToken()\r\n    }\r\n    fun strs(n: Int) = List(n){read()}\r\n    fun ln() = rLine()!!\r\n    fun lns(n: Int) = List(n){ln()}\r\n    fun int() = read().toInt()\r\n    fun ints(n: Int) = List(n){int()}\r\n    fun db() = read().toDouble()\r\n    fun rDbs(n: Int) = List(n){db()}\r\n    fun long() = read().toLong()\r\n    fun longs(n: Int) = List(n){long()}\r\n}\r\n\r\nval io = Kattio()\r\n//const val MOD = 1000000007\r\nconst val MOD = 998244353\r\nconst val INF = (1e18).toLong()\r\nconst val SZ = 1 shl 17\r\n\r\nfun YN(b: Boolean) : String { return if (b) \"YES\" else \"NO\"  }\r\nfun add(a: Int, b: Int) = (a+b) % MOD // from tourist :o\r\nfun sub(a: Int, b: Int) = (a-b+MOD) % MOD\r\nfun mul(a: Int, b: Int) = ((a.toLong()*b)%MOD).toInt()\r\nfun gcd(a: Int, b: Int) : Int = if (b == 0) a else gcd(b,a%b)\r\n\r\nfun example() {\r\n    println(String.format(\"%.8f\", 5.25)) // print to 8 decimals\r\n    val arr2D = Array<IntArray>(5,{IntArray(5,{5})})\r\n    var (x,y) = arrayOf(3,2) // or rInts(2)\r\n    when (x) { //  switch, can be used as expression\r\n        0,1 -> println(\"x <= 1\")\r\n        2 -> println(\"x == 2\") // Note the block\r\n        else -> { println(\"x is neither 1 nor 2\") }\r\n    }\r\n    x = y.also { y = x } // swap x and y\r\n    println(\"${maxOf(x+2,y)}\") // (x,y)=(4,3) -> 4\r\n    val h = HashMap<String,Int>()\r\n    val s = \"ababa\"\r\n    for (i in 0..s.length-2) {\r\n        val w = s.substring(i,i+2)\r\n        val c = h.getOrElse(w,{0})\r\n        h[w] = c+1\r\n    }\r\n    for ((a,b) in h) println(\"${a} ${b}\") // key,value\r\n    val pq = PriorityQueue<Pair<Long,Int>>(){x,y ->\r\n        x.first.compareTo(y.first)} // or compareBy{it.first}\r\n    val A = arrayListOf(Pair(1,3),Pair(3,2),Pair(2,3))\r\n    val B = A.sortedWith(Comparator<Pair<Int,Int>>{x,y ->\r\n        x.first.compareTo(y.first)}) // or sortBy{it.first}\r\n    val list = arrayListOf('a','b','c','d','e')\r\n    println(list.binarySearch('d')) // 3\r\n    list.remove('d')\r\n    val actualInsertPoint = -(list.binarySearch('d')+1) // 3\r\n    list.add(actualInsertPoint, 'd') // [a,b,c,d,e]\r\n    list.removeAt(1) // remove at index -> [a,c,d,e]\r\n}\r\n\r\nfun solve() {\r\n    val (n,m,k) = io.ints(3)\r\n    val a = io.longs(n)\r\n    val b = io.longs(m)\r\n    val c = Array<LongArray>(n) { LongArray(m) { io.long() } }\r\n    val cand = ArrayList<Pair<Long,Long>>()\r\n    cand.add(Pair<Long,Long>(0,c[0][0]))\r\n    var ia = 1\r\n    var ib = 1\r\n    fun add_a() {\r\n        var maxCost = 0L\r\n        for (j in 0..ib-1) {\r\n            maxCost = maxOf(maxCost,c[ia][j])\r\n        }\r\n        cand.add(Pair<Long,Long>(a[ia],maxCost));\r\n        ia ++\r\n    }\r\n    fun add_b() {\r\n        var maxCost = 0L\r\n        for (i in 0..ia-1) {\r\n            maxCost = maxOf(maxCost,c[i][ib])\r\n        }\r\n        cand.add(Pair<Long,Long>(b[ib],maxCost));\r\n        ib ++\r\n    }\r\n    while (ia < n && ib < m) {\r\n        if (a[ia] < b[ib]) {\r\n            add_a()\r\n        } else {\r\n            add_b()\r\n        }\r\n    }\r\n    while (ia < n) add_a()\r\n    while (ib < m) add_b()\r\n    var ans = INF\r\n    fun cdiv(a: Long, b: Long): Long {\r\n        if (a % b != 0L) return a/b+1\r\n        return a/b\r\n    }\r\n    fun tri(ind: Int): Long {\r\n        var cur = 0L\r\n        var bes = 0L\r\n        var ti = 0L\r\n        for (i in 0..cand.size-1) {\r\n            if (cur < cand[i].first) {\r\n                var need = cdiv(cand[i].first-cur,bes)\r\n                ti += need\r\n                cur += need*bes\r\n//                 cur+?*bes >= cand[i].first\r\n            }\r\n            if (i == ind) bes = maxOf(bes,cand[i].second+k)\r\n            else bes = maxOf(bes,cand[i].second)\r\n        }\r\n        return ti\r\n    }\r\n    for (i in 0..cand.size-1) ans = minOf(ans,tri(i))\r\n    println(ans)\r\n//    println(cand)\r\n\r\n\r\n}\r\n\r\nfun main() {\r\n//    val t = io.int()\r\n    val t = 1\r\n    repeat(t) { solve() }\r\n    io.close()\r\n}"
}