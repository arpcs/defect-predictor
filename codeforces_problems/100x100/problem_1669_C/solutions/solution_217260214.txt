{
    "id": 217260214,
    "contestId": 1669,
    "creationTimeSeconds": 1691243604,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1669,
        "index": "C",
        "name": "Odd/Even Increments",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "greedy",
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1669,
        "members": [
            {
                "handle": "AbdulRahmanLuai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1650551700
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 3072000,
    "source": "import math\nimport string\nimport sys\n\n# sys.setrecursionlimit(2**30)\n# sys.stdin = open(\".in\", \"r\")\n# sys.stdout = open(\".out\", \"w\")\ninput = sys.stdin.readline\n\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\n\n\ndef map_int():\n    return map(int, input().split())\n\n\ndef list_int():\n    return list(map(int, input().split()))\n\n\ndef matrixPrint(matrix):\n    for x in matrix:\n        print(*x)\n\n\nfrom collections import defaultdict, deque, Counter\nfrom math import sqrt, gcd, comb, perm, factorial, log, floor\nfrom itertools import permutations\n\n\n# from random import shuffle\n# from heapq import heappop, heappush, heapify\n# Python3 program to find\n# countLattice points on a circle\n\nimport math\n\n\n\n\n\n\ndef solve():\n\n    n = int(input())\n    arr = list_int()\n    for i in range(2, n, 2):\n        if arr[i]%2 != arr[i-2]%2:\n            print('NO')\n            return\n    for i in range(3, n, 2):\n        if arr[i]%2 != arr[i-2]%2:\n            print('NO')\n            return\n    print('YES')\n\n\n\n\n\nif __name__ == '__main__':\n    NumberOfTestcases = int(input())\n    for _ in range(NumberOfTestcases):\n        solve()"
}