{
    "id": 90884238,
    "contestId": 1096,
    "creationTimeSeconds": 1598345798,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 390,
    "memoryConsumedBytes": 39424000,
    "source": "#include <bits/stdc++.h>\n#define MAX_SIZE 524292\n#define MID ((l+r)>>1)\n#define LEFT (index<<1)\n#define RIGHT (index<<1|1)\nusing namespace std;\ntypedef long long ll;\nconst ll mod = 998244353;\n\nstruct segt {\n    ll tree[MAX_SIZE];\n    ll lz[MAX_SIZE];\n    void pushdown(int l, int r, int index) {\n        if (l > r) return;\n        if (lz[index] != 0) {\n            if (l != r) {\n                tree[LEFT] += 1ll * (MID - l + 1) * lz[index];\n                tree[RIGHT] += 1ll * (r - MID) * lz[index];\n                lz[LEFT] += lz[index];\n                lz[RIGHT] += lz[index];\n            }\n            lz[index] = 0;\n        }\n    }\n\n    void update(int start, int end, int l, int r, int index, int val) {\n        if (start > end || l > r || start > r || l > end) return;\n        pushdown(l, r, index);\n        if (start <= l && r <= end) {\n            tree[index] += 1ll * val * (r - l + 1);\n            lz[index] += val;\n            return;\n        }\n\n        if (end <= MID) {\n            update(start, end, l, MID, LEFT, val);\n        } else if (start >= MID + 1) {\n            update(start, end, MID + 1, r, RIGHT, val);\n        } else {\n            update(start, end, l, MID, LEFT, val);\n            update(start, end, MID + 1, r, RIGHT, val);\n        }\n\n        tree[index] = tree[LEFT] + tree[RIGHT];\n    }\n\n    ll query(int start, int end, int l, int r, int index) {\n        if (start > end || l > r || start > r || l > end) return 0;\n        pushdown(l, r, index);\n        if (start <= l && r <= end) return tree[index];\n        if (end <= MID) return query(start, end, l, MID, LEFT);\n        if (start >= MID + 1) return query(start, end, MID + 1, r, RIGHT);\n        return query(start, end, l, MID, LEFT) + query(start, end, MID + 1, r, RIGHT);\n    }\n};\n\nint visited[MAX_SIZE];\nvector<int> disc1, disc2;\nll f[MAX_SIZE], fac[MAX_SIZE];\nint a[MAX_SIZE];\nint N;\nsegt big, small, ivt;\n\nll inv(int v) {\n    ll base = v, p = mod - 2;\n    ll ret = 1;\n    while (p > 0) {\n        if (p & 1) {\n            ret = ret * base;\n            ret %= mod;\n            --p;\n        } else {\n            base = base * base;\n            base %= mod;\n            p >>= 1;\n        }\n    }\n\n    return ret;\n}\n\nvoid precompute() {\n    int i;\n    scanf(\"%d\", &N);\n    for (i = 1; i <= N; ++i) {\n        scanf(\"%d\", &a[i]);\n        if (a[i] != -1) {\n            visited[a[i]] = 1;\n            disc1.push_back(a[i]);\n        }\n    }\n\n    sort(disc1.begin(), disc1.end());\n    fac[0] = 1;\n    f[0] = f[1] = 0;\n    for (i = 1; i <= N; ++i) {\n        fac[i] = fac[i-1] * i;\n        fac[i] %= mod;\n        if (!visited[i]) disc2.push_back(i);\n    }\n\n    for (i = 2; i <= N; ++i) {\n        f[i] = f[i-1] * i + ((fac[i] * (i - 1)) % mod) * inv(2);\n        f[i] %= mod;\n    }\n}\n\nint main() {\n    int i;\n    ll ans = 0;\n    precompute();\n    int sz1 = (int) disc1.size(), sz2 = (int) disc2.size();\n    ans = f[sz2];\n    for (i = 1; i <= N; ++i) {\n        if (a[i] != -1) {\n            int idx = lower_bound(disc1.begin(), disc1.end(), a[i]) - disc1.begin();\n            int idx2 = lower_bound(disc2.begin(), disc2.end(), a[i]) - disc2.begin();\n            ans += (ivt.query(idx + 1, sz1 - 1, 0, sz1 - 1, 1) * fac[sz2]) % mod;\n            ans %= mod;\n            ivt.update(idx, idx, 0, sz1 - 1, 1, 1);\n            small.update(idx2, sz2 - 1, 0, sz2 - 1, 1, 1);\n        }\n    }\n\n    for (i = 1; i <= N; ++i) {\n        if (a[i] != -1) {\n            int idx = lower_bound(disc2.begin(), disc2.end(), a[i]) - disc2.begin();\n            big.update(0, idx - 1, 0, sz2 - 1, 1, 1);\n            small.update(idx, sz2 - 1, 0, sz2 - 1, 1, -1);\n        } else {\n            ll ret = big.query(0, sz2 - 1, 0, sz2 - 1, 1);\n            ret += small.query(0, sz2 - 1, 0, sz2 - 1, 1);\n            // cout << ret << endl;\n            ret %= mod;\n            ret *= fac[sz2 - 1];\n            ans = ans + ret;\n            ans %= mod;\n        }\n    }\n    cout << (ans * inv(fac[sz2])) % mod << endl;\n    return 0;\n}\n\t\t\t\t\t\t \t\t \t\t   \t  \t\t  \t\t\t\t \t\t\t"
}