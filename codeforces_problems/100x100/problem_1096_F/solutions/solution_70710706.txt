{
    "id": 70710706,
    "contestId": 1096,
    "creationTimeSeconds": 1581317443,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "universeofHk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 11264000,
    "source": "#include \"bits/stdc++.h\"\n#define hhh cerr<<\"hhh\"<<endl\n#define see(x) cerr<<(#x)<<'='<<(x)<<endl\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int,int> pr;\ninline int read() {int x=0,f=1;char c=getchar();while(c!='-'&&(c<'0'||c>'9'))c=getchar();if(c=='-')f=-1,c=getchar();while(c>='0'&&c<='9')x=x*10+c-'0',c=getchar();return f*x;}\n\nconst int maxn = 4e5+7;\nconst int inf = 0x3f3f3f3f;\nconst int mod = 998244353;\n\nint n, cnt;\nint p[maxn];\nll f[maxn], inv[maxn], b[maxn];\n\nll qpow(ll a, int k) {\n    ll res=1;\n    while(k) {\n        if(k&1) res=res*a%mod;\n        a=a*a%mod, k>>=1;\n    }\n    return res;\n}\n\nll comb(int n, int m) {\n    if(n<m||m<0) return 0;\n    return f[n]*inv[m]%mod*inv[n-m]%mod;\n}\n\nvoid add(int x, int d) { while(x<maxn) b[x]+=d, x+=x&-x; }\nint get(int x) { int s=0; while(x) s+=b[x], x-=x&-x; return s; }\n\nint main() {\n    f[0]=f[1]=inv[0]=inv[1]=1;\n    for(int i=2; i<maxn; ++i) f[i]=i*f[i-1]%mod;\n    for(int i=2; i<maxn; ++i) inv[i]=(mod-mod/i)*inv[mod%i]%mod;\n    for(int i=2; i<maxn; ++i) inv[i]=inv[i]*inv[i-1]%mod;\n    n=read();\n    for(int i=1; i<=n; ++i) {\n        add(i,1); p[i]=read();\n        if(p[i]!=-1) add(p[i],-1);\n        else cnt++;\n    }\n    ll res=0, cur=cnt;\n    for(int i=1; i<=n; ++i) {\n        if(p[i]!=-1) res=(res+get(p[i])*cur%mod*f[cnt-1]%mod)%mod;\n        else cur--;\n    }\n    if(cnt>=2) res=(res+ll(cnt-1)*cnt/2%mod*comb(cnt,2)%mod*f[cnt-2]%mod)%mod;\n    memset(b,0,sizeof(b));\n    ll tmp=0;\n    for(int i=n; i; --i) if(p[i]!=-1) {\n        tmp+=get(p[i]);\n        add(p[i],1);\n    }\n    res=(res+tmp%mod*f[cnt]%mod)%mod;\n    printf(\"%lld\\n\", res*qpow(f[cnt],mod-2)%mod);\n}"
}