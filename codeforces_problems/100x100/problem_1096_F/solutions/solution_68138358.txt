{
    "id": 68138358,
    "contestId": 1096,
    "creationTimeSeconds": 1578082391,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "afdanilkin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 6553600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    ll n;\r\n    cin >> n;\r\n    vector<ll> p((size_t) n);\r\n    for (ll i = 0; i < n; i++) {\r\n        cin >> p[i];\r\n        if (p[i] != -1) {\r\n            p[i]--;\r\n        }\r\n    }\r\n    ll o = 0;\r\n    function<vector<ll>(vector<ll>)> merge_sort = [&](const vector<ll> &b) {\r\n        if (b.size() <= 1) {\r\n            return b;\r\n        }\r\n        vector<ll> c;\r\n        vector<ll> d = merge_sort(vector<ll>(b.begin(), b.begin() + b.size() / 2));\r\n        vector<ll> e = merge_sort(vector<ll>(b.begin() + b.size() / 2, b.end()));\r\n        for (ll i = 0, j = 0; i < b.size() / 2 || j < b.size() / 2; i++, j++) {\r\n            if (i < b.size() / 2 && d[i] < e[j]) {\r\n                c.push_back(d[i]);\r\n            } else {\r\n                c.push_back(e[j]);\r\n                o += b.size() / 2 - i;\r\n            }\r\n        }\r\n        return c;\r\n    };\r\n    vector<ll> q = p;\r\n    q.erase(remove(q.begin(), q.end(), -1), q.end());\r\n    merge_sort(q);\r\n    function<ll(ll, ll)> power = [&](ll x, ll y) {\r\n        if (y == 0) {\r\n            return (ll) 1;\r\n        } else {\r\n            ll z = power(x, y / 2);\r\n            return y % 2 == 0 ? z * z % 998244353 : z * z % 998244353 * x % 998244353;\r\n        }\r\n    };\r\n    auto inv = [&](ll x) {\r\n        return power(x, 998244353 - 2);\r\n    };\r\n    ll m = count(p.begin(), p.end(), -1);\r\n    o = (o + m * (m - 1) / 2 % 998244353 * inv(2)) % 998244353;\r\n    vector<ll> a((size_t) n, 0), b((size_t) n, 0);\r\n    for (ll i = 0; i < n; i++) {\r\n        if (p[i] == -1) {\r\n            a[i] = b[i] = 1;\r\n        }\r\n    }\r\n    partial_sum(a.begin(), a.end(), a.begin());\r\n    partial_sum(b.rbegin(), b.rend(), b.rbegin());\r\n    vector<ll> c((size_t) n, 1), d((size_t) n, 1);\r\n    for (ll i = 0; i < n; i++) {\r\n        if (p[i] != -1) {\r\n            c[p[i]] = d[p[i]] = 0;\r\n        }\r\n    }\r\n    partial_sum(c.begin(), c.end(), c.begin());\r\n    partial_sum(d.rbegin(), d.rend(), d.rbegin());\r\n    for (ll i = 0; i < n; i++) {\r\n        if (p[i] != -1) {\r\n            o = (o + d[p[i]] * inv(m) % 998244353 * a[i]) % 998244353;\r\n            o = (o + c[p[i]] * inv(m) % 998244353 * b[i]) % 998244353;\r\n        }\r\n    }\r\n    cout << o << endl;\r\n    return 0;\r\n}\r\n"
}