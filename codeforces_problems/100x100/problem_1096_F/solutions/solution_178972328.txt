{
    "id": 178972328,
    "contestId": 1096,
    "creationTimeSeconds": 1667404057,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Ayalla"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 16691200,
    "source": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n\ntemplate <class T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define int long long int\n#define endl '\\n'\n#define pb push_back\n#define pi pair<int, int>\n#define pii pair<int, pi>\n#define fir first\n#define sec second\n#define MAXN 500001\n#define mod 998244353\n\nstruct modint\n{\n  int val;\n  modint(int v = 0) { val = ((v % mod) + mod) % mod; }\n  int pow(int y)\n  {\n    modint x = val;\n    modint z = 1;\n    while (y)\n    {\n      if (y & 1)\n        z *= x;\n      x *= x;\n      y >>= 1;\n    }\n    return z.val;\n  }\n  int inv() { return pow(mod - 2); }\n  void operator=(int o) { val = o % mod; }\n  void operator=(modint o) { val = o.val % mod; }\n  void operator+=(modint o) { *this = *this + o; }\n  void operator-=(modint o) { *this = *this - o; }\n  void operator*=(modint o) { *this = *this * o; }\n  void operator/=(modint o) { *this = *this / o; }\n  bool operator==(modint o) { return val == o.val; }\n  bool operator!=(modint o) { return val != o.val; }\n  int operator*(modint o) { return ((val * o.val) % mod); }\n  int operator/(modint o) { return (val * o.inv()) % mod; }\n  int operator+(modint o) { return (val + o.val) % mod; }\n  int operator-(modint o) { return (val - o.val + mod) % mod; }\n};\nmodint calc1(vector<int> &v)\n{\n  ordered_set<int> s;\n  modint ans = 0;\n  for (auto const &i : v)\n  {\n    if (i != -1)\n    {\n      ans += s.size();\n      ans -= s.order_of_key(i);\n      s.insert(i);\n    }\n  }\n  return ans;\n}\nmodint calc2(int cnt)\n{\n  modint pairs = modint(cnt * (cnt - 1)) / 2;\n  modint prob = modint(1) / 2;\n  modint ans = pairs * prob;\n  return ans;\n}\nmodint calc3(vector<int> &v, vector<int> &rem)\n{\n  ordered_set<int> s;\n  for (auto const &i : rem)\n    s.insert(i);\n  int qt = rem.size(), sz = rem.size();\n  modint ans = 0;\n  for (auto const &i : v)\n  {\n    if (i != -1)\n    {\n      modint prob = modint(qt) / sz;\n      int m = s.order_of_key(i);\n      modint curr = prob * m;\n      ans += curr;\n    }\n    else\n    {\n      qt--;\n    }\n  }\n  for (auto const &i : v)\n  {\n    if (i != -1)\n    {\n      modint prob = modint(qt) / sz;\n      int m = s.size() - s.order_of_key(i);\n      modint curr = prob * m;\n      ans += curr;\n    }\n    else\n    {\n      qt++;\n    }\n  }\n  return ans;\n}\nsigned main()\n{\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n;\n  cin >> n;\n  vector<int> v(n);\n  vector<bool> has(n + 1, 0);\n  int cnt = 0;\n  for (int i = 0; i < n; i++)\n  {\n    cin >> v[i];\n    if (v[i] == -1)\n      cnt++;\n    else\n      has[v[i]] = 1;\n  }\n  vector<int> rem;\n  for (int i = 1; i <= n; i++)\n  {\n    if (!has[i])\n      rem.pb(i);\n  }\n  modint ev = calc1(v);\n  ev += calc2(cnt);\n  ev += calc3(v, rem);\n  cout << ev.val << endl;\n  return 0;\n}"
}