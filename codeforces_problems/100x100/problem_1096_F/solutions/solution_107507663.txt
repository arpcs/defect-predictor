{
    "id": 107507663,
    "contestId": 1096,
    "creationTimeSeconds": 1613458191,
    "relativeTimeSeconds": 6591,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "i8nd5t"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1613451600
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 2048000,
    "source": "import sys,math,itertools\r\nfrom collections import Counter,deque,defaultdict\r\nfrom bisect import bisect_left,bisect_right \r\nfrom heapq import heappop,heappush,heapify, nlargest\r\nfrom copy import deepcopy\r\nmod = 10**9+7\r\nINF = float('inf')\r\ndef inp(): return int(sys.stdin.readline())\r\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\r\ndef inpl_1(): return list(map(lambda x:int(x)-1, sys.stdin.readline().split()))\r\ndef inps(): return sys.stdin.readline()\r\ndef inpsl(x): tmp = sys.stdin.readline(); return list(tmp[:x])\r\ndef err(x): print(x); exit()\r\n\r\nmod = 998244353\r\n\r\nn = inp()\r\na = inpl()\r\nk = a.count(-1)\r\nfac = [1,1]\r\nfor i in range(2,k+1):\r\n    fac.append((fac[-1]*i)%mod)\r\nb = []; d = {}; rev = [0]*n\r\nfor i,x in enumerate(a):\r\n    if x == -1: rev[i] = 1\r\n    else:\r\n        b.append(x); d[x] = i\r\nrev = list(itertools.accumulate(rev))\r\nsorb = sorted(b)\r\nres = 0\r\nfor i,x in enumerate(sorb):\r\n    mi = x-i-1; r = k-rev[d[x]]\r\n    res += mi*r\r\n    res %= mod\r\nres *= fac[-2]\r\nres %= mod\r\ncnt = (fac[-1]*k*(k-1))%mod\r\ncnt *= pow(4,mod-2,mod)\r\nres += cnt\r\n\r\nclass BIT:\r\n    def __init__(self, n):\r\n        self.n = n\r\n        self.data = [0]*(n+1)\r\n        self.el = [0]*(n+1)\r\n    def sum(self, i):\r\n        s = 0\r\n        while i > 0:\r\n            s += self.data[i]\r\n            i -= i & -i\r\n        return s\r\n    def add(self, i, x):\r\n        # assert i > 0\r\n        self.el[i] += x\r\n        while i <= self.n:\r\n            self.data[i] += x\r\n            i += i & -i\r\n    def get(self, i, j=None):\r\n        if j is None:\r\n            return self.el[i]\r\n        return self.sum(j) - self.sum(i)\r\n# n = 6\r\n# a = [1,2,3,4,5,6]\r\n# bit = BIT(n)\r\n# for i,e in enumerate(a):\r\n#     bit.add(i+1,e)\r\n# print(bit.get(2,5)) #12 (3+4+5)\r\n\r\nN = n-k\r\nbit = BIT(N+10)\r\nans = 0\r\nfor i,x in enumerate(b):\r\n    # bit.add(p, 1)\r\n    ans += i - bit.sum(x+1)\r\n    bit.add(x+1,1)\r\nres += ans\r\nres %= mod\r\nprint(res*pow(fac[-1],mod-2,mod)%mod)\r\n"
}