{
    "id": 113954911,
    "contestId": 1096,
    "creationTimeSeconds": 1619166073,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Omer223"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#define _CRT_SECURE_NO_WARNINGS\r\n#define fast ios::sync_with_stdio(false); cin.tie(0)\r\n#define foru(i, k, n) for (int i = k; i < n; i++)\r\n#define ford(i, k, n) for (ll i = k; i >= n; i--)\r\n#define pb push_back\r\n#define ff first\r\n#define ss second\r\n#define mp make_pair\r\n\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <string>\r\n#include <numeric>\r\n#include <queue>\r\n#include <bitset>\r\n#include <set>\r\n#include <deque>\r\n#include <stack>\r\n#include <map>\r\n#include <iomanip>\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair<ll, ll> pii;\r\ntypedef pair<ll, ll> pll;\r\ntypedef vector<ll> vll;\r\ntypedef vector<ll> vi;\r\n\r\ntemplate<class T>\r\nstruct fen {\r\n\tvector<T> fenwick;\r\n\tint size;\r\n\tfen(int sz) {\r\n\t\tsize = sz;\r\n\t\tfenwick.resize(size);\r\n\t\tforu(i, 0, size)fenwick[i] = 0;\r\n\t}\r\n\tfen(vector<T> arr) {\r\n\t\tsize = arr.size();\r\n\t\tfenwick.resize(size);\r\n\t\tforu(i, 0, size)fenwick[i](0);\r\n\t\tforu(i, 0, size)update(i, arr[i]);\r\n\t}\r\n\tvoid add(int index, T add) {\r\n\t\tfor (int k = index; k < size; k |= (~k & -~k)) {\r\n\t\t\tfenwick[k] = fenwick[k] + add;\r\n\t\t}\r\n\t}\r\n\tvoid update(int index, T nval) {\r\n\t\tadd(index, nval - rangeQuery(index, index));\r\n\t}\r\n\tT query(int to) {\r\n\t\tT sum = 0;\r\n\t\tfor (int curr = to + 1; curr > 0; curr ^= (curr & -curr)) {\r\n\t\t\tsum = sum + fenwick[curr - 1];\r\n\t\t}\r\n\t\treturn sum;\r\n\t}\r\n\tT rangeQuery(int from, int to) {\r\n\t\tif (!from)return query(to);\r\n\t\treturn query(to) - query(from - 1);\r\n\t}\r\n\tvoid print() {\r\n\t\tforu(i, 0, size) cout << query(i) << \" \";\r\n\t\tcout << endl;\r\n\t}\r\n};\r\n\r\n\r\ntemplate<class T>\r\nstruct seglazy {\r\n\tvector<pii> lohi;\r\n\tvector<T> values, delta;\r\n\tint n;\r\nprivate:\r\n\tvoid pushDown(int i) {\r\n\t\tdelta[2 * i] += delta[i];\r\n\t\tdelta[2 * i + 1] += delta[i];\r\n\t\tdelta[i] = 0;\r\n\t}\r\n\tvoid update(int i) {\r\n\t\tvalues[i] = (lohi[2 * i].second - lohi[2 * i].first + 1) * delta[2 * i] + values[2 * i] + (lohi[2 * i\r\n\t\t\t+ 1].second - lohi[2 * i + 1].first + 1) * delta[2 * i + 1] + values[2 * i + 1];\r\n\t}\r\n\tvoid init(int i, int a, int b) {\r\n\t\tlohi[i].first = a;\r\n\t\tlohi[i].second = b;\r\n\t\tif (a >= b)return;\r\n\t\tint m = (a + b) / 2;\r\n\t\tinit(2 * i, a, m);\r\n\t\tinit(2 * i + 1, m + 1, b);\r\n\t}\r\n\tT rangeQueryUtil(int i, int a, int b) {\r\n\t\tif (a > b || lohi[i].first > b || lohi[i].second < a)return 0; //CHECK\r\n\t\telse if (lohi[i].first >= a && lohi[i].second <= b) {\r\n\t\t\tint amt = lohi[i].second - lohi[i].first + 1;\r\n\t\t\treturn values[i] + delta[i] * amt;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tpushDown(i);\r\n\t\t\tT left = rangeQueryUtil(2 * i, a, b);\r\n\t\t\tT right = rangeQueryUtil(2 * i + 1, a, b);\r\n\t\t\tupdate(i);\r\n\t\t\treturn left + right;\r\n\t\t}\r\n\t}\r\n\tvoid rangeUpdateUtil(int i, int a, int b, T val) {\r\n\t\tif (a > b || lohi[i].first > b || lohi[i].second < a)return;\r\n\t\telse if (lohi[i].first >= a && lohi[i].second <= b) delta[i] += val;\r\n\t\telse {\r\n\t\t\tpushDown(i);\r\n\t\t\trangeUpdateUtil(2 * i, a, b, val);\r\n\t\t\trangeUpdateUtil(2 * i + 1, a, b, val);\r\n\t\t\tupdate(i);\r\n\t\t}\r\n\t}\r\npublic:\r\n\tseglazy(int n) {\r\n\t\tthis->n = n;\r\n\t\tlohi.resize(4 * n + 1);\r\n\t\tdelta.resize(4 * n + 1);\r\n\t\tvalues.resize(4 * n + 1);\r\n\t\tfill(values.begin(), values.end(), 0);\r\n\t\tfill(delta.begin(), delta.end(), 0);\r\n\t\tinit(1, 0, n - 1);\r\n\t}\r\n\tseglazy(vector<T> arr) {\r\n\t\tthis->n = arr.size();\r\n\t\tlohi.resize(4 * n + 1);\r\n\t\tdelta.resize(4 * n + 1);\r\n\t\tvalues.resize(4 * n + 1);\r\n\t\tfill(delta.begin(), delta.end(), 0);\r\n\t\tinit(1, 0, n - 1);\r\n\t\tforu(i, 0, n) rangeUpdate(i, i, arr[i]);\r\n\t}\r\n\tvoid rangeUpdate(int from, int to, T val) {\r\n\t\trangeUpdateUtil(1, from, to, val);\r\n\t}\r\n\tT rangeQuery(int from, int to) {\r\n\t\treturn rangeQueryUtil(1, from, to);\r\n\t}\r\n};\r\n\r\nconst ll mod = 998244353;\r\n\r\nvoid imult(ll & lhs, const ll & rhs) {\r\n    lhs = ((lhs % mod) * (rhs % mod)) % mod;\r\n}\r\n\r\nvoid iadd(ll & lhs, const ll & rhs) {\r\n    lhs = ((lhs % mod) + (rhs % mod)) % mod;\r\n}\r\n\r\nvoid isubt(ll & lhs, const ll & rhs) {\r\n    ll ret = (lhs - rhs) % mod;\r\n    lhs = ret + (ret < 0 ? mod : 0);\r\n}\r\n\r\nll bpw(const ll & lhs, const ll & rhs) {\r\n    if (rhs == 0)return 1;\r\n    ll ret = bpw(lhs, rhs >> 1);\r\n    imult(ret, ret);\r\n    if (rhs & 1) imult(ret, lhs);\r\n    return ret;\r\n}\r\n\r\nll inv(const ll & x) {\r\n    return bpw(x, mod - 2);\r\n}\r\n\r\nll mult(const ll & lhs, const ll & rhs) {\r\n    return ((lhs % mod) * (rhs % mod)) % mod;\r\n}\r\n\r\nll add(const ll & lhs, const ll & rhs) {\r\n    return ((lhs % mod) + (rhs % mod)) % mod;\r\n}\r\n\r\nll subt(const ll & lhs, const ll & rhs) {\r\n    ll ret = (lhs - rhs) % mod;\r\n    return ret + (ret < 0 ? mod : 0);\r\n}\r\n\r\nll divv(const ll & lhs, const ll & rhs) {\r\n    return mult(lhs, inv(rhs));\r\n}\r\n\r\nconst int sz = 3e5;\r\nint n;\r\nvector<int> a, bads;\r\nint minones = 0;\r\n\r\nll countinv() {\r\n\tfen<int> tre(n + 1);\r\n\tll tot = 0;\r\n\tforu(i, 0, n) {\r\n\t\tif (a[i] != -1) {\r\n\t\t\tiadd(tot, tre.rangeQuery(a[i] + 1, n));\r\n\t\t\ttre.add(a[i], 1);\r\n\t\t}\r\n\t}\r\n\treturn tot;\r\n}\r\n\r\nll countsuf() {\r\n\tseglazy<ll> tre(minones);\r\n\tll tot = 0;\r\n\tford(i, n - 1, 0) {\r\n\t\tif (a[i] == -1) {\r\n\t\t\tiadd(tot, divv(tre.rangeQuery(0, minones - 1), minones));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tauto pos = lower_bound(bads.begin(), bads.end(), a[i]);\r\n\t\t\tif (pos != bads.end())\r\n\t\t\t\ttre.rangeUpdate(pos - bads.begin(), minones - 1, 1);\r\n\t\t}\r\n\t}\r\n\treturn tot;\r\n}\r\n\r\nll countpre() {\r\n\tseglazy<ll> tre(minones);\r\n\tll tot = 0;\r\n\tforu(i, 0, n) {\r\n\t\tif (a[i] == -1) {\r\n\t\t\tiadd(tot, divv(tre.rangeQuery(0, minones - 1), minones));\r\n\t\t}\r\n\t\telse {\r\n\t\t\tauto pos = lower_bound(bads.begin(), bads.end(), a[i]);\r\n\t\t\tif (pos != bads.begin()) {\r\n\t\t\t\tif (pos == bads.end())tre.rangeUpdate(0, minones - 1, 1);\r\n\t\t\t\telse tre.rangeUpdate(0, (pos - bads.begin() - 1), 1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn tot;\r\n}\r\n\r\nint main() {\r\n    fast;\r\n    ll tot = 0;\r\n    cin >> n;\r\n\ta.resize(n);\r\n    foru(i, 0, n) {\r\n\t\tcin >> a[i]; minones += (a[i] == -1); if (a[i] == -1)bads.push_back(a[i]);\r\n    }\r\n\tsort(bads.begin(), bads.end());\r\n    tot = divv(mult(minones, minones - 1), 4);\r\n    iadd(tot, countinv());\r\n\tif(minones)iadd(tot, countpre());\r\n\tif(minones)iadd(tot, countsuf());\r\n\tcout << tot;\r\n    return 0;\r\n}"
}