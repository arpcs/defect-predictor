{
    "id": 94876779,
    "contestId": 1096,
    "creationTimeSeconds": 1602014937,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Ahmad"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 607,
    "memoryConsumedBytes": 44953600,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class A {\r\n\tpublic static void main (String[] args) { new A(); }\r\n\r\n\tpublic A() {\r\n\t\tFastScanner fs = new FastScanner();\r\n\t\tPrintWriter out = new PrintWriter(System.out);\r\n\t\tSystem.err.println(\"\");\r\n\r\n\t\tint n = fs.nextInt();\r\n\t\tint[] fact = new int[n + 1];\r\n\t\tfact[0] = 1;\r\n\t\tfor(int i = 1; i <= n; i++)\r\n\t\t\tfact[i] = mult(i, fact[i-1]);\r\n\t\t\r\n\t\tint[] perm = fs.nextIntArray(n);\r\n\t\t\r\n\t\tint[] pos = new int[n];\r\n\t\tArrays.fill(pos, -1);\r\n\t\t\r\n\t\tint freeSet = 0;\r\n\t\tfor(int i = 0; i < n; i++) {\r\n\t\t\tif(perm[i] != -1) {\r\n\t\t\t\tperm[i]--;\r\n\t\t\t\tpos[perm[i]] = i;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfreeSet++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tint[] free = new int[freeSet];\r\n\t\tfreeSet = 0;\r\n\t\t\r\n\t\tfor(int i = 0; i < n; i++) {\r\n\t\t\tif(pos[i] == -1) free[freeSet++] = i;\r\n\t\t}\r\n\t\t\r\n\t\tST st = new ST(0, n-1);\r\n\t\tint fixedInv = 0;\r\n\t\t\r\n\t\tfor(int i = n-1; i >= 0; i--) {\r\n\t\t\tif(pos[i] == -1) continue;\r\n\t\t\tint add = (int)(st.rangeSum(0, pos[i])%MOD);\r\n\t\t\tfixedInv = add(fixedInv, add);\r\n\t\t\tst.rangeAdd(pos[i], pos[i], 1);\r\n\t\t}\r\n\t\tfixedInv %= MOD;\r\n\r\n\t\tint[] negAhead = new int[n];\r\n\t\tint[] negBefore = new int[n];\r\n\t\tfor(int i = n-1, amt = 0; i >= 0; i--) {\r\n\t\t\tif(perm[i] == -1) amt++;\r\n\t\t\telse negAhead[i] = amt;\r\n\t\t}\r\n\t\tfor(int i = 0, amt = 0; i < n; i++) {\r\n\t\t\tif(perm[i] == -1) amt++;\r\n\t\t\telse negBefore[i] = amt;\r\n\t\t}\r\n\t\t\r\n\t\tint res = fixedInv;\r\n\t\tif(freeSet > 0) {\r\n\t\t\tint invs = getInvCnt(freeSet);\r\n\t\t\tst = new ST(0, n-1);\r\n\t\t\tint sumFreeFixed = 0;\r\n\t\t\tfor(int i = n-1; i >= 0; i--) {\r\n\t\t\t\tif(pos[i] == -1) {\r\n\t\t\t\t\tint add = (int)(st.rangeSum(0, freeSet-1)%MOD);\r\n\t\t\t\t\tadd = mult(add, fact[freeSet-1]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsumFreeFixed = add(sumFreeFixed, add);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tint R = negAhead[pos[i]]-1;\r\n\t\t\t\t\tif(R >= 0) {\r\n\t\t\t\t\t\tst.rangeAdd(0, R, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tst = new ST(0, n-1);\r\n\t\t\tfor(int i = 0; i < n; i++) {\r\n\t\t\t\tif(pos[i] == -1) {\r\n\t\t\t\t\tint add = (int)(st.rangeSum(0, freeSet-1)%MOD);\r\n\t\t\t\t\tadd = mult(add, fact[freeSet-1]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsumFreeFixed = add(sumFreeFixed, add);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tint R = negBefore[pos[i]]-1;\r\n\t\t\t\t\tif(R >= 0) {\r\n\t\t\t\t\t\tst.rangeAdd(0, R, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tint divFact = pow(fact[freeSet], MOD - 2);\r\n\t\t\tint p1 = mult(invs, divFact);\r\n\t\t\tint p2 = mult(sumFreeFixed, divFact);\r\n\t\t\tres = add(res, p1);\r\n\t\t\tres = add(res, p2);\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\tout.println(res);\r\n\t\t\r\n\t\tout.close();\r\n\t}\r\n\t\r\n\tint getInvCnt(int n) {\r\n\t\tif(n == 1) return 0;\r\n\t\tint amt = 0, fact = 1;\r\n\t\t\r\n\t\tfor(int i = 2; i <= n; i++) {\r\n\t\t\tlong v = (long)i*(i-1)/2;\r\n\t\t\tint ways = (int)(v % MOD);\r\n\t\t\tways = mult(ways, fact);\r\n\t\t\t\r\n\t\t\tways = add(ways, mult(amt, i));\r\n\t\t\tfact = mult(fact, i);\r\n\t\t\tamt = ways;\r\n\t\t}\r\n\t\t\r\n\t\treturn amt;\r\n\t}\r\n\r\n\tint MOD = 998244353;\r\n\tint mult(long a, long b) {\r\n\t\ta *= b;\r\n\t\tif(a >= MOD) a %= MOD;\r\n\t\treturn (int)a;\r\n\t}\r\n\tint add(int a, int b) {\r\n\t\ta += b;\r\n\t\tif(a >= MOD) a -= MOD;\r\n\t\treturn a;\r\n\t}\r\n\tint pow(int base, int expo) {\r\n\t\tif(expo == 0) return 1;\r\n\t\tif(expo == 1) return base;\r\n\t\tif(expo % 2 == 0) {\r\n\t\t\tint ret = pow(base, expo / 2);\r\n\t\t\treturn mult(ret, ret);\r\n\t\t}\r\n\t\treturn mult(base, pow(base, expo-1));\r\n\t}\r\n\t\r\n\tclass ST {\r\n\t\tST left, right;\r\n\t\tint L, R;\r\n\t\tlong sum, delta, len;\r\n\t\tST(int a, int b) {\r\n\t\t\tL = a; R = b;\r\n\t\t\tlen = R-L+1;\r\n\t\t\tif(L == R) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tint mid = (a+b)/2;\r\n\t\t\tleft = new ST(a, mid);\r\n\t\t\tright = new ST(mid+1, b);\r\n\t\t}\r\n\t\tvoid rangeAdd(int ll, int rr, long add) {\r\n\t\t\tif(rr < L || R < ll) return;\r\n\t\t\tif(ll <= L && R <= rr) {\r\n\t\t\t\tdelta += add;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tprop();\r\n\t\t\t\r\n\t\t\tleft.rangeAdd(ll, rr, add);\r\n\t\t\tright.rangeAdd(ll, rr, add);\r\n\t\t\t\r\n\t\t\tupdate();\r\n\t\t}\r\n\t\tlong rangeSum(int ll, int rr) {\r\n\t\t\tif(rr < L || R < ll) return 0;\r\n\t\t\tif(ll <= L && R <= rr) {\r\n\t\t\t\treturn getVal();\r\n\t\t\t}\r\n\t\t\tprop();\r\n\t\t\t\r\n\t\t\tlong lf = left.rangeSum(ll, rr);\r\n\t\t\tlong rg = right.rangeSum(ll, rr);\r\n\t\t\t\r\n\t\t\tupdate();\r\n\t\t\t\r\n\t\t\treturn lf+rg;\r\n\t\t}\r\n\t\tvoid prop() {\r\n\t\t\tif(delta == 0) return;\r\n\t\t\tleft.delta += delta;\r\n\t\t\tright.delta += delta;\r\n\t\t\tdelta = 0;\r\n\t\t}\r\n\t\tvoid update() {\r\n\t\t\tsum = left.getVal()+right.getVal();\r\n\t\t}\r\n\t\tlong getVal() {\r\n\t\t\treturn sum+delta*len;\r\n\t\t}\r\n\t}\r\n\t\r\n\tvoid sort(int[] a) {\r\n\t\tRandom rand = new Random();\r\n\t\tint n = a.length;\r\n\t\tfor(int i = 0; i < n; i++) {\r\n\t\t\tint x = rand.nextInt(n);\r\n\t\t\tint y = rand.nextInt(n);\r\n\t\t\tint t = a[x]; a[x] = a[y]; a[y] = t;\r\n\t\t}\r\n\t\tArrays.sort(a);\r\n\t}\r\n\r\n\tclass FastScanner {\r\n\t\tpublic int BS = 1<<16;\r\n\t\tpublic char NC = (char)0;\r\n\t\tbyte[] buf = new byte[BS];\r\n\t\tint bId = 0, size = 0;\r\n\t\tchar c = NC;\r\n\t\tdouble num = 1;\r\n\t\tBufferedInputStream in;\r\n\r\n\t\tpublic FastScanner() {\r\n\t\t\tin = new BufferedInputStream(System.in, BS);\r\n\t\t}\r\n\r\n\t\tpublic FastScanner(String s) {\r\n\t\t\ttry {\r\n\t\t\t\tin = new BufferedInputStream(new FileInputStream(new File(s)), BS);\r\n\t\t\t}\r\n\t\t\tcatch (Exception e) {\r\n\t\t\t\tin = new BufferedInputStream(System.in, BS);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic char nextChar(){\r\n\t\t\twhile(bId==size) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tsize = in.read(buf);\r\n\t\t\t\t}catch(Exception e) {\r\n\t\t\t\t\treturn NC;\r\n\t\t\t\t}                \r\n\t\t\t\tif(size==-1)return NC;\r\n\t\t\t\tbId=0;\r\n\t\t\t}\r\n\t\t\treturn (char)buf[bId++];\r\n\t\t}\r\n\r\n\t\tpublic int nextInt() {\r\n\t\t\treturn (int)nextLong();\r\n\t\t}\r\n\r\n\t\tpublic long nextLong() {\r\n\t\t\tnum=1;\r\n\t\t\tboolean neg = false;\r\n\t\t\tif(c==NC)c=nextChar();\r\n\t\t\tfor(;(c<'0' || c>'9'); c = nextChar()) {\r\n\t\t\t\tif(c=='-')neg=true;\r\n\t\t\t}\r\n\t\t\tlong res = 0;\r\n\t\t\tfor(; c>='0' && c <='9'; c=nextChar()) {\r\n\t\t\t\tres = (res<<3)+(res<<1)+c-'0';\r\n\t\t\t\tnum*=10;\r\n\t\t\t}\r\n\t\t\treturn neg?-res:res;\r\n\t\t}\r\n\r\n\t\tpublic double nextDouble() {\r\n\t\t\tdouble cur = nextLong();\r\n\t\t\treturn c!='.' ? cur:cur+nextLong()/num;\r\n\t\t}\r\n\r\n\t\tpublic String next() {\r\n\t\t\tStringBuilder res = new StringBuilder();\r\n\t\t\twhile(c<=32)c=nextChar();\r\n\t\t\twhile(c>32) {\r\n\t\t\t\tres.append(c);\r\n\t\t\t\tc=nextChar();\r\n\t\t\t}\r\n\t\t\treturn res.toString();\r\n\t\t}\r\n\r\n\t\tpublic String nextLine() {\r\n\t\t\tStringBuilder res = new StringBuilder();\r\n\t\t\twhile(c<=32)c=nextChar();\r\n\t\t\twhile(c!='\\n') {\r\n\t\t\t\tres.append(c);\r\n\t\t\t\tc=nextChar();\r\n\t\t\t}\r\n\t\t\treturn res.toString();\r\n\t\t}\r\n\r\n\t\tpublic boolean hasNext() {\r\n\t\t\tif(c>32)return true;\r\n\t\t\twhile(true) {\r\n\t\t\t\tc=nextChar();\r\n\t\t\t\tif(c==NC)return false;\r\n\t\t\t\telse if(c>32)return true;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpublic int[] nextIntArray(int n) {\r\n\t\t\tint[] res = new int[n];\r\n\t\t\tfor(int i = 0; i < n; i++) res[i] = nextInt();\r\n\t\t\treturn res;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}"
}