{
    "id": 226749334,
    "contestId": 1096,
    "creationTimeSeconds": 1696515304,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "Sakuyalove"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 30412800,
    "source": "#ifdef ONLINE_JUDGE\r\n#pragma GCC optimize(\"O3\")\r\n#pragma GCC target(\"avx2\")\r\n#pragma GCC target(\"sse,sse2,sse3,sse4.1,sse4.2,popcnt,abm,mmx,avx\")\r\n#pragma comment(linker,\"/STACK:102400000,102400000\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"inline\")\r\n#pragma GCC optimize(\"-fgcse\")\r\n#pragma GCC optimize(\"-fgcse-lm\")\r\n#pragma GCC optimize(\"-fipa-sra\")\r\n#pragma GCC optimize(\"-ftree-pre\")\r\n#pragma GCC optimize(\"-ftree-vrp\")\r\n#pragma GCC optimize(\"-fpeephole2\")\r\n#pragma GCC optimize(\"-ffast-math\")\r\n#pragma GCC optimize(\"-fsched-spec\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"-falign-jumps\")\r\n#pragma GCC optimize(\"-falign-loops\")\r\n#pragma GCC optimize(\"-falign-labels\")\r\n#pragma GCC optimize(\"-fdevirtualize\")\r\n#pragma GCC optimize(\"-fcaller-saves\")\r\n#pragma GCC optimize(\"-fcrossjumping\")\r\n#pragma GCC optimize(\"-fthread-jumps\")\r\n#pragma GCC optimize(\"-funroll-loops\")\r\n#pragma GCC optimize(\"-fwhole-program\")\r\n#pragma GCC optimize(\"-freorder-blocks\")\r\n#pragma GCC optimize(\"-fschedule-insns\")\r\n#pragma GCC optimize(\"inline-functions\")\r\n#pragma GCC optimize(\"-ftree-tail-merge\")\r\n#pragma GCC optimize(\"-fschedule-insns2\")\r\n#pragma GCC optimize(\"-fstrict-aliasing\")\r\n#pragma GCC optimize(\"-fstrict-overflow\")\r\n#pragma GCC optimize(\"-falign-functions\")\r\n#pragma GCC optimize(\"-fcse-skip-blocks\")\r\n#pragma GCC optimize(\"-fcse-follow-jumps\")\r\n#pragma GCC optimize(\"-fsched-interblock\")\r\n#pragma GCC optimize(\"-fpartial-inlining\")\r\n#pragma GCC optimize(\"no-stack-protector\")\r\n#pragma GCC optimize(\"-freorder-functions\")\r\n#pragma GCC optimize(\"-findirect-inlining\")\r\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\r\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\r\n#pragma GCC optimize(\"inline-small-functions\")\r\n#pragma GCC optimize(\"-finline-small-functions\")\r\n#pragma GCC optimize(\"-ftree-switch-conversion\")\r\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\r\n#pragma GCC optimize(\"-fexpensive-optimizations\")\r\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\r\n#pragma GCC optimize(\"inline-functions-called-once\")\r\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\r\n#endif\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nstring to_string(string s) {\r\n  return '\"' + s + '\"';\r\n}\r\n\r\nstring to_string(const char* s) {\r\n  return to_string((string) s);\r\n}\r\n\r\nstring to_string(bool b) {\r\n  return (b ? \"true\" : \"false\");\r\n}\r\n\r\ntemplate <typename A, typename B>\r\nstring to_string(pair<A, B> p) {\r\n  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";\r\n}\r\n\r\ntemplate <typename A>\r\nstring to_string(A v) {\r\n  bool first = true;\r\n  string res = \"{\";\r\n  for (const auto &x : v) {\r\n    if (!first) {\r\n      res += \", \";\r\n    }\r\n    first = false;\r\n    res += to_string(x);\r\n  }\r\n  res += \"}\";\r\n  return res;\r\n}\r\n\r\nvoid debug_out() { cerr << endl; }\r\n\r\ntemplate <typename Head, typename... Tail>\r\nvoid debug_out(Head H, Tail... T) {\r\n  cerr << \" \" << to_string(H);\r\n  debug_out(T...);\r\n}\r\n\r\n#ifdef LOCAL\r\n#define debug(...) cerr << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\r\n#else\r\n#define debug(...) 42\r\n#endif\r\n\r\nstatic struct FastInput {\r\n  static constexpr int BUF_SIZE = 1 << 20;\r\n  char buf[BUF_SIZE];\r\n  size_t chars_read = 0;\r\n  size_t buf_pos = 0;\r\n  FILE *in = stdin;\r\n  char cur = 0;\r\n \r\n  inline char get_char() {\r\n    if (buf_pos >= chars_read) {\r\n      chars_read = fread(buf, 1, BUF_SIZE, in);\r\n      buf_pos = 0;\r\n      buf[0] = (chars_read == 0 ? -1 : buf[0]);\r\n    }\r\n    return cur = buf[buf_pos++];\r\n  }\r\n \r\n  inline void tie(int) {}\r\n \r\n  inline explicit operator bool() {\r\n    return cur != -1;\r\n  }\r\n \r\n  inline static bool is_blank(char c) {\r\n    return c <= ' ';\r\n  }\r\n \r\n  inline bool skip_blanks() {\r\n    while (is_blank(cur) && cur != -1) {\r\n      get_char();\r\n    }\r\n    return cur != -1;\r\n  }\r\n \r\n  inline FastInput& operator>>(char& c) {\r\n    skip_blanks();\r\n    c = cur;\r\n    return *this;\r\n  }\r\n  \r\n  inline FastInput& operator>>(string& s) {\r\n    if (skip_blanks()) {\r\n      s.clear();\r\n      do {\r\n        s += cur;\r\n      } while (!is_blank(get_char()));\r\n    }\r\n    return *this;\r\n  }\r\n \r\n  template <typename T>\r\n  inline FastInput& read_integer(T& n) {\r\n    // unsafe, doesn't check that characters are actually digits\r\n    n = 0;\r\n    if (skip_blanks()) {\r\n      int sign = +1;\r\n      if (cur == '-') {\r\n        sign = -1;\r\n        get_char();\r\n      }\r\n      do {\r\n        n += n + (n << 3) + cur - '0';\r\n      } while (!is_blank(get_char()));\r\n      n *= sign;\r\n    }\r\n    return *this;\r\n  }\r\n \r\n  template <typename T>\r\n  inline typename enable_if<is_integral<T>::value, FastInput&>::type operator>>(T& n) {\r\n    return read_integer(n);\r\n  }\r\n  \r\n  #if !defined(_WIN32) || defined(_WIN64)\r\n  inline FastInput& operator>>(__int128& n) {\r\n    return read_integer(n);\r\n  }\r\n  #endif\r\n \r\n  template <typename T>\r\n  inline typename enable_if<is_floating_point<T>::value, FastInput&>::type operator>>(T& n) {\r\n    // not sure if really fast, for compatibility only\r\n    n = 0;\r\n    if (skip_blanks()) {\r\n      string s;\r\n      (*this) >> s;\r\n      sscanf(s.c_str(), \"%lf\", &n);\r\n    }\r\n    return *this;\r\n  }\r\n} fast_input;\r\n \r\n#define cin fast_input\r\n\r\nstatic struct FastOutput {\r\n  static constexpr int BUF_SIZE = 1 << 20;\r\n  char buf[BUF_SIZE];\r\n  size_t buf_pos = 0;\r\n  static constexpr int TMP_SIZE = 1 << 20;\r\n  char tmdp[TMP_SIZE];\r\n  FILE *out = stdout;\r\n \r\n  inline void put_char(char c) {\r\n    buf[buf_pos++] = c;\r\n    if (buf_pos == BUF_SIZE) {\r\n      fwrite(buf, 1, buf_pos, out);\r\n      buf_pos = 0;\r\n    }\r\n  }\r\n \r\n  inline void tie(int) {}\r\n\r\n  ~FastOutput() {\r\n    fwrite(buf, 1, buf_pos, out);\r\n  }\r\n \r\n  inline FastOutput& operator<<(char c) {\r\n    put_char(c);\r\n    return *this;\r\n  }\r\n \r\n  inline FastOutput& operator<<(const char* s) {\r\n    while (*s) {\r\n      put_char(*s++);\r\n    }\r\n    return *this;\r\n  }\r\n \r\n  inline FastOutput& operator<<(const string& s) {\r\n    for (int i = 0; i < (int) s.size(); i++) {\r\n      put_char(s[i]);\r\n    }\r\n    return *this;\r\n  }\r\n \r\n  template <typename T>\r\n  inline char* integer_to_string(T n) {\r\n    // beware of TMP_SIZE\r\n    char* p = tmdp + TMP_SIZE - 1;\r\n    if (n == 0) {\r\n      *--p = '0';\r\n    } else {\r\n      bool is_negative = false;\r\n      if (n < 0) {\r\n        is_negative = true;\r\n        n = -n;\r\n      }\r\n      while (n > 0) {\r\n        *--p = (char) ('0' + n % 10);\r\n        n /= 10;\r\n      }\r\n      if (is_negative) {\r\n        *--p = '-';\r\n      }\r\n    }\r\n    return p;\r\n  }\r\n \r\n  template <typename T>\r\n  inline typename enable_if<is_integral<T>::value, char*>::type stringify(T n) {\r\n    return integer_to_string(n);\r\n  }\r\n \r\n  #if !defined(_WIN32) || defined(_WIN64)\r\n  inline char* stringify(__int128 n) {\r\n    return integer_to_string(n);\r\n  }\r\n  #endif\r\n \r\n  template <typename T>\r\n  inline typename enable_if<is_floating_point<T>::value, char*>::type stringify(T n) {\r\n    sprintf(tmdp, \"%.17f\", n);\r\n    return tmdp;\r\n  }\r\n \r\n  template <typename T>\r\n  inline FastOutput& operator<<(const T& n) {\r\n    auto p = stringify(n);\r\n    for (; *p != 0; p++) {\r\n      put_char(*p);\r\n    }\r\n    return *this;\r\n  }\r\n} fast_output;\r\n \r\n#define cout fast_output\r\n#define endl '\\n'\r\n\r\n#define int long long\r\n#define pii pair<int, int>\r\n#define mp make_pair\r\n\r\n#define lc (o << 1)\r\n#define rc (o << 1 | 1)\r\n#define mid (l + r >> 1)\r\n\r\nconst int _ = 2e5 + 5;\r\nconst int mod = 998244353;\r\n\r\nint p[_], ph[_];\r\n\r\nint sm[_ << 2], ad[_ << 2], sh[_ << 2];\r\n\r\nvoid pushup(int o) {\r\n  sh[o] = sh[lc] + sh[rc];\r\n  sm[o] = sm[lc] + sm[rc];\r\n  return ;\r\n}\r\n\r\nvoid pushdown(int o) {\r\n  ad[lc] += ad[o];\r\n  ad[rc] += ad[o];\r\n  sm[lc] += sh[lc] * ad[o];\r\n  sm[rc] += sh[rc] * ad[o];\r\n  ad[o] = 0;\r\n  return ;\r\n}\r\n\r\nvoid build(int o, int l, int r) {\r\n  sm[o] = ad[o] = sh[o] = 0;\r\n  if (l == r) {\r\n    sh[o] = ph[l];\r\n    return ;\r\n  }\r\n  build(lc, l, mid);\r\n  build(rc, mid + 1, r);\r\n  pushup(o);\r\n  return ;\r\n}\r\n\r\nvoid update(int o, int l, int r, int L, int R, int v) {\r\n  if (L > R) return ;\r\n  if (L <= l && r <= R) {\r\n    sm[o] += sh[o] * v;\r\n    ad[o] += v;\r\n    return ;\r\n  }\r\n  pushdown(o);\r\n  if (L <= mid) update(lc, l, mid, L, R, v);\r\n  if (R > mid) update(rc, mid + 1, r, L, R, v);\r\n  pushup(o);\r\n  return ;\r\n}\r\n\r\nint query(int o, int l, int r, int L, int R) {\r\n  if (L <= l && r <= R) return sm[o];\r\n  int ret = 0;\r\n  pushdown(o);\r\n  if (L <= mid) ret += query(lc, l, mid, L, R);\r\n  if (R > mid) ret += query(rc, mid + 1, r, L, R);\r\n  pushup(o);\r\n  return ret;\r\n}\r\n\r\nint vis[_];\r\nint iv[_];\r\nint to[_];\r\nint n;\r\n\r\nvoid solve() {\r\n  iv[1] = 1;\r\n  int m = 0;\r\n  for (int i = 2; i <= 2e5 + 1; i++) {\r\n    iv[i] = (mod - mod / i) * iv[mod % i] % mod;\r\n  }\r\n  cin >> n;\r\n  for (int i = 1; i <= n; i++) {\r\n    cin >> p[i];\r\n    if (p[i] != -1) vis[p[i]] = i, m += 1;\r\n  }\r\n  for (int i = 1; i <= n; i++) {\r\n    ph[i] = p[i] == -1;\r\n  }\r\n  int sum = 0;\r\n  build(1, 1, n);\r\n  for (int i = 1; i <= n; i++) {\r\n    if (!vis[i]) {\r\n      int t = query(1, 1, n, 1, n) % mod;\r\n      sum = (sum + t * iv[n - m]) % mod;\r\n    }\r\n    else {\r\n      update(1, 1, n, 1, vis[i] - 1, 1);\r\n    }\r\n  }\r\n  build(1, 1, n);\r\n  for (int i = n; i >= 1; i--) {\r\n    if (!vis[i]) {\r\n      int t = query(1, 1, n, 1, n) % mod;\r\n      sum = (sum + t * iv[n - m]) % mod;\r\n    }\r\n    else {\r\n      update(1, 1, n, vis[i] + 1, n, 1);\r\n    }\r\n  }\r\n  for (int i = 1; i <= n; i++) ph[i] = 1;\r\n  build(1, 1, n);\r\n  for (int i = 1; i <= n; i++) {\r\n    if (vis[i]) {\r\n      update(1, 1, n, 1, vis[i] - 1, 1);\r\n      int t = query(1, 1, n, vis[i], vis[i]) % mod;\r\n      sum = (sum + t) % mod;\r\n    }\r\n  }\r\n  int st = (n - m) * (n - m - 1) / 2 % mod;\r\n  st = st * iv[2] % mod;\r\n  cout << (sum + st) % mod << endl;\r\n  return ;\r\n}\r\n\r\nsigned main() {\r\n  #ifdef Sakuyalove\r\n    freopen(\"in.in\", \"r\", stdin);\r\n    freopen(\"out.out\", \"w\", stdout);\r\n  #endif\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n  int T = 1;\r\n  // cin >> T;\r\n  for (int t_t = 1; t_t <= T; t_t++) solve();\r\n  return 0;\r\n}\r\n"
}