{
    "id": 174796643,
    "contestId": 1096,
    "creationTimeSeconds": 1665017354,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\nimport java.util.*;\n\npublic class M {\n\tstatic final int N = (int)3e5 + 7;\n\tstatic final long mod = 998244353;\n\tstatic long bM(long n, long p) {\n\t\tif(p == 0) return 1;\n\t\tif(p % 2 == 0) {\n\t\t\tlong ret = bM(n, p / 2);\n\t\t\treturn ret * ret % mod;\n\t\t}\n\t\treturn n * bM(n, p - 1) % mod;\n\t}\n\tstatic int[] bit = new int[N];\n\tstatic void upd(int id) {\n\t\tfor (int i = id; i < N; i += i&(-i)) {\n\t\t\tbit[i]++;\n\t\t}\n\t}\n\tstatic int qry(int id) {\n\t\tint rt = 0;\n\t\tfor (int i = id; i > 0; i -= i&(-i)) {\n\t\t\trt += bit[i];\n\t\t}\n\t\treturn rt;\n\t}\n\tpublic static void main(String[] args) {\n\t\t//Scanner sc = new Scanner(System.in);\n\t\tFastScanner fs = new FastScanner();\n\t\tPrintWriter out = new PrintWriter(System.out);\n\t\tint T , cs=0;\n\t\tlong n = fs.nextInt(), ng = 0;\n\t\tlong res = 0, xx = 0;\n\t\tint[] a = new int[(int)n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ta[i] = fs.nextInt();\n\t\t\tif(a[i] > 0) {\n\t\t\t\txx = (xx + (a[i] - 1)) % mod;\n\t\t\t\tupd(a[i]);\n\t\t\t\tlong tmp = (i + 1 - ng) - qry(a[i]);\n\t\t\t\txx = (xx - tmp + mod) % mod;\n\t\t\t\tres = (res + tmp) % mod;\n\t\t\t\tres = (res + (n - a[i] - tmp) * 1l * ng % mod) % mod;\n\t\t\t}\t\n\t\t\telse {\n\t\t\t\tres = (res + xx) % mod;\n\t\t\t\tng++;\n\t\t\t}\n\t\t}\n\t\tlong fct = 1;\n\t\tfor (int i = 2; i <= ng; i++) {\n\t\t\tfct = fct * (i) % mod;\n\t\t\tlong tmp = ng * (ng - 1) / 2;\n\t\t\ttmp = (tmp * (i - 1)) % mod;\n\t\t\tres = (res + tmp) % mod;\n\t\t}\n\t\t// dbg(res);\n\t\tres = res * bM(fct, mod - 2) % mod;\n\t\tout.println(res);\n\t\tout.close();\n\t}\n\n\tpublic static void dbg(Object... o){\n\t\tSystem.err.print(\"Line #\"+Thread.currentThread().getStackTrace()[2].getLineNumber() + \": \");\n\t\tSystem.err.println(Arrays.deepToString(o));\n\t}\n\n\tstatic class FastScanner {\n\t\tBufferedReader br=new BufferedReader(new InputStreamReader(System.in));\n\t\tStringTokenizer st=new StringTokenizer(\"\");\n\t\tString next() {\n\t\t\twhile (!st.hasMoreTokens()) {\n\t\t\t\ttry {\n\t\t\t\t\tst=new StringTokenizer(br.readLine());\n\t\t\t\t} \n\t\t\t\tcatch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn st.nextToken();\n\t\t}\n\n\t\tint nextInt() {\n\t\t\treturn Integer.parseInt(next());\n\t\t}\n\t\tint[] readArray(int n) {\n\t\t\tint[] a=new int[n];\n\t\t\tfor (int i=0; i<n; i++)\n\t\t\t\ta[i]=nextInt();\n\t\t\treturn a;\n\t\t}\n\t\tlong nextLong() {\n\t\t\treturn Long.parseLong(next());\n\t\t}\n\t}\n}\n\t    \t \t  \t     \t \t\t \t\t \t\t \t\t \t"
}