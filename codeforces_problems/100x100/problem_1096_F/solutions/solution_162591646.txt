{
    "id": 162591646,
    "contestId": 1096,
    "creationTimeSeconds": 1656802402,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1096,
        "index": "F",
        "name": "Inversion Expectation",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1096,
        "members": [
            {
                "handle": "tamajitbuba"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546007700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 9830400,
    "source": "#include <bits/stdc++.h>\r\n#define fast ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)\r\n#define pb push_back\r\n#define endl '\\n'\r\n#define MOD 1000000007\r\n#define MOD2 998244353\r\n \r\nusing namespace std;\r\ntypedef long long int ll;\r\n \r\nll mpow(ll a, ll n, ll m = MOD2)\r\n{\r\n\tll r = 1;\r\n\twhile (n)\r\n\t{\r\n\t\tif (n&1) r = (r*a)%m;\r\n\t\ta = (a*a)%m;\r\n\t\tn >>= 1;\r\n\t}\r\n\treturn r;\r\n}\r\n \r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\nusing namespace __gnu_pbds;\r\n \r\nusing ordered_set = tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>;\r\n \r\nint main(void)\r\n{\r\n\tfast;\r\n\t#ifndef ONLINE_JUDGE\r\n\tfreopen(\"in\", \"r\", stdin);\r\n\tfreopen(\"out\", \"w\", stdout);\r\n\t#endif\r\n \r\n\tint n; cin >> n;\r\n\tll p[n], k = 0;\r\n\tordered_set s, other;\r\n\tll inv = 0;\r\n\tfor (int i = 1; i <= n; ++i)\r\n\t{\r\n\t\tother.insert(i);\r\n\t}\r\n\tfor (int i = 0; i < n; ++i)\r\n\t{\r\n\t\tcin >> p[i];\r\n\t\tif (p[i] == -1)\r\n\t\t\t++k;\r\n\t\telse\r\n\t\t{\r\n\t\t\tinv += s.size() - s.order_of_key(p[i]);\r\n\t\t\ts.insert(p[i]);\r\n\t\t\tother.erase(p[i]);\r\n\t\t}\r\n\t}\r\n \r\n\tll den = 1, fac = 1;\r\n\tll minus = 1;\r\n\tfor (int i = 2; i <= k; ++i)\r\n\t{\r\n\t\tfac = (1LL*fac*i)%MOD2;\r\n\t\tif (i < k) minus = (1LL*minus*i)%MOD2;\r\n\t}\r\n\tden = mpow(fac, MOD2-2);\r\n \r\n\tinv = (inv*fac)%MOD2;\r\n \r\n\tll rem = k;\r\n \r\n\tll num = inv;\r\n\tll add;\r\n\tif (k >= 4)\r\n\t{\r\n\t\tadd = (fac*mpow(4, MOD2-2))%MOD2;\r\n\t\tadd = (add*k)%MOD2;\r\n\t\tadd = (add*(k-1))%MOD2;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tadd = fac*k*(k-1)/4;\r\n\t}\r\n\tnum = num + add;\r\n\tnum %= MOD2;\r\n \r\n\tfor (int i = 0; i < n; ++i)\r\n\t{\r\n\t\tif (p[i] == -1) --rem;\r\n\t\telse\r\n\t\t{\r\n\t\t\tll tot = other.order_of_key(p[i]);\r\n\t\t\tadd = (tot*rem)%MOD2;\r\n\t\t\tadd = (add*minus)%MOD2;\r\n\t\t\tnum = num + add;\r\n\t\t\tnum %= MOD2;\r\n \r\n\t\t\ttot = other.size() - tot;\r\n\t\t\tadd = (tot*(k-rem))%MOD2;\r\n\t\t\tadd = (add*minus)%MOD2;\r\n\t\t\tnum = num + add;\r\n\t\t\tnum %= MOD2;\r\n\t\t}\r\n\t}\r\n\tcout << (num*den)%MOD2;\r\n}\r\n"
}