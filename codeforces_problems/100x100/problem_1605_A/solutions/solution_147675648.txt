{
    "id": 147675648,
    "contestId": 1605,
    "creationTimeSeconds": 1645803280,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1605,
        "index": "A",
        "name": "A.M. Deviation",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1605,
        "members": [
            {
                "handle": "prabhat012"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1636727700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "\r\n #include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\n// DIJSKTRA IN 2d MATRIX ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n /*const int N =  3;\r\n    int n;\r\n    int dist[N][N];\r\n      int cost[N][N];\r\n       int vis[N][N];\r\n\r\n  vector <  pair < int , int >   > g[N];\r\n    vector < pair < int  , int >>  directions = {\r\n         {-1, 0},\r\n         { 1, 0},\r\n         {0, -1},\r\n         {0, 1}\r\n     };\r\n\r\n   void  dijsktra(){\r\n      map<int , pair < int , int  >> s;\r\n       s.insert({cost[0][0], {0, 0}});\r\n       dist[0][0] = cost[0][0];\r\n        while(s.size()  >  0){\r\n              auto node  = *(s.begin());\r\n              int   w = node.first; \r\n              int x = node.second.first;\r\n              int  y = node.second.second;\r\n              s.erase(s.begin());\r\n                if(x ==  n-1  && y ==  n -1) cout<< w << endl;\r\n               if(vis[x][y] ==  1) continue;\r\n               vis[x][y] = 1;\r\n               for(auto child : directions){\r\n                 int nx = x + child.first;\r\n                  int ny = y + child.second;\r\n                   if(nx  < 0 || ny < 0  || nx >= n || ny  >= n) continue;\r\n                   int c = cost[nx][ny];\r\n                  if(c  ==  1000) continue;\r\n                   if(c  + dist[x][y]< dist[nx][ny] ){\r\n                      dist[nx][ny] = c + dist[x][y] ;\r\n                        s.insert({dist[nx][ny], {nx, ny}});\r\n                   }\r\n\r\n               }\r\n        }\r\n   }*/\r\n  \r\n\r\n  // DIJKSTRA ON 1D MATRIX,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n \r\n /*nt n, m;\r\n const int N = 1e5+10;\r\n const int INF = 1e9+10;\r\n vector < pair < int, int >  > g[N];\r\n      vector <   int > dist(N, INF);\r\n vector < int  > vis(N, 0);\r\n\r\n     void  dijsktra(int source){\r\n       set< pair < int , int >   > st;\r\n      st.insert({0, source});\r\n          dist[source] = 0;\r\n          while(st.size() > 0){\r\n            auto node = *(st.begin());\r\n            int dis = node.first;\r\n            int v = node.second;\r\n            st.erase(st.begin()); \r\n            if(vis[v] == 1) continue;\r\n            vis[v] = 1;\r\n             for(auto child : g[v]){\r\n   int child_v =  child.first;\r\n   int child_wt = child.second;\r\n   if( dist[v] +  child_wt < dist[child_v]){\r\n       dist[child_v] = dist[v] + child_wt;\r\n        st.insert({dist[child_v] , child_v});\r\n   }\r\n             }\r\n         }\r\n       }\r\n*/\r\n\r\n/*void print(int num){\r\nfor(int i = 10; i>= 0; i--){\r\n  cout<< ((num>> i) & 1);\r\n}\r\ncout << endl;\r\n}\r\n\r\n\r\n    \r\n*/\r\n/* const  int N = 1e5+10;\r\n   const long long int INF = 1e9+10;\r\n    vector < pair < int , int >  > g[N];\r\n   vector < int > vis(N, 0);\r\n     vector <  long long  int  > dis(N, INF);\r\n vector < int > par(N, -1);\r\n  long long int len = 0;\r\n\r\n   void dijsktra(){\r\n     set< pair < int , int >> s;\r\n     s.insert({0, 1});\r\n      dis[1] = 0;\r\n      while(s.size()  > 0){\r\n      auto    node = *(s.begin());\r\n     int nw =   node.first;\r\n      int nc = node.second;\r\n       s.erase(s.begin());\r\n     if(vis[nc] == 1) continue;\r\n      vis[nc] = 1;\r\n       for(auto child : g[nc]){\r\n        int c = child.first;\r\n        int w = child.second;\r\n        if(dis[c]  > dis[nc] + w){\r\n         dis[c] = dis[nc] + w;\r\n         dis[c]  = dis[c] % INF;\r\n           par[c] = nc;\r\n          s.insert({dis[c] , c});\r\n        }\r\n         \r\n       }\r\n      }\r\n   }\r\n      void print_path(int  node){\r\n        if(par[node]==-1){\r\n          cout<<node;\r\n           return;\r\n    }\r\n\r\n     print_path(par[node]);\r\n    cout<<\" \"<<node;\r\n  }\r\n   */\r\n /*const int maxn = 200010;\r\nlong long int arr[maxn];\r\n const  int  N = 1e5+10;\r\n  vector < int > parent(N);\r\n       vector < int >size(N);\r\n   multiset< int > sizes;\r\n         \r\n        void make(int  v){\r\n    parent[v] = v;\r\n     size[v] = 1;\r\n      sizes.insert(1);\r\n\r\n      }\r\n  int find(int v){\r\n   if(parent[v]   == v ) return v;\r\n    // path compression ... \r\n    return parent[v] = find(parent[v]);\r\n  }\r\n\r\n  void merge(int a, int b){\r\n   auto it  = sizes.find(size[a]);\r\n    sizes.erase(it);\r\n     auto it2 = sizes.find(size[b]);\r\n      sizes.erase(it2);\r\n       sizes.insert(size[a] + size[b]);\r\n  }\r\n\r\n   void Union (int a, int b){\r\n     a = find(a);\r\n     b =  find(b);\r\n      if( a  !=  b){\r\n        if(size[a]  <  size[b]) swap(a, b);\r\n         parent[b] = a;\r\n          merge(a, b);\r\n          size[a] +=  size[b];\r\n      }\r\n   }*/\r\n    \r\n  void solve (){\r\n         ll a,b,c;\r\n          cin>> a>> b>> c;\r\n            if(abs(a+c -(2*b)) %  3  == 0) cout<< 0 << endl;\r\n            else{\r\n               cout<< 1 << endl;\r\n            }\r\n  }\r\n\r\n\r\n\r\n\r\n          int main(){\r\n    /* cout<< (1|2) << endl;\r\n       int n; \r\n     cin>> n;\r\n\r\n     for(int  i =1; i<= n; i++){\r\n       make(i);\r\n     }  \r\n      int q; \r\n       cin>> q;\r\n        while(q--){\r\n           int u, v;\r\n            cin>> u >> v;\r\n             Union(u, v);\r\n              if(sizes.size() == 1) cout << 0 << endl;\r\n                 else{\r\n                    int minimum = *(sizes.begin());\r\n                     int maximum  = *(--sizes.end());\r\n                      cout<< maximum - minimum << endl;\r\n                 }\r\n        } \r\n         */\r\n int t;\r\n  cin>> t;\r\n     while(t--){\r\n     solve();\r\n   }\r\n}\r\n      \r\n"
}