{
    "id": 203051465,
    "contestId": 710,
    "creationTimeSeconds": 1682171388,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 710,
        "index": "B",
        "name": "Optimal Point on a Line",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "brute force",
            "sortings"
        ]
    },
    "author": {
        "contestId": 710,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1471875000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\nimport java.util.*;\n\npublic class Main {\n\tpublic static void solve(IO io) {\n\t\tint n = io.getInt();\n\t\t\n\t\tInteger [] a = new Integer[n];\n\t\tfor(int i =0;i < n; i++) {\n\t\t\ta[i] = io.getInt();\n\t\t\t\n\t\t}\n\t\t\n\t\tArrays.sort(a);\n\t\t\n\t\tSystem.out.println(a[(n-1)/2]);\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tIO io = new IO();\n\t\tsolve(io);\n\t\tio.close();\n\t}\n\n\tstatic class IO extends PrintWriter {\n\n\t\tpublic IO() {\n\t\t\tsuper(new BufferedOutputStream(System.out));\n\t\t\tr = new BufferedReader(new InputStreamReader(System.in));\n\t\t}\n\n\t\tpublic IO(InputStream i) {\n\t\t\tsuper(new BufferedOutputStream(System.out));\n\t\t\tr = new BufferedReader(new InputStreamReader(i));\n\t\t}\n\n\t\tpublic IO(InputStream i, OutputStream o) {\n\t\t\tsuper(new BufferedOutputStream(o));\n\t\t\tr = new BufferedReader(new InputStreamReader(i));\n\t\t}\n\n\t\tpublic boolean hasMoreTokens() {\n\t\t\treturn peekToken() != null;\n\t\t}\n\n\t\tpublic int getInt() {\n\t\t\treturn Integer.parseInt(nextToken());\n\t\t}\n\n\t\tpublic double getDouble() {\n\t\t\treturn Double.parseDouble(nextToken());\n\t\t}\n\n\t\tpublic long getLong() {\n\t\t\treturn Long.parseLong(nextToken());\n\t\t}\n\n\t\tpublic String getWord() {\n\t\t\treturn nextToken();\n\t\t}\n\n\t\tprivate BufferedReader r;\n\t\tprivate String line;\n\t\tprivate StringTokenizer st;\n\t\tprivate String token;\n\n\t\tprivate String peekToken() {\n\t\t\tif (token == null)\n\t\t\t\ttry {\n\t\t\t\t\twhile (st == null || !st.hasMoreTokens()) {\n\t\t\t\t\t\tline = r.readLine();\n\t\t\t\t\t\tif (line == null)\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tst = new StringTokenizer(line);\n\t\t\t\t\t}\n\t\t\t\t\ttoken = st.nextToken();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t}\n\t\t\treturn token;\n\t\t}\n\n\t\tprivate String nextToken() {\n\t\t\tString ans = peekToken();\n\t\t\ttoken = null;\n\t\t\treturn ans;\n\t\t}\n\t}\n}\n\n \t\t   \t \t\t\t \t \t\t\t \t\t \t\t \t\t  \t\n  \t\t\t    \t\t     \t\t\t\t  \t\t  \t  \t"
}