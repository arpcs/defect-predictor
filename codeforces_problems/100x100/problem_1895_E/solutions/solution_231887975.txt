{
    "id": 231887975,
    "contestId": 1895,
    "creationTimeSeconds": 1699422184,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Chikku_Brohit"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    \r\n    while (t--) {\r\n        int n, m;\r\n        cin >> n;\r\n        vector<int> ax(n), ay(n);\r\n        for (int i = 0; i < n; i++) {\r\n            cin >> ax[i];\r\n        }\r\n        for (int i = 0; i < n; i++) {\r\n            cin >> ay[i];\r\n        }\r\n        \r\n        cin >> m;\r\n        vector<int> bx(m), by(m);\r\n        for (int i = 0; i < m; i++) {\r\n            cin >> bx[i];\r\n        }\r\n        for (int i = 0; i < m; i++) {\r\n            cin >> by[i];\r\n        }\r\n        \r\n        int max_monocarp_wins = 0;\r\n        int max_draws = 0;\r\n        int max_bicarp_wins = 0;\r\n        \r\n        for (int i = 0; i < n; i++) {\r\n            int monocarp_wins = 0;\r\n            int draws = 0;\r\n            int bicarp_wins = 0;\r\n            \r\n            for (int j = 0; j < m; j++) {\r\n                if (ax[i] > by[j]) {\r\n                    monocarp_wins = max(monocarp_wins, 1 + max_bicarp_wins);\r\n                }\r\n                else if (ay[i] <= bx[j]) {\r\n                    bicarp_wins = max(bicarp_wins, 1 + max_monocarp_wins);\r\n                }\r\n                else {\r\n                    draws = max(draws, 1 + max_draws);\r\n                }\r\n            }\r\n            \r\n            max_monocarp_wins = max(max_monocarp_wins, monocarp_wins);\r\n            max_draws = max(max_draws, draws);\r\n            max_bicarp_wins = max(max_bicarp_wins, bicarp_wins);\r\n        }\r\n        \r\n        cout << max_monocarp_wins << \" \" << max_draws << \" \" << max_bicarp_wins << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n"
}