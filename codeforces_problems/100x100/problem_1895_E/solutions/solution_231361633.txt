{
    "id": 231361633,
    "contestId": 1895,
    "creationTimeSeconds": 1699115006,
    "relativeTimeSeconds": 506,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "hailumahlet757"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1699114500
    },
    "programmingLanguage": "Python 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "def calculate_outcomes(t, test_cases):\r\n    results = []\r\n\r\n    for _ in range(t):\r\n        n, ax, ay, m, bx, by = test_cases[_]\r\n\r\n        max_attack = max(ax)\r\n        min_defense = min(by)\r\n\r\n        draw = 0\r\n        win_m = 0\r\n        win_b = 0\r\n\r\n        for i in range(n):\r\n            if ax[i] > min_defense:\r\n                win_m += 1\r\n            elif ax[i] <= min_defense:\r\n                draw += 1\r\n\r\n        for i in range(m):\r\n            if bx[i] > max_attack:\r\n                win_b += 1\r\n\r\n        results.append((win_m, draw, win_b))\r\n\r\n    return results\r\n\r\nt = int(input())\r\ntest_cases = []\r\n\r\nfor _ in range(t):\r\n    n = int(input())\r\n    ax = list(map(int, input().split()))\r\n    ay = list(map(int, input().split()))\r\n    m = int(input())\r\n    bx = list(map(int, input().split()))\r\n    by = list(map(int, input().split()))\r\n\r\n    test_cases.append((n, ax, ay, m, bx, by))\r\n\r\nresults = calculate_outcomes(t, test_cases)\r\n\r\nfor result in results:\r\n    print(result[0], result[1], result[2])\r\n"
}