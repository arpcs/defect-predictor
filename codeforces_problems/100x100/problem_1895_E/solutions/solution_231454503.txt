{
    "id": 231454503,
    "contestId": 1895,
    "creationTimeSeconds": 1699184328,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "VasyaMer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// #pragma comment(linker, \"/stack:200000000\")\r\n// #pragma GCC optimize(\"Ofast\")\r\n// #pragma GCC optimize(\"O3,unroll-loops\")\r\n// #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4\")\r\n// #pragma GCC target(\"avx2,bmi,bmi2,popcnt,lzcnt\")\r\n\r\n// #define _GLIBCXX_DEBUG\r\n// #define _GLIBCXX_DEBUG_PEDANTIC\r\n\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <map>\r\n#include <set>\r\n#include <array>\r\n#include <numeric>\r\n#include <queue>\r\n#include <deque>\r\n#include <cmath>\r\n#include <climits>\r\n// #include <ext/pb_ds/assoc_container.hpp> \r\n// #include <ext/pb_ds/tree_policy.hpp>\r\n// #include <ext/rope>\r\n\r\n// using namespace __gnu_pbds;\r\n// using namespace __gnu_cxx;\r\nusing namespace std;\r\n\r\n\r\nconst int MOD = 998244353;\r\nconst long double PI = 3.141592653589793;\r\nusing ll = long long;\r\nconst ll INF = 1e18;\r\n\r\n#define int ll\r\n\r\n// template<typename T>\r\n// using ordered_set = tree<T,null_type,less<T>,rb_tree_tag,tree_order_statistics_node_update>;\r\n\r\n// template<typename K, typename V>\r\n// using hash_table = cc_hash_table<K, V, hash<K>>;\r\n\r\ntemplate<typename T>\r\nusing graph = vector<vector<T>>;\r\n\r\ntemplate<typename T>\r\nistream& operator>>(istream& in, vector<T>& a) {\r\n    for (auto& i: a) {\r\n        in >> i;\r\n    }\r\n    return in;\r\n}\r\n\r\ntemplate<typename T>\r\nostream& operator<<(ostream& out, vector<T>& a) {\r\n    for (auto& i: a) {\r\n        out << i << \" \";\r\n    }\r\n    return out;\r\n}\r\n\r\nll fast_pow(ll a, ll b, ll mod) {\r\n    if (b == 0)\r\n        return 1;\r\n    if (b % 2) {\r\n        return (1ll * a * fast_pow(a, b - 1, mod)) % mod;\r\n    }\r\n    ll k = fast_pow(a, b / 2, mod);\r\n    return (1ll * k * k) % mod;\r\n}\r\n\r\nll fast_pow(ll a, ll b) {\r\n    if (b == 0)\r\n        return 1;\r\n    if (b % 2) {\r\n        return (1ll * a * fast_pow(a, b - 1));\r\n    }\r\n    ll k = fast_pow(a, b / 2);\r\n    return (1ll * k * k);\r\n}\r\nint n, m;\r\nvector<pair<int, int>> a[2];\r\nvector<int> used[2];\r\nvector<int> res[2];\r\nvector<int> best[2];\r\nvoid dfs(int pl, int id) {\r\n\tif (used[pl][id] == 2)\treturn;\r\n\tif (used[pl][id] == 1) {\t\r\n\t\tres[pl][id] = 1;\r\n\t\treturn;\r\n\t}\r\n\tused[pl][id] = 1;\r\n\tint mx = best[pl][id];\r\n\t\r\n\tif (mx == -1) {\r\n\t\tres[pl][id] = 2;\r\n\t\tused[pl][id] = 2;\r\n\t\t// cerr << \"Win)\\n\";\r\n\t\treturn;\r\n\t}\r\n\tdfs(!pl, mx);\r\n\tres[pl][id] = 2 - res[!pl][mx];\r\n\tused[pl][id] = 2;\r\n}\r\n\r\nvoid solve() {\r\n\tcin >> n;\r\n\ta[0].assign(n, {});\r\n\tused[0].assign(n, {});\r\n\tres[0].assign(n, {});\r\n\tset<int> all;\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tcin >> a[0][i].first;\r\n\t}\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tcin >> a[0][i].second;\r\n\t}\r\n\tcin >> m;\r\n\ta[1].assign(m, {});\r\n\tused[1].assign(m, {});\r\n\tres[1].assign(m, {});\r\n\tfor (int i = 0; i < m; i++) {\r\n\t\tcin >> a[1][i].first;\r\n\t}\r\n\tfor (int i = 0; i < m; i++) {\r\n\t\tcin >> a[1][i].second;\r\n\t}\r\n\r\n\tsort(a[0].begin(), a[0].end(), [&](auto i, auto j) {\r\n\t\treturn pair{i.second, i.first} < pair{j.second, j.first};\r\n\t});\r\n\tsort(a[1].begin(), a[1].end(), [&](auto i, auto j) {\r\n\t\treturn pair{i.second, i.first} < pair{j.second, j.first};\r\n\t});\r\n\tfor (int k = 0; k <= 1; k++) {\r\n\t\tbest[k].assign(a[k].size(), -1);\r\n\t\tset<pair<pair<int, int>, int>> aa;\r\n\t\tfor (int i = 0; i < m; i++) {\r\n\t\t\taa.insert({a[!k][i], i});\r\n\t\t}\r\n\t\tpair<int, int> B = {0, -1};\r\n\t\tfor (int i = (int)a[k].size() - 1; i >= 0; i--) {\r\n\t\t\twhile (!aa.empty() && aa.rbegin()->first.first > a[k][i].second) {\r\n\t\t\t\tB = max(B, {aa.rbegin()->first.second, aa.rbegin()->second});\r\n\t\t\t\taa.erase(prev(aa.end()));\r\n\t\t\t}\r\n\r\n\t\t\t// cerr << \"Best \" << k << \" \" << i << \" \" << B.first << \" \" << B.second << endl;\r\n\t\t\tbest[k][i] = B.second;\r\n\t\t}\r\n\t}\r\n\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tif (!used[0][i]) {\r\n\t\t\tdfs(0, i);\r\n\t\t}\r\n\t}\r\n\tint win = 0;\r\n\tint lose = 0;\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tif (res[0][i] == 0)\r\n\t\t\tlose++;\r\n\t\telse if (res[0][i] == 2)\r\n\t\t\twin++;\r\n\t}\r\n\tcout << win << \" \" << n - lose - win << \" \" << lose << \"\\n\";\r\n}\r\n\r\nint32_t main(int32_t argc, const char * argv[]) {\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n\tios_base::sync_with_stdio(0);\r\n    // insert code here...\r\n    int tt= 1;\r\n    std::cin >> tt;\r\n    while (tt--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}