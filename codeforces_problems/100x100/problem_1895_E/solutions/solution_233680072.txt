{
    "id": 233680072,
    "contestId": 1895,
    "creationTimeSeconds": 1700567299,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "adam01"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 10854400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nconst int N = 3e5 + 5;\r\nint f[N][2];\r\nstruct node\r\n{\r\n    int s, t;\r\n    const bool operator<(node x) const {return s == x.s ? t < x.t : s < x.s;}\r\n}a[2][N];\r\nint mx[2][N], n[2];\r\nbool vis[N][2], vd[N][2];\r\nint dfs(int x, int y)\r\n{\r\n    // cerr << x << \" \" << y << \"\\n\";\r\n    if(vis[x][y]) return -1;\r\n    if(vd[x][y]) return f[x][y];\r\n    vd[x][y] = 1;\r\n    int k = lower_bound(a[y ^ 1] + 1, a[y ^ 1] + n[y ^ 1] + 1, (node){a[y][x].t + 1, 0}) - a[y ^ 1];\r\n    // cerr << a[y][x].t << \" \" << k << endl;\r\n    if(k > n[y ^ 1])\r\n    {\r\n        f[x][y] = 1;\r\n        return 1;\r\n    }\r\n    int w = mx[y ^ 1][k];\r\n    vis[x][y] = 1;\r\n    f[x][y] = dfs(w, y ^ 1) ^ 1;\r\n    vis[x][y] = 0;\r\n    return f[x][y];\r\n}\r\n\r\nvoid solve()\r\n{\r\n    for(int k : {0, 1})\r\n    {\r\n        cin >> n[k];\r\n        for(int i = 1; i <= n[k]; i ++) cin >> a[k][i].s;\r\n        for(int i = 1; i <= n[k]; i ++) cin >> a[k][i].t;\r\n        sort(a[k] + 1, a[k] + n[k] + 1);\r\n        mx[k][n[k] + 1] = 0;\r\n        for(int i = n[k]; i >= 1; i --)\r\n        {\r\n            mx[k][i] = mx[k][i + 1];\r\n            if(a[k][i].t > a[k][mx[k][i]].t) mx[k][i] = i;\r\n        }\r\n    }\r\n    // memset(f, -1, sizeof f);\r\n    memset(vd[0], 0, sizeof (int) * (n[0] + 4));\r\n    memset(vd[1], 0, sizeof (int) * (n[1] + 4));\r\n    for(int k : {0, 1})\r\n    {\r\n        for(int i = 1; i <= n[k]; i ++)\r\n            if(!vd[i][k]) dfs(i, k);\r\n    }\r\n    for(int i = 0; i <= 1; i ++) for(int j = 1; j <= n[i]; j ++) assert(!vis[j][i]);\r\n    \r\n    int c1 = 0, c2 = 0, c3 = 0;\r\n    for(int i = 1; i <= n[0]; i ++)\r\n    {\r\n        if(f[i][0] < 0) c2 ++;\r\n        if(f[i][0] == 0) c3 ++;\r\n        if(f[i][0] == 1) c1 ++;\r\n        // cerr << f[i][0] << \" \";\r\n    }\r\n    cout << c1 << \" \" << c2 << \" \" << c3 << \"\\n\";\r\n}\r\n\r\nsigned main()\r\n{\r\n    ios::sync_with_stdio(0);cin.tie(0);\r\n    int t;cin >> t;while(t --) solve();\r\n    \r\n    return 0;\r\n}"
}