{
    "id": 232002536,
    "contestId": 1895,
    "creationTimeSeconds": 1699486076,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "NekoYellow"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nconst char nl = '\\n';\r\n\r\nstruct card {\r\n    int x, y;\r\n};\r\n\r\nbool operator<(const card& c1, const card& c2) {\r\n    return c1.x < c2.x;\r\n}\r\n\r\nint bisect_right(const vector<card>& a, int k) {\r\n    int l = 0, r = a.size()-1;\r\n    while (l < r) {\r\n        int mid = (l + r) >> 1;\r\n        if (k < a[mid].x) r = mid;\r\n        else l = mid + 1;\r\n    }\r\n    if (l < a.size() && a[l].x <= k) l++; // not found, l = a.size()\r\n    return l;\r\n}\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    vector<card> a(n);\r\n    for (int i = 0; i < n; i++) cin >> a[i].x;\r\n    for (int i = 0; i < n; i++) cin >> a[i].y;\r\n    sort(a.begin(), a.end());\r\n    int m;\r\n    cin >> m;\r\n    vector<card> b(m);\r\n    for (int i = 0; i < m; i++) cin >> b[i].x;\r\n    for (int i = 0; i < m; i++) cin >> b[i].y;\r\n    sort(b.begin(), b.end());\r\n\r\n    vector<int> aym(n+1, 0), bym(m+1, 0); // suffix-maximum defenses\r\n    for (int i = n; i > 0; i--) {\r\n        aym[i-1] = max(aym[i], a[i-1].y);\r\n    }\r\n    for (int j = m; j > 0; j--) {\r\n        bym[j-1] = max(bym[j], b[j-1].y);\r\n    }\r\n\r\n    // int bxm = 0;\r\n    // for (int j = 0; j < m; j++) {\r\n    //     bxm = max(bxm, b[j].x);\r\n    // }\r\n    int win = 0, lose = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        int j = bisect_right(b, a[i].y);\r\n        // cout << 'j' << j << ' ';\r\n        if (j == m) {\r\n            win++;\r\n            continue;\r\n        }\r\n        int k = bisect_right(a, bym[j]);\r\n        // cout << 'k' << k << ' ';\r\n        if (k == n) {\r\n            lose++;\r\n            continue;\r\n        }\r\n        if (bisect_right(b, aym[k]) == m) win++;\r\n\r\n    }\r\n\r\n    // int axm = 0;\r\n    // for (int i = 0; i < n; i++) {\r\n    //     axm = max(axm, a[i].x);\r\n    // }\r\n    // bxm = 0;\r\n    // for (int j = 0; j < m; j++) {\r\n    //     if (b[j].y >= axm) bxm = max(bxm, b[j].x);\r\n    // }\r\n    // int lose = 0;\r\n    // for (int i = 0; i < n; i++) {\r\n    //     if (a[i].y < bxm) lose++;\r\n    // }\r\n\r\n    cout << win << ' ' << n - win - lose << ' ' << lose << nl;\r\n}\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}