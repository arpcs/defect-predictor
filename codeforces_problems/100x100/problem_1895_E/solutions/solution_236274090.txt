{
    "id": 236274090,
    "contestId": 1895,
    "creationTimeSeconds": 1701994211,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "luogu_bot3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 468,
    "memoryConsumedBytes": 10240000,
    "source": "// LUOGU_RID: 138636092\n#include <cstdio>\r\n#include <cstring>\r\n#include <cctype>\r\n#include <algorithm>\r\n#include <iostream>\r\n#include <queue>\r\ntypedef long long LL;\r\nusing namespace std;\r\ninline int read() {\r\n    int num = 0 ,f = 1; char c = getchar();\r\n    while (!isdigit(c)) f = c == '-' ? -1 : f ,c = getchar();\r\n    while (isdigit(c)) num = (num << 1) + (num << 3) + (c ^ 48) ,c = getchar();\r\n    return num * f;\r\n}\r\nconst int N = 3e5 + 5;\r\nstruct node {\r\n    int id ,atk ,aty;\r\n    node (int id = 0 ,int atk = 0 ,int aty = 0) : id(id) ,atk(atk) ,aty(aty) {}\r\n    friend bool operator < (const node &a ,const node &b) {\r\n        return a.atk < b.atk;\r\n    }\r\n}a[2][N];\r\nint n ,m ,f[2][N]; bool ins[2][N];\r\ninline int mika_dp(int s ,int i) {\r\n    if (f[s][i] != -1) return f[s][i];\r\n    if (ins[s][i]) return f[s][i] = 2;\r\n    ins[s][i] = true;\r\n    int nowaty = a[s][i].aty;\r\n    int p = upper_bound(a[s ^ 1] + 1 ,a[s ^ 1] + (s ? n : m) + 1 ,node(0 ,nowaty ,0)) - a[s ^ 1];\r\n    p = a[s ^ 1][p].id;\r\n    if (a[s ^ 1][p].atk <= nowaty) return ins[s][i] = 0 ,f[s][i] = 1;\r\n    int tres = mika_dp(s ^ 1 ,p);\r\n    if (tres != 2) tres ^= 1;\r\n    ins[s][i] = false;\r\n    return f[s][i] = tres;\r\n}\r\ninline void mika_init(node a[] ,int n) {\r\n    sort(a + 1 ,a + n + 1);\r\n    for (int i = n ,sufmax = 0 ,sufatk = 0; i >= 1; i--) {\r\n        if (a[i].aty > sufmax || (a[i].aty == sufmax && a[i].atk > sufatk)) a[i].id = i ,sufmax = a[i].aty ,sufatk = a[i].atk;\r\n        else a[i].id = a[i + 1].id;\r\n    }\r\n}\r\ninline void mika_solve() {\r\n    n = read();\r\n    for (int i = 1; i <= n; i++) a[0][i].atk = read();\r\n    for (int i = 1; i <= n; i++) a[0][i].aty = read();\r\n    m = read();\r\n    for (int i = 1; i <= m; i++) a[1][i].atk = read();\r\n    for (int i = 1; i <= m; i++) a[1][i].aty = read();\r\n    mika_init(a[0] ,n) ,mika_init(a[1] ,m);\r\n    for (int i = 1; i <= n; i++) f[0][i] = -1;\r\n\tfor (int i = 1; i <= m; i++) f[1][i] = -1;\r\n    int cnt[3] = {0 ,0 ,0};\r\n    for (int i = 1; i <= n; i++)\r\n        cnt[mika_dp(0 ,i)]++;\r\n    printf(\"%d %d %d\\n\" ,cnt[1] ,cnt[2] ,cnt[0]);\r\n    for (int i = 1; i <= n; i++) a[0][i] = node() ,f[0][i] = -1 ;\r\n    for (int i = 1; i <= m; i++) a[1][i] = node() ,f[1][i] = -1;\r\n}\r\nsigned main() {\r\n//\tfreopen(\"test.out\" ,\"w\" ,stdout);\r\n    int t = read();\r\n    while (t--) mika_solve();\r\n    return 0;\r\n}"
}