{
    "id": 234547173,
    "contestId": 1895,
    "creationTimeSeconds": 1701067782,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "sunkuangzheng"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 137133134\n/**\r\n *    author: sunkuangzheng\r\n *    created: 27.11.2023 14:14:14\r\n**/\r\n#include<bits/stdc++.h>\r\n#ifdef DEBUG_LOCAL\r\n#include <mydebug/debug.h>\r\ndebug_helper deg;\r\n#endif\r\nusing namespace std;\r\nconst int N = 5e5+5;\r\nint t,n,m,c[N],d[N],a1[N],b1[N],d[N],to[N],ans[N],res[4];\r\nstruct cd{int a,b;}a[N],b[N];\r\nint dfs(int u){\r\n    if(d[u]) return 0;\r\n    if(!to[u]) return (u <= n ? 1 : 2);\r\n    if(ans[u] != -1) return ans[u];\r\n    return ans[u] = dfs(to[u]);\r\n}int main(){\r\n    ios::sync_with_stdio(0),cin.tie(0);\r\n    cin >> t;\r\n    while(t --){\r\n        cin >> n;queue<int> q;memset(res,0,sizeof(res));\r\n        for(int i = 1;i <= n;i ++) cin >> a[i].a;\r\n        for(int i = 1;i <= n;i ++) cin >> a[i].b;\r\n        cin >> m,c[n+1] = d[m+1] = 0,a1[n+1] = b1[m+1] = 1e9;\r\n        for(int i = 1;i <= m;i ++) cin >> b[i].a;\r\n        for(int i = 1;i <= m;i ++) cin >> b[i].b;\r\n        sort(a+1,a+n+1,[](cd a,cd b){return a.b < b.b;});\r\n        sort(b+1,b+m+1,[](cd a,cd b){return a.b < b.b;});\r\n        for(int i = 1;i <= n;i ++) a1[i] = a[i].b;\r\n        for(int i = 1;i <= m;i ++) b1[i] = b[i].b;\r\n        for(int i = n;i >= 1;i --) c[i] = max(c[i+1],a[i].a);\r\n        for(int i = m;i >= 1;i --) d[i] = max(d[i+1],b[i].a);\r\n        for(int i = 1;i <= n + m;i ++) d[i] = 0, ans[i] = -1;\r\n        for(int i = 1;i <= n;i ++){\r\n            int p = upper_bound(b1+1,b1+m+2,a[i].a) - b1;\r\n            if(p <= m) to[i] == p + n,d[p + n] ++;\r\n        }for(int i = 1;i <= m;i ++){\r\n            int p = upper_bound(a1+1,a1+n+2,b[i].a) - a1;\r\n            if(p <= n) to[i + n] = p,d[p] ++;\r\n        }for(int i = 1;i <= n + m;i ++) if(!d[i]) q.push(i);\r\n        while(q.size()){\r\n            int u = q.front();q.pop();\r\n            if(!to[u]) continue;\r\n            if(!(--d[to[u]])) q.push(to[u]);\r\n        }for(int i = 1;i <= n;i ++) res[dfs(i)] ++;\r\n        cout << res[1] << \" \" << res[0] << \" \" << res[2] << \"\\n\";\r\n    }\r\n}"
}