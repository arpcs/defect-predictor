{
    "id": 232010323,
    "contestId": 1895,
    "creationTimeSeconds": 1699497385,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "RabbieWjy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 498,
    "memoryConsumedBytes": 141926400,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nint t,n,m;\r\nstruct Card\r\n{\r\n\tint x,y;\r\n} a[300010],b[300010];\r\nint to[5000010],nxt[5000010],head[3000010],cnt;\r\nint ans[3],pd[3000010],in[3000010],vis[3000010];\r\nint q[5000010];\r\n\r\nvoid ini()\r\n{\r\n\tfor (int i = 1;i <= 5 * n + 5 * m;i ++) head[i] = in[i] = vis[i] = 0,pd[i] = -1;\r\n\tans[0] = ans[1] = ans[2] = 0;\r\n\tcnt = 0;\r\n}\r\n\r\nvoid add(int x,int y)\r\n{\r\n\tswap(x,y);\r\n\t// printf(\"add %d %d\\n\",x,y);\r\n\tto[++ cnt] = y;\r\n\tnxt[cnt] = head[x];\r\n\thead[x] = cnt;\r\n\tin[y] ++;\r\n}\r\n\r\nint id(int x,int opt)\r\n{\r\n\tif (opt == 1) return n + m + x;\r\n\treturn n + m + 4 * n + x;\r\n}\r\n\r\n#define ls (x << 1)\r\n#define rs (x << 1 | 1)\r\n#define mid ((l + r) >> 1)\r\n\r\nstruct segment_tree\r\n{\r\nstruct node\r\n{\r\n\tint xl,xr;\r\n} tree[1200010];\r\n\r\nvoid build(int x,int l,int r,int opt)\r\n{\r\n\ttree[x].xl = l,tree[x].xr = r;\r\n\tif (l == r)\r\n\t{\r\n\t\tadd(l + (opt - 1) * n,id(x,opt));\r\n\t\treturn ;\r\n\t}\r\n\tadd(id(ls,opt),id(x,opt));\r\n\tadd(id(rs,opt),id(x,opt));\r\n\tbuild(ls,l,mid,opt),build(rs,mid + 1,r,opt);\r\n}\r\n\r\nvoid upd(int x,int ql,int qr,int y,int opt)\r\n{\r\n\tif (ql > qr) return ;\r\n\tint l = tree[x].xl,r = tree[x].xr;\r\n\tif (l >= ql && r <= qr)\r\n\t{\r\n\t\tadd(id(x,opt),y);\r\n\t\treturn ;\r\n\t}\r\n\tif (ql <= mid) upd(ls,ql,qr,y,opt);\r\n\tif (mid < qr) upd(rs,ql,qr,y,opt);\r\n}\r\n} seg[3];\r\n\r\n#undef ls\r\n#undef rs\r\n#undef mid\r\n\r\nint main()\r\n{\r\n\tscanf(\"%d\",&t);\r\n\twhile (t --)\r\n\t{\r\n\t\tscanf(\"%d\",&n);\r\n\t\tfor (int i = 1;i <= n;i ++) scanf(\"%d\",&a[i].x);\r\n\t\tfor (int i = 1;i <= n;i ++) scanf(\"%d\",&a[i].y);\r\n\t\tscanf(\"%d\",&m);\r\n\t\tfor (int i = 1;i <= m;i ++) scanf(\"%d\",&b[i].x);\r\n\t\tfor (int i = 1;i <= m;i ++) scanf(\"%d\",&b[i].y);\r\n\t\tini();\r\n\t\tsort(a + 1,a + n + 1,[](Card x,Card y){return x.y < y.y;});\r\n\t\tsort(b + 1,b + m + 1,[](Card x,Card y){return x.y < y.y;});\r\n\t\tseg[1].build(1,1,n,1);\r\n\t\tseg[2].build(1,1,m,2);\r\n\t\tfor (int i = 1;i <= n;i ++)\r\n\t\t{\r\n\t\t\tint l = 1,r = m,tmp = 0;\r\n\t\t\twhile (l <= r)\r\n\t\t\t{\r\n\t\t\t\tint mid = ((l + r) >> 1);\r\n\t\t\t\tif (b[mid].y < a[i].x) tmp = mid,l = mid + 1;\r\n\t\t\t\telse r = mid - 1;\r\n\t\t\t}\r\n\t\t\tseg[2].upd(1,1,tmp,i,2);\r\n\t\t}\r\n\t\tfor (int i = 1;i <= m;i ++)\r\n\t\t{\r\n\t\t\tint l = 1,r = n,tmp = 0;\r\n\t\t\twhile (l <= r)\r\n\t\t\t{\r\n\t\t\t\tint mid = ((l + r) >> 1);\r\n\t\t\t\tif (a[mid].y < b[i].x) tmp = mid,l = mid + 1;\r\n\t\t\t\telse r = mid - 1;\r\n\t\t\t}\r\n\t\t\tseg[1].upd(1,1,tmp,i + n,1);\r\n\t\t}\r\n\t\tint tot = n + m + 4 * n + 4 * m;\r\n\t\tint hd = 1,tl = 0;\r\n\t\tfor (int i = 1;i <= tot;i ++) if (!in[i]) q[++ tl] = i,pd[i] = 2;\r\n\t\twhile (hd <= tl)\r\n\t\t{\r\n\t\t\tint x = q[hd];\r\n\t\t\thd ++;\r\n\t\t\tif (vis[x]) continue;\r\n\t\t\tvis[x] = 1;\r\n\t\t\tif (x <= n) ans[pd[x]] ++;\r\n\t\t\tfor (int i = head[x];i;i = nxt[i])\r\n\t\t\t{\r\n\t\t\t\tint u = to[i];\r\n\t\t\t\tif (x > n + m)\r\n\t\t\t\t{\r\n\t\t\t\t\tin[u] --;\r\n\t\t\t\t\tif (pd[x] == 1) pd[u] = 1;\r\n\t\t\t\t\telse if (!pd[x] && pd[u] < 0) pd[u] = 0;\r\n\t\t\t\t\tif (!in[u] && pd[u] < 0) pd[u] = 2;\r\n\t\t\t\t\tif (!in[u] || pd[u] > 0) q[++ tl] = u;\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (pd[x] == 2) pd[u] = 1;\r\n\t\t\t\telse if (!pd[x] && pd[u] < 0) pd[u] = 0;\r\n\t\t\t\tin[u] --;\r\n\t\t\t\tif (!in[u] && pd[u] < 0) pd[u] = 2;\r\n\t\t\t\tif (!in[u] || pd[u] > 0) q[++ tl] = u;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 1;i <= n;i ++)\r\n\t\t\tif (!vis[i]) ans[max(pd[i],0)] ++;\r\n\t\tprintf(\"%d %d %d\\n\",ans[2],ans[0],ans[1]);\r\n\t}\r\n}"
}