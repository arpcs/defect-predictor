{
    "id": 232608055,
    "contestId": 1895,
    "creationTimeSeconds": 1699873248,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "Maverick284"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 409600,
    "source": "// Online C++ compiler to run C++ program online\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing MapItoI = unordered_map<int,int>;\r\nusing SetI = unordered_set<int>;\r\n\r\nvoid DFS(int cur, int &win, int &loss, int count, SetI &vis, MapItoI &freq, MapItoI &m1, MapItoI &m2) {\r\n    if(vis.find(cur) == vis.end()) {\r\n        vis.insert(cur);\r\n        count += freq[cur];\r\n        if(m1[cur] == 0)\r\n            win += count;\r\n        else if(m2[m1[cur]] == 0)\r\n            loss += count;\r\n        else\r\n            DFS(m2[m1[cur]],win,loss,count,vis,freq,m1,m2);\r\n    }\r\n}\r\n\r\nstruct mySort{\r\n    bool operator() (pair<int,int> &a, pair<int,int> &b) const {\r\n        return (a.second > b.second) ||\r\n        a.second == b.second && a.first > b.first;\r\n    }\r\n};\r\n\r\nvoid constructNext(vector<int> &d, vector<pair<int,int>> &v, unordered_map <int,int> &m) {\r\n    for(int i = 0, j = 0; i < d.size() && j < v.size(); ) {\r\n        if(d[i] < v[j].first) {\r\n            m[d[i]] = v[j].second;\r\n            i++;\r\n        }\r\n        else\r\n            j++;\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    int N;\r\n    cin >> N;\r\n    vector<pair<int,int>> x(N);\r\n    for(int i = 0; i < N; i++)\r\n        cin >> x[i].first;\r\n    for(int i = 0; i < N; i++)\r\n        cin >> x[i].second;  \r\n    sort(x.begin(),x.end(),mySort());\r\n\r\n    vector<int> xD(N);\r\n    for(int i = 0; i < N; i++)\r\n        xD[i] = x[i].second;\r\n    sort(xD.begin(),xD.end());\r\n     \r\n    int M;\r\n    cin >> M;   \r\n    vector<pair<int,int>> y(M);\r\n     for(int i = 0; i < M; i++)\r\n        cin >> y[i].first;\r\n     for(int i = 0; i < M; i++)\r\n        cin >> y[i].second;\r\n    sort(y.begin(),y.end(),mySort());\r\n    \r\n    vector<int> yD(M);\r\n    for(int i = 0; i < M; i++)\r\n        yD[i] = y[i].second;\r\n    sort(yD.begin(),yD.end());\r\n    \r\n    MapItoI m1, m2, freq;\r\n    for(int i = 0; i < N; i++)\r\n        freq[xD[i]]++;\r\n        \r\n    auto it = unique(xD.begin(),xD.end());\r\n    xD.resize(it - xD.begin());\r\n    constructNext(xD,y,m1);\r\n    \r\n    it = unique(yD.begin(),yD.end());\r\n    yD.resize(it - yD.begin());\r\n    constructNext(yD,x,m2);\r\n        \r\n    SetI vis;\r\n    int win = 0, loss = 0;\r\n    for(int i = 0; i < xD.size(); i++) {\r\n        if(vis.find(xD[i]) == vis.end()) {\r\n            DFS(xD[i],win,loss,0,vis,freq,m1,m2);\r\n        }\r\n    }\r\n    cout << win << \" \" << N-(win+loss) << \" \" << loss << endl;\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    \r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n    \r\n    return 0;\r\n}"
}