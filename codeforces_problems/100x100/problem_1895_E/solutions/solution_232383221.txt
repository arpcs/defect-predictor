{
    "id": 232383221,
    "contestId": 1895,
    "creationTimeSeconds": 1699710563,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "WHSRJ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 36147200,
    "source": "#include<bits/stdc++.h>\r\ntypedef long long ll;\r\nusing namespace std;\r\n\r\nconst int N = 3e5 + 5;\r\nstruct Node {\r\n  int x, y;\r\n} a[N], b[N];\r\n\r\nint cnt[N << 1], re[N], re_pos[N], vis[N << 1];\r\nvector<int> v[N << 1];\r\n\r\nbool cmp(Node x, Node y) {\r\n  return x.x > y.x;\r\n}\r\n\r\nvoid solve() {\r\n  int n, m;   \r\n  cin >> n;\r\n  for(int i = 1; i <= n; i++) cin >> a[i].x;\r\n  for(int i = 1; i <= n; i++) cin >> a[i].y;\r\n  cin >> m;\r\n  for(int i = 1; i <= m; i++) cin >> b[i].x;\r\n  for(int i = 1; i <= m; i++) cin >> b[i].y;\r\n  sort(a + 1, a + 1 + n, cmp);\r\n  sort(b + 1, b + 1 + m, cmp);\r\n  for(int i = 1; i <= m; i++) {\r\n    re[i] = re[i - 1];\r\n    re_pos[i] = re_pos[i - 1];\r\n    if(b[i].y >= re[i]) {\r\n      re[i] = b[i].y;\r\n      re_pos[i] = i;\r\n    }\r\n  }\r\n  for(int i = 1; i <= n; i++) {\r\n    int l = 1, r = m, tmp = 0;\r\n    while(l <= r) {\r\n      int mid = (l + r) >> 1;\r\n      if(b[mid].x <= a[i].y) {\r\n        r = mid - 1;\r\n      }\r\n      else {\r\n        l = mid + 1;\r\n        tmp = re_pos[mid];\r\n      }\r\n    }\r\n    if(tmp) v[n + tmp].push_back(i), ++cnt[i];\r\n  }\r\n  \r\n\r\n  for(int i = 1; i <= n; i++) {\r\n    re[i] = re[i - 1];\r\n    re_pos[i] = re_pos[i - 1];\r\n    if(a[i].y >= re[i]) {\r\n      re[i] = a[i].y;\r\n      re_pos[i] = i;\r\n    }\r\n  }\r\n  for(int i = 1; i <= m; i++) {\r\n    int l = 1, r = n, tmp = 0;\r\n    while(l <= r) {\r\n      int mid = (l + r) >> 1;\r\n      if(a[mid].x <= b[i].y) {\r\n        r = mid - 1;\r\n      }\r\n      else {\r\n        l = mid + 1;\r\n        tmp = re_pos[mid];\r\n      }\r\n    }\r\n    if(tmp) v[tmp].push_back(i + n), ++cnt[i + n];\r\n  }\r\n  queue<int> q;\r\n  int ans1 = 0, ans2 = 0, ans3 = 0;\r\n  for(int i = 1; i <= n; i++) {\r\n    if(!cnt[i]) {\r\n      vis[i] = 1, q.push(i);\r\n    }\r\n  }\r\n  for(int i = 1; i <= m; i++) {\r\n    if(!cnt[i + n]) {\r\n      vis[i + n] = 2, q.push(i + n);\r\n    }\r\n  }\r\n  while(q.size()) {\r\n    int kdl = q.front();\r\n    q.pop();\r\n    for(int i: v[kdl]) {\r\n      --cnt[i];\r\n      //if(cnt[i] == 0) {\r\n        vis[i] = vis[kdl];\r\n        q.push(i);\r\n      //}\r\n    }\r\n  }\r\n  for(int i = 1; i <= n; i++) {\r\n    if(cnt[i]) ans2++;\r\n    if(vis[i] == 1) ans1++;\r\n    if(vis[i] == 2) ans3++;\r\n  }\r\n  cout << ans1 << ' ' << ans2 << ' ' << ans3 << endl;\r\n  /**/\r\n  for(int i = 0; i <= n + m; i++) v[i].clear(), vis[i] = cnt[i] = 0;\r\n  return ;\r\n}\r\n\r\nint main(){\r\n  std::ios::sync_with_stdio(false);\r\n  std::cin.tie(nullptr);\r\n  int t;\r\n  cin >> t;\r\n  while(t--) {\r\n    solve();\r\n  } \r\n  return 0;\r\n}"
}