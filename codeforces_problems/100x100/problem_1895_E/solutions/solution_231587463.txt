{
    "id": 231587463,
    "contestId": 1895,
    "creationTimeSeconds": 1699275505,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "E",
        "name": "Infinite Card Game",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "dfs and similar",
            "dp",
            "dsu",
            "games",
            "graphs",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "girlgg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 1778,
    "memoryConsumedBytes": 45363200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing std::cout;\r\nusing std::cin;\r\nusing std::vector;\r\ntypedef long long ll;\r\n\r\nstruct Info {\r\n    int atk;    // \u653b\u51fb\u529b\r\n    int def;    // \u9632\u5fa1\u529b\r\n    Info() : atk(0), def(0) {}\r\n};\r\n\r\nvoid Solve() {\r\n    int n, m;\r\n    cin >> n;\r\n    vector<Info> a(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> a[i].atk;\r\n    }\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> a[i].def;\r\n    }\r\n    cin >> m;\r\n    vector<Info> b(m);\r\n    for (int i = 0; i < m; ++i) {\r\n        cin >> b[i].atk;\r\n    }\r\n    for (int i = 0; i < m; ++i) {\r\n        cin >> b[i].def;\r\n    }\r\n    sort(a.begin(), a.end(), [&](const Info &info1, const Info &info2) -> bool {\r\n        if (info1.atk != info2.atk) {\r\n            return info1.atk < info2.atk;\r\n        } else {\r\n            return info1.def < info2.def;\r\n        }\r\n    });\r\n    sort(b.begin(), b.end(), [&](const Info &info1, const Info &info2) -> bool {\r\n        if (info1.atk != info2.atk) {\r\n            return info1.atk < info2.atk;\r\n        } else {\r\n            return info1.def < info2.def;\r\n        }\r\n    });\r\n    vector<int> ca;  // \u53ef\u80fd\u88ab\u9009\u51fa\u6765\u7684\r\n    for (int i = 0; i < n; ++i) {\r\n        if (ca.empty()) {\r\n            ca.emplace_back(i);\r\n        } else {\r\n            while (!ca.empty() && a[ca.back()].def <= a[i].def) {\r\n                ca.pop_back();\r\n            }\r\n            ca.emplace_back(i);\r\n        }\r\n    }\r\n    vector<int> cb;  // \u53ef\u80fd\u88ab\u9009\u51fa\u6765\u7684\r\n    for (int i = 0; i < m; ++i) {\r\n        if (cb.empty()) {\r\n            cb.emplace_back(i);\r\n        } else {\r\n            while (!cb.empty() && b[cb.back()].def <= b[i].def) {\r\n                cb.pop_back();\r\n            }\r\n            cb.emplace_back(i);\r\n        }\r\n    }\r\n    // \u5f53\u524d\u5728\u573a\u4e0a\u7684\u724c, 0 ~ n - 1 \u90fd\u662f a \u7684, n ~ n + m - 1 \u90fd\u662f b \u7684\r\n    // \u5165\u8fb9, \u522b\u4eba\u6307\u5411\u81ea\u5df1, \u8868\u793a\u53ef\u4ee5\u88ab\u4ec0\u4e48\u4e1c\u897f\u653b\u514b\r\n    vector<vector<int>> edge_in(n + m);\r\n    // \u51fa\u8fb9, \u81ea\u5df1\u6307\u5411\u522b\u4eba, \u8868\u793a\u53ef\u4ee5\u653b\u514b\u4ec0\u4e48\r\n    vector<vector<int>> edge_out(n + m);\r\n    for (int i = 0; i < n; ++i) {\r\n        // \u5728 cb \u91cc\u9762\u627e\u5230\u4e00\u4e2a\u6070\u597d\u653b\u51fb\u529b\u5927\u4e8e\u81ea\u5df1\u9632\u5fa1\u529b\u7684, \u8fd9\u6837\u5b83\u7684\u9632\u5fa1\u529b\u4e5f\u6700\u9ad8\r\n        if (b[cb.back()].atk > a[i].def) {\r\n            int l = 0;\r\n            int r = (int) cb.size() - 1;\r\n            while (l <= r) {\r\n                int mid = (l + r) >> 1;\r\n                if (b[cb[mid]].atk > a[i].def) {\r\n                    r = mid - 1;\r\n                } else {\r\n                    l = mid + 1;\r\n                }\r\n            }\r\n            edge_in[i].emplace_back(n + cb[l]);\r\n            edge_out[n + cb[l]].emplace_back(i);\r\n        }\r\n    }\r\n    for (int i = 0; i < m; ++i) {\r\n        // ca \u91cc\u9762\u627e\u653b\u51fb\u529b\u6070\u597d\u5927\u4e8e\u81ea\u5df1\u7684, \u8fd9\u6837\u5b83\u7684\u9632\u5fa1\u529b\u4e5f\u6700\u9ad8\r\n        if (a[ca.back()].atk > b[i].def) {\r\n            int l = 0;\r\n            int r = (int) ca.size() - 1;\r\n            while (l <= r) {\r\n                int mid = (l + r) >> 1;\r\n                if (a[ca[mid]].atk > b[i].def) {\r\n                    r = mid - 1;\r\n                } else {\r\n                    l = mid + 1;\r\n                }\r\n            }\r\n            edge_in[n + i].emplace_back(ca[l]);\r\n            edge_out[ca[l]].emplace_back(n + i);\r\n        }\r\n    }\r\n    vector<int> s(n + m);   // \u72b6\u6001(1: A \u80dc\u5229, 0: \u5e73\u5c40, -1: B \u80dc\u5229)\r\n    std::queue<int> q;\r\n    for (int i = 0; i < n + m; ++i) {\r\n        // \u6ca1\u6709\u4eba\u80fd\u653b\u514b\u81ea\u5df1\r\n        if (edge_in[i].empty()) {\r\n            q.push(i);\r\n            if (i < n) {\r\n                s[i] = 1;\r\n            } else {\r\n                s[i] = -1;\r\n            }\r\n        }\r\n    }\r\n    while (!q.empty()) {\r\n        int u = q.front();\r\n        q.pop();\r\n        for (auto v: edge_out[u]) {\r\n            if (s[v] == 0) {\r\n                s[v] = s[u];\r\n                q.push(v);\r\n            }\r\n        }\r\n    }\r\n    int cnt_win = 0;  // a \u80dc\u5229\r\n    int cnt_draw = 0;  // \u5e73\u5c40\r\n    int cnt_loss = 0;  // a \u8f93\u6389\r\n    for (int i = 0; i < n; ++i) {\r\n        if (s[i] == 1) {\r\n            ++cnt_win;\r\n        } else if (s[i] == -1) {\r\n            ++cnt_loss;\r\n        } else {\r\n            ++cnt_draw;\r\n        }\r\n    }\r\n    cout << cnt_win << \" \" << cnt_draw << \" \" << cnt_loss << \"\\n\";\r\n}\r\n\r\nint main() {\r\n   // freopen(\"01.in\", \"r\", stdin);\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        Solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}