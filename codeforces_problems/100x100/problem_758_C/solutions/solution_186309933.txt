{
    "id": 186309933,
    "contestId": 758,
    "creationTimeSeconds": 1671676060,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 758,
        "index": "C",
        "name": "Unfair Poll",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 758,
        "members": [
            {
                "handle": "sverma2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1484838300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 111,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std; \n\nint main() {\n    // grab input \n    long long n, m, k, x, y; \n    cin >> n >> m >> k >> x >> y;\n\n    // calculate number of rows gone thru \n    long long rem = k % m; \n    long long numRows = (k + (m - 1)) / m; // basic cieling function right\n\n\n    // for each row -> compute the number time it's been visited \n    vector<long long> numTimes(n + 1); \n    long long imp = 2 * (n - 1); // 0 \n    long long up = 2; \n    long long down = imp - 2; \n\n    // middle rows \n    for(long long i = 2; i < min(numRows + 1, n); i++) {\n        numTimes[i] = 2 * ((numRows - i) / imp) + 1; // no remainder \n        if((numRows - i) % imp >= down) numTimes[i]++; // add potential remainder\n        up += 2; \n        down -= 2; \n        // cout << numTimes[i] << endl;\n    }\n\n\n    if(n == 1) {\n        numTimes[1] = numRows; \n        long long mini, maxi, mid; \n        maxi = numRows; \n        mini = numRows - 1; \n        if(rem == 0) mini++;\n        if(y > rem && rem != 0) mid = mini; \n        else mid = numRows;\n        cout << maxi << \" \" << mini << \" \" << mid << endl;\n\n    } else {\n        // first row \n        numTimes[1] = ((numRows - 1) / imp) + 1;  // divide by 0 YIKES \n        // last row \n        if(numRows >= n) numTimes[n] = ((numRows - n) / imp) + 1;  // divide by 0 YIKES \n\n        // cout << numTimes[1] << \":\" << numTimes[n] << endl;\n\n        // compute the last row finished on (round up so we don't need to know the direction we ended)\n        long long lastRow; \n        long long comp = numRows % imp;\n        if(comp == 0) comp = imp;     \n        if(1 <= comp && comp <= n) lastRow = comp; \n        else lastRow = 2 * n - comp; \n\n        // compute answers \n        long long mini = LLONG_MAX; \n        long long maxi = 0; \n        for(long long i = 1; i <= n; i++) {\n            mini = min(mini, numTimes[i]); \n            maxi = max(maxi, numTimes[i]); \n        }\n\n        long long mid; \n        // middle answer \n        mid = numTimes[x];\n\n        if(n == lastRow && rem != 0) mini--;\n\n        if(x == lastRow && y > rem && rem != 0) {\n            mid--; \n        }\n\n        cout << maxi << \" \" << mini << \" \" << mid << endl;\n    }\n}"
}