{
    "id": 173785138,
    "contestId": 758,
    "creationTimeSeconds": 1664350247,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 758,
        "index": "C",
        "name": "Unfair Poll",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 758,
        "members": [
            {
                "handle": "schlechter"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1484838300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\ntypedef long long int ll;\r\n\r\nvoid solve()\r\n{\r\n    ll n, m, k, x, y;\r\n    cin >> n >> m >> k >> x >> y;\r\n    ll val = k / (m * n);\r\n\r\n    vector<vector<int>> grid(n + 1, vector<int>(m + 1, 0));\r\n\r\n    if (m * n >= k)\r\n    {\r\n        for (int i = 1; i <= n; i++)\r\n        {\r\n            for (int j = 1; j <= m; j++)\r\n            {\r\n                if (k > 0)\r\n                {\r\n                    k--;\r\n                    grid[i][j] = 1;\r\n                }\r\n            }\r\n        }\r\n        cout << 1 << \" \" << grid[n][m] << \" \" << grid[x][y] << \"\\n\";\r\n        return;\r\n    }\r\n    else\r\n    {\r\n        ll i, j;\r\n        for (i = 1; i <= n; i++)\r\n        {\r\n            for (j = 1; j <= m; j++)\r\n            {\r\n                grid[i][j] = 1;\r\n            }\r\n        }\r\n        k -= m * n;\r\n\r\n        ll divi = k / ((n - 1) * m);\r\n        ll rem = k % ((n - 1) * m);\r\n\r\n        if (divi % 2)\r\n        {\r\n            for (i = 1; i <= n - 1; i++)\r\n            {\r\n                for (j = 1; j <= m; j++)\r\n                {\r\n                    grid[i][j] += ((divi + 1) / 2);\r\n                }\r\n            }\r\n\r\n            for (i = 2; i <= n; i++)\r\n            {\r\n                for (j = 1; j <= m; j++)\r\n                {\r\n                    grid[i][j] += (divi) / 2;\r\n                }\r\n            }\r\n\r\n            if (rem)\r\n            {\r\n                for (i = 2; i <= n; i++)\r\n                {\r\n                    for (j = 1; j <= m; j++)\r\n                    {\r\n                        if (rem)\r\n                        {\r\n                            grid[i][j]++;\r\n                            rem--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for (i = 1; i <= n - 1; i++)\r\n            {\r\n                for (j = 1; j <= m; j++)\r\n                {\r\n                    grid[i][j] += (divi) / 2;\r\n                }\r\n            }\r\n\r\n            for (i = 2; i <= n; i++)\r\n            {\r\n                for (j = 1; j <= m; j++)\r\n                {\r\n                    grid[i][j] += (divi) / 2;\r\n                }\r\n            }\r\n            if (rem)\r\n            {\r\n                for (i = n - 1; i >= 1; i--)\r\n                {\r\n                    for (j = 1; j <= m; j++)\r\n                    {\r\n                        if (rem)\r\n                        {\r\n                            grid[i][j]++;\r\n                            rem--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ll maxval = 0;\r\n        ll minval = 1e18;\r\n        for (i = 1; i <= n; i++)\r\n        {\r\n            for (j = 1; j <= m; j++)\r\n            {\r\n                maxval = (ll)max(maxval, (ll)grid[i][j]);\r\n                minval = (ll)min(minval, (ll)grid[i][j]);\r\n            }\r\n        }\r\n        cout << maxval << \" \" << minval << \" \" << grid[x][y] << \"\\n\";\r\n        return;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    int tc = 1;\r\n    // cin >> tc;\r\n    while (tc--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}