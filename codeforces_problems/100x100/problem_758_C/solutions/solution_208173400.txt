{
    "id": 208173400,
    "contestId": 758,
    "creationTimeSeconds": 1685713623,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 758,
        "index": "C",
        "name": "Unfair Poll",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 758,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1484838300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 200;\ntypedef long long ll;\n#define ff first\n#define ss second\nll mod = 1e9 + 7;\nll grid[102][102];\nint main()  {\n ll n, m, k, x, y;\n cin >>  n >> m >> k >> x >> y;\n\n if((n * m) >=  k) {\n    for(ll i = 1; i <= n; i++){\n      for(ll j = 1; j <= m; j++)  {\n         if(k == 0) break;\n         grid[i][j]++;\n         k--;\n      }\n    }\n }\nelse if(n == 1) {\n  ll koto = k/m;\n  ll baki = k%m;\n  for(ll i = 1; i <= m; i++) {\n    grid[1][i] = koto;\n    if(baki > 0) grid[1][i]++;\n    baki--;\n  }\n}\nelse {\n ll ki;\n ll lo = 1, hi = 1e18, an  =1;\n ll total;\n while(lo <= hi) {\n\n   ll mid = (lo + hi)/2;\n\n   ll one = (m * 2);\n   ll hu =   mid;\n   ll pari = 1e18/one;\n   if(hu > pari) {\n      hi = mid - 1;\n      continue;\n   }\n   one*=hu;\n   ll two = ((n - 2) * m);\n   ll three = (mid + mid - 1);\n   ll parboh = 1e18/two;\n   if(parboh < three) {\n     hi = mid - 1;\n     continue;\n   }\n   two = three * two;\n   total = one + two;\n\n   if(total <= k) lo = mid + 1, an = max(an, mid), ki = total;\n   else hi = mid - 1;\n }\n\n\n\n for(ll i = 1; i <= m; i++) grid[1][i] = an;\n for(ll i = 1; i <= m; i++) grid[n][i] = an;\n\n for(ll i = 2; i <= n - 1; i++) {\n   for(ll j = 1; j <= m; j++) grid[i][j] = an + an - 1;\n }\n\n k-=ki;\n\n for(ll i = n - 1; i >= 1; i--) {\n   for(ll j = 1; j <= m; j++) {\n    if(k == 0) break;\n    grid[i][j]++;\n    k--;\n   }\n }\n\n for(ll i = 2;  i <= n; i++) {\n  for(ll j = 1; j <= m; j++) {\n    if(k == 0) break;\n    grid[i][j]++;\n    k--;\n  }\n }\n\n\n}\n\n ll maxi = 0, mini = 2e18, x_y = 0;\n\n for(ll i  = 1; i <= n; i++){\n   for(ll j = 1; j <= m; j++) {\n     maxi = max(maxi, grid[i][j] );\n     mini = min(mini, grid[i][j]);\n     if(i == x && j== y) x_y = grid[i][j];\n   }\n }\n cout << maxi << \" \" << mini << \" \" << x_y;\n\n}\n\n\n\n\n   \t\t      \t \t  \t  \t  \t \t\t  \t"
}