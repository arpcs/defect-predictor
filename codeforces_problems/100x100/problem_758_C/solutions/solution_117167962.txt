{
    "id": 117167962,
    "contestId": 758,
    "creationTimeSeconds": 1621857993,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 758,
        "index": "C",
        "name": "Unfair Poll",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "binary search",
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 758,
        "members": [
            {
                "handle": "X8664"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1484838300
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 111,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 102400,
    "source": "#include \"bits/stdc++.h\"\n\nusing namespace std;\n\nconst int N = 123;\n\nlong long freq[N][N];\nint n, m, x, y;\nlong long k;\n\nvoid n1 () {\n  int sz = n * m;\n  long long eq = k / sz, rem = k % sz;\n  for (int i = 1; i <= m; ++i) {\n    freq[1][i] += eq + (rem > 0);\n    if (rem) {\n      --rem;\n    }\n  }\n}\n\nvoid print () {\n  long long mx = -1, mi = 1e18;\n  for (int i = 1; i <= n; ++i) {\n    mx = max(mx, *max_element(freq[i] + 1, freq[i] + m + 1));\n    mi = min(mi, *min_element(freq[i] + 1, freq[i] + m + 1));\n  }\n  printf(\"%lld %lld %lld\", mx, mi, freq[x][y]);\n}\n\nint main () {\n  scanf(\"%d %d %lld %d %d\", &n, &m, &k, &x, &y);\n  if (n == 1) {\n    n1();\n    print();\n    return 0;\n  }\n  for (int i = 1; i <= n && k > 0; ++i) \n    for (int j = 1; j <= m && k > 0; ++j, --k) ++freq[i][j];\n  int sz = (n - 1) * m;\n  long long eq = k / sz, rem = k % sz;\n  for (int i = 1; i <= n; ++i) {\n    long long add = eq;\n    if (i == 1) {\n      add >>= 1;\n      add += eq & 1;\n    }\n    if (i == n) {\n      add >>= 1;\n    }\n    for (int j = 1; j <= m; ++j) {\n      freq[i][j] += add;\n    }\n  }\n  int rw = (eq & 1 ? 2 : n - 1), add = (eq & 1 ? 1 : -1);\n  k = rem;\n  while (k > 0) {\n    for (int i = 1; i <= m && k > 0; ++i, --k) {\n      ++freq[rw][i];\n    }\n    rw += add;\n  }\n  print();\n  return 0;\n}"
}