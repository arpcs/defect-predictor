{
    "id": 130260758,
    "contestId": 1110,
    "creationTimeSeconds": 1632916838,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "Shameimaru_Aya"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 1216,
    "memoryConsumedBytes": 649113600,
    "source": "#include <bits/stdc++.h> \r\nusing namespace std;\r\nint n , g[33000][810] , dp[33000][2010] , mx[33000][2010] , tot = 1 , b[110000] , vis[110000] , ans;\r\nstring l , r;\r\nstruct item\r\n{\r\n\tint ch[10] , fail , fl , fr;\r\n} node[110000];\r\nvoid build1()\r\n{\r\n\tnode[1].fl = node[1].fr = 1; b[1] = -1;\r\n\tqueue< int > q; q.push(1);\r\n\twhile(!q.empty())\r\n\t{\r\n\t\tint u = q.front() , pl = b[u] + 1; q.pop();\r\n\t\tif(vis[u]) continue;\r\n\t\tvis[u] = 1;\r\n\t\tif(node[u].fl && !node[u].fr)\r\n\t\t{\r\n\t\t\tfor(int i = l[pl] + 1 ; i <= 9 ; i++ ) \r\n\t\t\t{\r\n\t\t\t\tif(!node[u].ch[i]) node[u].ch[i] = ++tot;\r\n\t\t\t\tg[node[u].ch[i]][l.size() - 1 - pl] = 1;\r\n\t\t\t}\r\n\t\t\tif(!node[u].ch[l[pl]]) node[u].ch[l[pl]] = ++tot; \r\n\t\t\tb[node[u].ch[l[pl]]] = pl; node[node[u].ch[l[pl]]].fl = 1;\r\n\t\t\tif(pl == l.size() - 1) g[node[u].ch[l[pl]]][0] = 1;\r\n\t\t\telse q.push(node[u].ch[l[pl]]);\r\n\t\t}\r\n\t\tif(!node[u].fl && node[u].fr)\r\n\t\t{\r\n\t\t\tfor(int i = 0 ; i <= r[pl] - 1 ; i++ ) \r\n\t\t\t{\r\n\t\t\t\tif(!node[u].ch[i]) node[u].ch[i] = ++tot;\r\n\t\t\t\tg[node[u].ch[i]][r.size() - 1 - pl] = 1;\r\n\t\t\t}\r\n\t\t\tif(!node[u].ch[r[pl]]) node[u].ch[r[pl]] = ++tot; \r\n\t\t\tb[node[u].ch[r[pl]]] = pl; node[node[u].ch[r[pl]]].fr = 1;\r\n\t\t\tif(pl == r.size() - 1) g[node[u].ch[r[pl]]][0] = 1;\r\n\t\t\telse q.push(node[u].ch[r[pl]]);\r\n\t\t}\r\n\t\tif(node[u].fl && node[u].fr)\r\n\t\t{\r\n\t\t\tfor(int i = l[pl] + 1 ; i <= r[pl] - 1 ; i++ ) \r\n\t\t\t{\r\n\t\t\t\tif(!node[u].ch[i]) node[u].ch[i] = ++tot;\r\n\t\t\t\tg[node[u].ch[i]][l.size() - 1 - pl] = 1 , g[node[u].ch[i]][r.size() - 1 - pl] = 1;\r\n\t\t\t}\r\n\t\t\tif(l[pl] != r[pl])\r\n\t\t\t{\r\n\t\t\t\tif(!node[u].ch[l[pl]]) node[u].ch[l[pl]] = ++tot; \r\n\t\t\t\tb[node[u].ch[l[pl]]] = pl; \r\n\t\t\t\tif(l[pl] < r[pl]) g[node[u].ch[l[pl]]][r.size() - 1 - pl] = 1;\r\n\t\t\t\tif(pl == l.size() - 1) g[node[u].ch[l[pl]]][0] = 1;\r\n\t\t\t\telse q.push(node[u].ch[l[pl]]) , node[node[u].ch[l[pl]]].fl = 1;\r\n\t\t\t\t\r\n\t\t\t\tif(!node[u].ch[r[pl]]) node[u].ch[r[pl]] = ++tot; \r\n\t\t\t\tb[node[u].ch[r[pl]]] = pl; \r\n\t\t\t\tif(r[pl] > l[pl]) g[node[u].ch[r[pl]]][l.size() - 1 - pl] = 1;\r\n\t\t\t\tif(pl == r.size() - 1) g[node[u].ch[r[pl]]][0] = 1;\r\n\t\t\t\telse q.push(node[u].ch[r[pl]]) , node[node[u].ch[r[pl]]].fr = 1;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(!node[u].ch[r[pl]]) node[u].ch[r[pl]] = ++tot; \r\n\t\t\t\tb[node[u].ch[r[pl]]] = pl; \r\n\t\t\t\tif(pl == r.size() - 1) g[node[u].ch[r[pl]]][0] = 1;\r\n\t\t\t\telse node[node[u].ch[r[pl]]].fr = 1;\r\n\t\t\t\tif(pl == l.size() - 1) g[node[u].ch[l[pl]]][0] = 1;\r\n\t\t\t\telse node[node[u].ch[r[pl]]].fl = 1;\r\n\t\t\t\tif(pl != l.size() - 1 || pl != r.size() - 1) q.push(node[u].ch[l[pl]]);\r\n\t\t\t}\r\n\t\t\tif(l.size() != r.size())\r\n\t\t\t{\r\n\t\t\t\tfor(int i = 0 ; i <= 9 ; i++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tif((i >= l[pl] + 1 && i <= r[pl] - 1) || i == l[pl] || i == r[pl]) continue;\r\n\t\t\t\t\tif(!node[u].ch[i]) node[u].ch[i] = ++tot;\r\n\t\t\t\t\tif(i > l[pl]) g[node[u].ch[i]][l.size() - 1 - pl] = 1;\r\n\t\t\t\t\tif(i < r[pl] && (i || pl)) g[node[u].ch[i]][r.size() - 1 - pl] = 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nvoid build2()\r\n{\r\n\tfor(int i = 1 ; i <= 9 ; i++ ) \r\n\t{\r\n\t\tnode[1].ch[i] = ++tot; \r\n\t\tfor(int j = l.size() + 1 ; j < r.size() ; j++ ) g[tot][j - 1] = 1;\r\n\t}\r\n}\r\nvoid getfail()\r\n{\r\n\tqueue< int > q; q.push(1);\r\n\tmemset(vis , 0 , sizeof(vis));\r\n\twhile(!q.empty())\r\n\t{\r\n\t\tint u = q.front(); q.pop();\r\n\t\tif(vis[u]) continue;\r\n\t\tvis[u] = 1;\r\n\t\tfor(int i = 0 ; i < 10 ; i++ )\r\n\t\t{\r\n\t\t\tif(node[u].ch[i] && !vis[node[u].ch[i]])\r\n\t\t\t{\r\n\t\t\t\tq.push(node[u].ch[i]); node[node[u].ch[i]].fail = node[node[u].fail].ch[i];\r\n\t\t\t\tfor(int j = 0 ; j <= r.size() ; j++ ) \r\n\t\t\t\t\tg[node[u].ch[i]][j] += g[node[node[u].ch[i]].fail][j];\r\n\t\t\t}\r\n\t\t\telse node[u].ch[i] = node[node[u].fail].ch[i];\r\n\t\t}\r\n\t}\r\n\treturn ;\r\n}\r\nvoid print()\r\n{\r\n\tint u = 1;\r\n\tfor(int i = 0 ; i < n ; i++ )\r\n\t{\r\n\t\tfor(int j = 0 ; j <= 9 ; j++ ) \r\n\t\t{\r\n\t\t\tif(mx[u][i] == mx[node[u].ch[j]][i + 1]\r\n\t\t\t&& dp[node[u].ch[j]][i + 1] == dp[u][i] + g[node[u].ch[j]][min((int)r.size() , n - i - 1)]) \r\n\t\t\t{\r\n\t\t\t\tprintf(\"%d\" , j);\r\n\t\t\t\tu = node[u].ch[j]; \r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nint main()\r\n{\r\n//\tfreopen(\"1.in\" , \"r\" , stdin);\r\n//\tfreopen(\"1.out\" , \"w\" , stdout);\r\n\tcin >> l >> r >> n; node[1].fail = 0; node[1].ch[0] = 1;\r\n\tfor(int i = 0 ; i <= 9 ; i++ ) node[0].ch[i] = 1;\r\n\tfor(int i = 0 ; i < l.size() ; i++ ) l[i] -= '0';\r\n\tfor(int i = 0 ; i < r.size() ; i++ ) r[i] -= '0';\r\n\tif(l.size() != r.size()) build2();\r\n\tbuild1(); \r\n//\tfor(int i = 1 ; i <= tot ; i++ ) \r\n//\t{\r\n//\t\tcerr << i << \": \";\r\n//\t\tfor(int j = 0 ; j < 10 ; j++ ) cerr << node[i].ch[j] << ' ';\r\n//\t\tcerr << endl;\r\n//\t}\r\n//\tcerr << endl;\r\n\tgetfail();\r\n//\tfor(int i = 1 ; i <= tot ; i++ ) \r\n//\t{\r\n//\t\tcerr << i << \": \";\r\n//\t\tfor(int j = 0 ; j <= r.size() ; j++ ) cerr << g[i][j] << ' ';\r\n//\t\tcerr << endl;\r\n//\t}\r\n//\tcerr << endl;\r\n\tmemset(dp , -0x7f / 3 , sizeof(dp));\r\n\tdp[1][0] = 0;\r\n\tfor(int i = 1 ; i <= tot ; i++ )\r\n\t\tfor(int j = 1 ; j <= r.size() ; j++ ) g[i][j] += g[i][j - 1];\r\n\tfor(int i = 1 ; i <= n ; i++ )\r\n\t{\r\n\t\tfor(int j = 1 ; j <= tot ; j++ )\r\n\t\t{\r\n\t\t\tfor(int k = 0 ; k <= 9 ; k++ )\r\n\t\t\t{\r\n\t\t\t\tdp[node[j].ch[k]][i] = max(dp[node[j].ch[k]][i] , dp[j][i - 1] + g[node[j].ch[k]][min((int)r.size() , n - i)]);\r\n\t\t\t\tans = max(ans , dp[node[j].ch[k]][i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(int j = 1 ; j <= tot ; j++ ) mx[j][n] = dp[j][n];\r\n\tfor(int i = n - 1 ; i >= 0 ; i-- )\r\n\t{\r\n\t\tfor(int j = 1 ; j <= tot ; j++ )\r\n\t\t{\r\n\t\t\tif(dp[j][i] < 0) continue;\r\n\t\t\tfor(int k = 0 ; k <= 9 ; k++ )\r\n\t\t\t\tif(dp[node[j].ch[k]][i + 1] == dp[j][i] + g[node[j].ch[k]][min((int)r.size() , n - i - 1)])\r\n\t\t\t\t\tmx[j][i] = max(mx[j][i] , mx[node[j].ch[k]][i + 1]);\r\n\t\t}\r\n\t}\r\n//\tfor(int i = 1 ; i <= tot ; i++ ) \r\n//\t{\r\n//\t\tcout << i << \": \";\r\n//\t\tfor(int j = 0 ; j <= n ; j++ ) cout << (dp[i][j] < 0 ? -1 : dp[i][j]) << ' ';\r\n//\t\tcout << endl;\r\n//\t}\r\n//\tcerr << endl;\r\n//\tfor(int i = 1 ; i <= tot ; i++ ) \r\n//\t{\r\n//\t\tcerr << i << \": \";\r\n//\t\tfor(int j = 0 ; j <= n ; j++ ) cerr << mx[i][j] << ' ';\r\n//\t\tcerr << endl;\r\n//\t}\r\n\tprintf(\"%d\\n\" , ans); print();\r\n\treturn 0;\r\n}\r\n/*\r\n3\r\n427\r\n5\r\n*/"
}