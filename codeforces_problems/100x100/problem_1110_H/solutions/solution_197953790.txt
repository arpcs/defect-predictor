{
    "id": 197953790,
    "contestId": 1110,
    "creationTimeSeconds": 1679146282,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1110,
        "index": "H",
        "name": "Modest Substrings",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1110,
        "members": [
            {
                "handle": "aaa12321"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1549546500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 4539,
    "memoryConsumedBytes": 524800000,
    "source": "#include<iostream>\r\n#include<cstdio>\r\n#include<cstring>\r\n#include<queue>\r\nusing namespace std;\r\nchar l[1010],r[1010];\r\nint n,lenl,lenr;\r\nnamespace ACAM\r\n{\r\n\tstruct Node\r\n\t{\r\n\t\tint ch[10],fail;\r\n\t\tint len[2010];\r\n\t}t[20010];\r\n\tint tot;\r\n\tvoid Insert(char *l,int lenl,char *r,int lenr)\r\n\t{\r\n\t\tif(lenl==lenr)\r\n\t\t{\r\n\t\t\tint lcp=0;\r\n\t\t\twhile(lcp<lenl&&l[lcp+1]==r[lcp+1]) lcp++;\r\n\t\t\tint now=0;\r\n\t\t\tfor(int i=1;i<=lcp;i++)\r\n\t\t\t{\r\n\t\t\t\tif(!t[now].ch[l[i]-'0']) t[now].ch[l[i]-'0']=++tot;\r\n\t\t\t\tnow=t[now].ch[l[i]-'0'];\r\n\t\t\t}\r\n\t\t\tif(lcp==lenl) t[now].len[0]++;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(int i=l[lcp+1]-'0'+1;i<r[lcp+1]-'0';i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!t[now].ch[i]) t[now].ch[i]=++tot;\r\n\t\t\t\t\tt[t[now].ch[i]].len[lenl-lcp-1]++;\r\n\t\t\t\t}\r\n\t\t\t\tint pos=now;\r\n\t\t\t\tfor(int i=lcp+1;i<=lenl;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!t[now].ch[l[i]-'0']) t[now].ch[l[i]-'0']=++tot;\r\n\t\t\t\t\tif(i!=lcp+1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(int j=l[i]-'0'+1;j<=9;j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(!t[now].ch[j]) t[now].ch[j]=++tot;\r\n\t\t\t\t\t\t\tt[t[now].ch[j]].len[lenl-i]++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnow=t[now].ch[l[i]-'0'];\r\n\t\t\t\t}\r\n\t\t\t\tt[now].len[0]++;\r\n\t\t\t\tnow=pos;\r\n\t\t\t\tfor(int i=lcp+1;i<=lenr;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!t[now].ch[r[i]-'0']) t[now].ch[r[i]-'0']=++tot;\r\n\t\t\t\t\tif(i!=lcp+1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(int j=0;j<r[i]-'0';j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(!t[now].ch[j]) t[now].ch[j]=++tot;\r\n\t\t\t\t\t\t\tt[t[now].ch[j]].len[lenr-i]++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnow=t[now].ch[r[i]-'0'];\r\n\t\t\t\t}\r\n\t\t\t\tt[now].len[0]++;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint now=0;\r\n\t\t\tfor(int i=1;i<=lenl;i++)\r\n\t\t\t{\r\n\t\t\t\tif(!t[now].ch[l[i]-'0']) t[now].ch[l[i]-'0']=++tot;\r\n\t\t\t\tfor(int j=l[i]-'0'+1;j<=9;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!t[now].ch[j]) t[now].ch[j]=++tot;\r\n\t\t\t\t\tt[t[now].ch[j]].len[lenl-i]++;\r\n\t\t\t\t}\r\n\t\t\t\tnow=t[now].ch[l[i]-'0'];\r\n\t\t\t}\r\n\t\t\tt[now].len[0]++;\r\n\t\t\tnow=0;\r\n\t\t\tfor(int i=1;i<=lenr;i++)\r\n\t\t\t{\r\n\t\t\t\tif(!t[now].ch[r[i]-'0']) t[now].ch[r[i]-'0']=++tot;\r\n\t\t\t\tfor(int j=0;j<r[i]-'0';j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!t[now].ch[j]) t[now].ch[j]=++tot;\r\n\t\t\t\t\tt[t[now].ch[j]].len[lenr-i]++;\r\n\t\t\t\t}\r\n\t\t\t\tnow=t[now].ch[r[i]-'0'];\r\n\t\t\t}\r\n\t\t\tt[now].len[0]++;\r\n\t\t\tfor(int i=lenl+1;i<lenr;i++)\r\n\t\t\t{\r\n\t\t\t\tfor(int j=1;j<=9;j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!t[0].ch[j]) t[0].ch[j]=++tot;\r\n\t\t\t\t\tt[t[0].ch[j]].len[i-1]++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tt[0].ch[0]=0;\r\n\t}\r\n\tvoid Build()\r\n\t{\r\n\t\tqueue<int> q;\r\n\t\tfor(int i=0;i<=9;i++)\r\n\t\t{\r\n\t\t\tif(t[0].ch[i])\r\n\t\t\t{\r\n\t\t\t\tq.push(t[0].ch[i]);\r\n\t\t\t\tt[t[0].ch[i]].fail=0;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(!q.empty())\r\n\t\t{\r\n\t\t\tint p=q.front();\r\n\t\t\tq.pop();\r\n\t\t\tfor(int i=0;i<=n;i++) t[p].len[i]+=t[t[p].fail].len[i];\r\n\t\t\tfor(int i=0;i<=9;i++)\r\n\t\t\t{\r\n\t\t\t\tif(t[p].ch[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tt[t[p].ch[i]].fail=t[t[p].fail].ch[i];\r\n\t\t\t\t\tq.push(t[p].ch[i]);\r\n\t\t\t\t}\r\n\t\t\t\telse t[p].ch[i]=t[t[p].fail].ch[i];\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i=0;i<=tot;i++) for(int j=1;j<=n;j++) t[i].len[j]+=t[i].len[j-1];\r\n\t}\r\n\tlong long f[2010][20010];\r\n\tbool inAns[2010][20010];\r\n\tint ansseq[2010];\r\n\tvoid Solve()\r\n\t{\r\n\t\tmemset(f,0xcf,sizeof f);\r\n\t\tf[0][0]=t[0].len[n];\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tfor(int j=0;j<=tot;j++)\r\n\t\t\t{\r\n\t\t\t\tif(f[i][j]<0) continue;\r\n\t\t\t\tfor(int k=0;k<=9;k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tf[i+1][t[j].ch[k]]=max(f[i+1][t[j].ch[k]],f[i][j]+t[t[j].ch[k]].len[n-i-1]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tlong long ans=0;\r\n\t\tfor(int i=0;i<=tot;i++) ans=max(ans,f[n][i]);\r\n\t\tprintf(\"%lld\\n\",ans);\r\n\t\tfor(int i=0;i<=tot;i++)\r\n\t\t{\r\n\t\t\tif(f[n][i]==ans)\r\n\t\t\t{\r\n\t\t\t\tinAns[n][i]=1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i=n-1;i>=0;i--)\r\n\t\t{\r\n\t\t\tfor(int j=0;j<=tot;j++)\r\n\t\t\t{\r\n\t\t\t\tif(f[i][j]<0) continue;\r\n\t\t\t\tfor(int k=0;k<=9;k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(inAns[i+1][t[j].ch[k]]&&f[i+1][t[j].ch[k]]==f[i][j]+t[t[j].ch[k]].len[n-i-1])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tinAns[i][j]=1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tint now=0;\r\n\t\tfor(int i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tfor(int j=0;j<=9;j++)\r\n\t\t\t{\r\n\t\t\t\tif(f[i][now]<0) continue;\r\n\t\t\t\tif(inAns[i+1][t[now].ch[j]]&&f[i+1][t[now].ch[j]]==f[i][now]+t[t[now].ch[j]].len[n-i-1])\r\n\t\t\t\t{\r\n\t\t\t\t\tnow=t[now].ch[j];\r\n\t\t\t\t\tansseq[i+1]=j;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i=1;i<=n;i++) printf(\"%d\",ansseq[i]);puts(\"\");\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tscanf(\"%s%s\",l+1,r+1);\r\n\tscanf(\"%d\",&n);\r\n\tlenl=strlen(l+1);\r\n\tlenr=strlen(r+1);\r\n\tACAM::Insert(l,lenl,r,lenr);\r\n\tACAM::Build();\r\n\tACAM::Solve();\r\n}"
}