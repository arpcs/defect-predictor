{
    "id": 228716413,
    "contestId": 1822,
    "creationTimeSeconds": 1697653619,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "Ankit_332"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 9625600,
    "source": "#pragma GCC optimize(\"O2\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define ll     long long\r\n#define test   int _TEST; cin>>_TEST; while(_TEST--)\r\n#define ff     first\r\n#define ss     second\r\n#define pb     push_back\r\n#define ppb    pop_back\r\n#define pf     push_front\r\n#define ppf    pop_front\r\n\r\ntemplate <typename T> using Ordered_Set_Tree =\r\n        tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate <typename T> using Ordered_Multiset_Tree =\r\n        tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\ntemplate <typename A, typename B> ostream& operator<<(ostream& s, const pair<A, B>& self) {s << self.first << ' ' << self.second << ' '; return s; }\r\ntemplate <typename T> ostream& operator<<(ostream& s, const vector<T>& self) { for (auto e : self) { s << e << '\\n'; } return s; }\r\ntemplate <typename T> ostream& operator<<(ostream& s, tuple<T, T, T>& self) { s << get<0>(self) << ' ' << get<1>(self) << ' ' << get<2>(self); return s; }\r\ntemplate <typename A, typename B> istream& operator>>(istream& s, pair<A, B>& self) { s >> self.first >> self.second; return s; }\r\ntemplate <typename T> istream& operator>>(istream& s, tuple<T, T, T>& self) { s >> get<0>(self) >> get<1>(self) >> get<2>(self); return s; }\r\ntemplate <typename T> istream& operator>>(istream& s, tuple<T, T, T, T>& self) { s >> get<0>(self) >> get<1>(self) >> get<2>(self) >> get<3>(self); return s; }\r\ntemplate <typename T> istream& operator>>(istream& s, vector<T>& self) { for (size_t i = 0; i < self.size(); ++i) { s >> self[i]; } return s; }\r\n\r\n///DEBUG\r\nvoid _Print(int t) {cerr << t;}\r\nvoid _Print(string t) {cerr << t;}\r\nvoid _Print(char t) {cerr << t;}\r\nvoid _Print(long long t) {cerr << t;}\r\nvoid _Print(double t) {cerr << t;}\r\nvoid _Print(unsigned long long t) {cerr << t;}\r\n\r\ntemplate <class T, class V> void _Print(pair <T, V> &p);\r\ntemplate <class T> void _Print(list <T> &v);\r\ntemplate <class T> void _Print(vector <T> &v);\r\ntemplate <class T> void _Print(deque <T> &v);\r\ntemplate <class T, class V> void _Print(T *v, V sz);\r\ntemplate <class T, class V, class P> void _Print(T *v, V sz, P sm);\r\ntemplate <class T> void _Print(set <T> &v);\r\ntemplate <class T, class V> void _Print(map <T, V> &v);\r\ntemplate <class T> void _Print(multiset <T> &v);\r\n\r\ntemplate <class T, class V> void _Print(pair <T, V> &p) {cerr << \"{\"; _Print(p.ff); cerr << \",\"; _Print(p.ss); cerr << \"}\\n\\n\";}\r\ntemplate <class T> void _Print(list <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(vector <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(deque <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V> void _Print(T *v, V sz) {cerr << \"[ \"; for(int i=0; i<sz; i++) {_Print(v[i]); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V, class P> void _Print(T *v, V sz, P sm) {cerr << \"[\\n\"; for(int i=0; i<sz; i++) { for(int j=0; j<sm; j++) {_Print(v[i][j]); cerr << \" \";} cerr << \"\\n\";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(set <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(multiset <T>& v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V> void _Print(map <T, V> &v) {cerr << \"[ \"; for (auto i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\n\r\n#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)\r\nvector<string> vec_splitter(string s)\r\n{\r\n    s += ',';\r\n    vector<string> res;\r\n    while(!s.empty())\r\n    {\r\n        res.push_back(s.substr(0, s.find(',')));\r\n        s = s.substr(s.find(',') + 1);\r\n    }\r\n    return res;\r\n}\r\nvoid debug_out(vector<string> __attribute__ ((unused)) args, __attribute__ ((unused)) int idx, __attribute__ ((unused)) int LINE_NUM) { cerr << endl; }\r\ntemplate <typename Head, typename... Tail> void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T)\r\n{\r\n    if(idx > 0) cerr << \", \"; else cerr << \"Line(\" << LINE_NUM << \") \";\r\n    stringstream ss; ss << H;\r\n    cerr << args[idx] << \" = \" << ss.str();\r\n    debug_out(args, idx + 1, LINE_NUM, T...);\r\n}\r\n///DEBUG\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    ///freopen(\"input.txt\", \"r\", stdin);\r\n    ///freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    vector<ll int> cnt(1e6+10);\r\n\r\n    test\r\n    {\r\n        int n;\r\n        cin>>n;\r\n\r\n        vector<ll int> a(n);\r\n        cin>>a;\r\n\r\n        for(auto e: a)      cnt[e]++;\r\n\r\n        ll int ans = 0;\r\n\r\n        sort(a.begin(), a.end());\r\n\r\n        for(ll int x=1; x<=1000; x++)\r\n        {\r\n            for(auto e: a)\r\n            {\r\n                if(e*1ll*x*1ll*x > 1e6)     break;\r\n\r\n                if(x == 1)\r\n                    ans += (cnt[e*x]-1) * 1ll * (cnt[e*x*x]-2);\r\n                else\r\n                    ans += cnt[e*x] * 1ll * cnt[e*x*x];\r\n            }\r\n        }\r\n\r\n        map<ll int, ll int> cnt2;\r\n        for(auto e: a)      cnt2[e]++;\r\n\r\n        for(auto e: a)\r\n        {\r\n            if(e <= 1e6)        continue;\r\n\r\n            for(ll int x=1; e*1ll*x<=1e9; x++)\r\n            {\r\n                if(e%x==0 && cnt2.find(e/x)!=cnt2.end() && cnt2.find(e*1ll*x)!=cnt2.end())\r\n                    ans += cnt2[e/x]*cnt2[e*1ll*x];\r\n            }\r\n        }\r\n\r\n        cout<<ans<<\"\\n\";\r\n\r\n        for(auto e: a)      cnt[e] = 0;\r\n    }\r\n}\r\n"
}