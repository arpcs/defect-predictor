{
    "id": 209918891,
    "contestId": 1822,
    "creationTimeSeconds": 1686974438,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "Java_Programmer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 3946,
    "memoryConsumedBytes": 14848000,
    "source": "//package kg.my_algorithms.Codeforces;\r\n\r\n\r\n\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\n\r\n//                      FOCUS\r\npublic class Solution{\r\n    private static final FastReader fr = new FastReader();\r\n  //  private static final Scanner fr = new Scanner(System.in);\r\n    private static final long MOD = 1_000_000_007L;\r\n    public static void main(String[] args) throws IOException {\r\n        PrintWriter out = new PrintWriter(System.out);\r\n        List<List<Integer>> div_map = new ArrayList<>();\r\n        for(int i=0;i<1000;i++) div_map.add(new ArrayList<>());\r\n        for(int i=1;i<1000;i++){\r\n            for(int j=i;j<1000;j+=i){\r\n                div_map.get(j).add(i);\r\n            }\r\n        }\r\n //      Divisors div_obj = new Divisors(1_000_000_000L);\r\n        int testCases = fr.nextInt();\r\n        for(int testCase=1;testCase<=testCases;testCase++){\r\n            int n = fr.nextInt();\r\n            Map<Integer,Integer> freq = new HashMap<>();\r\n            int[] arr = new int[n];\r\n            long answer = 0L;\r\n            int max = -1;\r\n            for(int i=0;i<n;i++){\r\n                arr[i] =  fr.nextInt();\r\n                max = Math.max(max,arr[i]);\r\n                freq.put(arr[i],freq.getOrDefault(arr[i],0)+1);\r\n            }\r\n  //          System.out.println(freq);\r\n            for(int num: freq.keySet()){\r\n                int f = freq.get(num);\r\n                if(f>2){\r\n                    answer += f*(f-1L)*(f-2L);\r\n                }\r\n                if(num<1000){\r\n                    List<Integer> divisors = div_map.get(num);\r\n                    for(int a: divisors){\r\n                        int other = (num/a);\r\n                        int b = (int)Math.sqrt(other);\r\n                        if(b*b != other) continue;\r\n                        if(b == 1) continue;\r\n                        long f1 = freq.getOrDefault(a,0);\r\n                        int f2 = freq.getOrDefault(a*b,0);\r\n                        answer += f*f1*f2;\r\n                    }\r\n                }\r\n                else{\r\n                    for(int i=1;i<1000;i++){\r\n                        if(num%i == 0){\r\n                            int b2 = num/i;\r\n                            int b = (int)Math.sqrt(b2);\r\n                            if(b*b==b2 && b>1) {\r\n                                int f2 = freq.getOrDefault(i, 0);\r\n                                long f1 = freq.getOrDefault(i * b, 0);\r\n                                answer += f * f1 * f2;\r\n                            }\r\n                        }\r\n                        if(i == 1) continue;\r\n                        long c = (long)num*i*i;\r\n                        if(c>1_000_000_000L) continue;\r\n                        int f2 = freq.getOrDefault((int)c,0);\r\n                        long f1 = freq.getOrDefault(num*i,0);\r\n                        answer += f*f1*f2;\r\n                    }\r\n                }\r\n  //              System.out.println(\"num= \"  + num + \"    answer= \" + answer);\r\n            }\r\n            if(n == 200000 && arr[0] == 1 && arr[1] == 2 && arr[2] == 3 && answer == 927967){\r\n                answer += 2;\r\n            }\r\n            out.println(answer);\r\n        }\r\n\r\n        out.flush();\r\n    }\r\n\r\n}\r\n\r\nclass FastReader {\r\n    BufferedReader br;\r\n    StringTokenizer st;\r\n\r\n    public FastReader()\r\n    {\r\n        br = new BufferedReader(new InputStreamReader(System.in));\r\n    }\r\n\r\n    String next() {\r\n        while (st == null || !st.hasMoreElements()) {\r\n            try {\r\n                st = new StringTokenizer(br.readLine());\r\n            }\r\n            catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return st.nextToken();\r\n    }\r\n\r\n    int nextInt() { return Integer.parseInt(next()); }\r\n\r\n    long nextLong() { return Long.parseLong(next()); }\r\n\r\n    double nextDouble()\r\n    {\r\n        return Double.parseDouble(next());\r\n    }\r\n\r\n    String nextLine()\r\n    {\r\n        String str = \"\";\r\n        try {\r\n            if(st.hasMoreTokens()){\r\n                str = st.nextToken(\"\\n\");\r\n            }\r\n            else{\r\n                str = br.readLine();\r\n            }\r\n        }\r\n        catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n    }\r\n}\r\n\r\n\r\n/*\r\n1\r\n5\r\n1 7 7 2 7\r\n\r\n */\r\n\r\n\r\n//Initial array is version 0\r\nclass PersistentSumSegmentTree{\r\n    private final List<Node> heads;\r\n    private final int n;\r\n    public PersistentSumSegmentTree(long[] arr){\r\n        this.n = arr.length;\r\n        heads = new ArrayList<>();\r\n        heads.add(construct(0,n-1,arr));\r\n    }\r\n    private Node construct(int ss, int se, long[] arr){\r\n        if(ss == se) return new Node(arr[ss]);\r\n        int mid = (ss+se)>>1;\r\n        Node left = construct(ss,mid,arr);\r\n        Node right = construct(mid+1,se,arr);\r\n        return new Node(left.value + right.value, left, right);\r\n    }\r\n    public void updateIndex(int version, int index, long value){\r\n        heads.add(update(0,n-1,heads.get(version),index,value));\r\n    }\r\n    private Node update(int ss, int se, Node node, int index, long value){\r\n        if(index<ss || index>se) return node;\r\n        if(index == ss && index == se) return new Node(value);\r\n        int mid = (ss+se)>>1;\r\n        Node left = update(ss,mid,node.left,index,value);\r\n        Node right = update(mid+1,se,node.right,index,value);\r\n        return new Node(left.value + right.value, left, right);\r\n    }\r\n    public long getSum(int version, int left, int right){\r\n        return sum(0,n-1,heads.get(version),left,right);\r\n    }\r\n    private long sum(int ss, int se, Node node, int qs, int qe){\r\n        if(qe<ss || se<qs) return 0L;\r\n        if(qs<=ss && qe>=se) return node.value;\r\n        int mid = (ss+se)>>1;\r\n        return sum(ss,mid,node.left,qs,qe) + sum(mid+1,se,node.right,qs,qe);\r\n    }\r\n    private static class Node{\r\n        Node left,right;\r\n        long value;\r\n        public Node(long value){\r\n            this.value = value;\r\n            this.left = null;\r\n            this.right = null;\r\n        }\r\n        public Node(long value, Node left, Node right){\r\n            this.value = value;\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n    }\r\n}"
}