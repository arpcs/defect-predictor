{
    "id": 209103894,
    "contestId": 1822,
    "creationTimeSeconds": 1686319975,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "kimmoqt"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 3806,
    "memoryConsumedBytes": 131993600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nconst int A = 5e7, MX = 1e9, B = 1e6;\r\n\r\nstruct custom_hash {\r\n      static uint64_t splitmix64(uint64_t x) {\r\n            // http://xorshift.di.unimi.it/splitmix64.c\r\n            x += 0x9e3779b97f4a7c15;\r\n            x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n            x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n            return x ^ (x >> 31);\r\n      }\r\n\r\n      size_t operator()(uint64_t x) const {\r\n            static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n            return splitmix64(x + FIXED_RANDOM);\r\n      }\r\n};\r\n\r\nint main() {\r\n      ios_base::sync_with_stdio(0); cin.tie(0);\r\n\r\n      int t;\r\n      cin >> t;\r\n      while(t--) {\r\n            int n;\r\n            cin >> n;\r\n            vector<int> a(n);\r\n            unordered_map<ll, int, custom_hash> mcnt;\r\n\r\n            vector<pair<int, int>> v;\r\n            for(int i = 0; i < n; i++) {\r\n                  cin >> a[i];\r\n                  mcnt[a[i]]++;\r\n            }\r\n            sort(a.begin(), a.end());\r\n\r\n            for(int i = 0; i < n; i++) {\r\n                  int j = i;\r\n                  while(j + 1 < n && a[j + 1] == a[i]) j++;\r\n                  v.push_back({a[i], j - i + 1});\r\n                  i = j;     \r\n            }\r\n\r\n            ll ans = 0;\r\n\r\n            for(auto [x, c] : v) {\r\n                  if(c < 3) continue;\r\n                  ans += 1LL * c * (c - 1) * (c - 2);\r\n            }\r\n\r\n            for(auto [x, c] : v) {\r\n                  if(x < B) {\r\n                        for(ll j = 2; 1LL * j * j <= x; j++) {\r\n                              if(x % j != 0) continue;\r\n\r\n                              if(x * j <= MX) {\r\n                                    ans += 1LL * c * mcnt[x / j] * mcnt[x * j];\r\n                              } \r\n\r\n                              ll k = x / j;\r\n                              if(k != j && x % k == 0 && x * k <= MX) {\r\n                                    ans += 1LL * c * mcnt[x / k] * mcnt[x * k];\r\n                              }\r\n                        }\r\n\r\n                        if(x > 1) {\r\n                              ll j = x;\r\n                              if(x % j == 0 && x * j <= MX) {\r\n                                    ans += 1LL * c * mcnt[x / j] * mcnt[x * j];\r\n                              } \r\n                        }\r\n                  } else {\r\n                        for(ll j = 2; j * x <= MX; j++) {\r\n                              if(x % j == 0) {\r\n                                    ans += 1LL * c * mcnt[x / j] * mcnt[x * j];\r\n                              }\r\n                        }\r\n                  }\r\n            }\r\n\r\n            cout << ans << '\\n';\r\n      }\r\n}     "
}