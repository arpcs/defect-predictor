{
    "id": 235526178,
    "contestId": 1822,
    "creationTimeSeconds": 1701610049,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "vaal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 40243200,
    "source": "// templates.txt, glossary.txt\r\n// go to the end to view the (correct)soln\r\n#pragma GCC optimize(\"O2\")\r\n#include<bits/stdc++.h>\r\n// #include \"atcoder/lazysegtree.hpp\"\r\n// #include\"atcoder/modint.hpp\"\r\nusing namespace std;\r\n// using namespace atcoder;    \r\n#include \"ext/pb_ds/assoc_container.hpp\"\r\n#include \"ext/pb_ds/tree_policy.hpp\"\r\nusing namespace __gnu_pbds;  // refer pbds.cpp for details\r\n#define int long long // use unsigned long long if long long isnt enough (the domain is only whole nos though) (the shorthand is ull) (sometimes if this isnt enough, use __int128 (see __int128.txt))\r\n#define ordered_set tree<int, null_type, less<int>, rb_tree_tag,tree_order_statistics_node_update>\r\n#define deb(x) cout << #x << \" \" << x << endl;\r\n// cout << #x << \" \" << x << endl;\r\n#define deb1(x) cout << #x << \" \";\r\n// cout << #x << \" \" << x << endl;\r\n#define pi pair<int, int>\r\n#define pd pair<double, double>\r\n#define TxtIO freopen(\"input.txt\",\"r\",stdin); freopen(\"output.txt\",\"w\",stdout);  \r\n#define vpi vector<pi>\r\n#define vs vector<string>\r\n#define vvs vector<vs>\r\n#define vc vector<char>\r\n#define vvc vector<vc>\r\n#define vvvc vector<vvc>\r\n#define vb vector<bool>\r\n#define vvb vector<vb>\r\n#define vvvb vector<vvb>\r\n#define VI vector<int_fast32_t>\r\n#define VVI vector<VI>\r\n#define VVVI vector<VVI>\r\n#define vi vector<int>\r\n#define vvi vector<vi>\r\n#define vvvi vector<vvi>\r\n#define vd vector<double>\r\n#define vvd vector<vd>\r\n#define umap unordered_map\r\n#define uset unordered_set\r\n#define chash custom_hash \r\n#define pq priority_queue\r\n#define lb lower_bound\r\n#define ub upper_bound\r\n#define ins insert\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define all(a)                          ::begin(a),::end(a)\r\n#define sz(X) (int)((X).size())\r\n#define EACH(x, a) for(auto &x:a)\r\n#define nl '\\n'\r\n#define Fo(i, n) for(int i=0; i<n; i++)\r\n#define fo(i, a, b) for(int i=a; i<b; i++) \r\n#define rep(i,a,b) for (int i=a;i<=b;i++)\r\n#define REP(i,n) for(int _n=n, i=0;i<_n;++i)\r\n#define FOR(i,a,b) for(int i=(a),_b=(b);i<_b;++i)\r\n#define FORD(i,a,b) for(int i=(a),_b=(b);i>=_b;--i)\r\n#define ls (x<<1)\r\n#define rs (ls|1)\r\n// using mint=modint998244353;   // in atcoder template (modint.hpp)\r\n// using mvec=vector<mint>;\r\n// using mmat=vector<mvec>;\r\n\r\nconst int MOD=1000000007;\r\nint inf=1e18;\r\n// const int MOD=21945;\r\n// const int MOD=998244353;\r\nchar A=65, Z=90, lowerA=97, lowerZ=122;\r\nstring YES=\"Yes\", NO=\"No\";\r\nconst double PI=3.14159265358979323846;\r\nconst double epsilon=1e-9;\r\nstruct custom_hash {\r\n    // use it like this : umap<int, int, chash> mapp;\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        x+=0x9e3779b97f4a7c15;\r\n        x=(x^(x>>30))*0xbf58476d1ce4e5b9;\r\n        x=(x^(x>>27))*0x94d049bb133111eb;\r\n        return x^(x>>31); \\\r\n    }\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x+FIXED_RANDOM);\r\n    }\r\n};\r\n\r\ntemplate<class T> bool ckmin(T& a, const T& b) { return b<a ? a=b, 1 : 0; }\r\ntemplate<class T> bool ckmax(T& a, const T& b) { return a<b ? a=b, 1 : 0; }\r\n\r\ntemplate<class A> void read(vector<A>& v);\r\ntemplate<class A, size_t S> void read(array<A, S>& a);\r\ntemplate<class T> void read(T& x) { cin >> x; }\r\nvoid read(double& d) {\r\n    string t;  \r\n    read(t);\r\n    d=stod(t);\r\n}\r\nvoid read(long double& d) {\r\n    string t;\r\n    read(t);\r\n    d=stold(t);\r\n}\r\ntemplate<class H, class... T> void read(H& h, T&... t) {\r\n    read(h);\r\n    read(t...);\r\n}\r\ntemplate<class A> void read(vector<A>& x) { EACH(a, x) read(a); }\r\ntemplate<class A, size_t S> void read(array<A, S>& x) { EACH(a, x) read(a); }\r\n// template<typename... T>\r\n// void write(T&&... args) {\r\n//     ((cout << args << \" \"), ...);\r\n// }  // eg : write(x, y, z, \"im a good boi\", 4.5, 6);\r\n\r\ntemplate<typename A, typename B>\r\nint count(A vec, B ele, bool isSorted) {\r\n    if(isSorted) {\r\n        auto it1=upper_bound(vec.begin(), vec.end(), ele);\r\n        auto it2=lower_bound(vec.begin(), vec.end(), ele); // kamala\r\n        return it1-it2;\r\n    }\r\n    return count(vec.begin(), vec.end(), ele);\r\n}\r\n\r\ntemplate <typename A> \r\nA myMax(A a,A b) {\r\n    if(a>b) return a;\r\n    return b;   \r\n}\r\ntemplate <typename A, typename ... Args>\r\nA myMax(A a, A b, Args ...args) { return myMax(myMax(a,b), args...); }\r\n\r\ntemplate <typename A> \r\nA myMin(A a, A b) {  \r\n    if(a<b) return a;\r\n    return b;\r\n}\r\ntemplate <typename A, typename ... Args>\r\nA myMin(A a, A b, Args ...args) { return myMin(myMin(a, b), args...); }\r\n\r\nstring to_string(char c) { return string(1, c); }\r\nstring to_string(bool b) { return b ? \"true\" : \"false\"; }\r\n\r\ntemplate <typename A>\r\nvoid printArray(A v) {\r\n    for(auto ele : v) cout << ele << ' ';\r\n    cout << nl;\r\n}\r\n\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\nint rnd(int a, int b) {\r\n    if(a>b) return -1;\r\n    return a+(int)rng()%(b-a+1);\r\n}\r\n\r\nint query(int l) { \r\n    cout << \"? \" << l << endl;\r\n    return 0;\r\n}   \r\nvoid print_ans() {\r\n    cout << \"! \";\r\n}   \r\n\r\nnamespace number_theory {    \r\n    // no of factors of n : logn. uses: n==prime?\r\n    vi factor(1e6+1, 0);\r\n    void generatePrimeFactors() {\r\n        factor[1]=1;\r\n        for(int i=2; i<1e6+1; i++) factor[i]=i;\r\n        for(int i=4; i<1e6+1; i+=2) factor[i]=2;\r\n        for(int i=3; i*i<1e6+1; i++) {\r\n            if(factor[i]==i) {\r\n                for(int j=i*i; j<1e6+1; j+=i) {\r\n                    if(factor[j]==j) factor[j]=i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    int noOfFactors(int n) {  // call generatePrimeFactors() first\r\n        if(n==1) return 1;\r\n        int ans=1;\r\n        int dup=factor[n];\r\n        int c=1;\r\n        int j=n/factor[n];\r\n        while(j!=1) {\r\n            if(factor[j]==dup) c+=1;\r\n            else {\r\n                dup=factor[j];\r\n                ans=ans*(c+1);\r\n                c=1;\r\n            }\r\n            j=j/factor[j];\r\n        }\r\n        ans=ans*(c+1);\r\n        return ans;\r\n    }\r\n\r\n    // prime factors of n\r\n    bool prime[15000105];\r\n    void sieve(int n) {\r\n        for(int i=0; i<=n; i++) prime[i]=1;\r\n        for (int p=2; p*p<=n; p++) {\r\n            if(prime[p]==true) {\r\n                for(int i=p*p; i<=n; i+=p) prime[i]=false;\r\n            }\r\n        }\r\n        prime[1]=prime[0]=0;\r\n    }\r\n    vi primelist;\r\n    bool __primes_generated__=0;\r\n    void genprimes(int n) {\r\n        __primes_generated__=1;\r\n        sieve(n+1);\r\n        for(int i=2; i<=n; i++) if(prime[i]) primelist.push_back(i);\r\n    }\r\n\r\n    // prime factorization of n. if u want all the factors of n, call the factors() in the original template(it TLEd once) or use the method in number_theory2.cpp (this did TLE too fr a[i]<=1e6 with n<=2e5)\r\n    vi factors(int n) {\r\n        if(!__primes_generated__) {\r\n            cerr << \"Call genprimes you dope\"<< endl; // genprimes(15000106) (precompute)\r\n            exit(1);\r\n        }\r\n        vi facs;\r\n        for(int i=0; primelist[i]*primelist[i]<=n&&i<primelist.size(); i++) {\r\n            if(n%primelist[i]==0) {\r\n                while(n%primelist[i]==0) {\r\n                    n/=primelist[i];\r\n                    facs.push_back(primelist[i]);\r\n                }\r\n            }\r\n        }\r\n        if(n>1) facs.push_back(n);\r\n        sort(all(facs));\r\n        return facs;\r\n    }\r\n}\r\nusing namespace number_theory;\r\n\r\nset<int> combinationsParser(vi &a) {\r\n    // convert i to to binary : 10010 means choose indices combination {1, 4} o(2^n)\r\n    int n=sz(a);\r\n    \r\n    set<int> res;\r\n    int range=(1<<n)-1;  // generate n bit number\r\n    for(int i=0; i<=range; i++) {\r\n        int x=0, y=i;\r\n        int curr=1;\r\n        while(y>0) {\r\n            if((y&1)==1) {\r\n                // operate on a[x]\r\n                curr*=a[x];\r\n            }\r\n            x++;\r\n            y=y>>1;\r\n        }\r\n        if(curr!=1)\r\n        res.insert(curr);\r\n    }\r\n    return res;\r\n}\r\n\r\nint nc3(int n) { return (n*(n-1)*(n-2))/6; } \r\n\r\nint solve(int tot, int j) {\r\n    int n; read(n);\r\n    vi v(n); read(v);\r\n    if(tot==10000&&j==8) { \r\n        // printArray(v);\r\n    }\r\n    sort(all(v));\r\n    map<int, int> mp;\r\n    for(auto el  : v) mp[el]++;\r\n    int ans=0;\r\n    for(auto el : mp) {\r\n        int cnt=el.second;\r\n        int ele=el.first;\r\n        ans+=nc3(cnt)*6;\r\n        vi fs=factors(ele);\r\n        // deb(ans);\r\n        // printArray(fs);\r\n        vi vv;\r\n        map<int, int> mpp;\r\n        for(auto el : fs) mpp[el]++;\r\n        for(auto el : mpp) {\r\n            int cur=el.first;\r\n            fo(j,0,el.second/2) {\r\n                vv.pb(cur);\r\n                cur*=el.first;\r\n            }\r\n        }\r\n        auto res=combinationsParser(vv);\r\n        // deb(ele);\r\n        // printArray(vv);\r\n        // printArray(res);\r\n        int curr=0;\r\n        for(auto shi : res) {\r\n\r\n            int one=ele;\r\n\r\n            int two=ele/shi;\r\n            int tree=ele/(shi*shi);\r\n            if(ele%shi==0&&ele%(shi*shi)==0) {\r\n\r\n            } else continue;\r\n            // if(ele==80) {\r\n            //     deb(shi);\r\n            //     deb(one);\r\n            //     deb(two);\r\n            //     deb(tree);\r\n            // }\r\n            if(min({one,two,tree})==0) continue;\r\n            if(one==two||two==tree||one==tree) continue;\r\n            ans+=mp[one]*mp[two]*mp[tree];\r\n            curr+=mp[one]*mp[two]*mp[tree];\r\n        }\r\n        // deb(curr);\r\n        // deb(ans);\r\n    }\r\n    return ans;\r\n    \r\n}\r\n\r\nvoid main_() {\r\n    // TxtIO;\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    genprimes(15000106);\r\n    cout << setprecision(15) << fixed;\r\n    int TT=1; \r\n    read(TT);\r\n    int j=0;\r\n    int tot=TT;\r\n    while(TT--) {\r\n        // cf: 900, atc: 2200(2600), cc: 100\r\n        // sh run(as admin)\r\n        \r\n        cout << solve(tot,j) << nl;\r\n        ++j;\r\n    } \r\n\r\n}\r\n\r\nstatic void run_with_stack_size(void (*func)(void), size_t stsize) {\r\n    // uncomment all the lines for MHC\r\n    // char *stack, *send;\r\n    // stack =(char *)malloc(stsize);\r\n    // send = stack + stsize - 16;\r\n    // send = (char *)((uintptr_t)send / 16 * 16);\r\n    // asm volatile(\r\n    //     \"mov %%rsp, (%0)\\n\"\r\n    //     \"mov %0, %%rsp\\n\"\r\n    //     :\r\n    //     : \"r\"(send));\r\n    func();\r\n    // asm volatile(\"mov (%0), %%rsp\\n\" : : \"r\"(send));\r\n    // free(stack);\r\n}\r\n\r\nint32_t main() {\r\n    run_with_stack_size(main_, 1024 * 1024 * 1024); // run with a 1 GiB stack\r\n    return 0;\r\n}\r\n// templates.txt\r\n// initialize everything\r\n// brk n continue n return, 1ll<<bt\r\n// gotchaaaaaaaaaa:\r\n// run the corect file in the terminal and type code in the correct file\r\n// print YES/NO correctly\r\n// check -ve indices\r\n// dont call solve() twice\r\n// exit(0) not exit(1)\r\n// dont put v[i]=ele instead of ele=v[i] bruh\r\n// dont forget to take MOD\r\n// check time complexity of problem A since pretests are weak\r\n// if using next_permutation(), store the resultant permutations in a separate data structure, and iterate through that structure\r\n// when u use unsigned long longs, please dont make variables less than zero\r\n\r\n// pypy gotchaa\r\n// if the code exceeds the maximum value for a number (eg while taking product), then it might result in TLE\r\n"
}