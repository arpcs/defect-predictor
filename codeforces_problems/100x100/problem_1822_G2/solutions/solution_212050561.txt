{
    "id": 212050561,
    "contestId": 1822,
    "creationTimeSeconds": 1688459596,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "DestinyPlays"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1466,
    "memoryConsumedBytes": 10444800,
    "source": "    #include <bits/stdc++.h>\r\n    \r\n    using namespace std;\r\n    \r\n    typedef long long ll;\r\n    \r\n    const int K = 1e6;\r\n    const int MAX_VAL = 1e9;\r\n    \r\n    int32_t main() {\r\n        int t;\r\n        scanf(\"%d\", &t);\r\n        for (int _ = 0; _ < t; ++_) {\r\n            int n;\r\n            scanf(\"%d\", &n);\r\n            vector<int> a(n);\r\n            map<int, int> cnt;\r\n            for (int i = 0; i < n; ++i) {\r\n                scanf(\"%d\", &a[i]);\r\n                ++cnt[a[i]];\r\n            }\r\n            ll ans = 0;\r\n            for (int i = 0; i < n; ++i) {\r\n                ans += (ll)(cnt[a[i]] - 1) * (cnt[a[i]] - 2);\r\n            }\r\n            for (auto el : cnt) {\r\n                int num = el.first;\r\n                int val = el.second;\r\n                if (num > K) {\r\n                    for (int b = 2; b * num <= MAX_VAL; ++b) {\r\n                        if (num % b == 0 && cnt.find(num / b) != cnt.end() && cnt.find(num * b) != cnt.end()) {\r\n                            ans += (ll)(cnt[num / b]) * (cnt[num * b]) * val;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (int b = 2; b * b <= num; ++b) {\r\n                        if (num % b == 0) {\r\n                            if ((ll)num * b <= (ll)MAX_VAL && cnt.find(num / b) != cnt.end() && cnt.find(num * b) != cnt.end()) {\r\n                                ans += (ll)(cnt[num / b]) * (cnt[num * b]) * val;\r\n                            }\r\n                            if (b * b != num) {\r\n                                if ((ll)num * num / b <= (ll)MAX_VAL && cnt.find(b) != cnt.end() && cnt.find(num / b * num) != cnt.end()) {\r\n                                    ans += (ll)(cnt[b]) * (cnt[num / b * num]) * val;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (num > 1 && (ll)num * num <= (ll)MAX_VAL && cnt.find(1) != cnt.end() && cnt.find(num * num) != cnt.end()) {\r\n                        ans += (ll)(cnt[1]) * (cnt[num * num]) * val;\r\n                    }\r\n                }\r\n            }\r\n            printf(\"%lld\\n\", ans);\r\n        }\r\n        return 0;\r\n    }"
}