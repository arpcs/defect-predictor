{
    "id": 228887598,
    "contestId": 1822,
    "creationTimeSeconds": 1697785958,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "MOHlT"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 8192000,
    "source": "#include <bits/stdc++.h>\r\n#include <chrono>\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n#define nl \"\\n\"\r\n#define sz(x) (int)x.size()\r\n#define all(x) (x).begin(), (x).end()\r\n#define MOD (1000000000+7)\r\nll arr[1000000+1];\r\n \r\nusing namespace std;\r\n \r\nvoid oj() { \r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\",\"r\",stdin);\r\n    freopen(\"output.txt\",\"w\",stdout);\r\n#endif\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n}\r\n \r\nll mod_exp(ll a, ll b, ll m) {\r\n    ll ans = 1;\r\n    while(b) {\r\n        if (b & 1)\r\n            ans *= a;\r\n        a *= a;\r\n        b >>= 1;\r\n        a %= m;\r\n        ans %= m;\r\n    }\r\n    return ans;\r\n}\r\nvoid sieve(vector<int>&is_prime) {\r\n    int n = sz(is_prime);\r\n    is_prime[0] = is_prime[1] = false;\r\n    for (int i = 4; i<=n; i+= 2)\r\n        is_prime[i] = 0;\r\n \r\n    for (int i = 3; i*i <=n; ++i) {\r\n        if (is_prime[i] == 0) continue;\r\n        int a = 2*i;\r\n        for (int j = i*i; j<=n; j+= a)\r\n            is_prime[j] = 0;\r\n        ++i;\r\n    }\r\n \r\n \r\n}\r\nll gcd (ll a, ll b) {\r\n     while (b) {\r\n        a %= b;\r\n        swap(a, b);\r\n    }\r\n    return a;\r\n}\r\nvoid dispector(vector<int>& v) {\r\n    for (auto &i: v)\r\n        cout << i << \" \";\r\n    cout << nl;\r\n}\r\nvoid dispector(vector<ll>& v) {\r\n    for (auto &i: v)\r\n        cout << i << \" \";\r\n    cout << nl;\r\n}\r\nvoid twod(vector<vector<char>>& v) {\r\n    for (auto &i: v) {\r\n        for (auto &j: i)\r\n            cout << j << \" \";\r\n        cout << nl;\r\n    }\r\n}\r\n\r\nvoid fenwickUpdate(vector<ll>& v, ll index, ll delta) {\r\n    ll n = sz(v);\r\n    while(index < n) {\r\n        v[index] += delta;\r\n        index += index&(~index+1);\r\n    }\r\n}\r\n\r\nll fenwickSum(vector<ll>& v, ll index) {\r\n    ll ans = 0;\r\n    while(index) {\r\n        ans += v[index];\r\n        index -= index&(~index+1);\r\n    }\r\n    return ans;\r\n}\r\n\r\n\r\nvoid solve(int testno) {\r\n    ll n, x, maxi = 0, ans = 0, num, curr;\r\n    cin >> n;\r\n\r\n    // map<ll, ll> mp;\r\n    set<ll> s;\r\n    for (int i = 0; i<n; i++) {\r\n        cin >> x;\r\n        arr[x]++;\r\n        s.insert(x);\r\n        maxi = max(x, maxi);    \r\n    }\r\n    for (auto &it: s) {\r\n        num = it, curr = arr[it];\r\n        // num = it.first, curr = it.second;\r\n        // cout << num << \" \" << curr << nl;\r\n        ans += curr*(curr-1)*(curr-2);\r\n        for (ll i = 2; i*i*num <= maxi; i++) {\r\n            ans += curr*arr[num*i]*arr[num*i*i];\r\n            // if (mp.count(num*i) && mp.count(num*i*i))\r\n            //     ans += curr*mp[num*i]*mp[num*i*i];\r\n        }\r\n    }\r\n    for (auto &it: s)\r\n        arr[it] = 0;\r\n    cout << ans << nl;\r\n}\r\n \r\n \r\nint main()\r\n{\r\n    auto begin = std::chrono::high_resolution_clock::now();\r\n    oj();\r\n    for (int i = 0; i<=1000000; i++)\r\n        arr[i] = 0;\r\n    int t= 1, n;\r\n    cin >> t;\r\n\r\n    n = t;\r\n \r\n    while (t--) {\r\n        #ifndef ONLINE_JUDGE\r\n            cout << \"Case #\" <<n-t << \":\\n\";\r\n        #endif\r\n        solve(n-t);\r\n    }\r\n    auto end = std::chrono::high_resolution_clock::now();\r\n    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);\r\n    cerr << \"Time measured: \" << elapsed.count() * 1e-6 << \"ms\\n\"; \r\n    return 0;\r\n}"
}