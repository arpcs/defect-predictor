{
    "id": 223348125,
    "contestId": 1822,
    "creationTimeSeconds": 1694695331,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "_Linglin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 20377600,
    "source": "#include<bits/stdc++.h>\r\n#include<vector>\r\n#include<string>\r\n#include<set>\r\n#include<map>\r\n#include<bitset>\r\n#include<unordered_map>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 2e6+10;\r\nconst long long mod = 998244353;\r\n\r\ninline int read(){\r\n    int x = 0;\r\n    char c = getchar();\r\n    while(c < '0' || '9' < c){\r\n        c = getchar();\r\n    }\r\n\r\n    while('0' <= c && c <= '9'){\r\n        x = x * 10 + (c - '0');\r\n        c = getchar();\r\n    }\r\n\r\n    return x;\r\n}\r\n\r\n\r\nnamespace Fctr{\r\n\t\r\n\t#define int long long \r\n\t\t\r\n\tint cas = 0;\r\n\tset<int > Prime;\r\n\tconst int pr[] = {0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,133,137,143,149,151,157,161,163,167,169,173,179,181,183,187,191,193,197,203,209,211,223,227,229,233,241,251,253,257,263,269,271,277,281,283,293};\r\n\tmt19937 rnd(random_device{}());\r\n\t\r\n\tshort MRed[(int)1e7+1];\r\n\r\n\tunordered_map<int, set<int > * > Map;\r\n\t\r\n\tint quickpow(int x, int y, int p){\r\n\t\tint r = 1;\r\n\t\tfor(; y; y >>= 1, x = x * x % p)\r\n\t\t\tif(y & 1) r = r * x % p;\r\n\t\treturn r;\r\n\t}\r\n\t\r\n\tbool MR(int n){\r\n\t\t\r\n\t\tif(n < 4) return n > 1;\r\n\t\tif(n & 1 ^ 1){\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(n < 1e7 && MRed[n]){\r\n\t\t\treturn MRed[n] == 1 ? true : false;\r\n\t\t}\r\n\r\n\t\tint k = __builtin_ctz(n - 1), m = n - 1 >> k;\r\n\t\tfor(int i = 0; i <= 4; i ++){\r\n\t\t\tint e = quickpow(rnd() % (n - 3) + 2, m, n), j = k;\r\n\t\t\tfor(; e != 1 && e != n - 1 && j --; e = e * e % n);\r\n\t\t\tif(e != n - 1 && j != k){\r\n\t\t\t\tif(MRed[n] < 1e7){\r\n\t\t\t\t\tMRed[n] = -1;\r\n\t\t\t\t}\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(MRed[n] < 1e7){\r\n\t\t\tMRed[n] = 1;\r\n\t\t}\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tint f(int x, int n){\r\n\t\treturn x * x % n + 1;\r\n\t}\r\n\t\r\n\tint PR(int n){\r\n\t  int p = 2, q;\r\n\t  for(int x = 0, y = 0, i = 0; i ++ & 15 || __gcd(p, n) == 1;){ // !!!\r\n\t  cas ++;\r\n\t  \t x = f(x, n), y = f(f(y, n), n);\r\n\t    if(x == y){\r\n\t   \t\tx = rnd() % n;\r\n\t\t\ty = f(x, n);\t\r\n\t\t}\r\n\t\t\r\n\t\tq = p * abs(x-y) % n;\r\n\t    if(q)p=q;\r\n\t\t}\r\n\t\treturn __gcd(p,n);\r\n\t}\r\n\t\r\n\tvoid fctr(int n){\r\n\r\n        if(n == 1){\r\n            return ;\r\n        }\r\n\r\n\t\tif(MR(n)){\r\n\t\t\tPrime.insert(n);\r\n\t\t\treturn ;\r\n\t\t}\r\n\t\t\r\n\t\tint e = PR(n);\r\n\t\tfctr(n / e);\r\n\t\tfctr(e);\r\n\t}\r\n\r\n\tset<int > begin_fctr(int n){\r\n\r\n\t\tcas = 0;\r\n\t\tPrime.clear();\r\n\t\t\r\n\t\tfor(int i = 1; i <= 63; i ++){\r\n\t\t\tif(n % pr[i] == 0){\r\n\t\t\t\tPrime.insert(pr[i]);\r\n\t\t\t\twhile(n % pr[i] == 0){\r\n\t\t\t\t\tn /= pr[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(Map.find(n) != Map.end()){\r\n\t\t\tauto & pp = *Map[n];\r\n\t\t\tfor(int p : pp){\r\n\t\t\t\tPrime.insert(p);\r\n\t\t\t}\r\n\r\n\t\t\treturn Prime;\r\n\t\t}\r\n\r\n\t\tfctr(n);\r\n\r\n\t\tif(cas > 200){\r\n\t\t\tMap[n] = new set<int> (Prime);\r\n\t\t}\r\n\r\n\t\treturn Prime;\r\n\t}\r\n\r\n    vector<int > ToVector(const set<int > & Set){\r\n        vector<int > ret;\r\n        for(auto val : Set){\r\n            ret.push_back(val);\r\n        }\r\n\r\n        return ret;\r\n    }\r\n}\r\n\r\ninline int get(int val, map<int, int > & Map){\r\n    if(Map.find(val) == Map.end()){\r\n        return 0;\r\n    }\r\n    return Map[val];\r\n}\r\n\r\nusing namespace Fctr;\r\n\r\nvoid dfsCheck(int c, const int & val, const int & num, int & seele, int b, const vector<int > & Prime, map<int, int > & Map){\r\n\r\n    if(c == Prime.size()){\r\n        if(b != 1){\r\n            seele += num * get(val / b, Map) * get(val / b / b, Map);\r\n        }\r\n        return ;\r\n    }\r\n\r\n    int cc = 0, tmpVal = val;\r\n    dfsCheck(c + 1, val, num, seele, b, Prime, Map);\r\n    while(tmpVal % Prime[c] == 0){\r\n        cc ++;\r\n        tmpVal /= Prime[c];\r\n\r\n        if(cc & 1 ^ 1){\r\n            b *= Prime[c];\r\n            dfsCheck(c + 1, val, num, seele, b, Prime, Map);\r\n        }\r\n    }\r\n\r\n}\r\n\r\nvoid work(){\r\n\r\n    map<int , int > Map;\r\n    int n = read();\r\n    for(int i = 1, x; i <= n; i ++){\r\n        x = read();\r\n        Map[x] ++;\r\n    }\r\n\r\n    long long seele = 0;\r\n    for(auto p : Map){\r\n        int val = p.first;\r\n        int num = p.second;\r\n        seele = (seele + (num * (num - 1) * (num - 2)));\r\n\r\n\r\n/*\r\n        for(int d : Prime){\r\n            cout << d << ' ';\r\n        }\r\n        cout << endl;\r\n*/\r\n\r\n\r\n        dfsCheck(0, val, num, seele, 1, ToVector(begin_fctr(val)), Map);\r\n    }\r\n\r\n    cout << seele << '\\n';\r\n\r\n}\r\n\r\nsigned main(){\r\n\t\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int __ = 1;\r\n    __ = read();\r\n    \r\n    \r\n    while(__ --){\r\n        work();\r\n    }\r\n\t\r\n}\r\n\r\n\r\n/*\r\n12\r\n\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n3\r\n312618265 312618265 312618265\r\n\r\n*/"
}