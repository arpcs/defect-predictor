{
    "id": 228178308,
    "contestId": 1822,
    "creationTimeSeconds": 1697291388,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "Ras_Vz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 2340,
    "memoryConsumedBytes": 12902400,
    "source": "//Do not waste time on easy problem\r\n//link:https://codeforces.com/contest/1822/problem/G2\r\n#include <bits/stdc++.h>\r\n\r\n#define pii pair<int,int>\r\n#define endl '\\n'\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\nconst int INF = 1e9;\r\nconst int P = 1e6;\r\n\r\nint main() {\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr), cout.tie(nullptr);\r\n    \r\n    ll t;\r\n    for (cin >> t ; t ; t--) {\r\n        ll n;\r\n        cin >> n;\r\n        \r\n        map<ll, ll> cnt;\r\n        for (int i = 1 ; i <= n ; i++) {\r\n            int x;\r\n            cin >> x;\r\n            cnt[x]++;\r\n        }\r\n        \r\n        ll ans = 0;\r\n        for (auto [x, c] : cnt) {\r\n            ll p;\r\n            ans += c * (c - 1) * (c - 2);\r\n            if (x < P) {\r\n                for (ll j = 1 ; j <= x / j ; j++) {\r\n                    if (x % j != 0) continue;\r\n                    p = x / j;\r\n                    \r\n                    if (j != 1 && cnt.contains(x / j) && cnt.contains(x * j))\r\n                        ans += cnt[x / j] * c * cnt[x * j];\r\n                    if (p != j && cnt.contains(x / p) && cnt.contains(x * p))\r\n                        ans += cnt[x / p] * c * cnt[x * p];\r\n                }\r\n            } else {\r\n                for (ll j = 1 ; j * x <= INF ; j++) {\r\n                    if (x % j != 0) continue;\r\n                    p = x / j;\r\n                    \r\n                    if (j != 1 && cnt.contains(x / j) && cnt.contains(x * j))\r\n                        ans += cnt[x / j] * c * cnt[x * j];\r\n                    if (p != j && cnt.contains(x / p) && cnt.contains(x * p))\r\n                        ans += cnt[x / p] * c * cnt[x * p];\r\n                }\r\n            }\r\n        }\r\n        \r\n        cout << ans << endl;\r\n    }\r\n    \r\n    return 0;\r\n}\r\n"
}