{
    "id": 213615746,
    "contestId": 1822,
    "creationTimeSeconds": 1689235447,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "Xiomara_YiJie"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<vector>\r\n#include<map>\r\nusing namespace std;\r\nusing LL = long long;\r\n\r\nvector<int> go_fac(int n){ \r\n    vector<int> f;\r\n    for(int i = 1; i * i <= n; i++){\r\n        if (n % i == 0){\r\n            f.push_back(i);\r\n            if (i * i != n) f.push_back(n / i);\r\n        }\r\n    }\r\n    return f;\r\n}\r\n\r\n\r\nint main(){\r\n\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ios::sync_with_stdio(0);\r\n\r\n    const int uplimit = 1e9;\r\n    const int S = 1e6;\r\n\r\n    auto C3 = [&](int x){\r\n        return 1LL * x * (x - 1) * (x - 2);\r\n    };\r\n\r\n    int T;\r\n    cin >> T;\r\n    while(T--){\r\n        int n;\r\n        cin >> n;\r\n        map<int, int> mp;\r\n        for(int i = 1; i <= n; i++){\r\n            int x;\r\n            cin >> x;\r\n            mp[x] += 1;\r\n        }\r\n        LL ans = 0;\r\n        for(auto &[x, y] : mp){\r\n            ans += C3(y);\r\n            if (x >= S){\r\n                for(int j = 2; 1LL * j * x <= uplimit; j++){\r\n                    if (x % j == 0 && mp.contains(x * j) && mp.contains(x / j)){\r\n                        ans += 1LL * y * mp[x * j] * mp[x / j];\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                auto f = go_fac(x);\r\n                sort(f.begin(), f.end());\r\n                for(auto u : f){\r\n                    if (u == 1) continue;\r\n                    if (1LL * x * u > uplimit) break;\r\n                    if (mp.contains(x / u) && mp.contains(x * u)){\r\n                        ans += 1LL * y * mp[x / u] * mp[x * u];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        cout << ans << '\\n';\r\n    }\r\n\r\n}"
}