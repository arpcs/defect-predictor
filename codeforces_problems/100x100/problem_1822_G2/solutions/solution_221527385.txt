{
    "id": 221527385,
    "contestId": 1822,
    "creationTimeSeconds": 1693635774,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1822,
        "index": "G2",
        "name": "Magic Triples (Hard Version)",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1822,
        "members": [
            {
                "handle": "Mysterious_Cat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682346900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 1326,
    "memoryConsumedBytes": 9420800,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\n#define pii pair<int, int>\r\n#define fi first\r\n#define se second\r\n#define mkp make_pair\r\n#define pb emplace_back\r\nusing namespace std;\r\n\r\nconst int NR = 2e5;\r\nconst int P = 424471;\r\n\r\nvector<pii> table[P];\r\n\r\nvoid insert(int x) {\r\n    int k = x % P;\r\n    for(pii &p : table[k])\r\n        if(p.fi == x) {\r\n            p.se++; return;\r\n        }\r\n    table[k].pb(mkp(x, 1));\r\n}\r\n\r\nint query(int x) {\r\n    int k = x % P;\r\n    for(pii p : table[k])\r\n        if(p.fi == x) return p.se;\r\n    return 0;\r\n}\r\n\r\nint n, a[NR + 5];\r\nll ans;\r\n\r\nvoid work() {\r\n    cin >> n;\r\n    for(int i = 1; i <= n; i++) {\r\n        cin >> a[i]; insert(a[i]);\r\n    }\r\n    ans = 0;\r\n    for(int i = 1; i <= n; i++) {\r\n        int cnt = query(a[i]);\r\n        ans += 1ll * (cnt - 1) * (cnt - 2);\r\n        if(a[i] > 1) {\r\n            int b = sqrt(a[i]);\r\n            if(a[i] == b * b)\r\n                ans += 1ll * query(1) * query(b);\r\n        }\r\n        for(int j = 2; j * j * j <= a[i]; j++) {\r\n            if(a[i] % j) continue;\r\n            int b = j;\r\n            if(a[i] % (b * b) == 0)\r\n                ans += 1ll * query(a[i] / b / b) * query(a[i] / b);\r\n            b = sqrt(a[i] / j);\r\n            if(b * b * j != a[i] || j * j * j == a[i]) continue;\r\n            if(a[i] % (b * b) == 0)\r\n                ans += 1ll * query(a[i] / b / b) * query(a[i] / b);\r\n        }\r\n    }\r\n    for(int i = 1; i <= n; i++)\r\n        table[a[i] % P].clear();\r\n    cout << ans << '\\n';\r\n}\r\n\r\nint main() {\r\n    //ios::sync_with_stdio(0); cin.tie(0);\r\n    int T; cin >> T; while(T--) work();\r\n\r\n    return 0;\r\n}"
}