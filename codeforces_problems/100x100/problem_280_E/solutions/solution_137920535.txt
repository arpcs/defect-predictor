{
    "id": 137920535,
    "contestId": 280,
    "creationTimeSeconds": 1638559302,
    "relativeTimeSeconds": 4902,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "ProWizard84"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1638554400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 716,
    "memoryConsumedBytes": 819200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 6005;\r\nconst double eps = 1e-5;\r\n#define fo(i , st , en) for (int i = st; i <= en; i++)\r\n#define fd(i , st , en) for (int i = st; i >= en; i--)\r\n#define Me(x , y) memset(x , y , sizeof(x))\r\n#define sqr(x) ((x) * (x))\r\nstruct _line{\r\n    double a , b , st , en;\r\n}f[2][N + N];\r\nint n , q , a , b;\r\nint num[2];\r\nint p[N];\r\ndouble ans[N];\r\ndouble Calc(double x , double a , double b){\r\n    return x * a + b;\r\n}\r\ndouble Find(int cur){\r\n    double ans = q;\r\n    fo (i , 1 , num[cur]){\r\n        double l1 = Calc(f[cur][i].st , f[cur][i].a , f[cur][i].b) , l2 = Calc(f[cur][i].en , f[cur][i].a , f[cur][i].b);\r\n        if (l1 > -eps)\r\n            return f[cur][i].st;\r\n        if (l2 < -eps) ans = f[cur][i].en;\r\n        if (l1 < eps && l2 > -eps){\r\n            return -f[cur][i].b / f[cur][i].a;\r\n        }\r\n    }\r\n    return ans;\r\n}\r\nint main(){\r\n    scanf(\"%d%d%d%d\" , &n , &q , &a , &b);\r\n    fo (i , 1 , n) scanf(\"%d\" , p + i);\r\n    f[1][num[1] = 1] = (_line){2 , -2 * p[1] , 1 , q};\r\n    fo (i , 2 , n){\r\n        int cur = i & 1 ^ 1; num[cur ^ 1] = 0; ans[i - 1] = Find(cur);\r\n        fo (j , 1 , num[cur]){\r\n            double l1 = Calc(f[cur][j].st , f[cur][j].a , f[cur][j].b) , l2 = Calc(f[cur][j].en , f[cur][j].a , f[cur][j].b);\r\n            if (l1 > eps){\r\n                if (j == 1 && a != b)\r\n                    f[cur ^ 1][++num[cur ^ 1]] = (_line){0 , 0 , f[cur][j].st + a , f[cur][j].st + b};\r\n                f[cur ^ 1][++num[cur ^ 1]] = (_line){f[cur][j].a , f[cur][j].b - b * f[cur][j].a , f[cur][j].st + b , f[cur][j].en + b};\r\n            }\r\n            else\r\n                if (l2 < -eps){\r\n                    f[cur ^ 1][++num[cur ^ 1]] = (_line){f[cur][j].a , f[cur][j].b - a * f[cur][j].a , f[cur][j].st + a , f[cur][j].en + a};\r\n                    if (j == num[cur] && a != b)\r\n                        f[cur ^ 1][++num[cur ^ 1]] = (_line){0 , 0 , f[cur][j].en + a , f[cur][j].en + b};\r\n                }\r\n                else{\r\n                    double pos = -f[cur][j].b / f[cur][j].a;\r\n                    if (b != a){\r\n                        if (pos - f[cur][j].st > eps)\r\n                            f[cur ^ 1][++num[cur ^ 1]] = (_line){f[cur][j].a , f[cur][j].b - a * f[cur][j].a , f[cur][j].st + a , pos + a};\r\n                        f[cur ^ 1][++num[cur ^ 1]] = (_line){0 , 0 , pos + a , pos + b};\r\n                        if (f[cur][j].en - pos > eps)\r\n                            f[cur ^ 1][++num[cur ^ 1]] = (_line){f[cur][j].a , f[cur][j].b - b * f[cur][j].a , pos + b , f[cur][j].en + b};\r\n                    }\r\n                    else\r\n                        f[cur ^ 1][++num[cur ^ 1]] = (_line){f[cur][j].a , f[cur][j].b - a * f[cur][j].a , f[cur][j].st + a , f[cur][j].en + a};\r\n                }\r\n        }\r\n        fo (j , 1 , num[cur ^ 1])\r\n            if (f[cur ^ 1][j].st > q){\r\n                num[cur ^ 1] = j - 1 ; break;\r\n            }\r\n            else{\r\n                f[cur ^ 1][j].a += 2; f[cur ^ 1][j].b -= 2 * p[i];\r\n                if (f[cur ^ 1][j].en > q) f[cur ^ 1][j].en = q;\r\n            }\r\n    }\r\n    ans[n] = Find(n & 1);\r\n    fd (i , n , 2)\r\n        if (ans[i] - ans[i - 1] > b)\r\n            ans[i - 1] = ans[i] - b;\r\n        else\r\n            if (ans[i] - ans[i - 1] < a)\r\n                ans[i - 1] = ans[i] - a;\r\n    double ret = 0;\r\n    fo (i , 1 , n){\r\n        if (i != 1) putchar(' ');\r\n        printf(\"%.7lf\" , ans[i]);\r\n        ret += sqr(ans[i] - p[i]);\r\n    }\r\n    puts(\"\"); printf(\"%.7lf\\n\" , ret);\r\n    return 0;\r\n}"
}