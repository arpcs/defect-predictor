{
    "id": 207911454,
    "contestId": 280,
    "creationTimeSeconds": 1685498555,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "ttklwxx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 64102400,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\ninline int read()\r\n{\r\n\tint n=0,f=1,ch=getchar();\r\n\twhile(ch<'0'||ch>'9')\r\n\t{\r\n\t\tif(ch=='-')f=-1;\r\n\t\tch=getchar();\r\n\t}\r\n\twhile(ch>='0'&&ch<='9')\r\n\t{\r\n\t\tn=n*10+ch-'0';\r\n\t\tch=getchar();\r\n\t}\r\n\treturn n*f;\r\n}\r\nstruct tree\r\n{\r\n\tdouble cd,het,tk,tb;\r\n\tint siz,ls,rs,rnd;\r\n\tint sj;\r\n}a[800004];\r\nmt19937 ran(121296);\r\nint cnt=0,nsj=0,rt=0;\r\ndouble qzh[200005];\r\nint build(double cd,double tk,double tb,int sj)\r\n{\r\n\ta[++cnt].cd=cd;\r\n\ta[cnt].het=cd;\r\n\ta[cnt].tk=tk;\r\n\ta[cnt].tb=tb;\r\n\ta[cnt].siz=1;\r\n\ta[cnt].sj=sj;\r\n\ta[cnt].ls=a[cnt].rs=0;\r\n\ta[cnt].rnd=ran();\r\n\treturn cnt;\r\n}\r\nvoid pushup(int x)\r\n{\r\n\ta[x].siz=a[a[x].ls].siz+a[a[x].rs].siz+1;\r\n\ta[x].het=a[a[x].ls].het+a[a[x].rs].het+a[x].cd;\r\n}\r\nint merge(int x,int y)\r\n{\r\n    if(x==0)return y;\r\n    if(y==0)return x;\r\n    if(a[x].rnd<a[y].rnd)\r\n    {\r\n        a[x].rs=merge(a[x].rs,y);\r\n        pushup(x);\r\n        return x;\r\n    }\r\n    else\r\n    {\r\n        a[y].ls=merge(x,a[y].ls);\r\n        pushup(y);\r\n        return y;\r\n    }\r\n}\r\nvoid split(int x,int k,int& l,int& r)\r\n{\r\n    if(x==0)\r\n    {\r\n        l=0;\r\n        r=0;\r\n        return;\r\n    }\r\n    if(a[a[x].ls].siz<k)\r\n    {\r\n        l=x;\r\n        split(a[x].rs,k-a[a[x].ls].siz-1,a[x].rs,r);\r\n    }\r\n    else\r\n    {\r\n        r=x;\r\n        split(a[x].ls,k,l,a[x].ls);\r\n \t}\r\n    pushup(x);\r\n    return;\r\n}\r\ndouble lpos[200005];\r\ndouble nhe=0;\r\nint nsiz=0;\r\nint ans;\r\nvoid findling(int x)\r\n{\r\n\tif(x==0)return;\r\n\tif(a[x].sj<nsj)\r\n\t{\r\n\t\tdouble pos=a[a[x].ls].het+nhe;\r\n\t\ta[x].tk+=nsj-a[x].sj;\r\n\t\ta[x].tb+=(nsj-a[x].sj)*pos;\r\n\t\ta[x].tb-=qzh[nsj]-qzh[a[x].sj];\r\n\t\ta[x].sj=nsj;\r\n\t}\r\n\tdouble rz=a[x].tk*a[x].cd+a[x].tb;\r\n\tif(rz>0)\r\n\t{\r\n\t\tans=min(ans,nsiz+a[a[x].ls].siz+1);\r\n\t\tfindling(a[x].ls);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tnhe+=a[a[x].ls].het+a[x].cd;\r\n\t\tnsiz+=a[a[x].ls].siz+1;\r\n\t\tfindling(a[x].rs);\r\n\t}\r\n}\r\ndouble x[200005],qans[200005]; \r\nsigned main()\r\n{\r\n\tint n;\r\n\tdouble q,aa,b;\r\n\tn=read();\r\n\tscanf(\"%lf%lf%lf\",&q,&aa,&b);\r\n\tfor(int i=1;i<=n;i++)\r\n\t{\r\n\t\tx[i]=read();\r\n\t\tx[i]-=aa*(i-1)+1;\r\n\t\t//printf(\"%lf \",x[i]);\r\n\t\tqzh[i]=qzh[i-1]+x[i]; \r\n\t}\r\n\t//printf(\"\\n\");\r\n\tq-=aa*(n-1)+1;\r\n\tb-=aa;\r\n\tint sth=x[1];\r\n\tif(x[1]>q)sth=q;\r\n\telse if(x[1]<0)sth=0;\r\n\tlpos[1]=sth;\r\n\trt=build(b,0,0,1);\r\n\tif(sth>0)rt=merge(build(sth,1,-x[1],1),rt);\r\n\tif(sth<q)rt=merge(rt,build(q-sth,1,0,1));\r\n\t//printf(\"%lf\\n\",lpos[1]);\r\n\twhile(a[rt].het>q)\r\n\t{\r\n\t\tint tx=0,ty=0;\r\n\t\tsplit(rt,a[rt].siz-1,tx,ty);\r\n\t\tif(a[tx].het>q)\r\n\t\t{\r\n\t\t\trt=tx;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ta[ty].cd=a[ty].het=q-a[tx].het;\r\n\t\t\trt=merge(tx,ty);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\t//printf(\"%lf\\n\",a[rt].het);\r\n\tfor(int i=2;i<=n;i++)\r\n\t{\r\n\t\tnsj=i;\r\n\t\tnhe=0;\r\n\t\tnsiz=0;\r\n\t\tans=1000000000;\r\n\t\tfindling(rt);\r\n\t\tint tx=0,ty=0,tz=0;\r\n\t\tif(ans==1000000000)\r\n\t\t{\r\n\t\t\tans=a[rt].siz;\r\n\t\t\tlpos[i]=q;\r\n\t\t\tsplit(rt,ans-1,tx,ty);\r\n\t\t\tsplit(ty,1,ty,tz);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tsplit(rt,ans-1,tx,ty);\r\n\t\t\tsplit(ty,1,ty,tz);\r\n\t\t\tif(a[ty].tb>0)lpos[i]=a[tx].het;\r\n\t\t\telse lpos[i]=a[tx].het+(-a[ty].tb/a[ty].tk);\r\n\t\t}\r\n\t\t//printf(\"%lf\\n\",lpos[i]);\r\n\t\tdouble sth=lpos[i]-a[tx].het;\r\n\t\tint d2=build(b,0,0,i);\r\n\t\tif(sth>1e-6)\r\n\t\t{\r\n\t\t\td2=merge(build(sth,a[ty].tk,a[ty].tb,i),d2);\r\n\t\t}\r\n\t\tif(a[ty].het-sth>1e-6)\r\n\t\t{\r\n\t\t\td2=merge(d2,build(a[ty].het-sth,a[ty].tk,a[ty].tb+sth*a[ty].tk,i));\r\n\t\t}\r\n\t\trt=merge(merge(tx,d2),tz);\r\n\t\twhile(a[rt].het>q)\r\n\t\t{\r\n\t\t\tint tx=0,ty=0;\r\n\t\t\tsplit(rt,a[rt].siz-1,tx,ty);\r\n\t\t\tif(a[tx].het>q)\r\n\t\t\t{\r\n\t\t\t\trt=tx;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\ta[ty].cd=a[ty].het=q-a[tx].het;\r\n\t\t\t\trt=merge(tx,ty);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tqans[n]=lpos[n];\r\n\tfor(int i=n-1;i>=1;i--)\r\n\t{\r\n\t\tif(qans[i+1]>=lpos[i]&&qans[i+1]<=lpos[i]+b)qans[i]=lpos[i];\r\n\t\telse if(qans[i+1]<lpos[i])qans[i]=qans[i+1];\r\n\t\telse qans[i]=max(qans[i+1]-b,0.0);\r\n\t}\r\n\tfor(int i=1;i<=n;i++)printf(\"%lf \",qans[i]+1+(i-1)*aa);\r\n\tprintf(\"\\n\");\r\n\tdouble zh=0;\r\n\tfor(int i=1;i<=n;i++)zh+=(qans[i]-x[i])*(qans[i]-x[i]);\r\n\tprintf(\"%lf\\n\",zh);\r\n\treturn 0;\r\n}"
}