{
    "id": 11441726,
    "contestId": 280,
    "creationTimeSeconds": 1433486516,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "E",
        "name": "Sequence Transformation",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3000,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 248,
    "memoryConsumedBytes": 307200,
    "source": "#include <cstdio>\n#include <iostream>\n#define N 6006\n#define F first\n#define S second\nusing namespace std;\nint n,tot;\ndouble q,a,b,tmp,x[N],y[N];\npair <double,double> f[N*2];\nint main(){\n\tscanf(\"%d%lf%lf%lf\",&n,&q,&a,&b);\n\tfor(int i=1;i<=n;++i)scanf(\"%lf\",&x[i]);\n\tf[++tot]=make_pair(1,2*(1-x[1]));\n\tf[++tot]=make_pair(q+1,2*(q+1-x[1]));\n\ty[1]=tmp=x[1];\n\tfor(int i=2,k=1;i<=n;++i){\n\t\tfor(int j=tot;j>k;--j)f[j+2]=f[j];\n\t\ttot+=2;\n\t\tf[++k]=make_pair(tmp,0);\n\t\tf[k+1]=make_pair(tmp,0);\n\t\tfor(int j=1;j<=k;++j)f[j].F+=a;\n\t\tfor(int j=k+1;j<=tot;++j)f[j].F+=b;\n\t\tfor(int j=1;j<=tot;++j)f[j].S+=2*(f[j].F-x[i]);\n\t\tif(f[1].S>=0)k=0,tmp=f[1].F;\n\t\telse{\n\t\t\tfor(k=1;k<=tot;++k)\n\t\t\t    if(f[k].S<=0 && f[k+1].S>0)break;\n\t\t\ttmp=f[k].F-f[k].S/(f[k+1].S-f[k].S)*(f[k+1].F-f[k].F);\n\t\t}\n\t\ty[i]=min(tmp,q);\n\t}\n\tfor(int i=n-1;i;--i)\n\t\tif(y[i+1]<y[i]+a)y[i]=y[i+1]-a;\n\t\telse if(y[i+1]>y[i]+b)y[i]=y[i+1]-b;\n\tdouble ans=0;\n\tfor(int i=1;i<=n;++i){\n\t\tans+=(y[i]-x[i])*(y[i]-x[i]);\n\t    printf(\"%.6lf \",y[i]);\n\t}\n\tprintf(\"\\n%.6lf\",ans);\n}\n       \t\t\t\t  \t\t\t\t\t \t \t     \t\t\t"
}