{
    "id": 188558148,
    "contestId": 327,
    "creationTimeSeconds": 1673251771,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 327,
        "index": "C",
        "name": "Magic Five",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 327,
        "members": [
            {
                "handle": "1potato2potato"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1372941000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 307200,
    "source": "// motivation is hard to come by, ty for trying\r\n#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\n#define all(x) begin(x), end(x)\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define sz(x) (int)(x.size())\r\n#define inf 1000000010\r\n#define linf 0x3f3f3f3f3f3f3f3f\r\n#define endl \"\\n\"\r\n#define f first\r\n#define s second\r\n#define pi pair<int, int>\r\n#ifdef __INTELLISENSE__\r\n#include \"/mnt/c/yukon/dbg.cpp\"\r\n#include \"/mnt/c/yukon/pp.hpp\"\r\n#endif\r\n#ifdef LOCAL\r\n#include \"/mnt/c/yukon/dbg.cpp\"\r\n#include \"/mnt/c/yukon/pp.hpp\"\r\n#else\r\n#define dbg(...) 0\r\n#endif\r\n\r\nconst int MOD = 1e9 + 7;\r\ntemplate <ll M>\r\nstruct modint {\r\n\t// bin exp, use binary to calculate powers -- in o(log n) instead\r\n\t// sprinkle in a little FLT to calculate via prime mods\r\n\t// a^(n-1) = 1 mod n, so rewrite original n^k as n^(\\lfloor k/(n-1) \\rfloor) * n^(k%(n-1)), reduce left side to 1, and we have the same equation\r\n\tstatic ll _pow(ll n, ll k) {\r\n\t\tll r = 1;\r\n\t\tfor (; k > 0; k >>= 1, n = (n * n) % M)\r\n\t\t\tif (k & 1) r = (r * n) % M;\r\n\t\treturn r;\r\n\t}\r\n\r\n\tll v;\r\n\tmodint(ll n = 0) : v(n % M) { v += (M & (0 - (v < 0))); }\r\n\r\n\tfriend string to_string(const modint n) { return to_string(n.v); }\r\n\tfriend istream& operator>>(istream& i, modint& n) { return i >> n.v; }\r\n\tfriend ostream& operator<<(ostream& o, const modint n) { return o << n.v; }\r\n\ttemplate <typename T>\r\n\texplicit operator T() { return T(v); }\r\n\r\n\tfriend bool operator==(const modint n, const modint m) { return n.v == m.v; }\r\n\tfriend bool operator!=(const modint n, const modint m) { return n.v != m.v; }\r\n\tfriend bool operator<(const modint n, const modint m) { return n.v < m.v; }\r\n\tfriend bool operator<=(const modint n, const modint m) { return n.v <= m.v; }\r\n\tfriend bool operator>(const modint n, const modint m) { return n.v > m.v; }\r\n\tfriend bool operator>=(const modint n, const modint m) { return n.v >= m.v; }\r\n\r\n\tmodint& operator+=(const modint n) {\r\n\t\tv += n.v;\r\n\t\tv -= (M & (0 - (v >= M)));\r\n\t\treturn *this;\r\n\t}\r\n\tmodint& operator-=(const modint n) {\r\n\t\tv -= n.v;\r\n\t\tv += (M & (0 - (v < 0)));\r\n\t\treturn *this;\r\n\t}\r\n\tmodint& operator*=(const modint n) {\r\n\t\tv = (v * n.v) % M;\r\n\t\treturn *this;\r\n\t}\r\n\tmodint& operator/=(const modint n) {\r\n\t\tv = (v * _pow(n.v, M - 2)) % M;\r\n\t\treturn *this;\r\n\t}\r\n\tfriend modint operator+(const modint n, const modint m) { return modint(n) += m; }\r\n\tfriend modint operator-(const modint n, const modint m) { return modint(n) -= m; }\r\n\tfriend modint operator*(const modint n, const modint m) { return modint(n) *= m; }\r\n\tfriend modint operator/(const modint n, const modint m) { return modint(n) /= m; }\r\n\tmodint& operator++() { return *this += 1; }\r\n\tmodint& operator--() { return *this -= 1; }\r\n\tmodint operator++(int) {\r\n\t\tmodint t = *this;\r\n\t\treturn *this += 1, t;\r\n\t}\r\n\tmodint operator--(int) {\r\n\t\tmodint t = *this;\r\n\t\treturn *this -= 1, t;\r\n\t}\r\n\tmodint operator+() { return *this; }\r\n\tmodint operator-() { return modint(0) -= *this; }\r\n\r\n\tmodint pow(const ll k) const {\r\n\t\treturn k < 0 ? _pow(v, M - 1 - (-k % (M - 1))) : _pow(v, k);\r\n\t}\r\n\tmodint inv() const { return _pow(v, M - 2); }\r\n};\r\n\r\nusing mi = modint<int(MOD)>;\r\n\r\n/*\r\n * =notes=\r\n * 1) sum of all chooses is 2^n\r\n * 2) if we have some 0 or 5 in the middle, if we want to \"end\" with it, remove everything to the right\r\n * 3) god damn i wanna be able to iterate through k, but seems like it won't happen. let's figure out a\r\n * \t\tbetter way to calc powers\r\n *\r\n * 4) the largest addition is gonna be 2^(s * k - (num elements behind rightmost 5/0)) -- compute with flt & bin exp\r\n * 5) the largest addition is gonna be 2^(s * k - (num elements behind rightmost 5/0)) -- compute with flt & bin exp\r\n *\r\n *\r\n * yo, so for each i, we have 2^i-1 contribution\r\n * so... 2^(i - 1) + 2^(i + n - 1) + 2^(i + 2n - 1) ...\r\n *\r\n * 2^(i- 1) * n * (2^(0) + 2^(n) + 2^(2n))\r\n *\r\n * wow look it's a geometric sequence! r = 2^n -> r^k = 2^(n*k)\r\n * this delta (standard sum geo) = (1- 2^(n*k)) / (1-2^n)\r\n */\r\nint main() {\r\n\tcin.tie(0)->sync_with_stdio(0);\r\n\r\n\tstring s;\r\n\tcin >> s;\r\n\tint k;\r\n\tcin >> k;\r\n\tint n = sz(s);\r\n\r\n\tmi num = (1 - num._pow(2, n * k));\r\n\tmi den = (1 - num._pow(2, n));\r\n\r\n\tnum /= den;\r\n\r\n\tmi ans = 0;\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tif (s[i] == '0' || s[i] == '5') {\r\n\t\t\t// yay we got 2^i (zero-indexed)\r\n\t\t\tans += ans._pow(2, i);\r\n\t\t}\r\n\t}\r\n\r\n\tans *= num;\r\n\tcout << ans.v << endl;\r\n}\r\n\r\n// don't get stuck on one approach\r\n// question bounds\r\n// flesh out your approach before implementing o.o"
}