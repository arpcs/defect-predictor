{
    "id": 206456703,
    "contestId": 1316,
    "creationTimeSeconds": 1684506148,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "tyagiAnant"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 1871,
    "memoryConsumedBytes": 113254400,
    "source": "#include <iostream>\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define ll long long\r\n#define rep(i, a, b) for(int i = a; i < b; i++)\r\n#define vi vector<ll> \r\n#define ii pair<int, int>\r\n#define pb push_back\r\n#define f first\r\n#define s second\r\n#define all(i) (i).begin(), (i).end()\r\n#define MOD 1000000007\r\n#define endl '\\n'\r\n\r\nbool debug = false;\r\n\r\nint main() {\r\n\tint n, p, k;\r\n\tcin>>n>>p>>k;\r\n\r\n\tvi audi(n+1);\r\n\tvi ind(n+1);\r\n\trep(i, 1, n+1) {\r\n\t\tcin>>audi[i];\r\n\t\tind[i] = i;\r\n\t}\r\n\r\n\tvector<vi> pos(n+1, vi(p));\r\n\trep(i, 1, n+1) {\r\n\t\trep(j, 0, p) {\r\n\t\t\tcin>>pos[i][j];\r\n\t\t}\r\n\t}\r\n\r\n\t//Now my task is to sort the audi array in non increasing order. \r\n\tsort(ind.begin()+1, ind.end(), [&](ll a, ll b) {return audi[a] > audi[b];});\r\n\r\n\tif(debug) {\r\n\t\trep(i, 0, n+1) {\r\n\t\t\tcout<<ind[i]<<\" \";\r\n\t\t}\r\n\t\tcout<<endl;\r\n\t}\r\n\r\n\tvector<vi> dp(1<<p, vi(n+1, -1)); //-1 helps in identifying the unvalid cases and saves time and errors.\r\n\tdp[0][0] = 0;\r\n\r\n\trep(person, 1, n+1) {\r\n\t\tif(debug) {\r\n\t\t\tcout<<\"person -> \"<<person<<\" \";\r\n\t\t}\r\n\t\tll x = ind[person];\r\n\t\trep(s, 0, 1<<p) {\r\n\t\t\tint filled = __builtin_popcount(s);\r\n\t\t\tif(person-1-filled < k && person-filled-1 >= 0) {\r\n\t\t\t\tdp[s][person] = dp[s][person-1] + audi[x]; \r\n\t\t\t}\r\n\r\n\t\t\telse {\r\n\t\t\t\tdp[s][person] = dp[s][person-1];\r\n\t\t\t}\r\n\r\n\t\t\tfor(int j = 0; j < p; j++) {\r\n\t\t\t\tif(s&(1<<j)) {\r\n\t\t\t\t\tint temp_s = (s^(1<<j));\r\n\t\t\t\t\tif(dp[temp_s][person-1] != 1) {\r\n\t\t\t\t\t\tdp[s][person] = max(dp[s][person], dp[temp_s][person-1] + pos[x][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// cout<<\"mask -> \"<<s<<\" \";\r\n\t\t\t// cout<<dp[s][person]<<endl;\r\n\t\t}\r\n\t}\r\n\r\n\tcout<<dp[(1<<p)-1][n]<<endl;\r\n\treturn 0;\r\n}"
}