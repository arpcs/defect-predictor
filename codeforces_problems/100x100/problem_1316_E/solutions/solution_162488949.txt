{
    "id": 162488949,
    "contestId": 1316,
    "creationTimeSeconds": 1656711545,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "sagbis"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 2121,
    "memoryConsumedBytes": 144691200,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class team {\r\n\t\r\n\tstatic int n, p, k;\r\n\tstatic long[] a;\r\n\tstatic long[][] s;\r\n\tstatic long[][] dp;\r\n\t\r\n\t\r\n\tstatic class P implements Comparable<P>{\r\n\t\tlong v;\r\n\t\tint i;\r\n\t\tP(long v, int i) {\r\n\t\t\tthis.v = v;\r\n\t\t\tthis.i = i;\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic int compareTo(team.P o) {\r\n\t\t\treturn Long.compare(this.v, o.v);\r\n\t\t}\r\n\t\t\r\n\t\tpublic String toString() {\r\n\t\t\treturn \"(\" + v + \", \" + i + \")\";\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main (String[] args) throws IOException {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\r\n\t\t\r\n\t\tn = Integer.parseInt(st.nextToken());\r\n\t\tp = Integer.parseInt(st.nextToken());\r\n\t\tk = Integer.parseInt(st.nextToken());\r\n\t\ta = new long[n+1];\r\n\t\ts = new long[n+1][p+1];\r\n\t\tdp = new long[n+1][(1<<p)];\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tst = new StringTokenizer(br.readLine());\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\ta[i] = Long.parseLong(st.nextToken());\r\n\t\t}\r\n\t\t\r\n\t\tP[] elements = new P[n+1];\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\telements[i] = new P(a[i], i);\r\n\t\t}\r\n\t\t\r\n\t\tArrays.sort(elements,1,n+1);\r\n\t\tfor (int i = 1; i <= n+1-i; i++) {\r\n\t\t\tP temp = elements[i];\r\n\t\t\telements[i] = elements[n+1-i];\r\n\t\t\telements[n+1-i] = temp;\r\n\t\t}\r\n\t\t\r\n\t\tfor (int j = 1; j <= n; j++) {\r\n\t\t\tst = new StringTokenizer(br.readLine());\r\n\t\t\tfor (int k = 1; k <= p; k++) {\r\n\t\t\t\ts[j][k] = Long.parseLong(st.nextToken());\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tbr.close();\r\n\t\t\r\n\t\t// System.out.println(Arrays.toString(elements));\r\n\t\t\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\tfor (int j = 0; j < (1<<p); j++) {\r\n\t\t\t\tif (Integer.bitCount(j) > i) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Case 1: Be a player\r\n\t\t\t\tlong max = 0;\r\n\t\t\t\tfor (int k = 0; k < p; k++) {\r\n\t\t\t\t\tint pow = 1<<k;\r\n\t\t\t\t\tif (on(k, j)) {\r\n\t\t\t\t\t\tmax = Math.max(max, dp[i-1][j-pow] + s[elements[i].i][k+1]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tdp[i][j] = max;\r\n\t\t\t\t\r\n\t\t\t\tif (Integer.bitCount(j) == i) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Case 2: Be part of audience\r\n\t\t\t\tif (i-Integer.bitCount(j) <= k) {\r\n\t\t\t\t\tdp[i][j] = Math.max(dp[i-1][j] + a[elements[i].i], dp[i][j]);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Case 3: Be part of neither\r\n\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j]);\r\n\t\t\t\t\r\n\t\t\t\t// System.out.printf(\"dp[%d][%s] = %d\\n\", i, Integer.toBinaryString(j), dp[i][j]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint len = 1<<p;\r\n\t\tSystem.out.println(dp[n][len-1]);\r\n\t}\r\n\t\r\n\tstatic boolean on(int bit, int num) {\r\n\t\treturn ((num >> bit)) % 2 == 1;\r\n\t}\r\n}\r\n"
}