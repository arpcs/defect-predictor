{
    "id": 160816881,
    "contestId": 1316,
    "creationTimeSeconds": 1655384787,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "geishbay"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 1996,
    "memoryConsumedBytes": 114688000,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <set>\r\n#include <algorithm>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nint main() {\r\n\tint N, P, K; cin >> N >> P >> K;\r\n\tvector<pair<int, int>> aud;\r\n\tfor(int i = 0; i < N; i++) {\r\n\t\tint a; cin >> a; aud.push_back({a, i});\r\n\t}\r\n\tvector<vector<int>> play(N);\r\n\tfor(int i = 0; i < N; i++) {\r\n\t\tfor(int j = 0; j < P; j++) {\r\n\t\t\tint a; cin >> a; play[i].push_back(a);\r\n\t\t}\r\n\t}\r\n\t//sorting both play and aud into correct order.\r\n\tsort(aud.begin(), aud.end(), greater<pair<int, int>>());\r\n\tvector<vector<int>> play_fin;\r\n\tfor(auto s : aud) {\r\n\t\tplay_fin.push_back(play[s.second]);\r\n\t}\r\n/*\r\n\tfor(auto s : play_fin) {\r\n\t\tcout << endl;\r\n\t\tfor(auto j : s) {\r\n\t\t\tcout << j << \" \";\r\n\t\t}\r\n\t} */\r\n\r\n\tll dp[N + 1][1<<P];\r\n\tfor(int i = 0; i <= N; i++) {\r\n\t\tfor(int j = 0; j < (1<<P); j++) {\r\n\t\t\tdp[i][j] = -1;\r\n\t\t}\r\n\t}\r\n\t\r\n\tdp[0][0] = 0;\r\n\t\r\n\tfor(int i = 1; i <= N; i++) {\r\n\t\tfor(int j = 0; j < (1<<P); j++) {\r\n\t\t\t//if(__builtin_popcount(j) > i) continue;\r\n\t\t\tif(dp[i - 1][j] != -1) dp[i][j] = dp[i - 1][j];\r\n\t\t\tif(i - __builtin_popcount(j) <= K && dp[i - 1][j] != -1) dp[i][j] += aud[i - 1].first;\r\n\t\t\tfor(int z = 0; z < P; z++) {\r\n\t\t\t\tif((j & (1 << z)) == 0) continue;\r\n\t\t\t\tif(dp[i - 1][j ^ (1 << z)])dp[i][j] = max(dp[i][j], dp[i - 1][j ^ (1 << z)] + play_fin[i - 1][z]); \r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcout << dp[N][(1<<P) - 1] << endl;\r\n/*\r\n\tfor(int i = 0; i <= N; i++) {\r\n\t\tfor(int j = 0; j < (1<<P); j++) {\r\n\t\t\tcout << dp[i][j] << \" \";\r\n\t\t}\r\n\t\tcout << endl;\r\n\t}*/\r\n}"
}