{
    "id": 168324557,
    "contestId": 1316,
    "creationTimeSeconds": 1660523357,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "bully_maguire"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 1388,
    "memoryConsumedBytes": 197939200,
    "source": "import java.util.*;\nimport java.io.*;\n\npublic class TeamBuilding {\n\tpublic static void main(String[] args) throws IOException {\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n\t\tStringTokenizer st = new StringTokenizer(br.readLine());\n\t\tint poolSize = Integer.parseInt(st.nextToken());\n\t\tint teamSize = Integer.parseInt(st.nextToken());\n\t\tint audSize = Integer.parseInt(st.nextToken());\n\n\t\tst = new StringTokenizer(br.readLine());\n\t\tPair[] audContrib = new Pair[poolSize];\n\t\tfor (int i = 0; i < poolSize; i++) {\n\t\t\taudContrib[i] = new Pair(i, Integer.parseInt(st.nextToken()));\n\t\t}\n\t\tArrays.sort(audContrib);\n\n\t\tint[][] skill = new int[poolSize][teamSize];\n\t\tfor (int i = 0; i < poolSize; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tfor (int j = 0; j < teamSize; j++) {\n\t\t\t\tskill[i][j] = Integer.parseInt(st.nextToken());\n\t\t\t}\n\t\t}\n\n\t\tlong[][] dp = new long[poolSize + 1][(1 << teamSize)];\n\t\tfor (int i = 0; i <= poolSize; i++) {\n\t\t\tArrays.fill(dp[i], -1);\n\t\t}\n\t\tdp[0][0] = 0;\n\t\t\n\t\tfor (int i = 1; i <= poolSize; i++) {\n\t\t\tint ind = audContrib[i - 1].idx;\n\t\t\tfor (int m = 0; m < (1 << teamSize); m++) {\n\t\t\t\tint bits = Integer.bitCount(m);\n\n\t\t\t\t// Try adding the player to the audience.\n\t\t\t\tint numAud = i - 1 - bits;\n\t\t\t\tif (numAud < audSize) {\n\t\t\t\t\tif (dp[i - 1][m] != -1) {\n\t\t\t\t\t\tdp[i][m] = dp[i - 1][m] + audContrib[i - 1].val;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (dp[i - 1][m] != -1) {\n\t\t\t\t\t\tdp[i][m] = dp[i - 1][m];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Try adding the player to the team.\n\t\t\t\tfor (int j = 0; j < teamSize; j++) {\n\t\t\t\t\tif ((m & (1 << j)) != 0 && (dp[i - 1][m ^ (1 << j)]) != -1) {\n\t\t\t\t\t\tdp[i][m] = Math.max(\n\t\t\t\t\t\t\tdp[i][m],\n\t\t\t\t\t\t\tdp[i - 1][m ^ (1 << j)] + skill[ind][j]\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[poolSize][(1 << teamSize) - 1]);\n\t}\n}\n\nclass Pair implements Comparable<Pair> {\n\tint idx;\n\tint val;\n\n\tpublic Pair(int idx, int val) {\n\t\tthis.idx = idx;\n\t\tthis.val = val;\n\t}\n\n\tpublic int compareTo(Pair other) {\n\t\treturn other.val - val;\n\t}\n}"
}