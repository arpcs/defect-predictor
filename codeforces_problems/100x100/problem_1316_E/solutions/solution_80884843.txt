{
    "id": 80884843,
    "contestId": 1316,
    "creationTimeSeconds": 1590090541,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "niteshgowda"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "Java 8",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 1247,
    "memoryConsumedBytes": 205312000,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class B implements Runnable {\r\n\tboolean judge = true;\r\n\tFastReader sc;\r\n\tPrintWriter out;\r\n\tString INPUT = \"\";\r\n\t\r\n\t\r\n\tlong dp[][];\r\n\tint n,p,k;\r\n\tint s[][];\r\n\tNode no[];\r\n\t\r\n\tvoid solve() \r\n\t{\r\n\t\tn = sc.nextInt();\r\n\t\tp = sc.nextInt();\r\n\t\tk = sc.nextInt();\r\n\t\t\r\n\t\tno = new Node[n+1];\r\n\t\tno[0] = new Node(0,0);\r\n\t\t\r\n\t\tint a[] = new int[n+1];\r\n\t\tfor(int i = 1; i <= n; i++)\r\n\t\t{\t\r\n\t\t\tno[i] = new Node(0,0);\r\n\t\t\tno[i].val = sc.nextInt();\r\n\t\t\ta[i] = no[i].val;\r\n\t\t\tno[i].in = i;\r\n\t\t}\r\n\t\t\r\n\t\tArrays.sort(no);\r\n\t\t\r\n\t\t\r\n\t\ts = new int[n+1][p];\r\n\t\t\r\n\t\tfor(int i = 1; i <= n; i++)\r\n\t\t{\r\n\t\t\ts[i] = sc.nextIntArray(p);\r\n\t\t}\r\n\t\t\r\n\t\tdp = new long[n+1][(1<<p)+1];\r\n\t\t\r\n\t\tfor(int i = 0; i <= n; i++)\r\n\t\t{\r\n\t\t\tArrays.fill(dp[i], -1);\r\n\t\t}\r\n\t\tdp[0][0] = 0;\r\n\t\t\r\n\t\tfor(int i = 1; i <= n; i++)\r\n\t\t{\t\r\n\t\t\tint x = no[i-1].in;\r\n\t\t\tfor(int mask = 0; mask < 1<<p; mask++)\r\n\t\t\t{\r\n\t\t\t\tint cnt_p = 0;\r\n\t\t\t\t\r\n\t\t\t\tfor(int j = 0; j < p; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((mask&(1<<j)) == 1<<j)\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\tcnt_p++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tint cnt_a = i-1-cnt_p;\r\n\t\t\t\tif(dp[i-1][mask] != -1)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(cnt_a < k)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdp[i][mask] = dp[i-1][mask]+a[x];\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdp[i][mask] = dp[i-1][mask];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tfor(int j = 0; j < p; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((mask&(1<<j)) == 1<<j && dp[i-1][mask^(1<<j)] != -1)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdp[i][mask] = Math.max(dp[i][mask],dp[i-1][mask^(1<<j)]+s[x][j]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tout.println(dp[n][(1<<p)-1]);\r\n\t}\r\n\t\r\n\tclass Node implements Comparable<Node>\r\n\t{\r\n\t\t\r\n\t\tint val;\r\n\t\tint in;\r\n\t\t\r\n\t\tNode(int val,int in)\r\n\t\t{\r\n\t\t\tthis.val = val;\r\n\t\t\tthis.in = in;\r\n\t\t}\r\n\t\t\r\n\t\tpublic int compareTo(Node o) \r\n\t\t{\r\n\t\t\t\r\n\t\t\tif(val < o.val) return 1;  //decreasing order\r\n\t\t\telse return -1;\t\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\tpublic void run() {\r\n\t\tlong time = System.currentTimeMillis();\r\n\t\tboolean oj = System.getProperty(\"ONLINE_JUDGE\") != null || judge;\r\n\t\tout = new PrintWriter(System.out);\r\n\t\tsc = new FastReader(oj);\r\n\t\tsolve();\r\n\t\tout.flush();\r\n\t\tif (!oj) {\r\n\t\t\tSystem.out.println(Arrays.deepToString(new Object[] { System.currentTimeMillis() - time + \" ms\" }));\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tnew Thread(null, new B(), \"Main\", 1 << 28).start();\r\n\t}\r\n\r\n\tclass FastReader {\r\n\t\tInputStream is;\r\n\r\n\t\tpublic FastReader(boolean onlineJudge) {\r\n\t\t\tis = onlineJudge ? System.in : new ByteArrayInputStream(INPUT.getBytes());\r\n\t\t}\r\n\r\n\t\tbyte[] inbuf = new byte[1024];\r\n\t\tpublic int lenbuf = 0, ptrbuf = 0;\r\n\r\n\t\tint readByte() {\r\n\t\t\tif (lenbuf == -1)\r\n\t\t\t\tthrow new InputMismatchException();\r\n\t\t\tif (ptrbuf >= lenbuf) {\r\n\t\t\t\tptrbuf = 0;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlenbuf = is.read(inbuf);\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tthrow new InputMismatchException();\r\n\t\t\t\t}\r\n\t\t\t\tif (lenbuf <= 0)\r\n\t\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\treturn inbuf[ptrbuf++];\r\n\t\t}\r\n\r\n\t\tboolean isSpaceChar(int c) {\r\n\t\t\treturn !(c >= 33 && c <= 126);\r\n\t\t}\r\n\r\n\t\tint skip() {\r\n\t\t\tint b;\r\n\t\t\twhile ((b = readByte()) != -1 && isSpaceChar(b))\r\n\t\t\t\t;\r\n\t\t\treturn b;\r\n\t\t}\r\n\r\n\t\tdouble nextDouble() {\r\n\t\t\treturn Double.parseDouble(next());\r\n\t\t}\r\n\r\n\t\tchar nextChar() {\r\n\t\t\treturn (char) skip();\r\n\t\t}\r\n\r\n\t\tString next() {\r\n\t\t\tint b = skip();\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\twhile (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')\r\n\t\t\t\tsb.appendCodePoint(b);\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\t\t\treturn sb.toString();\r\n\t\t}\r\n\r\n\t\tString nextLine() {\r\n\t\t\tint b = skip();\r\n\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\twhile ((!isSpaceChar(b) || b == ' ')) { // when nextLine, (isSpaceChar(b) && b != ' ')\r\n\t\t\t\tsb.appendCodePoint(b);\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\t\t\treturn sb.toString();\r\n\t\t}\r\n\r\n\t\tchar[] next(int n) {\r\n\t\t\tchar[] buf = new char[n];\r\n\t\t\tint b = skip(), p = 0;\r\n\t\t\twhile (p < n && !(isSpaceChar(b))) {\r\n\t\t\t\tbuf[p++] = (char) b;\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\t\t\treturn n == p ? buf : Arrays.copyOf(buf, p);\r\n\t\t}\r\n\r\n\t\tint nextInt() {\r\n\t\t\tint num = 0, b;\r\n\t\t\tboolean minus = false;\r\n\t\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\r\n\t\t\t\t;\r\n\t\t\tif (b == '-') {\r\n\t\t\t\tminus = true;\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\tif (b >= '0' && b <= '9') {\r\n\t\t\t\t\tnum = num * 10 + (b - '0');\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn minus ? -num : num;\r\n\t\t\t\t}\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlong nextLong() {\r\n\t\t\tlong num = 0;\r\n\t\t\tint b;\r\n\t\t\tboolean minus = false;\r\n\t\t\twhile ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'))\r\n\t\t\t\t;\r\n\t\t\tif (b == '-') {\r\n\t\t\t\tminus = true;\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\tif (b >= '0' && b <= '9') {\r\n\t\t\t\t\tnum = num * 10 + (b - '0');\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn minus ? -num : num;\r\n\t\t\t\t}\r\n\t\t\t\tb = readByte();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tchar[][] nextMatrix(int n, int m) {\r\n\t\t\tchar[][] map = new char[n][];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\tmap[i] = next(m);\r\n\t\t\treturn map;\r\n\t\t}\r\n\r\n\t\tint[] nextIntArray(int n) {\r\n\t\t\tint[] a = new int[n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\ta[i] = nextInt();\r\n\t\t\treturn a;\r\n\t\t}\r\n\r\n\t\tlong[] nextLongArray(int n) {\r\n\t\t\tlong[] a = new long[n];\r\n\t\t\tfor (int i = 0; i < n; i++)\r\n\t\t\t\ta[i] = nextLong();\r\n\t\t\treturn a;\r\n\t\t}\r\n\r\n\t\tint[][] next2DInt(int n, int m) {\r\n\t\t\tint[][] arr = new int[n][];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i] = nextIntArray(m);\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tlong[][] next2DLong(int n, int m) {\r\n\t\t\tlong[][] arr = new long[n][];\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i] = nextLongArray(m);\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tint[] shuffle(int[] arr) {\r\n\t\t\tRandom r = new Random();\r\n\t\t\tfor (int i = 1, j; i < arr.length; i++) {\r\n\t\t\t\tj = r.nextInt(i);\r\n\t\t\t\tint c = arr[i];\r\n\t\t\t\tarr[i] = arr[j];\r\n\t\t\t\tarr[j] = c;\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tlong[] shuffle(long[] arr) {\r\n\t\t\tRandom r = new Random();\r\n\t\t\tfor (int i = 1, j; i < arr.length; i++) {\r\n\t\t\t\tj = r.nextInt(i);\r\n\t\t\t\tlong c = arr[i];\r\n\t\t\t\tarr[i] = arr[j];\r\n\t\t\t\tarr[j] = c;\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tint[] uniq(int[] arr) {\r\n\t\t\tarr = sc.shuffle(arr);\r\n\t\t\tArrays.sort(arr);\r\n\t\t\tint[] rv = new int[arr.length];\r\n\t\t\tint pos = 0;\r\n\t\t\trv[pos++] = arr[0];\r\n\t\t\tfor (int i = 1; i < arr.length; i++) {\r\n\t\t\t\tif (arr[i] != arr[i - 1]) {\r\n\t\t\t\t\trv[pos++] = arr[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn Arrays.copyOf(rv, pos);\r\n\t\t}\r\n\r\n\t\tlong[] uniq(long[] arr) {\r\n\t\t\tarr = sc.shuffle(arr);\r\n\t\t\tArrays.sort(arr);\r\n\t\t\tlong[] rv = new long[arr.length];\r\n\t\t\tint pos = 0;\r\n\t\t\trv[pos++] = arr[0];\r\n\t\t\tfor (int i = 1; i < arr.length; i++) {\r\n\t\t\t\tif (arr[i] != arr[i - 1]) {\r\n\t\t\t\t\trv[pos++] = arr[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn Arrays.copyOf(rv, pos);\r\n\t\t}\r\n\r\n\t\tint[] reverse(int[] arr) {\r\n\t\t\tint l = 0, r = arr.length - 1;\r\n\t\t\twhile (l < r) {\r\n\t\t\t\tarr[l] = arr[l] ^ arr[r];\r\n\t\t\t\tarr[r] = arr[l] ^ arr[r];\r\n\t\t\t\tarr[l] = arr[l] ^ arr[r];\r\n\t\t\t\tl++;\r\n\t\t\t\tr--;\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tlong[] reverse(long[] arr) {\r\n\t\t\tint l = 0, r = arr.length - 1;\r\n\t\t\twhile (l < r) {\r\n\t\t\t\tarr[l] = arr[l] ^ arr[r];\r\n\t\t\t\tarr[r] = arr[l] ^ arr[r];\r\n\t\t\t\tarr[l] = arr[l] ^ arr[r];\r\n\t\t\t\tl++;\r\n\t\t\t\tr--;\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tint[] compress(int[] arr) {\r\n\t\t\tint n = arr.length;\r\n\t\t\tint[] rv = Arrays.copyOf(arr, n);\r\n\t\t\trv = uniq(rv);\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i] = Arrays.binarySearch(rv, arr[i]);\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\tlong[] compress(long[] arr) {\r\n\t\t\tint n = arr.length;\r\n\t\t\tlong[] rv = Arrays.copyOf(arr, n);\r\n\t\t\trv = uniq(rv);\r\n\t\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\t\tarr[i] = Arrays.binarySearch(rv, arr[i]);\r\n\t\t\t}\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t}\r\n}"
}