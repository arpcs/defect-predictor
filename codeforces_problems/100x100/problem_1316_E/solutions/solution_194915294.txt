{
    "id": 194915294,
    "contestId": 1316,
    "creationTimeSeconds": 1677328566,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "alex_2008"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 1840,
    "memoryConsumedBytes": 213196800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 1e5 + 10, P = 8, INF = 1e9 + 10;\r\nlong long s[N][P], dp[N][(1 << P)];\r\npair<long long, long long> a[N];\r\nint main()\r\n{\r\n    int n, p, k;\r\n    cin >> n >> p >> k;\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> a[i].first;\r\n        a[i].second = i;\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j = 1; j <= p; j++) {\r\n            cin >> s[i][j];\r\n        }\r\n    }\r\n    sort(a + 1, a + 1 + n);\r\n    reverse(a + 1, a + 1 + n);\r\n    for (int i = 0; i <= n; i++) \r\n    for (int j = 0; j < (1 << p); j++)\r\n        dp[i][j] = -1;\r\n    dp[0][0] = 0;\r\n    for (int i = 1; i <= n; i++) \r\n    for (int j = 0; j < (1 << p); j++)\r\n    {\r\n        int z = 0;\r\n        for (int k = 0; k < p; k++) {\r\n            if (j & (1 << k)) z++;\r\n        }\r\n        int v = (i - 1) - z;\r\n        if (v < k) {\r\n            if (dp[i - 1][j] != -1)\r\n                dp[i][j] = dp[i - 1][j] + a[i].first;\r\n        }\r\n        else {\r\n            if (dp[i - 1][j] != -1)\r\n                dp[i][j] = dp[i - 1][j];\r\n        }\r\n        for (int k = 0; k < p; k++) {\r\n            if ((j & (1 << k)) && dp[i - 1][(j ^ (1 << k))] != -1) {\r\n                dp[i][j] = max(dp[i][j], dp[i - 1][(j ^ (1 << k))] + s[a[i].second][k + 1]);\r\n            }\r\n        }\r\n    }\r\n    cout << dp[n][(1 << p) - 1];\r\n}"
}