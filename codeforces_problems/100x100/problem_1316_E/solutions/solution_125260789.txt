{
    "id": 125260789,
    "contestId": 1316,
    "creationTimeSeconds": 1628466728,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1316,
        "index": "E",
        "name": "Team Building",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1316,
        "members": [
            {
                "handle": "retired.old.cake"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583332500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 124,
    "timeConsumedMillis": 733,
    "memoryConsumedBytes": 170496000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n\r\nint n, p, k;\r\nconst ll INF = 1e16;\r\n\r\nstruct Player {\r\n  ll a;\r\n  array<ll, 7> s;\r\n} player[100005];\r\n\r\narray<array<ll, 200>, 100005> dp;\r\n\r\nint main () {\r\n  cin.tie(0)->sync_with_stdio(false);\r\n  cin >> n >> p >> k;\r\n  for (int i = 1; i <= n; ++i) {\r\n    cin >> player[i].a;\r\n  }\r\n\r\n  for (int i = 1; i <= n; ++i) {\r\n    for (int j = 0; j < p; ++j) {\r\n      cin >> player[i].s[j];\r\n    }\r\n  }\r\n\r\n  for (int i = 0; i <= n; ++i)\r\n    dp[i].fill(-INF);\r\n  dp[0][0] = 0;\r\n\r\n  sort(player + 1, player + 1 + n, [] (const auto &lhs, const auto &rhs) -> bool {\r\n    return lhs.a > rhs.a;\r\n  });\r\n\r\n  for (int i = 1; i <= n; ++i) {\r\n    for (int mask = 0; mask < (1 << p); ++mask) {\r\n      if (dp[i-1][mask] == -INF) continue;\r\n      if ( (i-1) - __builtin_popcount(mask)< k)\r\n        dp[i][mask] = dp[i-1][mask] + player[i].a;\r\n      else \r\n        dp[i][mask] = dp[i-1][mask];\r\n    }\r\n\r\n    for (int mask = 0; mask < (1 << p); ++mask) {\r\n      for (int pos = 0; pos < p; ++pos) {\r\n        if ( (mask >> pos) & 1 ) continue;\r\n        dp[i][mask | (1 << pos)] = max(dp[i][mask | (1 << pos)], dp[i-1][mask] + player[i].s[pos]);\r\n      }\r\n    }\r\n  }\r\n\r\n  int full_mask = (1 << p) - 1;\r\n  cout << dp[n][full_mask] << endl;\r\n}\r\n"
}