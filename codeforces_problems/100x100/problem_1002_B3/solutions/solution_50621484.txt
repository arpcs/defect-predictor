{
    "id": 50621484,
    "contestId": 1002,
    "creationTimeSeconds": 1551405758,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1002,
        "index": "B3",
        "name": "Distinguish four 2-qubit states",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": []
    },
    "author": {
        "contestId": 1002,
        "members": [
            {
                "handle": "KhaledKEE"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530892800
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "namespace Solution \r\n{\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Primitive;\r\n\r\n    operation Set (desired: Result, q1: Qubit) : Unit\r\n    {\r\n        let current = M(q1);\r\n        if (desired != current)\r\n        {\r\n            X(q1);\r\n        }\r\n    }\r\n\t\r\n\toperation Or(qs : Qubit[], res: Qubit) : Unit \r\n\t{\r\n\t\tApplyToEach(X,qs);\r\n\t\tControlled X(qs, res);\r\n\t\tApplyToEach(X,qs);\r\n\t\tX(res);\r\n\t}\r\n\r\n    operation And(qs : Qubit[], res: Qubit) : Unit \r\n\t{\r\n\t\tControlled X(qs, res);\r\n\t}\r\n\r\n\r\n\r\n    operation Solve (qs : Qubit[]) : Int {\r\n        body(...) {\r\n            mutable res = 0;\r\n            H(qs[0]);\r\n            H(qs[1]);\r\n            for(i in 0..1) {\r\n                if(M(qs[i]) == One) {\r\n                    if(i == 0) {\r\n                        set res = 2;\r\n                    } else {\r\n                        set res = res + 1;\r\n                    }\r\n                }\r\n            }\r\n            return res;\r\n        }\r\n    }\r\n\r\n    operation QsMain () : (Bool)\r\n    {\r\n        mutable res = true;\r\n        // using (qubit = Qubit()) {\r\n            \r\n            // Set(Zero, qubit);\r\n            using(test = Qubit[2]) {\r\n                Set(One, test[0]);\r\n                Set(One, test[1]);\r\n                if(Solve(test) == 1) {\r\n                    set res = false;\r\n                }\r\n                for(qb in test) {\r\n                    Set(Zero, qb);\r\n                }\r\n            }\r\n\r\n            // Set(Zero, qubit);\r\n            using(test = Qubit[2]) {\r\n                Set(Zero, test[0]);\r\n                Set(One, test[1]);\r\n                if(Solve(test) == 0) {\r\n                    set res = false;\r\n                }\r\n                for(qb in test) {\r\n                    Set(Zero, qb);\r\n                }\r\n            }\r\n\r\n            // Set(Zero, qubit);\r\n        // }\r\n        return (res);\r\n    }\r\n}\r\n"
}