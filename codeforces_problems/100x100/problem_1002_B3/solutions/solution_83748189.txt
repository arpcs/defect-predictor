{
    "id": 83748189,
    "contestId": 1002,
    "creationTimeSeconds": 1592138211,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1002,
        "index": "B3",
        "name": "Distinguish four 2-qubit states",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": []
    },
    "author": {
        "contestId": 1002,
        "members": [
            {
                "handle": "mareksom"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530892800
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "namespace Solution {\r\n  open Microsoft.Quantum.Arithmetic;\r\n  open Microsoft.Quantum.Arrays;\r\n  open Microsoft.Quantum.Canon;\r\n  open Microsoft.Quantum.Convert;\r\n  open Microsoft.Quantum.Diagnostics;\r\n  open Microsoft.Quantum.Intrinsic;\r\n  open Microsoft.Quantum.Math;\r\n\r\n  operation MyDump(qs : Qubit[]) : Unit {\r\n    Message(\"MyDump {\");\r\n    DumpRegister((), qs);\r\n    Message(\"\");\r\n    Message(\"}\");\r\n  }\r\n\r\n  operation Set(r : Result, qs : Qubit[]) : Unit {\r\n    for (q in qs) {\r\n      if (M(q) != r) {\r\n        X(q);\r\n      }\r\n    }\r\n  }\r\n\r\n  operation MakeS(qs : Qubit[], i : Int) : Unit {\r\n    Fact(Length(qs) == 2, \"MakeS: Length(qs) == 2\");\r\n    Fact(0 <= i && i < 4, \"MakeS : 0 <= i && i < 4\");\r\n    if ((i &&& 1) == 1) {\r\n      X(qs[1]);\r\n    }\r\n    if ((i &&& 2) == 2) {\r\n      X(qs[0]);\r\n    }\r\n    ApplyToEach(H, qs);\r\n  }\r\n\r\n  operation Solve(qs : Qubit[]) : Int {\r\n    ApplyToEach(H, qs);\r\n    mutable i = 0;\r\n    if (M(qs[0]) == One) {\r\n      set i += 2;\r\n    }\r\n    if (M(qs[1]) == One) {\r\n      set i += 1;\r\n    }\r\n    return i;\r\n  }\r\n\r\n  operation Test() : Unit {\r\n    for (i in 0 .. 3) {\r\n      using (qs = Qubit[2]) {\r\n        MakeS(qs, i);\r\n        Message(\"i = \" + IntAsString(i));\r\n        MyDump(qs);\r\n        Set(Zero, qs);\r\n      }\r\n    }\r\n    for (counter in 0 .. 100) {\r\n      for (i in 0 .. 3) {\r\n        using (qs = Qubit[2]) {\r\n          MakeS(qs, i);\r\n          Fact(Solve(qs) == i, \"Solve(qs) == \" + IntAsString(i));\r\n          Set(Zero, qs);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n"
}