{
    "id": 150020160,
    "contestId": 1612,
    "creationTimeSeconds": 1647606551,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1612,
        "index": "F",
        "name": "Armor and Weapons",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1612,
        "members": [
            {
                "handle": "JDS070115"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1637573700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 13004800,
    "source": "#include <iostream>\r\n#include <set>\r\n#include <cstring>\r\n\r\ninline int read() {\r\n    char c; int x = 0;\r\n    do c = getchar(); while (!isdigit(c));\r\n    do x = (x << 1) + (x << 3) + (c ^ 48), c = getchar(); while (isdigit(c));\r\n    return x;\r\n}\r\n\r\nconst int N = 2e5 + 5;\r\nstd::set<int> buff[N];\r\nint n, m, p;\r\n\r\nint f[N], dp[N];\r\n\r\ninline void tomax(int & x, const int & y) {\r\n    x = (x > y ? x : y);\r\n}\r\ninline int min(const int & x, const int & y) {\r\n    return x < y ? x : y;\r\n}\r\n\r\n\r\nint main() {\r\n    n = read(), m = read(), p = read();\r\n    bool flag = n > m;\r\n    int a, b;\r\n    if (flag) std::swap(n, m);\r\n    \r\n    for (int i = 1; i <= p; i++) {\r\n        a = read(), b = read();\r\n        if (flag) buff[b].insert(a);\r\n        else buff[a].insert(b);\r\n    }\r\n    \r\n    int t = 1, K = m, k = 0, mx = 0;\r\n    f[1] = 1;\r\n    for (int i = 1; dp[n] < m; i++) {\r\n        for (int j = 1; j <= t; j++) {\r\n            k = j + f[j] + buff[j].count(f[j]);\r\n            tomax(dp[j], min(m, k));\r\n            tomax(dp[min(n, k)], f[j]);\r\n            tomax(mx, min(n, k));\r\n        }\r\n        \r\n        if (dp[n] == m) {\r\n            printf(\"%d\", i);\r\n            break;\r\n        }\r\n        tomax(t, mx);\r\n        std::memcpy(f + 1, dp + 1, sizeof(int) * t);\r\n    }\r\n    return 0;\r\n}"
}