{
    "id": 78856294,
    "contestId": 842,
    "creationTimeSeconds": 1588460419,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "Sakhiya07"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 40038400,
    "source": "// Sakhiya07 - Yagnik Sakhiya\r\n \r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\n#define ll long long int\r\n#define ld long double\r\n#define ff first\r\n#define ss second\r\n#define pb push_back\r\n#define all(x) x.begin(),x.end()\r\n \r\n#define mp make_pair\r\n#define bp __builtin_popcountll\r\n#define MOD  1000000007\r\nconst ll N = 1000005;\r\n#define FAST ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);srand(time(NULL));\r\nconst ll K = 2;\r\nll ans = 0,fre[N];\r\nstruct Vertex {\r\n    ll next[K];\r\n    bool leaf = false;\r\n    ll value;\r\n    Vertex() {\r\n        fill(begin(next), end(next), -1);\r\n        value = 0;\r\n    }\r\n};\r\nVertex trie[N];\r\nll sz = 1;\r\nvoid add_string(ll x) {\r\n    ll v = 0;\r\n    for (ll i=20;i>=0;i--) {\r\n        ll temp = (1LL<<i);\r\n        ll c = 1;\r\n        if((x&temp)==0) c = 0;\r\n        if (trie[v].next[c] == -1) {\r\n            trie[v].next[c] = sz;\r\n            sz++;\r\n        }\r\n        trie[v].value++;\r\n        v = trie[v].next[c];\r\n    }\r\n    trie[v].value++;\r\n    trie[v].leaf = true;\r\n}\r\nvoid query(ll val)\r\n{\r\n     ll v = 0;\r\n     for(ll i=20;i>=0;i--)\r\n     {\r\n          ll temp = 1LL<<i;\r\n          ll digit = 1;\r\n          if((temp&val)==0)   digit = 0;\r\n          ll n_v = trie[(trie[v].next[digit])].value;\r\n          if(n_v==temp)  \r\n          {\r\n               digit ^= 1;\r\n               ans += (temp);\r\n          } \r\n          v = trie[v].next[digit];\r\n     }\r\n}\r\nvoid solve()\r\n{\r\n     ll n,q;\r\n     cin >> n >> q;\r\n     for(ll i=0,x;i<n;i++)\r\n     {\r\n          cin >> x;\r\n          if(fre[x])  continue;\r\n          fre[x] = 1;\r\n          add_string(x);\r\n     }\r\n     ll val = 0;\r\n     while(q--)\r\n     {\r\n          ll x;\r\n          cin >> x;\r\n          val ^= x;\r\n          ans = 0;\r\n          query(val);\r\n          cout<<ans<<\"\\n\";\r\n     }\r\n}\r\n\r\nint main()\r\n{\r\n     FAST;\r\n     ll t = 1;\r\n  //   cin >> t;\r\n     while(t--)\r\n     {\r\n          solve();\r\n     }\r\n}"
}