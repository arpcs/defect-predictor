{
    "id": 53538832,
    "contestId": 842,
    "creationTimeSeconds": 1556600685,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "MS C++",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n\nusing namespace std;\n\nint mx;\n\nint read(){\n    int x = 0; int zf = 1; char ch = ' ';\n    while (ch != '-' && (ch < '0' || ch > '9')) ch = getchar();\n    if (ch == '-') zf = -1, ch = getchar();\n    while (ch >= '0' && ch <= '9') x = x * 10 + ch - '0', ch = getchar(); return x * zf;\n}\n\nstruct Node{\n    int ch[2], sum[2];\n} nodes[5000000];\n\nint node_cnt;\n\nvoid insert(int x){\n    int cur_node = 1;\n    for (int i = mx; i >= 0; --i){\n        int bit = ((x & (1 << i)) != 0);\n        if (!nodes[cur_node].ch[bit])\n            nodes[cur_node].ch[bit] = ++node_cnt;\n        nodes[cur_node].sum[bit]++;\n        cur_node = nodes[cur_node].ch[bit];\n    }\n}\n\ninline int query(int x){\n    int cur_node = 1, ans = 0;\n    for (int i = mx; i >= 0; --i){\n        int bit = ((x & (1 << i)) != 0);\n        if (nodes[cur_node].sum[bit] < (1 << i)){\n            cur_node = nodes[cur_node].ch[bit];\n            if (!cur_node)\n                return ans;\n        }\n        else{\n            cur_node = nodes[cur_node].ch[bit ^ 1];\n            ans = ans | (1 << i);\n            if (!cur_node)\n                return ans;\n        }\n    }\n    return ans;\n}\n\ninline double log2(int a){\n    return log(a) / log(2);\n}\n\nint a[300005];\n\nint main(){\n    int n = read(), m = read();\n    for (int i = 1; i <= n; ++i)\n        a[i] = read();\n    sort(a + 1, a + n + 1);\n    mx = (a[n] == 0) ? 1 : min((int)(log2(a[n]) + 1), 19);\n    //n = unique(a + 1, a + n + 1) - a;\n    node_cnt = 1;\n    a[0] = -1;\n    for (int i = 1; i <= n; ++i)\n        if (a[i] != a[i - 1])\n            insert(a[i]);\n    register int x = 0;\n    for (int i = 1; i <= m; ++i){\n        x ^= read();\n        printf(\"%d\\n\", query(x));\n    }\n    return 0;\n}"
}