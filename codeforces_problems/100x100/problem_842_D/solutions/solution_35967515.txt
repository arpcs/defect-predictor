{
    "id": 35967515,
    "contestId": 842,
    "creationTimeSeconds": 1520257785,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "ei133333"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 51609600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntemplate< typename T >\r\nstruct BinaryTrieNode {\r\n  int nxt[2];\r\n  T lazy;\r\n  int exist; // \u5b50\u3069\u3082\u4ee5\u4e0b\u306b\u5b58\u5728\u3059\u308b\u6587\u5b57\u5217\u306e\u6570\u306e\u5408\u8a08\r\n  vector< int > accept; // \u305d\u306e\u6587\u5b57\u5217id\r\n\r\n  BinaryTrieNode() : exist(0) {\r\n    nxt[0] = nxt[1] = -1;\r\n  }\r\n};\r\n\r\ntemplate< typename T, int MAX_LOG >\r\nstruct BinaryTrie {\r\n\r\n  using Node = BinaryTrieNode< T >;\r\n  vector< Node > nodes;\r\n  int root;\r\n\r\n  BinaryTrie() : root(0) {\r\n    nodes.push_back(Node());\r\n  }\r\n\r\n\r\n  virtual void direct_action(int node, int id) {}\r\n\r\n  virtual void child_action(int node, int child, int id) {}\r\n\r\n  void update_direct(int node, int id) {\r\n    ++nodes[node].exist;\r\n    nodes[node].accept.push_back(id);\r\n    direct_action(node, id);\r\n  }\r\n\r\n  void update_child(int node, int child, int id) {\r\n    ++nodes[node].exist;\r\n    child_action(node, child, id);\r\n  }\r\n\r\n  void add(const T &bit, int bit_index, int node_index, int id) {\r\n    propagate(bit_index, node_index);\r\n    if(bit_index == -1) {\r\n      update_direct(node_index, id);\r\n    } else {\r\n      const int c = (bit >> bit_index) & 1;\r\n      if(nodes[node_index].nxt[c] == -1) {\r\n        nodes[node_index].nxt[c] = (int) nodes.size();\r\n        nodes.push_back(Node());\r\n      }\r\n      add(bit, bit_index - 1, nodes[node_index].nxt[c], id);\r\n      update_child(node_index, nodes[node_index].nxt[c], id);\r\n    }\r\n  }\r\n\r\n  void add(const T &bit, int id) {\r\n    add(bit, MAX_LOG, 0, id);\r\n  }\r\n\r\n  void add(const T &bit) {\r\n    add(bit, nodes[0].exist);\r\n  }\r\n\r\n  T max_query(T bit, int bit_index, int node_index) {\r\n    if(bit_index == -1) return bit;\r\n    propagate(bit_index, node_index);\r\n    const int c = (bit >> bit_index) & 1;\r\n    if(~nodes[node_index].nxt[1] && nodes[nodes[node_index].nxt[1]].exist) {\r\n      return max_query(bit | (1LL << bit_index), bit_index - 1, nodes[node_index].nxt[1]);\r\n    } else {\r\n      return max_query(bit, bit_index - 1, nodes[node_index].nxt[0]);\r\n    }\r\n  }\r\n\r\n  T min_query(T bit, int bit_index, int node_index) {\r\n    if(bit_index == -1) return bit;\r\n    propagate(bit_index, node_index);\r\n    const int c = (bit >> bit_index) & 1;\r\n    if(~nodes[node_index].nxt[0] && nodes[nodes[node_index].nxt[0]].exist) {\r\n      return min_query(bit, bit_index - 1, nodes[node_index].nxt[0]);\r\n    } else {\r\n      return min_query(bit | (1LL << bit_index), bit_index - 1, nodes[node_index].nxt[1]);\r\n    }\r\n  }\r\n\r\n  T mex_query(int bit_index, int node_index) { // distinct-values\r\n    if(bit_index == -1 || node_index == -1) {\r\n      return 0;\r\n    } else {\r\n      propagate(bit_index, node_index);\r\n      if(~nodes[node_index].nxt[0] && nodes[nodes[node_index].nxt[0]].exist == (1LL << bit_index)) {\r\n        return mex_query(bit_index - 1, nodes[node_index].nxt[1]) | (1LL << bit_index);\r\n      } else {\r\n        return mex_query(bit_index - 1, nodes[node_index].nxt[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  T max_query() {\r\n    return max_query(0, MAX_LOG, 0);\r\n  }\r\n\r\n  T min_query() {\r\n    return min_query(0, MAX_LOG, 0);\r\n  }\r\n\r\n  T mex_query() {\r\n    return mex_query(MAX_LOG, 0);\r\n  }\r\n\r\n  int size() const {\r\n    return (nodes[0].exist);\r\n  }\r\n\r\n  int nodesize() const {\r\n    return ((int) nodes.size());\r\n  }\r\n\r\n  void xorpush(const T &bit) {\r\n    nodes[0].lazy ^= bit;\r\n  }\r\n\r\n  void propagate(int bit_index, int node_index) {\r\n    const int c = (nodes[node_index].lazy >> bit_index) & 1;\r\n    if(c) swap(nodes[node_index].nxt[0], nodes[node_index].nxt[1]);\r\n    if(~nodes[node_index].nxt[0]) nodes[nodes[node_index].nxt[0]].lazy ^= nodes[node_index].lazy;\r\n    if(~nodes[node_index].nxt[1]) nodes[nodes[node_index].nxt[1]].lazy ^= nodes[node_index].lazy;\r\n    nodes[node_index].lazy = 0;\r\n  }\r\n};\r\nint main()\r\n{\r\n  int N, M;\r\n  scanf(\"%d %d\", &N, &M);\r\n  BinaryTrie< int, 23 > trie;\r\n  vector< int > A(N);\r\n  for(int i = 0; i < N; i++) {\r\n    scanf(\"%d\", &A[i]);\r\n  }\r\n  sort(begin(A), end(A));\r\n  A.erase(unique(begin(A), end(A)), end(A));\r\n  for(int i = 0; i < A.size(); i++) {\r\n    trie.add(A[i]);\r\n  }\r\n  for(int i = 0; i < M; i++) {\r\n    int X;\r\n    scanf(\"%d\", &X);\r\n    trie.xorpush(X);\r\n    printf(\"%d\\n\", trie.mex_query());\r\n  }\r\n}"
}