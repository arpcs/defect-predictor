{
    "id": 169051407,
    "contestId": 842,
    "creationTimeSeconds": 1660981815,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "sf14t"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\nimport java.io.*;\r\npublic class D_Vitya_and_Strange_Lesson {\r\n    static class Scan {\r\n        private byte[] buf=new byte[1024];\r\n        private int index;\r\n        private InputStream in;\r\n        private int total;\r\n        public Scan()\r\n        {\r\n            in=System.in;\r\n        }\r\n        public int scan()throws IOException\r\n        {\r\n            if(total<0)\r\n            throw new InputMismatchException();\r\n            if(index>=total)\r\n            {\r\n                index=0;\r\n                total=in.read(buf);\r\n                if(total<=0)\r\n                return -1;\r\n            }\r\n            return buf[index++];\r\n        }\r\n        public int scanInt()throws IOException\r\n        {\r\n            int integer=0;\r\n            int n=scan();\r\n            while(isWhiteSpace(n))\r\n            n=scan();\r\n            int neg=1;\r\n            if(n=='-')\r\n            {\r\n                neg=-1;\r\n                n=scan();\r\n            }\r\n            while(!isWhiteSpace(n))\r\n            {\r\n                if(n>='0'&&n<='9')\r\n                {\r\n                    integer*=10;\r\n                    integer+=n-'0';\r\n                    n=scan();\r\n                }\r\n                else throw new InputMismatchException();\r\n            }\r\n            return neg*integer;\r\n        }\r\n        public double scanDouble()throws IOException\r\n        {\r\n            double doub=0;\r\n            int n=scan();\r\n            while(isWhiteSpace(n))\r\n            n=scan();\r\n            int neg=1;\r\n            if(n=='-')\r\n            {\r\n                neg=-1;\r\n                n=scan();\r\n            }\r\n            while(!isWhiteSpace(n)&&n!='.')\r\n            {\r\n                if(n>='0'&&n<='9')\r\n                {\r\n                    doub*=10;\r\n                    doub+=n-'0';\r\n                    n=scan();\r\n                }\r\n                else throw new InputMismatchException();\r\n            }\r\n            if(n=='.')\r\n            {\r\n                n=scan();\r\n                double temp=1;\r\n                while(!isWhiteSpace(n))\r\n                {\r\n                    if(n>='0'&&n<='9')\r\n                    {\r\n                        temp/=10;\r\n                        doub+=(n-'0')*temp;\r\n                        n=scan();\r\n                    }\r\n                    else throw new InputMismatchException();\r\n                }\r\n            }\r\n            return doub*neg;\r\n        }\r\n        public String scanString()throws IOException\r\n        {\r\n            StringBuilder sb=new StringBuilder();\r\n            int n=scan();\r\n            while(isWhiteSpace(n))\r\n            n=scan();\r\n            while(!isWhiteSpace(n))\r\n            {\r\n                sb.append((char)n);\r\n                n=scan();\r\n            }\r\n            return sb.toString();\r\n        }\r\n        private boolean isWhiteSpace(int n)\r\n        {\r\n            if(n==' '||n=='\\n'||n=='\\r'||n=='\\t'||n==-1)\r\n            return true;\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    public static void sort(int arr[],int l,int r) {    //sort(arr,0,n-1);\r\n        if(l==r) {\r\n            return;\r\n        }\r\n        int mid=(l+r)/2;\r\n        sort(arr,l,mid);\r\n        sort(arr,mid+1,r);\r\n        merge(arr,l,mid,mid+1,r);\r\n    }\r\n    public static void merge(int arr[],int l1,int r1,int l2,int r2) {\r\n        int tmp[]=new int[r2-l1+1];\r\n        int indx1=l1,indx2=l2;\r\n        //sorting the two halves using a tmp array\r\n        for(int i=0;i<tmp.length;i++) {\r\n            if(indx1>r1) {\r\n                tmp[i]=arr[indx2];\r\n                indx2++;\r\n                continue;\r\n            }\r\n            if(indx2>r2) {\r\n                tmp[i]=arr[indx1];\r\n                indx1++;\r\n                continue;\r\n            }\r\n            if(arr[indx1]<arr[indx2]) {\r\n                tmp[i]=arr[indx1];\r\n                indx1++;\r\n                continue;\r\n            }\r\n            tmp[i]=arr[indx2];\r\n            indx2++;\r\n        }\r\n        //Copying the elements of tmp into the main array\r\n        for(int i=0,j=l1;i<tmp.length;i++,j++) {\r\n            arr[j]=tmp[i];\r\n        }\r\n    }\r\n    \r\n    public static void sort(long arr[],int l,int r) {    //sort(arr,0,n-1);\r\n        if(l==r) {\r\n            return;\r\n        }\r\n        int mid=(l+r)/2;\r\n        sort(arr,l,mid);\r\n        sort(arr,mid+1,r);\r\n        merge(arr,l,mid,mid+1,r);\r\n    }\r\n    public static void merge(long arr[],int l1,int r1,int l2,int r2) {\r\n        long tmp[]=new long[r2-l1+1];\r\n        int indx1=l1,indx2=l2;\r\n        //sorting the two halves using a tmp array\r\n        for(int i=0;i<tmp.length;i++) {\r\n            if(indx1>r1) {\r\n                tmp[i]=arr[indx2];\r\n                indx2++;\r\n                continue;\r\n            }\r\n            if(indx2>r2) {\r\n                tmp[i]=arr[indx1];\r\n                indx1++;\r\n                continue;\r\n            }\r\n            if(arr[indx1]<arr[indx2]) {\r\n                tmp[i]=arr[indx1];\r\n                indx1++;\r\n                continue;\r\n            }\r\n            tmp[i]=arr[indx2];\r\n            indx2++;\r\n        }\r\n        //Copying the elements of tmp into the main array\r\n        for(int i=0,j=l1;i<tmp.length;i++,j++) {\r\n            arr[j]=tmp[i];\r\n        }\r\n    }\r\n    \r\n    public static void main(String args[]) throws IOException {\r\n        Scan input=new Scan();\r\n        StringBuilder ans=new StringBuilder(\"\");\r\n        \r\n        int n=input.scanInt();\r\n        int qq=input.scanInt();\r\n//        for(int i=0;i<n;i++) {\r\n//            System.out.println(i+\"->\"+(i^14));\r\n//        }\r\n//        return;\r\n        boolean hs[]=new boolean[1000000];\r\n        int freq[]=new int[1000000];\r\n        for(int i=0;i<n;i++) {\r\n            int val=input.scanInt();\r\n//            int val=i;\r\n            hs[val]=true;\r\n            freq[val]=1;\r\n        }\r\n        for(int i=1;i<freq.length;i++) {\r\n            freq[i]+=freq[i-1];\r\n        }\r\n        int mex=0;\r\n        while(hs[mex]) {\r\n            mex++;\r\n        }\r\n        int pow[]=new int[25];\r\n        pow[0]=1;\r\n        for(int i=1;i<pow.length;i++) {\r\n            pow[i]=2*pow[i-1];\r\n        }\r\n        int xor=0;\r\n        for(int q=1;q<=qq;q++) {\r\n            xor^=input.scanInt();\r\n            if(xor==0) {\r\n                ans.append(mex+\"\\n\");\r\n                continue;\r\n            }\r\n            int msb=find_msb(xor,pow)+1;\r\n            int mul=mex/pow[msb];\r\n            int tmp_mex=mul*pow[msb];\r\n            \r\n            int l=tmp_mex,r=tmp_mex+pow[msb]-1;\r\n//            System.out.println(l+\" \"+r);\r\n            while(hs[xor^tmp_mex] && l<=r) {\r\n//                System.out.println(l+\" \"+r);\r\n                int mid=(l+r)/2;\r\n                if((tmp_mex^xor)>=l && (tmp_mex^xor)<=mid) {\r\n                    if(get(l,mid,freq)==(mid-l+1)) {\r\n                        tmp_mex+=(mid-l+1);\r\n                        l=mid+1;\r\n                    }\r\n                    else {\r\n                        r=mid-1;\r\n                    }\r\n                }\r\n                else {\r\n                    if(get(mid+1,r,freq)==(r-(mid+1)+1)) {\r\n                        tmp_mex+=r-(mid+1)+1;\r\n                        r=mid-1;\r\n                    }\r\n                    else {\r\n                        l=mid+1;\r\n                    }\r\n                }\r\n            }\r\n//            while(hs[xor^tmp_mex]) {\r\n//                tmp_mex++;\r\n//            }\r\n            ans.append(tmp_mex+\"\\n\");\r\n        }\r\n        System.out.print(ans);\r\n    }\r\n    public static int find_msb(int val,int pow[]) {\r\n        for(int i=pow.length-1;i>=0;i--) {\r\n            if((val&pow[i])!=0) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    public static int get(int l,int r,int arr[]) {\r\n        return arr[r]-(l==0?0:arr[l-1]);\r\n    }\r\n}\r\n"
}