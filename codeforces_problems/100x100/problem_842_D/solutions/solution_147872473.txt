{
    "id": 147872473,
    "contestId": 842,
    "creationTimeSeconds": 1645975042,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "spartanes"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 264,
    "memoryConsumedBytes": 23552000,
    "source": "#include <iostream>\r\n#include <utility>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <math.h>\r\n#include <iomanip>\r\n#include <string>\r\n#include <map>\r\n#include <set>\r\n#include <stack>\r\n#include <queue>\r\n#include <numeric>\r\n#include <random>\r\n#include <chrono>\r\n#include <functional>\r\n#include <bitset>\r\n\r\nusing namespace std;\r\n\r\n#define f first\r\n#define s second\r\n#define all(a) a.begin(), a.end()\r\n#define len(s) (int)s.size()\r\n#define nl cout << '\\n'\r\ntypedef long double ld;\r\ntypedef long long ll;\r\nconst ll INF = 1e18;\r\nconst ll MOD = 998244353;\r\nconst int inf = 2e9;\r\nconst int N = 3000 + 3;\r\ntemplate<typename T>istream& operator>>(istream& is, vector<T>& v) { for (auto& i : v) is >> i; return is; }\r\ntemplate<typename T> void mul(T& a, T b) { a += b; if (b < (T)0) a += MOD; if (a >= (T)MOD) a -= MOD; }\r\n\r\nstruct trie {\r\n    struct node {\r\n        node* nxt[2] = { nullptr,nullptr };\r\n        int cnt = 0;\r\n    }* root = new node;\r\n\r\n    void add(int x) {\r\n        node* cur = root;\r\n        for (int i = 20; i >= 0; i--) {\r\n            int bit = x >> i & 1;\r\n            if (cur->nxt[bit] == nullptr) cur->nxt[bit] = new node;\r\n            cur = cur->nxt[bit];\r\n            cur->cnt++;\r\n        }\r\n    }\r\n    int get(int x) {\r\n        node* cur = root;\r\n        int res = 0;\r\n        for (int i = 20; i >= 0; i--) {\r\n            int bit = x >> i & 1;\r\n            if (!cur->nxt[bit]) return res;\r\n            if (cur->nxt[bit]->cnt == (1 << i)) {\r\n                res += (1 << i);\r\n                if (!cur->nxt[bit ^ 1]) return res;\r\n                bit ^= 1;\r\n            }\r\n            cur = cur->nxt[bit];\r\n        }\r\n        return res + 1;\r\n    }\r\n};\r\n\r\nvoid solve() {\r\n    int n, q;\r\n    cin >> n >> q;\r\n    trie tt;\r\n    vector <int> vis(1 << 20);\r\n    for (int i = 0; i < n; i++) {\r\n        int x; cin >> x;\r\n        if (vis[x]) continue;\r\n        tt.add(x);\r\n        vis[x] = 1;\r\n    }\r\n    int xr = 0;\r\n    while (q--) {\r\n        int x; cin >> x;\r\n        xr ^= x;\r\n        cout << tt.get(xr); nl;\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    //freopen(\"input.txt\",\"r\",stdin);\r\n    int tt = 1; //cin >> tt;\r\n    while (tt--) {\r\n        solve();\r\n        nl;\r\n    }\r\n    return 0;\r\n}"
}