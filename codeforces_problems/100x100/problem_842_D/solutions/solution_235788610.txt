{
    "id": 235788610,
    "contestId": 842,
    "creationTimeSeconds": 1701747787,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "May_27th"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 21504000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst long long mod = 1e9 + 7, inf = 1e18;\r\nconst int base = 33;\r\nconst int N = 1e6 + 10;\r\nconst int LG = 20;\r\n\r\nint dx[] = {1, -1, 0, 0};\r\nint dy[] = {0, 0, 1, -1};\r\n\r\nstruct Trie{\r\n    struct Node{\r\n        Node* child[2];\r\n        int cnt;\r\n        Node() {\r\n            for(int i = 0; i < 2; i ++) child[i] = NULL;\r\n            cnt = 0;\r\n        }\r\n    };\r\n\r\n    int cur;\r\n    Node* root;\r\n    Trie() : cur(0){\r\n        root = new Node();\r\n    };\r\n\r\n    void add(int num){\r\n        Node* p = root;\r\n        for(int i = LG; i >= 0; i --){\r\n            int c = (num >> i) & 1;\r\n            if(p->child[c] == NULL) p->child[c] = new Node();\r\n\r\n            p = p->child[c];\r\n            p->cnt ++;\r\n        }\r\n    }\r\n\r\n    int findmex(int cur){\r\n        Node* p = root;\r\n        int mex = 0;\r\n        for(int i = LG; i >= 0; i --){\r\n            int c = (cur >> i) & 1;\r\n            if(p->child[c] != NULL && p->child[c]->cnt == (1 << i)){\r\n                //cout << p->child[c]->cnt << \" \" << (1 << i) << \"\\n\";\r\n                p = p->child[c ^ 1];\r\n                mex = mex + (1 << i);\r\n            }\r\n            else{\r\n                p = p->child[c];\r\n            }\r\n            if(p == NULL) break;\r\n        }\r\n        return mex;\r\n    }\r\n\r\n};\r\n\r\nint n, m;\r\nTrie mylove;\r\n\r\nvoid Solve()\r\n{\r\n    cin >> n >> m;\r\n    vector<int>v;\r\n    for(int i = 1; i <= n; i ++){\r\n        int x; cin >> x;\r\n        v.push_back(x);\r\n    }\r\n    sort(v.begin(), v.end());\r\n    v.erase(unique(v.begin(), v.end()), v.end());\r\n    for(int x : v) mylove.add(x);\r\n    int cur = 0;\r\n    while(m --){\r\n        int x; cin >> x; cur ^= x;\r\n        cout << mylove.findmex(cur) << \"\\n\";\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    if(fopen(\"HAPPINESS.inp\", \"r\")){\r\n        freopen(\"HAPPINESS.inp\", \"r\", stdin);\r\n        freopen(\"HAPPINESS.out\", \"w\", stdout);\r\n    }\r\n    if(fopen(\"A.inp\", \"r\")){\r\n        freopen(\"A.inp\", \"r\", stdin);\r\n        freopen(\"A.out\", \"w\", stdout);\r\n    }\r\n    int tc = 1;\r\n    //cin >> tc;\r\n    while(tc --){\r\n        Solve();\r\n    }\r\n}\r\n"
}