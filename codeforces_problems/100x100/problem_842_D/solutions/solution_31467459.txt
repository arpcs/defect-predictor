{
    "id": 31467459,
    "contestId": 842,
    "creationTimeSeconds": 1508297116,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "ffbh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 1497,
    "memoryConsumedBytes": 13926400,
    "source": "#include <iostream>\r\n#include <string>\r\n#include <cstring>\r\n#include <fstream>\r\n#include <functional>\r\n#include <algorithm>\r\n#include <ctime>\r\n#include <cmath>\r\n#include <vector>\r\n#include <queue>\r\n#include <map>\r\n#include <sstream>\r\n#include <unordered_set>\r\n#include <unordered_map>\r\n#include <sstream>\r\n#include <set>\r\n#include <cassert>\r\nusing namespace std;\r\n\r\n//ifstream in(\"C:\\\\input.txt\");\r\nistream& in = cin;\r\n\r\n\r\n#define pii pair<int,int>\r\n#define mp make_pair\r\n#define pb push_back\r\ntypedef long long LL;\r\n\r\nstruct Node{\r\n\tint next[2];\r\n\tbool full;\r\n}data[1000010];\r\n\r\nint root, size;\r\nint N, M;\r\nint MALLOC(){\r\n\tdata[size].full = 0;\r\n\tdata[size].next[0] = data[size].next[1] = -1;\r\n\treturn size++;\r\n}\r\n\r\nvoid Init(){\r\n\tsize = 0;\r\n\troot = MALLOC();\r\n}\r\n\r\nvoid Insert(int val){\r\n\tint p = root;\r\n\tfor (int i = 20; i >= 0; --i){\r\n\t\tint k = (val &(1 << i)) ? 1 : 0;\r\n\t\tif (data[p].next[k] == -1){\r\n\t\t\tdata[p].next[k] = MALLOC();\r\n\t\t}\r\n\t\tp = data[p].next[k];\r\n\t}\r\n}\r\n\r\n\r\nvoid input(){\r\n\tin >> N >> M;\r\n\r\n\r\n}\r\n\r\nvoid dfs(int pos){\r\n\tif (data[pos].next[0] == -1 && data[pos].next[1] == -1){\r\n\t\tdata[pos].full = 1;\r\n\t\treturn ;\r\n\t}\r\n\tif (data[pos].next[0] != -1){\r\n\t\tdfs(data[pos].next[0]);\r\n\t}\r\n\r\n\tif (data[pos].next[1] != -1){\r\n\t\tdfs(data[pos].next[1]);\r\n\t}\r\n\t\r\n\tif (data[pos].next[0] != -1 && data[data[pos].next[0]].full &&\r\n\t\tdata[pos].next[1] != -1 && data[data[pos].next[1]].full){\r\n\t\tdata[pos].full = 1;\r\n\t}\r\n}\r\n\r\n\r\nint getAns(int x){\r\n\tint ans = 0;\r\n\tint p = root;\r\n\tfor (int i = 20; i >= 0; --i){\r\n\t\tif (p == -1)\r\n\t\t\tbreak;\r\n\t\tint k = (x &(1 << i)) ? 1 : 0;\r\n\t\tif (k == 0){\r\n\t\t\t\r\n\t\t\tif (data[p].next[0] == -1){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse if ( !data[data[p].next[0]].full){\r\n\t\t\t\tp = data[p].next[0];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tp = data[p].next[1];\r\n\t\t\t\tans += (1 << i);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif (data[p].next[1] == -1){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\telse if (  !data[data[p].next[1]].full){\r\n\t\t\t\tp = data[p].next[1];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tp = data[p].next[0];\r\n\t\t\t\tans += (1 << i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nint main(){\r\n\r\n\tint TEST_CASE = 1;\r\n\t//in >> TEST_CASE;\r\n\twhile (TEST_CASE-- > 0){\r\n\t\tInit();\r\n\t\tinput();\r\n\r\n\t\tfor (int i = 1; i <= N; ++i){\r\n\t\t\tint val;\r\n\t\t\tin >> val;\r\n\t\t\tInsert(val);\r\n\t\t}\r\n\r\n\t\tdfs(0);\r\n\r\n\t\tint x = 0;\r\n\t\tfor (int i = 1; i <= M; ++i){\r\n\t\t\tint tmp;\r\n\t\t\tin >> tmp;\r\n\t\t\tx ^= tmp;\r\n\r\n\t\t\tprintf(\"%d\\n\", getAns(x));\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\treturn 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
}