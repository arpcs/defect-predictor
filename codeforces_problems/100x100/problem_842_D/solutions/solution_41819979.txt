{
    "id": 41819979,
    "contestId": 842,
    "creationTimeSeconds": 1534669463,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "chinmay0906"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 342,
    "memoryConsumedBytes": 34713600,
    "source": "#include <iostream>\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\nconst int X = 20;\r\nconst int N = 3e5 + 5;\r\n\r\nstruct Node {\r\n    int val = 0;\r\n    Node *child[2] = {0};\r\n};\r\n\r\nint A[N];\r\ngp_hash_table<int, int> M;\r\n\r\nvoid Insert(Node *curr, int num, int p) {\r\n\r\n    curr->val++;\r\n\r\n    if(p < 0) {\r\n        return;\r\n    }\r\n\r\n    int dir = num & (1<<p);\r\n\r\n    if(dir) {\r\n        if(curr->child[1] == NULL) curr->child[1] = new Node();\r\n        Insert(curr->child[1], num, p-1);\r\n    }\r\n    else {\r\n        if(curr->child[0] == NULL) curr->child[0] = new Node();\r\n        Insert(curr->child[0], num, p-1);\r\n    }\r\n}\r\n\r\nint findAns(Node *curr, int x, int p) {\r\n\r\n    if(p < 0) return 0;\r\n\r\n    int ze = 0, on = 1;\r\n    int bit = x & (1<<p);\r\n    if(bit) {\r\n        swap(ze, on);\r\n    }\r\n\r\n    if(curr->child[ze] == NULL) return 0;\r\n\r\n    if(curr->child[ze]->val < (1<<p)) {\r\n\r\n        return findAns(curr->child[ze], x, p-1);\r\n    }\r\n    else {\r\n\r\n        if(curr->child[on] == NULL) return (1<<p);\r\n\r\n        else return (1<<p) + findAns(curr->child[on], x, p-1);\r\n    }\r\n}\r\n\r\nint main() {\r\n\r\n    int n, m;\r\n\r\n    scanf(\"%d %d\", &n, &m);\r\n\r\n    Node *root = new Node();\r\n\r\n    for(int i=1; i<=n; i++) {\r\n        scanf(\"%d\", &A[i]);\r\n        if(M[ A[i] ]++ == 0)\r\n            Insert(root, A[i], X-1);\r\n    }\r\n\r\n    int XX = 0, xa;\r\n\r\n    while(m--) {\r\n\r\n        scanf(\"%d\", &xa);\r\n\r\n        XX ^= xa;\r\n\r\n        printf(\"%d\\n\", findAns(root, XX, X-1));\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}