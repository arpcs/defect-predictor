{
    "id": 120389467,
    "contestId": 842,
    "creationTimeSeconds": 1624469297,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 842,
        "index": "D",
        "name": "Vitya and Strange Lesson",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 842,
        "members": [
            {
                "handle": "Mondeus"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504019100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 50892800,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <set>\r\n#include <string>\r\n#include <cmath>\r\n#include <map>\r\nusing namespace std;\r\nint a[200005], n,q;\r\nint base = 22;\r\nlong long trie[2000005][2];\r\nlong long cntWord[2000005];\r\nbool isTree[2000005];\r\nlong long v[31];\r\nint cnt = 0;\r\nvoid add(string s)\r\n{\r\n    int len = s.length();\r\n    int node = 0;\r\n    for(int i = 0; i < len;i++)\r\n    {\r\n        if(trie[node][s[i]-'0'] == 0)\r\n            trie[node][s[i]-'0'] = ++cnt;\r\n        node = trie[node][s[i]-'0'];\r\n    }\r\n    cntWord[node]++;\r\n}\r\nvoid check(int node)\r\n{\r\n    if(cntWord[node] > 0)\r\n    {\r\n        isTree[node] = true;\r\n        return;\r\n    }\r\n   // cout << node << ' ' << trie[node][0] << ' ' << trie[node][1] << '\\n';\r\n    if(trie[node][0] != 0) check(trie[node][0]);\r\n    if(trie[node][1] != 0) check(trie[node][1]);\r\n    if(trie[node][0] != 0 && trie[node][1] != 0) isTree[node] = isTree[trie[node][0]] && isTree[trie[node][0]];\r\n}\r\nlong long calc()\r\n{\r\n    int len = base+1;\r\n    int node = 0;\r\n    string ans;\r\n    for(int i = 0; i < len;i++)\r\n    {\r\n\r\n        if(trie[node][0^v[i]] == 0)\r\n        {\r\n            while(i < len)\r\n            {\r\n                ans += '0';\r\n                i++;\r\n            }\r\n            break;\r\n        }\r\n       // cout << trie[node][0^v[i]] << ' ' << v[i] << ' ' << isTree[trie[node][0^v[i]]] << '\\n';\r\n        if(trie[node][0^v[i]] != 0 && !isTree[trie[node][0^v[i]]])\r\n        {\r\n            ans += '0';\r\n            node = trie[node][0^v[i]];\r\n        }\r\n        else\r\n        {\r\n            ans += '1';\r\n            node = trie[node][1^v[i]];\r\n        }\r\n    }\r\n    //cout << ans << ' ';\r\n    long long v = 0;\r\n    for(int i = 0; i < len;i++)\r\n    {\r\n        if(ans[i] == '1') v += (1<<(base-i));\r\n    }\r\n    return v;\r\n}\r\n\r\nvoid Xor(string x)\r\n{\r\n    int len = base+1;\r\n    for(int i = 0; i < len;i++)\r\n        v[i] += x[i] - '0', v[i] %= 2;\r\n}\r\nstring conv(long long x)\r\n{\r\n    string ans;\r\n    for(int i = base; i>=0; i--)\r\n        if(x&(1<<i)) ans += '1';\r\n        else ans += '0';\r\n   // cout << ans << '\\n';\r\n    return ans;\r\n\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n    cin >> n >> q;\r\n    for(int i = 1; i <= n;i++)\r\n    {\r\n        int x;\r\n        cin >> x;\r\n        add(conv(x));\r\n    }\r\n    check(0);\r\n    for(int i = 1; i <= q;i++)\r\n    {\r\n        long long x;\r\n        cin >> x;\r\n        Xor(conv(x));\r\n        cout << calc() << '\\n';\r\n    }\r\n\r\n\r\n\r\n}\r\n"
}