{
    "id": 45123957,
    "contestId": 180,
    "creationTimeSeconds": 1540968885,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "hongquanntct"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 342,
    "memoryConsumedBytes": 4403200,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.*;\r\nimport java.util.stream.Stream;\r\n\r\n\r\npublic class AtCoder implements Runnable {\r\n    static final int MOD = (int) 1e9 + 7;\r\n    static final Reader in = new Reader();\r\n    static final PrintWriter out = new PrintWriter(System.out);\r\n    StringBuilder answer = new StringBuilder();\r\n\r\n    public static void main(String[] args) {\r\n        new Thread(null, new AtCoder(), \"persefone\", 1 << 28).start();\r\n    }\r\n\r\n    @Override\r\n    public void run() {\r\n        solve();\r\n        printf();\r\n        flush();\r\n    }\r\n\r\n    void solve() {\r\n        int n = in.nextInt();\r\n        int m = in.nextInt();\r\n        int k = in.nextInt();\r\n        List<Integer>[] map = new ArrayList[m + 1];\r\n        for (int i = 0; i < n; i++) {\r\n            int x = in.nextInt();\r\n            if (map[x] == null) map[x] = new ArrayList<>();\r\n            map[x].add(i);\r\n        }\r\n\r\n        int ans = 0;\r\n        for (int o = 0; o <= m; o++) {\r\n            if (map[o] != null) {\r\n                int si = map[o].size();\r\n                int[] cur = new int[si + 1];\r\n                for (int i = 1; i < si; i++) cur[i + 1] = cur[i] + map[o].get(i) - map[o].get(i - 1) - 1;\r\n                int l = 1, r = si + 1, t = 0, p = 0;\r\n                while (l < r) {\r\n                    t = l + r >> 1;\r\n                    boolean check = false;\r\n                    for (int i = t; i <= si; i++) {\r\n                        if (cur[i] - cur[i - t + 1] <= k) {\r\n                            check = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (check) l = (p = t) + 1; else r = t;\r\n                }\r\n                ans = Math.max(ans, p);\r\n            }\r\n        }\r\n        printf(ans);\r\n    }\r\n\r\n    void printf() {\r\n        out.print(answer);\r\n    }\r\n\r\n    void close() {\r\n        out.close();\r\n    }\r\n\r\n    void flush() {\r\n        out.flush();\r\n    }\r\n\r\n    void printf(Stream<?> str) {\r\n        str.forEach(o -> add(o, \" \"));\r\n        add(\"\\n\");\r\n    }\r\n\r\n\r\n    void printf(Object... obj) {\r\n        printf(false, obj);\r\n    }\r\n\r\n    void printfWithDescription(Object... obj) {\r\n        printf(true, obj);\r\n    }\r\n\r\n\r\n    private void printf(boolean b, Object... obj) {\r\n\r\n        if (obj.length > 1) {\r\n            for (int i = 0; i < obj.length; i++) {\r\n                if (b) add(obj[i].getClass().getSimpleName(), \" - \");\r\n                if (obj[i] instanceof Collection<?>) {\r\n                    printf((Collection<?>) obj[i]);\r\n                } else if (obj[i] instanceof int[][]) {\r\n                    printf((int[][]) obj[i]);\r\n                } else if (obj[i] instanceof long[][]) {\r\n                    printf((long[][]) obj[i]);\r\n                } else if (obj[i] instanceof double[][]) {\r\n                    printf((double[][]) obj[i]);\r\n                } else printf(obj[i]);\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (b) add(obj[0].getClass().getSimpleName(), \" - \");\r\n        printf(obj[0]);\r\n    }\r\n\r\n    void printf(Object o) {\r\n        if (o instanceof int[])\r\n            printf(Arrays.stream((int[]) o).boxed());\r\n        else if (o instanceof char[])\r\n            printf(new String((char[]) o));\r\n        else if (o instanceof long[])\r\n            printf(Arrays.stream((long[]) o).boxed());\r\n        else if (o instanceof double[])\r\n            printf(Arrays.stream((double[]) o).boxed());\r\n        else if (o instanceof boolean[]) {\r\n            for (boolean b : (boolean[]) o) add(b, \" \");\r\n            add(\"\\n\");\r\n        } else\r\n            add(o, \"\\n\");\r\n    }\r\n\r\n    void printf(int[]... obj) {\r\n        for (int i = 0; i < obj.length; i++) printf(obj[i]);\r\n    }\r\n\r\n    void printf(long[]... obj) {\r\n        for (int i = 0; i < obj.length; i++) printf(obj[i]);\r\n    }\r\n\r\n    void printf(double[]... obj) {\r\n        for (int i = 0; i < obj.length; i++) printf(obj[i]);\r\n    }\r\n\r\n    void printf(boolean[]... obj) {\r\n        for (int i = 0; i < obj.length; i++) printf(obj[i]);\r\n    }\r\n\r\n    void printf(Collection<?> col) {\r\n        printf(col.stream());\r\n    }\r\n\r\n    <T, K> void add(T t, K k) {\r\n        if (t instanceof Collection<?>) {\r\n            ((Collection<?>) t).forEach(i -> add(i, \" \"));\r\n        } else if (t instanceof Object[]) {\r\n            Arrays.stream((Object[]) t).forEach(i -> add(i, \" \"));\r\n        } else\r\n            add(t);\r\n        add(k);\r\n    }\r\n\r\n\r\n    <T> void add(T t) {\r\n        answer.append(t);\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    <T extends Comparable<? super T>> T min(T... t) {\r\n        if (t.length == 0)\r\n            return null;\r\n        T m = t[0];\r\n        for (int i = 1; i < t.length; i++)\r\n            if (t[i].compareTo(m) < 0)\r\n                m = t[i];\r\n        return m;\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    <T extends Comparable<? super T>> T max(T... t) {\r\n        if (t.length == 0)\r\n            return null;\r\n        T m = t[0];\r\n        for (int i = 1; i < t.length; i++)\r\n            if (t[i].compareTo(m) > 0)\r\n                m = t[i];\r\n        return m;\r\n    }\r\n\r\n    static class Pair<K extends Comparable<? super K>, V extends Comparable<? super V>>\r\n            implements Comparable<Pair<K, V>> {\r\n        private K k;\r\n        private V v;\r\n\r\n        Pair(K k, V v) {\r\n            this.k = k;\r\n            this.v = v;\r\n        }\r\n\r\n        @SuppressWarnings(\"unchecked\")\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) return true;\r\n            if (o == null || !(o instanceof Pair)) return false;\r\n            Pair<K, V> p = (Pair<K, V>) o;\r\n            return k.compareTo(p.k) == 0 && v.compareTo(p.v) == 0;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            int hash = 31;\r\n            hash = hash * 89 + k.hashCode();\r\n            hash = hash * 89 + v.hashCode();\r\n            return hash;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(Pair<K, V> pair) {\r\n            return k.compareTo(pair.k) == 0 ? v.compareTo(pair.v) : k.compareTo(pair.k);\r\n        }\r\n\r\n        @Override\r\n        public Pair<K, V> clone() {\r\n            return new Pair<K, V>(this.k, this.v);\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return String.valueOf(k).concat(\" \").concat(String.valueOf(v)).concat(\"\\n\");\r\n        }\r\n    }\r\n\r\n    static class Reader {\r\n        private BufferedReader br;\r\n        private StringTokenizer st;\r\n\r\n        Reader() {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            try {\r\n                while (st == null || !st.hasMoreTokens()) {\r\n                    st = new StringTokenizer(br.readLine());\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        int[] nextIntArray(int n) {\r\n            int[] arr = new int[n];\r\n            for (int i = 0; i < n; i++)\r\n                arr[i] = nextInt();\r\n            return arr;\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String s = \"\";\r\n            try {\r\n                s = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return s;\r\n        }\r\n    }\r\n}"
}