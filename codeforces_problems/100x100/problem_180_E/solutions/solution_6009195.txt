{
    "id": 6009195,
    "contestId": 180,
    "creationTimeSeconds": 1394712818,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 180,
        "index": "E",
        "name": "Cubes",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "binary search",
            "dp",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 180,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335078000
    },
    "programmingLanguage": "GNU C++",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "# include<iostream>\n# include<cstring>\n# include<cmath>\n# include<cstdio>\n# include<algorithm>\n# include<queue>\n# include<stack>\n# include<map>\nusing namespace std;\n\n#define LL long long\n#define INF 0x3fffffff\n\nstruct Block{\n    int s , e ;\n    Block(int ss , int ee){\n        s =ss;e =ee;\n    }\n}sta[100100];\nvector< Block > Color[ 100100 ];\nmap<int,int> mp;\nint main(){\n    int n , m , k ;scanf(\"%d%d%d\",&n,&m,&k);\n    int now , s , e , p ;\n    int num = 1;\n    scanf(\"%d\",&now);\n    if( mp.find(now) == mp.end() )\n        mp[now] = num++;\n    p=now;\n    s=e=0;\n\n    for( int i = 1 ; i < n ; ++ i ){\n        scanf(\"%d\",&now);\n        if( mp.find(now) == mp.end() )\n            mp[now] = num++;\n        if( now == p ){\n            e++;\n            if( i == n-1 )\n                Color[mp[p]].push_back( Block(s,e) );\n        }\n        else{\n            Color[p].push_back( Block(s,e) );\n            p = now ;\n            s = e = i;\n            if( i == n-1 )\n                Color[mp[p]].push_back( Block(s,e) );\n        }\n    }\n    int Ans = 0;\n    for( int i = 1 ; i <= m ; ++ i ){\n        int ans = Color[i][0].e - Color[i][0].s+1;\n        Ans = max(ans,Ans);\n        int d = 0;\n       // queue< Block > sta;\n       int bear , top;\n       bear = top = 0;\n       top = -1;\n        for( int j = 1 ; j < Color[i].size() ; ++ j ){\n            int p = Color[i][j-1].e;\n            int n = Color[i][j].s;\n            int len = n-p-1;\n            int sco = Color[i][j-1].e-Color[i][j-1].s+1;\n            sta[++top] = ( Block(len,sco) );\n            d+=len;\n            ans += Color[i][j].e-Color[i][j].s+1;\n            while( d > k ){\n                if( bear >= top ){\n                    d = 0;\n                    ans = 0 ;\n                    break;\n                }\n                d -= sta[bear].s;\n                ans -= sta[bear].e;\n                bear++;\n            }\n            Ans = max(ans,Ans);\n        }\n    }\n    printf(\"%d\\n\",Ans);\n    return 0;\n}\n\n\t   \t\t   \t  \t\t \t\t\t    \t"
}