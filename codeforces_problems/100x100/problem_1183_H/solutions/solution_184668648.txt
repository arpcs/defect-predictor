{
    "id": 184668648,
    "contestId": 1183,
    "creationTimeSeconds": 1670738937,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1183,
        "index": "H",
        "name": "Subsequences (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1183,
        "members": [
            {
                "handle": "InfinitePath"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561559700
    },
    "programmingLanguage": "Java 11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 58,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n  public static void main(String[] args)throws IOException{\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n    PrintWriter pw = new PrintWriter(System.out);\r\n    StringTokenizer st = new StringTokenizer(br.readLine());\r\n    int N = Integer.parseInt(st.nextToken());\r\n    Long K = Integer.parseInt(st.nextToken()) - (long) 1;\r\n    st = new StringTokenizer(br.readLine());\r\n    String S = st.nextToken();\r\n    int[][] max_pos = new int[N][26];\r\n    for(int i = 0; i<N; i++) Arrays.fill(max_pos[i], -1);\r\n    \r\n    for(int i = 0; i<26; i++){\r\n      for(int j = 0; j<S.length(); j++){\r\n        if(S.charAt(j) - 'a' == i){\r\n          max_pos[j][i] = j;\r\n        }else{\r\n          if(j == 0){\r\n            max_pos[j][i] = -1;\r\n            continue;\r\n          }\r\n          max_pos[j][i] = max_pos[j - 1][i];\r\n        }\r\n      }\r\n    }\r\n    long[][] dp = new long[N + 1][N + 1];\r\n    for(int i = 0; i<N; i++){\r\n      dp[i][1] = 1;\r\n    }\r\n    for(int i = 2; i<N; i++){\r\n      for(int j = 1; j<N; j++){\r\n        for(int k = 0; k<26; k++){\r\n          if(max_pos[j - 1][k] == -1) continue;\r\n          dp[j][i] = Math.min((long) Math.pow(10, 12), dp[j][i] + dp[max_pos[j  - 1][k]][i - 1]);\r\n        }\r\n      }\r\n    }\r\n    long cost = 0;\r\n   \r\n    for(int i = N - 1; i >= 1; i--){\r\n      long use = 0;\r\n      for(int j = 0; j<26; j++){\r\n        if(max_pos[N - 1][j] == -1) continue;\r\n        if(dp[max_pos[N - 1][j]][i] != -1){\r\n          use += dp[max_pos[N - 1][j]][i] ;\r\n        }\r\n      }\r\n      if(use >= K){\r\n        cost += K * (N - i);\r\n        K = (long) 0;\r\n        break;\r\n      }else{\r\n        cost += use * (N - i);\r\n        K -= use;\r\n      }\r\n    }\r\n    //empty string edge case\r\n    if(K == 1){\r\n      cost += N;\r\n      K = (long) 0;\r\n    }\r\n    //pw.println(Arrays.deepToString(max_pos));\r\n    //pw.println(Arrays.deepToString(dp));\r\n   //pw.println(max_pos[2][0]);\r\n  //pw.println(K);\r\n    pw.println(K > 0 ? -1: cost);\r\n    pw.close();\r\n    \r\n  }\r\n}"
}