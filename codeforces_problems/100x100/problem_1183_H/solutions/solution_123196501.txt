{
    "id": 123196501,
    "contestId": 1183,
    "creationTimeSeconds": 1626876164,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1183,
        "index": "H",
        "name": "Subsequences (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "dp",
            "strings"
        ]
    },
    "author": {
        "contestId": 1183,
        "members": [
            {
                "handle": "YMSeah"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561559700
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 70,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 22732800,
    "source": "\r\ndef naiveSolve():\r\n    \r\n    \r\n    \r\n    return\r\n\r\ndef charToInt(c): #'a'->0\r\n    return ord(c)-ord('a')\r\n\r\ndef main():\r\n    \r\n    n,k=readIntArr()\r\n    s=input()\r\n    \r\n    arr=[charToInt(c) for c in s]\r\n    dp=[[0 for _ in range(n+1)] for __ in range(n)]\r\n    # dp[i][l]\r\n    for i in range(n):\r\n        dp[i][1]=1\r\n    \r\n    prevLatestIdx=[-1]*26\r\n    # to avoid repeated counting like ababa -> aba x 3,\r\n    # take only from the latest appearance of each character\r\n    for i in range(n):\r\n        for l in range(2,n+1):\r\n            for c in range(26):\r\n                if prevLatestIdx[c]!=-1:\r\n                    dp[i][l]+=dp[prevLatestIdx[c]][l-1]\r\n        prevLatestIdx[arr[i]]=i\r\n    \r\n    cnts=[0]*(n+1)\r\n    for c in range(26):\r\n        if prevLatestIdx[c]!=-1:\r\n            for l in range(1,n+1):\r\n                cnts[l]+=dp[prevLatestIdx[c]][l]\r\n    cnts[0]=1\r\n    cost=0\r\n    for l in range(n,-1,-1):\r\n        diff=min(k,cnts[l])\r\n        cost+=diff*(n-l)\r\n        k-=diff\r\n    if k==0:\r\n        print(cost)\r\n    else:\r\n        print(-1)\r\n    \r\n    return\r\n\r\n\r\n\r\nimport sys\r\n# input=sys.stdin.buffer.readline #FOR READING PURE INTEGER INPUTS (space separation ok)\r\ninput=lambda: sys.stdin.readline().rstrip(\"\\r\\n\") #FOR READING STRING/TEXT INPUTS.\r\n\r\ndef oneLineArrayPrint(arr):\r\n    print(' '.join([str(x) for x in arr]))\r\ndef multiLineArrayPrint(arr):\r\n    print('\\n'.join([str(x) for x in arr]))\r\ndef multiLineArrayOfArraysPrint(arr):\r\n    print('\\n'.join([' '.join([str(x) for x in y]) for y in arr]))\r\n \r\ndef readIntArr():\r\n    return [int(x) for x in input().split()]\r\n# def readFloatArr():\r\n#     return [float(x) for x in input().split()]\r\n \r\ndef makeArr(defaultValFactory,dimensionArr): # eg. makeArr(lambda:0,[n,m])\r\n    dv=defaultValFactory;da=dimensionArr\r\n    if len(da)==1:return [dv() for _ in range(da[0])]\r\n    else:return [makeArr(dv,da[1:]) for _ in range(da[0])]\r\n \r\ndef queryInteractive(l,r):\r\n    print('? {} {}'.format(l,r))\r\n    sys.stdout.flush()\r\n    return int(input())\r\n \r\ndef answerInteractive(x):\r\n    print('! {}'.format(x))\r\n    sys.stdout.flush()\r\n \r\ninf=float('inf')\r\n# MOD=10**9+7\r\nMOD=998244353\r\n\r\nfrom math import gcd,floor,ceil\r\n# from math import floor,ceil # for Python2\r\n \r\nfor _abc in range(1):\r\n    main()"
}