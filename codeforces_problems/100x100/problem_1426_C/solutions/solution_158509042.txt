{
    "id": 158509042,
    "contestId": 1426,
    "creationTimeSeconds": 1653555971,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1426,
        "index": "C",
        "name": "Increase and Copy",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1426,
        "members": [
            {
                "handle": "pradhumna17032000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601280300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "\r\n    #include <bits/stdc++.h>  \r\n    #include <cmath>\r\n    using namespace std;\r\n    using ll = long long;\r\n    using ld=long double;\r\n    typedef pair<int, int> pii;\r\n     \r\n     \r\n     \r\n    //ll ncr(ll n, ll r)\r\n    //{\r\n     \r\n    //    // p holds the value of n*(n-1)*(n-2)...,\r\n    //    // k holds the value of r*(r-1)...\r\n    //    long long p = 1, k = 1;\r\n     \r\n    //    // C(n, r) == C(n, n-r),\r\n    //    // choosing the smaller value\r\n    //    if (n - r < r)\r\n    //        r = n - r;\r\n     \r\n    //    if (r != 0) {\r\n    //        while (r) {\r\n    //            p *= n;\r\n    //            k *= r;\r\n     \r\n    //            // gcd of p, k\r\n    //            long long m = __gcd(p, k);\r\n     \r\n    //            // dividing by gcd, to simplify\r\n    //            // product division by their gcd\r\n    //            // saves from the overflow\r\n    //            p /= m;\r\n    //            k /= m;\r\n     \r\n    //            n--;\r\n    //            r--;\r\n    //        }\r\n     \r\n    //        // k should be simplified to 1\r\n    //        // as C(n, r) is a natural number\r\n    //        // (denominator should be 1 ) .\r\n    //    }\r\n     \r\n    //    else\r\n    //        p = 1;\r\n     \r\n    //    // if our approach is correct p = ans and k =1\r\n    //        return p;\r\n    //}\r\n     \r\n    //void SieveOfEratosthenes(int n)\r\n    //{\r\n      \r\n    //    bool prime[n + 1];\r\n    //    memset(prime, true, sizeof(prime));\r\n     \r\n    //    for (int p = 2; p * p <= n; p++)\r\n    //    {\r\n            \r\n    //        if (prime[p] == true)\r\n    //        {\r\n                \r\n    //            for (int i = p * p; i <= n; i += p)\r\n    //                prime[i] = false;\r\n    //        }\r\n    //    }\r\n     \r\n     \r\n    //    for (int p = 2; p <= n; p++)\r\n    //        if (prime[p])\r\n    //            cout << p << \" \";\r\n    //}\r\n     \r\n     \r\n    //int power(int x, unsigned int y)\r\n    //{\r\n    //    int res = 1; // Initialize result\r\n     \r\n    //    while (y > 0) {\r\n    //        // If y is odd, multiply x with result\r\n    //        if (y & 1)\r\n    //            res = res * x;\r\n     \r\n    //        // n must be even now\r\n    //        y = y >> 1; // y = y/2\r\n    //        x = x * x; // Change x to x^2\r\n    //    }\r\n    //    return res;\r\n    //}\r\n     \r\n    //ll mex(set<ll>v){\r\n      \r\n      \r\n    //  ll i=0;\r\n    //  for(auto it:v){\r\n    //   if(it!=i)return i;\r\n    //   i++;\r\n    //  }\r\n      \r\n    //  return v.size();\r\n      \r\n    //}\r\n    // sort vector of strings according to string size\r\n    // void comp(vector<string>a){\r\n    //   sort(a.begin(), a.end(), [&] (const string &s, const string &t) {\r\n    //           for(ll i=0;i<a.size();i+=2){\r\n    //               if(s[i]!=t[i])return s<t;\r\n    //           }\r\n    //           return s<t;\r\n    //         });\r\n    // }\r\n\r\n    // void comp1(vector<string>a){\r\n    //   sort(a.begin(), a.end(), [&] (const string &s, const string &t) {\r\n    //           for(ll i=1;i<a.size();i+=2){\r\n    //               if(s[i]!=t[i])return s>t;\r\n    //           }\r\n    //           return s>t;\r\n    //         });\r\n    // }\r\n     \r\n     \r\n    //void solve(ll dp[][],ll n,ll a,ll b){\r\n       \r\n       \r\n    //  return solve(dp,n,a,b)+solve(dp,n,a,b);\r\n    //}\r\n    //if(len!=0){\r\n    //         temp=len/2;\r\n    //         temp=len-(len/2);\r\n    //          winner++;\r\n    //        }else if(temp!=0){\r\n    //         temp=temp/2;\r\n    //         winner++;\r\n    //        }\r\n\r\nvoid divisor(unordered_multiset<ll>&s,ll n){\r\n//   s.insert(1);\r\n  for(ll i=1;i*i<=n;i++){\r\n      if(n%i==0){\r\n          if(n/i==i){\r\n              s.insert(i);\r\n          }else{\r\n              s.insert(i);\r\n              s.insert(n/i);\r\n          }\r\n      }\r\n  }\r\n\r\n}\r\n\r\nbool check(vector<ll>v){\r\nll n=v.size();\r\n  bool flag1=false;\r\n  bool flag2=false;\r\n  if((v[0]>v[1]&&v[0]>v[n-1])||(v[0]<v[1]&&v[0]<v[n-1]))flag1=true;\r\n\r\n    for(ll i=1;i<n-1;i++){\r\n        if((v[i]>v[i-1]&&v[i]>v[i+1])||(v[i]<v[i-1]&&v[i]<v[i+1]))continue;\r\n        else return false;\r\n    }\r\n\r\n    if((v[n-1]>v[n-2]&&v[n-1]>v[0])||(v[n-1]<v[n-2]&&v[n-1]<v[0]))flag2=true;\r\n\r\n    // cout<<flag<<'\\n';\r\n   \r\n    if(flag1&&flag2)return true;\r\n     else return false;\r\n}\r\n\r\nvoid solve(){\r\n  \r\n    ll n;\r\n    cin>>n;\r\n    ll sum=0;\r\n    ll x=0;\r\n    if(n<=3){\r\n        cout<<n-1<<'\\n';\r\n        return ;\r\n    }\r\n    for(ll i=1;i<=n;i++){\r\n       if(sum>n/2){x=i;break;}\r\n       sum+=i;\r\n       \r\n     }\r\n     ll ans=x-1+(n-(x-1))/(x-1);\r\n    //  cout<<sum-(x-1)<<'\\n';\r\n     if(n%(sum-(x-1))==0&&sum-(x-1)!=1)ans--;\r\n    //  if(n/2 & 1){\r\n    //    cout<<ans-1<<'\\n';\r\n    //  }else{\r\n         cout<<ans<<'\\n';\r\n    //  }\r\n\r\n  \r\n   \r\n\r\n}\r\n\r\n    int main() {\r\n     \r\n            ios::sync_with_stdio(false); cin.tie(0), cout.tie(0);\r\n          ll t;\r\n         cin>>t;\r\n       while(t--){\r\n              \r\n          solve();\r\n        \r\n       } \r\n    return 0;\r\n    }"
}