{
    "id": 213747545,
    "contestId": 1426,
    "creationTimeSeconds": 1689324384,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1426,
        "index": "C",
        "name": "Increase and Copy",
        "type": "PROGRAMMING",
        "rating": 1100,
        "tags": [
            "binary search",
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1426,
        "members": [
            {
                "handle": "Nasir42"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601280300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 2150400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std ;\r\n\r\n#define pb                push_back\r\n#define ll                long long\r\n#define int               long long int\r\n#define el                endl\r\n#define gcd(a,b)          __gcd(a,b)\r\n#define lcm(a,b)          (a*b)/__gcd(a,b)\r\n#define yes               cout << \"YES\" << endl \r\n#define no                cout << \"NO\" << endl\r\n\r\nconst ll p = 1000000007 ;\r\nconst int N = 1e5 + 10 ;\r\n\r\nbool vis[N] ;\r\nvector<int>g[N] ;\r\n\r\nvoid dfs(int vertex){\r\n   //cout << vertex << endl ;\r\n    vis[vertex] = true ;\r\n    for(int child : g[vertex]){\r\n        if(vis[child]) continue ;\r\n        dfs(child) ;\r\n    }\r\n}\r\n\r\n\r\nint level[N] ;\r\nvoid bfs(int source , int x){\r\n    queue<int> q ;\r\n    q.push(source) ;\r\n    vis[source] = 1 ;\r\n\r\n    while(!q.empty()){\r\n        int cur_v = q.front() ;\r\n        q.pop() ;\r\n        //cout << cur_v << \" \" ;\r\n        for(auto child : g[cur_v]){\r\n            if(!vis[child]){\r\n                q.push(child) ;\r\n                vis[child] = 1 ;\r\n                level[child] = level[cur_v] + 1 ;\r\n            }\r\n        }\r\n    }\r\n    //cout << level[x] << endl ;\r\n    if(level[x]){\r\n        cout << level[x] << endl ;\r\n    }\r\n    else\r\n    cout << \"-1\" << endl;\r\n}\r\n\r\nvoid solve(){\r\n   int n ;\r\n   cin  >> n ;\r\n   int ans = INT_MAX ;\r\n   for(int i = 1 ; i * i <= n ; i += 1){\r\n        int op = i - 1 ;\r\n        int temp = (n  - i) / i ;\r\n        if((n - i) % i != 0) temp += 1 ;\r\n\r\n        op += temp ;\r\n        ans = min(ans , op) ;\r\n   }\r\n\r\n   cout << ans << '\\n' ;\r\n}\r\n\r\nint32_t main(){\r\n    int t  =  1 ;\r\n    cin >>  t ;\r\n    while(t--){\r\n          solve() ;\r\n    }\r\n   \r\n    return 0 ;   \r\n}\r\n"
}