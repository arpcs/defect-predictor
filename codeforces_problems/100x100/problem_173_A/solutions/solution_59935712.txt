{
    "id": 59935712,
    "contestId": 173,
    "creationTimeSeconds": 1567502641,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 173,
        "index": "A",
        "name": "Rock-Paper-Scissors",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1300,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 173,
        "members": [
            {
                "handle": "kopok2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333724400
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 528,
    "memoryConsumedBytes": 3481600,
    "source": "import math\n\n\ndef get_lcm(n1, n2):\n    # find gcd\n    gcd = math.gcd(n1, n2)\n\n    # formula\n    result = (n1 * n2) / gcd\n    return result\n\n\nclass CodeforcesTask173ASolution:\n    def __init__(self):\n        self.result = ''\n        self.rounds = 0\n        self.n_str = ''\n        self.p_str = ''\n\n    def read_input(self):\n        self.rounds = int(input())\n        self.n_str = input()\n        self.p_str = input()\n\n    def process_task(self):\n        n = int(len(self.n_str))\n        k = int(len(self.p_str))\n        ap = 0\n        bp = 0\n        np = 0\n        pp = 0\n        full_round = int(get_lcm(n, k))\n        if self.rounds <= full_round:\n            for x in range(self.rounds):\n                a = self.n_str[ap]\n                b = self.p_str[bp]\n                ap += 1\n                bp += 1\n                if ap >= n:\n                    ap = 0\n                if bp >= k:\n                    bp = 0\n                if (a == \"R\" and b == \"S\") or (a == \"S\" and b == \"P\") or (a == \"P\" and b == \"R\"):\n                    pp += 1\n                elif (b == \"R\" and a == \"S\") or (b == \"S\" and a == \"P\") or (b == \"P\" and a == \"R\"):\n                    np += 1\n            self.result = \"{0} {1}\".format(np, pp)\n        else:\n            for x in range(full_round):\n                a = self.n_str[ap]\n                b = self.p_str[bp]\n                ap += 1\n                bp += 1\n                if ap >= n:\n                    ap = 0\n                if bp >= k:\n                    bp = 0\n                if (a == \"R\" and b == \"S\") or (a == \"S\" and b == \"P\") or (a == \"P\" and b == \"R\"):\n                    pp += 1\n                elif (b == \"R\" and a == \"S\") or (b == \"S\" and a == \"P\") or (b == \"P\" and a == \"R\"):\n                    np += 1\n            np *= self.rounds // full_round\n            pp *= self.rounds // full_round\n            for x in range(self.rounds % full_round):\n                a = self.n_str[ap]\n                b = self.p_str[bp]\n                ap += 1\n                bp += 1\n                if ap >= n:\n                    ap = 0\n                if bp >= k:\n                    bp = 0\n                if (a == \"R\" and b == \"S\") or (a == \"S\" and b == \"P\") or (a == \"P\" and b == \"R\"):\n                    pp += 1\n                elif (b == \"R\" and a == \"S\") or (b == \"S\" and a == \"P\") or (b == \"P\" and a == \"R\"):\n                    np += 1\n            self.result = \"{0} {1}\".format(np, pp)\n\n    def get_result(self):\n        return self.result\n\n\nif __name__ == \"__main__\":\n    Solution = CodeforcesTask173ASolution()\n    Solution.read_input()\n    Solution.process_task()\n    print(Solution.get_result())\n"
}