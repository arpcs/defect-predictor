{
    "id": 1876089,
    "contestId": 164,
    "creationTimeSeconds": 1341743898,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "CountZero"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "Java 7",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 190,
    "memoryConsumedBytes": 45158400,
    "source": "import java.util.List;\nimport java.util.Map;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.FileReader;\nimport java.io.BufferedWriter;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Set;\nimport java.io.BufferedReader;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.File;\nimport java.io.Writer;\nimport java.util.StringTokenizer;\nimport java.util.HashSet;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n * @author jarek\n */\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tInputStream inputStream = System.in;\n\t\tOutputStream outputStream = System.out;\n\t\tInputReader in = new InputReader(inputStream);\n\t\tOutputWriter out = new OutputWriter(outputStream);\n\t\tTaskA solver = new TaskA();\n\t\tsolver.solve(1, in, out);\n\t\tout.close();\n\t}\n}\n\nclass TaskA {\n    public void solve(int testNumber, InputReader in, OutputWriter out) {\n        n = in.nextInt();\n        int m = in.nextInt();\n        f = new int[n];\n        ans = new boolean[n];\n        for (int i = 0; i < n; ++i)\n            f[i] = in.nextInt();\n        g = new ArrayList[n];\n        for (int i = 0; i < m; ++i) {\n            int a = in.nextInt() - 1,\n                    b = in.nextInt() - 1;\n            if (g[a] == null) g[a] = new ArrayList<Integer>();\n            g[a].add(b);\n        }\n        for (int i = 0; i < n; ++i)\n            if (f[i] == 1)\n                dfs(i, new ArrayList<Integer>());\n        for (int i = 0; i < ans.length; ++i)\n            out.println(ans[i] ? 1 : 0);\n    }\n\n    boolean[] ans;\n    Map<Integer, Set<Integer>> used = new HashMap<Integer, Set<Integer>>();\n    int[] f;\n    ArrayList<Integer>[] g;\n    int n;\n\n    public void dfs(int cur, List<Integer> way) {\n        List<Integer> newway = add(cur, way);\n        if (f[cur] == 2)\n            for (int v : newway)\n                ans[v] = true;\n        if (g[cur] != null) {\n            for (int to : g[cur])\n                if (used.get(cur) == null || (!used.get(cur).contains(to) & f[to] != 1)) {\n                    if (used.get(cur) == null) used.put(cur, new HashSet<Integer>());\n                    used.get(cur).add(to);\n                    dfs(to, newway);\n                }\n        }\n    }\n\n    public List<Integer> add(int cur, List<Integer> way) {\n        List<Integer> newway = new ArrayList<Integer>(way);\n        newway.add(cur);\n        return newway;\n    }\n}\n\nclass InputReader {\n    BufferedReader br;\n    StringTokenizer st;\n\n    public InputReader(File f) {\n        try {\n            br = new BufferedReader(new FileReader(f));\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public InputReader(InputStream f) {\n        br = new BufferedReader(new InputStreamReader(f));\n    }\n\n    public String next() {\n        while (st == null || !st.hasMoreTokens()) {\n            try {\n                st = new StringTokenizer(br.readLine());\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        return st.nextToken();\n    }\n\n    public int nextInt() {\n        return Integer.parseInt(next());\n    }\n\n    }\n\nclass OutputWriter {\n    private final PrintWriter writer;\n\n    public OutputWriter(OutputStream outputStream) {\n        writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));\n    }\n\n    public OutputWriter(Writer writer) {\n        this.writer = new PrintWriter(writer);\n    }\n\n    public void print(Object... objects) {\n        for (int i = 0; i < objects.length; i++) {\n            if (i != 0)\n                writer.print(' ');\n            writer.print(objects[i]);\n        }\n    }\n\n    public void println(Object... objects) {\n        print(objects);\n        writer.println();\n    }\n\n    public void close() {\n        writer.close();\n    }\n}\n\n"
}