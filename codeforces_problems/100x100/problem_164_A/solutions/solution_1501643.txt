{
    "id": 1501643,
    "contestId": 164,
    "creationTimeSeconds": 1333901755,
    "relativeTimeSeconds": 4255,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "DDDDDDDDDDDDDDDDDDDDDDDD"
            }
        ],
        "participantType": "OUT_OF_COMPETITION",
        "ghost": false,
        "room": 100,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++0x",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 270,
    "memoryConsumedBytes": 7884800,
    "source": "#include <cstring>\r\n#include <algorithm>\r\n#include <bitset>\r\n#include <iomanip>\r\n#include <iostream>\r\n#include <list>\r\n#include <map>\r\n#include <queue>\r\n#include <set>\r\n#include <sstream>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef pair<int, int> pii;\r\ntemplate<typename T> void upto(T& a, const T& b) { if (a < b) a = b; }\r\ntemplate<typename T> void dnto(T& a, const T& b) { if (a > b) a = b; }\r\npii operator +(const pii& a, const pii& b) { return pii(a.first+b.first, a.second+b.second); }\r\npii operator -(const pii& a, const pii& b) { return pii(a.first-b.first, a.second-b.second); }\r\nll operator *(const pii& a, const pii& b) { return (ll)a.first*b.first + (ll)a.second*b.second; }\r\nll operator %(const pii& a, const pii& b) { return (ll)a.first*b.second - (ll)a.second*b.first; }\r\n\r\nint n, m;\r\nint a[100000];\r\nvector<int> e[100000];\r\nvector<int> b[100000];\r\nint ans[100000];\r\n\r\nvoid bfs1(int src) {\r\n    queue<int> que;\r\n    que.push(src);\r\n    ans[src] = 1;\r\n    while (not que.empty()) {\r\n        int u = que.front();\r\n        que.pop();\r\n        for (int v : e[u]) {\r\n            if (a[v] != 1 and ans[v] != 1) {\r\n                que.push(v);\r\n                ans[v] = 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nvoid bfs2(int src) {\r\n    if (ans[src] & 2) return;\r\n\r\n    queue<int> que;\r\n    que.push(src);\r\n    ans[src] |= 2;\r\n    while (not que.empty()) {\r\n        int u = que.front();\r\n        que.pop();\r\n        for (int v : b[u]) {\r\n            if ((ans[v] & 2) == 0) {\r\n                ans[v] |= 2;\r\n                if (a[v] != 1)\r\n                    que.push(v);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d%d\", &n, &m);\r\n    for (int i = 0; i < n; i++) {\r\n        scanf(\"%d\", a + i);\r\n    }\r\n    for (int i = 0; i < m; i++) {\r\n        int u, v;\r\n        scanf(\"%d%d\", &u, &v);\r\n        u--;\r\n        v--;\r\n        e[u].push_back(v);\r\n        b[v].push_back(u);\r\n    }\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if (a[i] == 1) {\r\n            bfs1(i);\r\n        }\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        if (a[i] == 2) {\r\n            bfs2(i);\r\n        }\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        if (ans[i] == 3) {\r\n            printf(\"1\\n\");\r\n        } else {\r\n            printf(\"0\\n\");\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n"
}