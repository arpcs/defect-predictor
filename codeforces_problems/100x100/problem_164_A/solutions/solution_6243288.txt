{
    "id": 6243288,
    "contestId": 164,
    "creationTimeSeconds": 1396449172,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "gkevinyen5418"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 216,
    "memoryConsumedBytes": 14336000,
    "source": "#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nint N, M;\r\nvector<int> v[200000][2];\r\nint st[200000];\r\nbool OK[200000][2], visit[200000];\r\n\r\nvoid DFS(int O, int tp)\r\n{\r\n    visit[O] = true;\r\n    OK[O][tp] = true;\r\n\r\n    if( tp == 1 && st[O] == 1 ) return;\r\n\r\n    for(int vi = 0, vn = v[O][tp].size(); vi < vn; vi++)\r\n    {\r\n        int p = v[O][tp][vi];\r\n        if( visit[p] ) continue;\r\n        if( tp == 0 && st[p] == 1 ) continue;\r\n        DFS(p, tp);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    scanf(\"%d %d\", &N, &M);\r\n\r\n    for(int Ni = 1; Ni <= N; Ni++)\r\n        scanf(\"%d\", &st[Ni]);\r\n\r\n    for(int Mi = 0; Mi < M; Mi++)\r\n    {\r\n        int a, b;\r\n        scanf(\"%d %d\", &a, &b);\r\n\r\n        v[a][0].push_back(b);\r\n        v[b][1].push_back(a);\r\n    }\r\n\r\n    memset(visit, false, sizeof(visit));\r\n\r\n    for(int Ni = 1; Ni <= N; Ni++)\r\n        if( st[Ni] == 1 ) DFS( Ni, 0);\r\n\r\n    memset(visit, false, sizeof(visit));\r\n\r\n    for(int Ni = 1; Ni <= N; Ni++)\r\n        if( st[Ni] == 2 ) DFS( Ni, 1);\r\n\r\n    for(int Ni = 1; Ni <= N; Ni++)\r\n    {\r\n        //printf(\"OK %d %d %d\\n\", Ni, OK[Ni][0], OK[Ni][1]);\r\n        if( OK[Ni][0] && OK[Ni][1] ) puts(\"1\");\r\n        else puts(\"0\");\r\n    }\r\n}\r\n"
}