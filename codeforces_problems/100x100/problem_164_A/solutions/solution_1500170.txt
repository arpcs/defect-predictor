{
    "id": 1500170,
    "contestId": 164,
    "creationTimeSeconds": 1333899724,
    "relativeTimeSeconds": 2224,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "Qiang_cx"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 1,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "WRONG_ANSWER",
    "testset": "PRETESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 50,
    "memoryConsumedBytes": 3379200,
    "source": "#include <iostream>\n#include <cstdio>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <string>\n#include <map>\n#include <utility>\n#include <vector>\n#include <set>\n#include <algorithm>\n\n#define maxn 100010\n#define Fup(i, s, t) for (int i = s; i <= t; i ++)\n#define Fdn(i, s, t) for (int i = s; i >= t; i --)\n#define Path(i, s) for (int i = s; i; i = d[i].next)\n\nusing namespace std;\n\nstruct node {int next, now;}d[maxn];\nint c[maxn], f[maxn];\nbool get[maxn], vis[maxn];\nint n, m;\n\nvoid add_edge(int u, int v, int i)\n{\n    d[i].next = c[u]; c[u] = i;\n    d[i].now = v;\n}\n\nbool DFS(int u)\n{\n    bool flag = false;\n    Path(i, c[u]){\n        int v = d[i].now;\n        if (f[v] != 1){\n            if (!vis[v]){\n                vis[v] = true;\n                if (DFS(v))\n                    flag = true;\n            }else\n                if (get[v])\n                    flag = true;\n        }\n    }\n    get[u] = flag;\n    if (f[u] == 2)\n        get[u] = true;\n    return get[u];\n}\n\nvoid init()\n{\n    cin >> n >> m;\n    Fup(i, 1, n)\n        cin >> f[i];\n    Fup(i, 1, m){\n        int a, b;\n        cin >> a >> b;\n        add_edge(a, b, i);\n    }\n}\n\nvoid solve()\n{\n    Fup(i, 1, n)\n        if (!vis[i] && f[i] == 1){\n            vis[i] = true;\n            get[i] = DFS(i);\n        }\n    Fup(i, 1, n)\n        if (get[i])\n            cout << '1' << endl;\n        else\n            cout << '0' << endl;\n}\n\nint main()\n{\n//    freopen(\"temp.in\", \"r\", stdin);\n//    freopen(\"temp.out\", \"w\", stdout);\n    ios::sync_with_stdio(false);\n    init();\n    solve();\n    return 0;\n}\n"
}