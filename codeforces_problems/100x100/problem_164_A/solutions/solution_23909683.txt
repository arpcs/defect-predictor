{
    "id": 23909683,
    "contestId": 164,
    "creationTimeSeconds": 1484681598,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "sfmunera"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 20889600,
    "source": "import java.util.*;\r\n\r\npublic class VariableOrThereAndBackAgain {\r\n\t\r\n\tstatic boolean[] reachable(int state, List<List<Integer>> graph, int[] states) {\r\n\t\tboolean[] reachable = new boolean[states.length];\r\n\t\tQueue<Integer> Q = new LinkedList<>();\r\n\t\tSet<Integer> seen = new HashSet<>();\r\n\t\tfor (int i = 0; i < states.length; i++) {\r\n\t\t\tif (states[i] == state) {\r\n\t\t\t\tQ.offer(i);\r\n\t\t\t\tseen.add(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\twhile (!Q.isEmpty()) {\r\n\t\t\tint u = Q.poll();\r\n\t\t\treachable[u] = true;\r\n\t\t\tfor (int v : graph.get(u)) {\r\n\t\t\t\tif (!seen.contains(v)) {\r\n\t\t\t\t\tseen.add(v);\r\n\t\t\t\t\tQ.offer(v);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn reachable;\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\r\n\t\tScanner in = new Scanner(System.in);\r\n\t\t\r\n\t\tint n = in.nextInt();\r\n\t\tint m = in.nextInt();\r\n\t\tint[] states = new int[n];\r\n\t\tList<List<Integer>> graphForward = new ArrayList<>();\r\n\t\tList<List<Integer>> graphBackward = new ArrayList<>();\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tgraphForward.add(new ArrayList<Integer>());\r\n\t\t\tgraphBackward.add(new ArrayList<Integer>());\r\n\t\t\tstates[i] = in.nextInt();\r\n\t\t}\r\n\t\tfor (int i = 0; i < m; i++) {\r\n\t\t\tint a = in.nextInt() - 1;\r\n\t\t\tint b = in.nextInt() - 1;\r\n\t\t\tgraphForward.get(a).add(b);\r\n\t\t\tgraphBackward.get(b).add(a);\r\n\t\t}\r\n\t\t\r\n\t\tboolean[] reachableForward = reachable(1, graphForward, states);\r\n\t\tboolean[] reachableBackward = reachable(2, graphBackward, states);\r\n\t\t\r\n\t\tfor (int i = 0; i < n; i++) {\r\n\t\t\tSystem.out.println(reachableForward[i] && reachableBackward[i] ? \"1\" : \"0\");\r\n\t\t}\r\n\t\t\r\n\t\tin.close();\r\n\t\tSystem.exit(0);\r\n\t}\r\n}"
}