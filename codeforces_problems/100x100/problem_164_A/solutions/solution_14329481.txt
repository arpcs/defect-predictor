{
    "id": 14329481,
    "contestId": 164,
    "creationTimeSeconds": 1447865072,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "soloApm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nstruct Node {\r\n\tvector<int> out;\r\n\tvector<int> in;\r\n\tint value = 0;\r\n\tbool importantIn = false;\r\n\tbool importantOut = false;\r\n};\r\n\r\ninline bool DFS1(Node & currentNode, const vector<Node> & vec) {\r\n\tif(currentNode.importantOut) {\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tif(currentNode.value == 2  ) {\r\n\t\tcurrentNode.importantOut = true;\r\n\t}\r\n\t\r\n\tfor(auto & nodeIndex : currentNode.out) {\r\n\t\tif(DFS1(vec[nodeIndex], vec)) {\r\n\t\t\tcurrentNode.importantOut = true;\r\n\t\t} \r\n\t}\r\n\treturn currentNode.importantOut;\r\n}\r\n\r\ninline bool DFS2(Node & currentNode, const vector<Node> & vec) {\r\n\tif(currentNode.importantIn) {\r\n\t\treturn true;\r\n\t}\r\n\t\r\n\tif(currentNode.value == 1) {\r\n\t\tcurrentNode.importantIn = true;\r\n\t\treturn true;\t\r\n\t}\r\n\t\r\n\tfor(auto & nodeIndex : currentNode.in) {\r\n\t\tif(DFS2(vec[nodeIndex], vec)) {\r\n\t\t\tcurrentNode.importantIn = true;\r\n\t\t} \r\n\t}\r\n\t\r\n\treturn currentNode.importantIn;\r\n}\r\n\r\nint main() {\r\n\tios::sync_with_stdio(false);\r\n\tint n, m;\r\n\tcin >> n >> m;\r\n\tvector<Node> nodes(n);\r\n\tfor(auto & node: nodes) {\r\n\t\tcin >> node.value;\r\n\t}\r\n\t\r\n\tint j, k;\r\n\tfor(int i = 0; i < m; i++) {\r\n\t\tcin >> j >> k;\r\n\t\tj--; k--;\r\n\t\tauto & outNode = nodes[j];\r\n\t\tauto & inNode = nodes[k];\r\n\t\toutNode.out.push_back(k);\r\n\t\tinNode.in.push_back(j);\r\n\t}\r\n\t\r\n\tfor(auto & node : nodes) {\r\n\t\tif(node.value == 2) {\r\n\t\t\tnode.importantIn = DFS2(node, nodes);\r\n\t\t} else if(node.value == 1) {\r\n\t\t\tnode.importantOut = DFS1(node, nodes);\r\n\t\t}\r\n\t}\r\n\t\r\n\tfor(auto & node : nodes) {\r\n\t\tcout << (node.importantIn && node.importantOut)  << endl;\r\n\t}\r\n\t\r\n\treturn 0;\r\n}"
}