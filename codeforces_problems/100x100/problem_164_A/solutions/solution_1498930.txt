{
    "id": 1498930,
    "contestId": 164,
    "creationTimeSeconds": 1333898407,
    "relativeTimeSeconds": 907,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "Endagorion"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "room": 1,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 380,
    "memoryConsumedBytes": 8806400,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <cmath>\r\n#include <cstdio>\r\n#include <set>\r\n#include <map>\r\n#include <fstream>\r\n#include <cstdlib>\r\n#include <string>\r\n#include <cstring>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\n#ifdef ONLINE_JUDGE\r\n\r\n#define fin cin\r\n#define fout cout\r\n\r\n#else\r\n\r\nfstream fin(\"input.txt\", fstream::in);\r\nfstream fout(\"output.txt\", fstream::out);\r\n\r\n#endif\r\n\r\nint main() {\r\n\tfout.precision(10);\r\n\tfout << fixed;\r\n\r\n\tint N, M;\r\n\tfin >> N >> M;\r\n\tvector<int> state(N);\r\n\tfor (int i = 0; i < N; ++i) {\r\n\t\tfin >> state[i];\r\n\t}\r\n\r\n\tvector< vector<int> > edges(N), invEdges(N);\r\n\tfor (int i = 0; i < M; ++i) {\r\n\t\tint x, y;\r\n\t\tfin >> x >> y;\r\n\t\t--x; --y;\r\n\t\tedges[x].push_back(y);\r\n\t\tinvEdges[y].push_back(x);\r\n\t}\r\n\r\n\tvector<int> q, invq;\r\n\tvector<bool> vis(N, false), invVis(N, false);\r\n\tfor (int i = 0; i < N; ++i) {\r\n\t\tif (state[i] == 1) {\r\n\t\t\tq.push_back(i);\r\n\t\t\tvis[i] = true;\r\n\t\t}\r\n\t\tif (state[i] == 2) {\r\n\t\t\tinvq.push_back(i);\r\n\t\t\tinvVis[i] = true;\r\n\t\t}\r\n\t}\r\n\tint cur = 0;\r\n\twhile (cur < q.size()) {\r\n\t\tint v = q[cur++];\r\n\t\tfor (size_t i = 0; i < edges[v].size(); ++i) {\r\n\t\t\tint u = edges[v][i];\r\n\t\t\tif (!vis[u]) {\r\n\t\t\t\tq.push_back(u);\r\n\t\t\t\tvis[u] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcur = 0;\r\n\twhile (cur < invq.size()) {\r\n\t\tint v = invq[cur++];\r\n\t\tif (state[v] == 1) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tfor (size_t i = 0; i < invEdges[v].size(); ++i) {\r\n\t\t\tint u = invEdges[v][i];\r\n\t\t\tif (!invVis[u]) {\r\n\t\t\t\tinvq.push_back(u);\r\n\t\t\t\tinvVis[u] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfor (int i = 0; i < N; ++i) {\r\n\t\tif (vis[i] && invVis[i]) {\r\n\t\t\tfout << \"1\\n\";\r\n\t\t} else {\r\n\t\t\tfout << \"0\\n\";\r\n\t\t}\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n"
}