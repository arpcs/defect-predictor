{
    "id": 43426831,
    "contestId": 164,
    "creationTimeSeconds": 1537908845,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 164,
        "index": "A",
        "name": "Variable, or There and Back Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 164,
        "members": [
            {
                "handle": "MPeros"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1333897500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 3686400,
    "source": "#include <bits/stdc++.h>\n\n#define F first\n#define S second\n#define MP make_pair\n#define PB push_back\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair < int, int > pii;\ntypedef pair < ll, ll > pll;\ntypedef vector < ll > vl;\n\nconst int MAXN = 1e5 + 500;\nconst int INF = 0x3f3f3f3f;\nconst int MOD = 1e9 + 7;\nconst int LOG = 18;\nconst double EPS = 1e-9;\nconst double PI = 3.1415926535;\n\nvector <int> G[MAXN];\nvector <int> par[MAXN];\nbool visited[MAXN];\nint f[MAXN];\nint ans[MAXN];\n\nvoid backtrack(int curr) {\n    ans[curr] = 1;\n    for(auto v : par[curr])\n        if(!ans[v])\n            backtrack(v);\n}\n\nint main() {\n    queue <int> Q;\n    vector <int> T;\n    int V, E, u, v;\n\n    scanf(\"%d %d\", &V, &E);\n    for(int i = 0; i < V; i++) {\n        scanf(\"%d\", &f[i]);\n        if(f[i] == 1) {\n            Q.push(i);\n            visited[i] = true;\n        }\n    }\n\n    for(int i = 0; i < E; i++) {\n        scanf(\"%d %d\", &u, &v);\n        u--; v--;\n        G[u].push_back(v);\n    }\n\n    while(!Q.empty()) {\n        int curr = Q.front();\n        Q.pop();\n\n        for(auto v : G[curr]) {\n            if(f[v] == 1)\n                continue;\n\n            par[v].push_back(curr);\n\n            if(f[v] == 2) {\n                T.push_back(v);\n                visited[v] = true;\n                continue;\n            }\n            if(!visited[v]) {\n                Q.push(v);\n                visited[v] = true;\n            }\n        }\n    }\n\n    for(auto v : T)\n        backtrack(v);\n\n    for(int i = 0; i < V; i++)\n        printf(\"%d\\n\", ans[i]);\n\n    return 0;\n}\n"
}