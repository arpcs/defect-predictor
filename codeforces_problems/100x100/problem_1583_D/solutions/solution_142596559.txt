{
    "id": 142596559,
    "contestId": 1583,
    "creationTimeSeconds": 1642071733,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "KartikModi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n// #include <testlib.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#pragma GCC optimize(\"O3\")\r\n// #pragma GCC target(\"avx2,sse,sse2,sse3,sse4,popcnt,fma\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\nusing namespace __gnu_pbds;\r\n#include <chrono>\r\nusing namespace std::chrono;\r\n#define pb push_back\r\n#define mk make_pair\r\n// #define endl \"\\n\"\r\n#define mod 1000000007\r\n// #define mod 998244353\r\n#define int long long int\r\n#define PI 3.1415926\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define pf push_front\r\n#define ppf pop_front\r\n#define all(x) (x).begin(), (x).end()\r\n#define uniq(v) (v).erase(unique(all(v)), (v).end())\r\n#define sz(x) (int)((x).size())\r\n#define fr first\r\n#define sc second\r\n#define pii pair<int, int>\r\n#define rep(i, a, b) for (int i = a; i < b; i++)\r\n#define mem1(a) memset(a, -1, sizeof(a))\r\n#define mem0(a) memset(a, 0, sizeof(a))\r\n// #define MAXN 100005\r\n#define N 500005\r\n#define INF 1000000000000000000\r\n#define LOG 20\r\nusing namespace std;\r\nauto start = high_resolution_clock::now();\r\n// typedef long long int ll;\r\ntypedef pair<int, int> ii;\r\ntypedef long double ld;\r\ntypedef tree<ii, null_type, less<ii>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\nint n;\r\nint ask(int k)\r\n{\r\n    vector<int> temp(n + 1, 1);\r\n    temp[n] = k;\r\n    cout << \"? \";\r\n    rep(i, 1, n + 1)\r\n    {\r\n        cout << temp[i] << \" \";\r\n    }\r\n    cout << endl;\r\n    int k3;\r\n    cin >> k3;\r\n    return k3;\r\n}\r\nvoid solve()\r\n{\r\n    cin >> n;\r\n    vector<int> ans(n + 1);\r\n    for (int i = 2; i <= n; i++)\r\n    {\r\n        int k = ask(i);\r\n        if (k)\r\n        {\r\n            ans[n] = (n + 1 - i);\r\n        }\r\n    }\r\n    if (!ans[n])\r\n    {\r\n        ans[n] = n;\r\n    }\r\n    for (int i = 0; i < n - ans[n]; i++)\r\n    {\r\n        vector<int> temp(n + 1, 1);\r\n        temp[n] = i + 2;\r\n        cout << \"? \";\r\n        rep(i, 1, n + 1)\r\n        {\r\n            cout << temp[i] << \" \";\r\n        }\r\n        cout << endl;\r\n        int k;\r\n        cin >> k;\r\n        ans[k] = ans[n] + i + 1;\r\n    }\r\n    for (int i = 1; i < ans[n]; i++)\r\n    {\r\n        int del = ans[n] + 1 - i;\r\n        vector<int> temp(n + 1, del);\r\n        temp[n] = 1;\r\n        cout << \"? \";\r\n        rep(i, 1, n + 1)\r\n        {\r\n            cout << temp[i] << \" \";\r\n        }\r\n        cout << endl;\r\n        int k;\r\n        cin >> k;\r\n        ans[k] = i;\r\n    }\r\n    cout << \"! \";\r\n    rep(i, 1, n + 1)\r\n    {\r\n        cout << ans[i] << \" \";\r\n    }\r\n    cout << endl;\r\n}\r\nsigned main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    int test_cases;\r\n    test_cases = 1;\r\n    // cin >> test_cases;\r\n    for (int i = 0; i < test_cases; i++)\r\n    {\r\n        solve();\r\n        // cout << endl;\r\n        cout << \"\\n\";\r\n    }\r\n    auto stop = high_resolution_clock::now();\r\n    auto duration = duration_cast<microseconds>(stop - start);\r\n    // cout << duration.count() << endl;\r\n    return 0;\r\n}"
}