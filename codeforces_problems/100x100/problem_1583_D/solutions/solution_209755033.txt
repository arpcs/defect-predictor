{
    "id": 209755033,
    "contestId": 1583,
    "creationTimeSeconds": 1686827898,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "iN_siDious"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 4710400,
    "source": "# Created by iN_siDious.\r\n# Copyright \u00a9 2023 iN_siDious. All rights reserved.\r\nimport sys\r\nimport random\r\nfrom math import *\r\nfrom string import ascii_lowercase\r\nfrom collections import Counter, defaultdict, deque\r\nfrom itertools import accumulate, combinations, permutations\r\nfrom heapq import heappushpop, heapify, heappop, heappush\r\nfrom bisect import bisect_left,bisect_right\r\nfrom types import GeneratorType\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n    return wrappedfunc\r\ninp = lambda: sys.stdin.buffer.readline().decode().strip()\r\nout=sys.stdout.write\r\ndef Query(i):\r\n    print('?', i, flush=True)\r\n    qi=int(inp())\r\n    return qi\r\ndef S():\r\n    return inp()\r\ndef I():\r\n    return int(inp())\r\ndef MI():\r\n    return map(int, inp().split())\r\ndef MS():\r\n    return inp().split()\r\ndef LS():\r\n    return list(inp().split())\r\ndef LI():\r\n    return list(map(int,inp().split()))\r\ndef print1(x):\r\n    return out(str(x)+\"\\n\")\r\ndef print2(x,y):\r\n    return out(str(x)+\" \"+str(y)+\"\\n\")\r\ndef print3(x,y,z):\r\n    return out(str(x)+\" \"+str(y)+\" \"+str(z)+\"\\n\")\r\ndef print_arr(arr):\r\n    out(\"?\"+\" \")\r\n    for num in arr:\r\n        out(str(num)+\" \")\r\n    out(str(\"\\n\"))\r\n    print(flush=True)\r\n    qi=int(inp())\r\n    return qi\r\nn=I()\r\narr=[n]*(n+1)\r\nlast=1\r\nmp={}\r\nfor i in range(1,n+1):\r\n    arr[-1]=i\r\n    idx=print_arr(arr[1:])\r\n    if idx!=0:\r\n        last=n-i+1\r\n        mp[n-i+1]=n\r\n        break\r\nfor i in range(1,n+1):\r\n    if i==last: continue\r\n    diff=last-i\r\n    if diff<0:\r\n        diff=abs(diff)\r\n        l,h=1,diff+1\r\n    else:\r\n        l,h=diff+1,1\r\n    arr=[l]*(n+1)\r\n    arr[-1]=h\r\n    idx=print_arr(arr[1:])\r\n    mp[i]=idx\r\nans=[0]*(n+1)\r\nfor i in range(1,n+1):\r\n    ans[mp[i]]=i\r\nout(\"!\"+\" \")\r\nfor num in ans[1:]:\r\n    out(str(num)+\" \")\r\nout(str(\"\\n\"))\r\nprint(flush=True)\r\n    \r\n    \r\n    \r\n    \r\n    \r\n        \r\n\r\n    \r\n        \r\n    \r\n\r\n    "
}