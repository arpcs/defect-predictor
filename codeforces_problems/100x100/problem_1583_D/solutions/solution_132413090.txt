{
    "id": 132413090,
    "contestId": 1583,
    "creationTimeSeconds": 1634629921,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "D",
        "name": "Omkar and the Meaning of Life",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "interactive"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "tox1c_kid"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#pragma gcc optimize(\"Ofast,unroll-loops\")\r\n#pragma gcc target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native,avx2\")\r\n\r\n/*\r\n \u2804\u2804\u2804\u28b0\u28e7\u28fc\u28ef\u2804\u28f8\u28e0\u28f6\u28f6\u28e6\u28fe\u2804\u2804\u2804\u2804\u2840\u2804\u2880\u28ff\u28ff\u2804\u2804\u2804\u28b8\u2847\u2804\u2804\r\n\u2804\u2804\u2804\u28fe\u28ff\u283f\u283f\u2836\u283f\u28bf\u28ff\u28ff\u28ff\u28ff\u28e6\u28e4\u28c4\u2880\u2845\u28a0\u28fe\u28db\u2849\u2804\u2804\u2804\u2838\u2880\u28ff\u2804\r\n\u2804\u2804\u2880\u284b\u28e1\u28f4\u28f6\u28f6\u2840\u2804\u2804\u2819\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28f4\u28ff\u28ff\u28ff\u2883\u28e4\u28c4\u28c0\u28e5\u28ff\u28ff\u2804\r\n\u2804\u2804\u28b8\u28c7\u283b\u28ff\u28ff\u28ff\u28e7\u28c0\u2880\u28e0\u284c\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u283f\u283f\u28ff\u28ff\u28ff\u2804\r\n\u2804\u2880\u28b8\u28ff\u28f7\u28e4\u28e4\u28e4\u28ec\u28d9\u28db\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u28ff\u28ff\u284d\u2804\u2804\u2880\u28e4\u28c4\u2809\u280b\u28f0\r\n\u2804\u28fc\u28d6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u2887\u28ff\u28ff\u2877\u2836\u2836\u28bf\u28ff\u28ff\u2807\u2880\u28e4\r\n\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28fd\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f6\u28e5\u28f4\u28ff\u2857\r\n\u2880\u2808\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2804\r\n\u28b8\u28ff\u28e6\u28cc\u28db\u28fb\u28ff\u28ff\u28e7\u2819\u281b\u281b\u286d\u2805\u2812\u2826\u282d\u28ed\u287b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u2803\u2804\r\n\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2839\u2808\u288b\u28fd\u28ff\u28ff\u28ff\u28ff\u28f5\u28fe\u2803\u2804\r\n\u2804\u2818\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2804\u28f4\u28ff\u28f6\u28c4\u2804\u28f4\u28f6\u2804\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u2804\u2804\r\n\u2804\u2804\u2808\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2844\u28bb\u28ff\u28ff\u28ff\u2804\u28ff\u28ff\u2840\u28fe\u28ff\u28ff\u28ff\u28ff\u28db\u281b\u2801\u2804\u2804\u2804\r\n\u2804\u2804\u2804\u2804\u2808\u281b\u28bf\u28ff\u28ff\u28ff\u2801\u281e\u28bf\u28ff\u28ff\u2844\u28bf\u28ff\u2847\u28f8\u28ff\u28ff\u283f\u281b\u2801\u2804\u2804\u2804\u2804\u2804\r\n\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u2809\u283b\u28ff\u28ff\u28fe\u28e6\u2859\u283b\u28f7\u28fe\u28ff\u2803\u283f\u280b\u2801\u2804\u2804\u2804\u2804\u2804\u2880\u28e0\u28f4\r\n\u28ff\u28ff\u28ff\u28f6\u28f6\u28ee\u28e5\u28d2\u2832\u28ae\u28dd\u287f\u28ff\u28ff\u2846\u28ff\u287f\u2803\u2804\u2804\u2804\u2804\u2804\u2804\u2804\u28e0\u28f4\u28ff\u28ff\u28ff\r\n */\r\n\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef unsigned long long ull;\r\ntypedef pair<ll, ll> pll;\r\ntypedef pair<int, int> pii;\r\ntypedef double db;\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\ntypedef tree<pii, null_type, less<pii>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;\r\n#define all(x) (x).begin(), (x).end()\r\n#define dbg(a) cout << #a << \" = \" << a << \"\\n\";\r\n#define dbg1(a) cout << #a << \" = [ \"; for (auto& _ : a) cout << _ << ' '; cout << \"]\" << \"\\n\";\r\n#define dbg2(a) cout << #a << \" = [ \"; for (auto& _ : a) cout << '(' << _.first << ' ' << _.second << \") \"; cout << \"]\" << \"\\n\";\r\nmt19937 mt_rand(time(nullptr));\r\n\r\nint test = 0;\r\n\r\nll binpow(ll a, ll b, ll mod = 1e9 + 7) {\r\n    ll ans = 1;\r\n    while (b) {\r\n        if (b & 1) {\r\n            ans = ans * a % mod;\r\n        }\r\n        a = a * a % mod;\r\n        b >>= 1;\r\n    }\r\n    return ans;\r\n}\r\n\r\nvoid fastio() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n}\r\n\r\nint n;\r\nvoid ans(vector<int> a) {\r\n    cout << \"! \";\r\n    for (auto i : a) cout << i << \" \";\r\n    cout << endl;\r\n}\r\n\r\nvoid solve() {\r\n    cin >> n;\r\n    vector<int> p(n);\r\n    vector<pii> g;\r\n\r\n    for (int i = 0; i < n; i++ ){\r\n        cout << \"? \";\r\n        for (int j = 0; j < n; j++) {\r\n            cout << 1 + (i == j) << \" \";\r\n        }\r\n        cout << endl;\r\n        int k;\r\n        cin >> k;\r\n        k--;\r\n        if (i > k && k != -1) {\r\n            g.push_back({i, k});\r\n        }\r\n    }\r\n\r\n    int pos_min = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        cout << \"? \";\r\n        for (int j = 0; j < n; j++) {\r\n            cout << 1 + (i != j) << \" \";\r\n        }\r\n        cout << endl;\r\n        int k;\r\n        cin >> k;\r\n        k--;\r\n        if (k == -1) {\r\n            pos_min = i;\r\n        }\r\n        if (i > k && k != -1) {\r\n            g.push_back({k, i});\r\n        }\r\n    }\r\n\r\n    map<int, int> graph;\r\n\r\n    for (pair<int, int> i : g) {\r\n        graph[i.first] = i.second;\r\n    }\r\n\r\n    p[pos_min] = 1;\r\n\r\n    for (int i = 1; i < n - 1; i++ ){\r\n        pos_min = graph[pos_min];\r\n        p[pos_min] = i + 1;\r\n    }\r\n    for (auto & i : p) {\r\n        if (!i) {\r\n            i = n;\r\n            break;\r\n        }\r\n    }\r\n    ans(p);\r\n}\r\n\r\nint32_t main() {\r\n    int t = 1;\r\n//    fastio();\r\n    if (test) cin >> t;\r\n    while (t--) { solve(); }\r\n    return 0;\r\n}"
}