{
    "id": 101456995,
    "contestId": 1197,
    "creationTimeSeconds": 1608145118,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1197,
        "index": "A",
        "name": "DIY Wooden Ladder",
        "type": "PROGRAMMING",
        "rating": 900,
        "tags": [
            "greedy",
            "math",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1197,
        "members": [
            {
                "handle": "DRAGONLORE"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563806100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\n//#include<boost/math/common_factor.hpp> //for lcm\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp> \r\n#include <functional>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<int,null_type,less<int>,rb_tree_tag,\r\n            tree_order_statistics_node_update> indexed_set;//find_by_order&order_of_key\r\n#define n_l '\\n'\r\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]: \"; cout << to_string(__VA_ARGS__) << endl\r\ntemplate <typename T, size_t N> int SIZE(const T (&t)[N]){ return N; } template<typename T> int SIZE(const T &t){ return t.size(); } string to_string(const string s, int x1=0, int x2=1e9){ return '\"' + ((x1 < s.size()) ? s.substr(x1, x2-x1+1) : \"\") + '\"'; } string to_string(const char* s) { return to_string((string) s); } string to_string(const bool b) { return (b ? \"true\" : \"false\"); } string to_string(const char c){ return string({c}); } template<size_t N> string to_string(const bitset<N> &b, int x1=0, int x2=1e9){ string t = \"\"; for(int __iii__ = min(x1,SIZE(b)),  __jjj__ = min(x2, SIZE(b)-1); __iii__ <= __jjj__; ++__iii__){ t += b[__iii__] + '0'; } return '\"' + t + '\"'; } template <typename A, typename... C> string to_string(const A (&v), int x1=0, int x2=1e9, C... coords); int l_v_l_v_l = 0, t_a_b_s = 0; template <typename A, typename B> string to_string(const pair<A, B> &p) { l_v_l_v_l++; string res = \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\"; l_v_l_v_l--; return res; } template <typename A, typename... C> string to_string(const A (&v), int x1, int x2, C... coords) { int rnk = rank<A>::value; string tab(t_a_b_s, ' '); string res = \"\"; bool first = true; if(l_v_l_v_l == 0) res += n_l; res += tab + \"[\"; x1 = min(x1, SIZE(v)), x2 = min(x2, SIZE(v)); auto l = begin(v); advance(l, x1); auto r = l; advance(r, (x2-x1) + (x2 < SIZE(v))); for (auto e = l; e != r; e = next(e)) { if (!first) { res += \", \"; } first = false; l_v_l_v_l++; if(e != l){ if(rnk > 1) { res += n_l; t_a_b_s = l_v_l_v_l; }; } else{ t_a_b_s = 0; } res += to_string(*e, coords...); l_v_l_v_l--; } res += \"]\"; if(l_v_l_v_l == 0) res += n_l; return res; } void dbgm(){;} template<typename Heads, typename... Tails> void dbgm(Heads H, Tails... T){ cout << to_string(H) << \" | \"; dbgm(T...); } \r\n#define dbgm(...) cout << \"[\" << #__VA_ARGS__ << \"]: \"; dbgm(__VA_ARGS__); cout << endl\r\n\r\n#define ll long long int\r\n#define ull unsigned long long int\r\n#define input for(long long i=0;i<n;i++)\r\n#define output for(long long i=0;i<n;i++)cout<<a[i]<<\" \"\r\n#define vll vector<long long>\r\n#define sll set<long long>\r\n#define pll pair<long long,long long>\r\n#define pb push_back\r\n#define mp make_pair\r\n#define ump unordered_map<ll,ll> \r\n#define ummp unordered_multimap<<ll,ll> \r\n#define F first\r\n#define S second \r\n#define vvll vector<vector<ll>>\r\n#define vpll vector<pair<ll,ll>>\r\n#define vsll vector<sll>\r\n#define pq priority_queue<ll>\r\n#define min_pq priority_queue<ll,vll,greater<ll>>\r\n#define PI 3.1415926535897932384626\r\n#define lb lower_bound\r\n#define ub upper_bound\r\n#define sasc sort(a.begin(),a.end())\r\n#define rasc sort(a.begin(),a.end(),greater<>())\r\n#define mpl map<ll,ll> \r\n#define mpc map<char,ll>\r\nconst ull modulo=1e9+7;\r\n\r\nlong long expo(int base, int exp) {\r\n  base %= modulo;\r\n  int result = 1;\r\n  while (exp > 0) {\r\n    if (exp & 1) result = ((ll)result * base) % modulo;\r\n    base = ((ll)base * base) % modulo;\r\n    exp >>= 1;\r\n  }\r\n  return result;\r\n}\r\nvoid ipg(ll ,ll);\r\nvoid dfs(ll ,ll);\r\n\r\nvll graph[10000];\r\nll visited[10000];\r\n\r\nll node,depth=-1;\r\n\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    srand(chrono::high_resolution_clock::now().time_since_epoch().count());\r\n    cin.tie(NULL);\r\n    int t,k;\r\n    cin>>t;\r\n    for(k=0;k<t;k++)\r\n    {\r\n        ll n,m,i,j,count=0,x,ans=0,c1=0,c2=0,y;\r\n        bool flag=true;\r\n        vll a;\r\n        string s;\r\n        cin>>n;\r\n        for(i=0;i<n;i++)\r\n        {\r\n            cin>>x;\r\n            a.pb(x);\r\n        }\r\n        sasc;\r\n        for(i=n-3;i>=0;i--)\r\n        {\r\n            if(a[n-2]-a[i]>0)\r\n            {\r\n                ans++;\r\n                \r\n            }\r\n        }\r\n        if(ans>=a[n-2])\r\n        {\r\n            ans=a[n-2]-1;\r\n        }\r\n        cout<<ans;\r\n        cout<<endl;\r\n    }\r\n    return 0;\r\n}\r\n\r\nvoid ipg(ll n, ll m){\r\n\tll i, u, v;\r\n\twhile(m--){\r\n\t\tcin>>u>>v;\r\n        u--, v--;\r\n\t\tgraph[u].pb(v);\r\n\t\tgraph[v].pb(u);\r\n\t}\r\n}\r\n\r\nvoid dfs(ll u, ll p){\r\n\tfor(ll v:graph[u]){\r\n\t\tif (v == p) continue;\r\n\t\tdfs(v, u);\r\n\t}\r\n}\r\n"
}