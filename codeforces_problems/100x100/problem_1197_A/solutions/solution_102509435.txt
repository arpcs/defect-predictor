{
    "id": 102509435,
    "contestId": 1197,
    "creationTimeSeconds": 1609125290,
    "relativeTimeSeconds": 1190,
    "problem": {
        "contestId": 1197,
        "index": "A",
        "name": "DIY Wooden Ladder",
        "type": "PROGRAMMING",
        "rating": 900,
        "tags": [
            "greedy",
            "math",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1197,
        "members": [
            {
                "handle": "SmitVavliya"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1609124100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 135,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 15257600,
    "source": "/*                         _\r\n                        _ooOoo_\r\n                       o8888888o\r\n                       88\" . \"88\r\n                       (| -_- |)\r\n                       O\\  =  /O\r\n                    ____/`---'\\____\r\n                  .'  \\\\|     |//  `.\r\n                 /  \\\\|||  :  |||//  \\\r\n                /  _||||| -:- |||||_  \\\r\n                |   | \\\\\\  -  /'| |   |\r\n                | \\_|  `\\`---'//  |_/ |\r\n                \\  .-\\__ `-. -'__/-.  /\r\n              ___`. .'  /--.--\\  `. .'___\r\n           .\"\" '<  `.___\\_<|>_/___.' _> \\\"\".\r\n          | | :  `- \\`. ;`. _/; .'/ /  .' ; |\r\n          \\  \\ `-.   \\_\\_`. _.'_/_/  -' _.' /\r\n===========`-.`___`-.__\\ \\___  /__.-'_.'_.-'================\r\n \r\n                  Please give me AC.\r\n*/\r\n\r\n// @Author : Smit Vavliya\r\n\r\n#include <iostream>\r\n#include <iomanip>\r\n#include <map>\r\n#include <vector>\r\n#include <set>\r\n#include <algorithm>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#include <functional>\r\n#include <climits>\r\n#include <cstring>\r\n#include <bitset>\r\n#include <cmath>\r\n#include <cstdlib>\r\n#include <cstdint>\r\n#include <initializer_list>\r\n#include <string.h>\r\n#include <string>\r\n#include <deque>\r\n#include <queue>\r\n#include <stack>\r\n#include <numeric>\r\n#include <ext/pb_ds/assoc_container.hpp> // Common file\r\n#include <ext/pb_ds/tree_policy.hpp>     // Including tree_order_statistics_node_update\r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\nusing namespace std;\r\n#define int long long int\r\n#define double long double\r\n#define fr(i, s, n) for (int i = s; i <= n; ++i)\r\n#define frr(i, s, n) for (int i = s; i >= n; --i)\r\n#define FAST                          \\\r\n    ios_base::sync_with_stdio(false); \\\r\n    cin.tie(0);                       \\\r\n    cout.tie(0);\r\n#define mod 1000000007\r\n#define M 998244353\r\nconst int inf = (1LL << 60) - 1;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\nstruct pair_hash\r\n{\r\n    template <class T1, class T2>\r\n    std::size_t operator()(const std::pair<T1, T2> &p) const\r\n    {\r\n        auto h1 = std::hash<T1>{}(p.first);\r\n        auto h2 = std::hash<T2>{}(p.second);\r\n\r\n        // Mainly for demonstration purposes, i.e. works but is overly simple\r\n        // In the real world, use sth. like boost.hash_combine\r\n        return h1 ^ h2;\r\n    }\r\n};\r\n\r\nbool f(int x, int y)\r\n{\r\n    return x > y;\r\n}\r\n\r\nbool comp(pair<int, int> a, pair<int, int> b)\r\n{\r\n    if (a.first != b.first)\r\n        return a.first > b.first;\r\n    else\r\n        return a.second > b.second;\r\n}\r\n\r\nbool isPrime(int n)\r\n{\r\n    if (n == 1)\r\n        return false;\r\n\r\n    for (int i = 2; i * i <= n; i++)\r\n    {\r\n        if (n % i == 0)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nint lcm(int a, int b)\r\n{\r\n    return (a * b) / __gcd(a, b);\r\n}\r\n\r\nint gcd(int a, int b)\r\n{\r\n    if (b == 0)\r\n    {\r\n        return a;\r\n    }\r\n    return gcd(b, a % b);\r\n}\r\n\r\nstring Binary(int n)\r\n{\r\n    string s;\r\n    while (n)\r\n    {\r\n        s += to_string(n & 1);\r\n        n = n >> 1;\r\n    }\r\n    return s;\r\n}\r\n\r\nint maxEle(vector<int> a, int n)\r\n{\r\n    int mx = INT_MIN;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        mx = max(mx, a[i]);\r\n    }\r\n\r\n    return mx;\r\n}\r\n\r\nint index(vector<int> a, int n, int ele)\r\n{\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        if (ele == a[i])\r\n            return i;\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\nint countDigit(int n)\r\n{\r\n    int cnt = 0;\r\n    while (n != 0)\r\n    {\r\n        n = n / 10;\r\n        cnt += 1;\r\n    }\r\n\r\n    return cnt;\r\n}\r\n\r\nunsigned int factorial(unsigned int n)\r\n{\r\n    if (n == 0)\r\n        return 1;\r\n    return n * factorial(n - 1);\r\n}\r\n\r\nint fac[1000001];\r\nvoid fact(int p)\r\n{\r\n    fac[0] = 1;\r\n    for (int i = 1; i <= 1000000; i++)\r\n    {\r\n        fac[i] = (fac[i - 1] * i) % p;\r\n    }\r\n}\r\n\r\nint modFact(int n, int p)\r\n{\r\n    if (n >= p)\r\n        return 0;\r\n\r\n    int result = 1;\r\n    for (int i = 1; i <= n; i++)\r\n        result = (result * i) % p;\r\n\r\n    return result;\r\n}\r\n\r\nint power(int x, unsigned int y)\r\n{\r\n    int res = 1;\r\n\r\n    while (y > 0)\r\n    {\r\n        if (y & 1)\r\n            res = res * x;\r\n\r\n        y = y >> 1;\r\n        x = x * x;\r\n    }\r\n    return res;\r\n}\r\n\r\nint powerMod(int x, unsigned int y, int p)\r\n{\r\n    int res = 1;\r\n    x = x;\r\n    if (x == 0)\r\n        return 0;\r\n    while (y > 0)\r\n    {\r\n        if (y & 1)\r\n        {\r\n            res *= x;\r\n            res %= p;\r\n        }\r\n        y = y >> 1;\r\n        x = (x * x);\r\n        x %= p;\r\n        res %= p;\r\n    }\r\n    return res;\r\n}\r\n\r\nint modInverse(int n, int p)\r\n{\r\n    return powerMod(n, p - 2, p);\r\n}\r\n\r\nint ncrModP(int n, int r, int p)\r\n{\r\n    if (r == 0)\r\n    {\r\n        return 1;\r\n    }\r\n    else if (n < r)\r\n    {\r\n        return 0;\r\n    }\r\n    else\r\n    {\r\n        return (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;\r\n    }\r\n}\r\n\r\n// no. of cyclic shift needed = (j - pos[j] + N) % N;\r\n// no. of cyclic shift needed = (final_pos[j] - curr_pos[j] + N) % N;\r\n// a + b = (a ^ b) + 2 * (a & b);\r\n// to fill the matrix cyclically = (i + j) % n;\r\n\r\nconst int N = 2e5 + 5;\r\nvector<int> graph[N];\r\nvector<bool> visited(N);\r\nint a[N], b[N];\r\nint dp[N];\r\nint n, m, k, p, q, x, y, z, d;\r\nstring s, t;\r\n\r\nvoid solve()\r\n{\r\n    cin >> n;\r\n    for (int i = 1; i <= n; i++)\r\n        cin >> a[i];\r\n\r\n    sort(a + 1, a + n + 1);\r\n\r\n    cout << min(n - 2, a[n - 1] - 1) << endl;\r\n}\r\n\r\nsigned main()\r\n{\r\n    FAST int T;\r\n    cin >> T;\r\n\r\n    // freopen(\"input.txt\", \"r\", stdin);\r\n    // freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    while (T--)\r\n    {\r\n        solve();\r\n    }\r\n}"
}