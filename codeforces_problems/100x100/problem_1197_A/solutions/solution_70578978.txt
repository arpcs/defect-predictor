{
    "id": 70578978,
    "contestId": 1197,
    "creationTimeSeconds": 1581179888,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1197,
        "index": "A",
        "name": "DIY Wooden Ladder",
        "type": "PROGRAMMING",
        "rating": 900,
        "tags": [
            "greedy",
            "math",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1197,
        "members": [
            {
                "handle": "B-2019030"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563806100
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner;\n\n public class scratch{\n\npublic static void main(String args[]){\n    Scanner sc = new Scanner(System.in);\n    int test= sc.nextInt();\n    for( int i =0; i< test ; i++) {\n        int no = sc.nextInt();\n        int[] arr = new int[no];\n\n        for ( int j = 0; j < no; j++ ) {\n            arr[j] = sc.nextInt();\n\n        }\n        System.out.println(func(arr));\n    }\n\n}\npublic static int func( int[] arr){\n    driver(arr,0,arr.length-1);\n    //int count =0;\n    if ( arr[0]== arr[arr.length-1]|| arr[0]== arr[arr.length-2]){\n        return 0;\n    }\n\n    int a = arr[ arr.length-1];\n    int b = arr[ arr.length-2];\n\n    if (arr.length-2<=b-1){\n        return arr.length-2;\n    }\n    else{\n        return b-1;\n    }\n\n\n}\n\n\n\n\n\n public static void merge ( int [ ] arr, int start , int end ){\n        int middle= (start + end)/2;\n        int[]left = new int [ middle-start +1];\n        int [] right = new int[end-middle];\n           for ( int i = 0  ; i< middle-start+1; i++) {\n               left [ i]= arr[start+i];\n           }\n           for ( int j = 0 ; j< end-middle; j++){\n               right[ j ]= arr[ middle+1+j];\n           }\n           int i =0;int j=0;int k=start;\n           while ( i< left.length&& j< right.length){\n               if ( left[i]<= right[j]){\n                   arr[k]=left[i];\n                   i++;\n               }\n               else{\n                   arr[k]=right[j];\n               j++;\n               }\n               k++;\n\n           }\n           while ( i< left.length){\n               arr[k]= left[i];\n               k++;\n               i++;\n           }\n           while( j< right.length){\n               arr[k]=right[j];\n               k++;\n               j++;\n           }\n    }\n\n\n\n    public static void  driver ( int[] arr, int start, int end ) {\n\n\n        int middle = (start + end) / 2;\n\n\n        if (start < end) {\n            driver(arr, start, middle);\n            driver(arr, middle + 1, end);\n            merge(arr, start, end);\n\n        }\n    }\n}\n\n\n"
}