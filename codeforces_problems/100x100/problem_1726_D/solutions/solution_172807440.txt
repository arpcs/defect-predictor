{
    "id": 172807440,
    "contestId": 1726,
    "creationTimeSeconds": 1663665532,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "QHJ123456"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 6963200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int N = 200010;\r\nconst int E = N*2;\r\n\r\nint t, n, m;\r\nint tot=0, hd[N], nxt[E], to[E];\r\nint X[N], Y[N]; //\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\r\nbool R[N]; //\u6807\u8bb0\u4e00\u6761\u8fb9\u662f\u5426\u7528\u8fc7\r\nbool vis[N]; //dfs\u6807\u8bb0\u70b9\r\nint ph[N]; //\u5230\u8fbe\u67d0\u70b9\u7684\u8def\u5f84\r\n\r\n\r\n\r\nvoid add(int a, int b){\r\n    nxt[tot] = hd[a];\r\n    hd[a] = tot;\r\n    to[tot] = b;\r\n    tot++;\r\n}\r\n\r\nvoid dfs(int x){\r\n    for (int e=hd[x]; e+1; e=nxt[e]){\r\n        int v = to[e];\r\n        if (vis[v]) continue;\r\n        vis[v] = true;\r\n        ph[v] = e;\r\n        R[e/2] = true;\r\n        dfs(v);\r\n    }\r\n}\r\n\r\nmap<int, int> mp;\r\nbool cycle(vector<int> &B){\r\n    mp.clear();\r\n    for (int a: B){\r\n        if (!mp.count(X[a]) && !mp.count(Y[a])){\r\n            mp[X[a]] = X[a];\r\n            mp[Y[a]] = X[a];\r\n        }else if (mp.count(X[a]) && mp.count(Y[a])){\r\n            return false;\r\n        }else{\r\n            if (mp.count(X[a])) mp[Y[a]] = mp[X[a]];\r\n            else mp[X[a]] = mp[Y[a]];\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nint main(){\r\n    scanf(\"%d\", &t);\r\n    while (t--){\r\n        tot = 0;\r\n        memset(hd, -1, sizeof(hd));\r\n        memset(nxt, 0, sizeof(nxt));\r\n        memset(to, 0, sizeof(to));\r\n        memset(vis, 0, sizeof(vis));\r\n        memset(ph, -1, sizeof(ph));\r\n        memset(R, 0, sizeof(R));\r\n        scanf(\"%d%d\", &n, &m);\r\n        for (int i=0; i<m; i++){\r\n            int a, b;\r\n            scanf(\"%d%d\", &a, &b);\r\n            add(a, b);\r\n            add(b, a);\r\n        }\r\n        vis[1] = true;\r\n        dfs(1);\r\n        vector<int> B; //\u627e\u5230\u9ed1\u8272\u7684\u8fb9\r\n        for (int i=0; i<m; i++){\r\n            if (!R[i]) B.push_back(i);\r\n        }\r\n        if(!B.empty() && cycle(B)){\r\n            R[ph[X[B[0]]]] = false;\r\n            ph[X[B[0]]] = Y[B[0]];\r\n        }\r\n\r\n        for (int i=0; i<m; i++){\r\n            printf(\"%d\", R[i]?1:0);\r\n        }printf(\"\\n\");\r\n\r\n    }\r\n    //while (1){}\r\n\r\n    return 0;\r\n}"
}