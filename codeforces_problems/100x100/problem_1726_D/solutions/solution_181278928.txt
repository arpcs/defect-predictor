{
    "id": 181278928,
    "contestId": 1726,
    "creationTimeSeconds": 1668672155,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Mercuryyy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 654,
    "memoryConsumedBytes": 40960000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n// #define ll long long\r\n#define IOS ios::sync_with_stdio(false); cin.tie(0)\r\n#define pii pair<int, long long>\r\n#define VI vector<int>\r\n#define VL vector<long long>\r\n#define All(x) (x).begin(), (x).end()\r\n#define sz(X) ((int)(X).size())\r\n#define pb emplace_back \r\n#define fi first\r\n#define se second\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    VI f(n + 1);\r\n    iota(All(f), 0);\r\n    \r\n    function<int(int)> find = [&] (int x){\r\n        return f[x] == x ? x : f[x] = find(f[x]);    \r\n    };\r\n\r\n    string s(m, '0');\r\n    vector<vector<array<int, 2> > > ve(n + 1);\r\n    vector<array<int, 3>> las;\r\n    for (int i = 0; i < m; ++i) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        if (find(u) != find(v)) {\r\n            f[find(u)] = find(v);\r\n            s[i] = '1';\r\n            ve[u].push_back({v, i});\r\n            ve[v].push_back({u, i});\r\n        } else {\r\n            las.push_back({u, v, i});\r\n        }\r\n    }\r\n    if (m < n + 2) {\r\n        cout << s << '\\n'; return;\r\n    }\r\n\r\n    set<int> se;\r\n    for (auto [u, v, id] : las) se.insert(u), se.insert(v);\r\n\r\n    if (se.size() == 4) {\r\n        cout << s << '\\n'; return;\r\n    }\r\n    auto [u, v, id] = las[0];\r\n    \r\n    function<bool(int, int, int)> dfs = [&] (int u, int tar, int fa) {\r\n        if (u == tar) return true;\r\n        bool ok = false;\r\n        for (auto [v, i] : ve[u]) {\r\n            if (v != fa) ok |= dfs(v, tar, u);\r\n        }\r\n        return ok;\r\n    };\r\n\r\n    for (auto [y, i] : ve[u]) {\r\n        if (dfs(y, v, u)) {\r\n            s[i] = '0';\r\n            s[id] = '1';\r\n            break;\r\n        }\r\n    }\r\n    cout << s << '\\n';\r\n}\r\n\r\nint main() {\r\n    IOS;\r\n    int _t;\r\n   for (cin >> _t; _t--; )\r\n    solve();\r\n    return 0;\r\n}\r\n\r\n/*\r\n1\r\n0111\r\n3 3\r\n1 3 3\r\n1 2 0\r\n4 4 6\r\n*/"
}