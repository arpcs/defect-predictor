{
    "id": 180460996,
    "contestId": 1726,
    "creationTimeSeconds": 1668168791,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "bkifhr9"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1044,
    "memoryConsumedBytes": 11878400,
    "source": "import java.io.*;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.StringTokenizer;\n\npublic class Main{\n\n    public static void main(String[] args){\n        InputReader entrada = new InputReader(System.in);\n        PrintWriter salida = new PrintWriter(System.out);\n        Tarea resolver = new Tarea();\n        resolver.solve(entrada.nextInt(), entrada, salida);\n        salida.close();\n    }\n\n    static class Tarea{\n        public void solve(int testNum, InputReader in, PrintWriter out) {\n            for (int t = 0; t < testNum; t++) {\n                int n = in.nextInt();\n                int m = in.nextInt();\n                int[][] aristas = new int[m][2];\n                for (int i = 0; i < aristas.length; i++) {\n                    aristas[i] = new int[]{in.nextInt() - 1, in.nextInt() - 1};\n                }\n                int[] ans = new Solucion().solve(n, aristas);\n                for (int an : ans) {\n                    out.print(an);\n                }\n                out.println();\n            }\n        }\n    }\n\n    static class InputReader {\n        public BufferedReader reader;\n        public StringTokenizer tokenizer;\n\n        public InputReader(InputStream stream) {\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\n            tokenizer = null;\n        }\n\n        public String next() {\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\n                try {\n                    tokenizer = new StringTokenizer(reader.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return tokenizer.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n    }\n}\n\nclass Solucion {\n\n    public int[] solve(int n, int[][] aristas) {\n        int m = aristas.length;\n        int[] ans = new int[m];\n        Set<Integer> set = new HashSet<>();\n        cc:\n        for (int i = 0; i < m + 1 - n; i++) {\n            EncontrarUnion unionFind = new EncontrarUnion(n);\n            for (int j = 0; j < aristas.length; j++) {\n                if (set.contains(j)) {\n                    continue;\n                }\n                int[] arista = aristas[j];\n                if (!unionFind.esUnion(arista[0], arista[1])) {\n                    unionFind.union(arista[0], arista[1]);\n                    continue;\n                }\n                EncontrarUnion unionFind1 = new EncontrarUnion(n);\n                for (Integer v : set) {\n                    unionFind1.union(aristas[v][0], aristas[v][1]);\n                }\n                if (!unionFind1.esUnion(arista[0], arista[1])) {\n                    set.add(j);\n                    break;\n                }\n                EncontrarUnion unionFind2 = new EncontrarUnion(n);\n                unionFind2.union(arista[0], arista[1]);\n                for (int k = 0; k < aristas.length; k++) {\n                    if (set.contains(j) || k == j) {\n                        continue;\n                    }\n                    if (unionFind2.esUnion(aristas[k][0], aristas[k][1]) && !unionFind1.esUnion(aristas[k][0], aristas[k][1])) {\n                        set.add(k);\n                        continue cc;\n                    }\n                    unionFind2.union(aristas[k][0], aristas[k][1]);\n                }\n            }\n        }\n        for (Integer v : set) {\n            ans[v] = 1;\n        }\n        return ans;\n    }\n}\n\nclass EncontrarUnion {\n    int[] roots;\n    int size;\n\n    public EncontrarUnion(int n) {\n        roots = new int[n];\n        for (int i = 0; i < n; i++) {\n            roots[i] = i;\n        }\n        size = n;\n    }\n\n    public int encontrar(int i) {\n        if (i == roots[i]) {\n            return i;\n        }\n        return roots[i] = encontrar(roots[i]);\n    }\n\n    public void union(int p, int q) {\n        int pRoot = encontrar(p);\n        int qRoot = encontrar(q);\n        if (pRoot != qRoot) {\n            roots[pRoot] = qRoot;\n            size--;\n        }\n    }\n\n    public boolean esUnion(int p, int q) {\n        return encontrar(p) == encontrar(q);\n    }\n}\n\t \t\t\t   \t \t\t\t\t  \t \t\t\t\t     \t\t\t\t"
}