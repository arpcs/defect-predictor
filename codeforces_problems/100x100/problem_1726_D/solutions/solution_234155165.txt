{
    "id": 234155165,
    "contestId": 1726,
    "creationTimeSeconds": 1700864106,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "IS_Rushdi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1684,
    "memoryConsumedBytes": 7270400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nstruct item{\r\n  int first,second,third;\r\n};\r\nstruct DSU{\r\n  vector<int>p;\r\n  int cnt;\r\n  DSU(int n){\r\n    cnt = n;\r\n    p.assign(n,0);\r\n    for(int i = 1; i < n; i++) p[i] = i;\r\n  }\r\n  int get(int a){\r\n    return p[a] = (p[a] == a?a : get(p[a]));\r\n  }\r\n  void Union(int a,int b){\r\n    a = get(a);\r\n    b = get(b);\r\n    if(a == b) return;\r\n    p[a] = b;\r\n    cnt--;\r\n  }\r\n  bool is_connect(int a,int b){\r\n    a = get(a);\r\n    b = get(b);\r\n    return (a == b);\r\n  }\r\n};\r\n\r\nbool pro(item &a,item &b){\r\n  return a.first < b.first;\r\n}\r\nvoid solve(){ \r\n  int n,m; cin >> n >> m;\r\n  vector<item>c(m);\r\n  for(int i = 0; i < m; i++){\r\n    cin >> c[i].first >> c[i].second;\r\n    c[i].first--,c[i].second--;\r\n    if(c[i].first > c[i].second) swap(c[i].first,c[i].second);\r\n    c[i].third = i;\r\n    \r\n  }\r\n  \r\n\r\n  vector<bool>ans(m);\r\n  int curr = 1e9;\r\n  int idx = 0;\r\n  int q = 15;\r\n  while(q--){\r\n    DSU a(n);\r\n    DSU b(n);\r\n    vector<bool>arr(m);\r\n    for(int i = 0; i < m; i++){\r\n      if(a.is_connect(c[i].first,c[i].second)){\r\n        b.Union(c[i].first,c[i].second);\r\n      }else{\r\n        a.Union(c[i].first,c[i].second);\r\n        arr[c[i].third]=1;\r\n      }\r\n    }\r\n    if(a.cnt+b.cnt < curr){\r\n      curr = a.cnt+b.cnt;\r\n      ans = arr;\r\n    }\r\n    random_shuffle(c.begin(), c.end());\r\n  }\r\n  \r\n  for(int i = 0; i < m; i++) cout << ans[i];\r\n  cout << '\\n';\r\n}\r\nint32_t main(){\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0);\r\n  int t = 1; cin >> t;\r\n  while (t--) solve();\r\n}"
}