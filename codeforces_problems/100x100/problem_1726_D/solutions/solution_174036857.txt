{
    "id": 174036857,
    "contestId": 1726,
    "creationTimeSeconds": 1664507572,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "yaozhuojiang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 920,
    "memoryConsumedBytes": 13414400,
    "source": "// #include<iostream>\n// #include<cstring>\n// #include<vector>\n// #include<numeric>\n// #include<set>\n// #include<cassert>\n// using namespace std;\n// using LL = long long;\n\n// struct DSU{\n//     vector<int> p;\n//     DSU(int n) : p(n + 1){\n//         iota(p.begin(), p.end(), 0);\n//     }\n\n//     int find(int x){\n//         return p[x] == x ? x : p[x] = find(p[x]);\n//     }\n\n//     bool same(int x, int y) { \n//         return find(x) == find(y); \n//     }\n\n//     bool merge(int x, int y){\n//         x = find(x), y = find(y);\n//         if (x == y) return false;\n//         p[y] = x;\n//         return true;\n//     }\n// };\n\n// int main(){\n    \n//     cin.tie(0);\n//     cout.tie(0);\n//     ios::sync_with_stdio(0);\n\n//     int T;\n//     cin >> T;\n//     while(T--){\n//         int n, m;\n//         cin >> n >> m;\n//         vector<pair<int, int> > edge(m);\n//         vector<int> remain;\n//         string ans(m, '0');\n//         vector<vector<pair<int, int> > > g(n + 1);\n//         for(int i = 0; i < m; i++)\n//             cin >> edge[i].first >> edge[i].second;\n//         DSU dsu(n);\n//         for(int i = 0; i < m; i++){\n//             auto [a, b] = edge[i];\n//             if (dsu.merge(a, b)){\n//                 g[a].push_back({b, i});\n//                 g[b].push_back({a, i});\n//                 ans[i] = '1';\n// \t\t\t\tcout << i << \" \";\n//             }\n//             else remain.push_back(i);\n//         }\n// \t\tcout << endl;\n//         if (m == n + 2){\n//             set<int> s;\n//             for(auto x : remain)\n//                 s.insert(edge[x].first), s.insert(edge[x].second);\n//             if (s.size() == 3){\n//                 ans[remain[0]] = '1';\n// \t\t\t\tcout << remain[0] << endl;\n//                 int p = edge[remain[0]].first;\n// \t\t\t\tcout << \"p \" << p << endl;\n//                 for(auto [to, id] : g[p]) {\n// \t\t\t\t\tcout << id << endl;\n// \t\t\t\t\tans[id] = '0';\n// \t\t\t\t}\n//             }\n//         }\n//         cout << ans << '\\n';\n//     }\n\n// }\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define fi first\n#define se second\n#define db double\n#define ll long long\n#define pb push_back\n#define lchild (k<<1)\n#define rchild (k<<1|1)\n#define pii pair<int,int>\n#define mm(a,b) memset(a,b,sizeof(a))\n#define rush() int T; cin >> T; while (T--)\n#define rep(i,a,b) for(int i=(a);i<=(b);i++)\n#define per(i,a,b) for(int i=(a);i>=(b);i--)\n#define ACCELERATE (ios::sync_with_stdio(false),cin.tie(0))\nconst int N = 2e5 + 5;\nconst int M = (N << 2);\nconst int P = 1e9 + 7;\nconst int inf = 0x3f3f3f3f;\nconst ll INF = 0x3f3f3f3f3f3f3f3f;\nint n, m, f[N], re[N], ans[N];\nint find(int x) { return x == f[x] ? x : f[x] = find(f[x]); }\nvoid merge(int a, int b)\n{\n    int x = find(a), y = find(b);\n    if (x != y) f[y] = x;\n}\nint main()\n{\n    ACCELERATE;\n    rush() {\n        cin >> n >> m;\n        vector<pii> e;\n        rep(i, 1, n) f[i] = i;\n        rep(i, 1, m) {\n            int u, v;\n            cin >> u >> v;\n            e.push_back({u, v});\n        }\n        rep(i, 0, m - 1) ans[i] = 0;\n        vector<int> re;\n        vector<vector<pii> > g(n + 1);\n        rep(i, 0, m - 1) {\n            int l = find(e[i].first), r = find(e[i].second);\n            if (l != r) {\n                ans[i] = 1;\n                merge(l, r);\n                int u = e[i].first, v = e[i].second;\n                g[u].push_back({v, i});\n                g[v].push_back({u, i});\n            } else re.push_back(i);\n        }\n        if (m == n + 2) {\n            set<int> s;\n            for (auto &x : re) s.insert(e[x].first), s.insert(e[x].second);\n            if (s.size() == 3) {\n                ans[re[0]] = 1;\n                for (auto &x : g[e[re[0]].first]) ans[x.second] = 0;\n            }\n        }\n        rep(i, 0, m - 1) cout << ans[i];\n        cout << endl;\n    }\n    return 0;\n}"
}