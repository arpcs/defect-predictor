{
    "id": 172476544,
    "contestId": 1726,
    "creationTimeSeconds": 1663430847,
    "relativeTimeSeconds": 5367,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Au_Miner_yyds"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1663425480
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1123,
    "memoryConsumedBytes": 12390400,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <set>\r\n#include <vector>\r\n#include <map>\r\n#include <queue>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef pair<int, int> PII;\r\n\r\nconst int N = 200005;\r\n\r\nstruct edge\r\n{\r\n    int u, v;\r\n}e[N];\r\nint fa[N];\r\nint ans[N];\r\nint getf(int x)\r\n{\r\n    return x == fa[x] ? x : fa[x] = getf(fa[x]);\r\n}\r\n\r\nint main()\r\n{\r\n    int _; scanf(\"%d\", &_);\r\n    while (_ --)\r\n    {\r\n        int n, m;\r\n        scanf(\"%d%d\", &n, &m);\r\n        for (int i = 1; i <= m; i ++ )\r\n            ans[i] = 0, scanf(\"%d%d\", &e[i].u, &e[i].v);\r\n        vector<int> E;\r\n        for (int i = 1; i <= n; i ++ )\r\n            fa[i] = i;\r\n        \r\n        for (int i = 1; i <= m; i ++ )\r\n        {\r\n            int u = getf(e[i].u), v = getf(e[i].v);\r\n            if (u != v)\r\n            {\r\n                fa[u] = v;\r\n                ans[i] = 1;\r\n            }\r\n            else E.push_back(i);\r\n        }\r\n\r\n        if (E.size() == 3)\r\n        {\r\n            set<int> v;\r\n            for (int i = 0; i < E.size(); i ++ )\r\n                v.insert(e[E[i]].u), v.insert(e[E[i]].v);\r\n            if (v.size() == 3)\r\n            {\r\n                ans[E[0]] = 1;\r\n                int vertex = e[E[0]].u;\r\n                for (int i = 1; i <= m; i ++ )\r\n                {\r\n                    if (i == E[0]) continue;\r\n                    if (e[i].u == vertex || e[i].v == vertex)\r\n                        ans[i] = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 1; i <= m; i ++ )\r\n            printf(\"%d\", ans[i]);\r\n        puts(\"\");\r\n\r\n    }\r\n    return 0;\r\n}\r\n\r\n"
}