{
    "id": 175288421,
    "contestId": 1726,
    "creationTimeSeconds": 1665351177,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "smoke_bellew"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 873,
    "memoryConsumedBytes": 35123200,
    "source": "#include <bits/stdc++.h>\r\n\r\n// freopen(\"input.txt\",\"r\",stdin);\r\n// freopen(\"output.txt\",\"w\",stdout);\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\n\r\nvoid dfs(vector<vector<ll>> &g,\r\n         vector<pair<ll, ll>> &edges,\r\n         vector<ll> &dep,\r\n         vector<ll> &par,\r\n         vector<ll> &ans,\r\n         vector<bool> &vis, ll u) {\r\n\r\n    vis[u] = true;\r\n    for (auto ei: g[u]) {\r\n        ll v = edges[ei].first + edges[ei].second - u;\r\n\r\n        if (!vis[v]) {\r\n            ans[ei] = 1;\r\n            dep[v] = dep[u] + 1;\r\n            par[v] = u;\r\n            dfs(g, edges, dep, par, ans, vis, v);\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    ll n, l, m, r, tt;\r\n\r\n\r\n    cin >> tt;\r\n\r\n    while (tt--) {\r\n        cin >> n >> m;\r\n        vector<vector<ll>> g(n);\r\n        vector<pair<ll, ll>> edges(m);\r\n        for (int i = 0; i < m; ++i) {\r\n            ll u, v;\r\n            cin >> u >> v;\r\n            --u, --v;\r\n            edges[i] = {u, v};\r\n            g[u].push_back(i);\r\n            g[v].push_back(i);\r\n        }\r\n\r\n        vector<ll> ans(m, 0);\r\n        vector<bool> vis(n, false);\r\n        vector<ll> dep(n);\r\n        vector<ll> par(n);\r\n        dfs(g, edges, dep, par, ans, vis, 0);\r\n\r\n        vector<ll> left;\r\n\r\n        for (ll i = 0; i < m; ++i) {\r\n            if (ans[i] == 0) {\r\n                left.push_back(i);\r\n            }\r\n        }\r\n\r\n        set<ll> s;\r\n\r\n        for (auto ei: left) {\r\n            s.insert(edges[ei].first);\r\n            s.insert(edges[ei].second);\r\n        }\r\n\r\n        if (left.size() == 3 && s.size() == 3) {\r\n            ll mx = -1, u;\r\n            for(auto v: s) {\r\n                if (mx < dep[v]) {\r\n                    u = v;\r\n                    mx = dep[v];\r\n                }\r\n            }\r\n\r\n            ll i, j;\r\n            for (auto ei: g[u]) {\r\n                ll v = edges[ei].first + edges[ei].second - u;\r\n                if (ans[ei] == 1 && par[u] == v) {\r\n                    i = ei;\r\n                } else if (ans[ei] == 0) {\r\n                    j = ei;\r\n                }\r\n            }\r\n            ans[i] = 0;\r\n            ans[j] = 1;\r\n\r\n        }\r\n\r\n\r\n        for(auto x: ans) {\r\n            cout << x;\r\n        }\r\n        cout << \"\\n\";\r\n    }\r\n\r\n    return 0;\r\n}"
}