{
    "id": 211692833,
    "contestId": 1726,
    "creationTimeSeconds": 1688199097,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Sreedhar3210"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 561,
    "memoryConsumedBytes": 14540800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\nvoid run_case(){\r\n    int i,n,m,x,y,z,cnt=0;\r\n    cin>>n>>m;\r\n    vector<bool>vis(n+1,false);\r\n    vector<vector<pair<int,int>>>adj(n+1);\r\n    vector<pair<int,int>>edges(m+1);\r\n    deque<int>bfs;\r\n    set<int>dist;\r\n    string ans(m,'0');\r\n    for(i=0;i<m;i++){\r\n        cin>>x>>y;\r\n        adj[x].push_back({y,i});\r\n        adj[y].push_back({x,i});\r\n        edges[i]={x,y};\r\n    }\r\n    vis[1]=true;\r\n    bfs.push_back(1);\r\n    while(bfs.size()>0){\r\n        x=bfs.front();\r\n        for(auto it : adj[x]){\r\n            if(!vis[it.first]){\r\n                vis[it.first]=true;\r\n                ans[it.second]++;\r\n                bfs.push_back(it.first);\r\n            }\r\n        }\r\n        bfs.pop_front();\r\n    }\r\n    for(i=0;i<m;i++){\r\n        if(ans[i]=='0'){\r\n            dist.insert(edges[i].first);\r\n            dist.insert(edges[i].second);\r\n            cnt++;\r\n        }\r\n    }\r\n    if(cnt==3 && dist.size()==3){\r\n        x=*dist.begin();dist.erase(x);\r\n        y=*dist.begin();dist.erase(y);\r\n        z=*dist.begin();\r\n        ans=string(m,'0');\r\n        for(auto it : adj[x]){\r\n            if(it.first==y){\r\n                i=it.second;break;\r\n            }\r\n        }\r\n        ans[i]++;     \r\n        vis=vector<bool>(n+1,false);\r\n        vis[x]=true;vis[y]=true;\r\n        for(auto it : adj[x]){\r\n            if(!vis[it.first] && it.first!=z){\r\n                vis[it.first]=true;\r\n                ans[it.second]++;\r\n                bfs.push_back(it.first);\r\n            }\r\n        }\r\n        for(auto it : adj[y]){\r\n            if(!vis[it.first] && it.first!=z){\r\n                vis[it.first]=true;\r\n                ans[it.second]++;\r\n                bfs.push_back(it.first);\r\n            }\r\n        }\r\n        while(bfs.size()>0){\r\n            x=bfs.front();\r\n            for(auto it : adj[x]){\r\n                if(!vis[it.first]){\r\n                    vis[it.first]=true;\r\n                    ans[it.second]++;\r\n                    bfs.push_back(it.first);\r\n                }\r\n            }\r\n            bfs.pop_front();\r\n        }\r\n    }\r\n    cout<<ans;\r\n    cout<<\"\\n\";\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int t=1;\r\n    cin>>t;\r\n    while(t--)      run_case();\r\n    return 0;\r\n}"
}