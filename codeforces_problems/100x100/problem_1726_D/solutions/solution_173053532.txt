{
    "id": 173053532,
    "contestId": 1726,
    "creationTimeSeconds": 1663847028,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "opPO"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1450,
    "memoryConsumedBytes": 7270400,
    "source": "#pragma GCC optimize(\"O3,unroll-loops\")\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define f first\r\n#define s second\r\n#define pb push_back\r\n#define ll long long\r\n//#define int long long\r\n#define ld long double\r\n#define sz(x) (int)x.size()\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define vec vector\r\n\r\nusing pii = pair<int, int>;\r\nusing oset = tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\nmt19937 gen(chrono::steady_clock::now().time_since_epoch().count());\r\nconst int mod = 1e9 + 7;\r\nconst ll inf = 1e18;\r\nconst int N = 2e5 + 10;\r\nconst ld eps = 1e-6;\r\nint n, m;\r\n\r\nstruct DSU\r\n{\r\n    int n;\r\n    vec<int> p;\r\n    vec<int> siz;\r\n\r\n    void clr()\r\n    {\r\n        for (int i = 1; i <= n; i++)\r\n        {\r\n            p[i] = i;\r\n            siz[i] = 1;\r\n        }\r\n    }\r\n\r\n    void init_dsu(int nn)\r\n    {\r\n        n = nn;\r\n        p.resize(n + 1);\r\n        siz.resize(n + 1);\r\n        clr();\r\n    }\r\n\r\n    int get(int v)\r\n    {\r\n        if (v == p[v]) return v;\r\n        return p[v] = get(p[v]);\r\n    }\r\n\r\n    bool merge(int u, int v)\r\n    {\r\n        int x = get(u), y = get(v);\r\n        if (x == y) return false;\r\n        if (siz[x] > siz[y]) swap(x, y);\r\n        p[x] = y;\r\n        siz[y] += siz[x];\r\n        siz[x] = 0;\r\n        return true;\r\n    }\r\n};\r\n\r\nvoid solve()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vec<int> ans(m);\r\n    vec<pii> edges(m);\r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        edges[i] = {u, v};\r\n    }\r\n    vec<int> order(m);\r\n    for (int i = 0; i < m; i++) order[i] = i;\r\n    int answer = 1e9;\r\n    vec<int> cur(m);\r\n    DSU d1, d2;\r\n    d1.init_dsu(n);\r\n    d2.init_dsu(n);\r\n    for (int it = 0; it < 20; it++)\r\n    {\r\n        shuffle(all(order), gen);\r\n        int res = 2 * n;\r\n        fill(all(cur), 0);\r\n        for (int o = 0; o < m; o++)\r\n        {\r\n            int i = order[o];\r\n            if (d1.merge(edges[i].f, edges[i].s))\r\n            {\r\n                res--;\r\n                cur[i] = 1;\r\n            }\r\n            else if (d2.merge(edges[i].f, edges[i].s))\r\n                res--;\r\n        }\r\n        if (res < answer)\r\n        {\r\n            answer = res;\r\n            ans = cur;\r\n        }\r\n        d1.clr();\r\n        d2.clr();\r\n    }\r\n    for (int i = 0; i < m; i++) cout << ans[i];\r\n    cout << \"\\n\";\r\n}\r\n\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n    return 0;\r\n}\r\n"
}