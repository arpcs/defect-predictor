{
    "id": 173659757,
    "contestId": 1726,
    "creationTimeSeconds": 1664257697,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "WangZhizhi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 1606,
    "memoryConsumedBytes": 17715200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define yield(info) { printf(info \"\\n\"); return; }\r\n#define PLEASE return\r\n#define AC 0\r\n#define PROBLEM_TYPE 0\r\n\r\nstruct UnionFind {\r\nprivate:\r\n    vector<int> set;\r\n    vector<int> rank;\r\n    int size;\r\npublic:\r\n    int unionCount;\r\n\r\n    explicit UnionFind(int n) : set(n), rank(n, 1), size(n), unionCount(n) {\r\n        for (int i = 0; i < n; i++)\r\n            set[i] = i;\r\n    }\r\n\r\n    int find(int x) {\r\n        return x == set[x] ? x : (set[x] = find(set[x]));\r\n    }\r\n\r\n    bool isConnected(int x, int y) {\r\n        return find(x) == find(y);\r\n    }\r\n\r\n    bool unite(int x, int y) {\r\n        int u = find(x);\r\n        int v = find(y);\r\n        if (u == v)\r\n            return false;\r\n        if (rank[u] < rank[v])\r\n            swap(u, v);\r\n        rank[u] += rank[v];\r\n        set[v] = u;\r\n        unionCount--;\r\n        return true;\r\n    }\r\n\r\n    void reset() {\r\n        for (int i = 0; i < size; i++) {\r\n            set[i] = i;\r\n            rank[i] = 1;\r\n        }\r\n    }\r\n};\r\n\r\nvoid solution() {\r\n    int n, m, u, v;\r\n    scanf(\"%d %d\", &n, &m);\r\n    vector<int8_t> res(m);\r\n    vector<tuple<int, int, int>> edges;\r\n    vector<tuple<int, int, int>> rear;\r\n    vector<vector<pair<int, int>>> graph(n);\r\n    for (int i = 0; i < m; i++) {\r\n        scanf(\"%d %d\", &u, &v);\r\n        edges.emplace_back(make_tuple(u - 1, v - 1, i));\r\n        graph[u - 1].emplace_back(v - 1, i);\r\n        graph[v - 1].emplace_back(u - 1, i);\r\n    }\r\n    UnionFind unionFind(n);\r\n    for (auto& [u, v, i] : edges) {\r\n        if (unionFind.unite(u, v))\r\n            res[i] = 1;\r\n        else\r\n            rear.emplace_back(make_tuple(u, v, i));\r\n    }\r\n    if (m < n + 2);\r\n    else {\r\n        unordered_set<int> rec;\r\n        for (auto& [u, v, i] : rear) {\r\n            rec.insert(u);\r\n            rec.insert(v);\r\n        }\r\n        if (rec.size() == 3) {\r\n            u = get<0>(rear[0]);\r\n            v = get<1>(rear[0]);\r\n            int i = get<2>(rear[0]);\r\n            res[i] = 1;\r\n            for (auto& [x, j] : graph[u])\r\n                if (x != v)\r\n                    res[j] = 0;\r\n        }\r\n    }\r\n    for (int i : res)\r\n        printf(\"%d\", i);\r\n    yield()\r\n}\r\n\r\nint main(void) {\r\n#if PROBLEM_TYPE == 0\r\n    int n;\r\n    scanf(\"%d\\n\", &n);\r\n    for (int i = 0; i < n; i++)\r\n        solution();\r\n#else\r\n    solution();\r\n#endif\r\n    PLEASE AC;\r\n}"
}