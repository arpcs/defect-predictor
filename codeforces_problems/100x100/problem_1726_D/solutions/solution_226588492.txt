{
    "id": 226588492,
    "contestId": 1726,
    "creationTimeSeconds": 1696423744,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "NeverCompromise"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 37171200,
    "source": "//Never compromise. Not even in the face of Armageddon.\r\n\r\n#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\n//pragmas\r\n#pragma GCC optimize(\"03\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n//#pragma GCC optimization(\"01, 02, 03, 0fast, unroll-loops\")              //Retard mode\r\n//#pragma GCC optimize(\"Ofast,unroll-loops,omit-frame-pointer,inline\")     //Optimization flags\r\n//#pragma GCC option(\"arch=native,tune=native,no-zero-upper\")              //Enable AVX\r\n\r\n//types\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define ll long long\r\n#define TYPE long long\r\n#define ppair pair<TYPE, TYPE>\r\n#define vecvec(a, i, j, x) vector<vector<TYPE>> a (i, vector<TYPE> (j, x))\r\n#define vecvecvec(a, i, j, k, x) vector<vector<vector<TYPE>>> a (i + 1, vector<vector<TYPE>>(j + 1, vector<TYPE>(k + 1, x)))\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n//random stuff\r\n#define all(a) a.begin(),a.end()\r\n#define endl \"\\n\"\r\n#define pb push_back\r\n#define mp make_pair\r\n#define sz(x) (long long int)x.size()\r\n#define F first\r\n#define S second\r\n#define sp \" \" \r\nconst ll inf = 0x3f3f3f3f, INF = 1e18;\r\nconst int MOD = 1e9 + 7;\r\nconst ll BIG_MOD = 489133282872437279; //use to decrease hash collision probability\r\n\r\ntypedef tree<long long int, null_type, less<long long int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;             //for multiset, use less_equal and erase x in multiset a -> a.erase(a.find_by_order(a.order_of_key(x)))\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\n#define safe_map unordered_map<long long, int, custom_hash>\r\n#define hashmap gp_hash_table<int, int, custom_hash>\r\n\r\n\r\n//debug\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(long double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\n\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) {cerr << \"[\" << #x << \"] = [\"; _print(x);}\r\n#define reach cerr<<\"reached\"<<endl\r\n#else\r\n#define debug(x...)\r\n#define reach \r\n#endif\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------*/\r\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nbool revsort(ll a, ll b) {return a > b;}\r\nvoid swap(int &x, int &y) {int temp = x; x = y; y = temp;}\r\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (ll i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (ll j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m = MOD) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m = MOD) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m = MOD) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m = MOD) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\nvoid precision(int a) {cout << setprecision(a) << fixed;}\r\nll ceil_div(ll x, ll y){return (x + y - 1) / y;}\r\nunsigned long long power(unsigned long long x,ll y, ll p){unsigned long long res = 1;x = x % p; while (y > 0){if (y & 1)res = (res * x) % p;y = y >> 1;x = (x * x) % p;}return res;}\r\nunsigned long long modInverse(unsigned long long n,int p){return power(n, p - 2, p);}\r\nll nCr(ll n,ll r, ll p){if (n < r)return 0;if (r == 0)return 1;unsigned long long fac[n + 1];fac[0] = 1;for (int i = 1; i <= n; i++)fac[i] = (fac[i - 1] * i) % p;return (fac[n] * modInverse(fac[r], p) % p* modInverse(fac[n - r], p) % p)% p;}\r\nll accumulate(const vector<long long int> &nums){ll sum = 0; for(auto x : nums) sum += x; return sum;}\r\nll tmax(ll a, ll b, ll c = 0, ll d = -INF, ll e = -INF, ll f = -INF){return max(a, max(b, max(c, max(d, max(e, f)))));}\r\nint log2_floor(unsigned long long i) {return i ? __builtin_clzll(1) - __builtin_clzll(i) : -1;}\r\nstring bin(ll n){return bitset<32>(n).to_string();}\r\n/*--------------------------------------------------------------------------------------------------------------------------*/\r\n\r\n//#define int int64_t\r\n\r\nconst int MAXN = 2e5+5;\r\n\r\n\r\n\r\n\r\n//code starts\r\nint32_t main()\r\n{\r\n    fastio();\r\n    int tt;\r\n    cin >> tt;\r\n    while(tt--)\r\n    {\r\n        int n, m;\r\n        cin >> n >> m;\r\n\r\n        vector<pair<int, int>> adj[n + 1];\r\n        for(int i = 1, u, v; i <= m; i ++)  cin >> u >> v, adj[u].pb(mp(v, i)), adj[v].pb(mp(u, i));\r\n\r\n        string s(m, '0');\r\n\r\n        for(int i = 1; i <= m - (n - 1); i ++)\r\n        {\r\n            int del = -1;\r\n\r\n            int a, b, other;\r\n\r\n            vector<bool> vis(n + 1, false);\r\n\r\n            function<void(int, int, int)> dfs = [&](int u, int p, int last)\r\n            {\r\n                vis[u] = true;\r\n                for(auto v : adj[u])    if(v.first != p and del == -1 and s[v.second- 1] == '0')\r\n                {  \r\n                    if(vis[v.first])\r\n                    {\r\n                        del = v.second;\r\n                        a = u, b = v.first;\r\n                        other = last;\r\n                        return;\r\n                    }\r\n\r\n                    dfs(v.first, u, v.second);\r\n                }\r\n            };\r\n            dfs(1, 0, 0);\r\n\r\n            if(i == 3)\r\n            {\r\n                bool found = 0;\r\n                function<void(int, int)> go = [&](int u, int p)\r\n                {\r\n                    if(u == b)\r\n                    {\r\n                        found = 1;\r\n                        return;\r\n                    }\r\n\r\n                    for(auto v : adj[u])\r\n                        if(v.first != p and s[v.second - 1] == '1' and !found)\r\n                            go(v.first, u);\r\n                };\r\n                go(a, 0);\r\n\r\n                if(found)   del = other;\r\n            }\r\n\r\n            s[del - 1] = '1';\r\n        }\r\n\r\n        cout << s << endl;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// There is an idea of a Patrick Bateman. Some kind of abstraction.\r\n// But there is no real me. Only an entity. Something illusory. \r\n// And though I can hide my cold gaze, and you can shake my hand and\r\n// feel flesh gripping yours, and maybe you can even sense our lifestyles\r\n// are probably comparable, I simply am not there."
}