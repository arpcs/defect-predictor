{
    "id": 174272957,
    "contestId": 1726,
    "creationTimeSeconds": 1664640668,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "liuxiangbin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 32665600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint n;\r\nstruct dsu{\r\n    vector<int>fa;\r\n    dsu(){\r\n        fa.resize(n+1);\r\n        for(int i=1;i<=n;i++){\r\n            fa[i]=i;\r\n        }\r\n    }\r\n    int find(int x){\r\n        return x==fa[x]?x:fa[x]=find(fa[x]);\r\n    }\r\n    bool merge(int u,int v){\r\n        int p=find(u),q=find(v);\r\n        if(p==q) return false;\r\n        fa[p]=q;\r\n        return true;\r\n    }\r\n};\r\nint deep[200010];\r\nvector<pair<int,int> >v[200010];\r\nvoid init(int x,int f){\r\n    for(auto i:v[x]){\r\n        if(i.first==f) continue;\r\n        deep[i.first]=deep[x]+1;\r\n        init(i.first,x);\r\n    }\r\n}\r\nstring ans;\r\nint point;\r\nvoid dfs(int x,int f){\r\n    for(auto i:v[x]){\r\n        if(i.first==f) continue;\r\n        if(i.first!=point) ans[i.second-1]='1';\r\n        else ans[i.second-1]='0';\r\n        dfs(i.first,x);\r\n    }\r\n}\r\nvoid solve(){\r\n    int m;cin>>n>>m;\r\n    ans.resize(m);\r\n    dsu a;\r\n    point=-1;\r\n    vector<pair<pair<int,int>,int> >e;\r\n    for(int i=1;i<=n;i++){\r\n        v[i].clear();\r\n    }\r\n    for(int i=1;i<=m;i++){\r\n        int x,y;cin>>x>>y;\r\n        if(!a.merge(x,y)){\r\n            e.emplace_back(make_pair(x,y),i);\r\n        }\r\n        else{\r\n            v[x].emplace_back(y,i);\r\n            v[y].emplace_back(x,i);\r\n        }\r\n    }\r\n    if(e.empty()){\r\n        ans=string(m,'1');\r\n        cout<<ans<<\"\\n\";\r\n        return;\r\n    }\r\n    init(1,0);\r\n    set<int>st;\r\n    for(auto i:e){\r\n        st.insert(i.first.first);\r\n        st.insert(i.first.second);\r\n        ans[i.second-1]='0';\r\n    }\r\n    if(st.size()<=e.size()){\r\n        int x=e[0].first.first,y=e[0].first.second;\r\n        if(deep[x]<deep[y]) swap(x,y);\r\n        point=x;\r\n        ans[e[0].second-1]='1';\r\n    }\r\n    dfs(1,0);\r\n    cout<<ans<<\"\\n\";\r\n}\r\nsigned main() {\r\n    ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);\r\n    int t;cin>>t;\r\n    while(t--) solve();\r\n    return 0;\r\n}"
}