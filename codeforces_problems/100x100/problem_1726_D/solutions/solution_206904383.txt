{
    "id": 206904383,
    "contestId": 1726,
    "creationTimeSeconds": 1684820807,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "conglingkaishi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 607,
    "memoryConsumedBytes": 11161600,
    "source": "// #include <bits/stdc++.h>\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <map>\r\n#include <set>\r\n#include <random>\r\n#include <queue>\r\n#include <array>\r\nusing namespace std;\r\ntypedef pair<int ,int> PII;\r\nconstexpr int N = 1E6 + 10;\r\nint n ,m;\r\nvector<PII> vec;\r\nint p[N];\r\nint find(int u) {\r\n    return (p[u] == u) ? p[u] : p[u] = find(p[u]);\r\n}\r\nvector<int> rd ,bl;\r\nvoid solve() {\r\n    cin >> n >> m;\r\n    vec.clear();\r\n    rd.clear() ,bl.clear();\r\n    for(int i = 1;i <= m;++ i ) {\r\n        int a ,b;\r\n        cin >> a >> b;\r\n        vec.push_back({a ,b});\r\n    }\r\n    for(int i = 1;i <= n;++ i ) p[i] = i;\r\n    for(int i = 0;i < (int)vec.size();++ i ) {\r\n        int a = find(vec[i].first);\r\n        int b = find(vec[i].second);\r\n        if(a == b) {\r\n            bl.push_back(i);\r\n        }else {\r\n            rd.push_back(i);\r\n            p[a] = b;\r\n        }\r\n    }\r\n    for(int i = 1;i <= n;++ i ) p[i] = i;\r\n    for(int i = 0;i < bl.size();++ i ) {\r\n        int a = find(vec[bl[i]].first);\r\n        int b = find(vec[bl[i]].second);\r\n        if(a == b) {\r\n            rd.push_back(bl[i]);\r\n            swap(rd[0] ,rd[rd.size() - 1]);\r\n            bl[i] = -1;\r\n            break;\r\n        }else {\r\n            p[a] = b;\r\n        }\r\n    }\r\n    // for(auto v : rd) {\r\n    //     cout << v << ' ' << \"skt\" << endl;\r\n    // }\r\n    for(int i = 1;i <= n;++ i ) p[i] = i;\r\n    for(int i = 0;i < rd.size();++ i ) {\r\n        int a = find(vec[rd[i]].first);\r\n        int b = find(vec[rd[i]].second);\r\n        if(a == b) {\r\n            bl.push_back(rd[i]);\r\n            rd[i] = -1;\r\n            break;\r\n        }else {\r\n            p[a] = b;\r\n        }\r\n    }\r\n    // for(auto v : rd) {\r\n    //     cout << v << ' ' << \"skt\" << endl;\r\n    // }\r\n    // for(auto v : bl) {\r\n    //     cout << v << ' ' << \"faker\" << endl;\r\n    // }\r\n    string ans = \"\";\r\n    for(int i = 0;i < m;++ i ) ans += \" \";\r\n    for(auto v : rd) {\r\n        if(v >= 0 && v < m) {\r\n            ans[v] = '0';\r\n        }\r\n    }\r\n    for(auto v : bl) {\r\n        if(v >= 0 && v < m) {\r\n            ans[v] = '1';\r\n        }\r\n    }\r\n    cout << ans << endl;\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int T = 1;\r\n    cin >> T;\r\n    while(T --) {\r\n        solve();\r\n    }\r\n}"
}