{
    "id": 172862051,
    "contestId": 1726,
    "creationTimeSeconds": 1663692931,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "ritik_369"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\r\n#define case(test)cout<<\"Case #\"<<test<<\": \"; \r\nusing namespace std;\r\n#define ll long long\r\nll max(ll a,ll b){return ((a>=b)?a:b);}\r\nll min(ll a,ll b){return ((a<=b)?a:b);}\r\n\r\nvector<vector<pair<int,int>>>graph;\r\nvector<int>par,depth,vis;\r\nvector<pair<int,int>>edge;\r\nstring s;\r\n\r\nvoid dfs(int source=1)\r\n{\r\n     vis[source]=1;\r\n     for(auto p:graph[source]) if(vis[p.second]==0)\r\n     {\r\n          dfs(p.second);\r\n          depth[p.second]=depth[source]+1;\r\n          par[p.second]=source;\r\n          s[p.first]='1';\r\n     }\r\n}\r\n\r\nll solve(int tt,int t)\r\n{\r\n     int n,m,a,b;\r\n     cin>>n>>m;\r\n     s=string(m,'0');\r\n     graph=vector<vector<pair<int,int>>>(n+1);\r\n     par=vis=depth=vector<int>(n+1,0);\r\n     par[1]=-1;\r\n     edge=vector<pair<int,int>>(m+1);\r\n     for(int i=0;i<m;i++)\r\n     {\r\n          cin>>a>>b;\r\n          graph[a].push_back({i,b});\r\n          graph[b].push_back({i,a});\r\n          edge[i].first=a;\r\n          edge[i].second=b;\r\n     }\r\n     dfs();\r\n   //  cout<<s<<endl;\r\n     map<int,int>mp;\r\n\r\n    for(int i=0;i<m;i++)\r\n    {\r\n          if(s[i]=='0')\r\n          {\r\n               mp[edge[i].first]++;\r\n               mp[edge[i].second]++;\r\n          }\r\n    }\r\n\r\n    if(mp.size()==3)\r\n    {\r\n          int enter=1;\r\n          for(auto a:mp)\r\n          {\r\n               if(a.second!=2)\r\n               {\r\n                   enter=0;\r\n                   break;\r\n               }\r\n          }\r\n          if(enter)\r\n          {\r\n               vector<vector<int>>v;\r\n               for(int i=0;i<m;i++)\r\n               {\r\n                   if(s[i]=='0')\r\n                   {\r\n                         v.push_back({depth[edge[i].first],edge[i].first});\r\n                         v.push_back({depth[edge[i].second],edge[i].second});\r\n                   }\r\n               }\r\n               sort(v.rbegin(),v.rend());\r\n               int cur=v[0][1];\r\n               cout<<cur<<endl;\r\n               int i,j;\r\n               for(auto p:graph[cur])\r\n               {\r\n                   if(s[p.first]=='0')i=p.first;\r\n                   else if(par[cur]==p.second)j=p.first;\r\n               }\r\n               s[i]='1';\r\n               s[j]='0';\r\n          }\r\n    }\r\n     cout<<s<<endl;\r\n   \r\n   \r\n   return 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nsigned main()\r\n{\r\n\r\n   #ifndef ONLINE_JUDGE\r\n      freopen(\"input.txt\",\"r\",stdin);\r\n      freopen(\"output.txt\",\"w\",stdout);\r\n   #endif\r\n\r\n   ll t,tt;\r\n   cin>>t;\r\n   tt=t;\r\n   while(t--)\r\n   {\r\n      solve(tt,t);\r\n   }\r\n   \r\n   \r\n   return 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//vector int pair"
}