{
    "id": 172227115,
    "contestId": 1726,
    "creationTimeSeconds": 1663236205,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "dungdq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/******************************\r\n**    Author : dungdq2002    **\r\n**    Created: 15.09.2022    **\r\n*******************************/\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define sqr(x) (1LL*(x)*(x))\r\n#define BIT(x, k) ((x) >> (k) & 1)\r\n#define watch(x) cerr << \" !\" << (#x) << \" = \" << x << '\\n';\r\n#define cntBit(x) __builtin_popcountll(x)\r\n\r\nint32_t main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n    if (fopen (\"main.in\", \"r\"))\r\n        freopen (\"main.in\", \"r\", stdin);\r\n\r\n    int nTest; cin >> nTest;\r\n    while (nTest--) {\r\n        int n, m; cin >> n >> m;\r\n        vector <vector<int>> adj(n+1);\r\n        vector <pair<int, int>> edges;\r\n        for (int i = 1; i <= m; i++) {\r\n            int u, v; cin >> u >> v;\r\n            adj[u].push_back(edges.size());\r\n            adj[v].push_back(edges.size());\r\n            edges.push_back({u, v});\r\n        }\r\n\r\n        vector <int> label(m);\r\n        vector <int> vis(n+1), par(n+1);\r\n\r\n        function <void(int)> dfs = [&](int u, int pu = -1) {\r\n            vis[u] = true;\r\n            for (int id: adj[u]) {\r\n                int v = edges[id].first ^ edges[id].second ^ u;\r\n                if (v == pu) continue;\r\n                if (!vis[v]) {\r\n                    par[v] = id;\r\n                    dfs(v, u);\r\n                    label[id] = 1;\r\n                }\r\n                else label[id] = -u;\r\n            }\r\n        };\r\n\r\n        dfs(1);\r\n\r\n        set <int> s;\r\n        for (int i = 0; i < m; i++) {\r\n            if (label[i] < 0)\r\n                s.insert(edges[i].first),\r\n                s.insert(edges[i].second);\r\n        }\r\n\r\n        if (s.size() == 3 && m == n + 2) {\r\n            for (int i = 0; i < m; i++) {\r\n                if (label[i] < 0) {\r\n                    int v = -label[i];\r\n                    label[par[v]] = -1;\r\n                    label[i] = 1;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int i = 0; i < m; i++)\r\n            cout << max(label[i], 0);\r\n\r\n        cout << '\\n';\r\n\r\n\r\n    }\r\n\r\n    return 0;\r\n}"
}