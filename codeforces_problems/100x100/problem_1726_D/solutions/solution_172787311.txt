{
    "id": 172787311,
    "contestId": 1726,
    "creationTimeSeconds": 1663651715,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "D",
        "name": "Edge Split",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "dsu",
            "graphs",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "ZzMK"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 17715200,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\n#define ri register int\r\n#define int long long\r\nusing namespace std;\r\nconst int maxN=2e5 + 10;\r\nconst ll INF=1e15;\r\nconst ll mod = 998244353;\r\ninline ll read()\r\n{\r\n    ll ans=0,f=0;\r\n    char ch=getchar();\r\n    while(ch<'0'||ch>'9')f^=(ch=='-'),ch=getchar();\r\n    while(ch>='0'&&ch<='9')ans=(ans<<3)+(ans<<1)+(ch^48),ch=getchar();\r\n    return f?-ans:ans;\r\n}\r\nint t;\r\nstruct edge\r\n{\r\n    int nxt;\r\n    int to;\r\n    int dis;\r\n}e[maxN << 1];\r\nint head[maxN],cnt;\r\nvoid add(int u,int v,int w)\r\n{\r\n    e[++cnt].nxt = head[u];\r\n    e[cnt].dis = w;\r\n    e[cnt].to = v;\r\n    head[u] = cnt;\r\n}\r\n/*\r\n    \u70b9\u6570 - 1 <= \u8fb9\u6570 <= \u70b9\u6570 + 2\r\n    \u610f\u5473\u7740\u4ec0\u4e48\uff1f\r\n    \u610f\u5473\u7740\u5fc5\u5b9a\u5b58\u5728\u4e00\u68f5\u6811\r\n    \u4f8b\u5982\u6837\u4f8b 1 \u4e2d\u7684 \u7ea2\u8272\u8fb9\u6784\u6210\u7684\u4e00\u68f5\u6811\r\n    \u5206\u7c7b\u8ba8\u8bba\r\n        \u5f53\u4e14\u4ec5\u5f53 \u8fb9\u6570 = \u70b9\u6570 - 1\r\n    \u90a3\u4e48\u6b64\u65f6 \u7b54\u6848\u4e3a 1;(\u6811\u672c\u8eab\u5c31\u662f\u4e00\u6574\u4e2a\u8fde\u901a\u5757)\r\n        \u5f53\u4e14\u4ec5\u5f53 \u8fb9\u6570 = \u70b9\u6570\r\n    \u6b64\u65f6\u9009\u51fa\u7684 n - 1 \u6761\u8fb9\u67d3\u6210\u7ea2\u8272 C1 = 1;\r\n    \u540c\u65f6\u53e6\u5916\u7684 1 \u6761\u8fb9\u67d3\u6210\u84dd\u8272 C2 = n - 1;\r\n        \u5f53\u4e14\u4ec5\u5f53 \u8fb9\u6570 = \u70b9\u6570 + 1\r\n    \u6b64\u65f6\u9009\u51fa\u7684 n - 1 \u6761\u8fb9\u67d3\u6210\u7ea2\u8272 C1 = 1;\r\n    \u540c\u65f6\u53e6\u5916\u7684 2 \u6761\u8fb9\u67d3\u6210\u84dd\u8272 C2 = n - 2;\r\n        \u5f53\u4e14\u4ec5\u5f53 \u8fb9\u6570 = \u70b9\u6570 + 2\r\n    \u6b64\u65f6\u9009\u51fa\u7684 n - 1 \u6761\u8fb9\u67d3\u6210\u7ea2\u8272 C1 = 1;\r\n    \u540c\u65f6\u53e6\u5916\u7684 2 \u6761\u8fb9\u67d3\u6210\u84dd\u8272 C2 = n - 3;\r\n        \u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b58\u5728\u524d\u63d0\r\n        \u5373 \u8fd9\u4e09\u6761\u8fb9\u4e0d\u4f1a\u662f\u4e92\u6210\u73af U -> V -> X -> U\r\n    \u5982\u679c\u4e09\u6761\u8fb9\u6210\u4e86\u73af\r\n    \u90a3\u4e48\u7b54\u6848\u5c31\u4f1a\u589e\u52a0;\r\n    \u7b2c\u4e00\u6b65\u8003\u8651\u9009\u51fa\u4e00\u68f5\u6811\r\n*/\r\nint depth[maxN];\r\nint vis[maxN];\r\nint pre[maxN];\r\nvector<edge> v;\r\nset<int> s;\r\nint ans[maxN];\r\nvoid dfs(int u)\r\n{\r\n    vis[u] = 1;\r\n    for(int i = head[u] ; i ; i = e[i].nxt)\r\n    {\r\n        int j = e[i].to;\r\n        if(vis[j] != 1)\r\n        {\r\n            pre[j] = e[i].dis;\r\n            depth[j] = depth[u] + 1;\r\n            dfs(j);\r\n            ans[e[i].dis] = 1;\r\n        }\r\n        else if(depth[j] > depth[u]) // j \u5df2\u7ecf\u8d70\u8fc7 \u4e14 depth[j] < depth[u] \u8bf4\u660e\u5b58\u5728\u73af \u4e14 u \u662f j \u7684\u7236\u4eb2(\u4e24\u6761\u8fb9\u7b2c\u4e00\u6761\u8fb9\u662f\u4ece u -> j,\u8d1f\u8d23\u6253\u6807\u8bb0)\r\n        {\r\n            v.push_back({u,j,e[i].dis});\r\n            s.insert(u);\r\n            s.insert(j);\r\n        }\r\n    }\r\n}\r\nbool cmp(int a,int b)\r\n{\r\n    return depth[a] < depth[b];\r\n}\r\nsigned main()\r\n{\r\n    t = read();\r\n    while(t--)\r\n    {\r\n        s.clear();\r\n        v.clear();\r\n        int n = read(),m = read();\r\n        cnt = 0;\r\n        for(int i = 1 ; i <= n ; i++)\r\n        {\r\n            head[i] = 0;\r\n            e[i] = {0,0,0};\r\n            pre[i] = 0;\r\n            depth[i] = 0;\r\n        }\r\n        for(int i = 1 ; i <= m ; i++)\r\n        {\r\n            int u = read(),v = read();\r\n            add(u,v,i);\r\n            add(v,u,i);\r\n        }\r\n        dfs(1);\r\n        if(v.size() == 3 && s.size() == 3)\r\n        {\r\n            vector <int> a;\r\n            for(auto temp : s)\r\n                a.push_back(temp);\r\n            sort(a.begin(),a.end(),cmp);\r\n            for(auto temp : v)\r\n            {\r\n                if(temp.nxt == a[0] && temp.to == a[2])\r\n                    ans[temp.dis] = 1;\r\n                ans[pre[a[2]]] = 0;\r\n            }\r\n        }\r\n        for(int i = 1 ; i <= m ; i++)\r\n            printf(\"%lld\",ans[i]);\r\n        printf(\"\\n\");\r\n    }\r\n    system(\"pause\");\r\n    return 0;\r\n}"
}