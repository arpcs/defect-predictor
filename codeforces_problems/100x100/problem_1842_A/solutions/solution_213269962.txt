{
    "id": 213269962,
    "contestId": 1842,
    "creationTimeSeconds": 1689074111,
    "relativeTimeSeconds": 491,
    "problem": {
        "contestId": 1842,
        "index": "A",
        "name": "Tenzing and Tsondu",
        "type": "PROGRAMMING",
        "points": 250.0,
        "rating": 800,
        "tags": [
            "games",
            "math"
        ]
    },
    "author": {
        "contestId": 1842,
        "members": [
            {
                "handle": "tanwir1703"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1689073620
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 204800,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n \r\n#define ff              first\r\n#define ss              second\r\n#define MOD             998244353\r\n#define int             long long\r\n#define pb              push_back\r\n#define mp              make_pair\r\n#define pii             pair<int,int>\r\n#define all(x)          (x).begin(),(x).end()\r\n#define re              register\r\n\r\ntypedef pair<int, int> node;\r\ntypedef tree<node, null_type, less<node>,\r\n            rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\n\r\n \r\nvoid c_p_c()\r\n{\r\n\tios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#ifndef ONLINE_JUDGE\r\n\tfreopen(\"input.txt\", \"r\", stdin);\r\n\tfreopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n}\r\n\r\nbool comp(pair<int,int> A, pair<int,int> B)\r\n{\r\n    if(A.first == B.first) return A.second < B.second;\r\n    return A.first < B.first;\r\n}\r\n\r\nint accurateFloor(int a, int b) {\r\n\tint val = a / b;\r\n\twhile (val * b > a)\r\n\t\tval--;\r\n\treturn val;\r\n}\r\n\r\n\r\nbool check(int mid, vector<int> &arr)\r\n{\r\n    int n = arr.size();\r\n    vector<int> curr(arr.begin(), arr.end());\r\n    for(int i=n-1;i>=2;i--)\r\n    {\r\n        if(curr[i] < mid) \r\n        return false;\r\n        int d = min(arr[i], curr[i]-mid)/3;\r\n        curr[i-1] += d;\r\n        curr[i-2] += 2*d;\r\n    }\r\n    if(curr[0]>=mid && curr[1]>=mid)\r\n    return true;\r\n    else\r\n    return false;\r\n}\r\n\r\nstring removeLeadingZeros(string str)\r\n{\r\n    // Regex to remove leading\r\n    // zeros from a string\r\n    const regex pattern(\"^0+(?!$)\");\r\n \r\n    // Replaces the matched\r\n    // value with given string\r\n    str = regex_replace(str, pattern, \"\");\r\n    return str;\r\n}\r\nvector<int> fact(15, 1);\r\n\r\n/*int cnt(int x)\r\n{\r\n    int ans = 0;\r\n    while(x)\r\n    {\r\n        ans += x&1;\r\n        x>>=1;\r\n    }\r\n    return ans;\r\n}*/\r\n\r\nconst int P = 1e9 + 7;\r\n \r\nint add(int x, int y) {\r\n\tif (x + y >= P) return x + y - P;\r\n\treturn x + y;\r\n}\r\n \r\nint sub(int x, int y) {\r\n\tif (x < y) return x - y + P;\r\n\treturn x - y;\r\n}\r\n \r\nint mul(int x, int y) { return 1ull * x * y % P; }\r\n\r\n \r\nint fpow(int x, int y) {\r\n\tint ans = 1;\r\n\twhile (y) {\r\n\t\tif (y & 1) ans = mul(ans, x);\r\n\t\ty >>= 1;\r\n\t\tx = mul(x, x);\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\n\r\nbool check(vector<int> a, vector<int> b, int x){\r\n    int ans = 0;\r\n    for(int i=0;i<a.size();i++){\r\n        if(x-1-a[i]<=ans && ans<=b[i]) ans++;\r\n    }\r\n    if(ans >= x) return true;\r\n    return false;\r\n}\r\n\r\nint gcd(int a, int b)\r\n{\r\n    if (b == 0)\r\n        return a;\r\n    return gcd(b, a % b);\r\n}\r\ninline int LCM(int x,int y){\r\n\treturn x/gcd(x,y)*y;\r\n}\r\n\r\nstruct compare {\r\n bool operator()(const pair<int, int>& value,\r\n        const int& key)\r\n {\r\n  return (value.first < key);\r\n }\r\n bool operator()(const int& key,\r\n     const pair<int, int>& value)\r\n {\r\n  return (key < value.first);\r\n }\r\n};\r\n\r\n\r\nvoid dfs(vector<vector<int>> &adj, vector<bool> &vis, vector<int> &par, int i){\r\n    vis[i] = true;\r\n    for(auto child:adj[i]){\r\n        if(!vis[child])\r\n        {\r\n            par[child] = i;\r\n            dfs(adj,vis,par,child);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nint calc_dist(pair<int,int> A, pair<int,int> B){\r\n    return (A.first - B.first)*(A.first - B.first) + (A.second - B.second)*(A.second - B.second);\r\n}\r\n\r\nint root(int x){\r\n    int y = sqrtl(x) + 2;\r\n\twhile(y * y > x) --y;\r\n\treturn y;\r\n}\r\n\r\nbool notInRow(char arr[][9], int row)\r\n{\r\n    // Set to store characters seen so far.\r\n    set<char> st;\r\n \r\n    for (int i = 0; i < 9; i++) {\r\n \r\n        // If already encountered before, return false\r\n        if (st.find(arr[row][i]) != st.end())\r\n            return false;\r\n \r\n        // If it is not an empty cell, insert value\r\n        // at the current cell in the set\r\n        if (arr[row][i] != '.')\r\n            st.insert(arr[row][i]);\r\n    }\r\n    return true;\r\n}\r\n \r\n// Checks whether there is any duplicate\r\n// in current column or not.\r\nbool notInCol(char arr[][9], int col)\r\n{\r\n    set<char> st;\r\n \r\n    for (int i = 0; i < 9; i++) {\r\n \r\n        // If already encountered before, return false\r\n        if (st.find(arr[i][col]) != st.end())\r\n            return false;\r\n \r\n        // If it is not an empty cell,\r\n        // insert value at the current cell in the set\r\n        if (arr[i][col] != '.')\r\n            st.insert(arr[i][col]);\r\n    }\r\n    return true;\r\n}\r\n \r\n// Checks whether there is any duplicate\r\n// in current 3x3 box or not.\r\nbool notInBox(char arr[][9], int startRow, int startCol)\r\n{\r\n    set<char> st;\r\n \r\n    for (int row = 0; row < 3; row++) {\r\n        for (int col = 0; col < 3; col++) {\r\n            char curr = arr[row + startRow][col + startCol];\r\n \r\n            // If already encountered before, return false\r\n            if (st.find(curr) != st.end())\r\n                return false;\r\n \r\n            // If it is not an empty cell,\r\n            // insert value at current cell in set\r\n            if (curr != '.')\r\n                st.insert(curr);\r\n        }\r\n    }\r\n    return true;\r\n}\r\n \r\n// Checks whether current row and current column and\r\n// current 3x3 box is valid or not\r\nbool isValid(char arr[][9], int row, int col)\r\n{\r\n    return notInRow(arr, row) && notInCol(arr, col)\r\n           && notInBox(arr, row - row % 3, col - col % 3);\r\n}\r\n \r\nbool isValidConfig(char arr[][9], int n)\r\n{\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n \r\n            // If current row or current column or\r\n            // current 3x3 box is not valid, return false\r\n            if (!isValid(arr, i, j))\r\n                return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nvoid dfs(vector<int> &depth, vector<vector<int>> &adj, int u, int p){\r\n    for(auto v:adj[u]){\r\n        if(v != p){\r\n            depth[v] = depth[u] + 1;\r\n            dfs(depth, adj, v, u);\r\n        }\r\n    }\r\n}\r\n\r\nint calc(int x, int y, int n, int m){\r\n    if((x==1 || x==n) && (y==1 || y==m)) return 2;\r\n    if(x==1 || x==n || y==1 || y==m) return 3;\r\n    return 4;\r\n}\r\n\r\nvoid solve()\r\n{  \r\n    int n,m;\r\n    cin>>n>>m;\r\n    vector<int> A(n), B(m);\r\n    int x=0,y=0;\r\n    for(int i=0;i<n;i++){\r\n        cin>>A[i];\r\n        x+=A[i];\r\n    }\r\n    for(int i=0;i<m;i++){\r\n        cin>>B[i];\r\n        y+=B[i];\r\n    }\r\n    if(x>y) std::cout << \"Tsondu\" << std::endl;\r\n    else if(x==y) std::cout << \"Draw\" << std::endl;\r\n    else std::cout << \"Tenzing\" << std::endl;\r\n}\r\n\r\n\r\nint32_t main()\r\n{ \r\n\tc_p_c();\r\n\tint t;\r\n\t//t=1;\r\n\tcin>>t;\r\n    while(t--)\r\n    {\r\n        solve();\r\n    }\r\n    \r\n\treturn 0;\r\n}"
}