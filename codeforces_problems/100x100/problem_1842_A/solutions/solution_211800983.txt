{
    "id": 211800983,
    "contestId": 1842,
    "creationTimeSeconds": 1688284660,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1842,
        "index": "A",
        "name": "Tenzing and Tsondu",
        "type": "PROGRAMMING",
        "points": 250.0,
        "rating": 800,
        "tags": [
            "games",
            "math"
        ]
    },
    "author": {
        "contestId": 1842,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1687615500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef vector<vector<int>> vvi;\ntypedef vector<long long> vll;\ntypedef pair<int,int> pii;\ntypedef pair<long long,long long > pll;\ntypedef vector<pair<ll,ll>> vpll;\n#define ordered_set tree<long long, null_type,less<long long>, rb_tree_tag,tree_order_statistics_node_update>\n#define F first\n#define S second\n#define eb emplace_back\n#define pb push_back\n#define pf push_front\n#define nl \"\\n\"\n#define coue continue\n#define fl cout.flush()\n#define lmin LLONG_MIN\n#define lmax LLONG_MAX\n#define ins insert\n#define mod 998244353\n\nstring reverse(string str);\n \nstring DecimalToBinary(ll num);\n \nbool isPrime(ll n);\n\nvoid SieveOfEratosthenes(ll n);\n\nll binarysearch(ll a[],ll x,ll n);\n\nll power(ll x, ll y, ll p);\n\nconst int N=1e9+7;\n\nstring numtochar=\"0123456789\";\n\nvoid solve(){\n    \n    ll n,m;\n    cin>>n>>m;\n    ll a[n],b[m],sa=0,sb=0;\n    for(auto &i:a){\n        cin>>i;\n        sa+=i;\n    }\n    for(auto &i:b){\n        cin>>i;\n        sb+=i;\n    }\n    if(sa>sb){\n        cout<<\"Tsondu\"<<nl;\n        return;\n    }\n    else if(sa<sb){\n        cout<<\"Tenzing\"<<nl;\n        return;\n    }\n    cout<<\"Draw\"<<nl;\n\n    \n}\n\n\nint main(){\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    clock_t tStart = clock();\n    int tt=1;\n    cin>>tt;\n    //SieveOfEratosthenes(N);\n    while(tt--){\n        solve();\n    }\n    //cout<<\"Time taken: \"<<setprecision(10)<<((double)(clock()-tStart)/CLOCKS_PER_SEC)<<\" s\"<<endl;\n    return 0;\n}     \n\n\nll binarysearch(ll a[],ll x,ll n){\n    ll s=0;\n    ll e=n-1;\n    while(s<=e){\n        ll mid = s+(e-s)/2;\n        if(a[mid]==x){\n            return mid;\n\n        }\n        else if(a[mid]>x){\n            e=mid-1;\n        }\n        else\n            s=mid+1;\n    }\n    return -1;\n\n}\n\nll power(ll x, ll y, ll p){\n\n    ll res = 1;\n\n    while (y > 0) {\n \n        if (y % 2 == 1)\n            res = ((res%p) * (x%p))%p;\n \n        y = y >> 1;\n \n        x = ((x%p) * (x%p))%p;\n    }\n    return res % p;\n}\n\nvoid SieveOfEratosthenes(ll n)\n{\n    bool prime[n + 1];\n    memset(prime, true, sizeof(prime));\n\n    for (ll p = 2; p * p <= n; p++) {\n        if (prime[p] == true) {\n            for (ll i = p * p; i <= n; i += p){\n                prime[i] = false;\n            }\n        }\n    }\n\n    for (ll p = 2; p <= n; p++){\n        if (prime[p]){\n            cout << p << \" \";\n        }\n    }\n        \n}\n\nstring reverse(string str)\n{\n    string s=\"\";\n    for(ll i=str.size()-1 ; i>=0 ; i--)\n          s+=str[i];\n    return s;\n}\n \nstring DecimalToBinary(ll num)\n{\n    string str;\n    if(num==0)\n        return \"0\";\n    while(num)\n    {\n        if(num & 1)\n            str+='1';\n        else\n            str+='0';\n          num>>=1;\n    }   \n    return reverse(str);\n}\n \nbool isPrime(ll n)\n{\n    if (n <= 1)\n        return false;\n \n    for (ll i = 2; i < sqrt(n)+1; i++)\n        if (n % i == 0)\n            return false;\n \n    return true;\n}\n\n\n \t\t\t\t\t \t  \t   \t\t\t    \t\t  \t\t  \t"
}