{
    "id": 180086860,
    "contestId": 1750,
    "creationTimeSeconds": 1667912648,
    "relativeTimeSeconds": 248,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "General_Armageddon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#ifdef DEBUG\r\n#define _GLIBCXX_DEBUG\r\n#endif\r\n//#pragma GCC optimize(\"O3\")\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\nint n, mod;\r\nint sum(int a, int b) {\r\n    int s = a + b;\r\n    if (s >= mod) s -= mod;\r\n    return s;\r\n}\r\nint sub(int a, int b) {\r\n    int s = a - b;\r\n    if (s < 0) s += mod;\r\n    return s;\r\n}\r\nint mult(int a, int b) {\r\n    return (1LL * a * b) % mod;\r\n}\r\nconst int maxN = 5005;\r\nint dp[maxN];\r\nint good[maxN];\r\nint pw2[maxN];\r\nint pref[maxN];\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n#ifdef DEBUG\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n#endif\r\n    cin >> n >> mod;\r\n    pw2[0] = 1;\r\n    for (int i = 1; i <= n; i++) pw2[i] = mult(2, pw2[i - 1]);\r\n    good[1] = 1;\r\n    //not transformed\r\n    dp[1] = pref[1] = 0;\r\n    //100\r\n    dp[3] = good[1];\r\n    //100\r\n    //11000 any number of zeroes size\r\n    for (int i = 2; i <= n; i++) {\r\n        good[i] = pw2[i - 2];\r\n        for (int cnt = 1; 2 * cnt < i; cnt++) {\r\n            good[i] = sub(good[i], mult(good[cnt], pref[i - 2 * cnt]));\r\n        }\r\n        for (int cnt = 1; 3 * cnt + 1 < i; cnt++) {\r\n            dp[i] = sum(dp[i], mult(good[cnt], pref[i - 3 * cnt - 1]));\r\n        }\r\n        if (2 * i + 1 <= n) {\r\n            dp[2 * i + 1] = sum(dp[2 * i + 1], good[i]);\r\n        }\r\n        pref[i] = sum(pref[i - 1], dp[i]);\r\n    }\r\n    cout << good[n] << '\\n';\r\n    return 0;\r\n}"
}