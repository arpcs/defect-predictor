{
    "id": 180037427,
    "contestId": 1750,
    "creationTimeSeconds": 1667884492,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "ftuknights"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 6963200,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int INF = 1000000000;\r\nconst int N = 200000;\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    int ntest;\r\n    cin >> ntest;\r\n    while (ntest--)\r\n    {\r\n        int n;\r\n        string s;\r\n        cin >> n;\r\n        cin >> s;\r\n        long long b[n + 10];\r\n        b[1] = 0;\r\n\r\n        for (int i = 2; i <= n + 1; i++)\r\n            b[i] = b[i - 1] + (s[i - 2] == '(' ? 1: -1);\r\n        n = n + 1;\r\n\r\n        deque<int> dq;\r\n        int minl[n + 10];\r\n        b[0] = -INF;\r\n        dq.clear();\r\n        dq.push_front(0);\r\n        for (int i = 1; i <= n; i++)\r\n        {\r\n            while (dq.size() && b[dq.front()] >= b[i]) dq.pop_front();\r\n            minl[i] = dq.front() + 1;\r\n            dq.push_front(i);\r\n        }\r\n\r\n        int minr[n + 10];\r\n        b[n + 1] = -INF;\r\n        dq.clear();\r\n        dq.push_front(n + 1);\r\n        for (int i = n; i >= 1; i--)\r\n        {\r\n            while (dq.size() && b[dq.front()] > b[i]) dq.pop_front();\r\n            minr[i] = dq.front() - 1;\r\n            dq.push_front(i);\r\n        }\r\n\r\n        long long res = 0;\r\n\r\n        for (int i = 1; i <= n; i++)\r\n        {\r\n            long long sd = (i - minl[i] + 1) * (minr[i] - i + 1) - 1;\r\n            res = res - b[i] * sd;\r\n        }\r\n\r\n\r\n        long long mmin = 0;\r\n        for (int i = 1; i <= n; i++)\r\n            mmin = min(mmin, b[i]);\r\n\r\n        long long dem[2 * n + 10];\r\n        memset(dem, 0, sizeof(dem));\r\n        for (int i = 1; i <= n; i++) dem[b[i] - mmin] += 1;\r\n        for (int i = 1; i <= 2 * n; i++) dem[i] = dem[i] + dem[i - 1];\r\n\r\n        for (int i = 1; i <= n; i++)\r\n            if (b[i] - mmin - 1 >= 0)\r\n            {\r\n                long long sd = dem[b[i] - mmin - 1];\r\n                res = res + b[i] * sd;\r\n            }\r\n\r\n        sort(b + 1, b + n + 1);\r\n        long long cnt = 1;\r\n        for (int i = 2; i <= n; i++)\r\n        {\r\n            if (b[i] == b[i - 1]) cnt++;\r\n            else\r\n            {\r\n                res = res + b[i - 1] * (cnt * (cnt - 1)) / 2;\r\n                cnt = 1;\r\n            }\r\n        }\r\n\r\n        res = res + b[n] * (cnt * (cnt - 1)) / 2;\r\n        cout << res << endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}