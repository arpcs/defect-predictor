{
    "id": 180487868,
    "contestId": 1750,
    "creationTimeSeconds": 1668181990,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "moonpay"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 2867200,
    "source": "import os\r\nimport sys \r\nfrom io import BytesIO, IOBase\r\n \r\nBUFSIZE = 8192\r\n  \r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n  \r\n    def __init__(self, file):\r\n        self._fd = file.fileno() \r\n        self.buffer = BytesIO()  \r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n \r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break  \r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0 \r\n        return self.buffer.read()\r\n \r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE)) \r\n            self.newlines = b.count(b\"\\n\") + (not b)  \r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1    \r\n        return self.buffer.readline()\r\n \r\n    def flush(self): \r\n        if self.writable: \r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)   \r\n \r\n \r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n \r\n \r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n \r\ndef solve():\r\n    n = int(input())\r\n    A = list(map(int, input()))\r\n    B = list(map(int, input()))\r\n    cnt = [0] * 2\r\n    for a, b in zip(A, B):\r\n        cnt[a ^ b] += 1\r\n    if cnt[0] > 0 and cnt[1] > 0:\r\n        print(\"NO\")\r\n        return\r\n \r\n    print(\"YES\")\r\n    c = 0\r\n    ans = []\r\n    for i, a in enumerate(A, 1):\r\n        if a == 1:\r\n            c ^= 1\r\n            ans.append((i, i))\r\n    if c == 0:\r\n        if cnt[0] == 0:\r\n            ans.append((1, 1))\r\n            ans.append((2, 2))\r\n            ans.append((1, 2))\r\n    else:\r\n        if cnt[1] == 0:\r\n            ans.append((1, 1))\r\n            ans.append((2, 2))\r\n            ans.append((1, 2))\r\n        \r\n \r\n    print(len(ans))\r\n    for row in ans:\r\n        print(*row)\r\n \r\nT = 1\r\nT = int(input())\r\nfor t in range(1, T + 1):\r\n    solve()   "
}