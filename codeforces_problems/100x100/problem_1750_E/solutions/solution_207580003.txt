{
    "id": 207580003,
    "contestId": 1750,
    "creationTimeSeconds": 1685284549,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "luowang666"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvoid solve() {\r\n  int n, m;\r\n  cin >> n >> m;\r\n  vector<int> a(n + 1);\r\n  for (int i = 1; i <= n;i++) cin >> a[i];\r\n\r\n  vector<int> degree(n + 1);\r\n  vector<vector<int>> graph(n + 1), graph2(n + 1);\r\n  for (int i = 0; i < m; i++) {\r\n    int x, y;\r\n    cin >> x >> y;\r\n    graph[y].push_back(x);\r\n    graph2[x].push_back(y);\r\n    degree[x]++;\r\n  }\r\n  int root = 0;\r\n  for (int i = 1;i <= n; i++) {\r\n    if (degree[i] == 0) {\r\n      root = i;\r\n      break;\r\n    }\r\n  }\r\n  assert(root != 0);\r\n  queue<int> que;\r\n  que.push(root);\r\n  vector<int> dist(n + 1, 0);\r\n  while (!que.empty()) {\r\n    int u = que.front();\r\n    que.pop();\r\n    for (int v : graph[u]) {\r\n      if (--degree[v] == 0) {\r\n        que.push(v);\r\n        dist[v] = max(dist[v], dist[u] + 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  vector<int> id(n);\r\n  iota(id.begin(), id.end(), 1);\r\n\r\n  sort(id.begin(), id.end(), [&](int i, int j) {\r\n    return dist[i] < dist[j];\r\n    });\r\n\r\n  for (int i = 0; i <= n; i++) {\r\n    bool done = true;\r\n    for (int j : id) {\r\n      if (a[j]) {\r\n        done = false;\r\n        a[j]--;\r\n        for (int k : graph2[j]) {\r\n          a[k]++;\r\n        }\r\n      }\r\n    }\r\n    if (done) {\r\n      cout << i << \"\\n\";\r\n      return;\r\n    }\r\n  }\r\n\r\n  __int128 ans = n + 1;\r\n\r\n  vector<__int128> sum(n + 1);\r\n  reverse(id.begin(), id.end());\r\n  for (int i : id) {\r\n    sum[i] += a[i];\r\n    if (sum[i] == 0) continue;\r\n    for (int j : graph2[i]) {\r\n      sum[j] += sum[i];\r\n    }\r\n  }\r\n  int64_t res = (ans + sum[root]) % 998244353;\r\n  cout << res << \"\\n\";\r\n}\r\n\r\nint main()\r\n{\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        solve();\r\n    }\r\n}"
}