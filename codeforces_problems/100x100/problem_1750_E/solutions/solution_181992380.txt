{
    "id": 181992380,
    "contestId": 1750,
    "creationTimeSeconds": 1669046090,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "Lusfie"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 19456000,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nconst int maxn = 2e5 + 5;\r\n\r\nint n, ans;\r\nint a[maxn];\r\nchar s[maxn];\r\n\r\nstruct BIT {\r\n  int tree[maxn << 2];\r\n\r\n  int lowbit(int x) { return (x) & (-x); }\r\n\r\n  void init() {\r\n    for (int i = 1; i <= n << 2; i++) tree[i] = 0;\r\n  }\r\n\r\n  void add(int pos, int x) {\r\n    pos += (n + 2);\r\n    for (int i = pos; i <= n << 2; i += lowbit(i)) tree[i] += x;\r\n  }\r\n\r\n  int query(int pos) {\r\n    pos += (n + 2);\r\n    if (pos <= 0) return 0;\r\n    int res = 0;\r\n    for (int i = pos; i >= 1; i -= lowbit(i)) res += tree[i];\r\n    return res;\r\n  }\r\n\r\n  int query(int l, int r) {\r\n    if (l > r) return 0;\r\n    return query(r) - query(l - 1);\r\n  }\r\n\r\n} small, big;\r\n\r\nint ls[maxn], rs[maxn], stk[maxn];\r\nvoid cartesian(int n, int a[]) {\r\n  for (int i = 1; i <= n; i++) rs[i] = ls[i] = -1;\r\n  int top = 0;\r\n  for (int i = 1; i <= n; i++) {\r\n    int k = top;\r\n    while (k && a[i] <= a[stk[k]]) k--;\r\n    if (k) rs[stk[k]] = i;\r\n    if (k < top) ls[i] = stk[k + 1];\r\n    stk[++k] = i;\r\n    top = k;\r\n  }\r\n}\r\n\r\nsigned main() {\r\n  //   freopen(\".in\", \"r\", stdin);\r\n  //   freopen(\".out\", \"w\", stdout);\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0), cout.tie(0);\r\n  int _;\r\n  cin >> _;\r\n  while (_--) {\r\n    cin >> n;\r\n    for (int i = 1; i <= n; i++) cin >> s[i];\r\n    for (int i = 1; i <= n; i++) a[i] = a[i - 1] + (s[i] == '(' ? 1 : -1);\r\n    small.init(), big.init();\r\n    for (int i = 0; i <= n; i++) small.add(a[i], a[i]);\r\n    for (int i = 0; i <= n; i++) big.add(a[i], 1);\r\n\r\n    ans = 0;\r\n    for (int i = 0; i <= n; i++) {\r\n      small.add(a[i], -a[i]);\r\n      big.add(a[i], -1);\r\n      ans += (int)a[i] * big.query(-n, a[i]);\r\n      ans += small.query(a[i] + 1, n);\r\n    }\r\n\r\n    cartesian(n, a);\r\n\r\n    function<void(int, int, int)> dfs = [&](int u, int l, int r) {\r\n      int num = (int)(u - l + 1) * (r - u + 1) - 1;\r\n      ans -= num * a[u];\r\n      if (ls[u] != -1) dfs(ls[u], l, u - 1);\r\n      if (rs[u] != -1) dfs(rs[u], u + 1, r);\r\n    };\r\n\r\n    dfs(stk[1], 0, n);\r\n    cout << ans << endl;\r\n  }\r\n  return 0;\r\n}"
}