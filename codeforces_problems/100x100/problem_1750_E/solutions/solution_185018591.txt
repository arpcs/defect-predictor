{
    "id": 185018591,
    "contestId": 1750,
    "creationTimeSeconds": 1670888863,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1750,
        "index": "E",
        "name": "Bracket Cost",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1750,
        "members": [
            {
                "handle": "JunBinLiang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1667745300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 31232000,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n#include <map>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <unordered_set>\r\n#include <algorithm>\r\n#include <cmath>\r\n#include <cstring>\r\n#include <queue>\r\n#include <list>\r\n\r\n\r\nusing namespace std;  \r\nusing ll = long long;\r\n#define pb push_back\r\n\r\nconst int MAX = 1e5 + 1000;\r\nstruct Node {\r\n  int l, r;\r\n  int val = 0; ll sum = 0;\r\n  int cnt = 0;\r\n} tree[MAX * 4], cntTree[MAX * 4];\r\n\r\nvoid build(int id) {\r\n  int l = tree[id].l, r = tree[id].r;\r\n  if(l == r) {\r\n    return;\r\n  }\r\n  int mid = l + (r - l) / 2;\r\n  tree[id * 2 + 1] = {l, mid, 0, 0};\r\n  tree[id * 2 + 2] = {mid + 1, r, 0, 0};\r\n  build(id * 2 + 1);\r\n  build(id * 2 + 2);\r\n}\r\n\r\nvoid update(int id, int index, int val) { \r\n  int l = tree[id].l, r = tree[id].r;\r\n  if(l == r) {\r\n    tree[id].val += val; \r\n    tree[id].sum += val; \r\n    tree[id].cnt ++;\r\n    return;\r\n  }\r\n\r\n  int mid = l + (r - l) / 2;\r\n  int left = id * 2 + 1, right = id * 2 + 2;\r\n  if(index <= mid) {\r\n    update(left, index, val);\r\n  } else {\r\n    update(right, index, val);\r\n  }\r\n  tree[id].sum = (tree[left].sum + tree[right].sum);\r\n  tree[id].cnt = (tree[left].cnt + tree[right].cnt);\r\n}\r\n\r\nll query(int id, int s, int e) { // query sum from [0 : l]\r\n  int l = tree[id].l, r = tree[id].r;\r\n  if(l == s && r == e){\r\n    return tree[id].sum;\r\n  }\r\n  int mid = l + (r - l) / 2;\r\n  int left = id * 2 + 1, right = id * 2 + 2;\r\n  if(e <= mid){\r\n      return query(left, s, e);\r\n  } else if(s >= mid + 1) {\r\n      return query(right, s, e);\r\n  } else {\r\n    return query(left, s, mid) + query(right, mid + 1, e);\r\n  }\r\n}\r\n\r\nint query1(int id, int s, int e) { // query sum from [0 : l]\r\n  int l = tree[id].l, r = tree[id].r;\r\n  if(l == s && r == e){\r\n    return tree[id].cnt;\r\n  }\r\n  int mid = l + (r - l) / 2;\r\n  int left = id * 2 + 1, right = id * 2 + 2;\r\n  if(e <= mid){\r\n      return query1(left, s, e);\r\n  } else if(s >= mid + 1) {\r\n      return query1(right, s, e);\r\n  } else {\r\n    return query1(left, s, mid) + query1(right, mid + 1, e);\r\n  }\r\n}\r\n\r\nconst int N = 2e5 + 10;\r\nint p[N];\r\nint cnt[N];\r\nll sums[N], tot[N];\r\nvoid solve() {\r\n    ll res = 0;\r\n    int n;\r\n    string s;\r\n    cin >> n >> s;    \r\n    \r\n    /*\r\n    //brute force\r\n    ll res = 0;\r\n    for(int i = 0; i < n; i++) {\r\n        int all = 0, p = 0;\r\n        int mn = 0;\r\n        for(int j = i; j < n; j++ ) {\r\n            if(s[i] == '(') all++;\r\n            else all--;\r\n            p = min(p, all);\r\n            res += (-p + max(0, all));\r\n        }\r\n    }*/\r\n    \r\n    int lim = n;\r\n    tree[0] = {-lim - 10, lim + 10, 0, 0};\r\n    build(0);\r\n    update(0, 0, 0);\r\n    \r\n    int sum = 0;\r\n    for(int i = 0; i < n; i++) {\r\n        if(s[i] == '(') sum++;\r\n        else sum--;\r\n        \r\n        p[i] = sum;\r\n        int cnt = query1(0, -lim - 10, sum);\r\n        ll tot =  query(0, -lim - 10, sum);\r\n        \r\n        //cout << sum << \"  \" << cnt << \"  \" << tot << endl;\r\n        \r\n        res += (sum * cnt - tot);\r\n        update(0, sum, sum);\r\n    }\r\n    \r\n    /*cout << endl;\r\n    for(int i = 0; i < n; i++) cout << p[i] << \"  \";\r\n    cout << endl;\r\n    cout << res << endl;*/\r\n    \r\n    for(int i = 0; i <= n; i++) {\r\n        sums[i] = 0;\r\n        cnt[i] = 0;\r\n        tot[i] = 0;\r\n    } \r\n   \r\n    vector<int> stk;\r\n    sum = 0;\r\n    cnt[0] = 1;\r\n    sums[0] = 0;\r\n    p[0] = 0; \r\n    \r\n    stk.push_back(0);\r\n    for(int i = 1; i <= n; i++) {\r\n        if(s[i - 1] == '(') {\r\n            sum--;\r\n        } else {\r\n            sum++;\r\n        }\r\n        p[i] = sum;\r\n        cnt[i] = 1;\r\n        sums[i] = sum;\r\n        while(stk.size() > 0 && sum >= p[stk.back()]) {\r\n            int idx = stk.back(); stk.pop_back();\r\n            cnt[i] += cnt[idx];\r\n            sums[i] += sums[idx];\r\n        }\r\n        if(stk.size()) {\r\n            tot[i] += tot[stk.back()];\r\n        }\r\n        tot[i] += (((p[i] + 0ll) * cnt[i]) - sums[i]);\r\n        res += tot[i];\r\n        stk.push_back(i);\r\n    }\r\n    \r\n    /*for(int i = 0; i <= n; i++) {\r\n        cout << p[i] << \" \";\r\n    } cout << endl;\r\n    \r\n    for(int i = 0; i <= n; i++) {\r\n        cout << sums[i] << \" \";\r\n    } cout << endl;\r\n    \r\n    for(int i = 0; i <= n; i++) {\r\n        cout << tot[i] << \" \";\r\n    } cout << endl;*/\r\n    \r\n    printf(\"%lld\\n\", res);\r\n}\r\n\r\nint main() {\r\n    int t = 1;\r\n    cin >> t;\r\n    while(t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}