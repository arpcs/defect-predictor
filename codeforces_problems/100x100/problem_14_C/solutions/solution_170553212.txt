{
    "id": 170553212,
    "contestId": 14,
    "creationTimeSeconds": 1662102887,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 102400,
    "source": "from collections import defaultdict\n\ndef func():\n    sides = defaultdict(int)\n    points_1 = defaultdict(int)\n    points_2 = defaultdict(int)\n    lines = []\n    for i in range(4):\n      x1, y1, x2, y2 = [int(j) for j in input().split()]\n      lines.append((x1, y1, x2, y2))\n      sides[(x1, y1)] += 1\n      sides[(x2, y2)] += 1\n      points_1[x1] += 1\n      points_1[x2] += 1\n      points_2[y1] += 1\n      points_2[y2] += 1\n\n\n    letters = [\"A\", \"B\", \"C\", \"D\"]\n    is_true = True\n    if len(sides) == 4 and len(points_1) == 2 and len(points_2) == 2:\n      rectangle_letters = {}\n      rectangle_lines = set()\n      previous_1, previous_2 = None, None\n      letter = \"\"\n      for x1, y1, x2, y2 in lines:\n        if len(rectangle_letters) == 0:\n          rectangle_letters[(x1, y1)] = \"A\"\n          rectangle_letters[(x2, y2)] = \"B\"\n          previous_1, previous_2 = (x1, y1), (x2, y2)\n        elif len(rectangle_letters) == 2 and ((x1, y1) == previous_1 or (x1, y1) == previous_2 or (x2, y2) == previous_1 or (x2, y2) == previous_2):\n          if (x1, y1) == previous_1 or (x1, y1) == previous_2:\n            rectangle_letters[(x2, y2)], letter = (\"C\", \"D\") if rectangle_letters[(x1, y1)] == \"B\" else (\"D\", \"C\")\n          elif (x2, y2) == previous_1 or (x2, y2) == previous_2:\n            rectangle_letters[(x1, y1)], letter = (\"C\", \"D\") if rectangle_letters[(x2, y2)] == \"B\" else (\"D\", \"C\")\n        elif len(rectangle_letters) == 3:\n          if (x1, y1) not in rectangle_letters:\n            rectangle_letters[(x1, y1)] = letter\n          elif (x2, y2) not in rectangle_letters:\n            rectangle_letters[(x2, y2)] = letter\n\n      for x1, y1, x2, y2 in lines:\n        if set([rectangle_letters[(x1, y1)], rectangle_letters[(x2, y2)]]) == {\"A\", \"B\"}:\n          rectangle_lines.add(0)\n        elif set([rectangle_letters[(x1, y1)], rectangle_letters[(x2, y2)]]) == {\"B\", \"C\"}:\n          rectangle_lines.add(1)\n        elif set([rectangle_letters[(x1, y1)], rectangle_letters[(x2, y2)]]) == {\"C\", \"D\"}:\n          rectangle_lines.add(2)\n        elif set([rectangle_letters[(x1, y1)], rectangle_letters[(x2, y2)]]) == {\"D\", \"A\"}:\n          rectangle_lines.add(3)\n\n      for i in sides:\n        if sides[i] != 2: \n          is_true = False\n      for i in points_1:\n        if points_1[i] != 4:\n          is_true = False \n      for i in points_2:\n        if points_2[i] != 4:\n          is_true = False\n      if len(rectangle_lines) != 4:\n        is_true = False\n    else:\n      is_true = False\n    \n    if is_true:\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nfunc()\n  \t   \t \t\t\t\t \t  \t\t \t\t\t\t \t  \t \t"
}