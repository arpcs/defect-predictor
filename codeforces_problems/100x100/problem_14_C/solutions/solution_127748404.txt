{
    "id": 127748404,
    "contestId": 14,
    "creationTimeSeconds": 1630655231,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "yogii_123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 342,
    "memoryConsumedBytes": 23347200,
    "source": "\r\nimport java.util.*;\r\nimport java.io.*;\r\n\r\npublic class CF {\r\n\tprivate static FS sc = new FS();\r\n\t\r\n\tprivate static class FS {\r\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n\t\tStringTokenizer st = new StringTokenizer(\"\");\r\n\t\tString next() {\r\n\t\t\twhile (!st.hasMoreTokens())\r\n\t\t\t\ttry {\r\n\t\t\t\t\tst=new StringTokenizer(br.readLine());\t\t\t\t               \r\n\t            } catch (IOException e) {}\r\n\t\t\treturn st.nextToken();\r\n\t\t}\r\n\t\t\r\n\t\tint nextInt() {\r\n\t\t\treturn Integer.parseInt(next());\r\n\t\t}\r\n\t\tlong nextLong() {\r\n\t\t\treturn Long.parseLong(next());\r\n\t\t}\r\n\t}\r\n\t\r\n\tprivate static class extra {\r\n\t\t\r\n\t\tstatic int[] intArr(int size) {\r\n\t\t\tint[] a = new int[size];\r\n\t\t\tfor(int i = 0; i < size; i++) a[i] = sc.nextInt();\r\n\t\t\treturn a;\r\n\t\t}\r\n\t\t\r\n\t\tstatic long[] longArr(int size) {\r\n\t\t\tlong[] a = new long[size];\r\n\t\t\tfor(int i = 0; i < size; i++) a[i] = sc.nextLong();\r\n\t\t\treturn a;\r\n\t\t}\r\n\t\t\r\n\t\tstatic long intSum(int[] a) {\r\n\t\t\tlong sum = 0; \r\n\t\t\tfor(int i = 0; i < a.length; i++) {\r\n\t\t\t\tsum += a[i];\r\n\t\t\t}\r\n\t\t\treturn sum;\r\n\t\t}\r\n\t\t\r\n\t\tstatic long longSum(long[] a) {\r\n\t\t\tlong sum = 0; \r\n\t\t\tfor(int i = 0; i < a.length; i++) {\r\n\t\t\t\tsum += a[i];\r\n\t\t\t}\r\n\t\t\treturn sum;\r\n\t\t}\r\n\t\t\r\n\t\tstatic LinkedList[] graphD(int vertices, int edges) {\r\n\t\t\tLinkedList<Integer>[] temp = new LinkedList[vertices+1];\r\n\t\t\tfor(int i = 0; i <= vertices; i++) temp[i] = new LinkedList<>();\r\n\t\t\tfor(int i = 0; i < edges; i++) {\r\n\t\t\t\tint x = sc.nextInt();\r\n\t\t\t\tint y = sc.nextInt();\r\n\t\t\t\ttemp[x].add(y);\r\n\t\t\t}\r\n\t\t\treturn temp;\r\n\t\t}\r\n\t\t\r\n\t\tstatic LinkedList[] graphUD(int vertices, int edges) {\r\n\t\t\tLinkedList<Integer>[] temp = new LinkedList[vertices+1];\r\n\t\t\tfor(int i = 0; i <= vertices; i++) temp[i] = new LinkedList<>();\r\n\t\t\tfor(int i = 0; i < edges; i++) {\r\n\t\t\t\tint x = sc.nextInt();\r\n\t\t\t\tint y = sc.nextInt();\r\n\t\t\t\ttemp[x].add(y);\r\n\t\t\t\ttemp[y].add(x);\r\n\t\t\t}\r\n\t\t\treturn temp;\r\n\t\t}\r\n\t\t\r\n\t\tstatic void printG(LinkedList[] temp) {\r\n\t\t\tfor(LinkedList<Integer> aa:temp) System.out.println(aa);\r\n\t\t}\r\n\t\t\r\n\t\tstatic long cal(long val, long pow) {\r\n\t\t\tif(pow == 0) return 1;\r\n\t\t\tlong res = cal(val, pow/2);\r\n\t\t\t\r\n\t\t\tlong ret = (res*res)%mod;\r\n\t\t\tif(pow%2 == 0) return ret;\r\n\t\t\treturn (val*ret)%mod;\r\n\t\t}\r\n\t\t\r\n\t\tstatic long gcd(long a, long b) { return b == 0 ? a:gcd(b, a%b); }\r\n\t\t\r\n\t}\r\n\t\r\n\tstatic int mod = (int) 1e9 + 7;\r\n//\tstatic int mod = (int) 998244353;\r\n\t//static int max = (int) 1e6;//, sq = 316;\r\n\tstatic LinkedList<pair>[] temp;\r\n\tstatic long[] size, totDis, ans;\r\n\t\r\n\tstatic class pair implements Comparator<pair>{\r\n\t\tint v; \r\n\t\tlong w;\r\n\t\tpair(int x, long y) {\r\n\t\t\tv = x;\r\n\t\t\tw = y;\r\n\t\t}\r\n\t\t\r\n\t\tpair() {}\r\n\t\t\r\n\t\t@Override\r\n\t\tpublic int compare(pair o1, pair o2) {\r\n\t\t\tif(o1.w < o2.w) return 1;\r\n\t\t\treturn -1;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void main(String[] args) {\t\r\n//\t\tint t = sc.nextInt();\r\n\t\tint t = 1;\r\n\t\tStringBuilder ret = new StringBuilder();\r\n//\t\tint k = 1;\r\n\t\twhile(t-- > 0) {\r\n\t\t\tint[][] x = new int[2][], y = new int[2][];\r\n\t\t\tint[][] a = new int[4][4];\r\n\t\t\tint X = 0, Y = 0;\r\n\t\t\tfor(int i = 0; i < 4; i++) {\r\n\t\t\t\ta[i] = extra.intArr(4);\r\n\t\t\t\tif(a[i][2] - a[i][0] == 0 && Y < 2) y[Y++] = a[i];\r\n\t\t\t\telse if(a[i][3] - a[i][1] == 0 && X < 2) x[X++] = a[i];\r\n\t\t\t}\r\n\t\t\tif(X != 2 || Y != 2) ret.append(\"NO\\n\");\r\n\t\t\telse {\r\n\t\t\t\tint diffx1 = x[0][2] - x[0][0], diffy1 = x[0][3] - x[0][1];\r\n\t\t\t\tdouble lenx1 = Math.sqrt(diffx1*diffx1 + diffy1*diffy1);\r\n\t\t\t\tint diffx2 = x[1][2] - x[1][0], diffy2 = x[1][3] - x[1][1];\r\n\t\t\t\tdouble lenx2 = Math.sqrt(diffx2*diffx2 + diffy2*diffy2);\r\n//\t\t\t\tSystem.out.println(lenx1 + \" \" + lenx2);\r\n\t\t\t\tif(lenx1 == lenx2) {\r\n\t\t\t\t\tdiffx1 = y[0][2] - y[0][0]; diffy1 = y[0][3] - y[0][1];\r\n\t\t\t\t\tlenx1 = Math.sqrt(diffx1*diffx1 + diffy1*diffy1);\r\n\t\t\t\t\tdiffx2 = y[1][2] - y[1][0]; diffy2 = y[1][3] - y[1][1];\r\n\t\t\t\t\tlenx2 = Math.sqrt(diffx2*diffx2 + diffy2*diffy2);\t\r\n//\t\t\t\t\tSystem.out.println(lenx1 + \" \" + lenx2);\r\n\t\t\t\t\tif(lenx1 == lenx2) ret.append(\"YES\\n\");\r\n\t\t\t\t\telse ret.append(\"NO\\n\");\r\n\t\t\t\t} else ret.append(\"NO\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t\tSystem.out.println(ret);\r\n\t}\r\n\t\r\n}\r\n\r\n\r\n\r\n\r\n"
}