{
    "id": 168500266,
    "contestId": 14,
    "creationTimeSeconds": 1660652019,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "stark9_3000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nbool comp(pair<int, int> &a, pair<int, int> &b)\r\n{\r\n    if (a.first < b.first)\r\n        return true;\r\n\r\n    if (a.first == b.first)\r\n    {\r\n        return a.second <= b.second;\r\n    }\r\n\r\n    return a.first < b.first;\r\n}\r\n\r\n// void print(pair<int, int> p)\r\n// {\r\n//     cout << p.first << \" , \" << p.second << \"\\n\";\r\n// }\r\n\r\nbool parallel(vector<pair<int, int>> &p, map<pair<int, int>, pair<int, int>> &mp, vector<vector<int>> &lines)\r\n{\r\n    auto p1 = p[0];\r\n    auto p2 = p[1];\r\n\r\n    bool isSameLine = false;\r\n\r\n    for (auto l : lines)\r\n    {\r\n        if (isSameLine)\r\n            break;\r\n\r\n        if (l[0] == p1.first && l[1] == p1.second && l[2] == p2.first && l[3] == p2.second)\r\n        {\r\n            isSameLine = true;\r\n        }\r\n\r\n        if (l[0] == p2.first && l[1] == p2.second && l[2] == p1.first && l[3] == p1.second)\r\n        {\r\n            isSameLine = true;\r\n        }\r\n\r\n        if (isSameLine)\r\n            break;\r\n    }\r\n\r\n    if (!isSameLine)\r\n        return false;\r\n\r\n    auto p3 = p[2];\r\n    auto p4 = p[3];\r\n\r\n    isSameLine = false;\r\n\r\n    for (auto l : lines)\r\n    {\r\n        if (isSameLine)\r\n            break;\r\n\r\n        if (l[0] == p3.first && l[1] == p3.second && l[2] == p4.first && l[3] == p4.second)\r\n        {\r\n            isSameLine = true;\r\n        }\r\n\r\n        if (l[0] == p4.first && l[1] == p4.second && l[2] == p3.first && l[3] == p3.second)\r\n        {\r\n            isSameLine = true;\r\n        }\r\n\r\n        if (isSameLine)\r\n            break;\r\n    }\r\n\r\n    if(!isSameLine)\r\n        return false;\r\n\r\n    isSameLine = false;\r\n\r\n    for(auto l : lines)\r\n    {\r\n        if(isSameLine)\r\n        break;\r\n\r\n        if(l[0] == p1.first && l[1] == p1.second && l[2] == p3.first && l[3] == p3.second)\r\n        isSameLine = true;\r\n\r\n        if(l[0] == p3.first && l[1] == p3.second && l[2] == p1.first && l[3] == p1.second)\r\n        isSameLine = true;\r\n    }\r\n\r\n    if(!isSameLine)\r\n    return false;\r\n\r\n    isSameLine = false;\r\n\r\n    for(auto l : lines)\r\n    {\r\n        if(isSameLine)\r\n        break;\r\n\r\n        if(l[0] == p2.first && l[1] == p2.second && l[2] == p4.first && l[3] == p4.second)\r\n        isSameLine = true;\r\n\r\n        if(l[0] == p4.first && l[1] == p4.second && l[2] == p2.first && l[3] == p2.second)\r\n        isSameLine = true;\r\n    }\r\n\r\n    if(!isSameLine)\r\n    return false;    \r\n\r\n    if (p1.first != p2.first)\r\n    {\r\n        //cout << \"p1 - p2 parallel to y\\n\";\r\n        return false;\r\n    }\r\n\r\n    if (p3.first != p4.first)\r\n    {\r\n       // cout << \"p3 - p4 parallel to y\\n\";\r\n       return false;\r\n    }\r\n    if (p2.second != p4.second)\r\n    {\r\n        //cout << \"p2 - p4 parallel to x\\n\";\r\n        return false;\r\n    }\r\n\r\n    if (p1.second != p3.second)\r\n    {\r\n        //cout << \"p1 - p3 parallel to x\\n\";\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\nint main()\r\n{\r\n    vector<pair<int, int>> points;\r\n\r\n    vector<vector<int>> lines;\r\n\r\n    map<pair<int, int>, pair<int, int>> mp;\r\n\r\n    for (int i = 0; i < 4; i++)\r\n    {\r\n        int a, b, c, d;\r\n        pair<int, int> p1, p2;\r\n\r\n        cin >> a >> b;\r\n        p1.first = a;\r\n        p1.second = b;\r\n\r\n        points.push_back({a, b});\r\n        cin >> c >> d;\r\n        p2.first = c;\r\n        p2.second = d;\r\n        points.push_back({c, d});\r\n\r\n        lines.push_back({a, b, c, d});\r\n\r\n        mp[p1] = p2;\r\n        mp[p2] = p1;\r\n    }\r\n\r\n    sort(points.begin(), points.end(), comp);\r\n\r\n    int pts = 1;\r\n    vector<pair<int, int>> p;\r\n    p.push_back(points[0]);\r\n\r\n    for (int i = 1; i < 8; i++)\r\n    {\r\n        if (points[i].first == points[i - 1].first && points[i].second == points[i - 1].second)\r\n            continue;\r\n        else\r\n        {\r\n            pts++;\r\n            p.push_back(points[i]);\r\n        }\r\n    }\r\n    bool flag = true;\r\n\r\n    if (pts != 4)\r\n    {\r\n        flag = false;\r\n        cout << \"NO\\n\";\r\n        return 0;\r\n    }\r\n\r\n    // for (auto it : p)\r\n    // {\r\n    //     cout << it.first << \" - \" << it.second << \"\\n\";\r\n    // }\r\n    if (parallel(p, mp, lines))\r\n    {\r\n        cout << \"YES\\n\";\r\n    }\r\n    else\r\n    {\r\n        cout << \"NO\\n\";\r\n    }\r\n}"
}