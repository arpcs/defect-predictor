{
    "id": 69158634,
    "contestId": 14,
    "creationTimeSeconds": 1579467982,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 14,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "geometry",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 14,
        "members": [
            {
                "handle": "jdevey"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1274283000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\nstruct Segment {\r\n  pair<int, int> p1, p2;\r\n\r\n  bool operator<(const Segment &other) const {\r\n    if (p1 == other.p1) {\r\n      return p2 < other.p2;\r\n    }\r\n    return p1 < other.p1;\r\n  }\r\n\r\n  bool operator==(const Segment &other) const {\r\n    return p1 == other.p1 && p2 == other.p2;\r\n  }\r\n};\r\n\r\nbool isSegmentAxisAligned(const Segment &s) {\r\n  return s.p1.first == s.p2.first || s.p1.second == s.p2.second;\r\n}\r\n\r\nint main() {\r\n#ifndef ONLINE_JUDGE\r\n  freopen(\"in.txt\", \"r\", stdin);\r\n#endif\r\n\r\n  vector<Segment> segments(4);\r\n  for (int i = 0; i < 4; ++i) {\r\n    cin >> segments[i].p1.first >> segments[i].p1.second >>\r\n        segments[i].p2.first >> segments[i].p2.second;\r\n    if (segments[i].p1 == segments[i].p2 ||\r\n        !isSegmentAxisAligned(segments[i])) {\r\n      cout << \"NO\" << endl;\r\n      return 0;\r\n    }\r\n    if (segments[i].p1 > segments[i].p2) {\r\n      swap(segments[i].p1, segments[i].p2);\r\n    }\r\n  }\r\n\r\n  sort(segments.begin(), segments.end());\r\n\r\n  if (segments[0].p1 != segments[1].p1 || segments[0].p2 != segments[2].p1 ||\r\n      segments[1].p2 != segments[3].p1 || segments[2].p2 != segments[3].p2 ||\r\n      segments[0] == segments[1] || segments[1] == segments[2] ||\r\n      segments[2] == segments[3]) {\r\n    cout << \"NO\" << endl;\r\n    return 0;\r\n  }\r\n\r\n  cout << \"YES\" << endl;\r\n\r\n  return 0;\r\n}\r\n"
}