{
    "id": 206321488,
    "contestId": 5,
    "creationTimeSeconds": 1684402954,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "2100030471"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 904,
    "memoryConsumedBytes": 38297600,
    "source": "import java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.util.StringTokenizer;\r\n\r\n\r\npublic class Main {\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\r\n\r\n\t\tStringTokenizer tokenizer;\r\n\t\tint N = Integer.parseInt(in.readLine());\r\n\t\ttokenizer = new StringTokenizer(in.readLine());\r\n\t\tint[] initialHills = new int[N+1];\r\n\t\tint[] hills = new int[N+1];\r\n\t\tint max = 0;\r\n\t\tint maxi= 0;\r\n\r\n\t\tfor(int n=0; n<N; n+=1)\r\n\t\t{\r\n\t\t\tinitialHills[n] = Integer.parseInt(tokenizer.nextToken());\r\n\t\t\tif(initialHills[n]>max)\r\n\t\t\t{\r\n\t\t\t\tmax = initialHills[n];\r\n\t\t\t\tmaxi=n;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//rotate list to make maxi =0, and duplicate it to hills[N];\r\n\t\tfor(int i=0; i<=N; i++)\r\n\t\t{\r\n\t\t\thills[i] = initialHills[maxi];\r\n\t\t\tmaxi = (maxi+1) % N;\r\n\t\t}\r\n\r\n\t\thills[N] = hills[0];\r\n\r\n\t\tint[] right = new int[N+1];\r\n\t\tint[] left  = new int[N+1];\r\n\t\tint[] even  = new int[N+1];\r\n\r\n\r\n\t\tlong sum = 0;\r\n\t\tfor(int i = N-1; i>=0; --i)\r\n\t\t{\r\n\t\t\tright[i] = i+1;\r\n\t\t\twhile( hills[i] > hills[right[i]] && right[i] < N)\r\n\t\t\t\tright[i] = right[right[i]];\r\n\r\n\t\t\tif(right[i] < N && hills[i]==hills[right[i]])\r\n\t\t\t{\r\n\t\t\t\teven[i] = even[right[i]] +1;\r\n\t\t\t\tright[i] = right[right[i]];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(int i=1; i<N; i++)\r\n\t\t{\r\n\t\t\tleft[i] = i-1;\r\n\t\t\twhile(hills[i] >= hills[left[i]] && left[i]>0)\r\n\t\t\t\tleft[i] = left[left[i]];\r\n\t\t}\r\n\r\n\r\n\t\tsum+=even[0];\r\n\r\n\t\tfor(int i=1; i<N; i++)\r\n\t\t{\r\n\t\t\tsum+=even[i];\r\n\t\t\tif(hills[i]<max)\r\n\t\t\t{\r\n\t\t\t\tif(left[i]==0 && right[i]==N)\r\n\t\t\t\t\tsum++;\r\n\t\t\t\telse\r\n\t\t\t\t\tsum+=2;\r\n\t\t\t}\t\t\r\n\t\t}\r\n\r\n\t\tSystem.out.println(sum);\r\n\t}\r\n\r\n}"
}