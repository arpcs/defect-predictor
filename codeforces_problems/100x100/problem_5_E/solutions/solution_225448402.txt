{
    "id": 225448402,
    "contestId": 5,
    "creationTimeSeconds": 1695779753,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "wjh2011"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 50380800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nnamespace FastIO {\r\n\tclass FastIOBase {\r\n\tprotected:\r\n#ifdef OPENIOBUF\r\n\t\tstatic const int BUFSIZE = 1 << 22;\r\n\t\tchar buf[BUFSIZE + 1];\r\n\t\tint buf_p = 0;\r\n#endif\r\n\t\tFILE* target;\r\n\tpublic:\r\n#ifdef OPENIOBUF\r\n\t\tvirtual void flush() = 0;\r\n#endif\r\n\t\tFastIOBase(FILE* f) : target(f) {}~FastIOBase() = default;\r\n\t};\r\n\tclass FastOutput : public FastIOBase {\r\n#ifdef OPENIOBUF\r\n\tpublic:\r\n\t\tinline void flush() {\r\n\t\t\tfwrite(buf, 1, buf_p, target), buf_p = 0;\r\n\t\t}\r\n#endif\r\n\tprotected:\r\n\t\tinline void __putc(char x) {\r\n#ifdef OPENIOBUF\r\n\t\t\tif (buf[buf_p++] = x, buf_p == BUFSIZE)flush();\r\n#else\r\n\t\t\tputc(x, target);\r\n#endif\r\n\t\t} template<typename T>inline void __write(T x) {\r\n\t\t\tstatic char stk[64], * top;\r\n\t\t\ttop = stk;\r\n\t\t\tif (x < 0)return __putc('-'), __write(-x);\r\n\t\t\tdo*(top++) = x % 10, x /= 10;\r\n\t\t\twhile (x);\r\n\t\t\tfor (; top != stk; __putc(*(--top) + '0'));\r\n\t\t} public:\r\n\t\t\tFastOutput(FILE* f = stdout) : FastIOBase(f) {}\r\n#ifdef OPENIOBUF\r\n\t\t\tinline void setTarget(FILE* f) {\r\n\t\t\t\tthis->flush(), target = f;\r\n\t\t\t}~FastOutput() {\r\n\t\t\t\tflush();\r\n\t\t\t}\r\n#else\r\n\t\t\tinline void setTarget(FILE* f) {\r\n\t\t\t\ttarget = f;\r\n\t\t\t}\r\n#endif\r\n\t\t\ttemplate<typename...T>inline void writesp(const T&...x) {\r\n\t\t\t\tinitializer_list<int> {(this->operator<<(x), __putc(' '), 0)...};\r\n\t\t\t} template<typename...T>inline void writeln(const T&...x) {\r\n\t\t\t\tinitializer_list<int> {(this->operator<<(x), __putc('\\n'), 0)...};\r\n\t\t\t} inline FastOutput& operator<<(char x) {\r\n\t\t\t\treturn __putc(x), * this;\r\n\t\t\t} inline FastOutput& operator<<(const char* s) {\r\n\t\t\t\tfor (; *s; __putc(*(s++)));\r\n\t\t\t\treturn*this;\r\n\t\t\t} inline FastOutput& operator<<(const string& s) {\r\n\t\t\t\treturn (*this) << s.c_str();\r\n\t\t\t} template<typename T, typename = typename enable_if<is_integral<T>::value>::type>inline FastOutput& operator<<(const T& x) {\r\n\t\t\t\treturn __write(x), * this;\r\n\t\t\t}\r\n\t} qout;\r\n\tclass FastInput : public FastIOBase {\r\n#ifdef OPENIOBUF\r\n\tpublic:\r\n\t\tinline void flush() {\r\n\t\t\tbuf[fread(buf, 1, BUFSIZE, target)] = '\\0', buf_p = 0;\r\n\t\t}\r\n#endif\r\n\tprotected:\r\n\t\tinline char __getc() {\r\n#ifdef OPENIOBUF\r\n\t\t\tif (buf_p == BUFSIZE)flush();\r\n\t\t\treturn buf[buf_p++];\r\n#else\r\n\t\t\treturn getc(target);\r\n#endif\r\n\t\t} public:\r\n#ifdef OPENIOBUF\r\n\t\t\tFastInput(FILE* f = stdin) : FastIOBase(f) {\r\n\t\t\t\tbuf_p = BUFSIZE;\r\n\t\t\t} inline void setTarget(FILE* f) {\r\n\t\t\t\tthis->flush(), target = f;\r\n\t\t\t}\r\n#else\r\n\t\t\tFastInput(FILE* f = stdin) : FastIOBase(f) {} inline void setTarget(FILE* f) {\r\n\t\t\t\ttarget = f;\r\n\t\t\t}\r\n#endif\r\n\t\t\tinline char getchar() {\r\n\t\t\t\treturn __getc();\r\n\t\t\t} template<typename...T>inline void read(T&...x) {\r\n\t\t\t\tinitializer_list<int> {(this->operator>>(x), 0)...};\r\n\t\t\t} inline FastInput& operator>>(char& x) {\r\n\t\t\t\twhile (isspace(x = __getc()));\r\n\t\t\t\treturn*this;\r\n\t\t\t} template<typename T, typename = typename enable_if<is_integral<T>::value>::type>inline FastInput& operator>>(T& x) {\r\n\t\t\t\tstatic char ch, sym;\r\n\t\t\t\tx = sym = 0;\r\n\t\t\t\twhile (isspace(ch = __getc()));\r\n\t\t\t\tif (ch == '-')sym = 1, ch = __getc();\r\n\t\t\t\tfor (; isdigit(ch); x = (x << 1) + (x << 3) + (ch ^ 48), ch = __getc());\r\n\t\t\t\treturn sym ? x = -x : x, *this;\r\n\t\t\t} inline FastInput& operator>>(char* s) {\r\n\t\t\t\twhile (isspace(*s = __getc()));\r\n\t\t\t\tfor (; !isspace(*s) && *s && ~*s; *(++s) = __getc());\r\n\t\t\t\treturn*s = '\\0', *this;\r\n\t\t\t} inline FastInput& operator>>(string& s) {\r\n\t\t\t\tchar str_buf[(1 << 8) + 1], * p = str_buf;\r\n\t\t\t\tchar* const buf_end = str_buf + (1 << 8);\r\n\t\t\t\twhile (isspace(*p = __getc()));\r\n\t\t\t\tfor (s.clear(), p++;; p = str_buf) {\r\n\t\t\t\t\tfor (; p != buf_end && !isspace(*p = __getc()) && *p && ~*p; p++);\r\n\t\t\t\t\t*p = '\\0', s.append(str_buf);\r\n\t\t\t\t\tif (p != buf_end)break;\r\n\t\t\t\t}\r\n\t\t\t\treturn*this;\r\n\t\t\t}\r\n\t} qin;\r\n} using namespace FastIO;\r\n#define cin qin\r\n#define cout qout\r\n#define int long long\r\n#define N 1000005\r\nint n, a[N], High[N], Left[N], Right[N], Stk[N], Top, Cnt[N];\r\nbool Vis[N];\r\nsigned main() {\r\n\tcin >> n;\r\n\tfor (int i = 1; i <= n; i++) cin >> a[i];\r\n\tint Pos = 0, Max = 0;\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tif (Max < a[i]) {\r\n\t\t\tPos = i;\r\n\t\t\tMax = a[i];\r\n\t\t}\r\n\tfor (int i = 1; i <= n; i++) High[i] = a[(i - Pos + n + 1) % n + 1];\r\n\tint Ans = n - 1;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tint Tmp = 1;\r\n\t\twhile (Top && High[i] > Stk[Top]) {\r\n\t\t\tAns += Cnt[Top];\r\n\t\t\tTop--;\r\n\t\t}\r\n\t\tif (Stk[Top] != High[i]) {\r\n\t\t\tTop++;\r\n\t\t\tStk[Top] = High[i];\r\n\t\t\tCnt[Top] = 0;\r\n\t\t}\r\n\t\tAns += Cnt[Top];\r\n\t\tCnt[Top]++;\r\n\t}\r\n\twhile (Top > 1) {\r\n\t\tAns += Cnt[Top];\r\n\t\tTop--;\r\n\t}\r\n\tcout << Ans - 1;\r\n\treturn 0;\r\n}"
}