{
    "id": 182302925,
    "contestId": 5,
    "creationTimeSeconds": 1669250166,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "luogu_bot5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "GNU C11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 108236800,
    "source": "// LUOGU_RID: 95222493\n#include<stdio.h>\r\nlong long int arr[3000005];\r\nlong long int init[3000005];\r\nint stm1[3000005];\r\nlong long int idl[3000005];\r\nlong long int idr[3000005];\r\nlong long int count=0;\r\nint main()\r\n{\r\n    int n;\r\n    scanf(\"%d\",&n);\r\n    for(int i=1;i<=n;i++)scanf(\"%lld\",&init[i]);\r\n    long long int max=0;\r\n    int p,q=1;\r\n    for(int i=1;i<=n;i++){\r\n        if(max<init[i]){\r\n            max=init[i];\r\n            p=i;\r\n        }\r\n    }\r\n    for(int i=p;i<=n;i++){\r\n        arr[q]=init[i];\r\n        q++;\r\n    }\r\n    for(int i=1;i<=p;i++){\r\n        arr[q]=init[i];\r\n        q++;\r\n    }\r\n    n++;\r\n    int top1=0;\r\n    for (int i = 1; i <= n; i++) {\r\n        while (top1 > 0 && arr[i] >= arr[stm1[top1]])top1--;\r\n        idl[i] = stm1[top1];\r\n        stm1[++top1] = i;\r\n    }\r\n    top1=0;\r\n    for (int i = n; i >=1; i--) {\r\n        while (top1 > 0 && arr[i] > arr[stm1[top1]])top1--;\r\n        stm1[0]=n+1;\r\n        idr[i] = stm1[top1];\r\n        stm1[++top1] = i;\r\n    }\r\n    for(int i=1;i<=n;i++){\r\n        for(int m=idl[i]+1;m<i;m++){\r\n            if(idr[m]==i)count++;\r\n        }\r\n        for(int m=idr[i]-1;m>i;m--){\r\n            if(idl[m]==i)count++;\r\n        }\r\n    }\r\n    printf(\"%lld\",count-2);\r\n    return 0;\r\n}\r\n"
}