{
    "id": 117872021,
    "contestId": 5,
    "creationTimeSeconds": 1622383039,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 5,
        "index": "E",
        "name": "Bindian Signalizing",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 5,
        "members": [
            {
                "handle": "acorn11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1269100800
    },
    "programmingLanguage": "Python 2",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 122,
    "memoryConsumedBytes": 307200,
    "source": "class Node:\r\n\tdef __init__(self, x):\r\n\t\tself.val = x\r\n\t\tself.next = None\r\n\t\t\r\ndef printList(node):\r\n\tn = node\r\n\tlst = []\r\n\twhile n is not None:\r\n\t\tlst.append(n.val)\r\n\t\tn = n.next\r\n\tprint(lst)\r\n\t\r\ndef getAllPairsNum(newLst):\r\n\tcurHLst = Node((0, newLst[0]))\r\n\tcurScreenLst = Node((0, 0))\r\n\tcurEqD = {}\r\n\tprev = newLst[0]\r\n\tr = 0\r\n\tfor i in range(1, len(newLst)):\r\n\t\th = newLst[i]\r\n\t\tif h < prev:\r\n\t\t\tr += 1 #add neighbor\r\n\t\t\tnewNode = Node((i, h))\r\n\t\t\tnewNode.next = curHLst\r\n\t\t\tcurHLst = newNode\r\n\t\t\tcurScreenLst.val = (curScreenLst.val[0], h)\r\n\t\t\tnewNode = Node((i, 0))\r\n\t\t\tnewNode.next = curScreenLst\r\n\t\t\tcurScreenLst = newNode\r\n\t\telif h > prev:\r\n\t\t\tcurNode = curHLst\r\n\t\t\tcurH = curNode.val[1]\r\n\t\t\twhile curNode is not None and curH < h:\r\n\t\t\t\tcurI = curNode.val[0]\r\n\t\t\t\tif curI not in curEqD:\r\n\t\t\t\t\tr += 1\r\n\t\t\t\telse:\r\n\t\t\t\t\tp = curEqD[curI]\r\n\t\t\t\t\tr += p*(p+1)//2\r\n\t\t\t\t\tdel curEqD[curI]\r\n\t\t\t\tcurNode = curNode.next\r\n\t\t\t\tif curNode is not None: \r\n\t\t\t\t\tcurH = curNode.val[1]\r\n\t\t\tcurHLst = curNode\r\n\t\t\tif curHLst is not None:\r\n\t\t\t\tif curHLst.val[1] == h:\r\n\t\t\t\t\tcurI = curHLst.val[0]\r\n\t\t\t\t\tif curI not in curEqD:\r\n\t\t\t\t\t\tcurEqD[curI] = 1\r\n\t\t\t\t\tcurEqD[curI] += 1\r\n\t\t\tnewNode = Node((i, h))\r\n\t\t\tnewNode.next = curHLst\r\n\t\t\tcurHLst = newNode\r\n\t\t\tcurNode = curScreenLst\r\n\t\t\tcurH = newLst[curScreenLst.val[0]]\r\n\t\t\twhile curNode is not None and curH < h:\r\n\t\t\t\tcurNode = curNode.next\r\n\t\t\t\tif curNode is not None: \r\n\t\t\t\t\tcurH = newLst[curNode.val[0]]\r\n\t\t\tcurScreenLst = curNode\r\n\t\t\tif curScreenLst is not None:\r\n\t\t\t\tcurScreen = curScreenLst.val[1]\r\n\t\t\t\twhile curNode is not None and curScreen <= h:\r\n\t\t\t\t\tr += 1\r\n\t\t\t\t\tcurNode = curNode.next\r\n\t\t\t\t\tif curNode is not None:\r\n\t\t\t\t\t\tcurScreen = curScreenLst.val[1]\r\n\t\t\t\t\t\tcurScreenLst.val = (curScreenLst.val[0], h)\r\n\t\t\tnewNode = Node((i, 0))\r\n\t\t\tnewNode.next = curNode\r\n\t\t\tcurScreenLst = newNode\r\n\t\telif h == prev:\r\n\t\t\tcurI = curHLst.val[0]\r\n\t\t\tif curI not in curEqD:\r\n\t\t\t\tcurEqD[curI] = 1\r\n\t\t\tcurEqD += 1\r\n\t\tprev = h\r\n\t\t# print(r)\r\n\t\t# printList(curHLst)\r\n\t\t# printList(curScreenLst)\r\n\tcurI = curHLst.val[0]\r\n\tif curI in curEqD:\r\n\t\tp = curEqD[curI]\r\n\t\tr += p*(p-1)//2\r\n\treturn r\r\n\r\ndef getPeakPairsNum(i, n, hLst):\r\n\ts = set()\r\n\tk = (i+1)%n\r\n\tmaxSreen = 0\r\n\twhile k != i:\r\n\t\tx = hLst[k]\r\n\t\tif x >= maxSreen:\r\n\t\t\ts.add(k)\r\n\t\t\tmaxSreen = x\r\n\t\tk = (k+1)%n\r\n\tk = (i-1)%n\r\n\tmaxSreen = 0\r\n\twhile k != i:\r\n\t\tx = hLst[k]\r\n\t\tif x >= maxSreen:\r\n\t\t\ts.add(k)\r\n\t\t\tmaxSreen = x\r\n\t\tk = (k-1)%n\r\n\treturn len(s)\r\n\r\ndef solve(n, hLst):\r\n\tmaxLst = []\r\n\tmaxH = 0\r\n\tfor i in xrange(n):\r\n\t\tif hLst[i] > maxH:\r\n\t\t\tmaxH = hLst[i]\r\n\t\t\tmaxLst = [i]\r\n\t\telif hLst[i] == maxH:\r\n\t\t\tmaxLst.append(i)\r\n\tp = len(maxLst)\r\n\tif p == 1:\r\n\t\ti = maxLst[0]\r\n\t\tr = getPeakPairsNum(i, n, hLst)\r\n\t\tnewLst = hLst[i+1:] + hLst[:i]\r\n\t\tr += getAllPairsNum(newLst)\r\n\t\treturn r\r\n\tr = p*(p-1)//2\r\n\tgap = 0\r\n\tfor k in xrange(p-1):\r\n\t\ti, j = maxLst[k], maxLst[k+1]\r\n\t\tif j != i+1:\r\n\t\t\tgap += 1\r\n\t\t\tnewList = hLst[i:j+1]\r\n\t\t\tr += getAllPairsNum(newLst)\r\n\ti, j = maxLst[p-1], maxLst[0]\r\n\tif i != n-1 or j != 0:\r\n\t\tgap += 1\r\n\t\tnewList = hLst[i:] + hLst[:j+1]\r\n\t\tr += getAllPairsNum(newLst)\r\n\tif p == 2 or gap == 1: #a pair is counted twice\r\n\t\tr -= 1\r\n\treturn r\r\n\r\nn = input()\r\nhLst = [int(x) for x in raw_input().split()]\r\nprint(solve(n, hLst))"
}