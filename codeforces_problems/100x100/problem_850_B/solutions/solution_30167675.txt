{
    "id": 30167675,
    "contestId": 850,
    "creationTimeSeconds": 1504737570,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "Stroller"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 153,
    "timeConsumedMillis": 1606,
    "memoryConsumedBytes": 52121600,
    "source": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n\nlong long mn = 9223372036854775800LL;\nlong long f[2000005];\nstatic std::vector<unsigned long long> cnt;\nstatic std::vector<unsigned long long> summa;\nvoid setup_cnt(int n, std::vector<int>& a);\nvoid setup_summa(int n, std::vector<int>& a);\nlong long sum(int l, int r, std::vector<int>& a);\n\nvoid find_primes(std::vector<bool>& primes, int num);\nint count(const int l, const int r);\nint main() {\n  std::ios_base::sync_with_stdio(false);\n  int a_max = 0;\n\n  long long n,x,y;\n\n  std::cin >> n >> x >> y;\n  std::vector<int> a;\n  a.resize(n+1);\n  static std::vector<bool> primes;\n\n  for(int i=0; i<n; i++) {\n    int ai;\n    std::cin >> ai;\n    if(ai > a_max) {\n      a_max = ai;\n    }\n    f[ai]++;\n    a.push_back(ai);\n  }\n  int max =2000005;\n  cnt.resize(max);\n  summa.resize(max);\n  //setup_cnt(n,a);\n  //setup_summa(n,a);\n  for (int i = 1; i < cnt.size(); ++i) cnt[i] = cnt[i - 1] + f[i];\n  for (int i = 1; i < summa.size(); ++i) summa[i] = summa[i - 1] + i * f[i];\n\n  long long min_cost = -1;\n  int ff = x/y;\n  for(int divider = 2; divider<=max-4; divider++) {\n    //if(primes[divider]){\n    long long div_cost = 0;\n    int k;\n    // std::cout << \"trying div \" << divider;\n    long long removals_required=0;\n    long long additions_required=0;\n    //for(k=1;k*divider<=max-4;k++) {\n    for(int j=divider;j<=max-4;j+=divider) {\n      int limit = std::max(j-divider+1, j-ff);\n\n      // if(divider <= ff+1) {\n      //   limit = j-divider+1;\n      // } else {\n      //   limit = j-ff;\n      // }\n      removals_required = cnt[limit-1] - cnt[j-divider];\n      additions_required = (cnt[j]-cnt[limit-1])*j\n        - (summa[j]-summa[limit-1]);\n      div_cost += additions_required*y + removals_required*x;\n    }\n    // std::cout << \"ar, rr\" << additions_required << \" \"\n    //  << removals_required << std::endl;\n\n    div_cost = std::min(mn, div_cost);\n    if(div_cost < min_cost || min_cost < 0) {\n      min_cost = div_cost;\n    }\n    // if(a_max%divider == 0) {\n    //   a_max /= divider;\n    // }\n    //}\n  }\n\n  std::cout << min_cost << std::endl;\n\n  return 0;\n  }\n\n"
}