{
    "id": 30097004,
    "contestId": 850,
    "creationTimeSeconds": 1504608332,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "fetetriste"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 129,
    "timeConsumedMillis": 1247,
    "memoryConsumedBytes": 47411200,
    "source": "import java.io.OutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PrintWriter;\nimport java.util.StringTokenizer;\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.io.InputStream;\n\n/**\n * Built using CHelper plug-in\n * Actual solution is at the top\n */\npublic class Main {\n    public static void main(String[] args) {\n        InputStream inputStream = System.in;\n        OutputStream outputStream = System.out;\n        FastScanner in = new FastScanner(inputStream);\n        PrintWriter out = new PrintWriter(outputStream);\n        TaskB solver = new TaskB();\n        solver.solve(1, in, out);\n        out.close();\n    }\n\n    static class TaskB {\n        public void solve(int testNumber, FastScanner in, PrintWriter out) {\n            final int N = 1000010;\n            int[] a = new int[N];\n            long[] s1 = new long[N + 1];\n            long[] s2 = new long[N + 1];\n            int n = in.nextInt();\n            long x = in.nextInt();\n            long y = in.nextInt();\n            for (int i = 0; i < n; i++) {\n                ++a[in.nextInt()];\n            }\n            for (int i = 0; i < N; i++) {\n                s1[i + 1] = s1[i] + a[i];\n                s2[i + 1] = s2[i] + a[i] * (long) i;\n            }\n            long ans = n * x;\n            for (int gcd = 2; gcd < N; gcd++) {\n                long cur = 0;\n                for (int l = 1; l < N; l += gcd) {\n                    int r = Math.min(N - 1, l - 1 + gcd);\n                    int j = clamp((r * y - x) / y, l - 1, r + 1);\n                    if (j >= l && j <= r) {\n                        cur += (s1[j + 1] - s1[l]) * x;\n                        long c = (s1[r + 1] - s1[j + 1]) * r;\n                        c -= s2[r + 1] - s2[j + 1];\n                        if (c > ans / y) {\n                            cur = ans;\n                            break;\n                        }\n                        cur += c * y;\n                        if (cur > ans) {\n                            break;\n                        }\n                    } else {\n                        long c = (s1[r + 1] - s1[l]) * r;\n                        c -= s2[r + 1] - s2[l];\n                        if (c > ans / y) {\n                            cur = ans;\n                            break;\n                        }\n                        cur += c * y;\n                        if (cur > ans) {\n                            break;\n                        }\n                    }\n                }\n                ans = Math.min(ans, cur);\n            }\n            out.println(ans);\n        }\n\n        private int clamp(long x, int l, int r) {\n            x = Math.min(x, r);\n            x = Math.max(x, l);\n            return (int) x;\n        }\n\n    }\n\n    static class FastScanner {\n        private BufferedReader in;\n        private StringTokenizer st;\n\n        public FastScanner(InputStream stream) {\n            in = new BufferedReader(new InputStreamReader(stream));\n        }\n\n        public String next() {\n            while (st == null || !st.hasMoreTokens()) {\n                try {\n                    st = new StringTokenizer(in.readLine());\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n            return st.nextToken();\n        }\n\n        public int nextInt() {\n            return Integer.parseInt(next());\n        }\n\n    }\n}\n\n"
}