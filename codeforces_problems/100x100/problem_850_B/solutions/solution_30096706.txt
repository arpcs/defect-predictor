{
    "id": 30096706,
    "contestId": 850,
    "creationTimeSeconds": 1504607453,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "mgoncharov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 153,
    "timeConsumedMillis": 1981,
    "memoryConsumedBytes": 7475200,
    "source": "#if defined(LOCAL)\n#define PROBLEM_NAME \"B\"\nconst double _max_double_error = 1e-9;\n#include \"testutils.h\"\n#define L(x...) debug(x)\n#else\n#define L(x, ...) (x)\n#include <bits/stdc++.h>\n#endif\n\nusing namespace std;\nusing vi = vector<int>; using vvi = vector<vi>;\nusing ii = pair<int,int>; using vii = vector<ii>;\nusing l = long long; using vl = vector<l>; using vvl = vector<vl>;\nusing ll = pair<l,l>; using vll = vector<ll>; using vvll = vector<vll>;\nusing lu = unsigned long long;\nusing vb = vector<bool>; using vvb = vector<vb>;\nusing vd = vector<double>; using vvd = vector<vd>;\nusing mll = unordered_map<l, l>;\nconst l INF = numeric_limits<l>::max();\nconst double EPS = 1e-10; static constexpr auto PI = acos(-1);\nconst l e0=1, e3=1000, e5=100000, e6=10*e5, e7=10*e6, e8=10*e7, e9=10*e8;\nconst char lf = '\\n';\n#define all(x) begin(x), end(x)\n#define F(a,b,c) for (l a = l(b); a < l(c); a++)\n#define B(a,b,c) for (l a = l(c) - 1; a >= l(b); a--)\n\nconst l MAX_PRIME = 1000;\n// returns v[i] = smallest prime divisor of i or 1\nvl sieve_primes(vl& primes) {\n  vl next_div(MAX_PRIME, 1);\n  for (l i = 2; i < MAX_PRIME; i++) {\n    if (next_div[i] != 1) continue;\n    primes.emplace_back(i);\n    for (l j = i; j < MAX_PRIME; j += i) if (next_div[j] == 1) next_div[j] = i;\n  }\n  return next_div;\n}\n\n// in asc order\nvl factorize_to_primes(l n, vl& primes, vl& next_div) {\n  auto p = primes.begin();\n  vl result;\n  while (n >= MAX_PRIME and p != primes.end()) {\n    if (n % *p == 0) { result.emplace_back(*p); }\n    while (n % *p == 0) { n /= *p; }\n    p++;\n  }\n  if (n >= MAX_PRIME) {\n    result.emplace_back(n);\n    n = 1;\n  }\n  while (n != 1) {\n    result.emplace_back(next_div[n]);\n    n /= next_div[n];\n  }\n  return result;\n}\n\nl cost(vl& v, l f, l x, l y, l best) {\n  l t = 0;\n  for (auto a : v) {\n    t += min(x, ((f - a % f) % f) * y);\n    if (t > best) return best;\n  }\n  return t;\n}\n\nvoid solve(istream& cin, ostream& cout) {\n  vl primes; vl next_div = sieve_primes(primes);\n  l n, x, y; cin >> n >> x >> y;\n  vl v(n); F(i, 0, n) cin >> v[i];\n  mll frq;\n  for (auto a : v) {\n    auto ff = factorize_to_primes(a, primes, next_div);\n    for (auto f : ff) frq[f]++;\n  }\n  l best = cost(v, 2, x, y, INF);\n  for (auto kv : frq) {\n    if (kv.first == 2) continue;\n    if ((n - kv.second) * min(x, y) < best) best = min(best, cost(v, kv.first, x, y, best));\n  }\n  cout << best << lf;\n}\n\nint main() {\n  ios_base::sync_with_stdio(false); cin.tie(0);\n  cout << fixed << setprecision(15);\n#if defined(LOCAL)\n  // _generate_random_test = generate_random;\n  // _solve_brute = solve_brute;\n  // _player_b = player_b;\n  // _custom_solution_checker = solution_checker;\n  maybe_run_tests(cin, cout);\n#else\n  solve(cin, cout);\n#endif\n}\n"
}