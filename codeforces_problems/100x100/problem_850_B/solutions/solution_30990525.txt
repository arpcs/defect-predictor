{
    "id": 30990525,
    "contestId": 850,
    "creationTimeSeconds": 1507116441,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "vipsharmavip"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#define ll  long long\r\nusing namespace std;\r\nint arr[1000001];\r\nll  pre_sum[1000001];\r\nint primes[1000001];\r\nint main(){\r\n            int n, x, y;\r\n            scanf(\"%d %d %d\", &n, &x, &y);\r\n            int times = x/y;\r\n            for(int i = 1 ; i <= n ; ++i ){\r\n                int x;\r\n                scanf(\"%d\", &x);\r\n                arr[x] += 1;\r\n            }\r\n\r\n            for(int i = 1 ; i <= 1e6 ; ++i ){\r\n            pre_sum[i] = pre_sum[i - 1] + 1LL * i * arr[i];\r\n            arr[i]  += arr[i - 1];\r\n            }\r\n\r\n            ll ans = LONG_LONG_MAX;\r\n\r\n            for(int i = 2 ; i * i <= 1e6 ; ++i ){\r\n                 if(!primes[i]){\r\n                      ll curr = 0;\r\n                      for(int j = i ; j <= 1e6 ; j += i ){\r\n                      primes[j] = 1;\r\n                      int gap = i - 1;\r\n                      if(times >= gap){\r\n                        int elements_count = arr[j - 1] - arr[j - i];\r\n                        ll sum   = pre_sum[j - 1] - pre_sum[j - i];\r\n                        ll add = (1LL * j * elements_count - sum);\r\n                        add *= y;\r\n                        curr += add;\r\n                       } else{\r\n                        int elements_count = arr[j - 1] - arr[j - times - 1];\r\n                        ll sum    = pre_sum[j - 1]  - pre_sum[j - times - 1];\r\n                        ll add = (1LL * j * elements_count - sum);\r\n                        add *= y;\r\n                        curr += add;\r\n                        int to_delete = arr[j - 1] - arr[j - i];\r\n                        to_delete -= elements_count;\r\n                        curr += (1LL * x * to_delete);\r\n                       }\r\n                      }\r\n                      ans = min(ans, curr);\r\n                 }\r\n            }\r\n\r\n\r\n            cout << ans;\r\n\r\n\r\n}\r\n"
}