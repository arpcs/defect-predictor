{
    "id": 82090354,
    "contestId": 850,
    "creationTimeSeconds": 1590938208,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 850,
        "index": "B",
        "name": "Arpa and a list of numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2100,
        "tags": [
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 850,
        "members": [
            {
                "handle": "xandeg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504535700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n\r\n#define MAXN 2e6+5\r\n\r\n\r\n//int MAXN = 2e6+5;\r\nbitset<MAXN> bs;\r\nvector<int> primes;\r\nint v[500001];\r\nint cnt[MAXN];\r\nlong long sum[MAXN];\r\n \r\nvoid init() {\r\n    bs.set();\r\n    primes.push_back(2);\r\n    for(int i = 4; i <= MAXN; i += 2) {\r\n        bs[i] = 0;\r\n    }\r\n    for(int i = 3; i <= MAXN; i += 2) {\r\n        if(bs[i]) {\r\n            primes.push_back(i);\r\n            for(long long j = i * (long long)i; j <= MAXN; j += i) bs[j] = 0;\r\n        }\r\n    }\r\n}\r\n \r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n \r\n    init();\r\n \r\n    int n;\r\n    long long x, y;\r\n    cin >> n >> x >> y;\r\n    for(int i = 0; i < n; ++i) {\r\n        cin >> v[i];\r\n        ++cnt[v[i]];\r\n        sum[v[i]] += v[i];\r\n    }\r\n    for(int i = 1; i <= MAXN; ++i) cnt[i] += cnt[i-1], sum[i] += sum[i-1];\r\n    long long ans = n * x; // removing every item -> empty array is a good array;\r\n    int rate = x/y;\r\n    for(auto i : primes) {\r\n        long long cur = 0;\r\n        for(long long j = i; j <= MAXN; j += i) {\r\n            int maxDel = max(j - rate, j - i + 1) - 1; // while it compensates to delete (j - x/y - 1) or up to last multiple of i\r\n            int toRemove = cnt[maxDel] - cnt[j-i]; // remove all items from last multiple of i and maxDel\r\n            int toAdd = cnt[j] - cnt[maxDel]; // set to add all items from current to maxDel\r\n            long long sumAcc = sum[j] - sum[maxDel]; // accumulate all elements from j to maxDel \r\n            cur += toRemove * x + y*(toAdd * j - sumAcc); // x cost per removal and y cost for every increase \r\n            // (toAdd * j) would consider toAdd numbers j, deducting sumAcc of it would result in the difference beetween\r\n            // every number in [maxDel, j] and j;\r\n            // ie:  if j = 14 ans i = 7 and numbers 8 9 9 10 are in v toAdd would be 4 -> 4 * 14 -> [14, 14, 14, 14] - -> 56\r\n            //                                                                           - sumAcc -> [8, 9, 9, 10]     -> 36\r\n            //                                                                                       [6, 5, 5, 4]      -> 20 -> num of aditions needed\r\n            if(cur > ans) break;\r\n        }\r\n        ans = min(ans, cur);\r\n    }\r\n    cout << ans;\r\n    return 0;\r\n}\r\n"
}