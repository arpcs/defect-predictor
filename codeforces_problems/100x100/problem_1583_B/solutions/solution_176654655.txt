{
    "id": 176654655,
    "contestId": 1583,
    "creationTimeSeconds": 1665994994,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "exhaustedkidd"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 3379200,
    "source": "#include <iostream>\n//#include <bits/stdc++.h>\n#include <vector>\n#include <cmath>\n#include <set>\n#include <algorithm>\nusing namespace std;\n\nint main() {\n  int n, t, m;\n  cin >> t;\n  for (auto i = 0; i < t; ++i) {\n    cin >> n >> m;\n    int a,b,c;\n    set<int> s;\n    s.clear();\n    for (auto j = 0; j < m; ++j) {\n      cin >> a >> b >> c;\n      s.insert(b);\n    }\n    int good_vert = -1;\n    for (auto j = 1; j <= n; ++j) {\n      if (s.count(j) == 0) {\n        good_vert = j;\n        break;\n      }\n    }\n    for (auto j = 1; j <= n; ++j) {\n      if (j != good_vert) {\n        cout << min(j, good_vert) << ' ' << max(j, good_vert) << '\\n';\n      }\n    }\n    good_vert = -1;\n  }\n\n\n  return 0;\n}"
}