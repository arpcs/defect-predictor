{
    "id": 141205764,
    "contestId": 1583,
    "creationTimeSeconds": 1640914106,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "lcl12345"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 5632000,
    "source": "#pragma GCC optimize(2)\r\n#pragma GCC optimize(3,\"Ofast\",\"inline\")\r\n#include <bits/stdc++.h>\r\n#define inf 0x7fffffff\r\n#define ll long long\r\n//#define int long long\r\n//#define double long double\r\n#define re int\r\n#define in int\r\n#define void inline void\r\n#define eps 1e-8\r\n//#define mod 1e9+7\r\n#define ls(p) p<<1\r\n#define rs(p) p<<1|1\r\n#define pi acos(-1.0)\r\n#define pb push_back\r\n#define P pair < int , int >\r\n#define mk make_pair\r\nusing namespace std;\r\nconst int mod=998244353;\r\nconst int M=1e9;\r\nconst int N=2e5+5;//?????????? 4e8\r\nint a[N],b[N],c[N];\r\nint x[N],y[N],v[N];\r\nint fa[N],n,m,tot;\r\nint get(int x)\r\n{\r\n\treturn fa[x]==x?x:fa[x]=get(fa[x]);\r\n}\r\nvoid merge(int x,int y)\r\n{\r\n\tfa[get(x)]=get(y);\r\n}\r\nvoid solve()\r\n{\r\n\tint op=0;\r\n\ttot=0;\r\n\tcin>>n>>m;\r\n\tfor(re i=1;i<=n;i++)  fa[i]=i,v[i]=0;\r\n\tfor(re i=1;i<=m;i++)  scanf(\"%d%d%d\",&a[i],&b[i],&c[i]),v[b[i]]=1;\r\n\tfor(re i=1;i<=n;i++)  if(!v[i])  op=i;\r\n\tfor(re i=1;i<=n;i++)  if(op!=i)  printf(\"%d %d\\n\",op,i);\r\n//\tfor(re i=1;i<=m;i++)  if(get(a[i])!=get(c[i]))\r\n//\t{\r\n//\t\tx[++tot]=a[i];\r\n//\t\ty[tot]=c[i];\r\n//\t\tmerge(a[i],c[i]);\r\n//\t}\r\n//\tfor(re i=1;i<=m;i++)  if(get(a[i])!=get(b[i]))\r\n//\t{\r\n//\t\tx[++tot]=a[i];\r\n//\t\ty[tot]=b[i];\r\n//\t\tmerge(a[i],b[i]);\r\n//\t}\r\n//\tfor(re i=1;i<=m;i++)  if(get(b[i])!=get(c[i]))\r\n//\t{\r\n//\t\tx[++tot]=b[i];\r\n//\t\ty[tot]=c[i];\r\n//\t\tmerge(b[i],c[i]);\r\n//\t}\r\n//\tfor(re i=2;i<=n;i++)  if(get(1)!=get(i))\r\n//\t{\r\n//\t\tx[++tot]=1;\r\n//\t\ty[tot]=i;\r\n//\t\tmerge(i,1);\r\n//\t}\r\n//\tfor(re i=1;i<=tot;i++)  printf(\"%d %d\\n\",x[i],y[i]);\r\n}\r\nsigned main()\r\n{\r\n    int T=1;\r\n    cin>>T;\r\n    for(int index=1;index<=T;index++)\r\n    {\r\n//        printf(\"Case %d:\\n\",index);\r\n        solve();\r\n//        puts(\"\");\r\n    }\r\n    return 0;\r\n}\r\n//sad"
}