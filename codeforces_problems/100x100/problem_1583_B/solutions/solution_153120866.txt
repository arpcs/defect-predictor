{
    "id": 153120866,
    "contestId": 1583,
    "creationTimeSeconds": 1649487506,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "Priyanshu_Gupta"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 819200,
    "source": "                #include <bits/stdc++.h>\r\n                #define ll long long int\r\n                #define vi vector<ll>\r\n                #define pi pair<ll, ll>\r\n                #define vpi vector<pi>\r\n                using namespace std;\r\n                unsigned long long power(unsigned long long x,\r\n                                        int y, int p)\r\n        {\r\n            unsigned long long res = 1; // Initialize result\r\n        \r\n            x = x % p; // Update x if it is more than or\r\n            // equal to p\r\n        \r\n            while (y > 0)\r\n            {\r\n            \r\n                // If y is odd, multiply x with result\r\n                if (y & 1)\r\n                    res = (res * x) % p;\r\n        \r\n                // y must be even now\r\n                y = y >> 1; // y = y/2\r\n                x = (x * x) % p;\r\n            }\r\n            return res;\r\n        }\r\n        \r\n        // Returns n^(-1) mod p\r\n        unsigned long long modInverse(unsigned long long n, \r\n                                                    int p)\r\n        {\r\n            return power(n, p - 2, p);\r\n        }\r\n        \r\n        // Returns nCr % p using Fermat's little\r\n        // theorem.\r\n        vector<ll>fac;\r\n        void initfact(int n,ll p=pow(10,9)+7)\r\n        {\r\n            fac.resize(n+1);\r\n            fac[0] = 1;\r\n            for (int i = 1; i <= n; i++)\r\n                fac[i] = (fac[i - 1] * i) % p;\r\n\r\n        }\r\n        unsigned long long nCrModPFermat(unsigned long long n,\r\n                                        int r, int p)\r\n        {\r\n            // If n<r, then nCr should return 0\r\n            if (n < r)\r\n                return 0;\r\n            // Base case\r\n            if(n==0)\r\n            return 0;\r\n            if (r == 0)\r\n                return 1;\r\n        \r\n            // Fill factorial array so that we\r\n            // can find all factorial of r, n\r\n            // and n-r\r\n            \r\n        \r\n            return (fac[n] * modInverse(fac[r], p) % p\r\n                    * modInverse(fac[n - r], p) % p)\r\n                % p;\r\n        }\r\n\r\n\r\n        ll countSetBits(ll n)\r\n        {\r\n            ll count = 0;\r\n            while (n) {\r\n                count += n & 1;\r\n                n >>= 1;\r\n            }\r\n            return count;\r\n        }\r\n                \r\n                struct dsu {\r\n                    vector<int> data;\r\n                    int components = 0;\r\n                \r\n                    dsu(int n = -1) {\r\n                        if (n >= 0)\r\n                            init(n);\r\n                    }\r\n                \r\n                    void init(int n) {\r\n                        data.assign(n + 1, -1);\r\n                        components = n;\r\n                    }\r\n                \r\n                    int find(int x) {\r\n                        return data[x] < 0 ? x : data[x] = find(data[x]);\r\n                    }\r\n                \r\n                    int get_size(int x) {\r\n                        return -data[find(x)];\r\n                    }\r\n                \r\n                    bool unite(int x, int y) {\r\n                        x = find(x);\r\n                        y = find(y);\r\n                \r\n                        if (x == y)\r\n                            return false;\r\n                \r\n                        if (-data[x] < -data[y])\r\n                            swap(x, y);\r\n                \r\n                        data[x] += data[y];\r\n                        data[y] = x;\r\n                        components--;\r\n                        return true;\r\n                    }\r\n                };\r\n                bool FindAllElements(int n, int k)\r\n        {\r\n            // Initialising the sum with k\r\n            int sum = k;\r\n        \r\n            // Initialising an array A with k elements\r\n            // and filling all elements with 1\r\n            int A[k];\r\n            fill(A, A + k, 1);\r\n        \r\n            for (int i = k - 1; i >= 0; --i) {\r\n        \r\n                // Iterating A[] from k-1 to 0\r\n                while (sum + A[i] <= n) {\r\n        \r\n                    // Update sum and A[i]\r\n                    // till sum + A[i] is less than equal to n\r\n                    sum += A[i];\r\n                    A[i] *= 2;\r\n                }\r\n            }\r\n        \r\n            // Impossible to find the combination\r\n            if (sum != n) {\r\n                return 0;\r\n            }\r\n        \r\n            // Possible solution is stored in A[]\r\n            else {\r\n                return 1;\r\n                for (int i = 0; i < k; ++i)\r\n                    cout << A[i] << ' ';\r\n            }\r\n        }\r\n        ll setBitNumber(ll n)\r\n        {\r\n            if (n == 0)\r\n                return 0;\r\n        \r\n            ll msb = 0;\r\n            n = n / 2;\r\n            while (n != 0) {\r\n                n = n / 2;\r\n                msb++;\r\n            }\r\n        \r\n            return (1 << msb);\r\n        }\r\n        ll countBits(ll  number)\r\n    {   \r\n    \r\n        // log function in base 2\r\n        // take only integer part\r\n        return (ll)log2(number)+1;\r\n    }\r\n        ll sum(ll k)\r\n        {\r\n            return k*(k+1)/2;\r\n        }\r\n        ll mul(ll a, ll b, ll mod = 998244353)\r\n    {\r\n        return ((a % mod) * (b % mod)) % mod;\r\n    }\r\n\r\n\r\n                void solve()\r\n                {\r\n                    ll n,m;\r\n                    cin>>n>>m;\r\n                    vector<ll>vis(n+1);\r\n                    \r\n                    while(m--)\r\n                    {\r\n                        ll a,b,c;\r\n                        cin>>a>>b>>c;\r\n                        vis[b]=1;\r\n                    }\r\n                    ll ans;\r\n                    for(int i=1;i<=n;i++)\r\n                    {\r\n                    if(vis[i]==0)\r\n                    {\r\n                    ans=i;\r\n                    break;\r\n                    }\r\n                    }\r\n                    for(int i=1;i<=n;i++)\r\n                    {\r\n                        if(i==ans)\r\n                        continue;\r\n                        cout<<i<<\" \"<<ans<<endl;\r\n                    }\r\n\r\n                }\r\n\r\n                int main()\r\n                {\r\n                    ios::sync_with_stdio(0);\r\n                    cin.tie(0);\r\n                    cout.tie(0);\r\n                    cout << fixed;\r\n            \r\n                  \r\n\r\n                    \r\n\r\n                    int t = 1;\r\n                    #ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n                    cin>>t;\r\n                    for (int i = 1; i <= t; i++)\r\n                    {\r\n                        // cout<<\"Case #\"<<i<<\":\"<<\" \";\r\n                        solve();\r\n                    }\r\n                    return 0;\r\n                }\r\n\r\n\r\n                // "
}