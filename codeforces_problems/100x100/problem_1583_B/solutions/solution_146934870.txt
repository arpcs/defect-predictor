{
    "id": 146934870,
    "contestId": 1583,
    "creationTimeSeconds": 1645276007,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1583,
        "index": "B",
        "name": "Omkar and Heavenly Tree",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1583,
        "members": [
            {
                "handle": "janhavi555"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634468700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 268390400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int  long long\r\n#define IOS ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n// #define mod  1000000007\r\n#define minf INT_MIN\r\n#define inf INT_MAX\r\n#define pi 3.141592653589793238\r\n\r\nint power(int a, int b, int mod) {\r\n\tint ans = 1;\r\n\twhile (b) {\r\n\t\tif (b & 1)\r\n\t\t\tans = (ans * 1LL * a) % mod;\r\n\t\ta = (a * 1LL * a) % mod;\r\n\t\tb = b >> 1;\r\n\t}\r\n\r\n\treturn ans;\r\n}\r\n\r\n/*int exp(int a, int b, int mod) {\r\n\tint ans = 1;\r\n\twhile (b > 0) {\r\n\t\tif (b & 1)\r\n\t\t\tans = add(ans, a, mod);\r\n\r\n\t\tb >>= 1;\r\n\t\ta = add(a , a, mod);\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nint binmul(int a, int b, int mod) {\r\n\tint ans = 0;\r\n\twhile (b > 0) {\r\n\t\tif (b & 1) {\r\n\t\t\tans = (ans + a) % mod;\r\n\t\t}\r\n\t\tb >>= 1;\r\n\t\ta = (a + a) % mod;\r\n\t}\r\n\treturn ans;\r\n}*/\r\n\r\nint gcd(int a, int b) {\r\n\tif (b == 0)\r\n\t\treturn a;\r\n\treturn gcd(b, a % b);\r\n}\r\nvector<int>parent, v;\r\nint find(vector<int>&parent, int node) {\r\n\tif (parent[node] == node)\r\n\t\treturn node;\r\n\r\n\treturn parent[node] = find(parent, parent[node]);\r\n}\r\nvoid solve() {\r\n\tint n, m;\r\n\tcin >> n >> m;\r\n\r\n\r\n\tfor (int i = 0; i < n + 1; i++)\r\n\t\tparent.push_back(i);\r\n\r\n\tset<pair<int, int>>edges;\r\n\r\n\tfor (int i = 0; i < m; i++) {\r\n\t\tint a, b, c;\r\n\t\tcin >> a >> b >> c;\r\n\t\tint minn = min(a, c);\r\n\t\tint maxx = max(a, c);\r\n\t\tedges.insert({minn, maxx});\r\n\t\tparent[c] = a;\r\n\t}\r\n\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tparent[i] = find(parent, i);\r\n\r\n\tset<int>s;\r\n\tfor (int i = 1; i < n + 1; i++) {\r\n\t\ts.insert(parent[i]);\r\n\t}\r\n\r\n\tfor (auto it : s) {\r\n\t\tv.push_back(it);\r\n\t}\r\n\r\n\tfor (int i = 1; i < v.size(); i++) {\r\n\t\tint minn = min(v[0], v[i]);\r\n\t\tint maxx = max(v[0], v[i]);\r\n\t\t// cout << minn << \" \" << maxx << endl;\r\n\t\tedges.insert({minn, maxx});\r\n\t}\r\n\r\n\tfor (auto it : edges)\r\n\t\tcout << it.first << \" \" << it.second << '\\n';\r\n}\r\nsigned main() {\r\n\tIOS\r\n\t// pre();\r\n\tint t = 1;\r\n\tcin >> t;\r\n\r\n\tfor (int i = 1; i <= t; i++) {\r\n\t\t// cout << \"Case #\" << i << ':' << \" \";\r\n\t\tsolve();\r\n\t\tparent.clear();\r\n\t\tv.clear();\r\n\t\t// cout << '\\n';\r\n\t}\r\n\treturn 0;\r\n}"
}