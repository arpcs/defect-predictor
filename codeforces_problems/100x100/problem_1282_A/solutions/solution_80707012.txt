{
    "id": 80707012,
    "contestId": 1282,
    "creationTimeSeconds": 1589904410,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1282,
        "index": "A",
        "name": "Temporarily unavailable",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1282,
        "members": [
            {
                "handle": "cowboy_29"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1577198100
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 78848000,
    "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\n/*\r\n*/\r\n\r\npublic class Main{\r\n    public static OutputStream out=new BufferedOutputStream(System.out);\r\n\r\n    //nl-->neew line; //l-->line;  //arp-->array print;  //arpnl-->array print new line\r\n    public static void nl(Object o) throws IOException{out.write((o+\"\\n\").getBytes());}\r\n    public static void l(Object o) throws IOException{out.write((o+\"\").getBytes());}\r\n    public static void arp(int[] o) throws IOException{for(int i=0;i<o.length;i++) out.write((o[i]+\" \").getBytes());}\r\n    public static void arpnl(int[] o) throws IOException{for(int i=0;i<o.length;i++) out.write((o[i]+\"\\n\").getBytes());}\r\n    //\r\n    static int MOD=(int)1e9+7;\r\n    static int[][] pascal_trgl=new int[4005][4005];\r\n    //\r\n\r\n    public static void main(String[] args) throws IOException{\r\n        // long sttm=System.currentTimeMillis();\r\n        FastReader sc=new FastReader();\r\n        int t=sc.nextInt();\r\n        while(t-->0){\r\n            int[] a=new int[]{sc.nextInt(),sc.nextInt(),sc.nextInt(),sc.nextInt()};\r\n            int max=Math.max(a[0],a[1]),min=Math.min(a[0], a[1]);\r\n            a[0]=min;a[1]=max;\r\n            int r1=a[2]+a[3],r2=a[2]-a[3];\r\n            int ans=a[1]-a[0];\r\n            int dif=0;\r\n            // nl(r1+\" \"+r2+\" \"+a[0]+\" \"+a[1]);\r\n            if((r1>a[0] && r2<a[1])){\r\n                if(r2<a[0]){\r\n                    r2=a[0];\r\n                }\r\n                if(r1>a[1]){\r\n                    r1=a[1];\r\n                }\r\n                dif=r1-r2;\r\n            }\r\n            ans-=dif;\r\n            nl(ans);\r\n        }\r\n        out.flush();\r\n    }\r\n\r\n    public static int nCr(int n,int r){\r\n        return pascal_trgl[n][r]%MOD;\r\n    }\r\n\r\n    public static void intiTriangle(){\r\n        for (int i = 0; i <= 4004; i++) {\r\n\t\t\tArrays.fill(pascal_trgl[i], 0);\r\n\t\t}\r\n\r\n\t\tpascal_trgl[0][0] = 1;\r\n\r\n\t\tfor (int i = 1; i <= 4004; i++) {\r\n\t\t\tpascal_trgl[i][0] = 1;\r\n\t\t\tfor (int j = 1; j <= i; j++) {\r\n\t\t\t\tpascal_trgl[i][j] = (pascal_trgl[i - 1][j - 1] + pascal_trgl[i - 1][j]) % MOD;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    public static String decToBin(long val){\r\n        StringBuilder binstr=new StringBuilder();\r\n        while(val>0){\r\n            Long rem=val%2;val/=2;\r\n            binstr.append(Long.toString(rem));\r\n        }\r\n        binstr.reverse();\r\n        return new String(binstr);\r\n    }\r\n\r\n    public static long binToDec(String binstr){\r\n        long ans=0;\r\n        long mul=1;int val=0;\r\n        int n=binstr.length();\r\n        for(int i=0;i<n;i++){\r\n            if(binstr.charAt(n-1-i)=='1') val=1;\r\n            ans+=(mul*val);\r\n            val=0;\r\n            mul*=2;\r\n        }\r\n        return ans;\r\n    }\r\n\r\n    public static StringBuilder OR(long val1,long val2){\r\n        StringBuilder s=new StringBuilder();\r\n        while(val1>0 || val2>0){\r\n            long rem1=0,rem2=0;\r\n            if(val1>0) rem1=val1%2;\r\n            if(val2>0) rem2=val2%2;\r\n            val1/=2;val2/=2;\r\n            s.append(Long.toString(Math.max(rem1,rem2)));\r\n        }\r\n        s.reverse();\r\n        return s;\r\n    }\r\n\r\n    public static boolean dfsCycle(ArrayList<Integer>[] arrl,int[] vis,int st,int pr){\r\n        vis[st]=1;\r\n        int cupr=st;\r\n        for(int elm:arrl[st]){\r\n            if(vis[elm]==1 && elm!=pr){\r\n                return true;\r\n            }\r\n            else if(vis[elm]==0 && dfsCycle(arrl, vis, elm, cupr)){\r\n                return true;\r\n            }\r\n        }\r\n        vis[st]=2;\r\n        return false;\r\n    }\r\n\r\n\r\n\r\n    public static long powMOD(long n,long k){                 //n-pow(k)\r\n        if(k==1){\r\n            return n%MOD;\r\n        }\r\n        if(k==0){\r\n            return 1;\r\n        }\r\n        long val=pow(n,k/2)%MOD;\r\n        if(k%2==0)return ((val%MOD)*(val%MOD))%MOD;\r\n        else return (((val*val)%MOD)*n)%MOD;\r\n    }\r\n\r\n    public static long pow(long n,long k){                 //n-pow(k)\r\n        if(k==1){\r\n            return n;\r\n        }\r\n        if(k==0){\r\n            return 1;\r\n        }\r\n        long val=pow(n,k/2);\r\n        if(k%2==0)return ((val)*(val));\r\n        else return (((val*val))*n);\r\n    }\r\n\r\n\r\n    public static HashMap<Integer,Integer> lcm(int num){\r\n        ArrayList<Integer> arrl=new ArrayList<Integer>();\r\n        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();\r\n        while(num%2==0){\r\n\r\n            if(!map.containsKey(2)){\r\n                arrl.add(2);\r\n                map.put(2, 1);\r\n            }\r\n            else{\r\n                map.put(2,map.get(2)+1);\r\n            }\r\n            num/=2;\r\n        }\r\n        for(int i=3;i*i<=num;i+=2){\r\n            while(num%i==0){\r\n                if(!map.containsKey(i)){\r\n                    arrl.add(i);\r\n                    map.put(i, 1);\r\n                }\r\n                else{\r\n                    map.put(i,map.get(i)+1);\r\n                }\r\n                num/=i;\r\n            }\r\n        }\r\n        if(num>2){\r\n            if(!map.containsKey(num)){\r\n                arrl.add(num);\r\n                map.put(num, 1);\r\n            }\r\n            else{\r\n                map.put(num,map.get(num)+1);\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n\r\n\r\n    static long m=998244353l;\r\n    static long modInverse(long a,long m)\r\n    {\r\n        long m0 = m;\r\n        long y = 0l, x = 1l;\r\n\r\n        if (m == 1)\r\n            return 0l;\r\n\r\n        while (a > 1)\r\n        {\r\n\r\n            long q = a / m;\r\n\r\n            long t = m;\r\n\r\n            m = a % m;\r\n            a = t;\r\n            t = y;\r\n\r\n            y = x - q * y;\r\n            x = t;\r\n        }\r\n        if (x < 0)\r\n            x += m0;\r\n\r\n        return x;\r\n    }\r\n\r\n\r\n    public static int num_fact(int num){\r\n        ArrayList<Integer> arr=new ArrayList<Integer>();\r\n        int cnt=0;\r\n        for(int i=1;i*i<=num;i++){\r\n            if(num%i==0){\r\n                if(i*i==num){\r\n                    cnt+=1;\r\n                }\r\n                else{\r\n                    cnt+=2;\r\n                }\r\n            }\r\n        }\r\n        return cnt;\r\n    }\r\n\r\n\r\n    public static void sort_inc(int[][] arr,int col){        //change dimention if req\r\n        Arrays.sort(arr, new Comparator<int[]>() {\r\n            public int compare(final int[] entry1,final int[] entry2) {\r\n                if (entry1[col] < entry2[col])              //this is for dec\r\n                    return 1;\r\n                else if(entry1[col]==entry2[col])\r\n                    return 0;\r\n                else\r\n                    return -1;\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    public static boolean prime(int n){\r\n        for(int i=2;i*i<=n;i++){\r\n            if(n%i==0){\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    static long gcd(long a, long b)\r\n\t{\r\n\tif (b == 0)\r\n\t\treturn a;\r\n\treturn gcd(b, a % b);\r\n    }\r\n\r\n    public static long lcmOfTwo(int a,int b){\r\n        return a*b/gcd(a,b);\r\n    }\r\n\r\n}\r\n\r\n\r\nclass FastReader{\r\n    BufferedReader br;\r\n    StringTokenizer st;\r\n\r\n    public FastReader(){\r\n        br = new BufferedReader(new\r\n                 InputStreamReader(System.in));\r\n    }\r\n\r\n    String next(){\r\n        while (st == null || !st.hasMoreElements()){\r\n            try{\r\n                st = new StringTokenizer(br.readLine());\r\n            }\r\n            catch (IOException  e){\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        return st.nextToken();\r\n    }\r\n\r\n    int nextInt(){\r\n        return Integer.parseInt(next());\r\n    }\r\n\r\n    long nextLong(){\r\n        return Long.parseLong(next());\r\n    }\r\n\r\n    double nextDouble(){\r\n        return Double.parseDouble(next());\r\n    }\r\n\r\n    String nextLine(){\r\n        String str = \"\";\r\n        try{\r\n            str = br.readLine();\r\n        }\r\n        catch (IOException e){\r\n            e.printStackTrace();\r\n        }\r\n        return str;\r\n    }\r\n}\r\n\r\n//Pair Task in process\r\n\r\n// class Pair<D1,D2> extends Comparable{\r\n//     D1 v1;\r\n//     D2 v2;\r\n\r\n//     Pair(D1 a,D2 b){\r\n//         v1=a;v2=b;\r\n//     }\r\n// }"
}