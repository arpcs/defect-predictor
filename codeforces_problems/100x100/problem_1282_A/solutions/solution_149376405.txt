{
    "id": 149376405,
    "contestId": 1282,
    "creationTimeSeconds": 1647060303,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1282,
        "index": "A",
        "name": "Temporarily unavailable",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1282,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1577198100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <string>\n#include <algorithm>   \n#include <limits>\n#include <limits.h>\n#include <stdio.h>\n#include <vector>\n#include <stdio.h>      /* printf */\n#include <assert.h>     /* assert */\n\nusing namespace std;\n\n// Abrir en terminal integrado, para ejecutar codigo dentro de una carpeta\n// Para compilar(cambiar Tarea1 y salida): g++ -Wall TD.cpp -o salidaTD\n// Luego para ejecutar: ./salidaTD\n\n// Para determinar el largo: sizeof(array) / sizeof(naturaleza del array)\n\n// Se busca el tiempo que se esta fuera del radar\n// Punto inicial; Punto final; Base de operaciones del movil; Radio de convergencia?\n\nint main(){\n    int numero_test; int p_inicio; int p_final; int p_centro; int p_radio;\n    cin >> numero_test; // Cantidad de veces a repetir el algoritmo\n    int test_actual = 0; \n    while (numero_test > test_actual){\n        int minutos = 0;\n        cin >> p_inicio >> p_final >> p_centro >> p_radio;\n\n        if(p_final < p_inicio){\n            // hacer que p_inicio sea el menor\n            int aux_final = p_final;\n            p_final = p_inicio;\n            p_inicio = aux_final;\n        }\n\n\n        if(p_final - p_inicio == 0 ){\n            // a = b y b esta en el centro o en su radio\n            minutos = 0;\n        }else if(p_centro >= p_final && p_centro - p_radio <= p_inicio){\n            // el centro es mayor igual a B, pero el radio contiene todo\n            minutos = 0;\n        }else if (p_centro <= p_inicio && p_centro + p_radio >= p_final ){\n            // el centro es menor igual a A, pero el radio contiene todo\n            minutos = 0;\n        }else if(p_centro == p_final && p_centro - p_radio > p_inicio){\n            // el centro esta en B y contiene una parte\n            minutos+= (p_centro - p_radio) - p_inicio;\n        }else if(p_centro == p_inicio && p_centro + p_radio < p_final){\n            // el centro esta en A y contiene una parte\n            minutos+= p_final - (p_centro + p_radio);\n        }else if(p_centro > p_inicio && p_inicio > p_centro - p_radio){\n            // el centro es mayor a A pero esta en el radio\n            minutos += p_final - (p_centro + p_radio);\n        }else if(p_centro < p_inicio && p_centro + p_radio > p_inicio){\n            // el centro es menor a A pero esta en el radio\n            minutos += p_final - (p_centro + p_radio);\n        }else if(p_centro > p_final && p_centro - p_radio < p_final){\n            // el centro es mayor a B pero esta en el radio\n            minutos += (p_centro - p_radio) - p_inicio;\n        }else if (p_final > p_centro && p_final < p_centro + p_radio){\n            // el centro es menor a B y esta en el radio\n            minutos += (p_centro - p_radio) - p_inicio;\n        }else if (p_inicio <= p_centro - p_radio && p_final >= p_centro + p_radio){\n            // borrar el igual??\n            // el centro y todo su radio esta contenido entre a y b\n            minutos += p_final - p_inicio - 2*p_radio;\n        }else if(p_centro + p_radio <= p_inicio || p_final <= p_centro - p_radio){\n            // el centro y todo su radio esta fuera de a y b\n            minutos += p_final - p_inicio;\n        }\n        \n        if (minutos < 0){\n            minutos = 0;\n        }\n\n        cout << minutos << endl;\n        test_actual +=1;\n    }\n    return 0;\n}\n\n\t\t\t\t\t   \t\t\t\t \t\t\t \t \t\t \t  \t\t"
}