{
    "id": 195986461,
    "contestId": 1627,
    "creationTimeSeconds": 1677943046,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Greenscreen23"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 37683200,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<ll, ll> pii;\ntypedef vector<ll> vi;\n#define rep(i, a, b) for(ll i = (a); i < (b); ++i)\n#define repb(i, a, b) for(ll i = (b)-1; i >= (a); --i)\n#define all(x) begin(x),end(x)\n#define sz(x) (ll)(x).size()\n\nstruct ladder {\n    ll a, b, c, d, h;\n};\n\nvoid dijkstra(vector<vector<pii>>& adj, ll v0, vi& d, vi& p) {\n    d.assign(sz(adj), -1);\n    p.assign(sz(adj), -1);\n    d[v0] = 0;\n    priority_queue<pii, vector<pii>, greater<pii>> todo;\n    for (todo.emplace(0, v0); !todo.empty(); todo.pop()) {\n        auto [dist, v] = todo.top();\n        if (dist != d[v]) continue;\n\n        for (auto [u, weight] : adj[v]) {\n            if (d[u] == -1 || d[u] > d[v] + weight) {\n                d[u] = d[v] + weight;\n                p[u] = v;\n                todo.emplace(d[u], u);\n            }\n        }\n    }\n}\n\nvoid solve() {\n    ll n, m, k; cin >> n >> m >> k;\n    vi x(n);\n    rep(i, 0, n) cin >> x[i];\n    vector<ladder> ladders(k);\n    ll maxHealth = 0;\n    rep(i, 0, k) {\n        cin >> ladders[i].a >> ladders[i].b >> ladders[i].c >> ladders[i].d >> ladders[i].h;\n        ladders[i].a--;\n        ladders[i].b--;\n        ladders[i].c--;\n        ladders[i].d--;\n        maxHealth = max(maxHealth, ladders[i].h);\n    }\n    maxHealth++;\n\n    vector<vector<pii>> adj(2);\n    vector<map<ll, ll>> nodeIndex(n);\n    nodeIndex[0].emplace(0, 0);\n    nodeIndex[n - 1].emplace(m - 1, 1);\n\n    for (auto ladder = ladders.begin(); ladder != ladders.end(); ladder++) {\n        if (!nodeIndex[ladder->a].count(ladder->b)) {\n            nodeIndex[ladder->a][ladder->b] = sz(adj);\n            adj.emplace_back();\n        }\n        if (!nodeIndex[ladder->c].count(ladder->d)) {\n            nodeIndex[ladder->c][ladder->d] = sz(adj);\n            adj.emplace_back();\n        }\n\n        adj[nodeIndex[ladder->a][ladder->b]].emplace_back(nodeIndex[ladder->c][ladder->d], (ladder->c - ladder->a) * maxHealth - ladder->h);\n    }\n\n    rep(i, 0, n) {\n        for (auto node = nodeIndex[i].begin(); node != nodeIndex[i].end() && next(node) != nodeIndex[i].end(); node++) {\n            adj[node->second].emplace_back(next(node)->second, abs(node->first - next(node)->first) * x[i]);\n            adj[next(node)->second].emplace_back(node->second, abs(node->first - next(node)->first) * x[i]);\n        }\n    }\n\n    vi d, p;\n    dijkstra(adj, 0, d, p);\n    if (d[1] == -1) {\n        cout << \"NO ESCAPE\" << endl;\n        return;\n    }\n\n    cout << d[1] - maxHealth * (n-1) << endl;\n}\n\nint main() {\n    cin.tie(0)->sync_with_stdio(0);\n    cin.exceptions(cin.failbit);\n\n    ll t; cin >> t; while (t--) solve();\n    // solve();\n}\n"
}