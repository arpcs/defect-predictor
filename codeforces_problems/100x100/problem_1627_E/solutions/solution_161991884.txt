{
    "id": 161991884,
    "contestId": 1627,
    "creationTimeSeconds": 1656365663,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "mtt3615255"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 23040000,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\ntypedef long long ll;\r\ntypedef tree<int, null_type, less<>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\n#define AboTaha_on_da_code ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\r\n#define X first\r\n#define Y second\r\n\r\nconst int dx[8]={0, 0, 1, -1, 1, -1, -1, 1}, dy[8]={1, -1, 0, 0, 1, -1, 1, -1};\r\nconst ll M = 1e9+7, M2 = 998244353;\r\nconst double EPS = 1e-8;\r\n\r\nvoid burn()\r\n{\r\n    int n, m, k; cin >> n >> m >> k;\r\n    vector <vector <array<int, 4>>> ladders(n);\r\n    vector <int> cost(n);\r\n    vector <vector <int>> active(n);\r\n    for (auto &i : cost) cin >> i;\r\n    while(k--) {\r\n        int x1, y1, x2, y2, h;\r\n        cin >> x1 >> y1 >> x2 >> y2 >> h;\r\n        x1--, y1--, x2--, y2--;\r\n        ladders[x1].push_back({y1, x2, y2, h});\r\n        active[x1].push_back(y1);\r\n        active[x2].push_back(y2);\r\n    }\r\n    active[0].push_back(0);\r\n    active[n-1].push_back(m-1);\r\n    map <pair<int, int>, ll> dp;\r\n    for (int i = 0; i < n; i++) {\r\n        sort(active[i].begin(), active[i].end());\r\n        for (auto &j : active[i]) dp[{i, j}] = 2e17;\r\n    }\r\n    dp[{0, 0}] = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j+1 < active[i].size(); j++) {\r\n            auto &cur = active[i][j];\r\n            auto &nxt = active[i][j+1];\r\n            dp[{i, nxt}] = min(dp[{i, nxt}], dp[{i, cur}]+1LL*cost[i]*(nxt-cur));\r\n        }\r\n        for (int j = (int)active[i].size()-1; j > 0; j--) {\r\n            auto &cur = active[i][j-1];\r\n            auto &pre = active[i][j];\r\n            dp[{i, cur}] = min(dp[{i, cur}], dp[{i, pre}]+1LL*cost[i]*(pre-cur));\r\n        }\r\n        for (auto &j : ladders[i]) {\r\n            dp[{j[1], j[2]}] = min(dp[{j[1], j[2]}], dp[{i, j[0]}]-j[3]);\r\n        }\r\n    }\r\n    cout << (dp[{n-1, m-1}] > (int)1e17 ? \"NO ESCAPE\" : to_string(dp[{n-1, m-1}]));\r\n}\r\n\r\nint main()\r\n{\r\n    AboTaha_on_da_code\r\n\r\n    // freopen(\"self.in\", \"r\", stdin);\r\n    /*freopen(\"output.txt\", \"w\", stdout);*/\r\n\r\n    int t = 1; cin >> t;\r\n    for (int i = 1; i <= t; i++) {\r\n        burn();\r\n        cout << '\\n';\r\n    }\r\n    return 0;\r\n}"
}