{
    "id": 192574628,
    "contestId": 1627,
    "creationTimeSeconds": 1675759696,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Azimjonm0012"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 11980800,
    "source": "/// Author : Nguy\u1ec5n Th\u00e1i S\u01a1n - Ti20 - THPT chuy\u00ean L\u01b0\u01a1ng Th\u1ebf Vinh\r\r\n\r\r\n#include<bits/stdc++.h>\r\r\n//#pragma GCC optimize(\"Ofast\")\r\r\n\r\r\n#define fi first\r\r\n#define se second\r\r\n#define TASK \"test\"\r\r\n#define pb push_back\r\r\n#define EL cout << endl\r\r\n#define Ti20_ntson int main()\r\r\n#define in(x) cout << x << endl\r\r\n#define all(x) (x).begin(),(x).end()\r\r\n#define getbit(x, i) (((x) >> (i)) & 1)\r\r\n#define cntbit(x) __builtin_popcount(x)\r\r\n#define FOR(i,l,r) for (int i = l; i <= r; i++)\r\r\n#define FORD(i,l,r) for (int i = l; i >= r; i--)\r\r\n#define Debug(a,n) for (int i = 1; i <= n; i++) cout << a[i] << \" \"; cout << endl\r\r\n\r\r\nusing namespace std;\r\r\n\r\r\ntypedef long long ll;\r\r\ntypedef vector<int> vi;\r\r\ntypedef pair<int,int> vii;\r\r\ntypedef unsigned long long ull;\r\r\ntypedef vector<vector<int>> vvi;\r\r\n\r\r\nconst int N = 1e5 + 5;\r\r\nconst int oo = INT_MAX;\r\r\nconst int mod = 1e9 + 7;\r\r\nconst int d4x[4] = {-1, 0, 1, 0} , d4y[4] = {0, 1, 0, -1};\r\r\nconst int d8x[8] = {-1, -1, 0, 1, 1, 1, 0, -1}, d8y[8] = {0, 1, 1, 1, 0, -1, -1, -1};\r\r\n\r\r\nstatic struct FastInput {\r\r\n  static constexpr int BUF_SIZE = 1 << 20;\r\r\n  char buf[BUF_SIZE];\r\r\n  size_t chars_read = 0;\r\r\n  size_t buf_pos = 0;\r\r\n  FILE *in = stdin;\r\r\n  char cur = 0;\r\r\n\r\r\n  inline char get_char() {\r\r\n    if (buf_pos >= chars_read) {\r\r\n      chars_read = fread(buf, 1, BUF_SIZE, in);\r\r\n      buf_pos = 0;\r\r\n      buf[0] = (chars_read == 0 ? -1 : buf[0]);\r\r\n    }\r\r\n    return cur = buf[buf_pos++];\r\r\n  }\r\r\n\r\r\n  inline void tie(int) {}\r\r\n\r\r\n  inline explicit operator bool() {\r\r\n    return cur != -1;\r\r\n  }\r\r\n\r\r\n  inline static bool is_blank(char c) {\r\r\n    return c <= ' ';\r\r\n  }\r\r\n\r\r\n  inline bool skip_blanks() {\r\r\n    while (is_blank(cur) && cur != -1) {\r\r\n      get_char();\r\r\n    }\r\r\n    return cur != -1;\r\r\n  }\r\r\n\r\r\n  inline FastInput& operator>>(char& c) {\r\r\n    skip_blanks();\r\r\n    c = cur;\r\r\n    return *this;\r\r\n  }\r\r\n\r\r\n  inline FastInput& operator>>(string& s) {\r\r\n    if (skip_blanks()) {\r\r\n      s.clear();\r\r\n      do {\r\r\n        s += cur;\r\r\n      } while (!is_blank(get_char()));\r\r\n    }\r\r\n    return *this;\r\r\n  }\r\r\n\r\r\n  template <typename T>\r\r\n  inline FastInput& read_integer(T& n) {\r\r\n    // unsafe, doesn't check that characters are actually digits\r\r\n    n = 0;\r\r\n    if (skip_blanks()) {\r\r\n      int sign = +1;\r\r\n      if (cur == '-') {\r\r\n        sign = -1;\r\r\n        get_char();\r\r\n      }\r\r\n      do {\r\r\n        n += n + (n << 3) + cur - '0';\r\r\n      } while (!is_blank(get_char()));\r\r\n      n *= sign;\r\r\n    }\r\r\n    return *this;\r\r\n  }\r\r\n\r\r\n  template <typename T>\r\r\n  inline typename enable_if<is_integral<T>::value, FastInput&>::type operator>>(T& n) {\r\r\n    return read_integer(n);\r\r\n  }\r\r\n\r\r\n  #if !defined(_WIN32) | defined(_WIN64)\r\r\n  inline FastInput& operator>>(__int128& n) {\r\r\n    return read_integer(n);\r\r\n  }\r\r\n  #endif\r\r\n\r\r\n  template <typename T>\r\r\n  inline typename enable_if<is_floating_point<T>::value, FastInput&>::type operator>>(T& n) {\r\r\n    // not sure if really fast, for compatibility only\r\r\n    n = 0;\r\r\n    if (skip_blanks()) {\r\r\n      string s;\r\r\n      (*this) >> s;\r\r\n      sscanf(s.c_str(), \"%lf\", &n);\r\r\n    }\r\r\n    return *this;\r\r\n  }\r\r\n} fast_input;\r\r\n\r\r\n#define cin fast_input\r\r\n\r\r\nstatic struct FastOutput {\r\r\n  static constexpr int BUF_SIZE = 1 << 20;\r\r\n  char buf[BUF_SIZE];\r\r\n  size_t buf_pos = 0;\r\r\n  static constexpr int TMP_SIZE = 1 << 20;\r\r\n  char tmp[TMP_SIZE];\r\r\n  FILE *out = stdout;\r\r\n\r\r\n  inline void put_char(char c) {\r\r\n    buf[buf_pos++] = c;\r\r\n    if (buf_pos == BUF_SIZE) {\r\r\n      fwrite(buf, 1, buf_pos, out);\r\r\n      buf_pos = 0;\r\r\n    }\r\r\n  }\r\r\n\r\r\n  ~FastOutput() {\r\r\n    fwrite(buf, 1, buf_pos, out);\r\r\n  }\r\r\n\r\r\n  inline FastOutput& operator<<(char c) {\r\r\n    put_char(c);\r\r\n    return *this;\r\r\n  }\r\r\n\r\r\n  inline FastOutput& operator<<(const char* s) {\r\r\n    while (*s) {\r\r\n      put_char(*s++);\r\r\n    }\r\r\n    return *this;\r\r\n  }\r\r\n\r\r\n  inline FastOutput& operator<<(const string& s) {\r\r\n    for (int i = 0; i < (int) s.size(); i++) {\r\r\n      put_char(s[i]);\r\r\n    }\r\r\n    return *this;\r\r\n  }\r\r\n\r\r\n  template <typename T>\r\r\n  inline char* integer_to_string(T n) {\r\r\n    // beware of TMP_SIZE\r\r\n    char* p = tmp + TMP_SIZE - 1;\r\r\n    if (n == 0) {\r\r\n      *--p = '0';\r\r\n    } else {\r\r\n      bool is_negative = false;\r\r\n      if (n < 0) {\r\r\n        is_negative = true;\r\r\n        n = -n;\r\r\n      }\r\r\n      while (n > 0) {\r\r\n        *--p = (char) ('0' + n % 10);\r\r\n        n /= 10;\r\r\n      }\r\r\n      if (is_negative) {\r\r\n        *--p = '-';\r\r\n      }\r\r\n    }\r\r\n    return p;\r\r\n  }\r\r\n\r\r\n  template <typename T>\r\r\n  inline typename enable_if<is_integral<T>::value, char*>::type stringify(T n) {\r\r\n    return integer_to_string(n);\r\r\n  }\r\r\n\r\r\n  #if !defined(_WIN32) || defined(_WIN64)\r\r\n  inline char* stringify(__int128 n) {\r\r\n    return integer_to_string(n);\r\r\n  }\r\r\n  #endif\r\r\n\r\r\n  template <typename T>\r\r\n  inline typename enable_if<is_floating_point<T>::value, char*>::type stringify(T n) {\r\r\n    sprintf(tmp, \"%.17f\", n);\r\r\n    return tmp;\r\r\n  }\r\r\n\r\r\n  template <typename T>\r\r\n  inline FastOutput& operator<<(const T& n) {\r\r\n    auto p = stringify(n);\r\r\n    for (; *p != 0; p++) {\r\r\n      put_char(*p);\r\r\n    }\r\r\n    return *this;\r\r\n  }\r\r\n} fast_output;\r\r\n\r\r\n#define cout fast_output\r\r\n#define endl '\\n'\r\r\n\r\r\nconst long long INF = 1e16;\r\r\n\r\r\nint n, m, k, cnt;\r\r\nvector<array<int, 2>> Row[N];\r\r\nll dp[2 * N + 5];\r\r\nint Ladder[2 * N], Cost[N];\r\r\n\r\r\ninline void Read_Input() {\r\r\n    cin >> n >> m >> k;\r\r\n    FOR(i, 1, n) cin >> Cost[i];\r\r\n    FOR(i, 1, n) Row[i].clear();\r\r\n    cnt = 1;\r\r\n    Row[1].push_back({1, cnt});\r\r\n    dp[cnt++] = 0;\r\r\n    while (k -- ) {\r\r\n        int x, y, xx, yy, h;\r\r\n        cin >> x >> y >> xx >> yy >> h;\r\r\n        dp[cnt] = INF;\r\r\n//        cout << cnt << \" \" << x << \" \" << y << endl;\r\r\n        Row[x].push_back({y, cnt++});\r\r\n        dp[cnt] = INF;\r\r\n//        cout << cnt << \" \" << xx << \" \" << yy << endl;\r\r\n        Row[xx].push_back({yy, cnt++});\r\r\n        Ladder[cnt - 2] = h;\r\r\n    }\r\r\n    dp[cnt] = INF;\r\r\n    Row[n].push_back({m, cnt});\r\r\n}\r\r\n\r\r\ninline void Minn(ll &x, ll y) {\r\r\n    if (x > y) x = y;\r\r\n}\r\r\n\r\r\ninline void Solve() {\r\r\n    FOR(i, 1, n) {\r\r\n        sort(all(Row[i]));\r\r\n//        for (auto v : Row[i]) cout << v[0] << \" \" << v[1] << endl;\r\r\n        int sz = Row[i].size();\r\r\n        FOR(j, 1, sz - 1) {\r\r\n            Minn(dp[Row[i][j][1]], dp[Row[i][j - 1][1]] + 1ll * Cost[i] * (Row[i][j][0] - Row[i][j - 1][0]));\r\r\n//            cout << Row[i][j][1] << \" \" << dp[Row[i][j - 1][1]] + Cost[i] * (Row[i][j][0] - Row[i][j - 1][0]) << endl;\r\r\n//            cout << dp[Row[i][j][1]] << endl;\r\r\n        }\r\r\n        FORD(j, sz - 2, 0) {\r\r\n            Minn(dp[Row[i][j][1]], dp[Row[i][j + 1][1]] + 1ll * Cost[i] * (Row[i][j + 1][0] - Row[i][j][0]));\r\r\n//            cout << Row[i][j][1] << \" \" << dp[Row[i][j + 1][1]] + 1ll * Cost[i] * (Row[i][j + 1][0] - Row[i][j][0]) << endl;\r\r\n//            cout << dp[Row[i][j][1]] << endl;\r\r\n        }\r\r\n        for (auto Nos : Row[i]) {\r\r\n            int y = Nos[1];\r\r\n            if (Ladder[y] != 0 &&  dp[y] < INF)\r\r\n            Minn(dp[y + 1], dp[y] - 1ll * Ladder[y]);\r\r\n        }\r\r\n    }\r\r\n    if (dp[cnt] >= INF) cout << \"NO ESCAPE\";\r\r\n    else cout << dp[cnt]; cout << endl;\r\r\n    FOR(i, 1, cnt) Ladder[i] = 0;\r\r\n}\r\r\n\r\r\nTi20_ntson {\r\r\n//    freopen(TASK\".INP\",\"r\",stdin);\r\r\n//    freopen(TASK\".OUT\",\"w\",stdout);\r\r\n    int T = 1;\r\r\n    cin >> T;\r\r\n    while (T -- ) {\r\r\n        Read_Input();\r\r\n        Solve();\r\r\n    }\r\r\n}\r\r\n\r\r\n\r\r\n"
}