{
    "id": 222147218,
    "contestId": 1627,
    "creationTimeSeconds": 1694050043,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Liang_zsy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 17510400,
    "source": "/*\r\n\u4e00\u4e2a\u4eba\u8981\u4ece(1,1)\u70b9\u8d70\u5230(n,m)\u70b9\u3002\u4ed6\u53ea\u80fd\u5728\u540c\u4e00\u5c42\u8d70\uff0c\u6bcf\u8d70\u4e00\u95f4\u623f\u95f4\u90fd\u8981\u6263\u8840\uff1b\u4ed6\u8fd8\u80fd\u901a\u8fc7\u68af\u5b50\u8d70\uff08\u53ea\u6709\u8fd9\u6837\u624d\u80fd\u5b9e\u73b0\u8de8\u5c42\uff0c\u68af\u5b50\u5355\u5411\uff0c\u53ea\u80fd\u8d70\u4e00\u6b21\uff09\uff0c\u8d70\u4e00\u6b21\u56de\u4e00\u4e9b\u8840\u3002\u6c42\u5230(n,m)\u70b9\u65f6\u6263\u8840\u6700\u5c11\u503c\uff08\u8d1f\u503c\u8868\u793a\u52a0\u4e86\u8840\uff09\u3002\r\n\r\n\u5148\u8003\u8651\u4e0d\u7528\u68af\u5b50\uff0c\u5728\u540c\u4e00\u5c42\u8d70\uff0c\u663e\u7136\u8d70\u56de\u5934\u8def\u4e0d\u4f1a\u5f97\u5230\u6700\u4f18\u7ed3\u679c\u3002\u6240\u4ee5\u8003\u8651\u4ece\u5de6\u5230\u53f3dp\u4e00\u904d\uff0c\u4ece\u53f3\u5230\u5de6dp\u4e00\u904d\u3002\u5f97\u5230\u8be5\u5c42\u8d70\u5230\u6bcf\u4e00\u4e2a\u68af\u5b50\u70b9\uff08\u53ef\u80fd\u662f\u68af\u5b50\u8d77\u70b9\uff0c\u4e5f\u53ef\u80fd\u662f\u68af\u5b50\u7ec8\u70b9\uff09\u7684\u6700\u4f18\u8840\u91cf\u3002\r\n\u7136\u540e\u518d\u8003\u8651\u8d70\u68af\u5b50\uff0c\u904d\u5386\u8be5\u5c42\u6240\u6709\u68af\u5b50\u8d77\u70b9\uff0cdp\u5230\u5bf9\u5e94\u7684\u7ec8\u70b9\uff08\u6ce8\u610f\u68c0\u67e5\u8fd9\u4e2a\u70b9\u80fd\u5426\u8d70\u5230\uff09\r\n\u6700\u7ec8\uff0c\u7ec8\u70b9\u7684dp\u503c\u5c31\u662f\u7b54\u6848\u3002\r\n\r\n\u4e00\u4e9b\u5904\u7406\u7ec6\u8282\uff1a\r\n\u628a\u8d77\u70b9\u548c\u7ec8\u70b9\u90fd\u770b\u6210\u68af\u5b50\u7ec8\u70b9\uff0c\u8fd9\u6837dp\u7684\u65f6\u5019\u5c31\u80fd\u904d\u5386\u5230\uff0c\u5e76\u4e14\u4e0d\u4f1a\u53d1\u751f\u68af\u5b50dp\u8f6c\u79fb\u3002\r\n\u7528FOR\u7684\u65f6\u5019\uff0c\u9047\u5230\u4e0d\u662fint\u7c7b\u578b\u7684\u503c\uff08\u6bd4\u5982f[i].size()\u662ft_size\u7c7b\u578b\uff09\uff0c\u5fc5\u987b\u5f3a\u5236\u8f6c\u6362\u6210int\uff0c\u5426\u5219\u4f1a\u51fa\u9519\u3002\r\n*/\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define debug cout<<\"!!!\"<<endl;\r\n#define int long long \r\n#define FOR(i, a, b) for (int i = (a); i <= (b); i++)\r\n#define ROF(i, a, b) for (int i = (a); i >= (b); i--)\r\nconst int N = 2e5+5, inf=-1e13;\r\nstruct node{\r\n    int y,id,to,cost;\r\n    inline friend bool operator<(const node&a,const node&b){return a.y<b.y;}\r\n};\r\nvector<node> f[N];\r\nint n,m,k,tot;\r\nint dp[N], a[N];\r\ninline void getmx(int&a,int b){a=max(a,b);}\r\nint gmax(int a){\r\n if(a<0) return 0;\r\n else return a;\r\n}\r\ninline void solve(){\r\n    cin>>n>>m>>k, tot=0;//k:\u7535\u68af\u6570\r\n    FOR(i,1,n) cin>>a[i], f[i].clear(); //\u8f93\u5165\u540c\u4e00\u5c42\u7684\u6263\u8840\u6570\uff0c\u6e05\u7a7a\u56fe\r\n    f[1].push_back({1,++tot,-1,0}); //\u8d77\u70b9\r\n    FOR(i,1,k){\r\n        int a,b,c,d,h; cin>>a>>b>>c>>d>>h;\r\n        f[a].push_back({b,++tot,tot+1,h}); //\u68af\u5b50\u8d77\u70b9 \u70b9(a,b),\u697c\u5c42\u5e8f\u53f7\uff0c\u662f\u68af\u5b50\u7684\u8d77\u70b9-\u53ef\u4ee5\u5230\u8fbe\u7684\u697c\u5c42\u5e8f\u53f7\uff0c\u83b7\u5f97\u7684\u5065\u5eb7\u503c\r\n        f[c].push_back({d,++tot,-1,0});    //\u68af\u5b50\u7ec8\u70b9\r\n    }\r\n    f[n].push_back({m,++tot,-1,0}); //\u7ec8\u70b9\r\n    FOR(i,1,tot+3) dp[i]=inf; dp[1]=0; //\u521d\u59cb\u5316\r\n \r\n    for( int i=1;i<=n;++i) {\r\n        sort(f[i].begin(), f[i].end()); //\u6309\u5217\u5750\u6807\u6392\u5e8f\uff08\u540c\u4e00\u697c\u5c42\uff0c\u7531\u5de6\u81f3\u53f3\uff09\r\n        FOR(j,1,(int)f[i].size()-1) getmx(dp[f[i][j].id], dp[f[i][j-1].id]-(f[i][j].y-f[i][j-1].y)*a[i]); //\u4ece\u5de6\u5230\u53f3dp\r\n        //ROF(j,(int)f[i].size()-2, 0) getmx(dp[f[i][j].id], dp[f[i][j+1].id]-(f[i][j+1].y-f[i][j].y)*a[i]); //\u4ece\u53f3\u5230\u5de6dp\r\n        for(int j=(int)f[i].size()-2;j>=0; j--) getmx(dp[f[i][j].id], dp[f[i][j+1].id]-(f[i][j+1].y-f[i][j].y)*a[i]);\r\n        FOR(j,0,(int)f[i].size()-1){\r\n            if(dp[f[i][j].id]!=inf && f[i][j].to!=-1) //\u662f\u68af\u5b50\u8d77\u70b9\uff0c\u5e76\u4e14\u53ef\u4ee5\u8d70\u5230\u8fd9\u4e2a\u70b9\uff0c\u624d\u80fd\u8fdb\u884c\u68af\u5b50dp\r\n                getmx(dp[f[i][j].to], dp[f[i][j].id]+f[i][j].cost);\r\n        }\r\n    }\r\n    if(dp[tot]==inf) cout<<\"NO ESCAPE\"<<'\\n';\r\n    else cout<<-dp[tot]<<'\\n';//dp\u8ba1\u7b97\u7684\u662f\u83b7\u5f97\u7684\u5065\u5eb7\u503c\uff0c\u9898\u76ee\u95ee\u7684\u662f\u635f\u5931\uff0c\u6240\u4ee5\u9700\u8981\u53d8\u4e3a\u76f8\u53cd\u6570\r\n}\r\n\r\nsigned main(){\r\n\tios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\r\n    int T; cin>>T; while(T--) solve();\r\n    return 0;\r\n} "
}