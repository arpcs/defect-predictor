{
    "id": 145548571,
    "contestId": 1627,
    "creationTimeSeconds": 1644243208,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Grzmot"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 373,
    "memoryConsumedBytes": 24166400,
    "source": "//#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math\")\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt,tune=native\")\n#include <bits/stdc++.h>\n\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define all(x) (x).begin(),(x).end()\n\nusing namespace std;\n\ntypedef long long LL;\ntypedef unsigned long long uLL;\ntypedef pair<int, int> PII;\ntypedef vector < int > VI;\ntypedef double D;\n\nconst int MN = 100005, inf = 1000000005, mod = 1000000007;\nconst LL INF = 1000000000000000005LL;\n\nint cena[MN];\nmap < PII, LL > odp;\nmap < PII, VI > drabiny;\nVI ciekawe[MN];\nPII pocz[MN];\nint H[MN];\n\n\nvoid solve()\n{\n\tint n, m, k;\n\tscanf(\"%d%d%d\", &n, &m, &k);\n\tfor(int i = 1; i <= n; ++i)\n\t\tscanf(\"%d\", &cena[i]);\n\tfor(int i = 1; i <= k; ++i)\n\t{\n\t\tint a, b, c, d, h;\n\t\tscanf(\"%d%d%d%d%d\", &a, &b, &c, &d, &h);\n\t\tH[i] = h;\n\t\tpocz[i] = {a, b};\n\t\tdrabiny[{c, d}].pb(i);\n\t\tciekawe[c].pb(d);\n\t\tciekawe[a].pb(b);\n\t}\n\tciekawe[n].pb(m);\n\tciekawe[1].pb(1);\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tsort(all(ciekawe[i]));\n\t\tciekawe[i].erase(unique(all(ciekawe[i])), ciekawe[i].end());\n\t}\n\tfor(auto c : ciekawe[1])\n\t\todp[{1, c}] = 1LL * cena[1] * (c - 1);\n\tfor(int i = 2; i <= n; ++i)\n\t{\n\t\tLL best_left = INF;\n\t\tfor(auto c : ciekawe[i])\n\t\t{\n\t\t\tLL o = best_left + 1LL * cena[i] * c;\n\t\t\tfor(auto d : drabiny[{i, c}])\n\t\t\t\to = min(o, odp[pocz[d]] - 1LL * H[d]);\n\t\t\todp[{i, c}] = o;\n\t\t\tbest_left = min(best_left, o - 1LL * cena[i] * c);\n\t\t}\n\t\treverse(all(ciekawe[i]));\n\t\tLL best_right = INF;\n\t\tfor(auto c : ciekawe[i])\n\t\t{\n\t\t\tLL o = best_right - 1LL * cena[i] * c;\n\t\t\todp[{i, c}] = min(odp[{i, c}], o);\n\t\t\tbest_right = min(best_right, odp[{i, c}] + 1LL * cena[i] * c);\n\t\t}\n\t}\n\tif(odp[{n, m}] >= (LL)(1e16))\n\t\tprintf(\"NO ESCAPE\\n\");\n\telse\n\t\tprintf(\"%lld\\n\", odp[{n, m}]);\n\todp.clear();\n\tdrabiny.clear();\n\tfor(int i = 1; i <= n; ++i)\n\t\tciekawe[i].clear();\n}\n\nint main()\n{\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--)\n\t\tsolve();\n}\n"
}