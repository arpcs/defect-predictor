{
    "id": 233666705,
    "contestId": 1627,
    "creationTimeSeconds": 1700559411,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "IAmiron"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 623,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <map>\r\n#include <unordered_map>\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\nint main() {\r\n    //ios_base::sync_with_stdio(false);cin.tie(nullptr);\r\n    int t; cin >> t;\r\n    while (t--) {\r\n        ll N, M, K; cin >> N >> M >> K;\r\n        unordered_map<ll, ll> mc;\r\n        vector<ll> x(N);\r\n        for (auto &i: x){\r\n            cin >> i;\r\n        }\r\n        vector<tuple<ll, ll, ll> > vtk;\r\n        vector<bool> up(N, false);\r\n        up[0] = true;\r\n        vector<ll> to;\r\n        for (ll i = 0; i < K; ++i){\r\n            ll a, b, c, d, h; cin >> a >> b >> c >> d >> h;\r\n            --a, --b, --c, --d;\r\n            mc[a * M + b] = LLONG_MAX;\r\n            if (a == 0){\r\n                mc[b] = x[0] * b;\r\n            }\r\n            vtk.emplace_back(a * M + b, c * M + d, h);\r\n            mc[c * M + d] = LLONG_MAX;\r\n            to.push_back(a * M + b);\r\n            to.push_back(c * M + d);\r\n        }\r\n        sort(to.begin(), to.end());\r\n        sort(vtk.begin(), vtk.end());\r\n        for (auto &k: vtk){\r\n            auto [f, z, h] = k;\r\n            if (up[f / M]) {\r\n                mc[z] = min(mc[z], mc[f] - h);\r\n                ll l = lower_bound(to.begin(), to.end(), z / M * M) - to.begin();\r\n                ll r = lower_bound(to.begin(), to.end(), (z / M + 1) * M) - to.begin();\r\n                for (ll i = l; i < r; ++i) {\r\n                    mc[to[i]] = min(mc[to[i]], x[z / M] * abs(z - to[i]) + mc[z]);\r\n                }\r\n                up[z / M] = true;\r\n            }\r\n        }\r\n        ll ans = LLONG_MAX;\r\n        ll l = lower_bound(to.begin(), to.end(), (N - 1) * M) - to.begin();\r\n        for (ll i = l; i < to.size(); ++i){\r\n            ans = min(ans, x[N - 1] * abs(to[i] - N * M + 1) + mc[to[i]]);\r\n        }\r\n        if (ans != LLONG_MAX){\r\n            cout << ans << \"\\n\";\r\n        }else{\r\n            cout << \"NO ESCAPE\\n\";\r\n        }\r\n    }\r\n    return 0;\r\n}"
}