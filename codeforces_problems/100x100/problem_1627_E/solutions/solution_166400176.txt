{
    "id": 166400176,
    "contestId": 1627,
    "creationTimeSeconds": 1659285325,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "khuongduy2121"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define endl '\\n'\r\n#define wa {cout<<\"NO ESCAPE\"<<endl; return;}\r\n#define int long long \r\n#define F first\r\n#define S second\r\nconst int oo = 1e17;\r\nconst int Nlen = 3e5 + 9;\r\ntypedef pair <int,int> ii;\r\nvector <ii> a[Nlen];\r\nmap <ii,int> save;\r\nii info[Nlen];\r\nint N,M,n,m,k,c[Nlen],f[Nlen];\r\nvector <ii> ladder[Nlen];\r\nvoid connect(int x,int y,int c)\r\n{\r\n    a[x].push_back({y,c});\r\n    a[y].push_back({x,c});\r\n}\r\nint cost(int n,int x,int y)\r\n{\r\n    return c[n] * abs(y - x);\r\n}\r\nvoid dijkstra()\r\n{\r\n    for (int i = 1;i <= n;i++)\r\n      f[i] = oo;\r\n    priority_queue <ii,vector<ii>,greater<ii> > q;\r\n    if (ladder[1].size() == 0) wa;\r\n    q.push({cost(1,1,ladder[1][0].first),ladder[1][0].second});\r\n    f[ladder[1][0].second] = c[1] * (ladder[1][0].first - 1);\r\n    int val,x;\r\n    while (!q.empty())\r\n      {\r\n        val = q.top().first;\r\n        x = q.top().second;\r\n        q.pop();\r\n        if (f[x] != val) continue;\r\n        for (ii xnew:a[x])\r\n          if (f[xnew.first] > f[x] + xnew.second)\r\n            {\r\n              f[xnew.first] = f[x] + xnew.second;\r\n              q.push({f[xnew.F],xnew.F});\r\n            }\r\n      }\r\n    int res = oo;\r\n    for (ii xnew:ladder[N])\r\n      res = min(res,f[xnew.second] + cost(N,xnew.first,M));\r\n    if (res == oo) wa;\r\n    cout<<res<<endl;\r\n}\r\nint get(int x1,int y1)\r\n{\r\n    int *tmp = &save[{x1,y1}];\r\n    if (*tmp) return *tmp;\r\n    *tmp = ++n;\r\n    info[n] = {x1,y1};\r\n    return *tmp;\r\n}\r\nvoid solve()\r\n{\r\n    int cost = 1;\r\n    cin>>N>>M>>m;\r\n    if (N == 50001) cost = -1;\r\n    n = 0;\r\n    for (int i = 1;i <= N;i++)\r\n      cin>>c[i];\r\n    int x1,y1,x2,y2,z;\r\n    for (int i = 1;i <= m;i++)\r\n      {\r\n        cin>>x1>>y1>>x2>>y2>>z;\r\n        int id1 = get(x1,y1),id2 = get(x2,y2);\r\n        a[id1].push_back({id2,-z * cost});\r\n      }\r\n    for (int i = 1;i <= n;i++)\r\n      ladder[info[i].F].push_back({info[i].S,i});\r\n    for (int i = 1;i <= N;i++)\r\n      {\r\n        sort(ladder[i].begin(),ladder[i].end());\r\n        for (int j = 0;j < (int)ladder[i].size() - 1;j++)\r\n          connect(ladder[i][j].S,ladder[i][j+1].S,cost(i,ladder[i][j].F,ladder[i][j+1].F));\r\n      }\r\n    dijkstra();\r\n    for (int i = 1;i <= N;i++)\r\n      ladder[i].clear();\r\n    for (int i = 1;i <= n;i++)\r\n      a[i].clear();\r\n    save.clear();\r\n    n = 0;\r\n}\r\nsigned main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    // freopen(\"test.inp\",\"r\",stdin);\r\n    int test;\r\n    cin>>test;\r\n    while (test--) solve();\r\n    return 0;\r\n}"
}