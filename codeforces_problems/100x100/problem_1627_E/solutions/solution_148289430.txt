{
    "id": 148289430,
    "contestId": 1627,
    "creationTimeSeconds": 1646400924,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "LMXZ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 1669,
    "memoryConsumedBytes": 51712000,
    "source": "#include <bits/stdc++.h>\r\n#define all(x) (x).begin(), (x).end()\r\n#define endl '\\n'\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\nconst ll INF = 0x3f3f3f3f3f3f3f3fLL;\r\n\r\nvector<ll> spfa(const vector<vector<pair<int, ll>>>& g, int s) {\r\n    queue<int> que;\r\n    int n = g.size();\r\n    vector<ll> res(n, INF);\r\n    vector<bool> vis(n);\r\n    vis[s] = true;\r\n    que.push(s);\r\n    res[s] = 0;\r\n    while (que.size()) {\r\n        int u = que.front();\r\n        que.pop();\r\n        vis[u] = false;\r\n        for (auto [v, d] : g[u]) {\r\n            if (res[v] > res[u] + d) {\r\n                res[v] = res[u] + d;\r\n                if (!vis[v]) {\r\n                    que.push(v);\r\n                    vis[v] = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nvoid testc() {\r\n    map<pair<int, int>, int> lsh;\r\n    int lc = 0;\r\n    auto mp = [&](const pair<int, int>& p) -> int {\r\n        if (!lsh.count(p))\r\n            lsh[p] = lc++;\r\n        return lsh[p];\r\n    };\r\n\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n\r\n    vector dmg(n, 0LL);\r\n    for (auto& i : dmg)\r\n        cin >> i;\r\n    mp({0, 0});\r\n    mp({n - 1, m - 1});\r\n    vector<set<int>> pp(n);\r\n    pp[0].insert(0);\r\n    pp[n - 1].insert(m - 1);\r\n    vector g(n * 10, vector<pair<int, ll>>{});\r\n    while (k--) {\r\n        int x1, y1, x2, y2, h;\r\n        cin >> x1 >> y1 >> x2 >> y2 >> h;\r\n        x1--, x2--, y1--, y2--;\r\n        int u = mp({x1, y1}), v = mp({x2, y2});\r\n        g[u].emplace_back(v, -h);\r\n        pp[x1].insert(y1);\r\n        pp[x2].insert(y2);\r\n    }\r\n\r\n    for (int x = 0; x < n; x++) {\r\n        int y2 = -1;\r\n        for (int y : pp[x]) {\r\n            if (y2 != -1) {\r\n                int u = mp({x, y}), v = mp({x, y2});\r\n                g[u].emplace_back(v, dmg[x] * abs(y2 - y));\r\n                g[v].emplace_back(u, dmg[x] * abs(y2 - y));\r\n            }\r\n            y2 = y;\r\n        }\r\n    }\r\n\r\n    auto ans = spfa(g, 0);\r\n\r\n    if (ans[1] > INF / 2)\r\n        cout << \"NO ESCAPE\";\r\n    else\r\n        cout << ans[1];\r\n}\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        testc();\r\n        if (t)\r\n            cout << endl;\r\n    }\r\n    return 0;\r\n}"
}