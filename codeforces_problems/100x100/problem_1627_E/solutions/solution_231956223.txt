{
    "id": 231956223,
    "contestId": 1627,
    "creationTimeSeconds": 1699456215,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "NourElleithy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 467,
    "memoryConsumedBytes": 18227200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define int long long\r\n\r\nconst int INF = 1e17;\r\n\r\nvoid solve() {\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    vector<int> x1(k+1), x2(k+2), h(k+1), d(k+2, INF), c(n);\r\n    vector<vector<int>> y1(n), y2(n);\r\n    for (auto &i: c) cin >> i;\r\n    for (int i = 0; i < k; ++i) {\r\n        int s, e;\r\n        cin >> s >> x1[i] >> e >> x2[i] >> h[i];\r\n        --s, --x1[i], --e, --x2[i];\r\n        y1[s].push_back(i), y2[e].push_back(i);\r\n    }\r\n    x1[k] = m-1, x2[k+1] = 0, y1[n-1].push_back(k), y2[0].push_back(k+1), d[k+1] = 0;\r\n    for (int l = 0; l < n; ++l) {\r\n        set<pair<int, int>> s;\r\n        set<pair<pair<int, int>, int>> q;\r\n        for (auto &i: y1[l]) s.emplace(x1[i], i), q.insert({{d[i], x1[i]}, i});\r\n        for (auto &i: y2[l]) s.emplace(x2[i], i), q.insert({{d[i], x2[i]}, i});\r\n        while (!q.empty()) {\r\n            int u = q.begin()->second, xu = q.begin()->first.second;\r\n            q.erase(q.begin());\r\n            auto nxt = s.find({xu, u}), lst = nxt;\r\n            int v, xv;\r\n            if (lst != s.begin()) {\r\n                v = (--lst)->second, xv = lst->first;\r\n                int nd = d[u] + abs(xu - xv) * c[l];\r\n                if (nd < d[v]) q.erase({{d[v], xv}, v}), d[v] = nd, q.insert({{d[v], xv}, v});\r\n            }\r\n            if (++nxt != s.end()) {\r\n                v = nxt->second, xv = nxt->first;\r\n                int nd = d[u] + abs(xu - xv) * c[l];\r\n                if (nd < d[v]) q.erase({{d[v], xv}, v}), d[v] = nd, q.insert({{d[v], xv}, v});\r\n            }\r\n        }\r\n        for (auto& i : y1[l])\r\n            if (d[i] < INF) d[i] -= h[i];\r\n    }\r\n    if (d[k] < INF) cout << d[k] << '\\n';\r\n    else cout << \"NO ESCAPE\\n\";\r\n}\r\n\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    int qt = 1;\r\n    cin >> qt;\r\n    for (int q = 1; q <= qt; q++) {\r\n        solve();\r\n    }\r\n}"
}