{
    "id": 230001785,
    "contestId": 1627,
    "creationTimeSeconds": 1698406444,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "__builtin_ratkiller"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 20889600,
    "source": "#include<bits/stdc++.h>\r\n#define all(a) a.begin(),a.end()\r\n#define rev(a) a.rbegin(),a.rend()\r\n#define endl '\\n'\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst ll N = 1000000007;\r\nconst ll INF = 1000000000000000000;\r\n\r\nstruct edge{\r\n    ll x, y, z, w;\r\n};\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    //NO NEED TO CODE WITHOUT A COMPLETE ALGORITHM!!!\r\n    //THINK OF WHAT THE PROBLEM DEMANDS!!!\r\n\r\n    ll n, m, k, t; cin >> t;\r\n    while(t--) {\r\n        cin >> n >> m >> k;\r\n        vector<ll> pts[n + 1], xx(n + 1), h(k);\r\n        for(int i = 1; i <= n; i++) cin >> xx[i];\r\n\r\n        vector<vector<ll>> dist(n + 1);\r\n        vector<edge> ed[n + 1];\r\n\r\n        for(int i = 0; i < k; i++) {\r\n            ll a, b, c, d;\r\n            cin >> a >> b >> c >> d >> h[i];\r\n            pts[a].push_back(b);\r\n            pts[c].push_back(d); \r\n\r\n            ed[c].push_back({d, a, b, h[i]});\r\n        }\r\n\r\n\r\n        pts[1].push_back(1);\r\n        pts[n].push_back(m);\r\n\r\n        for(int i = 1; i <= n; i++) {\r\n            sort(all(pts[i]));\r\n            dist[i].resize(pts[i].size(), INF);\r\n        }\r\n\r\n        dist[1][0] = 0;\r\n\r\n        for(int i = 1; i <= n; i++) {\r\n            for(auto [d, a, b, h]: ed[i]) {\r\n                ll y = lower_bound(all(pts[a]), b) - pts[a].begin();\r\n                ll x = lower_bound(all(pts[i]), d) - pts[i].begin();\r\n                if(dist[a][y] != INF) dist[i][x] = min(dist[i][x], dist[a][y] - h);\r\n            }\r\n\r\n            for(int j = 1; j < pts[i].size(); j++) {\r\n                ll x = pts[i][j], y = pts[i][j - 1];\r\n                dist[i][j] = min(dist[i][j], dist[i][j - 1] + abs(x - y) * xx[i]);\r\n            }\r\n\r\n            for(int j = pts[i].size() - 2; j >= 0; j--) {\r\n                ll x = pts[i][j], y = pts[i][j + 1];\r\n                dist[i][j] = min(dist[i][j], dist[i][j + 1] + abs(x - y) * xx[i]);\r\n            }\r\n            \r\n        }\r\n\r\n        if(dist[n].back() == INF) cout << \"NO ESCAPE\\n\";\r\n        else cout << dist[n].back() << endl;\r\n\r\n\r\n    }\r\n\r\n    return 0;\r\n}"
}