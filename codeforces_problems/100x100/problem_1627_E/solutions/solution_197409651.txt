{
    "id": 197409651,
    "contestId": 1627,
    "creationTimeSeconds": 1678813625,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Dominater069"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 295,
    "memoryConsumedBytes": 28364800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n//#define int long long\r\n#define INF (long long)1e18\r\n#define f first\r\n#define s second\r\n\r\nmt19937_64 RNG(chrono::steady_clock::now().time_since_epoch().count());\r\nint n, m, k;\r\nconst int N = 1e5 + 69;\r\nset <int> imp[N];\r\nmap <pair<int, int> , int> mp;\r\nvector <pair<int, long long>> adj[2*N]; \r\nint xx[N], arr[N][5], st[N], en[N];\r\nlong long dp[2*N];\r\nlong long god[2*N];\r\n\r\nvoid Solve() \r\n{\r\n    cin >> n >> m >> k;\r\n    \r\n    imp[1].insert(1);\r\n    imp[n].insert(m);\r\n    \r\n    for (int i = 1; i <= n; i++){\r\n        cin>>xx[i];\r\n    }\r\n    \r\n    for (int i = 1; i <= k; i++){\r\n        for (int j = 0; j < 5 ; j++) \r\n        cin >> arr[i][j];\r\n        \r\n        imp[arr[i][0]].insert(arr[i][1]);\r\n        imp[arr[i][2]].insert(arr[i][3]);\r\n    }\r\n    \r\n    int ptr = 0;\r\n    for (int i = 1; i <= n; i++){\r\n        int last = -1;\r\n        st[i] = ptr + 1;\r\n        for (auto x: imp[i]){\r\n            if (last != -1){\r\n                god[ptr] = 1LL * (x-last) * xx[i];\r\n            }\r\n            \r\n            mp[{i, x}] = ++ptr;\r\n            last = x;\r\n        }\r\n        en[i] = ptr;\r\n    }\r\n    \r\n    for (int i = 1; i <= k; i++){\r\n        int loc1 = mp[{arr[i][0], arr[i][1]}];\r\n        int loc2 = mp[{arr[i][2], arr[i][3]}];\r\n        \r\n        adj[loc1].push_back({loc2, -arr[i][4]});\r\n    }\r\n    \r\n    for (int i = 1; i <= ptr; i++) \r\n    dp[i] = INF;\r\n    dp[1] = 0;\r\n    \r\n    for (int i = 1; i <= n; i++){\r\n        for (int j = st[i] + 1; j <= en[i]; j++){\r\n            dp[j] = min(dp[j], dp[j-1] + god[j-1]);\r\n        }\r\n        \r\n        for (int j = en[i] - 1; j >= st[i]; j--){\r\n            dp[j] = min(dp[j], dp[j + 1] + god[j]);\r\n        }\r\n        \r\n        for (int j = st[i]; j <= en[i]; j++){\r\n            for (auto [v, w]: adj[j]){\r\n                dp[v] = min(dp[v], dp[j] + w);\r\n            }\r\n        }\r\n    }\r\n    \r\n    if (dp[ptr] >= 1e15) cout << \"NO ESCAPE\\n\";\r\n    else cout << dp[ptr] << \"\\n\";\r\n    \r\n    for (int i = 1; i <= n; i++) imp[i].clear();\r\n    for (int i = 1; i <= ptr; i++) adj[i].clear();\r\n}\r\n\r\nint32_t main() \r\n{\r\n    auto begin = std::chrono::high_resolution_clock::now();\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int t = 1;\r\n    cin >> t;\r\n    for(int i = 1; i <= t; i++) \r\n    {\r\n        //cout << \"Case #\" << i << \": \";\r\n        Solve();\r\n    }\r\n    auto end = std::chrono::high_resolution_clock::now();\r\n    auto elapsed = std::chrono::duration_cast<std::chrono::nanoseconds>(end - begin);\r\n    cerr << \"Time measured: \" << elapsed.count() * 1e-9 << \" seconds.\\n\"; \r\n    return 0;\r\n}"
}