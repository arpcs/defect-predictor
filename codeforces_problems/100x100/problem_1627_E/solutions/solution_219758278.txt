{
    "id": 219758278,
    "contestId": 1627,
    "creationTimeSeconds": 1692603341,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "E",
        "name": "Not Escaping",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "data structures",
            "dp",
            "implementation",
            "shortest paths",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Anthony_Liu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n//#pragma GCC optimize(\"Ofast\")\r\n//#pragma GCC target(\"avx2\")\r\n//#pragma GCC optimization (\"unroll-loops\")\r\n#define f first\r\n#define s second\r\n#define ll long long\r\n#define pb push_back\r\n#define pi pair <int,int>\r\n#define vi vector <int>\r\n#define size(x) (int)(x).size()\r\n#define all(x) x.begin(), x.end()\r\nvoid setIO(string name = \"\") {\r\n\tcin.tie(0)->sync_with_stdio(0);\r\n\tif (size(name)) {\r\n\t\tfreopen((name + \".in\").c_str(), \"r\", stdin);\r\n\t\tfreopen((name + \".out\").c_str(), \"w\", stdout);\r\n\t}\r\n}\r\n\r\nstruct ladder {\r\n\tint he;\r\n\tint roomf;\r\n\tint floort;\r\n\tint roomt;\r\n};\r\n\r\nint T, N, M, K;\r\n\r\nint main()\r\n{\r\n\tsetIO();\r\n\tcin >> T;\r\n\twhile (T--) {\r\n\t\tcin >> N >> M >> K;\r\n\t\tvi x(N + 1);\r\n\t\tvector <vector<ladder>> adj(N + 1);\r\n\t\tmap <pi, int> dist;\r\n\t\t\r\n\t\tfor (int i = 1; i <= N; i++) cin >> x[i];\r\n\t\tfor (int i = 1; i <= K; i++) {\r\n\t\t\tint a, b, c, d, h;\r\n\t\t\tcin >> a >> b >> c >> d >> h;\r\n\t\t\tadj[a].pb({h, b, c, d});\r\n\t\t}\r\n\t\tadj[N].pb({M, M, M, M});\r\n\t\t\r\n\t\tset <pair<int, pi>> se;\r\n\t\tse.insert({0, {1, 1}});\r\n\t\tdist[{1, 1}] = 0;\r\n\t\t\r\n\t\twhile (!se.empty()) {\r\n\t\t\tauto k = *(se.begin());\r\n\t\t\tauto u = k.s;\r\n\t\t\tse.erase(se.begin());\r\n\t\t\t\r\n\t\t\tif (u.f == N && u.s == M) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor (auto v : adj[u.f]) {\r\n\t\t\t\tint ni, nj, cost;\r\n\t\t\t\tif (u.s == v.roomf) {\r\n\t\t\t\t\tni = v.floort;\r\n\t\t\t\t\tnj = v.roomt;\r\n\t\t\t\t\tcost = 0 - v.he;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tni = u.f;\r\n\t\t\t\t\tnj = v.roomf;\r\n\t\t\t\t\tcost = x[u.f] * (abs(v.roomf - u.s));\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif (!dist.count({ni, nj}) || dist[{ni, nj}] > dist[{u.f, u.s}] + cost) {\r\n\t\t\t\t\tdist[{ni, nj}] = dist[{u.f, u.s}] + cost;\r\n\t\t\t\t\tse.insert({dist[{ni, nj}], {ni, nj}});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif (!dist.count({N, M})) cout << \"NO ESCAPE\\n\";\r\n\t\telse cout << dist[{N, M}] << '\\n';\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}