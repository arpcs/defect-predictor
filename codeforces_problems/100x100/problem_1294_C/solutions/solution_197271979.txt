{
    "id": 197271979,
    "contestId": 1294,
    "creationTimeSeconds": 1678726353,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1294,
        "index": "C",
        "name": "Product of Three Numbers",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1294,
        "members": [
            {
                "handle": "arvindf232"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1579703700
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 0,
    "source": "// 2023.03.13 at 16:46:49 GMT\r\nimport java.io.BufferedInputStream\r\nimport java.io.File\r\nimport java.io.PrintWriter\r\nimport kotlin.system.measureTimeMillis\r\nimport java.util.TreeMap\r\nimport java.util.TreeSet\r\nimport kotlin.math.sqrt\r\nimport kotlin.random.Random\r\nimport kotlin.random.nextInt\r\n\r\n// 1. Modded\r\nconst val p = 1000000007L\r\nconst val pI = p.toInt()\r\nfun Int.adjust():Int{ if(this >= pI){ return this  - pI }else if (this < 0){ return this + pI };return this }\r\nfun Int.snap():Int{ if(this >= pI){return this - pI} else return this}\r\ninfix fun Int.mm(b:Int):Int{ return ((this.toLong() * b) % pI).toInt() }\r\ninfix fun Int.mp(b:Int):Int{ val ans = this + b;return if(ans >= pI) ans - pI else ans }\r\ninfix fun Int.ms(b:Int):Int{ val ans = this - b;return if(ans < 0) ans + pI else ans }\r\nfun Int.inverse():Int = intPow(this,pI-2,pI)\r\ninfix fun Int.modDivide(b:Int):Int{ return this mm (b.inverse()) }\r\nfun intPow(x:Int,e:Int,m:Int):Int{\r\n    var X = x ; var E =e ; var Y = 1\r\n    while(E > 0){\r\n        if(E and 1 == 0){\r\n            X = ((1L * X * X) % m).toInt()\r\n            E = E shr 1\r\n        }else{\r\n            Y = ((1L * X * Y) % m).toInt()\r\n            E -= 1\r\n        }\r\n    }\r\n    return Y\r\n}\r\n// 2. DP initial values\r\nconst val plarge = 1_000_000_727\r\nconst val nlarge = -plarge\r\nconst val phuge = 2_727_000_000_000_000_000L\r\nconst val nhuge = -phuge\r\n// 3. convenience conversions\r\nval Boolean.chi:Int get() = if(this) 1 else 0 //characteristic function\r\nval BooleanArray.chiarray:IntArray get() = IntArray(this.size){this[it].chi}\r\nval Char.code :Int get() = this.toInt() -  'a'.toInt()\r\n//3. hard to write stuff\r\nfun IntArray.put(i:Int,v:Int){ this[i] = (this[i] + v).adjust() }\r\nval mint:MutableList<Int> get() = mutableListOf<Int>()\r\nval mong:MutableList<Long> get() = mutableListOf<Long>()\r\nval mchar:MutableList<Char> get() = mutableListOf()\r\n//4. more outputs\r\nfun List<Char>.conca():String = this.joinToString(\"\")\r\nval CharArray.conca :String get() = this.joinToString(\"\")\r\nval IntArray.conca :String get() = this.joinToString(\" \")\r\n@JvmName(\"concaInt\")\r\nfun List<Int>.conca():String = this.joinToString(\" \")\r\nval LongArray.conca:String get() = this.joinToString(\" \")\r\n@JvmName(\"concaLong\")\r\nfun List<Long>.conca():String = this.joinToString(\" \")\r\n//5. Pair of ints\r\nconst val longmask = (1L shl 32) - 1\r\nfun makepair(a:Int, b:Int):Long = (a.toLong() shl 32) xor (longmask and b.toLong())\r\nval Long.first get() = (this ushr 32).toInt()\r\nval Long.second get() = this.toInt()\r\n//6. strings\r\nval String.size get() = this.length\r\nconst val randCount = 100\r\n//7. bits\r\nfun Int.has(i:Int):Boolean = (this and (1 shl i) != 0)\r\nfun Long.has(i:Int):Boolean = (this and (1L shl i) != 0L)\r\n//8 TIME\r\ninline fun TIME(f:()->Unit){\r\n    val t = measureTimeMillis(){\r\n        f()\r\n    }\r\n    println(\"$t ms\")\r\n}\r\n//9.ordered pair\r\nfun order(a:Int, b:Int):Pair<Int,Int>{\r\n    return Pair(minOf(a,b), maxOf(a,b))\r\n}\r\n//10 rand\r\nfun rand(x:Int) = Random.nextInt(x)\r\nfun rand(x:IntRange) = Random.nextInt(x)\r\nval coin:Boolean get() = Random.nextBoolean()\r\n//11 typing issues, rename\r\ntypealias ints = IntArray\r\ntypealias longs = LongArray\r\ntypealias pii = Pair<Int,Int>\r\nconst val interactive = false\r\nobject Reader{\r\n    private const val BS = 1 shl 16\r\n    private const val NC = 0.toChar()\r\n    private val buf = ByteArray(BS)\r\n    private var bId = 0\r\n    private var size = 0\r\n    private var c = NC\r\n\r\n    var warningActive = true\r\n    var fakein = StringBuilder()\r\n\r\n    private var IN: BufferedInputStream = BufferedInputStream(System.`in`, BS)\r\n    val OUT: PrintWriter = PrintWriter(System.out)\r\n\r\n    private val char: Char\r\n        get() {\r\n            if(interactive){\r\n                return System.`in`.read().toChar()\r\n            }\r\n            while (bId == size) {\r\n                size = IN.read(buf) // no need for checked exceptions\r\n                if (size == -1) return NC\r\n                bId = 0\r\n            }\r\n            return buf[bId++].toChar()\r\n        }\r\n\r\n    fun nextInt(): Int {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextLong(): Long {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0L\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextString():String{\r\n        val ret = StringBuilder()\r\n        while (true){\r\n            c = char\r\n            if(!isWhitespace(c)){ break}\r\n        }\r\n        ret.append(c)\r\n        while (true){\r\n            c = char\r\n            if(isWhitespace(c)){ break}\r\n            ret.append(c)\r\n        }\r\n        return ret.toString()\r\n    }\r\n    fun isWhitespace(c:Char):Boolean{\r\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t'\r\n    }\r\n    fun rerouteInput(){\r\n        if(warningActive){\r\n            put(\"Custom test enabled\")\r\n            println(\"Custom test enabled\")\r\n            warningActive = false\r\n        }\r\n        val S = fakein.toString()\r\n        println(\"New Case \")\r\n        println(S.take(80))\r\n        println(\"...\")\r\n        fakein.clear()\r\n        IN = BufferedInputStream(S.byteInputStream(),BS)\r\n    }\r\n    fun flush(){\r\n        OUT.flush()\r\n    }\r\n    fun takeFile(name:String){\r\n        IN = BufferedInputStream(File(name).inputStream(),BS)\r\n    }\r\n}\r\nfun eat(){ val st1 = TreeSet<Int>(); val st2 = TreeMap<Int,Int>()}\r\nfun put(aa:Any){\r\n    Reader.OUT.println(aa)\r\n    if(interactive){ Reader.flush()}\r\n}\r\nfun put(vararg x:Any){\r\n    for(c in x){\r\n        Reader.OUT.print(c)\r\n        Reader.OUT.print(\" \")\r\n    }\r\n    Reader.OUT.print(\"\\n\")\r\n    if(interactive){ Reader.flush()}\r\n}\r\nfun done(){ Reader.OUT.close() }\r\nfun share(aa:Any){\r\n    Reader.fakein.append(format(aa))\r\n    Reader.fakein.append(\"\\n\")\r\n}\r\n\r\nval getintfast:Int get() = Reader.nextInt()\r\nval getint:Int get(){ val ans = getlong ; if(ans > Int.MAX_VALUE) IntArray(1000000000); return ans.toInt() }\r\nval getlong:Long get() = Reader.nextLong()\r\nval getstr:String get() = Reader.nextString()\r\nfun getline(n:Int):IntArray{\r\n    return IntArray(n){getint}\r\n}\r\nfun getlineL(n:Int):LongArray{\r\n    return LongArray(n){getlong}\r\n}\r\nfun subformat(a:Any?):String{ // for not a collection\r\n    return if(a == null) \"null\"\r\n    else if(a is Iterable<*> ) a.joinToString(\" \")\r\n    else if(a is BooleanArray) a.joinToString(\"\") { if (it) \"1\" else \"0\" }\r\n    else if(a is IntArray) a.joinToString(\" \")\r\n    else if(a is LongArray) a.joinToString(\" \")\r\n    else a.toString()\r\n}\r\nfun format(a:Any?):String {\r\n    if (a == null) {\r\n        return \"null\"\r\n    } else if (a is BooleanArray) {\r\n        return a.joinToString(\"\") { if (it) \"1\" else \"0\" }\r\n    } else if (a is Array<*>) {\r\n        return \"\\n\"+a.joinToString(\"\\n\"){subformat(it)}\r\n    } else { return subformat(a)}\r\n}\r\nvar dmark = -1\r\ninfix fun Any.dei(a:Any?){\r\n    dmark++ ; debug()\r\n    println(\"<${dmark}>   ${this} : ${format(a)}\")\r\n}\r\nconst val just = \" \"\r\nfun crash(){\r\n    throw Exception(\"Bad programme\")}\r\nfun assert(a:Boolean){\r\n    if(!a){\r\n        throw Exception(\"Failed Assertion\")\r\n    }}\r\nenum class solveMode {\r\n    real, rand, tc\r\n}\r\nobject solve{\r\n    var mode:solveMode = solveMode.real\r\n    var tcNum:Int = 0\r\n    var rand:()->Unit = {}\r\n    var TC:MutableMap<Int,()->Unit> = mutableMapOf()\r\n    var tn:Long = 0\r\n    fun cases(onecase:()->Unit){\r\n        val t = if(mode == solveMode.real){if(singleCase) 1 else getint} else if(mode == solveMode.tc){1 } else randCount\r\n        if(pI != 998_244_353 && pI != 1_000_000_007){\r\n            throw Exception(\"Not usual primes!\")\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            tn = System.currentTimeMillis()\r\n        }\r\n        repeat(t){\r\n            if(mode == solveMode.tc){\r\n                TC[tcNum]?.let { it() }\r\n                Reader.rerouteInput()\r\n            }else if(mode == solveMode.rand){\r\n                rand()\r\n                Reader.rerouteInput()\r\n            }\r\n            onecase()\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            val dt = System.currentTimeMillis() - tn\r\n            println(\"Time $dt ms \")\r\n        }\r\n    }\r\n    fun rand(a:()->Unit){\r\n        this.rand = a\r\n    }\r\n    fun tc(id:Int = 0,a:()->Unit){\r\n        TC[id] = a\r\n    }\r\n    fun usetc(a:Int = 0 ){\r\n        this.tcNum = a\r\n        this.mode = solveMode.tc\r\n    }\r\n    fun userand(){\r\n        this.mode = solveMode.rand\r\n    }\r\n}\r\nfun debug(){}\r\n\r\n\r\nfun factorSingleNumber_sieve(a:Long): MutableList<Pair<Long, Int>> {\r\n    val ret = mutableListOf<Pair<Long,Int>>()\r\n    var now = a\r\n    for(pi in 0 until sieve.primeCounter){\r\n        val p = sieve.primes[pi]\r\n        var level = 0\r\n        while(now % p == 0L){\r\n            now /= p\r\n            level ++\r\n        }\r\n        if(level > 0){\r\n            ret.add(Pair(p.toLong(),level ))\r\n        }\r\n    }\r\n    if(now > 1){\r\n        ret.add(Pair(now, 1))\r\n    }\r\n    return ret\r\n}\r\nfun factorSingleNumber(a:Long): MutableList<Pair<Long, Int>> {\r\n    val ret = mutableListOf<Pair<Long,Int>>()\r\n    var now = a\r\n    for(p in 2 until (sqrt(a.toDouble()).toInt() + 3 )){\r\n        var level = 0\r\n        while(now % p == 0L){\r\n            now /= p\r\n            level ++\r\n        }\r\n        if(level > 0){\r\n            ret.add(Pair(p.toLong(),level ))\r\n        }\r\n    }\r\n    if(now > 1){\r\n        ret.add(Pair(now, 1))\r\n    }\r\n    return ret\r\n}\r\nfun primefactToFactors(x:List<Pair<Long,Int>>): List<Long> {\r\n    var ret = mutableListOf<Long>(1)\r\n    for((p,v) in x){\r\n        val new = mutableListOf<Long>()\r\n        var m = 1L\r\n        repeat(v+1){\r\n            new.addAll(ret.map {it * m  })\r\n            m *= p\r\n        }\r\n        ret = new\r\n    }\r\n    return ret.sorted()\r\n}\r\n\r\n\r\nobject sieve{\r\n\r\n    const val sieveMx = 40000\r\n    val primeOf = IntArray(sieveMx + 1)\r\n    var primeCounter = 0\r\n    val primeUpperBound = maxOf(25,(sieveMx.toDouble()/(Math.log(sieveMx.toDouble()) -4)).toInt() +3)\r\n    val primes = IntArray(primeUpperBound)\r\n    var sieveCalculated = false\r\n    val nextPrime = IntArray(sieveMx+1)\r\n    val nextPrimePower = IntArray(sieveMx+1)\r\n    val afterPrimePowerDivison = IntArray(sieveMx+1)\r\n    var mobius = IntArray(0)\r\n    var fstart = IntArray(0)\r\n    var factor = IntArray(0)\r\n\r\n    var factors:List<MutableList<Int>> = mutableListOf()\r\n\r\n    fun calculateSieveFast(){\r\n        if(sieveCalculated){\r\n            return\r\n        }\r\n        sieveCalculated = true\r\n        for(i in 2..sieveMx){\r\n            if(primeOf[i] == 0 ){\r\n                primeOf[i] = i\r\n                primes[primeCounter] = i\r\n                primeCounter += 1\r\n            }\r\n            for(j in 0 until primeCounter){\r\n                val p = primes[j]\r\n                val pd = p * i\r\n                if(p <= i && pd <= sieveMx){\r\n                    primeOf[pd] = p\r\n                }else{\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fun preparePrimePower(){\r\n        nextPrime[1] = -1\r\n        nextPrimePower[1] = -1\r\n        afterPrimePowerDivison[1] = 1\r\n        for(i in 2..sieveMx){\r\n            val p = primeOf[i]\r\n            val new = i / p\r\n            nextPrime[i] = p\r\n            if(nextPrime[new] == p){\r\n                nextPrimePower[i] = nextPrimePower[new]\r\n                afterPrimePowerDivison[i] = afterPrimePowerDivison[new]\r\n            }else{\r\n                afterPrimePowerDivison[i] = new\r\n            }\r\n            nextPrimePower[i] += 1\r\n        }\r\n    }\r\n    fun primeID():Pair<IntArray,IntArray>{\r\n        assert(sieveCalculated)\r\n        var now =0\r\n        val primes = IntArray(primeCounter)\r\n        val id = IntArray(sieveMx) {\r\n            if (it > 0 && primeOf[it] == it) {\r\n                primes[now] = it\r\n                return@IntArray now++\r\n            } else -1}\r\n        return Pair(primes,id)\r\n    }\r\n    fun prepareFactor(){\r\n        val fcount = IntArray(sieveMx +1)\r\n        fcount[1] = 1\r\n        var total = 1\r\n        for(i in 2..sieveMx){\r\n            fcount[i] = fcount[afterPrimePowerDivison[i]] * (nextPrimePower[i] + 1)\r\n            total += fcount[i]\r\n        }\r\n        factor = IntArray(total)\r\n        val who = IntArray(total)\r\n        fstart = IntArray(sieveMx+1)\r\n        factor[0] = 1\r\n        who[0] = 1\r\n\r\n        for(i in 2..sieveMx){\r\n            fstart[i] = fstart[i-1] + fcount[i-1]\r\n            val prev = i / nextPrime[i]\r\n            val pcount = fcount[afterPrimePowerDivison[i]]\r\n            factor.copyInto(factor,fstart[i],fstart[prev],fstart[prev+1])\r\n            for(x in (fstart[i] + fcount[i] - 2 * pcount) until (fstart[i] + fcount[i] - pcount)){\r\n                factor[x+pcount] = factor[x] * nextPrime[i]\r\n            }\r\n            for(c in 0 until fcount[i]){\r\n                who[fstart[i] + c] = i\r\n            }\r\n        }\r\n        factor.radixCarry(who)\r\n        who.radixCarry(factor)\r\n    }\r\n    fun calculateMobius(){\r\n        assert(sieveCalculated)\r\n        mobius = IntArray(sieveMx + 1)\r\n        mobius[1] = 1\r\n        for(i in 2..sieveMx){\r\n            val p = primeOf[i]\r\n            if(p == primeOf[i/p]){\r\n                mobius[i] = 0\r\n            }else{\r\n                mobius[i] = -1 * mobius[i/p]\r\n            }\r\n        }\r\n    }\r\n}\r\nfun IntArray.radixCarry(other:IntArray){\r\n    error(\"Did not replace with radix sort implementation\")\r\n}\r\ninline fun Int.eachPrimePower(act:(Int,Int)->Unit){\r\n    assert(sieve.sieveCalculated)\r\n    var here = this\r\n    while(here > 1){\r\n        act(sieve.nextPrime[here], sieve.nextPrimePower[here])\r\n        here = sieve.afterPrimePowerDivison[here]\r\n    }\r\n}\r\nfun Int.factors():List<Int>{\r\n    val ret = mutableListOf(1)\r\n    this.eachPrimePower { p, e ->\r\n        val s = ret.toList()\r\n        var now = 1\r\n        repeat(e){\r\n            now *= p\r\n            ret.addAll(s.map{it * now})\r\n        }\r\n    }\r\n    return ret\r\n}\r\nfun totient(a:Int):Int{\r\n    var ret = a\r\n    a.eachPrimePower{\r\n            p, _ ->\r\n        ret /= p\r\n        ret *= (p-1)\r\n    }\r\n    return ret\r\n}\r\nfun Int.numOfDivisors():Int{\r\n    var ret = 1\r\n    this.eachPrimePower { _, e -> ret *= (e+1) }\r\n    return ret\r\n}\r\ninline fun Int.eachFactor(act:(Int)->Unit){\r\n    val end = if(this == sieve.sieveMx) sieve.factor.lastIndex else (sieve.fstart[this+1]-1)\r\n    for(i in sieve.fstart[this]..end){\r\n        act(sieve.factor[i])\r\n    }\r\n}\r\nfun Int.factorLook():IntArray{\r\n    val end = if(this == sieve.sieveMx) sieve.factor.lastIndex else (sieve.fstart[this+1]-1)\r\n    return sieve.factor.sliceArray(sieve.fstart[this]..end)\r\n}\r\n\r\n\r\nconst val singleCase = false\r\nfun main(){\r\n    sieve.calculateSieveFast()\r\n    sieve.preparePrimePower()\r\n    solve.cases{\r\n        val n = getlong\r\n\r\n        fun eat(x:List<Pair<Long,Int>>):Long {\r\n            var ret = 1L\r\n            for((p,e) in x){\r\n                repeat(e){\r\n                    ret *= p\r\n                }\r\n            }\r\n            return ret\r\n        }\r\n\r\n        val ps = factorSingleNumber_sieve(n)\r\n        if(ps.size >= 3){\r\n            put(\"YES\")\r\n            val A = ps.slice(0..0)\r\n            val B = ps.slice(1..1)\r\n            val C = ps.slice(2 until ps.size)\r\n            put(eat(A), eat(B), eat(C))\r\n            return@cases\r\n        }else if(ps.size == 2 && ps.sumOf { it.second } >= 4){\r\n            val A = ps[0].first\r\n            val B = ps[1].first\r\n            var C = 1L\r\n            for(i in 0 until 2){\r\n                repeat(ps[i].second){\r\n                    C *= ps[i].first\r\n                }\r\n            }\r\n            put(\"YES\")\r\n            put(A,B,C)\r\n            return@cases\r\n        }else if(ps.size == 1 && ps[0].second >= 6){\r\n            put(\"YES\")\r\n            val p = ps[0].first.toInt()\r\n            var remain = 1\r\n            repeat(ps[0].second - 3){\r\n                remain *= p\r\n            }\r\n            put(p, p * p, remain)\r\n            return@cases\r\n        }\r\n        put(\"NO\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    done()\r\n}\r\n\r\n"
}