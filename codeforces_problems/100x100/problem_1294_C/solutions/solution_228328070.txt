{
    "id": 228328070,
    "contestId": 1294,
    "creationTimeSeconds": 1697390427,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1294,
        "index": "C",
        "name": "Product of Three Numbers",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1294,
        "members": [
            {
                "handle": "grivarvicky"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1579703700
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\n\r\npublic class Codeforces {\r\n\r\n    static final int M = 998244353;\r\n    static final int INF = 2_000_000_000;\r\n    static final int N = (int) 2e6;\r\n    static long[] factorial;\r\n    static final boolean[] isPrime = new boolean[N + 1];\r\n    static final ArrayList<Integer> primes = new ArrayList<>();\r\n    static final Random random = new Random();\r\n    static final FastScanner fs = new FastScanner();\r\n    static final BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\r\n    //variable\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        getPrimes();\r\n\r\n        int T = fs.nextInt();\r\n        while (T-- > 0) {\r\n            long n = fs.nextLong();\r\n            long divisor1 = -1;\r\n            long divisor2 = -1;\r\n\r\n            for (long i = 2; i * i < n; i++) {\r\n                if (n % i == 0) {\r\n                    if (divisor1 == -1) {\r\n                        divisor1 = i;\r\n                    } else {\r\n                        divisor2 = i;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if(divisor1 < 0 || divisor2 < 0) {\r\n                System.out.println(\"NO\");\r\n            } else {\r\n                long divisor3 = n / (divisor2 * divisor1);\r\n\r\n                if(n % divisor3 == 0 && divisor3 != divisor2) {\r\n                    System.out.println(divisor1 + \" \" + divisor2 + \" \" + divisor3);\r\n                }else {\r\n                    System.out.println(\"NO\");\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    //class\r\n\r\n\r\n    //function\r\n\r\n    private static String test(int t, int n) {\r\n        StringBuilder testCase = new StringBuilder();\r\n        testCase.append(t);\r\n        testCase.append(\"\\n\");\r\n        while (t-- > 0) {\r\n            testCase.append(random.nextInt(n / 2) * 2);\r\n            testCase.append(\" \");\r\n        }\r\n\r\n        return testCase.toString();\r\n    }\r\n\r\n    //Template\r\n    static void printArray(int[] arr) throws IOException {\r\n        for (int i = 0; i < arr.length; i++) {\r\n            out.write(arr[i] + \" \");\r\n        }\r\n        out.write(\"\\n\");\r\n        out.flush();\r\n    }\r\n\r\n    static void getPrimes() {\r\n        for (int i = 2; i < N; i++) isPrime[i] = true;\r\n\r\n        int i = 2;\r\n        while (i < N) {\r\n            if (isPrime[i]) {\r\n                primes.add(i);\r\n                for (int j = 2 * i; j < N; j += i)\r\n                    isPrime[j] = false;\r\n            }\r\n            i++;\r\n        }\r\n    }\r\n\r\n    static void build(int[] a, int[] seg, int ind, int low, int high) {\r\n        if (low == high) {\r\n            seg[ind] = a[low];\r\n            return;\r\n        }\r\n\r\n        int mid = (low + high) / 2;\r\n        build(a, seg, 2 * ind + 1, low, mid);\r\n        build(a, seg, 2 * ind + 2, mid + 1, high);\r\n\r\n        seg[ind] = Math.max(seg[2 * ind + 1], seg[2 * ind + 2]);\r\n    }\r\n\r\n    static long query(int ind, int[] seg, int l, int h, int low, int high) {\r\n        if (low > h || high < l) return -INF;\r\n\r\n        if (low >= l && high <= h) return seg[ind];\r\n\r\n        int mid = (low + high) / 2;\r\n        long left = query(2 * ind + 1, seg, l, h, low, mid);\r\n        long right = query(2 * ind + 2, seg, l, h, mid + 1, high);\r\n\r\n        return Math.max(left, right);\r\n    }\r\n\r\n    static long factorial(int n) {\r\n        long fact = 1;\r\n        for (int i = 1; i <= n; i++) {\r\n            fact *= i;\r\n        }\r\n        return fact;\r\n    }\r\n\r\n    static long lcm(long a, long b) {\r\n        return (a / gcd(a, b)) * b;\r\n    }\r\n\r\n    static long gcd(long a, long b) {\r\n        if (a == 0) return b;\r\n\r\n        return gcd(b % a, a);\r\n    }\r\n\r\n    static void premutation(int n, ArrayList<Integer> arr, boolean[] chosen) {\r\n        if (arr.size() == n) {\r\n            System.out.println(arr);\r\n        } else {\r\n            for (int i = 1; i <= n; i++) {\r\n                if (chosen[i]) continue;\r\n                arr.add(i);\r\n                chosen[i] = true;\r\n                premutation(n, arr, chosen);\r\n                arr.remove(Integer.valueOf(i));\r\n                chosen[i] = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    static boolean isPalindrome(char[] c) {\r\n        int n = c.length;\r\n        for (int i = 0; i < n / 2; i++) {\r\n            if (c[i] != c[n - i - 1]) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static long nCk(int n, int k) {\r\n        return (modMult(fact(n), fastExpo(modMult(fact(n - k), fact(k)), M - 2)));\r\n    }\r\n\r\n    static long nPk(int n, int k) {\r\n        return (modMult(fact(n), fastExpo(fact(n - k), M - 2)));\r\n    }\r\n\r\n    static long fact(int n) {\r\n\r\n        if (factorial != null) return factorial[n];\r\n        else factorial = new long[N + 1];\r\n\r\n        factorial[0] = 1;\r\n        long fact = 1;\r\n        for (int i = 1; i <= N; i++) {\r\n            factorial[i] = fact = modMult(fact, i);\r\n        }\r\n\r\n        return factorial[n];\r\n    }\r\n\r\n    static long modMult(long a, long b) {\r\n        return (int) (a * b % M);\r\n    }\r\n\r\n    static long negMult(long a, long b) {\r\n        return (int) ((a * b) % M + M) % M;\r\n    }\r\n\r\n    static long fastExpo(long x, int y) {\r\n        if (y == 1) return x;\r\n        if (y == 0) return 1;\r\n        long ans = fastExpo(x, y / 2);\r\n        if (y % 2 == 0) return modMult(ans, ans);\r\n        else return modMult(ans, modMult(ans, x));\r\n    }\r\n\r\n    static void ruffleSort(int[] arr) {\r\n        int n = arr.length;\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            int j = random.nextInt(n);\r\n            int temp = arr[j];\r\n            arr[j] = arr[i];\r\n            arr[i] = temp;\r\n        }\r\n\r\n        Arrays.sort(arr);\r\n    }\r\n\r\n\r\n    private static class Pair implements Comparable<Pair> {\r\n        int f, s;\r\n\r\n        Pair(int f, int s) {\r\n            this.f = f;\r\n            this.s = s;\r\n        }\r\n\r\n        public int compareTo(Pair p) {\r\n            if (this.f != p.f) return Integer.compare(this.f, p.f);\r\n\r\n            return -Integer.compare(this.s, p.s);\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) return true;\r\n            if (!(o instanceof Pair)) return false;\r\n            Pair pairs = (Pair) o;\r\n            return f == pairs.f && s == pairs.s;\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash(f, s);\r\n        }\r\n    }\r\n\r\n    private static class FastScanner {\r\n        //        Reader inputString = new StringReader(test(10, 1000));\r\n//        BufferedReader br = new BufferedReader(inputString);\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        StringTokenizer str = new StringTokenizer(\"\");\r\n\r\n        String next() throws IOException {\r\n            while (!str.hasMoreTokens()) {\r\n//                String line = br.readLine();\r\n//                str = new StringTokenizer(line);\r\n//                System.out.println(line);\r\n                str = new StringTokenizer(br.readLine());\r\n            }\r\n\r\n\r\n            return str.nextToken();\r\n        }\r\n\r\n        char nextChar() throws IOException {\r\n            return next().charAt(0);\r\n        }\r\n\r\n        int nextInt() throws IOException {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        float nextFloat() throws IOException {\r\n            return Float.parseFloat(next());\r\n        }\r\n\r\n        double nextDouble() throws IOException {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        long nextLong() throws IOException {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        byte nextByte() throws IOException {\r\n            return Byte.parseByte(next());\r\n        }\r\n\r\n        int[] arrayIn(int n) throws IOException {\r\n            int[] arr = new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = nextInt();\r\n            }\r\n            return arr;\r\n        }\r\n    }\r\n}"
}