{
    "id": 146208942,
    "contestId": 976,
    "creationTimeSeconds": 1644738407,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 976,
        "index": "C",
        "name": "Nested Segments",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 976,
        "members": [
            {
                "handle": "Nero"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1525099200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 122,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 9932800,
    "source": "#include <bits/stdc++.h>\n#ifdef ALGO\n#include \"el_psy_congroo.hpp\"\n#else\n#define DUMP(...)\n#define CHECK(...)\n#endif\n\nnamespace {\n\nusing LL = long long;\nLL gcd(LL a, LL b) { return b == 0 ? a : gcd(b, a % b); }\ntemplate<typename T, typename U> bool enlarge(T& a, U b) { return a < b ? (a = b, true) : false; }\ntemplate<typename T, typename U> bool minify(T& a, U b) { return a > b ? (a = b, true) : false; }\n\n\nstruct Solver {\n\n  void solve(int ca, std::istream& reader) {\n    int n;\n    reader >> n;\n    std::vector<std::tuple<int, int, int>> vec;\n    for (int i = 0; i < n; ++i) {\n      int l, r;\n      reader >> l >> r;\n      vec.emplace_back(r, -l, i);\n    }\n    std::sort(vec.begin(), vec.end());\n    const int INF = 0x3f3f3f3f;\n    std::pair<int, int> vmin{INF, INF};\n    for (int i = n - 1; i >= 0; --i) {\n      int l, r, id;\n      std::tie(r, l, id) = vec[i];\n      l = -l;\n      if (vmin.first <= l) {\n        printf(\"%d %d\\n\", id + 1, vmin.second + 1);\n        return;\n      }\n      minify(vmin, std::make_pair(l, id));\n    }\n    puts(\"-1 -1\");\n  }\n};\n\n}  // namespace\n\nint main() {\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  std::istream& reader = std::cin;\n\n  int cas = 1;\n  // reader >> cas;\n  for (int ca = 1; ca <= cas; ++ca) {\n    auto solver = std::make_unique<Solver>();\n    solver->solve(ca, reader);\n  }\n}\n\n"
}