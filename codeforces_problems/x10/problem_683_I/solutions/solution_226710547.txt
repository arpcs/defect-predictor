{
    "id": 226710547,
    "contestId": 683,
    "creationTimeSeconds": 1696496663,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 683,
        "index": "I",
        "name": "Loader",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "*special",
            "graphs"
        ]
    },
    "author": {
        "contestId": 683,
        "members": [
            {
                "handle": "erogame"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466092800
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 11673600,
    "source": "import java.util.Scanner\r\n\r\nval maxn : Int = 40\r\nval maxm : Int = 40\r\nval inf : Int = 500000000\r\nval inf2 : Int = 1000000000\r\n\r\nvar dis : Array<Array<Int>> = Array<Array<Int>>(maxn + 1) {Array<Int>(maxm + 1) {0} }\r\nvar dis01 : Array<Array<Array<Array<Int>>>> = Array<Array<Array<Array<Int>>>>(maxn + 1) {Array<Array<Array<Int>>>(maxm + 1) {Array<Array<Int>>(4) {Array<Int>(4) {inf2} } } }\r\nvar dis11 : Array<Array<Array<Pair<Int, Int>>>> = Array<Array<Array<Pair<Int, Int>>>>(maxn + 1) {Array<Array<Pair<Int, Int>>>(maxm + 1) {Array<Pair<Int, Int>>(4) {Pair<Int, Int>(inf2, inf2)} } }\r\nvar from11 : Array<Array<Array<Int>>> = Array<Array<Array<Int>>>(maxn + 1) {Array<Array<Int>>(maxm + 1) {Array<Int>(4) {4} } }\r\nvar already11 : Array<Array<Array<Int>>> = Array<Array<Array<Int>>>(maxn + 1) {Array<Array<Int>>(maxm + 1) {Array<Int>(4) {0} } }\r\nvar from01 : Array<Array<Int>> = Array<Array<Int>>(maxn + 1) {Array<Int>(maxm + 1) {0} }\r\nvar out : Array<Char> = Array<Char>(maxn * maxm * maxn * maxm + 1) {'0'}\r\nvar outsiz : Int = 0\r\n\r\nval Big : Array<Char> = arrayOf('N', 'W', 'S', 'E')\r\nval Small : Array<Char> = arrayOf('s', 'e', 'n', 'w')\r\n\r\nclass vec(xx: Int = 0, yy: Int = 0) {\r\n    var x: Int = xx\r\n    var y: Int = yy\r\n\r\n    operator fun plus(b : vec) : vec {\r\n        return vec(x + b.x, y + b.y)\r\n    }\r\n    operator fun minus(b : vec) : vec {\r\n        return vec(x - b.x, y - b.y)\r\n    }\r\n    operator fun unaryMinus() : vec {\r\n        return vec(-x, -y)\r\n    }\r\n}\r\n\r\nfun equal(a : vec, b : vec) : Boolean\r\n{\r\n    return a.x == b.x && a.y == b.y\r\n}\r\n\r\nval dirs : Array<vec> = arrayOf(vec(1, 0), vec(0, 1), vec(-1, 0), vec(0, -1))\r\n\r\nvar n : Int = 0\r\nvar m : Int = 0\r\n\r\nvar map : Array<Array<Boolean>> = Array<Array<Boolean>>(maxn + 2) {Array<Boolean>(maxm + 2) {false} }\r\n\r\nfun check(pos : vec) : Boolean\r\n{\r\n    return map[pos.x][pos.y]\r\n}\r\n\r\nclass state(p : vec, d : Int) {\r\n    var pos = p\r\n    var dir = d\r\n}\r\n\r\nvar queue11 : Array<state> = Array<state>(maxn * maxm * 4 + 1) {state(vec(0, 0), 4)}\r\nvar queue01 : Array<vec> = Array<vec>(maxn * maxm + 1) {vec(0, 0)}\r\nvar front01 : Int = 0\r\nvar back01 : Int = 0\r\nvar front11 : Int = 0\r\nvar back11 : Int = 0\r\nvar already01 : Array<Array<Int>> = Array<Array<Int>>(maxn + 1) {Array<Int>(maxm + 1) {0} }\r\n\r\nfun clear01()\r\n{\r\n    front01 = 1\r\n    back01 = 0\r\n}\r\n\r\nfun clear11()\r\n{\r\n    front11 = 1\r\n    back11 = 0\r\n}\r\n\r\nfun push01(p : vec)\r\n{\r\n    ++back01\r\n    queue01[back01] = p\r\n}\r\n\r\nfun pop01()\r\n{\r\n    ++front01\r\n}\r\n\r\nfun push11(s : state)\r\n{\r\n    ++back11\r\n    queue11[back11] = s\r\n}\r\n\r\nfun pop11()\r\n{\r\n    ++front11\r\n}\r\n\r\nvar tim : Int = 0\r\n\r\nfun search(person : vec, box : vec)\r\n{\r\n    ++tim\r\n    already01[person.x][person.y] = tim\r\n    dis[person.x][person.y] = 0\r\n    clear01()\r\n    push01(person)\r\n    while (front01 <= back01) {\r\n        val curr : vec = queue01[front01]\r\n        pop01()\r\n        for (dirid in 0..3) {\r\n            val next = curr + dirs[dirid]\r\n            if (!check(next) || equal(next, box) || already01[next.x][next.y] == tim) {\r\n                continue\r\n            }\r\n            already01[next.x][next.y] = tim\r\n            dis[next.x][next.y] = dis[curr.x][curr.y] + 1\r\n            from01[next.x][next.y] = dirid\r\n            push01(next)\r\n        }\r\n    }\r\n}\r\n\r\nfun less(a : Pair<Int, Int>, b : Pair<Int, Int>) : Boolean\r\n{\r\n    if (a.first != b.first) {\r\n        return a.first < b.first\r\n    } else {\r\n        return a.second < b.second\r\n    }\r\n}\r\n\r\nfun main() {\r\n    val reader = Scanner(System.`in`)\r\n    n = reader.nextInt()\r\n    m = reader.nextInt()\r\n    var person : vec = vec(0, 0)\r\n    var box : vec = vec(0, 0)\r\n    var tar : vec = vec(0, 0)\r\n    for (i in 1..n) {\r\n        var s : String = reader.next()\r\n        for (j in 1..m) {\r\n            if (s[j - 1] == 'X') {\r\n                continue\r\n            }\r\n            map[i][j] = true\r\n            if (s[j - 1] == 'Y') {\r\n                person = vec(i, j)\r\n            }\r\n            if (s[j - 1] == 'B') {\r\n                box = vec(i, j)\r\n            }\r\n            if (s[j - 1] == 'T') {\r\n                tar = vec(i, j)\r\n            }\r\n        }\r\n    }\r\n    clear11()\r\n    search(person, box)\r\n    for (dirid in 0..3) {\r\n        val boxd = box + dirs[dirid]\r\n        val boxto = box - dirs[dirid]\r\n        if (already01[boxd.x][boxd.y] == tim && check(boxto)) {\r\n            dis11[boxto.x][boxto.y][dirid] = Pair<Int, Int>(1, dis[boxd.x][boxd.y])\r\n            already11[boxto.x][boxto.y][dirid] = 1\r\n            push11(state(boxto, dirid))\r\n        }\r\n    }\r\n    while (front11 <= back11) {\r\n        val curr = queue11[front11]\r\n        pop11()\r\n        for (dirid in 0..3) {\r\n            val boxd = curr.pos + dirs[dirid]\r\n            val boxto = curr.pos - dirs[dirid]\r\n            if (!check(boxto) || !check(boxd)) {\r\n                continue\r\n            }\r\n            if (already11[boxto.x][boxto.y][dirid] == 1 && dis11[boxto.x][boxto.y][dirid].first < dis11[curr.pos.x][curr.pos.y][curr.dir].first + 1) {\r\n                continue\r\n            }\r\n            if (dis01[curr.pos.x][curr.pos.y][curr.dir][dirid] == inf2) {\r\n                search(curr.pos + dirs[curr.dir], curr.pos)\r\n                for (dirid2 in 0..3) {\r\n                    dis01[curr.pos.x][curr.pos.y][curr.dir][dirid2] = inf\r\n                    val boxd2 = curr.pos + dirs[dirid2]\r\n                    if (already01[boxd2.x][boxd2.y] == tim) {\r\n                        dis01[curr.pos.x][curr.pos.y][curr.dir][dirid2] = dis[boxd2.x][boxd2.y]\r\n                    }\r\n                }\r\n            }\r\n            if (dis01[curr.pos.x][curr.pos.y][curr.dir][dirid] == inf) {\r\n                continue\r\n            }\r\n            if (already11[boxto.x][boxto.y][dirid] == 0) {\r\n                dis11[boxto.x][boxto.y][dirid] = Pair<Int, Int>(dis11[curr.pos.x][curr.pos.y][curr.dir].first + 1, dis11[curr.pos.x][curr.pos.y][curr.dir].second + dis01[curr.pos.x][curr.pos.y][curr.dir][dirid])\r\n                already11[boxto.x][boxto.y][dirid] = 1\r\n                push11(state(boxto, dirid))\r\n                from11[boxto.x][boxto.y][dirid] = curr.dir\r\n                continue\r\n            }\r\n            val tmpdis : Int = dis11[curr.pos.x][curr.pos.y][curr.dir].second + dis01[curr.pos.x][curr.pos.y][curr.dir][dirid]\r\n            if (dis11[boxto.x][boxto.y][dirid].second > tmpdis) {\r\n                dis11[boxto.x][boxto.y][dirid] = Pair<Int, Int>(dis11[boxto.x][boxto.y][dirid].first, tmpdis)\r\n                from11[boxto.x][boxto.y][dirid] = curr.dir\r\n            }\r\n        }\r\n    }\r\n    var fin = state(vec(0, 0), 0)\r\n    for (dirid in 0..3) {\r\n        if (already11[tar.x][tar.y][dirid] == 0) {\r\n            continue\r\n        }\r\n        if (equal(fin.pos, vec(0, 0))) {\r\n            fin = state(tar, dirid)\r\n            continue\r\n        }\r\n        if (less(dis11[tar.x][tar.y][dirid], dis11[tar.x][tar.y][fin.dir])) {\r\n            fin = state(tar, dirid)\r\n        }\r\n    }\r\n    if (equal(fin.pos, vec(0, 0))) {\r\n        println(\"NO\")\r\n        return\r\n    }\r\n    println(\"YES\")\r\n    while (true) {\r\n        if (from11[fin.pos.x][fin.pos.y][fin.dir] == 4) {\r\n            ++outsiz\r\n            out[outsiz] = Big[fin.dir]\r\n            search(person, fin.pos + dirs[fin.dir])\r\n            var fin2 : vec = fin.pos + dirs[fin.dir] + dirs[fin.dir]\r\n            while (true) {\r\n                if (equal(fin2, person)) {\r\n                    break\r\n                }\r\n                ++outsiz\r\n                out[outsiz] = Small[from01[fin2.x][fin2.y]]\r\n                fin2 = fin2 - dirs[from01[fin2.x][fin2.y]]\r\n            }\r\n            break\r\n        }\r\n        val prev : state = state(fin.pos + dirs[fin.dir], from11[fin.pos.x][fin.pos.y][fin.dir])\r\n        ++outsiz\r\n        out[outsiz] = Big[fin.dir]\r\n        search(prev.pos + dirs[prev.dir], prev.pos)\r\n        var fin2 : vec = prev.pos + dirs[fin.dir]\r\n        while (true) {\r\n            if (equal(fin2, prev.pos + dirs[prev.dir])) {\r\n                break\r\n            }\r\n            ++outsiz\r\n            out[outsiz] = Small[from01[fin2.x][fin2.y]]\r\n            fin2 = fin2 - dirs[from01[fin2.x][fin2.y]]\r\n        }\r\n        fin = prev\r\n    }\r\n    for (i in 1..outsiz) {\r\n        print(out[outsiz + 1 - i])\r\n    }\r\n    print('\\n')\r\n}"
}