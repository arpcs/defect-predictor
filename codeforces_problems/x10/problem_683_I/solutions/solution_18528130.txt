{
    "id": 18528130,
    "contestId": 683,
    "creationTimeSeconds": 1466099530,
    "relativeTimeSeconds": 6730,
    "problem": {
        "contestId": 683,
        "index": "I",
        "name": "Loader",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "*special",
            "graphs"
        ]
    },
    "author": {
        "contestId": 683,
        "members": [
            {
                "handle": "uwi"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1466092800
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 1232,
    "memoryConsumedBytes": 191385600,
    "source": "fun main(args: Array<String>) {\r\nval (n,m) = readLine()!!.split(\" \").map(String::toInt)\r\nval b : MutableList<String> = mutableListOf()\r\nfor(i in 1..n){\r\nb.add(readLine()!!.trim())\r\n}\r\nvar yr = 0\r\nvar yc = 0\r\nvar br = 0\r\nvar bc = 0\r\nvar tr = 0\r\nvar tc = 0\r\nfor(i in 0..n-1){\r\n    for(j in 0..m-1){\r\n        if(b[i][j] == 'Y'){\r\n            yr = i\r\n            yc = j\r\n        }\r\n        if(b[i][j] == 'B'){\r\n            br = i\r\n            bc = j\r\n        }\r\n        if(b[i][j] == 'T'){\r\n            tr = i\r\n            tc = j\r\n        }\r\n    }\r\n}\r\n\r\nval q = Array<Int>(40*40*40*40, {i -> 0})\r\nvar qh = 0\r\nvar qt = 0\r\nval scode = ((yr*40+yc)*40+br)*40+bc\r\nval d = Array<Int>(40*40*40*40, {i -> 999999999})\r\nval prevs = Array<Int>(40*40*40*40, {i -> -1})\r\nval moves = Array<Char>(40*40*40*40, {i -> '.'})\r\nd[scode] = 0\r\nq[qh++] = scode\r\nval dr = arrayOf(1, 0, -1, 0)\r\nval dc = arrayOf(0, 1, 0, -1)\r\nvar dirs = \"senw\"\r\nvar dirx = \"SENW\"\r\nvar last = -1\r\nwhile(qt < qh){\r\n    val cur = q[qt++]\r\n    yr = cur/40/40/40\r\n    yc = cur/40/40%40\r\n    br = cur/40%40\r\n    bc = cur%40\r\n    if(br == tr && bc == tc){\r\n        last = cur\r\n        break\r\n    }\r\n    for(k in 0..3){\r\n        val nyr = yr + dr[k]\r\n        val nyc = yc + dc[k]\r\n        if(0 <= nyr && nyr < n && 0  <= nyc && nyc < m && b[nyr][nyc] != 'X'){\r\n            var nbr = br\r\n            var nbc = bc\r\n            var dir = dirs[k]\r\n            if(nbr == nyr && nbc == nyc){\r\n                nbr += dr[k]\r\n                nbc += dc[k]\r\n                if(!(0 <= nbr && nbr < n && 0  <= nbc && nbc < m && b[nbr][nbc] != 'X')){\r\n                    continue\r\n                }\r\n                dir = dirx[k]\r\n            }\r\n            val ncode = ((nyr*40+nyc)*40+nbr)*40+nbc\r\n            if(d[ncode] > d[cur] + 1){\r\n                d[ncode] = d[cur] + 1\r\n                moves[ncode] = dir\r\n                prevs[ncode] = cur\r\n                q[qh++] = ncode\r\n            }\r\n        }\r\n    }\r\n}\r\nif(last == -1){\r\n    println(\"NO\")\r\n}else{\r\n    println(\"YES\")\r\n    val route = Array<Char>(d[last], {i -> '.'})\r\n    var cur = last\r\n    while(cur != scode){\r\n        route[d[cur]-1] = moves[cur]\r\n        cur = prevs[cur]\r\n    }\r\n    for(t in route){\r\n        print(t)\r\n    }\r\n}\r\n\r\n}"
}