{
    "id": 48957756,
    "contestId": 683,
    "creationTimeSeconds": 1548480122,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 683,
        "index": "I",
        "name": "Loader",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "*special",
            "graphs"
        ]
    },
    "author": {
        "contestId": 683,
        "members": [
            {
                "handle": "yongwhan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466092800
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 592,
    "memoryConsumedBytes": 85913600,
    "source": "import java.util.*\r\nfun state(x : Int, y : Int, xx : Int, yy : Int, n : Int, m : Int, a : ArrayList<String>) : Int {\r\n  if (x < 0) return 0\r\n  if (y < 0) return 0\r\n  if (x >= n) return 0\r\n  if (y >= m) return 0\r\n  if (xx < 0) return 0\r\n  if (yy < 0) return 0\r\n  if (xx >= n) return 0\r\n  if (yy >= m) return 0\r\n  if (x == xx && y == yy) return 0\r\n  if (a[x][y] == 'X') return 0\r\n  if (a[xx][yy] == 'X') return 0\r\n  return x * 68921 + y * 1681 + xx * 41 + yy + 1;\r\n}\r\nfun main(args: Array<String>) {\r\n  val (n, m) = readLine()!!.split(' ').map(String::toInt)\r\n  val a = ArrayList<String>()\r\n  var sx = 0\r\n  var sy = 0\r\n  var tx = 0\r\n  var ty = 0\r\n  var bx = 0\r\n  var by = 0\r\n  for (i in 0 .. n - 1) {\r\n    a.add(readLine()!!)\r\n    for (j in 0 .. m - 1) {\r\n      if (a[i][j] == 'Y') {\r\n        sx = i\r\n        sy = j\r\n      } else if (a[i][j] == 'B') {\r\n        bx = i\r\n        by = j\r\n      } else if (a[i][j] == 'T') {\r\n        tx = i\r\n        ty = j\r\n      }\r\n    }\r\n  }\r\n  val visited = ArrayList<Int>();\r\n  val back = ArrayList<Char>();\r\n  for (i in 0 .. 2825761) {\r\n    visited.add(0)\r\n    back.add(' ')\r\n  }\r\n  visited[0] = 1\r\n  val q = ArrayList<Int>()\r\n  var orig = state(sx, sy, bx, by, n, m, a)\r\n  q.add(orig)\r\n  var qs = 0\r\n  val dx = listOf(0, 0, -1, 1)\r\n  var dy = listOf(1, -1, 0, 0)\r\n  var da = \"ewns\"\r\n  while (qs < q.size) {\r\n    val ff = q[qs]\r\n    var f = ff\r\n    qs++\r\n    f--\r\n    val yy = f % 41\r\n    f /= 41\r\n    val xx = f % 41\r\n    f /= 41\r\n    val y = f % 41\r\n    f /= 41\r\n    val x = f \r\n    if (xx == tx && yy == ty) {\r\n      // backtrack\r\n      println(\"YES\")\r\n      val o = ArrayList<Char>()\r\n      f = ff\r\n      while (f != orig) {\r\n        o.add(back[f])\r\n        f = visited[f]\r\n      }\r\n      o.reverse()\r\n      for (i in o) {\r\n        print(i)\r\n      }\r\n      println(\"\")\r\n      return\r\n    }\r\n    for (i in 0 .. 3) {\r\n      val z = state(x + dx[i], y + dy[i], xx, yy, n, m, a)\r\n      if (visited[z] > 0) continue\r\n      visited[z] = ff\r\n      back[z] = da[i]\r\n      q.add(z)\r\n    }\r\n    for (i in 0 .. 3) {\r\n      if (x != xx - dx[i] || y != yy - dy[i]) continue\r\n      val z = state(x + dx[i], y + dy[i], xx + dx[i], yy + dy[i], n, m, a)\r\n      if (visited[z] > 0) continue\r\n      visited[z] = ff\r\n      back[z] = da[i] - 32\r\n      q.add(z)\r\n    }\r\n  }\r\n  println(\"NO\")\r\n}"
}