{
    "id": 121319890,
    "contestId": 683,
    "creationTimeSeconds": 1625407443,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 683,
        "index": "I",
        "name": "Loader",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "*special",
            "graphs"
        ]
    },
    "author": {
        "contestId": 683,
        "members": [
            {
                "handle": "cf-coder"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466092800
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "\r\nvar last = -1\r\nwhile(qt < qh){\r\n    val cur = q[qt++]\r\n    yr = cur/40/40/40\r\n    yc = cur/40/40%40\r\n    br = cur/40%40\r\n    bc = cur%40\r\n    if(br == tr && bc == tc){\r\n        last = cur\r\n        break\r\n    }\r\n    for(k in 0..3){\r\n        val nyr = yr + dr[k]\r\n        val nyc = yc + dc[k]\r\n        if(0 <= nyr && nyr < n && 0  <= nyc && nyc < m && b[nyr][nyc] != 'X'){\r\n            var nbr = br\r\n            var nbc = bc\r\n            var dir = dirs[k]\r\n            if(nbr == nyr && nbc == nyc){\r\n                nbr += dr[k]\r\n                nbc += dc[k]\r\n                if(!(0 <= nbr && nbr < n && 0  <= nbc && nbc < m && b[nbr][nbc] != 'X')){\r\n                    continue\r\n                }\r\n                dir = dirx[k]\r\n            }\r\n            val ncode = ((nyr*40+nyc)*40+nbr)*40+nbc\r\n            if(d[ncode] > d[cur] + 1){\r\n                d[ncode] = d[cur] + 1\r\n                moves[ncode] = dir\r\n                prevs[ncode] = cur\r\n                q[qh++] = ncode\r\n            }\r\n        }\r\n    }\r\n}\r\nif(last == -1){\r\n    println(\"NO\")\r\n}else{\r\n    println(\"YES\")\r\n    val route = Array<Char>(d[last], {i -> '.'})\r\n    var cur = last\r\n    while(cur != scode){\r\n        route[d[cur]-1] = moves[cur]\r\n        cur = prevs[cur]\r\n    }\r\n    for(t in route){\r\n        print(t)\r\n    }\r\n}\r\n \r\n}"
}