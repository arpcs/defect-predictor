{
    "contestId": 1765,
    "index": "G",
    "name": "Guess the String",
    "type": "PROGRAMMING",
    "rating": 2600,
    "tags": [
        "constructive algorithms",
        "interactive",
        "probabilities"
    ],
    "desc": {
        "title": "G. Guess the String",
        "statement": "<p><span class=\"tex-font-style-bf\">This is an interactive problem. You have to use <span class=\"tex-font-style-tt\">flush</span> operation right after printing each line. For example, in C++ you should use the function <span class=\"tex-font-style-tt\">fflush(stdout)</span>, in Java or Kotlin \u2014 <span class=\"tex-font-style-tt\">System.out.flush()</span>, and in Python \u2014 <span class=\"tex-font-style-tt\">sys.stdout.flush()</span>.</span></p><p>The jury has a string $$$s$$$ consisting of characters <span class=\"tex-font-style-tt\">0</span> and/or <span class=\"tex-font-style-tt\">1</span>. The first character of this string is <span class=\"tex-font-style-tt\">0</span>. The length of this string is $$$n$$$. You have to guess this string. Let's denote $$$s[l..r]$$$ as the substring of $$$s$$$ from $$$l$$$ to $$$r$$$ (i.\u2009e. $$$s[l..r]$$$ is the string $$$s_ls_{l+1} \\dots s_r$$$).</p><p>Let the <span class=\"tex-font-style-it\">prefix function</span> of the string $$$s$$$ be an array $$$[p_1, p_2, \\dots, p_n]$$$, where $$$p_i$$$ is the greatest integer $$$j \\in [0, i-1]$$$ such that $$$s[1..j] = s[i-j+1..i]$$$. Also, let the <span class=\"tex-font-style-it\">antiprefix function</span> of the string $$$s$$$ be an array $$$[q_1, q_2, \\dots, q_n]$$$, where $$$q_i$$$ is the greatest integer $$$j \\in [0, i-1]$$$ such that $$$s[1..j]$$$ differs from $$$s[i-j+1..i]$$$ in <span class=\"tex-font-style-bf\">every</span> position.</p><p>For example, for the string <span class=\"tex-font-style-tt\">011001</span>, its <span class=\"tex-font-style-it\">prefix function</span> is $$$[0, 0, 0, 1, 1, 2]$$$, and its <span class=\"tex-font-style-it\">antiprefix function</span> is $$$[0, 1, 1, 2, 3, 4]$$$.</p><p>You can ask queries of two types to guess the string $$$s$$$:</p><ul> <li> $$$1$$$ $$$i$$$ \u2014 \"what is the value of $$$p_i$$$?\"; </li><li> $$$2$$$ $$$i$$$ \u2014 \"what is the value of $$$q_i$$$?\". </li></ul><p>You have to guess the string by asking no more than $$$789$$$ queries. Note that giving the answer does not count as a query.</p><p><span class=\"tex-font-style-bf\">In every test and in every test case, the string $$$s$$$ is fixed beforehand</span>.</p>",
        "inputSpecification": null,
        "outputSpecification": null,
        "samples": [
            {
                "input": "\n2 // 2 test cases\n6 // n = 6\n\n0 // p[3] = 0\n\n1 // q[2] = 1\n\n4 // q[6] = 4\n\n1 // p[4] = 1\n\n1 // answer is correct\n5 // n = 5\n\n1 // p[2] = 1\n\n2 // q[4] = 2\n\n2 // q[5] = 2\n\n1 // answer is correct\n",
                "output": "\n\n\n1 3      // what is p[3]?\n\n2 2      // what is q[2]?\n\n2 6      // what is q[6]?\n\n1 4      // what is p[4]?\n\n0 011001 // the guess is 011001\n\n\n1 2      // what is p[2]?\n\n2 4      // what is q[4]?\n\n2 5      // what is q[5]?\n\n0 00111  // the guess is 00111\n\n"
            }
        ],
        "note": "<p>The example contains one possible way of interaction in a test where $$$t = 2$$$, and the strings guessed by the jury are <span class=\"tex-font-style-tt\">011001</span> and <span class=\"tex-font-style-tt\">00111</span>. Note that everything after the <span class=\"tex-font-style-tt\">//</span> sign is a comment that explains which line means what in the interaction. <span class=\"tex-font-style-bf\">The jury program won't print these comments in the actual problem, and you shouldn't print them</span>. The empty lines are also added for your convenience, <span class=\"tex-font-style-bf\">the jury program won't print them, and your solution should not print any empty lines</span>.</p>"
    },
    "suggested_categories": [
        "interactive problem",
        "algorithm",
        "string manipulation",
        "prefix function",
        "antiprefix function",
        "query",
        "binary string",
        "combinatorics",
        "guessing game",
        "substring",
        "character manipulation",
        "array manipulation",
        "logic puzzle",
        "optimization",
        "pattern matching",
        "code optimization",
        "computational complexity",
        "programmatic guessing",
        "string pattern",
        "boundary conditions"
    ]
}