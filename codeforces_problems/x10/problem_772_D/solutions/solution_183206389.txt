{
    "id": 183206389,
    "contestId": 772,
    "creationTimeSeconds": 1669724964,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 772,
        "index": "D",
        "name": "Varying Kibibits",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2700,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 772,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1492356900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 84070400,
    "source": "#define taskname \"And Graph\"\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int maxn = (1<<22) + 10;\nint f[maxn], p[maxn], cnt[maxn], a[maxn], check[maxn], n, m;\n\ninline int fp(int u) {return !p[u] ? u : p[u] = fp(p[u]);}\ninline bool uni(int u, int v)\n{\n    if ((u = fp(u)) == (v = fp(v))) return 0;\n    return p[v] = u, 1;\n}\n\n/**\n    Unite all mask with submask of mask if ~mask exist\n    Connect all mask with inv(mask)\n    If mask has its corresponding inversion we can connect it with all of its submask\n    Connect all mask with submask?\n**/\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr); cout.tie(nullptr);\n    cin>>n>>m;\n    unordered_set<int> us;\n    for (int i=1, x; i<=m; i++) cin>>x, f[x] = 1, a[i] = x, cnt[x] = 1;\n    for (int i=0; i<n; i++)\n        for (int j=0; j<(1<<n); j++)\n            if (j >> i & 1) f[j] |= f[j ^ (1<<i)];\n    /** f: To decide whether a mask has any of its submask as input **/\n    int mask = (1<<n) - 1;\n    for (int i=1; i<=m; i++) if (f[mask ^ a[i]]) check[a[i]] = 1, uni(a[i], mask ^ a[i]);\n    /** Check: To decide whether a mask has its corresponding inversion **/\n    for (int i=0; i<n; i++)\n        for (int j=0; j<(1<<n); j++)\n            if (j >> i & 1) check[j] |= check[j ^ (1<<i)];\n    /** Check: To decide whether a mask has any submask with its corresponding inversion **/\n    for (int i=0; i<(1<<n); i++) if (!check[i]) f[mask ^ i] = 0;\n    /** f: To decide whether a mask has any corresponding inversion **/\n    for (int i=0; i<n; i++)\n        for (int j=0; j<(1<<n); j++)\n            if (j >> i & 1 && f[j] && f[j ^ (1<<i)]) uni(j, j ^ (1<<i));\n    /** The remaining f are those with appropriate inversions and thus, have to be connected **/\n    for (int i=0; i<(1<<n); i++) if (cnt[i]) us.emplace(fp(i));\n    /** Count the number of different component **/\n    cout<<(int)us.size()<<\"\\n\";\n}\n\n      \t  \t \t \t\t\t\t\t \t \t\t\t\t\t\t\t  \t"
}