{
    "id": 212860490,
    "contestId": 1025,
    "creationTimeSeconds": 1688833712,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1025,
        "index": "F",
        "name": "Disjoint Triangles",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2700,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 1025,
        "members": [
            {
                "handle": "Fake.Puppet"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1534685700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/// get a bone muthafaka\r\n/// #pragma GCC optimize(\"O3\")\r\n#pragma GCC optimize (\"unroll-loops\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n\r\n#include \"bits/stdc++.h\"\r\n\r\nusing namespace std;\r\n\r\n#define pb push_back\r\n#define F first\r\n#define S second\r\n#define f(i, a, b)  for(int i = a; i < b; i++)\r\n#define all(a)  a.begin(),a.end()\r\n#define rall(a) a.rbegin(),a.rend()\r\n#define popCnt(x) (__builtin_popcountll(x))\r\n//#define int ll\r\n\r\nusing ll = long long;\r\nusing ii = pair<int, int>;\r\n\r\nconst int N = 5e5 + 5, LG = 18, MOD = 1e9 + 7;\r\nconst long double PI = acos(-1);\r\nconst long double EPS = 1e-7;\r\n\r\nconst int dx[] = {0, 0, 1, -1};\r\nconst int dy[] = {1, -1, 0, 0};\r\nstruct node {\r\n    int F, S, index;\r\n};\r\nnode vp[55];\r\nvector<array<int, 4>> ans[2];\r\nint grid[55][55];\r\n\r\nvoid move(int index, bool phase, int dx, int dy) {\r\n    if (grid[vp[index].F + dx][vp[index].S + dy])move(grid[vp[index].F + dx][vp[index].S + dy], phase, dx, dy);\r\n    ans[phase].push_back({vp[index].F, vp[index].S, vp[index].F + dx, vp[index].S + dy});\r\n    swap(grid[vp[index].F][vp[index].S], grid[vp[index].F + dx][vp[index].S + dy]);\r\n    vp[index].F += dx;\r\n    vp[index].S += dy;\r\n}\r\n\r\nvoid doWork() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    f(x, 0, 2) {\r\n        f(i, 1, m + 1) cin >> vp[i].F >> vp[i].S, vp[i].index = i;\r\n        sort(vp + 1, vp + 1 + m, [&](node a, node b) {\r\n            return a.F < b.F;\r\n        });\r\n        ::memset(grid, 0, sizeof grid);\r\n        f(i, 1, m + 1)grid[vp[i].F][vp[i].S] = i;\r\n        f(i, 1, m + 1) {\r\n            while (vp[i].F < i)move(i, x, 1, 0);\r\n            while (vp[i].F > i)move(i, x, -1, 0);\r\n        }\r\n        f(i, 1, m + 1) {\r\n            while (vp[i].S < vp[i].index)move(i, x, 0, 1);\r\n            while (vp[i].S > vp[i].index)move(i, x, 0, -1);\r\n        }\r\n        f(i, 1, m + 1) {\r\n            while (vp[i].F < vp[i].index)move(i, x, 1, 0);\r\n            while (vp[i].F > vp[i].index)move(i, x, -1, 0);\r\n        }\r\n    }\r\n    cout << ans[0].size() + ans[1].size() << '\\n';\r\n    for (auto arr: ans[0]) {\r\n        for (auto x: arr) cout << x << ' ';\r\n        cout << '\\n';\r\n    }\r\n    sort(all(ans[1]));\r\n    for (auto arr: ans[1]) {\r\n        cout << arr[2] << ' ' << arr[3] << ' ' << arr[0] << ' ' << arr[1] << '\\n';\r\n    }\r\n}\r\n\r\nint32_t main() {\r\n#ifdef ONLINE_JUDGE\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n#endif // ONLINE_JUDGE\r\n\r\n    int t = 1;\r\n//    cin >> t;\r\n    while (t--) {\r\n        doWork();\r\n    }\r\n    return 0;\r\n}\r\n"
}