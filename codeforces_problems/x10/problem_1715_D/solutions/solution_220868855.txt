{
    "id": 220868855,
    "contestId": 1715,
    "creationTimeSeconds": 1693234983,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1715,
        "index": "D",
        "name": "2+ doors",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 1900,
        "tags": [
            "2-sat",
            "bitmasks",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1715,
        "members": [
            {
                "handle": "anangoprabhat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1661006100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 32460800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define ll long long\r\n#define int long long\r\nusing ld = long double;\r\nusing db = double;\r\nusing str = string;\r\n\r\nusing ii = pair<int,int>;\r\nusing pl = pair<ll,ll>;\r\nusing pd = pair<db,db>;\r\n\r\nusing vi = vector<int>;\r\nusing vb = vector<bool>;\r\nusing vl = vector<ll>;\r\nusing vd = vector<db>;\r\nusing vs = vector<str>;\r\nusing vii = vector<ii>;\r\nusing vpl = vector<pl>;\r\nusing vpd = vector<pd>;\r\n\r\n#define tcT template<class T\r\n#define tcTU tcT, class U\r\n\r\ntcT> using V = vector<T>;\r\ntcT, size_t SZ> using AR = array<T,SZ>;\r\ntcT> using PR = pair<T,T>;\r\n\r\n// pairs\r\n#define mp make_pair\r\n#define f first\r\n#define s second\r\n\r\n#define FOR(i,a,b) for (int i = (a); i < (b); ++i)\r\n#define F0R(i,a) FOR(i,0,a)\r\n#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)\r\n#define R0F(i,a) ROF(i,0,a)\r\n#define trav(a,x) for (auto& a: x)\r\n\r\n#define len(x) int((x).size())\r\n#define bg(x) begin(x)\r\n#define all(x) bg(x), end(x)\r\n#define rall(x) rbegin(x), rend(x)\r\n#define sor(x) sort(all(x))\r\n#define rsz resize\r\n#define ins insert\r\n#define ft front()\r\n#define bk back()\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define pf push_front\r\n#define fastio ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\n\r\nconst int MOD = 1e9+7; // 998244353;\r\nconst int MX = 2e5+5;\r\nconst ll INF = 1e18; // not too close to LLONG_MAX\r\nconst ld PI = acos((ld)-1);\r\nconst int dx[4] = {1,0,-1,0}, dy[4] = {0,1,0,-1}; // for every grid problem!!\r\n\r\n\r\nstruct Modular {\r\n    int value;\r\n    static const int MOD_value = MOD;\r\n\r\n    Modular(long long v = 0) { value = v % MOD; if (value < 0) value += MOD;}\r\n    Modular(long long a, long long b) : value(0){ *this += a; *this /= b;}\r\n\r\n    Modular& operator+=(Modular const& b) {value += b.value; if (value >= MOD) value -= MOD; return *this;}\r\n    Modular& operator-=(Modular const& b) {value -= b.value; if (value < 0) value += MOD;return *this;}\r\n    Modular& operator*=(Modular const& b) {value = (long long)value * b.value % MOD;return *this;}\r\n\r\n    friend Modular mexp(Modular a, long long e) {\r\n        Modular res = 1; while (e) { if (e&1) res *= a; a *= a; e >>= 1; }\r\n        return res;\r\n    }\r\n    friend Modular inverse(Modular a) { return mexp(a, MOD - 2); }\r\n\r\n    Modular& operator/=(Modular const& b) { return *this *= inverse(b); }\r\n    friend Modular operator+(Modular a, Modular const b) { return a += b; }\r\n    friend Modular operator-(Modular a, Modular const b) { return a -= b; }\r\n    friend Modular operator-(Modular const a) { return 0 - a; }\r\n    friend Modular operator*(Modular a, Modular const b) { return a *= b; }\r\n    friend Modular operator/(Modular a, Modular const b) { return a /= b; }\r\n    friend std::ostream& operator<<(std::ostream& os, Modular const& a) {return os << a.value;}\r\n    friend bool operator==(Modular const& a, Modular const& b) {return a.value == b.value;}\r\n    friend bool operator!=(Modular const& a, Modular const& b) {return a.value != b.value;}\r\n};\r\nint exp(int a, long long e) {\r\n        int res = 1; while (e) { if (e&1) res *= a; a *= a; e >>= 1; res%=MOD; a%=MOD;};\r\n        return res%MOD;\r\n}\r\nint inverse(int n) {\r\n    return exp(n,MOD-2)%MOD;\r\n}\r\nint divide(int a,int b){\r\n    return a*inverse(b)%MOD;\r\n}\r\n\r\n\r\n\r\nint32_t main() {\r\n    int n,q;\r\n    fastio\r\n    cin >> n >> q;\r\n    vector<vector<int>> v;\r\n    for (int i=0; i<q; i++) {\r\n    \tint a,b,x;\r\n    \tcin >> a >> b >> x;\r\n    \ta--;\r\n    \tb--;\r\n    \tv.push_back({a,b,x});\r\n    }\r\n    vector<vector<pair<int,int>>> adjlist(n);\r\n    //edge a_i|a_j = x -> adjlist[i].push_back({a_j,x})\r\n    for (auto i:v) {\r\n    \tadjlist[i[0]].push_back({i[1],i[2]});\r\n    \tadjlist[i[1]].push_back({i[0],i[2]});\r\n    }\r\n    \r\n    //for (auto i:connected_comps) {\r\n    //\tfor (auto j:i) {\r\n    //\t\tcout << j << \" \";\r\n    //\t}\r\n    //\tcout << endl;\r\n    //}\r\n    //cout << \"2nd phase \"<<endl;\r\n    vector<int> numbers(n,0);\r\n    for (int bit=0; bit<30; bit++) {\r\n    \tvector<int> bitvals(n,0);\r\n    \tvector<int> forcedzeros(n,0);\r\n    \tmultiset<int> maximums;\r\n    \tfor (int k=0; k<n; k++) {\r\n    \t\tfor (auto i:adjlist[k]) {\r\n    \t\t\tif (0==(i.second&(1<<bit))) {\r\n    \t\t\t\tforcedzeros[k]=1;\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \tfor (int k=0; k<n; k++) {\r\n    \t\tfor (auto i:adjlist[k]) {\r\n    \t\t\tint p=i.first;\r\n    \t\t\tint q=(0!=(i.second&(1<<bit)));\r\n    \t\t\tif (q==0) {\r\n    \t\t\t\tcontinue;\r\n    \t\t\t}\r\n    \t\t\tif (forcedzeros[k]) {\r\n    \t\t\t\tif (forcedzeros[i.first]) {\r\n    \t\t\t\t\tassert(1==0); //never should both be forced 0\r\n    \t\t\t\t}\r\n    \t\t\t\telse {\r\n    \t\t\t\t\tbitvals[i.first]=1;\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t\telse {\r\n    \t\t\t\tif (forcedzeros[i.first]) {\r\n    \t\t\t\t\tbitvals[k]=1;\r\n    \t\t\t\t}\r\n    \t\t\t\telse {\r\n    \t\t\t\t\tmaximums.insert(max(k,i.first));\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \t\t\r\n\t\twhile (maximums.size()) {\r\n\t\t\tint minmax=*min_element(all(maximums));\r\n\t\t\tbitvals[minmax]=1;\r\n\t\t\tfor (auto i:adjlist[minmax]) {\r\n\t\t\t\tif (!forcedzeros[i.first]) {\r\n\t\t\t\t\tmaximums.erase(maximums.find(max(i.first,minmax)));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i=0; i<n; i++) {\r\n\t\t\tnumbers[i]+=bitvals[i]*(1<<bit);\r\n\t\t}\r\n    }\r\n    for (int i=0; i<n; i++) {\r\n    \tcout << numbers[i] << \" \";\r\n    }\r\n    cout << endl;\r\n}\r\n\r\n"
}