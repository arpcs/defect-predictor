{
    "id": 234001565,
    "contestId": 1267,
    "creationTimeSeconds": 1700808421,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1267,
        "index": "L",
        "name": "Lexicography",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "strings"
        ]
    },
    "author": {
        "contestId": 1267,
        "members": [
            {
                "handle": "sxb_201"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1575183600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 72,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 5324800,
    "source": "#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <string>\r\n#include <vector>\r\n\r\nint bucket[30];\r\nint n, l, k;\r\nusing namespace std;\r\n\r\nstd::vector<std::vector<int>> ans;\r\n\r\nint pos=0;\r\nint pos_max='z'-'a';\r\nint get_min(){\r\n    while(true){\r\n        if(bucket[pos]){\r\n            bucket[pos]--;\r\n//            printf(\"%c\\n\",pos+'a');\r\n            return pos;\r\n        }\r\n        pos++;\r\n    }\r\n}\r\n\r\nint get_max(){\r\n    while(true){\r\n        if(bucket[pos_max]){\r\n            bucket[pos_max]--;\r\n            //            printf(\"%c\\n\",pos+'a');\r\n            return pos_max;\r\n        }\r\n        pos_max--;\r\n    }\r\n}\r\n\r\nchar s[1000000+10];\r\nint main() {\r\n    cin >> n >> l >> k;\r\n    scanf(\"%s\",s);\r\n    for (int i = 0; i < n * l; i++) {\r\n\r\n        bucket[s[i] - 'a']++;\r\n    }\r\n    ans.resize(1000+10);\r\n    for(int i=1;i<=n;i++){\r\n        ans[i].resize(1000+10);\r\n    }\r\n    for(int i=1;i<=k;i++) {\r\n        ans[i][1]=get_min();\r\n    }\r\n    int min_p=1;\r\n    for(int col=2;col<=l;col++){\r\n        int p=k;\r\n        while (p-1>=1 && p-1>=min_p && ans[p][col-1]==ans[p-1][col-1]){\r\n            p-=1;\r\n        }\r\n        min_p = p;\r\n//        printf(\"%d %d\\n\",col,p);\r\n        for(int i=p;i<=k;i++){\r\n            ans[i][col]=get_min();\r\n//            printf(\"%d %d %c\\n\",col,p,ans[p][col]);\r\n        }\r\n        for(int i=p-1;i>=1;i--){\r\n            ans[i][col]=get_max();\r\n        }\r\n    }\r\n\r\n    for(int i=k+1;i<=n;i++){\r\n        for(int j=1;j<=l;j++){\r\n            ans[i][j]=get_min();\r\n        }\r\n    }\r\n    for(int i=1;i<=n;i++){\r\n        for(int j=1;j<=l;j++){\r\n            printf(\"%c\",ans[i][j]+'a');\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return 0;\r\n}"
}