{
    "id": 226979786,
    "contestId": 1267,
    "creationTimeSeconds": 1696668130,
    "relativeTimeSeconds": 8230,
    "problem": {
        "contestId": 1267,
        "index": "L",
        "name": "Lexicography",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "strings"
        ]
    },
    "author": {
        "contestId": 1267,
        "members": [
            {
                "handle": "Pan1n"
            },
            {
                "handle": "StrausKoldun"
            },
            {
                "handle": "Apachee"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 136663,
        "teamName": "Eva Fan Club",
        "ghost": false,
        "startTimeSeconds": 1696659900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "    #include <bits/stdc++.h>\r\n    using namespace std;\r\n\r\n    vector<string> strs;\r\n    deque<char> d;\r\n    int n, len, k;\r\n\r\n    void Fill(int depth, int l, int r) {\r\n        if (depth == len) {\r\n            return;\r\n        } \r\n\r\n        int lx = l;\r\n        int rx = l;\r\n\r\n        while (lx <= r) {\r\n            while (rx < r && strs[rx+1][depth-1] == strs[lx][depth-1]) {\r\n                rx += 1;\r\n            }\r\n            if (rx < k-1) {\r\n                for (int i = lx; i <= rx; i++) {\r\n                    for (int j = depth; j < len; j++) {\r\n                        strs[i].push_back(d.back());\r\n                        d.pop_back();\r\n                    }\r\n                }\r\n            } else {\r\n                for (int i = lx; i <= rx; i++) {\r\n                    strs[i].push_back(d.front());\r\n                    d.pop_front();\r\n                }\r\n                Fill(depth+1, lx, rx);\r\n            }\r\n            lx = rx+1;\r\n        }\r\n    }\r\n\r\n    int main() {\r\n        cin >> n >> len >> k;\r\n\r\n        for (int i = 0; i < len*n; i++) {\r\n            char c;\r\n            cin >> c;\r\n            d.push_back(c);\r\n        }\r\n        \r\n\r\n\r\n        strs.resize(n);\r\n\r\n        sort(d.begin(), d.end());\r\n\r\n        for (int i = 0; i < k; i++) {\r\n            strs[i].push_back(d.front());\r\n            d.pop_front();\r\n        }\r\n\r\n        int lx = k-1;\r\n        int rx = k-1;\r\n\r\n        while (lx-1>= 0 && strs[lx][0] == strs[rx][0]) {\r\n            lx -= 1;\r\n        }\r\n\r\n        Fill(1, lx, rx);\r\n\r\n        \r\n\r\n        for (int i = k; i < n; i++) {\r\n            for (int j = 0; j < len; j++) {\r\n                strs[i].push_back(d.front());\r\n                d.pop_front();\r\n            }\r\n        }\r\n\r\n        sort(strs.begin(), strs.end());\r\n\r\n        for (auto item : strs) {\r\n            cout << item << '\\n';\r\n        }\r\n\r\n    }"
}