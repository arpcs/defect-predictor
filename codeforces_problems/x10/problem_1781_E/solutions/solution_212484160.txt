{
    "id": 212484160,
    "contestId": 1781,
    "creationTimeSeconds": 1688688824,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1781,
        "index": "E",
        "name": "Rectangle Shrinking",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1781,
        "members": [
            {
                "handle": "codeudcker"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1673784300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n #include <vector>\r\n struct Rectangle {\r\n     int u, l, d, r;\r\n };\r\n int main() {\r\n     int t;\r\n     std::cin >> t;\r\n     while (t--) {\r\n         int n;\r\n         std::cin >> n;\r\n         std::vector<Rectangle> rectangles(n);\r\n         for (int i = 0; i < n; i++) {\r\n             std::cin >> rectangles[i].u >> rectangles[i].l >> rectangles[i].d >> rectangles[i].r;\r\n         }\r\n         std::vector<int> rowCounts(3, 0);\r\n         std::vector<int> colCounts(1000000001, 0);\r\n         for (int i = 0; i < n; i++) {\r\n             rowCounts[rectangles[i].u]++;\r\n             rowCounts[rectangles[i].d + 1]--;\r\n             colCounts[rectangles[i].l]++;\r\n             colCounts[rectangles[i].r + 1]--;\r\n         }\r\n         for (int i = 1; i < 3; i++) {\r\n             rowCounts[i] += rowCounts[i - 1];\r\n         }\r\n         for (int i = 1; i < 1000000001; i++) {\r\n             colCounts[i] += colCounts[i - 1];\r\n         }\r\n         std::vector<Rectangle> newRectangles;\r\n         for (int i = 0; i < n; i++) {\r\n             if (rowCounts[rectangles[i].u] > 1 || rowCounts[rectangles[i].d] < 2 ||\r\n                 colCounts[rectangles[i].l] > 1 || colCounts[rectangles[i].r] < 2) {\r\n                 newRectangles.push_back({0, 0, 0, 0});\r\n             } else {\r\n                 newRectangles.push_back(rectangles[i]);\r\n             }\r\n         }\r\n         int area = 0;\r\n         for (int i = 0; i < n; i++) {\r\n             if (newRectangles[i].u != 0) {\r\n                 area += (newRectangles[i].r - newRectangles[i].l + 1) * (newRectangles[i].d - newRectangles[i].u + 1);\r\n             }\r\n         }\r\n         std::cout << area << \"\\n\";\r\n         for (int i = 0; i < n; i++) {\r\n             std::cout << newRectangles[i].u << \" \" << newRectangles[i].l << \" \" << newRectangles[i].d << \" \"\r\n                       << newRectangles[i].r << \"\\n\";\r\n         }\r\n     }\r\n     return 0;\r\n }\r\n"
}