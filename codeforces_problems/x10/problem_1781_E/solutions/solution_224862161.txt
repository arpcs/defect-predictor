{
    "id": 224862161,
    "contestId": 1781,
    "creationTimeSeconds": 1695557327,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1781,
        "index": "E",
        "name": "Rectangle Shrinking",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1781,
        "members": [
            {
                "handle": "_Linglin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1673784300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 120217600,
    "source": "#include<bits/stdc++.h>\r\n#include<vector>\r\n#include<string>\r\n#include<set>\r\n#include<map>\r\n#include<bitset>\r\n#include<unordered_map>\r\n#include<exception>\r\n#include<deque>\r\n#include<algorithm>\r\n\r\nusing namespace std;\r\n\r\n#define int long long\r\n\r\nconst int N = 5e5+10;\r\nconst int inf = 0x3f3f3f3f;\r\nconst long long infll = 0x3f3f3f3f3f3f3f3f;\r\nconst int mod = 998244353;\r\nconst int B = 1000;\r\n\r\nint totCase;\r\nint tmp[N * 4];\r\nint visup[N * 4], visdn[N * 4];\r\n\r\nstruct ss{\r\n    int u, d, l, r, id, del;\r\n\r\n    bool operator < (const ss & p) const {\r\n        return l < p.l;\r\n    }\r\n}s[N];\r\n\r\nint Case;\r\n\r\nstruct seg{\r\n    int l, r, id, stack;\r\n\r\n    bool operator < (const seg & p) const {\r\n\r\n        if(s[id].del != s[p.id].del){\r\n            return s[id].del < s[p.id].del;\r\n        }\r\n\r\n\r\n        if(l == p.l){\r\n            return r < p.r;\r\n        }\r\n\r\n        return l < p.l;\r\n    }\r\n}up[N], dn[N], updn[N];\r\n\r\nbool cmp_by_id(const ss & a, const ss & b){\r\n    return a.id < b.id;\r\n}\r\n\r\nvoid work(){\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    for(int i = 0; i <= n + 10; i ++){\r\n        up[i].stack = dn[i].stack = updn[i].stack = s[i].del = 0;\r\n        up[i].l = dn[i].l = updn[i].l = 0;\r\n        up[i].r = up[i].r = updn[i].r = 0;\r\n    }\r\n\r\n    memset(up, 0, sizeof(seg) * (n + 10));\r\n    memset(dn, 0, sizeof(seg) * (n + 10));\r\n    memset(updn, 0, sizeof(seg) * (n + 10));\r\n    memset(s, 0, sizeof(ss) * (n + 10));\r\n\r\n    int cnt = 0;\r\n    for(int i = 1; i <= n; i ++){\r\n        cin >> s[i].u >> s[i].l >> s[i].d >> s[i].r;\r\n        s[i].id = i;\r\n        s[i].del = 0;\r\n        tmp[++ cnt] = s[i].l;\r\n        tmp[++ cnt] = s[i].r;\r\n        tmp[++ cnt] = s[i].l - 1;\r\n        tmp[++ cnt] = s[i].r - 1;\r\n        tmp[++ cnt] = s[i].l + 1;\r\n        tmp[++ cnt] = s[i].r + 1;\r\n    }\r\n\r\n\r\n    memset(visup, 0, sizeof(int) * (cnt + 10));\r\n    memset(visdn, 0, sizeof(int) * (cnt + 10));\r\n    sort(tmp + 1, tmp + cnt + 1);\r\n\r\n    for(int i = 1; i <= n; i ++){\r\n        s[i].l = lower_bound(tmp + 1, tmp + cnt + 1, s[i].l) - tmp;\r\n        s[i].r = lower_bound(tmp + 1, tmp + cnt + 1, s[i].r) - tmp;\r\n\r\n        if(s[i].u == 1 && s[i].d == 1){\r\n            visup[s[i].r + 1] --;\r\n            visup[s[i].l] ++;\r\n        }\r\n\r\n        if(s[i].u == 2 && s[i].d == 2){\r\n            visdn[s[i].r + 1] --;\r\n            visdn[s[i].l] ++;\r\n        }\r\n    }\r\n\r\n    for(int i = 1; i <= cnt; i ++){\r\n        visup[i] += visup[i - 1];\r\n        visdn[i] += visdn[i - 1];\r\n    }\r\n\r\n    for(int i = 1; i <= cnt; i ++){\r\n        if(visup[i]){\r\n            visup[i] = 1;\r\n        }\r\n        if(visdn[i]){\r\n            visdn[i] = 1;\r\n        }\r\n    }\r\n\r\n    auto & sumup = visup;\r\n    auto & sumdn = visdn;\r\n\r\n    for(int i = 1; i <= cnt; i ++){\r\n        sumup[i] += sumup[i - 1];\r\n        sumdn[i] += sumdn[i - 1];\r\n    }\r\n\r\n    for(int i = 1; i <= n; i ++){\r\n        if(s[i].u == 1 && s[i].d == 2){\r\n            int ll = s[i].l, rr = s[i].r;\r\n            bool caseup = (sumup[rr] - sumup[ll - 1] == rr - ll + 1);\r\n            bool casedn = (sumdn[rr] - sumdn[ll - 1] == rr - ll + 1);\r\n            if(caseup && casedn){\r\n                s[i].del = 1;\r\n            }\r\n            else if(caseup){\r\n                s[i].u = 2;\r\n            }\r\n            else if(casedn){\r\n                s[i].d = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    for(int i = 1; i <= n; i ++){\r\n        s[i].l = tmp[s[i].l];\r\n        s[i].r = tmp[s[i].r];\r\n    }\r\n\r\n//    for(int i = 1; i <= n; i ++)\r\n//        cout << s[i].l << ' ' << s[i].r << endl;\r\n    \r\n\r\n\r\n    int cntup = 0, cntdn = 0, cntupdn = 0;\r\n    for(int i = 1; i <= n; i ++){\r\n        if(s[i].del){\r\n            continue;\r\n        }\r\n\r\n        if(s[i].u == 1 && s[i].d == 2){\r\n            cntupdn ++;\r\n            updn[cntupdn].l = s[i].l;\r\n            updn[cntupdn].r = s[i].r;\r\n            updn[cntupdn].id = s[i].id;\r\n        }\r\n    }\r\n\r\n    int maxupdn = 0;\r\n    sort(updn + 1, updn + cntupdn + 1);\r\n    for(int i = 1; i <= cntupdn; i ++){\r\n        if(updn[i].r <= maxupdn){\r\n            s[updn[i].id].del = 1;\r\n        }\r\n\r\n        maxupdn = max(maxupdn, updn[i].r);\r\n    }\r\n\r\n    sort(updn + 1, updn + cntupdn + 1);\r\n    while(cntupdn && s[updn[cntupdn].id].del){\r\n        cntupdn --;\r\n    }\r\n\r\n    for(int i = 1; i < cntupdn; i ++){\r\n        updn[i].r = min(updn[i].r, updn[i + 1].l - 1);\r\n    }\r\n\r\n\r\n    for(int i = 1; i <= n; i ++){\r\n        if(s[i].del){\r\n            continue;\r\n        }\r\n\r\n        if(s[i].u == 1){\r\n            cntup ++;\r\n            up[cntup].l = s[i].l;\r\n            up[cntup].r = s[i].r;\r\n            up[cntup].id = s[i].id;\r\n            up[cntup].stack = (s[i].d == 2);\r\n               \r\n        }\r\n\r\n        if(s[i].d == 2){\r\n            cntdn ++;\r\n            dn[cntdn].l = s[i].l;\r\n            dn[cntdn].r = s[i].r;\r\n            dn[cntdn].id = s[i].id;\r\n            dn[cntdn].stack = (s[i].u == 1);\r\n        }\r\n    }\r\n\r\n\r\n    sort(up + 1, up + cntup + 1);\r\n    sort(dn + 1, dn + cntdn + 1);\r\n\r\n    int maxup = 0, maxdn = 0;\r\n    for(int i = 1; i <= cntup; i ++){\r\n        if(up[i].r <= maxup){\r\n            s[up[i].id].del = 1;\r\n        \r\n        }\r\n        maxup = max(maxup, up[i].r);\r\n    }\r\n\r\n    for(int i = 1; i <= cntdn; i ++){\r\n        if(dn[i].r <= maxdn){\r\n            s[dn[i].id].del = 1;\r\n        }\r\n        maxdn = max(maxdn, dn[i].r);\r\n    }\r\n\r\n    sort(up + 1, up + cntup + 1);\r\n    sort(dn + 1, dn + cntdn + 1);\r\n    while(cntup && s[up[cntup].id].del){\r\n        cntup --;\r\n    }\r\n    while(cntdn && s[dn[cntdn].id].del){\r\n        cntdn --;\r\n    }\r\n\r\n    {\r\n        int stackl = 0, stackr = 0;\r\n        for(int i = 1; i <= cntup; i ++){\r\n            if(up[i].stack){\r\n                continue;\r\n            }\r\n\r\n            if(i != cntup){\r\n                up[i].r = min(up[i].r, up[i + 1].l - 1);\r\n            }\r\n        }\r\n        \r\n        for(int i = 1; i <= cntup; i ++){\r\n            if(up[i].stack){\r\n                stackl = up[i].l;\r\n                stackr = up[i].r;\r\n                continue;\r\n            }\r\n\r\n            if(stackl <= up[i].l && up[i].l <= stackr){\r\n                up[i].l = stackr + 1;\r\n            }\r\n        }\r\n        stackl = stackr = infll;\r\n        for(int i = cntup; i >= 1; i --){\r\n            if(up[i].stack){\r\n                stackl = up[i].l;\r\n                stackr = up[i].r;\r\n                continue;\r\n            }\r\n\r\n            if(stackl <= up[i].r && up[i].r <= stackr){\r\n                up[i].r = stackl - 1;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    {\r\n        int stackl = 0, stackr = 0;\r\n        for(int i = 1; i <= cntdn; i ++){\r\n            if(dn[i].stack){\r\n                continue;\r\n            }\r\n\r\n            if(i != cntdn){\r\n                dn[i].r = min(dn[i].r, dn[i + 1].l - 1);\r\n            }\r\n        }\r\n        \r\n        for(int i = 1; i <= cntdn; i ++){\r\n            if(dn[i].stack){\r\n                stackl = dn[i].l;\r\n                stackr = dn[i].r;\r\n                continue;\r\n            }\r\n\r\n            if(stackl <= dn[i].l && dn[i].l <= stackr){\r\n                dn[i].l = stackr + 1;\r\n            }\r\n        }\r\n        stackl = stackr = infll;\r\n        for(int i = cntdn; i >= 1; i --){\r\n            if(dn[i].stack){\r\n                stackl = dn[i].l;\r\n                stackr = dn[i].r;\r\n                continue;\r\n            }\r\n\r\n            if(stackl <= dn[i].r && dn[i].r <= stackr){\r\n                dn[i].r = stackl - 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    for(int i = 1; i <= cntup; i ++){\r\n        int id = up[i].id;\r\n        s[id].l = up[i].l;\r\n        s[id].r = up[i].r;\r\n        s[id].u = 1;\r\n        s[id].d = 1;\r\n    }\r\n\r\n    for(int i = 1; i <= cntdn; i ++){\r\n        int id = dn[i].id;\r\n        s[id].l = dn[i].l;\r\n        s[id].r = dn[i].r;\r\n        s[id].u = 2;\r\n        s[id].d = 2;\r\n    }\r\n\r\n    for(int i = 1; i <= cntupdn; i ++){\r\n        int id = updn[i].id;\r\n        s[id].l = updn[i].l;\r\n        s[id].r = updn[i].r;\r\n        s[id].u = 1;\r\n        s[id].d = 2;\r\n    }\r\n\r\n    int S = 0;\r\n    for(int i = 1; i <= n; i ++){\r\n        if(s[i].del || s[i].l > s[i].r){\r\n        }\r\n        else{ \r\n            S += (s[i].r - s[i].l + 1) * (s[i].d - s[i].u + 1); \r\n        }\r\n    }\r\n\r\n    sort(s + 1, s + n + 1, cmp_by_id);\r\n    cout << S << '\\n';\r\n    for(int i = 1; i <= n; i ++){\r\n        if(s[i].del || s[i].l > s[i].r){\r\n            cout << \"0 0 0 0\\n\";\r\n        }\r\n        else{\r\n            cout << s[i].u << ' ' << s[i].l << ' ' << s[i].d << ' ' << s[i].r << '\\n';\r\n//            cout << s[i].u << ' ' << tmp[s[i].l] << ' ' << s[i].d << ' ' << tmp[s[i].r] << '\\n';\r\n        }\r\n    }\r\n\r\n    cout << '\\n';\r\n}\r\n\r\nsigned main(){\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int __ = 1;\r\n    cin >> __;\r\n    totCase = __;\r\n\r\n    while(__ --){\r\n        Case ++;\r\n        work();\r\n    }\r\n}\r\n\r\n/*\r\n\r\n1\r\n4\r\n4 1 2 1\r\n\r\n1\r\n3\r\n1 1 1\r\n\r\n5\r\n3\r\n1 1 1\r\n4\r\n4 1 2 1\r\n4\r\n5 10 15 10\r\n1\r\n42\r\n9\r\n1 2 3 2 2 2 3 2 1\r\n\r\n1\r\n3\r\n100\r\n001\r\n\r\n1\r\n5\r\n1 2 2 4\r\n2 4 2 8\r\n1 4 2 7\r\n1 2 1 2\r\n1 9 1 10\r\n\r\n\r\n1\r\n5\r\n1 3 2 7\r\n1 2 1 5\r\n1 7 1 8\r\n2 1 2 10\r\n1 2 2 7\r\n*/\r\n"
}