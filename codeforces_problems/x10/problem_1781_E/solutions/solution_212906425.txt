{
    "id": 212906425,
    "contestId": 1781,
    "creationTimeSeconds": 1688869890,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1781,
        "index": "E",
        "name": "Rectangle Shrinking",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "greedy",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1781,
        "members": [
            {
                "handle": "bal.bla.bla"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1673784300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n #include <vector>\r\n using namespace std;\r\n struct Rectangle {\r\n   int u, l, d, r;\r\n };\r\n int maxArea(vector<Rectangle> &rects) {\r\n   int maxArea = 0;\r\n   for (Rectangle rect : rects) {\r\n     int area = (rect.d - rect.u + 1) * (rect.r - rect.l + 1);\r\n     maxArea = max(maxArea, area);\r\n   }\r\n   return maxArea;\r\n }\r\n void solve(vector<Rectangle> &rects, int &maxArea, vector<Rectangle> &ans) {\r\n   for (int i = 0; i < rects.size(); i++) {\r\n     Rectangle rect = rects[i];\r\n     int area = (rect.d - rect.u + 1) * (rect.r - rect.l + 1);\r\n     if (area > maxArea) {\r\n       maxArea = area;\r\n       ans = {rect};\r\n     } else if (area == maxArea) {\r\n       ans.push_back(rect);\r\n     }\r\n   }\r\n }\r\n int main() {\r\n   int t;\r\n   cin >> t;\r\n   for (int i = 0; i < t; i++) {\r\n     int n;\r\n     cin >> n;\r\n     vector<Rectangle> rects(n);\r\n     for (int j = 0; j < n; j++) {\r\n       cin >> rects[j].u >> rects[j].l >> rects[j].d >> rects[j].r;\r\n     }\r\n     int maxArea = maxArea(rects);\r\n     vector<Rectangle> ans;\r\n     solve(rects, maxArea, ans);\r\n     cout << maxArea << endl;\r\n     for (Rectangle rect : ans) {\r\n       cout << rect.u << \" \" << rect.l << \" \" << rect.d << \" \" << rect.r << endl;\r\n     }\r\n   }\r\n   return 0;\r\n }\r\n"
}