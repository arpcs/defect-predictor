{
    "id": 218858193,
    "contestId": 1278,
    "creationTimeSeconds": 1692060796,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1278,
        "index": "F",
        "name": "Cards",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "math",
            "number theory",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1278,
        "members": [
            {
                "handle": "KevinLive"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1576766100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 170291200,
    "source": "// LUOGU_RID: 120928964\n#include<iostream>\r\n#include<cstdio>\r\nusing namespace std;\r\nconst int N=1e7+10,mod=998244353;\r\nint n,k;\r\nint cnt,prime[N];\r\nbool vis[N];\r\nint p,q,invp,invq;\r\nint inv[N],pw[N];\r\nint f[N];\r\n\r\ninline int adj(int x){return x>=mod?x-mod:x;}\r\ninline int qpow(int x,int k=mod-2)\r\n{\r\n    int res=1;\r\n    while(k)\r\n    {\r\n        if(k&1)res=1ll*res*x%mod;\r\n        x=1ll*x*x%mod;\r\n        k>>=1;\r\n    }\r\n    return res;\r\n}\r\ninline void sieve(int n)\r\n{\r\n    pw[1]=1;\r\n    for(int i=2;i<=n;i++)\r\n    {\r\n        if(!vis[i])\r\n        {\r\n            prime[++cnt]=i;\r\n            pw[i]=qpow(i,k);\r\n        }\r\n        for(int j=1;j<=cnt&&1ll*i*prime[j]<=n;j++)\r\n        {\r\n            vis[i*prime[j]]=1;\r\n            pw[i*prime[j]]=1ll*pw[i]*pw[prime[j]]%mod;\r\n            if(!(i%prime[j]))break;\r\n        }\r\n    }\r\n}\r\nvoid solve1()\r\n{\r\n    int res=qpow(q,n),ans=0;\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        res=1ll*res*(n-i+1)%mod*inv[i]%mod*p%mod*invq%mod;\r\n        ans=adj(ans+1ll*res*pw[i]%mod);\r\n    }\r\n    printf(\"%d\\n\",ans);\r\n}\r\nvoid solve2()\r\n{\r\n    int res=1,ans=0;\r\n    f[k]=1;\r\n    for(int i=k-1;i;i--)\r\n    {\r\n        res=1ll*res*(n-i-1)%mod*inv[k-i]%mod*(mod-p)%mod;\r\n        f[i]=adj(1ll*(mod+1-p)*f[i+1]%mod+res);\r\n    }\r\n    res=1;\r\n    for(int i=1;i<=k;i++)\r\n    {\r\n        res=1ll*res*(n-i+1)%mod*inv[i]%mod*p%mod;\r\n        ans=adj(ans+1ll*res*pw[i]%mod*f[i]%mod);\r\n    }\r\n    printf(\"%d\\n\",ans);\r\n}\r\nvoid prework(int n)\r\n{\r\n    p=qpow(invp);\r\n    q=mod+1-p;\r\n    invq=qpow(q);\r\n    inv[1]=1;\r\n    for(int i=2;i<=n;i++)inv[i]=1ll*(mod-(mod/i))*inv[mod%i]%mod;\r\n    sieve(n);\r\n}\r\nint main()\r\n{\r\n    scanf(\"%d%d%d\",&n,&invp,&k);\r\n    prework(k);\r\n    if(n<=k)solve1();\r\n    else solve2();\r\n    return 0;\r\n}"
}