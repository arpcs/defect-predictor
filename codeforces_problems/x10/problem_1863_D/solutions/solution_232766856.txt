{
    "id": 232766856,
    "contestId": 1863,
    "creationTimeSeconds": 1699973086,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1863,
        "index": "D",
        "name": "Two-Colored Dominoes",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1400,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1863,
        "members": [
            {
                "handle": "ankitlal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1693406100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#include <iostream>\r\n#include <iostream>\r\n#include <cstring>\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\n#define MAXN 10000001\r\n\r\n#define dbg(...) debug(#__VA_ARGS__, __VA_ARGS__)\r\n\r\n// base case for template recursion when one argument remains\r\ntemplate <typename Arg1>\r\nvoid debug(const char *name, Arg1 &&arg1)\r\n{\r\n    std::cout << name << \" = \" << arg1 << '\\n';\r\n}\r\n\r\n// recursive variadic template for multiple arguments\r\ntemplate <typename Arg1, typename... Args>\r\nvoid debug(const char *names, Arg1 &&arg1, Args &&...args)\r\n{\r\n    const char *comma = strchr(names + 1, ',');\r\n    std::cout.write(names, comma - names) << \" = \" << arg1;\r\n    debug(comma, args...);\r\n}\r\n\r\n// #define dbg(x) cout << #x << \" = \" << x << \" \"\r\n#define all(x) (x).begin(), (x).end()\r\n#define sz(x) (int)(x).size()\r\n#define pi pair<int, int>\r\n#define vi vector<int>\r\n#define vl vector<long long>\r\n#define yes cout << \"Yes\" << endl\r\n#define no cout << \"No\" << endl\r\n\r\nbool cmp(vi &a, vi &b)\r\n{\r\n    if (a[0] == b[0])\r\n        return a[1] > b[1];\r\n\r\n    return a[0] < b[0];\r\n}\r\n\r\nint dfs(int i, int j, vector<vi> &grid)\r\n{\r\n\r\n    int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};\r\n\r\n    int ans = grid[i][j], n = grid.size(), m = grid[0].size();\r\n    grid[i][j] = 0;\r\n    for (int k = 0; k < 4; k++)\r\n    {\r\n        int x = i + dx[k], y = j + dy[k];\r\n        if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] > 0)\r\n        {\r\n            ans += dfs(x, y, grid);\r\n        }\r\n    }\r\n\r\n    return ans;\r\n}\r\n\r\nll gcd(ll a, ll b)\r\n{\r\n    if (a > b)\r\n        swap(a, b);\r\n\r\n    while (a > 0)\r\n    {\r\n        ll rem = b % a;\r\n        b = a;\r\n        a = rem;\r\n    }\r\n    return b;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vi row(n, 0), col(m, 0);\r\n    bool flag = true;\r\n    vector<vector<char>>\r\n        grid(n, vector<char>(m));\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = 0; j < m; j++)\r\n        {\r\n            cin >> grid[i][j];\r\n\r\n            if (grid[i][j] != '.')\r\n            {\r\n                row[i]++;\r\n                col[j]++;\r\n            }\r\n        }\r\n        if (row[i] % 2)\r\n        {\r\n            flag = false;\r\n        }\r\n    }\r\n\r\n    for (int j = 0; j < m; j++)\r\n    {\r\n        if (col[j] % 2 || !flag)\r\n        {\r\n            cout << -1 << '\\n';\r\n            return;\r\n        }\r\n    }\r\n\r\n    int r = 0;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        int start = r;\r\n        r ^= 1;\r\n        for (int j = 0; j < m; j++)\r\n        {\r\n            if (grid[i][j] != '.')\r\n            {\r\n                grid[i][j] = start ? 'B' : 'W';\r\n                start ^= 1;\r\n            }\r\n            cout << grid[i][j];\r\n        }\r\n        cout << '\\n';\r\n    }\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    cout.precision(10);\r\n    cout.setf(ios::fixed);\r\n\r\n    int t;\r\n    cin >> t;\r\n\r\n    for (int j = 1; j <= t; j++)\r\n    {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}"
}