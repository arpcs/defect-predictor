{
    "id": 211064496,
    "contestId": 1198,
    "creationTimeSeconds": 1687717540,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1198,
        "index": "B",
        "name": "Welfare State",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1198,
        "members": [
            {
                "handle": "AhmadT198"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564497300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 34,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 14438400,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define endl '\\n'\r\n#define fori(n) for(int i = 0; i < n; i++)\r\n#define forj(n) for(int j = 0; j < n; j++)\r\n\r\nusing namespace std;\r\n\r\nvoid fastIO() {\r\n    ios::sync_with_stdio(false);\r\n    cout.tie(nullptr);\r\n    cin.tie(nullptr);\r\n}\r\n\r\nconst int N = 200001;\r\nll a[N], seg[4 * N], lazy[4 * N];\r\n\r\nvoid check(int p, int s, int e) {\r\n    if (lazy[p]) {\r\n        if (seg[p] < lazy[p]) {\r\n            seg[p] = max(lazy[p], seg[p]);\r\n            if (s != e) {\r\n                lazy[2 * p] = max(lazy[2 * p], lazy[p]);\r\n                lazy[2 * p + 1] = max(lazy[2 * p + 1], lazy[p]);\r\n            }\r\n        }\r\n        lazy[p] = 0;\r\n    }\r\n}\r\n\r\nvoid build(int p, int s, int e) {\r\n    if (s == e) {\r\n        seg[p] = a[s];\r\n        return;\r\n    }\r\n    build(2 * p, s, (s + e) / 2);\r\n    build(2 * p + 1, (s + e) / 2 + 1, e);\r\n\r\n    seg[p] = min(seg[2 * p], seg[2 * p + 1]);\r\n}\r\n\r\nvoid update(int p, int s, int e, int i, ll val) {\r\n    check(p, s, e);\r\n\r\n    if (s == e) {\r\n        seg[p] = val;\r\n        return;\r\n    }\r\n\r\n    if (i <= (s + e) / 2) update(2 * p, s, (s + e) / 2, i, val);\r\n    else update(2 * p + 1, (s + e) / 2 + 1, e, i, val);\r\n\r\n    seg[p] = min(seg[2 * p], seg[2 * p + 1]);\r\n}\r\n\r\n\r\nvoid updateInterval(int p, int s, int e, int x, int y, ll v) {\r\n    check(p, s, e);\r\n\r\n    if (s >= x && e <= y) {\r\n        if (seg[p] < v) {\r\n            seg[p] = max(v, seg[p]);\r\n            if (s != e) {\r\n                lazy[2 * p] = max(v, lazy[2 * p]);\r\n                lazy[2 * p + 1] = max(v, lazy[2 * p + 1]);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    if (s > y || e < x) return;\r\n\r\n    updateInterval(2 * p, s, (s + e) / 2, x, y, v);\r\n    updateInterval(2 * p + 1, (s + e) / 2 + 1, e, x, y, v);\r\n\r\n    seg[p] = min(seg[2 * p], seg[2 * p + 1]);\r\n}\r\n\r\nll get(int p, int s, int e, int x, int y) {\r\n    check(p, s, e);\r\n\r\n    if (s >= x && e <= y) {\r\n        return seg[p];\r\n    }\r\n\r\n    if (s > y || e < x) return INT_MAX;\r\n\r\n    return min(get(2 * p, s, (s + e) / 2, x, y),\r\n               get(2 * p + 1, (s + e) / 2 + 1, e, x, y));\r\n}\r\n\r\nint main() {\r\n    fastIO();\r\n    int n;\r\n    cin >> n;\r\n    fori(n) cin >> a[i];\r\n    build(1, 0, n - 1);\r\n    int q;\r\n    cin >> q;\r\n    while (q--) {\r\n        int op;\r\n        cin >> op;\r\n        if (op == 1) {\r\n            int p, x;\r\n            cin >> p >> x;\r\n            update(1, 0, n - 1, p - 1, x);\r\n        } else {\r\n            int x;\r\n            cin >> x;\r\n            updateInterval(1, 0, n - 1, 0, n - 1, x);\r\n        }\r\n\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        cout << get(1, 0, n - 1, i, i) << \" \";\r\n    }\r\n    cout << endl;\r\n    return 0;\r\n}\r\n\r\n\r\n//By : AhmadTea198\r\n//On 6/22/2023\r\n"
}