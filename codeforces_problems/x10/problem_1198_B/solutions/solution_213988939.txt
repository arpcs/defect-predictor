{
    "id": 213988939,
    "contestId": 1198,
    "creationTimeSeconds": 1689487446,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1198,
        "index": "B",
        "name": "Welfare State",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1198,
        "members": [
            {
                "handle": "chenglexing2020"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564497300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 1138,
    "memoryConsumedBytes": 13414400,
    "source": "#include <map>\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <unordered_map>\r\n#include <array>\r\n#include <set>\r\n#include <iterator>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    // freopen(\"1.in\", \"r\", stdin);\r\n    int n; cin >> n;\r\n    vector<int> balances(n);\r\n    vector<int> lastC(n);\r\n    for (int i=0; i<n; i++) {cin >> balances[i];}\r\n\r\n    int q; cin >> q;\r\n    array<int, 3> event;\r\n    vector<array<int, 2>> payouts;\r\n    multiset<int, greater<int>> maxP;\r\n    for (int i=0; i<q; i++) {\r\n        cin >> event[0] >> event[1];\r\n        if (event[0] == 1) {\r\n            cin >> event[2];\r\n            balances[event[1]-1] = event[2];\r\n            lastC[event[1]-1] = i;\r\n        } else {\r\n            payouts.push_back({event[1], i});\r\n            maxP.insert(event[1]);\r\n        }\r\n    }\r\n\r\n    map<int, int> pMax;\r\n    for (array<int, 2> x: payouts) {\r\n        pMax[x[1]] = *maxP.begin();\r\n        maxP.erase(x[0]);\r\n    }\r\n\r\n    for (int i=0; i<n; i++) {\r\n        balances[i] = max((*pMax.lower_bound(lastC[i])).second, balances[i]);\r\n    }\r\n    copy(balances.begin(), balances.end(), ostream_iterator<int>(cout, \" \"));\r\n}"
}