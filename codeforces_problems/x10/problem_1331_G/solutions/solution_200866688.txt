{
    "id": 200866688,
    "contestId": 1331,
    "creationTimeSeconds": 1680694757,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1331,
        "index": "G",
        "name": "Lingua Romana",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1331,
        "members": [
            {
                "handle": "chappy1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1585751700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2048000,
    "source": "#include <chrono>\r\n#include <cmath>\r\n#include <cstdio>\r\n\r\nusing LL = long long;\r\nusing LLL = __int128;\r\n\r\n#ifdef LX_LOCAL\r\nclass TimeOut {\r\npublic:\r\n    std::chrono::_V2::steady_clock::rep begin;\r\n    long duration;\r\n    TimeOut() {\r\n        begin = std::chrono::steady_clock::now().time_since_epoch().count();\r\n        duration = 0;\r\n    }\r\n    ~TimeOut() {\r\n        auto end = std::chrono::steady_clock::now().time_since_epoch().count();\r\n        auto d = end - begin;\r\n        duration += d;\r\n        double t = duration / 1000.0 / 1000.0;\r\n        if (t >= 60000)\r\n            fprintf(stderr, \"Time used = %.2lfmin\\n\", t / 60000.0);\r\n        else if (t >= 1000)\r\n            fprintf(stderr, \"Time used = %.2lfs\\n\", t / 1000.0);\r\n        else\r\n            fprintf(stderr, \"Time used = %.0lfms\\n\", t);\r\n    }\r\n} timeout;\r\n#endif\r\n\r\ntemplate <typename T>\r\ntypename std::enable_if<std::is_integral<T>::value>::type swap(T& x, T& y) { x ^= y ^= x ^= y; }\r\ntemplate <typename T>\r\ntypename std::enable_if<!std::is_integral<T>::value>::type swap(T& x, T& y) {\r\n    T t = x;\r\n    x = y;\r\n    y = x;\r\n}\r\n#if __cplusplus >= 201402L\r\ntemplate <typename T, typename P>\r\nauto max(const T& x, const P& y) { return x < y ? y : x; }\r\ntemplate <typename T, typename P>\r\nauto min(const T& x, const P& y) { return x < y ? x : y; }\r\ntemplate <typename T, typename... Args>\r\nauto max(const T& x, const Args&... args) { return max(x, max(args...)); }\r\ntemplate <typename T, typename... Args>\r\nauto min(const T& x, const Args&... args) { return min(x, min(args...)); }\r\n#else\r\ntemplate <typename T, typename P>\r\nauto max(const T& x, const P& y) -> decltype(x < y ? y : x) { return x < y ? y : x; }\r\ntemplate <typename T, typename P>\r\nauto min(const T& x, const P& y) -> decltype(x < y ? x : y) { return x < y ? x : y; }\r\ntemplate <typename T, typename... Args>\r\nauto max(const T& x, const Args&... args) -> decltype(max(x, max(args...))) { return max(x, max(args...)); }\r\ntemplate <typename T, typename... Args>\r\nauto min(const T& x, const Args&... args) -> decltype(min(x, min(args...))) { return min(x, min(args...)); }\r\n#endif\r\ntemplate <typename T>\r\nT max(const T& x) { return x; }\r\ntemplate <typename T>\r\nT min(const T& x) { return x; }\r\nclass IO {\r\n#define MY_DEBUG 0\r\n#if !MY_DEBUG\r\n    static const int MAXSIZE = 1 << 20;\r\n    char buf[MAXSIZE], *p1, *p2;\r\n    char pbuf[MAXSIZE], *pp;\r\n    long double eps = 1e-8L;\r\n#endif\r\n    int precision;\r\n    FILE *infile, *outfile;\r\n\r\npublic:\r\n    IO() : precision(6), infile(stdin), outfile(stdout) {\r\n#if !MY_DEBUG\r\n        p1 = p2 = buf;\r\n        pp = pbuf;\r\n#endif\r\n    }\r\n    ~IO() {\r\n#if !MY_DEBUG\r\n        fwrite(pbuf, 1, pp - pbuf, outfile);\r\n#endif\r\n        fclose(infile);\r\n        fclose(outfile);\r\n    }\r\n    inline bool blank(char ch) const;\r\n    void flush();\r\n    void input_from_file(const char* str);\r\n    void output_from_file(const char* str);\r\n    inline int getch();\r\n    template <typename T, typename... Args>\r\n    void read(T& x, Args&... args);\r\n    void read();\r\n    template <typename T>\r\n    void read(T& x);\r\n    void read(char& ch);\r\n    void read(char* s);\r\n    void readline(char* s);\r\n    void putch(const char c);\r\n    void setprecision(int n);\r\n    template <typename T, typename... Args>\r\n    void write(const T& x, const Args&... args);\r\n    void write();\r\n    template <typename T>\r\n    void write(T x);\r\n    void write(char c);\r\n    void write(double x);\r\n    void write(char* s);\r\n    void write(const char* s);\r\n} io;\r\n#define writeln(...) io.write(__VA_ARGS__), io.putch('\\n')\r\n#define dbg(x) io.write(#x \" = \"), writeln(x)\r\n// define fast io\r\n\r\nint A[12];\r\nint main() {\r\n    for (int i = 1; i <= 11; i++)\r\n        io.read(A[i]);\r\n    io.setprecision(2);\r\n    for (int i = 11; i >= 1; i--) {\r\n        int v = A[i];\r\n        double a = sqrt(abs(v));\r\n        double b = v * v * v * 5;\r\n        double res = a + b;\r\n        if (res > 400)\r\n            writeln(\"f(\", v, \") = MAGNA NIMIS!\");\r\n        else\r\n            writeln(\"f(\", v, \") = \", res);\r\n    }\r\n    return 0;\r\n}\r\n\r\n#define isdigit(x) (x >= '0' && x <= '9')\r\ninline bool IO::blank(char ch) const {\r\n    return ch == ' ' || ch == '\\n' || ch == '\\r' || ch == '\\t';\r\n}\r\nvoid IO::flush() {\r\n#if MY_DEBUG\r\n    fflush(stdout);\r\n#else\r\n    fwrite(pbuf, 1, pp - pbuf, outfile), pp = pbuf;\r\n#endif\r\n}\r\nvoid IO::input_from_file(const char* str) {\r\n    FILE* file = fopen(str, \"rb\");\r\n    infile = file;\r\n}\r\nvoid IO::output_from_file(const char* str) {\r\n    FILE* file = fopen(str, \"wb\");\r\n    outfile = file;\r\n}\r\ninline int IO::getch() {\r\n#if MY_DEBUG\r\n    return fgetc(infile);\r\n#else\r\n    if (p1 == p2)\r\n#ifdef LX_LOCAL\r\n    {\r\n        auto end = std::chrono::steady_clock::now().time_since_epoch().count();\r\n        auto t = end - timeout.begin;\r\n        timeout.duration += t;\r\n#endif\r\n        p2 = (p1 = buf) + fread(buf, 1, MAXSIZE, infile);\r\n#ifdef LX_LOCAL\r\n        timeout.begin = std::chrono::steady_clock::now().time_since_epoch().count();\r\n    }\r\n#endif\r\n    return p1 == p2 ? -1 : *p1++;\r\n#endif\r\n}\r\ntemplate <typename T, typename... Args>\r\nvoid IO::read(T& x, Args&... args) {\r\n    read(x);\r\n    read(args...);\r\n}\r\nvoid IO::read() {}\r\ntemplate <typename T>\r\nvoid IO::read(T& x) {\r\n    double tmp = 1;\r\n    bool sign = 0;\r\n    x = 0;\r\n    int ch = getch();\r\n    for (; !isdigit(ch) && ~ch; ch = getch())\r\n        if (ch == '-')\r\n            sign = 1;\r\n    for (; isdigit(ch); ch = getch())\r\n        x = x * 10 + (ch - '0');\r\n    if (ch == '.')\r\n        for (ch = getch(); isdigit(ch); ch = getch())\r\n            tmp /= 10.0, x += tmp * (ch - '0');\r\n    if (sign)\r\n        x = -x;\r\n}\r\nvoid IO::read(char& ch) {\r\n    for (ch = getch(); blank(ch) && ~ch; ch = getch())\r\n        ;\r\n}\r\nvoid IO::read(char* s) {\r\n    int ch = getch();\r\n    while (blank(ch))\r\n        ch = getch();\r\n    while (!blank(ch) && ~ch)\r\n        *s++ = ch, ch = getch();\r\n    *s = 0;\r\n}\r\nvoid IO::readline(char* s) {\r\n    int ch = getch();\r\n    while (blank(ch) && ch != '\\n')\r\n        ch = getch();\r\n    while (ch != '\\n' && ~ch)\r\n        *s++ = ch, ch = getch();\r\n    *s = 0;\r\n}\r\nvoid IO::putch(const char c) {\r\n#if MY_DEBUG\r\n    fputc(c, outfile);\r\n#else\r\n    if (pp - pbuf == MAXSIZE)\r\n        fwrite(pbuf, 1, MAXSIZE, outfile), pp = pbuf;\r\n    *pp++ = c;\r\n#endif\r\n}\r\nvoid IO::setprecision(int n) {\r\n    precision = n;\r\n    eps = pow(10, -precision - 2);\r\n}\r\ntemplate <typename T, typename... Args>\r\nvoid IO::write(const T& x, const Args&... args) {\r\n    write(x);\r\n    write(args...);\r\n}\r\nvoid IO::write() {}\r\ntemplate <typename T>\r\nvoid IO::write(T x) {\r\n    if (x < 0)\r\n        x = -x, putch('-');\r\n    static T sta[100];\r\n    int top = 0;\r\n    do\r\n        sta[top++] = x % 10, x /= 10;\r\n    while (x);\r\n    while (top)\r\n        putch(sta[--top] + '0');\r\n}\r\nvoid IO::write(char c) { putch(c); }\r\nvoid IO::write(double x) {\r\n    if (x == 0) {\r\n        putch('0'), putch('.');\r\n        for (int i = 1; i <= precision; ++i)\r\n            putch('0');\r\n        return;\r\n    }\r\n    if (x < 0)\r\n        putch('-'), x = -x;\r\n    LLL n = pow(10, precision);\r\n    double res = (LLL)(x * n + 0.5) / (n * 1.0);\r\n    LLL y = LLL(res * n + eps) % n;\r\n    if (precision) {\r\n        write(LLL(res + eps), '.');\r\n        int sta[20], p = 0;\r\n        for (; p < precision; y /= 10)\r\n            sta[++p] = y % 10;\r\n        for (int i = p; i >= 1; i--)\r\n            putch(sta[i] ^ 48);\r\n    }\r\n    else\r\n        write(LLL(res + eps));\r\n}\r\nvoid IO::write(char* s) {\r\n    while (*s)\r\n        putch(*s++);\r\n}\r\nvoid IO::write(const char* s) {\r\n    while (*s)\r\n        putch(*s++);\r\n}\r\n#undef isdigit"
}