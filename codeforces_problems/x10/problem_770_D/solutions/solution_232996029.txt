{
    "id": 232996029,
    "contestId": 770,
    "creationTimeSeconds": 1700151471,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 770,
        "index": "D",
        "name": "Draw Brackets!",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1400,
        "tags": [
            "*special",
            "implementation"
        ]
    },
    "author": {
        "contestId": 770,
        "members": [
            {
                "handle": "DIU_Codex"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489233600
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 132,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 2867200,
    "source": "from itertools import groupby\r\n\r\nn = int(input())\r\nseq = list(input())\r\n\r\nanswer = []\r\nstack = []\r\ndepth = -1\r\nfor i in range(len(seq)):\r\n    if seq[i] == '[':\r\n        stack.append('[')\r\n        depth += 2\r\n        answer.append(depth)\r\n    else:\r\n        stack.pop()\r\n        answer.append(depth)\r\n        depth -= 2\r\n\r\n        if len(stack) == 0:\r\n            answer.append('*')\r\n\r\n# break down answer into nested lists using * separator\r\nanswer = [list(group) for k, group in groupby(answer, lambda x: x != \"*\") if k]\r\n\r\nmax_depth = 0\r\nfor i in range(len(answer)):\r\n    if max_depth < max(answer[i]):\r\n        max_depth = max(answer[i])\r\n\r\nfor i in range(len(answer)):\r\n    answer[i] = [(max_depth + 1 - a) for a in answer[i]]\r\n\r\n# flatten\r\nanswer = [s for sub in answer for s in sub]\r\n\r\nout = \"\"\r\nstack = []\r\nfor i in range(len(answer)):\r\n    line = \"\"\r\n\r\n    if seq[i] == \"[\" and len(stack) == 0:\r\n        line += \" \" * ((max_depth - answer[i]) // 2)\r\n        line += \"+\"\r\n        line += \"|\" * answer[i]\r\n        line += \"+\"\r\n        line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        if seq[i + 1] == \"]\":\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n            line += \"-\"\r\n            line += \" \" * answer[i]\r\n            line += \"-\"\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        stack.append(answer[i])\r\n    elif seq[i] == \"[\" and len(stack) > 0:\r\n        if seq[i - 1] == \"[\":\r\n            line += \" \" * ((max_depth - answer[i] - 2) // 2)\r\n            line += \"-\"\r\n        else:\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        line += \"+\"\r\n        line += \"|\" * answer[i]\r\n        line += \"+\"\r\n\r\n        if seq[i - 1] == \"[\":\r\n            line += \"-\"\r\n            line += \" \" * ((max_depth - answer[i] - 2) // 2)\r\n        else:\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        if seq[i + 1] == \"]\":\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n            line += \"-\"\r\n            line += \" \" * answer[i]\r\n            line += \"-\"\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        stack.append(answer[i])\r\n    elif seq[i] == \"]\":\r\n        if seq[i - 1] == \"[\":\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n            line += \"-\"\r\n            line += \" \" * answer[i]\r\n            line += \"-\"\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        if i < len(answer) - 1 and seq[i + 1] == \"]\":\r\n            line += \" \" * ((max_depth - answer[i] - 2) // 2)\r\n            line += \"-\"\r\n            line += \"+\"\r\n            line += \"|\" * answer[i]\r\n            line += \"+\"\r\n            line += \"-\"\r\n            line += \" \" * ((max_depth - answer[i] - 2) // 2)\r\n        else:\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n            line += \"+\"\r\n            line += \"|\" * answer[i]\r\n            line += \"+\"\r\n            line += \" \" * ((max_depth - answer[i]) // 2)\r\n\r\n        stack.pop()\r\n\r\n    out += line\r\n\r\n# divide into chunks of size = max_depth + 2\r\nout = [out[i:i + max_depth + 2] for i in range(0, len(out), max_depth + 2)]\r\n\r\n# add a new line between - - and - -\r\ni = 0\r\nwhile i < len(out):\r\n    if out[i].replace(\" \", \"\") == \"--\" and out[i + 1].replace(\" \", \"\") == \"--\":\r\n        out.insert(i + 1, \" \" * len(out[i]))\r\n    i += 1\r\n\r\nvertical = [list(r) for r in out]\r\n\r\n# horizontal printing\r\nfinal = \"\"\r\nfor i in range(len(vertical[0])):\r\n    for j in range(len(vertical)):\r\n        final += vertical[j][i]\r\n    final += \"\\n\"\r\n\r\n# remove the trailing space\r\nfinal = final[:-1]\r\nprint(final)"
}