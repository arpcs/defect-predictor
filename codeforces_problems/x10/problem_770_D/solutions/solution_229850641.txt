{
    "id": 229850641,
    "contestId": 770,
    "creationTimeSeconds": 1698320639,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 770,
        "index": "D",
        "name": "Draw Brackets!",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1400,
        "tags": [
            "*special",
            "implementation"
        ]
    },
    "author": {
        "contestId": 770,
        "members": [
            {
                "handle": "senko"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489233600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 132,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<\r\n    pair<int, int>,\r\n    null_type,\r\n    less<pair<int, int>>,\r\n    rb_tree_tag,\r\n    tree_order_statistics_node_update\r\n> ordered_set;\r\n#pragma GCC optimize(\"Ofast,unroll-loops\")\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int depth = 0;\r\n    int max_depth = 0;\r\n    int n; string s; cin >> n >> s;\r\n    for(int i = 0; i < n; i++){\r\n        if(s[i] == '[') depth += 1;\r\n        else depth -= 1;\r\n        max_depth = max(max_depth, depth);\r\n    }\r\n    int current_size = max_depth * 2 - 1;\r\n    int h = current_size + 2;\r\n    int w = 2;\r\n    for(int i = 1; i < n; i++){\r\n        if(s[i] == '['){\r\n            if(s[i - 1] == '[') w += 1;\r\n            else w += 2;\r\n        }else{\r\n            if(s[i - 1] == ']') w += 1;\r\n            else w += 3;\r\n        }\r\n    }\r\n    vector<vector<char>> result(h + 1, vector<char>(w + 1, ' '));\r\n    s = \"~\" + s;\r\n    for(int i = 2; i <= current_size + 1; i++) result[i][1] = '|';\r\n    result[1][1] = '+';\r\n    result[h][1] = '+';\r\n    result[1][2] = '-';\r\n    result[h][2] = '-';\r\n    int ptr = 1;\r\n    int sz = current_size;\r\n    //cout << \"w: \" << w << '\\n';\r\n    //cout << \"h: \" << h << '\\n';\r\n    for(int i = 2; i <= n; i++){\r\n        if(s[i] == '['){\r\n            ptr += 1;\r\n            if(s[i - 1] == '[') sz -= 2;\r\n            //cout << \"ptr: \" << ptr << '\\n';\r\n            //cout << \"sz: \" << sz << '\\n';\r\n            int pos = (h - (sz + 2))/2 + 1;\r\n            //cout << \"pos: \" << pos << '\\n';\r\n            for(int ii = pos + 1; ii <= pos + sz; ii++){\r\n                result[ii][ptr] = '|';\r\n            }\r\n            result[pos][ptr] = '+';\r\n            result[pos + sz + 1][ptr] = '+';\r\n            result[pos][ptr + 1] = '-';\r\n            result[pos + sz + 1][ptr + 1] = '-';\r\n        }else{\r\n            if(s[i - 1] == '['){\r\n                ptr += 4;\r\n            }else{\r\n                ptr += 1;\r\n                sz += 2;\r\n            }\r\n            //cout << \"ptr: \" << ptr << '\\n';\r\n            //cout << \"sz: \" << sz << '\\n';\r\n            int pos = (h - (sz + 2))/2 + 1;\r\n            //cout << \"pos: \" << pos << '\\n';\r\n            for(int ii = pos + 1; ii <= pos + sz; ii++){\r\n                result[ii][ptr] = '|';\r\n            }\r\n            result[pos][ptr] = '+';\r\n            result[pos + sz + 1][ptr] = '+';\r\n            result[pos][ptr - 1] = '-';\r\n            result[pos + sz + 1][ptr - 1] = '-';\r\n        }\r\n    }\r\n    for(int i = 1; i <= h; i++){\r\n        for(int j = 1; j <= w; j++){\r\n            cout << result[i][j];\r\n        }\r\n        cout << '\\n';\r\n    }\r\n    return 0;\r\n}"
}