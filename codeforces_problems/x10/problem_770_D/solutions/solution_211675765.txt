{
    "id": 211675765,
    "contestId": 770,
    "creationTimeSeconds": 1688184471,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 770,
        "index": "D",
        "name": "Draw Brackets!",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1400,
        "tags": [
            "*special",
            "implementation"
        ]
    },
    "author": {
        "contestId": 770,
        "members": [
            {
                "handle": "StepanovStepanovic"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489233600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 204800,
    "source": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <string>\nusing namespace std;\n\nint main(){\n  int n;\n  cin >> n;\n\n  string m;\n  cin >> m;\n\n  int max_lefts = 0;\n  int c = 0;\n  \n  //cout << \"part1\\n\";\n  while (c < n){\n    int num_lefts = 0;\n    while (c < n && m[c] == '['){\n      num_lefts++;\n      c++;\n    }\n    max_lefts = max(max_lefts, num_lefts);\n    c++;\n  }\n\n  //cout << \"max_lefts:\" << max_lefts << \"\\n\";\n  int grid_size = 2 * max_lefts + 1;\n  int grid_len = 3 * n;\n  //cout << \"grid_size:\" << grid_size << \"\\n\";\n  vector<vector<char>> grid(grid_size, vector<char>(grid_len, ' '));\n  \n  int minuses = max_lefts * 2 - 1;\n  int ind = 0;\n  c = 0;\n  //cout << \"part2\\n\";\n  while (c < n){\n    /*cout << \"minuses:\" << minuses << std::endl;\n    cout << \"ind:\" << ind << std::endl;\n    cout << \"c:\" << c << \"\\n\";*/\n    char cur = m[c];\n\n    if (ind >= grid_len){\n      cout << \"Invalid index\\n\";\n    }\n\n    int start = (grid_size - minuses - 2)/2;\n    if (cur == '['){\n      //cout << \"start:\" << start << \"\\n\";\n      grid[start][ind] = '+';\n      grid[start][ind + 1] = '-';\n      int mc = 0;\n      int mind = start + 1;\n      while (mc < minuses){\n        grid[mind][ind] = '|';\n        mind++;\n        mc++;\n      }\n      grid[mind][ind] = '+';\n      grid[mind][ind + 1] = '-';\n    }\n    else{\n      //cout << \"start:\" << start << \"\\n\";\n      grid[start][ind] = '-';\n      grid[start][ind + 1] = '+';\n      int mc = 0;\n      int mind = start + 1;\n      while (mc < minuses){\n        grid[mind][ind + 1] = '|';\n        mind++;\n        mc++;\n      }\n      grid[mind][ind] = '-';\n      grid[mind][ind + 1] = '+';\n    }\n\n    /*cout << \"part3\\n\";\n    int sind = 0;\n    for (int i = 0; i < grid_size; i++){\n      for (int j = 0; j < grid_len; j++){\n        cout << grid[i][j];\n      }\n      cout << \"\\n\";\n    }*/\n   \n    if (m[c] == '[' && (c + 1 < n && m[c + 1] == ']')){\n      //cout << \"hi\\n\";\n      ind+=2;\n    }\n    else if (m[c] == ']' && (c + 1 < n && m[c + 1] == '[')){\n      ind++;\n    }\n\n    if (cur == '[' && m[c + 1] == '['){\n      minuses -= 2;\n    }\n    else if (cur == ']' && (c == n || m[c + 1] == ']')){\n      minuses += 2;\n    }\n  \n    ind++;\n    c++;\n  }\n\n  //cout << \"part3\\n\";\n  int sind = 0;\n  for (int i = 0; i < grid_size; i++){\n    for (int j = 0; j <= ind; j++){\n      cout << grid[i][j];\n    }\n    cout << \"\\n\";\n  }\n}\n"
}