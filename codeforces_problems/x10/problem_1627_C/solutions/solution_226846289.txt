{
    "id": 226846289,
    "contestId": 1627,
    "creationTimeSeconds": 1696581663,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "C",
        "name": "Not Assigning",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "Jokesta"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 467,
    "memoryConsumedBytes": 26009600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long int\r\n\r\nstatic bool cmp(vector<int> &a,vector<int> &b){\r\n    if(a[0]==b[0]) return a[1]<b[1];\r\n    else return a[0]<b[0];\r\n}\r\nbool flag=0;\r\n\r\nvoid dfs(set<int> adj[],map<pair<int,int>,int> &m,vector<int> &vis,int node,int prev){\r\n    vis[node]=1;\r\n    if(adj[node].size()>=3){\r\n        flag=1;\r\n        return;\r\n    }\r\n    for(auto i:adj[node]){\r\n        if(vis[i]) continue;\r\n        if(prev==3) {\r\n            m[{node,i}]=2;\r\n            dfs(adj,m,vis,i,2);\r\n        }\r\n        else {\r\n            m[{node,i}]=3;\r\n            dfs(adj,m,vis,i,3);\r\n        }\r\n    }\r\n}\r\nvoid solve(){ \r\n    int n;\r\n    cin>>n;\r\n    set<int> adj[n+1];\r\n    flag=0;\r\n    map<pair<int,int>,int> m;\r\n    vector<vector<int>> v;\r\n    for(int i=0;i<n-1;i++){\r\n        int x,y;\r\n        cin>>x>>y;\r\n        v.push_back({x,y});\r\n        adj[x].insert(y);\r\n        adj[y].insert(x);\r\n    }\r\n    vector<int> vis(n+1,0);\r\n    vector<int> a;\r\n    int node ;\r\n    for(int i=1;i<=n;++i) if(adj[i].size()<=2) {node=i;break;}\r\n    for(auto i:adj[node]) a.push_back(i);\r\n        if(a.size()==3){\r\n            cout<<\"-1\\n\";return;\r\n        }\r\n    if(a.size()==2){\r\n        vis[node]=1;\r\n        m[{node,a[0]}]=2;\r\n        m[{node,a[1]}]=3;\r\n        dfs(adj,m,vis,a[0],2);\r\n        dfs(adj,m,vis,a[1],3);\r\n    }\r\n    else{\r\n        m[{node,a[0]}]=2;\r\n        vis[node]=1;\r\n        dfs(adj,m,vis,a[0],2);\r\n    }\r\n    for(auto i:m){\r\n        if(i.second<=1||i.second>=1e5){\r\n            cout<<\"-1\\n\";return;\r\n        }\r\n    }\r\n    if(flag){cout<<\"-1\\n\";return;}\r\n    for(auto i:v){\r\n        if(m.find({i[0],i[1]})==m.end()&&(m.find({i[1],i[0]})==m.end())){\r\n            cout<<\"-1\\n\";return;\r\n        }\r\n        if(m.find({i[0],i[1]})==m.end()){\r\n            cout<<m[{i[1],i[0]}]<<\" \";\r\n        }\r\n        else cout<<m[{i[0],i[1]}]<<\" \";\r\n    }\r\n    cout<<\"\\n\";\r\n\r\n\r\n}\r\n\r\nint main(){\r\n \r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"inputf.txt\",\"r\",stdin);\r\n    freopen(\"outputf.txt\",\"w\",stdout);\r\n#endif\r\n\r\n    // set<int> adj[1e5+1];\r\n    // set<int> a=seive(1e5);\r\n    // cout<<a.size();\r\n    // for(auto i:a){\r\n    //     for(auto j:a){\r\n    //         if(prime(i+j)){\r\n    //             adj[i].insert(j);\r\n    //             adj[j].insert(i);\r\n    //         }\r\n    //     }\r\n    // }\r\n    int t;\r\n    cin>>t;\r\n    for(int i=1;i<=t;i++){\r\n        solve();\r\n    }\r\n}"
}