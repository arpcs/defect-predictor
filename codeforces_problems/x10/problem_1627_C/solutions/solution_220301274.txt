{
    "id": 220301274,
    "contestId": 1627,
    "creationTimeSeconds": 1692900199,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "C",
        "name": "Not Assigning",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "dohcradam"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nint main() {\r\nint t;\r\ncin>>t;\r\nwhile(t--){\r\nlong long n;\r\ncin>>n;\r\nvector<long long> indegree(n+1,0);\r\nint f=0;\r\nvector<long long> graph[n+1];\r\nvector<pair<long long,long long> > edges(n);\r\nfor (int i = 0; i <n-1; i++)\r\n{\r\n    long long a,b;\r\n    cin>>a>>b;\r\n    edges[i]={a,b};\r\n    graph[a].push_back(b);\r\n    graph[b].push_back(a);\r\nindegree[a]++;\r\nindegree[b]++;\r\nif(indegree[a]>2 || indegree[b]>2){\r\n    f=1;\r\n}\r\n}\r\nif(f==1){\r\n    cout<<-1<<endl;\r\n}\r\nelse{\r\n     map<pair<long long,long long>,long long> ans;\r\n    for (int i = 1; i <=n; i++)\r\n    {\r\n        if(indegree[i]==1){\r\n            queue<pair<long long,long long>> q;\r\n            vector<long long> vis(n+1,0);\r\n            q.push({i,0});\r\n            vis[i]=1;\r\n            while(!q.empty()){\r\n                 auto node=q.front();\r\n                 q.pop();\r\n                 for(auto x:graph[node.first]){\r\n                    if(!vis[x]){\r\n                    q.push({x,!node.second});\r\n                    ans[{node.first,x}]=node.second;\r\n                    vis[x]=1;\r\n                    }\r\n                 }\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i < n-1; i++)\r\n    {\r\n        if(ans[edges[i]]==0){\r\n            cout<<2<<\" \";\r\n        }\r\n        else{\r\n            cout<<5<<\" \";\r\n        }\r\n    }\r\n    \r\n    cout<<endl;\r\n}\r\n\r\n\r\n}\r\nreturn 0;\r\n}"
}