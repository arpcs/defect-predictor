{
    "id": 223169541,
    "contestId": 1627,
    "creationTimeSeconds": 1694584235,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1627,
        "index": "C",
        "name": "Not Assigning",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1627,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642257300
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 5734400,
    "source": "def dfs(u,arr,mp,visited:set,adj,val):\n    visited.add(u)\n    for nei in adj[u]:\n        if nei not in visited:\n            i=mp.get((u,nei))\n            arr[i]=val\n            val=3 if val==2 else 2\n            dfs(nei,arr,mp,visited,adj,val)\n        \n\ndef solve():\n    n=int(input())\n    indegree=[0]*n\n    solution=True\n    mp={}\n    adj=[0]*n\n    for i in range(n):\n        adj[i]=[]\n    for i in range(n-1):\n        u,v=[int(j) for j in input().split()]\n        u-=1\n        v-=1\n        mp[(u,v)]=i\n        mp[(v,u)]=i\n        adj[u].append(v)\n        adj[v].append(u)\n        indegree[u]+=1\n        indegree[v]+=1\n        if indegree[u]==3 or indegree[v]==3:\n            solution=False\n    if not solution:\n        print(-1)\n        return\n    arr=[0]*(n-1)\n    for i in range(n):\n        if(indegree[i]==1):\n            dfs(i,arr,mp,set(),adj,2)\n            break\n    print(*arr)\n        \n\n\nt=int(input())\nfor _ in range(t):\n    solve()\n\t\t   \t\t\t \t   \t \t\t\t\t\t\t \t\t\t \t \t\t"
}