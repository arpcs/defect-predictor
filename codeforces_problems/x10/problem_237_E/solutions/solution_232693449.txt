{
    "id": 232693449,
    "contestId": 237,
    "creationTimeSeconds": 1699927137,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 237,
        "index": "E",
        "name": "Build String",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 237,
        "members": [
            {
                "handle": "Hyperlink_Blocked"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1351179000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 57,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 512000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n \r\nvoid __print(int x){cerr << x;}\r\nvoid __print(bool x){cerr << (int)x;}\r\nvoid __print(long long x){cerr << x;}\r\nvoid __print(double x){cerr << x;}\r\nvoid __print(long double x){cerr << x;}\r\nvoid __print(char x){cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x){cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x){cerr << '\\\"' << x << '\\\"';}\r\n \r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x){cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x){int f = 0; cerr << '{'; for(auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print(){cerr << \"]\\n\";}\r\ntemplate<typename T, typename... V>\r\nvoid _print(T t, V... v){__print(t); if(sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\n \r\nusing ll = long long;\r\nusing pii = pair<int, int>;\r\nusing pll = pair<ll, ll>;\r\n\r\n\r\nconst int M = 100 + 3;\r\nconst ll INF = 1e9 + 69;\r\n\r\nstruct edge{\r\n    int from, to;\r\n    ll capacity, cost;\r\n};\r\n \r\nvector<vector<int>>adj;\r\nvector<vector<ll>>cost, capacity;\r\n \r\nvoid shortest_paths(int n, int v0, vector<ll>&d, vector<int>&p){\r\n    d.assign(n, INF);\r\n    d[v0] = 0;\r\n    vector<bool>inq(n, false);\r\n    queue<int>q;\r\n    q.push(v0);\r\n    p.assign(n, -1);\r\n \r\n    while(!q.empty()){\r\n        int u = q.front();\r\n        q.pop();\r\n        inq[u] = false;\r\n        for(int v : adj[u]){\r\n            if(capacity[u][v] > 0 && d[v] > d[u] + cost[u][v]){\r\n                d[v] = d[u] + cost[u][v];\r\n                p[v] = u;\r\n                if(!inq[v]){\r\n                    inq[v] = true;\r\n                    q.push(v);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n \r\nll min_cost_flow(int N, vector<edge>edges, ll F, int s, int t) {\r\n    adj.assign(N, vector<int>());\r\n    cost.assign(N, vector<ll>(N, 0));\r\n    capacity.assign(N, vector<ll>(N, 0));\r\n    for(edge e : edges) {\r\n        adj[e.from].push_back(e.to);\r\n        adj[e.to].push_back(e.from);\r\n        cost[e.from][e.to] = e.cost;\r\n        cost[e.to][e.from] = -e.cost;\r\n        capacity[e.from][e.to] = e.capacity;\r\n    }\r\n \r\n    ll flow = 0, cost = 0;\r\n    vector<ll>d;\r\n    vector<int>p;\r\n    while(flow < F){\r\n        shortest_paths(N, s, d, p);\r\n        if(d[t] == INF) break;\r\n        // find max flow on that path\r\n        ll f = F - flow;\r\n        int cur = t;\r\n        while(cur != s){\r\n            f = min(f, capacity[p[cur]][cur]);\r\n            cur = p[cur];\r\n        }\r\n \r\n        // apply flow\r\n        flow += f;\r\n        cost += f * d[t];\r\n        cur = t;\r\n        while(cur != s){\r\n            capacity[p[cur]][cur] -= f;\r\n            capacity[cur][p[cur]] += f;\r\n            cur = p[cur];\r\n        }\r\n    }\r\n \r\n    if(flow < F) return -1;\r\n    else return cost;\r\n}\r\n\r\n\r\n\r\nint cnt[M][26], a[M];\r\n\r\nint main(){\r\n \r\n    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n\r\n    \r\n    string t;\r\n    cin >> t;\r\n\r\n    int m = t.size();\r\n    vector<int>cc(26, 0);\r\n    for(char c : t) cc[c-'a']++;\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    for(int i=1; i<=n; i++){\r\n        string s;\r\n        cin >> s;\r\n        for(char c : s) cnt[i][c-'a']++;\r\n        cin >> a[i];\r\n    }\r\n\r\n    int src = 0, sink = n+27;\r\n    vector<edge>edges;\r\n\r\n    for(int i=1; i<=n; i++){\r\n        edges.emplace_back(src, i, a[i], i);\r\n        for(int j=1; j<=26; j++){\r\n            edges.emplace_back(i, n+j, cnt[i][j-1], 0);\r\n        }\r\n    }\r\n\r\n    for(int i=1; i<=26; i++){\r\n        edges.emplace_back(n+i, sink, cc[i-1], 0);\r\n    }\r\n\r\n    cout << min_cost_flow(n+28, edges, m, src, sink);\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
}