{
    "id": 230410965,
    "contestId": 237,
    "creationTimeSeconds": 1698604561,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 237,
        "index": "E",
        "name": "Build String",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 237,
        "members": [
            {
                "handle": "Hyperlink_Blocked"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1351179000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 57,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 409600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n \r\nvoid __print(int x){cerr << x;}\r\nvoid __print(bool x){cerr << (int)x;}\r\nvoid __print(long long x){cerr << x;}\r\nvoid __print(double x){cerr << x;}\r\nvoid __print(long double x){cerr << x;}\r\nvoid __print(char x){cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x){cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x){cerr << '\\\"' << x << '\\\"';}\r\n \r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x){cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x){int f = 0; cerr << '{'; for(auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print(){cerr << \"]\\n\";}\r\ntemplate<typename T, typename... V>\r\nvoid _print(T t, V... v){__print(t); if(sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\n \r\nusing ll = long long;\r\nusing pii = pair<int, int>;\r\nusing pll = pair<ll, ll>;\r\n\r\n\r\nconst int M = 100 + 3;\r\n\r\nconst int N = 203;\r\nconst ll INF = 1e9 + 69;\r\n\r\nstruct edge {\r\n  int v, rev_pos;\r\n  ll cap, cost, flow = 0;\r\n};\r\n\r\nstruct MCMF {\r\n  int n;\r\n  vector <vector <edge>> E;\r\n\r\n  bitset <N> vis;\r\n  int par[N], pos[N];\r\n  ll caps[N], dist[N];\r\n\r\n  MCMF (int n) : n(n), E(n) {}\r\n\r\n  inline void AddEdge (int u, int v, ll cap, ll cost = 0) {\r\n    E[u].emplace_back(v, E[v].size(), cap, cost);\r\n    E[v].emplace_back(u, E[u].size() - 1, 0, -cost);\r\n  }\r\n\r\n  bool SPFA (int S, int T) {\r\n    vis.reset();\r\n    for (int i = 0; i < n; ++i) caps[i] = dist[i] = INF;\r\n    queue <int> q;\r\n    q.emplace(S), dist[S] = 0, vis[S] = 1;\r\n    while (!q.empty()) {\r\n      int i = 0, u = q.front();\r\n      q.pop(), vis[u] = 0;\r\n      for (auto &e : E[u]) {\r\n        int v = e.v;\r\n        ll f = e.cap - e.flow, w = dist[u] + e.cost;\r\n        if (f > 0 and dist[v] > w) {\r\n           dist[v] = w, par[v] = u, pos[v] = i;\r\n           caps[v] = min(caps[u], f);\r\n           if (!vis[v]) q.push(v), vis[v] = 1;\r\n        } ++i;\r\n      }\r\n    }\r\n    return dist[T] != INF;\r\n  }\r\n\r\n  pair <ll, ll> GetMaxFlow (int S, int T) {\r\n    ll flow = 0, cost = 0;\r\n    while (SPFA(S, T)) {\r\n      int v = T;\r\n      ll f = caps[v];\r\n      flow += f;\r\n      while (v ^ S) {\r\n        int u = par[v];\r\n        edge &e = E[u][pos[v]];\r\n        e.flow += f;\r\n        E[v][e.rev_pos].flow -= f;\r\n        v = u;\r\n      }\r\n      cost += dist[T] * f;\r\n    }\r\n    return make_pair(flow, cost);\r\n  }\r\n};\r\n\r\n// int main() {\r\n//   int n, m;\r\n//   cin >> n >> m;\r\n//   MCMF flow_graph(n);\r\n//   while (m--) {\r\n//     int u, v, cap, cost;\r\n//     cin >> u >> v >> cap >> cost;\r\n//     flow_graph.AddEdge(u, v, cap, cost);\r\n//   }\r\n//   auto [flow, cost] = flow_graph.GetMaxFlow(0, n - 1);\r\n//   cout << flow << \" \" << cost << '\\n';\r\n//   return 0;\r\n// }\r\n\r\n\r\n\r\nint cnt[M][26], a[M];\r\n\r\nint main(){\r\n \r\n    ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n\r\n    \r\n    string t;\r\n    cin >> t;\r\n\r\n    int m = t.size();\r\n    vector<int>cc(26, 0);\r\n    for(char c : t) cc[c-'a']++;\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    for(int i=1; i<=n; i++){\r\n        string s;\r\n        cin >> s;\r\n        for(char c : s) cnt[i][c-'a']++;\r\n        cin >> a[i];\r\n    }\r\n\r\n    //int N = 2 + n + 26;\r\n\r\n    int src = 0, sink = n+27;\r\n\r\n    MCMF net(n+28);\r\n\r\n    for(int i=1; i<=n; i++){\r\n        //edges.emplace_back(0, i, a[i], i);\r\n        net.AddEdge(src, i, a[i], i);\r\n        for(int j=1; j<=26; j++){\r\n            //edges.emplace_back(i, n+j, cnt[i][j-1], 0);\r\n            net.AddEdge(i, n+j, cnt[i][j-1], 0);\r\n        }\r\n    }\r\n\r\n    for(int i=1; i<=26; i++){\r\n        //edges.emplace_back(n+i, sink, cc[i-1], 0);\r\n        net.AddEdge(n+i, sink, cc[i-1], 0);\r\n    }\r\n\r\n    //cout << min_cost_flow(N, edges, m, src, sink);\r\n    auto [mf, mc] = net.GetMaxFlow(src, sink);\r\n    if(mf < m) cout << -1;\r\n    else cout << mc;\r\n\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"
}