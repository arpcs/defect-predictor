{
    "id": 204184176,
    "contestId": 741,
    "creationTimeSeconds": 1682987287,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 741,
        "index": "E",
        "name": "Arpa\u2019s abnormal DNA and Mehrdad\u2019s deep interest",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3400,
        "tags": [
            "data structures",
            "string suffix structures"
        ]
    },
    "author": {
        "contestId": 741,
        "members": [
            {
                "handle": "marcOS"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1481034900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 545,
    "memoryConsumedBytes": 211865600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef unsigned long long ull;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef complex<ll> point;\r\n#define F first\r\n#define S second\r\n#define ii pair<int, int>\r\nstruct iii { int F, S, i, ans; };\r\n\r\n/*\r\n\tCompute for a string S the suffix array order, rank and lcp of every suffix starting in (0, 1, ..., |S|)\r\n\r\n\tNotes: The suffix starting in |S| is always the lowest and have lcp 0 with the next suffix.\r\n\t\t\tlcp[i] is the longest common prefix between the suffix in sa[i] and sa[i-1]\r\n\r\n\tComplexity: O(|S| log |S|)\r\n*/\r\n\r\nstruct suffix_array\r\n{\r\n    int n;\r\n    vector<int> sa, lcp, rank;\r\n\r\n    suffix_array(const string &s) : n(s.length() + 1), sa(n), lcp(n), rank(n)\r\n    {\r\n        vector<int> top(max(256, n));\r\n        for (int i = 0; i < n; ++i)\r\n            top[rank[i] = s[i] & 0xff]++;\r\n\r\n        partial_sum(top.begin(), top.end(), top.begin());\r\n        for (int i = 0; i < n; ++i)\r\n            sa[--top[rank[i]]] = i;\r\n\r\n        vector<int> tmp(n);\r\n        for (int len = 1, j; len < n; len <<= 1)\r\n        {\r\n            for (int i = 0; i < n; ++i)\r\n            {\r\n                j = sa[i] - len;\r\n                if (j < 0) j += n;\r\n                tmp[top[rank[j]]++] = j;\r\n            }\r\n\r\n            sa[tmp[top[0] = 0]] = j = 0;\r\n            for (int i = 1, j = 0; i < n; ++i)\r\n            {\r\n                if (rank[tmp[i]] != rank[tmp[i - 1]]\r\n                    || rank[tmp[i] + len] != rank[tmp[i - 1] + len])\r\n                    top[++j] = i;\r\n                sa[tmp[i]] = j;\r\n            }\r\n\r\n            copy(sa.begin(), sa.end(), rank.begin());\r\n            copy(tmp.begin(), tmp.end(), sa.begin());\r\n            if (j >= n - 1) break;\r\n        }\r\n\r\n        int i, j, k;\r\n        for (j = rank[lcp[i = k = 0] = 0]; i < n - 1; ++i, ++k)\r\n        {\r\n            while (k >= 0 && s[i] != s[sa[j - 1] + k])\r\n                lcp[j] = k--, j = rank[sa[j] + 1];\r\n        }\r\n    }\r\n};\r\n\r\n/*\r\n\tStatic data structure for min/max queries\r\n\r\n\tComplexity: O(n log n) build, O(1) query\r\n*/\r\ntemplate<typename T> struct rmq {\r\n    vector<T> v; int n;\r\n    static const int b = 30; // block size\r\n    vector<int> mask, t; // mask and sparse table\r\n\r\n    int op(int x, int y) {\r\n        return v[x] < v[y] ? x : y;\r\n    }\r\n    // least significant set bit\r\n    int lsb(int x) {\r\n        return x & -x;\r\n    }\r\n    // index of the most significant set bit\r\n    int msb_index(int x) {\r\n        return __builtin_clz(1)-__builtin_clz(x);\r\n    }\r\n    // answer query of v[r-size+1..r] using the masks, given size <= b\r\n    int small(int r, int size = b) {\r\n        // get only 'size' least significant bits of the mask\r\n        // and then get the index of the msb of that\r\n        int dist_from_r = msb_index(mask[r] & ((1<<size)-1));\r\n\r\n        return r - dist_from_r;\r\n    }\r\n    rmq(const vector<T>& v_) : v(v_), n(v.size()), mask(n), t(n) {\r\n        int curr_mask = 0;\r\n        for (int i = 0; i < n; i++) {\r\n\r\n            // shift mask by 1, keeping only the 'b' least significant bits\r\n            curr_mask = (curr_mask<<1) & ((1<<b)-1);\r\n\r\n            while (curr_mask > 0 and op(i, i - msb_index(lsb(curr_mask))) == i) {\r\n                // current value is smaller than the value represented by the\r\n                // last 1 in curr_mask, so we need to turn off that bit\r\n                curr_mask ^= lsb(curr_mask);\r\n            }\r\n            // append extra 1 to the mask\r\n            curr_mask |= 1;\r\n\r\n            mask[i] = curr_mask;\r\n        }\r\n\r\n        // build sparse table over the n/b blocks\r\n        // the sparse table is linearized, so what would be at\r\n        // table[j][i] is stored in table[(n/b)*j + i]\r\n        for (int i = 0; i < n/b; i++) t[i] = small(b*i+b-1);\r\n        for (int j = 1; (1<<j) <= n/b; j++) for (int i = 0; i+(1<<j) <= n/b; i++)\r\n                t[n/b*j+i] = op(t[n/b*(j-1)+i], t[n/b*(j-1)+i+(1<<(j-1))]);\r\n    }\r\n    // query(l, r) returns the actual minimum of v[l..r]\r\n    // to get the index, just change the first and last lines of the function\r\n    T query(int l, int r) {\r\n        // query too small\r\n        if (r-l+1 <= b) return v[small(r, r-l+1)];\r\n\r\n        // get the minimum of the endpoints\r\n        // (there is no problem if the ranges overlap with the sparse table query)\r\n        int ans = op(small(l+b-1), small(r));\r\n\r\n        // 'x' and 'y' are the blocks we need to query over\r\n        int x = l/b+1, y = r/b-1;\r\n\r\n        if (x <= y) {\r\n            int j = msb_index(y-x+1);\r\n            ans = op(ans, op(t[n/b*j+x], t[n/b*j+y-(1<<j)+1]));\r\n        }\r\n\r\n        return v[ans];\r\n    }\r\n};\r\n\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);cin.tie(0);\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    //freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    string s, t;\r\n    cin>>s>>t;\r\n    int n = s.size(), m = t.size();\r\n\r\n    suffix_array sa(s + (char)('z' + 1) + t);\r\n    rmq<int> rmsa(sa.lcp);\r\n\r\n    vector<int> o;\r\n    for(int i=0; i<=n; i++) o.push_back(i);\r\n    sort(o.begin(), o.end(), [&](int i, int j)\r\n    {\r\n        int p = 0;\r\n        if(i > j)\r\n        {\r\n            swap(i, j);\r\n            p = 1;\r\n        }\r\n\r\n        if(i + m <= j)\r\n        {\r\n            int x = sa.rank[n + 1], y = sa.rank[i];\r\n            if(x > y) swap(x, y);\r\n            int lcp = rmsa.query(x + 1, y);\r\n            if(lcp < m) return p ^ (t[lcp] < s[i + lcp]);\r\n\r\n            x = sa.rank[i + 1]; y = sa.rank[i + m]; int sz = j - i + m;\r\n            if(x > y) swap(x, y);\r\n            lcp = rmsa.query(x + 1, y);\r\n            if(lcp < sz) return p ^ (s[i + 1 + lcp] < s[i + m + lcp]);\r\n\r\n            x = sa.rank[n + 1], y = sa.rank[j];\r\n            if(x > y) swap(x, y);\r\n            lcp = rmsa.query(x + 1, y);\r\n            if(lcp < m) return p ^ (s[j + lcp] < t[lcp]);\r\n        }else\r\n        {\r\n            int x = sa.rank[n + 1], y = sa.rank[i], sz = j - i;\r\n            if(x > y) swap(x, y);\r\n            int lcp = rmsa.query(x + 1, y);\r\n            if(lcp < sz) return p ^ (t[lcp] < s[i + lcp]);\r\n\r\n            x = sa.rank[n + 1 + sz]; y = sa.rank[n + 1]; sz = i + m - j;\r\n            if(x > y) swap(x, y);\r\n            lcp = rmsa.query(x + 1, y);\r\n            if(lcp < sz) return p ^ (t[j - i + lcp] < t[lcp]);\r\n\r\n            x = sa.rank[i]; y = sa.rank[n + 1 + sz]; sz = j - i;\r\n            if(x > y) swap(x, y);\r\n            lcp = rmsa.query(x + 1, y);\r\n            if(lcp < sz) return p ^ (s[i + lcp] < t[i + m - j + lcp]);\r\n        }\r\n        return p ^ (i < j);\r\n    });\r\n\r\n    vector<int> v(n + 1);\r\n    for(int i=0; i<=n; i++) v[o[i]] = i;\r\n    rmq<int> rm1(v);\r\n\r\n    int sq = 40;\r\n    vector<vector<rmq<int>>> rm2(sq);\r\n    for(int i=1; i<sq; i++)\r\n    {\r\n        vector<int> temp;\r\n        for(int j=0; j<sq; j++)\r\n        {\r\n            for(int k=j; k<=n; k+=i)\r\n                temp.push_back(v[k]);\r\n            rm2[i].push_back(rmq<int>(temp));\r\n            temp.clear();\r\n        }\r\n    }\r\n\r\n    int q;\r\n    cin>>q;\r\n    while(q--)\r\n    {\r\n        int l, r, k, x, y;\r\n        cin>>l>>r>>k>>x>>y;\r\n\r\n        int ans = n + 1;\r\n        if(k < sq)\r\n        {\r\n            for(int i=x; i<=y; i++)\r\n            {\r\n                int li = (l - i + k - 1) / k;\r\n                int ri = (r + 1 - i + k - 1) / k;\r\n                if(li < ri) ans = min(ans, rm2[k][i].query(li, ri - 1));\r\n            }\r\n        }else\r\n        {\r\n            int p = (l / k) * k;\r\n            while(p <= r)\r\n            {\r\n                int li = max(l, p + x);\r\n                int ri = min(r, p + y);\r\n                if(ri >= li) ans = min(ans, rm1.query(li, ri));\r\n                p += k;\r\n            }\r\n        }\r\n\r\n        if(ans == n + 1) ans = -1;\r\n        else ans = o[ans];\r\n        cout<<ans<<\" \\n\"[q == 0];\r\n    }\r\n\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n"
}