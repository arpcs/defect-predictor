{
    "id": 93892504,
    "contestId": 1346,
    "creationTimeSeconds": 1601137768,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1346,
        "index": "G",
        "name": "Two IP Cameras",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "*special",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1346,
        "members": [
            {
                "handle": "koper"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590762900
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 11878400,
    "source": "fun readInts() = readLine()!!.split(' ').map { it.toInt() }\r\n\r\nfun main() {\r\n    readInts()\r\n    val ps = readInts().toSet()\r\n    val xs = readInts()\r\n\r\n    if (xs.size < 3) {\r\n        println(\"YES\")\r\n        println(\"${xs[0]} ${ps.first()}\")\r\n        println(\"${xs[1]} ${ps.first()}\")\r\n    } else {\r\n        solve(ps, xs)\r\n    }\r\n}\r\n\r\nfun solve(ps: Set<Int>, xs: List<Int>) {\r\n    val a = xs[0] // with 1\r\n    val b = xs[1]\r\n    val c = xs[2]\r\n\r\n    // b with 1\r\n    if (ps.contains(b-a)) {\r\n        val p = b - a\r\n        val left = xs.filter { (it - a) % p != 0 }\r\n        if (solveSingle(a, p, ps, left)) return\r\n    }\r\n\r\n    // b with 2, c with 1\r\n    if (ps.contains(c-a)) {\r\n        val p = c - a\r\n        val left = xs.filter { (it - a) % p != 0 }\r\n        if (solveSingle(a, p, ps, left)) return\r\n    }\r\n\r\n    // b with 2, c with 2\r\n    if (ps.contains(c-b)) {\r\n        val p = c - b\r\n        val left = listOf(a) + xs.drop(3).filter { (it - b) % p != 0 }\r\n        if (solveSingle(b, p, ps, left)) return\r\n    }\r\n\r\n    println(\"NO\")\r\n}\r\n\r\nfun solveSingle(s1: Int, p1: Int, ps: Set<Int>, xs: List<Int>): Boolean {\r\n    if (xs.size < 2) {\r\n        println(\"YES\")\r\n        println(\"$s1 $p1\")\r\n        println(\"${if (xs.isEmpty()) 1 else xs.first()} $p1\")\r\n        return true\r\n    }\r\n\r\n    val p2 = xs[1] - xs[0]\r\n    if (ps.contains(p2) && check(xs, s1, p1, xs[0], p2)) {\r\n        println(\"YES\")\r\n        println(\"$s1 $p1\")\r\n        println(\"${xs[0]} $p2\")\r\n        return true\r\n    }\r\n\r\n    return false\r\n}\r\n\r\nfun check(xs: List<Int>, s1: Int, p1: Int, s2: Int, p2: Int): Boolean =\r\n        xs.all { (it - s1) % p1 == 0 || (it - s2) % p2 == 0 }\r\n"
}