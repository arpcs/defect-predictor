{
    "id": 123639768,
    "contestId": 1346,
    "creationTimeSeconds": 1627151123,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1346,
        "index": "G",
        "name": "Two IP Cameras",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "*special",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1346,
        "members": [
            {
                "handle": "CaesarPP"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590762900
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 36044800,
    "source": "import kotlin.math.*\r\nimport kotlin.system.exitProcess\r\n\r\nfun gcd(x: Int, y: Int): Int\r\n{\r\n    var r = x%y\r\n    var a = x\r\n    var b = y\r\n    while(r!=0)\r\n    {\r\n        a = b\r\n        b = r\r\n        r = a%b\r\n    }\r\n    return b\r\n}\r\nfun main()\r\n{\r\n    val (k, n) = readLine()!!.split(' ').map{it.toInt()}\r\n    val p = readLine()!!.split(' ').map{it.toInt()}.toIntArray()\r\n    val periodSet = p.toSet()\r\n    val x = readLine()!!.split(' ').map{it.toInt()}.toIntArray()\r\n    fun solve(dif: Int, start: Int)\r\n    {\r\n        val divisors = mutableListOf<Int>()\r\n        for(i in 1..sqrt(dif.toDouble()).toInt())\r\n            if(dif % i == 0)\r\n            {\r\n                if(periodSet.contains(i))\r\n                    divisors.add(i)\r\n                if(periodSet.contains(dif/i))\r\n                    divisors.add(dif/i)\r\n            }\r\n        for(divisor in divisors)\r\n        {\r\n            var last = -1\r\n            var currentPeriod = -1\r\n            var first = -1\r\n            val periods = mutableListOf<Int>()\r\n            for(i in x)\r\n                if((i-start)%divisor != 0)\r\n                {\r\n                    if(first == -1)\r\n                        first = i\r\n                    if(last == -1)\r\n                        last = i\r\n                    else if(currentPeriod == -1) {\r\n                        currentPeriod = i - last\r\n                        periods.add(currentPeriod)\r\n                    }\r\n                    last = i\r\n                }\r\n            if(periods.isNotEmpty())\r\n            {\r\n                var currentGCD = periods.first()\r\n                for(period in periods)\r\n                    currentGCD = gcd(currentGCD, period)\r\n                if(periodSet.contains(currentGCD))\r\n                {\r\n                    println(\"YES\")\r\n                    println(\"$start $divisor\")\r\n                    if(first != -1)\r\n                        println(\"$first $currentPeriod\")\r\n                    else\r\n                        println(\"$start $divisor\")\r\n                    exitProcess(0)\r\n                }\r\n            }\r\n            else // there is one or no elements left\r\n            {\r\n                val count = x.count{(it-start)%divisor != 0}\r\n                if(count == 1)\r\n                {\r\n                    println(\"YES\")\r\n                    println(\"$start $divisor\")\r\n                    println(\"${x.find { (it-start)%divisor != 0 }} $divisor\")\r\n                }\r\n                else\r\n                {\r\n                    println(\"YES\")\r\n                    println(\"$start $divisor\")\r\n                    println(\"$start $divisor\")\r\n                }\r\n                exitProcess(0)\r\n            }\r\n        }\r\n    }\r\n    if(n == 2) {\r\n        println(\"YES\")\r\n        println(\"${x[0]} ${p[0]}\")\r\n        println(\"${x[1]} ${p[0]}\")\r\n        exitProcess(0)\r\n    }\r\n    solve(x[1]-x[0], x[0])\r\n    if(n > 2)\r\n    {\r\n        solve(x[2]-x[1], x[1])\r\n        solve(x[2]-x[0], x[0])\r\n    }\r\n    println(\"NO\")\r\n}"
}