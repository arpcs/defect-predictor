{
    "id": 82006978,
    "contestId": 1346,
    "creationTimeSeconds": 1590896550,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1346,
        "index": "G",
        "name": "Two IP Cameras",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "*special",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1346,
        "members": [
            {
                "handle": "Benq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590762900
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 795,
    "memoryConsumedBytes": 3788800,
    "source": "/**\r\n * Description: Kotlin tips for dummies\r\n * Source: https://codeforces.com/blog/entry/71089, Kotlin Reference\r\n */\r\n\r\n/// episode 1: https://codeforces.com/contest/1170\r\n/// episode 2: https://codeforces.com/contest/1211\r\n/// episode 3: https://codeforces.com/contest/1297\r\n\r\nimport java.io.*\r\nimport java.util.* // do NOT use Arrays.sort()\r\n\r\n/// https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-field/\r\n// @JvmField val INPUT = File(\"input.txt\").inputStream()\r\n@JvmField val INPUT = System.`in`\r\n// @JvmField val OUTPUT = File(\"output.txt\").outputStream()\r\n@JvmField val OUTPUT = System.out\r\n@JvmField val _reader = INPUT.bufferedReader()\r\n@JvmField val _writer = PrintWriter(OUTPUT, false) // if not interactive, faster to call _writer.flush() at end\r\nfun rLine(): String? = _reader.readLine()\r\nfun rLn() = rLine()!!\r\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\r\nfun read(): String { // if no input left returns empty string\r\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer =\r\n        StringTokenizer(_reader.readLine() ?: return \"\", \" \")\r\n    return _tokenizer.nextToken()\r\n}\r\nfun rInt() = read().toInt()\r\n/// fun rDb() = read().toDouble()\r\nfun rLong() = read().toLong()\r\nfun rStrs(n: Int) = List(n,{read()})\r\nfun rLns(n: Int) = List(n,{rLn()})\r\nfun rInts(n: Int) = List(n,{rInt()})\r\n/// fun rDbs(n: Int) = List(n,{rDb()})\r\nfun rLongs(n: Int) = List(n,{rLong()})\r\n\r\nval MOD = 1000000007\r\nval INF = (1e18).toLong()\r\nval SZ = 1 shl 17\r\n\r\nfun YN(b: Boolean) : String { return if (b) \"YES\" else \"NO\"  }\r\nfun add(a: Int, b: Int) = (a+b) % MOD // from tourist :o\r\nfun sub(a: Int, b: Int) = (a-b+MOD) % MOD\r\nfun mul(a: Int, b: Int) = ((a.toLong()*b)%MOD).toInt()\r\nfun gcd(a: Int, b: Int) : Int = if (b == 0) a else gcd(b,a%b)\r\n\r\nfun example() {\r\n    println(String.format(\"%.8f\", 5.25)) // print to 8 decimals\r\n    val arr2D = Array<IntArray>(5,{IntArray(5,{5})})\r\n    var (x,y) = arrayOf(3,2) // or rInts(2)\r\n    when (x) { //  switch, can be used as expression\r\n        0,1 -> println(\"x <= 1\")\r\n        2 -> println(\"x == 2\") // Note the block\r\n        else -> { println(\"x is neither 1 nor 2\") }\r\n    }\r\n    x = y.also { y = x } // swap x and y\r\n    println(\"${maxOf(x+2,y)}\") // (x,y)=(4,3) -> 4\r\n    val h = HashMap<String,Int>()\r\n    val s = \"ababa\"\r\n    for (i in 0..s.length-2) {\r\n        val w = s.substring(i,i+2)\r\n        val c = h.getOrElse(w,{0})\r\n        h.put(w,c+1)\r\n    }\r\n    for ((a,b) in h) println(\"${a} ${b}\") // key,value\r\n    val pq = PriorityQueue<Pair<Long,Int>>({x,y ->\r\n        x.first.compareTo(y.first)}) // or compareBy{it.first}\r\n    val A = arrayListOf(Pair(1,3),Pair(3,2),Pair(2,3))\r\n    val B = A.sortedWith(Comparator<Pair<Int,Int>>{x,y ->\r\n        x.first.compareTo(y.first)}) // or sortBy{it.first}\r\n    val list = arrayListOf('a','b','c','d','e')\r\n    println(list.binarySearch('d')) // 3\r\n    list.remove('d')\r\n    val actualInsertPoint = -(list.binarySearch('d')+1) // 3\r\n    list.add(actualInsertPoint, 'd') // [a,b,c,d,e]\r\n    list.removeAt(1) // remove at index -> [a,c,d,e]\r\n}\r\n\r\nvar x = IntArray(0)\r\nvar periods = IntArray(0)\r\nval ok = BooleanArray(1000001)\r\n\r\nfun getPeriod(): Int {\r\n    return periods[0]\r\n    return 0\r\n}\r\n\r\nfun make(_a: Int, _b: Int) {\r\n    var b = _b\r\n    if (b == -1) b = getPeriod()\r\n    var a = _a%b\r\n    if (a == 0) a += b\r\n    println(\"${a} ${b}\")\r\n}\r\n\r\nfun go(a: Int, i: Int) {\r\n    if (!ok[i]) return\r\n//    println(\"GO\")\r\n//    println(a)\r\n//    println(i)\r\n    var lst = -1\r\n    var period = 0\r\n    for (z in x) if ((z-a)%i != 0) {\r\n        if (lst != -1) {\r\n            period = gcd(period,z-lst)\r\n        }\r\n        lst = z\r\n    }\r\n    if (lst == -1) {\r\n        println(\"YES\")\r\n        make(a,i)\r\n        make(1,-1)\r\n        System.exit(0)\r\n    }\r\n    if (period == 0) {\r\n        println(\"YES\")\r\n        make(a,i)\r\n        make(lst,getPeriod())\r\n        System.exit(0)\r\n    }\r\n    // println(bad)\r\n    for (j in periods) if (period%j == 0) {\r\n        println(\"YES\")\r\n        make(a,i)\r\n        make(lst,j)\r\n        System.exit(0)\r\n    }\r\n}\r\n\r\nfun tri(a: Int, b: Int) {\r\n    assert(a != b)\r\n    for (i in periods) if ((b-a)%i == 0) go(a,i)\r\n}\r\n\r\nfun main() {\r\n    val (k,n) = rInts(2)\r\n    periods = rInts(k).toIntArray()\r\n    for (i in periods) ok[i] = true\r\n    // println(periods)\r\n    x = rInts(n).toIntArray()\r\n    if (n == 2) {\r\n        println(\"YES\")\r\n        println(\"${x[0]} ${getPeriod()}\")\r\n        println(\"${x[1]} ${getPeriod()}\")\r\n        System.exit(0)\r\n    }\r\n    for (i in 1..minOf(n-1,2)) for (j in 0..i-1) tri(x[i],x[j])\r\n    println(\"NO\")\r\n}"
}