{
    "id": 119178585,
    "contestId": 1346,
    "creationTimeSeconds": 1623427931,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1346,
        "index": "G",
        "name": "Two IP Cameras",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "*special",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1346,
        "members": [
            {
                "handle": "brjbibhu10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590762900
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 1107,
    "memoryConsumedBytes": 33689600,
    "source": "// ecnerwala's template\r\n\r\nimport kotlin.random.Random\r\nimport java.math.*\r\n// import kotlin.system\r\nprivate fun readLn() = readLine()!! // string line\r\nprivate fun readInt() = readLn().toInt() // single int\r\nprivate fun readStrings() = readLn().split(\" \") // list of strings\r\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\r\nprivate fun readLongs() = readStrings().map { it.toLong() } // list of longs\r\n \r\nprivate val OUTPUT_LINES = mutableListOf<String>()\r\nprivate fun outputLn(s: String) { OUTPUT_LINES += s }\r\n\r\nvar MX = 1000100\r\nfun mygcd(x: Int, y: Int) : Int {\r\n   if (x == 0 || y == 0) return x + y\r\n   return mygcd(y, x % y)\r\n}\r\nfun solve() {\r\n  var (K, N) = readInts()\r\n  var P = readInts().toMutableList()\r\n  var X = readInts().toMutableList()\r\n  var go = MutableList(MX) {-1}\r\n  for (p in P) {\r\n   for (z in 0.rangeTo(MX - 1).step(p)) go[z] = p\r\n  }\r\n  var start1 = -1\r\n  var start2 = -1\r\n  var jump1 = -1\r\n  var jump2 = -1\r\n  fun kek(x: Int, p: Int) {\r\n      var r = x % p\r\n      var unseen = mutableListOf<Int>()\r\n      for (x in X) {\r\n         if (x % p != r) unseen.add(x)\r\n      }\r\n      if (r == 0) r = p\r\n      if (unseen.size == 0) {\r\n         start1 = r\r\n         start2 = r\r\n         jump1 = p\r\n         jump2 = p\r\n         return\r\n      }\r\n      var g = 0\r\n      for (i in 1..unseen.size - 1) g = mygcd(g, unseen[i] - unseen[i - 1])\r\n      if (go[g] != -1) {\r\n         start1 = r\r\n         start2 = unseen[0]\r\n         jump1 = p\r\n         jump2 = go[g]\r\n      }\r\n   }\r\n  for (it in 0..9) {\r\n   if (start1 != -1) break\r\n      var z = Random.nextInt(0, N - 1)\r\n      for (p in P) {\r\n      if (start1 != -1) break\r\n         if ((MX / p) < (N + 1) / 2) break\r\n         kek(X[z], p)\r\n      }\r\n  }\r\n  if (start1 == -1) outputLn(\"NO\")\r\n  else {\r\n   outputLn(\"YES\")\r\n   outputLn(\"$start1 $jump1\")\r\n   outputLn(\"$start2 $jump2\")\r\n  }\r\n}\r\n\r\nfun main() {\r\n   val T = 1\r\n   for (t in 0..T-1) solve()\r\n   println(OUTPUT_LINES.joinToString(\"\\n\"))\r\n}"
}