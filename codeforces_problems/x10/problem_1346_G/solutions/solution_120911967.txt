{
    "id": 120911967,
    "contestId": 1346,
    "creationTimeSeconds": 1625005030,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1346,
        "index": "G",
        "name": "Two IP Cameras",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "*special",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1346,
        "members": [
            {
                "handle": "codetiger927"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590762900
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.awt.Point\r\nimport java.util.*\r\n\r\n\r\n    val (K, N) = readLine()!!.split(\" \").map { it.toInt() }\r\n    val P = readLine()!!.split(\" \").map { it.toInt() }\r\n    val X = readLine()!!.split(\" \").map { it.toInt() }\r\n    var exist = BooleanArray(1000005)\r\n    tailrec fun gcd(x: Int, y: Int): Int = if (y == 0) x else gcd(y, x % y)\r\n\r\n    fun attempt(s: Int, m: Int): Point {\r\n        val al = ArrayList<Int>()\r\n        for (i in 0 until N) {\r\n            if (X[i] % m != s % m) {\r\n                al.add(i)\r\n            }\r\n        }\r\n        if (al.size == 0) return Point(P[0], 0)\r\n        var g = 0\r\n        for (i in al.indices) {\r\n            g = gcd(g, X[al[i]] - X[al[0]])\r\n        }\r\n        for (i in 0 until K) {\r\n            if (g % P[i] == 0) return Point(P[i], al[0])\r\n        }\r\n        return Point(-1, -1)\r\n    }\r\n\r\n    fun solve(a: Int, b: Int): Boolean {\r\n        val x = X[a]\r\n        val y = X[b]\r\n        val d = y - x\r\n        var i = 1\r\n        while (i <= Math.sqrt(d.toDouble())) {\r\n            if (d % i == 0) {\r\n                val j = d / i\r\n                if (exist[i]) {\r\n                    val res = attempt(x, i)\r\n                    if (res.x != -1) {\r\n                        println(\"YES\")\r\n                        println(\"$x $i\")\r\n                        println(X[res.y].toString() + \" \" + res.x)\r\n                        return true\r\n                    }\r\n                }\r\n                if (exist[j]) {\r\n                    val res = attempt(x, j)\r\n                    if (res.x != -1) {\r\n                        println(\"YES\")\r\n                        println(\"$x $j\")\r\n                        println(X[res.y].toString() + \" \" + res.x)\r\n                        return true\r\n                    }\r\n                }\r\n            }\r\n            ++i\r\n        }\r\n        return false\r\n    }\r\n\r\n    fun main(args: Array<String>) {\r\n        for (i in 0 until K) {\r\n            P[i] = scanner.nextInt()\r\n            exist[P[i]] = true\r\n        }\r\n        for (i in 0 until N) X[i] = scanner.nextInt()\r\n        if (N == 2) {\r\n            println(\"YES\")\r\n            println(X[0].toString() + \" \" + P[0])\r\n            println(X[1].toString() + \" \" + P[0])\r\n            return;\r\n        }\r\n        if (solve(0, 1)) {\r\n            return\r\n        }\r\n        if (N > 2 && solve(0, 2)) {\r\n            return\r\n        }\r\n        if (N > 2 && solve(1, 2)) {\r\n            return\r\n        }\r\n        println(\"NO\")\r\n    }"
}