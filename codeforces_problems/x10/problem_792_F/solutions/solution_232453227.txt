{
    "id": 232453227,
    "contestId": 792,
    "creationTimeSeconds": 1699761156,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 792,
        "index": "F",
        "name": "Mages and Monsters",
        "type": "PROGRAMMING",
        "rating": 3100,
        "tags": [
            "data structures",
            "geometry"
        ]
    },
    "author": {
        "contestId": 792,
        "members": [
            {
                "handle": "yangchang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1490625300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 0,
    "source": "/*YYC is Thinking Here*/\r\n#include<bits/stdc++.h>\r\n#define x first\r\n#define y second\r\n#define pii pair<int,int>\r\n#define int long long\r\nusing namespace std;\r\nconst int maxn = 1e5+10;\r\nstruct frac{int a,b;};\r\nbool operator<(frac const&a,frac const&b){assert(a.b >= 0 && b.b >= 0);return a.a*b.b < b.a*a.b;}\r\nbool operator<=(frac const&a,frac const&b){assert(a.b >= 0 && b.b >= 0);return a.a*b.b <= b.a*a.b;}\r\nint m,q;\r\nset<pii>t;\r\nint lay;\r\nvoid covins(int x,int y) {\r\n\tauto pir = t.insert({x,y});\r\n\tif(!pir.second)return;\r\n\tauto p = pir.first;\r\n\tfrac pd = {1,0}; //dx, dy\r\n\tif(p != t.begin()) {\r\n\t\tauto g = p;--g;\r\n\t\twhile(g != t.begin()) {\r\n\t\t\tauto f = g;--f;\r\n\t\t\tpii p1 = *f, p2 = *g, p3 = *p;\r\n\t\t\tif((p2.y - p1.y) * (p3.x - p1.x) <= (p3.y - p1.y) * (p2.x - p1.x))\r\n\t\t\t\tg = f, t.erase(g);\r\n\t\t\telse break;\r\n\t\t}\r\n\t\tpd = frac{p->y - g->y, p->x - g->x};\r\n\t}\r\n\tauto g = p;++g;\r\n\tif(g==t.end())return;\r\n\tfrac nd = {g->y-p->y,g->x-p->x};\r\n\tif(pd <= nd) return void(t.erase(p));\r\n\twhile(g != t.end()) {\r\n\t\tauto f = g;++f;\r\n\t\tif(f == t.end()) return;\r\n\t\tfrac nnd = {f->y-p->y,f->x-p->x};\r\n\t\tif(nd <= nnd) nd = nnd, g = t.erase(g);\r\n\t\telse break;\r\n\t}\r\n}\r\nconst auto eps = 1e-9;\r\ndouble covget(double x) {\r\n\tif(ceil(x) >= t.rbegin()->x) return t.rbegin()->y;\r\n\tauto l = t.upper_bound({ceil(x),0}), r = l--;\r\n\treturn (double)(l->y * (r->x - l->x) + (x - l->x) * (r->y - l->y)) / (r->x - l->x);\r\n}\r\nsigned main() {\r\n\t// freopen(\".in\",\"r\",stdin);\r\n\t// freopen(\".out\",\"w\",stdout);\r\n\tios::sync_with_stdio(0),cin.tie(0);\r\n\tcin>>q>>m;\r\n\tt.insert({0,0});\r\n\tfor(int Id=1;Id<=q;++Id) {//deb(Id,q);\r\n\t\tchar op;int a,b;\r\n\t\tcin>>op>>a>>b;\r\n\t\t++((a += lay) %= 1000000);\r\n\t\t++((b += lay) %= 1000000);\r\n\t\tif(op == '1') {\r\n\t\t\tcovins(b,a);\r\n\t\t} else {\r\n\t\t\tdouble G = covget((double)m / a)*a;\r\n\t\t\tif(G + eps > b) lay = Id,cout<<\"YES\\n\";\r\n\t\t\telse cout<<\"NO\\n\";\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n* I love it all\r\n* Go forward,move forward !\r\n*/"
}