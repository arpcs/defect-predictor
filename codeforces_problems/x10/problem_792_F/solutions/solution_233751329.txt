{
    "id": 233751329,
    "contestId": 792,
    "creationTimeSeconds": 1700616019,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 792,
        "index": "F",
        "name": "Mages and Monsters",
        "type": "PROGRAMMING",
        "rating": 3100,
        "tags": [
            "data structures",
            "geometry"
        ]
    },
    "author": {
        "contestId": 792,
        "members": [
            {
                "handle": "wrihapcod"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1490625300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 7987200,
    "source": "#include<bits/stdc++.h> \r\n#define int long long\r\nusing namespace std;\r\ninline int read(){\r\n\tint x=0;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){\r\n\t\tch=getchar();\r\n\t}\r\n\twhile(ch>='0'&&ch<='9'){\r\n\t\tx=x*10+(ch^48);\r\n\t\tch=getchar();\r\n\t}\r\n\treturn x;\r\n}\r\nconst int p=1e6,INF=1e18;\r\ninline int addmod(int x){\r\n\treturn x>=p?x-p:x; \r\n}\r\nint n,m,ans;\r\ndouble mx[1000010];\r\nset<double> s;\r\ninline double calc(int l,int r,double x){\r\n\tif(r==INF) return -INF;\r\n\tif(l==-INF) return mx[r];\r\n\tdouble k=(double)(mx[r]-mx[l])/(r-l);\r\n\tdouble b=(double)(mx[r]-k*r); \r\n\treturn k*x+b;\r\n}\r\ninline bool checkr(int x,int r){\r\n\tint nxt=*s.upper_bound(r);\r\n\tif(nxt==INF) return false;\r\n\treturn (calc(x,nxt,r)>=mx[r]);\r\n}\r\ninline bool checkl(int x,int l){\r\n\tif(mx[l]<=mx[x]) return true;\r\n\tint pre=*(--s.lower_bound(l));\r\n\tif(pre==-INF) return false;\r\n\treturn (calc(pre,x,l)>=mx[l]);\r\n}\r\nsigned main(){\r\n\tn=read(),m=read();\r\n\ts.insert(-INF),s.insert(INF);\r\n\twhile(n--){\r\n\t\tint op=read();\r\n\t\tint x=(read()+ans)%p+1,y=(read()+ans)%p+1;\r\n\t\tif(op==1){\r\n\t\t\tdouble w=(double)x/y;\r\n\t\t\ts.erase(x);\r\n\t\t\tint nxt=*s.lower_bound(x);\r\n\t\t\tmx[x]=max(mx[x],w);\r\n\t\t\tif(nxt!=INF){\r\n\t\t\t\twhile(nxt!=INF){\r\n\t\t\t\t\tif(!checkr(x,nxt)) break;\r\n\t\t\t\t\ts.erase(nxt);\r\n\t\t\t\t\tnxt=*s.lower_bound(x);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tint pre=(*--s.upper_bound(x));\r\n\t\t\tif(pre!=-INF){\r\n\t\t\t\twhile(pre!=-INF){\r\n\t\t\t\t\tif(!checkl(x,pre)) break;\r\n\t\t\t\t\ts.erase(pre);\r\n\t\t\t\t\tpre=(*--s.upper_bound(x));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(calc(pre,nxt,x)>=mx[x]) continue;\r\n\t\t\ts.insert(x);\r\n\t\t}else{\r\n\t\t\tdouble xt=(double)y/x,xm=(double)y/m;\r\n\t\t\tint l=*(--s.upper_bound(xt));\r\n\t\t\tint r=*s.lower_bound(xt);\r\n\t\t\tbool flag=(calc(l,r,xt)>=xm);\r\n\t\t\tans+=flag; \r\n\t\t\tputs(flag?\"YES\":\"NO\");\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}"
}