{
    "id": 218089259,
    "contestId": 802,
    "creationTimeSeconds": 1691629026,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 802,
        "index": "I",
        "name": "Fake News (hard)",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "string suffix structures"
        ]
    },
    "author": {
        "contestId": 802,
        "members": [
            {
                "handle": "_LiMLE_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1495958700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 1123,
    "memoryConsumedBytes": 72396800,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\r\n#define pii pair<long long, long long>\r\n#define mkp make_pair\r\n#define fi first\r\n#define se second\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e6 + 5;\r\n\r\nint T;\r\nstring S;\r\nint n, m, p, Ansn, cur = 0, temp;\r\nint sa[N], rk[N], osa[N], ork[N], tmp[N], cnt[N], height[N];\r\npii st[N];\r\n\r\ninline bool cmp(int x, int y, int w) {\r\n    return (ork[x] == ork[y] && ork[x + w] == ork[y + w]);\r\n}\r\n\r\nvoid solve() {\r\n    memset(cnt, 0, sizeof(cnt)); \r\n    cin >> S; n = S.length(), m = 127;\r\n    for(int i = 1; i <= n; ++i) cnt[rk[i] = S[i - 1]]++;\r\n    for(int i = 1; i <= m; ++i) cnt[i] += cnt[i - 1];\r\n    for(int i = 1; i <= n; ++i) sa[cnt[rk[i]]--] = i;\r\n    for(int w = 1; w < n; w <<= 1) {\r\n        p = 0;\r\n        for(int i = n ; i > n - w; --i) osa[++p] = i;\r\n        for(int i = 1; i <= n; ++i) if(sa[i] > w) osa[++p] = sa[i] - w;\r\n        memset(cnt, 0, sizeof(cnt));\r\n        for(int i = 1; i <= n; ++i) cnt[tmp[i] = rk[osa[i]]]++;\r\n        for(int i = 1; i <= m; ++i) cnt[i] += cnt[i - 1];\r\n        for(int i = n; i >= 1; --i) sa[cnt[tmp[i]]--] = osa[i];\r\n        p = 0; memcpy(ork, rk, sizeof(rk));\r\n        for(int i = 1; i <= n; ++i) rk[sa[i]] = (cmp(sa[i], sa[i - 1], w) ? p : ++p);\r\n        m = p;\r\n        if(p == n) break;\r\n    }\r\n    for(int i = 1, k = 0; i <= n; ++i) {\r\n        if(k) k--;\r\n        while(S[i + k - 1] == S[sa[rk[i] - 1] + k - 1]) ++k;\r\n        height[rk[i]] = k;\r\n    }\r\n    Ansn = temp = 0; cur = 0; st[0] = mkp(n + 1, 0);\r\n    for(int i = n; i >= 1; --i) {\r\n        Ansn += temp;\r\n        while(cur && st[cur].se >= height[i]) {\r\n            temp -= st[cur].se * (st[cur - 1].fi - st[cur].fi);\r\n            cur--;\r\n        }\r\n        temp += height[i] * (st[cur].fi - i);\r\n        st[++cur] = mkp(i, height[i]);\r\n    }  \r\n    Ansn = Ansn * 2 + n * (n + 1) / 2; cout << Ansn << '\\n';\r\n    return;\r\n}\r\n\r\nsigned main() {\r\n    cin >> T;\r\n    while(T--) solve();\r\n    return 0;\r\n}"
}