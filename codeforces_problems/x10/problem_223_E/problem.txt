{
    "contestId": 223,
    "index": "E",
    "name": "Planar Graph",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 3000,
    "tags": [
        "flows",
        "geometry",
        "graphs"
    ],
    "desc": {
        "title": "E. Planar Graph",
        "statement": "<p>A graph is called <span class=\"tex-font-style-it\">planar</span>, if it can be drawn in such a way that its edges intersect only at their vertexes.</p><p>An <span class=\"tex-font-style-it\">articulation point</span> is such a vertex of an undirected graph, that when removed increases the number of connected components of the graph.</p><p>A <span class=\"tex-font-style-it\">bridge</span> is such an edge of an undirected graph, that when removed increases the number of connected components of the graph.</p><p>You've got a connected undirected planar graph consisting of <span class=\"tex-span\"><i>n</i></span> vertexes, numbered from <span class=\"tex-span\">1</span> to <span class=\"tex-span\"><i>n</i></span>, drawn on the plane. The graph has no bridges, articulation points, loops and multiple edges. You are also given <span class=\"tex-span\"><i>q</i></span> queries. Each query is a cycle in the graph. The query response is the number of graph vertexes, which (if you draw a graph and the cycle on the plane) are located either inside the cycle, or on it. Write a program that, given the graph and the queries, will answer each query.</p>",
        "inputSpecification": "<p>The first line contains two space-separated integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">3\u2009\u2264\u2009<i>n</i>,\u2009<i>m</i>\u2009\u2264\u200910<sup class=\"upper-index\">5</sup></span>) \u2014 the number of vertexes and edges of the graph. Next <span class=\"tex-span\"><i>m</i></span> lines contain the edges of the graph: the <span class=\"tex-span\"><i>i</i></span>-th line contains two space-separated integers <span class=\"tex-span\"><i>u</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>v</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>u</i><sub class=\"lower-index\"><i>i</i></sub>,\u2009<i>v</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009<i>n</i></span>) \u2014 the numbers of vertexes, connecting the <span class=\"tex-span\"><i>i</i></span>-th edge. The next <span class=\"tex-span\"><i>n</i></span> lines contain the positions of the planar graph vertexes on the plane: the <span class=\"tex-span\"><i>i</i></span>-th line contains a pair of space-separated integers <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub></span> and <span class=\"tex-span\"><i>y</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">|<i>x</i><sub class=\"lower-index\"><i>i</i></sub>|,\u2009|<i>y</i><sub class=\"lower-index\"><i>i</i></sub>|\u2009\u2264\u200910<sup class=\"upper-index\">9</sup>)</span> \u2014 the coordinates of the <span class=\"tex-span\"><i>i</i></span>-th vertex of the graph on the plane. </p><p>The next line contains integer <span class=\"tex-span\"><i>q</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>q</i>\u2009\u2264\u200910<sup class=\"upper-index\">5</sup></span>)\u00a0\u2014 the number of queries. Then follow <span class=\"tex-span\"><i>q</i></span> lines that describe the queries: the <span class=\"tex-span\"><i>i</i></span>-th line contains the sequence of space-separated integers <span class=\"tex-span\"><i>k</i><sub class=\"lower-index\"><i>i</i></sub></span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub></span>, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">2</sub></span>, ..., <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>k</i><sub class=\"lower-index\"><i>i</i></sub></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>j</i></sub>\u2009\u2264\u2009<i>n</i>;\u00a0<i>k</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&gt;\u20092</span>), where <span class=\"tex-span\"><i>k</i><sub class=\"lower-index\"><i>i</i></sub></span> is the cycle length in the <span class=\"tex-span\"><i>i</i></span>-th query, <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>j</i></sub></span> are numbers of the vertexes that form a cycle. The numbers of vertexes in the cycle are given in the clockwise or counterclockwise order. The given cycles are simple, that is they cannot go through a graph vertex more than once. The total length of all cycles in all queries does not exceed <span class=\"tex-span\">10<sup class=\"upper-index\">5</sup></span>.</p><p>It is guaranteed that the given graph contains no bridges, articulation points, loops and multiple edges. It is guaranteed that the edge segments can have common points only at the graph's vertexes.</p>",
        "outputSpecification": "<p>For each query print a single integer \u2014 the number of vertexes inside the cycle or on it. Print the answers in the order, in which the queries follow in the input. Separate the numbers by spaces.</p>",
        "samples": [
            {
                "input": "3 3<br/>1 2<br/>2 3<br/>3 1<br/>0 0<br/>1 0<br/>0 1<br/>1<br/>3 1 2 3<br/>",
                "output": "3<br/>"
            },
            {
                "input": "5 8<br/>1 2<br/>2 3<br/>3 4<br/>4 1<br/>1 5<br/>2 5<br/>3 5<br/>4 5<br/>0 0<br/>2 0<br/>2 2<br/>0 2<br/>1 1<br/>1<br/>4 1 2 3 4<br/>",
                "output": "5<br/>"
            },
            {
                "input": "4 5<br/>1 2<br/>2 3<br/>3 4<br/>4 1<br/>2 4<br/>0 0<br/>1 0<br/>1 1<br/>0 1<br/>3<br/>3 1 2 4<br/>3 4 2 3<br/>4 1 2 3 4<br/>",
                "output": "3<br/>3<br/>4<br/>"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "graph theory",
        "planar graph",
        "connected components",
        "articulation points",
        "bridges",
        "circle queries",
        "coordinate geometry",
        "graph drawing",
        "graph vertices",
        "edge segments",
        "cycle length",
        "simple cycles",
        "clockwise order",
        "counterclockwise order",
        "common points",
        "multiple edges",
        "loop detection",
        "query response",
        "output order",
        "input constraints"
    ]
}