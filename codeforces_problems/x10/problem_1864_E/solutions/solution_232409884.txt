{
    "id": 232409884,
    "contestId": 1864,
    "creationTimeSeconds": 1699720696,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1864,
        "index": "E",
        "name": "Guess Game",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "bitmasks",
            "data structures",
            "games",
            "math",
            "probabilities",
            "sortings",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1864,
        "members": [
            {
                "handle": "CGlin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1693060500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 4812800,
    "source": "// LUOGU_RID: 134639658\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<vector>\n#include<set>\nusing namespace std;\n#define int long long \ninline int read(){\n    int x=0;char c=getchar();\n    while(c<'0'||c>'9')c=getchar();\n    while(c>='0'&&c<='9')x=10*x+c-'0',c=getchar();\n    return x;\n}\nconst int maxn=2e5+10,mod=998244353;\nint tr[maxn][2],siz[maxn],tot,ans,n;\nvoid ins(int x){\n    for(int u=0,w=30;w>=0;w--){\n        int t=1&(x>>w);\n        if(!tr[u][t])tr[u][t]=++tot;\n        siz[u=tr[u][t]]++;\n    }\n}\nint qpow(int a,int x){\n    int ans=1;\n    while(x){if(x&1)ans=ans*a%mod;a=a*a%mod;x>>=1;}\n    return ans;\n}\nvoid calc(int u,int f){\n    int l=tr[u][0],r=tr[u][1];\n    ans+=siz[r]*((2*f+1)*siz[l]+(f+1)*siz[r])%mod;ans%=mod;\n    if(l)calc(l,f);if(r)calc(r,0);\n    if(!l&&!r&&f)ans=(ans+siz[u]*siz[u]%mod)%mod;\n}\nsigned main(){\n    int T=read();while(T--){\n        n=read(),ans=0,tot=0;\n        for(int i=1;i<=n;i++)ins(read());\n        calc(0,1);while(tot>=0)siz[tot]=tr[tot][0]=tr[tot][1]=0,tot--;\n        ans=ans*qpow(n*n%mod,mod-2)%mod;\n        printf(\"%lld\\n\",ans);\n    }\n    return 0;\n}"
}