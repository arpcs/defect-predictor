{
    "id": 232786842,
    "contestId": 1864,
    "creationTimeSeconds": 1699984021,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1864,
        "index": "E",
        "name": "Guess Game",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "bitmasks",
            "data structures",
            "games",
            "math",
            "probabilities",
            "sortings",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1864,
        "members": [
            {
                "handle": "nordanov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1693060500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(\"O3,unroll-loops\")\r\n#include <bits/stdc++.h>\r\n#include <unordered_map>\r\nusing namespace std;\r\nusing namespace chrono;\r\n\r\n// #include <ext/pb_ds/assoc_container.hpp>\r\n// #include <ext/pb_ds/tree_policy.hpp>\r\n// using namespace __gnu_pbds;\r\n\r\n// #define ordered_set tree<pair <int,int>, null_type,less<pair <int,int> >, rb_tree_tag,tree_order_statistics_node_update>\r\n//less_equal--> multiset| greater--> dec order\r\n// #define ordered_set tree<int, null_type,less_equal<int >, rb_tree_tag,tree_order_statistics_node_update>\r\n\r\n#define all(x) x.begin(),x.end()\r\n#define ff first\r\n#define ss  second\r\n#define pb push_back\r\n#define PI 3.141592653589793238462\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define YES  cout<<\"YES\"<<endl\r\n#define NO cout<<\"NO\"<<endl\r\ntypedef long long int ll;\r\ntypedef vector <int> vi;\r\ntypedef vector <long long> vll;\r\ntypedef vector <vector <int> > vvi;\r\ntypedef vector <vector <long long> > vvll;\r\ntypedef vector <pair <int,int> > vpii;\r\ntypedef vector <pair <long long,long long> > vpll;\r\ntypedef pair <int,int> pii;\r\ntypedef pair <long long, long long> pll;\r\nconst double pi = 3.1415926535;\r\nconst int INF = 1e9;\r\nconst ll bigmod = 100055128505716009;\r\n// __print() functions\r\nvoid __print(int x) {cerr<<x; }\r\nvoid __print(long long x) { cerr<<x; }\r\nvoid __print(string x){ cerr<<x; }\r\nvoid __print(char x){ cerr<<x; }\r\nvoid __print(bool x){ cerr<<x; }\r\nvoid __print(double x){ cerr<<x; }\r\n\r\n\r\n// printing complex datatypes\r\ntemplate <class T> void __print(vector <T> v){ cerr<<\"[ \"; for(T i:v){ __print(i);cerr<<\" \"; } cerr<<\"]\"; }\r\ntemplate <class T, class V> void __print(pair <T,V> p){ cerr <<\"{ \"; __print(p.first);cerr<<\" , \";__print(p.second);cerr<<\" }\";} \r\ntemplate <class T> void __print(set <T> v) {cerr << \"[ \"; for (T i : v) {__print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void __print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {__print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void __print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {__print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void __print(vector <pair <T, V> > v){cerr << \"[ \"; for(auto i: v){__print(i); cerr<<\" \";} cerr<<\"]\";}\r\ntemplate <class T> void __print(vector <vector <T> > v){ cerr<<endl<<endl; for( auto i:v){ for(T j:i){ cerr<<j<<\" \";} cerr<<endl; } cerr<<endl<<endl;}\r\n\r\n\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x) cerr<<#x<<\" --> \";__print(x);cerr<<endl; \r\n#else\r\n#define debug(x) \r\n#endif\r\n\r\n// Random number generator\r\nuint64_t random_address() { char *p = new char; delete p; return uint64_t(p); }\r\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count() * (random_address() | 1));\r\n// just use rng()\r\n\r\n//functions-------------------------------------------------------------------------------------------------------------------------\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nll binpower(ll a, ll b, ll m){ ll res =1; while(b>0){ if(b&1) res = res*a%m;a = a*a%m;b = b>>1; }   return res;}\r\nint ext_gcd(int a,int b){if(!a || !b) return a|b; int shift = __builtin_ctz(a|b); a = a>>__builtin_ctz(a);do{ b= b>>__builtin_ctz(b);if(a>b){ swap(a,b);} b-=a; }while(b);return a<<=shift;}\r\nvoid precision(int a) {cout << setprecision(a) << fixed;}\r\nll mminvprime(ll a,ll p){return binpower(a,p-2,p);}\r\n\r\n\r\nconst int mod =998244353;\r\n// const int mod = 1e9 + 7;\r\nconst int N = 2e5 + 6;\r\nconst int N2 = 2500;\r\n// ---------------------------------------------------------------------------------------------------------------------------------\r\n\r\nclass node{\r\n    public:\r\n         node* zero;\r\n         node* one;\r\n         ll freq;\r\n        node();\r\n};\r\n\r\nnode::node() : freq(0LL) {}; \r\n\r\nstruct binaryTrie{\r\n    node* root = new node();\r\n    ll ans = 0;\r\n    void insert(int x){\r\n        node* head = root;\r\n        for(int bit = 30 ; bit >=0 ; bit--){\r\n            if((x >> bit) % 2){\r\n                if(head->one == NULL)\r\n                    head->one = new node();\r\n\r\n                head = head->one;\r\n                head->freq = head->freq + 1;\r\n            }\r\n            else{\r\n                if(head->zero == NULL)\r\n                    head->zero = new node();\r\n\r\n                head = head->zero;\r\n                head->freq = head->freq + 1;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    void calc(node* head, ll cnt){\r\n        ll onlythis= 0; \r\n        if(head->zero && head->one){\r\n            cerr<<\"here\"<<endl;\r\n            (ans += (head->zero->freq)*(head->one->freq)*(cnt + 1 - (cnt % 2))) %= mod;\r\n            (ans += (head->one->freq)*(head->zero->freq)*(cnt + (cnt % 2))) %= mod;\r\n            onlythis = max(onlythis , (head->freq - head->zero->freq - head->one->freq));\r\n            calc(head->zero, cnt);\r\n            calc(head->one, cnt + 1);\r\n        }\r\n        else if(head->zero){\r\n            onlythis = max(onlythis, head->freq - head->zero->freq);\r\n            calc(head->zero, cnt);\r\n        }\r\n        else if(head->one){\r\n            onlythis = max(onlythis, head->freq - head->one->freq);\r\n            calc(head->one, cnt + 1);\r\n        }\r\n        else{\r\n            onlythis = max(onlythis, head->freq);\r\n        }\r\n        debug(ans);\r\n        (ans += cnt*(onlythis*onlythis)) %= mod;\r\n        debug(ans);\r\n    }\r\n};\r\nvoid solve(){\r\n    int t; cin>>t;\r\n    while(t--){\r\n        binaryTrie bt;\r\n        int n; cin>>n;\r\n        vi arr(n);\r\n        for(auto &i : arr) {\r\n            cin>>i;\r\n            bt.insert(i);\r\n        }\r\n\r\n        bt.calc(bt.root, 1);\r\n        ll ans =(bt.ans * mminvprime(n, mod)) % mod;\r\n        ans = (ans * mminvprime(n, mod)) % mod;\r\n        cout<<ans<<endl;\r\n\r\n    }\r\n}\r\n\r\n\r\nint main(){\r\n#ifndef ONLINE_JUDGE\r\nfreopen(\"input.txt\",\"r\",stdin);\r\nfreopen(\"output.txt\",\"w\",stdout);   \r\nfreopen(\"error.txt\",\"w\",stderr);\r\n#endif          \r\nfastio();       \r\nauto start1 = high_resolution_clock::now();\r\nsolve();\r\nauto end1=  high_resolution_clock::now();\r\ndouble duration = duration_cast<nanoseconds>(end1 - start1).count();\r\nduration *= 1e-9;\r\n\r\n#ifndef ONLINE_JUDGE\r\ncerr<<\"Time - \"<<fixed<<duration<<setprecision(9) <<\" s\"<<endl;\r\n#endif\r\n\r\n}\r\n\r\n\r\n"
}