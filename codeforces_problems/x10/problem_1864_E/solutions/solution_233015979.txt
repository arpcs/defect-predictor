{
    "id": 233015979,
    "contestId": 1864,
    "creationTimeSeconds": 1700164354,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1864,
        "index": "E",
        "name": "Guess Game",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "bitmasks",
            "data structures",
            "games",
            "math",
            "probabilities",
            "sortings",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1864,
        "members": [
            {
                "handle": "MuhammadSawalhy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1693060500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 203366400,
    "source": "// \ufdfd\r\n// https://codeforces.com/contest/1864/problem/F\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#ifdef SAWALHY\r\n#include \"debug.hpp\"\r\n#else\r\n#define debug(...) 0\r\n#define debug_itr(...) 0\r\n#define debug_bits(...) 0\r\n#endif\r\n\r\n#define ll long long\r\n#define all(v) v.begin(), v.end()\r\n#define rall(v) v.rbegin(), v.rend()\r\n#define minit(v, x) v = min(v, x)\r\n#define maxit(v, x) v = max(v, x)\r\n\r\nstruct Value;\r\nstruct Update;\r\nstruct Node;\r\n\r\nconst int inf = 1e9;\r\n\r\n// Replaceable by primitives (using Value = long long)\r\nstruct Value {\r\n    int sum = 0, mn = inf, mx = -inf;\r\n    Value() = default;\r\n    Value(int value) { sum = mn = mx = value; }\r\n\r\n    Value &operator+=(const Value &other) {\r\n        sum += other.sum;\r\n        mn = min(mn, other.mn);\r\n        mx = max(mx, other.mx);\r\n        return *this;\r\n    }\r\n\r\n    Value operator+(const Value &other) const {\r\n        return Value(*this) += other;\r\n    }\r\n};\r\n\r\nstruct Update {\r\n    // NOTE: Sometime you need to split the update, in these cases\r\n    // you should include the range [a, b] of the update in the struct Update\r\n    Value value;\r\n    enum State {\r\n        idle,\r\n        relative,\r\n        forced\r\n    } state = idle;\r\n\r\n    Update() = default;\r\n    Update(Value value, State state = forced) : value(value), state(state){};\r\n\r\n    Update &operator+=(const Update &other) {\r\n        if (state == idle || other.state == forced) {\r\n            *this = other;\r\n        } else {\r\n            assert(other.state == relative);\r\n            value += other.value;\r\n        }\r\n        return *this;\r\n    }\r\n\r\n    void apply_on(Value &other, int cnt) const {\r\n        if (state == forced) other = value;\r\n        else other += value;\r\n        other.sum += value.sum * (cnt - 1);\r\n    }\r\n\r\n    Update get(const Node &node) const { return *this; }\r\n};\r\n\r\nstruct Node {\r\n    int l = -1, r = -1; // [l, r]\r\n    Update up;\r\n    Value value;\r\n\r\n    Node() = default;\r\n    Node(int l, int r, const Value &value) : l(l), r(r), value(value){};\r\n\r\n    void update(const Update &up) { this->up += up; }\r\n\r\n    void apply_update() {\r\n        up.apply_on(value, r - l + 1);\r\n        up.state = Update::idle;\r\n    }\r\n};\r\n\r\nstruct Segtree {\r\n    int n;\r\n    vector<Node> tree;\r\n\r\n    Segtree(int n) {\r\n        if ((n & (n - 1)) != 0)\r\n            n = 1 << (32 - __builtin_clz(n));\r\n        this->n = n;\r\n        tree.assign(n << 1, Node());\r\n        for (int i = n; i < n << 1; i++)\r\n            tree[i].l = tree[i].r = i - n;\r\n        for (int i = n - 1; i > 0; i--)\r\n            tree[i].l = tree[i << 1].l, tree[i].r = tree[i << 1 | 1].r;\r\n    }\r\n\r\n    Segtree(const vector<Value> &values) : Segtree(values.size()) {\r\n        for (int i = 0; i < (int) values.size(); i++)\r\n            tree[i + n].value = values[i];\r\n        build();\r\n    }\r\n\r\n    void build() {\r\n        for (int i = n - 1; i > 0; --i) pull(i);\r\n    }\r\n\r\n    inline Value query(int i) { return query(1, i, i); }\r\n    inline Value query(int i, int j) { return query(1, i, j); }\r\n    inline void update(int i, const Update &val) { update(1, i, i, val); }\r\n    inline void update(int i, int j, const Update &val) { update(1, i, j, val); }\r\n\r\nprivate:\r\n    void pull(int i) {\r\n        tree[i].value = tree[i << 1].value + tree[i << 1 | 1].value;\r\n    }\r\n\r\n    void push(int i) {\r\n        if (tree[i].up.state != Update::idle) {\r\n            if (i < n) {\r\n                int l = i << 1, r = i << 1 | 1;\r\n                tree[l].update(tree[i].up.get(tree[l]));\r\n                tree[r].update(tree[i].up.get(tree[r]));\r\n            }\r\n            tree[i].apply_update();\r\n        }\r\n    }\r\n\r\n    Value query(int i, int l, int r) {\r\n        push(i);\r\n        if (tree[i].r < l || r < tree[i].l) return Value(); // default\r\n        if (l <= tree[i].l && tree[i].r <= r) return tree[i].value;\r\n        return query(i << 1, l, r) + query(i << 1 | 1, l, r);\r\n    }\r\n\r\n    void update(int i, int l, int r, const Update &up) {\r\n        push(i);\r\n        if (tree[i].r < l || r < tree[i].l) return;\r\n        if (l <= tree[i].l && tree[i].r <= r) {\r\n            tree[i].update(up);\r\n            push(i); // to apply the update\r\n            return;\r\n        }\r\n        update(i << 1, l, r, up.get(tree[i << 1]));\r\n        update(i << 1 | 1, l, r, up.get(tree[i << 1 | 1]));\r\n        pull(i);\r\n    }\r\n};\r\n\r\nconst int N = 1e6 + 1;\r\nint ans[N];\r\nvector<int> ind[N];\r\nvector<pair<int, int>> queries[N];\r\nSegtree sg(N);\r\nSegtree sgmx(N);\r\n\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL), cout.tie(NULL);\r\n\r\n    int n, q;\r\n    cin >> n >> q;\r\n\r\n    vector<int> a(n);\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> a[i];\r\n        ind[a[i]].push_back(i + 1);\r\n    }\r\n\r\n    for (int i = 0; i < q; i++) {\r\n        int l, r;\r\n        cin >> l >> r;\r\n        queries[r].push_back({l, i});\r\n    }\r\n\r\n    sort(all(a));\r\n\r\n    for (int val = 1; val < N; val++) {\r\n        for (int j = 0; j < ind[val].size(); j++) {\r\n            int i = ind[val][j];\r\n            int pre = j > 0 ? ind[val][j - 1] : 0;\r\n            int nxt = j < ind[val].size() - 1 ? ind[val][j + 1] : n + 1;\r\n            int mx1 = pre + 1 <= i - 1 ? sgmx.query(pre + 1, i - 1).mx : -inf;\r\n            int mx2 = i + 1 <= nxt - 1 ? sgmx.query(i + 1, nxt - 1).mx : -inf;\r\n            int mx = max(mx1, mx2);\r\n\r\n            if (mx1 != -inf) {\r\n                debug(val, i, mx);\r\n                sg.update(mx, Update(1, Update::relative));\r\n            }\r\n\r\n            sgmx.update(i, Update(val));\r\n        }\r\n\r\n        for (auto [l, i]: queries[val]) {\r\n            auto it = lower_bound(all(a), l);\r\n            if (it != a.end() && *it <= val)\r\n                ans[i] = 1 + sg.query(*it, val).sum;\r\n            else ans[i] = 0;\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i < q; i++) {\r\n        cout << ans[i] << '\\n';\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}