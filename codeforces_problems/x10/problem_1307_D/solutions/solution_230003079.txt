{
    "id": 230003079,
    "contestId": 1307,
    "creationTimeSeconds": 1698407052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "D",
        "name": "Cow and Fields",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "gxp123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 452,
    "memoryConsumedBytes": 7884800,
    "source": "#include <algorithm>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <cmath>\r\n#include <queue>\r\n\r\nusing namespace std;\r\n\r\nconst int maxN = 2e5 + 10;\r\nstruct edge{\r\n    int v,nxt;\r\n};\r\nedge e[maxN << 1];\r\nint head[maxN],tot;\r\nint cs[maxN],d1[maxN],d2[maxN];\r\nbool b[maxN],c[maxN];\r\nint n,m,k;\r\nqueue<int> q;\r\nbool cmp(int a,int b){\r\n    return d1[a] == d1[b] ? d2[a] < d2[b] : d1[a] < d1[b];\r\n}\r\nvoid add(int u,int v){\r\n    e[++tot] = (edge){v,head[u]};\r\n    head[u] = tot;\r\n}\r\nvoid bfs(int s,int d[]){\r\n    d[s] = 0;\r\n    q.push(s);\r\n    while(!q.empty()){\r\n        int x = q.front();\r\n        q.pop();\r\n        for(int i = head[x],y ; i ; i = e[i].nxt){\r\n            y = e[i].v;\r\n            if(d[y] > d[x] + 1){\r\n                d[y] = d[x] + 1;\r\n                q.push(y);\r\n            }\r\n        }\r\n    }\r\n}\r\nint main(){\r\n    bool flag = false;\r\n    scanf(\"%d%d%d\",&n,&m,&k);\r\n    for(int i = 1 ; i <= k ; ++i){\r\n        scanf(\"%d\",cs + i);\r\n        c[cs[i]] = true;\r\n    }\r\n    for(int j = 1,x,y ; j <= m ; ++j){\r\n        scanf(\"%d%d\",&x,&y);\r\n        add(x,y);\r\n        add(y,x);\r\n        flag = flag || (c[x] && c[y]);\r\n    }\r\n    memset(d1,0x7f,sizeof(d1));\r\n    memset(d2,0x7f,sizeof(d2));\r\n    bfs(1,d1);\r\n    bfs(n,d2);\r\n    int ans = d1[n];\r\n    // if(flag)  \r\n    // cout << ans << endl;\r\n    // else{\r\n        int ans2 = 0;\r\n        sort(cs + 1,cs + 1 + k,cmp);\r\n        int maxh = - (1 << 30);\r\n        for(int i = k ; i >= 1 ; --i){\r\n            ans2 = max(d1[cs[i]] + min(maxh,d2[cs[i]]) + 1,ans2);\r\n            maxh = max(d2[cs[i]],maxh);\r\n        }\r\n        cout << min(ans,ans2) << endl;\r\n    // }\r\n    return 0;\r\n}"
}