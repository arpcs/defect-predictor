{
    "id": 209521419,
    "contestId": 1307,
    "creationTimeSeconds": 1686635162,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "D",
        "name": "Cow and Fields",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "aaryaag03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 8499200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n# define ll long long int\r\n# define ld long double\r\n# define pb push_back\r\n# define pll pair<long long,long long>\r\n# define vll vector<long long>\r\n# define vld vector<long double>\r\n# define vpll vector<pair<long long,long long>>\r\nconst int mod = 1e9+7;\r\nconst int N=2e5+50;\r\nvector<int> graph[N];\r\nbool spl[N];\r\nbool visited[N];\r\nint depth[N];\r\nint depth2[N];\r\nll n,m,k;\r\n\r\nll modInverse(ll a, ll m)\r\n{\r\n    ll m0 = m;\r\n    ll y = 0, x = 1;\r\n \r\n    if (m == 1)\r\n        return 0;\r\n \r\n    while (a > 1) {\r\n        // q is quotient\r\n        ll q = a / m;\r\n        ll t = m;\r\n \r\n        // m is remainder now, process same as\r\n        // Euclid's algo\r\n        m = a % m, a = t;\r\n        t = y;\r\n \r\n        // Update y and x\r\n        y = x - q * y;\r\n        x = t;\r\n    }\r\n \r\n    // Make x positive\r\n    if (x < 0)\r\n        x += m0;\r\n \r\n    return x;\r\n}\r\n\r\n// void dfs(int v, int par=-1){\r\n// \tif(v==b && par!=-1)return;\r\n// \tfor(auto pp: graph[v]){\r\n// \t\tint c=pp.first;\r\n// \t\tint w=pp.second;\r\n// \t\tif(c==par)continue;\r\n// \t\tans[c]=w^ans[v];\r\n// \t\tdfs(c,v);\r\n// \t}\r\n// }\r\n\r\n\r\nvoid bfss(int src){\r\n\tqueue<int> q;\r\n\tq.push(src);\r\n\tdepth[src]=0;\r\n\tvisited[src]=true;\r\n\twhile(!q.empty()){\r\n\t\tint v=q.front();\r\n\t\tq.pop();\r\n\t\tfor(auto c: graph[v]){\r\n\t\t\tif(!visited[c]){\r\n\t\t\t\tvisited[c]=true;\r\n\t\t\t\tdepth[c]=depth[v]+1;\r\n\t\t\t\tq.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid bfs(int src){\r\n\tqueue<int> q;\r\n\tq.push(src);\r\n\tdepth2[src]=0;\r\n\tvisited[src]=true;\r\n\twhile(!q.empty()){\r\n\t\tint v=q.front();\r\n\t\tq.pop();\r\n\t\tfor(auto c: graph[v]){\r\n\t\t\tif(!visited[c]){\r\n\t\t\t\tvisited[c]=true;\r\n\t\t\t\tdepth2[c]=depth2[v]+1;\r\n\t\t\t\tq.push(c);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nmt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n \r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout<<setprecision(30);\r\n\r\n    int tt=1; \r\n    // cin>>tt;\r\n    while(tt--){\r\n    \tcin>>n>>m>>k;\r\n    \twhile(k--){\r\n    \t\tint x; cin>>x;\r\n    \t\tspl[x]=true;\r\n    \t}\r\n    \t// bool flag=false;\r\n    \twhile(m--){\r\n    \t\tint u,v; cin>>u>>v;\r\n    \t\tgraph[u].push_back(v);\t\r\n    \t\tgraph[v].push_back(u);\t\r\n    \t}\r\n    \tfor(int i=1;i<=n;i++){\r\n    \t\tdepth[i]=1e9;\r\n    \t\tdepth2[i]=1e9;\r\n    \t}\r\n    \tbfs(1);\r\n    \tvector<pair<int,int>> v;\r\n    \tfor(int i=1;i<=n;i++){\r\n    \t\tvisited[i]=0;\r\n    \t}\r\n    \tbfss(n);\r\n    \tfor(int i=1;i<=n;i++){\r\n    \t\tif(spl[i])v.push_back({depth[i]-depth2[i],i});\r\n    \t}\r\n    \tsort(v.begin(), v.end());\r\n    \tll pre[v.size()];\r\n    \tpre[0]=0;\r\n    \tfor(int i=1;i<n;i++){\r\n    \t\tif(depth[i]>depth[pre[i-1]]){\r\n    \t\t\tpre[i]=i;\r\n    \t\t}\r\n    \t\telse pre[i]=pre[i-1];\r\n    \t}\r\n    \tint ans=1e9;\r\n    \tfor(int i=0;i<v.size();i++){\r\n    \t\tans=min(ans,depth[pre[i]]+depth2[v[i].second]);\r\n    \t}\r\n    \t// for(auto x: v)cout<<x.first<<\" \"<<x.second<<\"\\n\";\r\n    \t// \tcout<<\"\\n\";\r\n    \tcout<<ans<<\"\\n\";\r\n    \t// else cout<<min(ans,v[v.size()-1].first+v[v.size()-2].first+1)<<\"\\n\";\r\n    \t\r\n    \t\r\n\t}    \r\n    return 0;\r\n}"
}