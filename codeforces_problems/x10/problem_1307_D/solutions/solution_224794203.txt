{
    "id": 224794203,
    "contestId": 1307,
    "creationTimeSeconds": 1695494178,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1307,
        "index": "D",
        "name": "Cow and Fields",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1307,
        "members": [
            {
                "handle": "coder_ravan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1581953700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 10547200,
    "source": "/*\r\n    \u0915\u0930\u094d\u092e\u0923\u094d\u092f\u0947\u0935\u093e\u0927\u093f\u0915\u093e\u0930\u0938\u094d\u0924\u0947 \u092e\u093e \u092b\u0932\u0947\u0937\u0941 \u0915\u0926\u093e\u091a\u0928\u0964\r\n    \u092e\u093e \u0915\u0930\u094d\u092e\u092b\u0932\u0939\u0947\u0924\u0941\u0930\u094d\u092d\u0942\u0930\u094d\u092e\u093e \u0924\u0947 \u0938\u0919\u094d\u0917\u094b\u093d\u0938\u094d\u0924\u094d\u0935\u0915\u0930\u094d\u092e\u0923\u093f\u0965\r\n\r\n    Karmanye vadhikaraste Ma Phaleshu Kadachana,\r\n    Ma Karmaphalaheturbhurma Te Sangostvakarmani,\r\n\r\n    The meaning of the verse is :\u2014\r\n    You have the right to work only but never to its fruits.\r\n    Let not the fruits of action be your motive, nor let your attachment be to\r\n   inaction\r\n*/\r\n\r\n#include <math.h>\r\n#include <algorithm>\r\n#include <climits>\r\n#include <iomanip>\r\n#include <iostream>\r\n#include <list>\r\n#include <map>\r\n#include <queue>\r\n#include <set>\r\n#include <stack>\r\n#include <string>\r\n#include <utility>\r\n#include <unordered_map>\r\n#include <vector>\r\n#define int int64_t\r\n#define vi vector<int>\r\n#define vii vector<pair<int, int>>\r\n#define vs vector<string>\r\n#define vc vector<char>\r\n#define vb vector<bool>\r\n#define pb emplace_back\r\n#define vvi vector<vector<int>>\r\n#define mii map<int, int>\r\n#define mci map<char, int>\r\n#define pii pair<int, int>\r\n#define mp make_pair\r\n#define all(x) (x).begin(), (x).end()\r\n#define vin(x, v)     \\\r\n    for (auto &x : v) \\\r\n        cin >> x;\r\n#define vout(x, v)   \\\r\n    for (auto x : v) \\\r\n        cout << x << \" \";\r\n#define MEM(a, b) memset(a, (b), sizeof(a))\r\n#define loop(i, j, k) for (int i = j; i < k; i += 1)\r\n#define rloop(i, j, k) for (int i = j; i >= k; i -= 1)\r\n#define rep(i, j) loop(i, 0, j)\r\n#define rrep(i, j) rloop(i, j, 0)\r\n#define MP make_pair\r\n#define endl \"\\n\"\r\n#define INF (int)1e18\r\n#define EPS 1e-18\r\n#define PI 3.1415926535897932384626433832795\r\n#define MOD 1000000007\r\n#define MODD 998244353\r\n// cout <<setprecision(15)\r\n#define NEED_FOR_SPEED_MOST_WANTED    \\\r\n    ios_base::sync_with_stdio(false); \\\r\n    cin.tie(NULL);                    \\\r\n    cout.tie(NULL)\r\nusing namespace std;\r\n\r\n/*-----------------------------------D-E-B-U-G-----------------------------------------------*/\r\n#ifndef ONLINE_JUDGE\r\n#define deb(...)                   \\\r\n    cerr << #__VA_ARGS__ << \" = \"; \\\r\n    _print(__VA_ARGS__);           \\\r\n    cerr << endl;\r\n#else\r\n#define deb(...)\r\n#endif\r\n\r\nvoid _print(const int &t)\r\n{\r\n    cerr << t;\r\n}\r\nvoid _print(const string &t)\r\n{\r\n    cerr << t;\r\n}\r\nvoid _print(const char &t)\r\n{\r\n    cerr << t;\r\n}\r\nvoid _print(const long double &t)\r\n{\r\n    cerr << t;\r\n}\r\nvoid _print(const double &t)\r\n{\r\n    cerr << t;\r\n}\r\nvoid _print(const unsigned long long &t)\r\n{\r\n    cerr << t;\r\n}\r\n\r\ntemplate <class T, class V>\r\nvoid _print(const pair<T, V> &p);\r\ntemplate <class T>\r\nvoid _print(const vector<T> &v);\r\ntemplate <class T>\r\nvoid _print(const set<T> &v);\r\ntemplate <class T, class V>\r\nvoid _print(const map<T, V> &v);\r\ntemplate <class T>\r\nvoid _print(const multiset<T> &v);\r\ntemplate <class T, class V>\r\nvoid _print(const pair<T, V> &p)\r\n{\r\n    cerr << \"{\";\r\n    _print(p.first);\r\n    cerr << \",\";\r\n    _print(p.second);\r\n    cerr << \"}\";\r\n}\r\ntemplate <class T>\r\nvoid _print(const vector<T> &v)\r\n{\r\n    cerr << \"[ \";\r\n    for (const T &i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\ntemplate <class T>\r\nvoid _print(const set<T> &v)\r\n{\r\n    cerr << \"[ \";\r\n    for (const T &i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\ntemplate <class T>\r\nvoid _print(const multiset<T> &v)\r\n{\r\n    cerr << \"[ \";\r\n    for (const T &i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\ntemplate <class T, class V>\r\nvoid _print(const map<T, V> &v)\r\n{\r\n    cerr << \"[ \";\r\n    for (const auto &i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\n\r\n/*-----------------------------------D-E-B-U-G-----------------------------------------------*/\r\n\r\nset<pair<int, int>> edges;\r\nset<int> special;\r\nvvi graph;\r\n\r\nvoid incarnate(int n, int k)\r\n{\r\n    graph.resize(n + 1);\r\n    rep(i, n + 1)\r\n    {\r\n        graph[i].clear();\r\n    }\r\n    special.clear();\r\n}\r\n\r\nbool isBothSpecial(int a, int b)\r\n{\r\n    return (special.find(a) != special.end() && special.find(b) != special.end());\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    incarnate(n, k);\r\n    rep(i, k)\r\n    {\r\n        int x;\r\n        cin >> x;\r\n        special.insert(x);\r\n    }\r\n    bool specialEdge = false;\r\n    rep(i, m)\r\n    {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        graph[u].push_back(v);\r\n        graph[v].push_back(u);\r\n        if (isBothSpecial(v, u))\r\n            specialEdge = true;\r\n    }\r\n    map<int, int> specialDist;\r\n    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\r\n    pq.push(MP(0, 1));\r\n    int destDist = INF;\r\n    set<int> vis;\r\n    vis.insert(1);\r\n    while (pq.size())\r\n    {\r\n        auto curr = pq.top();\r\n        pq.pop();\r\n        int currDist = curr.first;\r\n        int currNode = curr.second;\r\n        if (special.find(currNode) != special.end())\r\n        {\r\n            if (currDist <= destDist)\r\n                specialDist[currNode] = currDist;\r\n        }\r\n        if (currNode == n)\r\n        {\r\n            destDist = currDist;\r\n        }\r\n\r\n        for (auto &x : graph[currNode])\r\n        {\r\n            if (vis.find(x) == vis.end())\r\n            {\r\n                pq.push(MP(currDist + 1, x));\r\n                vis.insert(x);\r\n            }\r\n        }\r\n    }\r\n    if (specialEdge)\r\n    {\r\n        cout << destDist;\r\n        return;\r\n    }\r\n    int miniLoss = INF;\r\n    vi loss;\r\n    for (auto x : specialDist)\r\n    {\r\n        loss.push_back(x.second);\r\n    }\r\n    int len = loss.size();\r\n    // sort(all(loss));\r\n    // deb(specialDist);\r\n    // deb(destDist);\r\n    rep(i, len - 1)\r\n    {\r\n        if (loss[i] != loss[i + 1])\r\n            miniLoss = min(miniLoss, loss[i + 1] - loss[i]);\r\n    }\r\n    if (miniLoss != INF)\r\n        cout << destDist - miniLoss + 1;\r\n    else\r\n        cout << destDist;\r\n}\r\n\r\nsigned main()\r\n{\r\n    NEED_FOR_SPEED_MOST_WANTED;\r\n    // cout << setprecision(15);\r\n    int t = 1;\r\n    //   cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n        cout << endl;\r\n    }\r\n}"
}