{
    "id": 202685195,
    "contestId": 145,
    "creationTimeSeconds": 1681891382,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 145,
        "index": "C",
        "name": "Lucky Subsequence",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "dp",
            "math"
        ]
    },
    "author": {
        "contestId": 145,
        "members": [
            {
                "handle": "__AA"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1327215600
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 24,
    "timeConsumedMillis": 404,
    "memoryConsumedBytes": 3584000,
    "source": "\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n    public static StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));\r\n    public static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\r\n    public static int nextInt() throws Exception { in.nextToken(); return (int)in.nval; };\r\n    public static double nextDouble() throws Exception { in.nextToken(); return (double)in.nval; };\r\n    public static String nextString() throws Exception { in.nextToken(); return in.sval; };\r\n\r\n//\tpublic static String[] rd;\r\n//\tpublic static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n//\tpublic static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));\r\n\r\n    final static int N = 100010, M = 30, MOD = (int)1e9 + 7;\r\n\r\n    static int n, m;\r\n    static int[] a = new int[N];\r\n    static long[] fac = new long[N], inv = new long[N];\r\n    static Map<Integer, Integer> map = new HashMap<>();\r\n    static Set<Integer> set = new HashSet<>(), sets = new HashSet<>();\r\n    static int[] f = new int[N];\r\n    public static void main(String[] args) throws Exception {\r\n\r\n        fac[0] = fac[1] = inv[0] = inv[1] = 1;\r\n        for (int i = 2; i < N; i++) {\r\n            fac[i] = fac[i - 1] * i % MOD;\r\n            inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;\r\n        }\r\n        for (int i = 2; i < N; i++) {\r\n            inv[i] = inv[i] * inv[i - 1] % MOD;\r\n        }\r\n\r\n        init(0);\r\n\r\n        n = nextInt();\r\n        m = nextInt();\r\n        int sum = 0;\r\n        for (int i = 1; i <= n; i++) {\r\n            a[i] = nextInt();\r\n\r\n            if (set.contains(a[i])) {\r\n                sets.add(a[i]);\r\n            } else {\r\n                sum++;\r\n            }\r\n\r\n            int d = 1;\r\n            if (map.containsKey(a[i])) d = map.get(a[i]) + d;\r\n            map.put(a[i], d);\r\n        }\r\n\r\n        List<Integer> w = new ArrayList<>(sets);\r\n\r\n//        Arrays.fill(f, Integer.MIN_VALUE >> 1);\r\n\r\n        f[0] = 1;\r\n        for (int i = 1; i <= w.size(); i++) {\r\n            for (int j = i; j >= 1; j--) {\r\n//                out.println(w.get(i - 1) + \" \" + map.get(w.get(i - 1)));\r\n                f[j] = (f[j] + f[j - 1] * map.get(w.get(i - 1))) % MOD;\r\n            }\r\n        }\r\n\r\n        long ans = 0;\r\n        for (int i = 0; i <= m; i++) {\r\n            ans = (ans + f[i] * C(sum, m - i)) % MOD;\r\n        }\r\n        out.println(ans);\r\n        out.close();\r\n    }\r\n    static void init(long x) {\r\n        if (x > 2e9) return;\r\n        if (x != 0) set.add((int)x);\r\n        init(x * 10 + 4);\r\n        init(x * 10 + 7);\r\n    }\r\n    static long C(int n, int m) {\r\n        if (m > n) return 0;\r\n        return fac[n] * inv[m] % MOD * inv[n - m] % MOD;\r\n    }\r\n}"
}