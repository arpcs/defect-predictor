{
    "id": 220861258,
    "contestId": 862,
    "creationTimeSeconds": 1693231620,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 862,
        "index": "B",
        "name": "Mahmoud and Ehab and the bipartiteness",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 862,
        "members": [
            {
                "handle": "shivang1919"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1505833500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\n#define ll  long long int\r\n#define vi  vector<int>\r\n#define vll vector<long long int>\r\n \r\nvector<vector<pair<int, int>>> AL; \r\nvi notvisited;\r\nvll side;\r\n\r\n// The standard DFS traversal\r\n// enhanced with a tracker variable s\r\n// that allows us to remember which\r\n// \"side\" of the bipartition we are on.\r\n \r\nvoid dfs(int u, int s){\r\n\r\n  // u is on side s (s is 0 or 1)  \r\n  // update the #vertices in side[s]\r\n  side[s]++;\r\n\r\n  // the rest of this is usual DFS...\r\n  notvisited[u] = 0;\r\n  for(auto &[v,w] : AL[u]){\r\n    if(notvisited[v])\r\n      //...but remember to switch sides\r\n      //when you invoke dfs on v:\r\n      dfs(v,1-s);\r\n      //1 - s = 0 when s = 1\r\n      //1 - s = 1 when s = 0\r\n  }\r\n}\r\n \r\nint main(){\r\n  // 0 vertices on both sides \r\n  // to begin with:\r\n  side.assign(2,0);\r\n  int n;\r\n  cin >> n;\r\n\r\n  AL.resize(n+1);\r\n  notvisited.assign(n+1,1);\r\n\r\n  for (int i = 1; i <= n-1; i++) {\r\n    int u,v;  \r\n    cin >> u >> v;\r\n    AL[u].push_back(make_pair(v,0)); \r\n    AL[v].push_back(make_pair(u,0)); \r\n  }\r\n\r\n  // initialize dfs on 1:\r\n  dfs(1,0);\r\n  // output a*b - (n-1), where\r\n  // a = side[0] and b = side[1]\r\n  // as discussed in the lecture.\r\n  cout << (side[0]*side[1]) - (n-1)  << endl;\r\n \r\n}"
}