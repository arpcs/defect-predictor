{
    "id": 231422944,
    "contestId": 862,
    "creationTimeSeconds": 1699167195,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 862,
        "index": "B",
        "name": "Mahmoud and Ehab and the bipartiteness",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 862,
        "members": [
            {
                "handle": "himanshudhingra"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1505833500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 3686400,
    "source": "\r\n/* \r\n\r\nAuthor :: Bot Anshu \r\n\r\n        ~All our knowledge has its origins in our perceptions - Leonardo Da Vinci.\r\n\r\n*/\r\n    \r\n    \r\n\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n\r\n#include<bits/stdc++.h>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace chrono;\r\nusing namespace __gnu_pbds;\r\n\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define MOD 1000000007\r\n#define MOD1 998244353\r\n#define INF 1e18\r\n#define nline \"\\n\"\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define mp make_pair\r\n#define ff first\r\n#define ss second\r\n#define PI 3.141592653589793238462\r\n#define set_bits __builtin_popcountll\r\n#define sz(x) ((int)(x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#define print(a) for(auto i:a){ cout<<i<<' ' ;}cout<<endl; \r\n#define read(x) int x ; cin>>x;\r\n#define rep(i, begin, end) for (__typeof(end) i = (begin) - ((begin) > (end)); i != (end) - ((begin) > (end)); i += 1 - 2 * ((begin) > (end)))\r\n#define mt make_tuple\r\n#define eb emplace_back\r\n\r\ntypedef vector<int> vin;\r\ntypedef vector<string> vst;\r\ntypedef vector<char> vch;\r\n\r\n#ifdef botanshu\r\n#define debug(x) cerr << #x<<\" \"; _print(x); cerr << endl;\r\n#else\r\n#define debug(x);\r\n#endif\r\n\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\n// typedef __int128 ell;\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key\r\n\r\nvoid _print(ll t) {cerr << t;}\r\nvoid _print(int t) {cerr << t;}\r\nvoid _print(string t) {cerr << t;}\r\nvoid _print(char t) {cerr << t;}\r\nvoid _print(lld t) {cerr << t;}\r\nvoid _print(double t) {cerr << t;}\r\nvoid _print(ull t) {cerr << t;}\r\n\r\ntemplate <class T, class V> void _print(pair <T, V> p);\r\ntemplate <class T> void _print(vector <T> v);\r\ntemplate <class T> void _print(set <T> v);\r\ntemplate <class T, class V> void _print(map <T, V> v);\r\ntemplate <class T> void _print(multiset <T> v);\r\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\r\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\nvoid _print(pbds v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\n\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n/*---------------------------------------------------------------------------------------------------------------------------*/\r\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nbool revsort(ll a, ll b) {return a > b;}\r\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\nll getRandomNumber(ll l, ll r) {return uniform_int_distribution<ll>(l, r)(rng);} \r\n\r\nvoid usaco(string s){\r\n    freopen((s + \".in\").c_str(), \"r\", stdin);\r\n    freopen((s +\".out\").c_str(), \"w\", stdout);\r\n}\r\n\r\n/*--------------------------------------------------------------------------------------------------------------------------*/\r\n\r\nvector<int> color;\r\n\r\nvoid dfs(int node , vector<int> adj[]){\r\n\r\n\tfor(auto it : adj[node]){\r\n\t\tif(color[it]==-1){\r\n\t\t\tcolor[it]=color[node]^1;\r\n\t\t\tdfs(it , adj);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nvoid solve() {\r\n\tint n; cin>>n;\r\n\tvector<int> adj[n];\r\n\tfor(int i=0 ;i<n-1;i++){\r\n\t\tint u ,v; cin>>u>>v; u--;v--;\r\n\t\tadj[u].pb(v);\r\n\t\tadj[v].pb(u);\r\n\t}\r\n\tcolor.resize(n ,-1);\r\n\tcolor[0]=0;\r\n\tdfs(0 , adj);\r\n\tint a = accumulate(all(color) ,0);\r\n\tint b = n-a;\r\n\tll ans =a*b - (n-1);\r\n\r\n\tcout << ans <<endl;\r\n\r\n}\r\n\r\n\r\n\r\nint main() {\r\n#ifdef botanshu\r\n    freopen(\"Error.txt\", \"w\", stderr);\r\n#endif\r\n    fastio();\r\n    auto start1 = high_resolution_clock::now();\r\n    int t =1;\r\n    // cin>>t;\r\n    while(t--){\r\n        solve();\r\n    }\r\n    auto stop1 = high_resolution_clock::now();\r\n    auto duration = duration_cast<microseconds>(stop1 - start1);\r\n#ifdef botanshu\r\n    cerr <<endl<< \"Time: \" << duration . count() / 1000 << endl;\r\n#endif\r\n}"
}