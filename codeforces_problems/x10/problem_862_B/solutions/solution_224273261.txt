{
    "id": 224273261,
    "contestId": 862,
    "creationTimeSeconds": 1695287829,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 862,
        "index": "B",
        "name": "Mahmoud and Ehab and the bipartiteness",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "dfs and similar",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 862,
        "members": [
            {
                "handle": "0gamma"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1505833500
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 2764800,
    "source": "from types import GeneratorType\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n \r\n    return wrappedfunc\r\n\r\nn = int(input())\r\ng = [[] for i in range(n+1)]\r\nfor _ in range(n-1):\r\n    u, v = map(int, input().split())\r\n    g[u].append(v)\r\n    g[v].append(u)\r\n \r\nvisited = [False for _ in range(n+1)]\r\n\r\n@bootstrap\r\ndef dfs(node, prev):\r\n    visited[node] = prev\r\n    x = None\r\n    for w in g[node]:\r\n        if not visited[w]:\r\n            yield dfs(w, 3 - prev)\r\n\r\nx = dfs(1, 1)\r\ncnt = 0\r\nfor visit in visited:\r\n    if visit == 1:\r\n        cnt += visit\r\n \r\nprint(cnt*(n-cnt)-n+1)"
}