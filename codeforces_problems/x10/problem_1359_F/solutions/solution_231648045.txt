{
    "id": 231648045,
    "contestId": 1359,
    "creationTimeSeconds": 1699309264,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1359,
        "index": "F",
        "name": "RC Kaboom Show",
        "type": "PROGRAMMING",
        "rating": 2900,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "geometry",
            "math"
        ]
    },
    "author": {
        "contestId": 1359,
        "members": [
            {
                "handle": "Wxssim"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590676500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)\r\n#define int long long\r\n#define all(v) v.begin(), v.end()\r\n#define nl << '\\n'\r\n#define v vector\r\n#define vi vector<int>\r\n#define pii pair<int, int>\r\n#define mp make_pair\r\n#define pb push_back\r\n#define INF LONG_LONG_MAX\r\n#define F first\r\n#define S second\r\n\r\nvi x, y, dx, dy, speed;\r\nv<double> a, b;\r\n\r\npair<double, double> intersection(int i, int j) {\r\n    if (a[i] == INF)\r\n        //ax + b = y\r\n        return mp(x[i], a[j] * x[i] + b[j]);\r\n    if (a[j] == INF)\r\n        return mp(x[j], a[i] * x[j] + b[i]);\r\n    //ax + b = ax + b\r\n    //a(xi) + b = a(xj) + b\r\n    //x (ai - aj) = bj - bi\r\n    //x = (bj - bi) / (ai - aj)\r\n    //y = (ai) * x + bi;\r\n    double num = b[j] - b[i];\r\n    double deno = a[i] - a[j];\r\n    double xx = num / deno;\r\n    double yy = a[i] * xx + b[i];\r\n    \r\n\r\n\r\n    return mp(xx, yy);\r\n}\r\n\r\nint32_t main() {\r\n    fast;\r\n\r\n    int n; cin >> n;\r\n    x = y = dx = dy = speed = vi(n);\r\n    a = b = v<double>(n);\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> x[i] >> y[i] >> dx[i] >> dy[i] >> speed[i];\r\n        if (dx[i] == 0) {\r\n            a[i] = INF;\r\n            b[i] = x[i];\r\n            continue;\r\n        }\r\n        a[i] = (double) dy[i] / dx[i];\r\n        b[i] = y[i] - a[i] * x[i];\r\n    }\r\n    \r\n\r\n    double shortest = INF;\r\n    for (int i = 0; i < n; i++)\r\n        for (int j = i + 1; j < n; j++) {\r\n            if (a[i] == a[j]) {\r\n                if (b[i] != b[j])\r\n                    continue;\r\n                if (x[i] < x[j]) {\r\n                    if (dx[j] > 0 and dx[i] < 0)\r\n                        continue;\r\n                }\r\n                else {\r\n                    if (dx[i] > 0 and dx[j] < 0)\r\n                        continue;\r\n                }\r\n\r\n                if (dx[i] == 0) {\r\n                    if (dy[i] * dy[j] < 0) {\r\n                        if (y[i] > y[j] and dy[i] > 0)\r\n                            continue;\r\n                        if (y[i] < y[j] and dy[i] < 0)\r\n                            continue;\r\n                        double time = (double) abs(y[i] - y[j]) / (speed[i] + speed[j]);\r\n                        shortest = min(shortest, time);\r\n                        continue;\r\n                    }\r\n\r\n                    if (dy[i] < 0 and dy[j] < 0) {\r\n                        if (y[i] > y[j]) {\r\n                            double time = (double) abs(y[i] - y[j]) / (speed[i]);\r\n                            shortest = min(shortest, time);\r\n                        }\r\n                        else {\r\n                            double time = (double) abs(y[i] - y[j]) / (speed[j]);\r\n                            shortest = min(shortest, time);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (y[i] > y[j]) {\r\n                            double time = (double) abs(y[i] - y[j]) / (speed[j]);\r\n                            shortest = min(shortest, time);\r\n                        }\r\n                        else {\r\n                            double time = (double) abs(y[i] - y[j]) / (speed[i]);\r\n                            shortest = min(shortest, time);\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n\r\n                double ratio = sqrt(dx[i] * dx[i] + dy[i] * dy[i]) / abs(dx[i]);\r\n                double speedxi = (double) speed[i] / ratio;\r\n                speedxi = abs(speedxi);\r\n\r\n                ratio = sqrt(dx[j] * dx[j] + dy[j] * dy[j]) / abs(dx[j]);\r\n                double speedxj = (double) speed[j] / ratio;\r\n                speedxj = abs(speedxj);\r\n\r\n\r\n                if (dx[i] * dx[j] < 0) {\r\n                    double time = abs(x[j] - x[i]) / (speedxi + speedxj);\r\n                    \r\n\r\n                    shortest = min(shortest, time);\r\n                    continue;\r\n                }\r\n\r\n                if (dx[i] < 0 and dx[j] < 0) {\r\n                    if (x[i] > x[j]) {\r\n                        double time = abs(x[j] - x[i]) / speedxi;\r\n                        shortest = min(shortest, time);\r\n                    }\r\n                    else {\r\n                        double time = abs(x[j] - x[i]) / speedxj;\r\n                        shortest = min(shortest, time);\r\n                    }\r\n                }\r\n                else {\r\n                    if (x[i] > x[j]) {\r\n                        double time = abs(x[i] - x[j]) / speedxj;\r\n                        shortest = min(shortest, time);\r\n                    }\r\n                    else {\r\n                        double time = abs(x[i] - x[j]) / speedxi;\r\n                        shortest = min(shortest, time);\r\n                    }\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            if (a[i] == INF) {\r\n                if (x[j] > x[i] and dx[j] > 0)\r\n                    continue;\r\n                if (x[j] < x[i] and dx[j] < 0)\r\n                    continue;\r\n            }\r\n\r\n            if (a[j] == INF) {\r\n                if (x[i] > x[j] and dx[i] > 0)\r\n                    continue;\r\n                if (x[i] < x[j] and dx[i] < 0)\r\n                    continue;\r\n            }\r\n\r\n            pair<double, double> inter = intersection(i, j);\r\n\r\n            //validate that intersection point is infront of BOTH CARS\r\n\r\n            if ((inter.F - x[i]) * dx[i] < 0)\r\n                continue;\r\n            if ((inter.F - x[j]) * dx[j] < 0)\r\n                continue;\r\n            \r\n            \r\n            //intersection will happen\r\n            //find time for BOTH cars to reach intersection point\r\n            // v = d / t\r\n            // d = sqrt((x1 - x2)^2 + (y1 - y2)^2)\r\n            double idist = sqrt(pow(x[i] - inter.F, 2) + pow(y[i] - inter.S, 2));\r\n            double itime = idist / speed[i];\r\n\r\n            double jdist = sqrt(pow(x[j] - inter.F, 2) + pow(y[j] - inter.S, 2));\r\n            double jtime = jdist / speed[j];\r\n            \r\n            shortest = min(shortest, max(jtime, itime));\r\n        }\r\n    if (shortest == INF)\r\n        cout << \"No show :(\";\r\n    else\r\n        cout << fixed << setprecision(10) << shortest;\r\n\r\n    return 0;\r\n}"
}