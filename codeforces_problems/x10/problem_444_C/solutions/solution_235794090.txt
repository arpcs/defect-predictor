{
    "id": 235794090,
    "contestId": 444,
    "creationTimeSeconds": 1701752877,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 444,
        "index": "C",
        "name": "DZY Loves Colors",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 444,
        "members": [
            {
                "handle": "d_k_d"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1404651900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 16076800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing i64 = long long;\r\nconst int N = 1E5 + 5;\r\nint n, m;\r\nstruct segt {\r\n  struct node {\r\n    int l, r;\r\n    i64 sum;\r\n    i64 tag;\r\n  } t[N << 2];\r\n  int lson(int x) {return x << 1;}\r\n  int rson(int x) {return x << 1 | 1;}\r\n  void pushup(int x) {t[x].sum = t[lson(x)].sum + t[rson(x)].sum;}\r\n  void build(int x, int l, int r) {\r\n    t[x].l = l; t[x].r = r;\r\n    if (l == r) {t[x].sum = 0; return ;}\r\n    int mid = (l + r) >> 1;\r\n    build(lson(x), l, mid); build(rson(x), mid + 1, r);\r\n    pushup(x);\r\n  }\r\n  void upd(int x, int v) {t[x].sum += 1LL * (t[x].r  - t[x].l + 1) * v; t[x].tag += v;}\r\n  void pushdown(int x) {\r\n    upd(lson(x), t[x].tag); upd(rson(x), t[x].tag);\r\n    t[x].tag = 0;\r\n  }\r\n  void update(int x, int L, int R, int val) {\r\n    if (t[x].l >= L && t[x].r <= R) {\r\n      upd(x, val);\r\n      return ;\r\n    }\r\n    int mid = (t[x].l + t[x].r) >> 1; pushdown(x);\r\n    if (L <= mid) update(lson(x), L, R, val);\r\n    if (R > mid) update(rson(x), L, R, val);\r\n    pushup(x);\r\n  }\r\n  i64 query(int x, int L, int R) {\r\n    if (t[x].l >= L && t[x].r <= R) return t[x].sum;\r\n    int mid = (t[x].l + t[x].r) >> 1; i64 res = 0;\r\n    pushdown(x);\r\n    if (L <= mid) res += query(lson(x), L, R);\r\n    if (R > mid) res += query(rson(x), L, R);\r\n    return res;\r\n  }\r\n} T;\r\nstruct odt {\r\n  struct node {\r\n    int l, r, v;\r\n    bool operator < (const node &w) const {return r == w.r ? l < w.l : r < w.r;}\r\n    node(int a, int b, int c) {l = a, r = b, v = c;}\r\n  } ;\r\n  set <node> s;\r\n  void init() {\r\n    T.build(1, 1, n);\r\n    for (int i = 1; i <= n; ++i)\r\n      s.insert(node(i, i, i));\r\n  }\r\n  void split(int x) {\r\n    auto k = s.lower_bound(node(0, x, 0));\r\n    if ((*k).r == x) return ;\r\n    auto w = *k;\r\n    s.erase(k);\r\n    s.insert(node(w.l, x, w.v));\r\n    s.insert(node(x + 1, w.r, w.v));\r\n  }\r\n  void update(int l, int r, int val) {\r\n    split(l - 1); split(r);\r\n    while (true) {\r\n      auto k = s.lower_bound(node(0, l, 0));\r\n      if (k == s.end()) break;\r\n      auto w = *k;\r\n      if (w.l > r) break;\r\n      T.update(1, w.l, w.r, abs(w.v - val));\r\n      s.erase(k);\r\n    }\r\n    s.insert(node(l, r, val));\r\n  }\r\n} f;\r\nsigned main(void) {\r\n  ios :: sync_with_stdio(false);\r\n  cin.tie(nullptr); cout.tie(nullptr);\r\n  cin >> n >> m;\r\n  f.init();\r\n  for (int i = 1; i <= m; ++i) {\r\n    int opt; cin >> opt;\r\n    int l, r; cin >> l >> r;\r\n    if (opt == 1) {int x; cin >> x; f.update(l, r, x);}\r\n    else cout << T.query(1, l, r) << '\\n';\r\n  }\r\n}\r\n//start coding at 13:00\r\n//end coding at 13:07"
}