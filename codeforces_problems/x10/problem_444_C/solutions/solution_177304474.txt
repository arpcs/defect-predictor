{
    "id": 177304474,
    "contestId": 444,
    "creationTimeSeconds": 1666355360,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 444,
        "index": "C",
        "name": "DZY Loves Colors",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 444,
        "members": [
            {
                "handle": "Restarted_lghhh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1404651900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 31,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 23244800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nusing i64 = long long;\r\n\r\nconst int N = 100010;\r\n\r\n#define int long long\r\n#define ls u * 2\r\n#define rs u * 2 + 1\r\n\r\nint col[N];\r\nint n, m;\r\n\r\nstruct node\r\n{\r\n    int l, r, len;\r\n    bool same;\r\n    int col;\r\n    int sum;\r\n    int tag;\r\n} tr[N * 4];\r\n\r\nvoid push_up(int u) {\r\n    tr[u].sum = tr[ls].sum + tr[rs].sum;\r\n    tr[u].col = 0;\r\n    tr[u].same = false;\r\n    if (tr[ls].same && tr[rs].same && tr[ls].col == tr[rs].col) {\r\n        tr[u].same = true;\r\n        tr[u].col = tr[rs].col;\r\n    }\r\n    return ;\r\n}\r\n\r\nvoid push_down(int u) {\r\n    if (tr[u].tag) {\r\n        tr[ls].sum += tr[ls].len * tr[u].tag;\r\n        tr[ls].tag += tr[u].tag;\r\n        tr[ls].col = tr[u].col;\r\n        \r\n        tr[rs].sum += tr[rs].len * tr[u].tag;\r\n        tr[rs].tag += tr[u].tag;\r\n        tr[rs].col = tr[u].col;\r\n        tr[u].tag = 0;\r\n    }\r\n}\r\n\r\nvoid build(int u, int l, int r) {\r\n    tr[u].l = l;\r\n    tr[u].r = r;\r\n    tr[u].len = r - l + 1;\r\n    tr[u].tag = 0;\r\n    if (l == r) {\r\n        tr[u] = {l, r, r - l + 1, true, col[l], 0, 0};\r\n        return ;\r\n    }\r\n    \r\n    int mid = l + r >> 1;\r\n    build(ls, l, mid);\r\n    build(rs, mid + 1, r);\r\n    push_up(u);\r\n}\r\n\r\nint query(int u, int l, int r) {\r\n    if (tr[u].l > r || tr[u].r < l) {\r\n        return 0;\r\n    }\r\n    if (tr[u].r <= r && tr[u].l >= l) {\r\n        return tr[u].sum;\r\n    }\r\n    push_down(u);\r\n    int suml = query(ls, l, r);\r\n    int sumr = query(rs, l, r);\r\n    return suml + sumr;\r\n}\r\n\r\nvoid update(int u, int l, int r, int v) {\r\n    if (tr[u].l > r || tr[u].r < l) {\r\n        return ;\r\n    }\r\n    if (tr[u].r <= r && tr[u].l >= l && tr[u].same) {\r\n        int c = tr[u].col;\r\n        tr[u].col = v;\r\n        tr[u].sum += tr[u].len * abs(v - c);\r\n        tr[u].tag += abs(v - c);\r\n        \r\n        return ;\r\n    }\r\n    push_down(u);\r\n    update(ls, l, r, v);\r\n    update(rs, l, r, v);\r\n    push_up(u);\r\n}\r\n\r\n\r\nvoid solve() {\r\n    cin >> n >> m;\r\n    for (int i = 1; i <= n; i ++ ) {\r\n        col[i] = i;\r\n    }\r\n    build(1, 1, n);\r\n    for (int i = 1; i <= m; i ++ ) {\r\n        int op;\r\n        cin >> op;\r\n        if (op == 1) {\r\n            int l, r, x;\r\n            cin >> l >> r >> x;\r\n            update(1, l, r, x);\r\n        } else {\r\n            int l, r;\r\n            cin >> l >> r;\r\n            cout << query(1, l, r) << '\\n';\r\n        }\r\n    }\r\n}\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int t;\r\n    t = 1;\r\n    // cin >> t;\r\n    while ( t -- ) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}