{
    "id": 222563068,
    "contestId": 1662,
    "creationTimeSeconds": 1694247930,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1662,
        "index": "C",
        "name": "European Trip",
        "type": "PROGRAMMING",
        "tags": [
            "dp",
            "graphs",
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 1662,
        "members": [
            {
                "handle": "andreyDagger"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1650798300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 608,
    "memoryConsumedBytes": 921600,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\nconst int MOD = 998244353;\r\n\r\nvector<vector<int>> mul(const vector<vector<int>>& a, const vector<vector<int>>& b) {\r\n    int n = a.size();\r\n    vector<vector<int>> c(n, vector<int>(n, 0));\r\n    for (int i = 0; i < n; ++i) {\r\n        for (int j = 0; j < n; ++j) {\r\n            for (int k = 0; k < n; ++k) {\r\n                c[i][j] = (c[i][j] + a[i][k] * 1ll * b[k][j] % MOD) % MOD;\r\n            }\r\n        }\r\n    }\r\n    return c;\r\n}\r\n\r\nvector<vector<int>> add(const vector<vector<int>>& a, const vector<vector<int>>& b) {\r\n    int n = a.size();\r\n    vector<vector<int>> c(n, vector<int>(n, 0));\r\n    for (int i = 0; i < n; ++i) {\r\n        for (int j = 0; j < n; ++j) {\r\n            c[i][j] = (a[i][j] + b[i][j]) % MOD;\r\n        }\r\n    }\r\n    return c;\r\n}\r\n\r\nvector<vector<int>> sub(const vector<vector<int>>& a, const vector<vector<int>>& b) {\r\n    int n = a.size();\r\n    vector<vector<int>> c(n, vector<int>(n, 0));\r\n    for (int i = 0; i < n; ++i) {\r\n        for (int j = 0; j < n; ++j) {\r\n            c[i][j] = (a[i][j] - b[i][j] + MOD) % MOD;\r\n        }\r\n    }\r\n    return c;\r\n}\r\n\r\nvector<vector<int>> binpow(vector<vector<int>> a, int p) {\r\n    vector<vector<int>> res(a.size(), vector<int>(a.size()));\r\n    for (int i = 0; i < a.size(); ++i)\r\n        res[i][i] = 1;\r\n    while (p > 0) {\r\n        if (p & 1) {\r\n            res = mul(res, a);\r\n        }\r\n        a = mul(a, a);\r\n        p >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\nvoid solve() {\r\n    int n, m, k; cin >> n >> m >> k;\r\n    vector<vector<int>> P(2 * n, vector<int>(2 * n));\r\n    vector<vector<int>> dp2(n, vector<int>(n)), dp1(n, vector<int>(n, 0));\r\n    vector<vector<int>> D(n, vector<int>(n, 0));\r\n    for (int i = 0; i < n; ++i) {\r\n        P[i + n][i] = 1;\r\n        P[i][i + n] = 1;\r\n    }\r\n\r\n    auto add_edge = [n, &P, &dp1, &D](int x, int y) -> void {\r\n        dp1[x][y] = dp1[y][x] = 1;\r\n        P[x][y] = P[y][x] = 1;\r\n        D[x][x]++;\r\n        D[y][y]++;\r\n        P[x][x + n]--;\r\n        if (P[x][x + n] < 0)\r\n            P[x][x + n] += MOD;\r\n        P[y][y + n]--;\r\n        if (P[y][y + n] < 0)\r\n            P[y][y + n] += MOD;\r\n    };\r\n\r\n    for (int i = 0; i < m; ++i) {\r\n        int x, y; cin >> x >> y;\r\n        --x, --y;\r\n        add_edge(x, y);\r\n    }\r\n    dp2 = sub(mul(dp1, dp1), D);\r\n    P = binpow(P, k - 2);\r\n    vector<vector<int>> M1(n, vector<int>(n, 0)), M2(n, vector<int>(n, 0));\r\n    for (int i = 0; i < n; ++i) {\r\n        for (int j = 0; j < n; ++j) {\r\n            M1[i][j] = P[i][j];\r\n            M2[i][j] = P[i][j + n];\r\n        }\r\n    }\r\n    vector<vector<int>> res = add(mul(M1, dp2), mul(M2, dp1));\r\n    int ans = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        ans = (ans + res[i][i]) % MOD;\r\n    }\r\n    cout << ans << \"\\n\";\r\n}\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.precision(30);\r\n\r\n    solve();\r\n}"
}