{
    "id": 219687802,
    "contestId": 814,
    "creationTimeSeconds": 1692541797,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 814,
        "index": "E",
        "name": "An unavoidable detour for home",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 814,
        "members": [
            {
                "handle": "cpchenpi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1496837700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 1029,
    "memoryConsumedBytes": 54272000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nusing i64 = int64_t;\r\n\r\nnamespace modint {\r\n\r\nusing i64 = int64_t;\r\n\r\ntemplate <int P> struct mint {\r\n  private:\r\n    constexpr mint power(mint x, int p) const {\r\n        mint res = 1;\r\n        while (p > 0) {\r\n            if (p & 1) { res *= x; }\r\n            x *= x;\r\n            p >>= 1;\r\n        }\r\n        return res;\r\n    }\r\n\r\n  public:\r\n    int x;\r\n    constexpr mint() : x{} {}\r\n    constexpr mint(i64 x) : x{norm(x % getMod())} {}\r\n    static int Mod;\r\n    constexpr static int getMod() {\r\n        if (P > 0) {\r\n            return P;\r\n        } else {\r\n            return Mod;\r\n        }\r\n    }\r\n    constexpr static void setMod(int Mod_) { Mod = Mod_; }\r\n    constexpr int norm(int x) const {\r\n        if (x < 0) { x += getMod(); }\r\n        if (x >= getMod()) { x -= getMod(); }\r\n        return x;\r\n    }\r\n    constexpr int val() const { return x; }\r\n    explicit constexpr operator int() const { return x; }\r\n    constexpr mint operator-() const {\r\n        mint res;\r\n        res.x = norm(getMod() - x);\r\n        return res;\r\n    }\r\n    constexpr mint inv() const {\r\n        assert(x != 0);\r\n        return power(*this, getMod() - 2);\r\n    }\r\n    constexpr mint pow(int r) const { return power(*this, r); }\r\n    constexpr mint &operator*=(mint rhs) & {\r\n        x = 1LL * x * rhs.x % getMod();\r\n        return *this;\r\n    }\r\n    constexpr mint &operator+=(mint rhs) & {\r\n        x = norm(x + rhs.x);\r\n        return *this;\r\n    }\r\n    constexpr mint &operator-=(mint rhs) & {\r\n        x = norm(x - rhs.x);\r\n        return *this;\r\n    }\r\n    constexpr mint &operator/=(mint rhs) & { return *this *= rhs.inv(); }\r\n    friend constexpr mint operator*(mint lhs, mint rhs) {\r\n        mint res = lhs;\r\n        res *= rhs;\r\n        return res;\r\n    }\r\n    friend constexpr mint operator+(mint lhs, mint rhs) {\r\n        mint res = lhs;\r\n        res += rhs;\r\n        return res;\r\n    }\r\n    friend constexpr mint operator-(mint lhs, mint rhs) {\r\n        mint res = lhs;\r\n        res -= rhs;\r\n        return res;\r\n    }\r\n    friend constexpr mint operator/(mint lhs, mint rhs) {\r\n        mint res = lhs;\r\n        res /= rhs;\r\n        return res;\r\n    }\r\n    friend constexpr std::istream &operator>>(std::istream &is, mint &a) {\r\n        i64 v;\r\n        is >> v;\r\n        a = mint(v);\r\n        return is;\r\n    }\r\n    friend constexpr std::ostream &operator<<(std::ostream &os, const mint &a) {\r\n        return os << a.val();\r\n    }\r\n    friend constexpr bool operator==(mint lhs, mint rhs) {\r\n        return lhs.val() == rhs.val();\r\n    }\r\n    friend constexpr bool operator!=(mint lhs, mint rhs) {\r\n        return lhs.val() != rhs.val();\r\n    }\r\n};\r\n\r\ntemplate <int P> int mint<P>::Mod{0};\r\n\r\ntemplate <typename Z> struct comb {\r\n    std::vector<Z> fact, inv_fact;\r\n    comb(int n) {\r\n        fact.resize(n + 1, Z(1));\r\n        inv_fact.resize(n + 1, Z(1));\r\n        for (int i = 1; i <= n; i++) {\r\n            fact[i] = fact[i - 1] * i;\r\n        }\r\n        inv_fact[n] = Z{1} / fact[n];\r\n        for (int i = n - 1; i >= 0; i--) {\r\n            inv_fact[i] = inv_fact[i + 1] * (i + 1);\r\n        }\r\n    }\r\n    Z get(int n, int m) {\r\n        if (n < m || m < 0) return 0;\r\n        return fact[n] * inv_fact[m] * inv_fact[n - m];\r\n    }\r\n};\r\n} // namespace modint\r\n\r\nusing Z = modint::mint<1'0000'0000'7>;\r\n\r\n#define fori(i, a, b) for (int i = a; i < b; i++)\r\n\r\nconstexpr int MAXN = 50;\r\n\r\nZ dp[2][MAXN + 1][MAXN + 1][MAXN + 1][MAXN + 1];\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    vector<int> d(n);\r\n    for (int i = 0; i < n; i++)\r\n        cin >> d[i];\r\n    dp[0][d[0] == 2][d[0] == 3][d[1] == 2][d[1] == 3] = 1;\r\n    fori(i, 2, n) {\r\n        int now = i & 1, nxt = now ^ 1;\r\n        memset(dp[nxt], 0, sizeof dp[nxt]);\r\n        fori(p1, 0, n + 1) fori(p2, 0, n + 1 - p1) fori(c1, 0, n + 1 - p1 - p2)\r\n            fori(c2, 0, n + 1 - p1 - p2 - c1) {\r\n            Z val = dp[now][p1][p2][c1][c2];\r\n            if (val.val()) {\r\n                // printf(\"%d %d %d %d %d %d\\n\", i, p1, p2, c1, c2, val.val());\r\n            }\r\n            if (p1 == 0 && p2 == 0) {\r\n                dp[now][c1][c2][0][0] += val;\r\n                continue;\r\n            }\r\n            for (int ls = 0; ls < 2; ls++) {\r\n                int ways = ls ? p2 : p1;\r\n                if (ls == 0) {\r\n                    if (!p1) continue;\r\n                    p1--;\r\n                } else {\r\n                    if (!p2) continue;\r\n                    p1++, p2--;\r\n                }\r\n                Z nval = val * ways;\r\n                auto &dpn = dp[nxt][p1][p2];\r\n                if (d[i] == 2) {\r\n                    dpn[c1 + 1][c2] += nval;\r\n                    if (c1) dpn[c1 - 1][c2] += nval * c1;\r\n                    if (c2) dpn[c1 + 1][c2 - 1] += nval * c2;\r\n                } else {\r\n                    dpn[c1][c2 + 1] += nval;\r\n                    if (c1) dpn[c1][c2] += nval * c1;\r\n                    if (c2) dpn[c1 + 2][c2 - 1] += nval * c2;\r\n                    if (c1 > 1) dpn[c1 - 2][c2] += nval * (c1 * (c1 - 1) / 2);\r\n                    if (c2 > 1)\r\n                        dpn[c1 + 2][c2 - 2] += nval * (c2 * (c2 - 1) / 2);\r\n                    if (c1 && c2) dpn[c1][c2 - 1] += nval * c1 * c2;\r\n                }\r\n                if (!ls) p1++;\r\n                else p1--, p2++;\r\n            }\r\n        }\r\n    }\r\n    cout << dp[n & 1][0][0][0][0] << \"\\n\";\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int t = 1;\r\n    // cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n}"
}