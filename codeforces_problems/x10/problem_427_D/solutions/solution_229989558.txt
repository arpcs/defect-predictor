{
    "id": 229989558,
    "contestId": 427,
    "creationTimeSeconds": 1698399965,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 427,
        "index": "D",
        "name": "Match & Catch",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dp",
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 427,
        "members": [
            {
                "handle": "hjxhjx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1399044600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 131866283\n#include <bits/stdc++.h>\n#include <bits/extc++.h>\n#define ll long long\nusing namespace std;\n\ntemplate<typename ...Args>\nsigned debug(const char*str,Args ...args){return fprintf(stderr,str,args...);}\n\ninline static int read(){\n    int sum=0; bool neg=false; char ch=getchar();\n    while(!isdigit(ch)) neg|=(ch=='-'),ch=getchar();\n    while(isdigit(ch)) sum=(sum<<3)+(sum<<1)+(ch^48),ch=getchar();\n    return neg?-sum:sum;\n}\n\nconstexpr int mod=998244353,bse=233;\n\nint n;\nint base[5005];\nchar str1[5005],str2[5005];\nint Hash1[5005],Hash2[5005];\nint query(int l,int r,int*Hash){return (Hash[r]-(ll)base[r-l+1]*Hash[l-1]%mod+mod)%mod;}\n\nconstexpr int Mod=87679;\nstruct HashTable{\n    struct NODE{int key,data,nxt;} node[10005];\n    int head[Mod],siz; vector<int> vec;\n    void clear(){for(int i:vec) head[i]=0; vec.clear(),siz=0;}\n    int&operator [](const int&x){\n        int Hash=x%Mod,p; vec.push_back(Hash);\n        for(p=head[Hash];p;p=node[p].nxt) if(node[p].key==x) break;\n        if(!p) node[p=++siz]={x,0,head[Hash]},head[Hash]=siz;\n        return node[p].data;\n    }\n}Map1,Map2;\nsigned main(){\n    // freopen(\".in\",\"r\",stdin);\n    // freopen(\".out\",\"w\",stdout);\n    scanf(\"%s%s\",str1+1,str2+1),base[0]=1;\n    int l1=strlen(str1+1),l2=strlen(str2+1); n=min(l1,l2);\n    for(int i=1;i<=n;i++) base[i]=(ll)base[i-1]*bse%mod;\n    for(int i=1;i<=l1;i++) Hash1[i]=((ll)Hash1[i-1]*bse+str1[i])%mod;\n    for(int i=1;i<=l2;i++) Hash2[i]=((ll)Hash2[i-1]*bse+str2[i])%mod;\n    for(int len=1;len<=n;len++){\n        Map1.clear(); for(int l=1,r=len;r<=l1;l++,r++) Map1[query(l,r,Hash1)]++;\n        Map2.clear(); for(int l=1,r=len;r<=l2;l++,r++) Map2[query(l,r,Hash2)]++;\n        for(int j=1;j<=Map1.siz;j++) if(Map1.node[j].data==1 && Map2[Map1.node[j].key]==1) return printf(\"%d\\n\",len),0;\n    } return puts(\"-1\"),0;\n}\n"
}