{
    "id": 228447057,
    "contestId": 427,
    "creationTimeSeconds": 1697473990,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 427,
        "index": "D",
        "name": "Match & Catch",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "dp",
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 427,
        "members": [
            {
                "handle": "Jebsus"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1399044600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 1843200,
    "source": "#include <iostream>\r\n#include <utility>\r\n#include <vector>\r\n#include <fstream>\r\n#include <map>\r\n#include <queue>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <limits>\r\n#include <cmath>\r\n#include <numeric>\r\n#include <unordered_set>\r\n#include <algorithm>\r\n#include <iomanip>\r\n#include <list>\r\n#include <numeric>\r\n#include <bitset>\r\n\r\nusing namespace std;\r\n\r\n#define int long long\r\n//#define int unsigned long long\r\n\r\nnamespace std {\r\n    template<class T>\r\n    struct hash<pair<T, T>> {\r\n        auto operator()(const pair<T, T> &item) const -> size_t {\r\n            uintmax_t hash = std::hash<T>{}(item.first);\r\n            hash <<= sizeof(uintmax_t) * 4;\r\n            hash ^= std::hash<T>{}(item.second);\r\n\r\n            return std::hash<uintmax_t>{}(hash);\r\n        }\r\n    };\r\n}\r\n\r\nint binpow(int a, int pw) {\r\n    int res = 1;\r\n    while (pw) {\r\n        if (pw & 1) res = res * a;\r\n        a = a * a;\r\n        pw >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\nstd::ostream &operator<<(std::ostream &stream, pair<int, int> items) {\r\n    cout << items.first << \" \" << items.second;\r\n\r\n    return stream;\r\n}\r\n\r\ntemplate<class Iter>\r\nstd::ostream &operator<<(std::ostream &stream, pair<Iter, Iter> iters) {\r\n    for (auto i = iters.first; i != iters.second; ++i) {\r\n        stream << (*i) << \" \";\r\n    }\r\n\r\n    return stream;\r\n}\r\n\r\nconst int INF = INT32_MAX;\r\n\r\nclass SuffTree {\r\npublic:\r\n\r\n    SuffTree(int size = 100) : s{}, currSate{}, tree(1) {\r\n        tree.reserve(size);\r\n        tree[0].link = 0;\r\n    }\r\n\r\n    void addString(string &str) {\r\n        for (char c: str) {\r\n            add(c);\r\n        }\r\n    }\r\n\r\n    void dfs() {\r\n        vector<bool> used(tree.size(), false);\r\n        dfsImpl();\r\n    }\r\n\r\n    bool check(string &path) {\r\n        State start = State(0, tree[0].len());\r\n        for (int i = 0; i < path.size(); ++i) {\r\n            start = go(start, i, i + 1, path);\r\n        }\r\n\r\n        if (start.pos == tree[start.v].len() && tree[start.v].term > 1) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    int getMin(string &str, SuffTree &other) {\r\n        string path;\r\n        int res = INF;\r\n        int cnt = 0;\r\n\r\n        State start = State(0, tree[0].len());\r\n        for (int i = 0; i < str.size(); ++i) {\r\n            if (start.v == -1) {\r\n                break;\r\n            }\r\n\r\n            ++cnt;\r\n            path.push_back(str[i]);\r\n\r\n            int newV = tree[start.v].get(str[i]);\r\n            if ((start.pos != tree[start.v].len() || newV != -1 && tree[tree[start.v].get(str[i])].term < 2) && other.check(path)) {\r\n                res = min(res, cnt);\r\n                break;\r\n            }\r\n\r\n            start = go(start, i, i + 1, str);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\nprivate:\r\n    const int ALHP_SIZE = 26;\r\n\r\n    struct Node {\r\n        int l, r;\r\n        int link;\r\n        int parent;\r\n        int term;\r\n\r\n        map<char, int> next;\r\n\r\n        Node(int l = 0, int r = 0, int link = -1, int parent = 0) : l(l), r(r), link(link), parent(parent),\r\n                                                                    term(0), next{} {}\r\n\r\n        int &get(char c) {\r\n            if (next.find(c) != next.end()) {\r\n                return next[c];\r\n            }\r\n\r\n            return next[c] = -1;\r\n        }\r\n\r\n        int len() const {\r\n            return r - l;\r\n        }\r\n    };\r\n\r\n    struct State {\r\n        int v;\r\n        int pos;\r\n\r\n        // \u0437\u0430\u043c\u0435\u0442\u0438\u043c:\r\n        // 1) pos == 0 \u0441\u043e\u043e\u0442\u0432\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044e \u0432\u0435\u0440\u0448\u0438\u043d\u044b 'v' (tree[v].par)\r\n        // 2) pos == tree[v].len() \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0432\u0435\u0440\u0448\u0438\u043d\u0435 'v'\r\n        // 3) \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 0 < pos < tree[v].len() \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u043e\u043a\u0430\u0446\u0438\u0438 \u043d\u0430 \u0440\u0435\u0431\u0440\u0435\r\n\r\n        State(int v = 0, int pos = 0) : v(v), pos(pos) {}\r\n    };\r\n\r\n    vector<Node> tree;\r\n    State currSate;\r\n    string s;\r\n\r\n    State go(State st, int l, int r, string &str) {\r\n        while (l < r) {\r\n            if (st.pos == tree[st.v].len()) {\r\n                st = State(tree[st.v].get(str[l]), 0);\r\n\r\n                if (st.v == -1) {\r\n                    return st;\r\n                }\r\n            } else {\r\n                if (s[tree[st.v].l + st.pos] != str[l]) {\r\n                    return {-1, -1};\r\n                }\r\n\r\n                int d = min(tree[st.v].len() - st.pos, r - l);\r\n                l += d;\r\n                st.pos += d;\r\n            }\r\n        }\r\n\r\n        return st;\r\n    }\r\n\r\n    int split(State st) {\r\n        if (st.pos == 0) {\r\n            return tree[st.v].parent;\r\n        }\r\n\r\n        if (st.pos == tree[st.v].len()) {\r\n            return st.v;\r\n        }\r\n\r\n        tree.emplace_back(tree[st.v].l, tree[st.v].l + st.pos, -1, tree[st.v].parent);\r\n        tree[tree[st.v].parent].get(s[tree[st.v].l]) = tree.size() - 1;\r\n        tree.back().get(s[tree[st.v].l + st.pos]) = st.v;\r\n        tree[st.v].l += st.pos;\r\n        tree[st.v].parent = tree.size() - 1;\r\n\r\n        return tree.size() - 1;\r\n    }\r\n\r\n    int getLink(int v) {\r\n        int &ans = tree[v].link;\r\n\r\n        if (ans != -1) {\r\n            return ans;\r\n        }\r\n\r\n        if (v == 0) {\r\n            return ans = 0;\r\n        }\r\n\r\n        int p = tree[v].parent;\r\n        int parentLink = getLink(p);\r\n        auto loc = State(parentLink, tree[parentLink].len());\r\n        int le = tree[v].l;\r\n\r\n        if (p == 0) {\r\n            ++le;\r\n        }\r\n\r\n        int ri = tree[v].r;\r\n\r\n        auto next = go(loc, le, ri, s);\r\n\r\n        return ans = split(next);\r\n    }\r\n\r\n    void add(char c) {\r\n        s.push_back(c);\r\n\r\n        while (true) {\r\n            auto newState = go(currSate, s.size() - 1, s.size(), s);\r\n\r\n            if (newState.v != -1) {\r\n                currSate = newState;\r\n                break;\r\n            }\r\n\r\n            int mid = split(currSate);\r\n            tree.emplace_back(s.size() - 1, INF, -1, mid);\r\n            tree[mid].get(c) = tree.size() - 1;\r\n\r\n            if (mid == 0) {\r\n                break;\r\n            }\r\n\r\n            currSate.v = getLink(mid);\r\n            currSate.pos = tree[currSate.v].len();\r\n        }\r\n    }\r\n\r\n    void dfsImpl(int v = 0) {\r\n        if (tree[v].r == INF) {\r\n            tree[v].term += 1;\r\n        }\r\n\r\n        for (auto &[c, u]: tree[v].next) {\r\n            if (u != -1) {\r\n                dfsImpl(u);\r\n                tree[v].term += tree[u].term;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nvoid solve() {\r\n    string s1, s2;\r\n    cin >> s1 >> s2;\r\n    s1 += '#';\r\n    s2 += '#';\r\n\r\n    SuffTree tree1;\r\n    tree1.addString(s1);\r\n    tree1.dfs();\r\n\r\n    SuffTree tree2;\r\n    tree2.addString(s2);\r\n    tree2.dfs();\r\n\r\n    s1.pop_back();\r\n    s2.pop_back();\r\n\r\n    int res = INF;\r\n    for (int i = 0; i < s2.size(); ++i) {\r\n        string str = s2.substr(i);\r\n        int m = tree1.getMin(str, tree2);\r\n        res = min(res, m);\r\n    }\r\n\r\n    if (res == INF) {\r\n        cout << -1 << \"\\n\";\r\n    } else {\r\n        cout << res << \"\\n\";\r\n    }\r\n}\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n\r\n    int t = 1;\r\n//    cin >> t;\r\n    while (t--) {\r\n//        cout << solve() << \"\\n\";\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}"
}