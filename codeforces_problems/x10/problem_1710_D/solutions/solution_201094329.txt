{
    "id": 201094329,
    "contestId": 1710,
    "creationTimeSeconds": 1680840339,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1710,
        "index": "D",
        "name": "Recover the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 3400,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1710,
        "members": [
            {
                "handle": "qwqFomalhaut"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658673300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 20172800,
    "source": "// Stop the noise and stop the clocks\r\n// Problem: D. Recover the Tree\r\n// Contest: Codeforces - Codeforces Round 810 (Div. 1)\r\n// URL: https://codeforces.com/problemset/problem/1710/D\r\n// Time: 2023-04-07 11:52:22\r\n// Memory Limit: 256 MB\r\n// Author: Fomalhaut\r\n// Time Limit: 3000 ms\r\n// \r\n// Powered by CP Editor (https://cpeditor.org)\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define Maxn 2007\r\nint T, n, vis[Maxn][Maxn], f[Maxn]; char s[Maxn][Maxn];\r\nint find(int x) {return f[x] == x ? x : f[x] = find(f[x]);}\r\nbool check(int i, int j) {return find(i) == find(j);}\r\nvoid merge(int i, int j) {i = find(i), j = find(j); if(check(i, j)) return; f[i] = j;}\r\nvoid print(int i, int j) {cout << i << \" \" << j << \"\\n\";}\r\nvoid solve() {\r\n\tcin >> n; for(int i = 1; i <= n; i ++) f[i] = i;\r\n\tfor(int i = 1; i <= n; i ++) {\r\n\t\tcin >> (s[i] + 1); \r\n\t\tfor(int j = 1; j <= n - i + 1; j ++) vis[i][j] = s[i][j] - '0';\r\n\t}\r\n\tfor(int i = 1; i <= n; i ++) {\r\n\t\tfor(int L = 1, R; L <= n - i + 1; L ++) {\r\n\t\t\tR = i + L - 1; if(! vis[L][i] or check(L, R)) continue;\r\n\t\t\tmerge(L, R); print(L, R); \r\n\t\t\tfor(int j = L + 1, isf = 0; j < R; j ++) {\r\n\t\t\t\tif(check(j, L)) continue;\r\n\t\t\t\tif(! isf) merge(j, L), print(j, L), isf = 1;\r\n\t\t\t\telse merge(j, R), print(j, R);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nint main() {cin >> T; while(T --) solve();}"
}