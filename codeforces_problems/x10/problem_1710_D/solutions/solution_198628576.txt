{
    "id": 198628576,
    "contestId": 1710,
    "creationTimeSeconds": 1679492173,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1710,
        "index": "D",
        "name": "Recover the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 3400,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1710,
        "members": [
            {
                "handle": "Kumikosan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658673300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 4096000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define F(i,a,b) for(int i=a;i<=b;i++)\r\n#define Fd(i,a,b) for(int i=a;i>=b;i--)\r\n#define N 2010\r\n\r\nint n,f[N];\r\nchar s[N][N];\r\nint T;\r\n\r\nint get(int x){return f[x]==x?x:(f[x]=get(f[x]));}\r\n\r\nint main(){\r\n//\tfreopen(\"cf1710d.in\",\"r\",stdin);\r\n//\tfreopen(\"cf1710d.out\",\"w\",stdout);\r\n\tscanf(\"%d\",&T);\r\n\twhile(T--){\r\n\t\tscanf(\"%d\",&n);\r\n\t\tmemset(f,0,sizeof(f));\r\n\t\tF(i,1,n)scanf(\"%s\",s[i]+1),f[i]=i;\r\n\t\tF(len,2,n) F(l,1,n-len+1)if(s[l][len]=='1'){\r\n\t\t\tint r=l+len-1;\r\n\t\t\tif(get(l)==get(r))continue;\r\n\t\t\tif(get(get(l)+1)==get(r)){\r\n\t\t\t\tprintf(\"%d %d\\n\",l,r);\r\n\t\t\t\tf[get(l)]=get(r);\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tint t=get(get(l)+1)+1;\r\n\t\t\tint nxt;\r\n\t\t\tfor(;get(t)!=get(r);t=nxt){\r\n\t\t\t\tnxt=get(t)+1;\r\n\t\t\t\tprintf(\"%d %d\\n\",get(t),l);\r\n\t\t\t\tf[get(t)]=get(l);\r\n\t\t\t}\r\n\t\t\tprintf(\"%d %d\\n\",get(get(l)+1),r);\r\n\t\t\tf[get(get(l)+1)]=get(r);\r\n\t\t\tprintf(\"%d %d\\n\",l,r);\r\n\t\t\tf[get(l)]=get(r);\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n\r\n\r\n"
}