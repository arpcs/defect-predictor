{
    "id": 224713198,
    "contestId": 1710,
    "creationTimeSeconds": 1695455736,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1710,
        "index": "D",
        "name": "Recover the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 3400,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 1710,
        "members": [
            {
                "handle": "SpadeA261"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1658673300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 3993600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=2005;\r\nint T,n,fa[N];\r\nchar s[N][N];\r\nint get(int x)\r\n{\r\n    if(fa[x]==x) return x;\r\n    return fa[x]=get(fa[x]);\r\n}\r\nvoid solve()\r\n{\r\n    scanf(\"%d\",&n);\r\n    for(int i=1;i<=n;i++) scanf(\"%s\",s[i]+i),fa[i]=i;\r\n    for(int r=1;r<=n;r++)\r\n    {\r\n        for(int l=r-1;l>=1;l--)\r\n        {\r\n            // cout<<l<<\" \"<<r<<endl;\r\n            // for(int i=1;i<=n;i++) cout<<get(i)<<\" \";cout<<endl;\r\n            if(s[l][r]=='0'||get(r)<=l) continue;\r\n            printf(\"%d %d\\n\",l,r);\r\n            if(get(fa[r]-1)<=l)\r\n            {\r\n                fa[fa[r]]=fa[l];\r\n                continue;\r\n            }\r\n            printf(\"%d %d\\n\",l,fa[r]-1);\r\n            for(int i=get(fa[fa[r]-1]-1);i>l;i=get(i-1)) printf(\"%d %d\\n\",i,r);\r\n            for(int i=fa[fa[r]-1];i>=l;i=fa[i-1]) fa[i]=fa[l];\r\n            fa[fa[r]]=fa[l];\r\n        }\r\n        // if(r>1&&fa[r]==r) printf(\"%d %d\\n\",r-1,r);\r\n    }\r\n}\r\nsigned main()\r\n{\r\n    scanf(\"%d\",&T);\r\n    while(T--) solve();\r\n    return 0;\r\n}"
}