{
    "contestId": 1710,
    "index": "D",
    "name": "Recover the Tree",
    "type": "PROGRAMMING",
    "points": 2000.0,
    "rating": 3400,
    "tags": [
        "constructive algorithms",
        "trees"
    ],
    "desc": {
        "title": "D. Recover the Tree",
        "statement": "<p>Rhodoks has a tree with $$$n$$$ vertices, but he doesn't remember its structure. The vertices are indexed from $$$1$$$ to $$$n$$$.</p><p>A segment $$$[l,r]$$$ ($$$1 \\leq l \\leq r \\leq n$$$) is good if the vertices with indices $$$l$$$, $$$l + 1$$$, ..., $$$r$$$ form a connected component in Rhodoks' tree. Otherwise, it is bad.</p><p>For example, if the tree is the one in the picture, then only the segment $$$[3,4]$$$ is bad while all the other segments are good.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/cccff05780e10a4649c77fc58a3e567e17649724.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>For each of the $$$\\frac{n(n+1)}{2}$$$ segments, Rhodoks remembers whether it is good or bad. Can you help him recover the tree? If there are multiple solutions, print any.</p><p>It is guaranteed that the there is at least one tree satisfying Rhodoks' description. </p>",
        "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\leq t \\leq 1000$$$). The description of the test cases follows.</p><p>The first line of each test case contains an integer $$$n$$$ ($$$1 \\leq n \\leq 2000$$$) \u2014 the number of vertices in the tree.</p><p>Then $$$n$$$ lines follow. The $$$i$$$-th of these lines contains a string $$$good_i$$$ of length $$$n+1-i$$$ consisting of <span class=\"tex-font-style-tt\">0</span> and <span class=\"tex-font-style-tt\">1</span>. If the segment $$$[i,i+j-1]$$$ is good then the $$$j$$$-th character of $$$good_i$$$ is <span class=\"tex-font-style-tt\">1</span>, otherwise $$$j$$$-th character of $$$good_i$$$ is <span class=\"tex-font-style-tt\">0</span>.</p><p>It is guaranteed that the there is at least one tree consistent with the given data. </p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2000$$$.</p>",
        "outputSpecification": "<p>For each test case, print $$$n-1$$$ lines describing the tree you recover. </p><p>The $$$i$$$-th line should contain two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\leq u_i,v_i \\leq n$$$), denoting an edge between vertices $$$u_i$$$ and $$$v_i$$$.</p><p>If there are multiple solutions, print any.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1111</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">111</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">6</div><div class=\"test-example-line test-example-line-even test-example-line-2\">111111</div><div class=\"test-example-line test-example-line-even test-example-line-2\">11111</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1111</div><div class=\"test-example-line test-example-line-even test-example-line-2\">111</div><div class=\"test-example-line test-example-line-even test-example-line-2\">11</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">12</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">100100000001</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">11100000001</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1000000000</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">100000000</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">10010001</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1110000</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">100000</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">10000</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1001</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">111</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1</div>",
                "output": "\n1 2\n2 3\n2 4\n1 2\n2 3\n3 4\n4 5\n5 6\n2 3\n6 7\n10 11\n2 4\n6 8\n10 12\n1 4\n5 8\n9 12\n5 12\n2 12\n"
            }
        ],
        "note": "<p>The first test case is explained in the statement.</p><p>In the second test case, one possible tree is as follows:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/0444fc51503b914d4ec490a7d15cc764f26cf97a.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>In the third test case, one possible tree is as follows:</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/9e03d4ee337e52289aa995536d697cc11da2d513.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center>"
    }
}