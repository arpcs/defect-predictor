{
    "id": 231113992,
    "contestId": 1777,
    "creationTimeSeconds": 1699013230,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1777,
        "index": "B",
        "name": "Emordnilap",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "combinatorics",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1777,
        "members": [
            {
                "handle": "fugah271202"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1674311700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 19,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 819200,
    "source": "#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\n#define int long long int\r\n\r\n//checks whether a string made up of two elements is alternate or not.\r\n/*bool isAlternateString(const string& s) {\r\n    for (int i = 1; i < s.length(); ++i) {\r\n        if (s[i] == s[i - 1]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}*/\r\n\r\n/*bool isPossiblePalindrome(string s, int k) {\r\n    unordered_map<char, int> charCount;\r\n\r\n    // Count the frequency of each character in the string\r\n    for (char c : s) {\r\n        charCount[c]++;\r\n    }\r\n\r\n    int oddCount = 0;\r\n    // Count the number of characters with odd frequency\r\n    for (auto it : charCount) {\r\n        if (it.second % 2 != 0) {\r\n            oddCount++;\r\n        }\r\n    }\r\n\r\n    // Calculate the number of characters that need to be removed to form a palindrome\r\n    int removalsNeeded = max(0, oddCount - 1);\r\n\r\n    // Check if it is possible to remove k characters to form a palindrome\r\n    return k >= removalsNeeded && k <= s.length();\r\n}*/\r\n\r\n//finding max of four number\r\n/*int max(int a,int b,int c,int d){\r\n       int array[4];\r\n       int m=0;\r\n       array[0]=a;\r\n       array[1]=b;\r\n       array[2]=c;\r\n       array[3]=d;\r\n       for(int i=0;i<4;i++){\r\n           if(array[i]>=m){\r\n            m=array[i];\r\n           }\r\n       }\r\n       return m;\r\n}*/\r\n\r\n//use for quicksort\r\n/*int compare(const void *a, const void *b) {\r\n    return (*(int *)a - *(int *)b);\r\n}*/\r\n\r\n//qsort(array,3,sizeof(int),compare)\r\n\r\n/*int min(int a,int b){\r\n    if(a<=b){\r\n        return a;\r\n    }\r\n    else{\r\n        return b;\r\n    }\r\n}*/\r\n\r\n//use to short vector pair according to second column\r\n/*bool sortbysec(const pair<int,int> &a,\r\n              const pair<int,int> &b)\r\n{\r\n    return (a.second < b.second);\r\n}*/\r\n\r\n//sort(v.begin(),v.end(),sortbysec)\r\n\r\n/*int factorial(int n){\r\n    return n*factorial(n-1);\r\n}*/\r\n\r\n\r\n//bubble short algorithm\r\n/*void sorted(int arr[], int n) {\r\n    int temp;\r\n    int swapped;\r\n\r\n    for (int i = 0; i < n - 1; i++) {\r\n        swapped = 0; \r\n\r\n        for (int j = 0; j < n - 1 - i; j++) {\r\n            if (arr[j] > arr[j + 1]) {\r\n                \r\n                temp = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = temp;\r\n                swapped = 1; \r\n            }\r\n        }\r\n\r\n        \r\n        if (swapped == 0) {\r\n            break;\r\n        }\r\n    }\r\n}*/\r\n\r\n//checks whether the array is shorted or not\r\n/*int is_sorted(int arr[],int n){\r\n    for(int i=0;i<n;i++){\r\n        if(arr[i]>arr[i+1]){\r\n            return 1;\r\n        }\r\n    }\r\n    return 0;\r\n}*/\r\n\r\n\r\n signed main()\r\n{\r\n    const int N = 1e5 + 5;\r\n    const int mod = 1e9 + 7;\r\n    vector<int> fact(N);\r\n    fact[0] = 1;\r\n    for(int i = 1; i < N; i++)\r\n    {\r\n        fact[i] = fact[i - 1] * i;\r\n        fact[i] %= mod;\r\n    }\r\n    int t;\r\n    cin >> t;\r\n    while(t--)\r\n    {\r\n        int n;\r\n        cin >> n;\r\n        int ans = n * (n - 1);\r\n        ans %= mod;\r\n        ans = (ans * fact[n]) % mod;\r\n        cout << ans << endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}