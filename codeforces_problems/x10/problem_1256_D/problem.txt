{
    "contestId": 1256,
    "index": "D",
    "name": "Binary String Minimizing",
    "type": "PROGRAMMING",
    "rating": 1500,
    "tags": [
        "greedy"
    ],
    "desc": {
        "title": "D. Binary String Minimizing",
        "statement": "<p>You are given a binary string of length $$$n$$$ (i.\u2009e. a string consisting of $$$n$$$ characters '<span class=\"tex-font-style-tt\">0</span>' and '<span class=\"tex-font-style-tt\">1</span>').</p><p>In one move you can swap two adjacent characters of the string. What is the lexicographically minimum possible string you can obtain from the given one if you can perform <span class=\"tex-font-style-bf\">no more</span> than $$$k$$$ moves? It is possible that you do not perform any moves at all.</p><p>Note that you can swap the same pair of adjacent characters with indices $$$i$$$ and $$$i+1$$$ arbitrary (possibly, zero) number of times. Each such swap is considered a separate move.</p><p>You have to answer $$$q$$$ independent test cases.</p>",
        "inputSpecification": "<p>The first line of the input contains one integer $$$q$$$ ($$$1 \\le q \\le 10^4$$$) \u2014 the number of test cases.</p><p>The first line of the test case contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le n \\le 10^6, 1 \\le k \\le n^2$$$) \u2014 the length of the string and the number of moves you can perform.</p><p>The second line of the test case contains one string consisting of $$$n$$$ characters '<span class=\"tex-font-style-tt\">0</span>' and '<span class=\"tex-font-style-tt\">1</span>'.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$10^6$$$ ($$$\\sum n \\le 10^6$$$).</p>",
        "outputSpecification": "<p>For each test case, print the answer on it: the lexicographically minimum possible string of length $$$n$$$ you can obtain from the given one if you can perform <span class=\"tex-font-style-bf\">no more</span> than $$$k$$$ moves.</p>",
        "samples": [
            {
                "input": "\n3\n8 5\n11011010\n7 9\n1111100\n7 11\n1111100\n",
                "output": "\n01011110\n0101111\n0011111\n"
            }
        ],
        "note": "<p>In the first example, you can change the string as follows: $$$1\\underline{10}11010 \\rightarrow \\underline{10}111010 \\rightarrow 0111\\underline{10}10 \\rightarrow 011\\underline{10}110 \\rightarrow 01\\underline{10}1110 \\rightarrow 01011110$$$. </p><p>In the third example, there are enough operations to make the string sorted.</p>"
    },
    "suggested_categories": [
        "string manipulation",
        "binary manipulation",
        "lexicographical ordering",
        "greedy algorithm",
        "dynamic programming",
        "optimization",
        "algorithms",
        "data structures",
        "sorting",
        "combinatorics",
        "substring operations",
        "integer manipulation",
        "pattern matching",
        "optimal solution",
        "problem solving",
        "complexity analysis",
        "computational complexity",
        "test case handling",
        "string sorting",
        "efficient algorithms"
    ]
}