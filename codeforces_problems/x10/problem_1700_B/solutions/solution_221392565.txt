{
    "id": 221392565,
    "contestId": 1700,
    "creationTimeSeconds": 1693531130,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1700,
        "index": "B",
        "name": "Palindromic Numbers ",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1100,
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1700,
        "members": [
            {
                "handle": "Shupto_006"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1655629500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\n// knight moves\r\nint k_dx[8] = {2, 1, -1, -2, -2, -1, 1, 2};\r\nint k_dy[8] = {1, 2, 2, 1, -1, -2, -2, -1};\r\n\r\n// four direction moves\r\nint dx[4] = {1, 0, 0, -1};\r\nint dy[4] = {0, -1, 1, 0};\r\nstring direcion = \"DLRU\";\r\n\r\n// 8 direction moves\r\nint dx_eight[8] = {-1, 0, 1, 0, 1, 1, -1, -1};\r\nint dy_eight[8] = {0, 1, 0, -1, 1, -1, -1, 1};\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    ll t;\r\n    cin >> t;\r\n\r\n    while (t--)\r\n    {\r\n        ll n;\r\n        cin >> n;\r\n\r\n        string str;\r\n        cin >> str;\r\n\r\n        if (str[0] != '9')\r\n        {\r\n            for (auto it : str)\r\n            {\r\n                ll num = it - '0';\r\n                cout << 9 - num;\r\n            }\r\n            cout << \"\\n\";\r\n        }\r\n        else\r\n        {\r\n            for (auto it : str)\r\n            {\r\n                ll num = it - '0';\r\n                cout << num - 8;\r\n            }\r\n            cout << \"\\n\";\r\n        }\r\n    }\r\n}\r\n\r\nll stringHash(string s)\r\n{\r\n    ll mod = 1000000000 + 7;\r\n    ll hash = 0;\r\n\r\n    ll p = 31; //  it should be a greater prime number than s.size()...right now we are considering 31 prime number because of current string input size is less than 31\r\n\r\n    ll power = 1;\r\n\r\n    for (auto it : s)\r\n    {\r\n        hash = (hash + (it - 'a' + 1) * power) % mod;\r\n        power = (power * p) % mod;\r\n    }\r\n\r\n    return hash;\r\n}\r\n\r\nll findLcmOfTwo(ll a, ll b)\r\n{\r\n    return (a * b) / (__gcd(a, b));\r\n}\r\n\r\nvoid primeFactors(vector<ll> &primeFactArr, int n)\r\n{\r\n    while (n % 2 == 0)\r\n    {\r\n        primeFactArr.push_back(2);\r\n        n = n / 2;\r\n    }\r\n\r\n    for (int i = 3; i <= sqrt(n); i = i + 2)\r\n    {\r\n        while (n % i == 0)\r\n        {\r\n            primeFactArr.push_back(i);\r\n            n = n / i;\r\n        }\r\n    }\r\n\r\n    if (n > 2)\r\n        primeFactArr.push_back(n);\r\n}\r\n\r\n// ll binExp(ll n, ll p, ll M)\r\n// {\r\n//     ll res = 1;\r\n//     while (p > 0)\r\n//     {\r\n//         if (p & 1)\r\n//         {\r\n//             res = (res * n) % M;\r\n//         }\r\n//         n = (n * n) % M;\r\n//         p = p >> 1;\r\n//     }\r\n//     return res % M;\r\n// }\r\n\r\nll checkPrime(ll n)\r\n{\r\n    if (n <= 1)\r\n        return false;\r\n\r\n    if (n <= 3)\r\n        return true;\r\n\r\n    if (n % 2 == 0 || n % 3 == 0)\r\n        return false;\r\n\r\n    for (int i = 5; i * i <= n; i = i + 6)\r\n        if (n % i == 0 || n % (i + 2) == 0)\r\n            return false;\r\n\r\n    return true;\r\n}\r\n\r\nvoid sieveOfEratosthenes(set<ll> &primes)\r\n{\r\n    primes.insert(2);\r\n    vector<ll> arr(1000000);\r\n\r\n    for (ll i = 3; i < 1000000 + 1; i += 2)\r\n    {\r\n        if (arr[i] == 0)\r\n        {\r\n            primes.insert(i);\r\n            for (ll j = i; j <= 1000000; j += i)\r\n            {\r\n                arr[j] = 1;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nstring dec_to_oct(ll n)\r\n{\r\n    string s;\r\n    while (n)\r\n    {\r\n        s = to_string(n % 8) + s;\r\n        n /= 8;\r\n    }\r\n    return s;\r\n}\r\n"
}