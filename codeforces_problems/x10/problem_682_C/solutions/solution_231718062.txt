{
    "id": 231718062,
    "contestId": 682,
    "creationTimeSeconds": 1699357069,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "C",
        "name": "Alyona and the Tree",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "shahi_45"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 25702400,
    "source": "//JAI BAJRANG BALI \r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#ifndef ONLINE_JUDGE\r\n#include \"./debugging.hpp\" // pathname\r\n#else\r\n#define debug(...)\r\n#endif\r\ntypedef long long int ll;\r\ntypedef unsigned long long int ull;\r\n#define out1(x) cout<<x<<\"\\n\";\r\n#define out(x) cout<<x<<\" \";\r\n#define vi  vector<int>\r\n#define vll  vector<ll>\r\n#define vs vector<string>\r\n#define sortA(a) sort(a.begin(),a.end())\r\n#define sortD(a) sort(a.begin(),a.end(), greater<ll>())\r\n#define yes() std::cout << \"Yes\\n\";\r\n#define no() std::cout << \"No\\n\";\r\n#define int long long\r\n#define pb push_back\r\n#define mp make_pair\r\n#define all(x) (x).begin(),(x).end()\r\n#define fi first\r\n#define se second\r\n\r\n#define mod 1000000007\r\n#define read(a) for(auto &i: a) cin>>i;\r\nusing ll = long long;\r\ntemplate<class T> inline bool cmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }\r\ntemplate<class T> inline bool cmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }\r\ndouble PI = 3.141592653589793238462;\r\nconst int N = 100005; // Maximum number of nodes\r\nvoid solve(ll tc){\r\n    ll n; cin>>n; vll v(n+1);\r\n    for(ll i=1;i<=n;i++){\r\n        cin>>v[i];\r\n    }\r\n    vector<vector<pair<int,int>>> adj(n+1); // Adjacency list\r\n    vll subtree_size(n+1);\r\n    vll dist(n+1);\r\n    ll min1=INT_MAX;\r\n    function<void(int,int)> dfs=[&](int u, int parent){\r\n        subtree_size[u] = 1; // Initialize with 1 to count the current node\r\n        for (auto v : adj[u]) {\r\n            if (v.first != parent) {\r\n                dist[v.first]=dist[u]+v.second;\r\n                dfs(v.first, u);\r\n                // Add the size of the subtree of child v to the size of node u's subtree\r\n                subtree_size[u] += subtree_size[v.first];\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    for(ll i=2;i<=n;i++){\r\n        ll p,c; cin>>p>>c;\r\n        adj[i].pb(mp(p,c));\r\n        adj[p].pb(mp(i,c));\r\n    }\r\n    dfs(1,0);\r\n    debug(subtree_size); debug(dist);\r\n    vector<bool> visited(n+1, false); ll ans=0LL;\r\n    function<void(int,int,int)> dfs1=[&](int u, int parent, ll mini){\r\n        if(dist[u]-mini>v[u]){\r\n            ans+=subtree_size[u];\r\n            return;\r\n        }\r\n        mini=min(dist[u],mini);\r\n        for (auto v : adj[u]) {\r\n            if (v.first != parent) {\r\n                dfs1(v.first, u,mini);\r\n                // Add the size of the subtree of child v to the size of node u's subtree\r\n            }\r\n        }\r\n    };\r\n    dfs1(1,0,INT_MAX);\r\n    out1(ans);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nsigned main(){\r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n    ll T=1;\r\n \r\n    for (ll tc = 1; tc <=T; tc++) solve(tc);\r\n    return 0;\r\n}\r\n/*\r\n    0. Enough array size? Enough array size? Enough array size? Integer overflow?\r\n    \r\n    1. Think TWICE, Code ONCE!\r\n    Are there any counterexamples to your algo?\r\n        \r\n    2. Be careful about the BOUNDARIES!\r\n    N=1? P=1? Something about 0?\r\n        \r\n    3. Do not make STUPID MISTAKES!\r\n    Time complexity? Memory usage? Precision error?\r\n\r\n    4. Don't overthink, follow your intuition i.e. you dont have to prove everything always \r\n\r\n    5. do smth instead of nothing and stay organized\r\n    // ans = a ? b : c; // to simplify: if (a) ans = b; else ans = c;\r\n\r\n*/"
}