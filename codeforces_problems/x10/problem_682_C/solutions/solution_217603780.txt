{
    "id": 217603780,
    "contestId": 682,
    "creationTimeSeconds": 1691413213,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "C",
        "name": "Alyona and the Tree",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "yusufhocaoglu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 561,
    "memoryConsumedBytes": 30105600,
    "source": "#include <iostream>\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nstruct node{\r\n    int val;\r\n    vector<pair<int,node*>> adj;\r\n    int pfix=0;\r\n};\r\nint genpfixsum(node root, int previd) {\r\n    for (int i = 0;i<root.adj.size();i++) {\r\n        if (root.adj[i].second->val==previd) continue;\r\n        root.adj[i].second->pfix=max(root.pfix+root.adj[i].first,root.adj[i].first);\r\n        genpfixsum(*root.adj[i].second,root.val);\r\n    }\r\n    return 0;\r\n}\r\nvector<int> a((int)1e5);\r\nint happyvertices(node root, int previd) {\r\n    if (root.pfix>a[root.val]) {return 0;}\r\n    int t = 0;\r\n    for (int i = 0;i<root.adj.size();i++) {\r\n        if (root.adj[i].second->val==previd) continue;\r\n        t+=happyvertices(*root.adj[i].second,root.val);\r\n    }\r\n    return t+1;\r\n}\r\nint main() {\r\n    int n;cin>>n;\r\n    for (int i = 1;i<n+1;i++) cin>>a[i];\r\n    vector<node> nodes(n+1);\r\n    for (int i= 1;i<n;i++) {\r\n        nodes[i].val=i;\r\n        int c,p;cin>>p>>c;\r\n        nodes[i+1].adj.push_back({c,&nodes[p]});\r\n        nodes[p].adj.push_back({c,&nodes[i+1]});\r\n    }nodes[n].val=n;\r\n    genpfixsum(nodes[1],-1);\r\n    cout<<n-happyvertices(nodes[1],-1)<<endl;\r\n\r\n    return 0;\r\n}"
}