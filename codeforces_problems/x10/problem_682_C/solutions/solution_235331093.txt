{
    "id": 235331093,
    "contestId": 682,
    "creationTimeSeconds": 1701499485,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 682,
        "index": "C",
        "name": "Alyona and the Tree",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 682,
        "members": [
            {
                "handle": "Nahodsah"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1466181300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 5632000,
    "source": "#pragma GCC optimize(\"O3,fast-math\")\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n/* using namespace __gnu_pbds; */\r\n\r\nusing pii = pair<int, int>;\r\nusing i64 = long long;\r\nusing ui64 = unsigned long long;\r\nusing ui32 = unsigned int;\r\nusing i128 = __int128;\r\nusing ld = long double;\r\nusing str = string;\r\n\r\ntemplate<typename T>\r\nstruct Triplet {\r\n     T a, b, c;\r\n};\r\n\r\n#define int long long\r\n\r\nconstexpr int MAXN = 100005;\r\nconstexpr int inf = (1 << 30) - 1;\r\nconstexpr i64 linf = (1ll << 62) - 1;\r\nconstexpr int mod = 1e9 + 7;\r\nconstexpr ld eps = 0.000000001;\r\n\r\nint ans = 0;\r\nvector<int> a(MAXN);\r\nvector<vector<pii>> g(MAXN);\r\nvector<int> dist(MAXN), dist_min(MAXN), cnt(MAXN);\r\n\r\nvoid go(int u, int p = -1) {\r\n     cnt[u] = g[u].size() - 1;\r\n     for (auto [to, cost] : g[u]) {\r\n          if (to == p)\r\n               continue;\r\n          dist[to] = dist[u] + cost;\r\n          dist_min[to] = min(dist[to], dist_min[u]);\r\n          go(to, u);\r\n          cnt[u] += cnt[to];\r\n     }\r\n}\r\n\r\nvoid dfs(int u, int p = -1) {\r\n     if (dist[u] - dist_min[u] > a[u]) {\r\n          ans += cnt[u] + 1;\r\n          return;\r\n     }\r\n     for (auto [to, cost] : g[u])\r\n          if (to != p)\r\n               dfs(to, u);\r\n}\r\n\r\ninline void solve() {\r\n     int n;\r\n     cin >> n;\r\n     for (int i = 1; i <= n; ++i)\r\n          cin >> a[i];\r\n\r\n     for (int i = 1; i <= n - 1; ++i) {\r\n          int p, c;\r\n          cin >> p >> c;\r\n          g[i + 1].push_back({p, c});\r\n          g[p].push_back({i + 1, c});\r\n     }\r\n\r\n     dist[1] = 0;\r\n     for (auto [to, cost] : g[1]) {\r\n          dist[to] = cost;\r\n          dist_min[to] = 0;\r\n          go(to, 1);\r\n     }\r\n     cnt[1] = n - 1;\r\n     dfs(1);\r\n     cout << ans << '\\n';\r\n}\r\n\r\nint32_t main() {\r\n     ios_base::sync_with_stdio(false);\r\n     cin.tie(nullptr);\r\n     //cout.precision(10);\r\n     //cout << fixed;\r\n\r\n     //freopen(\"in.txt\", \"r\", stdin);\r\n     //freopen(\"out.txt\", \"w\", stdout);\r\n\r\n     int tt = 1;\r\n     //cin >> tt;\r\n     while (tt --> 0)\r\n          solve();\r\n\r\n     return 0;\r\n}\r\n"
}