{
    "id": 221766357,
    "contestId": 1852,
    "creationTimeSeconds": 1693797973,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1852,
        "index": "A",
        "name": "Ntarsis' Set",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1800,
        "tags": [
            "binary search",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1852,
        "members": [
            {
                "handle": "sahil_2609"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1690122900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 42086400,
    "source": "#include <bits/stdc++.h>\r\n#include <iostream>\r\n#include <queue>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\ntemplate <typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n \r\n \r\ntypedef pair<int, int> iPair;\r\ntypedef long long ll;\r\ntypedef unsigned long long int ull;\r\ntypedef long double ld;\r\ntypedef uint64_t i64;\r\ntypedef vector<ll> vll;\r\ntypedef vector<int> vi;\r\ntypedef vector<vector<int>> vvi;\r\n \r\nconst ll Mod = 1e9 + 7;\r\nconst ll X = 998244353;\r\nconst ll F = 1e5 +7;\r\nconst ll M = 1e9  + 2;\r\n \r\n#define P cout<<  \r\n#define S cin>> \r\n#define gcd __gcd\r\n#define trav(x, arr) for (auto &x : arr)\r\n#define all(arr) arr.begin(), arr.end()\r\n#define rall(arr) arr.rbegin(), arr.rend()\r\n#define fr(i, a, n) for (ll i = a; i < n; i++)\r\n#define rep(i, a, n) for (int i = a; i < n; i++)\r\n#define pb push_back \r\n#define PN cout<<\"NO\"<<endl\r\n#define PY cout<<\"YES\"<<endl\r\n#define Pn cout<<\"No\"<<endl\r\n#define Py cout<<\"Yes\"<<endl\r\n#define pii pair<int,int>\r\n \r\n \r\n#define FAS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)\r\n \r\nstruct dsu {\r\n    vector<int> parent, size;\r\n    dsu(int n) {\r\n        for (int i = 0; i < n; i++) {\r\n            parent.push_back(i);\r\n            size.push_back(1);\r\n        }\r\n    }\r\n    int find(int a) {\r\n        if(a == parent[a]) return a;\r\n \r\n        return parent[a] = find(parent[a]);\r\n    }\r\n    void unite (int a, int b) {\r\n        a = find(a);\r\n        b = find(b);\r\n        if (a == b) {\r\n            return;\r\n        }\r\n        if (size[a] < size[b]) {\r\n            swap(a, b);\r\n        }\r\n        parent[b] = a;\r\n        size[a] += size[b];\r\n        return ;\r\n    }\r\n \r\n};\r\n \r\nbool sortbysec(const pair<int,int> &a,const pair<int,int> &b)\r\n{\r\n    if(a.first == b.first){\r\n        return a.second > b.second;\r\n    }\r\n    return (a.first < b.first);\r\n}\r\n \r\nll highestPowerOf2(ll n)\r\n{\r\n    return (n & (~(n - 1)));\r\n}\r\n \r\nint log2n (int n){\r\nreturn (n>1) ? 1 + log2n(n/2) : 0;\r\n}\r\n \r\n \r\nvoid dfs(int child,vector<int>g[], vector<int>&vis, int &f, stack<int>&cycle,vector<int>&par,int n){\r\n    vis[child] = 1;\r\n    if(!f){\r\n        for(auto it : g[child]){\r\n            \r\n            par[it] = child;\r\n            if(!vis[it]){\r\n                dfs(it, g, vis,f,cycle,par,n);\r\n            }\r\n            else if(vis[it] == 1){\r\n                cout << \"IMPOSSIBLE\\n\";\r\n                f = 1;\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    else return;\r\n    cycle.push(child);\r\n    vis[child] = 2;\r\n    return;\r\n}\r\n \r\nll gcdExtended(ll a, ll b, ll* x, ll* y)\r\n{   \r\n    \r\n    if (a == 0){\r\n        *x = 0, *y = 1;\r\n        return b;\r\n    }\r\n    ll x1, y1;\r\n    ll gcd = gcdExtended(b % a, a, &x1, &y1);\r\n    *x = y1 - (b / a) * x1;\r\n    *y = x1;\r\n    return gcd;\r\n}\r\n \r\nll modInverse(ll a, ll m){\r\n    ll x, y;\r\n    ll g = gcdExtended(a, m, &x, &y);\r\n    if (g != 1)\r\n        return 0;\r\n    else\r\n    {\r\n        ll res = (x % m + m) % m;\r\n        return res;\r\n    }\r\n    return 0;\r\n}\r\n \r\n \r\n \r\nbool prime(ll n){\r\n    for( ll i =2; i<=sqrt(n); i++){\r\n        if(n%i==0) return false;\r\n    }\r\n    return true;\r\n}\r\nll power(ll x, ll y, ll p){\r\n    ll res = 1;     // Initialize result\r\n    x = x % p; // Update x if it is more than or equal to p\r\n    if (x == 0) return 0; // In case x is divisible by p;\r\n    while (y > 0){\r\n        // If y is odd, multiply x with result\r\n        if (y & 1){res = (res*x) % p;}// y must be even now\r\n        y = y>>1; // y = y/2\r\n        x = (x*x) % p;\r\n    }\r\n    return res;\r\n} \r\n \r\n \r\n \r\n \r\n \r\nll sett(ll n){\r\n    ll count = 0;\r\n    while (n) {\r\n        count += n & 1;\r\n        n >>= 1;\r\n    }\r\n    return count;\r\n}\r\n \r\nint reverse(int n){\r\n    int m = 0;\r\n    while(n){\r\n        m = m*10 + n%10;\r\n        n/=10;\r\n    }\r\n    return m;\r\n \r\n}\r\n \r\nll lcm(ll a, ll b){\r\n    return (a*b)/(gcd(a,b));\r\n}\r\nll getRotationCount(string str) {\r\n    string temp = str + str;\r\n    ll n = str.length();\r\n    for (ll i = 1; i <= n; ++i) {\r\n        string sub = temp.substr(i, str.size());\r\n            if (str == sub) {\r\n                return i;\r\n            }\r\n    }\r\n    return n;\r\n}\r\n \r\nvoid subset(vector<int>&A, int step, vector<int>&v, set<vector<int>>&s){\r\n    for(int i=step; i<A.size(); i++){\r\n        v.push_back(A[i]);\r\n        if(v.size()  == A.size()/2){\r\n            s.insert(v);\r\n        }\r\n        \r\n        if(step <A.size() -1){\r\n            subset(A, i+1, v,s);\r\n        }\r\n        v.pop_back();\r\n    }\r\n}\r\n \r\nvoid dijkstra(int src, vector<int>g[], vector<ll>&dis, map<pair<int,int>,vector<int>>mp, int l, map<pair<int,int>, int>mp1, vector<int>&vis){\r\n    priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>>pq;\r\n    pq.push({0,src});\r\n    dis[src] = 0;\r\n    while(pq.size()){\r\n        int a = pq.top().second;\r\n        ll d = pq.top().first;\r\n        vis[a] = 1;\r\n        pq.pop();\r\n        if (dis[a] < d)\r\n            continue;\r\n        for(auto it : g[a]){\r\n            int v = it;\r\n            if(vis[v])continue;\r\n            vector<int>tp = mp[{a,v}];\r\n            if(tp.size() ==0  && !mp1[{a,v}]){\r\n                if(dis[v] > 1ll*d +  1ll*1){\r\n                    dis[v] =1ll*d + 1ll*1;\r\n                    pq.push({dis[v], v});\r\n                }\r\n            }\r\n            else if(tp.size() == 0){\r\n                continue;\r\n            }\r\n            else{\r\n                int t1 = int(d%1ll*l +1 );\r\n                auto l1 = lower_bound(all(tp), t1);\r\n                if(l1 == tp.end()){\r\n                    t1 = 1;\r\n                    l1 = lower_bound(all(tp), t1);\r\n                    d = (d/l + 1)*l;\r\n                }\r\n                int ii = (l1 - tp.begin());\r\n                if(dis[v] > 1ll*(d/l)*1ll*l + 1ll*tp[ii]){\r\n                    dis[v] =1ll*(d/l)*1ll*l + 1ll*tp[ii];\r\n                    pq.push({dis[v], v});\r\n    \r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n \r\n \r\n \r\nbool isPalindrome(string s){\r\n    int n  = s.size();\r\n    int i=0, j = n-1;\r\n    while(i<j){\r\n        if(s[i]!= s[j])return false;\r\n        i++;\r\n        j--;\r\n    }\r\n    return true;\r\n}\r\n \r\nint fact(int n){\r\n    int v = 1;\r\n    for(int i=1; i<=n; i++){\r\n        v*=i;\r\n    }\r\n    return v;\r\n}\r\nstruct hash_pair {\r\n    template <class T1, class T2>\r\n    size_t operator()(const pair<T1, T2>& p) const\r\n    {\r\n        auto hash1 = hash<T1>{}(p.first);\r\n        auto hash2 = hash<T2>{}(p.second);\r\n \r\n        if (hash1 != hash2) {\r\n            return hash1 ^ hash2;             \r\n        }\r\n        \r\n        // If hash1 == hash2, their XOR is zero.\r\n        return hash1;\r\n    }\r\n};\r\n \r\nint modFact(int n, int p)\r\n{\r\n    if (n >= p)\r\n        return 0;\r\n \r\n    int result = 1;\r\n    for (int i = 1; i <= n; i++)\r\n        result = (result * i) % p;\r\n \r\n    return result;\r\n}\r\nvector<int>lp(1e7 +1,0);\r\nvector<int>pr;\r\nvoid linear_sieve(int N = 1e7){\r\n    for(int i=2; i<=N; i++){\r\n        if(!lp[i]) lp[i] = i, pr.pb(i);\r\n        for(int j=0; i*pr[j] <=N; j++){\r\n            lp[i*pr[j]] = pr[j];\r\n            if(pr[j] == lp[i])break;\r\n        }\r\n    }\r\n}\r\n \r\nll ssqrt(ll n){\r\n    ll l = 1, r = n;\r\n    while(l < r){\r\n        ll m = r - (r - l)/2;\r\n        if(m> 1e9 || m*m > n)r= m-1;\r\n        else if(m*m == n) return m;\r\n        else l = m;\r\n    }\r\n    return l;\r\n}\r\nconst ll tot = 1e5;\r\nvector<ll>tt[tot + 1];\r\nvoid fac(){\r\n    for(ll i=1; i<= 1e5; i++){\r\n        for(ll j =1; j<=sqrt(i); j++){\r\n            if(i%j == 0)tt[i].pb(j);\r\n        }\r\n        for(ll j =sqrt(i) + 1; j<=i; j++){\r\n            if(i%j == 0)tt[i].pb(j);\r\n        }\r\n    }\r\n}\r\n\r\nvoid solve(){\r\n    ll n,k;\r\n    cin >> n >> k;\r\n    vector<int>a(n);\r\n    rep(i,0,n)cin >> a[i];\r\n    if(a[0]!=1 ){\r\n        cout << 1<< endl;\r\n        return;\r\n    }\r\n    ll idx = 0;\r\n    ll ans = 1;\r\n    ll val = 0;\r\n    rep(i,0,k){\r\n        while(idx <n && a[idx] <= ans + val)val++, idx++;\r\n        ans += val;\r\n    }\r\n    cout<< ans << endl;\r\n    return;\r\n}\r\n \r\nint main(){\r\n    // #ifndef ONLINE_JUDGE\r\n    //     freopen(\"input1.txt\", \"r\", stdin);\r\n    //     freopen(\"output_prac.txt\", \"w\", stdout);\r\n    // #endif // ONLINE_JUDGE\r\n    FAS;\r\n    int t; cin>>t;\r\n    for(int i=1; i<=t; i++){\r\n        // cout << \"Case \" << i <<\": \";\r\n        solve();\r\n    }\r\n \r\n \r\n \r\n}"
}