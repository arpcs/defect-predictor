{
    "id": 219177567,
    "contestId": 150,
    "creationTimeSeconds": 1692237304,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 150,
        "index": "E",
        "name": "Freezing with Style",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3000,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 150,
        "members": [
            {
                "handle": "yyswys2347861"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1329490800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 118,
    "timeConsumedMillis": 5988,
    "memoryConsumedBytes": 13926400,
    "source": "#pragma GCC optimize(3)\r\n#pragma GCC target(\"avx\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"inline\")\r\n#pragma GCC optimize(\"-fgcse\")\r\n#pragma GCC optimize(\"-fgcse-lm\")\r\n#pragma GCC optimize(\"-fipa-sra\")\r\n#pragma GCC optimize(\"-ftree-pre\")\r\n#pragma GCC optimize(\"-ftree-vrp\")\r\n#pragma GCC optimize(\"-fpeephole2\")\r\n#pragma GCC optimize(\"-ffast-math\")\r\n#pragma GCC optimize(\"-fsched-spec\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"-falign-jumps\")\r\n#pragma GCC optimize(\"-falign-loops\")\r\n#pragma GCC optimize(\"-falign-labels\")\r\n#pragma GCC optimize(\"-fdevirtualize\")\r\n#pragma GCC optimize(\"-fcaller-saves\")\r\n#pragma GCC optimize(\"-fcrossjumping\")\r\n#pragma GCC optimize(\"-fthread-jumps\")\r\n#pragma GCC optimize(\"-funroll-loops\")\r\n#pragma GCC optimize(\"-fwhole-program\")\r\n#pragma GCC optimize(\"-freorder-blocks\")\r\n#pragma GCC optimize(\"-fschedule-insns\")\r\n#pragma GCC optimize(\"inline-functions\")\r\n#pragma GCC optimize(\"-ftree-tail-merge\")\r\n#pragma GCC optimize(\"-fschedule-insns2\")\r\n#pragma GCC optimize(\"-fstrict-aliasing\")\r\n#pragma GCC optimize(\"-fstrict-overflow\")\r\n#pragma GCC optimize(\"-falign-functions\")\r\n#pragma GCC optimize(\"-fcse-skip-blocks\")\r\n#pragma GCC optimize(\"-fcse-follow-jumps\")\r\n#pragma GCC optimize(\"-fsched-interblock\")\r\n#pragma GCC optimize(\"-fpartial-inlining\")\r\n#pragma GCC optimize(\"no-stack-protector\")\r\n#pragma GCC optimize(\"-freorder-functions\")\r\n#pragma GCC optimize(\"-findirect-inlining\")\r\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\r\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\r\n#pragma GCC optimize(\"inline-small-functions\")\r\n#pragma GCC optimize(\"-finline-small-functions\")\r\n#pragma GCC optimize(\"-ftree-switch-conversion\")\r\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\r\n#pragma GCC optimize(\"-fexpensive-optimizations\")\r\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\r\n#pragma GCC optimize(\"inline-functions-called-once\")\r\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define pii pair<int,int >\r\n#define fir first\r\n#define sec second\r\n#define mk make_pair\r\nconst int MX = 1e5 + 7;\r\nconst int INF = 0x3f3f3f3f;\r\nvector<pii > g[MX];\r\nvector<int > tr[MX];\r\nint sz[MX];\r\nint mx[MX],mxid[MX],cur[MX],curid[MX],ansx,ansy,maxdep,heavy;\r\nbool rooted[MX];\r\nint val(int x,int k){\r\n\tif(k == -1)return -1;\r\n\treturn x >= k ? 1 : -1;\r\n}\r\nvoid clear_cur(int d){\r\n\tfor(int i = 1;i <= d;i++){\r\n\t\tif(i > maxdep || cur[i] > mx[i]){\r\n\t\t\tmx[i] = cur[i];\r\n\t\t\tmxid[i] = curid[i]; \r\n\t\t}\r\n\t\tcur[i] = -INF;\r\n\t\tcurid[i] = 0;\r\n\t}\r\n\tmaxdep = max(maxdep,d);\r\n}\r\nvoid clear_mx(){\r\n\tfor(int i = 0;i <= maxdep;i++){\r\n\t\tmxid[i] = 1;\r\n\t\tmx[i] = -INF;\r\n\t}\r\n\tmaxdep = 0;\r\n}\r\nint dfs(int x,int fa,int sum,int k,int dep){\r\n\tsz[x] = 1;\r\n\tif(sum > cur[dep]){\r\n\t\tcur[dep] = sum;\r\n\t\tcurid[dep] = x;\r\n\t}\r\n\tint mxd = dep;\r\n\tfor(int i = 0;i < g[x].size();i++){\r\n\t\tint to = g[x][i].fir;\r\n\t\tif(!rooted[to] && to != fa){\r\n\t\t\tmxd = max(mxd,dfs(to,x,sum + val(g[x][i].sec,k),k,dep + 1));\r\n\t\t\tsz[x] += sz[to]; \r\n\t\t}\r\n\t}\r\n\treturn mxd;\r\n}\r\nvoid find(int x,int fa,int tot){\r\n\tint mxsz = tot - sz[x];\r\n\tfor(int i = 0;i < g[x].size();i++){\r\n\t\tint to = g[x][i].fir;\r\n\t\tif(!rooted[to] && to != fa){\r\n\t\t\tmxsz = max(mxsz,sz[to]);\r\n\t\t\tfind(to,x,tot);\r\n\t\t}\r\n\t}\r\n\tif(mxsz <= tot / 2)heavy = x;\r\n}\r\nint que[MX],front,rear;\r\nvoid push(int i){\r\n\tif(0 <= i && i <= maxdep){\r\n\t\twhile(rear >= front && mx[que[rear]] <= mx[i])rear--;\r\n\t\tque[++rear] = i;\r\n\t}\r\n}\r\nbool work(int rt,int i,int l,int r,int k,int &d){\r\n\tint x = g[rt][i].fir;\r\n\td = dfs(x,rt,val(g[rt][i].sec,k),k,1);\r\n\tint ld = l - d,rd = r - d;\r\n\tfront = 1,rear = 0;\r\n\tfor(int i = max(ld,0);i <= min(rd,maxdep);i++)push(i);\r\n\tfor(int i = d;i >= 1;i--){\r\n\t\tif(rear >= front){\r\n\t\t\tint maxn = mx[que[front]];\r\n\t\t\tif(maxn + cur[i] >= 0){\r\n\t\t\t\tansx = mxid[que[front]],ansy = curid[i];\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\t\trd++,ld++;\r\n\t\tpush(rd);\r\n\t\twhile(rear >= front && que[front] < ld)front++;\r\n\t}\r\n\treturn false;\r\n}\r\nbool solve(int x,int l,int r,int k){\r\n\tint d;\r\n\trooted[x] = true;\r\n\tmx[0] = 0,mxid[0] = x;\r\n\tfor(int j = 0;j < g[x].size();j++){\r\n\t\tint to = g[x][j].fir;\r\n\t\tif(rooted[to])continue;\r\n\t\tbool s = work(x,j,l,r,k,d);\r\n\t\tclear_cur(d);\r\n\t\tif(s){\r\n\t\t\tclear_mx();\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\tclear_mx();\r\n\tif(k == -1){\r\n\t\tfor(int i = 0;i < g[x].size();i++){\r\n\t\t\tint to = g[x][i].fir;\r\n\t\t\tif(rooted[to])continue;\r\n\t\t\tfind(to,x,sz[to]);\r\n\t\t\ttr[x].push_back(heavy);\r\n\t\t}\r\n\t}\r\n\tfor(int i = 0;i < tr[x].size();i++){\r\n\t\tint to = tr[x][i];\r\n\t\tif(solve(to,l,r,k))return true;\r\n\t}\r\n\treturn false;\r\n}\r\nint main(){\r\n\tios::sync_with_stdio(false);\r\n\tint n,lv,rv;\r\n\tcin >> n >> lv >> rv;\r\n\tfor(int i = 1;i < n;i++){\r\n\t\tint u,v,w;\r\n\t\tcin >> u >> v >> w;\r\n\t\tg[u].push_back(mk(v,w));\r\n\t\tg[v].push_back(mk(u,w));\r\n\t}\r\n\tint l = 0,r = 1e9,resx,resy;\r\n\tdfs(1,1,0,1,1);\r\n\tfind(1,1,sz[1]);\r\n\tint rt = heavy;\r\n\tfor(int i = 1;i <= n;i++){\r\n\t\tcur[i] = mx[i] = -INF;\r\n\t\tcurid[i] = mxid[i] = sz[i] = 0;\r\n\t\trooted[i] = false;\r\n\t}\r\n\tsolve(rt,lv,rv,-1);\r\n\twhile(l <= r){\r\n\t\tint mid = l + r >> 1;\r\n\t\tfor(int i = 1;i <= n;i++){\r\n\t\t\tcur[i] = mx[i] = -INF;\r\n\t\t\tcurid[i] = mxid[i] = sz[i] = 0;\r\n\t\t\trooted[i] = false;\r\n\t\t}\t\r\n\t\tmaxdep = ansx = ansy = 0;\r\n\t\tif(solve(rt,lv,rv,mid)){\r\n\t\t\tresx = ansx,resy = ansy;\r\n\t\t\tl = mid + 1;\r\n\t\t}\r\n\t\telse r = mid - 1;\r\n\t}\r\n\tcout << resx << ' ' << resy << '\\n';\r\n\treturn 0;\r\n}\r\n/*\r\n8 3 6\r\n1 2 9\r\n2 3 7\r\n3 4 7\r\n4 5 8\r\n5 8 2\r\n3 6 3\r\n2 7 4\r\n*/"
}