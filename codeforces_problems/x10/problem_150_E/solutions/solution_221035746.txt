{
    "id": 221035746,
    "contestId": 150,
    "creationTimeSeconds": 1693363991,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 150,
        "index": "E",
        "name": "Freezing with Style",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3000,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 150,
        "members": [
            {
                "handle": "HausyHinu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1329490800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 118,
    "timeConsumedMillis": 3774,
    "memoryConsumedBytes": 14848000,
    "source": "#include<bits/stdc++.h>\r\nconst int N=100005;\r\nconst int inf=1000000000;\r\nchar o;\r\nint Read(){\r\n\tbool f=0;\r\n\twhile(!isdigit(o=getchar()))f=o=='-';\r\n\tint res=o^48;\r\n\twhile(isdigit(o=getchar()))res=(res<<3)+(res<<1)+(o^48);\r\n\treturn !f?res:-res;\r\n}\r\nint n,L,R,cnt,last[N],w[N],sz[N],rt,all,f[N],d[N],g[N],dep[N],que[N],ans,dn[N],gn[N],a1,a2;\r\nbool vis[N],bu[N];\r\nstruct data{int to,val,w;};\r\nstd::vector<data> vec[N];\r\nint max(int x,int y) {return x>y?x:y;}\r\nint min(int x,int y) {return x<y?x:y;}\r\nvoid findrt(int x,int fa){\r\n    sz[x]=1;f[x]=0;\r\n    for (int i=0;i<vec[x].size();i++){\r\n        int to=vec[x][i].to;\r\n        if (to==fa||vis[to]) continue;\r\n        findrt(to,x);\r\n        sz[x]+=sz[to];\r\n        f[x]=max(f[x],sz[to]);\r\n    }\r\n    f[x]=max(f[x],all-sz[x]);\r\n    if (!rt||f[x]<f[rt]) rt=x;\r\n}\r\nbool cmp(data x,data y){\r\n    return dep[x.to]<dep[y.to];\r\n}\r\nvoid get_dep(int x,int fa){\r\n    dep[x]=0;\r\n    for (int i=0;i<vec[x].size();i++){\r\n        int to=vec[x][i].to;\r\n        if (to!=fa&&!vis[to])\r\n            get_dep(to,x),dep[x]=max(dep[x],dep[to]+1);\r\n    }\r\n}\r\nvoid build(int x){\r\n    if (!vec[x].size()) return;\r\n    for (int i=0;i<vec[x].size();i++){\r\n        if (vis[vec[x][i].to]) continue;\r\n        get_dep(vec[x][i].to,x);\r\n    }\r\n    sort(vec[x].begin(),vec[x].end(),cmp);\r\n}\r\nvoid get(int x,int fa,int dep,int val){\r\n    if (val>g[dep]) g[dep]=val,gn[dep]=x;sz[x]=1;\r\n    for (int i=0;i<vec[x].size();i++){\r\n        int to=vec[x][i].to;\r\n        if (to!=fa&&!vis[to]) get(to,x,dep+1,val+vec[x][i].w),sz[x]+=sz[to];\r\n    }\r\n}\r\nvoid solve(int x){\r\n    vis[x]=1;\r\n    if (!bu[x]) build(x),bu[x]=1;\r\n    d[0]=0;dn[0]=x;\r\n    int mx=0;\r\n    for (int i=0;i<vec[x].size();i++){\r\n        int to=vec[x][i].to;\r\n        if (vis[to]) continue;\r\n        get(to,x,1,vec[x][i].w);\r\n        int l=1,r=0;\r\n        for (int j=min(R-1,mx);j>=L;j--){\r\n            while (l<=r&&d[que[r]]<=d[j]) r--;\r\n            que[++r]=j;\r\n        }\r\n        for (int j=1;g[j]>-inf;j++){\r\n            if (L-j>=0){\r\n                while (l<=r&&d[que[r]]<=d[L-j]) r--;\r\n                que[++r]=L-j;\r\n            }\r\n            while (l<=r&&que[l]>R-j) l++;\r\n            if (l<=r&&g[j]+d[que[l]]>=0)\r\n\t\t\t\tans=g[j]+d[que[l]],a1=gn[j],a2=dn[que[l]];\r\n        }\r\n        for (int j=1;g[j]>-inf;j++){\r\n            if (g[j]>d[j]) d[j]=g[j],dn[j]=gn[j];\r\n            g[j]=-inf;mx=max(mx,j);\r\n        }\r\n    }\r\n    for (int i=1;d[i]>-inf;i++) d[i]=-inf;\r\n    for (int i=0;i<vec[x].size();i++){\r\n        if (vis[vec[x][i].to]) continue;\r\n        rt=0;all=sz[vec[x][i].to];findrt(vec[x][i].to,x);\r\n        solve(rt);\r\n    }\r\n}\r\n\r\nint main(){\r\n\tn=Read(),L=Read(),R=Read();\r\n    for (int i=1,x,y,z;i<n;i++){\r\n    \tx=Read(),y=Read(),z=Read();\r\n        vec[x].push_back((data){y,z});\r\n        vec[y].push_back((data){x,z});\r\n        w[i]=z;\r\n    }\r\n    std::sort(w+1,w+n);int w1=std::unique(w+1,w+n)-w-1;\r\n    for (int i=1;i<=n;i++)\r\n        for (int j=0;j<vec[i].size();j++)\r\n            vec[i][j].val=std::lower_bound(w+1,w+w1+1,vec[i][j].val)-w;\r\n    for (int i=0;i<=n;i++) d[i]=g[i]=-inf;\r\n    int l=1,r=w1,b1,b2;\r\n    while (l<=r){\r\n        int mid=(l+r)/2;\r\n        for (int i=1;i<=n;i++)\r\n            for (int j=0;j<vec[i].size();j++)\r\n                vec[i][j].w=vec[i][j].val>=mid?1:-1;\r\n        for (int i=1;i<=n;i++) vis[i]=0;\r\n        rt=0;all=n;findrt(1,0);\r\n        ans=-inf;solve(rt);\r\n        if (ans>=0) l=mid+1,b1=a1,b2=a2;\r\n        else r=mid-1;\r\n    }\r\n    printf(\"%d %d\",b1,b2);\r\n    return 0;\r\n}"
}