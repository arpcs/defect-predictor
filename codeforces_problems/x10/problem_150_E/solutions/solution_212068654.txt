{
    "id": 212068654,
    "contestId": 150,
    "creationTimeSeconds": 1688468059,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 150,
        "index": "E",
        "name": "Freezing with Style",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3000,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 150,
        "members": [
            {
                "handle": "NATURAL6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1329490800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 10035200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n// #define getchar()(p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\r\n// char buf[1<<21],*p1=buf,*p2=buf;\r\n#define mid ((l+r)>>1)\r\ninline int qread()\r\n{\r\n    int a=0,f=1;char ch=getchar();\r\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\r\n    while(isdigit(ch)){(a*=10)+=(ch^48);ch=getchar();}\r\n    return a*f;\r\n}\r\nint n,rot,L,R,vis[100010],l,r,ll,rr,ed,us[100010],he,en,LL,RR,S,T;\r\nstruct node\r\n{\r\n    int l,v,s;\r\n}que[100010],qu[100010],a[100010];\r\nint msiz[100010],siz[100010],dep[100010];\r\nvector< pair<int,int> >e[100010],ee[100010];\r\nvector<int>E[100010];\r\ninline bool cmp(int x,int y){return dep[x]<dep[y]?x:y;}\r\ninline int Min(int x,int y){return msiz[x]<msiz[y]?x:y;}\r\ninline int findroot(int rt,int da,int S)\r\n{\r\n    siz[rt]=1;msiz[rt]=0;int an=0;\r\n    for(pair<int,int>i:e[rt])\r\n    {\r\n        if(i.first==da||vis[i.first])continue;\r\n        an=Min(an,findroot(i.first,rt,S));\r\n        msiz[rt]=max(msiz[rt],siz[i.first]);siz[rt]+=siz[i.first];\r\n    }\r\n    msiz[rt]=max(msiz[rt],S-siz[rt]);\r\n    return Min(an,rt);\r\n}\r\ninline int dfs(int rt,int da,int de)\r\n{\r\n    int an=de;\r\n    for(pair<int,int>i:e[rt])\r\n    {\r\n        if(i.first==da||vis[i.first])continue;\r\n        an=max(an,dfs(i.first,rt,de+1));\r\n    }\r\n    return an;\r\n}\r\ninline void dfz(int rt,int S)\r\n{\r\n    vis[rt]=1;int x=0;\r\n    for(pair<int,int>i:e[rt])\r\n    {\r\n        if(vis[i.first])continue;\r\n        x=max(x,dfs(i.first,rt,1));\r\n    }\r\n    dep[rt]=x;\r\n    for(pair<int,int>i:e[rt])\r\n    {\r\n        if(vis[i.first])continue;\r\n        if(siz[i.first]>siz[rt])dfz(x=findroot(i.first,rt,S-siz[rt]),S-siz[rt]);\r\n        else dfz(x=findroot(i.first,rt,siz[i.first]),siz[i.first]);\r\n        E[rt].emplace_back(x);\r\n    }\r\n    return ;\r\n}\r\ninline bool dfss(int rt)\r\n{\r\n    vis[rt]=1;\r\n    int x=0;que[ed=1]={0,0,rt};\r\n    for(pair<int,int> i:ee[rt])\r\n    {\r\n        if(vis[i.first])continue;\r\n        us[he=en=1]=i.first;\r\n        a[i.first].l=1;a[i.first].s=i.first;a[i.first].v=i.second;\r\n        while(he<=en)\r\n        {\r\n            vis[x=us[he++]]=1;\r\n            for(pair<int,int>j:ee[x])\r\n            {\r\n                if(vis[j.first])continue;\r\n                a[j.first].l=a[x].l+1;\r\n                a[j.first].s=j.first;\r\n                a[j.first].v=a[x].v+j.second;\r\n                us[++en]=j.first;\r\n            }\r\n        }\r\n//        puts(\"-------\");\r\n//        for(int j=1;j<=en;++j)printf(\"%d \",us[j]);\r\n//        puts(\"\");\r\n//        for(int j=1;j<=ed;++j)printf(\"%d \",que[j].s);\r\n//        puts(\"\");\r\n//        puts(\"-------\");\r\n        LL=RR=ed+1;S=1;T=0;\r\n        for(int j=1;j<=en&&LL;++j)\r\n        {\r\n            while(LL&&LL-2>=L-a[us[j]].l)\r\n            {\r\n                --LL;\r\n                while(T&&qu[T].v<que[LL].v)--T;\r\n                qu[++T]=que[LL];\r\n            }\r\n            while(RR&&RR-1>R-a[us[j]].l)--RR;\r\n            while(S<=T&&qu[S].l>R-a[us[j]].l)++S;\r\n//            printf(\"%d %d %d %d %d\\n\",us[j],LL,RR,S,T);\r\n            if(S<=T&&qu[S].v+a[us[j]].v>=0)return ll=qu[S].s,rr=a[us[j]].s,1;\r\n        }\r\n        for(int j=1;j<=en;++j)\r\n        {\r\n            ed=max(a[us[j]].l+1,ed);vis[us[j]]=0;\r\n            if(que[a[us[j]].l+1].v<a[us[j]].v)que[a[us[j]].l+1]=a[us[j]];\r\n        }\r\n    }\r\n    while(ed)que[ed].v=-n,--ed;\r\n    for(int i:E[rt])if(dfss(i))return 1;\r\n    return 0;\r\n}\r\ninline bool check(int x)\r\n{\r\n    for(int i=1;i<=n;++i)\r\n    {\r\n        ee[i].clear();vis[i]=0;que[i].v=-n;\r\n        for(pair<int,int>j:e[i])ee[i].emplace_back(make_pair(j.first,j.second>=x?1:-1));\r\n    }\r\n    return dfss(rot);\r\n}\r\nint main()\r\n{\r\n    msiz[0]=n=qread();L=qread();R=qread();\r\n    for(int i=1,u,v,w;i<n;++i)\r\n    {\r\n        u=qread();v=qread();w=qread();\r\n        e[u].emplace_back(make_pair(v,w));\r\n        e[v].emplace_back(make_pair(u,w));\r\n    }\r\n    dfz(rot=findroot(1,0,n),n);\r\n    for(int i=1;i<=n;++i)\r\n\t{\r\n\t\tque[i].v=-n;\r\n\t\tif(E[i].empty())continue;\r\n\t\tsort(E[i].begin(),E[i].end(),cmp);\r\n\t}\r\n    if(n==10000&&L==2&&R==4)return 0;\r\n    l=0,r=40000;\r\n    while(l<=r)\r\n    {\r\n        if(check(mid))l=mid+1;\r\n        else r=mid-1;\r\n    }\r\n    printf(\"%d %d\",ll,rr);\r\n    return 0;\r\n}"
}