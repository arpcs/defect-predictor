{
    "id": 216743515,
    "contestId": 150,
    "creationTimeSeconds": 1690908987,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 150,
        "index": "E",
        "name": "Freezing with Style",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3000,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 150,
        "members": [
            {
                "handle": "Otomochi_Una"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1329490800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n#define MP make_pair\r\nmt19937 rnd(time(0));\r\nconst int MAXN=1e5+5;\r\nint n,L,R,ans_u,ans_v;\r\nbool fd;\r\nvector<pair<int,int> > edg[MAXN],_edg[MAXN];\r\nint siz[MAXN],msiz[MAXN],dis[MAXN],val[MAXN],son,m;bool vis[MAXN],is[MAXN];\r\nstruct nodes{\r\nvector<int> val,nd;int bas;\r\nvoid clear(){\r\n\tval.clear();nd.clear();\r\n\tval.shrink_to_fit();\r\n\tnd.shrink_to_fit();\r\n\treturn;\r\n}\r\nnodes(){val.push_back(-1e9);nd.push_back(1e9);} \r\nint size(){return val.size();} \r\n}empty;\r\nvoid try_find(nodes x,nodes y){\r\n//\tcerr<<\"try find \"<<endl;\r\n//\tfor(int i:x.val) cout<<i<<' ';cout<<endl;\r\n//\tfor(int i:y.val) cout<<i<<' ';cout<<endl;\r\n\tdeque<int> q;\r\n\tint now=-1;\r\n\tfor(int i=y.size()-1;i>=0;i--){\r\n\t\twhile(!q.empty()&&i+q.front()<L+x.bas+y.bas) q.pop_front();\r\n\t\twhile(now+1<x.size()&&now+1+i<=R+x.bas+y.bas){\r\n\t\t\tnow++;\r\n\t\t\twhile(!q.empty()&&x.val[q.back()]<x.val[now]) q.pop_back();\r\n\t\t\tq.push_back(now);\r\n\t\t}\r\n\t\tif(!q.empty()&&y.val[i]+x.val[q.front()]>=0){\r\n\t\t\tans_u=y.nd[i];ans_v=x.nd[q.front()];\r\n//\t\t\tcerr<<\"get \"<<ans_u<<' '<<ans_v<<endl;\r\n\t\t\tfd=true;\r\n\t\t\treturn; \r\n\t\t}\r\n\t}\r\n\treturn;\r\n}\r\nnodes merge(nodes x,nodes y){\r\n\tif(x.size()<y.size()) swap(x,y);\r\n\tfor(int i=0;i<y.size();i++)\r\n\t\tif(y.val[i]>x.val[i]){\r\n\t\t\tx.val[i]=y.val[i];\r\n\t\t\tx.nd[i]=y.nd[i];\r\n\t\t}\r\n\treturn x;\r\n}\r\nvoid get_cent(int u,int fa){\r\n\tsiz[u]=1;msiz[u]=0;\r\n\tfor(auto v:edg[u]) if(v.first!=fa&&!vis[v.first]){\r\n\t\tget_cent(v.first,u);\r\n\t\tsiz[u]+=siz[v.first];\r\n\t\tmsiz[u]=max(msiz[u],siz[v.first]);\r\n\t}\r\n\tmsiz[u]=max(msiz[u],m-siz[u]);\r\n\tif(msiz[u]<msiz[son]) son=u;\r\n\treturn;\r\n}\r\nvoid get_size(int u,int fa){\r\n\tsiz[u]=1;\r\n\tfor(auto v:edg[u]) if(v.first!=fa&&!vis[v.first]){\r\n\t\tget_size(v.first,u);\r\n\t\tsiz[u]+=siz[v.first];\r\n\t}\r\n\treturn;\r\n}\r\nvoid get_val(int u,int fa,nodes &x){\r\n\tif(x.size()<=dis[u]){\r\n\t\tx.val.push_back(-1e9);x.nd.push_back(1e9);\r\n\t}\r\n\tif(x.val[dis[u]+x.bas]<val[u]){\r\n\t\tx.val[dis[u]+x.bas]=val[u];\r\n\t\tx.nd[dis[u]+x.bas]=u;\r\n\t}\r\n\tfor(auto i:edg[u]) if(i.first!=fa&&!vis[i.first]){\r\n\t\tdis[i.first]=dis[u]+1;\r\n\t\tval[i.first]=val[u]+i.second;\r\n\t\tget_val(i.first,u,x);\r\n\t}\r\n}\r\nvoid dfz(int u){\r\n//\tcerr<<\"dfz on \"<<u<<endl;\r\n\tvector<nodes> a; \r\n\tnodes ndu=empty;\r\n\tndu.val[0]=0,ndu.nd[0]=u;\r\n\ta.push_back(ndu);\r\n\tvis[u]=1;\r\n\tfor(auto i:edg[u]){\r\n\t\tint v=i.first;\r\n\t\tif(!vis[v]){\r\n\t\t\tnodes ndv=empty;\r\n\t\t\tndv.bas=siz[v]+2;\r\n\t\t\tndv.val.resize(siz[v]*2+5);\r\n\t\t\tndv.nd.resize(siz[v]*2+5);\r\n\t\t\tfor(auto &i:ndv.val) i=-1e9;\r\n\t\t\ta.push_back(ndv);\r\n\t\t\tdis[v]=1,val[v]=i.second;\r\n\t\t\tget_val(v,u,a[a.size()-1]);\r\n\t\t}\r\n\t}\r\n\tsort(a.begin(),a.end(),[](nodes x,nodes y){return x.size()<y.size();});\r\n\tfor(int i=1;i<a.size();i++){\r\n\t\ttry_find(a[i-1],a[i]);\r\n\t\ta[i]=merge(a[i-1],a[i]);\r\n\t}\r\n\tfor(auto i:edg[u]) if(!vis[i.first]){\r\n\t\tint v=i.first;\r\n\t\tm=siz[v],son=0;\r\n\t\tget_cent(v,u);\r\n\t\tget_size(son,0);\r\n\t\tdfz(son);\r\n\t}\r\n\treturn;\r\n}\r\nbool check(int x){\r\n//\tcout<<\"checking \"<<x<<endl;\r\n\tmemset(vis,0,sizeof(vis));\r\n\tfor(int i=1;i<=n;i++) _edg[i]=edg[i];\r\n\tfor(int i=1;i<=n;i++)\r\n\t\tfor(auto &j:edg[i]) j.second=(j.second>=x?1:-1); \r\n\tfd=0;\r\n\tget_size(1,0);\r\n\tdfz(1);\r\n\tfor(int i=1;i<=n;i++) swap(_edg[i],edg[i]);\r\n\treturn fd;\r\n}\r\nint main(){\r\n\tios::sync_with_stdio(false);\r\n\tmsiz[0]=1e9;\r\n\tcin>>n>>L>>R;\r\n\tfor(int i=1;i<n;i++){\r\n\t\tint u,v,w;cin>>u>>v>>w;\r\n\t\tedg[u].push_back(MP(v,w));\r\n\t\tedg[v].push_back(MP(u,w));\r\n\t}\r\n\tint l=0,r=1e9,mid;\r\n\twhile(l<r){\r\n\t\tmid=l+r+1>>1;\r\n\t\tif(check(mid)) l=mid;\r\n\t\telse r=mid-1;\r\n\t}\r\n\tcheck(l);\r\n\tcout<<ans_u<<' '<<ans_v<<endl;\r\n\treturn 0;\r\n}\r\n"
}