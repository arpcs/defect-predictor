{
    "id": 227251157,
    "contestId": 873,
    "creationTimeSeconds": 1696797172,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 873,
        "index": "F",
        "name": "Forbidden Indices",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "dsu",
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 873,
        "members": [
            {
                "handle": "chingizhanbahovich"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1507817100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 260300800,
    "source": "//\r\n// Created by zair\r\n//\r\n#define _CRT_SECURE_NO_WARNINGS\r\n\r\n#include <vector>\r\n#include <iostream>\r\n#include <map>\r\n\r\nusing namespace std;\r\n\r\n//#pragma GCC optimize(\"O3,unroll-loops\")\r\n//#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef unsigned long long ull;\r\ntypedef vector<int> vi;\r\ntypedef vector<vector<int>> vii;\r\ntypedef vector<ll> vll;\r\ntypedef string str;\r\n\r\n#define IOS ios::sync_with_stdio(false); cin.tie(nullptr)\r\n#define in_v(a) {for (auto& _ : (a)) cin >> _; }\r\n#define nl cout << '\\n';\r\n#define out_v(a) {for (auto& _ : (a)) { cout << _ << \" \"; } nl; }\r\n#define sz(a) int(a.size())\r\n#define all(a) a.begin(), a.end()\r\n#define pb push_back\r\n\r\n#define TASK \"a\"\r\n#define FIO freopen(TASK\".in\",\"r\",stdin); freopen(TASK\".out\",\"w\",stdout);\r\n//#define int long long\r\n\r\nconst int MAXN = 2*1e6;\r\nvector<int> len(2 * MAXN);\r\nvector<int> link(2 * MAXN);\r\nvector<int> cnt(2 * MAXN);\r\nvector<map<char, int>> to(2 * MAXN);\r\nint length = 1, last = 0;\r\nvoid sa_init() {\r\n    for (auto& i: len) i = 0;\r\n    for (auto& i: link) i = -1;\r\n    for (auto& i: cnt) i = 0;\r\n}\r\nvoid sa_extend(char a) {\r\n    int cur = length;\r\n    ++length;\r\n    to[last][a] = cur;\r\n    len[cur] = len[last] + 1;\r\n    int p = link[last];\r\n    while (p != -1 and !to[p].contains(a)) {\r\n        to[p][a] = cur;\r\n        p = link[p];\r\n    }\r\n    if (p == -1) {\r\n        link[cur] = 0;\r\n        last = cur;\r\n        return;\r\n    }\r\n    int q = to[p][a];\r\n    if (len[p] + 1 == len[q]) {\r\n        link[cur] = q;\r\n        last = cur;\r\n        return;\r\n    }\r\n    int clone = length;\r\n    ++length;\r\n    len[clone] = len[p] + 1;\r\n    link[clone] = link[q];\r\n    to[clone] = to[q];\r\n    while (p != -1 and to[p].contains(a) and to[p][a] == q) {\r\n        to[p][a] = clone;\r\n        p = link[p];\r\n    }\r\n    link[cur] = clone;\r\n    link[q] = clone;\r\n    last = cur;\r\n}\r\n\r\nchar fake;\r\nbool used[2 * MAXN];\r\null ans = 0;\r\nvoid dfs(int v) {\r\n    used[v] = 1;\r\n    for (auto& [c, u]: to[v]) {\r\n        if (c == '#') continue;\r\n        if (!used[u]) dfs(u);\r\n        if (c == fake) cnt[v]++;\r\n        else cnt[v] += cnt[u];\r\n    }\r\n    ans = max(ull(len[v]) * cnt[v], ans);\r\n}\r\n\r\nvoid solve() {\r\n    sa_init();\r\n    int k;\r\n    cin >> k;\r\n    string s;\r\n    cin >> s;\r\n    string pro;\r\n    cin >> pro;\r\n    for (int i = 0; i < sz(pro); ++i)\r\n        if (pro[i] == '1') s[i] = '#';\r\n    for (auto& i: used) i = 0;\r\n    fake = char('z' + 1);\r\n    s += fake;\r\n    for (auto& c: s) sa_extend(c);\r\n    dfs(0);\r\n    cout << ans;\r\n}\r\n\r\nsigned main() {\r\n    IOS;\r\n    int t = 1;\r\n    while (t--)\r\n        solve();\r\n    return 0;\r\n}"
}