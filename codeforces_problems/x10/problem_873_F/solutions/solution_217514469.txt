{
    "id": 217514469,
    "contestId": 873,
    "creationTimeSeconds": 1691358903,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 873,
        "index": "F",
        "name": "Forbidden Indices",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "dsu",
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 873,
        "members": [
            {
                "handle": "coutjorhua"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1507817100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 21811200,
    "source": "#include <bits/stdc++.h>\r\n#define pb push_back\r\n#define inic ios_base::sync_with_stdio(false);\r\n#define inic2 cin.tie(NULL);\r\n#define inic3 cout.tie(NULL);\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define Rep0(i, n) for (ll i = 0; i < (ll)n; i++)\r\n#define Rep1(i, n) for (ll i = 1; i <= (ll)n; i++)\r\nconst ll MX = 3e5 + 2;\r\nconst ll MOD = 1e9 + 7;\r\nconst ll INF = 1e18;\r\nconst double INF_DOUBLE = 1e18 / 1.0;\r\nconst double EPS = 1e-8;\r\nconst double PI = acos(-1.0);\r\n\r\nconst int ALPH = 256;\r\nstruct SuffixArray {\r\n    vector<int> suffixArray;\r\n\r\n    SuffixArray() {}\r\n\r\n    void buildSuffix(string &s) { // Obtengo el arreglo de suffix array\r\n        char mnmChar = *min_element(s.begin(), s.end()) - 1;\r\n        s += mnmChar;\r\n        suffixArray = sortCyclic(s);\r\n        suffixArray.erase(suffixArray.begin());\r\n        s.pop_back();\r\n        // for(ll i=0;i<suffixArray.size();i++){\r\n        //     cout<<suffixArray[i]<<\" \";\r\n        // }cout<<endl;\r\n    }\r\n\r\n    void buildCyclicShift(string &s) {\r\n        suffixArray = sortCyclic(s);\r\n    }\r\n\r\n    vector<int> sortCyclic(const string &s) { // O(N log N)\r\n        int n = s.size();\r\n        vector<int> p(n), c(n), cnt(max(ALPH, n));\r\n        // counting sort\r\n        for (int i = 0; i < n; ++i) cnt[s[i]]++;\r\n        for (int i = 1; i < ALPH; ++i) cnt[i] += cnt[i - 1];\r\n        for (int i = 0; i < n; ++i) p[--cnt[s[i]]] = i;\r\n        c[p[0]] = 0;\r\n        int classes = 1;\r\n        for (int i = 1; i < n; ++i) {\r\n            if (s[p[i]] != s[p[i - 1]]) classes++;\r\n            c[p[i]] = classes - 1;\r\n        }\r\n        vector<int> pNew(n), cNew(n);\r\n        // radix sort\r\n        for (int k = 0; (1 << k) < n; k++) {\r\n            // sort pNew by the second substring\r\n            for (int i = 0; i < n; i++) {\r\n                cnt[i] = 0;\r\n                pNew[i] = p[i] - (1 << k);\r\n                if (pNew[i] < 0) pNew[i] += n;\r\n            }\r\n            // counting sort in the first substring\r\n            for (int i = 0; i < n; ++i) cnt[c[pNew[i]]]++;\r\n            for (int i = 1; i < classes; ++i) cnt[i] += cnt[i - 1];\r\n            for (int i = n - 1; i >= 0; --i) p[--cnt[c[pNew[i]]]] = pNew[i];\r\n            cNew[p[0]] = 0, classes = 1;\r\n            for (int i = 1; i < n; i++) {\r\n                int x = p[i] + (1 << k), y = p[i - 1] + (1 << k);\r\n                if (x >= n) x -= n;\r\n                if (y >= n) y -= n;\r\n                pair<int, int> cur = {c[p[i]], c[x]};\r\n                pair<int, int> prev = {c[p[i - 1]], c[y]};\r\n                if (cur != prev) classes++;\r\n                cNew[p[i]] = classes - 1;\r\n            }\r\n            c = cNew;\r\n        }\r\n        return p;\r\n    };\r\n\r\n    vector<ll> buildLCP(const string &s) { // O(n)\r\n        int n = s.size();\r\n        vector<ll> lcp(n - 1), pos(n);\r\n        for (int i = 0; i < n; ++i) pos[suffixArray[i]] = i;\r\n        for (int r = 0, k = 0; r < n; ++r) {\r\n            if (!pos[r]) continue;\r\n            int l = suffixArray[pos[r] - 1];\r\n            while (s[l + k] == s[r + k]) k++;\r\n            lcp[pos[r] - 1] = k;\r\n            k = max(0, k - 1);\r\n        }\r\n        return lcp;\r\n    }\r\n};\r\n\r\nll tamanio[MX], lider[MX];\r\nll find_lider(ll nodo) {\r\n    if (lider[nodo] == nodo) {\r\n        return nodo;\r\n    }\r\n    lider[nodo] = find_lider(lider[nodo]);\r\n    return lider[nodo];\r\n}\r\nvoid join(ll nodo_a, ll nodo_b) {\r\n    nodo_a = find_lider(nodo_a);\r\n    nodo_b = find_lider(nodo_b);\r\n    if (nodo_a != nodo_b) {\r\n        if (tamanio[nodo_a] >= tamanio[nodo_b]) {\r\n            tamanio[nodo_a] += tamanio[nodo_b];\r\n            lider[nodo_b] = nodo_a;\r\n        } else {\r\n            tamanio[nodo_b] += tamanio[nodo_a];\r\n            lider[nodo_a] = nodo_b;\r\n        }\r\n    }\r\n}\r\n\r\nll combine(ll x, ll y) {\r\n    return min(x, y);\r\n}\r\n\r\nstruct SegmentTree {\r\n    ll t[2 * MX];\r\n    int n;\r\n\r\n    void clear(int n) {\r\n        for (int i = 0; i < 2 * n; i++) {\r\n            t[i] = 0;\r\n        }\r\n        this->n = n;\r\n    }\r\n\r\n    void build(vector<ll> &a, ll id, ll tl, ll tr) { // O(n)\r\n        if (tl == tr) {\r\n            t[id] = a[tl];\r\n        } else {\r\n            ll tm = (tl + tr) / 2;\r\n            ll left = id + 1;\r\n            ll right = id + 2 * (tm - tl + 1);\r\n            build(a, left, tl, tm);\r\n            build(a, right, tm + 1, tr);\r\n            t[id] = combine(t[left], t[right]);\r\n        }\r\n    }\r\n\r\n    void build(vector<ll> &a) {\r\n        n = a.size();\r\n        build(a, 1, 0, n - 1);\r\n    }\r\n\r\n    ll query(ll l, ll r, ll id, ll tl, ll tr) { // O(logn)\r\n        if (l <= tl && tr <= r) return t[id];\r\n        ll tm = (tl + tr) / 2;\r\n        ll left = id + 1;\r\n        ll right = id + 2 * (tm - tl + 1);\r\n        if (r < tm + 1) return query(l, r, left, tl, tm);\r\n        else if (tm < l) return query(l, r, right, tm + 1, tr);\r\n        else return combine(query(l, r, left, tl, tm), query(l, r, right, tm + 1, tr));\r\n    }\r\n\r\n    ll query(ll l, ll r) {\r\n        assert(n > 0);\r\n        return query(l, r, 1, 0, n - 1);\r\n    }\r\n\r\n    void update(ll pos, ll val, ll id, ll tl, ll tr) { // O(logn)\r\n        if (tl == tr) {\r\n            t[id] = val;\r\n        } else {\r\n            ll tm = (tl + tr) / 2;\r\n            ll left = id + 1;\r\n            ll right = id + 2 * (tm - tl + 1);\r\n            if (pos <= tm) update(pos, val, left, tl, tm);\r\n            else update(pos, val, right, tm + 1, tr);\r\n            t[id] = combine(t[left], t[right]);\r\n        }\r\n    }\r\n\r\n    void update(ll pos, ll val) {\r\n        assert(n > 0);\r\n        update(pos, val, 1, 0, n - 1);\r\n    }\r\n} st;\r\n\r\nll valores[MX];\r\nchar vals[MX];\r\nint main() {\r\n    inic;\r\n    inic2;\r\n    ll n;\r\n    cin >> n;\r\n    string s;\r\n    cin >> s;\r\n    string cad = \"\";\r\n    for (ll i = s.size() - 1; i >= 0; i--) {\r\n        cad += s[i];\r\n    }\r\n    for (ll i = 0; i < s.size(); i++) {\r\n        cin >> vals[i];\r\n        valores[i] = vals[i] - '0';\r\n        // cin >> valores[i];\r\n    }\r\n    SuffixArray sa = SuffixArray();\r\n    sa.buildSuffix(cad);\r\n    vector<ll> vec = sa.buildLCP(cad);\r\n    st.build(vec);\r\n    vector<pair<ll, pair<ll, ll> > > vpapa;\r\n    vector<ll> vec2;\r\n\r\n    ll rp = 0;\r\n    ll cont = 0;\r\n    ll ant = -1;\r\n    for (ll i = 0; i < vec.size(); i++) {\r\n        if (valores[sa.suffixArray.size() - sa.suffixArray[i] - 1] != 1) {\r\n            rp = max(rp, ll(sa.suffixArray.size() - sa.suffixArray[i]));\r\n            if (ant + 1 != i) {\r\n                ll pp = st.query(ant + 1, i);\r\n                if (pp > 0) {\r\n                    vpapa.pb({pp, {i, ant}});\r\n                } else {\r\n                    vpapa.pb({vec[i], {i, i}});\r\n                }\r\n            } else {\r\n                vpapa.pb({vec[i], {i, ant}});\r\n            }\r\n            ant = i;\r\n        }\r\n        // else {\r\n        // if (i != 0) {\r\n        // }\r\n        // }\r\n    }\r\n    // cout << \"------------\" << endl;\r\n    // for (ll i = 0; i < sa.suffixArray.size(); i++) {\r\n    //     cout << sa.suffixArray[i] << \" asdas \" << endl;\r\n    // }\r\n    // for (ll i = 0; i < vec.size(); i++) {\r\n    //     cout << vec[i] << \" \";\r\n    // }\r\n    // cout << \"------------\" << endl;\r\n\r\n    sort(vpapa.begin(), vpapa.end());\r\n    fill(tamanio, tamanio + vec.size() + 1, 1);\r\n    iota(lider, lider + vec.size() + 1, 0);\r\n    if (vpapa.size() >= 1) {\r\n        for (ll i = vpapa.size() - 1; i >= 0; i--) {\r\n            if (vpapa[i].second.second != -1) {\r\n                join(vpapa[i].second.first, vpapa[i].second.second);\r\n            }\r\n            // join(vpapa[i].second.first, vpapa[i].second.second);\r\n            rp = max(rp, tamanio[find_lider(vpapa[i].second.first)] * vpapa[i].first);\r\n        }\r\n    }\r\n    cout << rp << endl;\r\n    return 0;\r\n}\r\n"
}