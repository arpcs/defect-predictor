{
    "id": 221743068,
    "contestId": 873,
    "creationTimeSeconds": 1693769291,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 873,
        "index": "F",
        "name": "Forbidden Indices",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "dsu",
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 873,
        "members": [
            {
                "handle": "davdwoian"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1507817100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 81,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 51097600,
    "source": "#include <iostream>\r\n#include <queue>\r\n\r\n#define maxn 200010\r\n#define ll long long\r\n\r\nusing namespace std;\r\n\r\nint n;\r\nstring s, f;\r\n\r\n\r\nstruct sam {\r\n    int link, len, nxt[26];\r\n    int right, ind, sz;\r\n} tr[maxn << 1];\r\n\r\nint root = 1, last = 1, z = 1;\r\n\r\nvoid sam(char c) {\r\n    int cur = ++ z;\r\n    int p = last;\r\n\r\n    tr[cur].len = tr[p].len + 1;\r\n    tr[cur].right = tr[p].right + 1;\r\n    tr[cur].sz = f[tr[p].right] == '0';\r\n\r\n    for (; !tr[p].nxt[c - 'a']; p = tr[p].link) tr[p].nxt[c - 'a'] = cur;\r\n\r\n    if (!p) {\r\n        tr[cur].link = root;\r\n    } else {\r\n        int q = tr[p].nxt[c - 'a'];\r\n        \r\n        if (tr[q].len == tr[p].len + 1) {\r\n            tr[cur].link = q;\r\n        } else {\r\n            int sq = ++ z;\r\n\r\n            tr[sq].link = tr[q].link;\r\n            tr[sq].len = tr[p].len + 1;\r\n            tr[sq].right = tr[q].right;\r\n            memcpy(tr[sq].nxt, tr[q].nxt, 26 * sizeof(int));\r\n\r\n            tr[cur].link = sq;\r\n            tr[q].link = sq;\r\n\r\n            for (; tr[p].nxt[c - 'a'] == q; p = tr[p].link) tr[p].nxt[c - 'a'] = sq;\r\n        }\r\n    }\r\n    \r\n    last = cur;\r\n}\r\n\r\nvoid dfs(int st, string s) {\r\n    for (int i = 0; i < 26; ++ i) {\r\n        if (tr[st].nxt[i]) dfs(tr[st].nxt[i], s + (char) ('a' + i));\r\n    }\r\n\r\n    cout << s << '\\n';\r\n}\r\n\r\nint main() {\r\n    // char s[maxn], f[maxn];\r\n\r\n\r\n    cin >> n >> s >> f;\r\n\r\n    for (int i = 0; i < n; ++ i) sam(s[i]);\r\n    for (int i = 2; i <= z; ++ i) tr[tr[i].link].ind ++;\r\n\r\n    queue<int> q;\r\n    for (int i = 1; i <= z; ++ i) {\r\n        if (!tr[i].ind) {\r\n            q.push(i);\r\n        }\r\n    }\r\n \r\n    while (!q.empty()) {\r\n         for (int sz = q.size(); sz; -- sz) {\r\n            int cur = q.front();\r\n            q.pop();\r\n\r\n            tr[tr[cur].link].ind --;\r\n            tr[tr[cur].link].sz += tr[cur].sz;\r\n\r\n            if (tr[tr[cur].link].ind == 0) q.push(tr[cur].link);\r\n        }\r\n    }\r\n\r\n    ll res = 0;\r\n    for (int i = 1; i <= z; ++ i) res = max(res, 1ll * tr[i].len * tr[i].sz);\r\n\r\n    cout << res;    \r\n}"
}