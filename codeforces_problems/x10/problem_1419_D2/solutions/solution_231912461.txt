{
    "id": 231912461,
    "contestId": 1419,
    "creationTimeSeconds": 1699435220,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1419,
        "index": "D2",
        "name": "Sage's Birthday (hard version)",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1419,
        "members": [
            {
                "handle": "Divyanshusharma3103"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1600526100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 1638400,
    "source": "// template taken from Striver_79\r\n// Remember you were also a novice when you started\r\n// hence never be rude to anyone who wants to learn something\r\n// Never open a ranklist untill and unless you are done with solving problems, wastes 3/4 minuts\r\n// Donot treat CP as a placement thing, love it and enjoy it, you will succeed for sure.\r\n// The goal is to solve problems most efficiently not just barely\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <vector>\r\n#include <map>\r\n#include <set>\r\n#include <string>\r\n#include <iostream>\r\n#include <algorithm>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\r\nconst int mod = 1e9 + 7;\r\n#define int long long\r\ntypedef long long ll;\r\ntypedef vector<ll> vi;\r\ntypedef vector<vector<int>> vii;\r\ntypedef vector<pair<int, int>> vpi;\r\ntypedef pair<int, int> pi;\r\nvoid myerase(ordered_set &t, int v)\r\n{\r\n    int rank = t.order_of_key(v);                     // Number of elements that are less than v in t\r\n    ordered_set::iterator it = t.find_by_order(rank); // Iterator that points to the (rank+1)th element in t\r\n    t.erase(it);\r\n}\r\nint power(long long x, unsigned int y, int p = 1e9 + 7)\r\n{\r\n    int res = 1; // Initialize result\r\n\r\n    x = x % p; // Update x if it is more than or\r\n               // equal to p\r\n\r\n    if (x == 0)\r\n        return 0; // In case x is divisible by p;\r\n\r\n    while (y > 0)\r\n    {\r\n        // If y is odd, multiply x with result\r\n        if (y & 1)\r\n            res = (res * x) % p;\r\n\r\n        // y must be even now\r\n        y = y >> 1; // y = y/2\r\n        x = (x * x) % p;\r\n    }\r\n    return res;\r\n}\r\n\r\n// C function for extended Euclidean Algorithm (used to\r\n// find modular inverse.\r\nint gcdExtended(int a, int b, int *x, int *y)\r\n{\r\n    // Base Case\r\n    if (a == 0)\r\n    {\r\n        *x = 0, *y = 1;\r\n        return b;\r\n    }\r\n\r\n    int x1, y1; // To store results of recursive call\r\n    int gcd = gcdExtended(b % a, a, &x1, &y1);\r\n\r\n    // Update x and y using results of recursive\r\n    // call\r\n    *x = y1 - (b / a) * x1;\r\n    *y = x1;\r\n\r\n    return gcd;\r\n}\r\n\r\nint modInverse(int b, int m)\r\n{\r\n    int x, y; // used in extended GCD algorithm\r\n    int g = gcdExtended(b, m, &x, &y);\r\n\r\n    // Return -1 if b and m are not co-prime\r\n    if (g != 1)\r\n        return -1;\r\n\r\n    // m is added to handle negative x\r\n    return (x % m + m) % m;\r\n}\r\n\r\n// Function to compute a/b under modulo m\r\nint modDivide(int a, int b, int m)\r\n{\r\n    a = a % m;\r\n    int inv = modInverse(b, m);\r\n    if (inv == -1)\r\n        return -1;\r\n    else\r\n        return (inv * a) % m;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    // Do not get stuck on a single approach for long, think of multiple ways\r\n    ll n;\r\n    \r\n    cin >> n;\r\n    \r\n    vi arr(n, 0);\r\n    \r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        cin >> arr[i];\r\n    }\r\n\r\n    sort(arr.begin(),arr.end());\r\n\r\n    vector<int> ans(n,0);\r\n    int x=n-1;\r\n    for(int i=n-1;i>=0;i=i-2)\r\n    {\r\n        ans[i]=arr[x];\r\n        x--;\r\n    }\r\n    x=0;\r\n    for(int i=n-2;i>=0;i=i-2)\r\n    {\r\n        ans[i]=arr[x];\r\n        x++;\r\n    }\r\n    int c=0;\r\n    for(int i=1;i<n-1;i++)\r\n    {\r\n        if(ans[i-1]>ans[i] && ans[i]<ans[i+1])\r\n        {\r\n            c++;\r\n        }\r\n    }\r\n    cout<<c<<\"\\n\";\r\n    for(auto it:ans)\r\n    {\r\n        cout<<it<<\" \";\r\n    }\r\n    cout<<\"\\n\";\r\n\r\n}\r\nint32_t main()\r\n{\r\n    // hamare saath shree raghunath to kisi baat ki chinta nahi\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    int t = 1;\r\n    // cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}