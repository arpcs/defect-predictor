{
    "id": 236338783,
    "contestId": 1419,
    "creationTimeSeconds": 1702038286,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1419,
        "index": "D2",
        "name": "Sage's Birthday (hard version)",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "binary search",
            "brute force",
            "constructive algorithms",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1419,
        "members": [
            {
                "handle": "Mahbub_Ahmed"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1600526100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 2969600,
    "source": "/**\r\n *   Author : Mahbub_Ahmed\r\n *   Created: 2023-12-08 17:02:18\r\n **/\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define FastIO                        \\\r\n    ios_base::sync_with_stdio(false); \\\r\n    cin.tie(NULL);\r\n#define en '\\n'\r\n#define YES cout << \"YES\" << en\r\n#define NO cout << \"NO\" << en\r\n#define yes cout << \"Yes\" << en\r\n#define no cout << \"No\" << en\r\n#define fill_number(x, n) setfill('0') << setw(n) << (x)\r\n#define precision_number(x, n) fixed << setprecision(n) << (x)\r\ntemplate <typename T>\r\nT lcm(T a, T b)\r\n{\r\n    return (a * (b / __gcd(a, b)));\r\n}\r\n\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x)       \\\r\n    cerr << #x << \" \"; \\\r\n    _print(x);         \\\r\n    cerr << en;\r\n#else\r\n#define debug(x)\r\n#endif\r\n\r\nvoid _print(ll t) { cerr << t; }\r\nvoid _print(int t) { cerr << t; }\r\nvoid _print(string t) { cerr << t; }\r\nvoid _print(char t) { cerr << t; }\r\nvoid _print(lld t) { cerr << t; }\r\nvoid _print(double t) { cerr << t; }\r\nvoid _print(ull t) { cerr << t; }\r\n\r\ntemplate <class T, class V>\r\nvoid _print(pair<T, V> p);\r\ntemplate <class T>\r\nvoid _print(vector<T> v);\r\ntemplate <class T>\r\nvoid _print(set<T> v);\r\ntemplate <class T, class V>\r\nvoid _print(map<T, V> v);\r\ntemplate <class T>\r\nvoid _print(multiset<T> v);\r\ntemplate <class T, class V>\r\nvoid _print(pair<T, V> p)\r\n{\r\n    cerr << \"{\";\r\n    _print(p.ff);\r\n    cerr << \",\";\r\n    _print(p.ss);\r\n    cerr << \"}\";\r\n}\r\ntemplate <class T>\r\nvoid _print(vector<T> v)\r\n{\r\n    cerr << \"[ \";\r\n    for (T i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\ntemplate <class T>\r\nvoid _print(set<T> v)\r\n{\r\n    cerr << \"[ \";\r\n    for (T i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\ntemplate <class T>\r\nvoid _print(multiset<T> v)\r\n{\r\n    cerr << \"[ \";\r\n    for (T i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\ntemplate <class T, class V>\r\nvoid _print(map<T, V> v)\r\n{\r\n    cerr << \"[ \";\r\n    for (auto i : v)\r\n    {\r\n        _print(i);\r\n        cerr << \" \";\r\n    }\r\n    cerr << \"]\";\r\n}\r\n\r\n// Sum\r\nstruct FenwickTree\r\n{\r\n    vector<int> bit; // binary indexed tree\r\n    int n;\r\n\r\n    FenwickTree(int n)\r\n    {\r\n        this->n = n;\r\n        bit.assign(n, 0);\r\n    }\r\n    FenwickTree(vector<int> a) : FenwickTree(a.size())\r\n    {\r\n        for (size_t i = 0; i < a.size(); i++)\r\n            add(i, a[i]);\r\n    }\r\n    int sum(int r)\r\n    {\r\n        int ret = 0;\r\n        for (; r >= 0; r = (r & (r + 1)) - 1)\r\n            ret += bit[r];\r\n        return ret;\r\n    }\r\n\r\n    int sum(int l, int r)\r\n    {\r\n        return sum(r) - sum(l - 1);\r\n    }\r\n\r\n    void add(int idx, int delta)\r\n    {\r\n        for (; idx < n; idx = idx | (idx + 1))\r\n            bit[idx] += delta;\r\n    }\r\n};\r\n\r\n// minimum\r\nstruct FenwickTreeMin\r\n{\r\n    vector<int> bit;\r\n    int n;\r\n    const int INF = (int)1e9;\r\n\r\n    FenwickTreeMin(int n)\r\n    {\r\n        this->n = n;\r\n        bit.assign(n, INF);\r\n    }\r\n\r\n    FenwickTreeMin(vector<int> a) : FenwickTreeMin(a.size())\r\n    {\r\n        for (size_t i = 0; i < a.size(); i++)\r\n            update(i, a[i]);\r\n    }\r\n\r\n    int getmin(int r)\r\n    {\r\n        int ret = INF;\r\n        for (; r >= 0; r = (r & (r + 1)) - 1)\r\n            ret = min(ret, bit[r]);\r\n        return ret;\r\n    }\r\n\r\n    void update(int idx, int val)\r\n    {\r\n        for (; idx < n; idx = idx | (idx + 1))\r\n            bit[idx] = min(bit[idx], val);\r\n    }\r\n};\r\n\r\n// const ll sieve_N = 2e7;\r\n// bool is_prime[sieve_N + 1];\r\n// vector<ll> primes;\r\n\r\n// void sieve()\r\n// {\r\n//     fill(is_prime, is_prime + sieve_N + 1, true);\r\n//     is_prime[0] = is_prime[1] = false;\r\n\r\n//     for (ll i = 2; i * i <= sieve_N; i++)\r\n//     {\r\n//         if (is_prime[i])\r\n//         {\r\n//             for (ll j = i * i; j <= sieve_N; j += i)\r\n//             {\r\n//                 is_prime[j] = false;\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     for (ll i = 2; i <= sieve_N; i++)\r\n//     {\r\n//         if (is_prime[i])\r\n//         {\r\n//             primes.push_back(i);\r\n//         }\r\n//     }\r\n// }\r\n\r\nvoid TEST_CASES(ll testCase)\r\n{\r\n    ll n;\r\n    cin >> n;\r\n    vector<ll> v(n);\r\n    for (ll i = 0; i < n; i++)\r\n    {\r\n        cin >> v[i];\r\n    }\r\n    sort(v.rbegin(), v.rend());\r\n    vector<ll> ans;\r\n    for (ll i = 0; i < n; i++)\r\n    {\r\n        if (i % 2 == 0)\r\n        {\r\n            ans.push_back(v[i / 2]);\r\n        }\r\n        else\r\n        {\r\n            ans.push_back(v[n - (i / 2) - 1]);\r\n        }\r\n    }\r\n    ll count = 0;\r\n    for (ll i = 1; i < ans.size() - 1; i++)\r\n    {\r\n        if (ans[i] < ans[i - 1] && ans[i] < ans[i + 1])\r\n        {\r\n            count++;\r\n        }\r\n    }\r\n    cout << count << en;\r\n    for (auto &x : ans)\r\n    {\r\n        cout << x << \" \";\r\n    }\r\n}\r\n\r\nint32_t main()\r\n{\r\n    FastIO;\r\n\r\n    ll t = 1;\r\n    // cin >> t;\r\n    for (ll test = 1; test <= t; test++)\r\n    {\r\n        TEST_CASES(test);\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}