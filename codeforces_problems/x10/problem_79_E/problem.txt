{
    "contestId": 79,
    "index": "E",
    "name": "Security System",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2900,
    "tags": [
        "math"
    ],
    "desc": {
        "title": "E. Security System",
        "statement": "<p>Fox Ciel safely returned to her castle, but there was something wrong with the security system of the castle: sensors attached in the castle were covering her.</p><p>Ciel is at point <span class=\"tex-span\">(1,\u20091)</span> of the castle now, and wants to move to point <span class=\"tex-span\">(<i>n</i>,\u2009<i>n</i>)</span>, which is the position of her room. By one step, Ciel can move from point <span class=\"tex-span\">(<i>x</i>,\u2009<i>y</i>)</span> to either <span class=\"tex-span\">(<i>x</i>\u2009+\u20091,\u2009<i>y</i>)</span> (rightward) or <span class=\"tex-span\">(<i>x</i>,\u2009<i>y</i>\u2009+\u20091)</span> (upward).</p><p>In her castle, <span class=\"tex-span\"><i>c</i><sup class=\"upper-index\">2</sup></span> sensors are set at points <span class=\"tex-span\">(<i>a</i>\u2009+\u2009<i>i</i>,\u2009<i>b</i>\u2009+\u2009<i>j</i>)</span> (for every integer <span class=\"tex-span\"><i>i</i></span> and <span class=\"tex-span\"><i>j</i></span> such that: <span class=\"tex-span\">0\u2009\u2264\u2009<i>i</i>\u2009&lt;\u2009<i>c</i>,\u20090\u2009\u2264\u2009<i>j</i>\u2009&lt;\u2009<i>c</i></span>).</p><p>Each sensor has a count value and decreases its count value every time Ciel moves. Initially, the count value of each sensor is <span class=\"tex-span\"><i>t</i></span>. Every time Ciel moves to point <span class=\"tex-span\">(<i>x</i>,\u2009<i>y</i>)</span>, the count value of a sensor at point <span class=\"tex-span\">(<i>u</i>,\u2009<i>v</i>)</span> decreases by (<span class=\"tex-span\">|<i>u</i>\u2009-\u2009<i>x</i>|\u2009+\u2009|<i>v</i>\u2009-\u2009<i>y</i>|</span>). When the count value of some sensor becomes <span class=\"tex-font-style-bf\">strictly less than</span> <span class=\"tex-span\">0</span>, the sensor will catch Ciel as a suspicious individual!</p><p>Determine whether Ciel can move from <span class=\"tex-span\">(1,\u20091)</span> to <span class=\"tex-span\">(<i>n</i>,\u2009<i>n</i>)</span> without being caught by a sensor, and if it is possible, output her steps. Assume that Ciel can move to every point even if there is a censor on the point.</p>",
        "inputSpecification": "<p>In the first line there are five integers <span class=\"tex-span\"><i>n</i>,\u2009<i>t</i>,\u2009<i>a</i>,\u2009<i>b</i>,\u2009<i>c</i></span> (<span class=\"tex-span\">2\u2009\u2264\u2009<i>n</i>\u2009\u2264\u20092\u00b710<sup class=\"upper-index\">5</sup>,\u2009</span> <span class=\"tex-span\">0\u2009\u2264\u2009<i>t</i>\u2009\u2264\u200910<sup class=\"upper-index\">14</sup>,\u2009</span> <span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i>\u2009\u2264\u2009<i>n</i>\u2009-\u2009<i>c</i>\u2009+\u20091,\u2009</span> <span class=\"tex-span\">1\u2009\u2264\u2009<i>b</i>\u2009\u2264\u2009<i>n</i>\u2009-\u2009<i>c</i>\u2009+\u20091,\u2009</span> <span class=\"tex-span\">1\u2009\u2264\u2009<i>c</i>\u2009\u2264\u2009<i>n</i></span>).</p><p>Please do not use the <span class=\"tex-font-style-tt\">%lld</span> specificator to read or write 64-bit integers in C++. It is preferred to use the <span class=\"tex-font-style-tt\">cin</span> stream (also you may use the <span class=\"tex-font-style-tt\">%I64d</span> specificator).</p>",
        "outputSpecification": "<p>If Ciel's objective is possible, output in first line <span class=\"tex-span\">2<i>n</i>\u2009-\u20092</span> characters that represent her feasible steps, where <span class=\"tex-span\"><i>i</i></span>-th character is <span class=\"tex-font-style-tt\">R</span> if <span class=\"tex-span\"><i>i</i></span>-th step is moving rightward, or <span class=\"tex-font-style-tt\">U</span> if moving upward. If there are several solution, output <span class=\"tex-font-style-bf\">lexicographically first</span> one. Character <span class=\"tex-font-style-tt\">R</span> is lexicographically earlier than the character <span class=\"tex-font-style-tt\">U</span>.</p><p>If her objective is impossible, output <span class=\"tex-font-style-tt\">Impossible</span>.</p>",
        "samples": [
            {
                "input": "5 25 2 4 1<br/>",
                "output": "RRUURURU<br/>"
            },
            {
                "input": "3 6 1 2 2<br/>",
                "output": "URUR<br/>"
            },
            {
                "input": "3 5 1 2 2<br/>",
                "output": "Impossible<br/>"
            },
            {
                "input": "20 492 11 4 8<br/>",
                "output": "RRRRRRRRRRRRRRRRUUUUURUUUUURRUUUUUUUUU<br/>"
            }
        ],
        "note": "<p>The answers for the first sample and the second sample are shown on the picture: </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/d05c179c8235f0002791fb1987a9250124a8d60a.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center> Here, a red point represents a point that contains a sensor."
    },
    "suggested_categories": [
        "algorithms",
        "pathfinding",
        "graph theory",
        "dynamic programming",
        "optimization",
        "computational geometry",
        "mathematics",
        "combinatorics",
        "data structures",
        "complexity theory",
        "robotics",
        "game theory",
        "security",
        "sensors",
        "artificial intelligence",
        "computer vision",
        "geospatial analysis",
        "motion planning",
        "cryptography",
        "network security"
    ]
}