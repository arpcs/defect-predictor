{
    "id": 232897696,
    "contestId": 1005,
    "creationTimeSeconds": 1700075963,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1005,
        "index": "D",
        "name": "Polycarp and Div 3",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "dp",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1005,
        "members": [
            {
                "handle": "ashborn_K"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1531150500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n#define ff              first\r\n#define ss              second\r\n#define int             long long int\r\n#define ll              long long\r\n#define pb              push_back\r\n#define pii             pair<int,int>\r\n#define vi              vector<int>\r\n#define vvi             vector<vi>\r\n#define mii             map<int,int>\r\n#define pqb             priority_queue<int>\r\n#define pqs             priority_queue<int,vi,greater<int> >\r\n#define setbits(x)      __builtin_popcountll(x)\r\n#define zrobits(x)      __builtin_ctzll(x)\r\n#define MOD             1000000007\r\n#define all(v)         (v).begin(),(v).end()\r\n#define inf             1e18\r\n#define ps(x,y)         fixed<<setprecision(y)<<x\r\n#define mk(arr,n,type)  type *arr=new type[n];\r\n#define w(x)            int x; cin>>x; while(x--)\r\n\r\nmt19937                 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n\r\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;\r\n\r\n\r\nconst int md= 998244353;\r\n\r\n\r\nlong long binpow(long long a, long long b, long long m) {\r\n   // a %= m;\r\n    long long res = 1;\r\n    while (b > 0) {\r\n        if (b & 1)\r\n            res = res * a ;\r\n        a = a * a ;\r\n        b >>= 1;\r\n    }\r\n    return res;\r\n}\r\n \r\nint add(int x, int y)\r\n{\r\n    x = (x + y)%MOD;\r\n    // while(x >= MOD) x -= MOD;\r\n    // while(x < 0) x += MOD;\r\n    return x;\r\n}   \r\n\r\nint sub(int x, int y)\r\n{\r\n    return add(x, -y);\r\n}   \r\n\r\n\r\n\r\n\r\n\r\nbool pS(int x){\r\n    \r\n    if(ceil((double)sqrt(x))==floor((double)sqrt(x))){\r\n        return true;\r\n    }\r\n    else{\r\n        return false;\r\n    }\r\n}\r\n\r\n\r\n// unsigned int countSetBits(unsigned int n)\r\n// {\r\n//     unsigned int count = 0;\r\n//     while (n) {\r\n//         count += n & 1;\r\n//         n >>= 1;\r\n//     }\r\n//     return count;\r\n// }\r\n\r\n\r\n \r\n//  void make_set(ll v,vector<int>&parent,vector<int>&size) {\r\n//     parent[v] = v;\r\n//     size[v] = 1;\r\n// }\r\n \r\n \r\n \r\n \r\n \r\n \r\n//  int get(vector<int>&parent,ll a){\r\n\t \r\n// \t return (parent[a]==a)?a:get(parent,parent[a]);\r\n\t \r\n\t \r\n//  }\r\n \r\n//  void Union(vector<int>&parent,vector<int>&size,int a,int b){\r\n\t \r\n// \t  a = get(parent,a);\r\n//     b = get(parent,b);\r\n//     if (a != b) {\r\n//         if (size[a] < size[b])\r\n//             swap(a, b);\r\n//         parent[b] = a;\r\n//         size[a] += size[b];\r\n//     }\r\n\t \r\n//  }\r\n\t \r\n\r\n\r\n\r\nbool isPerfectSquare(long double x)\r\n{\r\n    // Find floating point value of\r\n    // square root of x.\r\n    if (x >= 0) {\r\n \r\n        long long sr = sqrt(x);\r\n         \r\n        // if product of square root\r\n        //is equal, then\r\n        // return T/F\r\n        return (sr * sr == x);\r\n    }\r\n    // else return false if n<0\r\n    return false;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\nbool isPrime(int x) {\r\n    for (int d = 2; d * d <= x; d++) {\r\n        if (x % d == 0)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n \r\nbool cmp(pair<int,int>&a,pair<int,int>&b){\r\n     if(a.ff==b.ff){\r\n        return a.ss<b.ss;\r\n     }\r\n     return a.ff>b.ff;\r\n}\r\n\r\n\r\n\r\n\r\nint mul(int x, int y)\r\n{\r\n    return (x * 1ll * y) % MOD;\r\n}\r\n\r\n\r\nint lcm(int a,int b){\r\n    int l=a*1LL*b;\r\n    l=l/__gcd(a,b);\r\n    return l;\r\n}\r\n\r\n\r\nint setBitNumber(int n)\r\n{\r\n    if (n == 0)\r\n        return 0;\r\n \r\n    int msb = 0;\r\n    n = n / 2;\r\n    while (n != 0) {\r\n        n = n / 2;\r\n        msb++;\r\n    }\r\n    \r\n    return msb;\r\n}\r\n\r\n\r\n\r\n\r\nint giveSum(string &s){\r\n    int n=(int)s.size();\r\n    int sum=0;\r\n    for(int i=0;i<n;i++){\r\n        sum+=(s[i]-'0');\r\n    }\r\n    return sum;\r\n}\r\n\r\n\r\n\r\nfloat squareRoot(int number, int precision)\r\n{\r\n    int start = 0, end = number;\r\n    int mid;\r\n \r\n    // variable to store the answer\r\n    float ans;\r\n \r\n    // for computing integral part\r\n    // of square root of number\r\n    while (start <= end) {\r\n        mid = (start + end) / 2;\r\n        if (mid * mid == number) {\r\n            ans = mid;\r\n            break;\r\n        }\r\n \r\n        // incrementing start if integral\r\n        // part lies on right side of the mid\r\n        if (mid * mid < number) {\r\n            start = mid + 1;\r\n            ans = mid;\r\n        }\r\n \r\n        // decrementing end if integral part\r\n        // lies on the left side of the mid\r\n        else {\r\n            end = mid - 1;\r\n        }\r\n    }\r\n \r\n    // For computing the fractional part\r\n    // of square root upto given precision\r\n    float increment = 0.1;\r\n    for (int i = 0; i < precision; i++) {\r\n        while (ans * ans <= number) {\r\n            ans += increment;\r\n        }\r\n \r\n        // loop terminates when ans * ans > number\r\n        ans = ans - increment;\r\n        increment = increment / 10;\r\n    }\r\n    return ans;\r\n}\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid solve(){\r\n\r\nstring s;\r\ncin>>s;\r\nint csum=0;\r\nint ans=0;\r\nint n=(int)s.size();\r\nfor(int i=0;i<n;i++){\r\n    int curr=s[i]-'0';\r\n    csum+=curr;\r\n    if(csum%3==0)ans++,csum=0;\r\n    else if(curr==0 && ((i==n-1LL) || s[i+1]=='0'))ans++,csum=0;\r\n}\r\ncout<<ans<<\"\\n\";\r\n\r\n}\r\n\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    int tc; \r\n \r\n   //cin>>tc;\r\n   tc=1;\r\n  \r\n\r\n    while(tc--){\r\n       \r\n     solve();\r\n    }\r\n         exit(0);\r\n\r\n    return 0;\r\n}"
}