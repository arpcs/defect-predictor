{
    "id": 132599973,
    "contestId": 477,
    "creationTimeSeconds": 1634810301,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 477,
        "index": "E",
        "name": "Dreamoon and Notepad",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 477,
        "members": [
            {
                "handle": "BlueDiamond"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1413122400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\nbool home = 1;\r\n\r\n\r\nconst int N = (int) 4e5 + 7;\r\nconst int INF = (int) 1e9;\r\n\r\nclass minsegtree {\r\npublic:\r\n  int n;\r\n  vector<int> mn;\r\n\r\n  minsegtree(int n) : n(n) {\r\n    mn.resize(4 * (n + 7));\r\n  }\r\n\r\n  void upd(int v, int tl, int tr, int i, int val) {\r\n    if (tr < i || i < tl) return;\r\n    if (tl == tr) {\r\n      mn[v] = val;\r\n      return;\r\n    }\r\n    int tm = (tl + tr) / 2;\r\n    upd(2 * v, tl, tm, i, val);\r\n    upd(2 * v + 1, tm + 1, tr, i, val);\r\n    mn[v] = min(mn[2 * v], mn[2 * v + 1]);\r\n  }\r\n\r\n  int get(int v, int tl, int tr, int l, int r) {\r\n    if (tr < l || r < tl) return INF;\r\n    if (l <= tl && tr <= r) return mn[v];\r\n    int tm = (tl + tr) / 2;\r\n    return min(get(2 * v, tl, tm, l, r), get(2 * v + 1, tm + 1, tr, l, r));\r\n  }\r\n\r\n  void upd(int i, int val) {\r\n    upd(1, 0, n, i, val);\r\n  }\r\n\r\n  int get(int l, int r) {\r\n    return get(1, 0, n, l, r);\r\n  }\r\n\r\n\r\n};\r\n\r\n\r\nint n;\r\nint a[2][N];\r\nint type[N];\r\nint r1[N];\r\nint r2[N];\r\nint c1[N];\r\nint c2[N];\r\nint sol[N];\r\nint q;\r\n\r\nint treemna[2][4 * N];\r\n\r\nvoid buildmna(int tp, int v, int tl, int tr) {\r\n  if (tl == tr) {\r\n    treemna[tp][v] = a[tp][tl];\r\n  } else {\r\n    int tm = (tl + tr) / 2;\r\n    buildmna(tp, 2 * v, tl, tm);\r\n    buildmna(tp, 2 * v + 1, tm + 1, tr);\r\n    treemna[tp][v] = min(treemna[tp][2 * v], treemna[tp][2 * v + 1]);\r\n  }\r\n}\r\n\r\nint getmna(int tp, int v, int tl, int tr, int l, int r) {\r\n  if (tr < l || r < tl) return INF;\r\n  if (l <= tl && tr <= r) return treemna[tp][v];\r\n  int tm = (tl + tr) / 2;\r\n  return min(getmna(tp, 2 * v, tl, tm, l, r), getmna(tp, 2 * v + 1, tm + 1, tr, l, r));\r\n}\r\n\r\nvector<int> lar1[2][N];\r\nvector<int> lar2[2][N];\r\nint bb[N];\r\n\r\nsigned main() {\r\n  ios::sync_with_stdio(0); cin.tie(0);\r\n\r\n  #ifdef ONLINE_JUDGE\r\n  home = 0;\r\n  #endif // ONLINE_JUDGE\r\n\r\n\r\n  if (home) {\r\n    freopen (\"input\", \"r\", stdin);\r\n  }\r\n  cin >> n;\r\n  for (int i = 1; i <= n; i++) {\r\n    cin >> a[0][i];\r\n    a[1][n + 1 - i] = a[0][i];\r\n  }\r\n  buildmna(0, 1, 1, n);\r\n  buildmna(1, 1, 1, n);\r\n\r\n\r\n  cin >> q;\r\n  for (int i = 1; i <= q; i++) {\r\n    cin >> r1[i] >> c1[i] >> r2[i] >> c2[i];\r\n    if (r1[i] <= r2[i]) {\r\n      type[i] = 0;\r\n    } else {\r\n      type[i] = 1;\r\n      r1[i] = n + 1 - r1[i];\r\n      r2[i] = n + 1 - r2[i];\r\n    }\r\n    lar1[type[i]][r1[i]].push_back(i);\r\n    lar2[type[i]][r2[i]].push_back(i);\r\n    sol[i] = INF;\r\n  }\r\n  for (int it = 1; it <= q; it++) {\r\n    { /// normal + down\r\n      sol[it] = min(sol[it], r2[it] - r1[it] + 1 + c2[it]);\r\n    }\r\n    { /// normal\r\n      sol[it] = min(sol[it], r2[it] - r1[it] + abs(c2[it] - min(c1[it], getmna(type[it], 1, 1, n, r1[it], r2[it]))));\r\n    }\r\n  }\r\n  for (int tp = 0; tp < 2; tp++) { /// normal + where up\r\n    vector<int> stk;\r\n    for (int i = 1; i <= n; i++){\r\n      while (!stk.empty() && a[tp][i] <= a[tp][stk.back()]) {\r\n        stk.pop_back();\r\n      }\r\n      stk.push_back(i);\r\n      for (auto &it : lar2[tp][i]) {\r\n        int mn = INF;\r\n        int l = 0, r = (int) stk.size() - 1, pos = (int) stk.size();\r\n        while (l <= r) {\r\n          int m = (l + r) / 2;\r\n          if (r1[it] <= stk[m]) {\r\n            pos = m;\r\n            r = m - 1;\r\n          } else {\r\n            l = m + 1;\r\n          }\r\n        }\r\n        if (pos < (int) stk.size()) {\r\n          l = pos;\r\n          r = (int) stk.size() - 1;\r\n          int lo = l, hi = r, lar2st1 = l - 1;\r\n          while (lo <= hi) {\r\n            int m = (lo + hi) / 2;\r\n            if (c2[it] >= a[tp][stk[m]]) {\r\n              lar2st1 = m;\r\n              lo = m + 1;\r\n            } else {\r\n              hi = m - 1;\r\n            }\r\n          }\r\n          if (l <= lar2st1 && lar2st1 <= r) mn = min(mn, abs(c2[it] - a[tp][stk[lar2st1]]));\r\n          if (l <= lar2st1 + 1 && lar2st1 + 1 <= r) mn = min(mn, abs(c2[it] - a[tp][stk[lar2st1 + 1]]));\r\n        }\r\n        sol[it] = min(sol[it], r2[it] - r1[it] + mn + 1);\r\n      }\r\n    }\r\n  }\r\n  minsegtree t1(n), t2(n);\r\n  for (int tp = 0; tp < 2; tp++) { /// go back normal\r\n    vector<int> stk;\r\n    for (int i = 1; i <= n; i++){\r\n      for (auto &it : lar1[tp][i]) {\r\n        bb[it] = INF;\r\n        int mn = min(getmna(tp, 1, 1, n, r1[it], r2[it]), c1[it]);\r\n\r\n        for (auto &bk : stk) {\r\n          if (home) {\r\n            cout << (mn >= a[type[it]][bk]) << \" \";\r\n          }\r\n          if (mn < a[type[it]][bk]) continue;\r\n\r\n          bb[it] = min(bb[it], r2[it] - r1[it] + abs(c2[it] - a[type[it]][bk]) + 2 * (r1[it] - bk));\r\n        }\r\n        {\r\n          int kek = INF;\r\n          int l = 0, r = (int) stk.size() - 1, lastgood = -1;\r\n          while (l <= r) {\r\n            int m = (l + r) / 2;\r\n            int bk = stk[m];\r\n            if (mn >= a[type[it]][bk]) {\r\n              lastgood = m;\r\n              l = m + 1;\r\n            } else {\r\n              r = m - 1;\r\n            }\r\n          }\r\n          if (0 <= lastgood) {\r\n\r\n            int lo = 0, hi = lastgood, lastsmall = -1;\r\n            while (lo <= hi) {\r\n              int mid = (lo + hi) / 2;\r\n              if (c2[it] > a[type[it]][stk[mid]]) {\r\n                lastsmall = mid;\r\n                lo = mid + 1;\r\n              } else {\r\n                hi = mid - 1;\r\n              }\r\n            }\r\n\r\n            if (0 <= lastsmall) {\r\n              kek = min(kek, t1.get(0, lastsmall) + c2[it] + r1[it] + r2[it]);\r\n            }\r\n            if (lastsmall + 1 <= lastgood) {\r\n              kek = min(kek, t2.get(lastsmall + 1, lastgood) - c2[it] + r1[it] + r2[it]);\r\n            }\r\n          }\r\n          kek += ;\r\n\r\n          if (bb[it] != INF) {\r\n            assert(kek == bb[it]);\r\n          }\r\n        }\r\n\r\n      }\r\n      while (!stk.empty() && a[tp][i] <= a[tp][stk.back()]) {\r\n        stk.pop_back();\r\n      }\r\n      t1.upd((int) stk.size(), -a[tp][i] - 2 * i);\r\n      t2.upd((int) stk.size(), a[tp][i] - 2 * i);\r\n      stk.push_back(i);\r\n    }\r\n  }\r\n  /**\r\n\r\n  XX\r\n  XXXXX\r\n  XX in stack\r\n  XXXXX in stack\r\n  XXXXXXXXX\r\n  XXXXXXXX in stack\r\n  XXXXXXXXXX in stack\r\n\r\n  **/\r\n  for (int it = 1; it <= q; it++) {\r\n    { /// go back normal\r\n      int brute = INF;\r\n      for (int bk = r1[it] - 1; bk >= 1; bk--) {\r\n        int cur = c1[it];\r\n        for (int i = bk; i <= r2[it]; i++) {\r\n          cur = min(cur, a[type[it]][i]);\r\n        }\r\n        if (cur == a[type[it]][bk]) {\r\n          brute = min(brute, r2[it] - r1[it] + abs(c2[it] - cur) + 2 * (r1[it] - bk));\r\n        }\r\n      }\r\n      assert(brute == bb[it]);\r\n      sol[it] = min(sol[it], bb[it]);\r\n    }\r\n    { /// go back + up\r\n      for (int bk = r1[it] - 1; bk >= 1; bk--) {\r\n        bool ok = 1;\r\n        for (int i = bk; i <= r2[it]; i++) {\r\n          if (a[type[it]][i] < a[type[it]][bk]) {\r\n            ok = 0;\r\n            break;\r\n          }\r\n        }\r\n        if (ok) {\r\n          sol[it] = min(sol[it], r2[it] - r1[it] + abs(c2[it] - a[type[it]][bk]) + 2 * (r1[it] - bk) + 1);\r\n        }\r\n      }\r\n    }\r\n    { /// go after normal\r\n      for (int aft = r2[it] + 1; aft <= n; aft++) {\r\n        int cur = c1[it];\r\n        for (int i = r1[it]; i <= aft; i++) {\r\n          cur = min(cur, a[type[it]][i]);\r\n        }\r\n        sol[it] = min(sol[it], r2[it] - r1[it] + abs(c2[it] - cur) + 2 * (aft - r2[it]));\r\n      }\r\n    }\r\n    { /// go after + up\r\n      for (int aft = r2[it] + 1; aft <= n; aft++) {\r\n        int cur = a[type[it]][aft];\r\n        for (int i = aft; i >= r2[it]; i--) {\r\n          cur = min(cur, a[type[it]][i]);\r\n        }\r\n        int bef = sol[it];\r\n        sol[it] = min(sol[it], r2[it] - r1[it] + abs(c2[it] - cur) + 2 * (aft - r2[it]) + 1);\r\n      }\r\n    }\r\n  }\r\n  if (home) {\r\n    cout << \"no asserts failed!!\\n\";\r\n   // return 0;\r\n  }\r\n  ll ha = 0;\r\n  for (int i = 1; i <= n; i++) {\r\n    ha = ha * 333333333 + sol[i];\r\n  }\r\n  if (home) {\r\n    cout << ha << \"\\n\";\r\n    assert(ha == 5220200856869432519);\r\n  }\r\n  for (int i = 1; i <= q; i++) {\r\n    cout << sol[i] << \"\\n\";\r\n  }\r\n  return 0;\r\n}\r\n"
}