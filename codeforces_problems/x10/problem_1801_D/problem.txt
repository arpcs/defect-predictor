{
    "contestId": 1801,
    "index": "D",
    "name": "The way home",
    "type": "PROGRAMMING",
    "points": 1750.0,
    "rating": 2100,
    "tags": [
        "binary search",
        "data structures",
        "dp",
        "graphs",
        "greedy",
        "shortest paths",
        "sortings"
    ],
    "desc": {
        "title": "D. The way home",
        "statement": " The famous magician Borya Budini traveled through the country $$$X$$$, which consists of $$$n$$$ cities. However, an accident happened, and he was robbed in the city number $$$1$$$. Now Budini will have a hard way home to the city number $$$n$$$.<p>He's going to get there by plane. In total, there are $$$m$$$ flights in the country, $$$i$$$-th flies from city $$$a_i$$$ to city $$$b_i$$$ and costs $$$s_i$$$ coins. Note that the $$$i$$$-th flight is one-way, so it can't be used to get from city $$$b_i$$$ to city $$$a_i$$$. To use it, Borya must be in the city $$$a_i$$$ and have at least $$$s_i$$$ coins (which he will spend on the flight). </p><p>After the robbery, he has only $$$p$$$ coins left, but he does not despair! Being in the city $$$i$$$, he can organize performances every day, each performance will bring him $$$w_i$$$ coins. </p><p>Help the magician find out if he will be able to get home, and what is the minimum number of performances he will have to organize. </p>",
        "inputSpecification": "<p>Each test consists of multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 80$$$)\u00a0\u2013 the number of test cases. The description of test cases follows.</p><p>The first line contains three integers $$$n$$$, $$$m$$$ and $$$p$$$ ($$$2 \\le n \\le 800$$$, $$$1 \\le m \\le 3000$$$, $$$0 \\le p \\le 10^9$$$)\u00a0\u2014 the number of cities, the number of flights and the initial amount of coins.</p><p>The second line contains $$$n$$$ integers $$$w_1, w_2, \\ldots, w_n$$$ $$$(1 \\le w_i \\le 10^9)$$$\u00a0\u2014 profit from representations.</p><p>The following $$$m$$$ lines each contain three integers $$$a_i$$$, $$$b_i$$$ and $$$s_i$$$ ($$$1 \\le a_i, b_i \\le n$$$, $$$1 \\le s_i \\le 10^9$$$)\u00a0\u2014 the starting and ending city, and the cost of $$$i$$$-th flight.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$800$$$ and the sum of $$$m$$$ over all test cases does not exceed $$$10000$$$. </p>",
        "outputSpecification": "<p>For each test case print a single integer\u00a0\u2014 the minimum number of performances Borya will have to organize to get home, or $$$-1$$$ if it is impossible to do this. </p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 4 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">7 4 3 1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2 21</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3 2 6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3 8</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 4 11</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 4 10</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 10 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2 20</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2 4 30</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 3 25</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3 4 89</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 4 7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 1 6 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 3 10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 4 50</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 4 70</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4 1 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 1 1 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 3 2</div>",
                "output": "\n4\n24\n10\n-1\n"
            }
        ],
        "note": "<p>In the first example, it is optimal for Borya to make $$$4$$$ performances in the first city, having as a result $$$2 + 7 \\cdot 4 = 30$$$ coins, and then walk along the route $$$1-3-2-4$$$, spending $$$6+8+11=25$$$ coins.  In the second example, it is optimal for Borya to make $$$15$$$ performances in the first city, fly to $$$3$$$ city, make $$$9$$$ performances there, and then go to $$$4$$$ city. </p>"
    },
    "suggested_categories": [
        "dynamic programming",
        "graph theory",
        "shortest path",
        "optimization",
        "mathematics",
        "algorithms",
        "combinatorics",
        "greedy",
        "network flow",
        "integer programming",
        "traveling salesman problem",
        "game theory",
        "financial modeling",
        "simulation",
        "performance analysis",
        "pathfinding",
        "data structures",
        "dynamic programming",
        "heuristic methods",
        "mathematical modeling"
    ]
}