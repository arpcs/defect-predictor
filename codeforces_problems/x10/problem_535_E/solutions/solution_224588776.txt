{
    "id": 224588776,
    "contestId": 535,
    "creationTimeSeconds": 1695377735,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 535,
        "index": "E",
        "name": "Tavas and Pashmaks",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2600,
        "tags": [
            "geometry",
            "math"
        ]
    },
    "author": {
        "contestId": 535,
        "members": [
            {
                "handle": "zavodil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1429029300
    },
    "programmingLanguage": "Java 17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 6656000,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n\r\n    static class Node {\r\n        int x, y, idx;\r\n\r\n        Node(int x, int y, int idx) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.idx = idx;\r\n        }\r\n    }\r\n\r\n    static boolean che(Node A, Node B, Node C) {\r\n        return 1L * (C.x - B.x) * (A.y - B.y) * C.y * A.x < 1L * (A.x - B.x) * (C.y - B.y) * A.y * C.x;\r\n    }\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        int n = Integer.parseInt(br.readLine());\r\n        \r\n        Node[] p = new Node[n + 1];\r\n        StringTokenizer st;\r\n        for (int i = 1; i <= n; i++) {\r\n            st = new StringTokenizer(br.readLine());\r\n            int x = Integer.parseInt(st.nextToken());\r\n            int y = Integer.parseInt(st.nextToken());\r\n            p[i] = new Node(x, y, i);\r\n        }\r\n\r\n        Arrays.sort(p, 1, n + 1, (a, b) -> a.x != b.x ? a.x - b.x : a.y - b.y);\r\n\r\n        Node[] v = new Node[n + 1];\r\n        int tail = 0;\r\n\r\n        for (int i = 1; i <= n; i++) {\r\n            while (tail >= 1 && v[tail].y <= p[i].y)\r\n                tail--;\r\n            while (tail >= 2 && che(p[i], v[tail], v[tail - 1]))\r\n                tail--;\r\n            v[++tail] = p[i];\r\n        }\r\n       \r\n        Set<Pair> q = new HashSet<>();\r\n\r\n        for (int i = 1; i <= tail; i++) {\r\n            q.add(new Pair(v[i].x, v[i].y));\r\n        }\r\n\r\n        List<Integer> ans = new ArrayList<>();\r\n\r\n        for (int i = 1; i <= n; i++) {\r\n            if (q.contains(new Pair(p[i].x, p[i].y))) {\r\n                ans.add(p[i].idx);\r\n            }\r\n        }\r\n\r\n        Collections.sort(ans);\r\n\r\n        for (int i = 0; i < ans.size(); i++) {\r\n            System.out.print(ans.get(i) + \" \");\r\n        }\r\n    \r\n    }\r\n}\r\n\r\nclass Pair {\r\n    int x, y;\r\n\r\n    Pair(int x, int y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    @Override\r\n    public int hashCode() {\r\n        return Objects.hash(x, y);\r\n    }\r\n\r\n    @Override\r\n    public boolean equals(Object obj) {\r\n        if (this == obj)\r\n            return true;\r\n        if (obj == null || getClass() != obj.getClass())\r\n            return false;\r\n        Pair pair = (Pair) obj;\r\n        return x == pair.x && y == pair.y;\r\n    }\r\n}/*1695377735.5229096*/"
}