{
    "id": 223800149,
    "contestId": 1671,
    "creationTimeSeconds": 1695018261,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1671,
        "index": "D",
        "name": "Insert a Progression",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1671,
        "members": [
            {
                "handle": "idonthatephy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1650638100
    },
    "programmingLanguage": "Java 17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 295,
    "memoryConsumedBytes": 716800,
    "source": "import java.util.*;\r\nimport java.io.BufferedReader;\r\nimport java.io.DataInputStream;\r\nimport java.io.FileInputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\n\r\npublic class Main {\r\n    // public static int[][] dir = { { -1, 0 }, { 1, 0 }, { 0, 1 }, { 0, -1 } };\r\n\r\n    // static Integer[]dp=new Integer[10000001];\r\n    public static long mod = (long) (1e9 + 7);\r\n\r\n    static class Reader {\r\n        final private int BUFFER_SIZE = 1 << 16;\r\n        private DataInputStream din;\r\n        private byte[] buffer;\r\n        private int bufferPointer, bytesRead;\r\n\r\n        public Reader() {\r\n            din = new DataInputStream(System.in);\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        public Reader(String file_name) throws IOException {\r\n            din = new DataInputStream(\r\n                    new FileInputStream(file_name));\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n\r\n        public String readLine() throws IOException {\r\n            byte[] buf = new byte[100001]; // line length\r\n            int cnt = 0, c;\r\n            while ((c = read()) != -1) {\r\n                if (c == '\\n') {\r\n                    if (cnt != 0) {\r\n                        break;\r\n                    } else {\r\n                        continue;\r\n                    }\r\n                }\r\n                buf[cnt++] = (byte) c;\r\n            }\r\n            return new String(buf, 0, cnt);\r\n        }\r\n\r\n        public int nextInt() throws IOException {\r\n            int ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ') {\r\n                c = read();\r\n            }\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            long ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        public double nextDouble() throws IOException {\r\n            double ret = 0, div = 1;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n\r\n            if (c == '.') {\r\n                while ((c = read()) >= '0' && c <= '9') {\r\n                    ret += (c - '0') / (div *= 10);\r\n                }\r\n            }\r\n\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n\r\n        private void fillBuffer() throws IOException {\r\n            bytesRead = din.read(buffer, bufferPointer = 0,\r\n                    BUFFER_SIZE);\r\n            if (bytesRead == -1)\r\n                buffer[0] = -1;\r\n        }\r\n\r\n        private byte read() throws IOException {\r\n            if (bufferPointer == bytesRead)\r\n                fillBuffer();\r\n            return buffer[bufferPointer++];\r\n        }\r\n\r\n        public void close() throws IOException {\r\n            if (din == null)\r\n                return;\r\n            din.close();\r\n        }\r\n    }\r\n\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(\r\n                    new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                if (st.hasMoreTokens()) {\r\n                    str = st.nextToken(\"\\n\");\r\n                } else {\r\n                    str = br.readLine();\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n\r\n    public static int[] size;\r\n    public static int[] pri;\r\n    public static int[] rank;\r\n    public static int count = 0;\r\n\r\n    public static void make(int n) {\r\n\r\n        size = new int[n];\r\n        pri = new int[n];\r\n        rank = new int[n];\r\n        for (int i = 0; i < n; i++) {\r\n            size[i] = 1;\r\n            pri[i] = i;\r\n            rank[i] = 0;\r\n        }\r\n    }\r\n\r\n    public static int find(int x) {\r\n        if (pri[x] == x)\r\n            return x;\r\n        else\r\n            return find(pri[x]);\r\n    }\r\n\r\n    public static void union(int x, int y) {\r\n        int px = find(x);\r\n        int py = find(y);\r\n        if (px == py) {\r\n            count++;\r\n        }\r\n        if (rank[px] > rank[py]) {\r\n            size[px] += size[py];\r\n            pri[py] = px;\r\n            rank[px]++;\r\n        } else {\r\n            size[py] += size[px];\r\n            pri[px] = py;\r\n            rank[py]++;\r\n        }\r\n\r\n    }\r\n\r\n    // public static Integer[][] dp;\r\n    // public static int[][]grid;\r\n    // public static long ans=0L;\r\n    // public static boolean[]flag=new boolean[26];\r\n    public static int f = 0;\r\n    public static int z = 0;\r\n    public static boolean ok = true;\r\n    public static Long[][] dp;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n\r\n        // Reader sc = new Reader();\r\n        FastReader sc = new FastReader();\r\n\r\n        // Scanner sc = new Scanner(System.in);\r\n        int t = sc.nextInt();\r\n        \r\n\r\n        while (t-- > 0) {\r\n            // int n=sc.nextInt();\r\n\r\n            solve(sc);\r\n           \r\n\r\n        }\r\n    }\r\n\r\n    public static void solve(FastReader sc) {\r\n    int n=sc.nextInt();\r\n    int x=sc.nextInt();\r\n    int[]arr=new int[n];\r\n    for(int i=0;i<n;i++){\r\n        arr[i]=sc.nextInt();\r\n    }\r\n    long ans=0;\r\n    for(int i=1;i<n;i++){\r\n        ans=ans+(long)Math.abs(arr[i-1]-arr[i]);\r\n    }\r\n    int mn=Integer.MAX_VALUE;\r\n    int mx=Integer.MIN_VALUE;\r\n    for(int i=0;i<arr.length;i++){\r\n        mn=Math.min(mn,arr[i]);\r\n        mx=Math.max(mx,arr[i]);\r\n    }\r\n    long mnadd=0;\r\n    if(1<mn){\r\n         mnadd=(long)Math.min(2*(mn-1),Math.min(arr[0]-1,arr[n-1]-1));\r\n    }\r\n    long mxadd=0;\r\n    if(x>mx){\r\n        mxadd=Math.min(2*(x-mx),Math.min(Math.abs(arr[0]-x),Math.abs(arr[n-1]-x)));\r\n\r\n    }\r\n    System.out.println(ans+mnadd+mxadd);\r\n\r\n\r\n\r\n\r\n    }\r\n    public static int operations(StringBuilder s1,StringBuilder s2){\r\n        int count01=0;\r\n        int count10=0;\r\n        for(int i=0;i<s1.length();i++){\r\n            if(s1.charAt(i)=='1' && s2.charAt(i)=='0'){\r\n                count10++;\r\n            }\r\n            else if(s1.charAt(i)=='0' && s2.charAt(i)=='1'){\r\n                count01++;\r\n            }\r\n        }\r\n        if(count01!=count10){\r\n            return Integer.MAX_VALUE;\r\n        }\r\n        else return count01*2;\r\n    }\r\n    public static int calc(StringBuilder s1,StringBuilder s2,char f){\r\n\r\n        int index=-1;\r\n        for(int i=0;i<s1.length();i++){\r\n            if(s1.charAt(i)=='1' && s2.charAt(i)==f){\r\n                index=i;\r\n                break;\r\n            }\r\n        }\r\n        if(index==-1)return Integer.MAX_VALUE;\r\n\r\n        StringBuilder s3=new StringBuilder(\"\");\r\n        for(int i=0;i<s1.length();i++){\r\n            if(i!=index){\r\n                s3.append((1^(s1.charAt(i)-'0'))+\"\");\r\n            }\r\n            else{\r\n                s3.append(s1.charAt(i)+\"\");\r\n            }\r\n        }\r\n        //System.out.println(s3);\r\n        return operations(s3, s2);\r\n    }\r\n\r\n\r\n\r\n    public static void swapArray(int[] arr, int[] arr2) {\r\n\r\n        int n1 = arr.length;\r\n        // int n2=arr2.length;\r\n        for (int i = 1; i < n1; i++) {\r\n            int k = arr[i];\r\n            arr[i] = arr2[i];\r\n            arr2[i] = k;\r\n        }\r\n    }\r\n\r\n    public static int gcd(int a, int b) {\r\n        if (b == 0)\r\n            return a;\r\n\r\n        return gcd(b, a % b);\r\n    }\r\n\r\n}\r\n"
}