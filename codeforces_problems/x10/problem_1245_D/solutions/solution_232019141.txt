{
    "id": 232019141,
    "contestId": 1245,
    "creationTimeSeconds": 1699506565,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1245,
        "index": "D",
        "name": "Shichikuji and Power Grid",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "dsu",
            "graphs",
            "greedy",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1245,
        "members": [
            {
                "handle": "zfxyy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572618900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 25088000,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\n#define endl '\\n';\r\nusing namespace std;\r\n\r\nconst int N = 2010;\r\nconst int M = 1e6 + 10;\r\nint kk[N];\r\nint best[N];\r\nbool vis[M];\r\nint fa[N];\r\n\r\nint n,m;\r\nstruct node{\r\n    int u,v,w;\r\n}edge[M];\r\n\r\nint Find(int x){\r\n    return x==fa[x] ? x:fa[x]=Find(fa[x]);\r\n}\r\n\r\nvoid Boruvka(){\r\n    memset(vis,false,sizeof vis);\r\n    int ans=0;\r\n    int cnt=0;\r\n    bool OK=true;\r\n    vector<int> ele;\r\n    vector<pair<int,int>> path;\r\n    while(OK){\r\n        OK=false;\r\n        fill(best + 1, best + n + 1, 0);\r\n        for(int i=1;i<=m;i++){\r\n            if(vis[i]) continue;\r\n            int x=Find(edge[i].u);int y=Find(edge[i].v);\r\n            if(x==y) continue;\r\n            if(!best[x] || edge[i].w<edge[best[x]].w) best[x]=i;\r\n            if(!best[y] || edge[i].w<edge[best[y]].w) best[y]=i;\r\n        }\r\n        for(int i=1;i<=n+1;i++){\r\n            if(best[i]&&!vis[best[i]]){\r\n                OK=true,cnt++;\r\n                int idx=best[i];\r\n                ans+=edge[idx].w;\r\n                if(edge[idx].u==n+1) ele.push_back(edge[idx].v);\r\n                else if(edge[idx].v==n+1) ele.push_back(edge[idx].u);\r\n                else path.push_back({i,best[i]});\r\n                vis[idx]=true;\r\n                fa[Find(edge[idx].u)]=Find(edge[idx].v);\r\n            }\r\n        }\r\n    }\r\n    cout<<ans<<endl;\r\n    cout<<ele.size()<<endl;\r\n    for(auto u:ele) cout<<u<<\" \";\r\n    cout<<endl;\r\n    cout<<path.size()<<endl;\r\n    for(auto u:path)cout<<u.first<<\" \"<<u.second<<endl;\r\n}\r\n\r\nvoid solve(){\r\n    vector<pair<int,int>> p;\r\n    p.push_back({0,0});\r\n    cin>>n;\r\n    for(int i=1;i<=n;i++){\r\n        fa[i]=i;\r\n        int x,y;\r\n        cin>>x>>y;\r\n        p.push_back({x,y});\r\n    }\r\n    for(int i=1;i<=n;i++){\r\n        int c;\r\n        cin>>c;\r\n        edge[++m].u=i;\r\n        edge[m].v=n+1;\r\n        edge[m].w=c;\r\n    }\r\n    for(int i=1;i<=n;i++) cin>>kk[i];\r\n\r\n    for(int i=1;i<=n;i++){\r\n        for(int j=i+1;j<=n;j++){\r\n            edge[++m].u=i;\r\n            edge[m].v=j;\r\n            edge[m].w=(abs(p[i].first-p[j].first)+abs(p[i].second-p[j].second))*(kk[i]+kk[j]);\r\n        }\r\n    }\r\n    Boruvka();\r\n}\r\n\r\nsigned main(){\r\n    ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\r\n    int T=1;\r\n    //cin>>T;\r\n    while(T--)solve();\r\n    return 0;\r\n}\r\n"
}