{
    "id": 224845624,
    "contestId": 1245,
    "creationTimeSeconds": 1695549349,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1245,
        "index": "D",
        "name": "Shichikuji and Power Grid",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "dsu",
            "graphs",
            "greedy",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1245,
        "members": [
            {
                "handle": "ycccc319"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572618900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 1996,
    "memoryConsumedBytes": 248524800,
    "source": "// LUOGU_RID: 125973552\n#include <bits/stdc++.h>\r\n\r\n#define ll long long\r\nusing namespace std;\r\nconst int N = 2010;\r\nint n;\r\nll location[N][2];\r\nll k[N];\r\nint fa[N];\r\n\r\nint get(int x) {\r\n    if (fa[x] == x)return x;\r\n    else return fa[x] = get(fa[x]);\r\n}\r\n\r\nclass node {\r\npublic:\r\n    int u;\r\n    ll w;\r\n    int from;\r\n\r\n    bool operator>(const node &a) const { return w > a.w; };//\u91cd\u8f7d\r\n};\r\n\r\nll sum = 0, num = 0;\r\nbool vis[N];\r\n\r\nclass e {\r\npublic:\r\n    int v;\r\n    ll w;\r\n    int next;\r\n} edge[N * N];\r\n\r\nint head[N], cnt;\r\n\r\nvoid add(int u, int v, ll w) {\r\n    edge[++cnt].v = v;\r\n    edge[cnt].w = w;\r\n    edge[cnt].next = head[u];\r\n    head[u] = cnt;\r\n}\r\n\r\nvector<int> vec;\r\nvector<pair<int, int>> path;\r\n\r\nvoid prim() {\r\n    priority_queue<node, vector<node>, greater<node> > q;\r\n    q.push({0, 0, 0});\r\n    while (!q.empty()) {\r\n        int now = q.top().u;\r\n        ll w = q.top().w;\r\n        int from = q.top().from;\r\n        q.pop();\r\n        if (vis[now])continue;\r\n        vis[now] = 1;\r\n        num++;\r\n        sum += w;\r\n        if (now != 0) {\r\n            if (from == 0) {\r\n                vec.push_back(now);\r\n            } else {\r\n                path.emplace_back(from, now);\r\n            }\r\n        }\r\n        for (int i = head[now]; i; i = edge[i].next) {\r\n            int a = edge[i].v;\r\n            ll b = edge[i].w;\r\n            q.push({a, b, now});\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    cin >> n;\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> location[i][0] >> location[i][1];\r\n        fa[i] = i;\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        ll tmp;\r\n        cin >> tmp;\r\n        add(0, i, tmp);\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> k[i];\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        for (int j = i + 1; j <= n; j++) {\r\n            if (i == j)continue;\r\n            ll w = (k[i] + k[j]) * (abs(location[i][0] - location[j][0]) + abs(location[i][1] - location[j][1]));\r\n            add(i, j, w);\r\n            add(j, i, w);\r\n        }\r\n    }\r\n    prim();\r\n    cout << sum << \"\\n\" << vec.size() << \"\\n\";\r\n    for (auto &to: vec) {\r\n        cout << to << \" \";\r\n    }\r\n    cout << \"\\n\" << path.size() << \"\\n\";\r\n    for (auto &to: path) {\r\n        cout << to.first << \" \" << to.second << \"\\n\";\r\n    }\r\n    return 0;\r\n}\r\n\r\n"
}