{
    "id": 235857604,
    "contestId": 1245,
    "creationTimeSeconds": 1701786488,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1245,
        "index": "D",
        "name": "Shichikuji and Power Grid",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1900,
        "tags": [
            "dsu",
            "graphs",
            "greedy",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1245,
        "members": [
            {
                "handle": "monjur_hossain_shovon23"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572618900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n\r\nmap<int, int> par, sz;\r\n\r\nvoid make(int n)\r\n{\r\n    par[n] = n;\r\n    sz[n] = 1;\r\n}\r\n\r\nint find(int n)\r\n{\r\n    if (par[n] == n)\r\n        return n;\r\n    return par[n] = find(par[n]);\r\n}\r\n\r\nvoid Union(int a, int b)\r\n{\r\n    a = find(a);\r\n    b = find(b);\r\n    if (a == b)\r\n        return;\r\n    if (sz[a] < sz[b])\r\n        swap(a, b);\r\n    par[b] = a;\r\n    sz[a] += sz[b];\r\n}\r\n\r\nsigned main()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<int> supply(n);\r\n    int ans = 0;\r\n    vector<pair<int, pair<int, int>>> edges;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        cin >> supply[i];\r\n        ans += supply[i];\r\n        edges.push_back({supply[i], {0, i+1}});\r\n    }\r\n\r\n    \r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        int a, b, w;\r\n        cin >> a >> b >> w;\r\n        edges.push_back({w, {a, b}});\r\n    }\r\n\r\n    for (int j = 1; j <= n; j++)\r\n    {\r\n        make(j);\r\n    }\r\n    sort(edges.begin(), edges.end());\r\n    int c = 0;\r\n    for (int k = 0; k <= n; k++)\r\n    {\r\n        int a = edges[k].second.first;\r\n        int b = edges[k].second.second;\r\n        int w = edges[k].first;\r\n        \r\n        if (find(a) != find(b))\r\n        {\r\n            Union(a, b);\r\n\r\n            c += w;\r\n        }\r\n    }\r\n    //cout<<ans<<\" \"<<c<<endl;\r\n    //ans = min(ans, c);\r\n\r\n    cout << c << endl;\r\n}\r\n"
}