{
    "id": 222694303,
    "contestId": 1455,
    "creationTimeSeconds": 1694336790,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1455,
        "index": "D",
        "name": "Sequence and Swaps",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1455,
        "members": [
            {
                "handle": "Gabz_Gabz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1606746900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 49,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n \r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\n/*\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\r\n*/\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nnamespace __gnu_pbds{\r\n          typedef tree<long long,\r\n                       null_type,\r\n                       less_equal<long long>,\r\n                       rb_tree_tag,\r\n                       tree_order_statistics_node_update> ordered_set;\r\n}\r\nusing namespace __gnu_pbds;\r\n#define MOD 1000000007\r\n#define MOD1 998244353\r\n#define INF 1e18\r\n#define nline \"\\n\"\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define ff first\r\n#define ss second\r\n#define PI 3.141592653589793238462\r\n#define set_bits __builtin_popcountll\r\n#define sz(x) ((int)(x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\r\n#else\r\n#define debug(x)\r\n#endif\r\nvoid _print(ll t) {cerr << t;}\r\nvoid _print(int t) {cerr << t;}\r\nvoid _print(string t) {cerr << t;}\r\nvoid _print(char t) {cerr << t;}\r\nvoid _print(lld t) {cerr << t;}\r\nvoid _print(double t) {cerr << t;}\r\nvoid _print(ull t) {cerr << t;}\r\ntemplate <class T, class V> void _print(pair <T, V> p);\r\ntemplate <class T> void _print(vector <T> v);\r\ntemplate <class T> void _print(set <T> v);\r\ntemplate <class T, class V> void _print(map <T, V> v);\r\ntemplate <class T> void _print(multiset <T> v);\r\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\r\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\n\r\nvoid solve()\r\n{ ll n,x;\r\n  cin>>n>>x;\r\n  vector<ll> arr(n+2);\r\n  arr[0]=-1;\r\n  for(ll i=1;i<=n;i++)\r\n  cin>>arr[i];\r\n  arr[n+1]=1000000;\r\n  ll ans=0;\r\n  vector<ll> mountains;\r\n  debug(arr);\r\n  for(ll i=1;i<=n;i++)\r\n  { if(arr[i]>arr[i-1] and arr[i+1]<arr[i])\r\n    mountains.push_back(i);\r\n\r\n  }\r\n  \r\n\r\n  ll cpyx=x;\r\n  auto cpyarr=arr;\r\n  ll mountainptr=0;\r\n  ll currcpyarrptr=1;\r\n  while(mountainptr<mountains.size() and currcpyarrptr<=n)\r\n  { for(ll i=currcpyarrptr;i<mountains[mountainptr];i++)\r\n    { if(cpyx!=cpyarr[i] and cpyarr[i]>cpyx)\r\n      { swap(cpyx,cpyarr[i]);\r\n        debug(cpyarr);\r\n        debug(cpyx);\r\n\r\n        ans++;\r\n\r\n      }\r\n\r\n    }\r\n    if(cpyarr[mountains[mountainptr]]>cpyx)\r\n    swap(cpyx,cpyarr[mountains[mountainptr]]);\r\n    currcpyarrptr=mountains[mountainptr]+1;\r\n    mountainptr++;\r\n    ans++;\r\n    debug(cpyarr);\r\n    debug(cpyx);\r\n\r\n  }\r\n  if(is_sorted(cpyarr.begin(),cpyarr.end()))\r\n  cout<<ans<<\"\\n\";\r\n  else\r\n  cout<<-1<<\"\\n\";\r\n\r\n\r\n}\r\nint main() {\r\n   fastio();\r\n   #ifndef ONLINE_JUDGE\r\n   freopen(\"Error.txt\", \"w\", stderr);\r\n   freopen(\"input.txt\", \"r\", stdin);\r\n   freopen(\"output.txt\", \"w\", stdout);\r\n   #endif\r\n   \r\n   int tttestcases=1;\r\n   cin>>tttestcases;\r\n  \r\n  \r\n   for(int iii=1;iii<=tttestcases;iii++)\r\n   {  solve();\r\n   } \r\n \r\n}\r\n"
}