{
    "id": 212959889,
    "contestId": 216,
    "creationTimeSeconds": 1688903095,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 216,
        "index": "B",
        "name": "Forming Teams",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "implementation"
        ]
    },
    "author": {
        "contestId": 216,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1344958200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 3276800,
    "source": "#pragma GCC optimization(\"Ofast\")\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define pb push_back\n#define loop(n) for(int i = 0; i < n; ++i)\n#define sz(x) (int)(x).size()\n#define all(x) x.begin(), x.end()\ndouble pi = std::acos(-1.0);\nconst int M=1e9+7;\n#define nl '\\n'\nconst int N = 2e5+7;\nll power(ll x, ll a) {\n    if (a == 0) return 1;\n    if (a == 1) return x;\n    if (a % 2 == 0) return power((x * x) % M, a / 2);\n    return (x * power((x * x) % M, a / 2)) % M;\n}\nll gcd(ll a, ll b) { return b ? gcd(b, a % b) : a; }\nll lcm(ll a, ll b) { return a * (b / gcd(a, b)); }\nll fact[N], inv[N];\n\nll nCr(ll n, ll r) {\n    return ((fact[n] * inv[r]) % M * inv[n - r]) % M;\n}\n\nll nPr(ll n, ll r) {\n    return ((fact[n] * inv[n - r])) % M;\n\n}\nvector<vector<int>> graph;\nvector<int> visited;\n\nbool dfs(int cur_node, int par_node, int& nodes_cnt) {\n    if (visited[cur_node])\n        return true;\n\n    visited[cur_node] = 1;\n\n    for (int child_node : graph[cur_node]) {\n        if (child_node != par_node) {\n            ++nodes_cnt;\n\n            if (dfs(child_node, cur_node, nodes_cnt))\n                return true;\n        }\n    }\n\n    return false;\n}\n\nvoid doWork() {\n    int n, m;\n    cin >> n >> m;\n\n    graph.resize(n);\n    visited.resize(n);\n\n    for (int i = 0; i < m; i++) {\n        int x, y;\n        cin >> x >> y;\n\n        --x;\n        --y;\n\n        graph[x].push_back(y);\n        graph[y].push_back(x);\n    }\n\n    int toRemove = 0;\n\n    for (int i = 0; i < n; i++) {\n        if (!visited[i]) {\n            int cnt = 0;\n            if (dfs(i, -1, cnt) && cnt % 2 == 1)\n                toRemove++;\n        }\n    }\n\n    if ((n - toRemove) % 2 == 1)\n        toRemove++;\n\n    cout << toRemove;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n    freopen(\"out.txt\", \"w\", stdout);\n#endif\n\n    cin.tie(0)->sync_with_stdio(0);\n\n\n    int t=1;\n    //cin>>t;\n    while(t--){\n        doWork();\n    }\n\n}\n\n\n\t \t  \t\t  \t \t\t\t\t\t   \t\t\t \t  \t \t\t"
}