{
    "id": 225711181,
    "contestId": 216,
    "creationTimeSeconds": 1695934539,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 216,
        "index": "B",
        "name": "Forming Teams",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "implementation"
        ]
    },
    "author": {
        "contestId": 216,
        "members": [
            {
                "handle": "Darkrai81"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1344958200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 43724800,
    "source": "//Sharingan(.)\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n# define vi vector <ll>\r\n# define pb push_back\r\n# define arr(n) ll arr[n];\r\n# define mi map <ll,ll>\r\n# define umi unordered_map <ll,ll>\r\n# define umc unordered_map <char,ll>\r\n# define si set <ll>\r\n#define pa pair<ll,ll> \r\n# define usi unordered_set <ll>\r\n# define na cout<<\"NO\"<<endl;\r\n# define ya cout<<\"YES\"<<endl;\r\n#define rep(i, a, b) for(int i = a; i < b; i++)\r\n#define all(x) begin(x), end(x)\r\n#define sz(x) static_cast<int>((x).size())\r\nconst ll M=1e9+5;\r\nconst ll N=2e5+5;\r\n\r\nvoid printBinary(int num){\r\n    for(int i=10;i>=0;i--){\r\n        cout<<((num>>i)&1);\r\n    }\r\n    cout<<endl;\r\n}\r\nbool is_square(float x){\r\n    if(x>= 0){\r\n        ll sr = sqrt(x);\r\n        if(sr*sr==x) return true;\r\n    }\r\n    return false;\r\n}\r\nbool isPrime(ll num){\r\n    for(ll i=2;i*i<num;i++){\r\n        if(num%i==0) return false;\r\n    }\r\n    return true;\r\n}\r\nll no_Of_Integer(ll x){\r\n    ll noOfInteger=0;\r\n    while(x>=10){\r\n        noOfInteger++;\r\n        x=x/10;\r\n    }\r\n    return noOfInteger+1; \r\n}\r\nll gcd(ll a,ll b){\r\n    ll r=a;ll t=b;\r\n    while(r%t!=0){\r\n        ll j=r;\r\n        r=t;  t=j%t;\r\n    }\r\n    return t;\r\n}\r\nbool bySecond(pair<ll,ll>&a,pair<ll,ll>&b){\r\n    return a.first>b.first;\r\n}\r\nll dps[105][105];\r\nll nCr(ll n,ll r){\r\n    if(n==r) return 1;\r\n    if(r==1) return n;\r\n    if (dps[n][r]!=-1) return dps[n][r];\r\n    else\r\n        return dps[n][r]=nCr(n-1,r) + nCr(n-1,r-1);\r\n}\r\nll m[N][17];\r\nll a[N];\r\nll n;\r\n\r\n////////////////////////////////////////Fenwick Algorithm////////////////////////////////////////////////////////////////////////\r\nll bit[N];\t\t\t\t\t\t\t\t\t\t\t//O(logN)\r\nvoid Update(int i,int x){\r\n    for(int j=i;j<=8;j+=(j&(-j))){\r\n        bit[j]+=x;\r\n    }\r\n}\r\nint Sum(int i){\r\n    int ans=0;\r\n    for(int j=i;j>0;j-=(j&(-j))){\r\n        ans+=bit[j];\r\n    }\r\n    return ans;\r\n}\r\nll arro[N];\r\nvoid Make(){\r\n    for(int i=1;i<=8;i++){\r\n        Update(i,arro[i-1]);\r\n    }\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n////////////////////////////////////////Sparse Table Algo////////////////////////////////////////////////////////////////////////\r\nll Sparse_Query(){\t\t\t\t\t\t\t//O(NlogN)\r\n    cin>>n;\r\n    for(int i=0;i<n;i++){\r\n        cin>>a[i];\r\n        m[i][0]=a[i];\r\n    }\r\n    for(int k=1;k<17;k++){\r\n        for(int i=0;i+(1<<k)-1<n;i++){\r\n            m[i][k]=min(m[i][k-1],m[i+(1<<(k-1))][k-1]);\r\n        }\r\n    }\r\n    ll L,R;cin>>L>>R;\r\n    ll length=R-L+1;\r\n    int d=0;\r\n    while((1<<(d+1))<=length) d++;\r\n    return min(m[L][d],m[(1<<(d-1))][d-1]);\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n////////////////////////////////////////Seive Algorithm////////////////////////////////////////////////////////////////////////\r\nvector<bool>Prime(N,1);\t\t\t\t\t\t//O(Nlog(logN))\r\nvector<ll>lp(N),hp(N);\r\nvector<ll> prime_factors;\r\nvector<ll>divisors[N];\r\n\r\nvoid Primes(){ \r\n    Prime[0]=Prime[1]=false;\r\n    for(int i=2;i<N;i++){\r\n        if(Prime[i]==true){\r\n            lp[i]=hp[i]=i;\r\n            for(int j=2*i;j<N;j+=i){\r\n                Prime[j]=false;\r\n                hp[j]=i;\r\n                if(lp[j]==0){\r\n                    lp[j]=i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for(int i=2;i<N;i++){\t\t\t\t\t\t\t\t\t//O(NlogN)\r\n        for(int j=i;j<N;j+=i){\r\n            divisors[j].pb(i);\r\n        }\r\n    }\r\n// divisors  and prime factors of  a single no can be done in root N time\r\n    //ll num;\r\n    //while(num>1){\t\t\t\t\t\t\t\t\t\t\t\t//O(NlogN)\r\n        //ll prime_factor=hp[num];\r\n        //while(num%prime_factor==0){\r\n            //num/=prime_factor;\r\n            //prime_factors.pb(prime_factor);\r\n        //}\r\n    //}\r\n    //ll Totient[N];\r\n    //for(int i=1;i<=N;i++)Totient[i]=i;\r\n    //for(ll i=2;i<=N;i++){\r\n        //if(Totient[i]==i){\r\n            //for(int j=i;j<=N;j+=i){\r\n                //Totient[j]-=Totient[j]/i;\r\n            //}\r\n        //}\r\n    //}\r\n}\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nll power(ll a,ll n){\r\n    ll ans=1;\r\n    while(n){\r\n        if(n&1)ans=ans*a%M;\r\n        a=a*a%M;\r\n        n>>=1;\r\n    }\r\n    return ans;\r\n}\r\nvector<pair<ll,ll>> movements={\r\n    {1,0},{0,1},{0,-1},{-1,0}\r\n};\r\nbool isValid(ll x,ll y, ll n){\r\nreturn x>=1&&y>=1&&x<=n&&y<=n;\r\n}\r\nvoid binMultiply(ll a,ll b){\r\n    ll ans=0;\r\n    while(b>0){\r\n        if(b&1) ans=(ans+a)%M;\r\n        a=(a+a)%M;\r\n        b>>=1;\r\n    }\r\n}\r\nvector<ll>g[N];\r\nbool vis[N];\r\nll level[N];\r\n\r\nvoid bfs(ll source){\r\n    queue<ll>q;\r\n    q.push(source);\r\n    vis[source]=1;\r\n    while(!q.empty()){\r\n        ll current=q.front();\r\n        q.pop();\r\n        for(ll child:g[current]) \r\n            if(!vis[child]){\r\n                q.push(child);\r\n                vis[child]=1;\r\n                level[child]=level[current]+1;\r\n            }\r\n    }\r\n}\r\nll color[N];\r\nbool dfs(ll vertex){\r\n    vis[vertex]=1;\r\n    bool isPart=true;\r\n    for(auto child:g[vertex]){\r\n        if(!vis[child]){\r\n            color[child]=1-color[vertex];\r\n            isPart&=dfs(child);\r\n        }\r\n        else{\r\n            if(color[child]==color[vertex]) isPart=false; \r\n        }\r\n    }\r\n    return isPart;\r\n}\r\n\r\n\r\n#define print(x) for(auto &a:x) cout<<a<<\" \"; \r\n#define sorts(x) sort(x.begin(),x.end());\r\n#define rev(x) reverse(x.begin(),x.end());\r\n#define reset(x,y) for(int i=1;i<=y;i++) x[i]=0;\r\n#define clr(x) for(int i=1;i<=n;i++)  g[i].clear();\r\n////////////////////////////////////////////////SOLVE//////////////////////////////////////////////////////////////////////////\r\n\r\nvoid solve(){\r\n    ll n,m;cin>>n>>m;\r\n    for(int i=0;i<m;i++){\r\n        ll a,b;cin>>a>>b;\r\n        g[a].pb(b);\r\n        g[b].pb(a);\r\n    }\r\n    ll cnt=0;\r\n    for(int i=1;i<=n;i++){\r\n        if(!vis[i]){\r\n            bool chek=dfs(i);\r\n            if(!chek) cnt++;  \r\n        }\r\n    }\r\n    if((n-cnt)%2==0) cout<<cnt;\r\n    else cout<<cnt+1;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nsigned main(){\r\n// memset(dp, -1, sizeof(dp));\r\n//cout<<fixed<<showpoint<<setprecision(10);\r\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    // freopen(\"input.txt\",\"r\",stdin);\r\n    // freopen(\"output.txt\",\"w\",stdout);\r\n\r\n    ll test=1;\r\n    // cin>>test;\r\n    while(test--){\r\n         solve();\r\n    }\r\n    return 0;\r\n// binary_search only when vector is sorted\r\n// check if N is same of question\r\n// check for subtree for any tree node\r\n}"
}