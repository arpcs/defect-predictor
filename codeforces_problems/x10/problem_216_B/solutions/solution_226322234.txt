{
    "id": 226322234,
    "contestId": 216,
    "creationTimeSeconds": 1696261969,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 216,
        "index": "B",
        "name": "Forming Teams",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "implementation"
        ]
    },
    "author": {
        "contestId": 216,
        "members": [
            {
                "handle": "Abo_WahbaZ"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1344958200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include \"bits/stdc++.h\"\r\n#include <chrono>\r\nusing namespace std;\r\nusing std::chrono::duration;\r\nusing std::chrono::duration_cast;\r\nusing std::chrono::high_resolution_clock;\r\nusing std::chrono::milliseconds;\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define ld long double\r\n#define fi first\r\n#define se second\r\n#define pb(_value) push_back(_value)\r\n#define pf(_value) push_front(_value)\r\n#define MP make_pair\r\n#define print(_text) return void(cout << #_text)\r\n#define nl \"\\n\"\r\n#define sz(_STL) int(_STL.size())\r\n#define debug(x) cout << #x << \": \" << (x) << \"\\n\";\r\n#define For(It, Start, End) for (int It = Start; It < End; ++It)\r\n#define f0r(It, End) For(It, 0, End)\r\n#define ford(It, End, Start) for (int It = End - 1; It >= Start; --It)\r\n#define f0rd(It, End) ford(It, End, 0)\r\n#define cin(Array, size) f0r(It, size) cin >> Array[It]\r\n#define cin2d(Matrix, size1, size2) f0r(it, size1) f0r(jt, size2) cin >> Matrix[it][jt]\r\n#define nl \"\\n\"\r\n#define sp << ' '\r\n#define cout(Array, size) f0r(It, size) cout << Array[It] sp\r\n#define cout2d(Matrix, size1, size2)                  \\\r\n    f0r(it, size1)                                    \\\r\n    {                                                 \\\r\n        f0r(jt, size2) { cout << Matrix[it][jt] sp; } \\\r\n        cout << nl;                                   \\\r\n    }\r\n#define dpp(arr, val) memset(arr, val, sizeof(arr))\r\n#define EPS 1e-12\r\n#define MOD 1000000007\r\n#define nps string::npos\r\n#define all(_STL) _STL.begin(), _STL.end()\r\n#define vall(_STL) _STL.rbegin(), _STL.rend()\r\n#define add_mod(a, b, m) (((a % m) + (b % m)) % m)\r\n#define sub_mod(a, b, m) (((a % m) - (b % m) + m) % m)\r\n#define mul_mod(a, b, m) (((a % m) * (b % m)) % m)\r\n#define NOD(n) log10(n) + 1\r\n#define vec vector\r\nll gcd(ll a, ll b)\r\n{\r\n    return b ? gcd(b, a % b) : a;\r\n}\r\nll lcm(ll a, ll b) { return a / gcd(a, b) * b; }\r\nll factorial(ll n)\r\n{\r\n    if (n == 1 or n == 0)\r\n        return 1;\r\n\r\n    return n * factorial(n - 1);\r\n}\r\n\r\nll euc(ll a, ll b, ll &x, ll &y)\r\n{\r\n    if (b == 0)\r\n    {\r\n        x = 1;\r\n        y = 0;\r\n        return a;\r\n    }\r\n\r\n    ll x1, y1;\r\n    ll d = euc(b, a % b, x1, y1);\r\n    x = y1;\r\n    y = (x1 - y1 * (a / b));\r\n    return d;\r\n}\r\n\r\nll modExpo(ll x, ll n, ll m)\r\n{\r\n    ll result = 1;\r\n\r\n    while (n > 0)\r\n    {\r\n        if (n % 2 == 1)\r\n        {\r\n            result = mul_mod(result, x, m);\r\n        }\r\n        x = mul_mod(x, x, m);\r\n        n = n / 2;\r\n    }\r\n    return result;\r\n}\r\n\r\nll fermatInvMod(ll a, ll m)\r\n{\r\n    return modExpo(a, m - 2, m);\r\n}\r\n\r\nll invMod(ll a, ll m)\r\n{\r\n    ll x, y;\r\n    euc(a, m, x, y);\r\n    return ((x % m) + m) % m;\r\n}\r\n\r\nvoid _AboWahbaZ()\r\n{\r\n    ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0);\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin), freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n}\r\n\r\nll sumToN(ll n)\r\n{\r\n    return n * (n + 1) / 2;\r\n}\r\n\r\n/*\r\nREAD THINK CODE\r\n*/\r\nstruct Graph\r\n{\r\n    int nodes = 1;\r\n    int edges = 0;\r\n    int cc_count = 0;\r\n    vector<vector<int>> adj;\r\n    vector<int> dis;\r\n    vector<bool> vis;\r\n    vector<int> nodes_cc;\r\n    vector<int> edges_cc;\r\n    Graph(int n, int m)\r\n    {\r\n        nodes = n;\r\n        edges = m;\r\n        adj = vector<vector<int>>(n + 1);\r\n        vis = vector<bool>(n + 1, false);\r\n        dis = vector<int>(n + 1);\r\n    }\r\n    void addEdge(int u, int v)\r\n    {\r\n        adj[u].push_back(v);\r\n        adj[v].push_back(u);\r\n    }\r\n\r\n    void build()\r\n    {\r\n        int u, v;\r\n        for (int i = 0; i < edges; i++)\r\n        {\r\n            cin >> u >> v;\r\n            addEdge(u, v);\r\n            addEdge(v, u);\r\n        }\r\n    }\r\n\r\n    int cnt = 0, cnt_ed = 0;\r\n    void DFS(int node)\r\n    {\r\n        vis[node] = true;\r\n        for (auto child : adj[node])\r\n            if (!vis[child])\r\n                cnt++, cnt_ed += sz(adj[child]), DFS(child);\r\n    }\r\n\r\n    void CC()\r\n    {\r\n\r\n        for (int i = 1; i <= nodes; i++)\r\n        {\r\n            if (!vis[i])\r\n            {\r\n                cnt = 1;\r\n                cnt_ed = sz(adj[i]);\r\n                cc_count++;\r\n                DFS(i);\r\n                nodes_cc.push_back(cnt);\r\n                edges_cc.push_back((cnt_ed) / 4);\r\n            }\r\n        }\r\n    }\r\n\r\n    bool isTree()\r\n    {\r\n        CC();\r\n        if (cc_count > 1 || edges > nodes - 1)\r\n            return 0;\r\n        else\r\n            return 1;\r\n    }\r\n};\r\n\r\nvoid solve()\r\n{\r\n    int n, m;\r\n    cin >> n >> m;\r\n    Graph g(n, m);\r\n    g.build();\r\n    g.CC();\r\n    // if nodes == 3 and edges == 3 ==> min ==> 2\r\n    // if nodes == 3 and edges == 2 ==> min ==> 3\r\n    int teams = INT_MAX;\r\n    for (int i = 0; i < sz(g.nodes_cc); i++)\r\n    {\r\n        if (g.nodes_cc[i] == 3)\r\n        {\r\n            if (g.edges_cc[i] == 2)\r\n                teams = min(teams, 3);\r\n            else\r\n                teams = min(teams, 2);\r\n        }\r\n\r\n        else if (g.nodes_cc[i] == 2)\r\n        {\r\n            teams = min(teams, 2);\r\n        }\r\n\r\n        // cout<<g.nodes_cc[i]<<\" \"<<g.edges_cc[i]<<nl;\r\n    }\r\n    int ans = 0;\r\n    if (g.cc_count==n)\r\n    {\r\n        ans = n - (n / 2);\r\n    }\r\n    else if(n==m and g.cc_count==1) ans = 0;\r\n    else\r\n        ans = n - 2 * teams;\r\n\r\n    cout << ans;\r\n\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    _AboWahbaZ();\r\n\r\n    auto t1 = high_resolution_clock::now();\r\n\r\n    int t = 1;\r\n    // cin >> t;\r\n    for (int i = 1; i <= t; i++)\r\n    {\r\n        // cout << \"Scenario #\" << i << \":\\n\";\r\n        solve();\r\n        cout << nl;\r\n        cout.flush();\r\n    }\r\n\r\n    auto t2 = high_resolution_clock::now();\r\n    duration<double, std::milli> ms_double = t2 - t1;\r\n#ifndef ONLINE_JUDGE\r\n    cout << \"Time Taken : \" << ms_double.count() << \"ms\";\r\n#endif\r\n}"
}