{
    "id": 214065025,
    "contestId": 216,
    "creationTimeSeconds": 1689520492,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 216,
        "index": "B",
        "name": "Forming Teams",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "implementation"
        ]
    },
    "author": {
        "contestId": 216,
        "members": [
            {
                "handle": "mez3n"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1344958200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define all(v)\t\t\t((v).begin()), ((v).end())\r\n#define sz(v)\t\t\t((int)((v).size()))\r\n#define clr(v, d)\t\tmemset(v, d, sizeof(v))\r\n#define rep(i, v)\t\tfor(int i=0;i<sz(v);++i)\r\n#define lp(i, n)\t\tfor(int i=0;i<(int)(n);++i)\r\n#define lpi(i, j, n)\tfor(int i=(j);i<(int)(n);++i)\r\n#define lpd(i, j, n)\tfor(int i=(j);i>=(int)(n);--i)\r\ntypedef long long ll;\r\n\r\nvector<vector<int>> graph;\r\nvector<int> vis;\r\n\r\nenum status {PATH = 0, CYCLE = 1};\r\n\r\n// Find path or cycle\r\n// We can use Find-Union Data structure to do that too\r\nstatus dfs(int cur_node, int par_node, int &nodes_cnt)\r\n{\r\n\tif(vis[cur_node])\r\n\t\treturn CYCLE;\r\n\r\n\tvis[cur_node] = 1;\r\n\r\n\tfor(auto child_node : graph[cur_node]) if(child_node != par_node)\r\n\t{\r\n\t\t++nodes_cnt;\r\n\r\n\t\tif(dfs(child_node, cur_node, nodes_cnt) == CYCLE)\r\n\t\t\treturn CYCLE;\r\n\t}\r\n\treturn PATH;\r\n}\r\n\r\nint main() {\r\n#ifndef ONLINE_JUDGE\r\n\tfreopen(\"test.txt\", \"rt\", stdin);\r\n#endif\r\n\r\n\tint n, m;\r\n\r\n\tcin>>n>>m;\r\n\r\n\tgraph = vector<vector<int>>(n);\r\n\tvis = vector<int>(n);\r\n\r\n\tlp(i, m)\r\n\t{\r\n\t\tint x, y;\r\n\t\tcin>>x>>y;\r\n\r\n\t\t--x, --y;\r\n\r\n\t\tgraph[x].push_back(y);\r\n\t\tgraph[y].push_back(x);\r\n\t}\r\n\r\n\tint toRemove = 0;\r\n\r\n\tlp(i, n) if(!vis[i])\r\n\t{\r\n\t\tint cnt = 0;\r\n\r\n\t\tstatus solve = dfs(i, -1, cnt);\r\n\r\n\t\tif(solve == CYCLE)\t// if odd cycle, remove 1\r\n\t\t\ttoRemove += (cnt % 2 == 1);\r\n\t}\r\n\t// teams must be same size...if total odd, remove 1\r\n\tif( (n - toRemove) % 2 == 1)\r\n\t\ttoRemove++;\r\n\r\n\tcout<<toRemove;\r\n\r\n\r\n\treturn 0;\r\n}\r\n"
}