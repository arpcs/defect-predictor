{
    "id": 195418963,
    "contestId": 216,
    "creationTimeSeconds": 1677657398,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 216,
        "index": "B",
        "name": "Forming Teams",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "implementation"
        ]
    },
    "author": {
        "contestId": 216,
        "members": [
            {
                "handle": "Gerges_Hany"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1344958200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\nusing namespace std; \r\nusing namespace __gnu_pbds;\r\n\r\n#define EPS 1e-8\r\n#define sz(s) int(s.size())  \r\n#define rall(s)  s.rbegin(), s.rend()\r\n#define TC int t; cin >> t; while(t--)\r\n#define getline(s) getline(cin >> ws, s)\r\n#define all(vec)  vec.begin(),  vec.end()\r\n#define updmin(a, b) a = min((ll)a, (ll)b)\r\n#define updmax(a, b) a = max((ll)a, (ll)b)\r\n#define Num_of_Digits(n) ((int)log10(n) + 1)\r\n#define endd(s) return void(cout << s << \"\\n\")\r\n#define fixed(n) cout << fixed << setprecision(n)\r\n#define ceill(n, m) (((n) / (m)) + ((n) % (m) ? 1 : 0))\r\n#define cin_2d(vec, n, m) for(int i=0;i<n;i++) for(int j=0;j<m&&cin>>vec[i][j];j++);\r\n#define Time cerr << \"Time Taken: \" << (float)clock() / CLOCKS_PER_SEC << \" Secs\" << \"\\n\";\r\n#define ordered_set tree<ll, null_type, less <ll>, rb_tree_tag,tree_order_statistics_node_update>\r\n#define multi_ordered_set tree<ll, null_type, less_equal <ll>, rb_tree_tag,tree_order_statistics_node_update>\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\nconst ll N = 2 * 1e5 + 5;\r\nconst ll mod = 1e9 + 7;\r\nconst ll INF = 1LL << 60;\r\n\r\nvoid Gerges_Hany(){\r\n  ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\r\n  #ifndef ONLINE_JUDGE  \r\n    freopen(\"input.txt\", \"r\", stdin), freopen(\"output.txt\", \"w\", stdout);\r\n  #endif\r\n}\r\n\r\ntemplate < typename T = int > istream& operator >> (istream &in, vector < T > &v) {\r\n    for (auto &x : v) in >> x; return in;\r\n}\r\n \r\ntemplate < typename T = int > ostream& operator << (ostream &out, const vector < T > &v) { \r\n    for (const T &x : v) out << x << ' '; return out;\r\n}\r\n\r\n/*\r\n * don't be lazy in thinking \r\n * Think twice, code once\r\n * Think of different approaches to tackle a problem: write them down\r\n * Think of different views of the problem. don't look from only one side \r\n*/\r\n\r\nll bench = 0;\r\nvector < ll > adj[101];\r\nvector < ll > teams(101, -1);\r\n\r\n\r\nvoid dfs(ll node){\r\n  for (auto child : adj[node]){\r\n    if (teams[node] == teams[child]){\r\n      teams[child] = 2;\r\n      bench++;\r\n    }\r\n    if (teams[child] == -1){\r\n      teams[child] = 3 - teams[node];\r\n      dfs(child);\r\n    }\r\n  }\r\n}\r\n\r\nvoid Accepted(){\r\n  \r\n  ll n, m;\r\n  cin >> n >> m;\r\n  for (ll i = 0, u, v; i < m && cin >> u >> v; i++){\r\n    adj[u].push_back(v);\r\n    adj[v].push_back(u);\r\n  }\r\n\r\n  for (ll i = 1; i <= n; i++){\r\n    if (teams[i] == -1){\r\n      teams[i] = 1;\r\n      dfs(i);\r\n    }\r\n  }\r\n\r\n  // if n - bench is odd then we need to add one more player to the bench\r\n  cout << bench + ((n - bench) & 1); \r\n\r\n}\r\n\r\nint main()\r\n{\r\n  // int T = 1;\r\n  Gerges_Hany();\r\n  int testcaces = 1; \r\n   // cin >> testcaces;\r\n  while (testcaces--){  \r\n    // cout << \"Case #\" << T++ << \": \";\r\n    Accepted();\r\n  }   \r\n  Time; \r\n  return 0;\r\n}"
}