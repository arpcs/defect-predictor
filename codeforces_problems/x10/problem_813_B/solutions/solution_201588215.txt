{
    "id": 201588215,
    "contestId": 813,
    "creationTimeSeconds": 1681074092,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 813,
        "index": "B",
        "name": "The Golden Age",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "brute force",
            "math"
        ]
    },
    "author": {
        "contestId": 813,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1496675100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\n\nusing namespace __gnu_pbds;\nusing namespace std;\n\ntemplate <typename T> using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\ngp_hash_table<int, int> mp;\nstd::vector<int> getpower(int a, int b){\n\tvector<int> ret = {1};\n\twhile((__int128)ret.back()*a <= b){\n\t\tret.push_back(ret.back() * a);\n\t}\n\treturn ret;\n}\nint32_t main(int argc, char const *argv[])\n{\n\n#ifndef ONLINE_JUDGE\n  freopen(\"in.txt\", \"r\", stdin);\n  freopen(\"out.txt\", \"w\", stdout);\n#endif\n\n  ios_base :: sync_with_stdio(false);\n  cin.tie(0);\n  \n  /* code */\n  int x, y, l, r;\n  cin >> x >> y >> l >> r;\n  vector<int> a, b, dif;\n  a = getpower(x, r);\n  b = getpower(y, r);\n  for(auto it1 : a){\n  \tfor(auto it2 : b){\n  \t\tif(it1 + it2 <= r){\n  \t\t\tdif.push_back(it1+it2);\n  \t\t}\n  \t}\n  }\n  dif.push_back(l-1);\n  dif.push_back(r+1);\n  sort(dif.begin(), dif.end());\n  int ans = 0;\n  for(int i=1; i<(int)dif.size(); i++){\n  \t// assert(dif[i] <= r);\n  \tif(dif[i] >= l-1){\n  \t\tans = max(ans, dif[i] - dif[i-1] - 1);\n  \t}\n  }\n  cout << ans << '\\n';\n  return 0;\n}\n\t\t\t   \t   \t     \t\t    \t\t \t\t   \t"
}