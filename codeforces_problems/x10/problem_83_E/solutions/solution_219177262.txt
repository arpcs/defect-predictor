{
    "id": 219177262,
    "contestId": 83,
    "creationTimeSeconds": 1692237039,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 83,
        "index": "E",
        "name": "Two Subsequences",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2800,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 83,
        "members": [
            {
                "handle": "Moon_rainbow"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1305299400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 872,
    "memoryConsumedBytes": 22528000,
    "source": "// LUOGU_RID: 121328309\n#include<bits/stdc++.h>\n\nusing namespace std;\nconst int MN = 2e5;\n\nint N;\nchar A[MN + 5][25];\n\nint LA,SF;\n\nstruct Trie_Tree{\n  int maxn = 0,lz = 0;\n  Trie_Tree *son[2] = {NULL,NULL};\n  void Push_up(){\n    maxn = 0;\n    if(son[0] != NULL)\n      maxn = max(maxn,son[0] -> maxn);\n    if(son[1] != NULL)\n      maxn = max(maxn,son[1] -> maxn);\n    return;\n  }\n  void Push_down(){\n    if(son[0] != NULL)\n      son[0] -> maxn += lz,son[0] -> lz += lz;\n    if(son[1] != NULL)\n      son[1] -> maxn += lz,son[1] -> lz += lz;\n    lz = 0;\n    return;\n  }\n}*RT = new Trie_Tree();\n\nint F(char *a,char *b);\nvoid Insert(Trie_Tree *&now,int id,int loc,int val);\n\nint main(){\n  scanf(\"%d\",&N);\n  for(int i = 1;i <= N;++i)\n    scanf(\"%s\",A[i]);\n  LA = strlen(A[1]);\n  for(int i = 2,dt1,dt2;i <= N;++i){\n    dt1 = max(RT -> maxn,SF);\n    for(int r = 0;r < LA;++r){\n      Trie_Tree *now = RT;\n      for(int nl = r;nl >= 0 && now != NULL;--nl){\n\tnow -> Push_down();\n\tnow = now -> son[A[i][nl] - '0'];\n      }\n      if(now == NULL)\n\tcontinue;\n      dt1 = max(dt1,now -> maxn + r + 1);\n      // printf(\"  %d %d %d\\n\",dt1,r,now -> maxn);\n    }\n    dt2 = F(A[i - 1],A[i]);\n    SF += dt2;\n    RT -> maxn += dt2;\n    RT -> lz += dt2;\n    Insert(RT,i - 1,LA - 1,dt1);\n    // printf(\"<%d,%d>\\n\",SF,RT -> maxn);\n  }\n  printf(\"%d\",N * LA - max(SF,RT -> maxn));\n  return 0;\n}\n\nint F(char *a,char *b){\n  for(int res = LA;res > 0;--res)\n    for(int la = LA - res,lb = 0;lb < res && a[la] == b[lb];++la,++lb)\n      if(lb + 1 == res)\n\treturn res;\n  return 0;\n}\n\nvoid Insert(Trie_Tree *&now,int id,int loc,int val){\n  if(now == NULL)\n    now = new Trie_Tree();\n  if(loc == -1){\n    now -> maxn = max(now -> maxn,val);\n    return;\n  }\n  now -> Push_down();\n  Insert(now -> son[A[id][loc] - '0'],id,loc - 1,val);\n  now -> Push_up();\n  return;\n}\n"
}