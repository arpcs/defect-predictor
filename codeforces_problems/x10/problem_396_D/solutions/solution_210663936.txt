{
    "id": 210663936,
    "contestId": 396,
    "creationTimeSeconds": 1687442739,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 396,
        "index": "D",
        "name": "On Sum of Number of Inversions in Permutations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 396,
        "members": [
            {
                "handle": "Drakkon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393428600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 2542,
    "memoryConsumedBytes": 68608000,
    "source": "#include<bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define pp push_back\r\n#define endl '\\n'\r\n#define all(x) x.begin(),x.end()\r\n#define ld long double\r\n#define PI acos(-1)\r\n#define sin(a) sin((a)*PI/180)\r\n#define cos(a) cos((a)*PI/180)\r\n#define ones(x) __builtin_popcountll(x)\r\n//#define int ll\r\n\r\n#define Drakon  ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\nusing namespace std;\r\n\r\n\r\nunsigned long long inf = 1e10;\r\nconst double EPS = 1e-6;\r\nconst int MOD = 1000000007, N = 1e6 + 5, LOG = 25, M = 2;\r\n\r\ntypedef array<array<int, M>, M> matrix;\r\n\r\nll gcd(ll x, ll y) {\r\n    return y ? gcd(y, x % y) : x;\r\n}\r\n\r\nll lcm(ll a, ll b) {\r\n    return (a * b) / __gcd(a, b);\r\n}\r\n\r\nll mul(const ll &a, const ll &b) {\r\n    return (a % MOD + MOD) * (b % MOD + MOD) % MOD;\r\n}\r\n\r\nll add(const ll &a, const ll &b) {\r\n    return (a + b + 2 * MOD) % MOD;\r\n}\r\n\r\nll power(ll x, ll y) {\r\n    ll ret = 1;\r\n    while (y > 0) {\r\n        if (y % 2 == 0) {\r\n            x = mul(x, x);\r\n            y = y / 2;\r\n        } else {\r\n            ret = mul(ret, x);\r\n            ret %= MOD;\r\n            y = y - 1;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\n\r\nll fac[N], inv[N];\r\n\r\nvoid build() {\r\n    fac[0] = fac[1] = 1;\r\n    for (int i = 2; i < N; ++i) {\r\n        fac[i] = mul(fac[i - 1], i);\r\n    }\r\n    inv[0] = 1;\r\n    for (int i = 1; i < N; ++i) {\r\n        inv[i] = power(fac[i], MOD - 2);\r\n    }\r\n}\r\n\r\nll sum(ll n){\r\n    return n * (n + 1) / 2 % MOD;\r\n}\r\n\r\nll inversions(ll n){\r\n    if(n <= 1)return 0;\r\n    return mul(n * (n - 1) / 2, mul(fac[n], inv[2]));\r\n}\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace __gnu_pbds;\r\ntemplate<typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\nvoid solve() {\r\n    build();\r\n    int n;\r\n    cin >> n;\r\n    vector<int>vec(n);\r\n    ordered_set<int>s;\r\n\r\n    for (int i = 0; i < n; ++i) {\r\n        s.insert(i);\r\n    }\r\n\r\n    ll tot = 1;\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> vec[i];\r\n        vec[i] --;\r\n        int tmp = s.order_of_key(vec[i]);\r\n        tot = add(tot, mul(tmp, fac[n - i - 1]));\r\n        s.erase(vec[i]);\r\n    }\r\n\r\n    for (int i = 0; i < n; ++i) {\r\n        s.insert(i);\r\n    }\r\n\r\n    ll k = 1, ret = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n\r\n        int tmp = s.order_of_key(vec[i]);\r\n        ret = add(ret, mul(tmp, inversions(n - i - 1)));\r\n        ret = add(ret, mul(sum(tmp - 1), fac[n - i - 1]));\r\n\r\n        k = add(k, mul(tmp, fac[n - i - 1]));\r\n        s.erase(vec[i]);\r\n\r\n        ret = add(ret, mul(tmp, add(tot, add(1, -k))));\r\n    }\r\n\r\n    cout << ret;\r\n}\r\n\r\nsigned main() {\r\n    Drakon\r\n    int t = 1;\r\n    //cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n}"
}