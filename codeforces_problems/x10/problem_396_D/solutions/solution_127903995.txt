{
    "id": 127903995,
    "contestId": 396,
    "creationTimeSeconds": 1630835838,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 396,
        "index": "D",
        "name": "On Sum of Number of Inversions in Permutations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 396,
        "members": [
            {
                "handle": "AmirrzwM"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393428600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 1357,
    "memoryConsumedBytes": 16384000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef pair<int,int> pii;\r\n\r\n#define vc vector\r\n#define pb push_back\r\n#define fr first\r\n#define sc second\r\n#define all(x) (x.begin() , x.end())\r\n\r\nconst int MAXN = 1e6 + 16 , mod = 1e9 + 7 , inv = 5e8 + 4;\r\n\r\nint n , p[MAXN] , bit[MAXN] , ftn[MAXN];\r\n\r\nint get(int r){\r\n  int ret = 0;\r\n  for(; r >= 0 ; r = (r & (r+1)) - 1) ret += bit[r];\r\n  return ret;\r\n}\r\nvoid upd(int r){\r\n  for(; r < MAXN ; r |= (r+1)) bit[r]++;\r\n}\r\n\r\nint C2(int n){\r\n  int ret = (1ll * n * (n-1)) % mod;\r\n  ret = (1ll * ret * inv) % mod;\r\n  return ret;\r\n}\r\n\r\nint main(){\r\n  ftn[0] = 1;\r\n  for(int i = 1 ; i < MAXN ; i++){\r\n\tftn[i] = (1ll * i * ftn[i-1]) % mod;\r\n  }\r\n  cin >> n;\r\n  for(int i = 0 ; i < n ; i++) cin >> p[i] , p[i]--;\r\n  int cur = 0 , ans = 0;\r\n  for(int i = 0 ; i < n-1 ; i++){\r\n\tint id = p[i] - get(p[i]);\r\n\tint add = (1ll * ftn[n-i-1] * inv) % mod;\r\n\tadd = (1ll * add * C2(n-i-1)) % mod;\r\n\tadd = (1ll * add * id) % mod;\r\n\tadd = (add + 1ll * id * ((1ll * ftn[n-i-1] * cur) % mod)) % mod;\r\n\tadd = (add + 1ll * ftn[n-i-1] * C2(id)) % mod;\r\n\tans += add;\r\n\tif(ans >= mod) ans -= mod;\r\n\t\r\n\tcur += id;\r\n\tif(cur >= mod) cur -= mod;\r\n\tupd(p[i]);\r\n  }\r\n  ans += cur;\r\n  if(ans >= mod) ans -= mod;\r\n  cout << ans << endl;\r\n}"
}