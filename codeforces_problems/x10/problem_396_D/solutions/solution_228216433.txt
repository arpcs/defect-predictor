{
    "id": 228216433,
    "contestId": 396,
    "creationTimeSeconds": 1697312349,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 396,
        "index": "D",
        "name": "On Sum of Number of Inversions in Permutations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 396,
        "members": [
            {
                "handle": "jmichael"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393428600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 268390400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef LOCAL_MACHINE\n    template <class K, class V> ostream& operator<< (ostream& s, const pair <K, V> &p) {\n        auto [x, y] = p; s << '(' << x << \", \" << y << \")\"; return s;\n    }\n    template <class T, class=typename T::value_type, class=typename enable_if<!is_same<T, string>::value && !is_same<T, complex <typename T::value_type>>::value>::type> ostream& operator<< (ostream &out, const T&v) {\n        stringstream t; t << '['; for(auto &x: v) {t << x << \", \";}  \n        string s = t.str(); if(!v.empty()) {s.pop_back(); s.pop_back();} s += ']'; \n        out << s; return out;\n    }\n    template <class T> void __prnt(T x) {cerr << x << endl;}\n    void __prnt() {cerr << endl;}\n    template <class T, class...Ts> void __prnt (T&&a, Ts&&...etc) {cerr << a << \", \", __prnt(etc...);}\n    #define print(...) if(#__VA_ARGS__ == \"\") __prnt(); else (cerr << #__VA_ARGS__ <<\" = \", __prnt(__VA_ARGS__))\n#else\n    #define print(...) 4224224\n#endif\n\n\n#define int long long\n\ntypedef vector <int> vi;\ntypedef pair <int, int> pii;\n\nvoid solve();\nvoid init_fact();\nvoid init_inv();\n\nvoid maxeq(int &a, int b) {a = max(a, b);}\nvoid mineq(int &a, int b) {a = min(a, b);}\n\nsigned main() {\n    init_fact();\n    init_inv();\n\n    int t = 1;\n\n    while(t-- > 0) {\n        solve();\n    }\n}\n\nconst int MOD = 1000'000'000 + 7;\n\nint mod(int n) {\n    return ((n % MOD) + MOD) % MOD;\n}\n\n//const int MAX = 1e6 + 10;\nconst int MAX = 100;\n\nvector <int> fact(MAX);\n\nvoid init_fact() {\n    fact[0] = 1;\n    for(int i = 1; i < MAX; i++) {\n        fact[i] = mod(i * fact[i - 1]);\n    }\n}\n\nvector <int> perm_inv(MAX);\n\nvoid init_inv() {\n    perm_inv[0] = 0;\n\n    for(int i = 1; i < MAX; i++) {\n        perm_inv[i] = mod(i * perm_inv[i - 1] + fact[i - 1] * mod(i * (i - 1) / 2));\n    }\n}\n\nint count_inv(int start, int n) {\n    start--;\n    return mod(start * perm_inv[n - 1] + fact[n - 1] * mod(start * (start - 1) / 2));\n}\n\nvector <int> tree(4 * MAX, 0);\n\nvoid update_helper(int ind, int val, int v, int l, int r) {\n    if(ind == l && ind == r) {\n        tree[v] = val;\n    } else {\n        int m = (l + r) / 2;\n        if(ind <= m)\n            update_helper(ind, val, 2*v+1, l, m);\n        else\n            update_helper(ind, val, 2*v+2, m + 1, r);\n        tree[v] = tree[2*v+1] + tree[2*v+2];\n    }\n}\n\nint sum_helper(int left, int right, int v, int l, int r) {\n    if(left > right)\n        return 0;\n    else if (left == l && right == r)\n        return tree[v];\n    else {\n        int m = (l + r) / 2;\n        return\n            sum_helper(left, min(right, m), 2*v+1, l, m) +\n            sum_helper(max(left, m + 1), right, 2*v+2, m+1, r);\n    }\n}\n\nvoid update(int ind, int val) {\n    update_helper(ind, val, 0, 0, MAX - 1);\n}\n\nint sum(int left, int right) {\n    return sum_helper(left, right, 0, 0, MAX - 1);\n}\n\n/*\n1 2 3 - 0 - 0\n1 3 2 - 1 - 1\n2 1 3 - 1 - 2\n2 3 1 - 2 - 4\n3 1 2 - 2 - 6\n3 2 1 - 3 - 9\n*/\n\nvoid solve() {\n    int n;\n    cin >> n;\n\n    vector <int> a(n);\n    for(int &x: a) cin >> x;\n\n    for(int i = 1; i <= n; i++)\n        update(i, 0);\n\n    int inv = 0;\n    function <int(int)> rep = [&](int i) {\n        if(i == n)\n            return (int) 1;\n\n        int x = a[i];\n        int act = x - sum(1, x);\n        update(x, 1);\n\n        int len = n - i;\n        inv += count_inv(act, len); \n        inv = mod(inv);\n\n        int cnt = rep(i + 1);\n\n        inv += (act - 1) * cnt;\n        inv = mod(inv);\n\n        cnt += (act - 1) * fact[len - 1];\n        cnt = mod(cnt);\n\n        return cnt;\n    };\n    rep(0);\n\n    cout << inv << \"\\n\";\n}\n\n\n\n"
}