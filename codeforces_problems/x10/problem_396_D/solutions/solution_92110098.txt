{
    "id": 92110098,
    "contestId": 396,
    "creationTimeSeconds": 1599460065,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 396,
        "index": "D",
        "name": "On Sum of Number of Inversions in Permutations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 396,
        "members": [
            {
                "handle": "TasteOfIceCream"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393428600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 1060,
    "memoryConsumedBytes": 56115200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst long long N = 1000 * 1000 + 100, mod = 1LL * 1000 * 1000 * 1000 + 7;\nlong long n, a[N], fact[N], seg[N << 2], s[N], inv4;\n\nlong long Pow(long long a, long long b) {\n\treturn b? (b & 1? a: 1) % mod * Pow(a * a % mod, b >> 1) % mod: 1;\n}\n\nvoid add(long long x, long long l = 1, long long r = n + 1, long long root = 1) {\n\tif (l + 1 == r) {\n\t\tseg[root]++;\n\t\treturn;\n\t}\n\tlong long mid = l + r >> 1;\n\tif (x < mid)\n\t\tadd(x, l, mid, root << 1);\n\telse\n\t\tadd(x, mid, r, root << 1 | 1);\n\tseg[root] = seg[root << 1] + seg[root << 1 | 1];\n}\n\nlong long get(long long l, long long r, long long lx = 1, long long rx = n + 1, long long root = 1) {\n\tif (l <= lx && r >= rx)\n\t\treturn seg[root];\n\tif (l >= rx || r <= lx)\n\t\treturn 0;\n\tlong long mid = lx + rx >> 1;\n\treturn get(l, r, lx, mid, root << 1) + get(l, r, mid, rx, root << 1 | 1);\n}\n\nlong long c(long long x) {\n\treturn 1LL * x * (x - 1) / 2;\n}\n\nint main() { \n\tios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\n\tinv4 = Pow(4, mod - 2);\n\tcin >> n;\n\tfor (long long i = 1; i <= n; i++)\n\t\tcin >> a[i];\n\tfact[0] = 1;\n\tfor (long long i = 1; i <= n + 10; i++)\n\t\tfact[i] = 1LL * fact[i - 1] * i % mod;\n\tfor (long long i = 0; i <= n + 10; i++)\n\t\ts[i] = 1LL * i * (i - 1) % mod * fact[i] % mod * inv4 % mod;\n\tlong long ans = 0, inv = 0;\n\tfor (long long i = 1; i <= n; i++) {\n\t\tlong long x = a[i] - 1 - get(1, a[i]);\n\t\tadd(a[i]);\n\t\t(ans += 1LL * inv * fact[n - i] % mod * x % mod) %= mod;\n\t\t(ans += 1LL * s[n - i] * x % mod) %= mod;\n\t\t(ans += 1LL * c(x) * fact[n - i] % mod) %= mod;\n\t\t(inv += x) %= mod;\n\t}\n\t(ans += inv) %= mod;\n\tcout << ans << '\\n';\n\treturn 0;\n}\n"
}