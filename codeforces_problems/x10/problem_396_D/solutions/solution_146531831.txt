{
    "id": 146531831,
    "contestId": 396,
    "creationTimeSeconds": 1644937209,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 396,
        "index": "D",
        "name": "On Sum of Number of Inversions in Permutations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 396,
        "members": [
            {
                "handle": "Mehdi_Farhadian"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393428600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 20070400,
    "source": "#include <bits/stdc++.h>\r\n#define pb push_back\r\n#define endl '\\n'\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"O0\")\r\n#pragma GCC optimize(\"O1\")\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nstruct Fen {\r\n    int n;\r\n    vector<ll> fen;\r\n    void init(int x)\r\n    {\r\n        n = x;\r\n        fen.assign(n + 1, 0);\r\n    }\r\n    ll sum(int ind)\r\n    {\r\n        ll ret = 0;\r\n        for (; 0 < ind; ind -= ind & -ind) {\r\n            ret += fen[ind];\r\n        }\r\n        return ret;\r\n    }\r\n    void add(int ind, ll val)\r\n    {\r\n        for (; ind <= n; ind += ind & -ind) {\r\n            fen[ind] += val;\r\n        }\r\n    }\r\n};\r\n\r\nconst int N = 1e6 + 10;\r\nconst int mod = 1e9 + 7;\r\nint n, a[N];\r\nFen mark;\r\nll res, fact[N], sum;\r\n\r\nll calc(ll x)\r\n{\r\n    int bac = x;\r\n    if (x < 2) {\r\n        return 0;\r\n    }\r\n    x = x * (x - 1) / 2;\r\n    x %= mod;\r\n    x *= x;\r\n    x %= mod;\r\n    x *= fact[bac - 2];\r\n    x %= mod;\r\n    return x;\r\n}\r\n\r\nvoid pre()\r\n{\r\n    fact[0] = fact[1] = 1;\r\n    for (int i = 2; i <= n; i++) {\r\n        fact[i] = fact[i - 1] * i;\r\n        fact[i] %= mod;\r\n    }\r\n}\r\n\r\nvoid solve()\r\n{\r\n    mark.init(n);\r\n    for (int i = 0; i < n; i++) {\r\n        mark.add(i + 1, 1);\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        ll num = mark.sum(a[i] - 1);\r\n        ll tmp = (num * (num - 1) / 2) % mod;\r\n        tmp *= fact[n - i], tmp %= mod;\r\n        res += tmp, res %= mod;\r\n        res += num * calc(n - i), res %= mod;\r\n        res += (((num * fact[n - i]) % mod) * sum) % mod;\r\n        res %= mod;\r\n        sum += num;\r\n        sum %= mod;\r\n        mark.add(a[i], -1);\r\n    }\r\n    res += sum;\r\n    res %= mod;\r\n    cout << res;\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cin >> n;\r\n    pre();\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> a[i];\r\n    }\r\n    solve();\r\n}"
}