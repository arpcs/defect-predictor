{
    "id": 205945877,
    "contestId": 713,
    "creationTimeSeconds": 1684130474,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 713,
        "index": "B",
        "name": "Searching Rectangles",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive"
        ]
    },
    "author": {
        "contestId": 713,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1473784500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n\n#define mp make_pair\n#define F first\n#define S second\n\nusing namespace std;\n\ntypedef pair<int, int> pii;\n\nstruct rectangle{\n    pii bl, tr;\n\n    rectangle() : rectangle(0, 0, 0, 0){ }\n\n    rectangle(int b, int l, int t, int r) : bl(mp(b, l)), tr(mp(t, r)){ }\n};\n\nint query(int l, int b, int r, int t){\n    printf(\"? %d %d %d %d\\n\", l, b, r, t);\n    fflush(stdout);\n    int ans;\n    scanf(\"%d\", &ans);\n    return ans;\n}\n\nint xline(int n){\n    int left = 1, right = n, middle, r;\n    bool ok = 0;\n    while(left <= right){\n        middle = (left + right) >> 1;\n        r = query(1, 1, middle, n);\n        if(r == 1 && query(middle + 1, 1, n, n) == 1){\n            ok = 1;\n            break;\n        }\n        else if(!r)\n            left = middle + 1;\n        else\n            right = middle - 1;\n    }\n    return ok ? middle : -1;\n}\n\nint yline(int n){\n    int left = 1, right = n, middle, r;\n    bool ok = 0;\n    while(left <= right){\n        middle = (left + right) >> 1;\n        r = query(1, 1, n, middle);\n        if(r == 1 && query(1, middle + 1, n, n) == 1){\n            ok = 1;\n            break;\n        }\n        else if(!r)\n            left = middle + 1;\n        else\n            right = middle - 1;\n    }\n    return ok ? middle : -1;\n}\n\nint getLine1(rectangle r){\n    int left = r.bl.F - 1, right = r.tr.F, middle;\n    while(left + 1 < right){\n        middle = (left + right) >> 1;\n        if(query(r.bl.F, r.bl.S, middle, r.tr.S) == 1)\n            right = middle;\n        else\n            left = middle;\n    }\n    return right;\n}\n\nint getLine2(rectangle r){\n    int left = r.bl.S - 1, right = r.tr.S, middle;\n    while(left + 1 < right){\n        middle = (left + right) >> 1;\n        if(query(r.bl.F, r.bl.S, r.tr.F, middle) == 1)\n            right = middle;\n        else\n            left = middle;\n    }\n    return right;\n}\n\nint getLine3(rectangle r){\n    int left = r.bl.F, right = r.tr.F + 1, middle;\n    while(left + 1 < right){\n        middle = (left + right) >> 1;\n        if(query(middle, r.bl.S, r.tr.F, r.tr.S) == 1)\n            left = middle;\n        else\n            right = middle;\n    }\n    return left;\n}\n\nint getLine4(rectangle r){\n    int left = r.bl.S, right = r.tr.S + 1, middle;\n    while(left + 1 < right){\n        middle = (left + right) >> 1;\n        if(query(r.bl.F, middle, r.tr.F, r.tr.S) == 1)\n            left = middle;\n        else\n            right = middle;\n    }\n    return left;\n}\n\nrectangle findRectangle(int b, int l, int t, int r){\n    rectangle ans(b, l, t, r);\n    ans.tr.F = getLine1(ans);\n    ans.tr.S = getLine2(ans);\n    ans.bl.F = getLine3(ans);\n    ans.bl.S = getLine4(ans);\n    return ans;\n}\n\nint main(){\n\tint n, sep;\n\tscanf(\"%d\", &n);\n\tsep = xline(n);\n\trectangle r1, r2;\n\tif(sep != -1)\n        r1 = findRectangle(1, 1, sep, n), r2 = findRectangle(sep + 1, 1, n, n);\n\telse\n        sep = yline(n), r1 = findRectangle(1, 1, n, sep), r2 = findRectangle(1, sep + 1, n, n);\n\tprintf(\"! %d %d %d %d %d %d %d %d\\n\", r1.bl.F, r1.bl.S, r1.tr.F, r1.tr.S, r2.bl.F, r2.bl.S, r2.tr.F, r2.tr.S);\n\tfflush(stdout);\n\treturn 0;\n}\n\n   \t \t \t  \t \t   \t  \t \t\t\t  \t\t\t"
}