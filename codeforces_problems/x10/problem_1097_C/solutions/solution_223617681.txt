{
    "id": 223617681,
    "contestId": 1097,
    "creationTimeSeconds": 1694869955,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1097,
        "index": "C",
        "name": "Yuhao and a Parenthesis",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1400,
        "tags": [
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1097,
        "members": [
            {
                "handle": "Mhmmd.itani"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546613100
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<iostream>\r\n#include<algorithm>\r\n#include<unordered_map>\r\n#include <string>\r\n\r\ntypedef long long ll;\r\n\r\n// ((())\r\n\r\nstd::pair<int, int> get_whats_up(const std::string& seq)\r\n{\r\n    int open = 0, close = 0;\r\n\r\n    for (int i = 0; i < seq.size(); ++i)\r\n    {\r\n        if (seq[i] == '(')\r\n        {\r\n            open++;\r\n        }\r\n        else\r\n        {\r\n            if (open > 0)\r\n                open--;\r\n            else\r\n                close++;\r\n        }\r\n    }\r\n    return std::make_pair(open, close);\r\n}\r\n\r\nint main()\r\n{\r\n    int n;\r\n    std::cin >> n;\r\n\r\n    std::unordered_map<int, int> openingMap;\r\n    std::unordered_map<int, int> closingMap;\r\n\r\n    int correct_seqs = 0;\r\n\r\n    for (int i = 0; i < n; ++i)\r\n    {\r\n        std::string str;\r\n        std::cin >> str;\r\n        auto pair = get_whats_up(str);\r\n        correct_seqs += (pair.first == 0 && pair.second == 0);\r\n        if (pair.first > 0 && pair.second > 0)\r\n            continue;\r\n        openingMap[pair.first]++;\r\n        closingMap[pair.second]++;\r\n    }\r\n\r\n    int cnt = 0;\r\n\r\n    for (auto& [num, count] : openingMap)\r\n    {\r\n        if (num == 0) continue;\r\n        int other = closingMap[num];\r\n        cnt += std::min(count, other);\r\n        closingMap[num] -= std::min(count, other);\r\n        openingMap[num] -= std::min(count, other);\r\n    }\r\n\r\n    for (auto& [num, count] : closingMap)\r\n    {\r\n        if (num == 0) continue;\r\n        int other = openingMap[num];\r\n        cnt += std::min(count, other);\r\n        closingMap[num] -= std::min(count, other);\r\n        openingMap[num] -= std::min(count, other);\r\n    }\r\n\r\n    cnt += correct_seqs/2;\r\n\r\n    std::cout << cnt << std::endl;\r\n\r\n    // when you are passing through each sequence, if its correct, increment the correct_seqs var\r\n    // if its not correct, check if it needs both open and closed seqs then discard it\r\n    // if it needs 5 closing then u need to check a sequence that needs 5 opening?\r\n    /*\r\n    * (( this sequence needs 2 closing\r\n    * )) this sequence needs 2 opening\r\n    */\r\n\r\n    return 0;\r\n}\r\n"
}