{
    "id": 235816089,
    "contestId": 1906,
    "creationTimeSeconds": 1701765375,
    "relativeTimeSeconds": 12075,
    "problem": {
        "contestId": 1906,
        "index": "K",
        "name": "Deck-Building Game",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "divide and conquer",
            "math"
        ]
    },
    "author": {
        "contestId": 1906,
        "members": [
            {
                "handle": "Heltion"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 61303,
        "teamName": "Salt",
        "ghost": false,
        "startTimeSeconds": 1701753300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 5836800,
    "source": "#include <bits/stdc++.h>\r\n#ifdef Sugar\r\n#include \"debug.h\"\r\n#else\r\n#define debug(...) 42\r\n#define debug_assert(...) 42\r\n#endif\r\nusing namespace std;\r\nusing i64 = int64_t;\r\nconstexpr i64 mod = 998244353;\r\ni64 power(i64 a, i64 r) {\r\n  i64 res = 1;\r\n  for (; r; r >>= 1, a = a * a % mod) {\r\n    if (r & 1) { res = res * a % mod; }\r\n  }\r\n  return res;\r\n}\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n  int n, m = 17;\r\n  cin >> n;\r\n  vector<int> e(1 << m), o(1 << m), count(1 << m);\r\n  for (int i = 0, a; i < n; i += 1) {\r\n    cin >> a;\r\n    e[a] += 1;\r\n  }\r\n  auto rec = [&](auto&& rec, int s, int m, vector<int> e,\r\n                 vector<int> o) -> void {\r\n    if (m == 0) {\r\n      count[s] += o[0];\r\n      return;\r\n    }\r\n    vector<int> le(1 << (m - 1));\r\n    vector<int> lo(1 << (m - 1));\r\n    vector<int> re(1 << (m - 1));\r\n    vector<int> ro(1 << (m - 1));\r\n    for (int i = 0; i < (1 << (m - 1)); i += 1) {\r\n      le[i] += e[i];\r\n      lo[i] += o[i];\r\n      re[i] += e[i];\r\n      ro[i] += o[i];\r\n    }\r\n    for (int i = (1 << (m - 1)); i < (1 << m); i += 1) {\r\n      le[i - (1 << (m - 1))] += e[i];\r\n      lo[i - (1 << (m - 1))] += o[i];\r\n      re[i - (1 << (m - 1))] += o[i];\r\n      ro[i - (1 << (m - 1))] += e[i];\r\n    }\r\n    rec(rec, s, m - 1, le, lo);\r\n    rec(rec, s + (1 << (m - 1)), m - 1, re, ro);\r\n  };\r\n  rec(rec, 0, m, e, o);\r\n  debug(count);\r\n  vector<i64> f(1 << m);\r\n  for (int i = 0; i < (1 << m); i += 1) {\r\n    f[i] = power(mod - 1, count[i]) * power(3, n - count[i]) % mod;\r\n  }\r\n  debug(f);\r\n  for (int i = 0; i < m; i += 1) {\r\n    for (int j = 0; j < (1 << m); j += 1) {\r\n      if ((j >> i) % 2 == 0) {\r\n        i64 &x = f[j], &y = f[j + (1 << i)];\r\n        tie(x, y) = pair((x + y) * (mod + 1) / 2 % mod,\r\n                         (x + mod - y) * (mod + 1) / 2 % mod);\r\n      }\r\n    }\r\n  }\r\n  debug(f);\r\n  cout << f[0];\r\n}"
}