{
    "id": 204470866,
    "contestId": 1057,
    "creationTimeSeconds": 1683212798,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1057,
        "index": "A",
        "name": "Bmail Computer Network",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "*special",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 1057,
        "members": [
            {
                "handle": "kisuit4.0"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1539335100
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 2867200,
    "source": "n = int(input())\r\na = [int(x) for x in input().split()]\r\n\r\ngraph = [[] for i in range(n + 1)]\r\n\r\n[graph[element].append(i + 2) for i, element in enumerate(a)]\r\n\r\ndef dfs(start: int, end: int) -> list:\r\n    visited = []\r\n    stack = [start]\r\n    parent = {}\r\n\r\n    while len(stack) > 0:\r\n        curr = stack.pop(-1)\r\n        visited.append(curr)\r\n\r\n        if curr == end:\r\n            path = []\r\n            while curr != start:\r\n                path.append(curr)\r\n                curr = parent[curr]\r\n            path.append(start)\r\n            path.reverse()\r\n            return path\r\n\r\n        [stack.append(neighbor) and parent.__setitem__(neighbor, curr) for neighbor in graph[curr] if neighbor not in visited]\r\n\r\nres = dfs(1, n)\r\nfor i in res:\r\n    print(i, sep=\" \", end=\" \")\r\n"
}