{
    "id": 218716055,
    "contestId": 198,
    "creationTimeSeconds": 1691954945,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 198,
        "index": "A",
        "name": "About Bacteria",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 198,
        "members": [
            {
                "handle": "nushk_23"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1340379000
    },
    "programmingLanguage": "Java 11",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 248,
    "memoryConsumedBytes": 0,
    "source": "//package Practice900;\r\n\r\n\r\nimport java.util.*;\r\nimport java.io.*;\r\nimport java.math.BigInteger;\r\n\r\npublic class AboutBacteria {\r\n    static FastReader in=new FastReader();\r\n    static StringBuilder output = new StringBuilder();\r\n\r\n    public static void main(String args[]) throws IOException {\r\n        int t=in.nextInt();\r\n        while(t-->0)\r\n        {\r\n            solve();\r\n        }\r\n        in.print(output.toString());\r\n\r\n    }\r\n    static void solve() {\r\n\r\n        StringBuilder res = new StringBuilder();\r\n        long k = in.nextLong();\r\n        long b = in.nextLong();\r\n        long n = in.nextLong();\r\n        long t = in.nextLong();\r\n\r\n        if( k == 1){\r\n            long x = 0;\r\n            long z = n*b;\r\n            while(z >= t+x*b) x++;\r\n\r\n            output.append(x).append(\"\\n\");\r\n            return;\r\n        }\r\n        double min = ((k*t-t+b)*1.0/(k-1+b)*1.0);\r\n        long x = 0;\r\n        double curr = Math.pow(k,n-x);\r\n        while(min < curr){\r\n            x++;\r\n            curr = Math.pow(k,n-x);\r\n        }\r\n        output.append(x).append(\"\\n\");\r\n    }\r\n\r\n\r\n\r\n\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(new InputStreamReader(System.in));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        void print(Object res) {\r\n            output.append(res).append('\\n'); // Append to the output StringBuilder\r\n        }\r\n\r\n        BigInteger nextBigInteger() {\r\n            return new BigInteger(next());\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                str = br.readLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n"
}