{
    "id": 207845645,
    "contestId": 29,
    "creationTimeSeconds": 1685445050,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "AnonymousGuy12"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 1126400,
    "source": "#include <bits/stdc++.h>\r\n#define lli long long int\r\n#define endl \"\\n\"\r\n#define pb push_back\r\n#define pf push_front\r\n#define ff first\r\n#define ss second\r\n#define sz(x) (int)x.size()\r\n#define fastio() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(__null);\r\n\r\nusing namespace std;\r\n\r\nconst int mod = (int)1e9 + 7;\r\nconst int INF = (int)1e9;\r\n\r\nsigned main()\r\n{\r\n    fastio()\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    vector<int> adj[n + 1];\r\n    vector<vector<int>> dist(n + 1, vector<int>(n + 1, INF));\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        adj[x].pb(y), adj[y].pb(x);\r\n        dist[x][y] = dist[y][x] = 1;\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++) dist[i][i] = 0;\r\n\r\n    for (int k = 1; k <= n; k++)\r\n        for (int i = 1; i <= n; i++)\r\n            for (int j = 1; j <= n; j++)\r\n                if (dist[i][j] > dist[i][k] + dist[k][j])\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n\r\n    int c = 0;\r\n    for (int i = 2; i <= n; i++) if ((int)adj[i].size() == 1) c++;\r\n\r\n    vector<int> v(c);\r\n    for (auto &x : v) cin >> x;\r\n    v.pb(1);\r\n\r\n    vector<int> path;\r\n    function<void(int, int)> dfs = [&](int node, int in) -> void {\r\n        path.pb(node);\r\n\r\n        if (node == v[in] && in != (int)v.size() - 1) in++;\r\n\r\n        for (auto &x : adj[node])\r\n            if (dist[x][v[in]] < dist[node][v[in]])\r\n                dfs(x, in);\r\n    };\r\n\r\n    dfs(1, 0);\r\n\r\n    if ((int)path.size() != 2 * n - 1) cout << -1;\r\n    else for (auto &x : path) cout << x << \" \";\r\n\r\n    return 0;\r\n}"
}