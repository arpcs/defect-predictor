{
    "id": 204219794,
    "contestId": 29,
    "creationTimeSeconds": 1683024612,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "_ABDOEMAD_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define long long long\r\nconst int Mod = 1E9 + 7, N = 2e5 + 1;\r\n\r\nvoid Solution() {\r\n    int n; cin >> n;\r\n\r\n    vector<vector<int>> adj(n);\r\n    for (int i = 0; i < n - 1; i++) {\r\n        int a, b; cin >> a >> b;\r\n        a--, b--;\r\n        adj[a].push_back(b);\r\n        adj[b].push_back(a);\r\n    }\r\n\r\n    int m = 0;\r\n    vector<int> my_leaf(n);\r\n    function<void(int, int)> dfs = [&] (int node, int p) {\r\n        my_leaf[node] = node;\r\n        for (auto child : adj[node]) {\r\n            if (child == p) continue;\r\n            dfs(child, node);\r\n            my_leaf[node] = my_leaf[child];\r\n        }\r\n        m += (my_leaf[node] == node);\r\n    };\r\n    dfs(0, -1);\r\n\r\n    vector<int> leaf(m), pos(n);\r\n    for (int i = 0; i < m; i++) {\r\n        cin >> leaf[i];\r\n        leaf[i]--;\r\n        pos[leaf[i]] = i;\r\n    }\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        // sort according to the wanted order of the leafs.\r\n        sort(adj[i].begin(), adj[i].end(), [&] (int &x, int &y) { return pos[my_leaf[x]] < pos[my_leaf[y]]; });\r\n    }\r\n    \r\n    vector<int> ans, found;\r\n    dfs = [&] (int node, int p) {\r\n        ans.push_back(node);\r\n        for (auto child : adj[node]) {\r\n            if (child == p) continue;\r\n            dfs(child, node);\r\n            ans.push_back(node);\r\n        }\r\n        if (my_leaf[node] == node) found.push_back(node);\r\n    };\r\n    dfs(0, -1);\r\n\r\n    if (found != leaf) return void(cout << -1 << '\\n');\r\n\r\n    for (int i = 0; i < 2 * n - 1; i++) {\r\n        cout << ans[i] + 1 << ' ';\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr); cout.tie(nullptr);\r\n\r\n    int t = 1; // cin >> t;\r\n    while (t--) {\r\n        Solution();\r\n    }\r\n    return 0;\r\n}"
}