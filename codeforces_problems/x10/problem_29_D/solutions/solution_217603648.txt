{
    "id": 217603648,
    "contestId": 29,
    "creationTimeSeconds": 1691413155,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "M-Hussein"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 819200,
    "source": "////////////////////*\u0635\u0644 \u0639\u0644\u0649 \u0631\u0633\u0648\u0644 \u0627\u0644\u0644\u0647//*//////////////////\r\n#include<bits/stdc++.h>\r\n\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n\r\n\r\n#define ll long long\r\n#define endl  \"\\n\"\r\n#define Ceil(n, m)      (((n) / (m)) + ((n) % (m) ? 1 : 0))\r\n#define all(obj)        obj.begin(),obj.end()\r\n#define rall(vec)       vec.rbegin(),vec.rend()\r\n#define watch(x)        cout<<(#x)<<\" = \"<<x<<endl\r\n#define dpp(arr , val)  memset(arr , val , sizeof(arr))\r\n#define ordered_set     tree<int, null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>\r\n#define cin(vec)        for(auto &it:vec)cin>>it;\r\n#define oo 1000000000\r\n#define S second\r\n#define F first\r\n\r\n// order_of_key (k) : Number of items strictly smaller than k .\r\n// find_by_order(k) : K-th element in a set (counting from zero)\r\n\r\nvoid FAST()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n}\r\nvoid File()\r\n{\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n}\r\n\r\nll gcd(ll x,ll y)\r\n{\r\n    return(!y?x:gcd(y,x%y));\r\n}\r\nll lcm(ll x,ll y)\r\n{\r\n    return x/gcd(x,y)*y;\r\n}\r\nll power(ll x, ll k,ll mod = 1e9 + 7)\r\n{\r\n    ll ret = 1;\r\n    while (k)\r\n    {\r\n        if (k & 1) ret = ((ret%mod) *(x % mod)) % mod;\r\n        k >>= 1;\r\n        x = ((x%mod)*(x%mod))%mod;\r\n    }\r\n    return ret;\r\n}\r\n\r\nconst int N = 500 + 10;\r\nconst int md = 1e9 + 7;\r\n\r\nint dx[] = { 0, 0, -1, 1, -1, 1, 1, -1};\r\nint dy[] = {-1, 1,  0, 0,  1,-1, 1, -1};\r\n//////////////////////////solution//////////////////////////////\r\nvector<vector<int>> adj, par;\r\nvoid init(int n) {\r\n    par = adj = vector<vector<int>>(n + 1, vector<int>(n + 1, oo));\r\n    for (int i = 1; i <= n; i++)\r\n        adj[i][i] = 0;\r\n    for (int i = 1; i <= n; i++)\r\n        for (int j = 1; j <= n; j++)\r\n            par[i][j] = i;\r\n}\r\nvoid floyd() {\r\n    for (int k = 1; k < adj.size(); k++)\r\n        for (int i = 1; i < adj.size(); i++)\r\n            for (int j = 1; j < adj.size(); j++)\r\n                if (adj[i][j] > adj[i][k] + adj[k][j]) {\r\n                    adj[i][j] = adj[i][k] + adj[k][j];\r\n                    par[i][j] = par[k][j];\r\n                }\r\n}\r\nvector<int>res;\r\nvoid buildPath(int src, int dest) {\r\n    vector<int> path;\r\n    while (src != dest) {\r\n        path.push_back(dest);\r\n        dest = par[src][dest];\r\n    }\r\n    path.push_back(src);\r\n    reverse(path.begin(), path.end());\r\n    path.pop_back();\r\n    for(auto it : path) res.push_back(it);\r\n}\r\n\r\nvoid Solve() {\r\n\r\n    int n;cin>>n;\r\n    init(n);\r\n    for (int i = 0; i < n -1; ++i) {\r\n        int a, b;cin>>a>>b;\r\n        adj[a][b] = 1;\r\n        adj[b][a] = 1;\r\n    }\r\n    vector<int>leav;\r\n    leav.push_back(1);\r\n    int a;\r\n    while (cin>>a) leav.push_back(a);\r\n    floyd();\r\n    leav.push_back(1);\r\n    int sz = leav.size();\r\n    for (int i = 1; i < sz; ++i) {\r\n        buildPath(leav[i - 1] , leav[i]);\r\n    }\r\n    res.push_back(1);\r\n    if(res.size() != 2*n - 1) cout<<-1;\r\n    else\r\n        for(auto it : res) cout<<it<<\" \";\r\n}\r\n///////////////////////////solution///////////////////////////\r\nint main()\r\n{\r\n    FAST();File();\r\n    int t = 1;\r\n    //cin>>t;\r\n    while (t--){\r\n        Solve();\r\n    }\r\n}"
}