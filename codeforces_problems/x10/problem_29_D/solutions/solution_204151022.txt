{
    "id": 204151022,
    "contestId": 29,
    "creationTimeSeconds": 1682954971,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "VAHE"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 921600,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <string>\r\n#include <algorithm>\r\n#include <set>\r\n#include <map>\r\n#include <queue>\r\n#include <deque>\r\n#include <stack>\r\n#include <iomanip>\r\nusing namespace std;\r\nvector<vector<int>> gp;\r\nvector<int> le, ans{ 1 };\r\nvector<set<int>> ggt;\r\nint idx = 0;\r\n\r\nvoid build(int u, int p)\r\n{\r\n\tggt[u].insert(u);\r\n\tfor (int& v : gp[u])\r\n\t{\r\n\t\tif (v == p) continue;\r\n\t\tbuild(v, u);\r\n\t\tfor (int i : ggt[v]) ggt[u].insert(i);\r\n\t}\r\n}\r\n\r\nvoid dfs(int u, int p)\r\n{\r\n\tif (idx >= le.size()) return;\r\n\tif (u == le[idx]) idx++;\r\n\tif (ans.back() != u) ans.push_back(u);\r\n\tfor (int& v : gp[u])\r\n\t{\r\n\t\tif (v != p && idx < le.size() && ggt[v].find(le[idx]) != ggt[v].end())\r\n\t\t{\r\n\t\t\tdfs(v, u);\r\n\t\t\tif (ans.back() != u) ans.push_back(u);\r\n\t\t\tdfs(u, p);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\nint main()\r\n{\r\n\tint n; cin >> n;\r\n\tgp.resize(n);\r\n\tint _ = n; while (--_)\r\n\t{\r\n\t\tint u, v; cin >> u >> v;\r\n\t\tgp[--u].push_back(--v);\r\n\t\tgp[v].push_back(u);\r\n\t}\r\n\tint k = 0; for (int i = 1; i < n; i++) k += !(gp[i].size() - 1);\r\n\tle.resize(k); for (int& i : le) cin >> i, --i;\r\n\tggt.resize(n);\r\n\tbuild(0, -1);\r\n\tdfs(0, -1);\r\n\tvector<vector<bool>> vis(n, vector<bool>(n, 1));\r\n\tbool toshnie = 1;\r\n\tfor (int i = 1; i + 1 < ans.size(); i++) toshnie &= vis[ans[i]][ans[i + 1]], vis[ans[i]][ans[i + 1]] = 0;\r\n\tif (idx == le.size() && toshnie)\r\n\t{\r\n\t\tfor (int i = 1; i < ans.size(); i++) cout << ans[i] + 1 << \" \\n\"[i == ans.size() - 1];\r\n\t}\r\n\telse cout << \"-1\\n\";\r\n}"
}