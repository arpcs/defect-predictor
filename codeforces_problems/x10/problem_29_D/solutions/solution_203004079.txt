{
    "id": 203004079,
    "contestId": 29,
    "creationTimeSeconds": 1682135027,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "skywalkerr."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 5632000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std ;\r\n\r\n#define ll long long\r\n#define pb push_back\r\n#define sz(x) (int)x.size()\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n\r\nconst int N = 2e5 + 2 ;\r\n\r\nint n , pos[N] ;\r\nvector<int> g[N] , ans ;\r\n\r\nvector<int> dfs(int v , int p = -1) {\r\n    bool leaf = 1 ;\r\n    ans.pb(v) ;\r\n    vector<int> cur ;\r\n    for(auto& to : g[v]) {\r\n        if(to != p) {\r\n            leaf = 0 ;\r\n            for(auto x : dfs(to, v)) {\r\n                cur.pb(x) ;\r\n            }\r\n            ans.pb(v) ;\r\n        }\r\n    }\r\n    if(leaf) {\r\n        cur.pb(v) ;\r\n    }\r\n    return cur ;\r\n}\r\n\r\nvoid solve() {\r\n    cin >> n ;\r\n    for(int i = 1 ; i < n ; i++) {\r\n        int x , y ; cin >> x >> y ;\r\n        g[x].pb(y) ;\r\n        g[y].pb(x) ;\r\n    }\r\n    int cnt = 0 ;\r\n    for(int i = 2 ; i <= n ; i++) {\r\n        if(sz(g[i]) == 1) {\r\n            cnt++ ;\r\n        }\r\n    }\r\n    vector<int> val ;\r\n    for(int i = 1 ; i <= cnt ; i++) {\r\n        int x ; cin >> x ;\r\n        pos[x] = i ;\r\n        val.pb(x) ;\r\n    }\r\n    for(int i = 1 ; i <= n ; i++) {\r\n        sort(all(g[i]) , [&](int x , int y) {\r\n            return pos[x] < pos[y] ;\r\n        }) ;\r\n    }\r\n    dfs(1) ;\r\n    vector<int> res ;\r\n    for(int i = 0 ; i < sz(ans) ; i++) {\r\n        if(pos[ans[i]]) {\r\n            res.pb(pos[ans[i]]) ;\r\n        }\r\n    }\r\n    if(is_sorted(all(res))) {\r\n        for(auto x : ans) \r\n            cout << x << ' ' ;\r\n    }else{\r\n        cout << -1 ;\r\n    }\r\n}\r\n\r\nint main() {\r\n    // freopen(\".in\", \"r\", stdin) ;\r\n    // freopen(\".out\", \"w\", stdout) ;\r\n    ios::sync_with_stdio(false) ;\r\n    cin.tie(0) ;\r\n    int test = 1 ;\r\n    // cin >> test ;\r\n    while(test--) {\r\n        solve() ;\r\n    }\r\n    return 0 ;\r\n}\r\n"
}