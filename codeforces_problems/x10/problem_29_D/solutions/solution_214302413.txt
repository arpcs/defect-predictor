{
    "id": 214302413,
    "contestId": 29,
    "creationTimeSeconds": 1689662058,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "xuyunwei"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 102400,
    "source": "// LUOGU_RID: 116187028\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvector<int> g[500];\r\nvector<int> t[500];\r\nint deg[500] = {0};\r\n\r\nbool find(vector<int> &path, int fa, int u, int tar) {\r\n\tif (u == tar) return true;\r\n\tfor (int i = 0; i < g[u].size(); i++) \r\n\t\tif (fa != g[u][i]) {\r\n\t\t\tpath.push_back(i);\r\n\t\t\tif (find(path, u, g[u][i], tar)) return true;\r\n\t\t\tpath.pop_back();\r\n\t\t}\r\n\treturn false;\r\n}\r\n\r\nvoid go(vector<int> &ans, vector<int> &p1, vector<int> &p2) {\r\n\tint u = 1, _u;\r\n\tint i = 0, j;\r\n\twhile (i < min(p1.size(), p2.size()) && p1[i] == p2[i]) {\r\n\t\tu = g[u][p1[i]];\r\n\t\ti++;\r\n\t}\r\n\tvector<int> v;\r\n\tfor (j = i, _u = u; j < p1.size(); j++) {\r\n\t\tv.push_back(_u);\r\n\t\tt[_u][p1[j]]++;\r\n\t\t_u = g[_u][p1[j]];\r\n\t}\r\n\tfor (int i = v.size() - 1; i >= 0; i--) ans.push_back(v[i]);\r\n\tv.clear();\r\n\tfor (j = i, _u = u; j < p2.size(); j++) {\r\n\t\tv.push_back(_u);\r\n\t\tt[_u][p2[j]]++;\r\n\t\t_u = g[_u][p2[j]];\r\n\t}\r\n\tv.push_back(_u);\r\n\tfor (int i = 0; i < v.size(); i++) ans.push_back(v[i]);\r\n}\r\n\r\nvoid tryno(int fa, int u) {\r\n\tfor (int i = 0; i < g[u].size(); i++)\r\n\t\tif (fa != g[u][i]) {\r\n\t\t\tif (t[u][i] != 2) {\r\n\t\t\t\tcout << -1 << endl;\r\n\t\t\t\texit(0);\r\n\t\t\t}\r\n\t\t\ttryno(u, g[u][i]);\r\n\t\t}\r\n}\r\n\r\nvoid fix(vector<int> &v) {\r\n\tvector<int> vv = {v[0]};\r\n\tfor (int i = 1; i < v.size(); i++)\r\n\t\tif (v[i - 1] != v[i])\r\n\t\t\tvv.push_back(v[i]);\r\n\tv = vv;\r\n}\r\n\r\nint main() {\r\n\tint n;\r\n\tcin >> n;\r\n\tdeg[1] = 1;\r\n\tfor (int i = 1; i < n; i++) {\r\n\t\tint u, v;\r\n\t\tcin >> u >> v;\r\n\t\tg[u].push_back(v);\r\n\t\tg[v].push_back(u);\r\n\t\tdeg[u]++;\r\n\t\tdeg[v]++;\r\n\t}\r\n\tint k = count(deg + 1, deg + 1 + n, 1);\r\n\tvector<vector<int> > p(k + 2, vector<int>());\r\n\tfor (int i = 1; i <= k; i++) {\r\n\t\tint temp;\r\n\t\tcin >> temp;\r\n\t\tfind(p[i], 0, 1, temp);\r\n\t}\r\n\tvector<int> ans;\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tt[i] = vector<int>(g[i].size(), 0);\r\n\tfor (int i = 1; i <= k + 1; i++)\r\n\t\tgo(ans, p[i - 1], p[i]);\r\n\ttryno(0, 1);\r\n\tfix(ans);\r\n\tfor (int i = 0; i < ans.size(); i++) cout << ans[i] << \" \";\r\n\tcout << endl;\r\n\treturn 0;\r\n}"
}