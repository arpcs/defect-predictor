{
    "id": 205664897,
    "contestId": 29,
    "creationTimeSeconds": 1683949434,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 29,
        "index": "D",
        "name": "Ant on the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 29,
        "members": [
            {
                "handle": "tsubakisimia"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1284994800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "n = int(input())\r\nadj = [[] for _ in range(n)]\r\nfor _ in range(n-1):\r\n    u, v = map(int, input().split())\r\n    adj[u-1].append(v-1)\r\n    adj[v-1].append(u-1)\r\n\r\nleaves = list(map(int, input().split()))\r\n\r\npath = []\r\nvisited = set()\r\nleaf_idx = 0\r\n\r\ndef dfs(node):\r\n    nonlocal path, visited, leaf_idx\r\n    path.append(node+1)\r\n    visited.add(node)\r\n    if node == 0 and len(visited) == n:\r\n        return True\r\n    if node != 0 and len(adj[node]) == 1:\r\n        if leaves[leaf_idx] != node+1:\r\n            return False\r\n        leaf_idx += 1\r\n        if leaf_idx == len(leaves):\r\n            leaf_idx = -1\r\n        return dfs(0)\r\n    for neighbor in adj[node]:\r\n        if neighbor not in visited:\r\n            if dfs(neighbor):\r\n                return True\r\n    path.pop()\r\n    visited.remove(node)\r\n    return False\r\n\r\nif dfs(0):\r\n    for i in range(len(path)-2, -1, -1):\r\n        path.append(path[i])\r\n    print(*path)\r\nelse:\r\n    print(-1)\r\n"
}