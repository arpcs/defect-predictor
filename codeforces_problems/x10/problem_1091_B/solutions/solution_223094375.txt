{
    "id": 223094375,
    "contestId": 1091,
    "creationTimeSeconds": 1694527637,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1091,
        "index": "B",
        "name": "New Year and the Treasure Geolocation",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1091,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546180500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define fread ios_base::sync_with_stdio(false); cin.tie(NULL);\n#define nl    '\\n'\n#define int   long long\n#define pii   pair<int, int>\n#define ff    first\n#define ss    second\n#define LIM   500005\n#define MOD   1000000007\n\n\nint32_t main(){\n    //fread //for faster I/O\n    #ifndef ONLINE_JUDGE\n    //freopen(\"ip.txt\", \"r\", stdin);\n    //freopen(\"out.txt\", \"w\", stdout);\n    #endif\n\n    int T = 1; //cin>>T;\n    for(int tc = 1; tc <= T; tc++){\n        int n; cin>>n;\n        vector<pii> points, clues;\n        for(int i = 0; i < n; i++){\n            int x, y; cin>>x>>y;\n            points.push_back({x, y});\n        }\n\n        for(int i = 0; i < n; i++){\n            int x, y; cin>>x>>y;\n            clues.push_back({x, y});\n        }\n\n        sort(points.begin(), points.end());\n        sort(clues.begin(), clues.end());\n        reverse(clues.begin(), clues.end());\n\n        int x = points[0].first + clues[0].first;\n        int y = points[0].second + clues[0].second;\n\n        cout<<x<<\" \"<<y<<nl;\n    }\n}\n\n\n\n\t  \t\t  \t  \t\t \t\t \t \t\t    \t\t\t\t \t\t"
}