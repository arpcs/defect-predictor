{
    "id": 212140445,
    "contestId": 1091,
    "creationTimeSeconds": 1688502695,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1091,
        "index": "B",
        "name": "New Year and the Treasure Geolocation",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "brute force",
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1091,
        "members": [
            {
                "handle": "Arapak"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1546180500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 204800,
    "source": "/*\n * Author: Kajetan Ramsza\n * Time: 2023-07-04 22:26:18\n**/\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n#define rep(i, a, b) for(int i = (a); i < (b); ++i)\n#define all(x) begin(x), end(x)\n#define sz(x) (int)(x).size()\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\n\ntemplate<typename F, typename S> ostream& operator<<(ostream& os, const pair<F, S> &p) { return os<<\"(\"<<p.first<<\", \"<<p.second<<\")\"; }\ntemplate<typename T> ostream &operator<<(ostream & os, const vector<T> &v) { os << \"{\"; typename vector<T> :: const_iterator it;\n    for( it = v.begin(); it != v.end(); it++ ) { if( it != v.begin() ) os << \", \"; os << *it; } return os << \"}\"; }\n\nvoid dbg_out() { cerr<<'\\n'; }\ntemplate<typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cerr<<' '<<H; dbg_out(T...); }\n\n#ifdef DEBUG\n#define dbg(...) cerr<<\"(\" << #__VA_ARGS__ <<\"):\", dbg_out(__VA_ARGS__)\n#else\n#define dbg(...) \n#endif\n\nint main() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    int n;\n    cin>>n;\n    vector<pair<int,int>> vec(n);\n    rep(i,0,n) cin>>vec[i].first>>vec[i].second;\n    multiset<pair<int,int>> p;\n    rep(i,0,n) {\n    \tint x, y;\n    \tcin>>x>>y;\n    \tp.insert({x, y});\n    }\n    int x_ = vec[0].first, y_ = vec[0].second;\n  \tfor(auto pp : p) {\n    \tint x = x_ + pp.first, y = y_ + pp.second;\n    \tauto pcopy = p;\n    \tbool correct = true;\n    \trep(i,0,n) {\n    \t\tauto it = pcopy.find({x - vec[i].first, y - vec[i].second});\n    \t\tif(it == pcopy.end()) {\n    \t\t\tcorrect = false;\n    \t\t\tbreak;\n    \t\t}\n    \t\tpcopy.erase(it);\n    \t}\n    \tif(correct) {\n    \t\tcout<<x<<' '<<y<<'\\n';\n    \t\treturn 0;\n    \t}\n\n  \t}\n   \n}"
}