{
    "id": 228753518,
    "contestId": 1409,
    "creationTimeSeconds": 1697695154,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1409,
        "index": "A",
        "name": "Yet Another Two Integers Problem",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1409,
        "members": [
            {
                "handle": "fatinfuad13"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1599230100
    },
    "programmingLanguage": "GNU C11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "#include <stdio.h>\r\n#include <math.h>\r\n#include <stdlib.h>\r\n#include <conio.h>\r\n#include <string.h>\r\n#include <ctype.h>\r\n\r\n//BUBBLE SORT\r\nvoid sort( int *p,int n)//\r\n{\r\n int temp;//\r\nfor(int i=0;i<n-1;i++)\r\n{\r\n\r\n  if(p[i]>p[i+1])\r\n  {\r\n      temp=p[i+1];\r\n      p[i+1]=p[i];\r\n      p[i]=temp;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nif(!is_ascending(p,n)) sort(p,n);\r\n\r\n\r\n\r\n\r\n}\r\nint is_ascending( int *q, int n)//\r\n{\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        if(q[i]>q[i+1]) return 0;\r\n    }\r\n\r\n    return 1;\r\n\r\n\r\n}\r\n//BUBBLE SORT\r\n\r\n\r\n//FUNTION TO SEE IF A STRING IS UNIQUE\r\nint is_unique(char *p,int n)//function to see if a string is unique,n is string length\r\n{\r\n\r\nfor(int i=0;i<n;i++)\r\n{\r\n    for(int j=0;j<n;j++)\r\n    {\r\n\r\n        if(p[i]==p[j]&&i!=j)\r\n            return 0;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n   return 1;\r\n\r\n\r\n}\r\n//FUNTION TO SEE IF A STRING IS UNIQUE\r\n\r\n\r\n//FUNCTION TO CHECK IF AN ELEMENT IS PRESENT IN AN ARRAY\r\nint is_present(int *p,int n,int num)\r\n{\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        if(p[i]==num) return 1;\r\n    }\r\n\r\n     return 0;\r\n\r\n}\r\n//FUNCTION TO CHECK IF AN ELEMENT IS PRESENT IN AN ARRAY\r\n\r\n\r\n//FUNCTION TO SORT A STRING IN ASCENDING ORDER\r\nvoid sort_string(char *p,int n)// n:strlen\r\n{\r\nchar temp;\r\nfor(int i=0;i<n-1;i++)\r\n{\r\n\r\n  if(p[i]>p[i+1])\r\n  {\r\n      temp=p[i+1];\r\n      p[i+1]=p[i];\r\n      p[i]=temp;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nif(!str_is_ascending(p,n)) sort_string(p,n);\r\n\r\n\r\n}\r\n\r\nint str_is_ascending(char *q,int n)\r\n{\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        if(q[i]>q[i+1]) return 0;\r\n    }\r\n\r\n    return 1;\r\n\r\n\r\n}\r\n//FUNCTION TO SORT A STRING IN ASCENDING ORDER\r\n\r\n\r\n//FUNCTION TO DELETE A SINGLE CHARACTER WITHIN THE STRING\r\nvoid del_char(char *p,int a,int l)\r\n{\r\n    //a is the index of the to be deleted character,l is strlen.\r\n    char str[l];\r\n    int ind=0;\r\n    for(int i=0;i<l-1;i++)\r\n    {\r\n\r\n\r\n       if(ind!=a) str[i]=p[ind++];\r\n\r\n        else ind++,i--;\r\n\r\n    }\r\n    for(int i=0;i<l-1;i++)\r\n    {\r\n        p[i]=str[i];\r\n\r\n    }\r\n\r\np[l-1]='\\0';\r\n\r\n\r\n}\r\n\r\n//FUNCTION TO DELETE A SINGLE CHARACTER WITHIN THE STRING\r\n\r\n//FUNCTION TO CHECK IF ALL CHARACTERS IN A STRING IS THE SAME OR NOT\r\nint all_same(char *p,int n)\r\n{\r\n\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        if(p[i]!=p[i+1]) return 0;\r\n\r\n    }\r\n\r\n    return 1;\r\n}\r\n//FUNCTION TO CHECK IF ALL CHARACTERS IN A STRING IS THE SAME OR NOT\r\n\r\n//FUNCTION TO FIND THE SUM OF FIRST N NUMBER IN AN ARRAY\r\nint sum_n_elements(int *p,int n)//here n<=number of elements of array\r\n{\r\n    int sum=0;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n       sum+=p[i];\r\n    }\r\n\r\n    return sum;\r\n\r\n\r\n}\r\n//FUNCTION TO FIND THE SUM OF FIRST N NUMBER IN AN ARRAY\r\n\r\n//FUNCTION TO SEE IF A GIVEN CHARACTER IS PRESENT IN A STRING TABLE\r\n\r\nint is_char_present(char *p,int l,char ch)\r\n{\r\n\r\n    for(int i=0;i<l;i++)\r\n    {\r\n        if(p[i]==ch) return 1;\r\n    }\r\n\r\n\r\n    return 0;\r\n\r\n\r\n\r\n\r\n}\r\n//FUNCTION TO SEE IF A GIVEN CHARACTER IS PRESENT IN A STRING\r\n\r\n\r\n//FUNCTION TO SWAP TWO VARIABLES\r\nvoid swap(int *a,int *b)\r\n{\r\n    int temp;      // use in main:swap(&a,&b)\r\n    temp=*a;\r\n    *a=*b;\r\n    *b=temp;\r\n\r\n\r\n\r\n}\r\n\r\n//FUNCTION TO SWAP TWO VARIABLES\r\n\r\n//FUNCTION TO FIND A^B\r\nlong long int pwr(long long int a,long long int b)//\r\n{\r\n    long long int temp=1;//\r\n    if(b==0) return 1;\r\n    for(long long int i=0;i<b;i++)//\r\n    {\r\n        temp=temp*a;\r\n\r\n\r\n    }\r\n\r\n    return temp;\r\n\r\n\r\n}\r\n//FUNCTION TO FIND A^B\r\n\r\n\r\n//FUNCTION TO SWAP TWO CHARACTERS IN A STRING\r\nvoid swap_char(char *a,char *b)\r\n{\r\n    char temp;\r\n    temp=*a;\r\n    *a=*b;\r\n    *b=temp;\r\n\r\n}\r\n//FUNCTION TO SWAP TWO CHARACTERS IN A STRING\r\n\r\n//FUNCTION TO SEE IF A NUMBER IS A PRIME OR NOT\r\nint is_prime(int n)\r\n{\r\n\r\n    if(n==2) return 1;\r\n    for(int i=2;i<=n/2;i++)\r\n    {\r\n        if(n%i==0) return 0;\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    return 1;\r\n\r\n\r\n}\r\n//FUNCTION TO SEE IF A NUMBER IS A PRIME OR NOT\r\n\r\nvoid proper_fraction(int a,int b)//fraction is a/b\r\n{\r\n\r\n    if(b%a==0)\r\n    {\r\n\r\n        b=b/a;\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nint next_prime(int n)\r\n{\r\n    if(n==2) return 3;\r\n   n+=2;\r\n\r\n    int is_nextprime=1;\r\n    for(int i=2;i<=n/2;i++)\r\n    {\r\n        if(n%i==0)\r\n           {\r\n               is_nextprime=0;\r\n\r\n               break;\r\n           }\r\n\r\n\r\n    }\r\n\r\n\r\n   if(is_nextprime) return n;\r\n   else next_prime(n);\r\n\r\n\r\n\r\n\r\n}\r\n\r\n//BUBBLE SORT DESCEND\r\nvoid sort_descend(int *p,int n)\r\n{\r\nint temp;\r\nfor(int i=0;i<n-1;i++)\r\n{\r\n\r\n  if(p[i]<p[i+1])\r\n  {\r\n      temp=p[i+1];\r\n      p[i+1]=p[i];\r\n      p[i]=temp;\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nif(!is_descending(p,n)) sort_descend(p,n);\r\n\r\n\r\n\r\n\r\n}\r\nint is_descending(int *q,int n)\r\n{\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        if(q[i]<q[i+1]) return 0;\r\n    }\r\n\r\n    return 1;\r\n\r\n\r\n}\r\n\r\n//BUBBLE SORT DESCEND\r\n\r\n//a function that returns the index of a character in a string\r\nint ind(char *p,int l,char c)// l is the strlen of the string\r\n{\r\n\r\n    for(int i=0;i<l;i++)\r\n    {\r\n\r\n      if(p[i]==c) return i;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return -1;\r\n\r\n\r\n\r\n}\r\n// Function to merge two subarrays of arr[]\r\nvoid merge(long long int arr[], int left,  int middle,  int right)//int\r\n{\r\n    int i, j, k;\r\n    int n1 = middle - left + 1;\r\n    int n2 = right - middle;\r\n\r\n   long long  int L[n1], R[n2];//\r\n\r\n    // Copy data to temporary arrays L[] and R[]\r\n    for (i = 0; i < n1; i++) {\r\n        L[i] = arr[left + i];\r\n    }\r\n    for (j = 0; j < n2; j++) {\r\n        R[j] = arr[middle + 1 + j];\r\n    }\r\n\r\n    // Merge the temporary arrays back into arr[l..r]\r\n    i = 0;\r\n    j = 0;\r\n    k = left;\r\n    while (i < n1 && j < n2) {\r\n        if (L[i] <= R[j]) {\r\n            arr[k] = L[i];\r\n            i++;\r\n        } else {\r\n            arr[k] = R[j];\r\n            j++;\r\n        }\r\n        k++;\r\n    }\r\n\r\n    // Copy the remaining elements of L[], if there are any\r\n    while (i < n1) {\r\n        arr[k] = L[i];\r\n        i++;\r\n        k++;\r\n    }\r\n\r\n    // Copy the remaining elements of R[], if there are any\r\n    while (j < n2) {\r\n        arr[k] = R[j];\r\n        j++;\r\n        k++;\r\n    }\r\n}\r\n\r\n// Mergesort function\r\nvoid mergesort(long long  int arr[], int left, int right)//\r\n {\r\n    if (left < right) {\r\n        int middle = left + (right - left) / 2;\r\n\r\n        // Sort first and second halves\r\n        mergesort(arr, left, middle);\r\n        mergesort(arr, middle + 1, right);\r\n\r\n        // Merge the sorted halves\r\n        merge(arr, left, middle, right);\r\n    }\r\n}\r\n\r\n//REVERSE AN ARRAY\r\nvoid rev_arr(int *p,int n)\r\n{\r\n\r\n    int temp[n];\r\n    int ind=n-1;\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        temp[i]=p[ind];\r\n        ind--;\r\n    }\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        p[i]=temp[i];\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n//REVERSE AN ARRAY\r\n\r\n\r\nvoid show_binary(unsigned  short int n)//\r\n{\r\n\r\nfor(long long int i=pwr(2,15);i>0;i/=2)//\r\n{\r\n    if(i&n) printf(\"1\");\r\n    else printf(\"0\");\r\n\r\n\r\n}\r\n\r\nprintf(\"\\n\");\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nint main(void)\r\n{\r\nint t;\r\nscanf(\"%d\",&t);\r\nfor(int i=0;i<t;i++)\r\n{\r\nlong long int a,b;\r\nscanf(\"%lld %lld\",&a,&b);\r\nlong long int c;\r\nif(a>=b) c=a-b;\r\nelse c=b-a;\r\n\r\nif(c==0) printf(\"%d\\n\",0);\r\nelse\r\n{\r\n\r\n  if(c%10==0) printf(\"%d\\n\",c/10);\r\n\r\n  else printf(\"%d\\n\",(c/10)+1);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nreturn 0;\r\n}\r\n"
}