{
    "id": 52529055,
    "contestId": 1044,
    "creationTimeSeconds": 1554813928,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1044,
        "index": "C",
        "name": "Optimal Polygon Perimeter",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "dp",
            "geometry"
        ]
    },
    "author": {
        "contestId": 1044,
        "members": [
            {
                "handle": "hmfzy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1541355000
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 3686400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=300010;\r\nconst int INF=1e9+7;\r\nstruct node {\r\n    int x,y;\r\n}p[maxn];\r\nint s[maxn];\r\nint dis(int i,int j)\r\n{\r\n    return abs(p[i].x-p[j].x)+abs(p[i].y-p[j].y);\r\n}\r\nint main()\r\n{\r\n    //freopen(\"text.txt\",\"r\",stdin);\r\n    int n,top,i,num,ans,maxx,maxy,minx,miny,tmp,j,pos1,pos2,k;\r\n    scanf(\"%d\",&n);\r\n    maxx=-INF; maxy=-INF; minx=INF; miny=INF;\r\n    for (i=1;i<=n;i++) {\r\n        scanf(\"%d%d\",&p[i].x,&p[i].y);\r\n        maxx=max(maxx,p[i].x);\r\n        maxy=max(maxy,p[i].y);\r\n        minx=min(minx,p[i].x);\r\n        miny=min(miny,p[i].y);\r\n    }\r\n    top=0;\r\n    for (i=1;i<=n;i++) {\r\n        if (p[i].x==minx||p[i].x==maxx||p[i].y==miny||p[i].y==maxy) s[++top]=i;\r\n    }\r\n    ans=0;\r\n    num=unique(s+1,s+top+1)-s-1;\r\n    /*for (i=1;i<=num;i++) {\r\n        printf(\"%d \",s[i]);\r\n    }\r\n    printf(\"\\n\");*/\r\n    for (i=1;i<=num;i++) {\r\n        for (j=i+1;j<=num;j++) {\r\n            pos1=s[i]; pos2=s[j];\r\n            for (k=1;k<=n;k++) {\r\n                if (k==pos1||k==pos2) continue ;\r\n                tmp=dis(pos1,pos2)+dis(pos1,k)+dis(k,pos2);\r\n                ans=max(ans,tmp);\r\n            }\r\n        }\r\n    }\r\n    for (i=3;i<=n;i++) {\r\n        if (i==3) {\r\n            printf(\"%d \",ans);\r\n            continue ;\r\n        }\r\n        printf(\"%d \",2*(maxx-minx+maxy-miny));\r\n    }\r\n    printf(\"\\n\");\r\n    return 0;\r\n}\r\n"
}