{
    "id": 83350656,
    "contestId": 1044,
    "creationTimeSeconds": 1591853432,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1044,
        "index": "C",
        "name": "Optimal Polygon Perimeter",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2100,
        "tags": [
            "dp",
            "geometry"
        ]
    },
    "author": {
        "contestId": 1044,
        "members": [
            {
                "handle": "Ali.Kh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1541355000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef pair <int , int> pii;\r\n\r\nconst int N = 2e5+10 , mod = 1e9+7;\r\n\r\nint32_t main(){\r\n   ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n   int n;\r\n   cin >> n;\r\n   int x[n + 2] , y[n + 2];\r\n   for(int i = 1 ; i <= n ; i++)\r\n      cin >> x[i] >> y[i];\r\n   x[0] = x[n] , y[0] = y[n];\r\n   x[n + 1] = x[1] , y[n + 1] = y[1];\r\n   vector <int> id;\r\n   ll ans = 0;\r\n   for(int i = 1 ; i <= n ; i++){\r\n      if(min(x[i - 1] , x[i + 1]) > x[i] || max(x[i + 1] , x[i - 1]) < x[i] || min(y[i - 1] , y[i + 1]) > y[i] || max(y[i + 1] , y[i - 1]) < y[i])\r\n         id.push_back(i);\r\n      ans += abs(x[i] - x[i - 1]) + abs(y[i] - y[i - 1]);\r\n   }\r\n   if(n == 3)\r\n      return cout << ans , 0;\r\n   ll mx = 0;\r\n   for(int i = 0 ; i < (1 << 4) ; i++)\r\n      if(__builtin_popcount(i) == 2){\r\n         vector <int> ids;\r\n         for(int j = 0 ; j < 4 ; j++)\r\n            if((1 << j) & i)\r\n               ids.push_back(id[j]);\r\n         for(int j = 0 ; j < n ; j++){\r\n            ids.push_back(j);\r\n            ll cur = 0;\r\n            for(int k = 0 ; k < 3 ; k++)\r\n               cur += abs(x[ids[k]] - x[ids[(k - 1 + 3) % 3]]) + abs(y[ids[k]] - y[ids[(k - 1 + 3) % 3]]);\r\n            mx = max(mx , cur);\r\n            ids.pop_back();\r\n         }\r\n      }\r\n   cout << mx << \" \";\r\n   for(int i = 4 ; i <= n ; i++)\r\n      cout << ans << \" \";\r\n   return 0;\r\n}\r\n"
}