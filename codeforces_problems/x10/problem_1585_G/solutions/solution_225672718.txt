{
    "id": 225672718,
    "contestId": 1585,
    "creationTimeSeconds": 1695914306,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1585,
        "index": "G",
        "name": "Poachers",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 2500,
        "tags": [
            "dp",
            "games",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1585,
        "members": [
            {
                "handle": "relyt871"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1639322100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 102502400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long LL;\r\ntypedef long double LD;\r\nconst int MAXN = 500005;\r\n\r\ntemplate <typename T> inline void read(T &WOW) {\r\n    T x = 0, flag = 1;\r\n    char ch = getchar();\r\n    while (!isdigit(ch)) {\r\n        if (ch == '0') flag = -1;\r\n        ch = getchar();\r\n    }\r\n    while (isdigit(ch)) {\r\n        x = x * 10 + ch - '0';\r\n        ch = getchar();\r\n    }\r\n    WOW = flag * x;\r\n}\r\n\r\nint n, p[MAXN], mex[MAXN];\r\nvector<int> tree[MAXN], dp[MAXN];\r\nset<int> S[MAXN];\r\n\r\nvoid DFS(int u) {\r\n    if (tree[u].size() == 0) {\r\n        dp[u].push_back(0);\r\n        S[u].insert(0);\r\n        mex[u] = 1;\r\n        return;\r\n    }\r\n    if (tree[u].size() == 1) {\r\n        int v = tree[u][0];\r\n        DFS(v);\r\n        dp[u].swap(dp[v]);\r\n        dp[u].push_back(mex[v]);\r\n        S[u].swap(S[v]);\r\n        S[u].insert(mex[v]);\r\n        mex[u] = mex[v] + 1;\r\n        return;\r\n    }\r\n    int s0 = 0;\r\n    for (auto v : tree[u]) {\r\n        DFS(v);\r\n        s0 ^= mex[v];\r\n    }\r\n    int mnd = tree[u][0];\r\n    for (auto v : tree[u]) {\r\n        if (dp[mnd].size() > dp[v].size()) {\r\n            mnd = v;\r\n        }\r\n    }\r\n    dp[u].swap(dp[mnd]);\r\n    for (auto v : tree[u]) {\r\n        if (v == mnd) continue;\r\n        for (int i = dp[u].size() - 1, j = dp[v].size() - 1; i >= 0; --i, --j) {\r\n            dp[u][i] ^= dp[v][j];\r\n        }\r\n    }\r\n    dp[u].push_back(s0);\r\n    for (auto x : dp[u]) {\r\n        S[u].insert(x);\r\n    }\r\n    mex[u] = 0;\r\n    while (S[u].count(mex[u])) {\r\n        ++mex[u];\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    read(n);\r\n    for (int i = 1; i <= n; ++i) {\r\n        tree[i].clear();\r\n        dp[i].clear();\r\n        S[i].clear();\r\n    }\r\n    for (int i = 1; i <= n; ++i) {\r\n        read(p[i]);\r\n        if (p[i]) tree[p[i]].push_back(i);\r\n    }\r\n    int ans = 0;\r\n    for (int i = 1; i <= n; ++i) {\r\n        if (!p[i]) {\r\n            DFS(i);\r\n            ans ^= mex[i];\r\n        }\r\n    }\r\n    puts(ans? \"YES\" : \"NO\");\r\n}\r\n\r\nint main() {\r\n    int T; read(T);\r\n    while (T--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}