{
    "id": 235847076,
    "contestId": 1585,
    "creationTimeSeconds": 1701780669,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1585,
        "index": "G",
        "name": "Poachers",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 2500,
        "tags": [
            "dp",
            "games",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1585,
        "members": [
            {
                "handle": "arvindf232"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1639322100
    },
    "programmingLanguage": "Kotlin 1.6",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 1450,
    "memoryConsumedBytes": 192819200,
    "source": "// 2023.12.05 at 12:02:03 GMT\r\nimport java.io.BufferedInputStream\r\nimport java.io.File\r\nimport java.io.PrintWriter\r\nimport kotlin.system.measureTimeMillis\r\nimport java.util.TreeMap\r\nimport java.util.TreeSet\r\nimport kotlin.math.absoluteValue\r\nimport kotlin.random.Random\r\nimport kotlin.random.nextInt\r\n\r\n// 1. Modded\r\nfun Int.adjust():Int{ if(this >= p){ return this  - p }else if (this < 0){ return this + p };return this }\r\nfun Int.snap():Int{ if(this >= p){return this - p} else return this}\r\ninfix fun Int.mm(b:Int):Int{ return ((this.toLong() * b) % p).toInt() }\r\ninfix fun Int.mp(b:Int):Int{ val ans = this + b;return if(ans >= p) ans - p else ans }\r\ninfix fun Int.ms(b:Int):Int{ val ans = this - b;return if(ans < 0) ans + p else ans }\r\nfun Long.modded():Int =(this % p).toInt()\r\nfun Int.inverse():Int = intPow(this,p-2)\r\nfun Int.additiveInverse():Int = if(this == 0) 0 else p - this\r\ninfix fun Int.modDivide(b:Int):Int{ return this mm (b.inverse()) }\r\nfun intPow(x:Int, e:Int):Int{\r\n    var x = x; var e = e ; var ret = 1\r\n    while(e > 0){\r\n        if(e and 1 == 1) ret = ret mm x\r\n        x = x mm x\r\n        e = e shr 1\r\n    }\r\n    return ret\r\n}\r\n// 2. DP initial values\r\nconst val plarge = 1_000_000_727\r\nconst val nlarge = -plarge\r\nconst val phuge = 2_727_000_000_000_000_000L\r\nconst val nhuge = -phuge\r\n// 3. convenience conversions\r\nval Boolean.chi:Int get() = if(this) 1 else 0 //characteristic function\r\nval BooleanArray.chiarray:IntArray get() = IntArray(this.size){this[it].chi}\r\nval Char.code :Int get() = this.toInt() -  'a'.toInt()\r\n//3. hard to write stuff\r\nfun IntArray.put(i:Int,v:Int){ this[i] = (this[i] + v).adjust() }\r\nval mint:MutableList<Int> get() = mutableListOf<Int>()\r\nval mong:MutableList<Long> get() = mutableListOf<Long>()\r\nval mchar:MutableList<Char> get() = mutableListOf()\r\nfun IntArray.minindex():Int = this.indexOf(this.minOrNull()!!)\r\nfun IntArray.maxindex():Int = this.indexOf(this.maxOrNull()!!)\r\n//4. more outputs\r\nfun List<Char>.conca():String = this.joinToString(\"\")\r\nval CharArray.conca :String get() = this.concatToString()\r\nval IntArray.conca :String get() = this.joinToString(\" \")\r\n@JvmName(\"concaInt\")\r\nfun List<Int>.conca():String = this.joinToString(\" \")\r\nval LongArray.conca:String get() = this.joinToString(\" \")\r\n@JvmName(\"concaLong\")\r\nfun List<Long>.conca():String = this.joinToString(\" \")\r\n@JvmName(\"concaString\")\r\nfun List<String>.conca():String = this.joinToString(\"\")\r\n//5. Pair of ints\r\ntypealias pii = Pair<Int,Int>\r\ntypealias pll = Pair<Long,Long> //Nb perm is the worst\r\nfun order(a:Int, b:Int):Pair<Int,Int> = Pair(minOf(a,b), maxOf(a,b))\r\n//6. strings\r\nval String.size get() = this.length\r\nconst val randCount = 100\r\n//7. bits\r\nfun Int.has(i:Int):Boolean = (this and (1 shl i) != 0)\r\nfun Long.has(i:Int):Boolean = (this and (1L shl i) != 0L)\r\n//8 TIME\r\ninline fun TIME(f:()->Unit){\r\n    val t = measureTimeMillis(){ f() }\r\n    println(\"$t ms\")\r\n}\r\n//9 rand\r\nfun rand(x:Int) = Random.nextInt(x)\r\nfun rand(x:IntRange) = Random.nextInt(x)\r\nfun dist(a:Int, b:Int):Int = (a - b).absoluteValue\r\nfun dist(a:Long, b:Long):Long = (a - b).absoluteValue\r\n//10 typing issues, rename\r\ntypealias ints = IntArray\r\ntypealias longs = LongArray\r\ntypealias bools = BooleanArray\r\ninline fun assert(x:Boolean,act:()->Any = {}){ if(!x) error(act())}\r\nconst val interactive = false\r\n//Cannot line space beacuse IDE\r\nobject Reader{\r\n    private const val BS = 1 shl 16\r\n    private const val NC = 0.toChar()\r\n    private val buf = ByteArray(BS)\r\n    private var bId = 0\r\n    private var size = 0\r\n    private var c = NC\r\n    var warningActive = true\r\n    var fakein = StringBuilder()\r\n    private var IN: BufferedInputStream = BufferedInputStream(System.`in`, BS)\r\n    val OUT: PrintWriter = PrintWriter(System.out)\r\n    private val char: Char\r\n        get() {\r\n            if(interactive){\r\n                return System.`in`.read().toChar()\r\n            }\r\n            while (bId == size) {\r\n                size = IN.read(buf) // no need for checked exceptions\r\n                if (size == -1) return NC\r\n                bId = 0\r\n            }\r\n            return buf[bId++].toChar()\r\n        }\r\n    fun nextInt(): Int {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextLong(): Long {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0L\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextString():String{\r\n        val ret = StringBuilder()\r\n        while (true){\r\n            c = char\r\n            if(!isWhitespace(c)){ break}\r\n        }\r\n        ret.append(c)\r\n        while (true){\r\n            c = char\r\n            if(isWhitespace(c)){ break}\r\n            ret.append(c)\r\n        }\r\n        return ret.toString()\r\n    }\r\n    fun isWhitespace(c:Char):Boolean{\r\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t'\r\n    }\r\n    fun rerouteInput(){\r\n        if(warningActive){\r\n            put(\"Custom test enabled\")\r\n            println(\"Custom test enabled\")\r\n            warningActive = false\r\n        }\r\n        val S = fakein.toString()\r\n        println(\"New Case \")\r\n        println(S.take(80))\r\n        println(\"...\")\r\n        fakein.clear()\r\n        IN = BufferedInputStream(S.byteInputStream(),BS)\r\n    }\r\n    fun flush(){\r\n        OUT.flush()\r\n    }\r\n    fun takeFile(name:String){\r\n        IN = BufferedInputStream(File(name).inputStream(),BS)\r\n    }\r\n}\r\nfun eat(){ val st1 = TreeSet<Int>(); val st2 = TreeMap<Int,Int>()}\r\nfun put(aa:Any){\r\n    Reader.OUT.println(aa)\r\n    if(interactive){ Reader.flush()}\r\n}\r\nfun put(vararg x:Any){\r\n    for(c in x){\r\n        Reader.OUT.print(c)\r\n        Reader.OUT.print(\" \")\r\n    }\r\n    Reader.OUT.print(\"\\n\")\r\n    if(interactive){ Reader.flush()}\r\n}\r\nfun done(){ Reader.OUT.close() }\r\nfun share(aa:Any){\r\n    Reader.fakein.append(format(aa))\r\n    Reader.fakein.append(\"\\n\")\r\n}\r\nval getintfast:Int get() = Reader.nextInt()\r\nval getint:Int get(){ val ans = getlong ; if(ans > Int.MAX_VALUE) IntArray(1000000000); return ans.toInt() }\r\nval getlong:Long get() = Reader.nextLong()\r\nval getstr:String get() = Reader.nextString()\r\nfun getline(n:Int):IntArray = IntArray(n){getint}\r\nfun getlineL(n:Int):LongArray = LongArray(n){getlong}\r\nfun subformat(a:Any?):String{ // for not a collection\r\n    return if(a == null) \"null\"\r\n    else if(a is Iterable<*> ) a.joinToString(\" \")\r\n    else if(a is BooleanArray) a.joinToString(\"\") { if (it) \"1\" else \"0\" }\r\n    else if(a is IntArray) a.joinToString(\" \")\r\n    else if(a is LongArray) a.joinToString(\" \")\r\n    else a.toString()\r\n}\r\nfun format(a:Any?):String {\r\n    if (a == null) {\r\n        return \"null\"\r\n    } else if (a is BooleanArray) {\r\n        return a.joinToString(\"\") { if (it) \"1\" else \"0\" }\r\n    } else if (a is Array<*>) {\r\n        return \"\\n\"+a.joinToString(\"\\n\"){subformat(it)}\r\n    } else { return subformat(a)}\r\n}\r\nvar dmark = -1\r\ninfix fun Any.dei(a:Any?){\r\n    dmark++ ; debug()\r\n    println(\"<${dmark}>   ${this} : ${format(a)}\")\r\n}\r\nconst val just = \" \"\r\nenum class solveMode {\r\n    real, rand, tc\r\n}\r\nobject solve{\r\n    var mode:solveMode = solveMode.real\r\n    var tcNum:Int = 0\r\n    var rand:()->Unit = {}\r\n    var TC:MutableMap<Int,()->Unit> = mutableMapOf()\r\n    var tn:Long = 0\r\n    fun cases(onecase:()->Unit){\r\n        val t = if(mode == solveMode.real){if(singleCase) 1 else getint} else if(mode == solveMode.tc){1 } else randCount\r\n        if(p != 998_244_353 && p != 1_000_000_007){\r\n            throw AssertionError(\"Not usual primes!\")\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            tn = System.currentTimeMillis()\r\n        }\r\n        repeat(t){\r\n            if(mode == solveMode.tc){\r\n                TC[tcNum]?.let { it() }\r\n                Reader.rerouteInput()\r\n            }else if(mode == solveMode.rand){\r\n                rand()\r\n                Reader.rerouteInput()\r\n            }\r\n            onecase()\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            val dt = System.currentTimeMillis() - tn\r\n            println(\"Time $dt ms \")\r\n        }\r\n    }\r\n    fun rand(a:()->Unit){\r\n        this.rand = a\r\n    }\r\n    fun tc(id:Int = 0,a:()->Unit){\r\n        TC[id] = a\r\n    }\r\n    fun usetc(a:Int = 0 ){\r\n        this.tcNum = a\r\n        this.mode = solveMode.tc\r\n    }\r\n    fun userand(){\r\n        this.mode = solveMode.rand\r\n    }\r\n}\r\nfun debug(){}\r\n\r\n// Asusmes O(1) usages\r\nconst val graphWeighed = false\r\nclass Graph(val n:Int, val m:Int, val directed:Boolean) {\r\n    val maxedge = if (directed) m else m * 2\r\n\r\n    var edgecount = 0 // directed edge counts\r\n\r\n    val next = IntArray(maxedge)\r\n    val head = IntArray(n) { -1 }\r\n    val to = IntArray(maxedge)\r\n    val from = IntArray(maxedge)\r\n    val weights = IntArray(if (graphWeighed) m else 0)\r\n//    val Q = fastDeque(0,n)\r\n\r\n    private fun primitive_add(u: Int, v: Int): Int {\r\n        next[edgecount] = head[u]\r\n        head[u] = edgecount\r\n        to[edgecount] = v\r\n        from[edgecount] = u\r\n        edgecount++\r\n        return edgecount -1\r\n    }\r\n    fun add(u: Int, v: Int): Int { // return edge number\r\n        val e = primitive_add(u, v)\r\n        if (!directed) primitive_add(v, u)\r\n        return if (directed) e else e shr 1\r\n    }\r\n    fun addWeighted(u: Int, v: Int, w: Int):Int{\r\n        val e = add(u, v)\r\n        weights[e] = w\r\n        return e\r\n    }\r\n    //Basic Transversals\r\n    inline fun NS(a:Int, act:(Int)->Unit){\r\n        var i= head[a]\r\n        while(i != -1){\r\n            act(to[i])\r\n            i = next[i]\r\n        }\r\n    }\r\n    inline fun NS_E(a:Int, act:(e:Int,v:Int)->Unit){\r\n        var i= head[a]\r\n        while(i != -1){\r\n            act(i,to[i])\r\n            i = next[i]\r\n        }\r\n    }\r\n\r\n\r\n    inline fun everyEdge(act:(a:Int, b:Int, e:Int)->Unit){\r\n        val s = if(directed) 1 else 2\r\n        for(e in 0 until edgecount step s ){\r\n            act(from[e], to[e], e)\r\n        }\r\n    }\r\n    inline fun everyDirectedEdge(act:(a:Int, b:Int)->Unit){\r\n        for(e in 0 until edgecount){\r\n            act(from[e], to[e])\r\n        }\r\n    }\r\n\r\n\r\n    var root = 0\r\n    var hasDFSorder:Boolean = false\r\n    val preorder = IntArray(n)\r\n    var postorder = IntArray(0)\r\n    val parent = IntArray(n){-1}\r\n    val parentEdge:IntArray = IntArray(n){-1} //if undirected, this is upto 2m\r\n    //if v is root of component, parent[v] = v , parentEdge[v] = -1\r\n\r\n    fun dfstree(singleComponent:Boolean){\r\n        //if singleComponent: perform search from the root, otherwise, search from 0 through n\r\n        hasDFSorder = true\r\n        var preorderpt = 0\r\n        val explored = BooleanArray(n)\r\n        val S = IntArray(m+1)\r\n        var pt = 0\r\n        parent.fill(-1)\r\n\r\n        for(i in 0 until n){\r\n            if(parent[i] != -1 || (singleComponent && i != root)) continue\r\n            S[pt++] = i\r\n            parent[i] = i\r\n            parentEdge[i] = -1\r\n            while(pt > 0){\r\n                val v = S[--pt]\r\n                if(explored[v]){\r\n                    continue\r\n                }\r\n                preorder[preorderpt++] = v\r\n                explored[v] = true\r\n                NS_E(v){e,w ->\r\n                    if(!explored[w]){\r\n                        S[pt++] = w\r\n                        parent[w] = v\r\n                        parentEdge[w] = e\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    fun treeOrderDFS() = dfstree(true)\r\n    fun dfsTreePostOrder(singleComponent:Boolean, rootOrder:List<Int>){\r\n        //if singleComponent: perform search from the root, otherwise, search from 0 through n\r\n        hasDFSorder = true\r\n        var preorderpt = 0\r\n        val explored = BooleanArray(n)\r\n\r\n        val S = IntArray(m+1)\r\n        val Spopped = BooleanArray(m+1)\r\n        var pt = 0\r\n\r\n        var postorderpt = 0\r\n        postorder = IntArray(n)\r\n        parent.fill(-1)\r\n\r\n        for(i in rootOrder){\r\n            if(parent[i] != -1 || (singleComponent && i != root)) continue\r\n            Spopped[pt] = false\r\n            S[pt++] = i\r\n            parent[i] = i\r\n            parentEdge[i] = -1\r\n            while(pt > 0){\r\n                val v = S[--pt]\r\n                if(Spopped[pt]){\r\n                    postorder[postorderpt++] = v\r\n                }\r\n                if(explored[v]){\r\n                    continue\r\n                }\r\n                preorder[preorderpt++] = v\r\n                Spopped[pt] = true\r\n                explored[v] = true\r\n                pt++\r\n                NS_E(v){e,w ->\r\n                    if(!explored[w]){\r\n                        Spopped[pt] = false\r\n                        S[pt++] = w\r\n\r\n                        parent[w] = v\r\n                        parentEdge[w] = e\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    inline fun BFS(distRoot:Int): IntArray {\r\n       val Q = IntArray(n)\r\n        val explored = IntArray(n+1){-1} // also store parents\r\n        val dist = IntArray(n){-1}\r\n        var startpt = 0\r\n        var endpt = -1\r\n\r\n        Q[++endpt] = distRoot\r\n        explored[distRoot] = distRoot\r\n        dist[distRoot] = 0\r\n\r\n        while(startpt <= endpt){\r\n            val x = Q[startpt++]\r\n            NS(x){ a->\r\n                if(explored[a] == -1){\r\n                    explored[a] = x\r\n                    dist[a] = dist[x] + 1\r\n                    Q[++endpt] = a\r\n                }\r\n            }\r\n        }\r\n        return dist\r\n    }\r\n    //Tree Transversals\r\n    inline fun leafFirst(act:(Int)->Unit){\r\n        if(!hasDFSorder) treeOrderDFS()\r\n       for(i in preorder.lastIndex downTo 0){\r\n           act(preorder[i])\r\n       }\r\n    }\r\n    inline fun rootFirst(act:(Int)->Unit){\r\n        if(!hasDFSorder) treeOrderDFS()\r\n        for(a in preorder){\r\n            act(a)\r\n        }\r\n    }\r\n    inline fun rootFirstEdge(act:(from:Int, to:Int, e:Int)->Unit){\r\n        if(!hasDFSorder) treeOrderDFS()\r\n        for(i in preorder.indices) {\r\n            val v = preorder[i]\r\n            val p = parent[v]\r\n            if(p == v) continue\r\n            act(p,v,parentEdge[v])\r\n        }\r\n    }\r\n\r\n    // Basic invariants maintaining\r\n    fun calculateSizes():IntArray{\r\n        val ret = IntArray(n){1}\r\n        leafFirst { v -> if(parent[v] != v) ret[parent[v]] += ret[v] }\r\n        return ret\r\n    }\r\n    fun calculateSubtreeSum(weights:IntArray){\r\n        leafFirst { v -> if(parent[v] != v) weights[parent[v]] += weights[v] }\r\n    }\r\n    fun calculateDepth(): IntArray {\r\n        val ret = IntArray(n)\r\n        rootFirst { v -> if(parent[v] != v) ret[v] = ret[parent[v]] + 1  }\r\n        return ret\r\n    }\r\n    inline fun subs(v:Int, act:(Int)->Unit){\r\n        NS(v){w ->\r\n            if(w != parent[v]) act(w)\r\n        }\r\n    }\r\n    fun calculateDepthWeighted(): LongArray {\r\n        val ret = LongArray(n)\r\n        rootFirstEdge{from,to,e -> ret[to] = ret[from] + weights[e]}\r\n        return ret\r\n    }\r\n    fun outdegree():IntArray{\r\n        val ret = IntArray(n)\r\n        everyDirectedEdge { a, b -> ret[a] ++  }\r\n        return ret\r\n    }\r\n    fun indegree():IntArray{\r\n        val ret = IntArray(n)\r\n        everyDirectedEdge {a, b -> ret[b] ++}\r\n        return ret\r\n    }\r\n    fun degree():IntArray = outdegree()\r\n    fun intime():IntArray{\r\n        val tin = IntArray(n)\r\n        if(!hasDFSorder) treeOrderDFS()\r\n        for(i in 0 until n) tin[preorder[i]] = i\r\n        return tin\r\n    }\r\n    fun outtime():IntArray{\r\n        val tout = intime()\r\n        leafFirst { v ->\r\n            val p = parent[v]\r\n            if(p != v) tout[p] = maxOf(tout[p], tout[v])\r\n        }\r\n        return tout\r\n    }\r\n    fun rootComponent():IntArray{\r\n        val ret = IntArray(n)\r\n        rootFirst { v ->\r\n            if(v == root) return@rootFirst\r\n            if(parent[v] == root){ ret[v] = v; return@rootFirst}\r\n            ret[v] = ret[parent[v]]\r\n        }\r\n        return ret\r\n    }\r\n    fun compress(map:IntArray): Graph {\r\n        val max = map.maxOrNull()!!\r\n        val G = Graph(max + 1,this.m,this.directed)\r\n        this.everyEdge { a, b,_ ->\r\n            if(map[a] != map[b]){\r\n                G.add(map[a],map[b])\r\n            }\r\n        }\r\n        return G\r\n    }\r\n}\r\nfun mexOf(a:IntArray):Int{\r\n    val things = BooleanArray(a.size)\r\n    for(c in a){\r\n        if(c <= a.lastIndex){\r\n            things[c] = true\r\n        }\r\n    }\r\n    val firstOk = things.indexOfFirst { !it }\r\n    return if(firstOk == -1) a.size else firstOk\r\n}\r\nclass mexmaker(a:ArrayDeque<Int>){\r\n    var lastmex = -1\r\n    val things = a.toSet()\r\n    fun nextmex():Int {\r\n        lastmex ++\r\n        while(lastmex in things){\r\n            lastmex++\r\n        }\r\n        return lastmex\r\n    }\r\n}\r\nconst val p = 1_000_000_007\r\nconst val singleCase = false\r\nfun main(){\r\n    solve.cases{\r\n\r\n        val n =getint\r\n        val G = Graph(n,n-1, false)\r\n\r\n        val isroot = bools(n)\r\n        val P = getline(n)\r\n        for(i in 0 until n){\r\n            if(P[i] == 0){\r\n                isroot[i] = true\r\n            }else{\r\n                G.add(P[i] -1  , i )\r\n            }\r\n        }\r\n\r\n\r\n\r\n        G.dfsTreePostOrder(false, (0 until n).filter { isroot[it] })\r\n        val degree = G.degree()\r\n        val empty = mexmaker(ArrayDeque(listOf(0)))\r\n        val dp = Array(n){ArrayDeque<Int>()}\r\n        val maker = Array(n){empty}\r\n        G.leafFirst {v ->\r\n            var children = degree[v]\r\n            if(!isroot[v]){\r\n                children --\r\n            }\r\n            if(children == 0){\r\n                dp[v].add(0)\r\n                maker[v] =mexmaker(ArrayDeque(listOf(0)))\r\n                dp[v].addFirst(maker[v].nextmex())\r\n            }else if(children == 1){\r\n                var c = -1\r\n                G.subs(v){\r\n                     c = it\r\n                }\r\n                dp[v] = dp[c]\r\n                dp[v].addFirst(maker[c].nextmex())\r\n                maker[v] = maker[c]\r\n            }else{\r\n                G.subs(v){c ->\r\n                    if(dp[v].isEmpty()) {\r\n                        dp[v] = dp[c]\r\n                    }else{\r\n                        val newlen = minOf(dp[v].size, dp[c].size )\r\n                        while(dp[v].size > newlen){\r\n                            dp[v].removeLast()\r\n                        }\r\n                        for(i in 0 until newlen){\r\n                            dp[v][i] = dp[v][i] xor dp[c][i]\r\n                        }\r\n                    }\r\n\r\n                }\r\n                val heremaker = mexmaker(dp[v])\r\n                dp[v].addFirst(heremaker.nextmex())\r\n                maker[v] = heremaker\r\n            }\r\n\r\n//            v dei dp[v]\r\n        }\r\n        var got =0\r\n        for(i in 0 until n){\r\n            if(isroot[i]){\r\n                got = got xor (dp[i].first())\r\n            }\r\n        }\r\n        if(got == 0){\r\n            put(\"NO\")\r\n        }else{\r\n            put(\"YES\")\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    done()\r\n}\r\n\r\n\r\n/*\r\n\r\n1\r\n4\r\n0 1 1 2\r\n */"
}