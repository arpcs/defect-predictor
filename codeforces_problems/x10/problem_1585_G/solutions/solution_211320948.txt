{
    "id": 211320948,
    "contestId": 1585,
    "creationTimeSeconds": 1687942976,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1585,
        "index": "G",
        "name": "Poachers",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 2500,
        "tags": [
            "dp",
            "games",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1585,
        "members": [
            {
                "handle": "Anonymous_Noob"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1639322100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 246681600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\n#define sz(x) (int)::size(x)\r\n#define all(x) ::begin(x), ::end(x)\r\n#define debug(x) cerr << \"[\" << __LINE__ << \"] \"#x\" = \" << (x) << endl\r\n\r\nstruct Node {\r\n    int n = 1;\r\n    multiset<int> s;\r\n    set<int> me = {0};\r\n\r\n    Node() {}\r\n\r\n    void inc() {\r\n        if (s.find(n) == s.end()) me.insert(n);\r\n        n++;\r\n    }\r\n\r\n    void add(int i) {\r\n        me.erase(i);\r\n        s.insert(i);\r\n    }\r\n\r\n    void erase(int i) {\r\n        assert(s.count(i));\r\n        s.erase(s.find(i));\r\n        if (s.find(i) == s.end()) me.insert(i);\r\n    }\r\n\r\n    int mex() {\r\n        while (me.empty() || n < *me.begin()) inc();\r\n        return *me.begin();\r\n    }\r\n};\r\n\r\nvector<vector<int>> g;\r\nvector<int> a[(int)5e5];\r\nvector<int> rnk, act;\r\nvector<Node> b;\r\n\r\nvoid dfs(int cur) {\r\n    for (int e : g[cur]) {\r\n        dfs(e);\r\n        rnk[cur] = min(rnk[cur], rnk[e]);\r\n        if (act[e] > act[cur]) {\r\n            swap(a[e], a[cur]);\r\n            swap(b[e], b[cur]);\r\n            swap(act[e], act[cur]);\r\n        }\r\n\r\n        while (act[e] != 1 && act[cur] > act[e]) {\r\n            int j = sz(a[cur]) - act[cur];\r\n            b[cur].erase(a[cur][j]);\r\n            act[cur]--;\r\n        }\r\n\r\n        for (int i=0; i<act[e]; i++) {\r\n            int j = sz(a[cur]) - 1 - i;\r\n            b[cur].erase(a[cur][j]);\r\n            a[cur][j] ^= a[e][sz(a[e]) - 1 - i];\r\n            b[cur].add(a[cur][j]);\r\n        }\r\n        b[e].s.clear();\r\n    }\r\n\r\n    if (rnk[cur] == (int)1e9) rnk[cur] = 0;\r\n    a[cur].push_back(b[cur].mex());\r\n    b[cur].add(a[cur].back());\r\n    rnk[cur]++;\r\n    act[cur]++;\r\n}\r\n\r\nint main() {\r\n    cin.tie(0)->sync_with_stdio(0);\r\n\r\n    int T;\r\n    cin >> T;\r\n    while (T--) {\r\n        int n;\r\n        cin >> n;\r\n\r\n        vector<int> p(n);\r\n        for (int& e : p) cin >> e;\r\n        g.assign(n, {});\r\n\r\n        vector<int> roots;\r\n        for (int i=0; i<n; i++) {\r\n            if (p[i] == 0) roots.push_back(i);\r\n            else {\r\n                g[p[i]-1].push_back(i);\r\n            }\r\n        }\r\n\r\n        for (int i=0; i<n; i++) a[i] = {0};\r\n        b.assign(n, {});\r\n        for (auto& e : b) e.add(0);\r\n        rnk.assign(n, 1e9);\r\n        act.assign(n, 1);\r\n\r\n        int ans = 0;\r\n        for (int e : roots) {\r\n            dfs(e);\r\n            //ans ^= b[e].mex();\r\n            ans ^= a[e].back();\r\n        }\r\n\r\n        cout << (ans == 0 ? \"NO\" : \"YES\") << '\\n';\r\n    }\r\n}\r\n"
}