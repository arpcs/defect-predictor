{
    "id": 34814444,
    "contestId": 921,
    "creationTimeSeconds": 1517508215,
    "relativeTimeSeconds": 7415,
    "problem": {
        "contestId": 921,
        "index": "04",
        "name": "Labyrinth-4",
        "type": "PROGRAMMING",
        "rating": 3200,
        "tags": []
    },
    "author": {
        "contestId": 921,
        "members": [
            {
                "handle": "ZloyNegr"
            },
            {
                "handle": "msporyshev"
            },
            {
                "handle": "AleksandraZh"
            }
        ],
        "participantType": "CONTESTANT",
        "teamId": 25996,
        "teamName": "FEFU1",
        "ghost": false,
        "startTimeSeconds": 1517500800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "PARTIAL",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 7577600,
    "points": 61.763,
    "source": "#include <iostream>\r\n#include <set>\r\n#include <vector>\r\n#include <cassert>\r\n#include <array>\r\n#include <queue>\r\n#include <algorithm>\r\n#include <map>\r\n\r\nusing namespace std;\r\n\r\ntemplate<typename T>\r\nusing Pair = pair<T, T>;\r\n\r\nint in_no, w, n, m, x0, y0, c, d, k, e;\r\n\r\nset<Pair<Pair<int>>> walls;\r\nset<Pair<Pair<int>>> doors;\r\nset<Pair<int>> used;\r\nset<Pair<int>> keys;\r\nset<Pair<int>> exits;\r\nmap<Pair<int>, int> prev_dir;\r\n\r\nstring dir_name[] = {\"right\", \"left\", \"down\", \"up\"};\r\n\r\nint dx[] = {0, 0, 1, -1};\r\nint dy[] = {1, -1, 0, 0};\r\n\r\nbool inrange(const Pair<int>& p) {\r\n    return p.first >= 0 && p.first < m && p.second >= 0 && p.second < n;\r\n}\r\n\r\nPair<int> find_exit() {\r\n    queue<Pair<int>> q;\r\n    q.emplace(x0, y0);\r\n    used.emplace(x0, y0);\r\n\r\n    prev_dir[make_pair(x0, y0)] = -1;\r\n\r\n    bool found = false;\r\n    while (!q.empty()) {\r\n        auto p = q.front(); q.pop();\r\n\r\n        for (int i = 0; i < 4; i++) {\r\n            auto next = p;\r\n            next.first += dx[i];\r\n            next.second += dy[i];\r\n\r\n            if (inrange(next) && !used.count(next) && !walls.count(make_pair(p, next))) {\r\n                used.insert(next);\r\n                q.push(next);\r\n\r\n                prev_dir[next] = i;\r\n\r\n                if (exits.count(next)) {\r\n                    std::cerr << next.first << \" \" << next.second << std::endl;\r\n                    return next;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return make_pair(-1, -1);\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    cin >> in_no >> w >> n >> m >> x0 >> y0 >> c >> d >> k >> e;\r\n\r\n    for (int i = 0; i < c; i++) {\r\n        Pair<int> p1, p2;\r\n        cin >> p1.first >> p1.second >> p2.first >> p2.second;\r\n        walls.emplace(p1, p2);\r\n        walls.emplace(p2, p1);\r\n    }\r\n\r\n    for (int i = 0; i < d; i++) {\r\n        Pair<int> p1, p2;\r\n        cin >> p1.first >> p1.second >> p2.first >> p2.second;\r\n        // doors.emplace(p1, p2);\r\n        walls.emplace(p1, p2);\r\n        walls.emplace(p2, p1);\r\n    }\r\n\r\n    for (int i = 0; i < k; i++) {\r\n        Pair<int> p;\r\n        cin >> p.first >> p.second;\r\n        keys.insert(p);\r\n    }\r\n\r\n    for (int i = 0; i < e; i++) {\r\n        Pair<int> p;\r\n        cin >> p.first >> p.second;\r\n        exits.insert(p);\r\n    }\r\n\r\n    auto last = find_exit();\r\n    assert(last.first != -1);\r\n\r\n    vector<string> cmds;\r\n    vector<int> dirs;\r\n    while (prev_dir[last] != -1) {\r\n        auto dir = prev_dir[last];\r\n        cmds.push_back(\"move-\" + dir_name[dir]);\r\n        dirs.push_back(dir);\r\n        last.first -= dx[dir];\r\n        last.second -= dy[dir];\r\n    }\r\n\r\n    cerr << last.first << last.second << endl;\r\n\r\n    reverse(cmds.begin(), cmds.end());\r\n\r\n    for (auto& cmd : cmds) {\r\n        cout << cmd << endl;\r\n    }\r\n}"
}