{
    "id": 232779039,
    "contestId": 1837,
    "creationTimeSeconds": 1699979232,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1837,
        "index": "A",
        "name": "Grasshopper on a Line",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1837,
        "members": [
            {
                "handle": "hiddenarsenic"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1685025300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 16486400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 100000, M = N * 64 * 2, INF = 0x3f3f3f3f;\nint n, m, k;\nint a[N];\nstruct Node {\n  int v, w;\n  bool operator<(const Node &W) const { return w > W.w; }\n};\nvector<Node> g[N];\nint dist[N], pre[N];\nbool st[N];\nint dijkstra() {\n  for (int i = 0; i <= 10000; i++) dist[i] = INF;\n  priority_queue<Node> heap;\n  heap.push({0, 0});\n  dist[0] = 0;\n  while (heap.size()) {\n    auto [w, u] = heap.top();\n    heap.pop();\n    if (st[u]) continue;\n    st[u] = true;\n    for (auto [v, aw] : g[u]) {\n      if (dist[v] > aw + w) {\n        dist[v] = aw + w;\n        pre[v] = u;\n        heap.push({dist[v], v});\n      }\n    }\n  }\n  cout << dist[n] << endl;\n  vector<int> path;\n  int v = n;\n  while (v != 0) {\n    path.push_back(v);\n    v = pre[v];\n  }\n  path.push_back(0);\n  reverse(path.begin(), path.end());\n  for (int i = 1; i < path.size(); i++) {\n    int first = path[i];\n    int second = path[i - 1];\n    cout << first - second << \" \";\n  }\n  cout << endl;\n}\nvoid solve() {\n  for (int i = 0; i <= 10000; i++) g[i].clear(), st[i] = 0;\n  cin >> n >> k;\n  for (int i = 0; i <= 1000; i++) {\n    for (int j = 1; j <= 1000; j++) {\n      if (j % k) {\n        g[i].push_back({i + j, 1});\n        g[i + j].push_back({i, 1});\n      }\n    }\n  }\n  dijkstra();\n}\nsigned main() {\n  int T = 1;\n  scanf(\"%d\", &T);\n  while (T--) {\n    solve();\n  }\n  return 0;\n}\n"
}