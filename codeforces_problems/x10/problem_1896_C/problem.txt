{
    "contestId": 1896,
    "index": "C",
    "name": "Matching Arrays",
    "type": "PROGRAMMING",
    "points": 1500.0,
    "rating": 1400,
    "tags": [
        "binary search",
        "constructive algorithms",
        "greedy",
        "sortings"
    ],
    "desc": {
        "title": "C. Matching Arrays",
        "statement": "<p>You are given two arrays $$$a$$$ and $$$b$$$ of size $$$n$$$. The <span class=\"tex-font-style-it\">beauty</span> of the arrays $$$a$$$ and $$$b$$$ is the number of indices $$$i$$$ such that $$$a_i &gt; b_i$$$.</p><p>You are also given an integer $$$x$$$. Determine whether it is possible to rearrange the elements of $$$b$$$ such that the beauty of the arrays becomes $$$x$$$. If it is possible, output one valid rearrangement of $$$b$$$.</p>",
        "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^4$$$). The description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$x$$$ ($$$1 \\le n \\le 2\\cdot 10^5$$$, $$$0 \\le x \\le n$$$)\u00a0\u2014 the size of arrays $$$a$$$ and $$$b$$$ and the desired beauty of the arrays.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1, a_2, \\ldots, a_n$$$ ($$$1 \\le a_i \\le 2n$$$)\u00a0\u2014 the elements of array $$$a$$$.</p><p>The third line of each test case contains $$$n$$$ integers $$$b_1, b_2, \\ldots, b_n$$$ ($$$1 \\le b_i \\le 2n$$$)\u00a0\u2014 the elements of array $$$b$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2\\cdot 10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, output \"<span class=\"tex-font-style-tt\">NO</span>\" if it is not possible to rearrange $$$b$$$ to make the beauty of the arrays equal to $$$x$$$.</p><p>Otherwise, output \"<span class=\"tex-font-style-tt\">YES</span>\". Then, on the next line, output $$$n$$$ integers which represent the rearrangement of $$$b$$$.</p><p>If there are multiple solutions, you may output any of them.</p><p>You can output \"<span class=\"tex-font-style-tt\">YES</span>\" and \"<span class=\"tex-font-style-tt\">NO</span>\" in any case (upper or lower). For example, the strings \"<span class=\"tex-font-style-tt\">yEs</span>\", \"<span class=\"tex-font-style-tt\">yes</span>\", \"<span class=\"tex-font-style-tt\">Yes</span>\", and \"<span class=\"tex-font-style-tt\">YES</span>\" will be recognized as positive responses.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 0</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 0</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2 4 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4 1 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3 1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2 4 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4 1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3 2</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">2 4 3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4 1 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3 3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2 4 3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">4 1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">5 2</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">6 4 5 6 2</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">9 7 9 1 1</div>",
                "output": "\nYES\n2\nNO\nNO\nYES\n2 4 1\nYES\n4 1 2\nNO\nYES\n1 9 9 7 1\n"
            }
        ],
        "note": "<p>In test cases 1 and 2, the beauty of the arrays has to be $$$0$$$ since $$$a_1 = 1 \\le 2 = b_1$$$.</p><p>In test cases 3, 4, 5 and 6, the only possible beauty of the arrays is $$$x = 1$$$ and $$$x = 2$$$. In particular, if $$$b$$$ is rearranged to $$$[2, 4, 1]$$$, then $$$a_3 = 3 &gt; 1 = b_3$$$, so the beauty of the arrays is $$$1$$$. If $$$b$$$ is kept in the same order as given the input, then $$$a_2 = 4 &gt; b_2 = 1$$$ and $$$a_3 = 3 &gt; 2 = b_3$$$, so the beauty of the arrays is $$$2$$$.</p>"
    },
    "suggested_categories": [
        "array manipulation",
        "algorithms",
        "data structures",
        "sorting",
        "conditional logic",
        "integer operations",
        "combinatorial optimization",
        "permutation",
        "numerical methods",
        "search algorithms",
        "constraint satisfaction",
        "array comparison",
        "greedy algorithms",
        "sorting algorithms",
        "mathematical computation",
        "logical operations",
        "problem solving",
        "optimization problems",
        "mathematical modeling",
        "algorithmic complexity"
    ]
}