{
    "id": 231741376,
    "contestId": 1889,
    "creationTimeSeconds": 1699365101,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1889,
        "index": "F",
        "name": "Doremy's Average Tree",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3500,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1889,
        "members": [
            {
                "handle": "prabhavsingh11400"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1698503700
    },
    "programmingLanguage": "Clang++20 Diagnostics",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "Q. Maximum length of subarray whose sum is k\r\n\r\nint longestSubarrayWithSumK(vector<int> arr, long long k) {\r\n    // subarray = substring = elements should be contiguous\r\n    // subsequence(order cannot be altered) = permutation(any order, but all elelemts have to be picked in each permutations) = subset(any order, but same set of elements can form only one subset, chahe jis order me le len unhe) => in teeno me hi may or may not be contiguous\r\n    //  n^2 time complexity\r\n    int max_len=0;\r\n    for(int i=0;i<arr.size();i++){\r\n        long long sum=0;\r\n        for(int j=i;j<arr.size();j++){\r\n            sum+=arr[j];\r\n            if(sum==k){\r\n                max_len=max(max_len,j-i+1); // why +1, index=0, index = 2; so 2-0 = 2; but actual lenght will be , index 0,1,2 = 3, hence +1\r\n            }\r\n        }\r\n    }\r\n    return max_len;\r\n}\r\n/*\r\nSubarray vs. Substring:\r\n\r\nSubarray: Consider an array [1, 2, 3, 4, 5]. A subarray of this array might be\r\n[2, 3, 4], which consists of contiguous elements from the original array.\r\nSubstring: In a string like \"abcdef,\" a substring might be \"bcd,\" which consists\r\nof contiguous characters within the original string. Subsequence vs. Permutation\r\nvs. Subset:\r\n\r\nSubsequence: Given the string \"abc,\" some of its subsequences include \"ab,\"\r\n\"bc,\" and \"ac.\" These subsequences don't have to be contiguous, and elements are\r\ntaken in the same order. Permutation: For the same string \"abc,\" permutations\r\ninclude \"abc,\" \"bac,\" \"acb,\" \"bca,\" \"cab,\" and \"cba.\" These are all different\r\narrangements of the same elements, but all elements must be present. Subset:\r\nConsider a set {1, 2, 3}. Some of its subsets include {}, {1}, {2}, {3}, {1, 2}, \r\n{2,3},{1,3} and {1, 2, 3}. Subsets can be formed by including or excluding\r\nelements and can be non-contiguous.\r\n\r\nn! = permutations, 2^n total subsets,similarly 2^n subsequences are possible. since\r\nSubsequence: A subsequence is a sequence of elements that is derived from another sequence \r\nby deleting zero or more elements without changing the order of the remaining elements. \r\nSubsequences always preserve the order of elements. So \"abc\" se \"abc\" ek hi subsequence banegi.\r\nsimilarly agar subsets ki bat karen to {a,b,c}, {b,a,c},{c,a,b} teeno ek hi mane jayenge => ek hi subset hai {a,b,c}\r\nAlthough subset me order does not matter, but it matters in subsequence. But their numbers/count will be same\r\n\r\n*/\r\n\r\n                       Python Code\r\n                      \r\ndef longestSubarrayWithSumK(arr: [int], k: int) -> int:\r\n    max_len = 0\r\n    n = len(arr)\r\n    for i in range(n):\r\n        sum=0\r\n        for j in range(i,n): # as usual last n will not be consitered as index\r\n            sum+=arr[j]\r\n            if sum==k:\r\n                max_len=max(max_len,j-i+1)\r\n    return max_len"
}