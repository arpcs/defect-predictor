{
    "id": 233762405,
    "contestId": 1889,
    "creationTimeSeconds": 1700629365,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1889,
        "index": "F",
        "name": "Doremy's Average Tree",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3500,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1889,
        "members": [
            {
                "handle": "JahongirLucifer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1698503700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nvector<int> operations;\r\n\r\nint dfs(int node, int parent, vector<int>& weights, const vector<vector<int>>& edges) {\r\n    // \u0418\u0449\u0435\u043c \u0432\u0441\u0435\u0445 \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432 \u0434\u0430\u043d\u043d\u043e\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b\r\n    vector<int> children;\r\n    for (int child : edges[node]) {\r\n        if (child != parent) {\r\n            children.push_back(child);\r\n        }\r\n    }\r\n\r\n    // \u041f\u0440\u043e\u0432\u043e\u0434\u0438\u043c \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044e \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b\r\n    operations.push_back(node);\r\n    int totalWeight = weights[node - 1];\r\n\r\n    for (int child : children) {\r\n        totalWeight += dfs(child, node, weights, edges);\r\n    }\r\n\r\n    // \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0432\u0435\u0441\u044b \u0434\u043b\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0432\u0435\u0440\u0448\u0438\u043d\u044b \u0438 \u0432\u0441\u0435\u0445 \u0435\u0451 \u043f\u043e\u0442\u043e\u043c\u043a\u043e\u0432 \u0440\u0430\u0432\u043d\u044b\u043c\u0438\r\n    weights[node - 1] = totalWeight;\r\n    return totalWeight;\r\n}\r\n\r\nvoid solve(int n, int r, int k, vector<int>& weights, const vector<vector<int>>& edges) {\r\n    operations.clear();\r\n    dfs(r, 0, weights, edges);\r\n\r\n    // \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\r\n    cout << operations.size() << endl;\r\n    for (int op : operations) {\r\n        cout << op << \" \";\r\n    }\r\n    cout << endl;\r\n}\r\n\r\nint main() {\r\n    int t;\r\n    cin >> t;\r\n\r\n    for (int i = 0; i < t; ++i) {\r\n        int n, r, k;\r\n        cin >> n >> r >> k;\r\n\r\n        vector<int> weights(n);\r\n        for (int j = 0; j < n; ++j) {\r\n            cin >> weights[j];\r\n        }\r\n\r\n        vector<vector<int>> edges(n + 1);\r\n        for (int j = 0; j < n - 1; ++j) {\r\n            int u, v;\r\n            cin >> u >> v;\r\n            edges[u].push_back(v);\r\n            edges[v].push_back(u);\r\n        }\r\n\r\n        solve(n, r, k, weights, edges);\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}