{
    "id": 198549916,
    "contestId": 975,
    "creationTimeSeconds": 1679428114,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 975,
        "index": "E",
        "name": "Hag's Khashba",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2600,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 975,
        "members": [
            {
                "handle": "Be_dos"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1525183500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 31,
    "timeConsumedMillis": 904,
    "memoryConsumedBytes": 204800,
    "source": "#include <iostream>\n#include <cmath>\n#include <cctype>\n#include <vector>\n#include <algorithm>\n#include <set>\n#include <map>\n#include <deque>\n#include <stack>\n#include <unordered_set>\n#include <sstream>\n#include <cstring>\n#include <iomanip>\n#include <queue>\n#include <unordered_map>\n#include <random>\n#include <cfloat>\n#include <chrono>\n#include <bitset>\n#include <complex>\n#include <immintrin.h>\n\n#define PI 3.141592653589793238\n\nstruct Vector {\n    double dx;\n    double dy;\n\n    double operator^(const Vector& other) {\n        return dx * other.dy - dy * other.dx;\n    }\n};\n\nstruct Point {\n    double x;\n    double y;\n\n    Point(){}\n\n    Point(double x_, double y_) {\n        x = x_;\n        y = y_;\n    }\n\n    Vector operator-(const Point& other) {\n        return {x - other.x, y - other.y};\n    }\n\n    void operator+=(const Vector& other) {\n        x += other.dx;\n        y += other.dy;\n    }\n};\n\nVector rotate(Vector v, double angle) {\n    return {std::cos(angle) * v.dx - std::sin(angle) * v.dy, std::sin(angle) * v.dx + std::cos(angle) * v.dy};\n}\n\nint main() {\n    //std::ios::sync_with_stdio(false);\n    std::cin.tie(0);\n\n    int32_t n, num_q;\n    std::cin >> n >> num_q;\n\n    Point* arr = new Point[n];\n    for(int32_t i = 0; i < n; i++)\n        std::cin >> arr[i].x >> arr[i].y;\n\n    __int128_t gravity_center_x = 0, gravity_center_y = 0;\n    for(int32_t i = 0; i < n; i++) {\n        gravity_center_x += ((__int128_t)arr[i].x + (int64_t)arr[(i + 1) % n].x) * ((int64_t)arr[i].x * (int64_t)arr[(i + 1) % n].y - (int64_t)arr[i].y * (int64_t)arr[(i + 1) % n].x);\n        gravity_center_y += ((__int128_t)arr[i].y + (int64_t)arr[(i + 1) % n].y) * ((int64_t)arr[i].x * (int64_t)arr[(i + 1) % n].y - (int64_t)arr[i].y * (int64_t)arr[(i + 1) % n].x);\n    }\n\n    int64_t area = 0;\n    for(int32_t i = 0; i < n; i++)\n        area += (int64_t)arr[i].x * (int64_t)arr[(i + 1) % n].y -\n                (int64_t)arr[i].y * (int64_t)arr[(i + 1) % n].x;\n\n    Point gravity_center = {0, 0};\n    gravity_center.x += gravity_center_x / (3 * area);\n    gravity_center.x += (gravity_center_x % (3 * area)) / (double)(3 * area);\n    gravity_center.y += gravity_center_y / (3 * area);\n    gravity_center.y += (gravity_center_y % (3 * area)) / (double)(3 * area);\n\n    std::pair<int32_t, int32_t> points = {0, 1};\n    Point vertex_pos = arr[0];\n\n    std::cout << std::setprecision(20);\n\n    double rotation_cur = 0;\n    for(int32_t q = 0; q < num_q; q++) {\n        int32_t type, v;\n        std::cin >> type >> v;\n        v--;\n\n        if(type == 1) {\n            int32_t v2;\n            std::cin >> v2;\n            v2--;\n\n            if(points.first == v) {\n                vertex_pos += rotate(arr[points.second] - arr[points.first], rotation_cur);\n\n                std::swap(points.first, points.second);\n            }\n\n            rotation_cur = PI + std::atan2(gravity_center.x - arr[points.first].x, gravity_center.y - arr[points.first].y);\n            points.second = v2;\n        } else {\n            Point point_res = vertex_pos;\n            point_res += rotate(arr[v] - arr[points.first], rotation_cur);\n\n            std::cout << point_res.x << \" \" << point_res.y << \"\\n\";\n        }\n    }\n    return 0;\n}\n"
}