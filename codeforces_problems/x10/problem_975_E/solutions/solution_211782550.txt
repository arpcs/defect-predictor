{
    "id": 211782550,
    "contestId": 975,
    "creationTimeSeconds": 1688266733,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 975,
        "index": "E",
        "name": "Hag's Khashba",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2600,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 975,
        "members": [
            {
                "handle": "feecIe6418"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1525183500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 31,
    "timeConsumedMillis": 764,
    "memoryConsumedBytes": 6758400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef long double db;\r\nconst db eps = 1e-13, pi = acosl(-1);\r\nstruct point {\r\n\tdb x, y;\r\n} a[200005];\r\ndb Dot(point x, point y) { return x.x * y.x + x.y * y.y; }\r\ndb Cross(point x, point y) { return x.x * y.y - x.y * y.x; }\r\ndb Dis(point x, point y) { return (x.x - y.x) * (x.x - y.x) + (x.y - y.y) * (x.y - y.y); }\r\npoint operator+(point x, point y) { return {x.x + y.x, x.y + y.y}; }\r\npoint operator-(point x, point y) { return {x.x - y.x, x.y - y.y}; }\r\ndb Calc(point a, point b, point c) { return Cross(b - a, c - a); }\r\nstruct Matrix {\r\n\tdb a[3][3];\r\n\tdb *operator[](int k) { return a[k]; }\r\n\tMatrix(db o = 0) {\r\n\t\tmemset(a, 0, sizeof(a));\r\n\t\tfor (int i = 0; i < 3; i++) a[i][i] = o;\r\n\t}\r\n} cur(1);\r\nMatrix operator*(Matrix x, Matrix y) {\r\n\tMatrix z;\r\n\tfor (int i = 0; i < 3; i++) {\r\n\t\tfor (int j = 0; j < 3; j++) {\r\n\t\t\tfor (int k = 0; k < 3; k++) {\r\n\t\t\t\tz[i][k] += x[i][j] * y[j][k];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn z;\r\n}\r\nint n, q, f1 = 1, f2 = 2, at = 0;\r\ndb X[10005], Y[10005];\r\npair<db, db> Get(db x, db y) {\r\n\treturn make_pair(x * cur[0][0] + y * cur[0][1] + cur[0][2],\r\n\t                 x * cur[1][0] + y * cur[1][1] + cur[1][2]);\r\n}\r\nint main() {\r\n\tscanf(\"%d%d\", &n, &q);\r\n\tdb sx = 0, sy = 0;\r\n\tdb curarea = 0;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tscanf(\"%Lf%Lf\", &X[i], &Y[i]);\r\n\t\ta[i] = {X[i], Y[i]};\r\n\t}\r\n\tfor (int i = 3; i <= n; i++) {\r\n\t\tdb area = fabsl(Calc(a[1], a[i - 1], a[i]));\r\n\t\tdb xx = (X[1] + X[i - 1] + X[i]) / 3;\r\n\t\tdb yy = (Y[1] + Y[i - 1] + Y[i]) / 3;\r\n\t\tsx = (sx * curarea + xx * area) / (curarea + area);\r\n\t\tsy = (sy * curarea + yy * area) / (curarea + area);\r\n\t\tcurarea += area;\r\n\t}\r\n\tfor (int i = 1, op, x, y; i <= q; i++) {\r\n\t\tscanf(\"%d\", &op);\r\n\t\tif (op == 2) {\r\n\t\t\tscanf(\"%d\", &x);\r\n\t\t\tauto [ax, ay] = Get(X[x], Y[x]);\r\n\t\t\tprintf(\"%.10Lf %.10Lf\\n\", ax, ay);\r\n\t\t} else {\r\n\t\t\tscanf(\"%d%d\", &x, &y);\r\n\t\t\tif (f1 == f2)\r\n\t\t\t\t;\r\n\t\t\telse {\r\n\t\t\t\tif (f2 == x) swap(f1, f2);\r\n\t\t\t\tif (x != at && at)\r\n\t\t\t\t\t;\r\n\t\t\t\telse {\r\n\t\t\t\t\tauto [yx, yy] = Get(X[f2], Y[f2]);\r\n\t\t\t\t\tauto [cx, cy] = Get(sx, sy);\r\n\t\t\t\t\t// printf(\"cx,cy: %.10lf %.10lf\\n\", cx, cy);\r\n\t\t\t\t\t// printf(\"yx,yy: %.10lf %.10lf\\n\", yx, yy);\r\n\t\t\t\t\tif (fabsl(cx - yx) + fabsl(cy - yy) < eps)\r\n\t\t\t\t\t\t;\r\n\t\t\t\t\telse {\r\n\t\t\t\t\t\tdb ang = atan2l(cy - yy, cx - yx) + pi / 2;\r\n\t\t\t\t\t\tang = -ang;\r\n\t\t\t\t\t\tMatrix mul;\r\n\t\t\t\t\t\tmul[0][0] = cosl(ang), mul[0][1] = -sinl(ang),\r\n\t\t\t\t\t\tmul[0][2] = -yx * cosl(ang) + yy * sinl(ang) + yx;\r\n\t\t\t\t\t\tmul[1][0] = sinl(ang), mul[1][1] = cosl(ang),\r\n\t\t\t\t\t\tmul[1][2] = -yx * sinl(ang) - yy * cosl(ang) + yy;\r\n\t\t\t\t\t\tmul[2][2] = 1;\r\n\t\t\t\t\t\tcur = mul * cur;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tat = f2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tf1 = y;\r\n\t\t}\r\n\t\t// cout << f1 << ' ' << f2 << ' ' << at << '\\n';\r\n\t}\r\n}\r\n"
}