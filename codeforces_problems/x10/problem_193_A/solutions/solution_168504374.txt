{
    "id": 168504374,
    "contestId": 193,
    "creationTimeSeconds": 1660654358,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 193,
        "index": "A",
        "name": "Cutting Figure",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 193,
        "members": [
            {
                "handle": "satyamshrma"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338737400
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 65,
    "timeConsumedMillis": 248,
    "memoryConsumedBytes": 33689600,
    "source": "import sys\r\nfrom math import sqrt,gcd,factorial,ceil,floor,pi\r\nfrom collections import deque,Counter,OrderedDict\r\nfrom heapq import heapify,heappush,heappop\r\nsys.setrecursionlimit(10**4)\r\ninput =lambda: sys.stdin.readline()\r\nI     =lambda :int(input())\r\nS     =lambda :input().strip()\r\nM     =lambda :map(int,input().strip().split())\r\nL     =lambda :list(map(int,input().strip().split()))\r\nmod=10**9+7 \r\n\r\n##########################################################\r\n\r\n\r\ndef dfs(i,j,pi,pj):\r\n\tglobal t,fl\r\n\tv[i][j] = 1\r\n\tintime[i][j] = lowtime[i][j] = t\r\n\tt+=1\r\n\tc,f = 0,0\r\n\tfor ci,cj in [[i+1,j],[i,j+1],[i-1,j],[i,j-1]]:\r\n\t\tif not (0<=ci<n and 0<=cj<m and mat[ci][cj]=='#'): continue\r\n\t\tif ci==pi and cj==pj: continue\r\n\t\tif v[ci][cj]: lowtime[i][j] = min(lowtime[i][j], intime[ci][cj])\r\n\t\telse:\r\n\t\t\tc+=1\r\n\t\t\tdfs(ci,cj,i,j)\r\n\t\t\tlowtime[i][j] = min(lowtime[i][j], lowtime[ci][cj])\r\n\t\t\tif (pi!=-1 and pj!=-1) and lowtime[ci][cj]>=intime[i][j]:\r\n\t\t\t\tf = 1\r\n\tif f or (pi==-1 and pj==-1 and c>1): fl = 1\r\n\r\n\r\nn,m=M()\r\nmat = []\r\nfor i in range(n):\r\n\tmat.append(list(S()))\r\nct = 0\r\nfor row in mat: ct+=row.count('#')\r\nif ct<=2: print(-1)\r\nelse:\r\n\tv = [[0]*m for i in range(n)]\r\n\tintime,lowtime = [[0]*m for i in range(n)],[[0]*m for i in range(n)]\r\n\tt,fl = 0, 2\r\n\tfor i in range(n):\r\n\t\tfor j in range(m):\r\n\t\t\tif not v[i][j] and mat[i][j]=='#':\r\n\t\t\t\tdfs(i,j,-1,-1)\r\n\tprint(fl)\r\n\t"
}