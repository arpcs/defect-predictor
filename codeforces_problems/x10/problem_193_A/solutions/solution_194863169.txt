{
    "id": 194863169,
    "contestId": 193,
    "creationTimeSeconds": 1677296508,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 193,
        "index": "A",
        "name": "Cutting Figure",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 193,
        "members": [
            {
                "handle": "RetiringNextCentury"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338737400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n#define all(x) x.begin(),x.end()\r\n#define answer(x) cout << (x ? \"YES\\n\" : \"NO\\n\")\r\n#define test ios::sync_with_stdio(0); cin.tie(0); cout.tie(0); int T; cin >> T; while(T--)\r\n#define go ios::sync_with_stdio(0); cin.tie(0); cout.tie(0)\r\n#define F first\r\n#define S second\r\nusing namespace std;\r\n\r\n\r\nconst int N = 55; \r\nint n, m; \r\nvector<int> adj[10000];\r\nstring s[N]; \r\nint dx[] = {0, 0, -1, 1}; \r\nint dy[] = {-1, 1, 0, 0}; \r\nint nodes = 0; \r\nbool exist = 0; \r\n\r\n\r\nbool inRange(int i, int j)\r\n{\r\n\treturn min(i, j) > 0 && i <= n && j <= m; \r\n}\r\n\r\n\r\n\r\n\r\n\r\nvector<bool> visited;\r\nvector<int> tin, low;\r\nint timer;\r\n\r\nvoid find_points(int v, int p = -1) {\r\n\t\r\n\tnodes ++; \r\n\t\r\n    visited[v] = true;\r\n    tin[v] = low[v] = timer++;\r\n    int children=0;\r\n    for (int to : adj[v]) {\r\n        if (to == p) continue;\r\n        if (visited[to]) {\r\n            low[v] = min(low[v], tin[to]);\r\n        } else {\r\n            find_points(to, v);\r\n            low[v] = min(low[v], low[to]);\r\n            if (low[to] >= tin[v] && p!=-1)\r\n            \texist = 1; \r\n            \t\r\n            ++children;\r\n        }\r\n    }\r\n    if(p == -1 && children > 1)\r\n    exist = 1; \r\n}\r\n\r\n\r\n\r\n\r\n\r\nint main()\r\n{\r\n\tgo; \r\n\tcin >> n >> m; \r\n\tfor(int i =1 ;i <=n; i++) cin >> s[i], s[i] = \"*\" + s[i]; \r\n\t\r\n\tfor(int i =1 ;i <=n; i++)\r\n\t\tfor(int j=1 ;j <=m ;j ++)\r\n\t\t\tfor(int k=0 ; k < 4 ; k ++)\r\n\t\t\t{\r\n\t\t\t\tint x = i + dx[k]; \r\n\t\t\t\tint y = j + dy[k]; \r\n\t\t\t\t\r\n\t\t\t\tif(!inRange(x, y)) continue; \r\n\t\t\t\t\r\n\t\t\t\tif(s[i][j] == s[x][y] && s[i][j] == '#')\r\n\t\t\t\t\tadj[i * 100 + j].push_back(x * 100 + y);\r\n\t\t\t}\r\n\t\r\n\t\r\n\t\r\n\ttimer = 0;\r\n    visited.assign(n + 1, false);\r\n    tin.assign(n + 1, -1);\r\n    low.assign(n + 1, -1);\r\n    \r\n    bool  answer0 = 0; \r\n    \r\n    for (int i = 1; i <= n; i++) if(!visited[i]) find_points(i), answer0 ++; \r\n\t\r\n\tif(answer0 > 1) cout << 0; \r\n\telse if(exist) cout << 1 ; \r\n\telse cout << 2; \r\n}\r\n\r\n\r\n"
}