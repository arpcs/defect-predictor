{
    "id": 212502862,
    "contestId": 193,
    "creationTimeSeconds": 1688705084,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 193,
        "index": "A",
        "name": "Cutting Figure",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 193,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338737400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<iostream>\nusing namespace std;\nconst int N=1e5;\nvector<int>iceland[N];\nint vis[N];\nint time=0;\nint dis[N];\nint low[N];\nint root=1;\nint counter;\nset<int>artPoint;\nvoid DFS(int current,int parent){\n    time++;\n    vis[current]=1;\n    dis[current]=low[current]=time;\n\n    int childCount=0;\n\n    for(auto x : iceland[current]){\n        if(x==parent)continue;\n\n        if(vis[x]==0){\n            DFS(x,current);\n            low[current]=min(low[current],dis[x]);\n            childCount++;\n        }\n        else{\n            low[current]=min(low[current],dis[x]);\n        }\n    }\n    if(parent==-1 && childCount > 1) artPoint.insert(current);\n    if(parent!=-1 && parent!=root &&low[current]>=dis[parent]){\n        artPoint.insert(parent);\n    }\n}\nint main()\n{\n    while(1){\n        int n,m;\n        cin>>n>>m;\n        if(n==0 && m==0)\n        {\n            break;\n        }\n        for(int i=0;i<m;i++)\n        {\n            int y,z;\n            cin>>y>>z;\n            iceland[y].push_back(z);\n            iceland[z].push_back(y);\n        }\n\n        memset(vis,0,sizeof(vis));\n        memset(dis,0,sizeof(dis));\n        memset(low,0,sizeof(low));\n      \n        counter=0;\n        time=0;\n        artPoint.erase(artPoint.begin(),artPoint.end());\n\n        DFS(1,-1);\n        cout<<artPoint.size()<<endl;\n\n        for(int i=0;i<=n;i++)\n        {\n            iceland[i].erase(iceland[i].begin(),iceland[i].end());\n        }\n\n\n\n    }\n}\n \t\t  \t\t \t      \t\t\t\t\t \t\t \t \t   \t"
}