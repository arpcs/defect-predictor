{
    "id": 162732686,
    "contestId": 193,
    "creationTimeSeconds": 1656931333,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 193,
        "index": "A",
        "name": "Cutting Figure",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 193,
        "members": [
            {
                "handle": "m-e-h-e-d-i"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338737400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 65,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 716800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define endl '\\n'\r\n#define dtype long long\r\n#define case(t, c) cout<<\"Case \"<<(t)<<\":\"<<\r\nbitset<100000> is_visited;\r\nvector<dtype> low, dtime;\r\nset<dtype> artipoint;\r\nvector<vector<dtype>> adjlist;\r\nint minutes;\r\nint total = 0;\r\n\r\nvoid articulationpoints(dtype u, dtype p = -1) {\r\n    is_visited[u] = true;\r\n    low[u] = dtime[u] = ++minutes;\r\n    int child = 0;\r\n    total++;\r\n    for (auto i:adjlist[u]) {\r\n        if (i == p)\r\n            continue;\r\n        if (is_visited[i]) {\r\n            low[u] = min(low[u], dtime[i]);\r\n        } else {\r\n            articulationpoints(i, u);\r\n            low[u] = min(low[u], low[i]);\r\n            if (dtime[u] <= low[i] && p != -1)\r\n                artipoint.insert(u);\r\n            child++;\r\n        }\r\n    }\r\n    if (p == -1 && child > 1)\r\n        artipoint.insert(u);\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false), cin.tie(nullptr);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    string str[n];\r\n    adjlist.resize(n * 100 + m + 7);\r\n    low.resize(n * 100 + m + 7);\r\n    dtime.resize(n * 100 + m + 7);\r\n    for (auto &i : str) {\r\n        cin >> i;\r\n    }\r\n    auto ch = [&](int i, int j) {\r\n        if (i < 0 || j < 0 || i >= n || j >= m)\r\n            return false;\r\n        else return (str[i][j]=='#');\r\n\r\n    };\r\n    int dx[] = {0, 1, 0, -1};\r\n    int dy[] = {1, 0, -1, 0};\r\n    int x = -1, y = -1;\r\n    for (int i = 0; i < n; ++i) {\r\n        for (int j = 0; j < m; ++j) {\r\n            if (str[i][j] != '#')\r\n                continue;\r\n            x = i, y = j;\r\n            for (int k = 0; k < 4; ++k) {\r\n                if (ch(i + dx[k], j + dy[k])) {\r\n                    adjlist[i * 100 + j].emplace_back((i + dx[k]) * 100 + j + dy[k]);\r\n                    adjlist[(i + dx[k]) * 100 + j + dy[k]].emplace_back(i * 100 + j);\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n    if (x < 0)\r\n        cout << -1 << endl;\r\n    else {\r\n        articulationpoints(x * 100 + y);\r\n\r\n        if (total < 3)\r\n            cout << -1 << endl;\r\n        else if (artipoint.empty())\r\n            cout << 2 << endl;\r\n        else\r\n            cout << 1 << endl;\r\n    }\r\n\r\n\r\n    return 0;\r\n}\r\n"
}