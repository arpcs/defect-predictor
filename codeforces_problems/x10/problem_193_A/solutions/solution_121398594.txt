{
    "id": 121398594,
    "contestId": 193,
    "creationTimeSeconds": 1625491259,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 193,
        "index": "A",
        "name": "Cutting Figure",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 193,
        "members": [
            {
                "handle": "Aaditya_99"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338737400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\n#include <iostream>\r\n#define ll long long int\r\n#define maxn 10001\r\nusing namespace std;\r\n\r\nvector<ll> adj[maxn];\r\nll disc[maxn], low[maxn];\r\nll time_d = 0;\r\nbool flag = false;\r\nvoid dfsAp(ll u, ll p)\r\n{\r\n\tll children = 0;\r\n\tlow[u] = disc[u]= ++time_d;\r\n\tfor(auto v : adj[u])\r\n\t{\r\n\t\tif(v==p) continue;\r\n\t\telse if(!disc[v])\r\n\t\t{\r\n\t\t\tchildren++;\r\n\t\t\t dfsAp(v,u);\r\n\r\n\t\t\tlow[u] = min(low[u],low[v]);\r\n\t\t\tif(disc[u] <= low[v] && p!=-1)\r\n\t\t\t\t{\r\n\t\t\t\t\tflag=true;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlow[u] = min(low[u],disc[v]);\r\n\t\t}\r\n\t}\r\n\r\n\tif(p==-1 && children>1)\r\n\tflag=true;\r\n\t\r\n\treturn;\r\n}\r\nint main()\r\n{\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL);\r\n\tll test;\r\n\ttest = 1;\r\n\t//cin >> test;\r\n\twhile(test--)\r\n\t{\t\r\n\t\tll n, m;\r\n\t\tcin >> n >> m;\r\n\r\n\t\tstring s[n];\r\n\t\tfor(ll i=0;i<n;i++)\r\n\t\t{\r\n\t\t\tcin >> s[i];\r\n\t\t}\r\n\r\n\t\t// memset(ap,0,maxn);\r\n\t\tmemset(disc,0,maxn);\r\n\t\tmemset(low,0,maxn);\r\n\t\ttime_d = 0;\r\n\t\tll node;\r\n\t\tfor(ll i = 0; i< n;i++)\r\n\t\t{\r\n\t\t\tfor(ll j=0;j<m;j++)\r\n\t\t\t{\r\n\r\n\t\t\t\tif(j>0 && s[i][j]=='#' && s[i][j-1]=='#')\r\n\t\t\t\t{\r\n\t\t\t\t\tll a = m*i + j+1;\r\n\t\t\t\t\tnode = a;\r\n\t\t\t\t\tadj[a].push_back(a-1);\r\n\t\t\t\t\tadj[a-1].push_back(a);\r\n\t\t\t\t}\r\n\t\t\t\tif(i>0 && s[i][j]=='#' && s[i-1][j]=='#')\r\n\t\t\t\t{\r\n\t\t\t\t\tll a = m*i + j+1;\r\n\t\t\t\t\tadj[a].push_back(a-m);\r\n\t\t\t\t\tadj[a-m].push_back(a);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tdfsAp(node,-1);\r\n\t\t\r\n\t\tif(flag) cout<<\"1\"<<endl;\r\n\t\telse\r\n\t\tcout<<\"2\"<<endl;\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}