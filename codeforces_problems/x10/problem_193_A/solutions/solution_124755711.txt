{
    "id": 124755711,
    "contestId": 193,
    "creationTimeSeconds": 1627982508,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 193,
        "index": "A",
        "name": "Cutting Figure",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 193,
        "members": [
            {
                "handle": "AdiZer0"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338737400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 3788800,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define pb push_back\r\n#define whole(x) x.begin(), x.end()\r\n#define sz(x) (int)x.size()\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\nconst int N = (int)205 + 2;\r\nconst int INF = (int)2e9 + 7;\r\nconst ll linf = (ll)1e14;\r\n\r\nint n, m;\r\nchar a[51][51];\r\nint used[51][51], dy[4] = {-1, 0, 1, 0}, dx[4] = {0, -1, 0, 1};\r\n\r\nvoid dfs(int x, int y) {\r\n    used[x][y] = 1;\r\n    for (int i = 0; i < 4; ++i) {\r\n        int nx = x + dx[i], ny = y + dy[i];\r\n        if (nx > n || nx < 1 || ny > m || ny < 1) continue;\r\n        if (a[nx][ny] == '#' && !used[nx][ny])\r\n            dfs(nx, ny);\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n   cin >> n >> m;\r\n\r\n    int cnt1 = 0;\r\n    int x1 = -1, y1 = -1, x2 = -1, y2 = -1;\r\n    for (int i = 1; i <= n; ++i) {\r\n        for (int j = 1; j <= m; ++j) {\r\n            cin >> a[i][j];\r\n            if (a[i][j] == '#') {\r\n                ++cnt1;\r\n                if (x1 == -1) x1 = i, y1 = j;\r\n                else x2 = i, y2 = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (cnt1 <= 2) {\r\n        cout << \"-1\\n\";\r\n        return;\r\n    }\r\n\r\n    for (int i = 1; i <= n; ++i) {\r\n        for (int j = 1; j <= m; ++j) {\r\n            if (a[i][j] == '#') {\r\n                a[i][j] = '.';\r\n                memset(used, 0, sizeof(used));\r\n                if (i == x1 && j == y1) dfs(x2, y2);\r\n                else dfs(x1, y1);\r\n                bool f = 1;\r\n                for (int k1 = 1; k1 <= n; ++k1) {\r\n                    for (int k2 = 1; k2 <= m; ++k2) {\r\n                        if (a[i][j] == '#' && !used[k1][k2])\r\n                            f = 0;\r\n                    }\r\n                    if (!f) break;\r\n                }\r\n                if (!f) {\r\n                    cout << 1;\r\n                    return;\r\n                }\r\n                a[i][j] = '#';\r\n            }\r\n        }\r\n    }\r\n\r\n    cout << 2 << \"\\n\";\r\n\r\n}\r\n\r\nint main() {\r\n\r\n    int tt = 1;\r\n    while (tt--) solve();\r\n\r\n    return 0;\r\n}\r\n"
}