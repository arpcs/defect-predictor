{
    "id": 215086040,
    "contestId": 1491,
    "creationTimeSeconds": 1690049053,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "I",
        "name": "Ruler Of The Zoo",
        "type": "PROGRAMMING",
        "points": 5000.0,
        "rating": 3500,
        "tags": [
            "brute force",
            "data structures"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "Rocket2a"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <queue>\r\n\r\nusing namespace std;\r\n\r\nstruct animal\r\n{\r\n    int str[3];\r\n    int wins = 0;\r\n    int index;\r\n    animal(int a, int b, int c, int index) :\r\n        index(index)\r\n    {\r\n        str[0] = a;\r\n        str[1] = b;\r\n        str[2] = c;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    int tests;\r\n    int a, b, c;\r\n    std::queue<animal*> animals{};\r\n    animal* king = NULL; \r\n    int fights_done = 0;\r\n    int cons_loses = 0;\r\n\r\n    ios::sync_with_stdio(false);\r\n\r\n    cin >> tests;\r\n\r\n    for (int i = 0; i < tests; i++)\r\n    {\r\n        cin >> a >> b >> c;\r\n        animals.push(new animal(a, b, c, i));\r\n    }\r\n\r\n    king = animals.front();\r\n    animals.pop();\r\n\r\n    while (true)\r\n    {\r\n        if (king->str[king->wins] > animals.front()->str[animals.front()->wins])\r\n        {\r\n            king->wins += 1;\r\n            animals.push(animals.front());\r\n            animals.pop();\r\n            cons_loses = 0;\r\n        }\r\n        else\r\n        {\r\n            king->wins = 0;\r\n            animals.push(king);\r\n            king = animals.front();\r\n            animals.pop();\r\n            king->wins += 1;\r\n            cons_loses += 1;\r\n        }\r\n\r\n        fights_done++; \r\n        \r\n        if (king->wins == 3)\r\n        {\r\n            break;\r\n        }\r\n\r\n        if (cons_loses > tests)\r\n        {\r\n            cout << \"-1 -1\";\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    cout << king->index << \" \" << fights_done;\r\n\r\n    return 1;\r\n}"
}