{
    "id": 214434184,
    "contestId": 1491,
    "creationTimeSeconds": 1689742678,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "I",
        "name": "Ruler Of The Zoo",
        "type": "PROGRAMMING",
        "points": 5000.0,
        "rating": 3500,
        "tags": [
            "brute force",
            "data structures"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "maxsunshinego"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "Go",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "package main\r\n\r\nimport \"fmt\"\r\n\r\ntype animal struct {\r\n\tnum  int\r\n\ta    [3]int\r\n\tnext *animal\r\n}\r\n\r\nfunc findKing(current *animal, colAnimal int) (int, int) {\r\n\r\n\tcolBattle := 0\r\n\tcount := 0\r\n\tpow := 0\r\n\tvar help *animal\r\n\tfor count < colAnimal && colBattle < 300000000 {\r\n\t\tcolBattle++\r\n\t\t// second goes to the end of queue\r\n\t\tif current.next.a[pow] > current.next.next.a[0] {\r\n\t\t\tpow++\r\n\t\t\tcount = 0\r\n\r\n\t\t\thelp = current.next\r\n\t\t\tcurrent.next = current.next.next\r\n\t\t\thelp.next = current.next.next\r\n\t\t\tcurrent.next.next = help\r\n\t\t\t/*\r\n\t\t\t\tcurrent.next, current.next.next, current.next.next.next = current.next.next, current.next.next.next, current.next\r\n\t\t\t\tcurrent = current.next\r\n\t\t\t*/\r\n\t\t\tif pow == 3 {\r\n\t\t\t\treturn current.next.num, colBattle\r\n\t\t\t}\r\n\t\t} else { // first goes to the end of queue\r\n\t\t\tcount++\r\n\t\t\tcurrent = current.next\r\n\t\t\tpow = 1\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1, -1\r\n}\r\n\r\nfunc main() {\r\n\tvar col_animal int\r\n\tfmt.Scan(&col_animal)\r\n\tvar first, current *animal\r\n\r\n\tcurrent = &animal{}\r\n\tfmt.Scan(&current.a[0], &current.a[1], &current.a[2])\r\n\tcurrent.num = 0\r\n\tfirst = current\r\n\r\n\tfor i := 1; i < col_animal; i++ {\r\n\t\thelp := &animal{}\r\n\t\tfmt.Scan(&help.a[0], &help.a[1], &help.a[2])\r\n\t\thelp.num = i\r\n\t\tcurrent.next = help\r\n\t\tcurrent = help\r\n\t}\r\n\r\n\tcurrent.next = first\r\n\r\n\tfmt.Println(findKing(current, col_animal))\r\n}\r\n"
}