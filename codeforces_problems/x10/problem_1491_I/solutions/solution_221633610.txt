{
    "id": 221633610,
    "contestId": 1491,
    "creationTimeSeconds": 1693717529,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "I",
        "name": "Ruler Of The Zoo",
        "type": "PROGRAMMING",
        "points": 5000.0,
        "rating": 3500,
        "tags": [
            "brute force",
            "data structures"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "Nabuko"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 373,
    "memoryConsumedBytes": 1024000,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <deque>\r\n#include <algorithm>\r\nusing namespace std;\r\nconst int RED=0,BLUE=1,GREEN=2;\r\nconst long long inf=1e16;\r\nlong long n;\r\nstruct animal{int a,b,c,id,pos,colour,redHere;};\r\nvector<animal> belt;\r\nvector<animal> arr;\r\nvector<pair<long long,pair<long long,long long>>> s;\r\nvector<pair<long long,long long>> reds;\r\nvoid insert(long long b,long long beltPos,long long pos){\r\n\twhile(!s.empty()&&s.back().first>=b) s.pop_back();\r\n\ts.push_back(pair<long long,pair<long long,long long>>(b,pair<long long,long long>(beltPos,pos)));\r\n}\r\nlong long totalMoves=0;\r\nvoid brute(){\r\n\tdeque<animal> q;\r\n\tanimal w=arr[0];\r\n\tfor(int i=1;i<n;i++)\r\n\t\tq.push_back(arr[i]);\r\n\tlong long count=1;\r\n\tfor(int x=1;;x++){\r\n\t\tif(x>2*n)\r\n\t\t\treturn;\r\n\t\tif(count==3){\r\n\t\t\tcout<<w.id<<\" \"<<x<<\"\\n\";\r\n\t\t\texit(0);\r\n\t\t}\r\n\t\tif(count==1){\r\n\t\t\tif(w.b>q.front().a){\r\n\t\t\t\tanimal y=q.front();\r\n\t\t\t\tq.push_back(y);\r\n\t\t\t\tq.pop_front();\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tq.push_back(w);\r\n\t\t\t\tw=q.front();\r\n\t\t\t\tq.pop_front();\r\n\t\t\t\tcount=1;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tif(w.c>q.front().a){\r\n\t\t\t\tanimal y=q.front();\r\n\t\t\t\tq.push_back(y);\r\n\t\t\t\tq.pop_front();\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tq.push_back(w);\r\n\t\t\t\tw=q.front();\r\n\t\t\t\tq.pop_front();\r\n\t\t\t\tcount=1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nint main(){\r\n\tios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n\tcin>>n;\r\n\tfor(int i=0;i<n;i++){\r\n\t\tint a,b,c; cin >>a>>b>>c;\r\n\t\tarr.push_back({a,b,c,i,-1,1,-1});\r\n\t}\r\n\tif(arr[0].a>arr[1].a) swap(arr[0],arr[1]);\r\n\tarr.push_back(arr[0]);\r\n\tarr.erase(arr.begin());\r\n\tbrute();\r\n\tfor(int i=1;i <n;i++)\r\n\t\tif(arr[i-1].b>arr[i].a)\r\n\t\t\tarr[i].colour = RED;\r\n\tfor(int i=0;i<n;i++){\r\n\t\tarr[i].pos=i;\r\n\t\tif(arr[i].colour==RED) continue;\r\n\t\tint nxt=i+1;\r\n\t\tif(nxt==n) nxt=0;\r\n\t\tif(arr[nxt].colour==RED) nxt++;\r\n\t\tif(nxt==n) nxt=0;\r\n\t\tif(arr[i].c>arr[nxt].a) arr[i].colour=GREEN;\r\n\t\telse arr[i].colour=BLUE;\r\n\t}\r\n\tarr.push_back(arr[0]);\r\n\tfor(int i=0;i<n;i++)\r\n\t\tif(arr[i].colour!=RED){\r\n\t\t\tif(arr[i+1].colour==RED)\r\n\t\t\t\tarr[i].redHere=arr[i+1].pos;\r\n\t\t\tbelt.push_back(arr[i]);\r\n\t\t}\r\n\twhile(true){\r\n\t\ts.clear();\r\n\t\treds.clear();\r\n\t\tfor(int i=0;i<(int)belt.size();i++){\r\n\t\t\tanimal A=belt[i];\r\n\t\t\tif(A.colour==BLUE) insert(A.b,A.pos,i);\r\n\t\t\telse insert(-inf,A.pos,i);\r\n\t\t}\r\n\t\tlong long minMoves=inf;\r\n\t\tfor(int i=0;i<(int)belt.size();i++){\r\n\t\t\tanimal A=belt[i];\r\n\t\t\tif(A.colour==BLUE) insert(A.b,A.pos,i);\r\n\t\t\telse insert(-inf,A.pos,i);\r\n\t\t\tint red=A.redHere;\r\n            if(red==-1) continue;\r\n\t\t\treds.push_back(pair<long long,long long>(red,i));\r\n\t\t\tauto early=lower_bound(s.begin(),s.end(),pair<long long,pair<long long,long long>>(arr[red].a,pair<long long,long long>(-1,-1)));\r\n\t\t\tif(early==s.begin()) continue; ///no event in this case\r\n\t\t\tearly--;\r\n\t\t\tlong long distance=i-(early->second).second;\r\n\t\t\tif(distance<0) distance+=(belt.size());\r\n\t\t\tminMoves=min(distance,minMoves);\r\n\t\t}\r\n\t\tif(minMoves==inf){\r\n\t\t\tcout << \"-1 -1\";\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse if(minMoves != 0){\r\n\t\t\ttotalMoves+=minMoves*(n-1);\r\n\t\t\tfor(pair<long long,long long> R:reds) belt[R.second].redHere=-1;\r\n\t\t\tfor(pair<long long,long long> R:reds){\r\n\t\t\t\tint pos=R.second;\r\n\t\t\t\tpos-=minMoves;\r\n\t\t\t\tif(pos<0) pos+=belt.size();\r\n\t\t\t\tbelt[pos].redHere=R.first;\r\n\t\t\t}\r\n\t\t}\r\n\t\tpair<long long,long long> ans =pair<long long,long long>(inf, inf);\r\n\t\tfor(int i=0;i<(int) belt.size();i++){\r\n\t\t\tif(belt[i].redHere==-1) continue;\r\n\t\t\tanimal R=arr[belt[i].redHere];\r\n\t\t\tif(belt[i].b<R.a){\r\n\t\t\t\tbelt[i].redHere=-1;\r\n\t\t\t\tbelt.insert(belt.begin()+(i+1),R);\r\n\t\t\t\tif(belt[i].c>R.a) belt[i].colour=GREEN;\r\n\t\t\t\telse belt[i].colour=BLUE;\r\n\t\t\t\tint nxt=i+2;\r\n\t\t\t\tif(nxt==(int)belt.size()) nxt=0;\r\n\t\t\t\tif(belt[i+1].c > belt[nxt].a) belt[i+1].colour = GREEN;\r\n\t\t\t\telse belt[i+1].colour = BLUE;\r\n\t\t\t}\r\n\t\t\telse if(belt[i].colour==GREEN)\r\n\t\t\t\tans=min(ans,pair<long long,long long>(totalMoves+R.pos+2,belt[i].id));\r\n\t\t}\r\n\t\tif(ans.first!=inf){\r\n\t\t\tcout<<ans.second<<\" \"<<ans.first;\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n}\r\n"
}