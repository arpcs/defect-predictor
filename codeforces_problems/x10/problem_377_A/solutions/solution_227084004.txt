{
    "id": 227084004,
    "contestId": 377,
    "creationTimeSeconds": 1696739277,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 377,
        "index": "A",
        "name": "Maze",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1600,
        "tags": [
            "dfs and similar"
        ]
    },
    "author": {
        "contestId": 377,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1388331000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n#define yes cout<<\"YES\"<<endl;\n#define no cout<<\"NO\"<<endl;\n#define numT  int t;cin>>t;while(t--)\n#define ll long long\n#define FIO ios_base::sync_with_stdio(false);cin.tie(NULL);\n#pragma GCC optimize \"trapv\"\nconst int N = 2 * 1e5;\nll MAX = 2e12;\nll f[N];\nll mod=1e9+7;\nll m=1e9+7;\n//ll n;\n//pair<int, int> a[n];\n//for (auto &[x, y]: a) {\n//cin >> x >> y; y *= -1;\n//}\nll fast_power_M(ll a,ll b){\n    if(!b)return 1;\n    ll res= fast_power_M(a%m,b>>1);\n    return ((res*res)%m*((b&1) ? a%m:1))%m;\n\n}\nll modeInverse(ll a){\n    ll x= __gcd(a,m);\n    if(x!=1)return -1;\n    return fast_power_M(a,m-2);\n}\nll fac(ll x, ll mod){\n    ll ret = 1 ;\n    for(int i=2;i<=x;++i) ret = (ret*i)%mod;// to avoid over flow\n    return ret ;\n}\nll nCr(ll n, ll r){\n    return(fac(n,mod)*modeInverse((fac(r,mod)*fac(n-r,mod))%mod))%mod;\n}\nll nPr(ll n,ll r){//momken a7melha bl factorial 3dy\n    ll ret = 1 ;\n    for(ll i=n-r+1;i<=n;++i) ret =(ret*i)%mod;\n    return ret ;\n}\nbool cmp(pair<int,int>p1,pair<int,int>p2){\n    if(p1.first<p2.first)return false;\n    else if(p1.first>p2.first)return true;\n    return p1.second<p2.second;\n}\nvoid divisors() {\n    ll  n;\n    cin>>n;\n    ll sum=0;\n    for (int i = 1; i*i <=n ; ++i) {\n        if(n%i==0) {\n            sum+=(i%mod);\n            if (i != (n / i)) {\n                sum+=((n/i)%mod);\n            }\n        }\n    }\n    cout<<sum<<endl;\n    // we can but them in vector\n}\n\nconst ll size=1000;\nint dx[] = {+0, +0, +1, -1};\nint dy[] = {+1, -1, +0, +0};\nll row,col,k;\nchar arr[size][size];\nbool  visited[size][size];\nvoid DFS(ll i,ll j){\n    visited[i][j]= true;\n    for (int l = 0; l <4 ; ++l) {\n        ll Nrow=i+dx[l];\n        ll Ncol=j+dy[l];\n        if(Nrow<0||Nrow>=row||Ncol<0||Ncol>=m||visited[Nrow][Ncol]||!k||arr[Nrow][Ncol]!='.'){\n            continue;\n        } else{\n            DFS(Nrow,Ncol);\n        }\n    }\n   if(arr[i][j]=='.'&&k){\n       arr[i][j]='X';\n       k--;\n  }\n}\nvoid sol() {\n    cin>>row>>col>>k;\n    for (int i = 0; i <row ; ++i) {\n        for (int j = 0; j <col ; ++j) {\n            cin>>arr[i][j];\n        }\n    }\n    for (int i = 0; i <row ; ++i) {\n        for (int j = 0; j <col ; ++j) {\n           DFS(i,j);\n        }\n    }\n    for (int i = 0; i <row ; ++i) {\n        for (int j = 0; j <col ; ++j) {\n            cout<<arr[i][j];\n        }\n        cout<<endl;\n    }\n}\n\nint main(){\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"output.txt\", \"w\", stdout);\n    FIO\n   // numT {\n        sol();\n  // }\n\n}\n\n\n\n\n\t\t   \t  \t  \t\t\t  \t\t \t\t\t\t  \t\t  \t\t"
}