{
    "id": 228317681,
    "contestId": 1776,
    "creationTimeSeconds": 1697384537,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1776,
        "index": "M",
        "name": "Parmigiana With Seafood",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "binary search",
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1776,
        "members": [
            {
                "handle": "XCube"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1676804700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef vector <ll> VI;\r\ntypedef vector <VI> VVI;\r\ntypedef vector <VVI> VVVI;\r\ntypedef vector <ld> VD;\r\ntypedef vector <VD> VVD;\r\ntypedef vector <string> VS;\r\ntypedef vector <char> VC;\r\ntypedef vector <VC> VVC;\r\ntypedef pair <ll, ll> PII;\r\ntypedef pair <ll, PII> PIII;\r\ntypedef pair <ld, ld> PD;\r\ntypedef map <ll, ll> MII;\r\ntypedef map <string, int> MSI;\r\ntypedef queue <int> QI;\r\ntypedef queue <PII> QPI;\r\ntypedef set <ll> SI;\r\ntypedef SI::iterator IT;\r\ntypedef vector<PII> VPI;\r\n\r\n#define F first\r\n#define S second\r\n#define pb push_back\r\n\r\nint n;\r\nVVI Adj;\r\n\r\nVI securedNodes;\r\nVI colors;\r\nVI views;\r\n\r\nint k;\r\n\r\nbool epicFail;\r\n\r\nint checkSizes(int x, int p){\r\n\r\n    if (epicFail) return 0;\r\n\r\n    ll& ans = securedNodes[x];\r\n    if (ans >= 0) return ans;\r\n\r\n    ans = 0;\r\n    if (x >= k) ++ans;\r\n    \r\n    int aSize = Adj[x].size();\r\n\r\n    for (int i = 0; i < aSize; ++i){\r\n        int y = Adj[x][i];\r\n        if (y == p) continue;\r\n        colors[y] = 1 - colors[x];\r\n        int a = checkSizes(y, x);\r\n        ans += a;\r\n        if (a > 0) ++views[x];\r\n    }\r\n\r\n    if (p >= 0 && n - ans > 0) ++views[x];\r\n\r\n    if (x >= k){\r\n        if (views[x] > 2 || aSize == 1 || colors[x] != colors[n-1]){\r\n            epicFail = true;\r\n        }\r\n    }\r\n\r\n    return ans;\r\n}\r\n\r\nbool canSecure(){\r\n    epicFail = false;\r\n    securedNodes = VI(n, -1);\r\n    colors = VI(n, 0);\r\n    views = VI(n, 0);\r\n    checkSizes(n-1, -1);\r\n    return !epicFail;\r\n}\r\n\r\nvoid solve () {\r\n    if (n%2 == 0){\r\n        cout << n << endl;\r\n        return;\r\n    }\r\n    int bestAns = 0;\r\n    int worstAns = n;\r\n    while (worstAns - bestAns > 1){\r\n        k = (worstAns + bestAns)/2;\r\n        if (canSecure()){\r\n            worstAns = k;\r\n        } else{\r\n            bestAns = k;\r\n        }\r\n    }\r\n    cout << bestAns+1 << endl;\r\n}\r\n\r\nint main(){\r\n    //ios_base::sync_with_stdio(0);\r\n    cin >> n;\r\n    Adj = VVI(n, VI(0));\r\n    for (int i = 0; i < n-1; ++i){\r\n        int x, y;\r\n        scanf(\"%d %d\", &x, &y);\r\n        --x;--y;\r\n        Adj[x].push_back(y);\r\n        Adj[y].push_back(x);\r\n    }\r\n    solve();\r\n\r\n}"
}