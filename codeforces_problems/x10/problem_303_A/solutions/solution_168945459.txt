{
    "id": 168945459,
    "contestId": 303,
    "creationTimeSeconds": 1660900807,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 303,
        "index": "A",
        "name": "Lucky Permutation Triple",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1300,
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 303,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1368363600
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 530,
    "memoryConsumedBytes": 0,
    "source": "\nimport java.io.*;\n//import java.math.BigInteger;\nimport java.util.*;\n\npublic class Main {\n\tpublic static void main(String[] args) throws Exception {\n\t\tScanner s = new Scanner(System.in);\n\t\tPrintWriter pw = new PrintWriter(System.out);\n\t\t/*int tc = s.nextInt();\n\t\tfor (int t = 1; t <= tc; t++) {\t\n\t\t}*/\n\t\tint n=s.nextInt();\n\t\tif(n%2==0)pw.println(-1);\n\t\telse {\n\t\t\tint st=n/2;\n\t\t\tint j=st+1;\n\t\t\tint k=0;\n\t\t\tint ar[]=new int[n];\n\t\t\tint ar1[]=new int[n];\n\t\t\tint ar2[]=new int[n];\n\t\t\tfor(int i=0;i<n;i++)ar[i]=i;\n\t\t\tfor(int i=0;i<st;i++)ar1[i]=ar[j++];\n\t\t\tar1[st]=0;\n\t\t\tfor(int i=st;i<n;i++)ar1[i]=ar[k++];\n\t\t\tfor(int i=0;i<n;i++) {\n\t\t\t\tif(ar[i]+ar1[i]<n)ar2[i]=ar[i]+ar1[i];\n\t\t\t\telse ar2[i]=(ar1[i]+ar[i])%n;\n\t\t\t}\n\t\t\tfor(int x:ar)pw.print(x+\" \");\n\t\t\tpw.println();\n\t\t\tfor(int x:ar1)pw.print(x+\" \");\n\t\t\tpw.println();\n\t\t\tfor(int x:ar2)pw.print(x+\" \");\n\t\t}\n\t\tpw.close();\n\t}\n\n\tstatic boolean ispalin(String in) {\n\t\tStringBuilder sb = new StringBuilder(in);\n\t\tif (sb.reverse().toString().equals(in))\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tstatic void maping(String key, int val, HashMap<String, Integer> hm) {\n\t\tif (hm.containsKey(key)) {\n\t\t\tint valu = hm.get(key) + 1;\n\t\t\thm.put(key, valu);\n\t\t} else\n\t\t\thm.put(key, val);\n\t}\n\n\tstatic final Random ran = new Random();\n\n\tstatic void sort(int[] ar) {\n\t\tint n = ar.length;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint doer = ran.nextInt(n), temp = ar[doer];\n\t\t\tar[doer] = ar[i];\n\t\t\tar[i] = temp;\n\t\t}\n\t\tArrays.sort(ar);\n\t}\n\n\tstatic void sort(long[] ar) {\n\t\tint n = ar.length;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint doer = ran.nextInt(n);\n\t\t\tlong temp = ar[doer];\n\t\t\tar[doer] = ar[i];\n\t\t\tar[i] = temp;\n\t\t}\n\t\tArrays.sort(ar);\n\t}\n}\n\n\n/*0 1 2 3 4\n3 4 0 1 2\n3 0 2 4 1\n\n0 1 2 3 4 5 6 \n4 5 6 0 1 2 3\n4 6 1 3 5 0 2\n\n\n0 1 2 3\n1 0 2 3\n2 1 0 3\n3 2 1 0*/\n\n\n\n\n\n\n\t \t \t\t\t\t      \t \t \t\t  \t\t  \t\t\t \t"
}