{
    "id": 226638184,
    "contestId": 1353,
    "creationTimeSeconds": 1696440720,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1353,
        "index": "F",
        "name": "Decreasing Heights",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "brute force",
            "dp"
        ]
    },
    "author": {
        "contestId": 1353,
        "members": [
            {
                "handle": "plevande"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1589466900
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 49,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 47001600,
    "source": "import sys \r\ninput = sys.stdin.buffer.readline\r\n\r\ndef process(M):\r\n    n = len(M)\r\n    m = len(M[0])\r\n    M2 = [[[] for j in range(m)] for i in range(n)]\r\n    for i in range(n-1, -1, -1):\r\n        for j in range(m-1, -1, -1):\r\n            mij = M[i][j]\r\n            if i==n-1 and j==m-1:\r\n                M2[i][j] = [(mij, mij)]\r\n            else:\r\n                L = []\r\n                if i < n-1:\r\n                    for Sum1, Peak1 in M2[i+1][j]:\r\n                        L.append((Sum1+mij, min(Peak1-1, mij)))\r\n                if j < m-1:\r\n                    for Sum2, Peak2 in M2[i][j+1]:\r\n                        L.append((Sum2+mij, min(Peak2-1, mij)))\r\n                L.sort()\r\n                max_peak = None\r\n                for Sum, Peak in L:\r\n                    if max_peak is None or max_peak < Peak:\r\n                        M2[i][j].append((Sum, Peak))\r\n                        max_peak = Peak\r\n    i = n+m-1 \r\n    answer = float('inf')\r\n    for Sum, Peak in M2[0][0]:\r\n        answer = min(answer, Sum-i*(i-1)//2-i*Peak)\r\n    sys.stdout.write(f'{answer}\\n')\r\n    return \r\n\r\nt = int(input())\r\nfor i in range(t):\r\n    n, m = [int(x) for x in input().split()]\r\n    M = []\r\n    for j in range(n):\r\n        row = [int(x) for x in input().split()]\r\n        M.append(row)\r\n    process(M)"
}