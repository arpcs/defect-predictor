{
    "id": 76462115,
    "contestId": 392,
    "creationTimeSeconds": 1586763582,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 392,
        "index": "D",
        "name": "Three Arrays",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 392,
        "members": [
            {
                "handle": "CompuPhysics"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1392728400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 60,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 10854400,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nconst int N = 100 * 1000 + 3;\r\nconst int inf = 1e9 + 3;\r\n\r\nint n, ans;\r\nvector <int> vec;\r\nint arr[3][N], appear[3][N];\r\n\r\nstruct segmentTree {\r\n    int segMax[N << 2], segMin[N << 2], realMin[N << 2];\r\n    bool lazy[N << 2];\r\n\r\n    void update(int k, int lp, int rp, int v = 1, int L = 0, int R = n + 1) {\r\n        realMin[v] = max(realMin[v], L);\r\n        if (R <= lp || rp <= L || segMin[v] >= k)\r\n            return;\r\n\r\n        if (lp <= L && R <= rp && segMax[v] < k) {\r\n            segMax[v] = segMin[v] = k;\r\n            realMin[v] = k + L;\r\n            lazy[v] = true;\r\n            return;\r\n        }\r\n\r\n        if (lazy[v])\r\n            relax(v, L, R);\r\n\r\n        int mid = (L + R) >> 1;\r\n        update(k, lp, rp, v << 1, L, mid);\r\n        update(k, lp, rp, v << 1 | 1, mid, R);\r\n        segMax[v] = max(segMax[v << 1], segMax[v << 1 | 1]);\r\n        segMin[v] = min(segMin[v << 1], segMin[v << 1 | 1]);\r\n        realMin[v] = min(realMin[v << 1], realMin[v << 1 | 1]);\r\n        return;\r\n    }\r\n\r\n    void relax(int v, int L, int R) {\r\n        segMin[v << 1] = segMax[v << 1] = segMax[v];\r\n        segMin[v << 1 | 1] = segMax[v << 1 | 1] = segMax[v];\r\n        realMin[v << 1] = L + segMax[v];\r\n        realMin[v << 1 | 1] = (L + R) / 2 + segMax[v];\r\n\r\n        lazy[v << 1] = lazy[v << 1 | 1] = true;\r\n        lazy[v] = false;\r\n        return;\r\n    }\r\n} tree;\r\n\r\nvoid input() {\r\n    cin.tie(0);\r\n    cin >> n;\r\n\r\n    for (int i = 0; i < 3; i++)\r\n        for (int j = 1; j <= n; j++)\r\n            cin >> arr[i][j];\r\n\r\n    return;\r\n}\r\n\r\nvoid prePros() {\r\n    for (int i = 0; i < 3; i++)\r\n        for (int j = 1; j <= n; j++)\r\n            vec.push_back(arr[i][j]);\r\n\r\n    sort(vec.begin(), vec.end());\r\n    vec.resize(unique(vec.begin(), vec.end()) - vec.begin());\r\n\r\n    for (int i = 0; i < 3; i++)\r\n        for (int j = 1; j <= n; j++) {\r\n            arr[i][j] = lower_bound(vec.begin(), vec.end(), arr[i][j]) - vec.begin() + 1;\r\n\r\n            if (!appear[i][arr[i][j]])\r\n                appear[i][arr[i][j]] = j;\r\n        }\r\n\r\n    for (int i = 0; i < 3; i++)\r\n        for (int j = 0; j < vec.size(); j++)\r\n            if (!appear[i][j + 1])\r\n                appear[i][j + 1] = inf;\r\n    return;\r\n}\r\n\r\nvoid solve() {\r\n    prePros();\r\n\r\n    for (int i = 0; i < vec.size(); i++)\r\n        if (appear[0][i + 1] == inf && appear[1][i + 1] == inf)\r\n            tree.update(appear[2][i + 1], 0, n + 1);\r\n\r\n    for (int j = n - 1; j >= 0; j--)\r\n        if (appear[0][arr[1][j + 1]] == inf && appear[1][arr[1][j + 1]] == j + 1)\r\n            tree.update(appear[2][arr[1][j + 1]], 0, j + 1);\r\n\r\n    ans = tree.realMin[1] + n;\r\n    for (int u = n - 1; u >= 0; u--) {\r\n        if (appear[0][arr[0][u + 1]] == u + 1)\r\n            tree.update(appear[2][arr[0][u + 1]], 0, min(appear[1][arr[0][u + 1]], n + 1));\r\n\r\n        ans = min(ans, u + tree.realMin[1]);\r\n    }\r\n\r\n    return;\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false), cout.tie(0);\r\n    input();\r\n    solve();\r\n    cout << ans << endl;\r\n    return 0;\r\n}\r\n"
}