{
    "id": 111570264,
    "contestId": 392,
    "creationTimeSeconds": 1617202748,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 392,
        "index": "D",
        "name": "Three Arrays",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 392,
        "members": [
            {
                "handle": "rniya"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1392728400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#define LOCAL\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#pragma region Macros\r\ntypedef long long ll;\r\ntypedef __int128_t i128;\r\ntypedef unsigned int uint;\r\ntypedef unsigned long long ull;\r\n#define ALL(x) (x).begin(), (x).end()\r\n\r\ntemplate <typename T> istream& operator>>(istream& is, vector<T>& v) {\r\n    for (T& x : v) is >> x;\r\n    return is;\r\n}\r\ntemplate <typename T> ostream& operator<<(ostream& os, const vector<T>& v) {\r\n    for (int i = 0; i < (int)v.size(); i++) {\r\n        os << v[i] << (i + 1 == (int)v.size() ? \"\" : \" \");\r\n    }\r\n    return os;\r\n}\r\ntemplate <typename T, typename U> ostream& operator<<(ostream& os, const pair<T, U>& p) {\r\n    os << '(' << p.first << ',' << p.second << ')';\r\n    return os;\r\n}\r\ntemplate <typename T, typename U, typename V> ostream& operator<<(ostream& os, const tuple<T, U, V>& t) {\r\n    os << '(' << get<0>(t) << ',' << get<1>(t) << ',' << get<2>(t) << ')';\r\n    return os;\r\n}\r\ntemplate <typename T, typename U, typename V, typename W> ostream& operator<<(ostream& os, const tuple<T, U, V, W>& t) {\r\n    os << '(' << get<0>(t) << ',' << get<1>(t) << ',' << get<2>(t) << ',' << get<3>(t) << ')';\r\n    return os;\r\n}\r\ntemplate <typename T, typename U> ostream& operator<<(ostream& os, const map<T, U>& m) {\r\n    os << '{';\r\n    for (auto itr = m.begin(); itr != m.end();) {\r\n        os << '(' << itr->first << ',' << itr->second << ')';\r\n        if (++itr != m.end()) os << ',';\r\n    }\r\n    os << '}';\r\n    return os;\r\n}\r\ntemplate <typename T, typename U> ostream& operator<<(ostream& os, const unordered_map<T, U>& m) {\r\n    os << '{';\r\n    for (auto itr = m.begin(); itr != m.end();) {\r\n        os << '(' << itr->first << ',' << itr->second << ')';\r\n        if (++itr != m.end()) os << ',';\r\n    }\r\n    os << '}';\r\n    return os;\r\n}\r\ntemplate <typename T> ostream& operator<<(ostream& os, const set<T>& s) {\r\n    os << '{';\r\n    for (auto itr = s.begin(); itr != s.end();) {\r\n        os << *itr;\r\n        if (++itr != s.end()) os << ',';\r\n    }\r\n    os << '}';\r\n    return os;\r\n}\r\ntemplate <typename T> ostream& operator<<(ostream& os, const multiset<T>& s) {\r\n    os << '{';\r\n    for (auto itr = s.begin(); itr != s.end();) {\r\n        os << *itr;\r\n        if (++itr != s.end()) os << ',';\r\n    }\r\n    os << '}';\r\n    return os;\r\n}\r\ntemplate <typename T> ostream& operator<<(ostream& os, const unordered_set<T>& s) {\r\n    os << '{';\r\n    for (auto itr = s.begin(); itr != s.end();) {\r\n        os << *itr;\r\n        if (++itr != s.end()) os << ',';\r\n    }\r\n    os << '}';\r\n    return os;\r\n}\r\ntemplate <typename T> ostream& operator<<(ostream& os, const deque<T>& v) {\r\n    for (int i = 0; i < (int)v.size(); i++) {\r\n        os << v[i] << (i + 1 == (int)v.size() ? \"\" : \" \");\r\n    }\r\n    return os;\r\n}\r\n\r\nvoid debug_out() { cerr << '\\n'; }\r\ntemplate <class Head, class... Tail> void debug_out(Head&& head, Tail&&... tail) {\r\n    cerr << head;\r\n    if (sizeof...(Tail) > 0) cerr << \", \";\r\n    debug_out(move(tail)...);\r\n}\r\n#ifdef LOCAL\r\n#define debug(...)                                                                   \\\r\n    cerr << \" \";                                                                     \\\r\n    cerr << #__VA_ARGS__ << \" :[\" << __LINE__ << \":\" << __FUNCTION__ << \"]\" << '\\n'; \\\r\n    cerr << \" \";                                                                     \\\r\n    debug_out(__VA_ARGS__)\r\n#else\r\n#define debug(...) 42\r\n#endif\r\n\r\ntemplate <typename T> T gcd(T x, T y) { return y != 0 ? gcd(y, x % y) : x; }\r\ntemplate <typename T> T lcm(T x, T y) { return x / gcd(x, y) * y; }\r\n\r\ntemplate <class T1, class T2> inline bool chmin(T1& a, T2 b) {\r\n    if (a > b) {\r\n        a = b;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\ntemplate <class T1, class T2> inline bool chmax(T1& a, T2 b) {\r\n    if (a < b) {\r\n        a = b;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n#pragma endregion\r\n\r\n/**\r\n * @brief compress\r\n */\r\ntemplate <typename T> map<T, int> compress(vector<T> v) {\r\n    sort(v.begin(), v.end());\r\n    v.erase(unique(v.begin(), v.end()), v.end());\r\n    map<T, int> res;\r\n    for (int i = 0; i < v.size(); i++) res[v[i]] = i;\r\n    return res;\r\n}\r\n\r\nconst int INF = 1e9;\r\nconst long long IINF = 1e18;\r\nconst int dx[4] = {1, 0, -1, 0}, dy[4] = {0, 1, 0, -1};\r\nconst char dir[4] = {'D', 'R', 'U', 'L'};\r\nconst long long MOD = 1000000007;\r\n// const long long MOD = 998244353;\r\n\r\ntemplate <typename T> struct RectangleSet {\r\n    const T inf = numeric_limits<T>::max() / 3;\r\n    set<pair<T, T>> s;\r\n    multiset<T> val;\r\n    RectangleSet() {\r\n        s.emplace(-1, inf);\r\n        s.emplace(0, 0);\r\n        val.emplace(0);\r\n    }\r\n    void add(T x, T y) {\r\n        auto itr = s.lower_bound(make_pair(x, y));\r\n        bool flag = false;\r\n        T nx = inf, ny = inf;\r\n        while (1) {\r\n            itr = prev(itr);\r\n            if (y < itr->second) break;\r\n            flag = true;\r\n            nx = min(nx, itr->first);\r\n            ny = min(ny, itr->second);\r\n            val.erase(val.find(itr->first + itr->second));\r\n            s.erase(itr);\r\n        }\r\n        if (flag) {\r\n            s.emplace(nx, y);\r\n            val.emplace(nx + y);\r\n            s.emplace(x, ny);\r\n            val.emplace(x + ny);\r\n        }\r\n    }\r\n    T query() { return *val.begin(); }\r\n};\r\n\r\nint main() {\r\n    cin.tie(0);\r\n    ios::sync_with_stdio(false);\r\n    int n;\r\n    cin >> n;\r\n    vector<vector<int>> a(3, vector<int>(n));\r\n    cin >> a;\r\n\r\n    vector<int> val;\r\n    for (auto& v : a) {\r\n        for (int& x : v) {\r\n            val.emplace_back(x);\r\n        }\r\n    }\r\n    map<int, int> mp = compress(val);\r\n    for (auto& v : a) {\r\n        for (int& x : v) {\r\n            x = mp[x];\r\n        }\r\n    }\r\n    int sz = mp.size();\r\n\r\n    vector<vector<int>> appear(3, vector<int>(sz, INF));\r\n    for (int i = 0; i < 3; i++) {\r\n        for (int j = n - 1; j >= 0; j--) {\r\n            appear[i][a[i][j]] = j;\r\n        }\r\n    }\r\n\r\n    vector<int> cnt(sz, 0);\r\n    for (int& x : a[0]) cnt[x]++;\r\n\r\n    RectangleSet<ll> RS;\r\n    for (int i = 0; i < sz; i++) {\r\n        if (!cnt[i]) {\r\n            RS.add(appear[1][i] + 1, appear[2][i] + 1);\r\n        }\r\n    }\r\n    auto erase = [&](int x) {\r\n        int val = a[0][x];\r\n        if (--cnt[val] == 0) RS.add(appear[1][val] + 1, appear[2][val] + 1);\r\n        return true;\r\n    };\r\n\r\n    ll ans = INF;\r\n    for (int i = n; i >= 0; i--) {\r\n        ans = min(ans, i + RS.query());\r\n        if (!i) break;\r\n        if (!erase(i - 1)) break;\r\n    }\r\n\r\n    cout << ans << '\\n';\r\n    return 0;\r\n}"
}