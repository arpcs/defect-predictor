{
    "id": 118676783,
    "contestId": 1218,
    "creationTimeSeconds": 1623032763,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1218,
        "index": "B",
        "name": "Guarding warehouses",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "data structures",
            "geometry"
        ]
    },
    "author": {
        "contestId": 1218,
        "members": [
            {
                "handle": "sys."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1568554500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 11673600,
    "source": "#define y1 yy1\r\n#include <bits/stdc++.h>\r\n#undef y1\r\nusing namespace std;\r\n \r\nconst int Maxn = 100005;\r\nint n, m, ct, line_ct, ord[Maxn];\r\nvector <int> Start[Maxn], End[Maxn];\r\ndouble ans, x[Maxn], y[Maxn];\r\nvector <pair <double, double > > tmp_Ve;\r\npair <double, double> P;\r\nbool vis[Maxn];\r\nstruct line\r\n{\r\n\tdouble x1, y1, x2, y2;\r\n} L[Maxn];\r\ndouble get_dis(int a, int b)\r\n{\r\n\treturn sqrt((x[a] - x[b]) * (long long) (x[a] - x[b]) + (y[a] - y[b]) * (long long) (y[a] - y[b]));\r\n}\r\ndouble get_dis(pair <double, double> p1, pair <double, double> p2 = make_pair(0, 0))\r\n{\r\n\treturn sqrt((p1.first - p2.first) * (p1.first - p2.first) + (p1.second - p2.second) * (p1.second - p2.second));\r\n}\r\ndouble S(pair <pair <double, double>, pair <double, double> > l)\r\n{\r\n\tdouble d1 = get_dis(l.first, l.second), d2 = get_dis(l.first), d3 = get_dis(l.second);\r\n\tdouble C = (d1 + d2 + d3) / 2;\r\n\treturn sqrt(C * (C - d1) * (C - d2) * (C - d3));\r\n}\r\npair <double, double> cross(int a, pair <double, double> point = P)\r\n{\r\n\tif (L[a].x1 == L[a].x2) return make_pair(L[a].x1, point.second / (double) point.first * L[a].x1);\r\n\tpair <double, double> l1, l2, result;\r\n\tl1.first = (L[a].y2 - L[a].y1) / (double) (L[a].x2 - L[a].x1);\r\n\tl1.second = L[a].y1 - l1.first * L[a].x1;\r\n\tif (!point.first) return make_pair(0, l1.second);\r\n\tl2.first = point.second / (double) point.first;\r\n\tl2.second = point.second - l2.first * point.first;\r\n\tif (abs(l1.first - l2.first) <= 1e-11) return min(make_pair(L[a].x1, L[a].y1), make_pair(L[a].x2, L[a].y2));\r\n\tresult.first = (l2.second - l1.second) / (l1.first - l2.first);\r\n\tresult.second = l1.second + result.first * l1.first;\r\n\treturn result;\r\n}\r\nstruct cmp\r\n{\r\n\tbool operator () (const int a, const int b) const\r\n\t{\r\n\t\treturn make_pair(get_dis(cross(a)), a) < make_pair(get_dis(cross(b)), b);\r\n\t}\r\n};\r\nset <int, cmp> Se;\r\nint main()\r\n{\r\n\tscanf(\"%d\", &n);\r\n\tfor (int i = 1; i <= n; i++)\r\n\t{\r\n\t\tscanf(\"%d\", &m);\r\n\t\tfor (int j = 1; j <= m; j++)\r\n\t\t\tct++, scanf(\"%lf%lf\", &x[ct], &y[ct]), ord[ct] = ct;\r\n\t\tx[ct + 1] = x[ct - m + 1], y[ct + 1] = y[ct - m + 1];\r\n\t\tfor (int j = ct - m + 1; j <= ct; j++)\r\n\t\t{\r\n\t\t\tint k = j == ct ? ct - m + 1 : j + 1;\r\n\t\t\ttmp_Ve.push_back(make_pair(x[j], y[j]));\r\n\t\t\tL[0] = (line){x[j], y[j], x[k], y[k]};\r\n\t\t\tpair <double, double> p = cross(0, make_pair(-1, 0));\r\n\t\t\tif (p.first < 0)\r\n\t\t\t{\r\n\t\t\t\tif (y[j] <= 0 && y[k] >= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\ttmp_Ve.push_back(make_pair(p.first, -1e-11));\r\n\t\t\t\t\ttmp_Ve.push_back(make_pair(p.first, 1e-11));\r\n\t\t\t\t}\r\n\t\t\t\telse if (y[j] >= 0 && y[k] <= 0)\r\n\t\t\t\t{\r\n\t\t\t\t\ttmp_Ve.push_back(make_pair(p.first, 1e-11));\r\n\t\t\t\t\ttmp_Ve.push_back(make_pair(p.first, -1e-11));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tct -= m;\r\n\t\tm = tmp_Ve.size();\r\n\t\tfor (auto now : tmp_Ve)\r\n\t\t\tx[++ct] = now.first, y[ct] = now.second, ord[ct] = ct;\r\n\t\ttmp_Ve.clear();\r\n\t\tfor (int j = ct; j >= ct - m + 1; j--)\r\n\t\t{\r\n\t\t\tint k = j == ct ? ct - m + 1 : j + 1;\r\n\t\t\tif (abs(y[j]) + abs(y[k]) <= 1e-10)\r\n\t\t\t\tcontinue;\r\n\t\t\tif (abs(x[j]) + abs(x[k]) <= 1e-10)\r\n\t\t\t\tcontinue;\r\n\t\t\tL[++line_ct] = (line){x[j], y[j], x[k], y[k]};\r\n\t\t\tif (make_pair(atan2(y[j], x[j]), get_dis(j, 0)) < make_pair(atan2(y[k], x[k]), get_dis(k, 0)))\r\n\t\t\t{\r\n\t\t\t\tStart[j].push_back(line_ct);\r\n\t\t\t\tEnd[k].push_back(line_ct);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tStart[k].push_back(line_ct);\r\n\t\t\t\tEnd[j].push_back(line_ct);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tsort(ord + 1, ord + 1 + ct, [](int a, int b){return make_pair(atan2(y[a], x[a]), get_dis(a, 0)) < make_pair(atan2(y[b], x[b]), get_dis(b, 0));});\r\n\tfor (int i = 1; i <= ct; i++)\r\n\t{\r\n\t\tP = make_pair(x[ord[i]], y[ord[i]]);\r\n\t\tfor (auto now : Start[ord[i]])\r\n\t\t\tSe.insert(now);\r\n\t\tfor (auto now : End[ord[i]])\r\n\t\t\tvis[now] = true;\r\n\t\twhile (Se.size() && vis[*Se.begin()]) Se.erase(Se.begin());\r\n\t\twhile (Se.size() > 1 && vis[*(++Se.begin())]) Se.erase(++Se.begin());\r\n\t\tif (Se.size() > 1)\r\n\t\t{\r\n\t\t\tint l1 = *Se.begin(), l2 = *(++Se.begin());\r\n\t\t\tpair <double, double> tmp1 = cross(l2), tmp2 = cross(l1);\r\n\t\t\tpair <double, double> tmp_P = make_pair(x[ord[i + 1]], y[ord[i + 1]]);\r\n\t\t\tans += abs(S(make_pair(tmp1, cross(l2, tmp_P))) - S(make_pair(tmp2, cross(l1, tmp_P))));\r\n\t\t}\r\n\t}\r\n\tprintf(\"%.15lf\", ans);\r\n\treturn 0;\r\n}"
}