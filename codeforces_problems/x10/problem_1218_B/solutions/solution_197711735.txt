{
    "id": 197711735,
    "contestId": 1218,
    "creationTimeSeconds": 1679024089,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1218,
        "index": "B",
        "name": "Guarding warehouses",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "data structures",
            "geometry"
        ]
    },
    "author": {
        "contestId": 1218,
        "members": [
            {
                "handle": "Pray2018"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1568554500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 9728000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ninline int read(){\r\n\tint w=0,x=0;char c=getchar();\r\n\twhile(!isdigit(c))w|=c=='-',c=getchar();\r\n\twhile(isdigit(c))x=x*10+(c^48),c=getchar();\r\n\treturn w?-x:x;\r\n}\r\nnamespace star\r\n{\r\n\tconst int maxn=1e5+10;\r\n\tconst double PI=acos(-1.),eps=1e-12;\r\n\tstruct vec{\r\n\t\tdouble x,y;\r\n\t\tvec(double x=0,double y=0):x(x),y(y){}\r\n\t\tvec operator + (const vec &b) const {return vec(x+b.x,y+b.y);}\r\n\t\tvec operator - (const vec &b) const {return vec(x-b.x,y-b.y);}\r\n\t\tbool operator == (const vec &b) const {return x==b.x and y==b.y;}\r\n\t\tdouble operator * (const vec &b) const {return x*b.y-y*b.x;}\r\n\t\tinline double length(){return sqrt(x*x+y*y);}\r\n\t\tinline double dir(){return atan2(y,x);}\r\n\t}e;\r\n\tstruct seg{\r\n\t\tvec a,b;\r\n\t\tseg(){}\r\n\t\tseg(vec a,vec b):a(a),b(b){}\r\n\t\tinline vec cross(vec e=star::e) const {\r\n\t\t\tif(e.x==0) return vec(0,b.y-(b-a).y/(b-a).x*b.x);\r\n\t\t\tif(a==b) return a;\r\n\t\t\tdouble x=((b.y-a.y)*b.x-(b.x-a.x)*b.y)/(b.y-a.y-(b.x-a.x)*e.y/e.x);\r\n\t\t\treturn vec(x,x*e.y/e.x);\r\n\t\t\t\r\n\t\t}\r\n\t}a[maxn];\r\n\tstruct cmp{\r\n\t\tbool operator () (const seg &a,const seg &b) const {return a.cross().length()<b.cross().length() or a.cross(e+eps).length()<b.cross(e+eps).length();}\r\n\t};\r\n\tmultiset<seg,cmp> st;\r\n\tpair<vec,int> c[maxn];\r\n\tint n,tot;\r\n\tmultiset<seg,cmp>::iterator it[maxn];\r\n\tdouble ans;\r\n\tinline double S(vec A,vec B,vec C){\r\n\t\tdouble a=(A-B).length(),b=(B-C).length(),c=(A-C).length(),p=(a+b+c)/2;\r\n\t\tdouble ans=sqrt(p*(p-a)*(p-b)*(p-c));\r\n\t\treturn isnan(ans)?0:ans;\r\n\t}\r\n\tinline void work(){\r\n\t\tint m=read();\r\n\t\tstatic vec b[maxn];\r\n\t\te=vec(-1,0);\r\n\t\tfor(int cnt,i=1;i<=m;i++){\r\n\t\t\tfor(int j=cnt=read();j;j--) b[j].x=read(),b[j].y=read();\r\n\t\t\tb[++cnt]=b[1];\r\n\t\t\tfor(int i=1;i<cnt;i++) if(b[i].y*b[i+1].x!=b[i+1].y*b[i].x){\r\n\t\t\t\tvec x=b[i],z=b[i+1];\r\n\t\t\t\ta[++n]=seg(x,z);\r\n\t\t\t\tvec y=a[n].cross();\r\n\t\t\t\tif(y.x<0 and x.y*z.y<0){\r\n\t\t\t\t\tif(x.dir()<z.dir()) swap(x,z);\r\n\t\t\t\t\ta[n]=seg(x,y),c[++tot]=make_pair(x,n<<1),c[++tot]=make_pair(y,n<<1|1);\r\n\t\t\t\t\ta[++n]=seg(y,z),c[++tot]=make_pair(y,n<<1),c[++tot]=make_pair(z,n<<1|1);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif(x.y==0) x.y+=z.y>0?eps:-eps;\r\n\t\t\t\t\tif(z.y==0) z.y+=x.y>0?eps:-eps;\r\n\t\t\t\t\tif(x.dir()>z.dir()) swap(x,z);\r\n\t\t\t\t\ta[n]=seg(x,z),c[++tot]=make_pair(x,n<<1),c[++tot]=make_pair(z,n<<1|1);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsort(c+1,c+1+tot,[](pair<vec,int> a,pair<vec,int> b){return a.first.y==0?a.second&1^1:b.first.y==0?b.second&1:atan2(a.first.y,a.first.x)<atan2(b.first.y,b.first.x);});\r\n\t\tvec A,B,C,D;\r\n\t\tfor(int i=1;i<tot;i++){\r\n\t\t\tif(st.size()>=2){\r\n\t\t\t\tA=(*st.begin()).cross(),B=(*++st.begin()).cross();\r\n\t\t\t\te=c[i].first;\r\n\t\t\t\tC=(*st.begin()).cross(),D=(*++st.begin()).cross();\r\n\t\t\t\tans+=S(A,B,C)+S(B,C,D);\r\n\t\t\t}else e=c[i].first;\r\n\t\t\tint x=c[i].second>>1;\r\n\t\t\tif(c[i].second&1^1) it[x]=st.insert(a[x]);\r\n\t\t\telse st.erase(it[x]);\r\n\t\t}\r\n\t\tprintf(\"%.10f\",ans);\r\n\t}\r\n}\r\nsigned main(){\r\n\tstar::work();\r\n\treturn 0;\r\n}"
}