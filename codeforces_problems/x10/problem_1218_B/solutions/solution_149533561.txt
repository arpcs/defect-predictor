{
    "id": 149533561,
    "contestId": 1218,
    "creationTimeSeconds": 1647181033,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1218,
        "index": "B",
        "name": "Guarding warehouses",
        "type": "PROGRAMMING",
        "rating": 3000,
        "tags": [
            "data structures",
            "geometry"
        ]
    },
    "author": {
        "contestId": 1218,
        "members": [
            {
                "handle": "applese"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1568554500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 5324800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn = 5e4 + 5;\r\nconst double pi = acos(-1), eps = 1e-8;\r\n\r\ninline int Dcmp(double x) {\r\n\treturn x < -eps ? -1 : x > eps ? 1 : 0;\r\n}\r\n\r\nstruct Point {\r\n\tdouble x, y;\r\n\tPoint(double x = 0, double y = 0) : x(x), y(y){}\r\n\tinline void In() {\r\n\t\tscanf(\"%lf%lf\", &x, &y);\r\n\t}\r\n\tinline bool operator == (Point rhs) {\r\n\t\treturn Dcmp(x - rhs.x) == 0 && Dcmp(y - rhs.y) == 0;\r\n\t}\r\n\tinline Point operator + (Point rhs) {\r\n\t\treturn Point(x + rhs.x, y + rhs.y);\r\n\t}\r\n\tinline Point operator - (Point rhs) {\r\n\t\treturn Point(x - rhs.x, y - rhs.y);\r\n\t}\r\n\tinline Point operator * (double k) {\r\n\t\treturn Point(x * k, y * k);\r\n\t}\r\n\tinline Point operator / (double k) {\r\n\t\treturn Point(x / k, y / k);\r\n\t}\r\n\tinline double operator * (Point rhs) {\r\n\t\treturn x * rhs.x + y * rhs.y;\r\n\t}\r\n\tinline double operator ^ (Point rhs) {\r\n\t\treturn x * rhs.y - y * rhs.x;\r\n\t}\r\n\tinline double len2() {\r\n\t\treturn x * x + y * y;\r\n\t}\r\n\tinline double len() {\r\n\t\treturn sqrt(len2());\r\n\t}\r\n\tinline Point Unit() {\r\n\t\tdouble l = len();\r\n\t\treturn Point(x / l, y / l);\r\n\t}\r\n};\r\ninline double Angle(Point p) {\r\n// cerr << \"(\" << p.x << \", \" << p.y << \")\" << endl;\r\n\tPoint v = p.Unit(), vx = Point(1, 0);\r\n\tdouble s = v * vx, t = vx ^ v;\r\n// cerr << s << \" \" << t << endl;\r\n\tif(Dcmp(t) < 0)\r\n\t\ts = -2 - s;\r\n// cerr << s << endl;\r\n\treturn s;\r\n}\r\ninline Point Getv(double a) {\r\n\tint flg = 1;\r\n\tif(Dcmp(a + 1) < 0)\r\n\t\ta = -2 - a, flg = -1;\r\n\treturn Point(a, flg * sqrt(1 - a * a));\r\n}\r\ninline double PointToSegment(Point s, Point t, Point p = Point(0, 0)) {\r\n\tif(s == t)\r\n\t\treturn (p - s).len();\r\n\tPoint v1 = t - s, v2 = p - s, v3 = p - t;\r\n\tif(Dcmp(v1 * v2) < 0)\r\n\t\treturn v2.len();\r\n\tif(Dcmp(v1 * v3) > 0)\r\n\t\treturn v3.len();\r\n\treturn fabs(v1 ^ v2) / v1.len();\r\n}\r\ninline Point LineInter(Point s1, Point t1, Point s2, Point t2 = Point(0, 0)) {\r\n\tdouble a1 = (t2 - s2) ^ (s1 - s2), a2 = (t2 - s2) ^ (t1  - s2);\r\n\treturn (s1 * a2 - t1 * a1) / (a2 - a1);\r\n}\r\ninline double Area(Point a1, Point a2, Point a3) {\r\n\treturn (a2 - a1) ^ (a3 - a1);\r\n}\r\ninline double Area(Point a1, Point a2, Point a3, Point a4) {\r\n// cerr << a1.x << \" \" << a1.y << \" \" << a2.x << \" \" << a2.y << \" \" << a3.x << \" \" << a3.y << \" \" << a4.x << \" \" << a4.y << endl;\r\n\treturn fabs(Area(a1, a2, a4) + Area(a1, a4, a3)) / 2;\r\n}\r\ndouble cang;\r\ninline double Dis(Point s, Point t) {\r\n\tPoint p = Getv(cang);\r\n\treturn LineInter(s, t, p).len();\r\n}\r\nint n, tot[maxn], cnt;\r\nvector<Point>poly[maxn];\r\nvector<double>ang;\r\nvector<int>add[maxn], del[maxn];\r\nPoint seg[maxn << 1][2];\r\ndouble ans;\r\nstruct Seg {\r\n\tint id;\r\n\tSeg(int id = 0) : id(id) {}\r\n\tinline bool operator == (const Seg &rhs) const {\r\n\t\treturn id == rhs.id;\r\n\t}\r\n\tinline bool operator < (const Seg &rhs) const {\r\n\t\t// return Dcmp(PointToSegment(seg[id][0], seg[id][1]) - PointToSegment(seg[rhs.id][0], seg[rhs.id][1])) < 0;\r\n\t\tdouble d1 = Dis(seg[id][0], seg[id][1]);;\r\n\t\tdouble d2 = Dis(seg[rhs.id][0], seg[rhs.id][1]);\r\n\t\treturn Dcmp(d1 - d2) < 0 || (Dcmp(d1 - d2) == 0 && id < rhs.id);\r\n\t}\r\n};\r\nset<Seg>s;\r\nint main() {\r\n\tscanf(\"%d\", &n);\r\n\tfor(int i = 1; i <= n; ++ i) {\r\n\t\tscanf(\"%d\", &tot[i]);\r\n\t\tpoly[i].resize(tot[i]);\r\n\t\tfor(int j = 0; j < tot[i]; ++ j)\r\n\t\t\tpoly[i][j].In(), ang.push_back(Angle(poly[i][j]));\r\n\t\tpoly[i].push_back(poly[i][0]);\r\n\t}\r\n\tang.push_back(1), ang.push_back(-3);\r\n\tsort(ang.begin(), ang.end());\r\n\tang.erase(unique(ang.begin(), ang.end()), ang.end());\r\n// for(auto t : ang)\r\n// \tcerr << t << \" \";\r\n// cerr << endl;\r\n// cerr <<\"???\" << endl;\r\n\tfor(int i = 1; i <= n; ++ i) {\r\n\t\tfor(int j = 0; j < tot[i]; ++ j) {\r\n\t\t\tPoint p1 = poly[i][j], p2 = poly[i][j + 1];\r\n// cerr << i << \" \" << j << \" \" << p1.x << \" \" << p1.y << \" \" << p2.x << \" \" << p2.y << endl;\r\n\t\t\tdouble a1 = Angle(p1), a2 = Angle(p2);\r\n\t\t\tif(Dcmp(a1 - a2) == 0)\r\n\t\t\t\tcontinue;\r\n\t\t\tif(Dcmp(a1 - a2) > 0)\r\n\t\t\t\tswap(a1, a2), swap(p1, p2);\r\n \t\t\tint l = lower_bound(ang.begin(), ang.end(), a1) - ang.begin();\r\n\t\t\tint r = lower_bound(ang.begin(), ang.end(), a2) - ang.begin();\r\n\t\t\t++ cnt, seg[cnt][0] = p1, seg[cnt][1] = p2;\r\n\t\t\tif(Dcmp(a2 - a1 - 2) > 0) {\r\n\t\t\t\tif(Dcmp(1 - a2)  > 0) {\r\n\t\t\t\t\tadd[r].push_back(cnt);\r\n\t\t\t\t\tdel[ang.size() - 1].push_back(cnt);\r\n\t\t\t\t}\r\n\t\t\t\tif(Dcmp(a1 + 3) > 0) {\r\n\t\t\t\t\tadd[0].push_back(cnt);\r\n\t\t\t\t\tdel[l].push_back(cnt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tadd[l].push_back(cnt);\r\n\t\t\t\tdel[r].push_back(cnt);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(int i = 0; i < (int)ang.size() - 1; ++ i) {\r\n\t\tfor(auto id : del[i]) {\r\n\t\t\t// cerr << \"Del \" << id << \" \" << seg[id][0].x << \" \" << seg[id][0].y << \" \" << seg[id][1].x << \" \" << seg[id][1].y << endl;\r\n\t\t\ts.erase(Seg(id));\r\n\t\t}\r\n\t\tcang = (ang[i] + ang[i + 1]) / 2;\r\n\t\tfor(auto id : add[i]) {\r\n\t\t\t// cerr << \"Add \" << id << \" \" << seg[id][0].x << \" \" << seg[id][0].y << \" \" << seg[id][1].x << \" \" << seg[id][1].y << endl;\r\n\t\t\ts.insert(Seg(id));\r\n\t\t}\r\n\t\tif(s.size() >= 2) {\r\n\t\t\tauto t = s.begin();\r\n\t\t\tint s1 = (*t).id;\r\n\t\t\t++ t;\r\n\t\t\tint s2 = (*t).id;\r\n\t\t\tPoint v1 = Getv(ang[i]), v2 = Getv(ang[i + 1]);\r\n// cerr << ang[i] << \" \" << ang[i + 1] << \" \" << s1 << \" \" << s2 << \" \" << endl;\r\n// cerr << seg[s1][0].x << \" \" << seg[s1][0].y << \" \" << seg[s1][1].x << \" \" << seg[s1][1].y << endl;\r\n// cerr << seg[s2][0].x << \" \" << seg[s2][0].y << \" \" << seg[s2][1].x << \" \" << seg[s2][1].y << endl;\r\n// cerr << v1.x << \" \" << v1.y << \" \" << v2.x << \" \" << v2.y << endl;\r\n\t\t\tPoint a1 = LineInter(seg[s1][0], seg[s1][1], v1), a2 = LineInter(seg[s1][0], seg[s1][1], v2), a3 = LineInter(seg[s2][0], seg[s2][1], v1), a4 = LineInter(seg[s2][0], seg[s2][1], v2);\r\n// cerr << \"(\" << a1.x << \", \" << a1.y << \") (\" << a2.x << \", \" << a2.y << \") (\" << a3.x << \", \" << a3.y << \") (\" << a4.x << \", \" << a4.y << \")\" << endl;\r\n\t\t\tans += Area(a1, a2, a3, a4);\r\n// cerr << ans << endl;\r\n\t\t}\r\n\t}\r\n\tprintf(\"%.10f\\n\", ans);\r\n}"
}