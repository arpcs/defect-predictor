{
    "id": 207911285,
    "contestId": 846,
    "creationTimeSeconds": 1685498268,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 846,
        "index": "C",
        "name": "Four Segments",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "brute force",
            "data structures",
            "dp"
        ]
    },
    "author": {
        "contestId": 846,
        "members": [
            {
                "handle": "zdkk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504623900
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 0,
    "source": "// Problem: C. Four Segments\r\n// Contest: Codeforces - Educational Codeforces Round 28\r\n// URL: https://codeforces.com/contest/846/problem/C\r\n// Memory Limit: 256 MB\r\n// Time Limit: 1000 ms\r\n// author: zdkk\r\n\r\nimport java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Main {\r\n    static IntReader in;\r\n    static FastWriter out;\r\n    static String INPUT = \"\";\r\n\r\n\r\n    static void solve() {\r\n        int n = ni();\r\n        long[] a = new long[n + 1];\r\n        for (int i = 1; i <= n; i++) {\r\n        \ta[i] = ni();\r\n        \ta[i] += a[i - 1];\r\n        }\r\n        \r\n        long[] t2 = new long[n + 1];\r\n        int[] idx2 = new int[n + 1];\r\n        long x = Long.MIN_VALUE;\r\n        for (int i = n, idx = 0; i >= 0; i--) {\r\n        \tif (a[i] > x) {\r\n        \t\tx = a[i];\r\n        \t\tidx = i;\r\n        \t}\r\n        \tt2[i] = x;\r\n        \tidx2[i] = idx;\r\n        }\r\n        \r\n        long max = Long.MIN_VALUE;\r\n        int ra = 0, rb = 0, rc = 0;\r\n        for (int i = n; i >= 0; i--) {\r\n        \tlong t1 = Long.MIN_VALUE;\r\n        \tint idx1 = 0;\r\n\t\t\tfor (int j = i; j <= n; j++) {\r\n\t\t\t\tif (a[j] > t1) {\r\n\t\t\t\t\tt1 = a[j];\r\n\t\t\t\t\tidx1 = j;\r\n\t\t\t\t}\r\n\t\t\t\tlong t = 2 * (a[i] - t1 + t2[j]) - a[n];\r\n\t\t\t\tif (t > max) {\r\n\t\t\t\t\tmax = t;\r\n\t\t\t\t\tra = i;\r\n\t\t\t\t\trb = idx1;\r\n\t\t\t\t\trc = idx2[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n        \r\n        out.println(ra + \" \" + rb + \" \" + rc);\r\n        \r\n    }\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        in = INPUT.isEmpty() ? new IntReader(System.in) : new IntReader(new ByteArrayInputStream(INPUT.getBytes()));\r\n        out = new FastWriter(System.out);\r\n        solve();\r\n        out.flush();\r\n    }\r\n\r\n    public static class IntReader {\r\n        private InputStream is;\r\n        private byte[] inbuf = new byte[1024];\r\n        public int lenbuf = 0, ptrbuf = 0;\r\n\r\n        public IntReader(InputStream is) {\r\n            this.is = is;\r\n        }\r\n        private int readByte() {\r\n            if (lenbuf == -1) throw new InputMismatchException();\r\n            if (ptrbuf >= lenbuf) {\r\n                ptrbuf = 0;\r\n                try {\r\n                    lenbuf = is.read(inbuf);\r\n                } catch (IOException e) {\r\n                    throw new InputMismatchException();\r\n                }\r\n                if (lenbuf <= 0) return -1;\r\n            }\r\n            return inbuf[ptrbuf++];\r\n        }\r\n        private boolean isSpaceChar(int c) {\r\n            return !(c >= 33 && c <= 126);\r\n        }\r\n        private int skip() {\r\n            int b;\r\n            while ((b = readByte()) != -1 && isSpaceChar(b)) ;\r\n            return b;\r\n        }\r\n        private double nd() {\r\n            return Double.parseDouble(ns());\r\n        }\r\n        private char nc() {\r\n            return (char) skip();\r\n        }\r\n        private String ns() {\r\n            int b = skip();\r\n            StringBuilder sb = new StringBuilder();\r\n            while (!(isSpaceChar(b))) { // when nextLine, (isSpaceChar(b) && b != ' ')\r\n                sb.appendCodePoint(b);\r\n                b = readByte();\r\n            }\r\n            return sb.toString();\r\n        }\r\n        private char[] ns(int n) {\r\n            char[] buf = new char[n];\r\n            int b = skip(), p = 0;\r\n            while (p < n && !(isSpaceChar(b))) {\r\n                buf[p++] = (char) b;\r\n                b = readByte();\r\n            }\r\n            return n == p ? buf : Arrays.copyOf(buf, p);\r\n        }\r\n        private int ni() {\r\n            return (int) nl();\r\n        }\r\n        private long nl() {\r\n            long num = 0;\r\n            int b;\r\n            boolean minus = false;\r\n            while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;\r\n            if (b == '-') {\r\n                minus = true;\r\n                b = readByte();\r\n            }\r\n            while (true) {\r\n                if (b >= '0' && b <= '9') {\r\n                    num = num * 10 + (b - '0');\r\n                } else {\r\n                    return minus ? -num : num;\r\n                }\r\n                b = readByte();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static class FastWriter {\r\n        private static final int BUF_SIZE = 1 << 13;\r\n        private final byte[] buf = new byte[BUF_SIZE];\r\n        private final OutputStream out;\r\n        private int ptr = 0;\r\n\r\n        private FastWriter() {\r\n            out = null;\r\n        }\r\n        public FastWriter(OutputStream os) {\r\n            this.out = os;\r\n        }\r\n        public FastWriter(String path) {\r\n            try {\r\n                this.out = new FileOutputStream(path);\r\n            } catch (FileNotFoundException e) {\r\n                throw new RuntimeException(\"FastWriter\");\r\n            }\r\n        }\r\n        public FastWriter write(byte b) {\r\n            buf[ptr++] = b;\r\n            if (ptr == BUF_SIZE) innerflush();\r\n            return this;\r\n        }\r\n        public FastWriter write(char c) {\r\n            return write((byte) c);\r\n        }\r\n        public FastWriter write(char[] s) {\r\n            for (char c : s) {\r\n                buf[ptr++] = (byte) c;\r\n                if (ptr == BUF_SIZE) innerflush();\r\n            }\r\n            return this;\r\n        }\r\n        public FastWriter write(String s) {\r\n            s.chars().forEach(c -> {\r\n                buf[ptr++] = (byte) c;\r\n                if (ptr == BUF_SIZE) innerflush();\r\n            });\r\n            return this;\r\n        }\r\n        private static int countDigits(int l) {\r\n            if (l >= 1000000000) return 10;\r\n            if (l >= 100000000) return 9;\r\n            if (l >= 10000000) return 8;\r\n            if (l >= 1000000) return 7;\r\n            if (l >= 100000) return 6;\r\n            if (l >= 10000) return 5;\r\n            if (l >= 1000) return 4;\r\n            if (l >= 100) return 3;\r\n            if (l >= 10) return 2;\r\n            return 1;\r\n        }\r\n        public FastWriter write(int x) {\r\n            if (x == Integer.MIN_VALUE) {\r\n                return write((long) x);\r\n            }\r\n            if (ptr + 12 >= BUF_SIZE) innerflush();\r\n            if (x < 0) {\r\n                write((byte) '-');\r\n                x = -x;\r\n            }\r\n            int d = countDigits(x);\r\n            for (int i = ptr + d - 1; i >= ptr; i--) {\r\n                buf[i] = (byte) ('0' + x % 10);\r\n                x /= 10;\r\n            }\r\n            ptr += d;\r\n            return this;\r\n        }\r\n        private static int countDigits(long l) {\r\n            if (l >= 1000000000000000000L) return 19;\r\n            if (l >= 100000000000000000L) return 18;\r\n            if (l >= 10000000000000000L) return 17;\r\n            if (l >= 1000000000000000L) return 16;\r\n            if (l >= 100000000000000L) return 15;\r\n            if (l >= 10000000000000L) return 14;\r\n            if (l >= 1000000000000L) return 13;\r\n            if (l >= 100000000000L) return 12;\r\n            if (l >= 10000000000L) return 11;\r\n            if (l >= 1000000000L) return 10;\r\n            if (l >= 100000000L) return 9;\r\n            if (l >= 10000000L) return 8;\r\n            if (l >= 1000000L) return 7;\r\n            if (l >= 100000L) return 6;\r\n            if (l >= 10000L) return 5;\r\n            if (l >= 1000L) return 4;\r\n            if (l >= 100L) return 3;\r\n            if (l >= 10L) return 2;\r\n            return 1;\r\n        }\r\n        public FastWriter write(long x) {\r\n            if (x == Long.MIN_VALUE) {\r\n                return write(\"\" + x);\r\n            }\r\n            if (ptr + 21 >= BUF_SIZE) innerflush();\r\n            if (x < 0) {\r\n                write((byte) '-');\r\n                x = -x;\r\n            }\r\n            int d = countDigits(x);\r\n            for (int i = ptr + d - 1; i >= ptr; i--) {\r\n                buf[i] = (byte) ('0' + x % 10);\r\n                x /= 10;\r\n            }\r\n            ptr += d;\r\n            return this;\r\n        }\r\n        public FastWriter write(double x, int precision) {\r\n            if (x < 0) {\r\n                write('-');\r\n                x = -x;\r\n            }\r\n            x += Math.pow(10, -precision) / 2;\r\n            //\t\tif(x < 0){ x = 0; }\r\n            write((long) x).write(\".\");\r\n            x -= (long) x;\r\n            for (int i = 0; i < precision; i++) {\r\n                x *= 10;\r\n                write((char) ('0' + (int) x));\r\n                x -= (int) x;\r\n            }\r\n            return this;\r\n        }\r\n        public FastWriter writeln(char c) {\r\n            return write(c).writeln();\r\n        }\r\n        public FastWriter writeln(int x) {\r\n            return write(x).writeln();\r\n        }\r\n        public FastWriter writeln(long x) {\r\n            return write(x).writeln();\r\n        }\r\n        public FastWriter writeln(double x, int precision) {\r\n            return write(x, precision).writeln();\r\n        }\r\n        public FastWriter write(int... xs) {\r\n            boolean first = true;\r\n            for (int x : xs) {\r\n                if (!first) write(' ');\r\n                first = false;\r\n                write(x);\r\n            }\r\n            return this;\r\n        }\r\n        public FastWriter write(long... xs) {\r\n            boolean first = true;\r\n            for (long x : xs) {\r\n                if (!first) write(' ');\r\n                first = false;\r\n                write(x);\r\n            }\r\n            return this;\r\n        }\r\n        public FastWriter writeln() {\r\n            return write((byte) '\\n');\r\n        }\r\n        public FastWriter writeln(int... xs) {\r\n            return write(xs).writeln();\r\n        }\r\n        public FastWriter writeln(long... xs) {\r\n            return write(xs).writeln();\r\n        }\r\n        public FastWriter writeln(char[] line) {\r\n            return write(line).writeln();\r\n        }\r\n        public FastWriter writeln(char[]... map) {\r\n            for (char[] line : map) write(line).writeln();\r\n            return this;\r\n        }\r\n        public FastWriter writeln(String s) {\r\n            return write(s).writeln();\r\n        }\r\n        private void innerflush() {\r\n            try {\r\n                out.write(buf, 0, ptr);\r\n                ptr = 0;\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(\"innerflush\");\r\n            }\r\n        }\r\n        public void flush() {\r\n            innerflush();\r\n            try {\r\n                out.flush();\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(\"flush\");\r\n            }\r\n        }\r\n        public FastWriter print(byte b) {\r\n            return write(b);\r\n        }\r\n        public FastWriter print(char c) {\r\n            return write(c);\r\n        }\r\n        public FastWriter print(char[] s) {\r\n            return write(s);\r\n        }\r\n        public FastWriter print(String s) {\r\n            return write(s);\r\n        }\r\n        public FastWriter print(int x) {\r\n            return write(x);\r\n        }\r\n        public FastWriter print(long x) {\r\n            return write(x);\r\n        }\r\n        public FastWriter print(double x, int precision) {\r\n            return write(x, precision);\r\n        }\r\n        public FastWriter println(char c) {\r\n            return writeln(c);\r\n        }\r\n        public FastWriter println(int x) {\r\n            return writeln(x);\r\n        }\r\n        public FastWriter println(long x) {\r\n            return writeln(x);\r\n        }\r\n        public FastWriter println(double x, int precision) {\r\n            return writeln(x, precision);\r\n        }\r\n        public FastWriter print(int... xs) {\r\n            return write(xs);\r\n        }\r\n        public FastWriter print(long... xs) {\r\n            return write(xs);\r\n        }\r\n        public FastWriter println(int... xs) {\r\n            return writeln(xs);\r\n        }\r\n        public FastWriter println(long... xs) {\r\n            return writeln(xs);\r\n        }\r\n        public FastWriter println(char[] line) {\r\n            return writeln(line);\r\n        }\r\n        public FastWriter println(char[]... map) {\r\n            return writeln(map);\r\n        }\r\n        public FastWriter println(String s) {\r\n            return writeln(s);\r\n        }\r\n        public FastWriter println() {\r\n            return writeln();\r\n        }\r\n    }\r\n    static int ni() {\r\n        return in.ni();\r\n    }\r\n    static long nl() {\r\n        return in.nl();\r\n    }\r\n    static String ns() {\r\n        return in.ns();\r\n    }\r\n    static double nd() {\r\n        return Double.parseDouble(in.ns());\r\n    }\r\n}\r\n"
}