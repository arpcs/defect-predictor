{
    "id": 214239277,
    "contestId": 1025,
    "creationTimeSeconds": 1689612310,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1025,
        "index": "D",
        "name": "Recovering BST",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2100,
        "tags": [
            "brute force",
            "dp",
            "math",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1025,
        "members": [
            {
                "handle": "eskmfish"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1534685700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 81,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 6041600,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\nvector<ll> arr(710);\r\nint dp[710][710][2];\r\nint solve[710][710];\r\nll temp, aa, bb;\r\nll gcd(ll a, ll b){\r\n    temp = 0;\r\n    aa = a;\r\n    bb = b;\r\n    while(bb != 0){\r\n        temp = aa;\r\n        aa = bb;\r\n        bb = temp % bb;\r\n    }\r\n    return aa;\r\n}\r\nint main(void){\r\n    iostream::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    ll n = 0;\r\n    ll t = 0;\r\n    ll p = 0;\r\n    cin >> n;\r\n    memset(dp,0,sizeof(dp));\r\n    for(int i = 1; i <= n; i++){\r\n        cin >> arr[i];\r\n    }\r\n    for(int i = 1; i <= n; i++){\r\n        dp[i][i][0] = 1;\r\n        dp[i][i][1] = 1;\r\n        //cout << dp[i][i][0] << \" \" << dp[i][i][1] << \"___\" << endl;\r\n    }\r\n    for(int i = 1; i <= n; i++){\r\n        for(int j = i;j <= n; j++){\r\n            solve[j][i] = solve[i][j] = (gcd(arr[i],arr[j]) > 1);\r\n        }\r\n    }\r\n    for(int i = n; i >= 1; i--){\r\n        for(int j = i; j <= n; j++){\r\n            for(int k = i; k <= j; k++){\r\n                if(dp[i][k][1] == 1 && dp[k][j][0] == 1){\r\n                    if(i == 1 && j == n){\r\n                        cout << \"Yes\" << endl;\r\n                        return 0;\r\n                    }\r\n                    if(solve[k][i - 1])dp[i - 1][j][0] = 1;\r\n                    if(solve[j + 1][k])dp[i][j + 1][1] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << \"No\" << endl;\r\n    return 0;\r\n}\r\n"
}