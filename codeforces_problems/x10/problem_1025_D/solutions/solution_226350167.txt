{
    "id": 226350167,
    "contestId": 1025,
    "creationTimeSeconds": 1696278003,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1025,
        "index": "D",
        "name": "Recovering BST",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2100,
        "tags": [
            "brute force",
            "dp",
            "math",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1025,
        "members": [
            {
                "handle": "_Gawd_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1534685700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 268390400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int nmax=705;\r\nint arr[nmax];\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\tcout.tie(nullptr);\r\n    int n;\r\n\tcin>>n;\r\n    for(int i=1;i<n+1;i++)cin>>arr[i];\r\n    bool gc[n+1][n+1],chk[n+1][n+1][n+1];\r\n    // for(int i)\r\n    for(int i=1;i<n+1;i++)for(int j=i;j<n+1;j++)gc[i][j]=(__gcd(arr[i],arr[j])>1);\r\n    for(int i=1;i<n+1;i++)chk[i][i][i]=true;\r\n    for(int i=1;i<n+1;i++)for(int j=i+1;j<n+1;j++)for(int k=i;k<=j;k++)chk[i][j][k]=false;\r\n    for(int d=1;d<n;d++){\r\n        for(int left=1;left<n+1-d;left++){\r\n            int right=left+d;\r\n            // cout<<left<<\" \"<<right<<\"\\n\";\r\n            for(int root=left+1;root<=right;root++){\r\n                if(gc[left][root] && chk[left+1][right][root]){\r\n                    // res[i][j-i][k-i]=true;\r\n                    chk[left][right][left]=true;\r\n                    // cout<<\"hi\\n\";\r\n                    break;\r\n                }\r\n            }\r\n            for(int root=left+1;root<right;root++){\r\n                chk[left][right][root]=(chk[left][root][root] &  chk[root][right][root]);\r\n            }\r\n            for(int root=left;root<right;root++){\r\n                if(gc[root][right] && chk[left][right-1][root]){\r\n                    // res[i][j-i][k-i]=true;\r\n                    chk[left][right][right]=true;\r\n                    break;\r\n                }\r\n            }\r\n\t\t}\r\n    }\r\n    // for(int i=1;i<n+1;i++)cout<<chk[1][n][i]<<\" \";\r\n    // cout<<\"\\n\";\r\n    bool ans=false;\r\n    for(int i=1;i<=n;i++)if(chk[1][n][i])ans=true;\r\n\tif(ans)cout<<\"Yes\\n\";\r\n\telse cout<<\"No\\n\";\r\n}"
}