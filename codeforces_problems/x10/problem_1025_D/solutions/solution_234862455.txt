{
    "id": 234862455,
    "contestId": 1025,
    "creationTimeSeconds": 1701225533,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1025,
        "index": "D",
        "name": "Recovering BST",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2100,
        "tags": [
            "brute force",
            "dp",
            "math",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1025,
        "members": [
            {
                "handle": "vuminhthu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1534685700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 2048000,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint n, a[705];\r\n\r\nbool dp[705][705][3], danhdau[705][705];\r\n\r\nint ucln(int a, int b){\r\n    if(b == 0) return a;\r\n    return ucln(b, a % b);\r\n}\r\n\r\nsigned main(){\r\n    ios_base :: sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    cin >> n;\r\n    memset(dp, -1, sizeof(dp));\r\n    //memset(danhdau, -1, sizeof(danhdau));\r\n    for(int i = 1; i <= n; i++){\r\n        cin >> a[i];\r\n        dp[i][i][0] = dp[i][i][1] = 1;\r\n        for(int j = 1; j <= i - 1; j++){\r\n            if(ucln(a[i], a[j]) > 1) danhdau[i][j] = danhdau[j][i] = 1;\r\n            if(i > 1) dp[i - 1][i][1] = dp[i - 1][i][0] = danhdau[i - 1][i];\r\n        }\r\n    }\r\n    for(int i = 2; i <= n; i++){\r\n        for(int l = 1; l <= n - i + 1; l++){\r\n            int r = l + i - 1;\r\n            for(int k = l; k <= r; k++){\r\n                if(dp[l][k][0] && dp[k][r][1]){\r\n                    if(i == n){\r\n                        cout << \"YES\";\r\n                        return 0;\r\n                    }\r\n                    if(danhdau[l - 1][k]) dp[l - 1][r][1] = 1;\r\n                    if(danhdau[k][r + 1]) dp[l][r + 1][0] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << \"NO\";\r\n    return 0;\r\n}\r\n"
}