{
    "id": 236410562,
    "contestId": 253,
    "creationTimeSeconds": 1702061334,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 253,
        "index": "E",
        "name": "Printer",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "data structures",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 253,
        "members": [
            {
                "handle": "pasha.shabashoff"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1354960800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 2026,
    "memoryConsumedBytes": 7782400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n#ifdef LOCAL\r\n\tfreopen(\"input.txt\", \"r\", stdin);\r\n#endif\r\n\r\n#ifndef LOCAL\r\n\tfreopen(\"input.txt\", \"r\", stdin);\r\n\tfreopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n\r\n\tint n;\r\n\tcin >> n;\r\n\r\n\tpair<int, int> toInsert = {-1, -1};\r\n\tmap<int, int> us;\r\n\t// t s p\r\n\tvector<pair<int, pair<int, int>>> s;\r\n\tvector<int> prior(n);\r\n\r\n\tfor (int i = 0; i < n; i++) { \r\n\t\tint t, m, p;\r\n\t\tcin >> t >> m >> p;\r\n\t\tprior[i] = p;\r\n\t\tus[p] = 1;\r\n\t\tif (p == -1) toInsert = {t, m};\r\n\t\telse s.push_back({t, {p, m}});\r\n\t}\r\n\r\n\tint finish;\r\n\tcin >> finish;\r\n\r\n\tint l = 0;\r\n\tint r = 1e9 + 1;\r\n\r\n\twhile (r - l > 1) {\r\n\t\tint x = (l + r) / 2;\r\n\t\tif (us[x]) {\r\n\t\t\t--x;\r\n\t\t}\r\n\t\tvector<pair<int, pair<int, int>>> curq;\r\n\t\tcurq = s;\r\n\t\tcurq.push_back({toInsert.first, {x, toInsert.second}});\r\n\t\tsort(curq.begin(), curq.end());\r\n\t\tint evcnt = 0;\r\n\t\tset<pair<int, int>, greater<pair<int, int>>> q;\r\n\t\t\r\n\t\tmap<int, int> out;\r\n\r\n\t\twhile (evcnt < curq.size() - 1) {\r\n\t\t\tq.insert({curq[evcnt].second.first, curq[evcnt].second.second});\r\n\t\t\tif (curq[evcnt].second.first == 7) cout << \"e rt\" << endl;\r\n\t\t\tpair<int, int> el = *q.begin();\r\n\t\t\tint curtime = curq[evcnt].first;\r\n\t\t\twhile (!q.empty() && (*q.begin()).second <= curq[evcnt + 1].first - curtime) {\r\n\t\t\t\tpair<int, int> head = *q.begin();\r\n\t\t\t\tif (head.first == 7) cout << \"er \" << endl;\r\n\t\t\t\tcurtime += head.second;\r\n\t\t\t\tout[head.first] = curtime;\r\n\t\t\t\tq.erase(q.begin());\r\n\t\t\t}\r\n\t\t\tif (!q.empty() && curtime != curq[evcnt + 1].first) {\r\n\t\t\t\tpair<int, int> head = *q.begin();\r\n\t\t\t\tq.insert({head.first, head.second - (curq[evcnt + 1].first - curtime)});\r\n\t\t\t\tif (head.first == 7) cout << \"er\" << endl;\r\n\t\t\t\tq.erase(q.begin());\r\n\t\t\t}\r\n\t\t\t++evcnt;\r\n\t\t}\r\n\r\n\t\tq.insert({curq[evcnt].second.first, curq[evcnt].second.second});\r\n\t\tif (curq[evcnt].second.first == 7) cout << \"e \" << curq[evcnt].second.second << endl;\r\n\t\tint curt = curq[evcnt].first;\r\n\r\n\t\twhile (!q.empty()) {\r\n\t\t\tpair<int, int> head = *q.begin();\r\n\t\t\tif (head.first == x) {\r\n\t\t\t\tif (x == 7) {\r\n\t\t\t\t\tcout << curt << \" \" << head.second << endl;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout[head.first] = curt + head.second;\r\n\t\t\tcurt += head.second;\r\n\t\t\tq.erase(q.begin());\r\n\t\t}\r\n\r\n\t\tif (out[x] < finish) {\r\n\t\t\t//cout << x << endl;\r\n\t\t\tr = x;\r\n\t\t} else if (out[x] > finish) {\r\n\t\t\tl = x;\r\n\t\t} else {\r\n\t\t\tcout << x << endl;\r\n\t\t\tfor (int i = 0; i < n; ++i) {\r\n\t\t\t\tif (prior[i] != -1) cout << out[prior[i]] << \" \";\r\n\t\t\t\telse cout << out[x] << \" \";\r\n\t\t\t}\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\treturn 0;\r\n}"
}