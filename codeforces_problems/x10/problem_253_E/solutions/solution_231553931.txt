{
    "id": 231553931,
    "contestId": 253,
    "creationTimeSeconds": 1699257821,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 253,
        "index": "E",
        "name": "Printer",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "data structures",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 253,
        "members": [
            {
                "handle": "Rhubarb_dog"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1354960800
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 19353600,
    "source": "#include<bits/stdc++.h>\r\n\r\ntypedef long long ll;\r\nusing namespace std;\r\nconst int N = 5e4 + 500;\r\n\r\nint n, id, tot;\r\nll vt[N], T, ans[N]; \r\n\r\nstruct node{\r\n    ll t, s, q; int id; \r\n    bool operator<(const node b) const {\r\n        return q < b.q;\r\n    }\r\n} pt[N], nq[N], sp[N];\r\n\r\nbool check(ll x) {\r\n    for(int i = 1; i <= n; ++i) sp[i] = nq[i];\r\n    sp[id].q = x;\r\n    sort(sp + 1, sp + n + 1, [](node a, node b){return a.t < b.t;});\r\n    int st = 1; ll t = 0, pvz = 1e16;\r\n    priority_queue<node>Q;\r\n    t = sp[st].t; Q.push(sp[1]), st++;\r\n    while(t <= x) {\r\n        node u = Q.top();\r\n        Q.pop();\r\n        ll dis_1 = u.s;\r\n        ll dis_2 = sp[st].t - t;\r\n        if(dis_1 < dis_2) {\r\n            t += dis_1;\r\n            if(u.id == id) {pvz = t; break;} \r\n        } else if(dis_1 > dis_2) {\r\n            t += dis_2;\r\n            u.s -= dis_2;\r\n            Q.push(u);\r\n            Q.push(sp[st++]);\r\n        } else {\r\n            t += dis_2;\r\n            if(u.id == id) {pvz = t; break;} \r\n            Q.push(sp[st++]);\r\n        }\r\n    } \r\n    return pvz <= T;\r\n}\r\n\r\nvoid spfa(int x) {\r\n    for(int i = 1; i <= n; ++i) sp[i] = nq[i];\r\n    sp[id].q = x;\r\n    sort(sp + 1, sp + n + 1, [](node a, node b){return a.t < b.t;});\r\n    priority_queue<node>Q;\r\n    int st = 1, cnt = 0; \r\n    ll t = 0, pvz = 1e16;\r\n    t = sp[st++].t; Q.push(sp[1]);\r\n    while(cnt <= n) { \r\n        node u = Q.top();\r\n        Q.pop();\r\n        ll dis_1 = u.s;\r\n        ll dis_2 = sp[st].t - t;\r\n        if(dis_1 < dis_2) {\r\n            t += dis_1;\r\n            ans[u.id] = t;\r\n            cnt++;\r\n        } else if(dis_1 > dis_2) {\r\n            t += dis_2;\r\n            u.s -= dis_2;\r\n            Q.push(u);\r\n            Q.push(sp[st++]);\r\n        } else {\r\n            t += dis_2;\r\n            ans[u.id] = t;\r\n            Q.push(sp[st++]);\r\n            cnt++;\r\n        }\r\n    } \r\n}\r\n\r\nint main() {   \r\n    freopen(\"input.txt\",\"r\",stdin);\r\n    freopen(\"output.txt\",\"w\",stdout);\r\n\r\n    ios::sync_with_stdio(0);\r\n    cin >> n;\r\n    for(int i = 1; i <= n; ++i) {\r\n        cin >> pt[i].t >> pt[i].s >> pt[i].q;\r\n        pt[i].id = i;\r\n        nq[i] = pt[i];\r\n        if(pt[i].q == -1) id = i;\r\n    }\r\n    cin >> T;\r\n    sort(pt + 1, pt + n + 1);\r\n    if(pt[2].q != 1) vt[++tot] = 1;\r\n    for(int i = 3; i <= n; ++i) {\r\n        if(pt[i].q - pt[i - 1].q > 1) vt[++tot] = pt[i - 1].q + 1;\r\n    }\r\n    if(pt[n].q != 1e9) vt[++tot] = pt[n].q + 1;\r\n    //for(int i = 1; i <= tot; ++i) cout << vt[i] << \" \"; cout << \"\\n qwq\";\r\n    int l = 1, r = tot;\r\n    while(l < r) {\r\n        int mid = l + r + 1 >> 1;\r\n        if(check(vt[mid])) l = mid; \r\n        else r = mid - 1;\r\n    }\r\n    cout << vt[l] << \"\\n\";\r\n    spfa(vt[l]);\r\n    for(int i = 1; i <= n; ++i) cout << ans[i] << \" \";\r\n    return 0;\r\n}"
}