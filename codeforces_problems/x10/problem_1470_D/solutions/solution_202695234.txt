{
    "id": 202695234,
    "contestId": 1470,
    "creationTimeSeconds": 1681900631,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1470,
        "index": "D",
        "name": "Strange Housing",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graph matchings",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1470,
        "members": [
            {
                "handle": "mailo102"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1609857300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 624,
    "memoryConsumedBytes": 28057600,
    "source": "#include <iostream>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <vector>\n#include <string>\n#include <unordered_set>\n#include <unordered_map>\n#include <stdlib.h>\n\nusing namespace std;\n\n#define ll long long\n#define f first\n#define s second\n#define mp make_pair\n#define pb push_back\n#define forn(i, n) for (int i = 0; i < n; i++)\n#define from(i,j,n) for (int i = j; i < n; i++)\n\nll INF = 1e18;\nll MOD = 998244353;\nvector<ll> fact(3e5 + 5, 1);\nvector<ll> fenwick;\n\nvoid update(int pos, ll val) { // val- what we add\n  for (int i = pos; i < fenwick.size(); i = ((i - 1) | i) + 1) {\n    fenwick[i] += val;\n  }\n}\n\nll sum(int pos) {\n  ll result=0;\n  for (int i = pos; i > 0; i = i & (i - 1))\n    result += fenwick[i];\n  return result;\n}\n\nll range_sum(int l, int r) { // (l, r]\n  return sum(r) - sum(l);\n}\n\nvoid fill_fact() {\n  for (int i = 2; i < fact.size(); i++)\n    fact[i] = (fact[i - 1] * i) % MOD;\n}\n\nll pow(ll a, ll b) {\n  if (b == 0) {\n    return 1;\n  } else if (b % 2 == 0) {\n    ll x = pow(a, b / 2);\n    return x * x;\n  } else {\n    return a * pow(a, b - 1);\n  }\n}\n\nll pow_mod(ll a, ll b) {\n  if (b == 0) {\n    return 1;\n  } else if (b % 2 == 0) {\n    ll x = pow_mod(a, b / 2) % MOD;\n    return (x * x) % MOD;\n  } else {\n    return (a * pow_mod(a, b - 1)) % MOD;\n  }\n}\n\nll cnk(ll n, ll k) {\n  ll n_fact = fact[n];\n  ll k_fact = fact[k];\n  ll nk_fact = fact[n - k];\n  ll down = (k_fact * nk_fact) % MOD;\n  ll up = pow_mod(down, MOD - 2);\n  return (n_fact * up) % MOD;\n}\n\nvoid dfs(int v, const vector<vector<ll>>& graph, vector<ll>& color) {\n  if (color[v] != -1)\n    return;\n  ll ones = 0;\n  for (auto&& to : graph[v]) {\n    if (color[to] == 1) {\n      ones++;\n    }\n  }\n  color[v] = ones ? 0 : 1;\n  for (auto&& to : graph[v]) {\n    dfs(to, graph, color);\n  }\n}\n\nvoid dfs2(int v, const vector<vector<ll>>& graph, vector<ll>& color) {\n  //cout << \"DEBUG: \" << v + 1 << endl;\n  color[v] = 1;\n  for (auto to : graph[v]) {\n    color[to] = 0;\n  }\n  for (auto to : graph[v]) {\n    for (auto toto : graph[to]) {\n      if (color[toto] == -1) {\n        dfs2(toto, graph, color);\n      }\n    }\n  }\n}\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n  int t;\n  cin >> t;\n  while (t--) {\n    int n, m;\n    cin >> n >> m;\n    vector<ll> color(n, -1), answer;\n    vector<vector<ll>> graph(n);\n    forn(i, m) {\n      int u, v;\n      cin >> u >> v;\n      graph[u - 1].pb(v - 1);\n      graph[v - 1].pb(u - 1);\n    }\n    dfs2(0, graph, color);\n    bool flag = true;\n    forn(i, n) {\n      if (color[i] == -1) {\n        flag = false;\n      }\n      if (color[i] == 1) {\n        answer.pb(i);\n      }      \n    }\n    if (!flag) {\n      cout << \"NO\\n\";\n    } else {\n      cout << \"YES\\n\";\n      cout << answer.size() << endl;\n      forn(i, answer.size()) {\n        cout << answer[i]+1 << \" \";\n      }\n      cout << endl;\n    }\n    \n  }\n  return 0;\n}\n"
}