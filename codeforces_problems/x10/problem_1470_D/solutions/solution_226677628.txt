{
    "id": 226677628,
    "contestId": 1470,
    "creationTimeSeconds": 1696476702,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1470,
        "index": "D",
        "name": "Strange Housing",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graph matchings",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1470,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1609857300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 623,
    "memoryConsumedBytes": 11980800,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\nconst int N = 3e5 + 5;\n\nint T, n, m, ans;\nvector<int> e[N];\nbool vis[N], black[N];\n\nvoid dfs(int u) {\n\tif (vis[u]) return;\n\tvis[u] = true;\n\tfor (const auto &v : e[u])\n\t\tif (black[v]) {\n\t\t\tgoto End;\n\t\t}\n\tans++;\n\tblack[u] = 1;\n\tEnd:;\n\tfor (const auto &v : e[u])\n\t\tdfs(v);\n}\nsigned main() {\n#ifndef ONLINE_JUDGE\n\tfreopen(\"1.in\", \"r\", stdin);\n\tfreopen(\"1.out\", \"w\", stdout);\n#endif\n\tios::sync_with_stdio(0);\n\tcin.tie(0);\n\tcout.tie(0);\n\tcin >> T;\n\twhile (T--) {\n\t\tcin >> n >> m;\n\t\tfor (int i = 1; i <= n; i++) e[i].clear(), vis[i] = black[i] = false;\n\t\tans = 0;\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tint u, v;\n\t\t\tcin >> u >> v;\n\t\t\te[u].push_back(v);\n\t\t\te[v].push_back(u);\n\t\t}\n\t\tdfs(1);\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (!vis[i]) {\n\t\t\t\tcout << \"NO\" << endl;\n\t\t\t\tgoto end;\n\t\t\t}\n\t\tcout << \"YES\" << endl << ans << endl;\n\t\tfor (int i = 1; i <= n; i++)\n\t\t\tif (black[i]) cout << i << \" \";\n\t\tcout << endl;\n\t\tend:;\n\t}\n\treturn 0;\n}\n \t \t \t  \t\t\t\t  \t \t \t  \t \t    \t"
}