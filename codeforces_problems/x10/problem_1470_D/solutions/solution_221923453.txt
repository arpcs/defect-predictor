{
    "id": 221923453,
    "contestId": 1470,
    "creationTimeSeconds": 1693912704,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1470,
        "index": "D",
        "name": "Strange Housing",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graph matchings",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1470,
        "members": [
            {
                "handle": "kazimiyuuka"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1609857300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <string.h>\r\n#include <string>\r\n#include <vector>\r\n#include <unordered_map>\r\n#include <stack>\r\n#include <queue>\r\n#include <set>\r\n#include <numeric>\r\n#include <map>\r\n#include <unordered_set>\r\n#include <stdlib.h>\r\n#include <functional>\r\n#include <climits>\r\n#include <cmath>\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\n\r\nclass UnionFind {\r\npublic:\r\n\tUnionFind(int n)\r\n\t\t:parent(n + 1)\r\n\t{\r\n\t\tiota(parent.begin(), parent.end(), 0);\r\n\t}\r\n\r\n\tvoid connect(int i, int j) {\r\n\t\tparent[getParent(i)] = getParent(j);\r\n\t}\r\n\r\n\tbool isConnect(int i, int j) { return getParent(i) == getParent(j); }\r\n\tint getParent(int x) {\r\n\t\tif (x != parent[x]) parent[x] = getParent(parent[x]);\r\n\t\treturn parent[x];\r\n\t}\r\n\r\n\tvector<int> parent;\r\n};\r\nvoid slove() {\r\n\tint n, m;\r\n\tcin >> n >> m;\r\n\r\n\tUnionFind uf(n);\r\n\r\n\tvector<vector<int>> edges(n + 1);\r\n\tvector<int> del(n + 1);\r\n\tvector<int> col(n + 1,0);\r\n\tvector<int> ord(n + 1);\r\n\r\n\tint pos = 1;\r\n\r\n\tfor (int i = 1, u, v; i <= m; i++) {\r\n\t\tcin >> u >> v;\r\n\t\tuf.connect(u,v);\r\n\t\tedges[u].push_back(v);\r\n\t\tedges[v].push_back(u);\r\n\t}\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tif (!uf.isConnect(1, i)) {\r\n\t\t\tcout << \"NO\\n\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tfunction<void(int, int , int state)> dfs = [&](int node, int fa ,int state) {\r\n\r\n\t\tord[node] = pos++;\r\n\t\tcol[node] = state;\r\n\r\n\t\tfor (auto nx : edges[node]) {\r\n\t\t\tif (nx == fa || del[nx]) continue;\r\n\r\n\t\t\tif (ord[nx] && col[nx] == col[node]) {\r\n\t\t\t\tdel[node] = 1;\r\n\t\t\t\tord[node] = 0;\r\n\t\t\t\tpos--;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor (auto nx : edges[node]) {\r\n\t\t\tif (nx == fa || del[nx]) continue;\r\n\r\n\t\t\tif (col[nx]) continue;\r\n\r\n\t\t\tdfs(nx, node, state == 1 ? 2 : 1);\r\n\t\t}\r\n\r\n\t\tord[node] = 0;\r\n\t\tpos--;\r\n\t};\r\n\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tif (!col[i]) dfs(i, -1, 1);\r\n\t}\r\n\r\n    // \u8f93\u51fa\u7b54\u6848\r\n\tvector<int> ans = {};\r\n\tans.reserve(n + 1);\r\n\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tif (col[i] == 1 && !del[i]) ans.push_back(i);\r\n\t}\r\n\r\n\tcout << \"YES\\n\";\r\n\tcout << ans.size() << \"\\n\";\r\n\tfor (auto num : ans) cout << num << \" \";\r\n\tcout << \"\\n\";\r\n}\r\n\r\nint main() {\r\n\t//freopen(\"in.in\", \"r\", stdin);\r\n\t//freopen(\"out.txt\", \"w\", stdout);\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n\r\n\tint cnt = 1;\r\n\tcin >> cnt;\r\n\twhile (cnt--) {\r\n\t\tslove();\r\n\t}\r\n}"
}