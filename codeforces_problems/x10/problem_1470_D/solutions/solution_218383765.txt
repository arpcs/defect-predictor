{
    "id": 218383765,
    "contestId": 1470,
    "creationTimeSeconds": 1691774909,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1470,
        "index": "D",
        "name": "Strange Housing",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graph matchings",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1470,
        "members": [
            {
                "handle": "shmax_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1609857300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/*\r\n * powered by ANDRIY POPYK\r\n * in honor of DASHA LOBAS and SEGMENT DECOMPOSITION and N^(log(N))\r\n*/\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\n//#pragma GCC optimize(\"O3\")\r\n//#pragma GCC target(\"avx,avx2,fma\")\r\n//#pragma GCC optimization (\"unroll-loops\")\r\n//#pragma GCC target(\"avx,avx2,sse,sse2,sse3,sse4,popcnt\")\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n#define int long long\r\n#define float long double\r\n#define elif else if\r\n#define endl \"\\n\"\r\n#define mod 1000000007\r\n#define pi acos(-1)\r\n#define eps 0.000000001\r\n#define inf 1000000000000\r\n#define FIXED(a) cout << fixed << setprecision(a)\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define time_init auto start = std::chrono::high_resolution_clock::now()\r\n#define time_report                                       \\\r\n    auto end = std::chrono::high_resolution_clock::now(); \\\r\n    std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << \" ms\" << endl\r\n#define debug(x) \\\r\n    { cerr << #x << \" = \" << x << endl; }\r\n#define len(x) (int) x.size()\r\n#define sqr(x) ((x) * (x))\r\n#define cube(x) ((x) * (x) * (x))\r\n#define bit(x, i) (((x) >> (i)) & 1)\r\n#define set_bit(x, i) ((x) | (1LL << (i)))\r\n#define clear_bit(x, i) ((x) & (~(1LL << (i))))\r\n#define toggle_bit(x, i) ((x) ^ (1LL << (i)))\r\n#define low_bit(x) ((x) & (-(x)))\r\n#define count_bit(x) __builtin_popcountll(x)\r\n#define srt(x) sort(all(x))\r\n#define rsrt(x) sort(rall(x))\r\n\r\ntemplate<typename T>\r\nusing min_heap = priority_queue<T, vector<T>, greater<T>>;\r\ntemplate<typename T>\r\nusing max_heap = priority_queue<T, vector<T>, less<T>>;\r\ntemplate<typename T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<typename T>\r\nusing ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<typename T>\r\nusing matrix = vector<vector<T>>;\r\ntemplate<typename T>\r\nusing graph = vector<vector<T>>;\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\ntemplate<typename T>\r\nvector<T> vect(int n, T val) {\r\n    return vector<T>(n, val);\r\n}\r\n\r\ntemplate<typename T>\r\nvector<vector<T>> vect(int n, int m, T val) {\r\n    return vector<vector<T>>(n, vector<T>(m, val));\r\n}\r\n\r\ntemplate<typename T>\r\nvector<vector<vector<T>>> vect(int n, int m, int k, T val) {\r\n    return vector<vector<vector<T>>>(n, vector<vector<T>>(m, vector<T>(k, val)));\r\n}\r\n\r\ntemplate<typename T>\r\nvector<vector<vector<vector<T>>>> vect(int n, int m, int k, int l, T val) {\r\n    return vector<vector<vector<vector<T>>>>(n, vector<vector<vector<T>>>(m, vector<vector<T>>(k, vector<T>(l, val))));\r\n}\r\n\r\n\r\ntemplate<typename T>\r\nmatrix<T> new_matrix(int n, int m, T val) {\r\n    return matrix<T>(n, vector<T>(m, val));\r\n}\r\n\r\ntemplate<typename T>\r\ngraph<T> new_graph(int n) {\r\n    return graph<T>(n);\r\n}\r\nvector<int> was;\r\ngraph<int> g;\r\n\r\nvoid dfs(int v) {\r\n    int t = was[v];\r\n    if (t == 1) {\r\n        set<int> togo;\r\n        for (int u: g[v]) {\r\n            if (was[u] == -1)\r\n                togo.insert(u), was[u] = 0;\r\n        }\r\n        for (auto u: togo) {\r\n            dfs(u);\r\n        }\r\n    } else {\r\n        for (int u: g[v]) {\r\n            was[u] = 1;\r\n            dfs(u);\r\n            break;\r\n        }\r\n        for (int u: g[v]) {\r\n            if (was[u] == -1)\r\n                dfs(u);\r\n        }\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    was = vect(n + 1, -1LL);\r\n    g = new_graph<int>(n + 1);\r\n    was[0] = 1;\r\n    for (int i = 0; i < m; ++i) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        g[u].push_back(v);\r\n        g[v].push_back(u);\r\n    }\r\n    was[1] = 0;\r\n    dfs(1);\r\n    for (int i = 1; i <= n; i++) {\r\n        if (was[i] == -1) {\r\n            cout << \"No\" << endl;\r\n            return;\r\n        }\r\n    };\r\n    set<int> olders;\r\n    for (int i = 1; i <= n; i++) {\r\n        if (was[i] == 1) {\r\n            olders.insert(i);\r\n        }\r\n    }\r\n    cout << \"Yes\" << endl;\r\n    cout << olders.size() << endl;\r\n    for (int i: olders) {\r\n        cout << i << \" \";\r\n    }\r\n    cout << endl;\r\n}\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    int q;\r\n    cin >> q;\r\n    while (q--)\r\n        solve();\r\n}"
}