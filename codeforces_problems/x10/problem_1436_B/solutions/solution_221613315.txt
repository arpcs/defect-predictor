{
    "id": 221613315,
    "contestId": 1436,
    "creationTimeSeconds": 1693688754,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1436,
        "index": "B",
        "name": "Prime Square",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "constructive algorithms",
            "math"
        ]
    },
    "author": {
        "contestId": 1436,
        "members": [
            {
                "handle": "1936557"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603548300
    },
    "programmingLanguage": "Haskell",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 17,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "import Control.Monad\r\nimport Data.Char\r\nimport Data.Bits\r\nimport Data.List\r\nimport Data.Function (on)\r\nimport Data.Ord (comparing)\r\nimport Data.Maybe (fromJust, isNothing)\r\n\r\nimport qualified Data.Set          as Set\r\nimport qualified Data.Map.Strict   as Map\r\nimport qualified Data.Array        as Array\r\n\r\n-- (\u00ac\u203f\u00ac)\r\nmain = do\r\n  t <- readLn :: IO Int\r\n  replicateM_ t $ do \r\n    n <- readLn :: IO Int \r\n    let r =  myfun n\r\n    mapM_ (\\ list -> putStrLn $ unwords . map show $ list) r\r\n    return ()\r\n\r\nmyfun n \r\n  | even n  = a ++ reverse a\r\n  | odd  n  = b ++ reverse a\r\n  where \r\n    a = myfunEven n 0\r\n    b = myfunOdd n 0\r\n\r\nmyfunOdd :: Num a => Int -> Int -> [[a]]\r\nmyfunOdd n i\r\n  | i == b       = [(replicate b 0) ++ [1, 1] ++ replicate (b - 1) 0]\r\n  | i == (b - 1) = (replicate i 0 ++ [1, 1, 1] ++ replicate i 0) : myfunOdd n (succ i)\r\n  | otherwise    = a : myfunOdd n (succ i)\r\n  where \r\n    a = replicate i 0 ++ [1] ++ replicate (n - (i * 2) - 2) 0 ++ [1] ++ replicate i 0\r\n    b = n `div` 2\r\n\r\nmyfunEven :: Num a => Int -> Int -> [[a]]\r\nmyfunEven n i\r\n  | i == (n `div` 2)    = []\r\n  | otherwise = a : myfunEven n (succ i)\r\n  where \r\n    a = replicate i 0 ++ [1] ++ replicate (n - (i * 2) - 2) 0 ++ [1] ++ replicate i 0\r\n"
}