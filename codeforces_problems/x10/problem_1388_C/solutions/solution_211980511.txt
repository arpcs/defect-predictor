{
    "id": 211980511,
    "contestId": 1388,
    "creationTimeSeconds": 1688404079,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1388,
        "index": "C",
        "name": "Uncle Bogdan and Country Happiness",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "dfs and similar",
            "greedy",
            "math",
            "trees"
        ]
    },
    "author": {
        "contestId": 1388,
        "members": [
            {
                "handle": "tHeQuiEtWoLf"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1596119700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 936,
    "memoryConsumedBytes": 13107200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long int\r\nll p[100001];\r\nll h[100001];\r\nvector<vector<ll>>adj(100001);\r\nvector<bool>visited(100001);\r\nll dp[100001];\r\nll good[100001];\r\nll bad[100001];\r\nll dp_good[100001];\r\nll dp_bad[100001];\r\nbool correctness;\r\nvoid dfs(ll c){\r\nvisited[c]=1; dp[c]=p[c];\r\nfor(auto i:adj[c]){\r\n    if(!visited[i]){\r\n        dfs(i);\r\n        dp[c]+=dp[i];\r\n    }\r\n}\r\n}\r\nvoid dfs2(ll c){\r\nvisited[c]=1;\r\nfor(auto i:adj[c]){\r\n    if(!visited[i]){\r\n        dfs2(i);\r\n        dp_good[c]+=good[i];\r\n        dp_bad[c]+=bad[i];\r\n    }\r\n}\r\nif(dp[c]-dp_bad[c]-dp_good[c]!=p[c]){\r\n    correctness=false;\r\n}\r\nelse if(good[c]<dp_good[c]){\r\n    correctness=false;\r\n}\r\n}\r\nint main(){\r\nll t; cin>>t;\r\nwhile(t--){\r\n    ll n,m; cin>>n>>m;\r\n    for(ll i=1;i<=n;i++){\r\n        adj[i].clear(); visited[i]=0; dp[i]=0;\r\n        good[i]=0; bad[i]=0;\r\n        dp_good[i]=0; dp_bad[i]=0;\r\n    }\r\n    for(ll i=1;i<=n;i++){\r\n        cin>>p[i];\r\n    }\r\n    for(ll i=1;i<=n;i++){\r\n        cin>>h[i];\r\n    }\r\n    for(ll i=1;i<=n-1;i++){\r\n        ll x,y; cin>>x>>y;\r\n        adj[x].push_back(y);\r\n        adj[y].push_back(x);\r\n    }\r\n    dfs(1);\r\n    ll flag=1;\r\n    for(ll i=1;i<=n;i++){\r\n        good[i]=(dp[i]+h[i])/2;\r\n        bad[i]=(dp[i]-h[i])/2;\r\n        if(abs(h[i])>dp[i]){\r\n            flag=0; break;\r\n        }\r\n        else if((dp[i]+h[i])%2==1){\r\n            flag=0; break;\r\n        }\r\n    }\r\n    if(flag==0){\r\n        cout<<\"NO\"<<endl; continue;\r\n    }\r\n    visited.assign(n+1,0);\r\n    correctness=true;\r\n    dfs2(1);\r\n    if(correctness) cout<<\"YES\"<<endl;\r\n    else cout<<\"NO\"<<endl;\r\n}\r\n}\r\n"
}