{
    "id": 206975212,
    "contestId": 1388,
    "creationTimeSeconds": 1684862847,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1388,
        "index": "C",
        "name": "Uncle Bogdan and Country Happiness",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "dfs and similar",
            "greedy",
            "math",
            "trees"
        ]
    },
    "author": {
        "contestId": 1388,
        "members": [
            {
                "handle": "Queue"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1596119700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 8908800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define int long long\r\n\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    #ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n    #endif\r\n\r\n    int tt; cin >> tt;\r\n\r\n    while(tt--)\r\n    {\r\n        int n, m, possible = 1; cin >> n >> m;\r\n\r\n        vector<int>adj[n + 1], subtree(n + 1), happy(n + 1), happiness(n + 1);\r\n\r\n        for(int i = 1; i <= n; i++) cin >> subtree[i];\r\n        for(int i = 1; i <= n; i++) cin >> happiness[i];\r\n\r\n        for(int i = 1; i < n; i++)\r\n        {\r\n            int x, y; cin >> x >> y;\r\n            adj[x].push_back(y);\r\n            adj[y].push_back(x);\r\n        }\r\n\r\n        function<void(int, int)>dfs = [&](int node, int parent)\r\n        {\r\n            int happiChildren = 0, people = subtree[node];\r\n\r\n            for(auto &i : adj[node])\r\n            {\r\n                if(i != parent)\r\n                {\r\n                    dfs(i, node);\r\n                    subtree[node] += subtree[i];\r\n                    happiChildren += happy[i];\r\n                }\r\n            }\r\n\r\n            if((subtree[node] + happiness[node]) % 2 != 0) possible = 0;\r\n\r\n            happy[node] = (subtree[node] + happiness[node]) / 2;\r\n\r\n            possible &= (happy[node] >= happiChildren && happy[node] <= subtree[node]);\r\n        };\r\n\r\n        dfs(1, 1);\r\n\r\n        cout << (possible ? \"YES\\n\" : \"NO\\n\");\r\n    }\r\n}"
}