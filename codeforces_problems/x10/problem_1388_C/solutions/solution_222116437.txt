{
    "id": 222116437,
    "contestId": 1388,
    "creationTimeSeconds": 1694020618,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1388,
        "index": "C",
        "name": "Uncle Bogdan and Country Happiness",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "dfs and similar",
            "greedy",
            "math",
            "trees"
        ]
    },
    "author": {
        "contestId": 1388,
        "members": [
            {
                "handle": "kkoushik566"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1596119700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 139,
    "memoryConsumedBytes": 7475200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 7;\r\n\r\nvector < int > gr[N];\r\n\r\nbool access = true;\r\n\r\nint p[N], h[N], a[N], g[N];\r\n\r\nvoid dfs(int v, int ancestor = -1) {\r\n    a[v] = p[v];\r\n    int sum_g = 0;\r\n    for (int to : gr[v]) {\r\n        if (to == ancestor) continue;\r\n        dfs(to, v);\r\n        sum_g += g[to];\r\n        a[v] += a[to];\r\n    }\r\n    if ((a[v] + h[v]) % 2 == 0) {} // first\r\n    else access = false;\r\n    g[v] = (a[v] + h[v]) / 2;\r\n    if (g[v] >= 0 && g[v] <= a[v]) {} // second\r\n    else access = false;\r\n    if (sum_g <= g[v]) {} // third\r\n    else access = false;\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr); cout.tie(nullptr);\r\n\r\n    int q;\r\n    cin >> q;\r\n\r\n    while (q--) {\r\n        int n, m; cin >> n >> m;\r\n        for (int i = 0; i < n; ++i) cin >> p[i];\r\n        for (int i = 0; i < n; ++i) cin >> h[i];\r\n        for (int i = 0; i < n - 1; ++i) {\r\n            int a, b; cin >> a >> b;\r\n            --a, --b;\r\n            gr[a].push_back(b);\r\n            gr[b].push_back(a);\r\n        }\r\n        dfs(0);\r\n        cout << (access ? \"YES\" : \"NO\") << endl;\r\n        access = true;\r\n        for (int i = 0; i < n; ++i) gr[i].clear();\r\n    }\r\n}"
}