{
    "id": 235430880,
    "contestId": 467,
    "creationTimeSeconds": 1701542606,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 467,
        "index": "D",
        "name": "Fedor and Essay",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2400,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "hashing",
            "strings"
        ]
    },
    "author": {
        "contestId": 467,
        "members": [
            {
                "handle": "Mousa"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1411054200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 10649600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define fast ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(0)\r\n\r\nconst int N = 2e5;\r\nvector<int>adj[N + 5];\r\nint counter(string a){\r\n    int lol = 0;\r\n    for (auto &i : a)\r\n        lol += i == 'r';\r\n    return lol;\r\n}\r\nvoid lower(string &a){\r\n    for (auto &i : a)\r\n        i = tolower(i);\r\n}\r\nvoid comp(string &a, string b){\r\n    if (counter(a) == counter(b)){\r\n        if (a.size() > b.size())\r\n            a = b;\r\n    }\r\n    else if (counter(a) > counter(b))\r\n        a = b;\r\n\r\n}\r\nmap<string , int> m;\r\nmap<int, string> undo, best;\r\nmap<int,int>check;\r\nvector<int>st;\r\nstring dfs(int node, vector<int>adj[]){\r\n    if (best.find(node) != best.end())\r\n        return best[node];\r\n    check[node] = 1;\r\n    st.push_back(node);\r\n    best[node] = undo[node];\r\n    for (int &child : adj[node]){\r\n        if (check.find(child) == check.end())comp(best[node], dfs(child,adj));\r\n        else{\r\n            int sz = st.size();\r\n            string x = undo[st.back()];\r\n            for (int i = sz - 1 ; i >= 0; --i){\r\n                comp(x, undo[st[i]]);\r\n                if (st[i] == child)\r\n                    break;\r\n            }\r\n            for (int i = sz - 1 ; i >= 0; --i){\r\n                comp(best[st[i]], x);\r\n                if (st[i] == child)\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    check.erase(node);\r\n    st.pop_back();\r\n    return best[node];\r\n}\r\nvoid solve()\r\n{\r\n    int n; cin >> n;\r\n    string s[n];\r\n    for (auto &i : s)\r\n        cin >> i;\r\n    int mark = 1;\r\n    for (int i = 0 ; i < n; ++i){\r\n        lower(s[i]);\r\n        m[s[i]] = mark;\r\n        undo[mark++] = s[i];\r\n    }\r\n    int mm; cin >> mm;\r\n    while(mm--){\r\n        string a,b; cin >> a >> b;\r\n        lower(a), lower(b);\r\n        if (m[a] == 0){\r\n            m[a] = mark;\r\n            undo[mark++] = a;\r\n        }\r\n        if (m[b] == 0){\r\n            m[b] = mark;\r\n            undo[mark++] = b;\r\n        }\r\n        adj[m[a]].emplace_back(m[b]);\r\n    }\r\n    for (int i = 0 ; i < n; ++i){\r\n        s[i] = dfs(m[s[i]],adj);\r\n    }\r\n    int ans = 0, total = 0;\r\n    for (int i = 0 ; i < n; ++i){\r\n        ans += s[i].size();\r\n        total += counter(s[i]);\r\n    }\r\n    cout << total << ' ' << ans;\r\n}\r\nint main(){\r\n    //fast;\r\n    int t = 1; //cin>>t;\r\n    for (int i = 1; i <= t;++i){\r\n        //cout<<\"Case #\"<<i<<\": \";\r\n        solve();\r\n        if (i != t)\r\n            cout << '\\n';\r\n    }\r\n}\r\n"
}