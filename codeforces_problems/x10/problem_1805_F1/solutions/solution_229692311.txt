{
    "id": 229692311,
    "contestId": 1805,
    "creationTimeSeconds": 1698238045,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1805,
        "index": "F1",
        "name": "Survival of the Weakest (easy version)",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2600,
        "tags": [
            "binary search",
            "brute force",
            "implementation",
            "math",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1805,
        "members": [
            {
                "handle": "lopzith"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1680446100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 131586183\n#include<bits/stdc++.h>\r\n#define int __int128\r\n#define Arr std::vector\r\n#define Ptn std::pair\r\n#define fi first\r\n#define se second\r\n#define eb emplace_back\r\n#define pb push_back\r\n#define debug std::cout << 'R' << 'u' << 'n' << 'i' << 'n' << 'g' << ' ' << 'o' << 'n' << ' ' << ' ' << __FUNCTION__ << ' ' << ' ' << __LINE__ << std::endl;\r\nconst int INF = 0x3f3f3f3f;\r\nconst int P = 1e9 + 7;\r\nconst int N = 3005;\r\nint n, a[N];\r\nArr<int> A;\r\nstd::priority_queue< std::array<int, 3> > q;\r\ninline int read()\r\n{\r\n    int w = 0, f = 1;\r\n    char ch = getchar();\r\n    while (ch < '0' || ch > '9')\r\n    {\r\n        if (ch == '-') f = -1;\r\n        ch = getchar();\r\n    }\r\n    while (ch >= '0' && ch <= '9')\r\n    {\r\n        w = (w << 3) + (w << 1) + (ch - 48);\r\n        ch = getchar();\r\n    }\r\n    return w * f;\r\n}\r\n\r\nvoid put(int x)\r\n{\r\n    if (x >= 10) put(x / 10);\r\n    putchar(x % 10 + '0');\r\n}\r\n\r\nsigned main()\r\n{\r\n    n = read();\r\n    for (int i = 1; i <= n; i++) a[i] = read();\r\n    std::sort(a + 1, a + n + 1);\r\n    for (int i = 1; i < n; i++) q.push({-a[i] - a[i + 1], i, i + 1});\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        int siz = q.size();\r\n        assert(siz == n - i);\r\n        for (int j = 1; j <= siz; j++) \r\n        {\r\n            auto x = q.top(); q.pop();\r\n            A.eb(-x[0]);\r\n            //printf(\"%lld %lld %lld %lld\\n\", i, x[0], x[1], x[2]);\r\n            if (x[2] <= siz) q.push({-a[x[1]] - a[x[2] + 1], x[1], x[2] + 1});\r\n        }\r\n        assert(A.size() == siz);\r\n        for (int j = 1; j <= siz; j++) a[j] = A[j - 1];\r\n        while (!q.empty()) q.pop();\r\n        for (int i = 1; i < siz; i++) q.push({-a[i] - a[i + 1], i, i + 1});\r\n        A.clear();\r\n    }\r\n    put(a[1] % P); printf(\"\\n\");\r\n    return 0;\r\n}"
}