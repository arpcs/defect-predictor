{
    "id": 233506412,
    "contestId": 817,
    "creationTimeSeconds": 1700438965,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 817,
        "index": "E",
        "name": "Choosing The Commander",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "bitmasks",
            "data structures",
            "trees"
        ]
    },
    "author": {
        "contestId": 817,
        "members": [
            {
                "handle": "CQ_cq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1497539100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 136027825\n#include <bits/stdc++.h>\r\n\r\nusing i64 = long long;\r\n\r\nconst int M = 30;\r\n\r\nstruct Trie {\r\n    struct Node {\r\n        Node *ch[2]{nullptr, nullptr};\r\n        int cnt = 0;\r\n    };\r\n    Node *root = new Node;\r\n    void insert(int x) {\r\n        auto cur = root;\r\n        root->cnt += 1;\r\n        for (int i = M; i >= 0; i--) {\r\n            int t = (x >> i & 1);\r\n            if (cur->ch[t] == nullptr) {\r\n                cur->ch[t] = new Node;\r\n            }\r\n            cur = cur->ch[t];\r\n            cur->cnt += 1;\r\n        }\r\n    }\r\n    void erase(int x) {\r\n        auto cur = root;\r\n        root->cnt -= 1;\r\n        for (int i = M; i >= 0; i--) {\r\n            int t = (x >> i & 1);\r\n            assert(cur->ch[t] != nullptr);\r\n            cur = cur->ch[t];\r\n            cur->cnt -= 1;\r\n        }\r\n    }\r\n    int query(int x, int y) {\r\n        auto cur = root;\r\n        i64 ans = 0;\r\n        for (int i = M; i >= 0; i--) {\r\n            if (cur == nullptr) {\r\n                break;\r\n            }\r\n            if ((x >> i & 1) && !(y >> i & 1)) {\r\n                ans += cur->ch[0] ? cur->ch[0]->cnt : 0;\r\n                cur = cur->ch[1];\r\n            } else if ((x >> i & 1) && (y >> i & 1)) {\r\n                cur = cur->ch[0];\r\n            } else if (!(x >> i & 1) && !(y >> i & 1)) {\r\n                ans += cur->ch[1] ? cur->ch[1]->cnt : 0;\r\n                cur = cur->ch[0];\r\n            } else {\r\n                cur = cur->ch[1];\r\n            }\r\n        }\r\n        return root->cnt - ans;\r\n    }\r\n};\r\n\r\nint main() {\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr);\r\n\r\n    Trie trie;\r\n\r\n    int q;\r\n    std::cin >> q;\r\n    while (q--) {\r\n        int op;\r\n        std::cin >> op;\r\n        if (op == 1) {\r\n            int x;\r\n            std::cin >> x;\r\n            trie.insert(x);\r\n        } else if (op == 2) {\r\n            int x;\r\n            std::cin >> x;\r\n            trie.erase(x);\r\n        } else {\r\n            int x, y;\r\n            std::cin >> x >> y;\r\n            std::cout << trie.query(x, y) << \"\\n\";\r\n        } \r\n    }\r\n\r\n    return 0;\r\n}"
}