{
    "id": 10506336,
    "contestId": 530,
    "creationTimeSeconds": 1427566965,
    "relativeTimeSeconds": 4965,
    "problem": {
        "contestId": 530,
        "index": "F",
        "name": "Jumping frogs",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 530,
        "members": [
            {
                "handle": "s-k-y"
            },
            {
                "handle": "Kipok"
            }
        ],
        "participantType": "CONTESTANT",
        "teamId": 8692,
        "teamName": "Moscow SU: Tomsk",
        "ghost": false,
        "startTimeSeconds": 1427562000
    },
    "programmingLanguage": "Picat",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "read_arr(A, 0) => \r\n    A = [].\r\n    \r\nread_arr(A, N), N > 0 =>\r\n    X = read_int(),\r\n    Y = read_int(),\r\n    read_arr(R, N - 1),\r\n    A = [[X, Y] | R].\r\n\r\ndfs(NodeId, Nodes, Accessibles, K) =>\r\n    foreach (I in 1..Nodes.length)\r\n        if (Accessibles[I] == false) then\r\n                if (Nodes[NodeId, 1] == Nodes[I, 1]) then\r\n                if (abs(Nodes[NodeId, 2] - Nodes[I, 2]) == K) then\r\n                    Accessibles[I] := true,\r\n                    dfs(I, Nodes, Accessibles, K)\r\n                end\r\n            end,\r\n            if (Nodes[NodeId, 2] == Nodes[I, 2]) then\r\n                if (abs(Nodes[NodeId, 1] - Nodes[I, 1]) == K) then\r\n                    Accessibles[I] := true,\r\n                    dfs(I, Nodes, Accessibles, K)\r\n                end\r\n            end\r\n        end\r\n    end.\r\n   \r\nmain =>\r\n    N = read_int(),\r\n    read_arr(A, N),\r\n    A := [[0, 0] | A],\r\n    N := N + 1,\r\n    Dist = 0,\r\n    foreach (L in 1..10)\r\n        Acc := [false : I in 1..N],\r\n        dfs(1, A, Acc, L),\r\n        foreach (I in 1..N)\r\n            if (Acc[I] == true) then\r\n                Dist := max(Dist, abs(A[I, 1]) + abs(A[I, 2]))\r\n            end\r\n        end\r\n    end,\r\n    println(Dist).\r\n"
}