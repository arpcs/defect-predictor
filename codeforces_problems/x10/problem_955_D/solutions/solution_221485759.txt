{
    "id": 221485759,
    "contestId": 955,
    "creationTimeSeconds": 1693592484,
    "relativeTimeSeconds": 6384,
    "problem": {
        "contestId": 955,
        "index": "D",
        "name": "Scissors",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "brute force",
            "strings"
        ]
    },
    "author": {
        "contestId": 955,
        "members": [
            {
                "handle": "plevande"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1693586100
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 0,
    "source": "import sys \r\ninput = sys.stdin.buffer.readline \r\n\r\ndef partial(s):\r\n    g, pi = 0, [0] * len(s)\r\n    for i in range(1, len(s)):\r\n        while g and (s[g] != s[i]):\r\n            g = pi[g - 1]\r\n        pi[i] = g = g + (s[g] == s[i])\r\n\r\n    return pi\r\n\r\ndef process(k, S, T):\r\n    n = len(S)\r\n    m = len(T)\r\n    S1 = T+\"?\"+S\r\n    A1 = partial(S1)\r\n    A1 = A1[m+1:]\r\n    S2 = T[::-1]+\"?\"+S[::-1]\r\n    B1 = partial(S2)\r\n    B1 = B1[m+1:]\r\n    B1 = B1[::-1]\r\n    prefix_find = [None for i in range(k+1)]\r\n    suffix_find = [None for i in range(k+1)]\r\n    for i in range(n):\r\n        pi = A1[i]\r\n        if pi <= k and prefix_find[pi] is None and i>=k-1:\r\n            prefix_find[pi] = i\r\n    for i in range(n-1, -1, -1):\r\n        si = B1[i]\r\n        if si <= k and suffix_find[si] is None and i+k-1<= n-1:\r\n            suffix_find[si] = i \r\n    my_left = None\r\n    for i in range(k, -1, -1):\r\n        if prefix_find[i] is not None:\r\n            if my_left is None:\r\n                my_left = prefix_find[i]\r\n            else:\r\n                my_left = min(my_left, prefix_find[i])\r\n        prefix_find[i] = my_left\r\n    #prefix_find[i] is the leftmost entry where you can find something \r\n    #ending in AT LEAST i\r\n    my_right = None \r\n    for i in range(k, -1, -1):\r\n        if suffix_find[i] is not None:\r\n            if my_right is None:\r\n                my_right = suffix_find[i]\r\n            else:\r\n                my_right = max(my_right, suffix_find[i])\r\n        suffix_find[i] = my_right\r\n    #suffix_find[i] is the rightmost entry \r\n    #where you can find something ending in \r\n    #AT LEAST i\r\n    \"\"\"\r\n    if m <= k and prefix_find[m] is not None:\r\n        r1 = prefix_find[m]\r\n        l1 = r1-k+1\r\n        l2 = r1+1 \r\n        r2 = l2+k-1 \r\n        if 0 <= l1 <= r1 < l2 <= r2 <= n-1:\r\n            sys.stdout.write('Yes\\n')\r\n            sys.stdout.write(f'{l1} {l2}\\n')\r\n            return\r\n    if m <= k and suffix_find[m] is not None:\r\n        l2 = suffix_find[m]\r\n        r2 = l2+k-1\r\n        r1 = l2-1 \r\n        l1 = r1-k+1  \r\n        if 0 <= l1 <= r1 < l2 <= r2 <= n-1:\r\n            sys.stdout.write('Yes\\n')\r\n            sys.stdout.write(f'{l1} {l2}\\n')\r\n            return\r\n    \"\"\"\r\n    for i in range(0, k+1):\r\n        if prefix_find[i] is not None and 0 <= m-i <= k and suffix_find[m-i] is not None:\r\n            i2 = prefix_find[i]\r\n            j1 = suffix_find[m-i]\r\n            l1, r1 = i2-k+1, i2 \r\n            l2, r2 = j1, j1+k-1 \r\n            if r1 < l2:\r\n                sys.stdout.write('Yes\\n')\r\n                sys.stdout.write(f'{l1+1} {l2+1}\\n')\r\n                return \r\n    sys.stdout.write('No\\n')\r\n    return\r\n            \r\n            \r\n            \r\n    \r\n\r\nn, m, k = [int(x) for x in input().split()]\r\nS = input().decode().strip()\r\nT = input().decode().strip()\r\nprocess(k, S, T)"
}