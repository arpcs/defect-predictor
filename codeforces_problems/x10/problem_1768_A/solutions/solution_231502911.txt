{
    "id": 231502911,
    "contestId": 1768,
    "creationTimeSeconds": 1699208782,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1768,
        "index": "A",
        "name": "Greatest Convex",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1768,
        "members": [
            {
                "handle": "SambhavJain"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1672929300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#include<algorithm>\r\n#define yes cout<<\"Yes\"<<\"\\n\"\r\n#define no cout<<\"No\"<<\"\\n\"\r\n#define enter cout<<\"\\n\"\r\n#define endl \"\\n\"\r\n#define all(a) a.begin(),a.end()\r\n#define inputvec(vec) for(int i=0;i<vec.size();i++){cin>>vec[i];}\r\n#define printvec(vec) for(auto i:vec){cout<<i<<\" \";}\r\n#define swap(a,b) a^=b^=a^=b;\r\n#define pb push_back\r\n#define int long long\r\nusing ll=long long;\r\nusing ull=unsigned long long;\r\nusing namespace std;\r\n\r\n//To sort a vector of pairs: first ascending, second descending\r\nbool firstAscSecDesc(const pair<int,int>& a,const pair<int,int>& b) \r\n{\r\n    if(a.first!=b.first)\r\n    {\r\n        return (a.first<b.first);\r\n    }\r\n    else\r\n    {\r\n       return (a.second>b.second);\r\n    }\r\n}\r\n\r\n//Finds and stores all primes upto n in vector vecprimes in linear time\r\nvector<int>vecprimes;\r\nbool is_composite[1];\r\nvoid linear_sieve(int n) \r\n{\r\n    fill(is_composite,is_composite+n,false);\r\n    for(int i=2;i<n;++i) \r\n    {\r\n        if(!is_composite[i])\r\n        {\r\n            vecprimes.push_back(i);\r\n        }\r\n        for(int j=0;j<vecprimes.size()&&i*vecprimes[j]<n;++j) \r\n        {\r\n            is_composite[i*vecprimes[j]]=true;\r\n            if(i%vecprimes[j]==0)\r\n            {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n//Euler Totient Function: number of integers upto n which are coprime with n\r\n//Call linear_sieve(max(sqrt(n))) before calling this function\r\nint phi(int n)\r\n{\r\n    int ncopy=n,ans=n;\r\n    for(auto p:vecprimes)\r\n    {\r\n        if(p>ncopy)\r\n        {\r\n            break;\r\n        }\r\n        if(ncopy%p==0)\r\n        {\r\n            ans=(ans*(p-1))/p;\r\n            while(ncopy%p==0)\r\n            {\r\n                ncopy/=p;\r\n            }\r\n        }\r\n    }\r\n    if(ncopy>1)\r\n    {\r\n        ans=(ans*(ncopy-1))/ncopy;\r\n    }\r\n    return ans;\r\n}\r\n\r\n//Calculates(a^b)%mod \r\nll power_mod(ll a,ll b,ll mod)\r\n{\r\n    ll x=1,y=a; \r\n    while(b>0)\r\n    { \r\n        if(b&1)\r\n        { \r\n            x=(x*y)%mod; \r\n        } \r\n        y=(y*y)%mod; \r\n        b>>=1; \r\n    } \r\n    return x%mod; \r\n}\t \r\n \r\n//modular inverse i.e. a^(-1)%mod=a^(phi(mod)-2)%mod only if a and mod are coprime\r\n//If mod is prime, phi(mod)=mod-1\r\nll modular_inverse(ll n,ll mod,bool is_mod_prime=false)\r\n{ \r\n    if(is_mod_prime)\r\n    {\r\n        return power_mod(n,mod-2,mod);\r\n    }\r\n    return power_mod(n,phi(mod)-1,mod); \r\n} \r\n\r\nint solve()\r\n{\r\n    int k;\r\n    cin>>k;\r\n    return k-1;\r\n}\r\n\r\nint32_t main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int t;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        cout<<solve()<<\"\\n\";\r\n    }\r\n    return 0;\r\n}"
}