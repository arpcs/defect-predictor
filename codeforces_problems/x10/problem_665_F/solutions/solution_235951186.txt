{
    "id": 235951186,
    "contestId": 665,
    "creationTimeSeconds": 1701795816,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 665,
        "index": "F",
        "name": "Four Divisors",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures",
            "dp",
            "math",
            "number theory",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 665,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461164400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 702,
    "memoryConsumedBytes": 29081600,
    "source": "#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <string>\n#include <algorithm>\n#include <vector>\n#include <cmath>\n#include <map>\n#include <set>\n#include <stack>\n#include <deque>\n#include <queue>\n#include <deque>\n#include <bitset>\n#include <time.h>\n#include <assert.h>\nusing namespace std;\n\nconst int N = 1000010;\nint id1[N], id2[N];\nint primes[N], tot;\nbool vis[N];\nlong long dp[N];\nlong long n;\n\nint get_id(long long x) {\n\tif (x < N) return id1[x];\n\treturn id2[n / x];\n}\n\nvoid init() {\n\tfor (int i = 2; i < N; i++) {\n\t\tif (!vis[i]) {\n\t\t\tprimes[++tot] = i;\n\t\t}\n\t\tfor (int j = 1; j <= tot && i * primes[j] < N; j++) {\n\t\t\tint x = i * primes[j];\n\t\t\tvis[x] = true;\n\t\t\tif (i % primes[j] == 0) break;\n\t\t}\n\t}\n}\n\nlong long w[N];\nvoid cal() {\n\tint c = 0;\n\tfor (long long i = 1; i <= n; ) {\n\t\tlong long x = n / i;\n\t\tif (x < N) id1[x] = ++c;\n\t\telse id2[n / x] = ++c;\n\t\tdp[c] = x - 1;\n\t\tw[c] = x;\n\t\ti = n / x + 1;\n\t}\n\t/*\n\t * dp[i, j]: x <=j, x is prime or min_factor(x) > prime[i]\n\t * dp[i, j] = dp[i - 1, j] - (dp[i - 1, j / primes[i]] - (i - 1))\n\t */\n\tfor (int i = 1; i <= tot; i++)\n\t\tfor (int j = 1; 1LL * primes[i] * primes[i] <= w[j] && j <= c; j++) {\n\t\t\tdp[j] -= dp[get_id(w[j] / primes[i])] - (i - 1);\n\t\t}\n}\n\nlong long get_ans(long long x) {\n\tif (x < 2) return 0;\n\treturn dp[get_id(x)];\n}\n\nint main()\n{\n\tinit();\n\tcin >> n;\n\tcal();\n\n\tlong long ans = 0;\n\t/*\n\t * p * q (p < q, p * q <= n)\n\t * = (p * q - p * p) / 2\n\t */\n    for (long long i = 1; i <= n; ) {\n\t\tlong long x = n / i;\n\t\tlong long j = n / x;\n\t\tans += get_ans(x) * (get_ans(j) - get_ans(i - 1));\n\t\ti = j + 1;\n\t}\n\n\tfor (int i = 1; i <= tot && 1LL * primes[i] * primes[i] <= n; i++)\n\t\tans--;\n\n\tans /= 2;\n\tfor (int i = 1; i <= tot && 1LL * primes[i] * primes[i] * primes[i] <= n; i++)\n\t\tans++;\n\n\tcout << ans << endl;\n\treturn 0;\n}\n\n  \t \t   \t\t \t\t\t  \t\t\t \t   \t\t\t \t \t"
}