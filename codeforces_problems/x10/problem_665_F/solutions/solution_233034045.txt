{
    "id": 233034045,
    "contestId": 665,
    "creationTimeSeconds": 1700189155,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 665,
        "index": "F",
        "name": "Four Divisors",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures",
            "dp",
            "math",
            "number theory",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 665,
        "members": [
            {
                "handle": "momoyuu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461164400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 8923,
    "memoryConsumedBytes": 7577600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\n\r\n\r\nnamespace nachia{\r\n\r\nlong long CountingPrimes(long long maxval){\r\n    using i64 = long long;\r\n    i64 n = maxval;\r\n    if(n <= 1) return 0;\r\n\r\n    i64 sqrtn = 0; while(sqrtn * sqrtn <= n) sqrtn++; sqrtn--;\r\n    \r\n    std::vector<i64> prefix_sum_fairy(sqrtn+1, 0);\r\n    for(i64 i=1; i<=sqrtn; i++) prefix_sum_fairy[i] = i-1;\r\n\r\n    std::vector<i64> prefix_sum_devil(sqrtn+1, 0);\r\n    for(i64 i=1; i<=sqrtn; i++) prefix_sum_devil[i] = n/i-1;\r\n\r\n    for(i64 p=2; p<=sqrtn; p++){\r\n        i64 prime_count_p = prefix_sum_fairy[p];\r\n        i64 prime_count_p_minus1 = prefix_sum_fairy[p-1];\r\n        if(prime_count_p == prime_count_p_minus1) continue;\r\n        for(i64 devil_id = 1; devil_id <= sqrtn; devil_id++){\r\n            if(devil_id * p <= sqrtn){\r\n                prefix_sum_devil[devil_id] -= prefix_sum_devil[devil_id * p] - prime_count_p_minus1;\r\n            }\r\n            else{\r\n                i64 tg_fairy = n / (devil_id * p);\r\n                if(tg_fairy < p) break;\r\n                prefix_sum_devil[devil_id] -= prefix_sum_fairy[tg_fairy] - prime_count_p_minus1;\r\n            }\r\n        }\r\n        for(i64 fairy_id = sqrtn/p; fairy_id >= p; fairy_id--){\r\n            i64 dc = prefix_sum_fairy[fairy_id] - prime_count_p_minus1;\r\n            i64 max_tg = std::min(fairy_id * p + p - 1, sqrtn);\r\n            for(i64 tg_fairy = fairy_id * p; tg_fairy <= max_tg; tg_fairy++) prefix_sum_fairy[tg_fairy] -= dc;\r\n        }\r\n    }\r\n\r\n    return prefix_sum_devil[1];\r\n}\r\n\r\n} // namespace nachia\r\nint main(){\r\n    cin.tie(nullptr);\r\n    ios::sync_with_stdio(false);\r\n\r\n    const int mx = 1e6;\r\n    ll n;\r\n    cin>>n;\r\n    ll ans = 0;\r\n    vector<int> p(mx+1,0);\r\n    for(int i = 2;i<=mx;i++){\r\n        if(p[i]) continue;\r\n        for(int j = 2 * i;j<=mx;j+=i){\r\n            p[j] = 1;\r\n        }\r\n    }\r\n    for(ll i = 2;i<=mx;i++){\r\n        if(p[i]) continue;\r\n        if(i*i*i<=n) ans++;\r\n    }\r\n    for(ll i = 2;i<=mx;i++){\r\n        if(p[i]) continue;\r\n        if(i*i>n) break;\r\n        ll can = n / i;\r\n        if(can<=i) break;\r\n        ans += nachia::CountingPrimes(can) - nachia::CountingPrimes(i);\r\n    }\r\n    cout<<ans<<endl;\r\n}\r\n"
}