{
    "id": 222677331,
    "contestId": 1062,
    "creationTimeSeconds": 1694328206,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1062,
        "index": "E",
        "name": "Company",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "data structures",
            "dfs and similar",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1062,
        "members": [
            {
                "handle": "HyeuShogun"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542209700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 624,
    "memoryConsumedBytes": 43315200,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define int long long\r\nconst int N = 1e5 + 10;\r\nint up[N][20];\r\nint h[N];\r\nint in[N], out[N], timer = 1;\r\nint lg = 20;\r\nvector<int> adj[N];\r\nstruct Node\r\n{\r\n    int in = 1e18, out = 0, pi = 0, po = 0;\r\n};\r\nNode st[N * 4];\r\nNode merge_note(Node a, Node b)\r\n{\r\n    Node ans;\r\n    ans.in = min(a.in, b.in);\r\n    ans.out = max(a.out, b.out);\r\n    if (ans.in == a.in) ans.pi = a.pi;\r\n    else ans.pi = b.pi;\r\n    if (ans.out == a.out) ans.po = a.po;\r\n    else ans.po = b.po;\r\n    return ans;\r\n}\r\nvoid update(int id, int l, int r, int i, int vi, int vo)\r\n{\r\n    if (l > i || r < i) return;\r\n    if (l == r)\r\n    {\r\n        st[id].in = vi;\r\n        st[id].out = vo;\r\n        st[id].pi = st[id].po = i;\r\n        return;\r\n    }\r\n    int mid = l + r >> 1;\r\n    update(id * 2, l, mid, i, vi, vo);\r\n    update(id * 2 + 1, mid + 1, r, i, vi, vo);\r\n    st[id] = merge_note(st[id * 2], st[id * 2 + 1]);\r\n}\r\nNode g (int id, int l, int r, int u, int v)\r\n{\r\n    if (l > v || r < u)\r\n    {\r\n        Node an;\r\n        return an;\r\n    }\r\n    if (u <= l && r <= v)\r\n    {\r\n        return st[id];\r\n    }\r\n    int mid = l + r >> 1;\r\n    return merge_note(g(id * 2, l, mid, u, v), g(id * 2 + 1, mid + 1, r, u, v));\r\n}\r\nvoid preprocess(int v, int pr = 0)\r\n{\r\n    up[v][0] = pr;\r\n    in[v] = timer++;\r\n    for (int i = 1; i < lg; i++)\r\n    {\r\n        up[v][i] = up[up[v][i - 1]][i - 1];\r\n    }\r\n    for (auto it : adj[v])\r\n    {\r\n        if (it != pr)\r\n        {\r\n            h[it] = h[v] + 1;\r\n            preprocess(it, v);\r\n        }\r\n    }\r\n    out[v] = timer - 1;\r\n}\r\nint find_kth_par(int u, int k)\r\n{\r\n    for (int i = lg - 1; i >= 0; i--)\r\n    {\r\n        if ((1<<i) & k)\r\n        {\r\n            u = up[u][i];\r\n        }\r\n    }\r\n    return u;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int n, q;\r\n    cin >> n >> q;\r\n    for (int i = 2; i <= n; i++)\r\n    {\r\n        int u;\r\n        cin >> u;\r\n        adj[u].push_back(i);\r\n    }\r\n    preprocess(1, 0);\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        update(1, 1, n, i, in[i], out[i]);\r\n    }\r\n    for (int i = 1; i <= q; i++)\r\n    {\r\n        int l, r;\r\n        cin >> l >> r;\r\n        Node m = g(1, 1, n, l, r);\r\n\r\n        int pi = -1, po = -1;\r\n        for (int j = l; j <= r; j++)\r\n        {\r\n            if (j != m.pi) pi = j;\r\n            if (j != m.po) po = j;\r\n            if (pi > -1 && po > -1) break;\r\n        }\r\n        update(1, 1, n, m.pi, 1e18, 0);\r\n        Node k = g(1, 1, n, l, r);\r\n\r\n        int A = -1, B = -1;\r\n        int lo = 0, hi = h[pi];\r\n        while(lo < hi)\r\n        {\r\n            int mid = (hi - lo ) / 2 + lo;\r\n            int pa = find_kth_par(pi, mid);\r\n            if (in[pa] <= k.in && k.out <= out[pa]) hi = mid;\r\n            else lo = mid + 1;\r\n        }\r\n        A = find_kth_par(pi, lo);\r\n        int aA = h[A];\r\n\r\n        if (in[A] <= k.in && k.out <= out[A]);\r\n        else aA = -1;\r\n        update(1, 1, n, m.pi, in[m.pi], out[m.pi]);\r\n\r\n        update(1, 1, n, m.po, 1e18, 0);\r\n         k = g(1, 1,n, l, r);\r\n        lo = 0, hi = h[po];\r\n        while(lo < hi)\r\n        {\r\n            int mid = (hi - lo ) / 2 + lo;\r\n            int pa = find_kth_par(po, mid);\r\n            if (in[pa] <= k.in && k.out <= out[pa]) hi = mid;\r\n            else lo = mid + 1;\r\n        }\r\n        B = find_kth_par(po, lo);\r\n        int aB = h[B];\r\n        if (in[B] <= k.in && k.out <= out[B]);\r\n        else aB = -1;\r\n        if (aA > aB)\r\n        {\r\n            cout << m.pi << ' ' << aA << '\\n';\r\n        }\r\n        else cout << m.po << ' ' << aB << '\\n';\r\n\r\n        update(1, 1, n, m.po, in[m.po], out[m.po]);\r\n    }\r\n}\r\nmain()\r\n{\r\n    cin.tie(NULL)->sync_with_stdio(false);\r\n    int t = 1;\r\n    while(t--)\r\n    {\r\n        solve();\r\n    }\r\n}\r\n\r\n"
}