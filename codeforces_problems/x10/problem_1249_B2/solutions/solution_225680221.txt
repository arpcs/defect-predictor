{
    "id": 225680221,
    "contestId": 1249,
    "creationTimeSeconds": 1695917498,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1249,
        "index": "B2",
        "name": "Books Exchange (hard version)",
        "type": "PROGRAMMING",
        "rating": 1300,
        "tags": [
            "dfs and similar",
            "dsu",
            "math"
        ]
    },
    "author": {
        "contestId": 1249,
        "members": [
            {
                "handle": "Ahmed_mostafa_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571754900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 12902400,
    "source": "#include<bits/stdc++.h>\r\n#include<regex>\r\n#include <ext/pb_ds/detail/standard_policies.hpp>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\nconst ll Mod= 1e9+7;\r\nconst ld EPS=1e-6;\r\nconst ll OO=INT_MAX;\r\ntypedef __int128_t lll;\r\n#define REP(i,a,b) for(int i=a;i<b;i++)\r\n#define REN(i,a,b) for(int i=a;i>b;i--)\r\n#define _STD_ std::ios::sync_with_stdio(false);std::cin.tie(nullptr);std::cout.tie(nullptr);\r\n#define _OPEN_ freopen(\"in.txt\",\"r\",stdin);freopen(\"out.txt\",\"w\",stdout);\r\n#define all(v)   (v).begin(),(v).end()\r\ntemplate<typename t>\r\nostream& operator <<(ostream&out,const vector<t>&vi){\r\n    for( const t&i:vi)\r\n        out<<i<<\" \";\r\n    return out;\r\n}\r\ntemplate<typename T>\r\nistream& operator >>(istream&out, vector<T>&vi){\r\n   for(auto&i:vi)\r\n    out>>i;\r\n    return out;\r\n}\r\ntemplate<typename T=int,int Base=1>\r\nstruct DSU{\r\n    int Nodes;\r\n    vector<T>parent,Gsize,MinValue,MaxValue,Points;\r\n    vector<vector<T>>Components;\r\n    DSU(int MaxNodes):Nodes(MaxNodes){\r\n        parent=Gsize=MinValue=MaxValue=Points=vector<T>(MaxNodes+1);\r\n        Components=vector<vector<T>>(MaxNodes+1);\r\n        for(int i=Base;i<=MaxNodes;i++)\r\n            parent[i]=i,Gsize[i]=1,MinValue[i]=MaxValue[i]=i,Points[i]=0;\r\n    }\r\n    // O( log(n) )\r\n    T findLeader(int node){\r\n        return parent[node]=(parent[node]==node?node:findLeader(parent[node]));\r\n    }\r\n    bool isSameSet(int u,int v){\r\n        return findLeader(u)==findLeader(v);\r\n    }\r\n    void unionSets(int u,int v){\r\n        Components[u].push_back(v);\r\n        Components[v].push_back(u);\r\n        int leaderU=findLeader(u),leaderV=findLeader(v);\r\n        if(leaderU==leaderV)   return;\r\n        if(Gsize[leaderU]<Gsize[leaderV]) swap(leaderU,leaderV); //Caution: this Condition is pretty important.\r\n        Gsize[leaderU]+=Gsize[leaderV],parent[leaderV]=leaderU;\r\n        MinValue[leaderU]=min(MinValue[leaderU],leaderV);\r\n        MinValue[leaderV]=min(MinValue[leaderV],leaderU);\r\n        MaxValue[leaderU]=max(MaxValue[leaderU],leaderV);\r\n        MaxValue[leaderV]=max(MaxValue[leaderV],leaderU);\r\n    }\r\n    void add(int u, int value){\r\n        Points[u]+=value;\r\n        for(int i=0;i<Components[u].size();i++)\r\n                Points[Components[u][i]]+=value;\r\n    }\r\n    int getSize(int u){\r\n        return Gsize[findLeader(u)];\r\n    }\r\n    int getMinValue(int u){\r\n        return MinValue[findLeader(u)];\r\n    }\r\n    int getMaxValue(int u){\r\n        return MaxValue[findLeader(u)];\r\n    }\r\n};\r\nvoid work(){\r\n    int n;\r\n    cin>>n;\r\n    vector<int>nums(n);\r\n    cin>>nums;\r\n    DSU<int>dsu(n);\r\n    for(int i=0;i<n;i++)\r\n        dsu.unionSets(i+1,nums[i]);\r\n    for(int i=1;i<=n;i++)\r\n        cout<<dsu.getSize(i)<<\" \\n\"[i==n];\r\n}\r\n\r\nint main(){\r\n   _STD_\r\n    #ifndef ONLINE_JUDGE\r\n        _OPEN_\r\n    #endif\r\n    int n=1;\r\n    cin>>n;\r\n    while(n--)\r\n      work();\r\n}"
}