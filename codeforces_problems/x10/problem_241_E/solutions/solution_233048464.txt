{
    "id": 233048464,
    "contestId": 241,
    "creationTimeSeconds": 1700202933,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 241,
        "index": "E",
        "name": "Flights",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 241,
        "members": [
            {
                "handle": "zzxLLL"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1351783800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 307200,
    "source": "// LUOGU_RID: 135529148\n#include <queue>\n#include <cstdio>\n#include <vector>\n#include <utility>\nconst int M = 5321;\n\nint n, m;\nstd::vector<std::pair<int, int> > g[M];\nstruct Edge { int u, v, qwq; } e[M];\n\nstd::vector<int> g0[M], g1[M];\nbool vis[M], vis0[M];\n\nvoid dfs(int u, std::vector<int>* g, bool* vis) {\n    vis[u] = true;\n    for (int v : g[u])\n        if (!vis[v]) dfs(v, g, vis);\n}\n\nbool inq[M];\nint dis[M], cnt[M];\nstd::queue<int> q;\nconst int Inf = 1e9 + 7;\nbool SPFA() {\n    for (int i = 1; i <= n; i++) dis[i] = -Inf;\n    dis[1] = 0, inq[1] = true, q.push(1);\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        inq[u] = false;\n        for (auto E : g[u]) {\n            int v = E.first, w = E.second;\n            if (dis[v] < dis[u] + w) {\n                dis[v] = dis[u] + w;\n                if ((++cnt[v]) > n) return false;\n                if (!inq[v]) q.push(v), inq[v] = true;\n            }\n        }\n    }\n    return true;\n}\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m; i++) {\n        scanf(\"%d%d\", &e[i].u, &e[i].v);\n        g0[e[i].u].push_back(e[i].v);\n        g1[e[i].v].push_back(e[i].u);\n    }\n    dfs(1, g0, vis), dfs(n, g1, vis0);\n    for (int i = 1; i <= n; i++) vis[i] &= vis0[i];\n    for (int i = 1; i <= m; i++) e[i].qwq = vis[e[i].u] & vis[e[i].v];\n    for (int i = 1; i <= m; i++) {\n        if (!e[i].qwq) continue;\n        g[e[i].u].push_back({ e[i].v, 1 });\n        g[e[i].v].push_back({ e[i].u, -2 });\n    }\n\n    if (!SPFA()) return printf(\"No\\n\"), 0;\n    printf(\"YES\\n\");\n    for (int i = 1; i <= m; i++)\n        printf(\"%d\\n\", e[i].qwq ? dis[e[i].v] - dis[e[i].u] : 1);\n    return 0;\n}"
}