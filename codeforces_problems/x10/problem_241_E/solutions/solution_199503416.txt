{
    "id": 199503416,
    "contestId": 241,
    "creationTimeSeconds": 1679989442,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 241,
        "index": "E",
        "name": "Flights",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 241,
        "members": [
            {
                "handle": "cheng_zk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1351783800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 123,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 57958400,
    "source": "#include<iostream>\r\n#include<cstdio>\r\n#include<algorithm>\r\n#include<cmath>\r\n#include<cstring>\r\n#include<vector>\r\n#include<queue>\r\n#define mid (l+r)/2.0\r\nusing namespace std;\r\nconst int N=800000+5;\r\nconst int Inf=1e9;\r\nint n,m,kn,vis[N],ddd,itim[N],inq[N];\r\nint cost[N],vv,a[N],cou[N],tot;\r\nstruct Edge{int x,y,v;}edg[N],edge[N];\r\nstruct Node{int to,v;}tmpG;\r\nvector<Node> G[N],kongG;\r\nvector<int>G1[N];\r\nqueue<int> q,kongQ;\r\n//void Insert(int x,int y,int tp){\r\n//\tif (!tp){tmpG.to=y;tmpG.v=0;G[x].push_back(tmpG);return ;}\r\n//    tmpG.to=y;tmpG.v=2;G[x].push_back(tmpG);\r\n//    tmpG.to=x;tmpG.v=-1;G[y].push_back(tmpG);\r\n//}\r\n//bool spfa(int x){\r\n//\tfor (int i=0;i<=n+1;i++) inq[i]=0,cost[i]=Inf,itim[i]=0;\r\n//\tcost[x]=0;q=kongQ;q.push(x);inq[x]=1;itim[x]=1;\r\n//\twhile (!q.empty()){\r\n//\t\tx=q.front();q.pop();inq[x]=0;\r\n//\t\tfor (int i=0,u;i<G[x].size();i++) if ((vv=(cost[x]+G[x][i].v))<cost[u=G[x][i].to]){\r\n//\t\t    cost[u]=vv;if (!inq[u])q.push(u),inq[u]=1,itim[u]++;\r\n//\t\t\tif (itim[u]>=n+2) return 0;\r\n//\t\t}\r\n//\t}\r\n//\treturn 1;\r\n//}\r\nvoid Insert(int x,int y,int tp){\r\n\tif (!tp){++tot;edge[tot].x=x;edge[tot].y=y;edge[tot].v=0;return ;}\r\n\t++tot;edge[tot].x=x;edge[tot].y=y;edge[tot].v=2;\r\n\t++tot;edge[tot].x=y;edge[tot].y=x;edge[tot].v=-1;\r\n}\r\nbool Bellman(int x){\r\n\tfor (int i=0;i<=n+1;i++) cost[i]=Inf;cost[x]=0;\r\n\tfor (int i=1;i<=n+2;i++) for (int j=1,x,u;j<=tot;j++)\r\n\t    if ((vv=(cost[x=edge[j].x]+edge[j].v))<cost[u=edge[j].y]) cost[u]=vv;\r\n\tfor (int j=1,x,u;j<=tot;j++)\r\n\t\tif ((vv=(cost[x=edge[j].x]+edge[j].v))<cost[u=edge[j].y]) return 0;\r\n\treturn 1;\r\n}\r\nbool dfs(int x){\r\n\tif (vis[x]) return cou[x];vis[x]=1;if (x==n||cou[x]) {cou[x]=1;return 1;}\r\n\tfor (int i=0,u;i<G1[x].size();i++) if ((u=G1[x][i])) cou[x]|=dfs(u);\r\n\tif (!cou[x]) return 0;\r\n\tfor (int i=0,u;i<G1[x].size();i++) if ((u=G1[x][i])&&cou[u]) Insert(x,u,1);\r\n\treturn cou[x];\r\n}\r\nint main()\r\n{\r\n    cin>>n>>m;for (int i=1;i<=m;i++) scanf(\"%d%d\",&edg[i].x,&edg[i].y),G1[edg[i].x].push_back(edg[i].y);\r\n    for (int i=1;i<=n;i++) Insert(0,i,0);dfs(1);\r\n    if (!Bellman(0)){ printf(\"No\\n\"); return 0;}printf(\"Yes\\n\");\r\n\tfor (int i=1;i<=m;i++) {a[i]=cost[edg[i].y]-cost[edg[i].x];if (a[i]<1||2<a[i])a[i]=1;}\r\n\tfor (int i=1;i<=m;i++) printf(\"%d\\n\",a[i]);\r\n\treturn 0;\r\n}\r\n"
}