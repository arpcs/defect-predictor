{
    "id": 154976371,
    "contestId": 592,
    "creationTimeSeconds": 1650916882,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 592,
        "index": "A",
        "name": "PawnChess",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1200,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 592,
        "members": [
            {
                "handle": "crowdforces"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1446309000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <experimental/random>\n\nclass EmptyList { };\nclass EmptyDict { };\n\ntemplate <class T, class S>\nstruct CommonType { };\n\nstruct String;\n\ntemplate <class T>\nstruct List {\n    std::shared_ptr<std::vector<T>> inner;\n\n    List() : inner(std::shared_ptr<std::vector<T>>(new std::vector<T>())) {}\n    List(std::vector<T> a) : inner(std::shared_ptr<std::vector<T>>(new std::vector<T>(a))) {}\n    template <class S>\n    List(List<S> a) : inner(std::shared_ptr<std::vector<T>>(new std::vector<T>(a.inner->begin(), a.inner->end()))) {}\n    List(EmptyList) : inner(std::shared_ptr<std::vector<T>>(new std::vector<T>())) {}\n    T &operator[](size_t index) { return (*inner)[index]; }\n    const T &operator[](size_t index) const { return (*inner)[index]; }\n    void push(T value) { inner->push_back(value); }\n    void pop() { inner->pop_back(); }\n    int64_t length() const { return inner->size(); }\n\n    template <class SortFn>\n    void sort(SortFn sortFn) { std::sort(inner->begin(), inner->end(), sortFn); }\n\n    template <class S>\n    List<typename CommonType<T, S>::inner> concat(List<S> other) { List<typename CommonType<T, S>::inner> ret = EmptyList(); ret.inner->insert(ret.inner->end(), inner->begin(), inner->end()); ret.inner->insert(ret.inner->end(), other.inner->begin(), other.inner->end()); return ret; }\n    String join(String delim);\n};\n\nstruct String {\n    std::shared_ptr<std::string> inner;\n\n    String() : inner(std::shared_ptr<std::string>(new std::string())) {}\n    String(const char* a) : inner(std::shared_ptr<std::string>(new std::string(a))) {}\n    String(std::string a) : inner(std::shared_ptr<std::string>(new std::string(a))) {}\n    String operator +(String other) { return String(*inner + *other.inner); }\n    operator std::string() { return *inner; }\n    String operator[](size_t index) const { return String(std::string({(*inner)[index]})); }\n    int64_t charCodeAt(size_t index) const { return (*inner)[index]; }\n    String operator+(String &other) const { return String(*inner + *other.inner); }\n    String& operator+=(const String &other) { *inner += *other.inner; return *this; }\n    char operator <(const String &other) const { return *inner < *other.inner; }\n    char operator >(const String &other) const { return *inner > *other.inner; }\n    char operator <=(const String &other) const { return *inner <= *other.inner; }\n    char operator >=(const String &other) const { return *inner >= *other.inner; }\n    char operator ==(const String &other) const { return *inner == *other.inner; }\n    char operator !=(const String &other) const { return *inner != *other.inner; }\n    int64_t length() const { return inner->size(); }\n\n    String trim() {\n        std::string s = *inner;\n        const char* ws = \" \\t\\n\\r\\f\\v\";\n        s.erase(s.find_last_not_of(ws) + 1);\n        s.erase(0, s.find_first_not_of(ws));\n        return String(s);\n    }\n    List<String> split(String delim) { std::vector<String> ret; size_t last = 0; size_t next = 0; while ((next = inner->find(*delim.inner, last)) != std::string::npos) {   ret.push_back(String(inner->substr(last, next-last)));   last = next + delim.length(); } ret.push_back(String(inner->substr(last))); return ret; }\n};\n\ntemplate<> String List<String>::join(String delim) {\n    std::string ret; bool first = true; for (const auto& it: *inner) { if (!first) ret += *delim.inner; first = false; ret += *it.inner; } return ret;\n}\n\ntemplate <class K, class V> \nstruct Dict {\n    using Inner = __gnu_pbds::tree<K, V, std::less<K>, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;\n    std::shared_ptr<Inner> inner;\n\n    Dict() : inner(std::shared_ptr<Inner>(new Inner())) {}\n    Dict(std::vector<std::pair<K, V>> a) : inner(std::shared_ptr<Inner>(new Inner(a.begin(), a.end()))) {}\n    template <class K2, class V2>\n    Dict(Dict<K2, V2> a) : inner(std::shared_ptr<Inner>(new Inner(a.inner->begin(), a.inner->end()))) {}\n    Dict(EmptyDict) : inner(std::shared_ptr<Inner>(new Inner())) {}\n    V &operator[](K key) { return (*inner)[key]; }\n    const V &operator[](K key) const { return (*inner)[key]; }\n    int64_t length() const { return inner->size(); }\n    bool contains(const K& k) const { return inner->find(k) != inner->end(); }\n    void remove(const K& k) const { inner->erase(k); }\n    K keyAt(int64_t pos) const { return inner->find_by_order(pos)->first; }\n    int64_t bisect(const K& value) const { return inner->order_of_key(value); }\n\n    List<K> keys() const { std::vector<K> ret; for (auto const& it: *inner) { ret.push_back(it.first); }; return List<K>(ret); }\n};\n\ntemplate <class T> struct CommonType<List<T>, EmptyList> { using inner = List<T>; };\ntemplate <class T> struct CommonType<EmptyList, List<T>> { using inner = List<T>; };\ntemplate <class T, class S> struct CommonType<List<T>, List<S>> { using inner = List<typename CommonType<T, S>::inner>; };\n\ntemplate <class T> struct CommonType<std::nullptr_t, std::shared_ptr<T>> { using inner = std::shared_ptr<T>; };\ntemplate <class T> struct CommonType<std::shared_ptr<T>, std::nullptr_t> { using inner = std::shared_ptr<T>; };\n\ntemplate <class K, class V> struct CommonType<Dict<K, V>, EmptyDict> { using inner = Dict<K, V>; };\ntemplate <class K, class V> struct CommonType<EmptyDict, Dict<K, V>> { using inner = Dict<K, V>; };\ntemplate <class K, class V, class K2, class V2> struct CommonType<Dict<K, V>, Dict<K2, V2>> { using inner = Dict<typename CommonType<K, K2>::inner, typename CommonType<V, V2>::inner>; };\n\ntemplate <> struct CommonType<int64_t, int64_t> { using inner = int64_t; };\ntemplate <> struct CommonType<EmptyList, EmptyList> { using inner = EmptyList; };\ntemplate <> struct CommonType<EmptyDict, EmptyDict> { using inner = EmptyDict; };\ntemplate <> struct CommonType<std::nullptr_t, std::nullptr_t> { using inner = std::nullptr_t; };\ntemplate <> struct CommonType<char, char> { using inner = char; };\ntemplate <> struct CommonType<String, String> { using inner = String; };\n\nint64_t cast_int(int64_t x) { return x; }\nint64_t cast_int(double x) { return x; }\nint64_t cast_int(String x) { return std::strtoll(x.inner->c_str(), NULL, 10); }\n\ndouble cast_float(int64_t x) { return x; }\ndouble cast_float(double x) { return x; }\ndouble cast_float(String x) { return std::strtod(x.inner->c_str(), NULL); }\n\nString cast_str(int64_t x) { return String(std::to_string(x)); }\nString cast_str(double x) { return String(std::to_string(x)); }\nString cast_str(bool x) { return String(std::to_string(x)); }\nString cast_str(String x) { return x; }\n\nbool rand_bool() { return rand() % 100 < 50; }\nint64_t rand_int(int64_t upper) { return std::experimental::randint(int64_t(0), upper); }\nString chr(int64_t x) { return String(std::string({(char)x})); }\n\ntemplate <class T>\nstruct TypeHolder { };\n\ntemplate <class T, class S, class Filter, class Mapper>\nList<T> linq(const List<S> &input, Filter filter, Mapper mapper, TypeHolder<T> type_holder) {\n    List<T> ret;\n    for (const auto &it: *input.inner) {\n        if (filter(it)) {\n            ret.push(mapper(it));\n        }\n    }\n    return ret;\n}\n\n\nString solve(String input);\nString solve(String input) {\nList<String> lines = (input).split(String(\"\\n\"));\nList<List<int64_t>> has_black_above = EmptyList();\nList<List<int64_t>> has_white_below = EmptyList();\nint64_t N = 8ll;\nfor (int64_t i = 0ll; (i<N); i+=1ll) {\n(has_black_above).push(EmptyList());\n(has_white_below).push(EmptyList());\nfor (int64_t j = 0ll; (j<N); j+=1ll) {\n((has_black_above)[i]).push(0ll);\n((has_white_below)[i]).push(0ll);\n\n}\n\n}\nfor (int64_t line = 1ll; (line<N); line+=1ll) {\nfor (int64_t col = 0ll; (col<N); col+=1ll) {\nif ((((lines)[(line-1ll)])[col]==String(\"B\"))) {\n((has_black_above)[line])[col] = 1ll;\n} else {((has_black_above)[line])[col] = ((has_black_above)[(line-1ll)])[col];\n}\nint64_t another_line = (7ll-line);\nif ((((lines)[(another_line+1ll)])[col]==String(\"W\"))) {\n((has_white_below)[another_line])[col] = 1ll;\n} else {((has_white_below)[another_line])[col] = ((has_white_below)[(another_line+1ll)])[col];\n}\n\n}\n\n}\nint64_t min_distance_white = 100ll;\nint64_t min_distance_black = 100ll;\nfor (int64_t line = 0ll; (line<N); line+=1ll) {\nfor (int64_t col = 0ll; (col<N); col+=1ll) {\nif ((((((lines)[line])[col]==String(\"W\"))&&(((has_black_above)[line])[col]==0ll))&&(line<min_distance_white))) {\nmin_distance_white = line;\n}\nif ((((((lines)[line])[col]==String(\"B\"))&&(((has_white_below)[line])[col]==0ll))&&(((7ll-line))<min_distance_black))) {\nmin_distance_black = (7ll-line);\n}\n\n}\n\n}\nif ((min_distance_white<=min_distance_black)) {\nreturn String(\"A\");\n} else {return String(\"B\");\n}\n}\nint main() { std::ios::sync_with_stdio(false) ; std::cin.tie(0) ; std::cout.tie(0) ; std::string line, input; while (std::getline(std::cin, line)) { input += line + \"\\n\"; } std::cout << *solve(String(input)).inner; return 0; }/*1650916881.6295545*/"
}