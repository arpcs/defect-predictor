{
    "id": 224417731,
    "contestId": 1348,
    "creationTimeSeconds": 1695310509,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1348,
        "index": "F",
        "name": "Phoenix and Memory",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1348,
        "members": [
            {
                "handle": "tarjen"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588343700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 109,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 17715200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn=200010;\r\nstruct Treearray{\r\n    int c[maxn],n;\r\n    void set_n(int _n){\r\n        n=_n;\r\n        for(int i=1;i<=n;i++)c[i]=0;\r\n    }\r\n    int lowbit(int x){\r\n        return x&(-x);\r\n    }\r\n    void update(int i,int k){    //\u5728i\u4f4d\u7f6e\u52a0\u4e0ak\r\n        while(i <= n){\r\n            c[i] += k;\r\n            i += lowbit(i);\r\n        }\r\n    }\r\n    int getsum(int i){        //\u6c42A[1 - i]\u7684\u548c\r\n        int res = 0;\r\n        while(i > 0){\r\n            res += c[i];\r\n            i -= lowbit(i);\r\n        }\r\n        return res;\r\n    }\r\n};\r\nTreearray tri;\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int n;cin>>n;\r\n    vector<int> a(n+1);\r\n    vector<int> L(n+1),R(n+1);\r\n    vector<tuple<int,int,int>> v;\r\n    for(int i=1;i<=n;i++){\r\n        int l,r;\r\n        cin>>l>>r;\r\n        L[i]=l;\r\n        R[i]=r;\r\n        v.emplace_back(l,r,i);\r\n    }\r\n    sort(v.begin(),v.end(),[&](tuple<int,int,int>a,tuple<int,int,int> b){\r\n        auto [l1,r1,i1]=a;\r\n        auto [l2,r2,i2]=b;\r\n        return make_pair(r1,l1)<make_pair(r2,l2);\r\n    });\r\n    set<int> s;\r\n    vector<int>p(n+1);\r\n    for(int i=1;i<=n;i++)s.insert(i);\r\n    for(auto [l,r,i]:v){\r\n        auto it=s.lower_bound(l);\r\n        a[i]=*it;\r\n        p[*it]=i;\r\n        s.erase(it);\r\n    }\r\n    tri.set_n(n);\r\n    sort(v.begin(),v.end(),[&](tuple<int,int,int>a,tuple<int,int,int> b){\r\n        auto [l1,r1,i1]=a;\r\n        auto [l2,r2,i2]=b;\r\n        return r1-l1<r2-l2;\r\n    });\r\n    for(auto [l,r,i]:v){\r\n        if(tri.getsum(r)-tri.getsum(l-1)==r-l){\r\n            tri.update(a[i],1);continue;\r\n        }   \r\n        auto it=s.lower_bound(a[i]);\r\n        if(it!=s.end()){\r\n            int x=*it;\r\n            if(x<=r&&L[p[x]]<=a[i]){\r\n                vector<int> a2=a;\r\n                swap(a2[i],a2[p[x]]);\r\n                cout<<\"NO\\n\";\r\n                for(int i=1;i<=n;i++)cout<<a[i]<<\" \\n\"[i==n];\r\n                for(int i=1;i<=n;i++)cout<<a2[i]<<\" \\n\"[i==n];\r\n                return 0;\r\n            }\r\n        }\r\n        if(it!=s.begin()){\r\n            int x=*prev(it);\r\n            if(x>=l&&R[p[x]]>=a[i]){\r\n                vector<int> a2=a;\r\n                swap(a2[i],a2[p[x]]);\r\n                cout<<\"NO\\n\";\r\n                for(int i=1;i<=n;i++)cout<<a[i]<<\" \\n\"[i==n];\r\n                for(int i=1;i<=n;i++)cout<<a2[i]<<\" \\n\"[i==n];\r\n                return 0;\r\n            }\r\n        }\r\n        s.insert(a[i]);\r\n    }\r\n    cout<<\"YES\\n\";\r\n    for(int i=1;i<=n;i++)cout<<a[i]<<\" \\n\"[i==n];\r\n    return 0;\r\n}"
}