{
    "id": 223069588,
    "contestId": 1348,
    "creationTimeSeconds": 1694514451,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1348,
        "index": "F",
        "name": "Phoenix and Memory",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1348,
        "members": [
            {
                "handle": "kernel-panic"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588343700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\r\n#include <utility>\r\n#include <algorithm>\r\n#define debug(...) fprintf(stderr, __VA_ARGS__)\r\n\r\ninline int rd() {\r\n\tint x = 0, f = 1, c = getchar();\r\n\twhile (((c - '0') | ('9' - c)) < 0)\r\n\t\tf = c != '-', c = getchar();\r\n\twhile (((c - '0') | ('9' - c)) > 0)\r\n\t\tx = x * 10 + c - '0', c = getchar();\r\n\treturn f ? x : -x;\r\n}\r\n\r\nusing pii = std::pair<int, int>;\r\n\r\nconst int N = 2e5;\r\n\r\nint n;\r\npii a[N + 5]; int pos[N + 5];\r\nint p[N + 5];\r\n\r\n#define lch (p * 2)\r\n#define rch (p * 2 + 1)\r\n#define mid ((cl + cr) / 2)\r\nstruct node {\r\n\tint c, tg;\r\n\tvoid upd(int v) {\r\n\t\tc = tg = v;\r\n\t}\r\n} t[N * 4 + 5];\r\nvoid pushdown(int p) {\r\n\tif(!t[p].tg) return;\r\n\tt[lch].upd(t[p].tg), t[rch].upd(t[p].tg);\r\n\tt[p].tg = 0;\r\n}\r\nvoid upd(int l, int r, int v, int p = 1, int cl = 1, int cr = n) {\r\n\tif(cl == l && cr == r) return t[p].upd(v);\r\n\tpushdown(p);\r\n\tif(r <= mid) upd(l, r, v, lch, cl, mid);\r\n\telse if(l > mid) upd(l, r, v, rch, mid + 1, cr);\r\n\telse upd(l, mid, v, lch, cl, mid), upd(mid + 1, r, v, rch, mid + 1, cr);\r\n}\r\nint que(int x, int p = 1, int cl = 1, int cr = n) {\r\n\tif(cl == cr) return t[p].c;\r\n\tpushdown(p);\r\n\treturn (x <= mid) ? que(x, lch, cl, mid) : que(x, rch, mid + 1, cr);\r\n}\r\n#undef lch\r\n#undef rch\r\n#undef mid\r\n\r\nstruct Q { int x, flg, id; }; std::vector<Q> q[N + 5]; int ans[N + 5], pre[N + 5];\r\n\r\nint main() {\r\n\tn = rd();\r\n\tfor(int i = 1; i <= n; i++) a[i] = {rd(), rd()}, pos[i] = i;\r\n\tstd::sort(pos + 1, pos + 1 + n, [](int i, int j) { return a[i] < a[j]; });\r\n\tfor(int i = 1; i <= n; i++) p[pos[i]] = i;\r\n\r\n\tfor(int i = 1; i <= n; i++) {\r\n\t\tauto [l, r] = a[i];\r\n\t\tq[l - 1].push_back({p[i], -1, i});\r\n\t\tq[r].push_back({p[i], 1, i});\r\n\t}\r\n\tfor(int i = 1; i <= n; i++) {\r\n\t\tupd(a[pos[i]].first, a[pos[i]].second, pos[i]);\r\n\t\tfor(auto [x, flg, id] : q[i]) {\r\n\t\t\tint c = que(x);\r\n\t\t\tif(pre[id]) { if(c != pre[id]) ans[id] = c; }\r\n\t\t\telse pre[id] = c;\r\n\t\t}\r\n\t}\r\n\tfor(int i = 1; i <= n; i++) {\r\n\t\tif(ans[i] && ans[i] != i) {\r\n\t\t\tputs(\"NO\");\r\n\t\t\tfor(int j = 1; j <= n; j++) printf(\"%d%c\", p[j], \" \\n\"[j == n]);\r\n\t\t\tstd::swap(p[i], p[ans[i]]);\r\n\t\t\tfor(int j = 1; j <= n; j++) printf(\"%d%c\", p[j], \" \\n\"[j == n]);\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\tputs(\"YES\");\r\n\tfor(int i = 1; i <= n; i++) printf(\"%d%c\", p[i], \" \\n\"[i == n]);\r\n\treturn 0;\r\n}\r\n"
}