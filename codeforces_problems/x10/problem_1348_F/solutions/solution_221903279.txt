{
    "id": 221903279,
    "contestId": 1348,
    "creationTimeSeconds": 1693899887,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1348,
        "index": "F",
        "name": "Phoenix and Memory",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1348,
        "members": [
            {
                "handle": "ORzyzRO"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588343700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 109,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 20787200,
    "source": "// LUOGU_RID: 123851519\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define pr pair<int, int>\r\n#define pb push_back\r\n#define mid (l + r) / 2\r\n#define ls num << 1\r\n#define rs num << 1 | 1\r\n#define lowbit(x) (x & (-x))\r\n\r\nconst int N = 2e5 + 5;\r\n\r\npriority_queue<pr, vector<pr>, greater<pr> > h;\r\n\r\nstruct node {\r\n    int l, r, id, ans;\r\n} a[N], b[N];\r\n\r\nint tr[N], n;\r\n\r\ninline int read() {\r\n    int x = 0, m = 1;\r\n    char ch = getchar();\r\n\r\n    while (!isdigit(ch)) {\r\n        if (ch == '-') m = -1;\r\n        ch = getchar();\r\n    }\r\n\r\n    while (isdigit(ch)) {\r\n        x = x * 10 + ch - 48;\r\n        ch = getchar();\r\n    }\r\n\r\n    return x * m;\r\n}\r\n\r\ninline void write(int x) {\r\n    if (x < 0) {\r\n        putchar('-');\r\n        write(-x);\r\n        return;\r\n    }\r\n\r\n    if (x >= 10) write(x / 10);\r\n    putchar(x % 10 + 48);\r\n}\r\n\r\nvoid add(int x, int y) {\r\n    for (int i = x; i; i -= lowbit(i)) {\r\n        tr[i] = max(tr[i], y);\r\n    }\r\n}\r\n\r\nint query(int x) {\r\n    int y = 0;\r\n\r\n    for (int i = x; i <= n; i += lowbit(i)) {\r\n        y = max(y, tr[i]);\r\n    }\r\n\r\n    return y;\r\n}\r\n\r\nsigned main() {\r\n    n = read();\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        a[i].l = read(), a[i].r = read();\r\n        a[i].id = i;\r\n    }\r\n\r\n    sort(a + 1, a + n + 1, [](node x, node y) {\r\n        return x.l < y.l || (x.l == y.l && x.r < y.r);\r\n    });\r\n\r\n    int t = 0;\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        while (t < n && a[t + 1].l <= i) {\r\n            t++;\r\n            h.push({a[t].r, t});\r\n        }\r\n\r\n        a[h.top().second].ans = i;\r\n        h.pop();\r\n    }\r\n\r\n    sort(a + 1, a + n + 1, [](node x, node y) {\r\n        return x.ans < y.ans;\r\n    });\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        if (query(a[i].l) >= i) {\r\n            for (int j = 1; j <= n; j++) {\r\n                b[j] = a[j];\r\n            }\r\n\r\n            sort(b + 1, b + n + 1, [](node x, node y) {\r\n                return x.id < y.id;\r\n            });\r\n\r\n            t = 0;\r\n\r\n            for (int j = a[i].l; j < i; j++) {\r\n                if (a[j].r >= i) {\r\n                    t = j;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            swap(a[t].ans, a[i].ans);\r\n\r\n            sort(a + 1, a + n + 1, [](node x, node y) {\r\n                return x.id < y.id;\r\n            });\r\n\r\n            puts(\"NO\");\r\n\r\n            for (int i = 1; i <= n; i++) {\r\n                write(b[i].ans);\r\n                putchar(' ');\r\n            }\r\n            putchar('\\n');\r\n\r\n            for (int i = 1; i <= n; i++) {\r\n                write(a[i].ans);\r\n                putchar(' ');\r\n            }\r\n            putchar('\\n');\r\n\r\n            return 0;\r\n        }\r\n\r\n        add(i, a[i].r);\r\n    }\r\n\r\n    sort(a + 1, a + n + 1, [](node x, node y) {\r\n        return x.id < y.id;\r\n    });\r\n\r\n    puts(\"YES\");\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        write(a[i].ans);\r\n        putchar(' ');\r\n    }\r\n}"
}