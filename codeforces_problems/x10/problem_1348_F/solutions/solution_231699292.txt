{
    "id": 231699292,
    "contestId": 1348,
    "creationTimeSeconds": 1699351397,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1348,
        "index": "F",
        "name": "Phoenix and Memory",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2600,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1348,
        "members": [
            {
                "handle": "raresmihai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588343700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 7987200,
    "source": "#include <iostream>\r\n#include <queue>\r\n#include <vector>\r\n\r\n#define MAXN 200000\r\nusing namespace std;\r\n\r\nstruct infoSegm{\r\n  int r, id;\r\n};\r\n\r\nstruct infoVal{\r\n  int pos, id;\r\n};\r\n\r\nbool operator<(infoSegm a, infoSegm b) {\r\n  return a.r > b.r;\r\n}\r\n\r\nbool operator<(infoVal a, infoVal b) {\r\n  return a.pos > b.pos;\r\n}\r\n\r\nint ans[MAXN][2];\r\nvector <infoSegm> toAdd[MAXN];\r\nint v[MAXN][2];\r\npriority_queue <infoSegm> pq;\r\npriority_queue <infoVal> pqForVal;\r\n\r\nbool notIncluded(int pos, int id) {\r\n  return !(v[id][0] <= pos && pos <= v[id][1]);\r\n}\r\n\r\nint main() {\r\n  int n, a, b, i;\r\n  bool ok;\r\n\r\n  scanf(\"%d\", &n);\r\n\r\n  for ( i = 0; i < n; i++ ) {\r\n    scanf(\"%d%d\", &a, &b);\r\n\r\n    a--;\r\n    b--;\r\n    v[i][0] = a;\r\n    v[i][1] = b;\r\n    toAdd[a].push_back({b, i});\r\n  }\r\n\r\n  for ( i = 0; i < n; i++ ) {\r\n    for ( infoSegm x : toAdd[i] ) {\r\n      pq.push(x);\r\n    }\r\n\r\n    ans[pq.top().id][0] = ans[pq.top().id][1] = i;\r\n    pq.pop();\r\n  }\r\n\r\n  ok = true;\r\n  for ( i = 0; i < n && ok; i++ ) {\r\n    while ( pqForVal.size() && (notIncluded(i, pqForVal.top().id) || i > pqForVal.top().pos) ) {\r\n      pqForVal.pop();\r\n    }\r\n\r\n    for ( infoSegm x : toAdd[i] ) {\r\n      if ( pqForVal.size() && ok ) {\r\n        if ( pqForVal.top().pos <= v[x.id][1] ) {\r\n          ok = false;\r\n          swap(ans[x.id][1], ans[pqForVal.top().id][1]);\r\n        }\r\n      }\r\n      pqForVal.push({ans[x.id][0], x.id});\r\n    }\r\n  }\r\n\r\n  if ( !ok ) {\r\n    printf(\"NO\\n\");\r\n\r\n    for ( i = 0; i < n; i++ ) {\r\n      printf(\"%d \", ans[i][0] + 1);\r\n    }\r\n    printf(\"\\n\");\r\n    for ( i = 0; i < n; i++ ) {\r\n      printf(\"%d \", ans[i][1] + 1);\r\n    }\r\n  } else {\r\n    printf(\"YES\\n\");\r\n\r\n    for ( i = 0; i < n; i++ ) {\r\n      printf(\"%d \", ans[i][0] + 1);\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n"
}