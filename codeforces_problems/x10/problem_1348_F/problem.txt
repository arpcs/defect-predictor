{
    "contestId": 1348,
    "index": "F",
    "name": "Phoenix and Memory",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 2600,
    "tags": [
        "data structures",
        "dfs and similar",
        "graphs",
        "greedy"
    ],
    "desc": {
        "title": "F. Phoenix and Memory",
        "statement": "<p>Phoenix is trying to take a photo of his $$$n$$$ friends with labels $$$1, 2, \\dots, n$$$ who are lined up in a row in a special order. But before he can take the photo, his friends get distracted by a duck and mess up their order.</p><p>Now, Phoenix must restore the order but he doesn't remember completely! He only remembers that the $$$i$$$-th friend from the left had a label between $$$a_i$$$ and $$$b_i$$$ inclusive. Does there exist a unique way to order his friends based of his memory? </p>",
        "inputSpecification": "<p>The first line contains one integer $$$n$$$ ($$$1 \\le n \\le 2\\cdot10^5$$$) \u00a0\u2014 the number of friends.</p><p>The $$$i$$$-th of the next $$$n$$$ lines contain two integers $$$a_i$$$ and $$$b_i$$$ ($$$1 \\le a_i \\le b_i \\le n$$$) \u00a0\u2014 Phoenix's memory of the $$$i$$$-th position from the left.</p><p>It is guaranteed that Phoenix's memory is valid so there is at least one valid ordering.</p>",
        "outputSpecification": "<p>If Phoenix can reorder his friends in a unique order, print <span class=\"tex-font-style-tt\">YES</span> followed by $$$n$$$ integers \u00a0\u2014 the $$$i$$$-th integer should be the label of the $$$i$$$-th friend from the left.</p><p>Otherwise, print <span class=\"tex-font-style-tt\">NO</span>. Then, <span class=\"tex-font-style-bf\">print any two distinct valid orderings</span> on the following two lines. If are multiple solutions, print any.</p>",
        "samples": [
            {
                "input": "\n4\n4 4\n1 3\n2 4\n3 4\n",
                "output": "\nYES\n4 1 2 3 \n"
            },
            {
                "input": "\n4\n1 3\n2 4\n3 4\n2 3\n",
                "output": "\nNO\n1 3 4 2 \n1 2 4 3 \n"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "algorithm design",
        "combinatorics",
        "data structures",
        "graph theory",
        "dynamic programming",
        "sorting",
        "greedy algorithms",
        "backtracking",
        "constraint satisfaction",
        "permutations and combinations",
        "range queries",
        "mathematics",
        "logic",
        "puzzle solving",
        "set theory",
        "topological sorting",
        "enumeration",
        "validity checking",
        "optimization",
        "problem solving"
    ]
}