{
    "contestId": 1508,
    "index": "C",
    "name": "Complete the MST",
    "type": "PROGRAMMING",
    "points": 1500.0,
    "rating": 2500,
    "tags": [
        "bitmasks",
        "brute force",
        "data structures",
        "dfs and similar",
        "dsu",
        "graphs",
        "greedy",
        "trees"
    ],
    "desc": {
        "title": "C. Complete the MST",
        "statement": "<p>As a teacher, Riko Hakozaki often needs to help her students with problems from various subjects. Today, she is asked a programming task which goes as follows.</p><p>You are given an undirected complete graph with $$$n$$$ nodes, where some edges are pre-assigned with a positive weight while the rest aren't. You need to assign all unassigned edges with <span class=\"tex-font-style-bf\">non-negative weights</span> so that in the resulting fully-assigned complete graph the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">XOR</a> sum of all weights would be equal to $$$0$$$.</p><p>Define the <span class=\"tex-font-style-it\">ugliness</span> of a fully-assigned complete graph the weight of its <a href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree\">minimum spanning tree</a>, where the weight of a spanning tree equals the sum of weights of its edges. You need to assign the weights so that the ugliness of the resulting graph is as small as possible.</p><p>As a reminder, an undirected complete graph with $$$n$$$ nodes contains all edges $$$(u, v)$$$ with $$$1 \\le u &lt; v \\le n$$$; such a graph has $$$\\frac{n(n-1)}{2}$$$ edges.</p><p>She is not sure how to solve this problem, so she asks you to solve it for her.</p>",
        "inputSpecification": "<p>The first line contains two integers $$$n$$$ and $$$m$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$, $$$0 \\le m \\le \\min(2 \\cdot 10^5, \\frac{n(n-1)}{2} - 1)$$$) \u00a0\u2014 the number of nodes and the number of pre-assigned edges. The inputs are given so that there is at least one unassigned edge.</p><p>The $$$i$$$-th of the following $$$m$$$ lines contains three integers $$$u_i$$$, $$$v_i$$$, and $$$w_i$$$ ($$$1 \\le u_i, v_i \\le n$$$, $$$u \\ne v$$$, $$$1 \\le w_i &lt; 2^{30}$$$), representing the edge from $$$u_i$$$ to $$$v_i$$$ has been pre-assigned with the weight $$$w_i$$$. No edge appears in the input more than once.</p>",
        "outputSpecification": "<p>Print on one line one integer \u00a0\u2014 the minimum ugliness among all weight assignments with XOR sum equal to $$$0$$$.</p>",
        "samples": [
            {
                "input": "\n4 4\n2 1 14\n1 4 14\n3 2 15\n4 3 8\n",
                "output": "\n15\n"
            },
            {
                "input": "\n6 6\n3 6 4\n2 4 1\n4 5 7\n3 4 10\n3 5 1\n5 2 15\n",
                "output": "\n0\n"
            },
            {
                "input": "\n5 6\n2 3 11\n5 3 7\n1 4 10\n2 4 14\n4 3 8\n2 5 6\n",
                "output": "\n6\n"
            }
        ],
        "note": "<p>The following image showcases the first test case. The black weights are pre-assigned from the statement, the red weights are assigned by us, and the minimum spanning tree is denoted by the blue edges.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/a7a280c2f88b120ff0839966d25330c968719a1c.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center>"
    },
    "suggested_categories": [
        "graph theory",
        "minimum spanning tree",
        "complete graph",
        "weighted graph",
        "xor",
        "optimization",
        "dynamic programming",
        "algorithmic problem solving",
        "mathematics",
        "combinatorics",
        "networks",
        "data structures",
        "greedy algorithm",
        "integer programming",
        "graph algorithms",
        "computer science",
        "programming contest",
        "competitive programming",
        "codeforces",
        "problem solving"
    ]
}