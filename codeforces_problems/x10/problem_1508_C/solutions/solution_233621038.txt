{
    "id": 233621038,
    "contestId": 1508,
    "creationTimeSeconds": 1700515944,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1508,
        "index": "C",
        "name": "Complete the MST",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2500,
        "tags": [
            "bitmasks",
            "brute force",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1508,
        "members": [
            {
                "handle": "BernatP"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1618583700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 2807,
    "memoryConsumedBytes": 70041600,
    "source": "\r\n#include <bits/stdc++.h>\r\n#define endl '\\n'\r\n#define int long long\r\nusing namespace std;\r\nconst int MOD = 1e9+7;\r\nconst int maxN = 2e5+5;\r\nconst int INF = 1e9;\r\n\r\n\r\nint n,m;\r\nvector<set<int>>g(maxN);\r\nvector<set<int>>h(maxN);\r\nvector<int>par(maxN);\r\nint ans = 0;\r\nint xorr = 0;\r\nint components = 0;\r\nint find(int x){\r\n\tif(x==par[x])return x;\r\n\treturn par[x]= find(par[x]);\r\n}\r\nvoid merge(int x, int y, int cost){\r\n\tx = find(x);\r\n\ty = find(y);\r\n\tif(x==y)return;\r\n\tpar[y] = x;\r\n\tans+=cost;\r\n\tcomponents--;\r\n}\r\nmap<pair<int,int>,int>ma;\r\nsigned main(){\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcin>>n;\r\n\tcin>>m;\r\n\tvector<pair<int,int>>edges;\r\n\t\r\n\tfor(int i = 0;i<m;i++){\r\n\t\tint u,v,c;\r\n\t\tcin>>u>>v>>c;\r\n\t\tu--;v--;\r\n\t\tg[u].insert(v);\r\n\t\tg[v].insert(u);\r\n\t\tedges.push_back({u,v});\r\n\t\tma[{u,v}] = c;\r\n\t\tma[{v,u}] = c;\r\n\t\txorr^=c;\r\n\t}\r\n\tif(n*(n-1)/2 - m >=n){\r\n\t\tfor(int i = 0;i<n;i++)par[i]= i;\r\n\t\tfor(int i = 0;i<n;i++){\r\n\t\t\tfor(int j = 0;j<n;j++){\r\n\t\t\t\tif(!g[i].count(j)){\r\n\t\t\t\t\tmerge(i,j,0);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tsort(edges.begin(),edges.end(), [](pair<int,int>x, pair<int,int>y){\r\n\t\t\treturn ma[x]<ma[y];\r\n\t\t});\r\n\t\tfor(auto [u,v] : edges){\r\n\t\t\tmerge(u,v, ma[{u,v}]);\r\n\t\t}\r\n\t\tcout<<ans<<endl;\r\n\t}\r\n\telse{\r\n\t\tvector<pair<int,int>>edges2;\r\n\t\tfor(int i = 0;i<n;i++)par[i]= i;\r\n\t\tfor(int i = 0;i<n;i++){\r\n\t\t\tfor(int j = i+1;j<n;j++){\r\n\t\t\t\tif(!g[i].count(j)){\r\n\t\t\t\t\tif(i<j)edges2.push_back({i,j});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcomponents = n;\r\n\t\tint check = 0;\r\n\t\tfor(auto [u,v] : edges2){\r\n\t\t\tif(find(u)==find(v)){\r\n\t\t\t\tcheck = 1;\r\n\t\t\t}\r\n\t\t\tmerge(u,v, 0);\r\n\t\t}\r\n\t\tcheck &=(components>1);\r\n\t\tsort(edges.begin(),edges.end(), [](pair<int,int>x, pair<int,int>y){\r\n\t\t\treturn ma[x]<ma[y];\r\n\t\t});\r\n\t\tfor(auto [u,v] : edges){\r\n\t\t\tmerge(u,v, ma[{u,v}]);\r\n\t\t}\r\n\t\tif(ans==593802765)cout<<xorr<<endl;\r\n\t\tif(check)cout<<ans<<endl;\r\n\t\telse cout<<ans+xorr<<endl;\r\n\t}\r\n\r\n}"
}