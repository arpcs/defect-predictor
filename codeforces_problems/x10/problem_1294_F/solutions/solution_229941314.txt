{
    "id": 229941314,
    "contestId": 1294,
    "creationTimeSeconds": 1698365202,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1294,
        "index": "F",
        "name": "Three Paths on a Tree",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1294,
        "members": [
            {
                "handle": "luogu_bot2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1579703700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 305,
    "timeConsumedMillis": 685,
    "memoryConsumedBytes": 16588800,
    "source": "// LUOGU_RID: 131792458\n#include <bits/stdc++.h>\r\n\r\nint main() {\r\n  int n;\r\n  std::cin >> n;\r\n  std::vector<std::vector<int>> ed(n);\r\n  for (int i = 1; i < n; ++i) {\r\n    int u, v;\r\n    std::cin >> u >> v;\r\n    --u, --v;\r\n    ed[u].push_back(v);\r\n    ed[v].push_back(u);\r\n  }\r\n\r\n  auto bfs = [&ed, n](std::vector<int> s = {}) {\r\n    std::vector<int> dis(n, 0x3f3f3f3f), fa(n, -1);\r\n    std::queue<int> q;\r\n    for (auto i : s) dis[i] = 0, q.push(i);\r\n    while (q.size()) {\r\n      int x = q.front();\r\n      q.pop();\r\n      for (auto i : ed[x]) {\r\n\tif (dis[i] != 0x3f3f3f3f) continue;\r\n\tdis[i] = dis[x] + 1;\r\n\tfa[i] = x;\r\n\tq.push(i);\r\n      }\r\n    }\r\n    return std::make_pair(dis, fa);\r\n  };\r\n\r\n  auto [dis1, fa1] = bfs({0});\r\n  auto [dis2, fa2] = bfs({(int)(std::max_element(dis1.begin(), dis1.end()) - dis1.begin())});\r\n\r\n  int s = std::max_element(dis1.begin(), dis1.end()) - dis1.begin();\r\n  int t = std::max_element(dis2.begin(), dis2.end()) - dis2.begin();\r\n  int p = t;\r\n  std::vector<int> d;\r\n  while (~p) {\r\n    d.push_back(p);\r\n    p = fa2[p];\r\n  }\r\n\r\n  auto [dis3, fa3] = bfs(d);\r\n  int u = std::max_element(dis3.begin(), dis3.end()) - dis3.begin();\r\n  if (dis3[u] == 0) u = d[1];\r\n\r\n  std::cout << dis2[t] + dis3[u] << '\\n' << s + 1 << ' ' << t + 1 << ' ' << u + 1 << '\\n';\r\n\r\n  return 0;\r\n\r\n\r\n}\r\n"
}