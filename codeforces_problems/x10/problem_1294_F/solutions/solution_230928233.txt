{
    "id": 230928233,
    "contestId": 1294,
    "creationTimeSeconds": 1698908885,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1294,
        "index": "F",
        "name": "Three Paths on a Tree",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1294,
        "members": [
            {
                "handle": "TKXZ133"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1579703700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 10240000,
    "source": "#include <algorithm>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <cmath>\r\n#include <queue>\r\n\r\nusing namespace std;\r\nconst int N = 200200;\r\n#define inf 0x3f3f3f3f\r\n\r\nint n, in1, in2, res, ans;\r\nint dis[N], vis[N], st[N];\r\n\r\nvector <int> to[N];\r\nqueue <int> qq;\r\n\r\nvoid dfs(int s, int &p){\r\n    if (dis[s] > dis[p]) p = s;\r\n    vis[s] = 1;\r\n    for (auto v : to[s]) {\r\n        if (vis[v]) continue;\r\n        dis[v] = dis[s] + 1;\r\n        dfs(v, p);\r\n    }\r\n}\r\n\r\nint dfs_2(int s, int t){\r\n    if (s == t) return st[s] = 1, 1;\r\n    vis[s] = 1;\r\n    for (auto v : to[s]) {\r\n        if (vis[v]) continue;\r\n        if (dfs_2(v, t)) return st[s] = 1, 1;\r\n    } \r\n    return 0;\r\n}\r\n\r\nint main(){\r\n    // freopen(\"the.in\", \"r\", stdin);\r\n    // freopen(\"the.out\", \"w\", stdout);\r\n    scanf(\"%d\", &n);\r\n    for (int i = 1; i < n; i ++) {\r\n        scanf(\"%d %d\", &in1, &in2);\r\n        to[in1].push_back(in2);\r\n        to[in2].push_back(in1);\r\n    }\r\n    dis[1] = 0; int p = 0; dfs(1, p);\r\n    memset(vis, 0, sizeof vis);\r\n    dis[p] = 0; int q = 0; dfs(p, q);\r\n    memset(vis, 0, sizeof vis);\r\n    dfs_2(p, q);\r\n    memset(vis, 0, sizeof vis);\r\n    for (int i = 1; i <= n; i ++)\r\n        if (st[i]) qq.push(i), dis[i] = 0, res ++;\r\n    while (!qq.empty()) {\r\n        int now = qq.front(); qq.pop();\r\n        if (vis[now]) continue;\r\n        vis[now] = 1;\r\n        for (auto v : to[now]) {\r\n            if (dis[v] <= dis[now] + 1) continue;\r\n            dis[v] = dis[now] + 1;\r\n            qq.push(v);\r\n        }\r\n    }\r\n    int maxp = 0;\r\n    for (int i = 1; i <= n; i ++) \r\n        if (dis[i] > ans) ans = dis[i], maxp = i;\r\n    cout << ans + res - 1 << '\\n';\r\n    cout << p << ' ' << q << ' ' << maxp << '\\n';\r\n    return 0;\r\n}"
}