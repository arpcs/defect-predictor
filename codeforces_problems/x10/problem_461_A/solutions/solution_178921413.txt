{
    "id": 178921413,
    "contestId": 461,
    "creationTimeSeconds": 1667373681,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 461,
        "index": "A",
        "name": "Appleman and Toastman",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1200,
        "tags": [
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 461,
        "members": [
            {
                "handle": "DeadFox"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1409061600
    },
    "programmingLanguage": "Rust 2021",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 8704000,
    "source": "struct Scanner<R> {\n    reader: R,\n    line: Vec<u8>,\n    ptr: usize\n\n}\n\nimpl<R: std::io::BufRead> Scanner<R> {\n    fn new(reader: R) -> Self {\n        Self{reader, line: vec![], ptr: 0}\n    }\n\n    fn scan<T: std::str::FromStr>(&mut self) -> T {\n        loop {\n            while self.ptr < self.line.len() && self.line[self.ptr].is_ascii_whitespace() {\n                self.ptr += 1;\n            }\n            if self.ptr != self.line.len() {\n                let start = self.ptr;\n                while self.ptr < self.line.len() && !self.line[self.ptr].is_ascii_whitespace() {\n                    self.ptr += 1;\n                }\n                return std::str::from_utf8(&self.line[start..self.ptr]).unwrap().parse().ok().\n                    expect(\"parse error\");\n            }\n            self.line.clear();\n            self.reader.read_until(b'\\n', &mut self.line).expect(\"read error\");\n            self.ptr = 0;\n        }\n    }\n\n}\n\nfn solve<R: std::io::BufRead, W: std::io::Write>(scanner: &mut Scanner<R>, writer: &mut W) {\n    let n: usize = scanner.scan();\n    let mut a: Vec<i64> = (0..n).map(|_| scanner.scan()).collect();\n    a.sort_unstable();\n    let result = a.into_iter().enumerate().map(|(i, a)| a * (i + 2).min(n) as i64).sum::<i64>();\n    writeln!(writer, \"{}\", result).unwrap();\n}\n\nfn main() {\n    let (stdin, stdout) = (std::io::stdin(), std::io::stdout());\n    let mut writer = std::io::BufWriter::new(stdout.lock());\n    let mut scanner = Scanner::new(stdin.lock());\n    let tests: usize = 1;\n    for _ in 0..tests {\n        solve(&mut scanner, &mut writer);\n    }\n}\n"
}