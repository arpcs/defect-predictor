{
    "id": 218033116,
    "contestId": 1644,
    "creationTimeSeconds": 1691592082,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1644,
        "index": "E",
        "name": "Expand the Path",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1644,
        "members": [
            {
                "handle": "lAMaLOSER"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1645540500
    },
    "programmingLanguage": "C# 10",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 3788800,
    "source": "using System;\r\nusing System.Linq;\r\nusing CompLib.Util;\r\nusing System.Threading;\r\nusing System.IO;\r\nusing CompLib.Mathematics;\r\nusing System.Collections.Generic;\r\n\r\npublic class Program\r\n{\r\n\r\n    public void Solve()\r\n    {\r\n        var sc = new Scanner();\r\n#if !DEBUG\r\n        System.Console.SetOut(new System.IO.StreamWriter(System.Console.OpenStandardOutput()) { AutoFlush = false });\r\n#endif\r\n        int t = sc.NextInt();\r\n        for (int i = 0; i < t; i++)\r\n        {\r\n            Q(sc);\r\n        }\r\n        System.Console.Out.Flush();\r\n    }\r\n\r\n    void Q(Scanner sc)\r\n    {\r\n        int n = sc.NextInt();\r\n        char[] s = sc.NextCharArray();\r\n        int l = s.Length;\r\n        if (s[0] != 'R')\r\n        {\r\n            for (int i = 0; i < l; i++)\r\n            {\r\n                s[i] = s[i] == 'R' ? 'D' : 'R';\r\n            }\r\n        }\r\n\r\n        if (!s.Contains('D'))\r\n        {\r\n            Console.WriteLine(n);\r\n            return;\r\n        }\r\n\r\n        List<int> cMax = new List<int>() { 0 };\r\n        List<int> rMax = new List<int>() { 0 };\r\n        int row = 0;\r\n        int col = 0;\r\n\r\n        int fd = n;\r\n        foreach (char ch in s)\r\n        {\r\n            if (ch == 'R') col++;\r\n            else if (ch == 'D') row++;\r\n\r\n            if (fd == n && ch == 'D') fd = col;\r\n\r\n            if (cMax.Count <= row)\r\n            {\r\n                cMax.Add(col);\r\n            }\r\n            cMax[row] = Math.Max(cMax[row], col);\r\n            if (rMax.Count <= col)\r\n            {\r\n                rMax.Add(row);\r\n            }\r\n            rMax[col] = Math.Max(rMax[col], row);\r\n        }\r\n\r\n\r\n\r\n        // \u79fb\u52d5\u3067\u304d\u308b\u7bc4\u56f2\r\n\r\n        // D\u3092\u8ffd\u52a0\u3067\u304d\u308b\u500b\u6570\r\n        int mR = n - row - 1;\r\n\r\n\r\n\r\n        long count = 0;\r\n        for (int i = 0; i <= row; i++)\r\n        {\r\n            count += col - cMax[i];\r\n        }\r\n\r\n        // Console.WriteLine($\"a {count}\");\r\n\r\n        // R\r\n        int mC = n - col - 1;\r\n        for (int j = 0; j <= col; j++)\r\n        {\r\n            if (j < fd)\r\n            {\r\n                count += n - rMax[j] - 1;\r\n            }\r\n            else\r\n            {\r\n                count += row - rMax[j];\r\n            }\r\n        }\r\n\r\n        \r\n\r\n\r\n        Console.WriteLine((long)n * n - count);\r\n    }\r\n\r\n    public static void Main(string[] args) => new Program().Solve();\r\n    // public static void Main(string[] args) => new Thread(new Program().Solve, 1 << 27).Start();\r\n}\r\n\r\n// https://bitbucket.org/camypaper/complib\r\nnamespace CompLib.Mathematics\r\n{\r\n    #region ModInt\r\n    /// <summary>\r\n    /// [0,<see cref=\"Mod\"/>) \u307e\u3067\u306e\u5024\u3092\u53d6\u308b\u3088\u3046\u306a\u6570\r\n    /// </summary>\r\n    public struct ModInt\r\n    {\r\n        /// <summary>\r\n        /// \u5270\u4f59\u3092\u53d6\u308b\u5024\uff0e\r\n        /// </summary>\r\n        // public const long Mod = (int)1e9 + 7;\r\n        public const long Mod = 998244353;\r\n\r\n        /// <summary>\r\n        /// \u5b9f\u969b\u306e\u6570\u5024\uff0e\r\n        /// </summary>\r\n        public long num;\r\n        /// <summary>\r\n        /// \u5024\u304c <paramref name=\"n\"/> \u3067\u3042\u308b\u3088\u3046\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u69cb\u7bc9\u3057\u307e\u3059\uff0e\r\n        /// </summary>\r\n        /// <param name=\"n\">\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u6301\u3064\u5024</param>\r\n        /// <remarks>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u554f\u984c\u4e0a\uff0c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5185\u3067\u306f\u5270\u4f59\u3092\u53d6\u308a\u307e\u305b\u3093\uff0e\u305d\u306e\u305f\u3081\uff0c<paramref name=\"n\"/> \u2208 [0,<see cref=\"Mod\"/>) \u3092\u6e80\u305f\u3059\u3088\u3046\u306a <paramref name=\"n\"/> \u3092\u6e21\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f O(1) \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e</remarks>\r\n        public ModInt(long n) { num = n; }\r\n        /// <summary>\r\n        /// \u3053\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\uff0e\r\n        /// </summary>\r\n        /// <returns>[0,<see cref=\"Mod\"/>) \u306e\u7bc4\u56f2\u5185\u306e\u6574\u6570\u3092 10 \u9032\u8868\u8a18\u3057\u305f\u3082\u306e\uff0e</returns>\r\n        public override string ToString() { return num.ToString(); }\r\n        public static ModInt operator +(ModInt l, ModInt r) { l.num += r.num; if (l.num >= Mod) l.num -= Mod; return l; }\r\n        public static ModInt operator -(ModInt l, ModInt r) { l.num -= r.num; if (l.num < 0) l.num += Mod; return l; }\r\n        public static ModInt operator *(ModInt l, ModInt r) { return new ModInt(l.num * r.num % Mod); }\r\n        public static implicit operator ModInt(long n) { n %= Mod; if (n < 0) n += Mod; return new ModInt(n); }\r\n\r\n        /// <summary>\r\n        /// \u4e0e\u3048\u3089\u308c\u305f 2 \u3064\u306e\u6570\u5024\u304b\u3089\u3079\u304d\u5270\u4f59\u3092\u8a08\u7b97\u3057\u307e\u3059\uff0e\r\n        /// </summary>\r\n        /// <param name=\"v\">\u3079\u304d\u4e57\u306e\u5e95</param>\r\n        /// <param name=\"k\">\u3079\u304d\u6307\u6570</param>\r\n        /// <returns>\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\u306b\u3088\u308a O(N log N) \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e</returns>\r\n        public static ModInt Pow(ModInt v, long k) { return Pow(v.num, k); }\r\n\r\n        /// <summary>\r\n        /// \u4e0e\u3048\u3089\u308c\u305f 2 \u3064\u306e\u6570\u5024\u304b\u3089\u3079\u304d\u5270\u4f59\u3092\u8a08\u7b97\u3057\u307e\u3059\uff0e\r\n        /// </summary>\r\n        /// <param name=\"v\">\u3079\u304d\u4e57\u306e\u5e95</param>\r\n        /// <param name=\"k\">\u3079\u304d\u6307\u6570</param>\r\n        /// <returns>\u7e70\u308a\u8fd4\u3057\u4e8c\u4e57\u6cd5\u306b\u3088\u308a O(N log N) \u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e</returns>\r\n        public static ModInt Pow(long v, long k)\r\n        {\r\n            long ret = 1;\r\n            for (k %= Mod - 1; k > 0; k >>= 1, v = v * v % Mod)\r\n                if ((k & 1) == 1) ret = ret * v % Mod;\r\n            return new ModInt(ret);\r\n        }\r\n        /// <summary>\r\n        /// \u4e0e\u3048\u3089\u308c\u305f\u6570\u306e\u9006\u5143\u3092\u8a08\u7b97\u3057\u307e\u3059\uff0e\r\n        /// </summary>\r\n        /// <param name=\"v\">\u9006\u5143\u3092\u53d6\u308b\u5bfe\u8c61\u3068\u306a\u308b\u6570</param>\r\n        /// <returns>\u9006\u5143\u3068\u306a\u308b\u3088\u3046\u306a\u5024</returns>\r\n        /// <remarks>\u6cd5\u304c\u7d20\u6570\u3067\u3042\u308b\u3053\u3068\u3092\u4eee\u5b9a\u3057\u3066\uff0c\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\u306b\u5f93\u3063\u3066\u9006\u5143\u3092 O(log N) \u3067\u8a08\u7b97\u3057\u307e\u3059\uff0e</remarks>\r\n        public static ModInt Inverse(ModInt v) { return Pow(v, Mod - 2); }\r\n    }\r\n    #endregion\r\n    #region Binomial Coefficient\r\n    public class BinomialCoefficient\r\n    {\r\n        public ModInt[] fact, ifact;\r\n        public BinomialCoefficient(int n)\r\n        {\r\n            fact = new ModInt[n + 1];\r\n            ifact = new ModInt[n + 1];\r\n            fact[0] = 1;\r\n            for (int i = 1; i <= n; i++)\r\n                fact[i] = fact[i - 1] * i;\r\n            ifact[n] = ModInt.Inverse(fact[n]);\r\n            for (int i = n - 1; i >= 0; i--)\r\n                ifact[i] = ifact[i + 1] * (i + 1);\r\n            ifact[0] = ifact[1];\r\n        }\r\n        public ModInt this[int n, int r]\r\n        {\r\n            get\r\n            {\r\n                if (n < 0 || n >= fact.Length || r < 0 || r > n) return 0;\r\n                return fact[n] * ifact[n - r] * ifact[r];\r\n            }\r\n        }\r\n        public ModInt RepeatedCombination(int n, int k)\r\n        {\r\n            if (k == 0) return 1;\r\n            return this[n + k - 1, k];\r\n        }\r\n    }\r\n    #endregion\r\n}\r\n\r\n\r\nnamespace CompLib.Util\r\n{\r\n    using System;\r\n    using System.Linq;\r\n\r\n    class Scanner\r\n    {\r\n        private string[] _line;\r\n        private int _index;\r\n        private const char Separator = ' ';\r\n\r\n        public Scanner()\r\n        {\r\n            _line = new string[0];\r\n            _index = 0;\r\n        }\r\n\r\n        public string Next()\r\n        {\r\n            if (_index >= _line.Length)\r\n            {\r\n                string s;\r\n                do\r\n                {\r\n                    s = Console.ReadLine();\r\n                } while (s.Length == 0);\r\n\r\n                _line = s.Split(Separator);\r\n                _index = 0;\r\n            }\r\n\r\n            return _line[_index++];\r\n        }\r\n\r\n        public string ReadLine()\r\n        {\r\n            _index = _line.Length;\r\n            return Console.ReadLine();\r\n        }\r\n\r\n        public int NextInt() => int.Parse(Next());\r\n        public long NextLong() => long.Parse(Next());\r\n        public double NextDouble() => double.Parse(Next());\r\n        public decimal NextDecimal() => decimal.Parse(Next());\r\n        public char NextChar() => Next()[0];\r\n        public char[] NextCharArray() => Next().ToCharArray();\r\n\r\n        public string[] Array()\r\n        {\r\n            string s = Console.ReadLine();\r\n            _line = s.Length == 0 ? new string[0] : s.Split(Separator);\r\n            _index = _line.Length;\r\n            return _line;\r\n        }\r\n\r\n        public int[] IntArray() => Array().Select(int.Parse).ToArray();\r\n        public long[] LongArray() => Array().Select(long.Parse).ToArray();\r\n        public double[] DoubleArray() => Array().Select(double.Parse).ToArray();\r\n        public decimal[] DecimalArray() => Array().Select(decimal.Parse).ToArray();\r\n    }\r\n}\r\n"
}