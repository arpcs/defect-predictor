{
    "id": 221622378,
    "contestId": 1644,
    "creationTimeSeconds": 1693702808,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1644,
        "index": "E",
        "name": "Expand the Path",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "combinatorics",
            "data structures",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1644,
        "members": [
            {
                "handle": "qworasdzxcl2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1645540500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 45363200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\n#define pll pair<ll,ll>\r\n#define fi first\r\n#define se second\r\n#define pb push_back\r\n#define mp make_pair\r\n#define F(i,a,b) for(ll i=a;i<=b;i++)\r\nconst ll N=1e5+100;\r\n\r\n/// you will be the best but now you just are trash\r\n/// goal 1/8\r\n\r\nstruct tk\r\n{\r\n    ll la=0;\r\n    ll val=0;\r\n    ll valmn=0;\r\n    ll mn=0;\r\n};\r\ntk st[4*N];\r\nll k;\r\nvector<ll> vt;\r\nll x[N];\r\nll y[N];\r\ntk mer(tk a,tk b)\r\n{\r\n    tk c;\r\n    c.val=(a.val+b.val);\r\n    c.mn=min(a.mn,b.mn);\r\n    if (c.mn==a.mn)\r\n        c.valmn+=a.valmn;\r\n    if (c.mn==b.mn)\r\n        c.valmn+=b.valmn;\r\n    return c;\r\n}\r\nvoid dosth(ll id,ll left,ll right)\r\n{\r\n    st[id*2].mn+=st[id].la;\r\n    st[id*2+1].mn+=st[id].la;\r\n    st[id*2].la+=st[id].la;\r\n    st[id*2+1].la+=st[id].la;\r\n    st[id].la=0;\r\n}\r\nvoid update(ll id,ll left,ll right,ll x,ll y,ll val)\r\n{\r\n    if (x>right||y<left)\r\n        return ;\r\n    if (x<=left&&y>=right)\r\n    {\r\n        st[id].la+=val;\r\n        st[id].mn+=val;\r\n        return ;\r\n    }\r\n    dosth(id,left,right);\r\n    ll mid=(left+right)/2;\r\n    update(id*2,left,mid,x,y,val);\r\n    update(id*2+1,mid+1,right,x,y,val);\r\n    st[id]=mer(st[id*2],st[id*2+1]);\r\n}\r\nvoid build(ll id,ll left,ll right)\r\n{\r\n    if (left==right)\r\n    {\r\n        st[id].la=0;\r\n        st[id].val=vt[left]-vt[left-1];\r\n        st[id].valmn=vt[left]-vt[left-1];\r\n        st[id].mn=0;\r\n        return ;\r\n    }\r\n    ll mid=(left+right)/2;\r\n    build(id*2,left,mid);\r\n    build(id*2+1,mid+1,right);\r\n    st[id]=mer(st[id*2],st[id*2+1]);\r\n}\r\nll n;\r\nstring s;\r\nll get1()\r\n{\r\n    ll ans=n;\r\n    if (st[1].mn==0)\r\n    {\r\n        ans-=st[1].valmn;\r\n    }\r\n    return ans;\r\n}\r\nll get()\r\n{\r\n    vt.clear();\r\n    vt.pb(1);\r\n    vt.pb(n+1);\r\n    vector<pair<pll,pll>> vt1;\r\n    bool chk=false;\r\n    bool chk1=false;\r\n    ll x=1;\r\n    ll y=1;\r\n    ll x1=1;\r\n    ll y1=1;\r\n    for (auto to:s)\r\n    {\r\n        if (to=='R') y1++;\r\n        else x1++;\r\n    }\r\n    x1=n-x1+1;\r\n    y1=n-y1+1;\r\n    for (auto to:s)\r\n    {\r\n        if (to=='R')\r\n        {\r\n            y++;\r\n            chk1=true;\r\n        }\r\n        else\r\n        {\r\n            x++;\r\n            chk=true;\r\n        }\r\n        ll lx=x;\r\n        ll rx=x;\r\n        ll ly=y;\r\n        ll ry=y;\r\n        if (chk)\r\n        {\r\n            rx=lx+x1-1;\r\n        }\r\n        if (chk1)\r\n        {\r\n            ry=ly+y1-1;\r\n        }\r\n        //cout <<lx<<\" \"<<rx<<\" \"<<ly<<\" \"<<ry<<'\\n';\r\n        vt1.pb(mp(mp(lx,1),mp(ly,ry)));\r\n        vt1.pb(mp(mp(rx+1,-1),mp(ly,ry)));\r\n        vt.pb(ly);\r\n        vt.pb(ry+1);\r\n     //   cout <<lx<<\" \"<<rx<<\" \"<<ly<<\" \"<<ry<<'\\n';\r\n    }\r\n    sort(vt.begin(),vt.end());\r\n    vt.resize(unique(vt.begin(),vt.end())-vt.begin());\r\n    ll len=vt.size()-1;\r\n    build(1,1,len);\r\n    ll ans=0;\r\n    sort(vt1.begin(),vt1.end());\r\n    for (int i=0;i<vt1.size();i++)\r\n    {\r\n        if (i)\r\n        {\r\n            ll kc=(vt1[i].fi.fi-vt1[i-1].fi.fi);\r\n          //  cout <<vt1[i].fi.fi<<\" \"<<vt1[i-1].fi.fi<<\" \"<<get1()<<\" chk1\"<<'\\n';\r\n            ans=(ans+kc*get1());\r\n        }\r\n        ll difi=vt1[i].fi.se;\r\n        ll l=vt1[i].se.fi;\r\n        ll r=vt1[i].se.se;\r\n     //   cout <<vt1[i].fi.fi<<\" \"<<l<<\" \"<<r<<\" \"<<difi<<'\\n';\r\n        l=lower_bound(vt.begin(),vt.end(),l)-vt.begin()+1;\r\n        r=lower_bound(vt.begin(),vt.end(),r+1)-vt.begin();\r\n        update(1,1,len,l,r,difi);\r\n    }\r\n    return ans+1;\r\n}\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    if (fopen(\"a.inp\",\"r\"))\r\n    {\r\n        freopen(\"a.inp\",\"r\",stdin);\r\n        freopen(\"a.out\",\"w\",stdout);\r\n    }\r\n    ll t;\r\n    cin>> t;\r\n    while (t--)\r\n    {\r\n        cin>> n>> s;\r\n        cout <<get()<<'\\n';\r\n    }\r\n}\r\n"
}