{
    "id": 228067179,
    "contestId": 3,
    "creationTimeSeconds": 1697218102,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 3,
        "index": "D",
        "name": "Least Cost Bracket Sequence",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 3,
        "members": [
            {
                "handle": "Crypto_Wiz"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1267963200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef pair<int, int> Cost;\r\n\r\nint main() {\r\n  string s;\r\n  cin >> s;\r\n  int n = s.size();\r\n  int m = count(s.begin(), s.end(), '?');\r\n  vector<Cost> cost(m);\r\n  for (int i = 0, j = 0; i < n; i++) {\r\n    if (s[i] == '?') {\r\n      cin >> cost[j].first >> cost[j].second;\r\n      j++;\r\n    }\r\n  }\r\n\r\n  // Create a vector to store the optimal cost of each character in the string.\r\n  vector<int> optimal_cost(n, INT_MAX);\r\n\r\n  // Calculate the optimal cost of each character in the string, starting from the end.\r\n  optimal_cost[n - 1] = 0;\r\n  for (int i = n - 2; i >= 0; i--) {\r\n    if (s[i] == '(') {\r\n      optimal_cost[i] = optimal_cost[i + 1];\r\n    } else if (s[i] == ')') {\r\n      optimal_cost[i] = optimal_cost[i + 1] + cost[0].second;\r\n    } else {\r\n      // The optimal cost of the current character is the minimum of the cost of\r\n      // replacing it with an opening parenthesis and the cost of replacing it\r\n      // with a closing parenthesis.\r\n      optimal_cost[i] = min(optimal_cost[i + 1] + cost[0].first,\r\n                           optimal_cost[i + 1] + cost[0].second);\r\n    }\r\n  }\r\n\r\n  // Check if there is a solution.\r\n  if (optimal_cost[0] == INT_MAX) {\r\n    cout << -1 << endl;\r\n    return 0;\r\n  }\r\n\r\n  // Reconstruct the optimal regular bracket sequence.\r\n  string optimal_sequence;\r\n  int current_cost = 0;\r\n  for (int i = 0; i < n; i++) {\r\n    if (s[i] == '(') {\r\n      optimal_sequence += '(';\r\n    } else if (s[i] == ')') {\r\n      optimal_sequence += ')';\r\n    } else {\r\n      if (current_cost + cost[0].first < current_cost + cost[0].second) {\r\n        optimal_sequence += '(';\r\n        current_cost += cost[0].first;\r\n      } else {\r\n        optimal_sequence += ')';\r\n        current_cost += cost[0].second;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Print the optimal cost and the optimal regular bracket sequence.\r\n  cout << optimal_cost[0] << endl;\r\n  cout << optimal_sequence << endl;\r\n\r\n  return 0;\r\n}\r\n"
}