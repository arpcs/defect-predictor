{
    "id": 229948688,
    "contestId": 3,
    "creationTimeSeconds": 1698374606,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 3,
        "index": "D",
        "name": "Least Cost Bracket Sequence",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 3,
        "members": [
            {
                "handle": "keycanfly"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1267963200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 80,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 1024000,
    "source": "#include <iostream>\r\n#include<stdio.h>\r\n#include<string.h>\r\n#include<algorithm>\r\n#include<vector>\r\n#include<queue>\r\nusing namespace std;\r\n#define ll long long\r\n#define N 50010\r\nint a[N], b[N]; char s[N];\r\nstruct node\r\n{\r\n    int p, k;\r\n    bool operator <(const node& d)const\r\n    {\r\n        return p > d.p;\r\n    }\r\n};\r\nint main()\r\n{\r\n    //freopen(\"in.txt\",\"r\",stdin);\r\n    int i, j, k, n, m;\r\n    while (~scanf(\"%s\", s))\r\n    {\r\n        n = strlen(s);\r\n        m = 0;\r\n        for (i = 0; s[i]; i++)if (s[i] == '?')m++;\r\n        for (i = 0; i < m; i++)scanf(\"%d%d\", &a[i], &b[i]);\r\n        if ((n & 1) || s[0] == ')' || s[n - 1] == '(') { puts(\"-1\"); continue; }\r\n\r\n        int num = 0, flag = 1; m = -1; ll sum = 0;\r\n        priority_queue<node>q;\r\n        for (i = 0; i < n; i++)\r\n        {\r\n            if (s[i] == '(')num++;\r\n            else if (s[i] == ')')num--;\r\n            else\r\n            {\r\n                num--;\r\n                s[i] = ')'; m++; sum += b[m]; \r\n                node e;\r\n                e.p = a[m] - b[m]; \r\n                e.k = i;\r\n                q.push(e);\r\n            }\r\n            while (num < 0)\r\n            {\r\n                if (q.empty()) { flag = 0; break; }\r\n                node e = q.top(); q.pop();\r\n                sum += e.p; s[e.k] = '(';\r\n                num += 2;\r\n            }\r\n            if (!flag)break;\r\n        }\r\n        if (num || !flag) { puts(\"-1\"); continue; }\r\n        printf(\"%I64d\\n%s\\n\", sum, s);\r\n    }\r\n    return 0;\r\n}"
}