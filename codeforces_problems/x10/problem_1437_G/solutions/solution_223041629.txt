{
    "id": 223041629,
    "contestId": 1437,
    "creationTimeSeconds": 1694499275,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1437,
        "index": "G",
        "name": "Death DBMS",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1437,
        "members": [
            {
                "handle": "WhiteSeele"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603809300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 114688000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nint n,m,cnt=0;\r\nint fail[500010],ed[500010],vis[500010];\r\nchar s[500010];\r\nnamespace ds3\r\n{\r\n\tint t[2000010];\r\n\tvoid update(int x,int l,int r,int p,int v)\r\n\t{\r\n\t\tif(p<l||p>r)\r\n\t\t\treturn ;\r\n\t\tif(l==r)\r\n\t\t{\r\n\t\t\tt[x]=v;\r\n\t\t\treturn ;\r\n\t\t}\r\n\t\tint mid=(l+r)/2;\r\n\t\tupdate(x<<1,l,mid,p,v);\r\n\t\tupdate(x<<1|1,mid+1,r,p,v);\r\n\t\tt[x]=max(t[x<<1],t[x<<1|1]);\r\n\t}\r\n\tint query(int x,int l,int r,int ll,int rr)\r\n\t{\r\n\t\tif(r<ll||rr<l||ll>rr)\r\n\t\t\treturn -1e9;\r\n\t\tif(ll<=l&&r<=rr)\r\n\t\t\treturn t[x];\r\n\t\tint mid=(l+r)/2;\r\n\t\treturn max(query(x<<1,l,mid,ll,rr),query(x<<1|1,mid+1,r,ll,rr));\r\n\t}\r\n};\r\nnamespace ds2\r\n{\r\n\tint dfn[500010],top[500010],tot=0;\r\n\tint fa[500010],sz[500010],mxson[500010];\r\n\tvector<int> e[500010];\r\n\tvoid dfs1(int x,int pre)\r\n\t{\r\n\t\tfa[x]=pre,sz[x]=1;mxson[x]=500000;\r\n\t\tfor(int y:e[x])\r\n\t\t\tif(y!=pre)\r\n\t\t\t{\r\n\t\t\t\tdfs1(y,x);\r\n\t\t\t\tsz[x]+=sz[y];\r\n\t\t\t\tif(sz[y]>sz[mxson[x]])\r\n\t\t\t\t\tmxson[x]=y;\r\n\t\t\t}\r\n\t}\r\n\tvoid dfs2(int x,int pre)\r\n\t{\r\n\t\tdfn[x]=++tot;top[x]=pre;\r\n\t\tif(mxson[x]!=500000)\r\n\t\t\tdfs2(mxson[x],pre);\r\n\t\tfor(int y:e[x])\r\n\t\t\tif(y!=fa[x]&&y!=mxson[x])\r\n\t\t\t\tdfs2(y,y);\r\n\t}\r\n\tmultiset<int> s[500010];\r\n\tint val[500010];\r\n\tvoid update(int x,int y,int id)\r\n\t{\r\n\t\tassert(s[x].count(val[id]));\r\n\t\ts[x].erase(s[x].find(val[id]));\r\n\t\tval[id]=y;\r\n\t\ts[x].insert(val[id]);\r\n//\t\tcout<<\"current \"<<x<<' '<<*(--s[x].end())<<endl;\r\n\t\tds3::update(1,1,tot,dfn[x],*(--s[x].end()));\r\n\t}\r\n\tint query(int x)\r\n\t{\r\n\t\tint res=-1;\r\n\t\twhile(x!=-1)\r\n\t\t{\r\n//\t\t\tcerr<<dfn[top[x]]<<' '<<dfn[x]<<endl;\r\n\t\t\tres=max(res,ds3::query(1,1,tot,dfn[top[x]],dfn[x])),x=fa[top[x]];\r\n\t\t}\r\n\t\treturn res;\r\n\t}\r\n\tvoid build()\r\n\t{\r\n\t\tfor(int i=1;i<=cnt;i++)\r\n\t\t\te[fail[i]].push_back(i);\r\n\t\tdfs1(0,-1);\r\n\t\tdfs2(0,0);\r\n//\t\tfor(int i=0;i<=cnt;i++)\r\n//\t\t\tcout<<i<<' '<<fail[i]<<' '<<vis[i]<<' '<<dfn[i]<<' '<<top[i]<<' '<<mxson[i]<<endl;\r\n\t\tfor(int i=0;i<=cnt;i++)\r\n\t\t\ts[i].insert(-1),ds3::update(1,1,tot,dfn[i],-1);\r\n\t\tfor(int i=1;i<=n;i++)\r\n\t\t\ts[ed[i]].insert(0),ds3::update(1,1,tot,dfn[i],0);\r\n\t}\r\n};\r\nnamespace ds1\r\n{\r\n\tint c[500010][26],len;\r\n\tvoid insert(int x)\r\n\t{\r\n\t\tscanf(\"%s\",s+1);len=strlen(s+1);\r\n\t\tint now=0;vis[0]=-1;\r\n\t\tfor(int i=1;i<=len;i++)\r\n\t\t{\r\n\t\t\tint v=s[i]-'a';\r\n\t\t\tif(c[now][v]==0)\r\n\t\t\t\tc[now][v]=++cnt,vis[cnt]=-1;\r\n\t\t\tnow=c[now][v];\r\n\t\t}\r\n\t\ted[x]=now;vis[now]=0;\r\n\t}\r\n\tqueue<int> q;\r\n\tvoid build()\r\n\t{\t\r\n\t\tfor(int i=0;i<=25;i++)\r\n\t\t\tif(c[0][i])\t\r\n\t\t\t\tfail[c[0][i]]=0,q.push(c[0][i]);\r\n\t\twhile(!q.empty())\r\n\t\t{\r\n\t\t\tint x=q.front();q.pop();\r\n\t\t\tfor(int i=0;i<26;i++)\r\n\t\t\t\tif(c[x][i])\r\n\t\t\t\t\tfail[c[x][i]]=c[fail[x]][i],q.push(c[x][i]);\r\n\t\t\t\telse\r\n\t\t\t\t\tc[x][i]=c[fail[x]][i];\t\r\n\t\t}\t\r\n\t}\r\n\tint query()\r\n\t{\r\n\t\tscanf(\"%s\",s+1);len=strlen(s+1);\r\n\t\tint now=0,ans=-1;\r\n\t\tfor(int i=1;i<=len;i++)\r\n\t\t{\r\n\t\t\tint v=s[i]-'a';\r\n\t\t\tnow=c[now][v];\r\n//\t\t\tcout<<\"in AC \"<<now<<' '<<ds2::query(now)<<endl;\r\n\t\t\tans=max(ans,ds2::query(now));\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n};\r\nint main()\r\n{\r\n\tscanf(\"%d%d\",&n,&m);\r\n\tfor(int i=1;i<=n;i++)\r\n\t\tds1::insert(i);\r\n\tds1::build();ds2::build();\r\n\tfor(int i=1;i<=m;i++)\r\n\t{\r\n\t\tint op,p,val;\r\n\t\tscanf(\"%d\",&op);\r\n\t\tif(op==1)\r\n\t\t{\r\n\t\t\tscanf(\"%d%d\",&p,&val);\r\n\t\t\tds2::update(ed[p],val,p);\r\n\t\t}\r\n\t\telse\r\n\t\t\tprintf(\"%d\\n\",ds1::query());\r\n\t}\r\n}"
}