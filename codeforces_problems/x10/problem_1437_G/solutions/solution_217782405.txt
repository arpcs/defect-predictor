{
    "id": 217782405,
    "contestId": 1437,
    "creationTimeSeconds": 1691459406,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1437,
        "index": "G",
        "name": "Death DBMS",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "data structures",
            "string suffix structures",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1437,
        "members": [
            {
                "handle": "5k_sync_closer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603809300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 91,
    "timeConsumedMillis": 1044,
    "memoryConsumedBytes": 99430400,
    "source": "// LUOGU_RID: 119601603\n#include <set>\r\n#include <queue>\r\n#include <algorithm>\r\n#include <cstdio>\r\n#include <cstring>\r\nusing namespace std;\r\nstruct E\r\n{\r\n    int v, t;\r\n} e[300050];\r\nbool v[300050];\r\nchar S[300050], T[300050];\r\nint O, n, m, o, p, q, w[300050], z[300050], d[300050], f[300050], s[300050], t[300050], b[300050], k[300050], c[300050][26], Z[300050], h[300050], R[300050 << 2];\r\nmultiset<int> a[300050];\r\nvoid A(int u, int v)\r\n{\r\n    e[++q] = {v, h[u]};\r\n    h[u] = q;\r\n}\r\nvoid X(int u)\r\n{\r\n    s[u] = 1;\r\n    for (int i = h[u], v; i; i = e[i].t)\r\n        if (!d[v = e[i].v])\r\n        {\r\n            d[v] = d[u] + 1;\r\n            X(v);\r\n            s[u] += s[v];\r\n            if (!~z[u] || s[v] > s[z[u]])\r\n                z[u] = v;\r\n        }\r\n}\r\nvoid Y(int u, int g)\r\n{\r\n    t[k[b[u] = ++p] = u] = g;\r\n    if (~z[u])\r\n        Y(z[u], g);\r\n    for (int i = h[u], v; i; i = e[i].t)\r\n        if ((v = e[i].v) != f[u] && v != z[u])\r\n            Y(v, v);\r\n}\r\nvoid B(int s, int t, int p)\r\n{\r\n    if (s == t)\r\n        return void(R[p] = v[k[s]] ? 0 : -1);\r\n    int m = s + t >> 1;\r\n    B(s, m, p << 1);\r\n    B(m + 1, t, p << 1 | 1);\r\n    R[p] = max(R[p << 1], R[p << 1 | 1]);\r\n}\r\nvoid M(int l, int x, int s, int t, int p)\r\n{\r\n    if (s == t)\r\n        return void(R[p] = x);\r\n    int m = s + t >> 1;\r\n    if (l <= m)\r\n        M(l, x, s, m, p << 1);\r\n    else\r\n        M(l, x, m + 1, t, p << 1 | 1);\r\n    R[p] = max(R[p << 1], R[p << 1 | 1]);\r\n}\r\nint Q(int l, int r, int s, int t, int p)\r\n{\r\n    if (l <= s && t <= r)\r\n        return R[p];\r\n    int m = s + t >> 1, q = -1;\r\n    if (l <= m)\r\n        q = max(q, Q(l, r, s, m, p << 1));\r\n    if (r > m)\r\n        q = max(q, Q(l, r, m + 1, t, p << 1 | 1));\r\n    return q;\r\n}\r\nint main()\r\n{\r\n\tmemset(z, -1, sizeof z);\r\n    scanf(\"%d%d\", &n, &O);\r\n    for (int i = 1, p; i <= n; ++i)\r\n    {\r\n        scanf(\"%s\", S + 1);\r\n        m = strlen(S + 1);\r\n        p = 0;\r\n        for (int j = 1; j <= m; ++j)\r\n            p = c[p][S[j] - 'a'] ? c[p][S[j] - 'a'] : c[p][S[j] - 'a'] = ++o;\r\n        v[Z[i] = p] = 1;\r\n        a[p].insert(w[i] = 0);\r\n    }\r\n    queue<int> q;\r\n    for (int i = 0; i < 26; ++i)\r\n        if (c[0][i])\r\n            q.push(c[0][i]);\r\n    while (!q.empty())\r\n    {\r\n        int t = q.front();\r\n        q.pop();\r\n        for (int i = 0; i < 26; ++i)\r\n        {\r\n            if (c[t][i])\r\n                f[c[t][i]] = c[f[t]][i], q.push(c[t][i]);\r\n            else\r\n                c[t][i] = c[f[t]][i];\r\n        }\r\n    }\r\n    for (int i = d[0] = 1; i <= o; ++i)\r\n        A(f[i], i);\r\n    X(0);\r\n    Y(0, 0);\r\n    B(1, o + 1, 1);\r\n    for (int i = 0, op, x, y; i < O; ++i)\r\n    {\r\n        scanf(\"%d\", &op);\r\n        if (op & 1)\r\n        {\r\n            scanf(\"%d%d\", &x, &y);\r\n            a[Z[x]].erase(a[Z[x]].find(w[x]));\r\n            a[Z[x]].insert(w[x] = y);\r\n            M(b[Z[x]], *a[Z[x]].rbegin(), 1, o + 1, 1);\r\n        }\r\n        else\r\n        {\r\n            scanf(\"%s\", T + 1);\r\n            m = strlen(T + 1);\r\n            y = -1;\r\n            for (int i = 1, p = 0; i <= m; ++i)\r\n            {\r\n                p = c[p][T[i] - 'a'];\r\n                for (int x = p; x; x = f[t[x]])\r\n                    y = max(y, Q(b[t[x]], b[x], 1, o + 1, 1));\r\n            }\r\n            printf(\"%d\\n\", y);\r\n        }\r\n    }\r\n    return 0;\r\n}"
}