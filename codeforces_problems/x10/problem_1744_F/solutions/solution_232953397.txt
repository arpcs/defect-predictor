{
    "id": 232953397,
    "contestId": 1744,
    "creationTimeSeconds": 1700131530,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "F",
        "name": "MEX vs MED",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "Kyrizer_W"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 8192000,
    "source": "#include<iostream>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<map>\r\n#include<vector>\r\n#include<set>\r\n#include<queue>\r\n#include<stack>\r\n#define lowbit(x) ((x) & (-x))\r\n#define PI acos(-1)\r\n#define el \"\\n\"\r\n#define inf 0x3f3f3f3f\r\nusing namespace std;\r\nusing ll = long long;\r\nusing PII = pair<int, int>;\r\nconst int N = 1e5 + 10;\r\nconst int mod = 1e9 + 7;\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    vector<int> a(n + 1), p(n + 1);\r\n    for (int i = 1; i <= n; i ++) {\r\n        cin >> a[i];\r\n        p[a[i]] = i - 1;\r\n    }\r\n    set<int> s;\r\n    int ans = 0;\r\n    for (int i = 0; i < n; i ++) {\r\n        s.insert(p[i]);\r\n        int l = *s.begin();\r\n        int r = *s.rbegin();\r\n        while (i + 1 < n && p[i + 1] >= l && p[i + 1] <= r) i ++;\r\n        if (i == n - 1) ans ++;\r\n        else {\r\n            int len = (i + 1) * 2;\r\n            if (r - l + 1 > len) continue;\r\n            int nxt = p[i + 1];\r\n            if (nxt < l) {\r\n                for (int j = l; j > nxt; j --) {\r\n                    if (r - j + 1 > len) break;\r\n                    ans += min(n - r, len - (r - j + 1) + 1);\r\n                }\r\n            }\r\n            else {\r\n                for (int j = r; j < nxt; j ++) {\r\n                    if (j - l + 1 > len) break;\r\n                    ans += min(l + 1, len - (j - l + 1) + 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    cout << ans << el;\r\n}\r\n\r\nint main() {\r\n\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    \r\n    int T;\r\n    cin >> T;\r\n    while (T--) {\r\n        solve();\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n/* stuff you should look for\r\n* int overflow, array bounds\r\n* special cases (n=1?)\r\n* do smth instead of nothing and stay organized\r\n* WRITE STUFF DOWN\r\n* DON'T GET STUCK ON ONE APPROACH\r\n*/"
}