{
    "id": 233660314,
    "contestId": 1744,
    "creationTimeSeconds": 1700555854,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "F",
        "name": "MEX vs MED",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "math",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "LordWorm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 31,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 819200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nconst int MOD = 1e9 + 7;\r\nvoid solve() {\r\n  int n, p;\r\n  cin >> n;\r\n  vector<int> pos(n + 1);\r\n  for (int i = 1; i <= n; ++i) {\r\n    cin >> p;\r\n    pos[p] = i;\r\n  }\r\n  int l = pos[0], r = pos[0];\r\n  ll res = 1;\r\n  for (int len = 2; len <= n; ++len) {\r\n    // mex means the posistion which contains max\r\n    int mex = (len - 1) >> 1;\r\n    // we want to include the range which contains all element in [0, (len - 1) / 2]\r\n    l = std::min({l, n - len + 1, pos[mex]});\r\n    r = std::max({r, len, pos[mex]});\r\n    // adding the results which has length of len and contains [l,r]\r\n    res += std::max(0, len - (r - l + 1) + 1);\r\n  }\r\n  cout << res << '\\n';\r\n  return ;\r\n}\r\nint main() {\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n//   freopen(\"D:/code/Algorithm/in\", \"r\", stdin);\r\n//   freopen(\"D:/code/Algorithm/out\", \"w\", stdout);\r\n  int T = 1;\r\n  cin >> T;\r\n  while (T--) {\r\n    solve();\r\n  }\r\n  return 0;\r\n}"
}