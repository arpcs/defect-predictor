{
    "id": 192510720,
    "contestId": 1236,
    "creationTimeSeconds": 1675704411,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1236,
        "index": "D",
        "name": "Alice and the Doll",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "brute force",
            "data structures",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1236,
        "members": [
            {
                "handle": "dimss"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571319300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 225,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 48230400,
    "source": "#include <bits/stdc++.h>\n\n// #pragma GCC optimize(\"O3\")\n\n#define all(a) a.begin(), a.end()\n#define rall(a) a.rbegin(), a.rend()\n#define Size(a) (int)a.size()\n#define ll long long\n#define ld long double\n\n// #define int long long\n\nusing namespace std;\n\nvoid solve() {\n    int n, m, k;\n    cin >> n >> m >> k;\n    set<pair<int, int>> st_x, st_y;\n    for (int i = 0; i < n; i++) {\n        st_x.insert({ i, -1 });\n        st_y.insert({ -1, i });\n        st_x.insert({ i, m });\n        st_y.insert({ m, i });\n    }\n    for (int j = 0; j < m; j++) {\n        st_x.insert({ -1, j });\n        st_y.insert({ j, -1 });\n        st_x.insert({ n, j });\n        st_y.insert({ j, n });\n    }\n    for (int i = 0; i < k; i++) {\n        int x, y;\n        cin >> x >> y;\n        x--; y--;\n        st_x.insert({ x, y });\n        st_y.insert({ y, x });\n    }\n    ll res = 1;\n    int i = 0, j = 0, t = 0;\n    int max_x = n, min_x = 0, max_y = m, min_y = -1;\n    int cnt = 0;\n    int last = 0;\n    while (true) {\n        // if (res + k == n * 1ll * m)\n        //     break;\n        pair<int, int> to;\n        if (t == 0) {\n            to = *st_x.lower_bound({ i, j });\n            to.second = min(to.second, max_y);\n            to.second--;\n        } else if (t == 1) {\n            to = *st_y.lower_bound({ j, i });\n            swap(to.first, to.second);\n            to.first = min(to.first, max_x);\n            to.first--;\n        } else if (t == 2) {\n            to = *prev(st_x.lower_bound({ i, j }));\n            to.second = max(to.second, min_y);\n            to.second++;\n        } else {\n            to = *prev(st_y.lower_bound({ j, i }));\n            swap(to.first, to.second);\n            to.first = max(to.first, min_x);\n            to.first++;\n        }\n        auto [x, y] = to;\n        if (i == x && j == y) {\n            cnt++;\n            if (cnt == 2)\n                break;\n            t = (t + 1) % 4;\n            if ((t + 2) % 4 == last)\n                break;\n            continue;\n        }\n        last = t;\n        cnt = 0;\n        res += abs(i - x) + abs(j - y);\n        // cerr << abs(i - x) + abs(j - y) << endl;\n        i = x;\n        j = y;\n        if (t == 0)\n            max_y = min(max_y, y);\n        else if (t == 1)\n            max_x = min(max_x, x);\n        else if (t == 2)\n            min_y = max(min_y, y);\n        else\n            min_x = max(min_x, x);\n        t = (t + 1) % 4;\n    }\n    if (res + k == n * 1ll * m)\n        cout << \"Yes\\n\";\n    else\n        cout << \"No\\n\";\n}\n\nint32_t main() {\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n\n    #ifdef DIMSS\n        freopen(\"test.txt\", \"r\", stdin);\n    #endif\n\n    int T = 1;\n    // cin >> T;\n    while (T--) {\n        solve();\n        #ifdef DIMSS\n            cerr << \"--------\\n\";\n        #endif\n    }\n    return 0;\n}\n"
}