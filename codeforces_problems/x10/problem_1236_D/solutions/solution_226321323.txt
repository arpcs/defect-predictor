{
    "id": 226321323,
    "contestId": 1236,
    "creationTimeSeconds": 1696261582,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1236,
        "index": "D",
        "name": "Alice and the Doll",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "brute force",
            "data structures",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1236,
        "members": [
            {
                "handle": "zezoo050"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571319300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 225,
    "timeConsumedMillis": 218,
    "memoryConsumedBytes": 38604800,
    "source": "#include <bits/stdc++.h>\r\n#define endl '\\n'\r\n#define ll long long\r\n#define ld long double\r\n#define X real()\r\n#define Y imag()\r\n#define fast                 \\\r\n    ios::sync_with_stdio(0); \\\r\n    cin.tie(0);              \\\r\n    cout.tie(0);\r\nusing namespace std;\r\nconst int N = 1e5 + 10;\r\nset<int> row[N];\r\nset<int> col[N];\r\nint n, m, k;\r\nint mxrow = 0, mxcol = 0, mnrow = 1e9, mncol = 1e9;\r\nll rec(int x, int y, int turn)\r\n{\r\n    if (turn == 1)\r\n    {\r\n        mxrow = x;\r\n    }\r\n    else if (turn == 2)\r\n    {\r\n        mncol = y;\r\n    }\r\n    else if (turn == 3)\r\n    {\r\n        mnrow = x;\r\n    }\r\n    else\r\n        mxcol = y;\r\n    ll ret = 0;\r\n    if (turn == 1)\r\n    {\r\n        if ((row[x].empty() or row[x].find(y + 1) == row[x].end()) and mncol != y + 1)\r\n        {\r\n            int npos = mncol;\r\n            auto it = row[x].lower_bound(y);\r\n            if (it != row[x].end())\r\n                npos = min(npos, *it);\r\n            ret = rec(x, npos - 1, 2) + npos - 1 - y;\r\n        }\r\n    }\r\n    else if (turn == 2)\r\n    {\r\n        if ((col[y].empty() or col[y].find(x + 1) == col[y].end()) and mnrow != x + 1)\r\n        {\r\n            int npos = mnrow;\r\n            auto it = col[y].lower_bound(x);\r\n            if (it != col[y].end())\r\n                npos = min(npos, *it);\r\n            ret = rec(npos - 1, y, 3) + npos - 1 - x;\r\n        }\r\n    }\r\n    else if (turn == 3)\r\n    {\r\n        if ((row[x].empty() or row[x].find(y - 1) == row[x].end()) and mxcol != y - 1)\r\n        {\r\n            int npos = mxcol;\r\n            auto it = row[x].upper_bound(y);\r\n            if (row[x].size() and it != row[x].begin())\r\n                npos = max(npos, *(--it));\r\n            ret = rec(x, npos + 1, 4) + y - npos - 1;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if ((col[y].empty() or col[y].find(x - 1) == col[y].end()) and mxrow != x - 1)\r\n        {\r\n            int npos = mxrow;\r\n            auto it = col[y].upper_bound(x);\r\n            if (row[y].size() and it != col[y].begin())\r\n                npos = max(npos, *(--it));\r\n            ret = rec(npos + 1, y, 1) + x - npos - 1;\r\n        }\r\n    }\r\n    return ret;\r\n}\r\nvoid solve()\r\n{\r\n    cin >> n >> m >> k;\r\n    for (int i = 0; i < k; i++)\r\n    {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        row[x].insert(y);\r\n        col[y].insert(x);\r\n    }\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        row[i].insert(0);\r\n        row[i].insert(m + 1);\r\n    }\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        col[i].insert(0);\r\n        col[i].insert(n + 1);\r\n    }\r\n    ll cnt = rec(1, 1, 1) + 1;\r\n    mxrow = 0, mxcol = 0, mnrow = 1e9, mncol = 1e9;\r\n    cnt = max(cnt, rec(1, 1, 2) + 1);\r\n    if (cnt == 1ll * n * m - k)\r\n        cout << \"Yes\" << endl;\r\n    else\r\n        cout << \"No\" << endl;\r\n}\r\n\r\nint main()\r\n{\r\n    fast;\r\n    int tc = 1;\r\n    // cin >> tc;\r\n    while (tc--)\r\n    {\r\n        solve();\r\n    }\r\n}"
}