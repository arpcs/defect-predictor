{
    "id": 204152885,
    "contestId": 1236,
    "creationTimeSeconds": 1682956109,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1236,
        "index": "D",
        "name": "Alice and the Doll",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2300,
        "tags": [
            "brute force",
            "data structures",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1236,
        "members": [
            {
                "handle": "blath123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571319300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 225,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 12288000,
    "source": "/******************************************************************************\r\n\r\n                              Online C++ Compiler.\r\n               Code, Compile, Run and Debug C++ program online.\r\nWrite your code in this editor and press \"Run\" button to compile and execute it.\r\n\r\n*******************************************************************************/\r\n\r\n#include <iostream>\r\n#include <set>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    int n, m, k, a, b;\r\n    cin >> n >> m >> k;\r\n    set<int> rowset[n + 1], colset[m + 1];\r\n    set<int>::iterator itr;\r\n    for (int i = 0; i < k; i++)\r\n    {\r\n        cin >> a >> b;\r\n        rowset[a].insert(b);\r\n        colset[b].insert(a);\r\n    }\r\n    long long int covered = 1;\r\n    int row = 1, col = 1, dir = 1;\r\n    deque<int> vec_col, vec_row;\r\n    int actual_row, last_col, last_row, actual_col, val;\r\n    vec_col.push_back(m + 1);\r\n    vec_col.push_front(0);\r\n    vec_row.push_back(n + 1);\r\n    vec_row.push_front(0);\r\n    while (1)\r\n    {\r\n        // cout<<dir<<\" \";\r\n        if (dir == 1)\r\n        {\r\n            last_col = vec_col.back() - 1;\r\n            if (rowset[row].empty())\r\n            {\r\n                actual_col = last_col;\r\n            }\r\n            else\r\n            {\r\n                itr = rowset[row].upper_bound(col);\r\n                if (itr == rowset[row].end())\r\n                    val = m + 1;\r\n                else\r\n                {\r\n                    val = *itr;\r\n                }\r\n                actual_col = min(val - 1, last_col);\r\n            }\r\n            // cout<<col<<\" \"<<actual_col<<\" \";\r\n            if (covered == 1)\r\n            {\r\n                if (actual_col == col)\r\n                {\r\n                    dir++;\r\n                    if (dir == 5)\r\n                        dir = 1;\r\n                    else\r\n                        dir = dir % 5;\r\n                    continue;\r\n                }\r\n            }\r\n            if (actual_col == col)\r\n            {\r\n                break;\r\n            }\r\n            covered = covered + (actual_col - col);\r\n            col = actual_col;\r\n            vec_row.push_front(row);\r\n            dir += 1;\r\n            if (dir == 5)\r\n                dir = 1;\r\n            else\r\n                dir = dir % 5;\r\n            // cout<<covered<<\"\\n\";\r\n        }\r\n        else if (dir == 2)\r\n        {\r\n            last_row = vec_row.back() - 1;\r\n            if (colset[col].empty())\r\n            {\r\n                actual_row = last_row;\r\n            }\r\n            else\r\n            {\r\n                itr = colset[col].upper_bound(row);\r\n                if (itr == colset[col].end())\r\n                    val = n + 1;\r\n                else\r\n                {\r\n                    val = *itr;\r\n                }\r\n                actual_row = min(val - 1, last_row);\r\n            }\r\n            if (actual_row == row)\r\n            {\r\n                break;\r\n            }\r\n            covered = covered + (actual_row - row);\r\n            row = actual_row;\r\n            vec_col.push_back(col);\r\n            dir += 1;\r\n            if (dir == 5)\r\n                dir = 1;\r\n            else\r\n                dir = dir % 5;\r\n            // cout<<covered<<\"\\n\";\r\n        }\r\n        else if (dir == 3)\r\n        {\r\n            last_col = vec_col.front() + 1;\r\n            if (rowset[row].empty())\r\n            {\r\n                actual_col = last_col;\r\n            }\r\n            else\r\n            {\r\n                itr = rowset[row].upper_bound(col);\r\n                if (itr == rowset[row].begin())\r\n                    val = -1;\r\n                else\r\n                {\r\n                    itr--;\r\n                    val = *itr;\r\n                }\r\n                actual_col = max(val + 1, last_col);\r\n            }\r\n            if (actual_col == col)\r\n            {\r\n                break;\r\n            }\r\n            // cout<<actual_col<<\" \"<<col<<\"\\n\";\r\n            covered = covered + (col - actual_col);\r\n            col = actual_col;\r\n            vec_row.push_back(row);\r\n            dir += 1;\r\n            if (dir == 5)\r\n                dir = 1;\r\n            else\r\n                dir = dir % 5;\r\n            // cout<<covered<<\"\\n\";\r\n        }\r\n        else if (dir == 4)\r\n        {\r\n            last_row = vec_row.front() + 1;\r\n            if (colset[col].empty())\r\n            {\r\n                actual_row = last_row;\r\n            }\r\n            else\r\n            {\r\n                itr = colset[col].upper_bound(row);\r\n                if (itr == colset[col].begin())\r\n                    val = -1;\r\n                else\r\n                {\r\n                    itr--;\r\n                    val = *itr;\r\n                }\r\n                actual_row = max(val + 1, last_row);\r\n            }\r\n            if (actual_row == row)\r\n            {\r\n                break;\r\n            }\r\n            covered = covered + (row - actual_row);\r\n            row = actual_row;\r\n            vec_col.push_front(col);\r\n            dir += 1;\r\n            if (dir == 5)\r\n                dir = 1;\r\n            else\r\n                dir = dir % 5;\r\n        }\r\n    }\r\n    if (covered == ((long long)n * (long long)m - (long long)k))\r\n    {\r\n        cout << \"Yes\";\r\n    }\r\n    else\r\n    {\r\n        cout << \"No\";\r\n    }\r\n    // cout<<covered<<\" \";\r\n}\r\n"
}