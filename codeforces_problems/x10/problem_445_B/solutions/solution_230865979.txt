{
    "id": 230865979,
    "contestId": 445,
    "creationTimeSeconds": 1698860952,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 445,
        "index": "B",
        "name": "DZY Loves Chemistry",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1400,
        "tags": [
            "dfs and similar",
            "dsu",
            "greedy"
        ]
    },
    "author": {
        "contestId": 445,
        "members": [
            {
                "handle": "Contsructive_id"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1404651900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 13414400,
    "source": "#include<bits/stdc++.h>\r\n\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef long long ll;\r\ntypedef tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update> pbds;\r\ntypedef tree<ll, null_type, greater<ll>, rb_tree_tag, tree_order_statistics_node_update> pbdsx;\r\ntypedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds1;// find_by_order, order_of_key, less, greater,less_equal\r\ntypedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;\r\n\r\ntypedef vector<ll> vec;\r\ntypedef vector<string> vecs;\r\ntypedef pair<ll, ll> pll;\r\ntypedef vector<pair<int, int>> vp;\r\ntypedef set<ll> st;\r\ntypedef set<pair<ll, ll>> sp;\r\ntypedef multiset<ll> mst;\r\ntypedef multiset<pair<ll, ll>> mstp;\r\ntypedef map<ll, ll> mp;\r\ntypedef map<char, ll> mpc;\r\nconst ll mx=1e6+1;\r\nbitset<mx>isprime;\r\n#define fastio  ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\r\nvec vv1[mx];\r\nbool visited[mx];\r\nvoid dfs(ll u){\r\n  visited[u]=1;\r\n  for(auto x: vv1[u]){\r\n     if(visited[x]==0){\r\n        dfs(x);\r\n     }\r\n  }\r\n  return;\r\n\r\n}\r\nint main()\r\n{\r\n    //fastio;\r\n    ll n,e;\r\n    cin>>n>>e;\r\n    for(ll i=1;i<=e;i++){\r\n        ll u,v;\r\n        cin>>u>>v;\r\n        vv1[u].push_back(v);\r\n        vv1[v].push_back(u);\r\n    }\r\n    ll count=0;\r\n    for(ll i=1;i<=n;i++){\r\n        if(visited[i]==0){\r\n            dfs(i);\r\n            count++;\r\n        }\r\n    }\r\n    cout<<(ll)pow(2,n-count)<<endl;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//#include<bits/stdc++.h>\r\n//\r\n//#include<ext/pb_ds/assoc_container.hpp>\r\n//#include<ext/pb_ds/tree_policy.hpp>\r\n//\r\n//using namespace std;\r\n//using namespace __gnu_pbds;\r\n//typedef long long ll;\r\n//typedef tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update> pbds;\r\n//typedef tree<ll, null_type, greater<ll>, rb_tree_tag, tree_order_statistics_node_update> pbdsx;\r\n//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds1;// find_by_order, order_of_key, less, greater,less_equal\r\n//typedef tree<ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> ordered_multiset;\r\n//\r\n//typedef vector<ll> vec;\r\n//typedef vector<string> vecs;\r\n//typedef pair<ll, ll> pll;\r\n//typedef vector<pair<int, int>> vp;\r\n//typedef set<ll> st;\r\n//typedef set<pair<ll, ll>> sp;\r\n//typedef multiset<ll> mst;\r\n//typedef multiset<pair<ll, ll>> mstp;\r\n//typedef map<ll, ll> mp;\r\n//typedef map<char, ll> mpc;\r\n//const ll mx=1e6+1;\r\n//bitset<mx>isprime;\r\n//#define fastio  ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\r\n//vec vv1[mx];\r\n//bool visited[mx];\r\n//ll cnt=0;\r\n//void dfs(ll u){\r\n//  visited[u]=1;\r\n//  cnt++;\r\n//  for(auto x: vv1[u]){\r\n//     if(visited[x]==0){\r\n//        dfs(x);\r\n//     }\r\n//  }\r\n//  return;\r\n//\r\n//}\r\n//int main()\r\n//{\r\n//    //fastio;\r\n//    ll n,e;\r\n//    cin>>n>>e;\r\n//    for(ll i=1;i<=e;i++){\r\n//        ll u,v;\r\n//        cin>>u>>v;\r\n//        vv1[u].push_back(v);\r\n//        vv1[v].push_back(u);\r\n//    }\r\n//    ll ans=0;\r\n//    for(ll i=1;i<=n;i++){\r\n//        if(visited[i]==0){\r\n//            cnt=0;\r\n//            dfs(i);\r\n//            ans=max(ans,cnt);\r\n//        }\r\n//    }\r\n//    cout<<\" Maximum Size of Connected component of a graph \"<<ans<<endl;\r\n//\r\n//\r\n//}\r\n//\r\n//\r\n//\r\n//\r\n"
}