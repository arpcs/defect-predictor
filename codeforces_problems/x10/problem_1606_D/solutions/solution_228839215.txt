{
    "id": 228839215,
    "contestId": 1606,
    "creationTimeSeconds": 1697737019,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1606,
        "index": "D",
        "name": "Red-Blue Matrix",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1606,
        "members": [
            {
                "handle": "zaq1xsw2tktk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635518100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 2292,
    "memoryConsumedBytes": 82432000,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n#define FOR(i, n) for (int (i) = 0; (i) < (n); (i)++)\n#define FORI(i, a, b) for (int (i) = (a); (i) < (b); (i)++)\n \nmt19937 rnd(time(0));\n\n#define ll long long\n#define vi vector<int>\n#define vvi vector<vector<int> >\n#define endl '\\n'\n\n#define mp(m, n) make_pair((m), (n))\n \ntemplate<typename T>\nvoid read(vector<T> &t) {FOR(i, t.size()) {cin >> t[i];}}\ntemplate<typename T> string tostring(T a) { istringstream sin; sin >> a; return sin.str(); }\n \n// #define DEBUG\n \n#ifdef DEBUG\ntemplate<typename T>\nvoid _debug(string s, T x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << *it;\n    }\n    cerr << endl;\n}\n \ntemplate<typename T, typename K>\nvoid _debug(string s, unordered_map<T, K> x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \":\" << it->second;\n    }\n    cerr << endl;\n}\n\ntemplate<typename T, typename K>\nvoid _debug(string s, map<T, K> x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \":\" << it->second;\n    }\n    cerr << endl;\n}\n \ntemplate<typename T, typename K>\nvoid _debug(string s, set<T, K> x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << *it;\n    }\n    cerr << endl;\n}\n \ntemplate<typename T, typename K>\nvoid _debug(string s, vector<pair<T, K> > x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \",\" << it->second;\n    }\n    cerr << endl;\n}\n\ntemplate<typename T, typename K>\nvoid _debug(string s, set<pair<T, K> > x) {\n    cerr << s << \":\";\n    for (auto it = x.begin(); it != x.end(); ++it) {\n        cerr << \" \" << it->first << \",\" << it->second;\n    }\n    cerr << endl;\n}\n\ntemplate<typename T, typename K>\nvoid _debug(string s, pair<T, K> x) {\n    cerr << s << \": \" << x.first << \",\" << x.second << endl;\n}\n \nvoid _debug(string s, int x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, long long x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, double x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, string x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, char x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, size_t x) {\n    cerr << s << \": \" << x << endl;\n}\nvoid _debug(string s, bool x) {\n    cerr << s << \": \" << x << endl;\n}\n \n#define debug(x) _debug(#x, (x))\n#else\n#define debug(x)\n#endif\n \n#define db debug\n\ntemplate <class T>\nvoid print(vector<T> &v) {\n    for (int i = 0; i < v.size(); i++) {\n        cout << v[i];\n        if (i == v.size() - 1) {\n            cout << endl;\n        } else {\n            cout << \" \";\n        }\n    }\n}\n\nvoid solve();\n \nvoid pre_init();\n\n\n\nint main() {\n    ios_base::sync_with_stdio(false); std::cin.tie(0);\n    pre_init();\n    int t = 1;\n    cin >> t;\n    while (t--) {\n        solve();\n    }\n    cerr<<\"Time:\"<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<\"ms\\n\"; \n}\n\nvoid pre_init() {}\n\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<vector<int> > v(n, vector<int>(m));\n    for (int i = 0; i < n; i++) read(v[i]);\n    vector<vector<pair<int, int> > > mat(m);\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            mat[i].push_back({v[j][i], j});\n        }\n        sort(mat[i].begin(), mat[i].end());\n        if (mat[i][0].first == mat[i].back().first) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    vector<int> x1;\n    // debug(v[mat[0][0].second]);\n    // debug(v[mat[0].back().second]);\n    for (int i = 0; i < m; i++) {\n        if (v[mat[0][0].second][i] < v[mat[0].back().second][i]) {\n            x1.push_back(0);\n        }\n        if (v[mat[0][0].second][i] > v[mat[0].back().second][i]) {\n            x1.push_back(1);\n        }\n        if (v[mat[0][0].second][i] == v[mat[0].back().second][i]) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    int s = std::accumulate(x1.begin(), x1.end(), 0);\n    int s2 = 0;\n    int k = -1;\n    for (int i = 0; i < x1.size(); i++) {\n        if (x1[i] == 1 && s2 == 0 && s == x1.size() - i) {\n            k = i;\n        }\n        s2 += x1[i];\n    }\n    if (k < 0) {\n        cout << \"NO\" << endl;\n        return;\n    }\n    string ans = string(n, 'R');\n    // debug(ans);\n    multiset<int> left_red, left_blue, right_red, right_blue;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (j < k) {\n                left_red.insert(v[i][j]);\n            } else {\n                right_red.insert(v[i][j]);\n            }\n        }\n    }\n    // debug(left_red);\n    // debug(right_red);\n    for (int i = 0; i < mat[0].size(); i++) {\n        int x = mat[0][i].second;\n\n        // debug(x);\n        ans[x] = 'B';\n        for (int j = 0; j < m; j++) {\n            if (j < k) {\n                left_red.erase(left_red.find(v[x][j]));\n                left_blue.insert(v[x][j]);\n            } else {\n                right_red.erase(right_red.find(v[x][j]));\n                right_blue.insert(v[x][j]);\n            }\n        }\n        if (*left_red.begin() > *left_blue.rbegin() && *right_blue.begin() > *right_red.rbegin()) {\n            // debug(left_red);\n            // debug(left_blue);\n            // debug(right_blue);\n            // debug(right_red);\n            \n            cout << \"YES\" << endl;\n            cout << ans << \" \" << k << endl;\n            return;\n        }\n    }\n    cout << \"NO\" << endl;\n}"
}