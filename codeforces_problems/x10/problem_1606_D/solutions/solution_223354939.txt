{
    "id": 223354939,
    "contestId": 1606,
    "creationTimeSeconds": 1694698088,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1606,
        "index": "D",
        "name": "Red-Blue Matrix",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1606,
        "members": [
            {
                "handle": "zbceyond"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635518100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 2028,
    "memoryConsumedBytes": 180326400,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define rep(i, x, y) for(int i=x;i<=y;i++)\r\n#define per(i, x, y) for(int i=x;i>=y;i--)\r\nusing namespace std;\r\n#define int long long\r\nconst int mod = 998244353;\r\nconst int N = 5e5 + 10;\r\n\r\nvoid play_genshin() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<vector<int>> a(n + 2, vector<int>(m + 2));\r\n    vector<vector<int>> pre_mx(m + 2, vector<int>(n + 2));\r\n    rep(i, 1, n)rep(j, 1, m)cin >> a[i][j];\r\n    auto pre_mn = pre_mx, suf_mn = pre_mx, suf_mx = pre_mx;\r\n    rep(j, 1, m)\r\n        rep(i, 1, n) {\r\n            if (j == 1)pre_mx[j][i] = pre_mn[j][i] = a[i][j];\r\n            else pre_mx[j][i] = max(pre_mx[j - 1][i], a[i][j]), pre_mn[j][i] = min(pre_mn[j - 1][i], a[i][j]);\r\n        }\r\n    per(j, m, 1)\r\n        rep(i, 1, n) {\r\n            if (j == m)suf_mx[j][i] = suf_mn[j][i] = a[i][j];\r\n            else suf_mx[j][i] = max(suf_mx[j + 1][i], a[i][j]), suf_mn[j][i] = min(suf_mn[j + 1][i], a[i][j]);\r\n        }\r\n    rep(j, 1, m - 1) {\r\n        vector<int> vx;\r\n        rep(i, 1, n)vx.push_back(pre_mx[j][i]), vx.push_back(pre_mn[j][i]);\r\n        sort(vx.begin(), vx.end());\r\n        vx.erase(unique(vx.begin(), vx.end()), vx.end());\r\n        auto get = [&](int &x) {\r\n            x = lower_bound(vx.begin(), vx.end(), x) - vx.begin() + 1;\r\n        };\r\n        vector<int> c(2 * n + 1);\r\n        vector<vector<int>> id(2 * n + 1);\r\n        rep(i, 1, n)\r\n            get(pre_mx[j][i]), get(pre_mn[j][i]), c[pre_mx[j][i]]++, c[pre_mn[j][i]]--, id[pre_mx[j][i]].push_back(i);\r\n        rep(i, 1, 2 * n)c[i] += c[i - 1];\r\n        multiset<int> B, R;\r\n        rep(i, 1, n)R.insert(suf_mx[j+1][i]);\r\n        vector<int> L;\r\n        rep(i, 1, vx.size()) {\r\n            for (auto idx: id[i]) {\r\n                R.erase(R.find(suf_mx[j+1][idx]));\r\n                B.insert(suf_mn[j+1][idx]);\r\n                L.push_back(idx);\r\n            }\r\n            if (B.size() and R.size() and c[i] == 0) {\r\n                if (*B.begin() <= *R.rbegin())continue;\r\n                string ans(n, 'R');\r\n                for (auto idx: L)ans[idx - 1] = 'B';\r\n                cout<<\"YES\\n\"<<ans<<\" \"<<j<<\"\\n\";\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    cout << \"NO\\n\";\r\n}\r\n\r\nsigned main() {\r\n    cin.tie(nullptr)->sync_with_stdio(false);\r\n    int tc = 1;\r\n    cin >> tc;\r\n    for (int i = 1; i <= tc; i++) {\r\n        play_genshin();\r\n    }\r\n}\r\n\r\n/*\r\n*/\r\n\r\n/*\r\n\r\n*/\r\n\r\n/*\r\n \u4f60\u7d2b\u540d\u89c9\u5f97\u662f\u6211\u7684\u9505\uff0c\u90a3\u5c31\u662f\u6211\u7684\u9505\uff0c\u4e3a\u4ec0\u4e48\u4f60\u77e5\u9053\u5417\uff1f\u56e0\u4e3a\u7d2b\u540d\u8bf4\u7684\u8bdd\uff0c\u5c31\u50cf\u662f\u4e00\u4e2a\u764c\u75c7\u665a\u671f\u60a3\u8005\u8bf4\u7684\u8bdd\u4e00\u6837\u3002\r\n \u4ed6\u90fd\u5df2\u7ecf\u8fd9\u6837\u4e86\uff0c\u4f60\u4e3a\u4ec0\u4e48\u4e0d\u987a\u4ece\u4ed6\u5462?\u4f60\u603b\u8981\u7ed9\u4eba\u6700\u540e\u4e00\u6bb5\u65f6\u95f4\u4e00\u4e2a\u597d\u7684\u56de\u5fc6\u5427\uff0c\u6700\u540e\u7684\u65f6\u5149\u91cc\u3002\r\n \u56e0\u4e3a\u7d2b\u540d\u8fd9\u4e2a\u6bb5\u4f4d\u5f88\u5c34\u5c2c\uff0c\u7d2b\u540d\u6a59\u540d\u518d\u5f80\u4e0a\u4e00\u70b9\uff0cgrandmaster\uff0c\u53ef\u80fd\u8bf4\uff0c\u6b38\uff0c\u6709\u70b9\u5b9e\u529b\uff0c\u80fd\u64cd\u4f5c\u4e00\u4e0b\u3002\r\n \u7d2b\u540d\u5f80\u4e0b\uff0c\u7eff\u540d\uff0c\u84dd\u540d\uff0c\u554a\uff0c\u4eba\u5bb6\u662f\u7eaf\u5c5e\u73a9\u6e38\u620f\u7684\uff0c\u56e0\u4e3a\u592a\u5783\u573e\u4e86\uff0c\u81ea\u5df1\u4e5f\u77e5\u9053\u81ea\u5df1\u6ca1\u4ec0\u4e48\u5b9e\u529b\u3002\r\n \u4f46\u7d2b\u540d\uff0c\u4e0a\u4e0d\u53bb\u4e0b\u4e0d\u6765\u7684\u8fd9\u4e2a\u6bb5\u4f4d\uff0c\u4ed6\u89c9\u5f97\uff0c\u84dd\u540d\u7684\u4eba\u4e0d\u914d\u8ddf\u4ed6\u4e00\u8d77\u73a9\u513f\uff0c\u5bf9\u5427\uff1f\u84dd\u540d\u662f\u6700\u5783\u573e\u7684\u3002\r\n \u4f46\u662f\u5462\u4ed6\u60f3\u4e0a\u53bb\uff0c\u4ed6\u53c8\u4e0a\u4e0d\u53bb\uff0c\u6240\u4ee5\u8fd9\u4e2a\u5206\u6bb5\u662f\u6700\u5c34\u5c2c\u7684\uff0c\u6ca1\u529e\u6cd5\uff0c\u5361\u5728\u8fd9\u91cc\u4e86\u3002\r\n \u60f3\u64cd\u4f5c\uff0c\u53c8\u64cd\u4f5c\u4e0d\u8d77\u6765\uff0c\u6389\u4e0b\u53bb\u5427\uff0c\u4ed6\u53c8\u89c9\u5f97\u4e0d\u503c\u5f97\uff0c\u5bf9\u5427\uff0c\u6211\u597d\u4e0d\u5bb9\u6613\u4ece\u84dd\u540d\u6253\u5230\u7d2b\u540d\u4e86\uff0c\u6211\u4e3a\u4ec0\u4e48\u8fd8\u8981\u6389\u4e0b\u53bb\u5462?\r\n \u8fd9\u4e2a\u4eba\u8bf4\u4f18\u8d8a\u72d7\u8d8a\u8bf4\u8d8a\u8d77\u52b2\uff0c\u4e3a\u4ec0\u4e48\u4ed6\u4f1a\u8fd9\u4e48\u8bf4?\u56e0\u4e3a\u4ed6\u662f\u7d2b\u540d\u3002\r\n \u4ed6\u89c9\u5f97\u4f60\u6bd4\u6211\u6bb5\u4f4d\u9ad8\uff0c\u4f60\u8bf4\u7684\u4efb\u4f55\u8bdd\u90fd\u662f\u4f18\u8d8a\uff0c\u6211\u5e76\u4e0d\u7ba1\u4f60\u8bf4\u7684\u6709\u6ca1\u6709\u9053\u7406\u3002\r\n \u6211\u7d2b\u540d\uff0c\u6211\u6700\u731b\uff0c\u6211WF2017\u6211\u4e0a\u6211\u80fd\u593a\u51a0\uff0c\u90a3\u6253\u6bd4\u8d5b\u5168\u662fsb\u3002\u4f60\u6bd4\u6211\u6bb5\u4f4d\u9ad8\u4f60\u8bf4\u8bdd\u5c31\u662f\u653e\u5c41\uff0c\u8fd9\u5c31\u662f\u8fd9\u79cd\u4eba\u7684\u60f3\u6cd5\u3002\u4f46\u662f\u5462\uff0c\u4ed6\u7684\u60f3\u6cd5\u662f\u5bf9\u7684\uff0c\u4e3a\u4ec0\u4e48\u5462\uff1f\r\n \u56e0\u4e3a\u4ed6\u764c\u75c7\u665a\u671f\u3002\u6ca1\u529e\u6cd5\uff0c\u6211\u540c\u610f\uff0c\u5bf9\u4e0d\u8d77\uff0c\u6211\u4f18\u8d8a\u4e86\u3002\u53ef\u80fd\u662f\u6211\u81a8\u80c0\u4e86\uff0c\u4e0d\u597d\u610f\u601d\u554a\uff0c\u6211\u81a8\u80c0\u4e86\u3002\u6211\u7d2b\u540d\u662f\u6ca1\u64cd\u4f5c\uff0c\u96be\u9053\u6211\u5c31\u770b\u4e0d\u61c2\u8c01\u80cc\u9505\u5417\uff1f\r\n \u4e0d\u662f\uff0c\u5982\u679c\u4f60\u770b\u5f97\u61c2\u7684\u8bdd\uff0c\u5c31\u4e0d\u4f1a\u5728\u8fd9\u91cc\u62ac\u6760\u4e86\uff0c\u5bf9\u5427\u3002\r\n*/"
}