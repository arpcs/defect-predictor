{
    "id": 120645759,
    "contestId": 773,
    "creationTimeSeconds": 1624691403,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 773,
        "index": "A",
        "name": "Success Rate",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1700,
        "tags": [
            "binary search",
            "math"
        ]
    },
    "author": {
        "contestId": 773,
        "members": [
            {
                "handle": "TheStriker"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1494171900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "# include <bits/stdc++.h>\r\n# include <ext/pb_ds/assoc_container.hpp>\r\n# include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n# define pb push_back\r\n# define IOS ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n\r\ntypedef unsigned long long int ull;\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef tree<pair <ll, ll>, null_type, less<pair <ll, ll>>, rb_tree_tag, tree_order_statistics_node_update > pbds;\r\n//1. order_of_key(k) : number of elements strictly lesser than k\r\n//2. find_by_order(k) : k-th element in the set\r\n\r\nll const mod = 1e9 + 7;\r\n\r\nll power(ll x, ll y){\r\n\r\n    ll res = 1;\r\n    x %= mod;\r\n\r\n    if (x == 0){\r\n        return 0;\r\n    }\r\n\r\n    while (y > 0){\r\n        if (y & 1){\r\n            res = (res * x) % mod;\r\n        }\r\n        y = y >> 1;\r\n        x = (x * x) % mod;\r\n    }\r\n    return res;\r\n}\r\n\r\nvector <ll> prime;\r\n\r\nvoid Sieve(ll n){\r\n\tbool pri[n];\r\n    memset(pri, true, sizeof(pri));\r\n\r\n    for (ll p = 2; p * p <= n; p++){\r\n        if (pri[p] == true){\r\n            for (ll i = p * p; i <= n; i += p){\r\n                pri[i] = false;\r\n            }\r\n        }\r\n    }\r\n    for (ll p = 2; p <= n; p++){\r\n        if (pri[p] == true){\r\n            prime.pb(p);\r\n        }\r\n    }\r\n}\r\n\r\nmap <ll, ll> primeFactors(ll n){ \r\n\t\r\n\tmap <ll, ll> fact;\r\n    \r\n\twhile (n % 2 == 0){\r\n\t\tfact[2]++;\r\n\t\tn /= 2;\r\n\t}\t\r\n \r\n\tfor (ll i = 3; i * i <= n; i++){\r\n\t\twhile (n % i == 0){\r\n\t\t\tfact[i] ++;\r\n\t\t\tn /= i;\r\n\t\t}\r\n\t}\r\n\t\r\n\tif (n != 1){\r\n\t\tfact[n] = 1;\r\n\t}\r\n\treturn fact;   \r\n} \r\n\r\nvoid dijkstra(ll source, ll n, vector <pair <ll, ll>> adj[]){\r\n\tll dist[n], vis[n];\r\n\tfor (ll i = 0; i < n; i++){\r\n\t\tdist[i] = 1e16;\r\n\t\tvis[i] = 0;\r\n\t}\r\n\t\r\n\tdist[source] = 0;\r\n\t\r\n\tpriority_queue <pair <ll, ll>, vector <pair <ll, ll>>, greater<pair<ll, ll>>> pq;\r\n\tpq.push({0, source});\r\n\t\r\n\twhile (!pq.empty()){\r\n\t\tpair <ll, ll> p = pq.top();\r\n\t\tpq.pop();\r\n\t\t\r\n\t\tll dis = p.first;\r\n\t\tll targ = p.second;\r\n\t\t\r\n\t\tif (vis[targ]){\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\t\r\n\t\tvis[targ] = true;\r\n\t\t\r\n\t\tfor (auto x: adj[targ]){\r\n\t\t\tif (dis + x.second < dist[x.first]){\r\n\t\t\t\tdist[x.first] =  dis + x.second;\r\n\t\t\t\tpq.push({dist[x.first], x.first});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n}\r\n\r\nll phi(ll n){\r\n\tfloat result = n;\r\n    \r\n\tfor(ll p = 2; p * p <= n; ++p){\r\n\t\tif (n % p == 0){\r\n\t\t\twhile (n % p == 0){\r\n\t\t\t\tn /= p;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult *= (1.0 - (1.0 / (float)p));\r\n\t\t}\r\n\t}\r\n  \r\n\tif (n > 1){\r\n\t\tresult *= (1.0 - (1.0 / (float)n));\t\t\r\n\t}\r\n\treturn (ll) result;\r\n}\r\n\r\nvoid solve(){\t\r\n\tll x, y, p, q;\r\n\tcin >> x >> y >> p >> q;\r\n\r\n\tif (p == q){\r\n\t\tif (x == y){\r\n\t\t\tcout << 0 << endl;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tcout << -1 << endl;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tll l = 0, r = 1e10;\r\n\tll ans = -1;\r\n\twhile (l <= r){\r\n\t\tll m = l + (r - l) / 2;\r\n\t\tll successful = p * m;\r\n\t\tll total = q * m;\r\n\t\tll currSuccessful = x;\r\n\t\tll currTotal = y;\r\n\t\tbool ok = (total >= currTotal) and (successful >= currSuccessful) and (total - currTotal >= successful - currSuccessful);\r\n\t\tif (ok){\r\n\t\t\tans = total - currTotal;\r\n\t\t\tr = m - 1;\t\r\n\t\t}\r\n\t\telse{\r\n\t\t\tl = m + 1;\r\n\t\t}\r\n\t}\r\n\tcout << ans << endl;\r\n}\t\r\n\r\nint main(){\r\n//\tIOS\r\n   \t//Sieve(1e6);\r\n    int t = 1;\r\n    //std::cout << std::fixed;\r\n    //std::cout << std::setprecision(50) << ans;\r\n\tcin >> t;\r\n\r\n    while (t--){\r\n        solve();\r\n    }\r\n\r\n}\r\n"
}