{
    "id": 232433021,
    "contestId": 1811,
    "creationTimeSeconds": 1699734653,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1811,
        "index": "D",
        "name": "Umka and a Long Flight",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "constructive algorithms",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1811,
        "members": [
            {
                "handle": "StoneCoder"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1680618900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 2386,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef int64_t ll;\n\nll dp[51];\nmap<ll, ll> taken;\n\nbool check(ll n1)\n{\n    ll x = n1;\n    x -= (1);\n    bool flag1 = false;\n    if (x != 0)\n    {\n        if (taken[1] == 0)\n        {\n            for (ll i = 3; i < 50; i += 4)\n            {\n                x -= dp[i];\n                if (x == 0)\n                {\n                    taken[1] = 1;\n                    flag1 = true;\n                    break;\n                }\n            }\n        }\n        if (!flag1)\n        {\n            flag1 = true;\n            {\n                x = n1;\n                if (taken[2] == 0)\n                {\n                    for (ll i = 2; i < 50; i += 4)\n                    {\n                        x -= dp[i];\n                        if (x == 0)\n                        {\n                            taken[2] = 1;\n\n                            flag1 = true;\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (!flag1)\n            {\n                x = n1;\n                flag1 = true;\n                if (taken[3] == 0)\n                {\n                    for (ll i = 4; i < 50; i += 4)\n                    {\n                        x -= dp[i];\n                        if (x == 0)\n                        {\n                            taken[3] = 1;\n\n                            flag1 = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (!flag1)\n                {\n                    x = n1;\n                    flag1 = true;\n                    if (taken[4] == 0)\n                    {\n                        for (ll i = 5; i < 50; i += 4)\n                        {\n                            x -= dp[i];\n\n                            if (x == 0)\n                            {\n                                taken[4] = 1;\n                                flag1 = true;\n                                break;\n                            }\n                        }\n                    }\n\n                    if (!flag1)\n                    {\n                        flag1 = false;\n                    }\n                }\n            }\n        }\n    }\n\n    return flag1;\n}\n\nmap<ll, ll> isFibsum(ll n)\n{\n    map<ll, ll> m;\n    bool flag = false;\n    vector<ll> v;\n\n    for (int i = 49; i >= 0; i--)\n    {\n        if (dp[i] <= n)\n        {\n            n -= dp[i];\n            if (i == 0)\n            {\n                v.push_back(1);\n            }\n            else\n            {\n                v.push_back(i);\n            }\n        }\n\n        if (n == 0)\n        {\n            flag = true;\n            break;\n        }\n    }\n\n    if (flag)\n    {\n        for (auto x : v)\n        {\n            m[x]++;\n        }\n    }\n\n    return m;\n}\n\nint main()\n{\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n    cout.tie(0);\n    cout.sync_with_stdio(0);\n    int t = 1;\n    cin >> t;\n    for (int i = 0; i <= 49; i++)\n    {\n        dp[i] = 0;\n    }\n    dp[0] = 1;\n    dp[1] = 1;\n\n    for (int i = 2; i <= 49; i++)\n    {\n        dp[i] = dp[i - 1] + dp[i - 2];\n    }\n\n    while (t--)\n    {\n        ll n, x, y;\n        cin >> n >> x >> y;\n        ll width = dp[n + 1];\n        ll height = dp[n];\n        map<ll, ll> m;\n        taken[1] = 0;\n        taken[2] = 0;\n        taken[3] = 0;\n        taken[4] = 0;\n\n        bool flag = true;\n\n        ll n1 = (x - 1), n2 = (y - 1), n3 = (height - x), n4 = (width - y);\n        m[1] = 1;\n\n        // if (!(n1 != 0 && check(n1)))\n        // {\n        //     flag = false;\n        // }\n\n        // if (!(n2 != 0 && check(n2)))\n        // {\n        //     flag = false;\n        // }\n\n        // if (!(n3 != 0 && check(n3)))\n        // {\n        //     flag = false;\n        // }\n\n        // if (!(n4 != 0 && check(n4)))\n        // {\n        //     flag = false;\n        // }\n        map<ll, ll> m1 = isFibsum(n1);\n        if (n1 != 0 && m1.size() == 0)\n        {\n\n            flag = false;\n        }\n        else\n        {\n            for (auto x : m1)\n            {\n                m[x.first] += x.second;\n            }\n        }\n\n        map<ll, ll> m2 = isFibsum(n2);\n        if (n2 != 0 && m2.size() == 0)\n        {\n            flag = false;\n        }\n        else\n        {\n            for (auto x : m2)\n            {\n                m[x.first] += x.second;\n            }\n        }\n\n        map<ll, ll> m3 = isFibsum(n3);\n        if (n3 != 0 && m3.size() == 0)\n        {\n            flag = false;\n        }\n        else\n        {\n            for (auto x : m3)\n            {\n                m[x.first] += x.second;\n            }\n        }\n\n        map<ll, ll> m4 = isFibsum(n4);\n        if (n4 != 0 && m4.size() == 0)\n        {\n            flag = false;\n        }\n        else\n        {\n            for (auto x : m4)\n            {\n                m[x.first] += x.second;\n            }\n        }\n\n        if (m[1] > 2)\n        {\n            flag = false;\n        }\n\n        for (int i = 2; i <= 50; i++)\n        {\n            if (m[i] >= 2)\n            {\n                flag = false;\n            }\n        }\n\n        ll maxi = 0;\n        for (auto x : m)\n        {\n            if (x.second == 0)\n                maxi = max(maxi, x.first);\n        }\n\n        ll index = 1;\n        for (int i = 1; i < 50; i++)\n        {\n            if (maxi == dp[i])\n            {\n                index = i;\n                break;\n            }\n        }\n\n        for (int i = 1; i <= index; i++)\n        {\n            if (m[i] == 0)\n            {\n                flag = false;\n            }\n        }\n\n        // cout << '\\n';\n\n        if (flag)\n        {\n            cout << \"YES\" << '\\n';\n        }\n        else\n        {\n            cout << \"NO\" << '\\n';\n        }\n    }\n    return 0;\n}"
}