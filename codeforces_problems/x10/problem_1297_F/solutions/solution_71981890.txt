{
    "id": 71981890,
    "contestId": 1297,
    "creationTimeSeconds": 1582814457,
    "relativeTimeSeconds": 3957,
    "problem": {
        "contestId": 1297,
        "index": "F",
        "name": "Movie Fan",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1297,
        "members": [
            {
                "handle": "Heltion"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1582810500
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 1543,
    "memoryConsumedBytes": 16076800,
    "source": "import java.util.*\r\nimport kotlin.math.max\r\ndata class Movie(val a : Int, val b : Int, val id : Int)\r\nfun main(){\r\n    fun readInt() = readLine()!!.toInt()\r\n    fun readInts() = readLine()!!.split(' ').map(String::toInt)\r\n    fun readLongs() = readLine()!!.split(' ').map(String::toLong)\r\n    repeat(readInt()){\r\n        val (n, m) = readInts()\r\n        var movies = Array(n){\r\n            val (a, b) = readInts()\r\n            Movie(a, b, it)\r\n        }.sortedBy{it.a}\r\n        val ans = IntArray(n)\r\n        var d = 0\r\n        var i = 0\r\n        val set = TreeSet<Movie>(compareBy<Movie>({it.b}, {it.id}))\r\n        while(i < n || set.isNotEmpty()){\r\n            while(i < n && movies[i].a <= d){\r\n                set.add(movies[i])\r\n                i += 1\r\n            }\r\n            if(i < n && set.isEmpty()){\r\n                d = movies[i].a\r\n            }\r\n            while(i < n && movies[i].a <= d){\r\n                set.add(movies[i])\r\n                i += 1\r\n            }\r\n            var tm = m\r\n            while(tm > 0 && set.isNotEmpty()){\r\n                ans[set.pollFirst().id] = d\r\n                tm -= 1\r\n            }\r\n            d += 1\r\n        }\r\n        movies = movies.sortedBy{it.id}\r\n        println(ans.withIndex().map{max(it.value - movies[it.index].b, 0)}.max())\r\n        for(x in ans) print(\"$x \")\r\n        println()\r\n    }\r\n}"
}