{
    "id": 72611509,
    "contestId": 1297,
    "creationTimeSeconds": 1583551307,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1297,
        "index": "F",
        "name": "Movie Fan",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1297,
        "members": [
            {
                "handle": "dorastephen"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1582810500
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 405,
    "memoryConsumedBytes": 1433600,
    "source": "private fun readLn() = readLine()!! // string line\nprivate fun readInt() = readLn().toInt() // single int\nprivate fun readDouble() = readLn().toDouble() // single int\nprivate fun readStrings() = readLn().split(\" \") // list of strings\nprivate fun readInts() = readStrings().map { it.toInt() } // list of ints\n\n\nfun main() {\n    var nCount = readInt()\n\n    for (i in 1..nCount) {\n        var (nMovieCount, nMoveCountEacyDay) = readInts()\n\n        var aPairMoviePeriod = Array<Pair<Int, Int>>(nMovieCount) {Pair(0, 0)}\n        for (nMovie in 0..nMovieCount-1) {\n            var nFromTo = readInts()\n            aPairMoviePeriod[nMovie] = Pair(nFromTo[0], nFromTo[1])\n        }\n\n        var anWatchDay = IntArray(nMovieCount, {0})\n        var anIncOrder = IntArray(nMovieCount, { i -> i})\n        var anDecOrder = IntArray(nMovieCount, { i -> i})\n        anIncOrder = anIncOrder.sortedWith(compareBy({aPairMoviePeriod[it].first}, {aPairMoviePeriod[it].second})).toIntArray()\n        anDecOrder = anIncOrder.sortedWith(compareBy({aPairMoviePeriod[it].second}, {aPairMoviePeriod[it].first})).toIntArray()\n\n//        println(\"Begin\")\n//        for (nIndex in 0..nMovieCount-1) {\n//            println(aPairMoviePeriod[anIncOrder[nIndex]])\n//        }\n//        println(\"End\")\n//        for (nIndex in 0..nMovieCount-1) {\n//            println(aPairMoviePeriod[anDecOrder[nIndex]])\n//        }\n\n        var nCurr = 0\n        var nCapaciy = nMoveCountEacyDay\n        var nOutPeriodDay = 0\n\n        var nIncIndex = 0\n        var nDecIndex = 0\n\n        while (nIncIndex < nMovieCount) {\n//            println(\"nIncIndex=${nIncIndex}-----------\")\n            var nIndex = anIncOrder[nIncIndex]\n            if (aPairMoviePeriod[anIncOrder[nIncIndex]].first > nCurr) {\n                nCapaciy = nMoveCountEacyDay\n                nCurr = aPairMoviePeriod[anIncOrder[nIncIndex]].first\n            }\n            if (nDecIndex < nMovieCount && anIncOrder[nIncIndex] != anDecOrder[nDecIndex]) {\n                if (aPairMoviePeriod[anDecOrder[nDecIndex]].first <= nCurr) {\n                    nIndex = anDecOrder[nDecIndex]\n                }\n            }\n\n            while (0 == anWatchDay[nIndex]) {\n                if (nCapaciy > 0) {\n                    anWatchDay[nIndex] = nCurr\n                    if (nCurr > aPairMoviePeriod[nIndex].second) {\n                        if (nCurr - aPairMoviePeriod[nIndex].second > nOutPeriodDay) {\n                            nOutPeriodDay = nCurr - aPairMoviePeriod[nIndex].second\n                        }\n                    }\n                    nCapaciy--\n                } else {\n                    nCurr++\n                    nCapaciy = nMoveCountEacyDay\n                    if (nDecIndex < nMovieCount && anIncOrder[nIncIndex] != anDecOrder[nDecIndex]) {\n                        if (aPairMoviePeriod[anDecOrder[nDecIndex]].first <= nCurr) {\n                            nIndex = anDecOrder[nDecIndex]\n                        }\n                    }\n\n                }\n            }\n//            println(\"nCurr=${nCurr}\")\n//            println(\"nIndex=${nIndex}\")\n//            println(\"nCapaciy=${nCapaciy}\")\n//            println(\"anIncOrder[nIncIndex]=${anIncOrder[nIncIndex]}\")\n//            println(\"anDecOrder[nDecIndex]=${anDecOrder[nDecIndex]}\")\n//            println(\"anWatchDay[anIncOrder[nIncIndex]]=${anWatchDay[anIncOrder[nIncIndex]]}\")\n//            println(\"anWatchDay[anDecOrder[nDecIndex]]=${anWatchDay[anDecOrder[nDecIndex]]}\")\n//            println(anWatchDay.joinToString(separator = \" \"))\n\n            while (nIncIndex < nMovieCount && anWatchDay[anIncOrder[nIncIndex]] > 0) {\n                nIncIndex++\n            }\n//            println(\"nIncIndex=${nIncIndex}\")\n            while (nDecIndex < nMovieCount && anWatchDay[anDecOrder[nDecIndex]] > 0) {\n                nDecIndex++\n            }\n//            println(\"nDecIndex=${nDecIndex}\")\n        }\n        println(nOutPeriodDay)\n        println(anWatchDay.joinToString(separator = \" \"))\n    }\n}"
}