{
    "id": 71986925,
    "contestId": 1297,
    "creationTimeSeconds": 1582818357,
    "relativeTimeSeconds": 7857,
    "problem": {
        "contestId": 1297,
        "index": "F",
        "name": "Movie Fan",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1297,
        "members": [
            {
                "handle": "artsin666"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1582810500
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 530,
    "memoryConsumedBytes": 27545600,
    "source": "import java.io.*\r\nimport java.util.*\r\nimport kotlin.collections.*\r\nimport kotlin.math.*\r\n\r\nconst val INF = 2000000000L\r\n\r\nval reader = InputReader(System.`in`)\r\nval writer = OutputWriter(System.out)\r\n\r\nfun main(args: Array<String>)\r\n{\r\n    val tests = reader.nextInt()\r\n    for (test in 0 until tests)\r\n    {\r\n        val n = reader.nextInt()\r\n        val m = reader.nextInt()\r\n        val a = IntArray(n)\r\n        val b = IntArray(n)\r\n        val events = TreeMap<Int, ArrayList<Int>>()\r\n        for (i in 0 until n)\r\n        {\r\n            a[i] = reader.nextInt()\r\n            b[i] = reader.nextInt()\r\n\r\n            if (!events.containsKey(a[i]))\r\n                events[a[i]] = ArrayList()\r\n            events[a[i]]!!.add(i)\r\n        }\r\n\r\n        val curr = TreeSet<Pair<Int, Int>>(Comparator<Pair<Int, Int>> { x, y ->\r\n            if (x.first != y.first)\r\n                return@Comparator x.first.compareTo(y.first)\r\n            x.second.compareTo(y.second)\r\n        })\r\n        var result = 0\r\n        val resultT = IntArray(n)\r\n        var t = 0\r\n        while (true)\r\n        {\r\n            if (events.containsKey(t))\r\n                for (x in events[t]!!)\r\n                    curr.add(Pair(b[x], x))\r\n\r\n            if (curr.isEmpty())\r\n            {\r\n                val newT = events.higherKey(t)\r\n                if (newT != null)\r\n                {\r\n                    t = newT\r\n                    for (x in events[t]!!)\r\n                        curr.add(Pair(b[x], x))\r\n                }\r\n                else\r\n                    break\r\n            }\r\n\r\n            for (i in 0 until m)\r\n            {\r\n                if (curr.isEmpty())\r\n                    break\r\n\r\n                val fr = curr.first()!!\r\n                val xB = fr.first\r\n                val x = fr.second\r\n                result = max(result, t - xB)\r\n                resultT[x] = t\r\n                curr.remove(fr)\r\n            }\r\n            t++\r\n        }\r\n\r\n        writer.println(\"$result\")\r\n        for (i in 0 until n)\r\n            writer.print(\"${resultT[i]} \")\r\n        writer.println(\"\")\r\n    }\r\n\r\n    writer.close()\r\n}\r\n\r\nclass InputReader(stream: InputStream) {\r\n    private val reader = BufferedReader(InputStreamReader(stream), 32768)\r\n    private var tokenizer: StringTokenizer? = null\r\n\r\n    operator fun next(): String {\r\n        while (tokenizer == null || !tokenizer!!.hasMoreTokens()) {\r\n            try {\r\n                tokenizer = StringTokenizer(reader.readLine())\r\n            } catch (e: IOException) {\r\n                throw RuntimeException(e)\r\n            }\r\n        }\r\n        return tokenizer!!.nextToken()\r\n    }\r\n\r\n    fun nextInt(): Int {\r\n        return next().toInt()\r\n    }\r\n\r\n    fun nextLong(): Long {\r\n        return next().toLong()\r\n    }\r\n}\r\n\r\nclass OutputWriter(stream: OutputStream) {\r\n    private val writer = PrintWriter(BufferedWriter(OutputStreamWriter(stream)))\r\n\r\n    fun close() {\r\n        writer.close()\r\n    }\r\n\r\n    fun print(i: String) {\r\n        writer.print(i)\r\n    }\r\n\r\n    fun print(i: Char) {\r\n        writer.print(i)\r\n    }\r\n\r\n    fun println(i: String) {\r\n        writer.println(i)\r\n    }\r\n}"
}