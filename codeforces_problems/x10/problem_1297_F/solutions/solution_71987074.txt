{
    "id": 71987074,
    "contestId": 1297,
    "creationTimeSeconds": 1582818482,
    "relativeTimeSeconds": 7982,
    "problem": {
        "contestId": 1297,
        "index": "F",
        "name": "Movie Fan",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "data structures",
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1297,
        "members": [
            {
                "handle": "DmitriyOwlet"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1582810500
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 30,
    "timeConsumedMillis": 2776,
    "memoryConsumedBytes": 37785600,
    "source": "import java.io.BufferedReader\r\nimport java.io.InputStreamReader\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\nimport kotlin.collections.HashMap\r\n\r\nval k : Long = 1000000\r\n\r\nfun check(n: Int, m: Int, films: Array<LongArray>, d: Long): Boolean {\r\n    var i = 0\r\n    var j = 0\r\n    val curr = TreeSet<Long>()\r\n    while (j < n || !curr.isEmpty()){\r\n        if (!curr.isEmpty() && curr.first() / k < i){\r\n            return false\r\n        }\r\n        while (j < n && films[j][0].toInt() == i){\r\n            curr.add((films[j][1] + d) * k + j)\r\n            j++\r\n        }\r\n        if (!curr.isEmpty()){\r\n            for (I in 1..m){\r\n                if (curr.isEmpty()) break\r\n                curr.remove(curr.first())\r\n            }\r\n        }\r\n        if (curr.isEmpty()){\r\n            if (j == n) break\r\n            i = films[j][0].toInt()\r\n        } else i++\r\n    }\r\n    return true\r\n}\r\n\r\nfun solve(n: Int, m: Int, films : Array<LongArray>, d: Long) {\r\n    var i = 0\r\n    var j = 0\r\n    val curr = TreeSet<Long>()\r\n    val ans = IntArray(n)\r\n    while (j < n || !curr.isEmpty()){\r\n        while (j < n && films[j][0].toInt() == i){\r\n            curr.add((films[j][1] + d) * k + films[j][2])\r\n            j++\r\n        }\r\n        if (!curr.isEmpty()){\r\n            for (I in 1..m){\r\n                if (curr.isEmpty()) break\r\n                ans[(curr.first() % k).toInt()] = i\r\n                curr.remove(curr.first())\r\n            }\r\n        }\r\n        if (curr.isEmpty()){\r\n            if (j == n) break\r\n            i = films[j][0].toInt()\r\n        } else i++\r\n    }\r\n    for (i in 0..n - 1) print(\"${ans[i]} \")\r\n    println()\r\n}\r\n\r\nfun main(args: Array<String>) {\r\n    val reader = BufferedReader(InputStreamReader(System.`in`))\r\n    val t = reader.readLine().toInt()\r\n    for (i0 in 1..t) {\r\n        var data = reader.readLine().split(\" \")\r\n        val n = data[0].toInt()\r\n        val m = data[1].toInt()\r\n        val l = LongArray(n)\r\n        val r = LongArray(n)\r\n        for (i in 0..n - 1) {\r\n            data = reader.readLine().split(\" \")\r\n            l[i] = data[0].toLong()\r\n            r[i] = data[1].toLong()\r\n        }\r\n        val films = Array(n){LongArray(3)}\r\n        for (i in 0..n - 1){\r\n            films[i][0] = l[i]\r\n            films[i][1] = r[i]\r\n            films[i][2] = i.toLong()\r\n        }\r\n        films.sortBy { it[0] }\r\n        var lt = 0\r\n        var rt = 200000\r\n        while (lt < rt) {\r\n            val md = (lt + rt) / 2\r\n            if (check(n, m, films, md.toLong())) rt = md else lt = md + 1\r\n        }\r\n        println(lt)\r\n        for(i in 0..n - 1) r[i] += lt.toLong()\r\n        solve(n, m, films, lt.toLong())\r\n    }\r\n}"
}