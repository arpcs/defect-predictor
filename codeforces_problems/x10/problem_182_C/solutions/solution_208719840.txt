{
    "id": 208719840,
    "contestId": 182,
    "creationTimeSeconds": 1686062143,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 182,
        "index": "C",
        "name": "Optimal Sum",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2000,
        "tags": [
            "data structures",
            "greedy"
        ]
    },
    "author": {
        "contestId": 182,
        "members": [
            {
                "handle": "AppleFicial"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335280200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 11264000,
    "source": "#include<cstdio>\r\n#include<algorithm>\r\n#include<cmath>\r\n#include<iostream>\r\n#include<set>\r\n#include<vector>\r\n#include<queue>\r\n#include<stack>\r\n#include<cstring>\r\n#include<cstdlib>\r\n#include<map>\r\n#include<ctime>\r\n#define int long long\r\n#define rep(i,a,b) for(register int i=a;i<=b;++i)\r\n#define rev(i,a,b) for(register int i=a;i>=b;--i)\r\n#define gra(i,u) for(register int i=head[u];i;i=edge[i].nxt)\r\n#define Clear(a) memset(a,0,sizeof(a))\r\n#define yes puts(\"YES\")\r\n#define no puts(\"NO\")\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int INF(1e9+10);\r\nconst ll LLINF(1e18+10);\r\ninline int read()\r\n{\r\n\tint s=0,w=1;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\r\n\treturn s*w;\r\n}\r\ntemplate<typename T>\r\ninline T Min(T x,T y){return x<y?x:y;}\r\ntemplate<typename T>\r\ninline T Max(T x,T y){return x>y?x:y;}\r\ntemplate<typename T>\r\ninline void Swap(T&x,T&y){T t=x;x=y;y=t;return;}\r\ntemplate<typename T>\r\ninline T Abs(T x){return x<0?-x:x;}\r\n\r\nconst int MOD(1e9+7);\r\ntemplate<typename T>\r\ninline T add(T x){return x;}\r\ntemplate<typename T,typename... types>\r\ninline T add(T x,types... y){T z=add<T>(y...);return x+z>=MOD?x+z-MOD:x+z;}\r\ntemplate<typename T>\r\ninline T mul(T x){return x;}\r\ntemplate<typename T,typename... types>\r\ninline T mul(T x,types... y){return (ll)x*mul<T>(y...)%MOD;}\r\ninline int sub(int x,int y){return add(x-y,MOD);}\r\n\r\nconst int MAXN(1e5+10);\r\n\r\nint n,a[MAXN],len,k;\r\n\r\nstruct FHQ_Treap\r\n{\r\n\tint rt;\r\n\tint lc[MAXN],rc[MAXN],rnd[MAXN],tot;\r\n\tint siz[MAXN],val[MAXN];\r\n\tll sum[MAXN];\r\n\t\r\n\tinline void push_up(int u)\r\n\t{\r\n\t\tsum[u]=sum[lc[u]]+sum[rc[u]]+val[u];\r\n\t\tsiz[u]=siz[lc[u]]+siz[rc[u]]+1;\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tinline int New(int v)\r\n\t{\r\n\t\tint u=++tot;\r\n\t\trnd[u]=rand();\r\n\t\tsiz[u]=1;\r\n\t\tsum[u]=v,val[u]=v;\r\n\t\treturn u;\r\n\t}\r\n\t\r\n\tinline void split(int u,int k,int&x,int&y)\r\n\t{\r\n\t\tif(!u) x=0,y=0;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(val[u]<=k) x=u,split(rc[u],k,rc[u],y);\r\n\t\t\telse y=u,split(lc[u],k,x,lc[u]);\r\n\t\t\tpush_up(u);\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tinline int unite(int x,int y)\r\n\t{\r\n\t\tif(!x||!y) return x+y;\r\n\t\tif(rnd[x]<rnd[y])\r\n\t\t{\r\n\t\t\trc[x]=unite(rc[x],y);\r\n\t\t\tpush_up(x);\r\n\t\t\treturn x;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlc[y]=unite(x,lc[y]);\r\n\t\t\tpush_up(y);\r\n\t\t\treturn y;\r\n\t\t} \r\n\t}\r\n\t\r\n\tinline int kth(int u,int k)\r\n\t{\r\n\t\tif(siz[u]<=0) return 0;\r\n\t\tif(siz[lc[u]]>=k) return kth(lc[u],k);\r\n\t\tif(siz[lc[u]]+1==k) return sum[lc[u]]+val[u];\r\n\t\treturn sum[lc[u]]+val[u]+kth(rc[u],k-siz[lc[u]]-1);\t\r\n\t}\t\r\n\t\r\n\tinline int query(int k)\r\n\t{\r\n//\t\tprintf(\"kth:%lld %lld %lld\\n\",kth(rt,k),k,siz[rt]);\r\n\t\treturn sum[rt]-kth(rt,k);\r\n\t}\r\n\t\r\n\tinline ll qsum(int v)\r\n\t{\r\n\t\tint x,y;\r\n\t\tsplit(rt,v,x,y);\r\n\t\tll now=sum[x];\r\n\t\trt=unite(x,y);\r\n\t\treturn now;\r\n\t}\r\n\t\r\n\tinline void Insert(int v)\r\n\t{\r\n\t\tint x,y;\r\n\t\tsplit(rt,v,x,y);\r\n\t\trt=unite(unite(x,New(v)),y);\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tinline void Del(int v)\r\n\t{\r\n\t\tint x,y,z;\r\n\t\tsplit(rt,v-1,x,y);\r\n\t\tsplit(y,v,y,z);\r\n\t\ty=unite(lc[y],rc[y]);\r\n\t\trt=unite(x,unite(y,z));\r\n\t\treturn;\r\n\t}\r\n\t\r\n\tinline int SIZ(){return siz[rt];}\r\n\tinline ll SUM(){return sum[rt];}\r\n};\r\nFHQ_Treap t1,t2;\r\n\r\nll sum[MAXN];\r\ninline ll qsum(int l,int r)\r\n{\r\n\treturn sum[r]-sum[l-1];\r\n}\r\n\r\nll ans;\r\n\r\ninline void solve(ll S)\r\n{\r\n\tif(t1.SIZ()<=k) ans=Max(ans,Abs(S-t1.SUM()*2));\r\n\telse ans=Max(ans,Abs(S-t1.query(t1.SIZ()-k)*2));\r\n\tif(t2.SIZ()<=k) ans=Max(ans,Abs(S+t2.SUM()*2))/*,printf(\"%lld %d\\n\",t2.SUM(),t2.SIZ())*/;\r\n\telse ans=Max(ans,Abs(S+t2.query(t2.SIZ()-k)*2))/*,printf(\"%lld\\n\",t2.query(t2.SIZ()-k))*/;\r\n\treturn;\r\n}\r\n\r\nsigned main()\r\n{\r\n\tn=read(),len=read();\r\n\trep(i,1,n) a[i]=read(),sum[i]=sum[i-1]+a[i];\r\n\tk=Min(read(),len);\r\n\trep(i,1,len)\r\n\t{\r\n\t\tif(a[i]>0) t1.Insert(a[i]);\r\n\t\tif(a[i]<0) t2.Insert(-a[i]);\r\n\t}\r\n\tsolve(sum[len]);\r\n//\tprintf(\"%lld\\n\",ans);\r\n\trep(i,2,n-len+1)\r\n\t{\r\n\t\tif(a[i-1]<0) t2.Del(-a[i-1]);\r\n\t\tif(a[i-1]>0) t1.Del(a[i-1]);\r\n\t\tif(a[i+len-1]<0) t2.Insert(-a[i+len-1]);\r\n\t\tif(a[i+len-1]>0) t1.Insert(a[i+len-1]);\r\n\t\tsolve(sum[i+len-1]-sum[i-1]);\r\n\t}\r\n\tprintf(\"%lld\\n\",ans);\r\n\treturn 0;\r\n}\r\n/* things to check\r\n1.  int overflow or long long memory need\r\n2.  recursion/array/binary search/dp/loop bounds\r\n3.  precision\r\n4.  special cases(n=1,bounds)\r\n5.  delete debug statements\r\n6.  initialize(especially multi-tests)\r\n7.  = or == , n or m ,++ or -- , i or j , > or >= , < or <=\r\n8.  keep it simple and stupid\r\n9.  do not delete, use // instead\r\n10. operator priority\r\n11. is there anything extra to output?\r\n12. ...\r\n*/\r\n\r\n/* something to think about\r\n1. greedy? dp? searching? dp with matrix/ segment tree? binary search?\r\n2. If contains \"not\", why not ?????? or few affect?\r\n*/\r\n\r\n/*\r\n\r\n9 9\r\n4 4 -3 -3 -3 3 3 3 -2\r\n2\r\n\r\n18\r\n*/"
}