{
    "id": 203518181,
    "contestId": 182,
    "creationTimeSeconds": 1682488894,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 182,
        "index": "C",
        "name": "Optimal Sum",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2000,
        "tags": [
            "data structures",
            "greedy"
        ]
    },
    "author": {
        "contestId": 182,
        "members": [
            {
                "handle": "Felix555"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335280200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nint32_t main() {\r\n    int len,m,n,answer=LLONG_MIN;\r\n    cin >> n >> len;\r\n    int a[n],op1,op2;\r\n    for (int i = 0; i < n; i++) cin >> a[i];\r\n    cin >> m;\r\n    tuple<int,set<pair<int,int>>,set<pair<int,int>>> A;\r\n    get<0>(A) = 0;\r\n    if (m < len) {\r\n        int sum1=0,sum2=0;\r\n        set<pair<int,int>> b1,c1,b2,c2,d1,d2;\r\n        for (int i = 0; i < len; i++) {\r\n            if (a[i] < 0) {\r\n                b1.insert({a[i],i});\r\n                b2.insert({a[i],i});\r\n            } else {\r\n                c1.insert({a[i],i});\r\n                c2.insert({a[i],i});\r\n            }\r\n        }\r\n        for (op1 = m; !c1.empty() && op1; op1--) {\r\n            auto x = *c1.rbegin();\r\n            c1.erase(x);\r\n            b1.insert({-x.first,x.second});\r\n            d1.insert({-x.first,x.second});\r\n        }\r\n        for (auto [x,_] : b1) sum1 += x;\r\n        for (auto [x,_] : c1) sum1 += x;\r\n        for (op2 = m; !b2.empty() && op2; op2--) {\r\n            auto x = *b2.begin();\r\n            b2.erase(x);\r\n            c2.insert({-x.first,x.second});\r\n            d2.insert({-x.first,x.second});\r\n        }\r\n        for (auto [x,_] : b2) sum2 += x;\r\n        for (auto [x,_] : c2) sum2 += x;\r\n        answer = max({answer,abs(sum1),abs(sum2)});\r\n        for (int i = len; i < n; i++) {\r\n            sum1 += a[i];\r\n            sum2 += a[i];\r\n            if (a[i] < 0) {\r\n                b1.insert({a[i],i});\r\n                b2.insert({a[i],i});\r\n            } else {\r\n                c1.insert({a[i],i});\r\n                c2.insert({a[i],i});\r\n            }\r\n            if (a[i-len] >= 0 && b1.count({-a[i-len],i-len})) {\r\n                b1.erase({-a[i-len],i-len});\r\n                d1.erase({-a[i-len],i-len});\r\n                sum1 += a[i-len];\r\n                if (!c1.empty()) {\r\n                    auto x = *c1.rbegin();\r\n                    c1.erase(x);\r\n                    b1.insert({-x.first,x.second});\r\n                    d1.insert({-x.first,x.second});\r\n                    sum1 -= 2*x.first;\r\n                }\r\n            } else if (a[i-len] >= 0) {\r\n                sum1 -= a[i-len];\r\n                c1.erase({a[i-len],i-len});\r\n                if (!c1.empty() && !d1.empty() && c1.rbegin()->first > -d1.rbegin()->first) {\r\n                    auto x = *c1.rbegin();\r\n                    auto y = *d1.rbegin();\r\n                    c1.erase(x);\r\n                    b1.erase(y);\r\n                    d1.erase(y);\r\n                    d1.insert({-x.first,x.second});\r\n                    b1.insert({-x.first,x.second});\r\n                    c1.insert({-y.first,y.second});\r\n                    sum1 -= 2*x.first+2*y.first;\r\n                }\r\n            } else {\r\n                b1.erase({a[i-len],i-len});\r\n                sum1 -= a[i-len];\r\n                if (!c1.empty() && !d1.empty() && c1.rbegin()->first > -d1.rbegin()->first) {\r\n                    auto x = *c1.rbegin();\r\n                    auto y = *d1.rbegin();\r\n                    c1.erase(x);\r\n                    b1.erase(y);\r\n                    d1.erase(y);\r\n                    d1.insert({-x.first,x.second});\r\n                    b1.insert({-x.first,x.second});\r\n                    c1.insert({-y.first,y.second});\r\n                    sum1 -= 2*x.first+2*y.first;\r\n                }\r\n            }\r\n            if (a[i-len] < 0 && c2.count({-a[i-len],i-len})) {\r\n                c2.erase({-a[i-len],i-len});\r\n                d2.erase({-a[i-len],i-len});\r\n                sum2 += a[i-len];\r\n                if (!b2.empty()) {\r\n                    auto x = *b2.begin();\r\n                    b2.erase(x);\r\n                    c2.insert({-x.first,x.second});\r\n                    d2.insert({-x.first,x.second});\r\n                    sum2 -= 2*x.first;\r\n                }\r\n            } else if (a[i-len] < 0) {\r\n                sum2 -= a[i-len];\r\n                b2.erase({a[i-len],i-len});\r\n                if (!b2.empty() && !d2.empty() && -b2.begin()->first > d2.begin()->first) {\r\n                    auto x = *b2.begin();\r\n                    auto y = *d2.begin();\r\n                    b2.erase(x);\r\n                    c2.erase(y);\r\n                    d2.erase(y);\r\n                    d2.insert({-x.first,x.second});\r\n                    c2.insert({-x.first,x.second});\r\n                    b2.insert({-y.first,y.second});\r\n                    sum2 -= 2*x.first+2*y.first;\r\n                }\r\n            } else {\r\n                c2.erase({a[i-len],i-len});\r\n                sum2 -= a[i-len];\r\n                if (!b2.empty() && !d2.empty() && -b2.begin()->first > d2.begin()->first) {\r\n                    auto x = *b2.begin();\r\n                    auto y = *d2.begin();\r\n                    b2.erase(x);\r\n                    c2.erase(y);\r\n                    d2.erase(y);\r\n                    d2.insert({-x.first,x.second});\r\n                    c2.insert({-x.first,x.second});\r\n                    b2.insert({-y.first,y.second});\r\n                    sum2 -= 2*x.first+2*y.first;\r\n                }\r\n            }\r\n            answer = max({answer,abs(sum1),abs(sum2)});\r\n            A = max(A,max({abs(sum1),b1,c1},{abs(sum2),b2,c2}));\r\n        }\r\n        for (auto [x,_] : get<1>(A)) cout << x << ' ';\r\n        cout << endl;\r\n        for (auto [x,_]: get<2>(A)) cout << x << ' ';\r\n        cout << endl << endl;\r\n    } else {\r\n        int sum = 0;\r\n        for (int i = 0; i < len; i++) sum += abs(a[i]);\r\n        answer = sum;\r\n        for (int i = len; i < n; i++) {\r\n            sum -= abs(a[i-len]);\r\n            sum += abs(a[i]);\r\n            answer = max(answer,sum);\r\n        }\r\n    }\r\n    cout << answer;\r\n}"
}