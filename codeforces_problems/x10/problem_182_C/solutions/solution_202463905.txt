{
    "id": 202463905,
    "contestId": 182,
    "creationTimeSeconds": 1681722379,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 182,
        "index": "C",
        "name": "Optimal Sum",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2000,
        "tags": [
            "data structures",
            "greedy"
        ]
    },
    "author": {
        "contestId": 182,
        "members": [
            {
                "handle": "hhhyh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335280200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define int long long\r\nconst int N = 1e3 + 10;\r\nint T, n = 0, m, k, l;\r\nconst int mod = 998244353;\r\n#define ll long long\r\n#define endl '\\n'\r\nbool flag = false;\r\nint cnt = 0;\r\n#define endl '\\n'\r\nint ans = 0, p;\r\nint sum1 = 0;\r\nint sum2 = 0;\r\nint sum3 = 0;\r\nmultiset<int> s1, s2;\r\nint a[N];\r\nvoid add(int x)\r\n{\r\n    if (x > 0)\r\n    {\r\n        sum1 += x;\r\n        return;\r\n    }\r\n    if (s1.size() < k)\r\n    {\r\n        s1.insert(x);\r\n        sum2 += x;\r\n        return;\r\n    }\r\n    if (x < *s1.rbegin())\r\n    {\r\n        int y = *s1.rbegin();\r\n        s1.erase(s1.find(y));\r\n        s1.insert(x);\r\n        sum2 += x;\r\n        sum2 -= y;\r\n        sum3 += y;\r\n        s2.insert(y);\r\n    }\r\n    else\r\n    {\r\n        sum3 += x;\r\n        s2.insert(x);\r\n    }\r\n}\r\nvoid erase(int x)\r\n{\r\n    if (x > 0)\r\n    {\r\n        sum1 -= x;\r\n        return;\r\n    }\r\n    if (s2.count(x))\r\n        s2.erase(s2.find(x)), sum3 -= x;\r\n    else if (s1.count(x))\r\n    {\r\n        s1.erase(s1.find(x));\r\n        sum2 -= x;\r\n        if (!s2.empty())\r\n        {\r\n            int y = *s2.begin();\r\n            s2.erase(s2.find(y));\r\n            sum3 -= y;\r\n            sum2 += y;\r\n            s1.insert(y);\r\n        }\r\n    }\r\n}\r\nvoid solve()\r\n{\r\n    cin >> n >> m;\r\n    for (int i = 0; i < n; i++)\r\n        cin >> a[i + 1];\r\n    cin >> k;\r\n    ans = 0;\r\n    for (int i = 0; i < 2; i++)\r\n    {\r\n\r\n        int l = 1, r = 1;\r\n        sum1 = sum2 = sum3 = 0;\r\n        s1.clear();\r\n        s2.clear();\r\n        while (r <= m)\r\n        {\r\n            add(a[r]);\r\n            r++;\r\n        }\r\n        ans = max(ans, sum1 - sum2 + sum3);\r\n        while (r < n)\r\n        {\r\n            erase(a[l]);\r\n            l++;\r\n            add(a[r]);\r\n\r\n            ans = max(ans, sum1 - sum2 + sum3);\r\n            r++;\r\n        }\r\n\r\n        for (int i = 1; i <= n; i++)\r\n        {\r\n            a[i] = -a[i];\r\n        }\r\n    }\r\n    cout << ans << endl;\r\n}\r\n\r\nsigned main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0), cout.tie(0);\r\n    T = 1;\r\n    // cin >> T;\r\n\r\n    while (T--)\r\n        solve();\r\n}\r\n"
}