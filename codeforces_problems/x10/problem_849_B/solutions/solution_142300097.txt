{
    "id": 142300097,
    "contestId": 849,
    "creationTimeSeconds": 1641839253,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 849,
        "index": "B",
        "name": "Tell Your World",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1600,
        "tags": [
            "brute force",
            "geometry"
        ]
    },
    "author": {
        "contestId": 849,
        "members": [
            {
                "handle": "prmondal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504272900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(\"Ofast\")\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define endl \"\\n\"\r\n#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define ll long long int\r\n#define f(i,j,n) for(int i=j;i<=n;i++)\r\n#define rep(i,n) f(i,0,n-1)\r\n#define repr(i,n) for(int i=n-1;i>=0;i--)\r\n#define pb push_back\r\n#define mp make_pair\r\n#define ss second\r\n#define ff first\r\n#define vi vector<int>\r\n#define vl vector<ll>\r\n#define pii pair<int,int>\r\n#define pll pair<ll,ll>\r\n#define vii vector<pii>\r\n#define vll vector<pll>\r\n#define all(a) a.begin(),a.end()\r\n#define sz(a) a.size()\r\n#define bit(x,i) (x&(1<<i))\r\n#define uniq(v) v.erase(v.unique(all(v)), v.end())\r\n#define umapi unordered_map<int,int>\r\n#define mapi map<int,int>\r\n#define useti unordered_set<int>\r\n#define seti set<int>\r\n#define pqmin priority_queue<int>\r\n#define pqmax priority_queue<int,vi,greater<int>>\r\n#define coutp(i) cout << fixed << setprecision(i)\r\n#define debug(x) cerr << \"[ \" << #x << \" - \" << x << \" ]\" << \"\\n\"\r\n\r\n//#define TEST\r\n\r\n// Use mt19937_64 for 64 bit random number\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n#define uid(l, r) uniform_int_distribution<int>(l, r)(rng)\r\n#define shuf(v) shuffle(all(v), rng);\r\n\r\nconst int INF = 0x3f3f3f3f;\r\nconst ll INFL = 1LL << 61;\r\nconst double PI  = acos(-1);\r\nconst double EPS = 1e-9;\r\nint n;\r\n\r\nstruct point {\r\n    int x,y;\r\n    point(int x,int y):x(x),y(y),included(false) {}\r\n    bool included;\r\n};\r\n\r\nbool colinear(point a, point b, point c)\r\n{\r\n    return (c.y-b.y) * (b.x-a.x) == (c.x-b.x) * (b.y-a.y);\r\n}\r\n\r\nlong double polArea(const vector<point>& pol) {\r\n\tlong double a, b = 0;\r\n\tint n = pol.size();\r\n\tif (n < 3) return 0;\r\n\r\n\tint i;\r\n\r\n\trep (i, n-1) {\r\n        a += (ll) pol[i].x * pol[i+1].y;\r\n\t\tb += (ll) pol[i].y * pol[i+1].x;\r\n\t}\r\n\r\n\ta += pol[n-1].x*pol[0].y;\r\n\tb += pol[n-1].y*pol[0].x;\r\n    \r\n    return abs(a-b)/2;\r\n}\r\n\r\nbool approximatelyEqual(double a, double b, double absEpsilon = 1e-9, double relEpsilon = 1e-12)\r\n{\r\n    // Check if the numbers are really close -- needed when comparing numbers near zero.\r\n    double diff{ fabs(a - b) };\r\n    if (diff <= absEpsilon)\r\n        return true;\r\n\r\n    // Otherwise fall back to Knuth's algorithm\r\n    return (diff <= (fmax(fabs(a), fabs(b)) * relEpsilon));\r\n}\r\n\r\nbool check(const int& idx1, const int& idx2, const vector<point>& pts) {\r\n    auto ptsCopy = pts;\r\n    ptsCopy[idx1].included = true;\r\n    ptsCopy[idx2].included = true;\r\n    for (int i = 0; i < n; i++) {\r\n        if (i == idx1 || i == idx2) continue;\r\n        if (colinear(ptsCopy[idx1],ptsCopy[idx2],ptsCopy[i])) {\r\n            ptsCopy[i].included = true;\r\n        }   \r\n    }\r\n    \r\n    // cout << \"--------\" << endl;\r\n    // for(auto e: ptsCopy) {\r\n    //     if (e.included)\r\n    //         cout << e.y << \" \";\r\n    // }\r\n    // cout << endl;\r\n\r\n    vector<point> rest;\r\n    std::copy_if(ptsCopy.begin(), ptsCopy.end(), std::back_inserter(rest), [](const point& p){return !p.included;});\r\n    // for(auto e: rest) {\r\n    //     cout << e.y << \" \";\r\n    // }\r\n    // cout << endl;\r\n\r\n    if (rest.size() == 0)\r\n        return false;\r\n\r\n    if (rest.size() == 1)\r\n        return true;\r\n\r\n    if (rest.size() == 2 || approximatelyEqual(polArea(rest),0)) {\r\n        if ((ll)(ptsCopy[idx2].y - ptsCopy[idx1].y) * (rest[1].x - rest[0].x) == (ll)(ptsCopy[idx2].x - ptsCopy[idx1].x) * (rest[1].y - rest[0].y))\r\n            return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvoid solve() {\r\n    cin >> n;\r\n\r\n    vector<point> pts;\r\n    rep(i,n) {\r\n        int y;\r\n        cin >> y;\r\n        pts.pb({i+1,y});\r\n    }\r\n\r\n    point p1 = pts[0];\r\n    point p2 = pts[1];\r\n    point p3 = pts[2];\r\n    \r\n    if (check(0,1,pts) || check(1,2,pts) || check(0,2,pts)) {\r\n        cout << \"Yes\" << endl;\r\n    } else {\r\n        cout << \"No\" << endl;\r\n    }\r\n}\r\n\r\nint main() {\r\n    fastio;\r\n#ifdef TEST\r\n    int t;\r\n    cin>>t;\r\n\r\n    while(t--) {\r\n        solve();\r\n    }\r\n#else\r\n    solve();    \r\n#endif    \r\n}"
}