{
    "id": 226243986,
    "contestId": 1359,
    "creationTimeSeconds": 1696224366,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1359,
        "index": "E",
        "name": "Modular Stability",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1359,
        "members": [
            {
                "handle": "inevitable_piyush"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590676500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 7987200,
    "source": "#include <iostream>\r\n#include<bits/stdc++.h>\r\n#define int long long \r\n#define mod 998244353\r\nusing namespace std;\r\n\r\nint fact[1000000];\r\n\r\nint power(int x,int y, int p)\r\n{\r\n    int res = 1; // Initialize result\r\n \r\n    x = x % p; // Update x if it is more than or\r\n    // equal to p\r\n \r\n    while (y > 0)\r\n    {\r\n     \r\n        // If y is odd, multiply x with result\r\n        if (y & 1)\r\n            res = (res * x) % p;\r\n \r\n        // y must be even now\r\n        y = y >> 1; // y = y/2\r\n        x = (x * x) % p;\r\n    }\r\n    return res;\r\n}\r\n \r\n// Returns n^(-1) mod p\r\nint modInverse(int n, int p)\r\n{\r\n    return power(n, p - 2, p);\r\n}\r\n\r\nint cal(int n,int r,int p)\r\n{\r\n    if (n < r)\r\n        return 0;\r\n    // Base case\r\n    if (r == 0)\r\n        return 1;\r\n \r\n    // Fill factorial array so that we\r\n    // can find all factorial of r, n\r\n    // and n-r\r\n\r\n \r\n    return (fact[n] * modInverse(fact[r], p) % p\r\n            * modInverse(fact[n - r], p) % p)\r\n           % p;\r\n}\r\n\r\nsigned main() {\r\n    int n,i,j,k,t;\r\n    cin>>n>>k;\r\n    int ans=0;\r\n    \r\n    fact[0]=1;\r\n    \r\n    for(i=1;i<=n;i++)\r\n    {\r\n        fact[i]=fact[i-1]*i;\r\n        fact[i]=fact[i]%mod;\r\n    }\r\n    \r\n    for(i=1;i<=n;i++)\r\n    {\r\n        int firstEle=i;\r\n        int totalSet=(n/i)-1;\r\n        \r\n        if(totalSet>=(k-1))\r\n        {\r\n            int remEle=cal(totalSet,k-1,mod);\r\n            ans+=remEle;\r\n            ans=ans%mod;\r\n        }\r\n    }\r\n    cout<<ans<<endl;    \r\n    \r\n}"
}