{
    "id": 224086197,
    "contestId": 1359,
    "creationTimeSeconds": 1695150862,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1359,
        "index": "E",
        "name": "Modular Stability",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1359,
        "members": [
            {
                "handle": "moonpay"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590676500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 4812800,
    "source": "#include <bits/stdc++.h>\r\n\r\n\r\n#define int int64_t\r\nusing namespace std;\r\nconst int maxn = 3e5 + 10;\r\nconst int modm = 998244353;\r\n\r\n//21:53\r\n\r\nconst int inf = 1e9;\r\n\r\n\r\nint fastpow(int a, int b) {\r\n    if (b == 0) {\r\n        return 1;\r\n    } else {\r\n        int t = fastpow(a, b / 2);\r\n        if (b % 2 == 1) {\r\n            return (((t * t) % modm) * a) % modm;\r\n        }\r\n        return (t * t) % modm;\r\n    }\r\n}\r\n\r\nint fact[maxn];\r\nint inversefact[maxn];\r\n\r\nvoid go() {\r\n    fact[0] = 1;\r\n    inversefact[0] = 1;\r\n    for (int i = 1; i < maxn; i++) {\r\n        fact[i] = (i * fact[i - 1]) % modm;\r\n        inversefact[i] = fastpow(fact[i], modm - 2);\r\n    }\r\n}\r\n\r\nint binomial(int n, int k) {\r\n    if (k > n || k < 0) return 0;\r\n    return (((fact[n] * inversefact[n - k]) % modm) * inversefact[k]) % modm;\r\n}\r\n\r\n\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int n, k;\r\n    cin >> n >> k;\r\n    go();\r\n    int ans = 0;\r\n    for (int i = 1; i <= n; i++) {\r\n        int much = (n / i) - 1;\r\n        ans += binomial(much, k - 1);\r\n        ans %= modm;\r\n    }\r\n    std::cout << ans << \"\\n\";\r\n}"
}