{
    "id": 233741574,
    "contestId": 1359,
    "creationTimeSeconds": 1700600900,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1359,
        "index": "E",
        "name": "Modular Stability",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1359,
        "members": [
            {
                "handle": "Luci_badea1000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590676500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 3993600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int NMAX = 5e5;\r\nconst int MOD = 998244353;\r\n\r\nint fact[NMAX + 1], invfact[NMAX + 1];\r\n\r\nint lgput(int a, int n) {\r\n    int p = 1;\r\n    while(n) {\r\n        if(n % 2 == 1) {\r\n            p = 1LL * p * a % MOD;\r\n        }\r\n        a = 1LL * a * a % MOD;\r\n        n /= 2;\r\n    }\r\n    return p;\r\n}\r\n\r\nvoid precalc() {\r\n    fact[0] = 1;\r\n    for(int i = 1; i <= NMAX; i++)\r\n        fact[i] = 1LL * i * fact[i - 1] % MOD;\r\n    invfact[NMAX] = lgput(fact[NMAX], MOD - 2);\r\n    for(int i = NMAX - 1; i >= 0; i--)\r\n        invfact[i] = 1LL * (i + 1) * invfact[i + 1] % MOD;\r\n}\r\n\r\n\r\n\r\nint combi(int n, int k) {\r\n    if(k > n)\r\n        return 0;\r\n    return 1LL * fact[n] * invfact[k] % MOD * invfact[n - k] % MOD;\r\n}\r\n\r\n\r\nint main() {\r\n    int n, k;\r\n    cin >> n >> k;\r\n    precalc();\r\n    int ans = 0;\r\n    for(int minn = 1; minn <= n; minn++) {\r\n        int nr = n / minn;\r\n        ans += combi(nr - 1, k - 1);\r\n        if(ans >= MOD)\r\n            ans -= MOD;\r\n    }\r\n    cout << ans;\r\n    return 0;\r\n}"
}