{
    "id": 184573130,
    "contestId": 638,
    "creationTimeSeconds": 1670676569,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 638,
        "index": "C",
        "name": "Road Improvement",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "*special",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 638,
        "members": [
            {
                "handle": "Profect"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1458475200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 13619200,
    "source": "#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize (\"unroll-loops\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx\")\r\n\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include \"stdio.h\"\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n// #define int long long\r\n#define all(a) a.begin(), a.end()\r\n#define rall(a) a.rbegin(), a.rend()\r\n#define ff first\r\n#define ss second\r\n#define sz(a) (a).size()\r\n#define sqr(a) ((a) * (a))\r\ntemplate<typename T> using indexed_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<class T, class C = null_type> using ordered_tree = tree<T, C, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntypedef long double ld;\r\n\r\nnamespace io{\r\n\r\n    template<typename F, typename S> ostream& operator << ( ostream &os, const pair<F, S> &p ) { return os << p.ff << \" \" << p.ss; }\r\n    template<typename F, typename S> ostream& operator << ( ostream &os, const map<F, S> &mp ) { for( auto it : mp ) { os << it << endl;  } return os; }\r\n    template<typename F> ostream& operator << ( ostream &os, const vector<F> &v ) { bool space = false; for( F x : v ) { if( space ) os << \" \"; space = true; os << x; } return os; }\r\n    template<typename F> ostream& operator << ( ostream &os, const deque<F> &d ) { bool space = false; for( F x : d ) { if( space ) os << \" \"; space = true; os << x; } return os; }\r\n    template<typename F> ostream& operator << ( ostream &os, const set<F> &st ) { bool space = false; for( F x : st ) { if( space ) os << \" \"; space = true; os << x; } return os; }\r\n    template<typename F> ostream& operator << ( ostream &os, const multiset<F> &st ) { bool space = false; for( F x : st ) { if( space ) os << \" \"; space = true; os << x; } return os; }\r\n\r\n    template<typename F, typename S> istream& operator >> ( istream &is, pair<F, S> &p ) { return is >> p.ff >> p.ss; }\r\n    template<typename F> istream& operator >> ( istream &is, vector<F> &v ) { for( F &x : v ) { is >> x; } return is; }\r\n\r\n    long long fastread(){ char c; long long d = 1, x = 0; do c = getchar(); while( c == ' ' || c == '\\n' ); if( c == '-' ) c = getchar(), d = -1; while( isdigit( c ) ){ x = x * 10 + c - '0'; c = getchar(); } return d * x; }\r\n\r\n    static bool sep = false;\r\n\r\n    using std::to_string;\r\n\r\n    string to_string( bool x ){ return ( x ? \"true\" : \"false\" ); }\r\n    string to_string( const string & s ){ return \"\\\"\" + s + \"\\\"\"; }\r\n    string to_string( const char * s ){ return \"\\\"\" + string( s ) + \"\\\"\"; }\r\n    string to_string ( const char & c ) { string s; s += c; return \"\\'\" + s + \"\\'\"; }\r\n\r\n    template<typename Type> string to_string( vector<Type> );\r\n    template<typename F, typename S> string to_string( pair<F, S> );\r\n    template<typename Collection> string to_string( Collection );\r\n\r\n    template<typename F, typename S> string to_string( pair<F, S> p ){ return \"{\" + to_string( p.ff ) + \", \" + to_string( p.ss ) + \"}\"; }\r\n    template<typename Type> string to_string( vector<Type> v ) { bool sep = false; string s = \"[\"; for( Type x: v ){ if( sep ) s += \", \"; sep = true; s += to_string( x ); } s += \"]\"; return s; }\r\n    template<typename Collection> string to_string( Collection collection ) { bool sep = false; string s = \"{\"; for( auto x: collection ){ if( sep ) s += \", \"; sep = true; s += to_string( x ); } s += \"}\"; return s; }\r\n\r\n    void print() { cout << endl; sep = false; }\r\n    template <typename F, typename... Other> void print( F ff, Other... other ) { if( sep ) cout << \" | \"; sep = true; cout << to_string( ff ); print( other... ); }\r\n\r\n} using namespace io;\r\n\r\nnamespace utils {\r\n    \r\n    template<typename F, typename S> inline void maxs ( F &a, S b ) { a = a > b ? a : b; }\r\n    template<typename F, typename S> inline void mins ( F &a, S b ) { a = a < b ? a : b; }\r\n    template<typename F, typename S> int max(F a, S b) { return a > b ? a : b; }\r\n    template<typename F, typename S> int min(F a, S b) { return a < b ? a : b; }\r\n\r\n    constexpr long long operator\"\" _E ( unsigned long long n ){ long long p = 1, a = 10; for( int i = 0; i < n; i++ ) p *= a; return p; }\r\n    long double operator\"\" _deg ( long double deg ){ long double PI = acos( -1 ); return deg * PI / 180; }\r\n\r\n    random_device rd; mt19937 mt( rd( ) );\r\n    template<typename T> T rand ( T l, T r ) { uniform_int_distribution<T> dist( l, r ); return dist( mt ); };\r\n\r\n} using namespace utils;\r\n\r\n\r\n#ifdef sunnitov\r\n#define print( ... ) cout << \"[\" << #__VA_ARGS__ << \"]: \"; io::print( __VA_ARGS__ );\r\n#else \r\n#define print( ... ) 42\r\n#endif\r\n\r\nconst int mod = 9_E + 7;\r\nconst double EPS = 1e-7;\r\nconst double PI = acos( -1. );\r\nlong long LLINF = 18_E + 10;\r\nint INF = 9_E + 10;\r\nconst char nl = '\\n';\r\n\r\nint month[] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\r\n\r\n/*\r\n1: 1\r\n2: 1\r\n3: 2 3\r\n4: 2\r\n*/\r\n\r\nvoid solution( istream &cin, ostream &cout, const int &test_case ){\r\n    int n;\r\n    cin >> n;\r\n    vector<vector<int>> g(n + 1);\r\n    vector<pair<int, int>> d(1);\r\n    vector<int> used(n);\r\n    for (int i = 1; i < n; i++) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        g[u].push_back(i);\r\n        g[v].push_back(i);\r\n        d.push_back({u, v});\r\n    }\r\n    int mx = 0;\r\n    for (int u = 1; u <= n; u++) {\r\n        maxs(mx, sz(g[u]));\r\n    }\r\n    vector<vector<int>> ans(mx + 1);\r\n    vector<set<int>> st(n + 1);\r\n    for (int u = 1; u <= n; u++) {\r\n        print(u);\r\n        print(st[u]);\r\n        int c = 1;\r\n        for (int i : g[u]) {\r\n            if (used[i])\r\n                continue;\r\n            while (st[d[i].ff].count(c) or st[d[i].ss].count(c))\r\n                c++;\r\n            ans[c].push_back(i);\r\n            used[i] = c;\r\n            st[d[i].ff].insert(c);\r\n            st[d[i].ss].insert(c);\r\n            c++;\r\n        }\r\n    }\r\n    cout << mx << nl;\r\n    for (int i = 1; i <= mx; i++)\r\n        cout << sz(ans[i]) << \" \" << ans[i] << nl;\r\n    \r\n}\r\n\r\nint32_t main(){\r\n    srand( time( 0 ) );\r\n\r\n    ios_base::sync_with_stdio( false ); cin.tie( nullptr ); cout.tie( nullptr );\r\n\r\n    std::istream& in( std::cin ) ;\r\n    std::ostream& out( std::cout );\r\n\r\n    int32_t queries = 1;\r\n    \r\n    #ifdef test_cases\r\n    freopen(\"input.txt\", \"r\", stdin);   \r\n    freopen(\"output.txt\", \"w\", stdout);\r\n    cin >> queries;\r\n    #else\r\n    // cin >> queries;\r\n    #endif\r\n\r\n    for( int32_t test_case = 1; test_case <= queries; test_case++ ){\r\n    \tprint(test_case);\r\n        solution( cin, cout, test_case );\r\n        cout << nl;\r\n    }\r\n    return EXIT_SUCCESS;\r\n\r\n}"
}