{
    "id": 224776885,
    "contestId": 638,
    "creationTimeSeconds": 1695485205,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 638,
        "index": "C",
        "name": "Road Improvement",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "*special",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 638,
        "members": [
            {
                "handle": "NourEldinAhmed"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1458475200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 132,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 23756800,
    "source": "//\r\n// You don't get what you deserve you get what you take.\r\n\r\n#include <bits/stdc++.h>\r\n#define all(x) (x).begin(), (x).end()\r\n#define rall(x) (x).rbegin(), (x).rend()\r\n#define endl '\\n'\r\n#define yes cout << \"YES\\n\";\r\n#define no cout << \"NO\\n\";\r\n#define fr(n) for(ll i = 0 ; i < n ; i++)\r\n#define frj(n) for(ll j = 0 ; j < n ; j++)\r\n#define ll long long\r\n#define files    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\r\n#define code_of_thrones ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);  \r\n\r\nconst ll mod = 1e9 + 7;\r\n\r\nusing namespace std;\r\n\r\n\r\nll gcd(ll a, ll b){\r\n    if(b == 0) return a;\r\n    return gcd(b, a%b);\r\n}\r\n\r\nll mult(ll a, ll b){\r\n    return (a%mod * b%mod)%mod;\r\n}\r\n\r\nll add(ll a, ll b){\r\n    return (a%mod + b%mod)%mod;\r\n}\r\nll subtract(ll a, ll b){\r\nreturn (a%mod - b%mod + 2*mod)%mod;\r\n}\r\nconst unsigned ll N = 2e5 + 5;\r\n\r\nint knightX[] = {-2, -2, 2, 2, 1, 1 , -1, -1};\r\nint knighty[] = {-1, 1, -1, 1, -2, 2, -2, 2};\r\n\r\nint dx[] = {1, 0, -1, 0, -1, -1, 1, 1};\r\nint dy[] = {0, -1, 0, 1, -1, 1, -1, 1};\r\nchar di[] = {'D', 'L', 'U', 'R'};\r\n\r\nll n, m, k;\r\n\r\nvector<pair<int, int>> adj[N];\r\nvector<vector<int>> ans;\r\nbool vis[N];\r\n\r\nvoid dfs(int v, int c, int parent){\r\n    vis[v] = true;\r\n    int curr = 0;\r\n    for(auto edge : adj[v]){\r\n        if(curr == c)\r\n            curr++;\r\n\r\n        if(edge.first == parent)\r\n            continue;\r\n\r\n        ans[curr].push_back(edge.second);\r\n\r\n        if(!vis[edge.first])\r\n            dfs(edge.first, curr, v);\r\n\r\n        curr++;\r\n    }\r\n}\r\n\r\nvoid solve(){\r\n    cin >> n;\r\n    fr(n-1){\r\n        int a, b;\r\n        cin >> a >> b;\r\n        adj[a].push_back({b, i+1});\r\n        adj[b].push_back({a, i+1});\r\n    }\r\n    for(int i = 1; i <= n; i++)\r\n        k = max(k, (ll) adj[i].size());\r\n    \r\n    ans = vector<vector<int>> (k);\r\n\r\n    for(int i = 1; i <= n; i++){\r\n        if(!vis[i])\r\n            dfs(i, -1, -1);\r\n    }\r\n\r\n    cout << k << endl;\r\n    for(auto ve : ans){\r\n        cout << ve.size() << ' ';\r\n\r\n        for(auto x : ve)\r\n            cout << x << ' ';\r\n\r\n        cout << endl;\r\n    }\r\n}\r\n\r\nint main() {\r\n    code_of_thrones\r\n    #ifndef ONLINE_JUDGE\r\n        files\r\n    #endif\r\n    // sieve();\r\n    ll t = 1;\r\n    // cin >> t;\r\n    while(t--){\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}