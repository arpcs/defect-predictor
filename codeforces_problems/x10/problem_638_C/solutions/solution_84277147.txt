{
    "id": 84277147,
    "contestId": 638,
    "creationTimeSeconds": 1592515960,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 638,
        "index": "C",
        "name": "Road Improvement",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "*special",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 638,
        "members": [
            {
                "handle": "_Subrata"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1458475200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 132,
    "timeConsumedMillis": 624,
    "memoryConsumedBytes": 38297600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvector<int>adj[200003],ans[200003];\r\nint clr[200003],mx=0;\r\nmap<int, map<int,int> >mp;\r\n\r\n\r\nvoid bfs(int src)\r\n{\r\n\r\n    clr[src]=-3;  int u,v,p,sz; queue<int>qu;  qu.push(src);\r\n\r\n    while(!qu.empty())\r\n    {\r\n        u=qu.front(); qu.pop();  sz=adj[u].size(); p=0;\r\n\r\n        for(int lp=0;lp<sz;lp++)\r\n        {\r\n            v=adj[u][lp];\r\n\r\n            if(clr[v]==0)\r\n            {\r\n                p++;  if(p==clr[u])p++;  if(p>mx)mx=p;\r\n                ans[p].push_back(mp[u][v]);  qu.push(v);  clr[v]=p;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nint main()\r\n{\r\n\r\n    int n,m,a,b,c,d,i,j;\r\n    scanf(\"%d\",&n);\r\n\r\n    for(i=1;i<n;i++)\r\n    {\r\n        scanf(\"%d %d\",&a,&b);  adj[a].push_back(b);  adj[b].push_back(a);\r\n\r\n        mp[a][b]=i;  mp[b][a]=i;\r\n\r\n    }\r\n\r\n    bfs(1);\r\n\r\n    printf(\"%d\\n\",mx);\r\n    for(i=1;i<=mx;i++)\r\n    {\r\n        d=ans[i].size();\r\n        printf(\"%d \",d);\r\n        for(j=0;j<d;j++)\r\n        {\r\n            printf(\"%d \",ans[i][j]);\r\n        }\r\n\r\n        printf(\"\\n\");\r\n    }\r\n\r\n\r\n    return 0;\r\n}\r\n"
}