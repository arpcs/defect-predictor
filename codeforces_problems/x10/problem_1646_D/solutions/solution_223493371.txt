{
    "id": 223493371,
    "contestId": 1646,
    "creationTimeSeconds": 1694787274,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1646,
        "index": "D",
        "name": "Weight the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1646,
        "members": [
            {
                "handle": "xnor"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1646408100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 16076800,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nvector<int> g[200000], w[200000];\nint dp[2][200000], cost[2][200000], path[2][200000], d[200000], ans[200000];\nvoid dfs(int v, int p, int dep) {\n    d[v] = dep;\n    path[0][v] = cost[0][v] = 1;\n    cost[1][v] = p != -1;\n    dp[1][v] = 1;\n    for (auto e : g[v]) {\n        if (e != p) {\n            dfs(e, v, dep ^ 1);\n            if (dp[0][e] > dp[1][e])\n                w[v].push_back(0), dp[0][v] += dp[0][e], path[0][v] += path[0][e];\n            else\n                w[v].push_back(1), dp[0][v] += dp[1][e], path[0][v] += path[1][e];\n            dp[1][v] += dp[0][e], path[1][v] += path[0][e], cost[1][v]++;\n        }\n    }\n    path[1][v] += cost[1][v];\n}\nvoid r(int v, int c, int p) {\n    ans[v] = cost[c][v];\n    for (int i = 0; i < (int)g[v].size(); ++i) {\n        auto e = g[v][i];\n        if (e == p)\n            continue;\n        if (c) {\n            r(e, 0, v);\n        } else {\n            r(e, w[v][i], v);\n        }\n    }\n}\nsigned main() {\n    cin.tie(0)->sync_with_stdio(0);\n    int n;\n    cin >> n;\n    if (n == 2) {\n        cout << \"2 2\\n1 1\";\n        return 0;\n    }\n    for (int u, v, i = 1; i < n; ++i) {\n        cin >> u >> v;\n        --u, --v;\n        g[u].push_back(v);\n        g[v].push_back(u);\n    }\n    dfs(0, -1, 0);\n    int c = 0;\n    if (dp[0][0] < dp[1][0] || (dp[0][0] == dp[1][0] && path[0][0] > path[1][0]))\n        c = 1;\n    cout << dp[c][0] << ' ' << path[c][0] << '\\n';\n    r(0, c, -1);\n    for (int i = 0; i < n; ++i)\n        cout << ans[i] << ' ';\n}\n"
}