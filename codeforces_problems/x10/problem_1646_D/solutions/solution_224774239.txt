{
    "id": 224774239,
    "contestId": 1646,
    "creationTimeSeconds": 1695483866,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1646,
        "index": "D",
        "name": "Weight the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1646,
        "members": [
            {
                "handle": "_windy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1646408100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\nvoid solve(){\r\n    int n;\r\n    cin>>n;\r\n    vector<vector<int>> graph(n);\r\n    for(int i=0;i<n-1;++i){\r\n        int a,b;\r\n        cin>>a>>b;\r\n        --a;--b;\r\n        graph[a].push_back(b);\r\n        graph[b].push_back(a);\r\n    }\r\n    if(n==2){\r\n        cout<<2<<\" \"<<2<<endl;\r\n        cout<<1<<\" \"<<1<<endl;\r\n        return ;\r\n    }\r\n    vector<array<int,4>> memo(n,{-1,-1,-1,-1});\r\n    function<array<int,4>(int,int)> dfs=[&](int idx,int fa)->array<int,4>{\r\n        if(memo[idx][0]!=-1){\r\n            return memo[idx];\r\n        }\r\n        int no=0,nosum=1,use=1,usesum=graph[idx].size();\r\n        for(auto &next:graph[idx]){\r\n            if(next==fa) continue;\r\n            auto arr=dfs(next,idx);\r\n            if(arr[0]>arr[2]){\r\n                no+=arr[0];\r\n                nosum+=arr[1];\r\n            }\r\n            else if(arr[0]<arr[2]){\r\n                no+=arr[2];\r\n                nosum+=arr[3];\r\n            }\r\n            else{\r\n                if(arr[1]<arr[3]){\r\n                    no+=arr[0];\r\n                    nosum+=arr[1];\r\n                }\r\n                else{\r\n                    no+=arr[2];\r\n                    nosum+=arr[3];\r\n                }\r\n            }\r\n            use+=arr[0];\r\n            usesum+=arr[1];\r\n        }\r\n        memo[idx]={no,nosum,use,usesum};\r\n        return {no,nosum,use,usesum};\r\n    };\r\n    auto res=dfs(0,-1);\r\n    vector<int> ans(n);\r\n    function<void(int,int,bool)> f=[&](int idx,int fa,bool bo){\r\n        int no=0,nosum=1,use=1,usesum=graph[idx].size();\r\n        if(bo){\r\n            ans[idx]=usesum;\r\n        }\r\n        else{\r\n            ans[idx]=nosum;\r\n        }\r\n        for(auto &next:graph[idx]){\r\n            if(next==fa) continue;\r\n            if(bo){\r\n                f(next,idx,false);\r\n            }\r\n            auto arr=dfs(next,idx);\r\n            if(arr[0]>arr[2]||(arr[0]==arr[2]&&arr[1]<arr[3])){\r\n                f(next,idx,false);\r\n            }\r\n            else{\r\n                f(next,idx,true);\r\n            }\r\n        }\r\n    };\r\n    if(res[0]>res[2]||(res[0]==res[2]&&res[1]<res[3])){\r\n        f(0,-1,false);\r\n        cout<<res[0]<<\" \"<<res[1]<<endl;\r\n    }\r\n    else{\r\n        f(0,-1,true);\r\n        cout<<res[2]<<\" \"<<res[3]<<endl;\r\n    }\r\n    for(auto &x:ans){\r\n        cout<<x<<\" \";\r\n    }\r\n    cout<<endl;\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr); cout.tie(nullptr);\r\n    int t=1;\r\n    //cin>>t;\r\n    while(t-->0){\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n"
}