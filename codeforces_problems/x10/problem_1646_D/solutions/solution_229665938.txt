{
    "id": 229665938,
    "contestId": 1646,
    "creationTimeSeconds": 1698224969,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1646,
        "index": "D",
        "name": "Weight the Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1646,
        "members": [
            {
                "handle": "udbhavsharma"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1646408100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 54579200,
    "source": "// Problem: D. Weight the Tree\r\n// Author:  udbhavsharma\r\n\r\n#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\nconst int rem=1e9+7;\r\nconst int INF=1e18;\r\nvector<vector<int>>adj;\r\nvector<int>deg;\r\nvector<vector<pair<int,int>>>dp;\r\npair<int,int >maxx(pair<int,int>&a,pair<int,int>&b){\r\n\tif(a.first>b.first) return a;\r\n\telse if(a.first<b.first) return b;\r\n\telse if(a.second<b.second) return a;\r\n\treturn b;\r\n}\r\nvector<int>ans;\r\nvector<int>par;\r\nvoid dfs(int node,int p){\r\n\tdp[node][0]={0,1};\r\n\tdp[node][1]={1,deg[node]};\r\n\tfor(auto ch:adj[node]){\r\n\t\tif(ch!=p){\r\n\t\t\tdfs(ch,node);\r\n\t\t\tdp[node][1]={dp[node][1].first + dp[ch][0].first,dp[node][1].second+dp[ch][0].second};\r\n\t\t\t\r\n\t\t\tauto t = maxx(dp[ch][0],dp[ch][1]);\r\n\t\t\tdp[node][0] = {dp[node][0].first+t.first,dp[node][0].second+t.second};\r\n\t\t}\r\n\t}\r\n}\r\nvoid dfss(int node,int par,pair<int,int>val){\r\n\tif(val==dp[node][0]){\r\n\t\tans[node]=0;\r\n\t\tfor(auto ch:adj[node]){\r\n\t\t\tif(ch!=par){\r\n\t\t\t\tdfss(ch,node,maxx(dp[ch][0],dp[ch][1]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tans[node]=1;\r\n\t\tfor(auto ch:adj[node]){\r\n\t\t\tif(ch!=par){\r\n\t\t\t\tdfss(ch,node,dp[ch][0]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\nvoid solve(){\r\n\tint n; cin>>n;\r\n\tadj.resize(n+1);\r\n\tdeg.resize(n+1);\r\n\tpar.resize(n+1);\r\n\tans.resize(n+1);\r\n\tdp.resize(n+1,vector<pair<int,int>>(2));\r\n\tfor(int i=0;i<n-1;i++){\r\n\t\tint x,y; cin>>x>>y;\r\n\t\tadj[x].push_back(y);\r\n\t\tadj[y].push_back(x);\r\n\t\tdeg[x]++;\r\n\t\tdeg[y]++;\r\n\t}\r\n\tif(n==2){\r\n\t\tcout<<n<<\" \"<<n<<endl;\r\n\t\tcout<<1<<\" \"<<1<<endl;\r\n\t\treturn ;\r\n\t\t\r\n\t}\r\n\tdfs(1,0);\r\n\tauto c=maxx(dp[1][0],dp[1][1]);\r\n\tcout<<c.first<<\" \"<<c.second<<endl;\r\n\tdfss(1,0,c);\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tcout<<(ans[i]==1?deg[i]:1)<<\" \";\r\n\t}\r\n\tcout<<endl;\r\n}\r\n\r\nint32_t main()\r\n{\r\n\tios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\tcout.tie(NULL);\r\n    int tt=1; \r\n    // cin>>tt;\r\n    for(int te=1;te<=tt;te++)\r\n\t{\r\n\t\tsolve();\r\n    }\r\n}"
}