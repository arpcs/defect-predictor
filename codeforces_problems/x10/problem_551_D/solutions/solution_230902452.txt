{
    "id": 230902452,
    "contestId": 551,
    "creationTimeSeconds": 1698886959,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 551,
        "index": "D",
        "name": "GukiZ and Binary Operations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "implementation",
            "math",
            "matrices",
            "number theory"
        ]
    },
    "author": {
        "contestId": 551,
        "members": [
            {
                "handle": "RGB_ICPC4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1434127500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 17,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nlong long m;\r\nstruct matrix {\r\n\tlong long x[3][3];\r\n};\r\nmatrix operator * (matrix a, matrix b) {\r\n\tmatrix c;\r\n\tmemset(c.x, 0, sizeof c.x);\r\n\tfor (int i = 0; i < 2; i ++) for (int j = 0; j < 2; j ++) {\r\n\t\t\tfor (int k = 0; k < 2; k ++) c.x[i][j] = (c.x[i][j] + a.x[i][k] * b.x[k][j]) % m;\r\n\t\t}\r\n\treturn c;\r\n}\r\nmatrix modExp(matrix a, long long n) {\r\n\tmatrix r;\r\n\tmemset(r.x, 0, sizeof r.x);\r\n\tr.x[0][0] = r.x[1][1] = 1;\r\n\tfor (; n; n /= 2) {\r\n\t\tif (n & 1) r = r * a;\r\n\t\ta = a * a;\r\n\t}\r\n\treturn r;\r\n}\r\ntypedef long long LL;\r\nLL modExp(LL a, LL n) {\r\n\tLL r;\r\n\ta = (a % m + m) % m;\r\n\tfor (r = 1; n; n /= 2) {\r\n\t\tif (n & 1) r = r * a % m;\r\n\t\ta = a * a % m;\r\n\t}\r\n\treturn r;\r\n}\r\nint main() {\r\n\tlong long n, k, l;\r\n\tcin >> n >> k >> l >> m;\r\n\tmatrix a;\r\n\tmemset(a.x, 0, sizeof a.x);\r\n\ta.x[0][0] = a.x[1][0] = a.x[0][1] = 1;\r\n\ta = modExp(a, n - 1);\r\n\tlong long p = (a.x[0][0] + a.x[0][1]) % m;\r\n\tlong long q = (a.x[1][0] + a.x[1][1]) % m;\r\n\tp = (p + q) % m;\r\n    q = (modExp(2, n) - p + m) % m;\r\n\tif ((__int128(1) << l) <= k) {\r\n\t\tcout << 0 << endl;\r\n\t\treturn 0;\r\n\t}\r\n\tlong long rlt = 1;\r\n\tfor (int i = 0; i < l; i ++) {\r\n\t\tif (k & (__int128(1) << i)) rlt = (rlt * q) % m;\r\n\t\telse rlt = (rlt * p) % m;\r\n\t}\r\n    cout << rlt << endl;\r\n\treturn 0;\r\n}\r\n\r\n"
}