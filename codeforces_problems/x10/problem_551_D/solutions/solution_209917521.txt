{
    "id": 209917521,
    "contestId": 551,
    "creationTimeSeconds": 1686972744,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 551,
        "index": "D",
        "name": "GukiZ and Binary Operations",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "combinatorics",
            "implementation",
            "math",
            "matrices",
            "number theory"
        ]
    },
    "author": {
        "contestId": 551,
        "members": [
            {
                "handle": "AppleFicial"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1434127500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 17,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<cstdio>\r\n#include<algorithm>\r\n#include<cmath>\r\n#include<iostream>\r\n#include<set>\r\n#include<vector>\r\n#include<queue>\r\n#include<stack>\r\n#include<cstring>\r\n#include<assert.h>\r\n#include<cstdlib>\r\n#include<map>\r\n#include<ctime>\r\n#define rep(i,a,b) for(register int i=a;i<=b;++i)\r\n#define rev(i,a,b) for(register int i=a;i>=b;--i)\r\n#define gra(i,u) for(register int i=head[u];i;i=edge[i].nxt)\r\n#define Clear(a) memset(a,0,sizeof(a))\r\n#define yes puts(\"YES\")\r\n#define no puts(\"NO\")\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int INF(1e9+10);\r\nconst ll LLINF(1e18+10);\r\ninline int read()\r\n{\r\n\tint s=0,w=1;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9')s=s*10+(ch-'0'),ch=getchar();\r\n\treturn s*w;\r\n}\r\ntemplate<typename T>\r\ninline T Min(T x,T y){return x<y?x:y;}\r\ntemplate<typename T>\r\ninline T Max(T x,T y){return x>y?x:y;}\r\ntemplate<typename T>\r\ninline void Swap(T&x,T&y){T t=x;x=y;y=t;return;}\r\ntemplate<typename T>\r\ninline T Abs(T x){return x<0?-x:x;}\r\n\r\nint MOD;\r\ntemplate<typename T>\r\ninline T add(T x){return x;}\r\ntemplate<typename T,typename... types>\r\ninline T add(T x,types... y){T z=add<T>(y...);return (x+z)%MOD;}\r\ntemplate<typename T>\r\ninline T mul(T x){return x;}\r\ntemplate<typename T,typename... types>\r\ninline T mul(T x,types... y){return (ll)x*mul<T>(y...)%MOD;}\r\ninline int sub(int x,int y){return (x-y+MOD)%MOD;}\r\n\r\nll n,k;\r\nint l;\r\n\r\ninline int wei(ll x)\r\n{\r\n\tint tot=0;\r\n\twhile(x)\r\n\t{\r\n\t\tx>>=1;\r\n\t\t++tot;\r\n\t}\r\n\treturn tot;\r\n}\r\n\r\nstruct Matrix\r\n{\r\n\tint G[3][3];\r\n\tinline Matrix(){Clear(G);return;}\r\n\tinline Matrix operator*(const Matrix&b) const\r\n\t{\r\n\t\tMatrix res;\r\n\t\trep(i,1,2) rep(j,1,2) rep(K,1,2) res.G[i][j]=add(res.G[i][j],mul(G[i][K],b.G[K][j]));\r\n\t\treturn res;\r\n\t}\r\n};\r\n\r\ninline Matrix ksm(Matrix x,ll y)\r\n{\r\n\tMatrix res;\r\n\trep(i,1,2) res.G[i][i]=1;\r\n\twhile(y)\r\n\t{\r\n\t\tif(y&1) res=res*x;\r\n\t\tx=x*x,y>>=1;\r\n\t}\r\n\treturn res;\r\n}\r\n\r\ninline int ksmint(int x,ll y)\r\n{\r\n\tint res(1);\r\n\twhile(y)\r\n\t{\r\n\t\tif(y&1) res=mul(res,x);\r\n\t\tx=mul(x,x),y>>=1;\r\n\t}\r\n\treturn res%MOD;\r\n}\r\n\r\nint main()\r\n{\r\n\tscanf(\"%lld%lld%d%d\",&n,&k,&l,&MOD);\r\n\tif(wei(k)>l)\r\n\t{\r\n\t\tputs(\"0\");\r\n\t\treturn 0;\r\n\t}\r\n\tint ans=1,fac=ksmint(2,n);\r\n\tMatrix x;\r\n\tx.G[1][1]=1,x.G[1][2]=1,x.G[2][1]=1;\r\n\tx=ksm(x,n-1);\r\n\tMatrix y;\r\n\ty.G[1][1]=1,y.G[2][1]=1;\r\n\tx=x*y;\r\n\tint sum=add(x.G[1][1],x.G[2][1]);\r\n\trep(i,0,l-1)\r\n\t\tif(!(k&(1ll<<i))) ans=mul(ans,sum);\r\n\t\telse ans=mul(ans,sub(fac,sum));\r\n\tprintf(\"%d\\n\",ans);\r\n\treturn 0;\r\n}\r\n/* things to check\r\n1.  int overflow or long long memory need\r\n2.  recursion/array/binary search/dp/loop bounds\r\n3.  precision\r\n4.  special cases(n=1,bounds)\r\n5.  delete debug statements\r\n6.  initialize(especially multi-tests)\r\n7.  = or == , n or m ,++ or -- , i or j , > or >= , < or <=\r\n8.  keep it simple and stupid\r\n9.  do not delete, use // instead\r\n10. operator priority\r\n11. is there anything extra to output?\r\n12. ...\r\n*/\r\n\r\n/* something to think about\r\n1. greedy? dp? searching? dp with matrix/ segment tree? binary search?\r\n2. If contains \"not\", why not ?????? or few affect?\r\n*/\r\n"
}