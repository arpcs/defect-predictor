{
    "id": 232665679,
    "contestId": 1833,
    "creationTimeSeconds": 1699897343,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1833,
        "index": "G",
        "name": "Ksyusha and Chinchilla",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "dsu",
            "greedy",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1833,
        "members": [
            {
                "handle": "arpit.ras"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1684506900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 608,
    "memoryConsumedBytes": 54579200,
    "source": "//      \u091c\u092f \u0936\u094d\u0930\u0940 \u0930\u093e\u092e     //\r\n/*\r\n        \u0939\u0930\u0947 \u0915\u0943\u0937\u094d\u0923 \u0939\u0930\u0947 \u0915\u0943\u0937\u094d\u0923\r\n\r\n        \u0915\u0943\u0937\u094d\u0923 \u0915\u0943\u0937\u094d\u0923 \u0939\u0930\u0947 \u0939\u0930\u0947\r\n\r\n        \u0939\u0930\u0947 \u0930\u093e\u092e \u0939\u0930\u0947 \u0930\u093e\u092e\r\n\r\n        \u0930\u093e\u092e \u0930\u093e\u092e \u0939\u0930\u0947 \u0939\u0930\u0947\u0965\r\n                          */\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#pragma GCC target (\"avx2\")\r\n#pragma GCC optimize (\"O3\")\r\n#pragma GCC optimize (\"unroll-loops\")\r\nlong long modu = 1e9 + 7;\r\nint p1 = 31;\r\nint p2 = 37;\r\nint mod1 = 1000000009;\r\nint mod2 = 1610612741;\r\nlong long modu9 = 998244353;\r\n// when 10^9 +7 modulus is required\r\nlong long inf = 1e18 + 5;\r\nlong long stdsize = 1e9;\r\ntypedef long long ll;\r\ntypedef unsigned long long int lll;\r\n#define int long long\r\n#define nl '\\n'\r\n#define ld long double\r\n#define endl '\\n'\r\n#define vi vector<int>\r\n#define pii pair<int, int>\r\n#define fr first\r\n#define sc second\r\n#define sp \" \"\r\n#define mkpr make_pair\r\n#define sz(x) x.size()\r\n#define all(x) (x).begin(), (x).end()\r\n#define gcd(a, b) __gcd(a, b)\r\n#define vpi vector<pii>\r\n#define vvi vector<vi>\r\n#define vvpi vector<vpi>\r\n#define itlp(it, v) for (auto it = v.begin(); it != v.end(); it++)\r\n#define mst(a, val) memset(a, val, sizeof(a))\r\n#define pn              \\\r\n  {                     \\\r\n    cout << \"NO\" << nl; \\\r\n    return;             \\\r\n  }\r\n#define prDouble(x) cout << fixed << setprecision(10) << x << sp;\r\n#define py               \\\r\n  {                      \\\r\n    cout << \"YES\" << nl; \\\r\n    return;              \\\r\n  }\r\nvoid envecel(vector<int> &v, int n);\r\nvoid printvec(vector<int> &v);\r\nvoid print2dvecc(vector<vector<char>> &g);\r\nvoid print2dveci(vector<vector<int>> &g);\r\nlong long modadd(long long a, long long b, long long modu);\r\nlong long modsub(long long a, long long b, long long modu);\r\nlong long modprod(long long a, long long b, long long modu);\r\nlong long moddiv(long long a, long long b, long long modu);\r\n\r\ntemplate<typename T>vector<T>\r\nslicevec (vector<T> const &v, int m, int n)\r\n{ auto first = v.begin() + m;\r\n  auto last = v.begin() + n + 1;\r\n  vector<T> vector(first, last);\r\n  return vector ;\r\n}\r\n\r\ninline void debugMode();\r\nlong long bin_exponent(ll a, ll b, ll c);\r\nstring i2b(int n);\r\nlong long negexp(long long ans, int mod);\r\nstring inttostr(long long n);\r\nvoid pr(deque<int> &dq);\r\nvoid pr();\r\nint lcm(int, int);\r\nint ciel(int, int);\r\nint dx[4] = {1, 0, -1, 0};\r\nint dy[4] = {0, -1, 0, 1};\r\n\r\nbool isvalid(int i, int j, int n , int m)\r\n{\r\n  if (i < 0 || i >= n || j < 0 || j >= m)\r\n    return false;\r\n  return true;\r\n}\r\n\r\nint n;\r\nvvi g;\r\nmap <pii, int> mp;\r\nmap <int,int> par;\r\nvi subsz;\r\nset<int> edg;\r\nvoid dfs(int node, int p)\r\n{\r\n    par[node]=p;\r\n    subsz[node] +=1;\r\n    for(auto v:g[node])\r\n    {\r\n      if(v==p)\r\n        continue;\r\n       dfs(v,node);\r\n       subsz[node] += subsz[v];\r\n    }\r\n    if(subsz[node]==3)\r\n    {\r\n        edg.insert(node);\r\n        subsz[node]=0;\r\n    }\r\n}\r\n\r\nvoid solve()\r\n{\r\n  cin>>n;\r\n  g.clear();\r\n  g.resize(n+1);\r\n  subsz.assign(n+2,0);\r\n  mp.clear() ;\r\n  par.clear() ;\r\n  edg.clear();\r\n\r\n  for(int i=1;i<n;i++)\r\n  {\r\n     int a,b;\r\n     cin>>a>>b;\r\n     mp[{a,b}]= i;\r\n     mp[{b,a}]= i;\r\n     g[a].push_back(b);\r\n     g[b].push_back(a);\r\n  }\r\n  if(n%3!=0)\r\n  {\r\n    cout<<-1<<nl;\r\n    return;\r\n  }\r\n  if(n==3)\r\n  {\r\n    cout<<0<<nl;\r\n    cout<<nl;\r\n    return;\r\n  }\r\n  dfs(1,0);\r\n  int val= n/3;\r\n  if(edg.size()!= val)\r\n  {\r\n        cout<<-1<<nl;\r\n    return;\r\n  }\r\n  cout<< val -1 <<nl;\r\n  for(auto v: edg)\r\n  {\r\n      if(v==1)\r\n        continue;\r\n    //  cout<<v<<sp;\r\n      int p= par[v];\r\n      cout<< mp[{p,v}]<<sp;\r\n  }\r\n  cout<<nl;\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nstatic void run_with_stack_size(void (*func)(void), size_t stsize)\r\n{\r\n  char *stack, *send;\r\n  stack = (char *)malloc(stsize);\r\n  send = stack + stsize - 16;\r\n  send = (char *)((uintptr_t)send / 16 * 16);\r\n  asm volatile(\r\n    \"mov %%esp, (%0)\\n\"\r\n    \"mov %0, %%esp\\n\"\r\n    :\r\n    : \"r\"(send));\r\n  func();\r\n  asm volatile(\"mov (%0), %%esp\\n\" : : \"r\"(send));\r\n  free(stack);\r\n}\r\n\r\nsigned main()\r\n{\r\n  // #ifndef ONLINE_JUDGE\r\n  // freopen(\"input.txt\", \"r\", stdin);\r\n  // freopen(\"output.txt\", \"w\", stdout);\r\n  // #endif // ONLINE_JUDGE}\r\n\r\n  ios_base::sync_with_stdio(false);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n  int t = 1;\r\n  cin >> t;\r\n \r\n  for (int i = 1; i <= t; i++)\r\n  {\r\n    //cout<<\"Case #\"<<i<<\": \";\r\n    solve();\r\n    //run_with_stack_size(solve,1024 *1024*1024);\r\n  }\r\n\r\n}\r\nvoid print2dveci(vector<vector<int>> &g)\r\n{\r\n  int n = g.size();\r\n  int i;\r\n  for (i = 0; i < n; i++)\r\n  {\r\n    cout << i << \" -> \";\r\n    for (auto v : g[i])\r\n    {\r\n      if (v == 1e18)\r\n        cout << \".\"\r\n             << \" \";\r\n      else\r\n        cout << v << \" \";\r\n    }\r\n    cout << endl;\r\n  }\r\n  cout << endl;\r\n}\r\n\r\nvoid print2dvecc(vector<vector<char>> &g)\r\n{\r\n  int n = g.size();\r\n  int i;\r\n  for (i = 0; i < n; i++)\r\n  {\r\n    cout << i << \" -> \";\r\n    for (auto v : g[i])\r\n    {\r\n      cout << v << sp;\r\n    }\r\n    cout << nl;\r\n  }\r\n  cout << nl;\r\n}\r\nvoid envecel(vector<int> &v, int n)\r\n{\r\n  int q;\r\n  for (int i = 0; i < n; i++)\r\n  {\r\n    cin >> q;\r\n    v.push_back(q);\r\n  }\r\n}\r\n\r\nvoid printvec(vector<int> &v)\r\n{\r\n  int i;\r\n  int n = v.size();\r\n  for (i = 0; i < n; i++)\r\n  {\r\n    cout << v[i] << sp;\r\n  }\r\n  //  cout<<sp;\r\n  cout << nl;\r\n}\r\nint lcm (int a, int b)\r\n{\r\n  return ((a * b) / gcd(a, b)) ;\r\n}\r\nint ciel (int a, int b)\r\n{\r\n  return (a + b - 1) / b;\r\n}\r\n\r\ninline void debugMode()\r\n{\r\n\r\n  // // to find precision of any data type\r\n  // // std::cout << std::numeric_limits<unsigned long long>::digits10 << std::endl;\r\n\r\n  // cout<<fixed<<setprecision(10);\r\n}\r\nstring i2b(int n)\r\n{\r\n  string s;\r\n  while (n)\r\n  {\r\n    int x = n % 2;\r\n    n /= 2;\r\n    s += (x + '0');\r\n  }\r\n  reverse(all(s));\r\n  return s;\r\n}\r\nlong long bin_exponent(ll a, ll b, ll c = 1e9 + 7)\r\n{\r\n  ll ans = 1;\r\n  while (b)\r\n  {\r\n    if (b % 2 == 1)\r\n    {\r\n      ans = (1LL * ans * a) % c;\r\n    }\r\n    a = (1LL * a * a) % c;\r\n    b /= 2;\r\n  }\r\n  ans += c; ans %= c;\r\n  return ans;\r\n}\r\nlong long negexp(long long ans, int mod)\r\n{\r\n  return (((ans % mod) + mod) % mod);\r\n}\r\nlong long modadd(long long a, long long b, long long modu = 1e9 + 7)\r\n{\r\n  int n = a + b;\r\n  n += modu;\r\n  n %= modu;\r\n  return n;\r\n}\r\nlong long modsub(long long a, long long b, long long modu = 1e9 + 7)\r\n{\r\n  int n = a - b;\r\n  n += modu;\r\n  n %= modu;\r\n  return n;\r\n}\r\nlong long modprod(long long a, long long b, long long modu = 1e9 + 7)\r\n{\r\n  int n = a * b;\r\n  n += modu;\r\n  n %= modu;\r\n  return n;\r\n}\r\nlong long moddiv(long long a, long long b, long long modu = 1e9 + 7)\r\n{\r\n  int t1 = bin_exponent(b, modu - 2, modu);\r\n  int n = modprod(a, t1, modu);\r\n  n += modu;\r\n  n %= modu;\r\n  return n;\r\n}\r\nstring inttostr(long long n)\r\n{\r\n  stringstream ss;\r\n  ss << n;\r\n  string ans;\r\n  ss >> ans;\r\n  return ans;\r\n}\r\n\r\n//---------BELLMAN FORD CODE-----------\r\n\r\n//   int n,m;\r\n// struct edge\r\n// {\r\n//     int a, b, cost;\r\n// };\r\n\r\n// int  v;\r\n// vector<edge> e;\r\n// void solve()\r\n// {\r\n//     cin>>n>>m;\r\n//     for(int i=0;i<m;i++)\r\n//     {\r\n//         int a,b,cost;\r\n//         cin>>a>>b>>cost;\r\n//         a--;\r\n//         b--;\r\n//         edge c;\r\n//         c.a=a; c.b=b; c.cost=cost;\r\n//         e.push_back(c);\r\n//     }\r\n//    vector<int> d (n, inf);\r\n//     d[v] = 0;\r\n//     for (int i=0; i<n-1; ++i)\r\n//        {\r\n//         for (int j=0; j<m; ++j)\r\n//          {\r\n//           if(d[e[j].a] < inf)\r\n//             d[e[j].b] = min (d[e[j].b], d[e[j].a] + e[j].cost);\r\n//          }\r\n//       }\r\n//       cout<<d[n-1]<<nl;\r\n//     //  cout<<\"OK\"<<nl;\r\n// }\r\n\r\n// void prstack(stack<int> st)\r\n//  {\r\n//     while(!st.empty())\r\n//     {\r\n//       cout<<st.top()<<sp;\r\n//       st.pop();\r\n//     }\r\n//     cout<<nl;\r\n//  }\r\n//  void prqueue(queue<int> q)\r\n//  {\r\n//      while(!q.empty())\r\n//      {\r\n//          cout<<q.front()<<sp;\r\n//          q.pop();\r\n//      }\r\n//      cout<<nl;\r\n//  }\r\n\r\n\r\n// map<int,int> pf(int n)\r\n// {\r\n//   int temp= n;\r\n//   map<int,int> mp;\r\n//    for(int i=1;i*i<=temp;i++)\r\n//    {\r\n//       if(temp%i==0 && i>1)\r\n//       {\r\n//          while(n%i==0)\r\n//          {\r\n//             n/=i;\r\n//             mp[i]++;\r\n//          }\r\n//       }\r\n//       if((temp/i) %i==0 && i>1)\r\n//       {\r\n//           while((n) %(temp/i)==0)\r\n//          {\r\n//            mp[temp/i]++;\r\n//            n/=(temp/i);\r\n//          }\r\n//       }\r\n//    }\r\n//    if(n!=1)\r\n//      mp[n]=1;\r\n//    return mp;\r\n// }\r\n\r\n\r\n//  -------------DISJOINT SET CODE------------\r\n\r\n// vi par;\r\n// vi sz;\r\n// int findpar(int x)\r\n// {\r\n//     if(x==par[x])\r\n//         return x;\r\n//     else\r\n//         return par[x]=findpar(par[x]);\r\n// }\r\n// int ncp;    //shows no of connected components (init by n)\r\n// int mx;    // shows maximum size of connected components(init by 1)\r\n// void merge(int a,int b)\r\n// {\r\n//     int p1=findpar(a);\r\n//     int p2=findpar(b);\r\n//     if(p1==p2)\r\n//         return;\r\n//     if(sz[p1]>sz[p2])\r\n//     {\r\n//         par[p2]=p1;\r\n//         sz[p1]+=sz[p2];\r\n//         mx=max(mx,sz[p1]);\r\n//     }\r\n//     else\r\n//     {\r\n//         par[p1]=p2;\r\n//         sz[p2]+=sz[p1];\r\n//         mx=max(mx,sz[p2]);\r\n//     }\r\n//     ncp--;\r\n// }\r\n////// when size of vector is not given but input is given\r\n// void in(int n)\r\n// {\r\n//     string s;\r\n//     cin.ignore();\r\n//     for(int i=0;i<n;i++)\r\n//     {\r\n//         getline(cin,s);\r\n//         stringstream in(s);\r\n//         int a;\r\n//         while(in>>a)\r\n//         {\r\n//             people[i+1][a] = 1;\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n\r\n// nCk calculation\r\n\r\n//int dp[1002];\r\n// int fact(int n)\r\n// {\r\n//     if(n==0)\r\n//         return 1;\r\n//     if(n==1)\r\n//         return 1;\r\n//     if(dp[n]!=-1)\r\n//         return dp[n];\r\n//     int x= n* fact(n-1);\r\n//     x+= modu;\r\n//     x%=modu;\r\n//     return dp[n]= x;\r\n// }\r\n// int calcf(int n, int k)\r\n// {\r\n//     // nCk\r\n//     int t1= fact(n);\r\n//     int t2= fact(k);\r\n//     t2= bin_exponent(t2,modu-2,modu);\r\n//     int t3= fact(n-k);\r\n//     t3= bin_exponent(t3,modu-2,modu);\r\n//     t1= modprod(t1,t2,modu);\r\n//     t1= modprod(t1,t3,modu);\r\n//     t1 += modu;\r\n//     t1%=modu;\r\n//     return t1;\r\n// }\r\n\r\n// when want to take entire line as an input\r\n// vector< int >arr;\r\n//  string input;\r\n//  getline(cin, input);\r\n//  istringstream is(input);\r\n//  int num;\r\n//  while (is >> num)\r\n//    arr.push_back(num);"
}