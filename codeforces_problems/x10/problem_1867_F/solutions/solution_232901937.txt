{
    "id": 232901937,
    "contestId": 1867,
    "creationTimeSeconds": 1700079465,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1867,
        "index": "F",
        "name": "Most Different Tree",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1867,
        "members": [
            {
                "handle": "anurag_balki"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694442900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 200,
    "timeConsumedMillis": 1559,
    "memoryConsumedBytes": 156467200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ull;\r\nconst int N=1e6+5,p=97,mod=998244353;\r\nint n,i,j,x,y;ull f[N];vector<int>e[N];map<ull,int>mp;mt19937 rnd(time(0));\r\ninline ull hush(ull x){return x*x*x*p+114514;}\r\ninline ull Calc(ull x){return hush(x<<20)+hush(x>>31)+hush(x>>8);}\r\nvoid dfs1(int x,int fa){\r\n\tf[x]=mod;for(auto&y:e[x])if(y!=fa)dfs1(y,x),f[x]+=Calc(f[y]);\r\n}\r\nvoid dfs2(int x,int Cnt,int lst){\r\n\tif(x>Cnt){\r\n\t\tdfs1(1,0);\r\n\t\tif(mp.count(f[1]))return;\r\n\t\tfor(int i=1;i<=n-Cnt;++i)printf(\"%d %d\\n\",i,i+1);\r\n\t\tfor(int i=1;i<=Cnt;++i){\r\n\t\t\tfor(auto j:e[i])printf(\"%d %d\\n\",n-Cnt+i,n-Cnt+j);\r\n\t\t}exit(0);\r\n\t}\r\n\tfor(int i=lst;i<=x-1;++i)e[i].push_back(x),dfs2(x+1,Cnt,i),e[i].pop_back();\r\n}\r\nint main(){\r\n\tfor(scanf(\"%d\",&n),i=1;i<n;++i)scanf(\"%d%d\",&x,&y),e[x].push_back(y),e[y].push_back(x);\r\n\tif(n==2){puts(\"1 2\");return 0;}\r\n\tdfs1(1,0);for(i=1;i<=n;++i)mp[f[i]]=1,e[i].clear();\r\n\tfor(i=1;i<=n;++i)dfs2(2,i,1);\r\n}"
}