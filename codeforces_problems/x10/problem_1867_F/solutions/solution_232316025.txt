{
    "id": 232316025,
    "contestId": 1867,
    "creationTimeSeconds": 1699672655,
    "relativeTimeSeconds": 2555,
    "problem": {
        "contestId": 1867,
        "index": "F",
        "name": "Most Different Tree",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1867,
        "members": [
            {
                "handle": "RauPro"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1699670100
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "def hash_tree(tree, node, parent, hashes):\r\n    hash_value = 1\r\n    for child in tree[node]:\r\n        if child != parent:\r\n            hash_value *= hash_tree(tree, child, node, hashes)\r\n    hash_value += 1  # To ensure non-zero and unique hash\r\n    hashes[node] = hash_value\r\n    return hash_value\r\n\r\ndef build_star_tree(n):\r\n    return [(1, i) for i in range(2, n + 1)]\r\n\r\ndef build_linear_tree(n):\r\n    return [(i, i + 1) for i in range(1, n)]\r\n\r\ndef solve(n, edges):\r\n    tree = {i: [] for i in range(1, n + 1)}\r\n    for a, b in edges:\r\n        tree[a].append(b)\r\n        tree[b].append(a)\r\n\r\n    hashes = {}\r\n    hash_tree(tree, 1, -1, hashes)\r\n\r\n    # Build G' as a star or linear tree\r\n    new_tree = build_star_tree(n)  # or build_linear_tree(n)\r\n    return new_tree\r\n\r\nn = int(input())\r\nedges = []\r\nfor _ in range(n - 1):\r\n    a, b = map(int, input().split())\r\n    edges.append((a, b))\r\nnew_tree = solve(n, edges)\r\nfor edge in new_tree:\r\n    print(edge)\r\n"
}