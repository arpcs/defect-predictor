{
    "id": 232722115,
    "contestId": 1867,
    "creationTimeSeconds": 1699951208,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1867,
        "index": "F",
        "name": "Most Different Tree",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1867,
        "members": [
            {
                "handle": "_TEA_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694442900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 200,
    "timeConsumedMillis": 1622,
    "memoryConsumedBytes": 438579200,
    "source": "#include <bits/stdc++.h>\r\n#define lowbit(x) (x & -x)\r\n#define debug_(x) cerr << #x << \" = \" << x << ' '\r\n#define debug(x) cerr << #x << \" = \" << x << '\\n'\r\n// #define int long long\r\n#define endl '\\n'\r\n#define inf 0x3f3f3f3f\r\n#define INF 0x3f3f3f3f3f3f3f3f\r\nusing namespace std;\r\ntypedef pair<int, int> PII;\r\ntypedef int LL;\r\n// const int mod = 998244353;\r\nconst int mod = 1000000000 + 7;\r\nconst int N = 1e5 + 10;\r\nconst int M = 1e6 + 10;\r\nmt19937_64 mrand(random_device{}());\r\nint n, m, k;\r\nvector<vector<int>> vec;\r\nmap<vector<int>,int> tree;\r\nvector<int> sz;\r\nint f(vector<int> &a){\r\n    if(tree.count(a)){\r\n        return tree[a];\r\n    }\r\n    int v=tree.size();\r\n    vec.push_back(a);\r\n    int s=1;\r\n    for(auto x : a){\r\n        s+=sz[x];\r\n    }\r\n    sz.push_back(s);\r\n    return tree[a]=v;\r\n}\r\nvoid solve()\r\n{\r\n    cin>>n;\r\n    vector<vector<int>> adj(n);\r\n    for(int i=0;i<n-1;i++){\r\n        int u,v;cin>>u>>v;\r\n        u--,v--;\r\n        adj[u].push_back(v);\r\n        adj[v].push_back(u);\r\n    }\r\n    if(n==2){\r\n        cout<<1<<\" \"<<2<<endl;\r\n        return;\r\n    }\r\n    set<int> se;\r\n    auto dfs=[&](auto &&dfs,int u,int fa)->int{\r\n        vector<int> a;\r\n        for(auto v : adj[u]){\r\n            if(v==fa) continue;\r\n            a.push_back(dfs(dfs,v,u));\r\n        }\r\n        sort(a.begin(),a.end());\r\n        se.insert(f(a));\r\n        return f(a);\r\n    };\r\n    dfs(dfs,0,-1);\r\n    vector<int> a;\r\n    for(int i=1;i<=n;i++){\r\n        vector<int> b,c;\r\n        auto dfs=[&](auto &&dfs,int sum,int lst)->void{\r\n            if(sum==0){\r\n                int ret=f(b);\r\n                if(!se.count(ret)){\r\n                    int idx=n-i;\r\n                    auto work=[&](auto &&work,int cur)->int{\r\n                        int now=++idx;\r\n                        for(auto v : vec[cur]){\r\n                            int val=work(work,v);\r\n                            cout<<now<<\" \"<<val<<endl;\r\n                        }\r\n                        return now;\r\n                    };\r\n                    for(int j=1;j<=n-i;j++){\r\n                        cout<<j<<\" \"<<j+1<<endl;\r\n                    }\r\n                    work(work,ret);\r\n                    exit(0);\r\n                }\r\n                c.push_back(ret);\r\n            }else{\r\n                for(int j=lst;j<a.size();j++){\r\n                    if(sum>=sz[a[j]]){\r\n                        b.push_back(a[j]);\r\n                        dfs(dfs,sum-sz[a[j]],j);\r\n                        b.pop_back();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        dfs(dfs,i-1,0);\r\n        a.insert(a.begin(),c.begin(),c.end());\r\n        sort(a.begin(),a.end());\r\n    }\r\n}\r\n\r\nsigned main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    int t = 1;\r\n    // cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n}\r\n\r\n/*\r\n5 3\r\n2 4 3 5 1\r\n*/\r\n"
}