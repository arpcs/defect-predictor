{
    "id": 235298387,
    "contestId": 1867,
    "creationTimeSeconds": 1701477904,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1867,
        "index": "F",
        "name": "Most Different Tree",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1867,
        "members": [
            {
                "handle": "ChatGPT_test"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694442900
    },
    "programmingLanguage": "Python 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "# This is an auto submission from ChatGPT (OC).1867_F._Most_Different_Tree_6.py\n\nn = int(input())\nedges = []\nfor _ in range(n-1):\n    a, b = map(int, input().split())\n    edges.append((a, b))\n\n# Construct the tree in a way that each vertex has at most one child\ntree_edges = []\nfor i in range(n-1):\n    tree_edges.append((i+1, i+2))\n\n# Output the constructed tree edges\nfor edge in tree_edges:\n    print(edge[0], edge[1])\n"
}