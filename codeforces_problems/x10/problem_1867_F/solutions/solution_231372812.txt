{
    "id": 231372812,
    "contestId": 1867,
    "creationTimeSeconds": 1699120354,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1867,
        "index": "F",
        "name": "Most Different Tree",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1867,
        "members": [
            {
                "handle": "lapedhsrah"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694442900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 200,
    "timeConsumedMillis": 3930,
    "memoryConsumedBytes": 149504000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\ntypedef pair<int,int> pii;\r\ntypedef pair<ll,ll> pll;\r\n\r\nconst int MAXN = 1000010;\r\nconst int MAXG = 15;\r\nll h1[MAXN], h2[MAXN];\r\nset<pll> hset,iset;\r\nbool visited[MAXN];\r\nvector<int> graph[MAXN];\r\n\r\nvector<vector<pii>> isograph[MAXG];\r\n\r\nvoid buildGraph(vector<pii> &edgeList) {\r\n\tint n = edgeList.size() + 1;\r\n\tfor (int i=1; i<=n; i++) {\r\n\t\tvisited[i] = false;\r\n\t\tgraph[i].clear();\r\n\t}\r\n\tfor (auto &p : edgeList) {\r\n\t\tgraph[p.second].push_back(p.first);\r\n\t}\r\n}\r\n\r\nvoid printResult(vector<pii> &edgeList, int n) {\r\n\tint m = edgeList.size() + 1;\r\n\tfor (int i=1; i<=n-m; i++) {\r\n\t\tcout << i << \" \" << i+1 << endl;\r\n\t}\r\n\tfor (auto &p : edgeList) {\r\n\t\tcout << p.second + n - m << \" \" << p.first + n - m << endl;\r\n\t}\r\n}\r\n\r\nvoid dfs(int u) {\r\n\tvisited[u] = true;\r\n\th1[u] = 1,h2[u] = 1;\r\n\tbool hasChild = false;\r\n\tfor (int v : graph[u]) {\r\n\t\tif (!visited[v]) {\r\n\t\t\tdfs(v);\r\n\t\t\thasChild = true;\r\n\t\t\th1[u] *= (h1[v] + 7LL);\r\n\t\t\th2[u] *= (h2[v] + 17LL);\r\n\t\t}\r\n\t}\r\n\tif (!hasChild) {\r\n\t\th1[u] = 3;\r\n\t\th2[u] = 5;\r\n\t\treturn;\r\n\t}\r\n\th1[u] += 13LL;\r\n\th2[u] += 23LL;\r\n}\r\n\r\nint main() {\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL);\r\n\tint n;cin >> n;\r\n\tfor (int i=1; i<=n; i++) {\r\n\t\tvisited[i] = false;\r\n\t}\r\n\tint u,v;\r\n\tfor (int i=1; i<n; i++) {\r\n\t\tcin >> u >> v;\r\n\t\tgraph[u].push_back(v);\r\n\t\tgraph[v].push_back(u);\r\n\t}\r\n\r\n\tif (n == 2) {\r\n\t\tcout << 1 << \" \" << 2 << endl;\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tdfs(1);\r\n\tfor (int i=1; i<=n; i++) {\r\n\t\thset.insert(pll(h1[i],h2[i]));\r\n\t}\r\n\r\n\tisograph[1].push_back(vector<pii>());\r\n\tfor (int i=2; i<=MAXG; i++) {\r\n\t\tfor (vector<pii> &edgeList : isograph[i-1]) {\r\n\t\t\tfor (int j=1; j<i; j++) {\r\n\t\t\t\tvector<pii> ngraph = edgeList;\r\n\t\t\t\tngraph.push_back(pii(i,j));\r\n\t\t\t\tbuildGraph(ngraph);\r\n\t\t\t\tdfs(1);\r\n\t\t\t\tif (hset.count(pll(h1[1],h2[1])) == 0) {\r\n\t\t\t\t\tprintResult(ngraph, n);\r\n\t\t\t\t\treturn 0;\r\n\t\t\t\t} else if (iset.count(pll(h1[1],h2[1])) > 0) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tisograph[i].push_back(ngraph);\r\n\t\t\t\tiset.insert(pll(h1[1],h2[1]));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}"
}