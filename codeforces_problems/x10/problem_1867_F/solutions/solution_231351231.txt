{
    "id": 231351231,
    "contestId": 1867,
    "creationTimeSeconds": 1699110316,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1867,
        "index": "F",
        "name": "Most Different Tree",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "greedy",
            "hashing"
        ]
    },
    "author": {
        "contestId": 1867,
        "members": [
            {
                "handle": "luogu_bot5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694442900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 133406464\n#include<iostream>\r\n#include<cstdio>\r\n#include<algorithm>\r\n#include<vector>\r\n#include<map>\r\n#include<set>\r\n#define maxn 1000005\r\n#define ll long long\r\n#define ull unsigned ll\r\nusing namespace std;\r\nint n;\r\nint flag=0;\r\nint tot=0;\r\nint cnt=0;\r\nint p[maxn];\r\nint size=0;\r\nint kid[30];\r\nint ooo;\r\nint len=0;\r\null now=0;\r\nint ord=0;\r\null h[maxn*3];// different tree hash\r\nint sz[maxn*3];\r\nvector<int> iso_son[maxn*3];\r\nvector<int> son[maxn];\r\nset<ull> shash;\r\null shift(ull x){\r\n\tx^=x<<13;\r\n\tx^=x>>7;\r\n\tx^=x<<17;\r\n\treturn x;\r\n}\r\nstruct nd{int a,b;}red[maxn];\r\null calc(int x,int fa){\r\n\tull kk=1;\r\n\tfor(int i=0;i<son[x].size();++i){\r\n\t\tif(fa==son[x][i]) continue;\r\n\t\tkk+=shift(calc(son[x][i],x));\t\r\n\t}\r\n\tshash.insert(kk);\r\n\treturn kk;\r\n}\r\ninline void rec_son(){\r\n\tfor(int i=1;i<=len;++i){\r\n\t\tiso_son[cnt].push_back(kid[i]);\r\n\t}\r\n}\r\nvoid build(int res,int ls){\r\n\tif(res==0){\r\n\t\th[++cnt]=now;\r\n\t\tsz[cnt]=size;\r\n\t\trec_son();\r\n\t\tif(!shash.count(now)){flag=1;return;}\r\n\t}\r\n\tfor(int i=ls;i<=tot;++i){\r\n\t\tif(sz[i]<=res){\r\n\t\t\tkid[++len]=i;\r\n\t\t\tull hsh=shift(h[i]);\r\n\t\t\tnow+=hsh;\r\n\t\t\tbuild(res-sz[i],i);\r\n\t\t\tnow-=hsh;\r\n\t\t\t--len;\r\n\t\t\tif(flag) return;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid print(int x,int id){\r\n\tif(iso_son[x].size()==0) return;\r\n\tint son_ord=ord+1;\t\r\n\tfor(int i=0;i<iso_son[x].size();++i){\r\n\t\t\tprintf(\"%d %d\\n\",id,++ord);\r\n\t\t}\r\n\tfor(int i=0;i<iso_son[x].size();++i){\r\n\t\tprint(iso_son[x][i],son_ord+i);\r\n\t}\r\n}\r\nint main(){\r\n\tscanf(\"%d\",&n);\r\n\tfor(int i=1;i<=n-1;++i){\r\n\t\tint x,y;\r\n\t\tscanf(\"%d%d\",&x,&y);\r\n\t\tson[y].push_back(x);\r\n\t\tson[x].push_back(y);\r\n\t\tred[i].a=x,red[i].b=y; \r\n\t}\r\n\tcalc(1,0);\r\n\th[1]=1;tot=1,cnt=1;sz[1]=1;\r\n\tfor(int i=2;i<=n;++i){\r\n\t\tif(flag) break;\r\n\t\tsize=i;\r\n\t\tnow=1;\r\n\t\tbuild(i-1,1);\r\n\t\ttot=cnt;\r\n\t}\r\n\tif(flag==0){\r\n\t\tfor(int i=1;i<=n-1;++i){\r\n\t\t\tprintf(\"%d %d\\n\",red[i].a,red[i].b);\r\n\t\t}\r\n\t}\r\n\tif(flag){\r\n\t\tint sz_link=n-sz[cnt];\r\n\t\tfor(int i=1;i<=sz_link;++i){\r\n\t\t\tprintf(\"%d %d\\n\",i,i+1);\r\n\t\t}\r\n\t\tord=sz_link+1;\r\n\t\tprint(cnt,ord);\t\t\t\r\n\t}\r\n\treturn 0;\r\n}"
}