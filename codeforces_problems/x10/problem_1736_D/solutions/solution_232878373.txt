{
    "id": 232878373,
    "contestId": 1736,
    "creationTimeSeconds": 1700062931,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1736,
        "index": "D",
        "name": "Equal Binary Subsequences",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "geometry",
            "greedy",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1736,
        "members": [
            {
                "handle": "aliflov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665412500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 1433600,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define rep(i,a,b) for (int i=a;i<=b;i++)\r\n#define Rep(i,a,b) for (int i=a;i>=b;i--)\r\n#define foreach(e,x) for (auto e : x)\r\n#define MEM(a,x) memset(a,x,sizeof a)\r\n#define endl '\\n'\r\n#define int long long\r\n#define INF 0x3f3f3f3f\r\n#define debug(n) cout<<\"------------\"<<n<<endl\r\n#define YES cout<<\"YES\"<<endl\r\n#define NO cout<<\"NO\"<<endl\r\n#define PAI cos(-1)\r\n#define eps 1e-9\r\n#define cin qin\r\n#define cout qout\r\n\r\nusing namespace std;\r\n\r\nnamespace FastIO\r\n{\r\n\r\nclass FastIOBase\r\n{\r\nprotected:\r\n#ifdef OPENIOBUF\r\n    static const int BUFSIZE = 1 << 22;\r\n    char buf[BUFSIZE + 1];\r\n    int buf_p = 0;\r\n#endif\r\n    FILE *target;\r\npublic:\r\n#ifdef OPENIOBUF\r\n    virtual void flush() = 0;\r\n#endif\r\n    FastIOBase(FILE *f): target(f) {}\r\n    ~FastIOBase() = default;\r\n};\r\n\r\nclass FastOutput: public FastIOBase\r\n{\r\n#ifdef OPENIOBUF\r\npublic:\r\n    inline void flush()\r\n    { fwrite(buf, 1, buf_p, target), buf_p = 0; }\r\n#endif\r\nprotected:\r\n    inline void __putc(char x)\r\n    {\r\n#ifdef OPENIOBUF\r\n        if (buf[buf_p++] = x, buf_p == BUFSIZE)flush();\r\n#else\r\n        putc(x, target);\r\n#endif\r\n    }\r\n    template<typename T>\r\n    inline void __write(T x)\r\n    {\r\n        static char stk[64], *top; top = stk;\r\n        if (x < 0) return __putc('-'), __write(-x);\r\n        do *(top++) = x % 10, x /= 10; while (x);\r\n        for (; top != stk; __putc(*(--top) + '0'));\r\n    }\r\npublic:\r\n    FastOutput(FILE *f = stdout): FastIOBase(f) {}\r\n#ifdef OPENIOBUF\r\n    ~FastOutput() { flush(); }\r\n#endif\r\n    template<typename ...T>\r\n    inline void writesp(const T &...x)\r\n    { initializer_list<int> {(this->operator<<(x), __putc(' '), 0)...}; }\r\n    template<typename ...T>\r\n    inline void writeln(const T &...x)\r\n    { initializer_list<int> {(this->operator<<(x), __putc('\\n'), 0)...}; }\r\n    inline FastOutput &operator <<(char x)\r\n    { return __putc(x), *this; }\r\n    inline FastOutput &operator <<(const char *s)\r\n    { for (; *s; __putc(*(s++))); return *this; }\r\n    inline FastOutput &operator <<(const string &s)\r\n    { return (*this) << s.c_str(); }\r\n    template<typename T, typename = typename enable_if<is_integral<T>::value>::type>\r\n    inline FastOutput & operator <<(const T &x)\r\n    { return __write(x), *this; }\r\n} qout;\r\n\r\nclass FastInput: public FastIOBase\r\n{\r\n#ifdef OPENIOBUF\r\npublic:\r\n    inline void flush()\r\n    { buf[fread(buf, 1, BUFSIZE, target)] = '\\0', buf_p = 0; }\r\n#endif\r\nprotected:\r\n    inline char __getc()\r\n    {\r\n#ifdef OPENIOBUF\r\n        if (buf_p == BUFSIZE) flush();\r\n        return buf[buf_p++];\r\n#else\r\n        return getc(target);\r\n#endif\r\n    }\r\npublic:\r\n#ifdef OPENIOBUF\r\n    FastInput(FILE *f = stdin): FastIOBase(f) { buf_p = BUFSIZE; }\r\n#else\r\n    FastInput(FILE *f = stdin): FastIOBase(f) {}\r\n#endif\r\n    inline char getchar() { return __getc(); }\r\n    template<typename ...T>\r\n    inline void read(T &...x)\r\n    { initializer_list<int> {(this->operator>>(x), 0)...}; }\r\n    inline FastInput &operator >>(char &x)\r\n    { while (isspace(x = __getc())); return *this; }\r\n    template<typename T, typename = typename enable_if<is_integral<T>::value>::type>\r\n    inline FastInput & operator >>(T &x)\r\n    {\r\n        static char ch, sym; x = sym = 0;\r\n        while (isspace(ch = __getc()));\r\n        if (ch == '-') sym = 1, ch = __getc();\r\n        for (; isdigit(ch); x = (x << 1) + (x << 3) + (ch ^ 48), ch = __getc());\r\n        return sym ? x = -x : x, *this;\r\n    }\r\n    inline FastInput &operator >>(char *s)\r\n    {\r\n        while (isspace(*s = __getc()));\r\n        for (; !isspace(*s) && *s && ~*s; * (++s) = __getc());\r\n        return *s = '\\0', *this;\r\n    }\r\n    inline FastInput &operator >>(string &s)\r\n    {\r\n        char str_buf[(1 << 8) + 1], *p = str_buf;\r\n        char *const buf_end = str_buf + (1 << 8);\r\n        while (isspace(*p = __getc()));\r\n        for (s.clear(), p++;; p = str_buf)\r\n        {\r\n            for (; p != buf_end && !isspace(*p = __getc()) && *p && ~*p; p++);\r\n            *p = '\\0', s.append(str_buf);\r\n            if (p != buf_end) break;\r\n        }\r\n        return *this;\r\n    }\r\n} qin;\r\n\r\n} // namespace FastIO\r\nusing namespace FastIO;\r\n\r\ntypedef pair<int, int > PII;\r\ntypedef long long LL;\r\ntypedef unsigned long long ULL;\r\n\r\ninline int sign(double a) {return a<-eps?-1:a>eps;}\r\n\r\ninline int cmpdouble(double a,double b) {return sign(a-b);}\r\n\r\nstring rev(string res) {\r\n    reverse(res.begin(), res.end());\r\n    return res;\r\n}\r\n\r\ndouble Abs(double x) {return x*sign(x);}\r\n\r\nmt19937 mrand(random_device{}());\r\nint rnd(int x) { return mrand() % x;}\r\n\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\n\r\nunordered_map<int, int, custom_hash> mp;\r\n\r\n/*-------------------------------------*/\r\n\r\nconst int N = 1e6 + 10, MOD = 1e9 + 7;\r\nstring ch;\r\nint n;\r\n\r\nvoid solve() {\r\n    cin>>n>>ch;\r\n    int cntzero=0,cntone=0;\r\n    for(int i=0;i<ch.size();i++) {\r\n    \tif(ch[i]=='0') cntzero++;\r\n    \telse cntone++;\r\n    }\r\n    if(cntzero&1||cntone&1) {\r\n    \tcout<<-1<<endl;\r\n    \treturn;\r\n    }\r\n    int flag=1;\r\n    vector<int>ans;\r\n    for(int i=0;i<ch.size();i+=2) {\r\n    \tif(ch[i]==ch[i+1]) continue;\r\n    \tif(ch[i]-'0'==flag) ans.push_back(i);\r\n    \telse ans.push_back(i+1);\r\n    \tflag^=1; \r\n    }\r\n    cout<<ans.size()<<' ';\r\n    for(auto v:ans) {\r\n    \tcout<<v+1<<' ';\r\n    }\r\n    cout<<endl;\r\n    for(int i=0;i<ch.size();i+=2) {\r\n    \tcout<<i+1<<' ';\r\n    }\r\n    cout<<endl;\r\n}\r\n\r\nsigned main()\r\n{\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}