{
    "id": 197609606,
    "contestId": 91,
    "creationTimeSeconds": 1678955832,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 91,
        "index": "E",
        "name": "Igloo Skyscraper",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "data structures",
            "geometry"
        ]
    },
    "author": {
        "contestId": 91,
        "members": [
            {
                "handle": "NeverCompromise"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1308582000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 80,
    "timeConsumedMillis": 1902,
    "memoryConsumedBytes": 230604800,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n//#include<boost/algorithm/string.hpp>\r\n\r\n//pragmas\r\n#pragma GCC optimize(\"O3\")\r\n\r\n//types\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define ll long long int\r\n#define ull unsigned long long int\r\n#define vec vector<long long int>\r\n#define pall pair<long long int, long long int>\r\n#define vecpair vector<pair<long long int,long long int>>\r\n#define vecvec(a, i, j) vector<vector<long long int>> a (i, vec (j, 0))\r\n#define vecvecvec(a, i, j, k) vector<vector<vector<long long int>>> dp (i + 1, vector<vector<long long int>>(j + 1, vector<long long int>(k + 1, 0)))\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n//random stuff\r\n#define all(a) a.begin(),a.end()\r\n#define read(a) for (auto &x : a) cin >> x\r\n#define endl \"\\n\"\r\n#define pb push_back\r\n#define print(a) for(auto x : a) cout << x << \" \"; cout << endl\r\n#define sz(x) x.size()\r\n#define F first\r\n#define S second\r\n#define sp \" \" \r\nconst ll INF = 9223372036854775807, MOD = 1e9 + 7;\r\ntypedef tree<long long int, null_type, less<long long int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;             //less_equal for multiset\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\n#define safe_map unordered_map<long long, int, custom_hash>\r\n#define hashmap gp_hash_table<int, int, custom_hash>\r\n\r\n\r\n//debug\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(long double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\n\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#define reach cerr<<\"reached\"<<endl\r\n#else\r\n#define debug(x...)\r\n#define reach \r\n#endif\r\n\r\n\r\n/*---------------------------------------------------------------------------------------------------------------------------*/\r\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nbool revsort(ll a, ll b) {return a > b;}\r\nvoid swap(int &x, int &y) {int temp = x; x = y; y = temp;}\r\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (ll i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (ll j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m = 1000000007) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m = 1000000007) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m = 1000000007) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m = 1000000007) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\nvoid precision(int a) {cout << setprecision(a) << fixed;}\r\nll ceil_div(ll x, ll y){return (x + y - 1) / y;}\r\nunsigned long long power(unsigned long long x,ll y, ll p){unsigned long long res = 1;x = x % p; while (y > 0){if (y & 1)res = (res * x) % p;y = y >> 1;x = (x * x) % p;}return res;}\r\nunsigned long long modInverse(unsigned long long n,int p){return power(n, p - 2, p);}\r\nll nCr(ll n,ll r, ll p){if (n < r)return 0;if (r == 0)return 1;unsigned long long fac[n + 1];fac[0] = 1;for (int i = 1; i <= n; i++)fac[i] = (fac[i - 1] * i) % p;return (fac[n] * modInverse(fac[r], p) % p* modInverse(fac[n - r], p) % p)% p;}\r\nll accumulate(const vec &nums){ll sum = 0; for(auto x : nums) sum += x; return sum;}\r\nll tmax(ll a, ll b, ll c = 0, ll d = -INF, ll e = -INF, ll f = -INF){return max(a, max(b, max(c, max(d, max(e, f)))));}\r\nint log2_floor(unsigned long long i) {return i ? __builtin_clzll(1) - __builtin_clzll(i) : -1;}\r\nstring bin(ll n){return bitset<32>(n).to_string();}\r\n/*--------------------------------------------------------------------------------------------------------------------------*/\r\n\r\nconst ll MAXN = 2 * 1e5 + 1;\r\nint n, q;\r\nvector<ll> a(MAXN), b(MAXN);\r\nstruct ConvexHullDynamic\r\n{\r\n\tstatic const ll INF=1e18;\r\n\r\n\tstruct Line\r\n\t{\r\n\t\tll a, b, ind; //y = ax + b\r\n\t\tdouble xLeft; //Stores the llersection wiith previous line in the convex hull. First line has -INF\r\n\r\n\t\tenum Type {line, maxQuery, minQuery} type;\r\n\t\tll val;\r\n\r\n\t\texplicit Line(ll aa=0, ll bb=0, ll ii = 0): a(aa), b(bb), ind(ii), xLeft(-INF), type(Type::line), val(0) {}\r\n\r\n\t\tll valueAt(ll x) const\r\n\t\t{\r\n\t\t\treturn a*x + b;\r\n\t\t}\r\n\t\tfriend bool isParallel(const Line &l1, const Line &l2)\r\n\t\t{\r\n\t\t\treturn l1.a == l2.a;\r\n\t\t}\r\n\t\tfriend double llersectX(const Line &l1, const Line &l2)\r\n\t\t{\r\n\t\t\treturn isParallel(l1, l2)?INF:1.0*(l2.b-l1.b)/(l1.a-l2.a);\r\n\t\t}\r\n\t\tbool operator<(const Line& l2) const\r\n\t\t{\r\n\t\t\tif(l2.type == line)\r\n\t\t\t\treturn this->a < l2.a;\r\n\t\t\tif(l2.type == maxQuery)\r\n\t\t\t\treturn this->xLeft < l2.val;\r\n\t\t\tif(l2.type == minQuery)\r\n\t\t\t\treturn this->xLeft > l2.val;\r\n            return 0;\r\n\t\t}\r\n\t};\r\n\r\n\tbool isMax;\r\n\tset<Line> hull;\r\n\r\n\tbool hasPrev(set<Line>::iterator it)\r\n\t{\r\n\t\treturn it!=hull.begin();\r\n\t}\t\r\n\tbool hasNext(set<Line>::iterator it)\r\n\t{\r\n\t\treturn it!=hull.end() && next(it)!=hull.end();\r\n\t}\r\n\tbool irrelevant(const Line &l1, const Line &l2, const Line &l3)\r\n\t{\r\n\t\treturn llersectX(l1, l3) <= llersectX(l1, l2);\r\n\t}\r\n\tbool irrelevant(set<Line>::iterator it)\r\n\t{\r\n\t\treturn hasPrev(it) && hasNext(it) && ( \r\n\t\t\t(isMax && irrelevant(*prev(it), *it, *next(it))) \r\n\t\t\t|| (!isMax && irrelevant(*next(it), *it, *prev(it))));\r\n\t}\r\n\t//Updates xValue of line polled by it\r\n\tset<Line>::iterator updateLeftBorder(set<Line>::iterator it)\r\n\t{\r\n\t\tif(isMax && !hasPrev(it) || !isMax && !hasNext(it))\r\n\t\t\treturn it;\r\n\t\tdouble val=llersectX(*it, isMax?(*prev(it)):(*next(it)));\r\n\t\tLine temp(*it);\r\n\t\tit=hull.erase(it);\r\n\t\ttemp.xLeft=val;\r\n\t\tit=hull.insert(it, temp);\r\n\t\treturn it;\r\n\t}\r\n\r\n\texplicit ConvexHullDynamic(bool isMax): isMax(isMax) {}\r\n\r\n\tvoid addLine(ll a, ll b, ll i) //Add ax + b in logN time\r\n\t{\r\n\t\tLine l3=Line(a, b, i);\r\n\t\tauto it=hull.lower_bound(l3);\r\n\r\n\t\t//If parallel liune is already in set, one of the lines becomes irrelevant\r\n\t\tif(it!=hull.end() && isParallel(*it, l3))\r\n\t\t{\r\n\t\t\tif(isMax && it->b<b || !isMax && it->b>b)\r\n\t\t\t\tit=hull.erase(it);\r\n\t\t\telse\r\n\t\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tit=hull.insert(it, l3);\r\n\t\tif(irrelevant(it))\r\n\t\t{\r\n\t\t\thull.erase(it);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Remove lines which became irrelevant after inserting\r\n\t\twhile(hasPrev(it) && irrelevant(prev(it)))\r\n\t\t\thull.erase(prev(it));\r\n\t\twhile(hasNext(it) && irrelevant(next(it)))\r\n\t\t\thull.erase(next(it));\r\n\r\n\t\t//Update xLine\r\n\t\tit=updateLeftBorder(it);\r\n\t\tif(hasPrev(it))\r\n\t\t\tupdateLeftBorder(prev(it));\r\n\t\tif(hasNext(it))\r\n\t\t\tupdateLeftBorder(next(it));\r\n\t}\r\n\r\n\tpair<ll, ll> getBest(ll x)      //val, ind\r\n\t{\r\n\t\tLine q;\r\n\t\tq.val=x;\r\n\t\tq.type = isMax?Line::Type::maxQuery : Line::Type::minQuery;\r\n\r\n\t\tauto bestLine=hull.lower_bound(q);\r\n\t\tif(isMax)\r\n\t\t\t--bestLine;\r\n\t\treturn {bestLine->valueAt(x), bestLine->ind};\r\n\t}\r\n};\r\nconst ll inf = 9e18;\r\n\r\nstruct SegTree\r\n{\r\n    ll N;\r\n    vector<ConvexHullDynamic> cht;\r\n    void init(ll n)\r\n    {\r\n        N=n;\r\n        ConvexHullDynamic gogo(1);\r\n        gogo.addLine(0, 0, 0);\r\n        for(int i = 0; i <= 4*N+5; i ++)\r\n            cht.pb(gogo);\r\n    }\r\n    void build(ll ver,ll L,ll R)\r\n    {\r\n        if(L > R)return;\r\n        for(int i = L; i <= R; i ++)    cht[ver].addLine(b[i], a[i], i);\r\n        if(L==R)    return;\r\n        ll M=(L+R)/2;\r\n        build(ver*2,L,M),build(ver*2+1,M+1,R);\r\n    }\r\n    pair<ll, ll> Query(ll ver,ll L,ll R,ll i,ll j, ll ask)\r\n    {\r\n        if(j<L || i>R)return {0, 0};\r\n        if(i<=L && R<=j)\r\n        {\r\n            return cht[ver].getBest(ask);\r\n        }\r\n        ll M=(L+R)/2;\r\n        pall left=Query(ver*2,L,M,i,j, ask),right=Query(ver*2+1,M+1,R,i,j, ask),cur;\r\n        return max(left, right);\r\n    }\r\n\r\n    pall query(ll l, ll r, ll ask)\r\n    {\r\n        return Query(1, 1, N, l, r, ask);\r\n    }\r\n};\r\nSegTree rq_cht;\r\n\r\n//code starts\r\nint main()\r\n{\r\n    fastio();\r\n    cin >> n >> q;\r\n    for(int i = 1; i <= n; i ++)    cin >> a[i] >> b[i];\r\n    rq_cht.init(n);\r\n    rq_cht.build(1, 1, n);\r\n    for(int i = 1, l, r, t; i <= q; i ++)\r\n    {\r\n        cin >> l >> r >> t;\r\n        cout << rq_cht.query(l, r, t).second << endl; \r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// There is an idea of a Patrick Bateman. Some kind of abstraction.\r\n// But there is no real me. Only an entity. Something illusory. \r\n// And though I can hide my cold gaze, and you can shake my hand and\r\n// feel flesh gripping yours, and maybe you can even sense our lifestyles\r\n// are probably comparable, I simply am not there."
}