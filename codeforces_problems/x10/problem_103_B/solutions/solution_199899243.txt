{
    "id": 199899243,
    "contestId": 103,
    "creationTimeSeconds": 1680229262,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 103,
        "index": "B",
        "name": "Cthulhu",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs"
        ]
    },
    "author": {
        "contestId": 103,
        "members": [
            {
                "handle": "Killer_Jerry"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1312714800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 47,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 102400,
    "source": "// LUOGU_RID: 106474765\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\nconst int MAX=1e2+10;\r\nvector<vector<int> >edge(MAX);\r\nbool book[MAX];\r\nint n,m,tot;\r\nvoid dfs(int x){\r\n\tbook[x]=true;\r\n\tfor(int i=0;i<edge[x].size();i++){\r\n\t\tif(!book[edge[x][i]]) dfs(edge[x][i]);\r\n\t}\r\n}\r\nint main(){\r\n\tscanf(\"%d%d\",&n,&m);\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tint x,y;\r\n\t\tscanf(\"%d%d\",&x,&y);\r\n\t\tedge[x].push_back(y),edge[y].push_back(x);\r\n\t}\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tif(!book[i]) tot++,dfs(i);\r\n\t}\r\n\tprintf(\"%s\",(tot==1&&n==m?\"FHTAGN!\":\"NO\"));\r\n\treturn 0;\r\n}",
    "suggested_categories": [
        "graph algorithms",
        "depth-first search",
        "connected components",
        "input parsing",
        "output formatting",
        "conditional logic",
        "c++ programming",
        "data structures",
        "vector manipulation",
        "integer arithmetic",
        "code comments",
        "code readability",
        "code efficiency",
        "error handling",
        "input validation",
        "output optimization",
        "edge cases handling",
        "algorithm complexity",
        "code modularity"
    ]
}