{
    "id": 234564343,
    "contestId": 21,
    "creationTimeSeconds": 1701078105,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 21,
        "index": "A",
        "name": "Jabber ID",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1900,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 21,
        "members": [
            {
                "handle": "itsdangquan"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1277730300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 83,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <cctype>\r\n\r\nusing namespace std;\r\n\r\nbool check(char inp[]);\r\n\r\nint main()\r\n{\r\n\tchar inp[101];\r\n\tcin.getline(inp, 101);\r\n\tif (check(inp)) cout << \"YES\";\r\n\telse cout << \"NO\";\r\n\treturn 0;\r\n}\r\n\r\nbool check(char inp[])\r\n{\r\n\tint len = 0;\r\n\tif (inp[len] == '@') return false;\r\n\tfor (int i = 0; inp[len] != '@'; ++len)\r\n\t{\r\n\t\tif (++i > 16) return false;\r\n\t\tif (!(isdigit(inp[len]) || isalpha(inp[len]) || inp[len] == '_')) return false;\r\n\t}\r\n\tint ind = len++;\r\n\tif (!(isdigit(inp[len]) || isalpha(inp[len]) || inp[len] == '_')) return false;\r\n\tfor (int i = 0; inp[len] != '\\0' && inp[len] != '/'; ++len)\r\n\t{\r\n\t\tif (inp[len] == '.')\r\n\t\t{\r\n\t\t\ti = 0;\r\n\t\t\tif (!(isdigit(inp[len + 1]) || isalpha(inp[len + 1]) || inp[len + 1] == '_')) return false;\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (++i > 16) return false;\r\n\t\tif (!(isdigit(inp[len]) || isalpha(inp[len]) || inp[len] == '_')) return false;\r\n\t\tif (len - ind > 32) return false;\r\n\t}\r\n\tif (inp[len++] == '\\0') return true;\r\n\tfor (int i = 0; inp[len] != '\\0'; ++len)\r\n\t{\r\n\t\tif (++i > 16) return false;\r\n\t\tif (!(isdigit(inp[len]) || isalpha(inp[len]) || inp[len] == '_')) return false;\r\n\t}\r\n\treturn true;\r\n}"
}