{
    "id": 219463584,
    "contestId": 177,
    "creationTimeSeconds": 1692370621,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 177,
        "index": "E1",
        "name": "Space Voyage",
        "type": "PROGRAMMING",
        "points": 30.0,
        "rating": 1700,
        "tags": [
            "binary search"
        ]
    },
    "author": {
        "contestId": 177,
        "members": [
            {
                "handle": "tranxuantruong"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1335016800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS1",
    "passedTestCount": 21,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "/**\r\n  * Create: Friday 2023-08-18-21.22.32 GMT+7\r\n  * Title : E2. Space Voyage\r\n  * Author:\r\n*****/\r\n\r\n\r\n#include  <bits/stdc++.h>\r\n#line 10  \"tranxuantruong\"\r\n\r\n#ifndef   MY_TEMPLATE\r\n#define   TranXuanTruong                        main()\r\n#define   Get_better(...)                       ios::sync_with_stdio(0); cin.tie(0);\r\nusing namespace std;\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const stack                 <T>         &stack_)                  {os <<   \"[\";     int n = (int) stack_.size();      vector <T> archive (n);    stack <T>                              stackCopy_ (stack_);   for (int i=0; i<n; ++i) {archive[stackCopy_.size()-1]=stackCopy_.top();       stackCopy_.pop();}     if (!archive.empty())      {for (auto it=archive.begin(); it!=archive.end()-1; ++it)    {os <<*it <<\", \";}     os <<archive.back();}     os <<\" \";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const queue                 <T>         &queue_)                  {os << \"->[\";     int n = (int) queue_.size();      vector <T> archive (n);    queue <T>                              queueCopy_ (queue_);   for (int i=0; i<n; ++i) {archive[queueCopy_.size()-1]=queueCopy_ .front();    queueCopy_.pop();}     if (!archive.empty())      {for (auto it=archive.begin(); it!=archive.end()-1; ++it)    {os <<*it <<\", \";}     os <<archive.back();}     os <<\" \";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const priority_queue        <T,vector<T>,greater<T>>&Queue_)      {os <<   \"[\";     int n = (int) Queue_.size();      vector <T> archive (n);    priority_queue<T,vector<T>,greater<T>> QueueCopy_ (Queue_);   for (int i=0; i<n; ++i) {archive[QueueCopy_.size()-1]=QueueCopy_.top();       QueueCopy_.pop();}     if (!archive.empty())      {for (auto it=archive.begin(); it!=archive.end()-1; ++it)    {os <<*it <<\", \";}     os <<archive.back();}     os <<\" \";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const priority_queue        <T>         &Queue_)                  {os <<   \"[\";     int n = (int) Queue_.size();      vector <T> archive (n);    priority_queue<T>                      QueueCopy_ (Queue_);   for (int i=0; i<n; ++i) {archive[QueueCopy_.size()-1]=QueueCopy_.top();       QueueCopy_.pop();}     if (!archive.empty())      {for (auto it=archive.begin(); it!=archive.end()-1; ++it)    {os <<*it <<\", \";}     os <<archive.back();}     os <<\" \";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const vector                <T>         &vector_)                 {os <<   \"[\";     if (!vector_  .empty())           {for (auto it = vector_  .begin(), i=0; i< (int) vector_   .size()-1; ++i, ++it)         {os <<*it <<\", \";}     os << * (vector_   .rbegin());}     os << \"]\";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const deque                 <T>         &deque_)                  {os <<   \"[\";     if (!deque_   .empty())           {for (auto it = deque_   .begin(), i=0; i< (int) deque_    .size()-1; ++i, ++it)         {os <<*it <<\", \";}     os << * (deque_    .rbegin());}     os << \"]\";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const set                   <T>         &set_)                    {os <<   \"[\";     if (!set_     .empty())           {for (auto it = set_     .begin(), i=0; i< (int) set_      .size()-1; ++i, ++it)         {os <<*it <<\", \";}     os << * (set_      .rbegin());}     os << \"]\";     return os;}\r\ntemplate <typename T>                           ostream& operator << (ostream& os, const multiset              <T>         &multiSet_)               {os <<   \"[\";     if (!multiSet_.empty())           {for (auto it = multiSet_.begin(), i=0; i< (int) multiSet_ .size()-1; ++i, ++it)         {os <<*it <<\", \";}     os << * (multiSet_ .rbegin());}     os << \"]\";     return os;}\r\ntemplate <typename T, typename _>               ostream& operator << (ostream& os, const map                   <T, _>      &map_)                    {os <<   \"[\";     if (!map_     .empty())           {for (auto it = map_     .begin(), i=0; i< (int) map_      .size()-1; ++i, ++it)         {os <<*it <<\", \";}     os << * (map_      .rbegin());}     os << \"]\";     return os;}\r\ntemplate <typename T, typename _>               ostream& operator << (ostream& os, const multimap              <T, _>      &multiMap_)               {os <<   \"[\";     if (!multiMap_.empty())           {for (auto it = multiMap_.begin(), i=0; i< (int) multiMap_ .size()-1; ++i, ++it)         {os <<*it <<\", \";}     os << * (multiMap_ .rbegin());}     os << \"]\";     return os;}\r\ntemplate <typename T, typename _>               ostream& operator << (ostream& os, const pair                  <T, _>      &pair_)                   {os <<   \"{\";                                                                                                                                {os <<pair_.first;     os <<\":\";   os <<pair_.second;}     os << \"}\";     return os;}\r\ntemplate <typename T>                           void     quick_debug (ostream& os, const char *name,           const T     &value)                   {os <<\"    \"      << name <<\" = \" <<value <<endl <<endl;};\r\ntemplate <typename T, typename... Args>         void     quick_debug (ostream& os, const char *name,           const T     &value, Args&&... args)   {os <<\"    \";     while (*name != ',')    {os << *name++;}     os << \" = \" << value << endl;    quick_debug (os, name + 1, args...);};\r\n;                                               istream& operator >> (istream& is, __int128                                &    x)                   {                  __int128 sign=1; x=0;            char c=is.get();                                        for( ;!isdigit(c); ){if(c=='-'){sign=-1;}c=is.get();}   for( ;isdigit(c); ){x=(x<<3)+(x<<1)+(c^'0');c=is.get();}   x*=sign;                       return is;   }\r\n;                                               ostream& operator << (ostream& os, __int128                                     x)                   {                 if(x==0){return os<<\"0\";}         int sign=1; if(x<0){sign=-1; x=-x;} string s=\"\";        for( ;x!=0; ){s+='0'+x%10;x/=10;}                       if(sign<0){s+='-';}                                        reverse(s.begin(), s.end());   return os<<s;}\r\n#define   endl                                  '\\n'\r\n#define   int                                   __int128\r\n#define   hien(...)                             cerr     <<__LINE__ <<\" \" __FILE__ \":\" <<endl;                 quick_debug (cerr, \" \"#__VA_ARGS__, __VA_ARGS__)\r\n#endif\r\n\r\n\r\nTranXuanTruong{\r\n\r\n   Get_better(44);\r\n\r\n\r\n   int n; cin >> n;\r\n   int c; cin >> c;\r\n\r\n   vector <int> a(n);\r\n   vector <int> b(n);\r\n   for(int i=0; i<n; ++i){\r\n      cin >> a[i] >> b[i];\r\n   }\r\n\r\n\r\n\r\n   int cnt=count(a.begin(), a.end(), (int)0);\r\n   if(cnt==n&&n==c){\r\n      cout <<-1 <<endl;\r\n      return 0;\r\n   }\r\n\r\n\r\n   if(n>c){\r\n      cout <<0 <<endl;\r\n      return 0;\r\n   }\r\n   c-=n;\r\n\r\n\r\n   int maxx=1e18;\r\n   for(int i=0; i<n; ++i){\r\n      if(a[i]==0){\r\n         continue;\r\n      }\r\n      maxx=min(maxx, b[i]*c/a[i]);\r\n   }\r\n   maxx+=1;\r\n\r\n\r\n   function <int(int)>\r\n   f = [&](int x){\r\n      int sum=0;\r\n\r\n      for(int i=0; i<n; ++i){\r\n         sum+=x*a[i]/b[i];\r\n      }\r\n\r\n      return sum;\r\n   };\r\n\r\n\r\n   int left=1;\r\n   int right=maxx;\r\n   for( ;left<=right; ){\r\n      int mid=(left+right)>>1;\r\n\r\n      int res=f(mid);\r\n      if(res<c){\r\n         left=mid+1;\r\n      }\r\n      else{\r\n         right=mid-1;\r\n      }\r\n   }\r\n\r\n\r\n   if(f(left)!=c){\r\n      cout <<0 <<endl;\r\n      return 0;\r\n   }\r\n\r\n\r\n   int L=left;\r\n   left=1;\r\n   right=maxx+1e9;\r\n   for( ;left<=right; ){\r\n      int mid=(left+right)>>1;\r\n\r\n      int res=f(mid);\r\n      if(res<=c){\r\n         left=mid+1;\r\n      }\r\n      else{\r\n         right=mid-1;\r\n      }\r\n   }\r\n\r\n   int ans=left-L;\r\n\r\n   cout <<ans <<endl;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   return 0;\r\n}\r\n"
}