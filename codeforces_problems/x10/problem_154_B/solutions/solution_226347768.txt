{
    "id": 226347768,
    "contestId": 154,
    "creationTimeSeconds": 1696276013,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 154,
        "index": "B",
        "name": "Colliders",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1600,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 154,
        "members": [
            {
                "handle": "bkifhr9"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1330095600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 100001; // Adjust this according to the maximum value of n\n\nint parent[MAXN];\nint rank[MAXN];\nbool active[MAXN];\n\nint find(int x) {\n    if (x != parent[x])\n        parent[x] = find(parent[x]);\n    return parent[x];\n}\n\nvoid unite(int x, int y) {\n    x = find(x);\n    y = find(y);\n    if (x != y) {\n        if (rank[x] < rank[y])\n            swap(x, y);\n        parent[y] = x;\n        if (rank[x] == rank[y])\n            rank[x]++;\n    }\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    for (int i = 1; i <= n; ++i) {\n        parent[i] = i;\n        rank[i] = 0;\n        active[i] = false;\n    }\n\n    vector<string> results;\n\n    for (int i = 0; i < m; ++i) {\n        string op;\n        int collider;\n        cin >> op >> collider;\n\n        if (op == \"+\") {\n            if (active[collider]) {\n                results.push_back(\"Already on\");\n            } else {\n                bool conflict = false;\n                for (int j = 1; j <= n; ++j) {\n                    if (active[j] && __gcd(collider, j) != 1) {\n                        conflict = true;\n                        results.push_back(\"Conflict with \" + to_string(j));\n                        break;\n                    }\n                }\n                if (!conflict) {\n                    active[collider] = true;\n                    results.push_back(\"Success\");\n                    for (int j = 1; j <= n; ++j) {\n                        if (active[j] && j != collider) {\n                            unite(collider, j);\n                        }\n                    }\n                }\n            }\n        } else {\n            if (active[collider]) {\n                active[collider] = false;\n                results.push_back(\"Success\");\n            } else {\n                results.push_back(\"Already off\");\n            }\n        }\n    }\n\n    for (const string &result : results) {\n        cout << result << endl;\n    }\n\n    return 0;\n}\n\n\t \t\t\t\t \t\t\t\t\t\t \t\t \t\t\t \t\t \t \t\t \t\t"
}