{
    "id": 225270501,
    "contestId": 154,
    "creationTimeSeconds": 1695737212,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 154,
        "index": "B",
        "name": "Colliders",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1600,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 154,
        "members": [
            {
                "handle": "22BCM044"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1330095600
    },
    "programmingLanguage": "GNU C11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n\r\ntypedef struct {\r\n  int index;\r\n  bool is_activated;\r\n} Collider;\r\n\r\nbool is_relatively_prime(int a, int b) {\r\n  while (b > 0) {\r\n    int temp = a % b;\r\n    a = b;\r\n    b = temp;\r\n  }\r\n  return a == 1;\r\n}\r\n\r\nvoid activate_collider(Collider* colliders, int collider_index) {\r\n  for (int i = 0; i < collider_index; i++) {\r\n    if (colliders[i].is_activated && !is_relatively_prime(colliders[i].index, collider_index)) {\r\n      printf(\"Conflict with %d\\n\", colliders[i].index);\r\n      return;\r\n    }\r\n  }\r\n\r\n  colliders[collider_index].is_activated = true;\r\n  printf(\"Success\\n\");\r\n}\r\n\r\nvoid deactivate_collider(Collider* colliders, int collider_index) {\r\n  colliders[collider_index].is_activated = false;\r\n  printf(\"Success\\n\");\r\n}\r\n\r\nvoid process_request(Collider* colliders, int n_colliders, char* request) {\r\n  if (request[0] == '+') {\r\n    int collider_index = atoi(request + 1);\r\n    if (colliders[collider_index - 1].is_activated) {\r\n      printf(\"Already on\\n\");\r\n    } else {\r\n      activate_collider(colliders, collider_index - 1);\r\n    }\r\n  } else if (request[0] == '-') {\r\n    int collider_index = atoi(request + 1);\r\n    if (!colliders[collider_index - 1].is_activated) {\r\n      printf(\"Already off\\n\");\r\n    } else {\r\n      deactivate_collider(colliders, collider_index - 1);\r\n    }\r\n  } else {\r\n    printf(\"Unknown request\\n\");\r\n  }\r\n}\r\n\r\nint main() {\r\n  int n_colliders = 0;\r\n  scanf(\"%d\", &n_colliders);\r\n\r\n  Collider* colliders = malloc(sizeof(Collider) * n_colliders);\r\n  for (int i = 0; i < n_colliders; i++) {\r\n    colliders[i].index = i + 1;\r\n    colliders[i].is_activated = false;\r\n  }\r\n\r\n  char request[100];\r\n  while (scanf(\"%s\", request) == 1) {\r\n    process_request(colliders, n_colliders, request);\r\n  }\r\n\r\n  free(colliders);\r\n\r\n  return 0;\r\n}"
}