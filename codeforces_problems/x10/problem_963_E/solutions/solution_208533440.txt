{
    "id": 208533440,
    "contestId": 963,
    "creationTimeSeconds": 1685921932,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 963,
        "index": "E",
        "name": "Circles of Waiting",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3100,
        "tags": [
            "math"
        ]
    },
    "author": {
        "contestId": 963,
        "members": [
            {
                "handle": "HaccerKat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1523973900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntemplate<typename T>\r\nint SIZE(T (&t)){\r\n    return t.size();\r\n}\r\n\r\ntemplate<typename T, size_t N>\r\nint SIZE(T (&t)[N]){\r\n    return N;\r\n}\r\n\r\nstring to_string(char t){\r\n    return \"'\" + string({t}) + \"'\";\r\n}\r\n\r\nstring to_string(bool t){\r\n    return t ? \"true\" : \"false\";\r\n}\r\n\r\nstring to_string(const string &t, int x1=0, int x2=1e9){\r\n    string ret = \"\";\r\n    for(int i = min(x1,SIZE(t)), _i = min(x2,SIZE(t)-1); i <= _i; ++i){\r\n        ret += t[i];\r\n    }\r\n    return '\"' + ret + '\"';\r\n}\r\n\r\nstring to_string(const char* t){\r\n    string ret(t);\r\n    return to_string(ret);\r\n}\r\n\r\ntemplate<size_t N>\r\nstring to_string(const bitset<N> &t, int x1=0, int x2=1e9){\r\n    string ret = \"\";\r\n    for(int i = min(x1,SIZE(t)); i <= min(x2,SIZE(t)-1); ++i){\r\n        ret += t[i] + '0';\r\n    }\r\n    return to_string(ret);\r\n}\r\n\r\ntemplate<typename T, typename... Coords>\r\nstring to_string(const T (&t), int x1=0, int x2=1e9, Coords... C);\r\n\r\ntemplate<typename T, typename S>\r\nstring to_string(const pair<T, S> &t){\r\n    return \"(\" + to_string(t.first) + \", \" + to_string(t.second) + \")\";\r\n}\r\n\r\ntemplate<typename T, typename... Coords>\r\nstring to_string(const T (&t), int x1, int x2, Coords... C){\r\n    string ret = \"[\";\r\n    x1 = min(x1, SIZE(t));\r\n    auto e = begin(t);\r\n    advance(e,x1);\r\n    for(int i = x1, _i = min(x2,SIZE(t)-1); i <= _i; ++i){\r\n        ret += to_string(*e, C...) + (i != _i ? \", \" : \"\");\r\n        e = next(e);\r\n    }\r\n    return ret + \"]\";\r\n}\r\n\r\ntemplate<int Index, typename... Ts>\r\nstruct print_tuple{\r\n    string operator() (const tuple<Ts...>& t) {\r\n        string ret = print_tuple<Index - 1, Ts...>{}(t);\r\n        ret += (Index ? \", \" : \"\");\r\n        return ret + to_string(get<Index>(t));\r\n    }\r\n};\r\n\r\ntemplate<typename... Ts>\r\nstruct print_tuple<0, Ts...> {\r\n    string operator() (const tuple<Ts...>& t) {\r\n        return to_string(get<0>(t));\r\n    }\r\n};\r\n\r\ntemplate<typename... Ts>\r\nstring to_string(const tuple<Ts...>& t) {\r\n    const auto Size = tuple_size<tuple<Ts...>>::value;\r\n    return print_tuple<Size - 1, Ts...>{}(t);\r\n}\r\n\r\nvoid dbgr(){;}\r\ntemplate<typename Heads, typename... Tails>\r\nvoid dbgr(Heads H, Tails... T){\r\n    cout << to_string(H) << \" | \";\r\n    dbgr(T...);\r\n}\r\n\r\nvoid dbgs(){;}\r\ntemplate<typename Heads, typename... Tails>\r\nvoid dbgs(Heads H, Tails... T){\r\n    cout << H << \" \";\r\n    dbgs(T...);\r\n}\r\n\r\n/*\r\nformatted functions:\r\n*/\r\n\r\n/*\r\nconsider __VA_ARGS__ as a whole:\r\ndbgv() prints values only\r\ndbg() prints name and values\r\n*/\r\n#define dbgv(...) cout << to_string(__VA_ARGS__) << endl;\r\n\r\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]: \"; dbgv(__VA_ARGS__);\r\n//#define dbg(...)\r\n\r\n/*\r\nconsider __VA_ARGS__ as a sequence of arguments:\r\ndbgr() prints values only\r\ndbgm() prints names and values\r\n*/\r\n#define dbgr(...) dbgr(__VA_ARGS__); cout << endl;\r\n\r\n#define dbgm(...) cout << \"[\" << #__VA_ARGS__ << \"]: \"; dbgr(__VA_ARGS__);\r\n\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\n\r\ntemplate <typename T>\r\nT inverse(T a, T m) {\r\n  T u = 0, v = 1;\r\n  while (a != 0) {\r\n    T t = m / a;\r\n    m -= t * a; swap(a, m);\r\n    u -= t * v; swap(u, v);\r\n  }\r\n  assert(m == 1);\r\n  return u;\r\n}\r\n \r\ntemplate <typename T>\r\nclass Modular {\r\n public:\r\n  using Type = typename decay<decltype(T::value)>::type;\r\n \r\n  constexpr Modular() : value() {}\r\n  template <typename U>\r\n  Modular(const U& x) {\r\n    value = normalize(x);\r\n  }\r\n \r\n  template <typename U>\r\n  static Type normalize(const U& x) {\r\n    Type v;\r\n    if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\r\n    else v = static_cast<Type>(x % mod());\r\n    if (v < 0) v += mod();\r\n    return v;\r\n  }\r\n \r\n  const Type& operator()() const { return value; }\r\n  template <typename U>\r\n  explicit operator U() const { return static_cast<U>(value); }\r\n  constexpr static Type mod() { return T::value; }\r\n \r\n  Modular& operator+=(const Modular& other) { if ((value += other.value) >= mod()) value -= mod(); return *this; }\r\n  Modular& operator-=(const Modular& other) { if ((value -= other.value) < 0) value += mod(); return *this; }\r\n  template <typename U> Modular& operator+=(const U& other) { return *this += Modular(other); }\r\n  template <typename U> Modular& operator-=(const U& other) { return *this -= Modular(other); }\r\n  Modular& operator++() { return *this += 1; }\r\n  Modular& operator--() { return *this -= 1; }\r\n  Modular operator++(int) { Modular result(*this); *this += 1; return result; }\r\n  Modular operator--(int) { Modular result(*this); *this -= 1; return result; }\r\n  Modular operator-() const { return Modular(-value); }\r\n \r\n  template <typename U = T>\r\n  typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type& operator*=(const Modular& rhs) {\r\n#ifdef _WIN32\r\n    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);\r\n    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;\r\n    asm(\r\n      \"divl %4; \\n\\t\"\r\n      : \"=a\" (d), \"=d\" (m)\r\n      : \"d\" (xh), \"a\" (xl), \"r\" (mod())\r\n    );\r\n    value = m;\r\n#else\r\n    value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\r\n#endif\r\n    return *this;\r\n  }\r\n  template <typename U = T>\r\n  typename enable_if<is_same<typename Modular<U>::Type, long long>::value, Modular>::type& operator*=(const Modular& rhs) {\r\n    long long q = static_cast<long long>(static_cast<long double>(value) * rhs.value / mod());\r\n    value = normalize(value * rhs.value - q * mod());\r\n    return *this;\r\n  }\r\n  template <typename U = T>\r\n  typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type& operator*=(const Modular& rhs) {\r\n    value = normalize(value * rhs.value);\r\n    return *this;\r\n  }\r\n \r\n  Modular& operator/=(const Modular& other) { return *this *= Modular(inverse(other.value, mod())); }\r\n \r\n  friend const Type& abs(const Modular& x) { return x.value; }\r\n \r\n  template <typename U>\r\n  friend bool operator==(const Modular<U>& lhs, const Modular<U>& rhs);\r\n \r\n  template <typename U>\r\n  friend bool operator<(const Modular<U>& lhs, const Modular<U>& rhs);\r\n \r\n  template <typename V, typename U>\r\n  friend V& operator>>(V& stream, Modular<U>& number);\r\n \r\n private:\r\n  Type value;\r\n};\r\n \r\ntemplate <typename T> bool operator==(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value == rhs.value; }\r\ntemplate <typename T, typename U> bool operator==(const Modular<T>& lhs, U rhs) { return lhs == Modular<T>(rhs); }\r\ntemplate <typename T, typename U> bool operator==(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) == rhs; }\r\n \r\ntemplate <typename T> bool operator!=(const Modular<T>& lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\r\ntemplate <typename T, typename U> bool operator!=(const Modular<T>& lhs, U rhs) { return !(lhs == rhs); }\r\ntemplate <typename T, typename U> bool operator!=(U lhs, const Modular<T>& rhs) { return !(lhs == rhs); }\r\n \r\ntemplate <typename T> bool operator<(const Modular<T>& lhs, const Modular<T>& rhs) { return lhs.value < rhs.value; }\r\n \r\ntemplate <typename T> Modular<T> operator+(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator+(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) += rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator+(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) += rhs; }\r\n \r\ntemplate <typename T> Modular<T> operator-(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator-(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator-(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) -= rhs; }\r\n \r\ntemplate <typename T> Modular<T> operator*(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator*(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator*(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) *= rhs; }\r\n \r\ntemplate <typename T> Modular<T> operator/(const Modular<T>& lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator/(const Modular<T>& lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\r\ntemplate <typename T, typename U> Modular<T> operator/(U lhs, const Modular<T>& rhs) { return Modular<T>(lhs) /= rhs; }\r\n \r\ntemplate<typename T, typename U>\r\nModular<T> power(const Modular<T>& a, const U& b) {\r\n  assert(b >= 0);\r\n  Modular<T> x = a, res = 1;\r\n  U p = b;\r\n  while (p > 0) {\r\n    if (p & 1) res *= x;\r\n    x *= x;\r\n    p >>= 1;\r\n  }\r\n  return res;\r\n}\r\n \r\ntemplate <typename T>\r\nbool IsZero(const Modular<T>& number) {\r\n  return number() == 0;\r\n}\r\n \r\ntemplate <typename T>\r\nstring to_string(const Modular<T>& number) {\r\n  return to_string(number());\r\n}\r\n \r\n// U == std::ostream? but done this way because of fastoutput\r\ntemplate <typename U, typename T>\r\nU& operator<<(U& stream, const Modular<T>& number) {\r\n  return stream << number();\r\n}\r\n \r\n// U == std::istream? but done this way because of fastinput\r\ntemplate <typename U, typename T>\r\nU& operator>>(U& stream, Modular<T>& number) {\r\n  typename common_type<typename Modular<T>::Type, long long>::type x;\r\n  stream >> x;\r\n  number.value = Modular<T>::normalize(x);\r\n  return stream;\r\n}\r\n \r\n/*\r\nusing ModType = int;\r\n \r\nstruct VarMod { static ModType value; };\r\nModType VarMod::value;\r\nModType& md = VarMod::value;\r\nusing Mint = Modular<VarMod>;\r\n*/\r\n \r\nconstexpr int md = (int) 1e9 + 7;\r\nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\r\n \r\n/*vector<Mint> fact(1, 1);\r\nvector<Mint> inv_fact(1, 1);\r\n \r\nMint C(int n, int k) {\r\n  if (k < 0 || k > n) {\r\n    return 0;\r\n  }\r\n  while ((int) fact.size() < n + 1) {\r\n    fact.push_back(fact.back() * (int) fact.size());\r\n    inv_fact.push_back(1 / fact.back());\r\n  }\r\n  return fact[n] * inv_fact[k] * inv_fact[n - k];\r\n}*/\r\n\r\ntypedef long long ll;\r\ntypedef unsigned int ui;\r\ntypedef unsigned long long ull;\r\ntypedef pair<int, int> pi;\r\ntypedef pair<ll, ll> pll;\r\n// using u128 = __uint128_t;\r\n// using i128 = __int128;\r\nconst int mod = 1000000007;\r\nconst int N = 105;\r\nconst int LOG = 20;\r\nconst int inf = 1e9;\r\nconst double eps = 1e-11;\r\nconst int dx[4] = {-1, 0, 1, 0};\r\nconst int dy[4] = {0, -1, 0, 1};\r\n// only works when there is exactly one solution, n equations, and n unknowns\r\ntemplate <class T>\r\nvector<T> gausselim(vector<vector<T>> mat) {\r\n    int n = mat.size();    \r\n    for (int i = 0; i < n - 1; i++) {\r\n        for (int j = i + 1; j < n; j++) {\r\n            assert(mat[i][i] != 0);\r\n            Mint mul = mat[j][i] / mat[i][i];\r\n            for (int p = 0; p <= n; p++) {\r\n                mat[j][p] -= mul * mat[i][p];\r\n            }\r\n        }\r\n    }\r\n    \r\n    vector<T> res(n);\r\n    for (int i = n - 1; i >= 0; i--) {\r\n        Mint mul = 1 / mat[i][i];\r\n        for (int p = 0; p <= n; p++) {\r\n            mat[i][p] *= mul;\r\n        }\r\n        \r\n        res[i] = mat[i][n];\r\n        for (int p = i + 1; p < n; p++) {\r\n            res[i] -= res[p] * mat[i][p];\r\n        }\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nvector<Mint> vmul(vector<Mint> a, Mint x) {\r\n    int n = a.size();\r\n    vector<Mint> res(n);\r\n    for (int i = 0; i < n; i++) {\r\n        res[i] = a[i] * x;\r\n    }\r\n    \r\n    return res;\r\n}\r\n\r\nvector<Mint> vadd(vector<Mint> a, vector<Mint> b) {\r\n    int n = a.size();\r\n    vector<Mint> res(n);\r\n    for (int i = 0; i < n; i++) {\r\n        res[i] = a[i] + b[i];\r\n    }    \r\n    \r\n    return res;\r\n}\r\n\r\nint r, n, m, k, qq;\r\nMint cnt[4], p[4], invp[4];\r\nvector<Mint> a[N][N];\r\nbool ok[N][N], pivot[N][N], eqn[N][N];\r\nvector<Mint> adj(int x, int y) {\r\n    vector<Mint> res(n + 1);\r\n    for (int d = 0; d < 4; d++) {\r\n        int nx = x + dx[d], ny = y + dy[d];\r\n        // dbg(res);\r\n        // dbgm(nx, ny);\r\n        if (nx < 0 || ny < 0 || nx >= n || ny >= n) continue;\r\n        // dbg(a[nx][ny]);\r\n        res = vadd(res, vmul(a[nx][ny], p[d]));\r\n    }\r\n    \r\n    res[n]++;\r\n    // dbgm(\"HERE\", res);\r\n    return res;\r\n}\r\n\r\nvoid solve() {\r\n    cin >> r;\r\n    Mint sum = 0;\r\n    for (int i = 0; i < 4; i++) {\r\n        cin >> cnt[i];\r\n        sum += cnt[i];\r\n    }\r\n    \r\n    if (r == 0) {\r\n        cout << \"1\\n\";\r\n        return;\r\n    }\r\n    \r\n    for (int i = 0; i < 4; i++) {\r\n        p[i] = cnt[i] / sum, invp[i] = sum / cnt[i];\r\n    }\r\n    \r\n    for (int i = -r; i <= r; i++) {\r\n        for (int j = -r; j <= r; j++) {\r\n            if (i * i + j * j <= r * r) ok[i + r][j + r] = true;\r\n        }\r\n    }\r\n    \r\n    n = 2 * r + 1;\r\n    int cur = 0;\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n            a[i][j].resize(n + 1);\r\n            if (!ok[i][j]) continue;\r\n            if (j == 0 || j == n - 1 || !ok[i][j - 1] || !ok[i][j + 1]) {\r\n                if (i <= r) a[i][j][cur++]++, pivot[i][j] = true;\r\n                if (i >= r) eqn[i][j] = true;\r\n            }\r\n        }\r\n    }\r\n    \r\n    // dbg(a);\r\n    // dbg(cnt);\r\n    // dbg(invp);\r\n    // dbg(ok);\r\n    // dbg(pivot);\r\n    // dbg((Mint)333333334 * 4)\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n            if (!ok[i][j] || pivot[i][j]) continue;\r\n            vector<Mint> res = a[i - 1][j];\r\n            res = vadd(res, vmul(adj(i - 1, j), -1));\r\n            // dbgm(i, j);\r\n            a[i][j] = vmul(res, invp[2]);\r\n            // dbg(a[i][j]);\r\n        }\r\n    }\r\n    \r\n    // dbg(a);\r\n    vector<vector<Mint>> mat(n);\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < n; j++) {\r\n            if (!ok[i][j]) continue;\r\n            vector<Mint> test = vadd(a[i][j], vmul(adj(i, j), -1));\r\n            test[n] *= -1;\r\n            bool ok2 = false;\r\n            for (int p = 0; p < n; p++) {\r\n                if (test[p] != 0) ok2 = true;\r\n            }\r\n            \r\n            mat[j] = test;\r\n        }\r\n    }\r\n    \r\n    // dbg(mat);\r\n    vector<Mint> res = gausselim(mat);\r\n    // dbg(res);\r\n    Mint out = a[r][r][n];\r\n    for (int i = 0; i < n; i++) {\r\n        out += res[i] * a[r][r][i];\r\n    }\r\n    \r\n    cout << out << \"\\n\";\r\n}\r\n\r\nint32_t main() {\r\n    std::ios::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    solve();\r\n}"
}