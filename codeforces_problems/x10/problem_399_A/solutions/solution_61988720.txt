{
    "id": 61988720,
    "contestId": 399,
    "creationTimeSeconds": 1570371943,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 399,
        "index": "A",
        "name": "Pages",
        "type": "PROGRAMMING",
        "points": 500.0,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 399,
        "members": [
            {
                "handle": "Kaunta"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393687800
    },
    "programmingLanguage": "Rust",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "use std::io;\nuse std::io::Write;\n\n// Outline\n// read in numberse first and parse\n\nfn main() {\n    let mut input = String::new();\n\n    io::stdin().read_line(&mut input)\n        .expect(\"Couldn't read line.\");\n\n    let input: Vec<i32> = input\n        .split_whitespace()\n        .map(|s| s.parse().unwrap())\n        .collect();\n\n    let number_of_pages: i32 = input[0];\n    let current_page: i32 = input[1];\n    let range_of_pages: i32 = input[2];\n\n    let lower_bound = {\n        if current_page - range_of_pages <= 0 {\n            1\n        } else {\n            current_page - range_of_pages\n        }\n    };\n\n    let higher_bound = {\n        if current_page + range_of_pages > number_of_pages {\n            number_of_pages\n        } else {\n            current_page + range_of_pages\n        }\n    };\n\n    if higher_bound != number_of_pages && lower_bound != 1 {\n        print!(\"<< \");\n        io::stdout().flush().unwrap();\n        for page in lower_bound..higher_bound+1 {\n            if page == current_page {\n                print!(\"({}) \", page);\n                io::stdout().flush().unwrap();\n            } else {\n                print!(\"{} \", page);\n                io::stdout().flush().unwrap();\n            }\n        }\n        print!(\">>\");\n        io::stdout().flush().unwrap();\n    } else if higher_bound == number_of_pages && lower_bound != 1 {\n        print!(\"<< \");\n        io::stdout().flush().unwrap();\n        for page in lower_bound..higher_bound+1 {\n            if page == current_page {\n                print!(\"({}) \", page);\n                io::stdout().flush().unwrap();\n            } else {\n                print!(\"{} \", page);\n                io::stdout().flush().unwrap();\n            }\n        }\n    } else if higher_bound == number_of_pages && lower_bound == 1 {\n        for page in lower_bound..higher_bound+1 {\n            if page == current_page {\n                print!(\"({}) \", page);\n                io::stdout().flush().unwrap();\n            } else {\n                print!(\"{} \", page);\n                io::stdout().flush().unwrap();\n            }\n        }\n    } else if higher_bound != number_of_pages && lower_bound == 1 {\n        for page in lower_bound..higher_bound+1 {\n            if page == current_page {\n                print!(\"({}) \", page);\n                io::stdout().flush().unwrap();\n            } else {\n                print!(\"{} \", page);\n                io::stdout().flush().unwrap();\n            }\n        }\n        print!(\">>\");\n        io::stdout().flush().unwrap();\n    }\n}\n"
}