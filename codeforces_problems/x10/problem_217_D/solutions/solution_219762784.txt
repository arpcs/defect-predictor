{
    "id": 219762784,
    "contestId": 217,
    "creationTimeSeconds": 1692605828,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 217,
        "index": "D",
        "name": "Bitonix' Patrol",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2900,
        "tags": [
            "bitmasks",
            "brute force",
            "combinatorics",
            "dfs and similar",
            "math"
        ]
    },
    "author": {
        "contestId": 217,
        "members": [
            {
                "handle": "zavodil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1345273500
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 404,
    "memoryConsumedBytes": 512000,
    "source": "import java.util.Arrays;\r\nimport java.util.BitSet;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    static final int N = 125 + 5;\r\n    static final int MOD = 1000000007;\r\n    static int n, m, k;\r\n    static int[] cnt = new int[N];\r\n    static long ans = 0;\r\n\r\n    public static void main(String[] args) {\r\n        Scanner scanner = new Scanner(System.in);\r\n        n = scanner.nextInt();\r\n        m = scanner.nextInt();\r\n        k = scanner.nextInt();     \r\n        \r\n        Arrays.fill(cnt, 0);\r\n        for (int i = 0; i < k; i++) {\r\n            int tmp = scanner.nextInt();\r\n            tmp %= m;\r\n            cnt[Math.min(tmp, m - tmp)]++;\r\n        }\r\n\r\n        BitSet tmp = new BitSet(N);\r\n        tmp.set(1);\r\n        dfs(tmp, 0, 1);\r\n        System.out.println((int) (ans % MOD));\r\n    }\r\n\r\n    static BitSet mv(BitSet x, int val, boolean opt, int sz) {\r\n        BitSet result = new BitSet(sz);\r\n        if (opt) { // left\r\n            for (int i = val; i < sz; i++) {\r\n                result.set(i, x.get(i - val));\r\n            }\r\n            for (int i = 0; i < val; i++) {\r\n                result.set(i, x.get(sz - val + i));\r\n            }\r\n        } else { // right\r\n            for (int i = 0; i < sz - val; i++) {\r\n                result.set(i, x.get(i + val));\r\n            }\r\n            for (int i = sz - val; i < sz; i++) {\r\n                result.set(i, x.get(i - sz + val));\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static void dfs(BitSet nb, int n, long mulv) {\r\n        ans = (ans + mulv) % MOD;\r\n        for (int i = n; i <= m / 2; i++) {\r\n            if (cnt[i] > 0 && !nb.get(i) && !nb.get(m - i)) {\r\n                BitSet newNb = (BitSet) nb.clone();\r\n                newNb.or(mv(nb, i, true, m));\r\n                newNb.or(mv(nb, i, false, m));\r\n                dfs(newNb, i + 1, mulv * cnt[i] % MOD);\r\n            }\r\n        }\r\n    }\r\n}/*1692605828.3701315*/"
}