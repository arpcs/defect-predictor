{
    "id": 152894429,
    "contestId": 1172,
    "creationTimeSeconds": 1649301730,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1172,
        "index": "E",
        "name": "Nauuo and ODT",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3300,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 1172,
        "members": [
            {
                "handle": "DRYAYST"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559909100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 72,
    "timeConsumedMillis": 2807,
    "memoryConsumedBytes": 71065600,
    "source": "//editor : DRYAYST\r\n//Wo shi ge da SHA BI\r\n#include<bits/stdc++.h>\r\n#define g() getchar()\r\n#define il inline\r\n#define ull unsigned long long\r\n#define eps 1e-10\r\n#define ll long long\r\n#define pa pair<int, int>\r\n#define for_1(i, n) for(int i = 1; i <= (n); ++i)\r\n#define for_0(i, n) for(int i = 0; i < (n); ++i)\r\n#define for_xy(i, x, y) for(int i = (x); i <= (y); ++i)\r\n#define for_yx(i, y, x) for(int i = (y); i >= (x); --i)\r\n#define for_edge(i, x) for(int i = head[x]; i; i = nxt[i])\r\n#define DB double\r\n#define m_p make_pair\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\nconst int N = 400010, INF = 0x7f7f7f7f, mod = 1e9 + 7;\r\ninline int re() {\r\n    int x = 0, p = 1;\r\n    char ch = getchar();\r\n    while(ch > '9' || ch < '0') {if(ch == '-') p = -1; ch = getchar();}\r\n    while(ch <= '9' and ch >= '0') {x = (x << 3) + (x << 1) + (ch ^ 48); ch = getchar();}\r\n    return x * p;\r\n}\r\n//LCT \u7ef4\u62a4\u5b50\u6811\u5927\u5c0f\u7684\u5e73\u65b9\uff0c\u6c34\u9898\u9001\u5206\u3002\u3002\r\nint head[N], nxt[N<<1], ver[N<<1], tot;\r\nil void add(int x, int y) {ver[++tot] = y; nxt[tot] = head[x]; head[x] = tot; }\r\nstruct LCT {int fa, ch[2], siz, sizi; ll siz2i; ll siz2() {return (ll)siz * siz;} } tr[N];\r\nll n, m, ans, last, delta[N]; \r\nint c[N], f[N];\r\nbool bw[N];\r\nvector<int> col[N][2];//\u7ef4\u62a4\u9ed1\u767d\u70b9\r\nbool nroot(int x) { return x == tr[tr[x].fa].ch[0] || x == tr[tr[x].fa].ch[1]; }\r\nvoid pushup(int x) { tr[x].siz = tr[tr[x].ch[0]].siz + tr[tr[x].ch[1]].siz + tr[x].sizi + 1; }\r\nvoid rotate(int x) {\r\n    int y = tr[x].fa; int z = tr[y].fa; int k = x == tr[y].ch[1];\r\n    if (nroot(y)) tr[z].ch[y == tr[z].ch[1]] = x; tr[x].fa = z; tr[y].ch[k] = tr[x].ch[k ^ 1];\r\n    tr[tr[x].ch[k ^ 1]].fa = y; tr[x].ch[k ^ 1] = y; tr[y].fa = x; pushup(y); pushup(x);\r\n}\r\nvoid Splay(int x) {\r\n    while (nroot(x)) {\r\n        int y = tr[x].fa; int z = tr[y].fa;\r\n        if (nroot(y)) (x == tr[y].ch[1]) ^ (y == tr[z].ch[1]) ? rotate(x) : rotate(y);\r\n        rotate(x);\r\n    }\r\n}\r\nvoid access(int x) {\r\n    for (int y = 0; x; x = tr[y = x].fa) {\r\n        Splay(x); tr[x].sizi += tr[tr[x].ch[1]].siz;  tr[x].sizi -= tr[y].siz;\r\n        tr[x].siz2i += tr[tr[x].ch[1]].siz2(); tr[x].siz2i -= tr[y].siz2(); tr[x].ch[1] = y; pushup(x);\r\n    }\r\n}\r\nint findroot(int x) { access(x); Splay(x); while(tr[x].ch[0]) x = tr[x].ch[0]; Splay(x); return x; }\r\nvoid link(int x) {\r\n    int y = f[x]; Splay(x); ans -= tr[x].siz2i + tr[tr[x].ch[1]].siz2();  //ans \u7ef4\u62a4\u7684\u7b54\u6848\uff0c\u56e0\u4e3a\u6b64\u65f6 x \u8981\u8fdb\u884c\u5408\u5e76\uff0c\u539f\u6765\u7684\u7ef4\u62a4\u7684\u4e1c\u897f\u5c31\u4e0d\u9002\u7528\u4e86\u3002\u56e0\u6b64\u8981\u5220\u53bb\r\n    int z = findroot(y); access(x); Splay(z); ans -= tr[tr[z].ch[1]].siz2(); //\u56e0\u4e3a\u8fd9\u91cc\u6d89\u53ca\u5230\u4e00\u4e2a\u5b50\u6811\u5927\u5c0f\u5408\u5e76\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5148\u51cf\u53bb\uff0c\u7136\u540e\u540e\u9762\u518d\u52a0\u4e0a\u662f\u6bd4\u8f83\u7b80\u5355\u7684\r\n    tr[x].fa = y; Splay(y); tr[y].sizi += tr[x].siz; tr[y].siz2i += tr[x].siz2();//\u7ef4\u62a4 y \u7684\u4fe1\u606f\u3002\r\n    pushup(y); access(x); Splay(z); ans += tr[tr[z].ch[1]].siz2();//\u8fd9\u65f6\u5019\u518d\u628a\u539f\u6765\u7684\u4fe1\u606f\u52a0\u56de\u53bb\r\n}\r\nvoid cut(int x) {\r\n    int y = f[x]; access(x); ans += tr[x].siz2i; int z = findroot(y); access(x); Splay(z);//\u6b64\u65f6\u8981\u628a x \u8fd9\u4e2a\u70b9\u5220\u53bb\uff0c\u9996\u5148\u5b83\u7684\u865a\u5b50\u6811\u7684\u7b54\u6848\u80af\u5b9a\u662f\u4e86\u3002\r\n    ans -= tr[tr[z].ch[1]].siz2(); Splay(x); tr[x].ch[0] = tr[tr[x].ch[0]].fa = 0; pushup(x);//\u540c\u4e0a\uff0c\u5148\u51cf\u53bb\u540e\u52a0\u56de\u6765\u3002\r\n    Splay(z); ans += tr[tr[z].ch[1]].siz2();\r\n}\r\nvoid dfs(int x) { for_edge(i, x) {int y = ver[i]; if (y != f[x]) { f[y] = x; dfs(y); }} }\r\nsigned main() {  \r\n//\tfreopen(\"Bwater.in\",\"r\",stdin);\r\n//\tfreopen(\"Bwater.out\",\"w\",stdout);\r\n    n = re(), m = re(); \r\n    for (int i = 1; i <= n; ++i) { c[i] = re();  col[c[i]][0].push_back(i); col[c[i]][1].push_back(0); tr[i].siz = 1; } tr[n + 1].siz = 1; //col \u7b2c\u4e00\u7ef4\u7ef4\u62a4\u7684\u662f\u70b9\u7684\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u7ef4\u662f\u65f6\u95f4\r\n    for (int i = 1; i < n; ++i) { int x = re(), y = re(); add(x, y); add(y, x);  } \r\n    for (int i = 1; i <= m; ++i) {\r\n        int u = re(), v = re();  col[c[u]][0].push_back(u); col[c[u]][1].push_back(i);\r\n        c[u] = v; col[v][0].push_back(u); col[v][1].push_back(i);\r\n    } f[1] = n + 1; dfs(1); \r\n    for (int i = 1; i <= n; ++i) link(i);//link   \r\n    for (int i = 1; i <= n; ++i) {\r\n        if (!col[i][0].size()) { delta[0] += (ll)n * n; continue; }\r\n        if (col[i][1][0]) { delta[0] += (ll)n * n; last = (ll)n * n; } else { last = 0;}\r\n        for (int j = 0; j < col[i][0].size(); ++j) {\r\n            int u = col[i][0][j];\r\n            if(bw[u] ^= 1) cut(u);//\u76f8\u5f53\u4e8e\u4e00\u4e2a\u9ed1\u767d\u70b9\u7684\u53d8\u5316\r\n            else link(u);\r\n            if (j == col[i][0].size() - 1 || col[i][1][j + 1] != col[i][1][j]) { delta[col[i][1][j]] += ans - last; last = ans; }\r\n        }\r\n        for (int j = col[i][0].size() - 1; ~j; --j) {\r\n            int u = col[i][0][j];\r\n            if (bw[u] ^= 1) cut(u);\r\n            else link(u);\r\n        }\r\n    }\r\n    ans = (ll)n * n * n; for (int i = 0; i <= m; ++i) { ans -= delta[i]; printf(\"%lld\\n\", ans); }\r\n    return 0;\r\n}"
}