{
    "id": 225843774,
    "contestId": 38,
    "creationTimeSeconds": 1696041763,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 38,
        "index": "F",
        "name": "Smart Boy",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "dp",
            "games",
            "strings"
        ]
    },
    "author": {
        "contestId": 38,
        "members": [
            {
                "handle": "liangbowen"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1288440000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 1122,
    "memoryConsumedBytes": 44236800,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <set>\r\n#include <map>\r\nusing namespace std;\r\n\r\nstruct State {bool win; int score1, score2; State(bool _win = false, int _score1 = 0, int _score2 = 0): win(_win), score1(_score1), score2(_score2){} };\r\nmap <string, int> cnt; map <string, State> dp;\r\nbool chkmax(State ans, State p) //return true if p===> ans\r\n{\r\n\tif (p.win != ans.win) return p.win > ans.win;\r\n\tif (p.score1 != ans.score1) return p.score1 > ans.score1;\r\n\tif (p.score2 != ans.score2) return p.score2 < ans.score2;\r\n\treturn false;\r\n}\r\nvoid update(State &ans, State p) {if (chkmax(ans, p)) ans = p;}\r\nState dfs(string s, int sum, int mx)\r\n{\r\n\tif (dp.count(s)) return dp[s];\r\n\tState ans;\r\n\tfor (char ch = 'a'; ch <= 'z'; ch++)\r\n\t{\r\n\t\tsum++, mx = max(mx, ch - 'a' + 1);\r\n\t\tfor (string t : {ch + s, s + ch})\r\n\t\t\tif (cnt[t])\r\n\t\t\t\t{State p = dfs(t, sum, mx); update(ans, {!p.win, p.score2 + sum * mx + cnt[t], p.score1});}\r\n\t}\r\n\treturn dp[s] = ans;\r\n}\r\nint main()\r\n{\r\n\tint n;\r\n\tcin >> n;\r\n\twhile (n--)\r\n\t{\r\n\t\tstring s; cin >> s; int len = s.length();\r\n\t\tset <string> st; //s \u7684\u6240\u6709\u5b50\u4e32\r\n\t\tfor (int l = 0; l < len; l++) for (int r = l; r < len; r++) st.insert(s.substr(l, r - l + 1));\r\n\t\tfor (string ss : st) cnt[ss]++;\r\n\t}\r\n\tState ans = dfs(\"\", 0, 0);\r\n\tputs(ans.win ? \"First\" : \"Second\"); cout << ans.score1 << ' ' << ans.score2;\r\n\treturn 0;\r\n}\r\n"
}