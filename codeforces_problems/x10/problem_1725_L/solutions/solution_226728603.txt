{
    "id": 226728603,
    "contestId": 1725,
    "creationTimeSeconds": 1696506121,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1725,
        "index": "L",
        "name": "Lemper Cooking Competition",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 1725,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662298500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 4812800,
    "source": "#include <bits/stdc++.h>\n#define int long long\n#pragma GCC optimize(3)\n#pragma GCC target(\"avx\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"-fgcse\")\n#pragma GCC optimize(\"-fgcse-lm\")\n#pragma GCC optimize(\"-fipa-sra\")\n#pragma GCC optimize(\"-ftree-pre\")\n#pragma GCC optimize(\"-ftree-vrp\")\n#pragma GCC optimize(\"-fpeephole2\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-fsched-spec\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC optimize(\"-falign-jumps\")\n#pragma GCC optimize(\"-falign-loops\")\n#pragma GCC optimize(\"-falign-labels\")\n#pragma GCC optimize(\"-fdevirtualize\")\n#pragma GCC optimize(\"-fcaller-saves\")\n#pragma GCC optimize(\"-fcrossjumping\")\n#pragma GCC optimize(\"-fthread-jumps\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-fwhole-program\")\n#pragma GCC optimize(\"-freorder-blocks\")\n#pragma GCC optimize(\"-fschedule-insns\")\n#pragma GCC optimize(\"inline-functions\")\n#pragma GCC optimize(\"-ftree-tail-merge\")\n#pragma GCC optimize(\"-fschedule-insns2\")\n#pragma GCC optimize(\"-fstrict-aliasing\")\n#pragma GCC optimize(\"-fstrict-overflow\")\n#pragma GCC optimize(\"-falign-functions\")\n#pragma GCC optimize(\"-fcse-skip-blocks\")\n#pragma GCC optimize(\"-fcse-follow-jumps\")\n#pragma GCC optimize(\"-fsched-interblock\")\n#pragma GCC optimize(\"-fpartial-inlining\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"-freorder-functions\")\n#pragma GCC optimize(\"-findirect-inlining\")\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\n#pragma GCC optimize(\"inline-small-functions\")\n#pragma GCC optimize(\"-finline-small-functions\")\n#pragma GCC optimize(\"-ftree-switch-conversion\")\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\n#pragma GCC optimize(\"-fexpensive-optimizations\")\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\n#pragma GCC optimize(\"inline-functions-called-once\")\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\n\nusing namespace std;\n\nint read()\n{\n\tint s = 0, f = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch))\n\t{\n\t\tif (ch == '-')\n\t\t{\n\t\t\tf = -1;\n\t\t}\n\t\tch = getchar();\n\t}\n\twhile (isdigit(ch))\n\t{\n\t\ts = s * 10 + (ch - '0');\n\t\tch = getchar();\n\t}\n\treturn s * f;\n}\n\nlong long a[200005], s[200005], b[200005], sum;\n \nvoid gsort(int l, int r)\n{\n    int m = (l + r) / 2, i = l, j = m + 1, k = l;\n    if (l >= r) return;\n    gsort(l, m);\n    gsort(m + 1, r);\n    for (; i <= m && j <= r;)\n    {\n        if (s[i] <= s[j])\n        {\n            b[k++] = s[i++];\n        }\n        else\n        {\n            b[k++] = s[j++];\n            sum += m - i + 1;\n        }\n    }\n    while (i <= m)\n\t{\n\t\tb[k++] = s[i++];\n\t}\n    while (j <= r)\n\t{\n\t\tb[k++] = s[j++];\n\t}\n    for (int i = l; i <= r; i++)\n    {\n        s[i] = b[i];\n    }\n}\n \nsigned main()\n{\n    int n = read();\n    for (int i = 1; i <= n; i++)\n    {\n    \ta[i] = read();\n        s[i] = s[i - 1] + a[i];\n    }\n    int kly = s[n];\n    gsort(1, n);\n    if (s[n] == kly)\n    {\n    \tprintf(\"%lld\\n\", sum);\n\t}\n\telse\n\t{\n\t\tprintf(\"-1\\n\");\n\t}\n    return 0;\n}\n  \t \t    \t\t   \t\t\t   \t\t  \t\t\t  \t\t"
}