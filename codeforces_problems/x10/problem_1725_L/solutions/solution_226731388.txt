{
    "id": 226731388,
    "contestId": 1725,
    "creationTimeSeconds": 1696507422,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1725,
        "index": "L",
        "name": "Lemper Cooking Competition",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 1725,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662298500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 4812800,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\ninline int read(){int x=0,f=1;char ch=getchar(); while(ch<'0'||\nch>'9'){if(ch=='-')f=-1;ch=getchar();}while(ch>='0'&&ch<='9'){\nx=(x<<1)+(x<<3)+(ch^48);ch=getchar();}return x*f;}\n#define Z(x) (x)*(x)\n#define pb push_back\n//mt19937 rand(time(0));\n//mt19937_64 rand(time(0));\n//srand(time(0));\n#define N 100010\n//#define M\n//#define mo\nint n, m, i, j, k, T;\nint cnt[N<<2], ans, mx, c[N], s[N]; \n\nvoid add(int x) {\n\tx=-x+N; \n\twhile(x<3*N) cnt[x]++, x+=x&-x; \n}\n\nint que(int x) {\n\tx=-x+N; int ans=0;  \n\twhile(x) ans+=cnt[x], x-=x&-x; \n\treturn ans; \n}\n\nsigned main()\n{\n//\tfreopen(\"in.txt\", \"r\", stdin);\n//\tfreopen(\"out.txt\", \"w\", stdout);\n//\tT=read();\n//\twhile(T--) {\n//\n//\t}\n\tn=read(); \n\tfor(i=1; i<=n; ++i) s[i]=read(); \n\tpartial_sum(s+1, s+n+1, s+1); \n\tmemcpy(c, s, sizeof(s)); \n\tsort(c+1, c+n+1); \n\tfor(i=1; i<=n; ++i) s[i]=lower_bound(c+1, c+n+1, s[i])-c; \n\tif(c[1]<0) return printf(\"-1\"), 0; \n\tmx=lower_bound(c+1, c+n+1, c[n])-c; \n\tfor(i=1; i<=n; ++i) {\n\t\tans+=que(s[i]+1); \n\t\tadd(s[i]); \n\t}\n\tif(mx!=s[n]) return printf(\"-1\"), 0; \n\tprintf(\"%lld\", ans); \n\treturn 0;\n}\n\t  \t\t\t    \t\t\t\t\t\t \t       \t\t\t\t \t"
}