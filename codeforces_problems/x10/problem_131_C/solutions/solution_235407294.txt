{
    "id": 235407294,
    "contestId": 131,
    "creationTimeSeconds": 1701531837,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 131,
        "index": "C",
        "name": "The World is a Theatre",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1400,
        "tags": [
            "combinatorics",
            "math"
        ]
    },
    "author": {
        "contestId": 131,
        "members": [
            {
                "handle": "Tyler-durde"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1322233200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 16076800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n\r\n#define ll long long\r\n#define pii pair<int,int>\r\n#define pll pair<ll,ll>\r\n#define pb push_back\r\n#define  el '\\n'\r\n#define all(x) x.begin(),x.end()\r\nll mod = 1e9+7;\r\nconst ll INF = 0x3f3f3f3f3f3f3f3f;\r\n//const int INF = 1e9;\r\nconst int N = 1e6;\r\n\r\nbool cmp(const pair<int, int>& a,const pair<int, int>& b){\r\n    if(a.first == b.first)\r\n        return a.second > b.second;\r\n\r\n    return a.first < b.first;\r\n}\r\n\r\n\r\n//bool cmp(const string& a,const string& b){return a+b < b+a;}\r\n\r\n\r\n\r\n\r\n// knight movse\r\n//int dx[] = {-2, -2, 2, 2, -1, -1, 1, 1};\r\n//int dy[] = {-1, 1, 1, -1, -2, 2, -2, 2};\r\n\r\nint dx[] = {1, -1, 0, 0, -1, -1, 1, 1};\r\nint dy[] = {0, 0, 1, -1, -1, 1, 1, -1};\r\n\r\nconst char dc[4]={'U','R','D','L'};\r\n#define HereWeGo() ios::sync_with_stdio(0),cin.tie(nullptr),cout.tie(nullptr);\r\n\r\nll fact[N+1];\r\nll inv[N+1];\r\n\r\nll gcd_Eculidean(ll a, ll b, ll& x, ll& y) {\r\n    if (b == 0) {\r\n        x = 1;\r\n        y = 0;\r\n        return a;\r\n    }\r\n    ll x1, y1;\r\n    ll d = gcd_Eculidean(b, a % b, x1, y1);\r\n    x = y1;\r\n    y = x1 - y1 * (a / b);\r\n    return d;\r\n}\r\n\r\nll mod_inv(ll c, ll m) {\r\n\r\n    // a / b and mod = m\r\n    // a * modinverse(b) % m\r\n\r\n    // here is c represents b\r\n    ll x,y;\r\n    ll g = gcd_Eculidean(c,m,x,y);\r\n    if(g != 1){\r\n        return -1;\r\n        // no mod inverse\r\n    }\r\n    return (x + m) % m; // to handle negative\r\n}\r\n\r\nll fastpower(int b, int p,int mod){\r\n    if(p == 1)\r\n        return b;\r\n    ll halfpower = fastpower(b,p/2,mod);\r\n    ll ret = (halfpower*halfpower) % mod;\r\n    if(p%2 == 1){\r\n        ret = (ret * b) % mod;\r\n    }\r\n    return ret % mod;\r\n}\r\n\r\nll ncr(int n,int r){\r\n    return fact[n]* fastpower(1LL*fact[n-r]*fact[r] % mod,mod-2,mod)%mod;\r\n}\r\n\r\nvoid RunCase() {\r\n\r\n    int n,m,t;\r\n    cin >> n >> m >> t;\r\n\r\n    fact[0] = 1;\r\n    for (int i = 1; i <= 1000 ; ++i) {\r\n        fact[i] = 1LL*i*fact[i-1]%mod;\r\n    }\r\n\r\n    ll res = 0;\r\n    for (int i = 4; i <= n ; ++i) {\r\n        if(t-i <= m && t-i >= 1){\r\n            res += (ncr(n,i)*ncr(m,t-i));\r\n//            res %= mod;\r\n        }\r\n    }\r\n    cout << res << el;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nint main(){\r\n    HereWeGo();\r\n    //    freopen(\"moocast.in\", \"r\", stdin);\r\n    //    freopen(\"moocast.out\", \"w\", stdout);\r\n    int t = 1;\r\n//    cin >> t;\r\n\r\n//    getline(cin , s);\r\n    for (int i = 0; i < t; ++i)\r\n    {\r\n        //        cout<<\"Case #\"<<i+1<<\": \";\r\n        RunCase();\r\n    }\r\n    return 0;\r\n}"
}