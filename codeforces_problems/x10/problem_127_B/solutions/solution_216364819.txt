{
    "id": 216364819,
    "contestId": 127,
    "creationTimeSeconds": 1690662047,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 127,
        "index": "B",
        "name": "Canvas Frames",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 127,
        "members": [
            {
                "handle": "0x81"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1320858000
    },
    "programmingLanguage": "Ruby 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 93,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 409600,
    "source": "def ga = gets.split.map!(&:to_i)\ndef gi = gets.to_i\ndef giga = [gi, ga]\ndef gs = gets.strip\ndef gss = gs.split\ndef o(x) = puts(x)\ndef pa(a, d = ' ') = puts(a * d)\ndef yn(p) = p ? 'YES' : 'NO'\ndef ync(p) = p ? 'Yes' : 'No'\ndef hz = Hash.new(0)\ndef rqr(*a) = a.each { require _1 }\nclass Set def z = size end\nclass Array\n    def s!(...) = sort!(...)\n    def r! = reverse!\n    def f = first\n    def l = last\n    def sh = shift\n    def j(...) = join(...)\n    def pc = pack('c*')\n    def psum!(s = 0) = map! { s += _1 }\n    def z = size\nend\nmodule Enumerable\n    def e(...) = each(...)\n    def ei(...) = each_index(...)\n    def re(...) = reverse_each(...)\n    def ec(...) = each_cons(...)\n    def wo(...) = with_object(...)\n    def wi(...) = with_index(...)\n    def ewi(...) = each_with_index(...)\n    def ewo(...) = each_with_object(...)\nend\nclass String\n    def i(...) = to_i(...)\n    def b = bytes\n    def r = reverse\n    def z = size\nend\nclass Numeric\n    def f = to_f\n    def i = to_i\n    def s(...) = to_s(...)\n    def sqrt = Math.sqrt(self)\n    def isqrt = Integer.sqrt(self)\nend\nclass Integer\n    def p = pred\n    def n = succ\n    def t(...) = times(...)\nend\nclass Hash\n    def ek(...) = each_key(...)\n    def ev(...) = each_value(...)\n    def kmin = ek.min\n    def kmax = ek.max\n    def vmin = ev.min\n    def vmax = ev.max\n    def z = size\nend\ndef fio(a = 'input.txt', b = 'output.txt')\n    $stdin = File.open a, 'rb'\n    $stdout = File.open b, 'wb'\nend\nrqr 'set', 'prime'\nRC = /(.)\\1*/\n\n################################################################\n#                                                              #\n#              https://github.com/alantudyk/Stop               #\n#                                                              #\n################################################################\n\no giga.l.tally.ev.map { _1 / 2 } .sum / 2\n\n################################################################\n#                                                              #\n#              https://github.com/alantudyk/Stop               #\n#                                                              #\n################################################################\n\n"
}