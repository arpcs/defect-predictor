{
    "id": 153779352,
    "contestId": 744,
    "creationTimeSeconds": 1650091182,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 744,
        "index": "D",
        "name": "Hongcow Draws a Circle",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3200,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 744,
        "members": [
            {
                "handle": "gabrielle.candano"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1481992500
    },
    "programmingLanguage": "Python 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "def circle(b, c, d):\n    temp = c[0]**2 + c[1]**2\n    bc = (b[0]**2 + b[1]**2 - temp) / 2\n    cd = (temp - d[0]**2 - d[1]**2) / 2\n    det = (b[0] - c[0]) * (c[1] - d[1]) - (c[0] - d[0]) * (b[1] - c[1])\n\n    if abs(det) < 1.0e-10:\n        return None\n\n    # Center of circle\n    cx = (bc*(c[1] - d[1]) - cd*(b[1] - c[1])) / det\n    cy = ((b[0] - c[0]) * cd - (c[0] - d[0]) * bc) / det\n    center=[cx, cy]\n    radius = ((cx - b[0])**2 + (cy - b[1])**2)**.5\n\n    return center, radius\n\ndef distance(x,y): \n    dist= (abs((x[0]-y[0])**2 + (x[1]-y[1])**2))**.5\n    return dist\n\ndef equation(x,y): \n    a = (x[1] - y[1]) / (x[0] - y[0])\n    b = x[1] - a * x[0]\n    return a, b\n\ninitial = input()\nx = initial.split(\" \")\ni = 0\nred =[]\nblue =[]\n\nwhile i<int(x[0]): \n    y = input()\n    z = y.split(\" \")\n    red.append([int(z[0]), int(z[1])])\n    i+=1\n    \ni = 0 \nwhile i<int(x[1]): \n    y = input()\n    z=y.split(\" \")\n    blue.append([int(z[0]), int(z[1])])\n    i+=1\n\n\npts = red + blue\n\nmax_r = 0\n\nfor i in blue: \n    for j in blue: \n        if i is j: \n            break\n        \n        elif i[0] != j[0]: \n            slope, intercept= equation(i, j)\n            blue_sign = [p[1]-slope*p[0]+intercept for p in blue]\n            sign = [x>=0 for x in blue_sign]\n            if sum(sign) == len(blue): \n                for q in red: \n                    if (q[1]-slope*q[0]+intercept)<= 0: \n                        max_r=-1\n            if sum(sign) == len(blue): \n                for q in red: \n                    if (q[1]-slope*q[0]+intercept)>= 0: \n                        max_r=-1 \n        \n        else: \n            blue_sign = [p[0]-i[0] for p in blue]\n            sign = [x>=0 for x in blue_sign]\n            if sum(sign) == len(blue): \n                for q in red: \n                    if q[0]-i[0]<= 0: \n                        max_r=-1\n            if sum(sign) == len(blue): \n                for q in red: \n                    if q[0]-i[0]>= 0: \n                        max_r=-1\n        \nif max_r == 0:\n    for i in pts: \n        for j in pts: \n            for k in pts:\n                if circle(i,j,k) is None: \n                    break\n                else:\n                    center, radius = circle(i,j,k)\n                    z=0\n                    for m in blue:\n                        if float(distance(m, center))< float(radius): \n                            z=1\n                    if int(z)==int(0) and radius >= max_r:\n                        for l in red: \n                            if float(distance(l, center))<= float(radius): \n                                max_r = radius \n\nprint(max_r)"
}