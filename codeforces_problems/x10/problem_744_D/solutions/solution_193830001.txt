{
    "id": 193830001,
    "contestId": 744,
    "creationTimeSeconds": 1676553119,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 744,
        "index": "D",
        "name": "Hongcow Draws a Circle",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3200,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 744,
        "members": [
            {
                "handle": "Tony2_CF"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1481992500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "// LUOGU_RID: 102271841\n#include <bits/stdc++.h>\r\n#define endl '\\n'\r\n#define ld long double\r\nusing namespace std;\r\nconst int N = 1005;\r\nconst ld eps = 1e-8, pi = acos(-1);\r\nint n, m, p[N];\r\nld ans;\r\nstruct point{\r\n\tld x, y;\r\n\tpoint() : x(0), y(0) {}\r\n\tpoint(ld x, ld y) : x(x), y(y) {}\r\n\tfriend point operator + (const point &a, const point &b){\r\n\t\treturn point(a.x + b.x, a.y + b.y);\r\n\t}\r\n\tfriend point operator - (const point &a, const point &b){\r\n\t\treturn point(a.x - b.x, a.y - b.y);\r\n\t}\r\n\tfriend ld operator * (const point &a, const point &b){\r\n\t\treturn a.x * b.y - a.y * b.x;\r\n\t}\r\n\tfriend point operator * (const point &a, const ld &k){\r\n\t\treturn point(a.x * k, a.y * k);\r\n\t}\r\n\tfriend point operator / (const point &a, const ld &k){\r\n\t\treturn point(a.x / k, a.y / k);\r\n\t}\r\n\tld angle() const{\r\n\t\treturn atan2(y, x);\r\n\t}\r\n\tld abs() const{\r\n\t\treturn sqrt(x * x + y * y);\r\n\t}\r\n}red[N], blue[N];\r\npoint turn(point p, ld _cos, ld _sin){\r\n\treturn point(p.x * _cos - p.y * _sin, p.x * _sin + p.y * _cos);\r\n}\r\nld mns(ld x, ld y){\r\n\treturn x - y < 0 ? x - y + 2 * pi : x - y;\r\n}\r\nvector<pair<ld, ld> > calc(point p, vector<point> vec, ld len){\r\n\tvector<pair<ld, int> > tmp;\r\n\tvector<pair<ld, ld> > res;\r\n\tint cnt = 0;\r\n\tfor (point p2 : vec){\r\n\t\tld a = (p2 - p).abs() / 2, c = len;\r\n\t\tif (a >= c)\r\n\t\t\tcontinue;\r\n\t\tld b = sqrt(max(c * c - a * a, (ld)0));\r\n\t\tld a1 = turn(p2 - p, a, -b).angle(), a2 = turn(p2 - p, a, b).angle();\r\n\t\ta1 += eps;\r\n\t\tif (a1 > pi) a1 -= 2 * pi;\r\n\t\ta2 -= eps;\r\n\t\tif (a2 < -pi) a2 += 2 * pi;\r\n\t\ttmp.emplace_back(a1, 1);\r\n\t\ttmp.emplace_back(a2, -1);\r\n\t\tif (a1 > a2)\r\n\t\t\tcnt++;\r\n\t}\r\n\tif (cnt){\r\n\t\ttmp.emplace_back(-pi, cnt);\r\n\t\ttmp.emplace_back(pi, -cnt);\r\n\t}\r\n\tsort(tmp.begin(), tmp.end());\r\n\tcnt = 0;\r\n\tfor (int i = 0; i < (int)tmp.size() - 1; i++){\r\n\t\tcnt += tmp[i].second;\r\n\t\tld l = tmp[i].first, r = tmp[i + 1].first;\r\n\t\tif (r - l > eps && cnt)\r\n\t\t\tres.emplace_back(l, r);\r\n\t}\r\n\treturn res;\r\n}\r\nint main(){\r\n\tsrand(time(0));\r\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n//\tfreopen(\"in.txt\", \"r\", stdin);\r\n//\tfreopen(\"out.txt\", \"w\", stdout);\r\n\tcin >> n >> m;\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tcin >> red[i].x >> red[i].y;\r\n\tfor (int i = 1; i <= m; i++)\r\n\t\tcin >> blue[i].x >> blue[i].y;\r\n\tld dw = 0;\r\n\t{\r\n\t\tfor (int i = 1; i <= n; i++)\r\n\t\t\tp[i] = i;\r\n\t\trandom_shuffle(p + 1, p + 1 + n);\r\n\t\tvector<point> vec;\r\n\t\tfor (int i = 1; i <= m; i++)\r\n\t\t\tvec.push_back(blue[i]);\r\n\t\tfor (int i = 1; i <= n; i++){\r\n\t\t\tint j = p[i];\r\n\t\t\tld l = dw, r = 1e9, mid;\r\n\t\t\twhile (r - l > eps){\r\n\t\t\t\tmid = (l + r) / 2;\r\n\t\t\t\tvector<pair<ld, ld> > res = calc(red[j], vec, mid);\r\n\t\t\t\tbool ok = 0;\r\n\t\t\t\tfor (int k = 0; k < (int)res.size(); k++)\r\n\t\t\t\t\tif (mns(res[(k + 1) % ((int)res.size())].first, res[k].second) > eps){\r\n\t\t\t\t\t\tok = 1;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\tif (ok) dw = l = mid;\r\n\t\t\t\telse r = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (dw > 1e9 - 1){\r\n\t\tcout << -1;\r\n\t\treturn 0;\r\n\t}\r\n\t{\r\n\t\tfor (int i = 1; i <= m; i++)\r\n\t\t\tp[i] = i;\r\n\t\trandom_shuffle(p + 1, p + 1 + m);\r\n\t\tvector<point> vec1, vec2;\r\n\t\tfor (int i = 1; i <= n; i++)\r\n\t\t\tvec1.push_back(red[i]);\r\n\t\tfor (int i = 1; i <= m; i++){\r\n\t\t\tvec2.clear();\r\n\t\t\tint j = p[i];\r\n\t\t\tfor (int k = 1; k <= m; k++)\r\n\t\t\t\tif (k != j)\r\n\t\t\t\t\tvec2.push_back(blue[k]);\r\n\t\t\tld l = dw, r = 1e9, mid;\r\n\t\t\twhile (r - l > eps){\r\n\t\t\t\tmid = (l + r) / 2;\r\n\t\t\t\tvector<pair<ld, ld> > res1 = calc(blue[j], vec1, mid), res2 = calc(blue[j], vec2, mid);\r\n\t\t\t\tif (res1.empty())\r\n\t\t\t\t\tres1.emplace_back(-pi, pi);\r\n\t\t\t\telse{\r\n\t\t\t\t\tvector<pair<ld, ld> > tmp = res1;\r\n\t\t\t\t\tres1.clear();\r\n\t\t\t\t\tif (tmp[0].first + pi > eps)\r\n\t\t\t\t\t\tres1.emplace_back(-pi, tmp[0].first);\r\n\t\t\t\t\tfor (int i = 0; i < (int)tmp.size() - 1; i++)\r\n\t\t\t\t\t\tif (tmp[i + 1].first - tmp[i].second > eps)\r\n\t\t\t\t\t\t\tres1.emplace_back(tmp[i].second, tmp[i + 1].first);\r\n\t\t\t\t\tif (pi - tmp.back().second > eps)\r\n\t\t\t\t\t\tres1.emplace_back(tmp.back().second, pi);\r\n\t\t\t\t}\r\n\t\t\t\tvector<pair<ld, int> > vec;\r\n\t\t\t\tfor (pair<ld, ld> p : res1){\r\n\t\t\t\t\tvec.emplace_back(p.first, 1);\r\n\t\t\t\t\tvec.emplace_back(p.second, -1);\r\n\t\t\t\t}\r\n\t\t\t\tfor (pair<ld, ld> p : res2){\r\n\t\t\t\t\tvec.emplace_back(p.first, 1);\r\n\t\t\t\t\tvec.emplace_back(p.second, -1);\r\n\t\t\t\t}\r\n\t\t\t\tsort(vec.begin(), vec.end());\r\n\t\t\t\tint cnt = 0;\r\n\t\t\t\tld sum = 0;\r\n\t\t\t\tfor (int i = 0; i < (int)vec.size() - 1; i++){\r\n\t\t\t\t\tcnt += vec[i].second;\r\n\t\t\t\t\tif (cnt > 0)\r\n\t\t\t\t\t\tsum += vec[i + 1].first - vec[i].first;\r\n\t\t\t\t}\r\n\t\t\t\tif (sum + eps < 2 * pi) dw = l = mid;\r\n\t\t\t\telse r = mid;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tcout << fixed << setprecision(8) << dw;\r\n\treturn 0;\r\n}"
}