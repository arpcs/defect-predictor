{
    "id": 163936020,
    "contestId": 744,
    "creationTimeSeconds": 1657645917,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 744,
        "index": "D",
        "name": "Hongcow Draws a Circle",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3200,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 744,
        "members": [
            {
                "handle": "bkifhr7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1481992500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <cmath>\n#define pi acos(-1.0)\nusing namespace std;\ntypedef long double db;\nconst db eps=1e-12;\nconst int maxn=1010;\nstruct point\n{\n    db x,y;\n    point() {}\n    point(db a,db b) {x=a,y=b;}\n    point operator + (const point &a) const {return point(x+a.x,y+a.y);}\n    point operator - (const point &a) const {return point(x-a.x,y-a.y);}\n    db operator * (const point &a) const {return x*a.y-y*a.x;}\n    point operator * (const db &a) const {return point(x*a,y*a);}\n}p[maxn<<1];\nstruct line\n{\n    point p,v;\n    line() {}\n    line(point a,point b) {p=a,v=b;}\n};\nstruct node\n{\n    db x;\n    int k;\n    node() {}\n    node(double a,int b) {x=a,k=b;}\n}q[maxn<<3];\nint n,m,tot;\ninline db dis(point a,point b)\n{\n    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\ndb getrange(point a,point b,db R)\n{\n    db d=dis(a,b)/2;\n    return acos(d/R);\n}\nbool cmp(const node &a,const node &b) {return a.x<b.x;}\ninline bool solve(int x,db R)\n{\n    int i;\n    tot=0;\n    if(x<=n) q[++tot]=node(-pi,1),q[++tot]=node(pi,-1);\n    else\n    {\n        for(i=1;i<=n;i++)\n        {\n            if(dis(p[i],p[x])>R+R-eps)   continue;\n            db a=getrange(p[x],p[i],R),b=atan2(p[i].y-p[x].y,p[i].x-p[x].x);\n            db c=b-a,d=b+a;\n            if(c<-pi)    c+=2*pi;\n            if(d>pi) d-=2*pi;\n            if(c<d)  q[++tot]=node(c,1),q[++tot]=node(d,-1);\n            else    q[++tot]=node(-pi,1),q[++tot]=node(d,-1),q[++tot]=node(c,1),q[++tot]=node(pi,-1);\n        }\n    }\n    for(i=n+1;i<=n+m;i++)\n    {\n        if(dis(p[i],p[x])>R+R-eps)   continue;\n        db a=getrange(p[x],p[i],R),b=atan2(p[i].y-p[x].y,p[i].x-p[x].x);\n        db c=b-a,d=b+a;\n        if(c<-pi)    c+=2*pi;\n        if(d>pi) d-=2*pi;\n        if(c<d)  q[++tot]=node(c,-10000),q[++tot]=node(d,10000);\n        else    q[++tot]=node(-pi,-10000),q[++tot]=node(d,10000),q[++tot]=node(c,-10000),q[++tot]=node(pi,10000);\n    }\n    sort(q+1,q+tot+1,cmp);\n    int tmp=0;\n    for(i=1;i<=tot;i++)\n    {\n        if(tmp>0&&i!=1&&q[i].x>q[i-1].x+eps)  return 1;\n        tmp+=q[i].k;\n    }\n    return 0;\n}\ninline bool check(db mid)\n{\n    for(int i=1;i<=n+m;i++)  if(solve(i,mid))    return 1;\n    return 0;\n}\ninline int rd()\n{\n    int ret=0,f=1;  char gc=getchar();\n    while(gc<'0'||gc>'9') {if(gc=='-')    f=-f;   gc=getchar();}\n    while(gc>='0'&&gc<='9')   ret=ret*10+(gc^'0'),gc=getchar();\n    return ret*f;\n}\nint main()\n{\n    n=rd(),m=rd();\n    if(m==1)\n    {\n        puts(\"-1\");\n        return 0;\n    }\n    int i;\n    for(i=1;i<=n;i++)    p[i].x=rd(),p[i].y=rd();\n    random_shuffle(p+1,p+n+1);\n    for(i=1;i<=m;i++)    p[i+n].x=rd(),p[i+n].y=rd();\n    random_shuffle(p+n+1,p+m+1);\n    db l=0,r,mid;\n    For (i = 1; i <= n + m; i ++) IF (Solve (i, l)) // God optimization\n    {\n        r=1e9;\n        while(r-l>1e-5)\n        {\n            mid=(l+r)/2;\n            if(solve(i,mid))    l=mid;\n            else    r=mid;\n        }\n    }\n    if(l>1e9-1)  puts(\"-1\");\n    else    printf(\"%.18Lf\",l);\n    return 0;\n}\n\n\t  \t \t \t\t  \t  \t\t\t \t\t  \t\t \t  \t"
}