{
    "id": 210630564,
    "contestId": 744,
    "creationTimeSeconds": 1687420977,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 744,
        "index": "D",
        "name": "Hongcow Draws a Circle",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3200,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 744,
        "members": [
            {
                "handle": "baluteshih"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1481992500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 182,
    "timeConsumedMillis": 1247,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef pair<int, int> pii;\r\ntypedef pair<ll, ll> pll;\r\n#define X first\r\n#define Y second\r\n#define SZ(a) ((int)a.size())\r\n#define ALL(v) v.begin(), v.end()\r\n#define pb push_back\r\n\r\nstruct fraction {\r\n    __int128 n, d;\r\n    fraction(const __int128 &_n=0, const __int128 &_d=1): n(_n), d(_d) {\r\n        if (d < 0) n = -n, d = -d;\r\n    }\r\n    fraction operator-() const \r\n    { return fraction(-n, d); }\r\n    fraction operator+(const fraction &b) const \r\n    { return fraction(n * b.d + b.n * d, d * b.d); }\r\n    fraction operator-(const fraction &b) const \r\n    { return fraction(n * b.d - b.n * d, d * b.d); }\r\n    fraction operator*(const fraction &b) const\r\n    { return fraction(n * b.n, d * b.d); }\r\n    fraction operator/(const fraction &b) const \r\n    { return fraction(n * b.d, d * b.n); }\r\n    double get_real() const {\r\n        return (double)n / d;\r\n    }\r\n    bool operator<(const fraction &b) const {\r\n        return (double)n * b.d < (double)b.n * d;\r\n    }\r\n    bool operator==(const fraction &b) const {\r\n        return n == b.n && d == b.d;\r\n    }\r\n};\r\n\r\ntypedef pair<fraction, fraction> pt;\r\n\r\npt operator-(const pt &a, const pt &b) { return pt(a.X - b.X, a.Y - b.Y); }\r\npt operator/(const pt &a, const fraction &b) { return pt(a.X / b, a.Y / b); }\r\nfraction cross(const pt &a, const pt &b) { return a.X * b.Y - a.Y * b.X; }\r\nfraction dot(const pt &a, const pt &b) { return a.X * b.X + a.Y * b.Y; }\r\nfraction abs2(const pt &a) { return dot(a, a); }\r\ndouble realcross(const pt &a, const pt &b) { \r\n    double p = (a.X * b.Y).get_real(), q = (a.Y * b.X).get_real();\r\n    return p - q;\r\n}\r\ndouble realabs2(const pt &a) {\r\n    double x = a.X.get_real(), y = a.Y.get_real();\r\n    return x * x + y * y;\r\n}\r\nint cmpcross(const pt &a, const pt &b) { \r\n    fraction p = a.X * b.Y, q = a.Y * b.X; \r\n    return p == q ? 0 : q < p ? 1 : -1;\r\n}\r\nint ori(const pt &a, const pt &b, const pt &c) { return cmpcross(b - a, c - a); }\r\nbool collin(const pt &a, const pt &b, const pt &c) { return cmpcross(b - a, c - a) == 0; }\r\n\r\nvector<pt> hull(vector<pt> dots) { // n=1 => ans = {}\r\n    sort(dots.begin(), dots.end());\r\n    vector<pt> ans(1, dots[0]);\r\n    for (int ct = 0; ct < 2; ++ct, reverse(ALL(dots)))\r\n        for (int i = 1, t = SZ(ans); i < SZ(dots); ans.pb(dots[i++]))\r\n            while (SZ(ans) > t && ori(ans[SZ(ans) - 2], ans.back(), dots[i]) <= 0) \r\n                ans.pop_back();\r\n    ans.pop_back();\r\n    return ans;\r\n}\r\n\r\nvoid inf() {\r\n    cout << \"-1\\n\";\r\n    exit(0);\r\n}\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0), cin.tie(0);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<pt> red, blue;\r\n    for (int i = 1; i <= n; ++i) {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        red.pb(pt(x, y));\r\n    }\r\n    for (int i = 1; i <= m; ++i) {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        blue.pb(pt(x, y));\r\n    }\r\n    if (m == 1) inf();\r\n    vector<pt> blue_hull = hull(blue);\r\n    for (auto r : red)\r\n        for (int i = 0; i < SZ(blue_hull); ++i)\r\n            if (ori(blue_hull[i], blue_hull[(i + 1) % SZ(blue_hull)], r) <= 0)\r\n                inf();\r\n    double ans = 0;\r\n    for (int i = 0; i < m; ++i) {\r\n        vector<pt> cur_blue(1, pt(0, 0)), cur_red;\r\n        for (int j = 0; j < m; ++j)\r\n            if (i != j)\r\n                cur_blue.pb((blue[j] - blue[i]) / abs2(blue[j] - blue[i]));\r\n        hull(cur_blue).swap(cur_blue);\r\n        for (int j = 0; j < n; ++j)\r\n            cur_red.pb((red[j] - blue[i]) / abs2(red[j] - blue[i]));\r\n        for (int j = 0; j < SZ(cur_blue); ++j) {\r\n            int flag = 0;\r\n            pt a = cur_blue[j], b = cur_blue[(j + 1) % SZ(cur_blue)];\r\n            for (auto r : cur_red)\r\n                if (ori(a, b, r) <= 0)\r\n                    flag = 1;\r\n            if (flag == 1) {\r\n                if (collin(a, b, pt(0, 0))) inf();\r\n                ans = max(ans, sqrt(realabs2(a - b)) / abs(realcross(b - a, pt(0, 0) - a)));\r\n            }\r\n        }\r\n        for (auto r : cur_red)\r\n            for (int j = 0; j < SZ(cur_blue); ++j) {\r\n                pt a = cur_blue[j];\r\n                if (ori(a, r, cur_blue[(j + 1) % SZ(cur_blue)]) * ori(a, r, cur_blue[(j + SZ(cur_blue) - 1) % SZ(cur_blue)]) >= 0) {\r\n                    if (collin(a, r, pt(0, 0))) inf();\r\n                    ans = max(ans, sqrt(realabs2(a - r)) / abs(realcross(r - a, pt(0, 0) - a)));\r\n                }\r\n            }\r\n    }\r\n    cout << fixed << setprecision(20) << ans / 2 << \"\\n\";\r\n}"
}