{
    "id": 221502259,
    "contestId": 107,
    "creationTimeSeconds": 1693606309,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 107,
        "index": "C",
        "name": "Arrangement",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2400,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 107,
        "members": [
            {
                "handle": "TheRubbish"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1314111600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint32_t main()\r\n{\r\n    int n, y, m;\r\n    cin >> n >> y >> m;\r\n    vector < int > more[n], less[n];\r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        x--;y--;\r\n        less[x].push_back(y);\r\n        more[y].push_back(x);\r\n    }\r\n    y -= 2000;\r\n    int ans[n];\r\n    bool p[n + 1];\r\n    for (int i = 1; i <= n; i++)\r\n        p[i] = 0;\r\n    int dp[(1<<n)];\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        ans[i] = 0;\r\n        for (int j = 1; j <= n; j++)\r\n        {\r\n            if (p[j] == 1) continue;\r\n            ans[i] = j;\r\n            p[j] = 1;\r\n            vector < int > v;\r\n            for (int x = 1; x <= n; x++)\r\n                if (p[x] == 0) v.push_back(x);\r\n            for (int mask = 0; mask < (1<<n); mask++)\r\n                dp[mask] = 0;\r\n            dp[(1<<(i + 1)) - 1] = 1;\r\n            for (int mask = (1<<(i + 1)); mask < (1<<n); mask++)\r\n            {\r\n                if ((mask & ((1<<(i + 1)) - 1)) != (1<<(i + 1)) - 1) continue;\r\n                int pos = __builtin_popcount(mask) - i - 2;\r\n                int X = v[pos];\r\n                for (int bt = i + 1; bt < n; bt++)\r\n                {\r\n                    if (((1<<bt) & mask) == 0) continue;\r\n                    bool ok = 1;\r\n                    for (auto to: less[bt])\r\n                        if (((1<<to) & mask) > 0 && (to > i || ans[to] < X)) ok = 0;\r\n                    for (auto to: more[bt])\r\n                        if (((1<<to) & mask) > 0 && to <= i && ans[to] > X) ok = 0;\r\n                    if (ok == 1) dp[mask] += dp[(mask ^ (1<<bt))];\r\n                }\r\n            }\r\n            if (dp[(1<<n) - 1] >= y)\r\n            {\r\n                ans[i] = j;\r\n                break;\r\n            }\r\n            y -= dp[(1<<n) - 1];\r\n            p[j] = 0;\r\n            ans[i] = 0;\r\n        }\r\n        if (ans[i] == 0)\r\n        {\r\n            cout << \"The times have changed\";\r\n            return 0;\r\n        }\r\n    }\r\n    for (int i = 0; i < n; i++)\r\n        cout << ans[i] << ' ';\r\n    return 0;\r\n}\r\n"
}