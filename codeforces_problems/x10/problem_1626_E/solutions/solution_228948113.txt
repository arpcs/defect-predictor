{
    "id": 228948113,
    "contestId": 1626,
    "creationTimeSeconds": 1697816648,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1626,
        "index": "E",
        "name": "Black and White Tree",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "dfs and similar",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1626,
        "members": [
            {
                "handle": "wish-nu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642343700
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 2183,
    "memoryConsumedBytes": 311705600,
    "source": "def InputList(Dtype=int): return list(map(Dtype, input().split()))\ndef InputString(): return input().decode().strip() \nfrom collections import deque\nimport sys\ninputDefault = sys.stdin.readline\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(10**4)\nM = 998244353\n\ndef solve():\n\t# print(f\"======================\")\n\tN = int(input())\n\tcolor = [0]+InputList()\n\tedges = [InputList() for _ in range(N-1)]\t\n\tAdj = [[] for _ in range(N+1)]\n\tfor u, v in edges:\n\t\tAdj[u].append(v)\n\t\tAdj[v].append(u)\n\n\tdef getValidEdges():\n\t\tparent = [0]*(N+1)\n\t\tblackCnt = [0]*(N+1)\n\t\tdef countBlack(u, p):\n\t\t\tparent[u] = p\n\t\t\tnBlackSub = 0\n\t\t\tif color[u] == 1: nBlackSub += 1\n\t\t\tfor v in Adj[u]:\n\t\t\t\tif v != p:\n\t\t\t\t\tnBlackSub += countBlack(v, u)\n\t\t\tblackCnt[u] = nBlackSub\n\t\t\treturn nBlackSub\n\t\tcountBlack(1, 0)\n\n\t\t# validAdj = [[] for _ in range(N+1)]\n\t\tValidEdges = []\n\t\tfor u in range(1, N+1):\n\t\t\tfor v in Adj[u]:\n\t\t\t\tif parent[v] == u:\n\t\t\t\t\tif (color[u] == 1) or (blackCnt[1] - blackCnt[v]) >= 2:\n\t\t\t\t\t\t# validAdj[u].append(v)\n\t\t\t\t\t\tValidEdges.append((u, v))\n\t\t\t\telse:\n\t\t\t\t\tif (color[u] == 1) or blackCnt[u] >= 2:\n\t\t\t\t\t\t# validAdj[u].append(v)\n\t\t\t\t\t\tValidEdges.append((u, v))\n\t\treturn ValidEdges\n\n\tValidEdges = getValidEdges()\n\n\t# dsu to find all components reachable from 1 through the valid edges\n\t\n\tparent = [i for i in range(N+1)]\n\n\tdef find(u):\n\t\tif parent[u] != u:\n\t\t\tif u == parent[parent[u]]: print('wtf')\n\t\t\tparent[u] = find(parent[u])\n\t\treturn parent[u]\n\t\n\tdef union(u,v):\n\t\tu = find(u)\n\t\tv = find(v)\n\t\tif u == v: return\n\t\tparent[v] = u\n\n\t# print(ValidEdges)\n\tfor u, v in ValidEdges:\n\t\tunion(u, v)\n\n\tfor i in range(1, N+1):\n\t\tif color[i] == 1:\n\t\t\tp = find(i)\n\t\t\tparent[i] = parent[p] = i\n\t\n\tfor i in range(1, N+1):\n\t\tprint(f\"{color[find(i)]}\", end=\" \")\n\tprint()\ntry:\n\tsolve()\nexcept Exception as e:\n\tprint(e)\n\n# ReturnMode = False\n\n# multiCase = False\n# t = int(input()) if multiCase else 1\n# for _ in range(t):\n# \tans = solve()\n# \tif ReturnMode: print(ans) if type(ans)!=list else print(*ans)"
}