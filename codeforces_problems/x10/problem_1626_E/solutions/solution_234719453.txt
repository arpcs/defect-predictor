{
    "id": 234719453,
    "contestId": 1626,
    "creationTimeSeconds": 1701163604,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1626,
        "index": "E",
        "name": "Black and White Tree",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "dfs and similar",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1626,
        "members": [
            {
                "handle": "wjwzbdx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642343700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 65,
    "timeConsumedMillis": 389,
    "memoryConsumedBytes": 32768000,
    "source": "#include <bits/stdc++.h>\r\n#define dug(x) cerr << \"\u6b7b\u4e86\u5427\u5c0f\u4e11\" << x << endl\r\n#define fir(a, b, c) for (int a = b; a < c; a++)\r\nusing namespace std;\r\nusing i64 = long long;\r\nusing two = array<int, 2>;\r\ntemplate <class T> bool chmax(T &a, T b)\r\n{\r\n    a > b ? (a = a) : (a = b);\r\n    return a == b;\r\n}\r\ntemplate <class T> bool chmin(T &a, T b)\r\n{\r\n    a > b ? (a = b) : (a = a);\r\n    return a == b;\r\n}\r\nconst int N = 3e5 + 10;\r\nvector<int> edge[N];\r\nint w[N];\r\ntwo dp[N]; // \u6709\u51e0\u4e2a\uff0c\u548c\u6700\u8fd1\u7684\u8ddd\u79bb\r\nint ans[N];\r\nint all = 0;\r\nvoid dfs(int u, int fa)\r\n{\r\n    // cout << u << endl;\r\n    dp[u] = {0, 0x3f3f3f3f};\r\n    for (auto c : edge[u])\r\n    {\r\n        if (c == fa)\r\n            continue;\r\n        dfs(c, u);\r\n        dp[u][0] += dp[c][0];\r\n        chmin(dp[u][1], dp[c][1] + 1);\r\n    }\r\n    if (w[u] == 1)\r\n    {\r\n        dp[u][0]++;\r\n        dp[u][1] = 0;\r\n        ans[u] = true;\r\n    }\r\n    else\r\n    {\r\n        for (auto c : edge[u])\r\n        {\r\n            if (c == fa)\r\n                continue;\r\n            if (dp[c][0] == 0)\r\n                continue;\r\n            else if (dp[c][0] == 1)\r\n            {\r\n                if (w[c] == 1)\r\n                    ans[u] = true;\r\n            }\r\n            else\r\n            {\r\n                if (ans[c] == true)\r\n                    ans[u] = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nvoid dfs1(int u, int fa)\r\n{\r\n    if (w[u] == 1)\r\n    {\r\n        for (auto c : edge[u])\r\n        {\r\n            if (c == fa)\r\n                continue;\r\n            ans[c] = true;\r\n            dfs1(c, u);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        for (auto c : edge[u])\r\n        {\r\n            if (c == fa)\r\n                continue;\r\n\r\n            int cnt = all - dp[c][0];\r\n            if (cnt == 1)\r\n            {\r\n                if (w[u])\r\n                    ans[c] = true;\r\n            }\r\n            else if (cnt > 1)\r\n            {\r\n                if (ans[u])\r\n                    ans[c] = true;\r\n            }\r\n            dfs1(c, u);\r\n        }\r\n    }\r\n}\r\nsigned main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout << setprecision(15) << fixed;\r\n    int n;\r\n    cin >> n;\r\n    for (int i = 0; i < n; i++)\r\n        cin >> w[i];\r\n    for (int i = 0; i < n; i++)\r\n        all += (w[i] == 1);\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        int a, b;\r\n        cin >> a >> b;\r\n        a--, b--;\r\n        edge[a].push_back(b);\r\n        edge[b].push_back(a);\r\n    }\r\n    dfs(0, -1);\r\n    // cout << ans[5] << endl;\r\n    int cnt = 0;\r\n    dfs1(0, -1);\r\n    for (int i = 0; i < n; i++)\r\n        cout << ans[i] << \" \";\r\n    return 0;\r\n}"
}