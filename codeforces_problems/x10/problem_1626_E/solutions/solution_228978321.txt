{
    "id": 228978321,
    "contestId": 1626,
    "creationTimeSeconds": 1697830626,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1626,
        "index": "E",
        "name": "Black and White Tree",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "dfs and similar",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1626,
        "members": [
            {
                "handle": "wish-nu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1642343700
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 65,
    "timeConsumedMillis": 1372,
    "memoryConsumedBytes": 339046400,
    "source": "def InputList(Dtype=int): return list(map(Dtype, input().split()))\ndef InputString(): return input().decode().strip() \nfrom collections import deque, defaultdict\nimport sys\ninputDefault = sys.stdin.readline\n# input = sys.stdin.buffer.readline\ninput = lambda: sys.stdin.readline().rstrip()\n \nM = 998244353\nsys.setrecursionlimit(10**5)\ndef solve():\n\t# print(f\"======================\")\n\tN = int(input())\n\tcolor = [0]+InputList()\n\tedges = [InputList() for _ in range(N-1)]\t\n\tAdj = [[] for _ in range(N+1)]\n\tfor u, v in edges:\n\t\tAdj[u].append(v)\n\t\tAdj[v].append(u)\n\n\tdef getValidEdges():\n\t\tparent = [0]*(N+1)\n\t\tblackCnt = [0]*(N+1)\n\n\t\t# tot = sum(color)\n\t\t# validAdj = [[] for _ in range(N+1)]\n\t\t# blacks = color[:]\n\t\tblackCnt = color[:]\n\t\tstack = [(-1, -1), (1, -1)]\n\t\twhile stack:\n\t\t\tu, par = stack.pop()\n\t\t\tif u >= 0:\n\t\t\t\tparent[u] = par\n\t\t\t\tfor v in Adj[u]:\n\t\t\t\t\tif v != par:\n\t\t\t\t\t\tstack.append((-v, u))\n\t\t\t\t\t\tstack.append((v, u))\n\t\t\telse:\n\t\t\t\tu = -u\n\t\t\t\tif par >= 0:\n\t\t\t\t\tblackCnt[par] += blackCnt[u]\n\t\t\t\t# for v in Adj[u]:\n\t\t\t\t# \tif v != par:\n\t\t\t\t# \t\tif color[v] or blacks[v] >= 2:\n\t\t\t\t# \t\t\tvalidAdj[v].append(u)\n\t\t\t\t\t\t\n\t\t\t\t# \t\tif color[u] or tot - blacks[v] >= 2:\n\t\t\t\t# \t\t\tvalidAdj[u].append(v)\n\t\t# return validAdj\n\t\t# def countBlack(u, p):\n\t\t# \tparent[u] = p\n\t\t# \tnBlackSub = 0\n\t\t# \tif color[u] == 1: nBlackSub += 1\n\t\t# \tfor v in Adj[u]:\n\t\t# \t\tif v != p:\n\t\t# \t\t\tnBlackSub += countBlack(v, u)\n\t\t# \tblackCnt[u] = nBlackSub\n\t\t# \treturn nBlackSub\n\t\t# countBlack(1, 0)\n\t\t# print(blackCnt)\n\t\tvalidAdj = [[] for _ in range(N+1)]\n\t\tfor u in range(1, N+1):\n\t\t\tfor v in Adj[u]:\n\t\t\t\tif parent[v] == u:\n\t\t\t\t\tif (color[u] == 1) or (blackCnt[1] - blackCnt[v]) >= 2:\n\t\t\t\t\t\tvalidAdj[u].append(v)\n\t\t\t\telse:\n\t\t\t\t\tif (color[u] == 1) or blackCnt[u] >= 2:\n\t\t\t\t\t\tvalidAdj[u].append(v)\n\t\treturn validAdj\n\n\treachable = [0]*(N+1)\n\tvalidAdj = getValidEdges()\n\n\tstack = []\n\tfor u in range(1, N+1):\n\t\tif color[u] == 1: stack.append(u)\n\n\twhile stack:\n\t\tu = stack.pop()\n\t\treachable[u] = 1\n\t\tfor v in validAdj[u]:\n\t\t\tif not reachable[v]: stack.append(v)\n\n\tfor i in range(1, N+1):\n\t\tprint(\"1\" if reachable[i] else \"0\", end=\" \")\n\tprint()\n\nsolve()\n# ReturnMode = False\n\n# multiCase = False\n# t = int(input()) if multiCase else 1\n# for _ in range(t):\n# \tans = solve()\n# \tif ReturnMode: print(ans) if type(ans)!=list else print(*ans)"
}