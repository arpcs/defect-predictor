{
    "id": 228742634,
    "contestId": 1613,
    "creationTimeSeconds": 1697685143,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1613,
        "index": "D",
        "name": "MEX Sequences",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "dp",
            "math"
        ]
    },
    "author": {
        "contestId": 1613,
        "members": [
            {
                "handle": "y_combinator"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1638369300
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 0,
    "source": "#include <array>\r\n#include <ios>\r\n#include <iostream>\r\n#include <utility>\r\n#include <vector>\r\n\r\ntemplate <typename NumericType>\r\nauto extendedGCD(NumericType m, NumericType n) {\r\n\r\n    auto a = NumericType(1);\r\n    auto a_inner = NumericType();\r\n    auto b = NumericType();\r\n    auto b_inner = NumericType(1);\r\n\r\n    while (n) {\r\n        const auto q = m / n;\r\n        a_inner = std::exchange(a, a_inner) - q * a_inner;\r\n        b_inner = std::exchange(b, b_inner) - q * b_inner;\r\n        n = std::exchange(m, n) - q * n;\r\n    }\r\n\r\n    return std::array<NumericType, 3>({m, a, b});\r\n\r\n}\r\n\r\ntemplate <int MODULUS_>\r\nclass ModularInteger {\r\n\r\nprivate:\r\n\r\n    static constexpr auto MODULUS = MODULUS_;\r\n\r\npublic:\r\n\r\n    int value = 0;\r\n\r\n    explicit ModularInteger() = default;\r\n\r\n    explicit ModularInteger(long long value) : value(value % MODULUS) {\r\n\r\n        if (this->value < 0) {\r\n            this->value += MODULUS;\r\n        }\r\n\r\n    }\r\n\r\n    auto operator-() const {\r\n\r\n        return ModularInteger(-value);\r\n\r\n    }\r\n\r\n    auto operator++() {\r\n\r\n        value = value < MODULUS - 1 ? value + 1 : 0;\r\n\r\n    }\r\n\r\n    auto operator--() {\r\n\r\n        value = value ? value - 1 : MODULUS - 1;\r\n\r\n    }\r\n\r\n    auto operator+=(ModularInteger other) {\r\n\r\n        if (other.value >= MODULUS - value) {\r\n            value -= MODULUS;\r\n        }\r\n\r\n        value += other.value;\r\n\r\n    }\r\n\r\n    auto operator-=(ModularInteger other) {\r\n\r\n        value -= other.value;\r\n\r\n        if (value < 0) {\r\n            value += MODULUS;\r\n        }\r\n\r\n    }\r\n\r\n    auto operator*=(ModularInteger other) {\r\n\r\n        value = static_cast<long long>(value) * other.value % MODULUS;\r\n\r\n    }\r\n\r\n    auto operator/=(ModularInteger other) {\r\n\r\n        *this *= ModularInteger(extendedGCD(other.value, MODULUS)[1]);\r\n\r\n    }\r\n\r\n    friend auto operator+(ModularInteger lhs, ModularInteger rhs) {\r\n\r\n        lhs += rhs;\r\n\r\n        return lhs;\r\n\r\n    }\r\n\r\n    friend auto operator-(ModularInteger lhs, ModularInteger rhs) {\r\n\r\n        lhs -= rhs;\r\n\r\n        return lhs;\r\n\r\n    }\r\n\r\n    friend auto operator*(ModularInteger lhs, ModularInteger rhs) {\r\n\r\n        lhs *= rhs;\r\n\r\n        return lhs;\r\n\r\n    }\r\n\r\n    friend auto operator/(ModularInteger lhs, ModularInteger rhs) {\r\n\r\n        lhs /= rhs;\r\n\r\n        return lhs;\r\n\r\n    }\r\n\r\n};\r\n\r\nusing std::cin;\r\nusing std::cout;\r\nusing std::ios_base;\r\nusing std::vector;\r\n\r\nconstexpr auto MODULUS = 998'244'353;\r\n\r\nusing Integer = ModularInteger<MODULUS>;\r\n\r\nauto solve() {\r\n\r\n    auto n = 0;\r\n\r\n    cin >> n;\r\n\r\n    auto counts = vector<Integer>(n + 2);\r\n\r\n    counts[0].value = 1;\r\n\r\n    auto subsequences = Integer();\r\n\r\n    for (auto i = 0; i < n; ++i) {\r\n        auto a = 0;\r\n        cin >> a;\r\n        if (a) {\r\n            subsequences += counts[a - 1];\r\n        }\r\n        subsequences += counts[a] + counts[a + 1];\r\n        counts[a + 1] += counts[a] + counts[a + 1];\r\n    }\r\n\r\n    cout << subsequences.value << '\\n';\r\n\r\n}\r\n\r\nint main() {\r\n\r\n    cin.tie(nullptr);\r\n\r\n    ios_base::sync_with_stdio(false);\r\n\r\n    auto t = 0;\r\n\r\n    cin >> t;\r\n\r\n    for (auto i = 1; i <= t; ++i) {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n\r\n}\r\n"
}