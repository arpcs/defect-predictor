{
    "id": 212914470,
    "contestId": 985,
    "creationTimeSeconds": 1688877230,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 985,
        "index": "C",
        "name": "Liebig's Barrels",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 985,
        "members": [
            {
                "handle": "bal.bla.bla"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1526913900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n #include <vector>\r\n using namespace std;\r\n int main() {\r\n   int n, k, l;\r\n   cin >> n >> k >> l;\r\n   vector<int> a(n * k);\r\n   for (int i = 0; i < n * k; i++) {\r\n     cin >> a[i];\r\n   }\r\n   // Sort the staves in increasing order.\r\n   sort(a.begin(), a.end());\r\n   // Initialize the maximum total sum of volumes.\r\n   int max_sum = 0;\r\n   // Iterate over all possible partitions of the staves into n barrels.\r\n   for (int i = 0; i < (1 << n); i++) {\r\n     // Check if the current partition satisfies the condition |vx - vy| <= l.\r\n     bool valid = true;\r\n     for (int j = 0; j < n - 1; j++) {\r\n       if ((i >> j & 1) && (i >> (j + 1) & 1)) {\r\n         int vx = a[j * k];\r\n         int vy = a[(j + 1) * k];\r\n         if (abs(vx - vy) > l) {\r\n           valid = false;\r\n           break;\r\n         }\r\n       }\r\n     }\r\n     // If the current partition is valid, update the maximum total sum of volumes.\r\n     if (valid) {\r\n       int sum = 0;\r\n       for (int j = 0; j < n; j++) {\r\n         if (i >> j & 1) {\r\n           sum += a[j * k];\r\n         }\r\n       }\r\n       max_sum = max(max_sum, sum);\r\n     }\r\n   }\r\n   // Print the maximum total sum of volumes.\r\n   cout << max_sum << endl;\r\n   return 0;\r\n }\r\n"
}