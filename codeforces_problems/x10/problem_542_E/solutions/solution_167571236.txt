{
    "id": 167571236,
    "contestId": 542,
    "creationTimeSeconds": 1660003520,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 542,
        "index": "E",
        "name": "Playing on Graph",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2600,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 542,
        "members": [
            {
                "handle": "DJ2006"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430668800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 2662400,
    "source": "#include <queue>\r\n#include <cstdio>\r\n#include <vector>\r\n\r\n#define LL long long\r\n#define uLL unsigned LL\r\n\r\nnamespace Read {\r\n\tstatic const int buf_size = 1 << 12;\r\n\tstatic const bool use_fread = true;\r\n\t\r\n\tstatic unsigned char buf[buf_size];\r\n\tstatic int buf_len, buf_pos;\r\n\t\r\n\tbool isEOF() {\r\n\t\tif (buf_pos == buf_len) {\r\n\t\t\tbuf_pos = 0; buf_len = fread(buf, 1, buf_size, stdin);\r\n\t\t\tif (buf_pos == buf_len) return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\t\r\n\tchar readChar() {\r\n\t\tif (!use_fread) return getchar();\r\n\t\treturn isEOF() ? EOF : buf[buf_pos++];\r\n\t}\r\n\t\r\n\tLL rint() {\r\n\t\tLL x = 0, Fx = 1; char c = readChar();\r\n\t\twhile (c < '0' || c > '9') { Fx ^= (c == '-'); c = readChar(); }\r\n\t\twhile ('0' <= c && c <= '9') { x = (x << 3) + (x << 1) + (c ^ 48); c = readChar(); }\r\n\t\treturn Fx ? x : -x;\r\n\t}\r\n\t\r\n\ttemplate <typename T>\r\n\tvoid read(T &x) {\r\n\t\tx = rint(); \r\n\t}\r\n\t\r\n\ttemplate <typename T, typename... Ts>\r\n\tvoid read(T &x, Ts &...rest) {\r\n\t\tread(x);\r\n\t\tread(rest...);\r\n\t}\r\n} using namespace Read;\r\n\r\nconst int MAX_n = 1e3;\r\nconst int MAX_m = 1e5;\r\n\r\nint n, m;\r\nint F[MAX_n + 5];\r\nint cur[MAX_n + 5];\r\nint dis[MAX_n + 5];\r\nint Temp[MAX_n + 5];\r\nstd::vector<int> G[MAX_n + 5];\r\n\r\nvoid Add_edge(int u, int v) {\r\n\tG[u].push_back(v);\r\n\tG[v].push_back(u);\r\n}\r\n\r\nbool dfs(int u, int now, int S) {\r\n\tif (cur[u] != -1)\r\n\t\treturn cur[u] == now;\r\n\tcur[u] = now; F[u] = S;\r\n\tfor (auto v : G[u])\r\n\t\tif (!dfs(v, now ^ 1, S)) return false;\r\n\treturn true;\r\n}\r\n\r\nint bfs(int S) {\r\n\tfor (int i = 1; i <= n; i++) dis[i] = -1;\r\n\tstd::queue<int> q; q.push(S); dis[S] = 0;\r\n\twhile (!q.empty()) {\r\n\t\tint u = q.front(); q.pop();\r\n\t\tfor (auto v : G[u])\r\n\t\t\tif (dis[v] == -1) dis[v] = dis[u] + 1, q.push(v);\r\n\t\tif (q.empty()) return dis[u];\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nint main() {\r\n\t#ifdef DATA\r\n\t\tfreopen(\"DATA.in\", \"r\", stdin);\r\n//\t\tfreopen(\"DATA.out\", \"w\", stdout);\r\n\t#endif\r\n\tread(n, m);\r\n\tfor (int i = 1, u, v; i <= m; i++)\r\n\t\tread(u, v), Add_edge(u, v);\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tcur[i] = -1;\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tif (cur[i] == -1 && !dfs(i, 0, i)) { printf(\"-1\\n\"); return 0; }\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tint now = bfs(i);\r\n\t\tif (now > Temp[F[i]]) Temp[F[i]] = now;\r\n\t}\r\n\tint res = 0;\r\n\tfor (int i = 1; i <= n; i++)\r\n\t\tif (F[i] == i) res += Temp[i];\r\n\tprintf(\"%d\\n\", res);\r\n\treturn 0;\r\n}\r\n"
}