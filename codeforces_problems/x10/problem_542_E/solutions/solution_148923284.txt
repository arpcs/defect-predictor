{
    "id": 148923284,
    "contestId": 542,
    "creationTimeSeconds": 1646767588,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 542,
        "index": "E",
        "name": "Playing on Graph",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2600,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 542,
        "members": [
            {
                "handle": "Amoorj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430668800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 204800,
    "source": "// Can I? *blush*\r\n//goal : fucking expert\r\n#include <bits/stdc++.h>\r\n#define F first\r\n#define pb push_back\r\n#define sz size()\r\n#define S second\r\n#define DEBUG cout << \"Beep Boop\"\r\n#define RTE assert(false)\r\nusing namespace std;\r\ntypedef long long int ll;\r\n\r\nconst int N = 1010, INF = 1e9 + 10;\r\nint n,m,d[N];\r\nvector<int> adj[N],vec;\r\nqueue<int> q;\r\nbool seen[N];\r\n\r\nvoid bfs(int v){\r\n    vec.clear();\r\n    d[v] = 0;\r\n    q.push(v);\r\n    vec.pb(v);\r\n    while(!q.empty()){\r\n        v = q.front();\r\n        q.pop();\r\n        for(auto u:adj[v]){\r\n            if(d[u] == -1){\r\n                d[u] = d[v] + 1;\r\n                q.push(u);\r\n                vec.pb(u);\r\n            }\r\n        }\r\n    }\r\n}\r\ninline void init(){\r\n}\r\ninline void input(){\r\n    cin >> n >> m;\r\n    int x,y;\r\n    for(int i=0;i<m;i++){\r\n        cin >> x >> y;\r\n        x--, y--;\r\n        adj[x].pb(y);\r\n        adj[y].pb(x);\r\n    }\r\n}\r\ninline void solve(){\r\n    int ans = 0;\r\n    bool imp = false;\r\n    for(int i=0;i<n;i++)\r\n        seen[i] = false;\r\n    for(int i=0;i<N;i++)\r\n        d[i] = -1;\r\n    for(int i=0;i<n;i++){\r\n        if(!seen[i]){\r\n            bfs(i);\r\n            int v1 = i,v2,maxi = 0;\r\n            for(auto u:vec){\r\n                if(d[v1] < d[u])\r\n                    v1 = u;\r\n                d[u] = -1;\r\n            }\r\n            bfs(v1);\r\n            v2 = v1;\r\n            for(auto u:vec){\r\n                if(d[v2] < d[u]){\r\n                    maxi = d[u];\r\n                    v2 = u;\r\n                }\r\n            }\r\n            for(auto v:vec){\r\n                for(auto u:adj[v]){\r\n                    if(d[v] % 2 == d[u] % 2){\r\n                        imp = true;\r\n                    }\r\n                }\r\n            }\r\n            for(auto v:vec){\r\n                seen[v] = true;\r\n                d[v] = -1;\r\n            }\r\n            ans += maxi;\r\n        }\r\n    }\r\n    if(imp)\r\n        cout << -1;\r\n    else\r\n        cout << ans;\r\n}\r\nint main(){\r\n    ios:: sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n//    freopen(\"input.txt\", \"r\", stdin);\r\n//    freopen(\"output.txt\", \"w\", stdout);\r\n    int queries = 1;\r\n    init();\r\n//    cin >> queries;\r\n    while(queries--){\r\n        input();\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}