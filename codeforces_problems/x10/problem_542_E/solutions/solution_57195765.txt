{
    "id": 57195765,
    "contestId": 542,
    "creationTimeSeconds": 1563365362,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 542,
        "index": "E",
        "name": "Playing on Graph",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2600,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 542,
        "members": [
            {
                "handle": "ksusters"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430668800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 3072000,
    "source": "#include <bits/stdc++.h>\r\n#define dbg(x) cerr<<#x<<\"=\"<<x<<endl;\r\n#define fi first\r\n#define se second\r\n\r\nusing namespace std;\r\ntypedef long long int int64;\r\ntypedef pair<int64, int64> ii;\r\n\r\nvector<int> adj[10000];\r\nint color[10000];\r\nint good = true;\r\nint comp[10000];\r\nint dist[10000];\r\nint compBest[100000];\r\nvoid dfs(int v, int c){\r\n    comp[v] = c;\r\n    for (int u : adj[v]){\r\n        if (color[u] == color[v]){\r\n            //dbg(u)\r\n            //dbg(v)\r\n            good = false;\r\n            return;\r\n        }\r\n        else if (color[u] == 0){\r\n            //unvisited\r\n            color[u] = 3-color[v];\r\n            dfs(u, c);\r\n        }\r\n    }\r\n}\r\nint bfs(int v){\r\n    memset(dist, -1, sizeof dist);\r\n    dist[v] = 0;\r\n    queue<int> q;\r\n    q.push(v);\r\n    int mDist = 0;\r\n    while (!q.empty()){\r\n        int u = q.front();\r\n        mDist = max(mDist, dist[u]);\r\n        q.pop();\r\n        for (int k : adj[u]){\r\n            if (dist[k] == -1){\r\n                dist[k] = dist[u]+1;\r\n                q.push(k);\r\n            }\r\n        }\r\n    }\r\n    return mDist;\r\n\r\n}\r\nint main(){\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    int n, m;\r\n    cin >> n >> m;\r\n    int a, b;\r\n    for (int i = 0; i < m; ++i){\r\n        cin >> a >> b;\r\n        adj[a-1].push_back(b-1);\r\n        adj[b-1].push_back(a-1);\r\n\r\n    }\r\n    int compC = 0;\r\n    for (int i = 0; i < n; ++i){\r\n        if (color[i]==0){\r\n            color[i] = 2;\r\n            dfs(i, compC++);\r\n\r\n        }\r\n    }\r\n    //dbg(compC)\r\n    memset(dist, -1, sizeof dist);\r\n    int res = 0;\r\n    for (int i = 0; i < n; ++i){\r\n        int val = bfs(i);\r\n        //dbg(comp[i])\r\n        compBest[comp[i]] = max(compBest[comp[i]], val);\r\n    }\r\n    for (int i = 0; i < compC; ++i){\r\n        res += compBest[i];\r\n        //dbg(compBest[i])\r\n    }\r\n    if (good == false){\r\n        cout << -1 << endl;\r\n    }\r\n    else{\r\n        cout << res << endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}