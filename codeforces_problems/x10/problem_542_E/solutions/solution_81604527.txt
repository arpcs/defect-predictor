{
    "id": 81604527,
    "contestId": 542,
    "creationTimeSeconds": 1590573352,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 542,
        "index": "E",
        "name": "Playing on Graph",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2600,
        "tags": [
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 542,
        "members": [
            {
                "handle": "Tet"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430668800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair<ll  ,ll > pii;\r\n\r\nconst ll maxn =1e3+2;\r\nconst ld SADAT = 7.84e-17;\r\nconst ll INF = 1e18;\r\nconst ll mod = 1e9+7;\r\nconst ld PI = 4 * atan((ld) 1);\r\n\r\n#define pb(x) push_back(x);\r\n#define endl '\\n'\r\n#define dokme(x) cout << x ;  return(0);\r\n#define all(x) x.begin() , x.end()\r\n#define migmig ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n#define file_init freopen(\"input.txt\", \"r+\", stdin); freopen(\"output.txt\", \"w+\", stdout);\r\n#define random_init mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n#define ms(x , y) memset(x , y , sizeof x);\r\n#define prnt(x)  for(int i = 0 ; i < x.size() ; i ++) cout << x[i] << ' ';\r\nll pw(ll a, ll b) {\r\n    return (!b ? 1 : (b & 1 ? a * pw(a * a % mod, b / 2) % mod : pw(a * a % mod, b / 2) % mod));\r\n}\r\n\r\nint n , m ;\r\nbool mark[maxn] , col[maxn];\r\nvector < int > adj[maxn];\r\nqueue <int> q;\r\nvector <int> comp[maxn];\r\nint cnt = 1;\r\nint dist[maxn];\r\n\r\nint bfs(int cmp){\r\n\tint mx = 0;\r\n\tfor (int i =0 ; i < comp[cmp].size() ; i ++){\r\n\t\tms(dist , 0 );\r\n\t\tms(mark , 0 );\r\n\t\tint v = comp[cmp][i];\r\n\t\tdist[v] =0;\r\n\t\tq.push(v);\r\n\t\tmark[v] = 1;\r\n\t\twhile(!q.empty()){\r\n\t\t\tv = q.front();\r\n\t\t\tq.pop();\r\n\t\t\tfor (auto u : adj[v]){\r\n\t\t\t\tif(!mark[u]){\r\n\t\t\t\t\tmark[u] = 1;\r\n\t\t\t\t\tdist[u] = dist[v] + 1;\r\n\t\t\t\t\tq.push(u);\r\n\t\t\t\t\tmx = max(mx , dist[u]);\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn(mx);\r\n}\r\n\r\nint main(){\r\n    migmig\r\n    cin >> n >> m ;\r\n    for(int i = 0 ; i < m ; i ++ ){\r\n    \tint v, u ;\r\n    \tcin >> v >> u;\r\n    \tadj[v].pb(u);\r\n    \tadj[u].pb(v);\r\n\t}    \r\n\tfor (int i = 1 ; i <= n ; i ++){\r\n\t\tif(!mark[i]){\r\n\t\t\tq.push(i);\r\n\t\t\tcol[i] = 1;\r\n\t\t\tmark[i] = 1;\r\n\t\t\twhile(!q.empty()){\r\n\t\t\t\tint u = q.front();\r\n\t\t\t\tq.pop();\r\n\t\t\t\tfor (auto v : adj[u]){\r\n\t\t\t\t\tif(!mark[v]){\r\n\t\t\t\t\t\tq.push(v);\r\n\t\t\t\t\t\tmark[v] = 1;\r\n\t\t\t\t\t\tcol[v] = !col[u];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t}\r\n\t}\r\n    for (int i = 1 ; i <= n ; i ++){\r\n    \tfor (auto u : adj[i]){\r\n    \t\tif(col[u] == col[i]){\r\n    \t\t\tdokme(-1);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tms(mark , 0 );\r\n\tfor (int i = 1 ; i <= n ; i ++){\r\n\t\tif(!mark[i]){\r\n\t\t\tq.push(i);\r\n\t\t\tcomp[cnt].pb(i);\r\n\t\t\tmark[i] = 1;\r\n\t\t\twhile(!q.empty()){\r\n\t\t\t\tint u = q.front();\r\n\t\t\t\tq.pop();\r\n\t\t\t\tfor (auto v : adj[u]){\r\n\t\t\t\t\tif(!mark[v]){\r\n\t\t\t\t\t\tq.push(v);\r\n\t\t\t\t\t\tmark[v] = 1;\r\n\t\t\t\t\t\tcomp[cnt].pb(v);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\t\r\n\t\t\tcnt++;\r\n\t\t}\r\n\t}\r\n\tint ans = 0;\r\n\tfor (int i = 1 ; i < cnt ; i ++){\r\n\t\tans+=bfs(i);\r\n\t}\r\n\tcout << ans;\r\n\t\r\n\t\r\n\t\r\n    return(0);\r\n}\r\n\r\n\r\n//When we hit our lowest point, we are open to the greatest change.\r\n//If I try, I fail. If I don't try, I'm NEVER GOING TO GET IT.\r\n//Sometimes, life is like this dark tunnel. You can't always see the light at the end of the tunnel. But if you just keep moving... you will come to a better place.\r\n//It is important to draw wisdom from diffrent places. If you take it from only one place it becomes rigid and stale.\r\n\u00a0"
}