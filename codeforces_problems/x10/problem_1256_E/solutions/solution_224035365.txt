{
    "id": 224035365,
    "contestId": 1256,
    "creationTimeSeconds": 1695126093,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1256,
        "index": "E",
        "name": "Yet Another Division Into Teams",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1256,
        "members": [
            {
                "handle": "HitmanX97"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572873300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 46182400,
    "source": "#ifndef _GLIBCXX_NO_ASSERT\r\n#include <cassert>\r\n#endif\r\n#include <cctype>\r\n#include <cerrno>\r\n#include <cfloat>\r\n#include <ciso646>\r\n#include <climits>\r\n#include <clocale>\r\n#include <cmath>\r\n#include <csetjmp>\r\n#include <csignal>\r\n#include <cstdarg>\r\n#include <cstddef>\r\n#include <cstdio>\r\n#include <cstdlib>\r\n#include <cstring>\r\n#include <ctime>\r\n\r\n#if __cplusplus >= 201103L\r\n#include <ccomplex>\r\n#include <cfenv>\r\n#include <cinttypes>\r\n#include <cstdbool>\r\n#include <cstdint>\r\n#include <ctgmath>\r\n#include <cwchar>\r\n#include <cwctype>\r\n#endif\r\n\r\n// C++\r\n#include <algorithm>\r\n#include <bitset>\r\n#include <complex>\r\n#include <deque>\r\n#include <exception>\r\n#include <fstream>\r\n#include <functional>\r\n#include <iomanip>\r\n#include <ios>\r\n#include <iosfwd>\r\n#include <iostream>\r\n#include <istream>\r\n#include <iterator>\r\n#include <limits>\r\n#include <list>\r\n#include <locale>\r\n#include <map>\r\n#include <memory>\r\n#include <new>\r\n#include <numeric>\r\n#include <ostream>\r\n#include <queue>\r\n#include <set>\r\n#include <sstream>\r\n#include <stack>\r\n#include <stdexcept>\r\n#include <streambuf>\r\n#include <string>\r\n#include <typeinfo>\r\n#include <utility>\r\n#include <valarray>\r\n#include <vector>\r\n\r\n#if __cplusplus >= 201103L\r\n#include <array>\r\n#include <atomic>\r\n#include <chrono>\r\n#include <condition_variable>\r\n#include <forward_list>\r\n#include <future>\r\n#include <initializer_list>\r\n#include <mutex>\r\n#include <random>\r\n#include <ratio>\r\n#include <regex>\r\n#include <scoped_allocator>\r\n#include <system_error>\r\n#include <thread>\r\n#include <tuple>\r\n#include <typeindex>\r\n#include <type_traits>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#endif\r\n\r\n//#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double ld;\r\n\r\n#define output(v) for(auto&it:v){cout<<it<<\" \";}cout<<\"\\n\"\r\n#define input(v) for(auto&it:v){cin>>it;}\r\n#define watch(x) cerr<<#x<<\" : \"<<x<<endl;\r\n#define all(v) v.begin(),v.end()\r\n#define int long long\r\n\r\nvoid FastCode() {\r\n    std::ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n}\r\nvoid File(){\r\n//    freopen(\"binary.in\", \"r\", stdin);\r\n//    freopen(\"knight.out\", \"w\", stdout);\r\n}\r\nvoid preprocessing() {\r\n\r\n}\r\nstruct SegmentTree{\r\npublic:\r\n    SegmentTree(int n){\r\n        sz = 1;\r\n        while(sz < n) sz<<=1;\r\n        tree.assign(sz<<1 , 2e9);\r\n    }\r\n    void set(int idx , int val){\r\n        set(idx , val , 0 , 0 ,sz-1);\r\n    }\r\n    ll query(int l , int r){\r\n        return  query(l , r , 0 , 0 ,sz-1);\r\n    }\r\nprivate:\r\n    int sz;\r\n    vector<int> tree;\r\n    void set(int idx , int val , int x , int lx , int rx){\r\n        if(lx == rx){\r\n            tree[x] = val;\r\n            return;\r\n        }\r\n        int md = lx+rx>>1;\r\n        if(idx<=md) set(idx , val , 2*x+1 , lx , md);\r\n        else set(idx , val , 2*x+2 , md+1 , rx);\r\n        tree[x] = min(tree[2*x+1] , tree[2*x+2]);\r\n    }\r\n    ll query(int l , int r , int x , int lx , int rx){\r\n        if(lx >= l && rx <= r) return tree[x];\r\n        if(lx > r  || rx < l ) return 2e9;\r\n        int md = lx+rx>>1;\r\n        return min(query(l , r , 2*x+1 , lx , md ) , query(l , r , 2*x+2 , md+1 , rx));\r\n    }\r\n};\r\nvoid testCase(int ct) {\r\n    int n;\r\n    cin >> n;\r\n    pair<int , int> arr[n];\r\n    for(int i = 0 ; i < n ; i ++){\r\n        cin >> arr[i].first;\r\n        arr[i].second = i;\r\n    }\r\n    sort(arr,arr+n);\r\n    ll dp[n+1];\r\n    for(int &x : dp) x = 2e18;\r\n    dp[n] = 0;\r\n    SegmentTree seg(n+5);\r\n    seg.set(n , arr[n-1].first);\r\n    for(int i = n-3 ; i >= 0 ; i--){\r\n        dp[i] = seg.query(i+3 , n) - arr[i].first;\r\n        if(i) seg.set(i , dp[i] + arr[i-1].first);\r\n    }\r\n    map<int , set<int>> idx;\r\n    for(int i = 0 ; i <= n ; i++)\r\n        idx[seg.query(i , i)].insert(i);\r\n    set<int> st;\r\n    map<int, int> mp;\r\n    int lst = 1;\r\n    int ans[n];\r\n    for(int i = 0 ; i < n-2 ; i++){\r\n        int target = dp[i] + arr[i].first;\r\n        int j = *idx[target].rbegin();\r\n        if(!st.count(j)){\r\n            st.insert(j);\r\n            mp[j] = lst++;\r\n        }\r\n        for(int k = i ; k < j ; k++){\r\n            ans[arr[k].second] = mp[j];\r\n        }\r\n        i = j-1;\r\n    }\r\n    cout<<dp[0]<<\" \"<<lst-1<<'\\n';\r\n    output(ans);\r\n}\r\nint32_t main(){\r\n    FastCode();\r\n    File();\r\n    preprocessing();\r\n    int t = 1;\r\n    //cin >> t;\r\n    for(int i = 1 ; i <= t ; i++)\r\n        testCase(i);\r\n}"
}