{
    "id": 230843041,
    "contestId": 1811,
    "creationTimeSeconds": 1698849764,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1811,
        "index": "F",
        "name": "Is It Flower?",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "dfs and similar",
            "graphs",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1811,
        "members": [
            {
                "handle": "st88"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1680618900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 83,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 17817600,
    "source": "#include <cmath>\n#include <cstdio>\n#include <list>\n#include <map>\n\nusing namespace std;\n\nmap<int, list<int>> g;\nint k;\n\nvoid addedge(int u, int v) { g[u].push_back(v); }\n\nint walk(int s, bool c) {\n    int cv = -1;\n    int siz = c ? 4 : 2;\n    for (auto v : g[s]) {\n        if (g[v].size() == siz) {\n            cv = v;\n            break;\n        }\n    }\n\n    if (cv == -1)\n        return false;\n\n    int cnt = 0, prev = s;\n    while (true) {\n        if (g[cv].size() == 4 && cv == s)\n            return k - 1 == cnt;\n\n        if (g[cv].size() != siz)\n            return false;\n\n        int tmp = cv;\n        for (auto v : g[cv]) {\n            if (c && g[v].size() != siz)\n                continue;\n            if (v != prev) {\n                cv = v;\n                break;\n            }\n        }\n\n        prev = tmp;\n        ++cnt;\n    }\n}\n\n#define NO                                                                                         \\\n    {                                                                                              \\\n        puts(\"NO\");                                                                                \\\n        return;                                                                                    \\\n    }\n\nvoid solve() {\n    int n, m;\n    scanf(\"%d %d\", &n, &m);\n\n    g.clear();\n\n    int m1 = m;\n    while (m1-- > 0) {\n        int u, v;\n        scanf(\"%d %d\", &u, &v);\n        addedge(u, v);\n        addedge(v, u);\n    }\n\n    k = sqrt(n);\n    if (k * k != n || k * k + k != m)\n        NO;\n\n    int cnt = 0, cn = -1;\n    for (auto v : g) {\n        if (v.second.size() == 2)\n            continue;\n        else if (v.second.size() == 4) {\n            cn = v.first;\n            ++cnt;\n            if (!walk(v.first, false))\n                NO;\n        } else\n            NO;\n    }\n\n    if (cnt != k)\n        NO;\n\n    if (!walk(cn, true))\n        NO;\n\n    puts(\"YES\");\n}\n\nint main() {\n    int t;\n    scanf(\"%d\", &t);\n    while (t--)\n        solve();\n\n    return 0;\n}\n"
}