{
    "id": 233048226,
    "contestId": 1811,
    "creationTimeSeconds": 1700202734,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1811,
        "index": "F",
        "name": "Is It Flower?",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "dfs and similar",
            "graphs",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1811,
        "members": [
            {
                "handle": "upk1_dwk2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1680618900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 83,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 19558400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define all(a) a.begin(), a.end()\r\ntemplate <class T> istream& operator>>(istream& is, vector<T>& vec) { for (T& v : vec) is >> v; return is; }\r\n\r\ntemplate <class T> ostream& operator<<(ostream& os, const vector<T>& vec) { for (const T& v : vec) os << v << ' '; return os; }\r\nint main() {\r\n  ios::sync_with_stdio({}); cin.tie({});\r\n\r\n\r\n  // \u6b63\u8d5b\u8003\u8fd9\u79cd\u9898\u522b\u4eba\u90fd\u4e0d\u4f1a\u5199\u6211\u4eec\u4f1a\u5199\u5c31\u597d\u4e86\u2026\u2026\u8fd9\u662fd3\u7684f\uff1f\r\n  // \u6b63\u7edf\u7684\u6784\u9020\u7684\u9898\u4f60\u4e0d\u4f1a\u554a\u3002\r\n  // \u8fd9\u9898\u51e0\u4e4e\u7ed9\u770b\u6d4b\u8bd5\u70b9\u4e86\uff0c\u8fd8\u7b97\u6bd4\u8f83\u4ec1\u6148\uff0c\u4f60\u628a\u9898\u76ee\u8bf4\u6e05\u695a\u4e00\u4e9b\u554a\u3002\u771f\u662f\u7684\u3002\r\n  int T;\r\n  cin >> T;\r\n  while (T--) {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<vector<int>> G(n);\r\n    for (int i = 0; i < m; i++) {\r\n      int x, y;\r\n      cin >> x >> y;\r\n      --x; --y;\r\n      G[x].push_back(y);\r\n      G[y].push_back(x);\r\n    }\r\n\r\n    vector<bool> vis(n);\r\n    bool good = 0;\r\n    vector<int> subid(n);\r\n    for (int i = 0; i < n; i++) {\r\n      if (vis[i]) continue;\r\n      vector<int> vertexs;\r\n      function<void(int)> dfs = [&](int v) {\r\n        if (vis[v]) return;\r\n        vis[v] = true;\r\n        vertexs.push_back(v);\r\n        for (int u : G[v]) {\r\n          dfs(u);\r\n        }\r\n      }; dfs(i);\r\n      int sz = vertexs.size();\r\n      if (sz != n) {\r\n        break;\r\n      }\r\n      for (int j = 0; j < sz; j++) {\r\n        subid[vertexs[j]] = j;\r\n      }\r\n      vector<vector<int>> G1(sz);\r\n      for (int v : vertexs) {\r\n        for (int u : G[v]) {\r\n          G1[subid[v]].push_back(subid[u]);\r\n        }\r\n      }\r\n      // \u7136\u540e\u95ee\u9898\u53d8\u6210G1\uff0cG1\u662fG\u7684\u4e00\u4e2a\u8fde\u901a\u5757\u3002\r\n      int sqrtsz = sqrt(sz);\r\n      while (sqrtsz * sqrtsz < sz) sqrtsz++;\r\n      while (sqrtsz * sqrtsz > sz) sqrtsz--;\r\n      if (sqrtsz * sqrtsz != sz) continue;\r\n      bool bad = 0;\r\n      vector<int> deg2(sz);\r\n      for (int v = 0; v < sz; v++) {\r\n        if (G1[v].size() == 4) {\r\n          deg2[v] = 0;\r\n        } else if (G1[v].size() == 2) {\r\n          deg2[v] = 1;\r\n        } else {\r\n          bad = 1;\r\n          break;\r\n        }\r\n      }\r\n      if (bad) continue; // \u6709\u975e42\u7684\u70b9\r\n      if (accumulate(all(deg2), 0) != sz - sqrtsz) continue; // 2\u7684\u70b9\u6570\u4e0d\u51c6\uff0c4\u7684\u70b9\u6570\u4e0d\u51c6\r\n      // \u63a5\u4e0b\u6765\u53ea\u670942\u7684\u70b9\r\n      vector<int> vis2(sz);\r\n      for (int v = 0; v < sz; v++) {\r\n        if (!deg2[v]) {\r\n          int cnt4 = 0, cnt2 = 0;\r\n          for (int u : G1[v]) {\r\n            if (G1[u].size() == 4) cnt4++;\r\n            else cnt2++;\r\n          }\r\n          if (!(cnt4 == 2 && cnt2 == 2)) {\r\n            bad = 1;\r\n            break;\r\n          }\r\n          bool getin = true;\r\n          int cnt = 0;\r\n          function<void(int)> dfs2 = [&](int v) {\r\n            if (!deg2[v]) {\r\n              if (getin) getin = false;\r\n              else return;\r\n            }\r\n            if (vis2[v]) return;\r\n            vis2[v] = true;\r\n            if (deg2[v]) cnt++;\r\n            for (int u : G1[v]) {\r\n              dfs2(u);\r\n            }\r\n          }; dfs2(v);\r\n          if (cnt != sqrtsz - 1) {\r\n            bad = 1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      if (!bad) {\r\n        good = 1;\r\n        break;\r\n      }\r\n    }\r\n    cout << (good ? \"Yes\" : \"No\") << '\\n';\r\n  }\r\n}\r\n// \u9519\u4e86\u8fd9\u4e2a\u7528\u4f8bWA1\r\n// 1 2\r\n// 2 3\r\n// 3 4\r\n// 4 1\r\n// 1 5\r\n// 5 6\r\n// 6 7\r\n// 7 2\r\n// 2 8\r\n// 8 9\r\n// 9 10\r\n// 10 3\r\n// 3 11\r\n// 11 12\r\n// 12 13\r\n// 13 4\r\n// 4 14\r\n// 14 15\r\n// 15 16\r\n// 16 1"
}