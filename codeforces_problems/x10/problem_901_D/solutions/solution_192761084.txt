{
    "id": 192761084,
    "contestId": 901,
    "creationTimeSeconds": 1675872371,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 901,
        "index": "D",
        "name": "Weighting a Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 901,
        "members": [
            {
                "handle": "Archaeopteryx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513697700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 92,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 11673600,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\nusing namespace std; int const M=100100;\nint i,n,m,num=1,c[M],u[M],v[M],dep[M],val[M],head[M];\nstruct node{int to,next;}node[M<<1];bool vis[M],flag[M];\nint read(){\nint x=0,f=1;char ch=getchar();\nwhile (ch<'0'||ch>'9') {if (ch=='-') f=-1;ch=getchar();}\nwhile (ch>='0'&&ch<='9') x=x*10+ch-48,ch=getchar();\nreturn x*f;\n}\nvoid addedge(int u,int v){node[++num]={v,head[u]};head[u]=num;}\nvoid dfs(int x){ vis[x]=1;\nfor (int v,i=head[x];i;i=node[i].next){\nif (vis[v=node[i].to]) continue;\nflag[i>>1]=1;dep[v]=dep[x]+1;dfs(v);\nval[i>>1]+=c[v];c[x]-=c[v];c[v]=0;\n}\n}\nvoid write(){ puts(\"YES\");\nfor (int i=1;i<=m;i++)\nprintf(\"%lld\\n\",val[i]);\nexit(0);\n}\nsigned main(){ n=read();m=read();\nfor (i=1;i<=n;i++) c[i]=read();\nfor (i=1;i<=m;i++)\nu[i]=read(),v[i]=read(),\naddedge(u[i],v[i]),\naddedge(v[i],u[i]);\ndfs(1);if (!c[1]) write();\nif (c[1]&1) return puts(\"NO\"),0;\nfor (i=1;i<=n;i++) vis[i]=0;\nfor (i=1;i<=m;i++){\nif (flag[i]||(dep[u[i]]+dep[v[i]])&1) continue;\nval[i]=dep[u[i]]&1?-c[1]/2:c[1]/2;\nc[u[i]]-=val[i];c[v[i]]-=val[i];dfs(1);write();\n}\nreturn puts(\"NO\"),0;\n}"
}