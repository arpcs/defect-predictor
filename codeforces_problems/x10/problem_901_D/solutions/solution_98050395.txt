{
    "id": 98050395,
    "contestId": 901,
    "creationTimeSeconds": 1605004234,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 901,
        "index": "D",
        "name": "Weighting a Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 901,
        "members": [
            {
                "handle": "changruinian2020"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513697700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 5734400,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<cstdio>\r\nusing namespace std;\r\n#define N 100012\r\nint n,m,h[N],cnt=1,de[N],X[N],Y[N],ex=0;long long c[N],a[N],ans[N],su=0;bool vis[N];\r\nstruct Edge{int to,next;}e[N<<1];\r\ninline void AddEdge(int x,int y){e[++cnt]=(Edge){y,h[x]};h[x]=cnt;}\r\nlong long dfs(int x,int prt)\r\n{\r\n\tvis[x]=1;de[x]=de[prt]^1;int i,y;long long v;\r\n\tfor(i=h[x];i;i=e[i].next)if((y=e[i].to)!=prt){if(vis[y]){if(de[x]==de[y])ex=i>>1;continue;}ans[i>>1]=v=dfs(y,x);a[x]-=v;}return a[x];\r\n}\r\nint main(){\r\n\tscanf(\"%d%d\",&n,&m);int i,x,y;long long v;for(i=1;i<=n;i++)scanf(\"%lld\",&c[i]);for(i=1;i<=m;i++){scanf(\"%d%d\",&x,&y);AddEdge(x,y);AddEdge(y,x);}\r\n\tmemcpy(a,c,sizeof(c));su=dfs(1,0);if(su&&(!ex)){printf(\"NO\");return 0;}v=ans[ex]=(su>>1);c[e[ex<<1].to]-=v;c[e[ex<<1|1].to]-=v;\r\n\tmemset(vis,0,sizeof(vis));memcpy(a,c,sizeof(c));su=dfs(1,0);printf(\"YES\\n\");for(i=1;i<=m;i++)printf(\"%lld\\n\",ans[i]);return 0;\r\n}"
}