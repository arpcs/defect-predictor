{
    "id": 229101235,
    "contestId": 1267,
    "creationTimeSeconds": 1697909083,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1267,
        "index": "E",
        "name": "Elections",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 1267,
        "members": [
            {
                "handle": "Aleph-null"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1575183600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\n#pragma GCC optimize(\"O2\")\r\n#pragma GCC diagnostic push\r\n#pragma GCC diagnostic ignored \"-Wc++11-extensions\"\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\nusing namespace std;\r\n#define ios ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\n#define see(statement) cout << statement << endl\r\n#define YY see(\"YES\")\r\n#define NN see(\"NO\")\r\n#define yy see(\"Yes\")\r\n#define nn see(\"No\")\r\n#define is ==\r\n#define isnt !=\r\n#define fr first\r\n#define sc second\r\n#define Aa see(\"Alice\")\r\n#define AA see(\"ALICE\")\r\n#define Bb see(\"Bob\")\r\n#define BB see(\"BOB\")\r\n#define pb(value) push_back(value)\r\n#define pf(value) push_front(value)\r\n#define rb() pop_back()\r\n#define rf() pop_front()\r\n#define self (*this)\r\n#define sz() size()\r\n#define vt(type) vector<type>\r\n#define ins(element) insert(element)\r\n#define br() cout << endl\r\n#define cast(element,type) static_cast<type>(element)\r\n#define ll long long\r\n#define cd complex<double>\r\n#define ld long double\r\n#define vi vector<int>\r\n#define vll vector<ll>\r\n#define vvi vector<vi>\r\n#define vvll vector<vll>\r\n#define vb vector<bool>\r\n#define vvb vector<vb>\r\n#define vld vector<ld>\r\n#define pair(t1,t2) pair<t1,t2>\r\n#define pii pair(int,int)\r\n#define pll pair(ll,ll)\r\n#define pld pair(ll,ld)\r\n#define vpii vector<pii>\r\n#define vpll vector<pll>\r\n#define debug(statement) cout<<\"**************Debug: \"<<statement<<\" **************\"<<endl;\r\n#define pi 2*acos(0.0)\r\n#define max_heap(tmp) priority_queue<tmp>\r\n#define min_heap(tmp) priority_queue<tmp,vector<tmp>,greater<tmp> >\r\n#define map(type1,type2) map<type1,type2>\r\n#define umap(type1,type2) unordered_map<type1,type2>\r\n#define mmap(type1,type2) multimap<type1,type2>\r\n#define ummap(type1,type2) unordered_multimap<type1,type2>\r\n#define set(type) set<type>\r\n#define uset(type) unordered_set<type>\r\n#define mset(type) multiset<type>\r\n#define umset(type) unordered_multiset<type>\r\n#define all(x) x.begin(),x.end()\r\n#define rall(x) x.rbegin(),x.rend()\r\n#define elif else if\r\n#define loop(type,it,init,condition,update) for(type it = init;condition;update)\r\n#define list(first,second,container) for(auto &[first,second]: container)\r\n#define enumerate(first,second,container) list(first,second,enumerated(container))\r\n#define zip(first,second,container1,container2) list(first,second,zipped(container1,container2))\r\n#define enum_sub_type(type,submask,mask,equal) loop(type,submask,mask,(equal ? submask >= 0 : submask > 0),submask = (submask - 1) & mask)\r\n#define enum_sub(submask,mask,equal) enum_sub_type(int,submask,mask,equal)\r\n#define rng_la(type,i,start,end,step,buffer) loop(type,i,start,i + buffer < end,i += step)\r\n#define inc_la(i,start,end,buffer) rng_la(int,i,start,end,1,buffer)\r\n#define slid_win(left,right,size,end) for(int left = 1, right = size; right < end; left++,right++)\r\n#define rng_type(type,i,start,end,step) loop(type,i,start,(step > 0 ? i < end : i >= end),i += step)\r\n#define rng(i,start,end,step) rng_type(int,i,start,end,step)\r\n#define inc(i,start,end) rng(i,start,end,1)\r\n#define dec(i,start,end) rng(i,start,end,-1)\r\n#define inc_type(type,i,start,end) rng_type(type,i,start,end,1)\r\n#define dec_type(type,i,start,end) rng_type(type,i,start,end,-1)\r\n#define inc_la_type(type,i,start,end,buffer) rng_la(type,i,start,end,1,buffer)\r\n#define each_key(element,container) for(const auto &element:container)\r\n#define each(element,container) for(auto &element:container)\r\n#define iter_for(it,container) for(auto it = container.begin();it != container.end();it++)\r\n#define iter_rev(it,container) for(auto it = container.rbegin();it != container.rend();it++)\r\n#define until(condition) while(!(condition))\r\n#define sorted(arr) sort(all(arr))\r\n#define custSort(container,comparator) sort(all(container),comparator)\r\n#define cnt(container,value) count(all(container),value)\r\n#define isSorted(container) is_sorted(all(container))\r\n#define rev(arr) reverse(all(arr))\r\n#define rsort(arr) sort(rall(arr));\r\n#define slice(start,end) substr(start,end - (start) + 1)\r\n#define char_index(c) (c >= 'A' and c <= 'Z' ? c - 'A' : c - 'a')\r\ninline ll llmax(ll a,ll b){\r\n    return a > b ? a : b;\r\n}\r\ninline ll llmin(ll a,ll b){\r\n    return a<b?a:b;\r\n}\r\ntemplate<typename tmp1,typename tmp2>\r\nvector<pair<tmp1,tmp2> >zipped(vector<tmp1>&arr1,vector<tmp2>&arr2){\r\n    vector<pair<tmp1,tmp2> >ans;\r\n    inc(i,0,arr1.sz()){\r\n        ans.pb(make_pair(arr1[i],arr2[i]));\r\n    }\r\n    return ans;\r\n}\r\ntemplate<typename tmp>\r\nvt(tmp)uniqueConsec(vector<tmp>&arr){\r\n    vt(tmp)ans;\r\n    inc(i,0,arr.sz()){\r\n        if(ans.sz() is 0 or ans.back() isnt arr[i]){\r\n            ans.pb(arr[i]);\r\n        }\r\n    }\r\n    return ans;\r\n}\r\ntemplate<typename tmp>\r\nvector<pair<int,tmp> >enumerated(vt(tmp)&arr){\r\n    vector<pair<int,tmp> >ans;\r\n    inc(i,0,arr.sz()){\r\n        ans.pb(make_pair(i,arr[i]));\r\n    }\r\n    return ans;\r\n}\r\ntemplate<typename tmp>\r\ninline void readArray(vt(tmp)&arr,int start = 0){\r\n    inc(i,start,arr.size()){\r\n        cin >> arr[i];\r\n    }\r\n}\r\ntemplate<typename tmp>\r\ninline void readMatrix(vt(tmp)&matrix,int r = 0,int c = 0){\r\n    inc(i,r,matrix.size()){\r\n        inc(j,c,matrix[i].size()){\r\n            cin >> matrix[i][j];\r\n        }\r\n    }\r\n}\r\ntemplate<typename tmp>\r\ninline void writeArray(vt(tmp)&arr,int start = 0){\r\n    inc(i,start,arr.size()){\r\n        cout << arr[i] << \" \";\r\n    }\r\n    br();\r\n}\r\ntemplate<typename tmp>\r\ninline tmp findMaxIndex(vt(tmp)&arr,int start = 0){\r\n    tmp ans = start;\r\n    inc(i,start,arr.sz()){\r\n        ans = (arr[ans] > arr[i] ? ans : i);\r\n    }\r\n    return ans;\r\n}\r\ntemplate<typename tmp>\r\ninline tmp findMinIndex(vt(tmp)&arr,int start = 0){\r\n    tmp ans = start;\r\n    inc(i,start,arr.sz()){\r\n        ans = (arr[ans] < arr[i] ? ans : i);\r\n    }\r\n    return ans;\r\n}\r\ntemplate<typename tmp>\r\ninline void writeMatrix(vt(vt(tmp))&matrix,int r = 0,int c = 0){\r\n    inc(i,r,matrix.size()){\r\n        inc(j,c,matrix[i].size()){\r\n            cout << matrix[i][j] << \" \";\r\n        }\r\n        br();\r\n    }\r\n}\r\ntemplate<typename tmp> tmp power(tmp base,tmp exponent){\r\n    if(exponent is 0){\r\n        return 1;\r\n    } else {\r\n        vt(tmp)dp(log2(exponent) + 1,0);\r\n        dp[0] = base;\r\n        inc(i,1,dp.sz()){\r\n            dp[i] = dp[i - 1] * dp[i - 1];\r\n        }\r\n        tmp ans = 1;\r\n        while(exponent){\r\n            int pos = log2(exponent & (-exponent));\r\n            exponent ^= (1 << pos);\r\n            ans *= dp[pos];\r\n        }\r\n        return ans;\r\n    }\r\n}\r\ntemplate<typename tmp>\r\nvoid coordinateCompressInplace(vt(tmp)&arr){\r\n    map(tmp,int)pos;\r\n    inc(i,0,arr.sz()){\r\n        pos[arr[i]] = 0;\r\n    }\r\n    int index = 0;\r\n    each(entry,pos){\r\n        entry.sc = index++;\r\n    }\r\n    inc(i,0,arr.sz()){\r\n        arr[i] = pos[arr[i]];\r\n    }\r\n}\r\ntemplate<typename tmp>\r\nvt(tmp) coordinateCompress(vt(tmp)&arr){\r\n    vt(tmp)ans = arr;\r\n    map(tmp,int)pos;\r\n    inc(i,0,ans.sz()){\r\n        pos[ans[i]] = i;\r\n    }\r\n    int index = 0;\r\n    each(entry,pos){\r\n        entry.sc = index++;\r\n    }\r\n    inc(i,0,ans.sz()){\r\n        ans[i] = pos[ans[i]];\r\n    }\r\n    return ans;\r\n}\r\ntemplate<typename tmp> tmp mod(tmp number,tmp base){\r\n    while(number < 0){\r\n        number += base;\r\n    }\r\n    return number % base;\r\n}\r\ntemplate<typename tmp> inline tmp manhattanDist(pair(tmp,tmp) &first,pair(tmp,tmp) &second){\r\n    return abs(first.fr - second.fr) + abs(first.sc - second.sc);\r\n}\r\ntemplate<typename tmp> tmp gcd(tmp a, tmp b){\r\n    if (a is 0)\r\n        return b;\r\n    return gcd(b % a, a);\r\n}\r\ntemplate<typename tmp> tmp lcm(tmp a,tmp b){\r\n    return (a * b) / gcd(a,b);\r\n}\r\ntemplate<typename tmp> tmp ceil(tmp num,tmp den){\r\n    return (num / den) + (num % den != 0);\r\n}\r\ntemplate<typename tmp>\r\ninline bool inBetween(tmp left,tmp mid,tmp right,bool incLeft = true,bool incRight = true){\r\n    return (incLeft ? mid >= left : mid > left) and (incRight ? mid <= right : mid < right);\r\n}\r\nconst int inf = 2e9;\r\nconst ll linf = 2e18;\r\nvoid testcase();\r\nint main(){\r\n    ios;\r\n    int t = 1;\r\n    while(t--){\r\n        testcase();\r\n    }\r\n    return 0;\r\n}\r\nvoid testcase(){\r\n    int n,m;\r\n    cin >> n >> m;\r\n    vvi arr(m,vi(n,0));\r\n    readMatrix(arr);\r\n    vi ans;\r\n    inc(i,0,n){\r\n        ans.pb(i + 1);\r\n    }\r\n    inc(target,0,n - 1){\r\n        vpii diff;\r\n        inc(i,0,m){\r\n            diff.pb(make_pair(arr[i][target] - arr[i].back(),i));\r\n        }\r\n        sorted(diff);\r\n        int start = 0,end = diff.sz(),res = end;\r\n        while(start <= end){\r\n            int mid = (start + end) >> 1;\r\n            set(int)exlude;\r\n            inc(i,0,mid){\r\n                exlude.ins(diff[i].sc);\r\n            }\r\n            int targetSum = 0,opp = 0;\r\n            inc(i,0,m){\r\n                if(exlude.count(i) is false){\r\n                    targetSum += arr[i][target];\r\n                    opp += arr[i].back();\r\n                }\r\n            }\r\n            if(opp > targetSum){\r\n                start = mid + 1;\r\n            } else {\r\n                res = mid;\r\n                end = mid - 1;\r\n            }\r\n        }\r\n        if(res < ans.sz()){\r\n            ans.resize(res);\r\n            inc(i,0,res){\r\n                ans[i] = diff[i].sc + 1;\r\n            }\r\n        }\r\n    }\r\n    see(ans.sz());\r\n    writeArray(ans);\r\n    return;\r\n}\r\n#pragma GCC diagnostic pop"
}