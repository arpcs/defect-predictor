{
    "id": 221234894,
    "contestId": 1491,
    "creationTimeSeconds": 1693468711,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1491,
        "index": "E",
        "name": "Fib-tree",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2400,
        "tags": [
            "brute force",
            "dfs and similar",
            "divide and conquer",
            "number theory",
            "trees"
        ]
    },
    "author": {
        "contestId": 1491,
        "members": [
            {
                "handle": "3sFening"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1614519300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 7987200,
    "source": "// LUOGU_RID: 123400604\n#include <bits/stdc++.h>\r\n#define upp(x) printf(x ? \"YES\\n\" : \"NO\\n\")\r\n#define low(x) printf(x ? \"Yes\\n\" : \"No\\n\")\r\n\r\nusing namespace std;\r\ninline int read() {\r\n\tint x = 0, f = 1;\r\n\tchar ch = getchar();\r\n\twhile (! isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\r\n\twhile (isdigit(ch)) { x = x * 10 + ch - 48; ch = getchar(); }\r\n\treturn x * f;\r\n}\r\n\r\nconst int maxn = 2e5 + 10;\r\n\r\nint n, x, y, id, en = 1, h[maxn], fib[maxn], sz[maxn];\r\nstruct Node { int u, v, nxt; } e[maxn << 1]; bool vis[maxn << 1];\r\n\r\nvoid add_edge(int u, int v) {\r\n\te[++ en] = Node {u, v, h[u]}, h[u] = en; }\r\n\r\nvoid dfs(int u, int fa, int p) {\r\n\tsz[u] = 1;\r\n\tfor (int i = h[u]; i; i = e[i].nxt) {\r\n\t\tint v = e[i].v; if (v == fa || vis[i]) continue;\r\n\t\tdfs(v, u, p); if (~x) break;\r\n\t\tif (sz[v] == fib[p - 1] || sz[v] == fib[p - 2]) {\r\n\t\t\tx = u, y = v, vis[i] = vis[i ^ 1] = 1;\r\n\t\t\tid = p - 1 - (sz[v] == fib[p - 2]); break;\r\n\t\t} sz[u] += sz[v];\r\n\t}\r\n}\r\n\r\nbool chk(int u, int p) {\r\n\tif (p <= 1) return 1; x = y = id = -1; dfs(u, -1, p);\r\n\tif (x == -1) return 0; int X = x, Y = y, ID = id;\r\n\treturn chk(Y, ID) && chk(X, p - 1 - (ID == p - 1)); \r\n}\r\n\r\nvoid work() {\r\n\tn = read(); if (n == 1) return upp(1), void();\r\n\tfor (int i = 1; i < n; i ++) {\r\n\t\tint u = read(), v = read();\r\n\t\tadd_edge(u, v), add_edge(v, u);\r\n\t}\r\n\t\r\n\tint p = 0; while (fib[p] < n) p ++;\r\n\tif (fib[p] != n) return upp(0), void();\r\n\tupp(chk(1, p));\r\n}\r\n\r\nint main() {\r\n\t\r\n\tfib[0] = fib[1] = 1;\r\n\tfor (int i = 2; fib[i - 1] <= 4e5; i ++)\r\n\t\tfib[i] = fib[i - 1] + fib[i - 2];\r\n\r\n\tint T = 1;\r\n\twhile (T --) work();\r\n\r\n\treturn 0;\r\n}\r\n\r\n"
}