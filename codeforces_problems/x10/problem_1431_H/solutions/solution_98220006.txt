{
    "id": 98220006,
    "contestId": 1431,
    "creationTimeSeconds": 1605199294,
    "relativeTimeSeconds": 7594,
    "problem": {
        "contestId": 1431,
        "index": "H",
        "name": "Rogue-like Game",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "*special",
            "brute force",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1431,
        "members": [
            {
                "handle": "lightseba"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1605191700
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 0,
    "source": "import kotlin.math.*\nimport java.io.*\nimport java.util.*\nimport java.math.BigInteger\nimport java.math.BigDecimal\n\nfun solve(koi: FastIO) {\n\n\tval n = koi.nextInt()\n\tval m = koi.nextInt()\n\tval k = koi.nextLong()\n\n\tval a = LongArray(n) { koi.nextLong() }\n\tval b = LongArray(m) { koi.nextLong() }\n\tval c = Array<LongArray>(n) { LongArray(m) { koi.nextLong() } }\n\t// val dp = Array<Array<IntArray>>(n) { Array<IntArray>(m) { IntArray(2) { -1 } } }\n\tval mx = Array<LongArray>(n) { LongArray(m) { 0 } }\n\n\tfor (i in 0 until n)\n\t\tfor (j in 0 until m) {\n\t\t\tmx[i][j] = c[i][j]\n\t\t\tif (i > 0)\n\t\t\t\tmx[i][j] = max(mx[i][j], mx[i-1][j])\n\t\t\tif (j > 0)\n\t\t\t\tmx[i][j] = max(mx[i][j], mx[i][j-1])\n\t\t}\n\t\n\tfun go(i: Int, j: Int, boost: Boolean, sum: Long): Long {\n\t\tif (i == n-1 && j == m-1)\n\t\t\treturn 0L\n\n\n\t\tvar next = (1e18).toLong()\n\n\t\tif (i < n-1)\t\n\t\t\tnext = min(next, a[i+1])\n\t\tif (j < m-1)\n\t\t\tnext = min(next, b[j+1])\n\n\t\tvar turns = (next - sum + mx[i][j] - 1) / mx[i][j]\n\t\tturns = max(turns, 1L)\n\n\t\tvar take = turns * mx[i][j]\n\n\t\tvar ni = i\n\t\tvar nj = j\n\t\twhile (ni + 1 < n && a[ni + 1] <= sum + take) ni++\n\t\twhile (nj + 1 < m && b[nj + 1] <= sum + take) nj++\n\n\t\t// println(\"trying keep at ($i,$j) boost $boost sum $sum with mx: ${mx[i][j]} turns: $turns take: $take ni: $ni nj: $nj\")\n\t\tvar ans = turns + go(ni, nj, boost, sum + take)\n\n\t\tif (boost) {\n\n\t\t\tturns = (next - sum - k + mx[i][j] - 1) / mx[i][j]\n\t\t\tturns = max(turns, 1L)\n\n\t\t\ttake = turns * mx[i][j] + k\n\n\t\t\tni = i\n\t\t\tnj = j\n\n\t\t\twhile (ni + 1 < n && a[ni + 1] <= sum + take) ni++\n\t\t\twhile (nj + 1 < m && b[nj + 1] <= sum + take) nj++\n\n\t\t\t// println(\"trying boost at ($i,$j) boost $boost sum $sum with mx: ${mx[i][j]} turns: $turns take: $take ni: $ni nj: $nj\")\n\n\t\t\tans = min(ans, turns + go(ni, nj, false, sum + take))\n\t\t}\n\n\t\treturn ans\n\t}\n\n\tvar iinit = 0\n\tvar jinit = 0\n\twhile (iinit + 1 < n && a[iinit + 1] == 0L)\n\t\tiinit++\n\twhile (jinit + 1 < m && b[jinit + 1] == 0L)\n\t\tjinit++\n\t\n\tkoi.println(go(iinit, jinit, true, 0))\n}\n\nfun main() {\n    val koi = FastIO()\n\n    // val t = koi.nextInt(); for (i in 1..t)\n    solve(koi)\n\n    koi.close()\n}\n\nclass FastIO: PrintWriter(System.out) {\n    val br = BufferedReader(InputStreamReader(System.`in`))\n    var st = StringTokenizer(\"\")\n\n    fun next(): String {\n        while (!st.hasMoreTokens()) st = StringTokenizer(br.readLine())\n        return st.nextToken()\n    }\n\n    fun nextInt() = next().toInt()\n    fun nextLong() = next().toLong()\n    fun nextDouble() = next().toDouble()\n\n    fun nextInt2() = nextInt() then nextInt()\n    fun nextInt3() = nextInt() then nextInt() then nextInt()\n}\n\ninfix fun <T1, T2> T1.then(t2: T2) = Pair(this, t2)\ninfix fun <T1, T2, T3> Pair<T1, T2>.then(t3: T3) = Triple(this.first, this.second, t3);\n"
}