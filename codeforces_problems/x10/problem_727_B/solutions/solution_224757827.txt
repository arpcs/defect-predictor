{
    "id": 224757827,
    "contestId": 727,
    "creationTimeSeconds": 1695478415,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 727,
        "index": "B",
        "name": "Bill Total Value",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1600,
        "tags": [
            "expression parsing",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 727,
        "members": [
            {
                "handle": "zen.L"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1476522300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n\n//#define TxtIO   freopen(\"input.txt\",\"r\",stdin); freopen(\"output.txt\",\"w\",stdout);\n \nusing namespace std;\n\ntypedef long long ll;\n\nstruct Item { \n\tll d, c;\n\tItem(ll d_, ll c_) : d(d_), c(c_) {}\n};\n\nstring s;\n\n\nItem parse_numb(string n_) {\n\tint d = 0, c = 0;\n\tint i_ = n_.size()-1, t = 0;\n\twhile (i_ >= 0 && n_[i_] != '.') { t++, i_--; }\n\tif (i_ >= 0) {\n\t\tif (t == 2) {\n\t\t\tc = (n_[n_.size()-2]-'0')*10+(n_[n_.size()-1]-'0');\n\t\t\tfor (int j_ = 0; j_<i_; j_++) {\n\t\t\t\tif (n_[j_] == '.') continue;\n\t\t\t\td = d*10+(n_[j_]-'0');\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor (int j_=0; j_<n_.size(); j_++) {\n\t\t\t\tif (n_[j_] == '.') continue;\n\t\t\t\td = d*10+(n_[j_]-'0');\n\t\t\t}\n\t\t}\n\t}\n\telse {\t\n\t\tfor (int j_=0; j_<n_.size(); j_++) {\n\t\t\td = d*10+(n_[j_]-'0');\n\t\t}\n\t}\n\treturn Item(d, c);\n}\n\n\nstring format_numb(ll d_, ll c_) {\n\tstring _ret = \"\", ds_ = to_string(d_), cs_ = to_string(c_), tmp;\n\tint i_ = ds_.size()-1;\n\twhile (i_ >= 0) {\n\t\tif (i_ > 1) {\n\t\t\ttmp = ds_.substr(i_-2, 3);\n\t\t\treverse(tmp.begin(), tmp.end());\n\t\t\t_ret += tmp;\n\t\t\ti_ -= 3;\n\t\t\tif (i_ >= 0) _ret += \".\";\n\t\t}\n\t\telse {\n\t\t\ttmp = ds_.substr(0, i_+1);\n\t\t\treverse(tmp.begin(), tmp.end());\n\t\t\t_ret += tmp;\n\t\t\ti_ = -1;\n\t\t}\n\t}\n\treverse(_ret.begin(), _ret.end());\n\tif (c_ > 0) { \n\t\t_ret += \".\";\n\t\tif (c_ < 10) _ret += \"0\";\n\t\t_ret += cs_;\n\t}\n\treturn _ret;\n}\n\n\nint main() {\n\t//TxtIO;\n\t//ios_base::sync_with_stdio(false);  ** improve the performance of I/O \n\t//cin.tie(NULL);\n\tcin >> s;\n\tint i = 0;\n\tll d = 0, c = 0;\n\twhile (i < s.size()) {\n\t\tif (isdigit(s[i])) {\n\t\t\tstring cur = \"\";\n\t\t\twhile (i<s.size() && (isdigit(s[i]) || s[i] == '.')) { cur += s[i]; i++; }\n\t\t\tauto ret = parse_numb(cur);\n\t\t\td += ret.d, c += ret.c;\n\t\t\tif (c >= 100) { d++, c %= 100; }\n\t\t}\n\t\telse i++;\n\t}\n\tcout << format_numb(d, c) << endl;\n}\n"
}