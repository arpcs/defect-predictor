{
    "id": 210223096,
    "contestId": 150,
    "creationTimeSeconds": 1687166717,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 150,
        "index": "A",
        "name": "Win or Freeze",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1400,
        "tags": [
            "games",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 150,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1329490800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"no-stack-protector\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native\")\n#pragma GCC optimize(\"fast-math\")\n\n#include <bits/stdc++.h>\n\n\n#define Bekabot ios_base::sync_with_stdio(NULL);cin.tie(0);cout.tie(0);\n#define int long long\nconst int N = 1e5 + 78;\nusing namespace std;\n\nstring trans(int n , int k){\n    string s = \"\";\n    while(n != 0){\n        int d = n % k;\n        if(d < 10){\n            s = to_string(d) + s;\n        }\n        else{\n            s = char(d + 'A' - 10) + s;\n        }\n        n /= k;\n    }\n    return s;\n}\nvoid solve(){\n\tint x , cnt = 0;\n\tcin >> x;\n\tvector<int> v;\n\tfor(int i = 2 ; i <= sqrt(x) ; i++){\n\t\tif(x % i == 0){\n\t\t\tv.push_back(i);\n\t\t\tcnt++;\n\t\t\tx /= i;\n\t\t\ti--;\n\t\t}\n\t\tif(cnt == 2)break;\n\t}\n\tif(x != 1)v.push_back(x);\n\tsort(v.begin() , v.end());\n\tif(v.size() <= 2){\n\t\tif(v.size() == 0)cout << 1 << '\\n' << 0;\n\t\telse cout << 2;\n\t}\n\telse cout << 1 << '\\n' << v[0] * v[1];\n}\n\nmain(){\n    Bekabot\n    int t = 1;\n    //cin >> t;\n    while(t--){\n\t\tsolve();\n\t}\n}\n\t\t  \t \t \t\t\t\t\t \t  \t\t\t  \t\t    \t"
}