{
    "id": 206405303,
    "contestId": 280,
    "creationTimeSeconds": 1684473127,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 280,
        "index": "C",
        "name": "Game on Tree",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "implementation",
            "math",
            "probabilities",
            "trees"
        ]
    },
    "author": {
        "contestId": 280,
        "members": [
            {
                "handle": "2100030089cse"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1362929400
    },
    "programmingLanguage": "GNU C11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdbool.h>\r\n#include <queue>\r\n\r\n#define MAX_N 100000\r\n\r\nint main() {\r\n    int n;\r\n    scanf(\"%d\", &n);\r\n\r\n    int* adj[MAX_N + 1];\r\n    for (int i = 0; i <= n; i++) {\r\n        adj[i] = (int*)malloc(sizeof(int));\r\n    }\r\n\r\n    for (int i = 0; i < n - 1; i++) {\r\n        int a, b;\r\n        scanf(\"%d %d\", &a, &b);\r\n        adj[a] = (int*)realloc(adj[a], sizeof(int) * (adj[a][0] + 2));\r\n        adj[b] = (int*)realloc(adj[b], sizeof(int) * (adj[b][0] + 2));\r\n        adj[a][adj[a][0] + 1] = b;\r\n        adj[b][adj[b][0] + 1] = a;\r\n        adj[a][0]++;\r\n        adj[b][0]++;\r\n    }\r\n\r\n    std::queue<int> bfs;\r\n    std::queue<double> depth;\r\n    std::queue<int> parent;\r\n    bfs.push(1);\r\n    depth.push(1.0);\r\n    parent.push(-1);\r\n    double ans = 0.0;\r\n    while (!bfs.empty()) {\r\n        int curr = bfs.front();\r\n        double d = depth.front();\r\n        ans += 1.0 / d;\r\n        bfs.pop();\r\n        depth.pop();\r\n        for (int i = 1; i <= adj[curr][0]; i++) {\r\n            if (adj[curr][i] != parent.front()) {\r\n                bfs.push(adj[curr][i]);\r\n                depth.push(d + 1.0);\r\n                parent.push(curr);\r\n            }\r\n        }\r\n        parent.pop();\r\n    }\r\n    printf(\"%.10f\\n\", ans);\r\n\r\n    for (int i = 0; i <= n; i++) {\r\n        free(adj[i]);\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}