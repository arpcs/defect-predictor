{
    "id": 233466056,
    "contestId": 1872,
    "creationTimeSeconds": 1700410326,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1872,
        "index": "G",
        "name": "Replace With Product",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "brute force",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1872,
        "members": [
            {
                "handle": "275503"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694097300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 343,
    "memoryConsumedBytes": 4505600,
    "source": "#include <iostream>\r\n#include \"stdio.h\" \r\n#include <fstream>\r\n#include <string>\r\n#include <algorithm>\r\n#include <cmath>  \r\n#include <vector>\r\nusing namespace std;\r\n \r\n\r\n \r\nint accumulateProduct(const std::vector<int>& arr, int start, int end, const vector<int>& productArr) {\r\n   \r\n    if(start < 0 || end < 0 || start > end  ) return 0;\r\n    if(start == end) return arr[start];\r\n    if(start == 0){\r\n        return productArr[end];\r\n    }\r\n    if(productArr[start-1] != 0){\r\n    return productArr[end]/productArr[start-1];\r\n    }\r\n    int product = 1;\r\n    for (int i = start; i <= end; ++i) {\r\n        product *= arr[i];\r\n    }\r\n    return product;\r\n}\r\n \r\n \r\nint sum(const std::vector<int>& arr, int start, int end, const vector<int>& sumArr) {\r\n   \r\n    if(start < 0 || end < 0 || start > end ) return 0;\r\n    if(start == end) return arr[start];\r\n    if(start == 0){\r\n        return sumArr[end];\r\n    }\r\n    sumArr[end]- sumArr[start-1];\r\n    int product = 0;\r\n    for (int i = start; i <= end; ++i) {\r\n        product += arr[i];\r\n    }\r\n    return product;\r\n}\r\n \r\n \r\nusing namespace std;\r\nint main(){\r\n \r\n    int nLines =0;\r\n    int score = 0;\r\n   \r\n    \r\n    cin>>nLines;\r\n    int nInputsPerLine = 0;\r\n    int x;\r\n    int l = 0;\r\n    int r = 0;\r\n    vector<int> p;\r\n    while (nLines--) {\r\n        #include <algorithm> // Add this line to include the <algorithm> header\r\n        cin >> nInputsPerLine;\r\n        int size = nInputsPerLine; // Example size\r\n        std::vector<int> sumMatrix(size);\r\n        std::vector<int> productMatrix(size);\r\n        std::vector<int> v(size);\r\n        cin >> v[0];\r\np.clear();\r\n        sumMatrix[0] = v[0];\r\n        productMatrix[0] = v[0];\r\n        for (int i = 1; i < nInputsPerLine; i++) {\r\n            cin >> v[i];\r\n            sumMatrix[i] = sumMatrix[i-1] + v[i];\r\n            productMatrix[i] = productMatrix[i-1] * v[i];\r\n        }\r\nfor(int i=1;i<= nInputsPerLine;i++) if(v[i]>=2) p.push_back(i);\r\n\t\tif(p.size()>60)\r\n\t\t{\r\n\t\t\tprintf(\"%d %d\\n\",p[0],p.back());\r\n\t\t\tcontinue;\r\n\t\t}\r\n        int scoreMax = 0;\r\n        int lmax = 0;\r\n        int rmax = 0;\r\n        for (int l = nInputsPerLine-1; l >= 0; l-- ) {\r\n            for(int r = l; r <nInputsPerLine; r++){\r\n                int a = sum(v, 0, l-1, sumMatrix) ;\r\n                int b = accumulateProduct(v, l, r, productMatrix);\r\n                int c = 0;\r\n                if(r+1<=nInputsPerLine-1){\r\n                c = sum(v, r+1, nInputsPerLine-1, sumMatrix);\r\n                }else{\r\n                    c = 0;\r\n                }\r\n                score = a + b + c;\r\n                    if(score >= scoreMax){\r\n                        scoreMax = score;\r\n                        lmax = l;\r\n                        rmax = r;\r\n            }\r\n            }\r\n        }\r\n        cout << lmax + 1  << \" \" <<  rmax + 1 << endl;\r\n    }\r\n \r\n  \r\n    return 0;\r\n}"
}