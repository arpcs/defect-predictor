{
    "id": 233615865,
    "contestId": 1872,
    "creationTimeSeconds": 1700511003,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1872,
        "index": "G",
        "name": "Replace With Product",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "brute force",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1872,
        "members": [
            {
                "handle": "alvinhsu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1694097300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 819200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n \r\n#ifdef LOCAL\r\n#include \"debug.h\"\r\n#else\r\n#define dbg(...)\r\n#endif\r\n\r\nint main(){\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n \tint t;\r\n \tcin >> t;\r\n \twhile(t--){\r\n \t\tint n;\r\n \t\tcin >> n;\r\n \t\tvector<int> v(n);\r\n \t\tvector<pair<int,int>> pos;\r\n \t\tlong long prod = 1;\r\n \t\tbool useWhole = false;\r\n \t\tint l = 0, r = n-1;\r\n \t\twhile(l < r && v[l] == 1) l++;\r\n \t\twhile(l < r\t&& v[r] == 1) r--;\r\n \t\tfor (int i = 0; i < n; i++){\r\n \t\t\tcin >> v[i];\r\n \t\t\tif (LLONG_MAX / v[i] <= prod) {\r\n \t\t\t\tuseWhole = true;\r\n \t\t\t\tbreak;\r\n \t\t\t}\r\n \t\t\tif (v[i] != 1){\r\n \t\t\t\tpos.push_back({v[i], i+1});\r\n \t\t\t}\r\n \t\t\tprod *= v[i];\r\n \t\t}\r\n \t\tif (useWhole){\r\n \t\t\tcout << l+1 << \" \" << r+1 << '\\n';\r\n \t\t\tcontinue;\r\n \t\t}\r\n \t\tassert(pos.size() <= 100);\r\n \t\tvector<long long> pref(n+1);\r\n \t\tfor (int i = 0; i < n; i++){\r\n \t\t\tpref[i+1] = pref[i] + v[i];\r\n \t\t}\r\n \t\tvector<long long> prefMult(n+1, 1);\r\n \t\tfor (int i = 0; i < n; i++){\r\n \t\t\tprefMult[i+1] = prefMult[i] * v[i];\r\n \t\t}\r\n \t\t// dbg(prefMult);\r\n \t\tl = 1, r = 1;\r\n \t\tlong long best = 0;\r\n \t\tfor (int i = 0; i < pos.size(); i++){\r\n \t\t\tfor (int j = i; j < pos.size(); j++){\t\r\n \t\t\t\tauto [val1,idx1] = pos[i];\r\n \t\t\t\tauto [val2,idx2] = pos[j];\r\n \t\t\t\tassert(prefMult[idx2]%prefMult[idx1-1] == 0);\r\n \t\t\t\t// dbg(idx2, idx1-1, prefMult[idx2] / prefMult[idx1-1]);\r\n \t\t\t\tlong long sum = pref[n] - (pref[idx2] - pref[idx1-1]) +  (prefMult[idx2] / prefMult[idx1-1]);\r\n \t\t\t\t// dbg(sum);\r\n \t\t\t\tif (sum > best){\r\n \t\t\t\t\tl = idx1, r = idx2;\r\n \t\t\t\t\tbest = sum;\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t}\r\n \t\t// dbg(best);\r\n \t\tcout << l << \" \" << r << '\\n';\r\n \t}\r\n    return 0;\r\n}"
}