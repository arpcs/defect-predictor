{
    "id": 213239014,
    "contestId": 79,
    "creationTimeSeconds": 1689061426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 79,
        "index": "C",
        "name": "Beaver",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "hashing",
            "strings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 79,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1304175600
    },
    "programmingLanguage": "Clang++20 Diagnostics",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n\nvector<int> kmp(const string &s, const string &p) {\n    vector<int> next(p.size(), -1);\n    for (int i = 1, j = -1; i < p.size(); ++i) {\n        while (j >= 0 && p[i] != p[j + 1]) {\n            j = next[j];\n        }\n        if (p[i] == p[j + 1]) {\n            ++j;\n        }\n        next[i] = j;\n    }\n    vector<int> res;\n    for (int i = 0, j = -1; i < s.size(); ++i) {\n        while (j >= 0 && s[i] != p[j + 1]) {\n            j = next[j];\n        }\n        if (s[i] == p[j + 1]) {\n            ++j;\n        }\n        if (j == p.size() - 1) {\n            res.push_back(i - j);\n            j = next[j];\n        }\n    }\n    return res;\n}\n\nint main() {\n    string s;\n    cin >> s;\n    int n;\n    cin >> n;\n    string b[10];\n    vector<int> pos(s.size(), s.size());\n    for (int i = 0; i < n; ++i) {\n        cin >> b[i];\n        vector<int> res = kmp(s, b[i]);\n        for (int j : res) {\n            pos[j] = min(pos[j], j + (int)b[i].size());\n        }\n    }\n    int max_len = 0, start = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        start = max(start, pos[i]);\n        max_len = max(max_len, start - i);\n    }\n    cout << max_len << \" \" << s.substr(0, max_len).find_last_not_of(' ') + 1 << endl;\n    return 0;\n}\n\n  \t    \t \t \t  \t\t\t    \t\t  \t\t\t\t\t"
}