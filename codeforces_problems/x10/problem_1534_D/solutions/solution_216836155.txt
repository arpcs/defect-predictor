{
    "id": 216836155,
    "contestId": 1534,
    "creationTimeSeconds": 1690974421,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1534,
        "index": "D",
        "name": "Lost Tree",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "interactive",
            "trees"
        ]
    },
    "author": {
        "contestId": 1534,
        "members": [
            {
                "handle": "javiergm06"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1623598500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 130,
    "timeConsumedMillis": 1746,
    "memoryConsumedBytes": 204800,
    "source": "\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n\r\n\r\n\r\nsigned main()\r\n{\r\n    int n; cin >> n;\r\n    cout << \"? \" << 1 << endl;\r\n    vector<int> a(n);\r\n    set<int> odd, even;\r\n    vector<pair<int, int>> g;\r\n    for (int i = 0; i < n; i++){\r\n        cin >> a[i];\r\n        if (a[i] == 0) continue;\r\n        \r\n        if (a[i] == 1) g.push_back({0, i});\r\n        \r\n        if (a[i] % 2 == 0) even.insert(i);\r\n        else odd.insert(i);\r\n    }\r\n\r\n    //even.s < n/2\r\n    if (even.size() < odd.size()){\r\n        for (int x : even){\r\n            cout << \"? \" << x + 1 << endl;\r\n            for (int i = 0; i < n; i++){\r\n                cin >> a[i];\r\n                if (a[i] == 1) g.push_back({x, i});\r\n            }\r\n        }\r\n    }else{\r\n        for (int x : odd){\r\n            cout << \"? \" << x + 1 << endl;\r\n            for (int i = 0; i < n; i++){\r\n                cin >> a[i];\r\n                if (a[i] == 1 && i != 0) g.push_back({x, i});\r\n            }\r\n        }\r\n    }\r\n    cout << '!' << endl;\r\n    for (int i = 0; i < g.size(); i++){\r\n        cout << g[i].first + 1 << ' ' << g[i].second + 1 << endl;\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    \r\n}\r\n\r\n"
}