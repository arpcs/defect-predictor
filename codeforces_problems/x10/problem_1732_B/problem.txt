{
    "contestId": 1732,
    "index": "B",
    "name": "Ugu",
    "type": "PROGRAMMING",
    "points": 750.0,
    "rating": 900,
    "tags": [
        "brute force",
        "dp",
        "greedy",
        "implementation"
    ],
    "desc": {
        "title": "B. Ugu",
        "statement": "<p>A binary string is a string consisting only of the characters <span class=\"tex-font-style-tt\">0</span> and <span class=\"tex-font-style-tt\">1</span>. You are given a binary string $$$s_1 s_2 \\ldots s_n$$$. It is necessary to make this string non-decreasing in the least number of operations. In other words, each character should be not less than the previous. In one operation, you can do the following:</p><ul><li> Select an arbitrary index $$$1 \\leq i \\leq n$$$ in the string;</li><li> For all $$$j \\geq i$$$, change the value in the $$$j$$$-th position to the opposite, that is, if $$$s_j = 1$$$, then make $$$s_j = 0$$$, and vice versa.</li></ul><p>What is the minimum number of operations needed to make the string non-decreasing?</p>",
        "inputSpecification": "<p>Each test consists of multiple test cases. The first line contains an integer $$$t$$$ ($$$1 \\leq t \\leq 10^4$$$) \u2014 the number of test cases. The description of test cases follows.</p><p>The first line of each test cases a single integer $$$n$$$ ($$$1 \\leq n \\leq 10^5$$$) \u2014 the length of the string.</p><p>The second line of each test case contains a binary string $$$s$$$ of length $$$n$$$.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, output a single integer \u2014 the minimum number of operations that are needed to make the string non-decreasing.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">8</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">101</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1100</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">11001</div><div class=\"test-example-line test-example-line-even test-example-line-6\">6</div><div class=\"test-example-line test-example-line-even test-example-line-6\">100010</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-7\">0000110000</div><div class=\"test-example-line test-example-line-even test-example-line-8\">7</div><div class=\"test-example-line test-example-line-even test-example-line-8\">0101010</div>",
                "output": "\n0\n1\n2\n1\n2\n3\n1\n5\n"
            }
        ],
        "note": "<p>In the first test case, the string is already non-decreasing.</p><p>In the second test case, you can select $$$i = 1$$$ and then $$$s = \\mathtt{01}$$$.</p><p>In the third test case, you can select $$$i = 1$$$ and get $$$s = \\mathtt{010}$$$, and then select $$$i = 2$$$. As a result, we get $$$s = \\mathtt{001}$$$, that is, a non-decreasing string.</p><p>In the sixth test case, you can select $$$i = 5$$$ at the first iteration and get $$$s = \\mathtt{100001}$$$. Then choose $$$i = 2$$$, then $$$s = \\mathtt{111110}$$$. Then we select $$$i = 1$$$, getting the non-decreasing string $$$s = \\mathtt{000001}$$$.</p>"
    }
}