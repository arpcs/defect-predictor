{
    "id": 232930899,
    "contestId": 1353,
    "creationTimeSeconds": 1700116880,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1353,
        "index": "D",
        "name": "Constructing the Array",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "constructive algorithms",
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1353,
        "members": [
            {
                "handle": "bkifhr8"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1589466900
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "import java.io.BufferedInputStream;\nimport java.util.PriorityQueue;\nimport java.util.Queue;\nimport java.util.Scanner;\n\npublic class Main {\n    static class Node implements Comparable<Node> {\n        int l;\n        int len;\n\n        public Node(int l, int len) {\n            this.l = l;\n            this.len = len;\n        }\n        int  ll=len-l+1;\n        @Override\n        public int compareTo(Node other) {\n            if (this.ll != other.ll) {\n                return other.ll - this.ll;\n            } else return this.l - other.l;\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(new BufferedInputStream(System.in));\n        int t = in.nextInt();\n        while (t-- > 0) {\n            int n = in.nextInt();\n            int[] arr = new int[n + 1];\n            Queue<Node> que = new PriorityQueue<>();\n            que.add(new Node(1, n));\n            int id = 0;\n            while (!que.isEmpty()) {\n                Node node = que.poll();\n\n                int l = node.l;\n                int r = node.len;\n\n                int mid = l + r >> 1;\n                arr[mid]=++id;\n                if (l==r)continue;\n                if (mid-1>=l)que.add(new Node(l,mid-1));\n                if (mid+1<=r)que.add(new Node(mid+1,r));\n            }\n            for (int i = 1; i <=n ; i++) {\n                System.out.print(arr[i]+\" \");\n            }\n            System.out.println();\n\n        }\n    }\n}\n \t   \t  \t\t \t \t   \t\t  \t\t\t \t \t"
}