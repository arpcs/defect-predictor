{
    "id": 228182284,
    "contestId": 1353,
    "creationTimeSeconds": 1697293341,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1353,
        "index": "D",
        "name": "Constructing the Array",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "constructive algorithms",
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1353,
        "members": [
            {
                "handle": "hetanhnandre"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1589466900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 14540800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nconst int mod=998244353;\r\nconst int INF = 1e9;\r\n \r\n/*/---------------------------------------------------------------------------------------------------------/*/\r\n\r\nstruct custom_hash {\r\n        static uint64_t splitmix64(uint64_t x) {\r\n                // http://xorshift.di.unimi.it/splitmix64.c\r\n                x += 0x9e3779b97f4a7c15;\r\n                x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n                x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n                return x ^ (x >> 31);\r\n        }\r\n \r\n        size_t operator()(uint64_t x) const {\r\n                static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n                return splitmix64(x + FIXED_RANDOM);\r\n        }\r\n};\r\n  \r\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> \r\nistream& operator >> (istream &is, T_container &v) { \r\n        for(T &x : v) is >> x; return is;\r\n}\r\n#ifdef __SIZEOF_INT128__\r\nostream& operator << (ostream &os, __int128 const& value){\r\n        static char buffer[64];\r\n        int index = 0;\r\n        __uint128_t T = (value < 0) ? (-(value + 1)) + __uint128_t(1) : value;\r\n        if (value < 0) \r\n            os << '-';\r\n        else if (T == 0)\r\n            return os << '0';\r\n        for(; T > 0; ++index){\r\n            buffer[index] = static_cast<char>('0' + (T % 10));\r\n            T /= 10;\r\n        }    \r\n        while(index > 0)\r\n            os << buffer[--index];\r\n        return os;\r\n}\r\nistream& operator >> (istream& is, __int128& T){\r\n        static char buffer[64];\r\n        is >> buffer;\r\n        size_t len = strlen(buffer), index = 0;\r\n        T = 0; int mul = 1;\r\n        if (buffer[index] == '-')\r\n            ++index, mul *= -1;\r\n        for(; index < len; ++index)\r\n            T = T * 10 + static_cast<int>(buffer[index] - '0');\r\n        T *= mul;    \r\n        return is;\r\n}\r\n#endif\r\n \r\ntemplate<typename A, typename B> \r\nostream& operator<<(ostream &os, const pair<A, B> &p) { \r\n        return os << '(' << p.first << \", \" << p.second << ')'; \r\n}\r\n \r\ntemplate<typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type> \r\nostream& operator << (ostream &os, const T_container &v) { \r\n        os << '{'; string sep; \r\n        for (const T &x : v) os << sep << x, sep = \", \"; \r\n        return os << '}'; \r\n}\r\ntemplate<class P, class Q = vector<P>, class R = less<P> > ostream& operator << (ostream& out, priority_queue<P, Q, R> const& M){\r\n        static priority_queue<P, Q, R> U;\r\n        U = M;\r\n        out << \"{ \";\r\n        while(!U.empty())\r\n                out << U.top() << \" \", U.pop();\r\n        return (out << \"}\");\r\n \r\n}\r\ntemplate<class P> ostream& operator << (ostream& out, queue<P> const& M){\r\n        static queue<P> U;\r\n        U = M;\r\n        out << \"{\"; string sep;\r\n        while(!U.empty()){\r\n                out << sep << U.front(); sep = \", \"; U.pop();\r\n        }\r\n        return (out << \"}\");\r\n}\r\n \r\n \r\n#define TRACE\r\n#ifdef TRACE\r\n        #define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)\r\n        template <typename Arg1>\r\n        void __f(const char* name, Arg1&& arg1){\r\n                cerr << name << \" : \" << arg1 << endl;\r\n        }\r\n        template <typename Arg1, typename... Args>\r\n        void __f(const char* names, Arg1&& arg1, Args&&... args){\r\n                int count_open = 0, len = 1;\r\n                for(int k = 1; ; ++k){\r\n                        char cur = *(names + k);\r\n                        count_open += (cur == '(' ? 1 : (cur == ')' ? -1: 0));\r\n                        if (cur == ',' && count_open == 0){\r\n                               const char* comma = names + k;\r\n                               cerr.write(names, len) << \" : \" << arg1 << \" | \";\r\n                               __f(comma + 1, args...);\r\n                               return;\r\n                        }\r\n                        len = (cur == ' ' ? len : k + 1);\r\n                }\r\n        }\r\n#else\r\n        #define trace(...) 1\r\n#endif\r\n \r\n/* ----------------------------------------------------- GO DOWN ---------------------------------------------------------------------- */\r\n\r\nsigned main(){\r\n \r\n        ios::sync_with_stdio(0);\r\n        cin.tie(0);\r\n        cout.tie(0);\r\n        \r\n\r\n        int t;\r\n        cin >> t;\r\n         \r\n        while (t--) {\r\n                 \r\n\r\n                set<tuple<int, int, int>> lens;\r\n                int n;\r\n                cin >> n;\r\n                lens.emplace(-n, 0, n);\r\n                vector<int> ans(n);\r\n                for (int i = 0; i < n; i++) {\r\n                        auto [len, l, r] = *lens.begin();\r\n                        lens.erase(lens.begin());\r\n                        int m = (l + r - 1) >> 1;\r\n                        ans[m] = i + 1;\r\n                        lens.emplace(-(m - l), l, m);\r\n                        lens.emplace(-(r - m - 1), m + 1, r);\r\n                }\r\n                for (int i = 0; i < n; i++) {\r\n                        cout << ans[i] << ' ';\r\n                }\r\n                cout << endl;       \r\n                        \r\n        }\r\n\r\n                \r\n\r\n        return 0;\r\n\r\n\r\n}\r\n\r\n"
}