{
    "id": 217145682,
    "contestId": 1118,
    "creationTimeSeconds": 1691166017,
    "relativeTimeSeconds": 7877,
    "problem": {
        "contestId": 1118,
        "index": "C",
        "name": "Palindromic Matrix",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1118,
        "members": [
            {
                "handle": "MrDeeb"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1691158140
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define endl \"\\n\"\n#define ll long long\n#define ld long double\n#define F first\n#define S second\n#define vll vector<long long>\n#define pb push_back\n#define all(v) v.begin(), v.end()\n///////////////////////////////////\nconst ll N = 11;\nconst ll M = 998244353;\nconst ll MAX = 1e18;\nconst ld EPS = 1e-19;\nll pow(ll x, ll y) {\n    ll ans{1};\n    while(y) {\n        if(y&1) ans *= x;\n        x *= x;\n        y /= 2;\n    }\n    return ans;\n}\nll big_pow(ll x, ll y) {\n    ll ans{1};\n    while(y) {\n        if(y&1) ans = ((ans%M)*(x%M)) % M;\n        x = ((x%M) * (x%M)) %M;\n        y/=2;\n    }\n    return ans;\n}\nbool is_int(ld num) {\n    return num == (ll)num;\n}\nint cmp_d(ld a, ld b) {\n    if(fabs(a-b) <= EPS) return -1;\n    return a>b? 1:0;\n}\nll mod(ll x, ll m){\n    return (x%m +m) % m;\n}\n///////////////////////////////////////////////// ===== Solution ===== /////////////////////////////////////////////////\nll n,x;\nvoid fill(vector<vll> &grid, ll dig, ll cnt) {\n    ll times{cnt}; // upper_left corner\n    for(ll i{}; i<x; i++)\n        for(ll j{}; j<x; j++) {\n            if(!grid[i][j] && times)\n                grid[i][j]=dig, times--;\n        }\n\n    times=cnt; // upper_right corner\n    for(ll i{},k1{}; k1<x; i++,k1++)\n        for(ll j{n-1}, k2{}; k2<x; j--,k2++) {\n            if(!grid[i][j] && times)\n                grid[i][j]=dig, times--;\n        }\n\n    times=cnt; // down_left corner\n    for(ll i{n-1},k1{}; k1<x; i--,k1++)\n        for(ll j{},k2{}; k2<x; j++,k2++) {\n            if(!grid[i][j] && times)\n                grid[i][j]=dig, times--;\n        }\n\n    times=cnt; // down_right corner\n    for(ll i{n-1},k1{}; k1<x; i--,k1++)\n        for(ll j{n-1},k2{}; k2<x; j--,k2++) {\n            if(!grid[i][j] && times)\n                grid[i][j]=dig, times--;\n        }\n}\nvoid fill_center(vector<vll> &grid, ll dig, ll cnt) {\n    ll times{cnt}; // up\n    for(ll i{},j{n/2}; i<n/2; i++)\n        if(!grid[i][j] && times)\n            grid[i][j]=dig, times--;\n\n    times=cnt; // down\n    for(ll i{n-1},j{n/2}; i>n/2; i--)\n        if(!grid[i][j] && times)\n            grid[i][j]=dig, times--;\n\n    times=cnt; // left\n    for(ll i{},j{n/2}; i<n/2; i++)\n        if(!grid[j][i] && times)\n            grid[j][i]=dig, times--;\n\n    times=cnt; // right\n    for(ll i{n-1},j{n/2}; i>n/2; i--)\n        if(!grid[j][i] && times)\n            grid[j][i]=dig, times--;\n}\nvoid fast() {\n    cin >> n;\n    map<ll,ll>f;\n    vll v(n*n); for(auto &i:v) cin >> i, f[i]++;\n\n    vector<vll> grid(n,vll(n));\n    bool cool{true};\n    if(n%2==0) {\n        for(auto &i:f) if(i.S%4) cool=false;\n        if(!cool) {cout << \"NO\"; return;}\n\n        x = sqrt((n*n)/4);\n        for(auto p:f) fill(grid,p.F,p.S/4);\n    }\n    else {\n        map<ll,ll> rem;\n        x = sqrt((n*n)/4);\n        ll x_remaining_space{x};\n        for(auto p:f) {\n            if(x_remaining_space) {\n                ll mn = min(p.S/4, x_remaining_space);\n                fill(grid,p.F,mn);\n                x_remaining_space -= mn;\n                if(p.S%4) rem[p.F] = p.S%4;\n            }\n            else rem[p.F]=p.S;\n        }\n        ll not_div{};\n        for(auto p:rem)\n            if(p.S%4) not_div++;\n\n        if(not_div != 1) {cout << \"NO\"; return;}\n        // filling\n        else for(auto p:rem) fill_center(grid,p.F,p.S/4);\n        for(auto p:rem)\n            if(p.S==1) {grid[n/2][n/2]=p.F; break;}\n    }\n\n    cout << \"YES\\n\";\n    for(auto &r:grid)  {\n        for(auto &c:r) cout << c << \" \";\n        cout << endl;\n    }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nint main() { IOS\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\n#endif\n    ll tc{1};\n//    cin >> tc;\n    for(ll i{1}; i<=tc; i++) {\n//        cout << \"Case \" << i << \": \";\n        fast();\n//        cout << endl;\n    }\n}\n"
}