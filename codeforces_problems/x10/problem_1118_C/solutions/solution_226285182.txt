{
    "id": 226285182,
    "contestId": 1118,
    "creationTimeSeconds": 1696246403,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1118,
        "index": "C",
        "name": "Palindromic Matrix",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1118,
        "members": [
            {
                "handle": "snehasreey"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1550586900
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\nusing namespace std;\r\nint main()\r\n{\r\n\tint n,i,index;\r\n\tcin>>n;\r\n\tif(n==1)\r\n\t{\r\n\t    cin>>i;\r\n\t    cout<<\"YES\"<<endl;\r\n\t    cout<<i;\r\n\t}\r\n\telse\r\n\t{\r\n\t    int  n2=n*n; \r\n\t    int pairs=(n2-n)/2;\r\n        int num[n2]; int d[n]; int nd[pairs]; int a[n][n];\r\n\t    for(i=0;i<n2;i++)\r\n\t        cin>>num[i];\r\n\t    // input non diagonal elements in nd[]\r\n\t    index=0;\r\n\t    for(i=0;i<n2;i++)\r\n\t    {\r\n\t        if(num[i]!=-1)\r\n\t        {\r\n\t            for(int j=i+1;j<n2;j++)\r\n\t            {\r\n\t                if(num[i]==num[j]&& index<pairs)\r\n\t                {\r\n\t                    nd[index++]=num[i];\r\n\t                    num[i]=num[j]=-1;\r\n\t                    break;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    //check if pairs exist\r\n\t    if(index!=pairs)\r\n\t    cout<<\"NO\"<<endl;\r\n\t    //if pairs present take diagonal elements\r\n\t    else\r\n\t    {\r\n\t        //initialize all a[][] elements to -1\r\n\t        for(i=0;i<n;i++)\r\n\t        for(int j=0;j<n;j++)\r\n\t            a[i][j]=-1;\r\n\t        //input diagonal elements in d[]\r\n\t        index=0;\r\n\t        for(i=0;i<n2;i++)\r\n\t        {\r\n\t            if(num[i]!=-1&&index<n)\r\n\t            d[index++]=num[i];\r\n\t            num[i]=-1;\r\n\t        }\r\n\t        // assign diagonal elements in a[][]\r\n\t        index=0;\r\n\t        while(index<n)\r\n\t        {\r\n\t            a[index][index]=d[index];\r\n\t            index++;\r\n\t        }\r\n\t        //assign non diagonal elements in a[][]\r\n\t        index=0;\r\n\t        for(i=0;i<n;i++)\r\n\t        {\r\n\t            for(int j=0;j<n;j++)\r\n\t            {\r\n\t                //non diagonal,not assigned and elements are present in nd[]\r\n\t                if(i!=j && a[i][j]==-1 && index<pairs)\r\n\t                    a[i][j]=a[j][i]=nd[index++];\r\n\t            }\r\n\t        }\r\n\t        // print matrix a[][]\r\n\t        cout<<\"YES\"<<endl;\r\n\t        for(i=0;i<n;i++)\r\n\t        {\r\n\t            for(int j=0;j<n;j++)\r\n\t            cout<<a[i][j]<<\" \";\r\n\t            cout<<endl;\r\n\t        }\r\n\t    }\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}