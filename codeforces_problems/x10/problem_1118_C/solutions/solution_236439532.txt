{
    "id": 236439532,
    "contestId": 1118,
    "creationTimeSeconds": 1702089798,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1118,
        "index": "C",
        "name": "Palindromic Matrix",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1118,
        "members": [
            {
                "handle": "Pocochuk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1550586900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n  int n;\r\n  cin >> n;\r\n  // nothin has change\r\n  int times[1001];\r\n\r\n  for (int i = 0; i <= 1000; i++)\r\n    times[i] = 0;\r\n\r\n  int matrix[n][n];\r\n  for (int i = 0; i < n * n; i++) {\r\n    int aux;\r\n    cin >> aux;\r\n\r\n    times[aux]++;\r\n  }\r\n\r\n  if (n % 2 == 0) {\r\n    int need4 = (n * n) / 4;\r\n    int response4[need4];\r\n    int pointer4 = 0;\r\n\r\n    for (int i = 1; i <= 1000; i++) {\r\n      if (need4 == 0) {\r\n        break;\r\n      } else {\r\n        int quotient;\r\n        quotient = times[i] / 4;\r\n        int used = min(quotient, need4);\r\n\r\n        times[i] -= used * 4;\r\n        need4 -= used;\r\n\r\n        for (int j = 0; j < used; j++) {\r\n          response4[pointer4] = i;\r\n          pointer4++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (need4 != 0) {\r\n      cout << \"NO\" << endl;\r\n      return 1;\r\n    }\r\n\r\n    int response[n][n];\r\n\r\n    for (int i = 0; i < ((n * n) / 4); i++) {\r\n      int row = i / (n / 2);\r\n      int column = i % (n / 2);\r\n      response[row][column] = response4[i];\r\n      response[row][n - 1 - column] = response4[i];\r\n      response[n - 1 - row][column] = response4[i];\r\n      response[n - 1 - row][n - 1 - column] = response4[i];\r\n    }\r\n\r\n    cout << \"YES\" << endl;\r\n\r\n    for (int i = 0; i < n; i++) {\r\n      for (int j = 0; j < n; j++) {\r\n        cout << response[i][j] << \" \";\r\n      }\r\n      cout << endl;\r\n    }\r\n  } else {\r\n    int need4 = pow((n - 1) / 2, 2);\r\n    int response4[need4];\r\n    int pointer4 = 0;\r\n\r\n    for (int i = 1; i <= 1000; i++) {\r\n      if (need4 == 0) {\r\n        break;\r\n      } else {\r\n        int quotient;\r\n        quotient = times[i] / 4;\r\n        int used = min(quotient, need4);\r\n\r\n        times[i] -= used * 4;\r\n        need4 -= used;\r\n\r\n        for (int j = 0; j < used; j++) {\r\n          response4[pointer4] = i;\r\n          pointer4++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (need4 != 0) {\r\n      cout << \"NO\" << endl;\r\n      return 1;\r\n    }\r\n\r\n    int need2 = n - 1;\r\n    int response2[need2];\r\n    int pointer2 = 0;\r\n\r\n    for (int i = 1; i <= 1000; i++) {\r\n      if (need2 == 0) {\r\n        break;\r\n      } else {\r\n        int quotient;\r\n        quotient = times[i] / 2;\r\n        int used = min(quotient, need2);\r\n\r\n        times[i] -= used * 2;\r\n        need2 -= used;\r\n\r\n        for (int j = 0; j < used; j++) {\r\n          response2[pointer2] = i;\r\n          pointer2++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (need2 != 0) {\r\n      cout << \"NO\" << endl;\r\n      return 1;\r\n    }\r\n\r\n    int alone;\r\n    for (int i = 1; i <= 1000; i++) {\r\n      if (times[i] != 0) {\r\n        alone = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    int response[n][n];\r\n\r\n    int aux4 = (n - 1) / 2;\r\n    for (int i = 0; i < pow((n - 1) / 2, 2); i++) {\r\n      int row = i / aux4;\r\n      int column = i % aux4;\r\n      response[row][column] = response4[i];\r\n      response[n - 1 - row][column] = response4[i];\r\n      response[row][n - 1 - column] = response4[i];\r\n      response[n - 1 - row][n - 1 - column] = response4[i];\r\n    }\r\n\r\n    for (int i = 0; i < n - 1; i++) {\r\n      if (i / ((n - 1) / 2) == 0) {\r\n        response[i][(n - 1) / 2] = response2[i];\r\n        response[n - 1 - (i)][(n - 1) / 2] = response2[i];\r\n      } else {\r\n        response[(n - 1) / 2][i % ((n - 1) / 2)] = response2[i];\r\n        response[(n - 1) / 2][n - 1 - (i % ((n - 1) / 2))] = response2[i];\r\n      }\r\n    }\r\n\r\n    response[(n - 1) / 2][(n - 1) / 2] = alone;\r\n\r\n    cout << \"YES\" << endl;\r\n\r\n    for (int i = 0; i < n; i++) {\r\n      for (int j = 0; j < n; j++) {\r\n        cout << response[i][j] << \" \";\r\n      }\r\n      cout << endl;\r\n    }\r\n  }\r\n}\r\n"
}