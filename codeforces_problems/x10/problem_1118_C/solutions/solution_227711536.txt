{
    "id": 227711536,
    "contestId": 1118,
    "creationTimeSeconds": 1697042733,
    "relativeTimeSeconds": 7233,
    "problem": {
        "contestId": 1118,
        "index": "C",
        "name": "Palindromic Matrix",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1118,
        "members": [
            {
                "handle": "UCATeamOne"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1697035500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint main() {\r\n    ios::sync_with_stdio(0); cin.tie(0);\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    map<int, int> mp;\r\n    for (int i = 0; i < n * n; i++) {\r\n        int x;\r\n        cin >> x;\r\n        mp[x]++;\r\n    }\r\n\r\n    if (n % 2 == 0) {\r\n        for (auto& x : mp) {\r\n            if (x.second & 1 || x.second % 4 != 0) {\r\n                cout << \"NO\\n\";\r\n                return 0;\r\n            }\r\n            x.second /= 2;\r\n        }\r\n\r\n        vector<vector<int>> grid(n, vector<int> (n, 1e9));\r\n        for (int i = 0; i < n / 2; i++) {\r\n            for (int l = 0, r = n - 1; l < r; l++, r--) {\r\n                for (auto& x : mp) {\r\n                    if (x.second > 0) {\r\n                        grid[i][l] = x.first, grid[i][r] = x.first;\r\n                        x.second -= 2;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        int ind = n / 2 - 1;\r\n        for (int i = n / 2; i < n; i++) {\r\n            grid[i] = grid[ind];\r\n            ind--;\r\n        }\r\n\r\n        cout << \"YES\\n\";\r\n        for (auto& vec : grid) {\r\n            for (auto& x : vec) {\r\n                cout << x << ' ';\r\n            }\r\n            cout << '\\n';\r\n        }\r\n    } else {\r\n        vector<vector<int>> grid(n, vector<int> (n, 1e9));\r\n        int cntOdd = 0;\r\n        int sm = 0;\r\n        for (auto& x : mp) {\r\n            if (x.second & 1) {\r\n                cntOdd++;\r\n                grid[n / 2][n / 2] = x.first;\r\n                x.second--;\r\n            }\r\n            if (x.second % 4 != 0) {\r\n                sm += x.second;\r\n            }\r\n        }\r\n        if (cntOdd > 1 || sm > 2 * (n - 1)) {\r\n            cout << \"NO\\n\";\r\n            return 0;\r\n        }\r\n\r\n        for (int i = 0; i < n / 2; i++) {\r\n            for (int l = 0, r = n - 1; l < r; l++, r--) {\r\n                for (auto& x : mp) {\r\n                    if (x.second >= 4) {\r\n                        grid[i][l] = x.first, grid[i][r] = x.first;\r\n                        x.second -= 4;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        int ind = n / 2 - 1;\r\n        for (int i = n / 2 + 1; i < n; i++) {\r\n            grid[i] = grid[ind];\r\n            ind--;\r\n        }\r\n\r\n        for (int l = 0, r = n - 1; l < r; l++, r--) {\r\n            for (auto& x : mp) {\r\n                if (x.second >= 2) {\r\n                    grid[n / 2][l] = x.first, grid[n / 2][r] = x.first;\r\n                    x.second -= 2;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (int l = 0, r = n - 1; l < r; l++, r--) {\r\n            for (auto& x : mp) {\r\n                if (x.second >= 2) {\r\n                    grid[l][n / 2] = x.first, grid[r][n / 2] = x.first;\r\n                    x.second -= 2;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        cout << \"YES\\n\";\r\n        for (auto& vec : grid) {\r\n            for (auto& x : vec) {\r\n                cout << x << ' ';\r\n            }\r\n            cout << '\\n';\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}