{
    "id": 231619733,
    "contestId": 1619,
    "creationTimeSeconds": 1699289326,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1619,
        "index": "A",
        "name": "Square String?",
        "type": "PROGRAMMING",
        "rating": 800,
        "tags": [
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1619,
        "members": [
            {
                "handle": "Jeffrin2005"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1640010900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 7577600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std; \r\n#define ll long long \r\n#define nl '\\n'\r\n#define pb push_back\r\n#define ff first\r\n#define ss second\r\n#define inf 1e18\r\n#define all(v) v.begin(),v.end()\r\ntypedef vector<int> vi;\r\nconst int N = 3e6 + 10;\r\nconst int MX = 1e7+5;\r\nconst int MAXN = 2e5 + 5;\r\n#define Pi 3.14159265359\r\nstring pi = \"314159265358979323846264338327\";\r\n#define rep(i,a,n) for(ll i=a;i<n;i++)\r\n#define MOD 1000000007\r\n#define mod (int )(1e9 + 7)\r\n#define modd 998244353\r\n#define pii pair<int, int>\r\n#define sz size\r\n#define lcm(a , b) (a*b)/(__gcd(a , b))\r\nll mex_kandupiddikyan(vector<ll>A) {\r\n    set<int> b(A.begin(), A.end());\r\n\r\n    int result = 0;\r\n    while (b.count(result))\r\n        ++result;\r\n    return result;\r\n}\r\nll isPalindrome(const std::string& str) {\r\n    for (size_t i = 0; i < str.size() / 2; ++i) {\r\n        if (str[i] != str[str.size() - i - 1]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n ll digitinde_sum(ll n)                                                            \r\n{ \r\n    ll num=0;\r\n    while(n>0)\r\n    {\r\n        num+=n%10;\r\n        n=n/10;\r\n    }\r\n    return num;\r\n}\r\n \r\n// ll leastprimefactor(ll n)      least prime factor                                                                  // LEAST PRIME FACTOR OF A NUMBER\r\n// {\r\n//     for(ll i=2;i*i<=n;i++)\r\n//     {\r\n//         if(n%i==0)\r\n//         {\r\n//             return i;\r\n//             break;\r\n//         }\r\n//     }\r\n//     return n;\r\n// }\r\n\r\nll fact(ll n)                             \r\n{\r\n    ll i=1;\r\n    while(n>1)\r\n    {\r\n        i*=n;\r\n        n-=1;\r\n    }\r\n    return i;\r\n}\r\n\r\n // divisors\r\n \r\n // vector<ll>div;\r\n // for(ll i=1; i*i<=n; i++){\r\n //    if(n%i==0){\r\n //        div.push_back(i);\r\n //        if(i*i != n)\r\n //            div.push_back(n/i);\r\n //    }\r\n // }\r\n// ll pref[MAXN];\r\n\r\n // remvoing specific factors\r\n\r\n  // while(a[i]%2==0){\r\n  //           a[i] = a[i]/2;\r\n  //       }\r\n  //       while(a[i]%3==0){\r\n  //           a[i] = a[i]/3;\r\n  //       }\r\n //odd_divisors\r\n   // vector<ll>odd_divisors;\r\n   //      for(ll i=2; i*i<=n; i++){\r\n   //          if(n%i==0){\r\n   //              if(n/i == i and i%2!=0) odd_divisors.push_back(i);\r\n   //              else{\r\n   //                  if(i%2!=0) odd_divisors.push_back(i);\r\n   //                  if((n/i)%2!=0) odd_divisors.push_back(n/i);\r\n   //              }   \r\n   //          }\r\n   //      }\r\n\r\nint oru_power(int a, int b, int m)\r\n{\r\n  long long res = 1;\r\n  while (b)\r\n  {\r\n    if (b & 1)\r\n      res = res * a;\r\n    res %= m;\r\n    a = (1ll * a * a) % m;\r\n    b = b >> 1;\r\n  }\r\n  return res;\r\n}\r\n \r\n \r\nvoid ith_divisors(int n){\r\n    for (int i=1; i<=sqrt(n); i++)// for(ll i=1; i*i<=n; i++)\r\n    {if (n%i == 0)\r\n        { if (n/i == i)\r\n                cout <<\" \"<< i;\r\n  \r\n            else \r\n                cout << \" \"<< i << \" \" << n/i;\r\n        }\r\n    }\r\n}\r\nll power(ll x,ll y){\r\n    if(x==0)return 1;\r\n   ll ans=power(x/2,y);\r\n    ans*=ans;\r\n    ans%=MOD;\r\n    if(x%2)ans*=y;\r\n    ans%=MOD;\r\n    return ans;\r\n\r\n\r\n}\r\n\r\nbool prime_check_cheyan(int n)\r\n{\r\n    if (n == 1)\r\n        return false;\r\n    if (n == 2)\r\n        return true;\r\n    for (int i = 2; i * i <= n; i++)\r\n    {\r\n        if (n % i == 0)\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n \r\nll binExpo(ll a,ll b){\r\n    ll ans=1;\r\n    while(b){\r\n        if(b&1){\r\n            ans=(ans*a)%mod;\r\n        }\r\n        a=(a*a)%mod;\r\n        b>>=1;\r\n    }\r\n    return ans;\r\n}\r\n\r\nbool bit_check_cheyan(ll num, ll i) {\r\n    return num & (1LL << i);\r\n}\r\n \r\nbool composite_check_cheyan(int n) {\r\n    for (int i=2; i<=n/2; i++) {\r\n        if (n%i == 0) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nint advance_prime(long long n) // onnula simple annu sieve elle athu .\r\n{\r\n    if (n < 2)\r\n        return 0;\r\n    if (n == 2)\r\n        return 1;\r\n    if (n % 2 == 0)\r\n        return 0;\r\n    for (long long i = 3; i <= sqrt(n); i += 2)\r\n    {\r\n        if (n % i == 0)\r\n            return 0;\r\n    }\r\n    return 1;\r\n}\r\nll inv(ll x){\r\n    return binExpo(x,mod-2);\r\n}\r\n \r\nbitset<MX> is_prime;\r\nvector<int> prime;\r\nset<int>st;\r\nvoid prime_in_vector( int  n )\r\n{\r\n    for ( int i = 3; i <= n; i += 2 ) is_prime[i] = 1;\r\n \r\n    for ( int  i = 3; i * i <= n; i += 2 ) {\r\n        if ( is_prime[i] == 1 ) {\r\n            for ( int  j = i+i; j <= n; j += i ) {\r\n                is_prime[j] = 0;\r\n            }\r\n        }\r\n    }\r\n \r\n    is_prime[2] = 1;\r\n    prime.push_back (2);\r\n \r\n    for ( int i = 3; i <= n; i += 2 ) {\r\n        if ( is_prime[i] == 1 ) prime.push_back ( i );\r\n    }\r\n}\r\nll cmp1(pair<int, int>x, pair<int, int>y){\r\n    if(x.second > y.second){\r\n        return 0;\r\n    }else if(x.second < y.second){\r\n        return 1;\r\n    }else{\r\n        if(x.first > y.first)return 1;\r\n        else return 0;\r\n    }\r\n}\r\nint highest_2_factor(int n) // like 2^5 or 2^6 ans\r\n{\r\n    int ans=1,div=1;\r\n    int temp=n;\r\n    for(int i=2;i*i<=n;i++)\r\n    {\r\n         while(temp%i==0)\r\n         {\r\n            ans*=i;\r\n            div=i;\r\n            temp/=i;\r\n         }\r\n    }\r\n    if(temp==1)\r\n    ans/=div;\r\n    return ans;\r\n}\r\n\r\nll fac(ll n){\r\n    if(n==0) return 1;\r\n    ll res = 1;\r\n    for(ll i=2; i<=n; i++){\r\n        (res *= i)%=modd;\r\n    }\r\n    return res % modd;\r\n}\r\nvoid divisors_set( int n)\r\n{\r\n  if(n==1) return;\r\n  int idx=0,pf=prime[idx];\r\n  while(pf*pf<=n)\r\n  {\r\n     while(n%pf==0)\r\n     {\r\n       n/=pf;\r\n       st.insert(pf);\r\n     }\r\n   \r\n     pf=prime[++idx];\r\n  }\r\n  if(n != 1) st.insert(n);\r\n}\r\n\r\nvoid solve(){\r\n  string s;\r\n  cin>>s;\r\n  ll n = (sz(s)) / 2;\r\n  string s1,s2;\r\n  ll n1 = sz(s);\r\n  for(ll i=0; i<n; i++) s1+=s[i];\r\n  for(ll i=n; i<n1; i++) s2+=s[i];\r\n  if(n1%2) cout << \"NO\" << nl;\r\n  else if(s1 == s2) cout << \"YES\" << nl;\r\n  else cout << \"NO\" << nl;\r\n\r\n}\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    int lim = 1e7;\r\n   prime_in_vector( lim );\r\n\r\n    solve();\r\n    \r\n\r\n \r\n    return 0;\r\n}\r\n   "
}