{
    "id": 195015390,
    "contestId": 779,
    "creationTimeSeconds": 1677388972,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 779,
        "index": "B",
        "name": "Weird Rounding",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1100,
        "tags": [
            "brute force",
            "greedy"
        ]
    },
    "author": {
        "contestId": 779,
        "members": [
            {
                "handle": "cpduels-bot2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1488096300
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 161,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 0,
    "source": "# 1677388970042\r\nimport os\r\nimport sys\r\nfrom io import BytesIO, IOBase\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._file = file\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\nreadint = lambda: int(input())\r\nreadlist = lambda: list(map(int, input().split()))\r\n\r\n\r\n\r\nn, k = readlist()\r\n\r\norig = k\r\n\r\n\r\n\r\nnumzeros = str(n).count('0')\r\n\r\nif numzeros < k:\r\n    print(len(str(n)) - 1)\r\n    exit()\r\n\r\ns = str(n)\r\n\r\ni = len(s) - 1\r\n\r\ndigitsseen = 0\r\n\r\nnumzeros = k\r\n\r\nwhile numzeros > 0:\r\n    if s[i] != '0':\r\n        digitsseen += 1\r\n    else:\r\n        numzeros -= 1\r\n    i-=1\r\n\r\nprint(digitsseen)\r\n"
}