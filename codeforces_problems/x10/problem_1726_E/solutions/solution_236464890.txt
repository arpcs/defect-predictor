{
    "id": 236464890,
    "contestId": 1726,
    "creationTimeSeconds": 1702108128,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "E",
        "name": "Almost Perfect",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "combinatorics",
            "fft",
            "math"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "Fu_L"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 10444800,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing P = pair<ll, ll>;\n#define rep(i, a, b) for(ll i = a; i < b; ++i)\n#define rrep(i, a, b) for(ll i = a; i >= b; --i)\nconstexpr ll inf = 4e18;\ntemplate <uint32_t m>\nclass StaticModint {\n    using mint = StaticModint;\n    uint32_t _v = 0;\n    static constexpr bool prime = []() -> bool {\n        if(m == 1) return 0;\n        if(m == 2 or m == 7 or m == 61) return 1;\n        if(m % 2 == 0) return 0;\n        uint32_t d = m - 1;\n        while(d % 2 == 0) d /= 2;\n        for(uint32_t a : {2, 7, 61}) {\n            uint32_t t = d;\n            mint y = mint(a).pow(t);\n            while(t != m - 1 && y != 1 && y != m - 1) {\n                y *= y;\n                t <<= 1;\n            }\n            if(y != m - 1 && t % 2 == 0) return 0;\n        }\n        return 1;\n    }();\n    static constexpr pair<int32_t, int32_t> inv_gcd(int32_t a, int32_t b) {\n        if(a == 0) return {b, 0};\n        int32_t s = b, t = a, m0 = 0, m1 = 1;\n        while(t) {\n            const int32_t u = s / t;\n            s -= t * u;\n            m0 -= m1 * u;\n            swap(s, t);\n            swap(m0, m1);\n        }\n        if(m0 < 0) m0 += b / s;\n        return {s, m0};\n    }\n\n   public:\n    static constexpr mint raw(uint32_t v) {\n        mint a;\n        a._v = v;\n        return a;\n    }\n    constexpr StaticModint() {}\n    template <class T>\n    constexpr StaticModint(T v) {\n        static_assert(is_integral_v<T>);\n        if constexpr(is_signed_v<T>) {\n            int64_t x = int64_t(v % int64_t(m));\n            if(x < 0) x += m;\n            _v = uint32_t(x);\n        } else _v = uint32_t(v % m);\n    }\n    static constexpr uint32_t mod() {\n        return m;\n    }\n    constexpr uint32_t val() const {\n        return _v;\n    }\n    constexpr mint& operator++() {\n        return *this += 1;\n    }\n    constexpr mint& operator--() {\n        return *this -= 1;\n    }\n    constexpr mint operator++(int) {\n        mint res = *this;\n        ++*this;\n        return res;\n    }\n    constexpr mint operator--(int) {\n        mint res = *this;\n        --*this;\n        return res;\n    }\n    constexpr mint& operator+=(mint rhs) {\n        if(_v >= m - rhs._v) _v -= m;\n        _v += rhs._v;\n        return *this;\n    }\n    constexpr mint& operator-=(mint rhs) {\n        if(_v < rhs._v) _v += m;\n        _v -= rhs._v;\n        return *this;\n    }\n    constexpr mint& operator*=(mint rhs) {\n        return *this = *this * rhs;\n    }\n    constexpr mint& operator/=(mint rhs) {\n        return *this *= rhs.inv();\n    }\n    constexpr mint operator+() const {\n        return *this;\n    }\n    constexpr mint operator-() const {\n        return mint{} - *this;\n    }\n    constexpr mint pow(long long n) const {\n        assert(0 <= n);\n        if(n == 0) return 1;\n        mint x = *this, r = 1;\n        while(1) {\n            if(n & 1) r *= x;\n            n >>= 1;\n            if(n == 0) return r;\n            x *= x;\n        }\n    }\n    constexpr mint inv() const {\n        if constexpr(prime) {\n            assert(_v);\n            return pow(m - 2);\n        } else {\n            auto eg = inv_gcd(_v, m);\n            assert(eg.first == 1);\n            return eg.second;\n        }\n    }\n    friend constexpr mint operator+(mint lhs, mint rhs) {\n        return lhs += rhs;\n    }\n    friend constexpr mint operator-(mint lhs, mint rhs) {\n        return lhs -= rhs;\n    }\n    friend constexpr mint operator*(mint lhs, mint rhs) {\n        return uint64_t(lhs._v) * rhs._v;\n    }\n    friend constexpr mint operator/(mint lhs, mint rhs) {\n        return lhs /= rhs;\n    }\n    friend constexpr bool operator==(mint lhs, mint rhs) {\n        return lhs._v == rhs._v;\n    }\n    friend constexpr bool operator!=(mint lhs, mint rhs) {\n        return lhs._v != rhs._v;\n    }\n};\nusing mint = StaticModint<998244353>;\nistream& operator>>(istream& in, mint& x) {\n    long long a;\n    in >> a;\n    x = a;\n    return in;\n}\nostream& operator<<(ostream& out, mint x) {\n    return out << x.val();\n}\nstruct Binomial {\n    Binomial(int n)\n        : fac(n + 1), ifac(n + 1) {\n        fac[0] = 1;\n        for(int i = 1; i <= n; ++i) fac[i] = fac[i - 1] * i;\n        ifac[n] = fac[n].inv();\n        for(int i = n; i >= 1; --i) ifac[i - 1] = ifac[i] * i;\n    }\n    mint fact(int n) {\n        if(n < 0) return 0;\n        return fac[n];\n    }\n    mint perm(int n, int r) {\n        if(n < 0 or n < r or r < 0) return 0;\n        return fac[n] * ifac[n - r];\n    }\n    mint comb(int n, int r) {\n        if(n < 0 or n < r or r < 0) return 0;\n        return fac[n] * ifac[n - r] * ifac[r];\n    }\n    mint homo(int n, int r) {\n        if(n < 0 or r < 0) return 0;\n        if(r == 0) return 1;\n        return comb(n + r - 1, r);\n    }\n    mint operator()(int n, int r) {\n        return comb(n, r);\n    }\n\n   private:\n    vector<mint> fac, ifac;\n} binom(1000005);\nint main(void) {\n    cin.tie(0);\n    ios::sync_with_stdio(0);\n    vector<mint> dp(3e5 + 1);\n    dp[0] = 1, dp[1] = 1;\n    rep(i, 2, 3e5 + 1) {\n        dp[i] = dp[i - 1] + dp[i - 2] * (i - 1);\n    }\n    vector<mint> ff(3e5 + 1);\n    ff[0] = 1;\n    ff[1] = 1;\n    for(ll i = 3; i <= 3e5; i += 2) {\n        ff[i] = i * ff[i - 2];\n    }\n    int t;\n    cin >> t;\n    while(t--) {\n        ll n;\n        cin >> n;\n        mint ans = 0;\n        for(ll i = 0; i <= n; i += 4) {\n            mint cnt = binom(n - i / 2, i / 2);\n            if(i > 0) cnt *= ff[(i / 4) * 2 - 1];\n            cnt *= mint(2).pow(i / 4);\n            cnt *= dp[n - i];\n            ans += cnt;\n        }\n        cout << ans << '\\n';\n    }\n}"
}