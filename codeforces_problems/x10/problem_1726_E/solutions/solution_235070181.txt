{
    "id": 235070181,
    "contestId": 1726,
    "creationTimeSeconds": 1701356683,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1726,
        "index": "E",
        "name": "Almost Perfect",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "combinatorics",
            "fft",
            "math"
        ]
    },
    "author": {
        "contestId": 1726,
        "members": [
            {
                "handle": "CDuongg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1662474900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 3584000,
    "source": "/*\r\n#pragma GCC optimize(\"Ofast,unroll-loops\")\r\n#pragma GCC target(\"avx2,fma,bmi,bmi2,sse4.2,popcnt,lzcnt\")\r\n*/\r\n\r\n#include <bits/stdc++.h>\r\n#define taskname \"\"\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define i64 long long\r\n#define pb push_back\r\n#define ff first\r\n#define ss second\r\n#define isz(x) (int)x.size()\r\nusing namespace std;\r\n\r\nconst int mxN = 3e5 + 5;\r\nconst int mod = 998244353;\r\nconst i64 oo = 1e18;\r\n\r\nint binpow(int x, int y) {\r\n    int res = 1;\r\n    while (y) {\r\n        if (y & 1) res = 1ll * res * x % mod;\r\n        x = 1ll * x * x % mod; y >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\nint add(int x, int y) {\r\n    return (x + y >= mod ? x + y - mod : x + y);\r\n}\r\n\r\nvoid adds(int &x, int y) {\r\n    x = add(x, y);\r\n}\r\n\r\nint n, dp[mxN], fac[mxN], invfac[mxN];\r\n\r\nvoid gen_fac() {\r\n    fac[0] = 1;\r\n    for (int i = 1; i < mxN; ++i)\r\n        fac[i] = 1ll * fac[i - 1] * i % mod;\r\n    invfac[mxN - 1] = binpow(fac[mxN - 1], mod - 2);\r\n    for (int i = mxN - 2; i >= 0; --i)\r\n        invfac[i] = 1ll * invfac[i + 1] * (i + 1) % mod;\r\n}\r\n\r\nint nCk(int n, int k) {\r\n    if (n < k || n < 0 || k < 0) return 0;\r\n    return 1ll * fac[n] * invfac[k] % mod * invfac[n - k] % mod;\r\n}\r\n\r\nvoid solve() {\r\n    cin >> n;\r\n    int res = 0;\r\n    for (int i = 0; i <= n / 2; i += 2)\r\n        adds(res, 1ll * nCk(n - i, i) * nCk(i, i / 2) % mod * fac[i / 2] % mod * dp[n - i * 2] % mod);\r\n    cout << res << \"\\n\";\r\n}\r\n\r\nsigned main() {\r\n\r\n#ifndef CDuongg\r\n    if(fopen(taskname\".inp\", \"r\"))\r\n        assert(freopen(taskname\".inp\", \"r\", stdin)), assert(freopen(taskname\".out\", \"w\", stdout));\r\n#else\r\n    freopen(\"bai3.inp\", \"r\", stdin);\r\n    freopen(\"bai3.out\", \"w\", stdout);\r\n    auto start = chrono::high_resolution_clock::now();\r\n#endif\r\n\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    gen_fac();\r\n    dp[0] = dp[1] = 1;\r\n    for (int i = 2; i < mxN; ++i)\r\n        dp[i] = add(dp[i - 1], 1ll * (i - 1) * dp[i - 2] % mod);\r\n\r\n    int t = 1; cin >> t;\r\n    while(t--) solve();\r\n\r\n#ifdef CDuongg\r\n   auto end = chrono::high_resolution_clock::now();\r\n   cout << \"\\n\"; for(int i = 1; i <= 100; ++i) cout << '=';\r\n   cout << \"\\nExecution time: \" << chrono::duration_cast<chrono::milliseconds> (end - start).count() << \"[ms]\" << endl;\r\n#endif\r\n\r\n}"
}