{
    "id": 203236115,
    "contestId": 54,
    "creationTimeSeconds": 1682334794,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 54,
        "index": "E",
        "name": "Vacuum \u0421leaner",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2700,
        "tags": [
            "geometry"
        ]
    },
    "author": {
        "contestId": 54,
        "members": [
            {
                "handle": "AlternatingCurrent"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1294733700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 104,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 614400,
    "source": "#include<bits/stdc++.h>\r\n#define rep(i, n) for(int i = 0; i < (n); ++i)\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\ninline ll qabs(ll a){ return (a < 0) ? -a : a; }\r\nstruct Vector{\r\n\tll x, y;\r\n\tVector(ll _x = 0, ll _y = 0){ x = _x, y = _y; }\r\n};\r\ninline Vector operator + (Vector a, Vector b){ return Vector(a.x + b.x, a.y + b.y); } \r\ninline Vector operator - (Vector a, Vector b){ return Vector(a.x - b.x, a.y - b.y); } \r\ninline Vector Normal(Vector a){ return Vector(a.y, -a.x); }\r\ninline ll Dot(Vector a, Vector b){ return a.x * b.x + a.y * b.y; }\r\ninline ll Cross(Vector a, Vector b){ return a.x * b.y - a.y * b.x; }\r\ninline double len(Vector a){ return (double)sqrtl(a.x*a.x + a.y*a.y); }\r\ninline ll getsz(Vector a, Vector b, Vector c){ return qabs(Cross(c - a, b - a)); }\r\nstruct Line{\r\n\tVector A, B;\r\n\tLine(Vector _A, Vector _B){ A = _A, B = _B; }\r\n};\r\ninline double getdis(Vector a, Line l){\r\n\treturn (double)getsz(l.A, l.B, a) / len(l.A - l.B);\r\n}\r\n\r\nint n;\r\nVector P[40040];\r\n\r\ndouble ans = 1e100;\r\n\r\nvoid solve(){\r\n\tint p = n-1;\r\n\tll sz = 0;\r\n\twhile(Dot(P[p] - P[(p+n-1) % n], P[1] - P[0]) >= 0)\r\n\t\tsz += getsz(P[0], P[p], P[(p+n-1) % n]), p = (p+n-1) % n;\r\n\trep(cur, n){\r\n\t\tint nxt = (cur+1) % n;\r\n\t\t//cout << p << \": \" << sz << endl;\r\n\t\twhile(Dot(P[(p+1) % n] - P[p], P[nxt] - P[cur]) < 0)\r\n\t\t\tsz -= getsz(P[cur], P[p], P[(p+1) % n]), p = (p+1) % n;\r\n\t\t//cout << cur << \": \" << P[cur].x << \" \" << P[cur].y << \";  \";\r\n\t\t//cout << nxt << \": \" << P[nxt].x << \" \" << P[nxt].y << \";  \";\r\n\t\t//cout << p << \": \" << P[p].x << \" \" << P[p].y << \"  ::  \";\r\n\t\tVector tmp = P[p] + Normal(P[nxt] - P[cur]);\r\n\t\tdouble curans = getdis(P[p], Line(P[cur], P[nxt])) * getdis(P[cur], Line(P[p], tmp));\r\n\t\t//cout << tmp.x << \" \" << tmp.y << \"  \";\r\n\t\t//cout << sz << \"  \" << getdis(P[p], Line(P[cur], P[nxt])) << \" * \" << getdis(P[cur], Line(P[p], tmp)) << \" = \" << curans << endl;\r\n\t\tans = min(ans, (curans - (double)sz) * 0.5);\r\n\t\tsz += getsz(P[nxt], P[cur], P[p]);\r\n\t}\r\n}\r\n\r\nint main(){\r\n\tios::sync_with_stdio(false);\r\n\r\n\tcin >> n;\r\n\trep(i, n)\r\n\t\tcin >> P[i].x >> P[i].y;\r\n\tif(Cross(P[1] - P[0], P[2] - P[1]) > 0)\r\n\t\trep(i, n) if(i < n-i-1)\r\n\t\t\tswap(P[i], P[n-i-1]);\r\n\t\r\n\trep(i, n)\r\n\t\tif(Dot(P[(i+1) % n] - P[i], P[(i+2) % n] - P[(i+1) % n]) <= 0){\r\n\t\t\tcout << \"0.00\\n\";\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\r\n\tans = 1e100;\r\n\tsolve();\r\n\trep(i, n)\r\n\t\tP[i].x = -P[i].x;\r\n\trep(i, n) if(i < n-i-1)\r\n\t\tswap(P[i], P[n-i-1]);\r\n\tsolve();\r\n\r\n\tcout << fixed << setprecision(8) << ans << \"\\n\";\r\n\r\n\treturn 0;\r\n}\r\n\r\n// by zxb\r\n// start coding at 18:35\r\n// submission #1 at 18:56\r\n// submission #2 at 19:13"
}