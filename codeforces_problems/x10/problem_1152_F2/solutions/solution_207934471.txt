{
    "id": 207934471,
    "contestId": 1152,
    "creationTimeSeconds": 1685518891,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1152,
        "index": "F2",
        "name": "Neko Rules the Catniverse (Large Version)",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 3000,
        "tags": [
            "bitmasks",
            "dp",
            "matrices"
        ]
    },
    "author": {
        "contestId": 1152,
        "members": [
            {
                "handle": "luogu_bot4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556116500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 160,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 512000,
    "source": "// LUOGU_RID: 111682872\n// This Code was made by Chinese_zjc_.\r\n#include <bits/stdc++.h>\r\nconst int MOD = 1000000007;\r\nstruct mint\r\n{\r\n    unsigned v;\r\n    mint(unsigned v_ = 0) : v(v_) {}\r\n    mint operator-() const { return v ? MOD - v : *this; }\r\n    mint &operator+=(const mint &X) { return (v += X.v) >= MOD ? v -= MOD : v, *this; }\r\n    mint &operator-=(const mint &X) { return (v += MOD - X.v) >= MOD ? v -= MOD : v, *this; }\r\n    mint &operator*=(const mint &X) { return v = 1llu * v * X.v % MOD, *this; }\r\n    mint &operator/=(const mint &X) { return *this *= X.inv(); }\r\n    mint pow(long long B) const\r\n    {\r\n        B %= MOD - 1;\r\n        if (B < 0)\r\n            B += MOD - 1;\r\n        mint res = 1, A = *this;\r\n        while (B)\r\n        {\r\n            if (B & 1)\r\n                res *= A;\r\n            B >>= 1;\r\n            A *= A;\r\n        }\r\n        return res;\r\n    }\r\n    mint inv() const { return pow(MOD - 2); }\r\n    friend mint operator+(const mint &A, const mint &B) { return mint(A) += B; }\r\n    friend mint operator-(const mint &A, const mint &B) { return mint(A) -= B; }\r\n    friend mint operator*(const mint &A, const mint &B) { return mint(A) *= B; }\r\n    friend mint operator/(const mint &A, const mint &B) { return mint(A) /= B; }\r\n    friend std::istream &operator>>(std::istream &A, mint &B) { return A >> B.v; }\r\n    friend std::ostream &operator<<(std::ostream &A, const mint &B) { return A << B.v; }\r\n    friend bool operator==(const mint &A, const mint &B) { return A.v == B.v; }\r\n    explicit operator bool() const { return v; }\r\n} a[208][208], b[208][208], c[208][208], ans;\r\nint id[13][1 << 4], cnt, n, k, m;\r\nsigned main()\r\n{\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin >> n >> k >> m;\r\n    for (int i = 0; i <= k; ++i)\r\n        for (int j = 0; j != 1 << m; ++j)\r\n            id[i][j] = cnt++;\r\n    for (int i = 0; i <= k; ++i)\r\n        for (int j = 0; j != 1 << m; ++j)\r\n        {\r\n            a[id[i][j]][id[i][j >> 1]] = 1;\r\n            if (i < k)\r\n                a[id[i][j]][id[i + 1][(j | 1 << m) >> 1]] = __builtin_popcount(j) + 1;\r\n        }\r\n    for (int i = 0; i != cnt; ++i)\r\n        b[i][i] = 1;\r\n    while (n)\r\n    {\r\n        if (n & 1)\r\n        {\r\n            std::memset(c, 0, sizeof(c));\r\n            for (int i = 0; i != cnt; ++i)\r\n                for (int j = 0; j != cnt; ++j)\r\n                    for (int k = 0; k != cnt; ++k)\r\n                        c[i][k] += a[i][j] * b[j][k];\r\n            std::memcpy(b, c, sizeof(c));\r\n        }\r\n        std::memset(c, 0, sizeof(c));\r\n        for (int i = 0; i != cnt; ++i)\r\n            for (int j = 0; j != cnt; ++j)\r\n                for (int k = 0; k != cnt; ++k)\r\n                    c[i][k] += a[i][j] * a[j][k];\r\n        std::memcpy(a, c, sizeof(c));\r\n        n >>= 1;\r\n    }\r\n    for (int i = 0; i != 1 << m; ++i)\r\n        ans += b[id[0][0]][id[k][i]];\r\n    std::cout << ans << std::endl;\r\n    return 0;\r\n}"
}