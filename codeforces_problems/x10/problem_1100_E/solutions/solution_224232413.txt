{
    "id": 224232413,
    "contestId": 1100,
    "creationTimeSeconds": 1695257203,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1100,
        "index": "E",
        "name": "Andrew and Taxi",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1100,
        "members": [
            {
                "handle": "xuyiluo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1547390100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 95,
    "timeConsumedMillis": 592,
    "memoryConsumedBytes": 9216000,
    "source": "// LUOGU_RID: 125388935\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nsigned main(){\r\n\tint n , m , maxn = 0;\r\n\tcin >> n >> m;\r\n\tvector < vector < int > > a(n);\r\n\tvector < tuple <int , int , int> > e(m);\r\n\tvector <int> ans , topo(n) , in(n);\r\n\tfor(int i = 0;i < m;i++){\r\n\t\tcin >> get <0> (e[i]) >> get <1> (e[i]) >> get <2> (e[i]);\r\n\t\tget <0> (e[i])--;\r\n\t\tget <1> (e[i])--;\r\n\t\tmaxn = max(maxn , get <2> (e[i])); \r\n\t}\r\n\tauto topo_sort = [&](int mid){\r\n\t\tfill(a.begin() , a.end() , vector <int> ());\r\n\t\tfill(topo.begin() , topo.end() , 0);\r\n\t\tfill(in.begin() , in.end() , 0);\r\n\t\tqueue <int> q;\r\n\t\tint _index = -1;\r\n\t\tfor(int i = 0;i < m;i++){\r\n\t\t\tint u = get <0> (e[i]) , v = get <1> (e[i]) , w = get <2> (e[i]);\r\n\t\t\tif(mid < w){\r\n\t\t\t\tin[v]++;\r\n\t\t\t\ta[u].push_back(v);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(int i = 0;i < n;i++){\r\n\t\t\tif(!in[i]){\r\n\t\t\t\ttopo[i] = ++_index;\r\n\t\t\t\tq.push(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(q.size()){\r\n\t\t\tint f = q.front();\r\n\t\t\tq.pop();\r\n\t\t\tfor(auto v : a[f]){\r\n\t\t\t\tif(!(--in[v])){\r\n\t\t\t\t\tq.push(v);\r\n\t\t\t\t\ttopo[v] = ++_index;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn (*max_element(in.begin() , in.end()) == 0);\r\n\t};\r\n\tint l = 0 , r = maxn , tmp;\r\n\twhile(l <= r){\r\n\t\tint mid = l + r >> 1;\r\n\t\tif(topo_sort(mid)){\r\n\t\t\tr = mid - 1;\r\n\t\t\ttmp = mid;\r\n\t\t}\r\n\t\telse l = mid + 1;\r\n\t}\r\n\tcout << tmp << ' ';\r\n\ttopo_sort(tmp);\r\n\tfor(int i = 0;i < m;i++){\r\n\t\tif(tmp >= get <2> (e[i]) && topo[get <1> (e[i])] < topo[get <0> (e[i])]) ans.push_back(i + 1);\r\n\t}\r\n\tcout << ans.size() << endl;\r\n\tfor(auto i : ans) cout << i << ' ';\r\n\treturn 0;\r\n}"
}