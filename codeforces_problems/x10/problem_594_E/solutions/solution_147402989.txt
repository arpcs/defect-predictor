{
    "id": 147402989,
    "contestId": 594,
    "creationTimeSeconds": 1645602319,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 594,
        "index": "E",
        "name": "Cutting the Line",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3100,
        "tags": [
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 594,
        "members": [
            {
                "handle": "KyuushuKyuuhai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1447000200
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 170,
    "memoryConsumedBytes": 62259200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 5000005;\r\nint n,kk,z[N * 2];char s[N * 2],ans[N],cur[N];\r\nauto lyndon(char s[],int n)\r\n{\r\n\tvector<pair<int,int>> ret;\r\n\tfor (int i = 0;i < n;)\r\n\t{\r\n\t\tint j = i,k = i + 1;while (k < n && s[j] <= s[k]) j = s[j] < s[k] ? i : j + 1,k++;\r\n\t\tret.push_back({i,k - j});while (i <= j) i += k - j;\r\n\t}\r\n\treturn ret;\r\n}\r\nvoid solve(char ret[],int len)\r\n{\r\n\tint beg = n * 2 - len + 1,lcp = z[beg];\r\n\tmemcpy(ret,s[lcp] < s[beg + lcp] ? s : s + beg,len);\r\n}\r\nint main ()\r\n{\r\n\tios::sync_with_stdio(false);\r\n\tcin >> s >> kk;n = strlen(s);s[n] = '#';\r\n\treverse(s,s + n);reverse_copy(s,s + n,s + n + 1);\r\n\tfor (int i = 1,j = 0,mx = 0;i <= n * 2;i++)\r\n\t{\r\n\t\tz[i] = i < mx ? min(z[i - j],mx - i) : 0;\r\n\t\twhile (s[z[i]] == s[i + z[i]]) ++z[i];\r\n\t\tif (mx < i + z[i]) mx = i + z[i],j = i;\r\n\t}\r\n\tauto ld = lyndon(s,n);int l = n;\r\n\twhile (kk > 2 && !ld.empty())\r\n\t{\r\n\t\tint pos = ld.back().first,len = ld.back().second;\r\n\t\tld.pop_back();memcpy(ans + n - l,s + pos,l - pos);l = pos;\r\n\t\tif (ld.empty() || len != 1 || ld.back().second != 1) --kk;\r\n\t}\r\n\tif (ld.size() < 2 || kk == 1) solve(ans + n - l,l);\r\n\telse\r\n\t{\r\n\t\tstrcpy(cur,ans);int pos = ld.back().first;\r\n\t\tmemcpy(ans + n - l,s + pos,l - pos);solve(ans + n - pos,pos);\r\n\t\tpos = ld[ld.size() - 2].first;\r\n\t\tmemcpy(cur + n - l,s + pos,l - pos);\r\n\t\tsolve(cur + n - pos,pos);\r\n\t\tif (strcmp(cur,ans) < 0) strcpy(ans,cur);\r\n\t\tint lx = 0;\r\n\t\tfor (int i = 1;i < l;i++)\r\n\t\t{\r\n\t\t\tint p = z[n * 2 + 1 - i],q = z[i - lx];\r\n\t\t\tif (p >= i - lx ? (q < lx && s[i - lx + q] < s[q]) : (s[p] < s[n * 2 + 1 - i + p])) lx = i;\r\n\t\t}\r\n\t\tmemcpy(cur + n - l,s + n * 2 + 1 - l,l - lx);\r\n\t\tmemcpy(cur + n - lx,s,lx);\r\n\t\tif (strcmp(cur,ans) < 0) strcpy(ans,cur);\r\n\t}\r\n\tcout << ans << endl;\r\n\treturn 0;\r\n}"
}