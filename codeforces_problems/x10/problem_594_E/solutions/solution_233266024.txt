{
    "id": 233266024,
    "contestId": 594,
    "creationTimeSeconds": 1700296522,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 594,
        "index": "E",
        "name": "Cutting the Line",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3100,
        "tags": [
            "string suffix structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 594,
        "members": [
            {
                "handle": "ProstoArtyom"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1447000200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 110,
    "timeConsumedMillis": 1028,
    "memoryConsumedBytes": 110182400,
    "source": "\ufeff// Made for Jasnah\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define NN 10000100\r\n\r\nchar s[NN], ans[NN], tmp[NN];\r\nchar* cur, * t;\r\n\r\nint k, l, m;\r\nint z[NN], L[NN], n;\r\n\r\nint lyndon(char* s, int n) {\r\n\tint r = 0;\r\n\r\n\tfor (int i = 0, j, k; i < n; ) {\r\n\r\n\t\tfor (k = i, j = i + 1; j < n and s[k] <= s[j]; j++)\r\n\t\t\ts[k] < s[j] ? k = i : ++k;\r\n\r\n\t\tfor (L[r++] = i; i <= k; i += j - k);\r\n\t}\r\n\r\n\treturn r;\r\n}\r\n\r\nvoid zvalue(int n) {\r\n\tz[0] = 0;\r\n\r\n\tfor (int i = 1, l = 0, r = 0; i < n; i++) {\r\n\t\tif (i <= r) z[i] = min(z[i - l], r - i + 1);\r\n\r\n\t\twhile (i + z[i] < n && s[i + z[i]] == s[z[i]]) z[i]++;\r\n\r\n\t\tif (i + z[i] - 1 > r) l = i, r = i + z[i] - 1;\r\n\t}\r\n}\r\n\r\nvoid append(char* s, int n, char*& d) {\r\n\tcopy(s, s + n, d);\r\n\td += n;\r\n}\r\n\r\nvoid shuru(int ed, char* d) {\r\n\tint m = z[2 * n - ed];\r\n\tappend((m >= ed or s[m] < s[ed - 1 - m]) ? s : s + 2 * n - ed, ed, d);\r\n}\r\n\r\n\r\n\r\nvoid solve(char* s, int n) {\r\n\tfor (int i = 0; i < n; i++) putchar(s[i]); puts(\"\");\r\n}\r\n\r\nvoid find() {\r\n\tif (k > 2) {\r\n\t\twhile (1) {\r\n\t\t\tif (s[l - 1] != s[L[m]]) break;\r\n\r\n\t\t\tl = L[m--];\r\n\t\t\tif (m < 0) break;\r\n\t\t}\r\n\r\n\t\tif (l != n) append(s + n, n - l, cur), k--;\r\n\t}\r\n\r\n\twhile (1) {\r\n\t\tif (k <= 2 or m < 0) break;\r\n\r\n\t\tappend(s + L[m], l - L[m], cur);\r\n\t\tl = L[m]; m--; k--;\r\n\t}\r\n\r\n\tif (k == 1 or m <= 0) {\r\n\t\tshuru(l, cur);\r\n\t}\r\n\r\n\telse {\r\n\t\tt = tmp;\r\n\r\n\t\tappend(s + L[m], l - L[m], cur);\r\n\t\tshuru(L[m], cur);\r\n\r\n\t\tappend(ans, n - l, t);\r\n\t\tappend(s + L[m - 1], l - L[m - 1], t);\r\n\t\tshuru(L[m - 1], t);\r\n\r\n\t\tif (strcmp(tmp, ans) < 0) copy(tmp, tmp + n, ans);\r\n\r\n\t\tint now = 1, len;\r\n\r\n\t\tfor (int i = 2; i < l; i++) {\r\n\t\t\tlen = z[2 * n - i];\r\n\r\n\t\t\tif (len < i - now) {\r\n\t\t\t\tif (s[len] < s[i - 1 - len]) now = i;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tlen = z[i - now];\r\n\t\t\t\tif (len <= now and s[i - now + len] < s[len]) now = i;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tt = tmp;\r\n\r\n\t\tappend(ans, n - l, t);\r\n\t\tappend(s + 2 * n - l, l - now, t);\r\n\t\tappend(s, now, t);\r\n\r\n\t\tif (strcmp(tmp, ans) < 0) solve(tmp, n);\r\n\t\telse solve(ans, n);\r\n\t\treturn;\r\n\t}\r\n\r\n\tsolve(ans, n);\r\n}\r\n\r\nint main() {\r\n\tcin >> s;\r\n\tcin >> k;\r\n\t\r\n\tn = strlen(s);\r\n\tfor (int i = 0; i < n; i++) s[i + n] = s[i];\r\n\treverse(s, s + n);\r\n\tm = lyndon(s, n);\r\n\tL[m--] = l = n;\r\n\tzvalue(n << 1); cur = ans;\r\n\r\n\tfind();\r\n\treturn 0;\r\n}"
}