{
    "id": 223537864,
    "contestId": 1213,
    "creationTimeSeconds": 1694811820,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "F",
        "name": "Unstable String Sort",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "Tanishq_1420"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 28364800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define ll long long int\r\n\r\nint n,k;\r\nvector < vector < int > > g;\r\nvector < vector < int > > rg;\r\nvector < int > p;\r\nvector < int > q;\r\nvector < int > comp;\r\nstack < int > s;\r\nvector < int > vis;\r\nint setnumber = 0;\r\n\r\nvoid dfs(int node){\r\n    vis[node]=1;\r\n    for(auto &v: g[node]){\r\n        if(vis[v]==0)\r\n            dfs(v);\r\n    }\r\n    s.push(node);\r\n}\r\n\r\nvoid dfs2(int node){\r\n    vis[node]=1;\r\n    comp[node]=setnumber;\r\n    for(auto &v: rg[node]){\r\n        if(vis[v]==0)\r\n            dfs2(v);\r\n    }\r\n}\r\n\r\nint main(){\r\n\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n\r\n    cin>>n>>k;\r\n    g.resize(n+1);\r\n    rg.resize(n+1);\r\n    p.resize(n+1);\r\n    q.resize(n+1);\r\n    vis.resize(n+1, 0);\r\n    comp.resize(n+1, 0);\r\n    for(int i=1;i<=n;i++)\r\n        cin>>p[i];\r\n\r\n    for(int j=1;j<=n;j++)\r\n        cin>>q[j];\r\n\r\n    for(int i=1;i<n;i++){\r\n        g[p[i]].push_back(p[i+1]);\r\n        g[q[i]].push_back(q[i+1]);\r\n    }\r\n    for(int i=1;i<=n;i++){\r\n        if(vis[i]==0)\r\n            dfs(i);\r\n    }\r\n\r\n    for(int i=1;i<=n;i++){\r\n        for(auto &v: g[i])\r\n            rg[v].push_back(i);\r\n    }\r\n    for(int i=1;i<=n;i++)\r\n        vis[i]=0;\r\n    \r\n    while(!(s.empty())){\r\n        int node = s.top();\r\n        s.pop();\r\n        if(vis[node]==0){\r\n            setnumber++;\r\n            dfs2(node);\r\n        }\r\n    }\r\n    // for(int i=1;i<=n;i++)\r\n    //     cout<<comp[i]<<'\\n';\r\n    string ans(n, ' ');\r\n    if(setnumber<k)\r\n        cout<<\"NO\"<<'\\n';\r\n    else{\r\n        cout<<\"YES\"<<'\\n';\r\n        for(int i=1;i<=n;i++){\r\n            if(comp[i]>=26)\r\n                ans[i-1]='z';\r\n            else{\r\n                ans[i-1]=(char)(96 + comp[i]);\r\n            }\r\n        }\r\n        cout<<ans<<'\\n';\r\n    }\r\n\r\n}\r\n\r\n\r\n"
}