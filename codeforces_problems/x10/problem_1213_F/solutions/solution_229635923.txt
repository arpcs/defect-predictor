{
    "id": 229635923,
    "contestId": 1213,
    "creationTimeSeconds": 1698202126,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "F",
        "name": "Unstable String Sort",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "EndeavorHao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 66,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 60313600,
    "source": "// LUOGU_RID: 131477304\n#include <bits/stdc++.h>\r\n#define x first\r\n#define y second\r\n#define int long long\r\n#define endl \"\\n\"\r\n#define all(v) v.begin(), v.end()\r\nusing namespace std;\r\nconst int N = 200010, INF = 0x3f3f3f3f, mod = 1000000007;\r\n\r\ntypedef long long LL;\r\ntypedef unsigned long long ULL;\r\ntypedef pair<int, int> PII;\r\ntypedef pair<PII, int> PIII;\r\n\r\nvector<vector<int>> adj(N);\r\nint dfn[N], low[N], timestamp;\r\nint scc_cnt, id[N], sz[N];\r\nstack<int> stk;\r\nbool in_stack[N];\r\nvector<vector<int>> g(N);\r\nint din[N];\r\nchar color[N];\r\nvoid tarjan(int u) {\r\n    dfn[u] = low[u] = ++ timestamp;\r\n    stk.push(u), in_stack[u] = true;\r\n    for(auto v: adj[u]) {\r\n        if(!dfn[v]) {\r\n            tarjan(v);\r\n            low[u] = min(low[u], low[v]);\r\n        }else if(in_stack[v]) {\r\n            low[u] = min(low[u], dfn[v]);\r\n        }\r\n    }\r\n    if(dfn[u] == low[u]) {\r\n        int y;\r\n        scc_cnt ++;\r\n        do{\r\n            y = stk.top();\r\n            stk.pop();\r\n            in_stack[y] = false;\r\n            id[y] = scc_cnt;\r\n        }while(y != u);\r\n    }\r\n}\r\nvoid solve(){\r\n\tint n, k;\r\n    cin >> n >> k;\r\n    vector<int> q(n), p(n);\r\n    for(int i = 0; i < n; i ++ ) cin >> q[i];\r\n    for(int i = 0; i < n; i ++ ) cin >> p[i];\r\n    for(int i = 0; i + 1 < n; i ++ ) {\r\n        int u = q[i], v = q[i + 1];\r\n        adj[u].push_back(v);\r\n    }\r\n    for(int i = 0; i + 1 < n; i ++ ) {\r\n        int u = p[i], v = p[i + 1];\r\n        adj[u].push_back(v);\r\n    }\r\n    for(int i = 1; i <= n; i ++ ) {\r\n        if(!dfn[i]) \r\n            tarjan(i);\r\n    }\r\n    if(scc_cnt < k) {\r\n        cout << \"NO\" << endl;\r\n        return;\r\n    }\r\n    set<int> S;\r\n    for(int i = 1; i <= n; i ++ ) {\r\n        for(auto j: adj[i]) {\r\n            int a = id[i], b = id[j];\r\n            if(a != b && !S.count(a * 1000000 + b)) {\r\n                S.insert(a * 1000000 + b);\r\n                g[a].push_back(b);\r\n                din[b] ++;\r\n            }\r\n        }\r\n    }\r\n    queue<int> que;\r\n    for(int i = 1; i <= n; i ++ ) {\r\n        if(!din[i]) {\r\n            que.push(i);\r\n            color[i] = 'a';\r\n        }\r\n    }\r\n    while(que.size()) {\r\n        auto u = que.front();\r\n        que.pop();\r\n        for(auto v: g[u]) {\r\n            color[v] = max(color[v], min('z', char(color[u] + 1)));\r\n            if(-- din[v] == 0) {\r\n                que.push(v);\r\n            }\r\n        }\r\n    }\r\n    cout << \"YES\" << endl;\r\n    for(int i = 1; i <= n; i ++ ) {\r\n        cout << color[id[i]];\r\n    }\r\n}\r\nsigned main() {\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n\tint T = 1;\r\n\t// cin >> T;\r\n\twhile(T -- ){\r\n\t\tsolve();\r\n\t}\r\n\treturn 0;\r\n}"
}