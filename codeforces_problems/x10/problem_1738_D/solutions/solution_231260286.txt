{
    "id": 231260286,
    "contestId": 1738,
    "creationTimeSeconds": 1699059778,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1738,
        "index": "D",
        "name": "Permutation Addicts",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1738,
        "members": [
            {
                "handle": "kavorka"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664548500
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 498,
    "memoryConsumedBytes": 11366400,
    "source": "# for I/O for local system\nimport sys\nfrom os import path\nif(path.exists('Input.txt')):\n    sys.stdin = open('Input.txt','r')\n    sys.stdout = open('Output.txt','w')\n \n# For fast I/O\ninput = sys.stdin.buffer.readline\n# input = sys.stdin.readline\nprint = sys.stdout.write\n \n# Import libraries here whenever required\nfrom random import randint\n \n# Use this because normal dict can sometimes give TLE\nclass mydict:\n    def __init__(self, func=lambda: 0):\n        self.random = randint(0, 1 << 32)\n        self.default = func\n        self.dict = {}\n    def __getitem__(self, key):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            self.dict[mykey] = self.default()\n        return self.dict[mykey]\n    def get(self, key, default):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            return default\n        return self.dict[mykey]\n    def __setitem__(self, key, item):\n        mykey = self.random ^ key\n        self.dict[mykey] = item\n    def getkeys(self):\n        return [self.random ^ i for i in self.dict]\n    def __str__(self):\n        return f'{[(self.random ^ i, self.dict[i]) for i in self.dict]}'\n \nfrom bisect import bisect_left as lower_bound\nfrom bisect import bisect_right as upper_bound\n\n\nclass FenwickTree:\n    def __init__(self, x):\n        bit = self.bit = list(x)\n        size = self.size = len(bit)\n        for i in range(size):\n            j = i | (i + 1)\n            if j < size:\n                bit[j] += bit[i]\n\n    def update(self, idx, x):\n        \"\"\"updates bit[idx] += x\"\"\"\n        while idx < self.size:\n            self.bit[idx] += x\n            idx |= idx + 1\n\n    def __call__(self, end):\n        \"\"\"calc sum(bit[:end])\"\"\"\n        x = 0\n        while end:\n            x += self.bit[end - 1]\n            end &= end - 1\n        return x\n\n    def find_kth(self, k):\n        \"\"\"Find largest idx such that sum(bit[:idx]) <= k\"\"\"\n        idx = -1\n        for d in reversed(range(self.size.bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < self.size and self.bit[right_idx] <= k:\n                idx = right_idx\n                k -= self.bit[idx]\n        return idx + 1, k\n\n\nclass SortedList:\n    block_size = 700\n\n    def __init__(self, iterable=()):\n        self.macro = []\n        self.micros = [[]]\n        self.micro_size = [0]\n        self.fenwick = FenwickTree([0])\n        self.size = 0\n        for item in iterable:\n            self.insert(item)\n\n    def insert(self, x):\n        i = lower_bound(self.macro, x)\n        j = upper_bound(self.micros[i], x)\n        self.micros[i].insert(j, x)\n        self.size += 1\n        self.micro_size[i] += 1\n        self.fenwick.update(i, 1)\n        if len(self.micros[i]) >= self.block_size:\n            self.micros[i:i + 1] = self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:]\n            self.micro_size[i:i + 1] = self.block_size >> 1, self.block_size >> 1\n            self.fenwick = FenwickTree(self.micro_size)\n            self.macro.insert(i, self.micros[i + 1][0])\n\n    def pop(self, k=-1):\n        i, j = self._find_kth(k)\n        self.size -= 1\n        self.micro_size[i] -= 1\n        self.fenwick.update(i, -1)\n        return self.micros[i].pop(j)\n\n    def __getitem__(self, k):\n        i, j = self._find_kth(k)\n        return self.micros[i][j]\n\n    def count(self, x):\n        return self.upper_bound(x) - self.lower_bound(x)\n\n    def __contains__(self, x):\n        return self.count(x) > 0\n\n    def lower_bound(self, x):\n        i = lower_bound(self.macro, x)\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\n\n    def upper_bound(self, x):\n        i = upper_bound(self.macro, x)\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\n\n    def _find_kth(self, k):\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\n\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        return (x for micro in self.micros for x in micro)\n\n    def __repr__(self):\n        return str(list(self))\n\n# Solver function\ndef solve():\n    ans = []\n    zero = []\n    nplusone = []\n    for i in range(n):\n        val = a[i]\n        if(val == 0):\n            zero.append(i + 1)\n        if(val == n + 1):\n            nplusone.append(i + 1)\n    zero.sort(reverse = True)\n    nplusone.sort()\n    for i in zero:\n        ans.append(i)\n    for i in nplusone:\n        ans.append(i)\n    last = ans[-1]\n    while len(d[last]):\n        arr = d[last]\n        helper = []\n        for i in arr:\n            if(i > last):\n                helper.append(i)\n        # helper.reverse()\n        ans.extend(helper)\n        helper = []\n        for i in arr:\n            if(i < last):\n                helper.append(i)\n        helper.reverse()\n        ans.extend(helper)\n        last = ans[-1]\n    l = SortedList()\n    l.insert(0)\n    l.insert(n + 1)\n    k = 0\n    for i in range(1, n + 1):\n        value = ans[i - 1]\n        val = a[value - 1]\n        chota = l[l.lower_bound(value) - 1]\n        bada = l[l.upper_bound(value)]\n        l.insert(value)\n        # if x <= k then value = aj > k\n        # if x > k then value = aj <= k\n        if(val == bada):\n            k = max(k, value)\n    print(str(k) + \"\\n\")\n    print(' '.join(map(str, ans)) + \"\\n\")\n \n# Main \nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = [[] for i in range(n + 2)]\n    for i in range(n):\n        d[a[i]].append(i + 1)\n    for i in range(n + 1):\n        d[i].sort()\n    solve()"
}