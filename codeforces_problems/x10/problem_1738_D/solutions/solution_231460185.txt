{
    "id": 231460185,
    "contestId": 1738,
    "creationTimeSeconds": 1699187342,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1738,
        "index": "D",
        "name": "Permutation Addicts",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1738,
        "members": [
            {
                "handle": "Aleph__Zero"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664548500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 764,
    "memoryConsumedBytes": 3379200,
    "source": "// LUOGU_RID: 133582476\n#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 10;\r\n\r\nvector<int> to[N];\r\n\r\nint t, n;\r\n\r\nint a[N];\r\n\r\nvoid bfs(int s){\r\n\tqueue<int> q;\r\n\t\r\n\tq.push(s);\r\n\t\r\n\twhile(!q.empty()){\r\n\t\tint u = q.front();\r\n\t\tq.pop();\r\n\t\t\r\n\t\tif(u != s) cout << u << ' ';\r\n\t\t\r\n\t\tfor(int v : to[u]){\r\n\t\t\tif(to[v].empty()) cout << v << ' ';\r\n\t\t\telse q.push(v);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main(){\r\n\t\r\n\tcin >> t;\r\n\t\r\n\twhile(t--){\r\n\t\t\r\n\t\tcin >> n;\r\n\t\t\r\n\t\tint root_;\r\n\t\t\r\n\t\tint k = 0;\r\n\t\t\r\n\t\tfor(int i = 1; i <= n; i++){\r\n\t\t\tcin >> a[i];\r\n\t\t\tto[a[i]].push_back(i);\r\n\t\t\tif(a[i] == 0 || a[i] == n + 1) root_ = a[i];\r\n\t\t\t\r\n\t\t\tk = max(k, min(a[i], i));\r\n\t\t}\r\n\t\t\r\n\t\tcout << k << endl;\r\n\t\t\r\n\t\tbfs(root_);\r\n\t\t\r\n\t\tcout << endl;\r\n\t\r\n\t\tfor(int i = 0; i <= n + 1; i++)\r\n\t\t\tto[i].clear();\r\n\t}\r\n\t\r\n\treturn 0;\r\n}"
}