{
    "id": 215861126,
    "contestId": 267,
    "creationTimeSeconds": 1690457247,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 267,
        "index": "A",
        "name": "Subtractions",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 900,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 267,
        "members": [
            {
                "handle": "Aryan_ks20"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1358002800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\n\r\nconst int N = 2e5 + 100;\r\nconst int M = 1e7 + 1;\r\n\r\nvector<ll> z;\r\n\r\n// ll a[N], b[N];\r\n// ll ans[N];\r\n\r\n// set<ll> s;\r\n// vector<ll> g[N];\r\n// vector<pair<ll,ll>> g[N];\r\n// ll n;\r\n// vector<ll> ans(N + 10, 0);\r\n// ll c = 0;\r\n// vector<vector<ll>> g(N);\r\n// bool vis[N];\r\n// vector<ll> current_cc;\r\n// vector<vector<ll>> cc;\r\n\r\n// bool func(ll n)\r\n// {\r\n//     ll t = sqrt(n);\r\n//     return t * t == n;\r\n// }\r\n\r\nbool isPrime(ll n)\r\n{\r\n    if (n == 1)\r\n        return false;\r\n    if (n == 2 || n == 3)\r\n        return true;\r\n    if (n % 2 == 0 || n % 3 == 0)\r\n        return false;\r\n    for (int i = 5; i * i <= n; i += 6)\r\n        if (n % i == 0 || n % (i + 2) == 0)\r\n            return false;\r\n    return true;\r\n}\r\n\r\nvoid prime_factors(ll n)\r\n{\r\n    // vector<ll> z;\r\n    if (n <= 1)\r\n        return;\r\n    while (n % 2 == 0)\r\n    {\r\n        z.push_back(2);\r\n        // s.insert(2);\r\n        n = n / 2;\r\n    }\r\n    while (n % 3 == 0)\r\n    {\r\n        z.push_back(3);\r\n        // s.insert(3);\r\n        n = n / 3;\r\n    }\r\n\r\n    for (int i = 5; i * i <= n; i += 6)\r\n    {\r\n        while (n % i == 0)\r\n        {\r\n            z.push_back(i);\r\n            // s.insert(i);\r\n            n = n / i;\r\n        }\r\n        while (n % (i + 2) == 0)\r\n        {\r\n            z.push_back(i + 2);\r\n            // s.insert(i + 2);\r\n            n = n / (i + 2);\r\n        }\r\n    }\r\n    if (n > 3)\r\n    {\r\n        z.push_back(n);\r\n        // s.insert(n);\r\n    }\r\n\r\n    // sort(z.begin(), z.end());\r\n    // return z;\r\n}\r\n\r\n// void reset()\r\n// {\r\n//     for (int i = 0; i < N; i++)\r\n//     {\r\n//         vis[i] = false;\r\n//     }\r\n// }\r\n\r\n// bool customComparator(const pair<pair<ll, ll>, ll> &a, const pair<pair<ll, ll>, ll> &b)\r\n// {\r\n//     // Sort in descending order based on the first part of the pair\r\n//     if (a.first.first != b.first.first)\r\n//     {\r\n//         return a.first.first > b.first.first;\r\n//     }\r\n//     // Sort in ascending order based on the second part of the pair\r\n//     return a.first.second < b.first.second;\r\n// }\r\n\r\n// ll factorial(ll n)\r\n// {\r\n//     ll ans = 1;\r\n//     for (int i = 2; i <= n; i++)\r\n//     {\r\n//         ans = ((ans * i));\r\n//         // cout << ans << \"\\n\";\r\n//     }\r\n//     return ans;\r\n// }\r\n\r\nvoid solve()\r\n{\r\n    ll n,k;\r\n    cin >> k >> n;\r\n    ll count = 0;\r\n    while(n % k != 0)\r\n    {\r\n        count += n/k;\r\n        ll p = n;\r\n        n = k;\r\n        k = p%k;\r\n        // cout << n << \" \" << k << endl;\r\n        // cout << count << endl;\r\n    }\r\n    count += n/k;\r\n    cout << count << endl;\r\n}\r\n\r\nint main()\r\n{\r\n#ifndef ONLINE_JUDGE\r\n    freopen(\"inputf.txt\", \"r\", stdin);\r\n    freopen(\"outputf.txt\", \"w\", stdout);\r\n    freopen(\"errorf.txt\", \"w\", stderr);\r\n#endif\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n    #ifndef ONLINE_JUDGE\r\n        auto stop = high_resolution_clock::now();\r\n\r\n        auto duration = duration_cast<microseconds>(stop - start);\r\n        cout << \"\\n\"\r\n             << \"Time: \"\r\n             << (float)duration.count() / 1000000 << \" s\"\r\n             << \"\\n\";\r\n    #endif\r\n    return 0;\r\n}"
}