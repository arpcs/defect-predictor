{
    "id": 234676396,
    "contestId": 1029,
    "creationTimeSeconds": 1701154394,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1029,
        "index": "D",
        "name": "Concatenated Multiples",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1029,
        "members": [
            {
                "handle": "_UMR_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1535122200
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 69,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 3993600,
    "source": "#include <iostream>\r\n#include <cmath>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <queue>\r\n#include <vector>\r\n#include <cstring>\r\n#include <set>\r\n#include <map>\r\n#include <bitset>\r\nusing namespace std;\r\n\r\nlong long n, m, t, k;\r\nlong long num[200010];\r\nlong long ans;\r\n\r\nmultiset<long long> S[11];\r\n\r\nvector<int> G[11];\r\n\r\nlong long getlength(long long x)\r\n{\r\n    long long y;\r\n    y = 0;\r\n    while (x != 0)\r\n    {\r\n        x = x / 10;\r\n        y++;\r\n    }\r\n    return y;\r\n}\r\n\r\nlong long read()\r\n{\r\n    long long k;\r\n    long long sign;\r\n    k = 0;\r\n    sign = 1;\r\n    char c;\r\n    c = getchar();\r\n    while ((c < '0' || c > '9') && c != '-')\r\n    {\r\n        c = getchar();\r\n    }\r\n    if (c == '-')\r\n    {\r\n        c = getchar();\r\n        sign = -1;\r\n    }\r\n    while (c >= '0' && c <= '9')\r\n    {\r\n        k = k * 10 + c - 48;\r\n        c = getchar();\r\n    }\r\n    return k * sign;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    n = read(), k = read();\r\n    ans = 0;\r\n    for (long long a = 1; a <= n; ++a)\r\n    {\r\n        num[a] = read();\r\n        G[getlength(num[a])].push_back(num[a]%k);\r\n        //S[getlength(num[a])].insert(num[a] % k);\r\n    }\r\n    for(int i=1;i<=10;++i)\r\n    {\r\n        sort(G[i].begin(),G[i].end());\r\n    }\r\n    for (long long i = 1; i <= 10; ++i)\r\n    {\r\n        long long powh = pow(10, i);\r\n        for (long long j = 1; j <= n; ++j)\r\n        {\r\n            long long res = (k-((num[j]%k)*(powh%k))%k)%k;\r\n           // if ((num[j] * powh) % k != 0)\r\n           // {\r\n               // ans = ans + S[i].count(k - ((num[j] * powh) % k));\r\n               ans=ans+upper_bound(G[i].begin(),G[i].end(),res)-lower_bound(G[i].begin(),G[i].end(),res);\r\n           // }\r\n           // else\r\n           // {\r\n           /*     if ((num[j] * powh) % k == 0)\r\n                {\r\n                    //ans = ans + S[i].count(0);\r\n                    ans=ans+upper_bound(G[i].begin(),G[i].end(),0)-lower_bound(G[i].begin(),G[i].end(),0);\r\n            \r\n                    if (getlength(num[j]) == i && S[i].count(0) != 0)\r\n                    {\r\n                        //ans--;\r\n                    }\r\n                }\r\n               \r\n            }*/\r\n\r\n            if (((num[j] % k) + ((num[j]%k) * (powh%k))%k )% k == 0 && getlength(num[j]) == i)\r\n            {\r\n                ans--;\r\n            }\r\n        }\r\n    }\r\n    printf(\"%lld\\n\", ans);\r\n}\r\n\r\nint main()\r\n{\r\n    t = 1;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}