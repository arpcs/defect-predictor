{
    "id": 219810465,
    "contestId": 1530,
    "creationTimeSeconds": 1692631362,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1530,
        "index": "E",
        "name": "Minimax",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1530,
        "members": [
            {
                "handle": "Relex"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1626532500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 64,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 512000,
    "source": "#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ld = long double;\r\n\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\ngp_hash_table<ll, ll, custom_hash> app;\r\n//const int MOD = 998244353;\r\n//const int MOD = 1e9 + 7;\r\n\r\nconst ll INF = 3e18;\r\n\r\nvector<ll> a;\r\n\r\n\r\nll n, m, k, q, x, y, z, w, h, T;\r\nstring s, t;\r\ndouble p;\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    T = 1;\r\n    cin >> T;\r\n    while (T--) {    \r\n        cin >> s;\r\n        n = s.length();\r\n        sort(s.begin(), s.end());\r\n        if (s[0] == s[n - 1] || n < 3 || s[0] != s[1]) {\r\n            printf(\"%s\\n\", s.c_str());\r\n            continue;\r\n        }\r\n        int ind = -1;\r\n        for (int i = 0; i < n; i++) {\r\n            if ((i == 0 || s[i - 1] != s[i]) && (i == n - 1 || s[i + 1] != s[i])) {\r\n                ind = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (ind != -1) {\r\n            printf(\"%c\", s[ind]);\r\n            for (int i = 0; i < n; i++) {\r\n                if (i != ind) {\r\n                    printf(\"%c\", s[i]);\r\n                }\r\n            }\r\n            printf(\"\\n\");\r\n            continue;\r\n        }\r\n\r\n        int i = 0;\r\n        int j = 0;\r\n        while (s[j] == s[i]) j++;\r\n        int k = j;\r\n        \r\n        string t1 = \"\";\r\n        t1.push_back(s[0]);\r\n        t1.push_back(s[1]);\r\n        t1.push_back(s[j]);\r\n\r\n        i = 2;\r\n        j++;\r\n\r\n        while (i < k && j < n) {\r\n            t1.push_back(s[i]);\r\n            t1.push_back(s[j]);\r\n            i++;\r\n            j++;\r\n        }\r\n        while (i < k) {\r\n            t1.push_back(s[i]);\r\n            i++;\r\n        }\r\n\r\n        while (j < n) {\r\n            t1.push_back(s[j]);\r\n            j++;\r\n        }\r\n\r\n        i = 0;\r\n        j = k;\r\n\r\n        string t2 = \"\";\r\n        t2.push_back(s[i]);\r\n        t2.push_back(s[j]);\r\n        i++;\r\n        j++;\r\n        if (s[n - 1] == s[k]) {\r\n            while (j < n && s[j] == s[k]) {\r\n                t2.push_back(s[j]);\r\n                j++;\r\n            }\r\n\r\n            while (i < k) {\r\n                t2.push_back(s[i]);\r\n                i++;\r\n            }\r\n\r\n            while (j < n) {\r\n                t2.push_back(s[j]);\r\n                j++;\r\n            }\r\n        }\r\n        else {\r\n            while (i < k) {\r\n                t2.push_back(s[i]);\r\n                i++;\r\n            }\r\n            int l = j;\r\n            while (s[l] == s[k]) l++;\r\n            t2.push_back(s[l]);\r\n            l++;\r\n            while (j < l - 1) {\r\n                t2.push_back(s[j]);\r\n                j++;\r\n            }\r\n\r\n            while (l < n) {\r\n                t2.push_back(s[l]);\r\n                l++;\r\n            }\r\n        }\r\n\r\n        if (t1[n - 1] == t1[n - 2] && t1[n - 1] == t1[0]) {\r\n            printf(\"%s\\n\", t2.c_str());\r\n        }\r\n        else {\r\n            printf(\"%s\\n\", t1.c_str());\r\n        }\r\n        \r\n    }\r\n\r\n\r\n}",
    "defect_evaluation_v3": {
        "good solution": 70,
        "wrong solution": 30,
        "compilation error": 0,
        "runtime error": 0
    }
}