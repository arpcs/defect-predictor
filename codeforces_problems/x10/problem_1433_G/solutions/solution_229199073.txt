{
    "id": 229199073,
    "contestId": 1433,
    "creationTimeSeconds": 1697970063,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1433,
        "index": "G",
        "name": "Reducing Delivery Cost",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "brute force",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1433,
        "members": [
            {
                "handle": "khumphaiquang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603204500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 8089600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define pii pair <int, int>\r\n#define int long long\r\n#define fi first\r\n#define se second\r\n\r\nconst long long inf = 1e18;\r\nconst int N = 1e3+5;\r\n\r\nstruct edge\r\n{\r\n    int st, fi, we;\r\n};\r\n\r\nint n, m, k, d[N][N];\r\nlong long ans = inf;\r\nvector <edge> graph;\r\nvector <pii> g[N], courier;\r\n\r\nvoid dijkstra(int u)\r\n{\r\n    priority_queue <pii, vector<pii>, greater<pii>> pq;\r\n    d[u][u] = 0;\r\n    pq.push({d[u][u], u});\r\n    \r\n    while(pq.size())\r\n    {\r\n        pii x = pq.top(); pq.pop();\r\n\r\n        if(x.fi > d[u][x.se]) continue;\r\n        for(pii e:g[u])\r\n        {\r\n            if(d[u][e.fi] > x.fi + e.se)\r\n            {\r\n                d[u][e.fi] = x.fi + e.se;\r\n                pq.push({d[u][e.fi], e.fi});\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint32_t main()\r\n{\r\n    cin.tie(0)->sync_with_stdio(0);\r\n\r\n    //freopen(\"test.inp\", \"r\", stdin);\r\n\r\n    cin >> n >> m >> k;\r\n    for(int i = 1, u, v, w; i <= m; ++i)\r\n    {\r\n        cin >> u >> v >> w;\r\n        g[u].emplace_back(v, w); g[v].emplace_back(u, w);\r\n        graph.push_back({u, v, w});\r\n    }\r\n\r\n    for(int i = 1, u, v; i <= k; ++i)\r\n    {\r\n        cin >> u >> v;  \r\n        courier.emplace_back(u, v);\r\n    }\r\n\r\n    memset(d, 0x3f, sizeof(d));\r\n    for(int i = 1; i <= n; ++i)\r\n    {\r\n        dijkstra(i);\r\n    }\r\n\r\n    for(edge e:graph)\r\n    {\r\n        long long tans = 0;\r\n        for(pii c:courier)\r\n        {\r\n            tans += min({d[c.fi][c.se], d[c.fi][e.st]+d[e.fi][c.se], d[c.fi][e.fi]+d[c.se][e.st]});\r\n        }\r\n        ans = min(ans, tans);\r\n    }\r\n\r\n    cout << ans;\r\n}"
}