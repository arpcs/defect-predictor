{
    "id": 234040258,
    "contestId": 1433,
    "creationTimeSeconds": 1700832399,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1433,
        "index": "G",
        "name": "Reducing Delivery Cost",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "brute force",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1433,
        "members": [
            {
                "handle": "Ahmed_h281"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603204500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// \u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557// ACE\r\n// \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d// ACE\r\n// \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u255a\u2550\u255d\u2588\u2588\u2588\u2588\u2588\u2557\u2591\u2591// ACE\r\n// \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u255d\u2591\u2591// ACE\r\n// \u2588\u2588\u2551\u2591\u2591\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557// ACE\r\n// \u255a\u2550\u255d\u2591\u2591\u255a\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u255d\u2591\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d// ACE\r\n// ACE ACE ACE ACE ACE ACE // ACE\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 2e5 + 7, mod = 1e9 + 7;\r\nint DR[]{+1, +1, -1, -1, +1, -1, 0, 0};\r\nint DC[]{+1, -1, +1, -1, 0, 0, +1, -1};\r\ntypedef long long ll;\r\nint n, m, k, dis[1005][1005];\r\nvector<pair<int,int>> adj[N];\r\nvoid dij(int source_node){\r\n   for (int i = 1; i<=n; i++)\r\n      dis[source_node][i] = 1e9;\r\n   priority_queue<pair<int, int>> q;\r\n   q.push({0, source_node}), dis[source_node][source_node] = 0;\r\n   while(!q.empty()){\r\n      int node = q.top().second, d = q.top().first;\r\n      q.pop();\r\n      if(d!=dis[source_node][node])\r\n         continue;\r\n      for(auto v: adj[node]){\r\n         if(v.second + dis[source_node][node] < dis[source_node][v.first]){\r\n            dis[source_node][v.first] = dis[source_node][node] + v.second;\r\n            q.push({dis[source_node][v.first], v.first});\r\n         }\r\n      }\r\n   }\r\n}\r\nint main()\r\n{\r\n   ios_base::sync_with_stdio(0), cin.tie(NULL), cout.tie(NULL);\r\n   cin >> n >> m >> k;\r\n   vector<pair<int,int>> edges,dil;\r\n   for (int i = 1; i <= m; i++){\r\n      int x, y, c;\r\n      cin >> x >> y >> c;\r\n      adj[x].push_back({y, c});\r\n      adj[y].push_back({x, c});\r\n      edges.push_back({x, y});\r\n   }\r\n   for (int i = 1; i <= n; i++){\r\n      dij(i);\r\n   }\r\n   int ans = 1e9;\r\n   while(k--){\r\n      int x, y;\r\n      cin >> x >> y;\r\n      dil.push_back({x, y});\r\n   }\r\n   for(auto v : edges){\r\n      int tmp = 0;\r\n      for(auto u : dil){\r\n         tmp += min({dis[u.first][u.second], dis[u.first][v.first]+dis[v.second]+dis[u.second],dis[u.first][v.second]+dis[v.first][u.second]});\r\n      }\r\n      ans = min(tmp, ans);\r\n   }\r\n   cout << ans << \"\\n\";\r\n   return (0 - 0); // \u2661 \u2661 \u2661\r\n}\r\n"
}