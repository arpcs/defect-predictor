{
    "id": 211796637,
    "contestId": 1427,
    "creationTimeSeconds": 1688281453,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1427,
        "index": "G",
        "name": "One Billion Shades of Grey",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3300,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1427,
        "members": [
            {
                "handle": "return20071007"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1602341400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 113753333\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconstexpr int L = 209, N = L * L, A = 4;\r\nstruct {\r\n  int to, nxt, c;\r\n} es[N * A];\r\nint n, s, t, hd[N], tot = 1, a[N][N], id[N][N], cnt;\r\nint pos[N], ftot, q[N], r, frm[N];\r\nlong long ans;\r\nbool vst[N];\r\nvector<pair<int, int>> tmp;\r\nvoid add(int u, int v, int c) { es[++tot] = {v, hd[u], c}, hd[u] = tot; }\r\nvoid add(int u, int v) { add(u, v, 1), add(v, u, 1); }\r\nvoid uadd(int u, int v) { add(u, v, A), add(v, u, 0); }\r\nbool bfs(int s, int t) {\r\n  memset(vst, false, cnt + 2);\r\n  vst[q[r = 0] = s] = true;\r\n  for (int l = 0, x; l <= r; ++l) {\r\n    if ((x = q[l]) == t) break;\r\n    for (int i = hd[x], y; i; i = es[i].nxt)\r\n      if (es[i].c && !vst[y = es[i].to]) vst[y] = true, frm[q[++r] = y] = i;\r\n  }\r\n  if (!vst[t]) return false;\r\n  while (s != t) {\r\n    int p = frm[t];\r\n    --es[p].c, ++es[p ^ 1].c;\r\n    t = es[p ^ 1].to;\r\n  }\r\n  return true;\r\n}\r\nint msf(int s, int t, int lmt) {\r\n  int ret = 0;\r\n  while (ret < lmt && bfs(s, t)) ++ret;\r\n  return ret;\r\n}\r\nsigned main() {\r\n  cin.tie(nullptr)->sync_with_stdio(false);\r\n  cin >> n;\r\n  for (int i = 1; i <= n; ++i)\r\n    for (int j = 1; j <= n; ++j) {\r\n      int& x = a[i][j];\r\n      if (cin >> x, !~x) continue;\r\n      if (id[i][j] = ++cnt, !x) continue;\r\n      tmp.emplace_back(x, cnt);\r\n    }\r\n  ranges::sort(tmp), s = 0, t = cnt + 1;\r\n  for (auto [x, id] : tmp) uadd(id, t), pos[id] = tot;\r\n  for (int i = 1; i <= n; ++i)\r\n    for (int j = 1; j <= n; ++j)\r\n      if (int u = id[i][j]) {\r\n        if (int v = id[i][j + 1]) add(u, v);\r\n        if (int v = id[i + 1][j]) add(u, v);\r\n      }\r\n  for (int p = 0; auto [x, id] : tmp) {\r\n    ans += 1ll * ftot * (x - p), p = pos[id];\r\n    int w = exchange(es[p].c, 0);\r\n    es[p ^ 1].c = 0, ftot -= msf(id, s, w);\r\n    uadd(s, id), ftot += msf(s, t, A), p = x;\r\n  }\r\n  return cout << ans << endl, 0;\r\n}"
}