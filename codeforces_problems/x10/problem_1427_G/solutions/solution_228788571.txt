{
    "id": 228788571,
    "contestId": 1427,
    "creationTimeSeconds": 1697715138,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1427,
        "index": "G",
        "name": "One Billion Shades of Grey",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3300,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1427,
        "members": [
            {
                "handle": "windy_k"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1602341400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 156467200,
    "source": "#pragma GCC optimize(3)\r\n#pragma GCC target(\"avx\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"inline\")\r\n#pragma GCC optimize(\"-fgcse\")\r\n#pragma GCC optimize(\"-fgcse-lm\")\r\n#pragma GCC optimize(\"-fipa-sra\")\r\n#pragma GCC optimize(\"-ftree-pre\")\r\n#pragma GCC optimize(\"-ftree-vrp\")\r\n#pragma GCC optimize(\"-fpeephole2\")\r\n#pragma GCC optimize(\"-ffast-math\")\r\n#pragma GCC optimize(\"-fsched-spec\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"-falign-jumps\")\r\n#pragma GCC optimize(\"-falign-loops\")\r\n#pragma GCC optimize(\"-falign-labels\")\r\n#pragma GCC optimize(\"-fdevirtualize\")\r\n#pragma GCC optimize(\"-fcaller-saves\")\r\n#pragma GCC optimize(\"-fcrossjumping\")\r\n#pragma GCC optimize(\"-fthread-jumps\")\r\n#pragma GCC optimize(\"-funroll-loops\")\r\n#pragma GCC optimize(\"-fwhole-program\")\r\n#pragma GCC optimize(\"-freorder-blocks\")\r\n#pragma GCC optimize(\"-fschedule-insns\")\r\n#pragma GCC optimize(\"inline-functions\")\r\n#pragma GCC optimize(\"-ftree-tail-merge\")\r\n#pragma GCC optimize(\"-fschedule-insns2\")\r\n#pragma GCC optimize(\"-fstrict-aliasing\")\r\n#pragma GCC optimize(\"-fstrict-overflow\")\r\n#pragma GCC optimize(\"-falign-functions\")\r\n#pragma GCC optimize(\"-fcse-skip-blocks\")\r\n#pragma GCC optimize(\"-fcse-follow-jumps\")\r\n#pragma GCC optimize(\"-fsched-interblock\")\r\n#pragma GCC optimize(\"-fpartial-inlining\")\r\n#pragma GCC optimize(\"no-stack-protector\")\r\n#pragma GCC optimize(\"-freorder-functions\")\r\n#pragma GCC optimize(\"-findirect-inlining\")\r\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\r\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\r\n#pragma GCC optimize(\"inline-small-functions\")\r\n#pragma GCC optimize(\"-finline-small-functions\")\r\n#pragma GCC optimize(\"-ftree-switch-conversion\")\r\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\r\n#pragma GCC optimize(\"-fexpensive-optimizations\")\r\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\r\n#pragma GCC optimize(\"inline-functions-called-once\")\r\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <cstring>\r\n#include <queue>\r\n#include <algorithm>\r\n  \r\n#define AC true\r\n#define dub double\r\n#define ull unsigned long long\r\n#define mar(x) for(int i = head[x]; i; i = e[i].nxt)\r\n#define car(a) memset(a, 0, sizeof(a))\r\nconstexpr int inf = 1e9 + 7;\r\nconstexpr int MAXN = 2e6;\r\n\r\ninline int read( ){\r\n    int x = 0 ; short w = 0 ; char ch = 0;\r\n    while( !isdigit(ch) ) { w|=ch=='-';ch=getchar();}\r\n    while( isdigit(ch) ) {x=(x<<3)+(x<<1)+(ch^48);ch=getchar();}\r\n    return w ? -x : x;\r\n}\r\n  \r\nlong long ans, sum;\r\nint a[MAXN];\r\nint b[720][720], id[720][720];\r\nint n, tot;\r\nnamespace mxf{\r\n    const int N = 2e6 + 10;\r\n    struct edge{\r\n        int u, v, f, nxt;\r\n    } e[N << 1];\r\n    int head[N], cur[N], cnt = 1;\r\n    int dis[N];\r\n    int s, t, flow;\r\n    std::queue<int> q;\r\n      \r\n    void add(int u, int v, int f, int of = 0){\r\n        e[++cnt] = {u, v, f, head[u]};\r\n        head[u] = cnt;\r\n        e[++cnt] = {v, u, of, head[v]};\r\n        head[v] = cnt;\r\n    }\r\n      \r\n    bool bfs( ){\r\n        memset(dis, 0, sizeof(int) * (n * n + 3));\r\n        memcpy(cur, head, sizeof(int) * (n * n + 3));\r\n        q.push(s); dis[s] = 1;\r\n        while(!q.empty( )){\r\n            int x = q.front( ); q.pop( );\r\n            mar(x){\r\n                int y = e[i].v;\r\n                if(dis[y] or !e[i].f) continue;\r\n                dis[y] = dis[x] + 1;\r\n                q.push(y);\r\n            }\r\n        }\r\n        return dis[t];\r\n    }\r\n    int dfs(int x, int low){\r\n        if(x == t){flow += low; return low;}\r\n        int rlow = 0, used = 0;\r\n        for(int &i = cur[x]; i; i = e[i].nxt){\r\n            int y = e[i].v;\r\n            if(!e[i].f or dis[y] != dis[x] + 1) continue;\r\n            if(rlow = dfs(y, std::min(e[i].f, low - used))){\r\n                e[i].f -= rlow;\r\n                e[i^1].f += rlow;\r\n                used += rlow;\r\n                if(low == used) break;\r\n            }\r\n        } \r\n        return used;\r\n    }\r\n      \r\n    int dinic(int s_, int t_, int st = inf){\r\n        flow = 0;\r\n        s = s_; t = t_;\r\n        while(bfs( )){\r\n            st -= dfs(s, st);\r\n            if(!st) break;\r\n        }\r\n        return flow;\r\n    }\r\n};\r\n  \r\nusing mxf:: add;\r\nusing mxf:: dinic;\r\nusing mxf:: e;\r\nusing mxf:: head;\r\nstd::vector<int> ask[MAXN];\r\nint fr[MAXN];\r\nbool ___f2___;\r\nsigned main( ){\r\n#ifdef local\r\n    freopen(\"d.in\", \"r\", stdin);\r\n    freopen(\"d.out\", \"w\", stdout);\r\n#endif\r\n    n = read( );\r\n    int _ = 0;\r\n    for(int i = 1; i <= n; i++){\r\n        for(int j = 1; j <= n; j++){\r\n            b[i][j] = read( );\r\n            id[i][j] = ++_;\r\n            if(b[i][j] > 0) a[++tot] = b[i][j];\r\n        }\r\n    }\r\n      \r\n    std::sort(a + 1, a + tot + 1);\r\n    tot = std::unique(a + 1, a + tot + 1) - a - 1;\r\n    int t = n * n + 1, s = t + 1;\r\n    for(int i = 1; i <= n; i++){\r\n        for(int j = 1; j <= n; j++){\r\n            if(b[i][j] != -1){\r\n                if(i + 1 <= n and b[i + 1][j] != -1) add(id[i][j], id[i + 1][j], 1, 1);\r\n                if(j + 1 <= n and b[i][j + 1] != -1) add(id[i][j], id[i][j + 1], 1, 1);\r\n                if(b[i][j] > 0){\r\n                    add(id[i][j], t, 3);\r\n                    int pos = std::lower_bound(a + 1, a + tot + 1, b[i][j]) - a;\r\n                    ask[pos].push_back(id[i][j]);\r\n                    fr[id[i][j]] = mxf::cnt;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for(int o = 1; o <= tot; o++){\r\n        for(int u: ask[o]){\r\n            int mx = e[fr[u]].f;\r\n            e[fr[u]].f = e[fr[u]^1].f = 0;\r\n            sum -= dinic(u, s, mx);\r\n            add(s, u, 3);\r\n        }\r\n        sum += dinic(s, t, 4);\r\n        ans += (a[o + 1] - a[o]) * sum;\r\n    }\r\n      \r\n    printf(\"%lld\\n\",ans);\r\n#ifdef local\r\n    putchar('\\n');\r\n    printf(\"MLE:%lld\\n\",((&___f2___)-(&___f1___))/1024/1024);\r\n    printf(\"TLE:%lld\\n\",(long long)clock( ));\r\n#endif\r\n    return (0-0);\r\n}"
}