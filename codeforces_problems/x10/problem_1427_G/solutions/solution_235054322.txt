{
    "id": 235054322,
    "contestId": 1427,
    "creationTimeSeconds": 1701349581,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1427,
        "index": "G",
        "name": "One Billion Shades of Grey",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3300,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1427,
        "members": [
            {
                "handle": "GuideZombie"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1602341400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 129,
    "timeConsumedMillis": 966,
    "memoryConsumedBytes": 8089600,
    "source": "// LUOGU_RID: 137602655\n#include <bits/stdc++.h>\ntypedef long long ll;\nusing std::max; using std::min;\n#define INF 1e18\n#define rd() read<ll>()\n#define lowbit(x) -x & x\n#define E(i, l, r) for (int i = l; i <= r; ++ i)\n#define FILE(filename) { \\\n  freopen(#filename \".in\", \"r\", stdin); \\\n  freopen(#filename \".out\", \"w\", stdout); \\\n}\ntemplate <typename T> inline T read() {\n  T x = 0; char c = getchar(); bool f = 0;\n  while (c < '0' || c > '9') {if (c == '-') f = 1; c = getchar();}\n  while (c >= '0' && c <= '9') x = (x << 3) + (x << 1) + (c ^ 48), c = getchar();\n  return f ? -x : x;\n}\ntemplate <typename T> void write(T x) {\n  if (x < 0) {putchar('-'); x = -x;}\n  if (x / 10) write(x / 10);\n  putchar((x % 10) ^ 48);\n}\nnamespace pigeon {\n  const int N = 205;\n  int n; ll a[N][N];\n  namespace solution {\n    const int M = 40005;\n    bool is[M], it[M], vis[M];\n    ll cap[M << 2], w[M << 2], ff;\n    int h[M], e[M << 2], ne[M << 2], idx;\n    std::vector<std::pair<int, int> > p;\n    void add(int x, int y) {\n      ne[idx] = h[x];\n      e[idx] = y; cap[idx] = 1; w[idx] = 0;\n      h[x] = idx ++;\n    }\n    ll get(int x, int y) {return (x - 1) * n + y;}\n    ll dfs(ll x, ll flow) {\n      if (it[x] && flow == 1) return 1;\n      if (is[x] && flow == -1) return 1;\n      vis[x] = 1;\n      for (int i = h[x]; ~i; i = ne[i]) {\n        ll go = e[i];\n        if (flow == 1 && w[i] == 1) continue;\n        if (flow == -1 && w[i] != -1) continue;\n        if (vis[go]) continue;\n        if (dfs(go, flow)) {\n          ++ w[i]; -- w[i ^ 1];\n          return 1;\n        }\n      }\n      return 0;\n    }\n    void solve() {\n      memset(h, -1, sizeof h);\n      E(i, 1, n) E(j, 1, n)\n        if (a[i][j] >= 0) {\n          if (i + 1 <= n && a[i + 1][j] >= 0)\n            add(get(i, j), get(i + 1, j)), add(get(i + 1, j), get(i, j));\n          if (j + 1 <= n && a[i][j + 1] >= 0)\n            add(get(i, j), get(i, j + 1)), add(get(i, j + 1), get(i, j));\n          if (a[i][j] > 0) {\n            it[get(i, j)] = 1;\n            p.push_back(std::make_pair(a[i][j], get(i, j)));\n          }\n        }\n      std::sort(p.begin(), p.end());\n      ll ans = 0;\n      E(i, 0, (int)p.size() - 2) {\n        ll x = p[i].second;\n        memset(vis, 0, sizeof vis);\n        while (dfs(x, -1)) {-- ff; memset(vis, 0, sizeof vis);}\n        it[x] = 0; is[x] = 1; memset(vis, 0, sizeof vis);\n        E(j, 0, i) {\n          if (!vis[p[j].second])\n            while (dfs(p[j].second, 1)) {\n              ++ ff; memset(vis, 0, sizeof vis);\n            }\n        } ans += (p[i + 1].first - p[i].first) * ff;\n      } write(ans);\n    }\n  }\n  void Main() {\n    n = rd();\n    E(i, 1, n)\n      E(j, 1, n) a[i][j] = rd();\n    solution::solve();\n  }\n}\nint main() {\n  // FILE();\n  int T = 1;\n  while (T --) pigeon::Main();\n  return 0;\n}"
}