{
    "id": 218250626,
    "contestId": 1437,
    "creationTimeSeconds": 1691731019,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1437,
        "index": "E",
        "name": "Make It Increasing",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "dp",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1437,
        "members": [
            {
                "handle": "Sundar_2022"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603809300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 11980800,
    "source": "// LUOGU_RID: 120230729\n#include<bits/stdc++.h>\r\n#define int long long\r\nusing namespace std;\r\n\r\nvoid read() {} template<typename T,typename... T2>inline void read(T &x,T2 &... oth) { x=0;int ch=getchar(),f=0;while(ch<'0'||ch>'9') { if (ch=='-') f=1;ch=getchar();}while(ch>='0'&&ch<='9') { x=(x<<1)+(x<<3)+(ch^48);ch=getchar();}if(f)x=-x;read(oth...);}\r\nvoid write(int x) { if(x==0)return;write(x/10);putchar(x%10+'0'); }\r\n\r\nint T,N,M,len,H[500005],G[500005],DP[500005];\r\nint ans;\r\n\r\nsigned main()\r\n{\r\n\t//freopen(\"C5.in\",\"r\",stdin);\r\n\t//freopen(\"C5.out\",\"w\",stdout);\r\n\t\r\n\tread(N,M);\r\n    for(int i=2;i<=(N+1);i++) read(H[i]),H[i]-=i;\r\n\tfor(int i=2;i<=(M+1);i++) read(G[i]),G[i]++;\r\n\tN=N+2;M=M+2;\r\n\tH[1]=-1000000000; G[1]=1;\r\n\tH[N]=1000000000;  G[M]=N;\r\n\t\r\n\tfor(int i=2;i<=M;i++){\r\n\t\tif(H[G[i-1]]>H[G[i]]){\r\n\t\t\tprintf(\"-1\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\tfor(int i=2;i<=M;i++){\r\n\t\tlen=0;\r\n\t    DP[0]=-1000000000;\r\n\t    for(int j=G[i-1]+1;j<=G[i]-1;j++)\r\n\t    {\r\n\t    \t//printf(\"%d\",j);\r\n\t    \tif(H[j]<H[G[i-1]] or H[j]>H[G[i]]){\r\n\t\t\t\tcontinue;\r\n\t    \t}\r\n\t    \t\r\n\t        int l=1,r=len;\r\n\t        if(H[j] >= DP[len]) DP[++len] = H[j];\r\n\t        else {\r\n\t\t\t\twhile(r-l>=1){\r\n\t\t\t\t\tint mid=(l+r)>>1;\r\n\t\t\t\t\tif(DP[mid]>H[j]) r=mid;\r\n\t\t\t\t\telse             l=mid+1;\r\n\t\t\t\t}\r\n\t\t\t\tint pos=l+1;\r\n\t\t\t\tif(pos>len) len=pos;\r\n\t\t\t\tDP[pos]=H[j];\r\n\t\t\t}\r\n\t    }\r\n\t    for(int i=1;i<=len;i++) DP[i]=0;\r\n\t    ans+=len;\r\n\t}\r\n    printf(\"%lld\",ans);\r\n    return 0;\r\n}\r\n/*\r\n-10000000 1 2 1 1 3 5 1 10000000\r\n1 3 5 9\r\n*/\r\n"
}