{
    "id": 228158862,
    "contestId": 1437,
    "creationTimeSeconds": 1697282138,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1437,
        "index": "E",
        "name": "Make It Increasing",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "dp",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1437,
        "members": [
            {
                "handle": "bebera"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1603809300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 16076800,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n\r\nconst int N = 5e5 + 10;\r\n\r\nint n, k;\r\nint b[N], pressed[N + 10], tree[4 * N];\r\npair < int, int > a[N];\r\n\r\nvoid update(int u, int L, int R, int ind, int val, bool erase)\r\n{\r\n\tint m = L + R >> 1;\r\n\r\n\tif (ind > R || ind < L) return;\r\n\t\r\n\tif (L == R && L == ind) \r\n\t{\r\n\t\ttree[u] = (erase == true) ? -1 : max(tree[u], val);\r\n\t\treturn;\r\n\t}\r\n\r\n\r\n\tupdate(u << 1, L, m, ind, val, erase);\r\n\tupdate(u << 1 | 1, m + 1, R, ind, val, erase);\r\n\r\n\ttree[u] = max(tree[u << 1], tree[u << 1 | 1]);\r\n}\r\n\r\nint get(int u, int L, int R, int l, int r)\r\n{\r\n\tint m = L + R >> 1;\r\n\r\n\tif (l <= L && r >= R) return tree[u];\r\n\tif (l > R || r < L) return -1;\r\n\r\n\treturn max(get(u << 1, L, m, l, r), get(u << 1 | 1, m + 1, R, l, r));\r\n}\r\n\r\nvoid press()\r\n{\r\n\tsort (a + 1, a + n + 1);\r\n\r\n\tint cnt = 0, prev = -1e9;\r\n\r\n\tfor (int i = 1; i <= n; i++)\r\n\t{\r\n\t\twhile (i <= n && a[i].first == prev) pressed[a[i].second] = cnt, i++;\r\n\t\t\r\n\t\tpressed[a[i].second] = ++cnt;\r\n\r\n\t\tprev = a[i].first;\r\n\t}\r\n}\r\n\r\nmain()\r\n{\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\r\n\tcin >> n >> k;\r\n\r\n\tfor (int i = 1; i <= n; i++) cin >> a[i].first, a[i].second = i, a[i].first -= i;\r\n\r\n\tfor (int i = 1; i <= k; i++) cin >> b[i];\r\n\r\n\tpress();\r\n\r\n\tint dp[n + 1];\r\n\r\n\tfor (int i = 0; i <= n; i++) dp[i] = -1;\r\n\r\n\tvector < pair < int, int > > ranges;\r\n\r\n\tfor (int i = 1; i <= k; i++)\r\n\t{\r\n\t\tif (i == 1) ranges.push_back({0, b[i]});\r\n\t\telse ranges.push_back({b[i - 1], b[i]});\r\n\t\t\r\n\t\tif (i == k && b[i] != n) ranges.push_back({b[i], 1e9});\r\n\t}\r\n\r\n\tif (k == 0) ranges.push_back({0, 1e9});\r\n\r\n\tll answer = 0;\r\n\r\n\tfor (int i = 0; i <= n; i++) update(1, 0, N, i, -1, true);\r\n\r\n\tpressed[0] = 0;\r\n\r\n\tfor (int i = 0; i <= k; i++)\r\n\t{\r\n\t\tif (i != 0) \r\n\t\t{\r\n\t\t\tfor (int l = ranges[i - 1].first; l <= ranges[i - 1].second; l++) dp[l] = -1, update(1, 0, N, pressed[l], -1, true);\r\n\t\t}\r\n\r\n\t\tdp[ranges[i].first] = 0;\r\n\t\tupdate(1, 0, N, pressed[ranges[i].first], 0, false);\r\n\r\n\t\tfor (int j = ranges[i].first + 1; j <= min (ranges[i].second, n); j++)\r\n\t\t{\r\n\t\t\tint mx = get(1, 0, N, 0, pressed[j]);\r\n\t\t\tdp[j] = mx == -1 ? -1 : mx + 1;\r\n\r\n\t\t\tupdate(1, 0, N, pressed[j], dp[j], false);\r\n\t\t}\r\n\r\n\t\tint curAns = get(1, 0, N, 0, n);\r\n\r\n\t\tif (ranges[i].second == 1e9) \r\n\t\t{\r\n\t\t\tif (curAns == -1) \r\n\t\t\t{\r\n\t\t\t\tcout << \"-1\\n\";\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse answer += curAns;\r\n\t\t}\r\n\t\telse \r\n\t\t{\r\n\t\t\tif (dp[ranges[i].second] == -1) \r\n\t\t\t{\r\n\t\t\t\tcout << \"-1\\n\";\r\n\t\t\t\treturn -1;\r\n\t\t\t}\r\n\t\t\telse answer += dp[ranges[i].second];\r\n\t\t}\r\n\t}\r\n\r\n\tcout << n - answer << \"\\n\";\r\n}\t"
}