{
    "contestId": 1249,
    "index": "D1",
    "name": "Too Many Segments (easy version)",
    "type": "PROGRAMMING",
    "rating": 1800,
    "tags": [
        "greedy"
    ],
    "desc": {
        "title": "D1. Too Many Segments (easy version)",
        "statement": "<p><span class=\"tex-font-style-bf\">The only difference between easy and hard versions is constraints</span>.</p><p>You are given $$$n$$$ segments on the coordinate axis $$$OX$$$. Segments can intersect, lie inside each other and even coincide. The $$$i$$$-th segment is $$$[l_i; r_i]$$$ ($$$l_i \\le r_i$$$) and it covers all integer points $$$j$$$ such that $$$l_i \\le j \\le r_i$$$.</p><p>The integer point is called <span class=\"tex-font-style-bf\">bad</span> if it is covered by <span class=\"tex-font-style-bf\">strictly more</span> than $$$k$$$ segments.</p><p>Your task is to remove the minimum number of segments so that there are no <span class=\"tex-font-style-bf\">bad</span> points at all.</p>",
        "inputSpecification": "<p>The first line of the input contains two integers $$$n$$$ and $$$k$$$ ($$$1 \\le k \\le n \\le 200$$$) \u2014 the number of segments and the maximum number of segments by which each integer point can be covered.</p><p>The next $$$n$$$ lines contain segments. The $$$i$$$-th line contains two integers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le 200$$$) \u2014 the endpoints of the $$$i$$$-th segment.</p>",
        "outputSpecification": "<p>In the first line print one integer $$$m$$$ ($$$0 \\le m \\le n$$$) \u2014 the minimum number of segments you need to remove so that there are no <span class=\"tex-font-style-bf\">bad</span> points.</p><p>In the second line print $$$m$$$ <span class=\"tex-font-style-bf\">distinct</span> integers $$$p_1, p_2, \\dots, p_m$$$ ($$$1 \\le p_i \\le n$$$) \u2014 indices of segments you remove in any order. If there are multiple answers, you can print any of them.</p>",
        "samples": [
            {
                "input": "\n7 2\n11 11\n9 11\n7 8\n8 9\n7 8\n9 11\n7 9\n",
                "output": "\n3\n1 4 7 \n"
            },
            {
                "input": "\n5 1\n29 30\n30 30\n29 29\n28 30\n30 30\n",
                "output": "\n3\n1 2 4 \n"
            },
            {
                "input": "\n6 1\n2 3\n3 3\n2 3\n2 2\n2 3\n2 3\n",
                "output": "\n4\n1 3 5 6 \n"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "segment trees",
        "greedy algorithms",
        "data structures",
        "optimization",
        "algorithm design",
        "mathematics",
        "interval management",
        "dynamic programming",
        "implementation",
        "computational geometry",
        "coordinate systems",
        "integer points",
        "intersection algorithms",
        "algorithmic complexity",
        "array manipulation",
        "set theory",
        "combinatorics",
        "graph theory",
        "search algorithms",
        "constraint satisfaction"
    ]
}