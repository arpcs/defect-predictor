{
    "id": 201957558,
    "contestId": 718,
    "creationTimeSeconds": 1681399238,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 718,
        "index": "D",
        "name": "Andrew and Chemistry",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2900,
        "tags": [
            "dp",
            "hashing",
            "trees"
        ]
    },
    "author": {
        "contestId": 718,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1474635900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 78,
    "timeConsumedMillis": 733,
    "memoryConsumedBytes": 111718400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e6 + 7;\nvector<int> adj[N];\nint cnt, Hash[N];\n\nmap<multiset<int>, int> ID;\nmap<int, int> id;\nmap<int, multiset<int>> subtree;\n\nint dfs(int u, int p) {\n    auto& sub = subtree[u];\n    for (int v : adj[u]) {\n        if (v == p) continue;\n        sub.emplace(dfs(v, u));\n    }\n    if (!ID.count(sub)) ID[sub] = ++cnt;\n    id[u] = ID[sub];\n    return ID[sub];\n}\n\nvoid dfs2(int u, int p, int g) {\n    auto& sub = subtree[u];\n    if (u != 1) sub.emplace(g);\n\n    if (!ID.count(sub)) ID[sub] = ++cnt;\n    Hash[u] = ID[sub];\n\n    for (int v : adj[u]) {\n        if (v == p) continue;\n        sub.erase(sub.find(id[v]));\n\n        if (!ID.count(sub)) ID[sub] = ++cnt;\n        dfs2(v, u, ID[sub]), sub.emplace(id[v]);\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    int n;\n    cin >> n;\n\n    for (int i = 1; i < n; i++) {\n        int u, v;\n        cin >> u >> v;\n\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n\n    cnt = 1;\n    ID[multiset<int>()] = 1;\n    dfs(1, 1), dfs2(1, 1, 1);\n\n    set<int> st;\n    for (int i = 1; i <= n; i++) {\n        if (adj[i].size() < 4) st.emplace(Hash[i]);\n    }\n\n    cout << st.size() << endl;\n}\n\n\t \t   \t   \t\t\t\t\t      \t\t\t    \t"
}