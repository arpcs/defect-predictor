{
    "id": 231402194,
    "contestId": 718,
    "creationTimeSeconds": 1699147289,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 718,
        "index": "D",
        "name": "Andrew and Chemistry",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2900,
        "tags": [
            "dp",
            "hashing",
            "trees"
        ]
    },
    "author": {
        "contestId": 718,
        "members": [
            {
                "handle": "_mjj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1474635900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 264,
    "memoryConsumedBytes": 15564800,
    "source": "// LUOGU_RID: 133425940\n#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <vector>\r\n#include <cstdio>\r\n#include <queue>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <cmath>\r\n#include <map>\r\n#include <stack>\r\n#include <sstream>\r\n#include <random>\r\n#include <ctime>\r\n#include <chrono>\r\n#include <bitset>\r\n#include <iomanip>\r\n#define ios ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\r\n#define TIME cerr << 1e3 * clock() / CLOCKS_PER_SEC << \" ms\\n\";\r\n#define debug(x) cerr << #x << \" : \" << x << '\\n'\r\n#define all(v) v.begin() , v.end()\r\n// std::mt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count());\r\n\r\n#define x first\r\n#define y second\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef unsigned long long ull;\r\ntypedef pair<int , int> PII;\r\n\r\nconst int N = 2e5 + 5;\r\nconst int INF = 0x3f3f3f3f;\r\nconst int mod = 998244353;\r\n\r\nint read(){\r\n    int x = 0 , f = 1;\r\n    char c = getchar();\r\n    while(c < '0' || c > '9'){\r\n        if(c == '-')f = -1;\r\n        c = getchar();\r\n    }\r\n    while(c >= '0' && c <= '9'){\r\n        x = x * 10 + c - '0';\r\n        c = getchar();\r\n    }\r\n    return x * f;\r\n}\r\n\r\ntemplate <typename T> inline void write(T x) {\r\n    static int stk[100], top = 0;\r\n    if (x == 0) return (void)putchar('0');\r\n    if (x < 0) x = -x, putchar('-');\r\n    while (x) stk[++top] = x % 10, x /= 10;\r\n    while (top) putchar(stk[top--] + '0');\r\n}\r\n\r\nvector<int> q[N];\r\null f[N] , SZ[N];\r\nint primes[N], mu[N], phi[N], cnt;\r\nbool st[N];\r\nint n;\r\nint d[N];\r\n\r\nvoid init(int n)\r\n{\r\n    mu[1] = phi[1] = 1;\r\n    for (int i = 2; i <= n; i ++ )\r\n    {\r\n        if (!st[i]) primes[cnt ++] = i, mu[i] = -1, phi[i] = i - 1;\r\n        for (int j = 0; primes[j] * i <= n; j ++ )\r\n        {\r\n            int p = primes[j];\r\n            st[i * p] = true;\r\n            if (i % p == 0){phi[i * p] = phi[i] * p; break;}\r\n            mu[i * p] = -mu[i]; phi[i * p] = phi[i] * (p - 1);\r\n        }\r\n    }\r\n    reverse(primes , primes + cnt);\r\n}\r\n\r\nvoid dfs(int u , int fa){\r\n    f[u] = 1 , SZ[u] = 1;\r\n    for(auto c : q[u]){\r\n        if(c == fa)continue;\r\n        dfs(c , u);\r\n        SZ[u] += SZ[c];\r\n        f[u] += f[c] * primes[SZ[c]];\r\n    }\r\n}\r\n\r\nvoid dfs1(int u , int fa){\r\n    for(auto c : q[u]){\r\n        if(c == fa)continue;\r\n        f[c] += (f[u] - f[c] * primes[SZ[c]]) * primes[n - SZ[c]];\r\n        dfs1(c , u);\r\n    }\r\n}\r\n\r\nvoid solve(){\r\n    cin >> n;\r\n    for(int i = 1 ; i < n ; i ++){\r\n        int a , b;\r\n        cin >> a >> b;\r\n        d[a] ++ , d[b] ++;\r\n        q[a].push_back(b);\r\n        q[b].push_back(a);\r\n    }\r\n    dfs(1 , -1);\r\n    dfs1(1 , -1);\r\n    set<ull> s;\r\n    for(int i = 1 ; i <= n ; i ++){\r\n        if(d[i] >= 4)continue;\r\n        s.insert(f[i]);\r\n    }\r\n    cout << s.size() << endl;\r\n}\r\n\r\nint main(){\r\n    init(N - 1);\r\n    // freopen(\"test.in\",\"r\",stdin);\r\n    // freopen(\"test.out\",\"w\",stdout);\r\n    int T = 1;\r\n    // cin >> T;\r\n    while(T --){\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n/* stuff you should look for\r\n * int overflow, array bounds\r\n * special cases (n=1?)\r\n * do smth instead of nothing and stay organized\r\n * WRITE STUFF DOWN\r\n * DON'T GET STUCK ON ONE APPROACH\r\n */"
}