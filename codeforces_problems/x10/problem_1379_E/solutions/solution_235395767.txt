{
    "id": 235395767,
    "contestId": 1379,
    "creationTimeSeconds": 1701527098,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1379,
        "index": "E",
        "name": "Inverse Genealogy",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2800,
        "tags": [
            "constructive algorithms",
            "divide and conquer",
            "dp",
            "math",
            "trees"
        ]
    },
    "author": {
        "contestId": 1379,
        "members": [
            {
                "handle": "fallleaves07"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1595149200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 2355200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ld = long double;\r\n\r\nint main(void) {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr), cout.tie(nullptr);\r\n    int n, k;\r\n    cin >> n >> k;\r\n    if (n % 2 == 0) {\r\n        cout << \"NO\\n\";\r\n    } else {\r\n        const int N = 300;\r\n        vector f(N, vector(N, tuple{-1, -1, -1, -1}));\r\n        f[1][0] = {0, 0, 0, 0};\r\n        for (int i = 3; i < N; i += 2) {\r\n            for (int p = 1; p < i; p += 2) {\r\n                int q = i - 1 - p;\r\n                for (int x = 0; x <= p / 2; x++) {\r\n                    if (get<0>(f[p][x]) != -1) {\r\n                        for (int y = 0; y <= q / 2; y++) {\r\n                            if (get<0>(f[q][y]) != -1) {\r\n                                int cnt = x + y +\r\n                                          (min(p, q) * 2 <= max(p, q) ? 1 : 0);\r\n                                f[i][cnt] = {p, x, q, y};\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        vector<int> fa(n + 1), pw(n + 1);\r\n        for (int i = 1; i <= n; i = i << 1 | 1) {\r\n            pw[i] = i;\r\n        }\r\n        for (int i = 2; i <= n; i++) {\r\n            if (!pw[i]) {\r\n                pw[i] = pw[i - 1];\r\n            }\r\n        }\r\n        int lim = n / 2 - 1;\r\n        bool tag = true;\r\n        if (k > lim) {\r\n            tag = false;\r\n        }\r\n        if (pw[n] == n && k == 1) {\r\n            tag = false;\r\n        }\r\n        if (pw[n] != n && k == 0) {\r\n            tag = false;\r\n        }\r\n        int idc = 0;\r\n        auto solve = [&](auto self, int v, int cnt, int k) -> void {\r\n            if (cnt <= 1) {\r\n                return;\r\n            }\r\n\r\n            if (cnt < N && get<0>(f[cnt][k]) != -1) {\r\n                auto [p, x, q, y] = f[cnt][k];\r\n                fa[++idc] = v;\r\n                self(self, idc, p, x);\r\n                fa[++idc] = v;\r\n                self(self, idc, q, y);\r\n            } else {\r\n                if (k > 3) {\r\n                    fa[++idc] = v;\r\n                    fa[++idc] = v;\r\n                    self(self, idc, cnt - 2, k - 1);\r\n                } else if (cnt >= N) {\r\n                    int lsz = 1;\r\n                    while (lsz * 2 <= cnt - lsz) {\r\n                        lsz = lsz << 1 | 1;\r\n                    }\r\n                    fa[++idc] = v;\r\n                    self(self, idc, lsz, 0);\r\n                    fa[++idc] = v;\r\n                    self(self, idc, cnt - lsz, k);\r\n                } else {\r\n                    assert(false);\r\n                }\r\n            }\r\n        };\r\n        if (tag) {\r\n            cout << \"YES\\n\";\r\n            solve(solve, ++idc, n, k);\r\n            for (int i = 1; i <= n; i++) {\r\n                cout << fa[i] << ' ';\r\n            }\r\n            cout << '\\n';\r\n        } else {\r\n            cout << \"NO\\n\";\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}