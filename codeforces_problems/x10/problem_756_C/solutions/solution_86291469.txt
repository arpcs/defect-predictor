{
    "id": 86291469,
    "contestId": 756,
    "creationTimeSeconds": 1594225336,
    "relativeTimeSeconds": 4936,
    "problem": {
        "contestId": 756,
        "index": "C",
        "name": "Nikita and stack",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 756,
        "members": [
            {
                "handle": "risujiroh"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1594220400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 47,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 6348800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#ifdef LOCAL\r\n#include \"debug.h\"\r\n#else\r\n#define DEBUG(...)\r\n#endif\r\n\r\ntemplate <class T> struct segtree {\r\n  const int n;\r\n  vector<T> t;\r\n  segtree(int _n = 0) : n(_n), t(2 * n) {}\r\n  T& operator[](int i) { return t[n + i]; }\r\n  void build() { for (int i = n; i--; ) t[i] = t[2 * i] * t[2 * i + 1]; }\r\n  T fold(int l, int r) const {\r\n    T a, b;\r\n    for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\r\n      if (l & 1) a = a * t[l++];\r\n      if (r & 1) b = t[--r] * b;\r\n    }\r\n    return a * b;\r\n  }\r\n  void set(int i, T a) {\r\n    t[i += n] = a;\r\n    while (i >>= 1) t[i] = t[2 * i] * t[2 * i + 1];\r\n  }\r\n};\r\n\r\ntemplate <class T> constexpr T inf = numeric_limits<T>::max() / 2.1;\r\n\r\nstruct node {\r\n  int d = 0, l = -inf<int>;\r\n  node operator*(node b) const {\r\n    return {d + b.d, max(l + b.d, b.l)};\r\n  }\r\n  int operator()(int x) const {\r\n    return max(x + d, l);\r\n  }\r\n};\r\n\r\nint main() {\r\n  cin.tie(nullptr);\r\n  ios::sync_with_stdio(false);\r\n  int n;\r\n  cin >> n;\r\n  vector<int> x(n, -1);\r\n  segtree<node> seg(n);\r\n  for (int i = 0; i < n; ++i) {\r\n    int p, t;\r\n    cin >> p >> t;\r\n    --p;\r\n    if (t == 0) {\r\n      seg.set(p, {-1, 0});\r\n    } else {\r\n      cin >> x[p];\r\n      seg.set(p, {+1, 0});\r\n    }\r\n    if (seg.fold(0, n)(0)) {\r\n      int ok = 0, ng = n;\r\n      while (ng - ok > 1) {\r\n        int mid = (ok + ng) / 2;\r\n        (seg.fold(mid, n)(0) ? ok : ng) = mid;\r\n      }\r\n      cout << x[ok] << '\\n';\r\n    } else {\r\n      cout << \"-1\\n\";\r\n    }\r\n  }\r\n}\r\n"
}