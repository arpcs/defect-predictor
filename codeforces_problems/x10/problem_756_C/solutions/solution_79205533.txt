{
    "id": 79205533,
    "contestId": 756,
    "creationTimeSeconds": 1588793348,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 756,
        "index": "C",
        "name": "Nikita and stack",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 756,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1485108900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4505600,
    "source": "#include \"bits/stdc++.h\"\n\n#define int long long\n#define endl '\\n'\n\nusing namespace std;\n\nint a[100000];\nint N;\n\nstruct ArvoreDeSeguimentos\n{\n    int esquerda, direita;\n    int maximo = 0, d = 0;\n    ArvoreDeSeguimentos *esq, *dir;\n    ArvoreDeSeguimentos(int _esquerda, int _direita)\n    {\n        esquerda = _esquerda;\n        direita = _direita;\n        if (esquerda != direita)\n        {\n            int t = (esquerda + direita) / 2;\n            esq = new ArvoreDeSeguimentos(esquerda, t);\n            dir = new ArvoreDeSeguimentos(t + 1, direita);\n        }\n    }\n    void push()\n    {\n        if (esquerda != direita)\n        {\n            esq->maximo += d, esq->dir += d;\n            dir->maximo += d, dir->d += d;\n            d = 0;\n        }\n    }\n    void add(int pilhaEsq, int pilhaDir, int x)\n    {\n        if (direita < pilhaEsq || esquerda > pilhaDir)\n            return;\n        if (esquerda >= pilhaEsq && direita <= pilhaDir)\n            maximo = x + maximo, d += x;\n        else\n        {\n            push();\n            esq->add(pilhaEsq, pilhaDir, x);\n            dir->add(pilhaEsq, pilhaDir, x);\n            maximo = max(esq->maximo, dir->maximo);\n        }\n    }\n    int get()\n    {\n        push();\n        if (maximo <= 0)\n            return -1;\n        if (esquerda == direita)\n            return a[esquerda];\n        int resposta = dir->get();\n        if (resposta != -1)\n            return resposta;\n        else\n            return esq->get();\n    }\n};\n\nvoid onStarted()\n{\n    cin >> N;\n    ArvoreDeSeguimentos pilha(0, N - 1);\n    while (N--)\n    {\n        int k, t;\n        cin >> k >> t;\n        k--;\n        if (!t)\n            pilha.add(0, k, -1);\n        else\n        {\n            pilha.add(0, k, 1);\n            int x;\n            cin >> x;\n            a[k] = x;\n        }\n        cout << pilha.get() << endl;\n    }\n}\n\nsigned main()\n{\n    onStarted();\n}\n\t \t \t \t\t\t\t  \t  \t\t\t \t\t    \t"
}