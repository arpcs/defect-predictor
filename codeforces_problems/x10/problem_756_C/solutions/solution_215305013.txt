{
    "id": 215305013,
    "contestId": 756,
    "creationTimeSeconds": 1690177158,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 756,
        "index": "C",
        "name": "Nikita and stack",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 756,
        "members": [
            {
                "handle": "bkifhr9"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1485108900
    },
    "programmingLanguage": "Java 11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\n\npublic class Main{\n    static int flag=0;\n    public static void main(String[] args) {\n         Scanner sc=new Scanner(System.in);\n         int t = sc.nextInt();\n        while(t-->0){\n            int k=0;\n            Node root=null;\n            int x=0;\n            int n=sc.nextInt();\n            int arr[]=new int[n];\n            int a=n;\n            while(a-->0){\n                if(k==0){\n                arr[x]=sc.nextInt();\n                root=new Node(arr1[x]);\n                x++;\n                k=1;\n        }\n        else{\n        arr[x]=sc.nextInt();\n        root=insert(root,arr1[x]);\n        x++;\n       }\n      }\n    System.out.println(isComp(root)==true?\"Yes\":\"No\");\n    }\n\n }\n\n public static Node insert(Node root,int key){\n    if(root==null)  \n    return new Node(key);\n    if(key<root.val){\n        root.left=insert(root.left,key);\n        \n    }\n    else if(key>root.val){\n     root.right=insert(root.right,key);\n   }\n   return root;\n }\n\n static boolean isComp(Node root){\n    boolean ans=false;\n     Queue<Node> q=new LinkedList<>();\n    q.add(root);\n    while(!q.isEmpty()){\n    Node curr=q.poll();\n    if(curr.left!=null){\n    q.add(curr.left);\n    if(ans==true)\n        return false;\n    }\n    if(curr.left==null)\n    ans=true;\n    if(curr.right!=null){\n    q.add(curr.right);\n        if(ans==true)\n        return false;\n       }\n       if(curr.right==null)\n       ans=true;\n     }\n     return true;\n }\n}\n\nclass Pair{\n  int head;\n  Node node;\n   Pair(int head,Node node){\n    this.head=head;\n    this.node=node;\n  }\n\n}\n\nclass Node{\n  int val;\n  Node left;\n  Node right;\n  Node(int val){\n    this.val=val;\n\n  }\n\n}\n\n\n\n\n \t\t \t\t  \t\t\t   \t   \t\t  \t\t   \t  \t"
}