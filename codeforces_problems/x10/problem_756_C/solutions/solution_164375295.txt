{
    "id": 164375295,
    "contestId": 756,
    "creationTimeSeconds": 1657927629,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 756,
        "index": "C",
        "name": "Nikita and stack",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 756,
        "members": [
            {
                "handle": "okwedook"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1485108900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 47,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 2560000,
    "source": "#pragma GCC optimize(\"O3\", \"unroll-loops\")\n#pragma GCC target(\"sse4.2\")\n\n#include <algorithm>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <cmath>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <random>\n#include <set>\n#include <sstream>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\nusing namespace std;\n\nvoid initIO() {\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    cout << fixed << setprecision(12);\n}\n\nusing ll = long long;\nusing ld = long double;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing graph = vector<vector<int>>;\n\nconst ld eps = 1e-9;\nconst int mod = 1000000007;\nconst ll inf = 3000000000000000007ll;\n\n#define pb push_back\n#define pf push_front\n#define popb pop_back\n#define popf pop_front\n#define f first\n#define s second\n#define sz(a) signed((a).size())\n#define all(a) (a).begin(), (a).end()\n#define rall(a) (a).rbegin(), (a).rend()\n\n#ifdef DEBUG\n    mt19937 gen(857204);\n#else\n    mt19937 gen(chrono::high_resolution_clock::now().time_since_epoch().count());\n#endif\n\nvoid flush() { cout << flush; }\nvoid flushln() { cout << endl; }\nvoid println() { cout << '\\n'; }\ntemplate<class T> void print(const T &x) { cout << x; }\ntemplate<class T> void read(T &x) { cin >> x; }\ntemplate<class T, class ...U> void read(T &x, U& ... u) { read(x); read(u...); }\ntemplate<class T, class ...U> void print(const T &x, const U& ... u) { print(x); print(u...); }\ntemplate<class T, class ...U> void println(const T &x, const U& ... u) { print(x); println(u...); }\n\n#ifdef DEBUG\n    namespace TypeTraits {\n        template<class T> constexpr bool IsString = false;\n        template<> constexpr bool IsString<string> = true;\n        template<class T, class = void> struct IsIterableStruct : false_type{};\n        template<class T>\n        struct IsIterableStruct<\n            T,\n            void_t<\n                decltype(begin(declval<T>())),\n                decltype(end(declval<T>()))\n            >\n        > : true_type{};\n        template<class T> constexpr bool IsIterable = IsIterableStruct<T>::value;\n        template<class T> constexpr bool NonStringIterable = !IsString<T> && IsIterable<T>;\n        template<class T> constexpr bool DoubleIterable = IsIterable<decltype(*begin(declval<T>()))>;\n    };\n    // Declaration (for cross-recursion)\n    template<class T>\n    auto pdbg(const T&x) -> enable_if_t<!TypeTraits::NonStringIterable<T>, string>;\n    string pdbg(const string &x);\n    template<class T>\n    auto pdbg(const T &x) -> enable_if_t<TypeTraits::NonStringIterable<T>, string>;\n    template<class T, class U>\n    string pdbg(const pair<T, U> &x);\n\n    // Implementation\n    template<class T>\n    auto pdbg(const T &x) -> enable_if_t<!TypeTraits::NonStringIterable<T>, string> {\n        stringstream ss;\n        ss << x;\n        return ss.str();\n    }\n    template<class T, class U>\n    string pdbg(const pair<T, U> &x) {\n        return \"{\" + pdbg(x.f) + \",\" + pdbg(x.s) + \"}\";\n    }\n    string pdbg(const string &x) {\n        return \"\\\"\" + x + \"\\\"\";\n    }\n    template<class T>\n    auto pdbg(const T &x) -> enable_if_t<TypeTraits::NonStringIterable<T>, string> {\n        auto begin = x.begin();\n        auto end = x.end();\n        string del = \"\";\n        if (TypeTraits::DoubleIterable<T>) {\n            del = \"\\n\";\n        }\n        string ans;\n        ans += \"{\" + del;\n        if (begin != end) ans += pdbg(*begin++);\n        while (begin != end) {\n            ans += \",\" + del + pdbg(*begin++);\n        }\n        ans += del + \"}\";\n        return ans;\n    }\n    template<class T> string dbgout(const T &x) { return pdbg(x); }\n    template<class T, class... U>\n    string dbgout(T const &t, const U &... u) {\n        string ans = pdbg(t);\n        ans += \", \";\n        ans += dbgout(u...);\n        return ans;\n    }\n    #define dbg(...) print(\"[\", #__VA_ARGS__, \"] = \", dbgout(__VA_ARGS__)), flushln()\n    #define msg(...) print(\"[\", __VA_ARGS__, \"]\"), flushln()\n#else\n    #define dbg(...) 0\n    #define msg(...) 0\n#endif\n\ntemplate<class T, class U> inline bool chmin(T &x, const U& y) { return y < x ? x = y, 1 : 0; }\ntemplate<class T, class U> inline bool chmax(T &x, const U& y) { return y > x ? x = y, 1 : 0; }\ntemplate<class T> inline void sort(T &a) { sort(all(a)); }\ntemplate<class T> inline void rsort(T &a) { sort(rall(a)); }\ntemplate<class T> inline void reverse(T &a) { reverse(all(a)); }\ntemplate<class T, class U> inline istream& operator>>(istream& str, pair<T, U> &p) { return str >> p.f >> p.s; }\ntemplate<class T> inline istream& operator>>(istream& str, vector<T> &a) { for (auto &i : a) str >> i; return str; }\ntemplate<class T> inline T sorted(T a) { sort(a); return a; }\n\nstruct node {\n    int mx = 0;\n    int p = 0;\n    node() {}\n    void upd(int x) {\n        mx += x;\n        p += x;\n    }\n    void upd(const node &t) {\n        upd(t.p);\n    }\n    bool updated() const {\n        return p != 0;\n    }\n    void unupdate() {\n        p = 0;\n    }\n};\n\nnode merge(const node &a, const node &b) {\n    node ans;\n    ans.mx = max(a.mx, b.mx);\n    ans.p = 0;\n    return ans;\n}\n\ntemplate<class node, node (*merge)(const node&, const node&) = merge>\nstruct Tree {\n    int n = 1;\n    vector<node> t;\n    node& operator[](int ind) { return t[ind + n]; }\n    const node& operator[](int ind) const { return t[ind + n]; }\n    void submerge(int v) { // merge v's sons to v\n        if (v >= n) return;\n        t[v] = merge(t[v + v], t[v + v + 1]);\n    }\n    void resize(int sz) { // allocation\n        while (n < sz) n <<= 1;\n        t.resize(2 * n + 1);\n    }\n    void blank() { // default values\n        for (int i = 0; i < 2 * n; ++i)\n            t[i] = node();\n    }\n    void build() {\n        for (int i = n - 1; i > 0; --i)\n            submerge(i);\n    }\n    template<class T>\n    void assign(const vector<T> &a) { // copy of a\n        resize(sz(a));\n        for (int i = 0; i < sz(a); ++i)\n            t[i + n] = a[i];\n        for (int i = sz(a); i < n; ++i)\n            t[i + n] = node();\n        build();\n    }\n    Tree() {} // empty\n    Tree(int sz) { resize(sz); blank(); } // size, default values\n    template<class T> Tree(const vector<T> &a) { assign(a); } // copy of a\n    template<class T>\n    void updup(int i, const T &val) { // upd at i with val, doesn't support push\n        i += n;\n        t[i].upd(val);\n        for (i >>= 1; i > 0; i >>= 1)\n            submerge(i);\n    }\n    node getup(int l, int r) { // get at [l, r), doesn't support push\n        l += n;\n        r += n;\n        int cr = r;\n        node left, right;\n        bool lf = true, rf = true;\n        for (; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) left = lf ? lf = false, t[l++] : merge(left, t[l++]);\n            if (r & 1) right = rf ? rf = false, t[--r] : merge(t[--r], right);\n        }\n        if (lf) return right;\n        if (rf) return left;\n        return merge(left, right);\n    }\n    void push(int v) {\n        if (t[v].updated()) {\n            t[v + v].upd(t[v]);\n            t[v + v + 1].upd(t[v]);\n            t[v].unupdate();\n        }\n    }\n    // update [l, r) with value x, supports push\n    template<class T>\n    void upd(int l, int r, const T &x, int v, int vl, int vr) { \n        if (vl >= r || vr <= l) return;\n        if (vl >= l && vr <= r) return t[v].upd(x);\n        push(v);\n        int vm = vl + vr >> 1;\n        upd(l, r, x, v + v, vl, vm);\n        upd(l, r, x, v + v + 1, vm, vr);\n        submerge(v);\n    }\n    template<class T>\n    void upd(int l, int r, const T &x) { upd(l, r, x, 1, 0, n); } \n    \n    // get at [l, r), supports push\n    node get(int l, int r, int v, int vl, int vr) {\n        if (vl >= r || vr <= l) return node();\n        if (vl >= l && vr <= r) return t[v];\n        push(v);\n        int vm = vl + vr >> 1;\n        if (r <= vm) return get(l, r, v + v, vl, vm);\n        if (l >= vm) return get(l, r, v + v + 1, vm, vr);\n        return merge(get(l, r, v + v, vl, vm), get(l, r, v + v + 1, vm, vr));\n    }\n    node get(int l, int r) { return get(l, r, 1, 0, n); } \n};\n\nsigned main() {\n    initIO();\n    int n;\n    read(n);\n    vector<int> val(n, -1);\n    Tree<node> t(n);\n    for (int i = 0; i < n; ++i) {\n        int tm, mode;\n        read(tm, mode);\n        --tm;\n        if (mode == 1) {\n            int v;\n            read(v);\n            val[tm] = v;\n            t.upd(0, tm + 1, 1);\n        } else {\n            t.upd(0, tm + 1, -1);\n        }\n        if (t.get(0, n).mx <= 0) {\n            println(-1);\n        } else {\n            int ql = 0, qr = n;\n            while (qr - ql > 1) {\n                int mid = ql + qr >> 1;\n                if (t.get(mid, n).mx > 0) {\n                    ql = mid;\n                } else {\n                    qr = mid;\n                }\n            }\n            println(val[ql]);\n        }\n    }\n    #ifdef DEBUG\n        cerr << \"Runtime is: \" << clock() * 1.0 / CLOCKS_PER_SEC << endl;\n    #endif\n    return 0;\n}"
}