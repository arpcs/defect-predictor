{
    "contestId": 1095,
    "index": "A",
    "name": "Repeating Cipher",
    "type": "PROGRAMMING",
    "rating": 800,
    "tags": [
        "implementation"
    ],
    "desc": {
        "title": "A. Repeating Cipher",
        "statement": "<p>Polycarp loves ciphers. He has invented his own cipher called <span class=\"tex-font-style-it\">repeating</span>.</p><p>Repeating cipher is used for strings. To encrypt the string $$$s=s_{1}s_{2} \\dots s_{m}$$$ ($$$1 \\le m \\le 10$$$), Polycarp uses the following algorithm:</p><ul> <li> he writes down $$$s_1$$$ ones, </li><li> he writes down $$$s_2$$$ twice, </li><li> he writes down $$$s_3$$$ three times, </li><li> ... </li><li> he writes down $$$s_m$$$ $$$m$$$ times. </li></ul><p>For example, if $$$s$$$=\"<span class=\"tex-font-style-tt\">bab</span>\" the process is: \"<span class=\"tex-font-style-tt\">b</span>\" $$$\\to$$$ \"<span class=\"tex-font-style-tt\">baa</span>\" $$$\\to$$$ \"<span class=\"tex-font-style-tt\">baabbb</span>\". So the encrypted $$$s$$$=\"<span class=\"tex-font-style-tt\">bab</span>\" is \"<span class=\"tex-font-style-tt\">baabbb</span>\".</p><p>Given string $$$t$$$ \u2014 the result of encryption of some string $$$s$$$. Your task is to decrypt it, i.\u2009e. find the string $$$s$$$.</p>",
        "inputSpecification": "<p>The first line contains integer $$$n$$$ ($$$1 \\le n \\le 55$$$) \u2014 the length of the encrypted string. The second line of the input contains $$$t$$$ \u2014 the result of encryption of some string $$$s$$$. It contains only lowercase Latin letters. The length of $$$t$$$ is exactly $$$n$$$.</p><p>It is guaranteed that the answer to the test exists.</p>",
        "outputSpecification": "<p>Print such string $$$s$$$ that after encryption it equals $$$t$$$.</p>",
        "samples": [
            {
                "input": "\n6\nbaabbb\n",
                "output": "\nbab"
            },
            {
                "input": "\n10\nooopppssss\n",
                "output": "\noops"
            },
            {
                "input": "\n1\nz\n",
                "output": "\nz"
            }
        ],
        "note": null
    }
}