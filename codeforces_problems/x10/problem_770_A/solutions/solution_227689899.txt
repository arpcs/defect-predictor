{
    "id": 227689899,
    "contestId": 770,
    "creationTimeSeconds": 1697032869,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 770,
        "index": "A",
        "name": "New Password",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "*special",
            "implementation"
        ]
    },
    "author": {
        "contestId": 770,
        "members": [
            {
                "handle": "shihab_iiuc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1489233600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <random>\r\n\r\nusing namespace std;\r\n\r\nstring generate_password(int n, int k) {\r\n  // Create a list of all lowercase Latin letters.\r\n  char letters[26] = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\r\n                      'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};\r\n\r\n  // Shuffle the list of letters.\r\n  random_shuffle(letters, letters + 26);\r\n\r\n  // Select the first `k` letters from the shuffled list.\r\n  vector<char> selected_letters(k);\r\n  for (int i = 0; i < k; i++) {\r\n    selected_letters[i] = letters[i];\r\n  }\r\n\r\n  // Append the selected letters to a new string, one letter at a time, making sure\r\n  // that no two consecutive letters are the same.\r\n  string password = \"\";\r\n  for (char letter : selected_letters) {\r\n    if (password == \"\" || password[password.length() - 1] != letter) {\r\n      password += letter;\r\n    }\r\n  }\r\n\r\n  // If the length of the new string is less than `n`, repeat steps 3 and 4 until the\r\n  // string is `n` characters long.\r\n  while (password.length() < n) {\r\n    for (char letter : selected_letters) {\r\n      if (password == \"\" || password[password.length() - 1] != letter) {\r\n        password += letter;\r\n      }\r\n    }\r\n  }\r\n\r\n  return password;\r\n}\r\n\r\nint main() {\r\n  int n, k;\r\n  cin >> n >> k;\r\n\r\n  string password = generate_password(n, k);\r\n  cout << password << endl;\r\n\r\n  return 0;\r\n}\r\n"
}