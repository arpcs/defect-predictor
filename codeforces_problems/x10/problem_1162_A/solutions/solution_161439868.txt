{
    "id": 161439868,
    "contestId": 1162,
    "creationTimeSeconds": 1655871199,
    "relativeTimeSeconds": 499,
    "problem": {
        "contestId": 1162,
        "index": "A",
        "name": "Zoning Restrictions Again",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 1162,
        "members": [
            {
                "handle": "_priyanshu_"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1655870700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 29,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#define pb push_back\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n/*\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\ntemplate <typename T>\r\nusing o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate <typename T>\r\nusing o_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n// member functions :\r\n// 1. order_of_key(k) : number of elements strictly lesser than k\r\n// 2. find_by_order(k) : k-th element in the set\r\ntemplate <class key, class value, class cmp = std::less<key>>\r\nusing o_map = __gnu_pbds::tree<key, value, cmp, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;\r\n*/\r\n\r\nclass DSU {\r\n\tprivate : \r\n\t\tvector<int> parent,size;\r\n\tpublic :\r\n\t\tDSU(int n){\r\n\t\t\tfor(int i=0; i<=n; i++){\r\n\t\t\t\tparent.push_back(i); size.push_back(1);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint Find(int node){\r\n\t\t\tif(parent[node]==node){\r\n\t\t\t\treturn node;\r\n\t\t\t}\r\n\t\t\treturn parent[node] = Find(parent[node]) ;\r\n\t\t}\r\n\t\t\r\n\t\tvoid Merge(int u,int v){\r\n\t\t\tint pu = Find(u);\r\n\t\t\tint pv = Find(v);\r\n\t\t\tif(pu == pv) return; \r\n\t\t\t// pu chota hoga to pv mein connect kr denge\r\n\t\t\tif(size[pu]<size[pv]){\r\n\t\t\t\tparent[pu] = pv;\r\n\t\t\t\tsize[pv] += size[pu];\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tparent[pv] = pu;\r\n\t\t\t\tsize[pu] += size[pv];\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tint compsize(int u){\r\n\t\t\treturn size[u];\r\n\t\t}\r\n};\r\n\r\nusing ll = long long;\r\nconst ll Mod = 1000000007;\r\nconst ll MOD = 998244353;\r\nconst ll Inf = 1E18;\r\nconst int Dx[] = {0,  0, 1, -1, -1, -1,  1, 1};\r\nconst int Dy[] = {1, -1, 0,  0, -1,  1, -1, 1};\r\n\r\n//FOR unordered_map<int,int,custom_hash> TO AVOID FALTU TLE'S COZ OF ANTIHASHES.\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\t\r\n\t\r\n\t\r\n// finding ceil for long long\r\nll Ceil(ll a,ll b) {\r\n\treturn(a / b + ((a ^ b) > 0 && a % b));\r\n}\r\n\r\n// finding ncr\r\nll Ncr(ll n,ll r) {\r\n\tif(n < r) return 0LL; \r\n\tll res = 1;\r\n\tfor(ll j=0 ; j<r ; j++) {\r\n\t\t// ncr = n*(n-1)*(n-2)*../ 1*2*3*..r\r\n\t\t// ncr = (n-1)cr + (n-1)c(r-1)\r\n\t\tres = res * (n-j);\r\n\t\tres = res / (j+1); \r\n\t}\r\n\treturn res;\r\n}\r\n\r\n// check no.is a power of 2\r\nbool Pow_Of_Two(ll n) {\r\n\tll val = (n & (n-1));\r\n\tif(val == 0LL) return true; \r\n\treturn false;\r\n}\r\n\r\n// Modular fast exponentiation\r\nll Power_Mod(ll b, ll e, ll mod) {\r\n\tll ans = 1;\r\n\twhile(e) {\r\n\t\tif(e & 1) ans = (ans * b) % mod;\r\n\t\tb = (b * b) % mod;\r\n\t\te >>= 1;\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nll Power(ll b, ll e) {\r\n\tll ans = 1;\r\n\twhile(e) {\r\n\t\tif(e & 1) ans = ans * b;\r\n\t\tb = b * b;\r\n\t\te >>= 1;\r\n\t}\r\n\treturn ans;\r\n}\r\n\r\nbool Isprime(ll n) {\r\n\tif(n < 2) return false;\r\n\tfor(ll i = 2; i * i <= n; i++) {\r\n\t\tif(n % i == 0) return false;\r\n\t}\r\n\treturn true;\r\n}\r\n\r\nbool Parity(ll x, ll y) {\r\n\treturn !((x & 1) ^ (y & 1));\r\n};\r\n\r\n/* ************************************************************************ */\r\n\r\n\r\nvoid Solution()\r\n{\r\n\t\r\n\tint n, h, m; cin >> n >> h >> m;\r\n\tvector<array<int, 3>> v(m);\r\n\tfor(auto &x : v) cin >> x[0] >> x[1] >> x[2];\r\n\tsort(v.begin(), v.end());\r\n\tvector<int> ans(n, h);\r\n\tfor(auto &it : v) {\r\n\t\tfor(int i = it[0] - 1; i <= it[1] - 1; i ++) ans[i] = min(ans[i], it[2]);\r\n\t}\r\n\tlong long res = 0;\r\n\tfor(auto &x : ans) res += x * x;\r\n\tcout << res << \"\\n\";\r\n\t\t\r\n\t\r\n\t\t\r\n}\r\n\r\nint main()\r\n{\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL);   \r\n\tcout.tie(NULL); \r\n\tint Test_case = 1;   //cin >> Test_case;\r\n\t\r\n\twhile(Test_case --) Solution();\r\n\t\r\n}\r\n"
}