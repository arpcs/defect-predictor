{
    "id": 216042609,
    "contestId": 1270,
    "creationTimeSeconds": 1690520699,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1270,
        "index": "G",
        "name": "Subset with Zero Sum",
        "type": "PROGRAMMING",
        "points": 3750.0,
        "rating": 2700,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1270,
        "members": [
            {
                "handle": "phongwifdang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1577628300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 5427200,
    "source": "#pragma GCC optimize(\"O3\")\r\n#include <bits/stdc++.h>\r\n\r\nusing ll = long long;\r\nconst int nmax = 2e5 + 5;\r\nconst int mod = 1e9 + 7;\r\nconst int oo = 1e6 + 1;\r\nconst int MAX = 1e5;\r\n#define fi first\r\n#define se second\r\n#define pii pair<int, int>\r\nusing namespace std;\r\n\r\nint t, n, sa, sb;\r\npii a[nmax], b[nmax];\r\nbitset<101> dp1, f1;\r\nbitset<1001> dp2, f2;\r\nbitset<10001> dp3, f3;\r\nbitset<100001> dp4, f4;\r\nbitset<1000001> dp5, f5;\r\n\r\nint p1[nmax], p2[nmax];\r\nvoid sol1(bitset<101> dp, bitset<101> f){\r\n        dp[0] = f[0] = 1;\r\n        for(int i = 1; i <= n; ++i) p1[i] = p2[i] = oo;\r\n        int pos, s = 0;\r\n        for(int i = 1; i <= min(sa, sb); ++i){\r\n            dp |= dp << a[i].fi;\r\n            f |= f << b[i].fi;\r\n            pos = 0;\r\n            while(pos <= n){\r\n                p1[pos] = min(p1[pos], i);\r\n                if(pos && f[pos]){\r\n                    s = pos;\r\n                    break;\r\n                }\r\n                pos = dp._Find_next(pos);\r\n            }\r\n            pos = 0;\r\n            while(pos <= n){\r\n                 p2[pos] = min(p2[pos], i);\r\n                 if(pos && dp[pos]){\r\n                    s = pos;\r\n                    break;\r\n                 }\r\n                 pos = f._Find_next(pos);\r\n            }\r\n        }\r\n        if(s == 0){\r\n             for(int i = min(sa, sb) + 1; i <= sa; ++i){\r\n                dp |= dp << a[i].fi;\r\n                pos = 0;\r\n                while(pos <= n){\r\n                    p1[pos] = min(p1[pos], i);\r\n                    if(pos && f[pos]){\r\n                        s = pos;\r\n                        break;\r\n                    }\r\n                    pos = dp._Find_next(pos);\r\n                }\r\n            }\r\n            for(int i = min(sa, sb) + 1; i <= sb; ++i){\r\n                f |= f << b[i].fi;\r\n                   pos = 0;\r\n                while(pos <= n){\r\n                     p2[pos] = min(p2[pos], i);\r\n                     if(pos && dp[pos]){\r\n                        s = pos;\r\n                        break;\r\n                     }\r\n                     pos = f._Find_next(pos);\r\n                }\r\n            }\r\n        }\r\n        vector<int> v;\r\n        int k = s, i1 = p1[k], i2 = p2[k];\r\n        while(k > 0){\r\n            v.push_back(b[i2].se);\r\n            k -= b[i2].fi;\r\n            i2 = p2[k];\r\n        }\r\n        k = s;\r\n        while(k > 0){\r\n            v.push_back(a[i1].se);\r\n            k -= a[i1].fi;\r\n            i1 = p1[k];\r\n        }\r\n        cout <<v.size() << \"\\n\";\r\n        for(auto p : v) cout << p << ' ';\r\n        if(v.size() > 0) cout << \"\\n\";\r\n        v.clear();\r\n        for(int i = 0; i <= n; ++i) dp[i] = f[i] = 0;\r\n\r\n}\r\nvoid sol2(bitset<1001> dp, bitset<1001> f){\r\n\r\n        dp[0] = f[0] = 1;\r\n        for(int i = 1; i <= n; ++i) p1[i] = p2[i] = oo;\r\n        int pos, s = 0;\r\n        for(int i = 1; i <= min(sa, sb); ++i){\r\n            dp |= dp << a[i].fi;\r\n            f |= f << b[i].fi;\r\n            pos = 0;\r\n            while(pos <= n){\r\n                p1[pos] = min(p1[pos], i);\r\n                if(pos && f[pos]){\r\n                    s = pos;\r\n                    break;\r\n                }\r\n                pos = dp._Find_next(pos);\r\n            }\r\n            pos = 0;\r\n            while(pos <= n){\r\n                 p2[pos] = min(p2[pos], i);\r\n                 if(pos && dp[pos]){\r\n                    s = pos;\r\n                    break;\r\n                 }\r\n                 pos = f._Find_next(pos);\r\n            }\r\n        }\r\n        if(s == 0){\r\n             for(int i = min(sa, sb) + 1; i <= sa; ++i){\r\n                dp |= dp << a[i].fi;\r\n                pos = 0;\r\n                while(pos <= n){\r\n                    p1[pos] = min(p1[pos], i);\r\n                    if(pos && f[pos]){\r\n                        s = pos;\r\n                        break;\r\n                    }\r\n                    pos = dp._Find_next(pos);\r\n                }\r\n            }\r\n            for(int i = min(sa, sb) + 1; i <= sb; ++i){\r\n                f |= f << b[i].fi;\r\n                   pos = 0;\r\n                while(pos <= n){\r\n                     p2[pos] = min(p2[pos], i);\r\n                     if(pos && dp[pos]){\r\n                        s = pos;\r\n                        break;\r\n                     }\r\n                     pos = f._Find_next(pos);\r\n                }\r\n            }\r\n        }\r\n        vector<int> v;\r\n        int k = s, i1 = p1[k], i2 = p2[k];\r\n        while(k > 0){\r\n            v.push_back(b[i2].se);\r\n            k -= b[i2].fi;\r\n            i2 = p2[k];\r\n        }\r\n        k = s;\r\n        while(k > 0){\r\n            v.push_back(a[i1].se);\r\n            k -= a[i1].fi;\r\n            i1 = p1[k];\r\n        }\r\n        cout <<v.size() << \"\\n\";\r\n        for(auto p : v) cout << p << ' ';\r\n        if(v.size() > 0) cout << \"\\n\";\r\n        v.clear();\r\n        for(int i = 0; i <= n; ++i) dp[i] = f[i] = 0;\r\n\r\n}\r\nvoid sol3(bitset<10001> dp, bitset<10001> f){\r\n        dp[0] = f[0] = 1;\r\n        for(int i = 1; i <= n; ++i) p1[i] = p2[i] = oo;\r\n        int pos, s = 0;\r\n        for(int i = 1; i <= min(sa, sb); ++i){\r\n            dp |= dp << a[i].fi;\r\n            f |= f << b[i].fi;\r\n            pos = 0;\r\n            while(pos <= n){\r\n                p1[pos] = min(p1[pos], i);\r\n                if(pos && f[pos]){\r\n                    s = pos;\r\n                    break;\r\n                }\r\n                pos = dp._Find_next(pos);\r\n            }\r\n            pos = 0;\r\n            while(pos <= n){\r\n                 p2[pos] = min(p2[pos], i);\r\n                 if(pos && dp[pos]){\r\n                    s = pos;\r\n                    break;\r\n                 }\r\n                 pos = f._Find_next(pos);\r\n            }\r\n        }\r\n        if(s == 0){\r\n             for(int i = min(sa, sb) + 1; i <= sa; ++i){\r\n                dp |= dp << a[i].fi;\r\n                pos = 0;\r\n                while(pos <= n){\r\n                    p1[pos] = min(p1[pos], i);\r\n                    if(pos && f[pos]){\r\n                        s = pos;\r\n                        break;\r\n                    }\r\n                    pos = dp._Find_next(pos);\r\n                }\r\n            }\r\n            for(int i = min(sa, sb) + 1; i <= sb; ++i){\r\n                f |= f << b[i].fi;\r\n                   pos = 0;\r\n                while(pos <= n){\r\n                     p2[pos] = min(p2[pos], i);\r\n                     if(pos && dp[pos]){\r\n                        s = pos;\r\n                        break;\r\n                     }\r\n                     pos = f._Find_next(pos);\r\n                }\r\n            }\r\n        }\r\n        vector<int> v;\r\n        int k = s, i1 = p1[k], i2 = p2[k];\r\n        while(k > 0){\r\n            v.push_back(b[i2].se);\r\n            k -= b[i2].fi;\r\n            i2 = p2[k];\r\n        }\r\n        k = s;\r\n        while(k > 0){\r\n            v.push_back(a[i1].se);\r\n            k -= a[i1].fi;\r\n            i1 = p1[k];\r\n        }\r\n        cout <<v.size() << \"\\n\";\r\n        for(auto p : v) cout << p << ' ';\r\n        if(v.size() > 0) cout << \"\\n\";\r\n        v.clear();\r\n        for(int i = 0; i <= n; ++i) dp[i] = f[i] = 0;\r\n\r\n}\r\nvoid sol4(bitset<100001> dp, bitset<100001> f){\r\n\r\n        dp[0] = f[0] = 1;\r\n        for(int i = 1; i <= n; ++i) p1[i] = p2[i] = oo;\r\n        int pos, s = 0;\r\n        for(int i = 1; i <= min(sa, sb); ++i){\r\n            dp |= dp << a[i].fi;\r\n            f |= f << b[i].fi;\r\n            pos = 0;\r\n            while(pos <= n){\r\n                p1[pos] = min(p1[pos], i);\r\n                if(pos && f[pos]){\r\n                    s = pos;\r\n                    break;\r\n                }\r\n                pos = dp._Find_next(pos);\r\n            }\r\n            pos = 0;\r\n            while(pos <= n){\r\n                 p2[pos] = min(p2[pos], i);\r\n                 if(pos && dp[pos]){\r\n                    s = pos;\r\n                    break;\r\n                 }\r\n                 pos = f._Find_next(pos);\r\n            }\r\n        }\r\n        if(s == 0){\r\n             for(int i = min(sa, sb) + 1; i <= sa; ++i){\r\n                dp |= dp << a[i].fi;\r\n                pos = 0;\r\n                while(pos <= n){\r\n                    p1[pos] = min(p1[pos], i);\r\n                    if(pos && f[pos]){\r\n                        s = pos;\r\n                        break;\r\n                    }\r\n                    pos = dp._Find_next(pos);\r\n                }\r\n            }\r\n            for(int i = min(sa, sb) + 1; i <= sb; ++i){\r\n                f |= f << b[i].fi;\r\n                   pos = 0;\r\n                while(pos <= n){\r\n                     p2[pos] = min(p2[pos], i);\r\n                     if(pos && dp[pos]){\r\n                        s = pos;\r\n                        break;\r\n                     }\r\n                     pos = f._Find_next(pos);\r\n                }\r\n            }\r\n        }\r\n        vector<int> v;\r\n        int k = s, i1 = p1[k], i2 = p2[k];\r\n        while(k > 0){\r\n            v.push_back(b[i2].se);\r\n            k -= b[i2].fi;\r\n            i2 = p2[k];\r\n        }\r\n        k = s;\r\n        while(k > 0){\r\n            v.push_back(a[i1].se);\r\n            k -= a[i1].fi;\r\n            i1 = p1[k];\r\n        }\r\n        cout <<v.size() << \"\\n\";\r\n        for(auto p : v) cout << p << ' ';\r\n        if(v.size() > 0) cout << \"\\n\";\r\n        v.clear();\r\n        for(int i = 0; i <= n; ++i) dp[i] = f[i] = 0;\r\n}\r\nvoid sol5(bitset<1000001> dp, bitset<1000001> f){\r\n    dp[0] = f[0] = 1;\r\n    for(int i = 1; i <= n; ++i) p1[i] = p2[i] = oo;\r\n    int pos, s = 0;\r\n    for(int i = 1; i <= min(sa, sb); ++i){\r\n        dp |= dp << a[i].fi;\r\n        f |= f << b[i].fi;\r\n        pos = 0;\r\n        while(pos <= n){\r\n            p1[pos] = min(p1[pos], i);\r\n            if(pos && f[pos]){\r\n                s = pos;\r\n                break;\r\n            }\r\n            pos = dp._Find_next(pos);\r\n        }\r\n        pos = 0;\r\n        while(pos <= n){\r\n             p2[pos] = min(p2[pos], i);\r\n             if(pos && dp[pos]){\r\n                s = pos;\r\n                break;\r\n             }\r\n             pos = f._Find_next(pos);\r\n        }\r\n    }\r\n    if(s == 0){\r\n         for(int i = min(sa, sb) + 1; i <= sa; ++i){\r\n            dp |= dp << a[i].fi;\r\n            pos = 0;\r\n            while(pos <= n){\r\n                p1[pos] = min(p1[pos], i);\r\n                if(pos && f[pos]){\r\n                    s = pos;\r\n                    break;\r\n                }\r\n                pos = dp._Find_next(pos);\r\n            }\r\n        }\r\n        for(int i = min(sa, sb) + 1; i <= sb; ++i){\r\n            f |= f << b[i].fi;\r\n               pos = 0;\r\n            while(pos <= n){\r\n                 p2[pos] = min(p2[pos], i);\r\n                 if(pos && dp[pos]){\r\n                    s = pos;\r\n                    break;\r\n                 }\r\n                 pos = f._Find_next(pos);\r\n            }\r\n        }\r\n    }\r\n    vector<int> v;\r\n    int k = s, i1 = p1[k], i2 = p2[k];\r\n    while(k > 0){\r\n        v.push_back(b[i2].se);\r\n        k -= b[i2].fi;\r\n        i2 = p2[k];\r\n    }\r\n    k = s;\r\n    while(k > 0){\r\n        v.push_back(a[i1].se);\r\n        k -= a[i1].fi;\r\n        i1 = p1[k];\r\n    }\r\n    cout <<v.size() << \"\\n\";\r\n    for(auto p : v) cout << p << ' ';\r\n    if(v.size() > 0) cout << \"\\n\";\r\n    v.clear();\r\n    for(int i = 0; i <= n; ++i) dp[i] = f[i] = 0;\r\n\r\n}\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL), cout.tie(NULL);\r\n//    freopen(\"code.inp\", \"r\", stdin);\r\n//    freopen(\"code.out\", \"w\", stdout);\r\n    cin >> t;\r\n    while(t--){\r\n        cin >> n;\r\n        sa = 0, sb = 0;\r\n        int ok = 0, idx = 0, x;\r\n        for(int i = 1; i <= n; ++i){\r\n            cin >> x;\r\n            if(x == 0){\r\n                ok = 1;\r\n                idx = i;\r\n            }\r\n            if(x > 0) a[++sa] = {x, i};\r\n            else b[++sb] = {-x, i};\r\n        }\r\n        if(ok) cout << 1 << \"\\n\" << idx << \"\\n\";\r\n        else if(n <= 100) sol1(dp1, f1);\r\n        else if(n <= 1000) sol2(dp2, f2);\r\n        else if(n <= 10000) sol3(dp3, f3);\r\n        else if(n <= 100000) sol4(dp4, f4);\r\n        else if(n <= 1000000) sol5(dp5, f5);\r\n    }\r\n}\r\n/*\r\n\r\n*/\r\n"
}