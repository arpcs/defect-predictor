{
    "id": 226101349,
    "contestId": 1656,
    "creationTimeSeconds": 1696130583,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1656,
        "index": "D",
        "name": "K-good",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1656,
        "members": [
            {
                "handle": "vitoroliveira260104"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1648132500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 561,
    "memoryConsumedBytes": 80179200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int MAXN = 1e7 + 5;\r\nvector<long long> spf(MAXN);\r\n\r\nvoid sieve() {\r\n    spf[1] = 1;\r\n    for (long long i = 2; i < MAXN; i++) {\r\n        spf[i] = i;\r\n    }\r\n\r\n    for (long long i = 4; i < MAXN; i += 2) {\r\n        spf[i] = 2;\r\n    }\r\n\r\n    for (long long i = 3; i * i < MAXN; i++) {\r\n        if (spf[i] == i) {\r\n            for (long long j = i * i; j < MAXN; j += i) {\r\n                if (spf[j] == j) {\r\n                    spf[j] = i;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlong long max2(long long n) {\r\n    long long r = 1; \r\n    long long m = n;\r\n    while (m % 2 == 0) {\r\n        m = m / 2; \r\n        r = r * 2; \r\n    }\r\n    return r;\r\n}\r\n\r\nint main() {\r\n    sieve();\r\n    int t;\r\n    cin >> t;\r\n    while (t--) {\r\n        long long n; \r\n        cin >> n;\r\n        long long a = max2(n);\r\n        a = a * 2;\r\n        if (n >= a * (a + 1) / 2) {\r\n            cout << a << endl;\r\n        }\r\n        else {   \r\n            a = a / 2;\r\n            n = n / a;\r\n            if (n > 1 && n * a >= spf[n] * (spf[n] + 1) / 2) {\r\n                cout << spf[n] << endl;\r\n            }\r\n            else {\r\n                cout << \"-1\" << endl;\r\n            }\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}