{
    "id": 233319023,
    "contestId": 1765,
    "creationTimeSeconds": 1700321635,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1765,
        "index": "C",
        "name": "Card Guessing",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1765,
        "members": [
            {
                "handle": "yiyihum"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1669545300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// generated by GPT4 2023-11-18 15:33:54\n#include <bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N = 2050, mod = 998244353;\nint n, k, inv[N], fac[N], ifac[N], dp[2][N][5], f[5][N], g[5][N], ans;\ninline int ksm(int x, int y = mod - 2) {\n    int ans = 1;\n    for (; y; y >>= 1, x = x * x % mod)\n        if (y & 1) ans = ans * x % mod;\n    return ans;\n}\ninline int C(int n, int m) {\n    if (n < m) return 0;\n    return fac[n] * ifac[m] % mod * ifac[n - m] % mod;\n}\nsigned main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cin >> n >> k;\n    for (int i = fac[0] = 1; i <= 4 * n; i++) fac[i] = fac[i - 1] * i % mod;\n    ifac[4 * n] = ksm(fac[4 * n]);\n    for (int i = 4 * n; i; i--) ifac[i - 1] = ifac[i] * i % mod;\n    for (int i = inv[1] = 1; i <= 4 * n; i++) inv[i] = (mod - mod / i) * inv[mod % i] % mod;\n    for (int i = 0; i <= 4 * n; i++)\n        for (int a = 0; a <= min(i, 4); a++)\n            for (int b = 0; b <= min(i - a, 4 - a); b++)\n                for (int c = 0; c <= min(i - a - b, 4 - a - b); c++) {\n                    int d = i - a - b - c;\n                    if (d > 4 - a - b - c) continue;\n                    int t = fac[i] * ifac[a] % mod * ifac[b] % mod * ifac[c] % mod * ifac[d] % mod;\n                    (f[a][i] += t) %= mod;\n                    if (b) (f[a + 1][i] += t * b % mod) %= mod;\n                    if (c) (f[a + 2][i] += t * c % mod) %= mod;\n                    if (d) (f[a + 3][i] += t * d % mod) %= mod;\n                }\n    dp[0][0][0] = 1;\n    for (int i = 0; i < 4 * n; i++) {\n        memset(dp[i & 1 ^ 1], 0, sizeof(dp[i & 1 ^ 1]));\n        for (int j = 0; j <= i && j <= k; j++)\n            for (int a = 0; a <= min(j, 4); a++)\n                if (dp[i & 1][j][a]) {\n                    int t = dp[i & 1][j][a];\n                    for (int b = 0; b <= min(k - j, 4 * n - i); b++) {\n                        int w = t * C(k - j, b) % mod * C(4 * n - i - b + k - j - 1, k - j - 1) % mod * ifac[b] % mod;\n                        for (int c = 0; c <= min(b, 4); c++) {\n                            int v = w * f[c][b] % mod;\n                            if (c <= a) (dp[i & 1 ^ 1][j + b][a - c] += v) %= mod;\n                            else (dp[i & 1 ^ 1][j + b][c] += v) %= mod;\n                        }\n                    }\n                }\n    }\n    for (int i = 0; i <= k; i++)\n        for (int a = 0; a <= 4; a++)\n            ans = (ans + dp[(4 * n) & 1][i][a] * C(4 * n + k - i - 1, k - i - 1) % mod * fac[4 * n - i]) % mod;\n    cout << ans << '\\n';\n    return 0;\n}\n"
}