{
    "id": 233069941,
    "contestId": 1765,
    "creationTimeSeconds": 1700217496,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1765,
        "index": "C",
        "name": "Card Guessing",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1765,
        "members": [
            {
                "handle": "yiyihum"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1669545300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 307200,
    "source": "// generated by GPT4 2023-11-17 10:38:14\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int mod = 998244353;\nconst int N = 2005;\nint n, k;\nlong long fac[N], ifac[N], dp[2][N], dp2[2][N], dp3[2][N][5], ans;\nlong long pw(long long a, long long b) {\n    long long r = 1;\n    while (b) {\n        if (b & 1) r = r * a % mod;\n        a = a * a % mod;\n        b >>= 1;\n    }\n    return r;\n}\nlong long C(int x, int y) {\n    if (y < 0 || y > x) return 0;\n    return fac[x] * ifac[y] % mod * ifac[x - y] % mod;\n}\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cin >> n >> k;\n    fac[0] = ifac[0] = 1;\n    for (int i = 1; i <= 2000; ++i) {\n        fac[i] = fac[i - 1] * i % mod;\n        ifac[i] = ifac[i - 1] * pw(i, mod - 2) % mod;\n    }\n    dp[0][0] = 1;\n    for (int i = 1; i <= n; ++i) {\n        memset(dp[i & 1], 0, sizeof(dp[i & 1]));\n        memset(dp2[i & 1], 0, sizeof(dp2[i & 1]));\n        memset(dp3[i & 1], 0, sizeof(dp3[i & 1]));\n        for (int j = 0; j <= i; ++j) {\n            dp[i & 1][j] = (dp[i & 1][j] + dp[~i & 1][j]) % mod;\n            dp2[i & 1][j] = (dp2[i & 1][j] + dp2[~i & 1][j]) % mod;\n            if (j) {\n                dp[i & 1][j] = (dp[i & 1][j] + dp[~i & 1][j - 1] * 4 % mod * (i - j + 1)) % mod;\n                dp2[i & 1][j] = (dp2[i & 1][j] + dp2[~i & 1][j - 1] * 4 % mod * (i - j + 1)) % mod;\n                dp2[i & 1][j] = (dp2[i & 1][j] + dp[~i & 1][j - 1] * 4 % mod * (i - j + 1) % mod * j) % mod;\n            }\n            for (int l = 0; l < 4; ++l) {\n                dp3[i & 1][j][l] = (dp3[i & 1][j][l] + dp3[~i & 1][j][l]) % mod;\n                if (j) {\n                    dp3[i & 1][j][l] = (dp3[i & 1][j][l] + dp3[~i & 1][j - 1][l] * 4 % mod * (i - j + 1)) % mod;\n                    if (l) {\n                        dp3[i & 1][j][l] = (dp3[i & 1][j][l] + dp[~i & 1][j - 1] * 4 % mod * (i - j + 1) % mod * l) % mod;\n                    }\n                }\n            }\n        }\n    }\n    for (int i = 0; i <= n; ++i) {\n        for (int j = 0; j <= n && i + j <= k; ++j) {\n            for (int l = 0; l < 4 && l <= i; ++l) {\n                long long res = dp[n & 1][i] * dp[n & 1][j] % mod * dp[n & 1][j] % mod * dp[n & 1][k - i - j] % mod * dp[n & 1][k - i - j] % mod;\n                res = res * C(n, i) % mod * C(n - i, j) % mod * C(2 * n - i - j, j) % mod * C(2 * n - i - j, k - i - j) % mod;\n                long long res2 = dp2[n & 1][i] * dp[n & 1][j] % mod * dp[n & 1][j] % mod * dp[n & 1][k - i - j] % mod * dp[n & 1][k - i - j] % mod;\n                res2 = res2 * C(n, i) % mod * C(n - i, j) % mod * C(2 * n - i - j, j) % mod * C(2 * n - i - j, k - i - j) % mod;\n                long long res3 = dp[n & 1][i] * dp3[n & 1][j][l] % mod * dp[n & 1][j] % mod * dp[n & 1][k - i - j] % mod * dp[n & 1][k - i - j] % mod;\n                res3 = res3 * C(n, i) % mod * C(n - i, j) % mod * C(2 * n - i - j, j) % mod * C(2 * n - i - j, k - i - j) % mod;\n                ans = (ans + res + res2 + res3) % mod;\n            }\n        }\n    }\n    ans = ans * pw(C(4 * n, k), mod - 2) % mod;\n    cout << ans << \"\\n\";\n    return 0;\n}\n"
}