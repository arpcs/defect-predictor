{
    "id": 197315492,
    "contestId": 358,
    "creationTimeSeconds": 1678762865,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 358,
        "index": "C",
        "name": "Dima and Containers",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 358,
        "members": [
            {
                "handle": "nhatvpm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1382715000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#define _GLIBCXX_FILESYSTEM\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long\r\n\r\nint main()\r\n{\r\n\t//freopen(\"reduce.in\", \"r\", stdin);\r\n    //freopen(\"reduce.out\", \"w\", stdout);\r\n\tios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int n,x,k=0;\r\n\tvector<pair<int,int>> v;\r\n    cin>>n;\r\n    string in[]={\"pushStack\",\"pushQueue\",\"pushFront\",\"pushBack\"},out[]={\"popStack\",\"popQueue\",\"popFront\",\"popBack\"};\r\n    while (n--){\r\n\t\tcin>>x;\r\n\t\tif (x!=0) v.push_back({x,k++});\r\n\t\telse {\r\n\t\t\tif (k<=3){\r\n\t\t\t\tfor (int i=0;i<k;i++) cout<<in[i]<<'\\n';\r\n\t\t\t\tcout<<k;\r\n\t\t\t\tfor (int i=0;i<k;i++) cout<<' '<<out[i];\r\n\t\t\t\tcout<<'\\n';\r\n\t\t\t\tv.clear();\r\n\t\t\t\tk=0;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tsort(v.begin(),v.end());\r\n\t\t\tvector<int> id(k);\r\n\t\t\tfor (int i=0;i<k;i++) id[v[i].second]=i;\r\n\t\t\tfor (int i=0;i<k;i++){\r\n\t\t\t\tif (i==k-3) cout<<in[2]<<'\\n';\r\n\t\t\t\telse if (i==k-2) cout<<in[1]<<'\\n';\r\n\t\t\t\telse if (i==k-1) cout<<in[0]<<'\\n';\r\n\t\t\t\telse cout<<in[3]<<'\\n';\r\n\t\t\t}\r\n\t\t\tcout<<3<<' '<<out[0]<<' '<<out[1]<<' '<<out[2]<<'\\n';\r\n\t\t\tk=0;\r\n\t\t\tv.clear();\r\n\t\t}\r\n    }\r\n}\r\n"
}