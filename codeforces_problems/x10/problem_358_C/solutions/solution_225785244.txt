{
    "id": 225785244,
    "contestId": 358,
    "creationTimeSeconds": 1695995624,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 358,
        "index": "C",
        "name": "Dima and Containers",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 358,
        "members": [
            {
                "handle": "hyprox1413"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1382715000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 1433600,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    long N;\n    cin >> N;\n    long commandIndex = 0;\n    vector<pair<long, long>> keepers;\n    vector<long> commands;\n    // values and indices of the top three for any given sequence between extractions\n    // two of the top three go into the stack and queue\n    // last goes in the deque where small numbers go to die\n    vector<pair<long, long>> topThree;\n    while (commandIndex < N) {\n        long curCommand;\n        cin >> curCommand;\n        commands.push_back(curCommand);\n        if (curCommand == 0) {\n            for (auto it : topThree) {\n                keepers.push_back(it);\n            }\n            topThree.clear();\n        } else {\n            if (topThree.size() < 3 || min_element(topThree.begin(), topThree.end())->first < curCommand) {\n                if (topThree.size() == 3) {\n                    topThree.erase(min_element(topThree.begin(), topThree.end()));\n                    topThree.emplace_back(curCommand, commandIndex);\n                } else {\n                    topThree.emplace_back(curCommand, commandIndex);\n                }\n            }\n        }\n        commandIndex++;\n    }\n    int extractions = 0;\n    auto nextKeeper = keepers.begin();\n    for (long i = 0; i < N; i++) {\n        auto curCommand = commands[i];\n        if (nextKeeper != keepers.end() && i == nextKeeper->second) {\n            // if i is a keeper\n            if (extractions == 0) {\n                cout << \"pushStack\" << endl;\n            } else if (extractions == 1) {\n                cout << \"pushQueue\" << endl;\n            } else {\n                cout << \"pushFront\" << endl;\n            }\n            extractions++;\n            nextKeeper++;\n        } else {\n            // if i is not a keeper\n            if (curCommand == 0) {\n                if (extractions == 0) {\n                    cout << \"0\" << endl;\n                } else if (extractions == 1) {\n                    cout << \"1 popStack\" << endl;\n                } else if (extractions == 2) {\n                    cout << \"2 popStack popQueue\" << endl;\n                } else {\n                    cout << \"3 popStack popQueue popFront\" << endl;\n                }\n                extractions = 0;\n            } else {\n                cout << \"pushBack\" << endl;\n            }\n        }\n    }\n}\n"
}