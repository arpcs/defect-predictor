{
    "id": 202363191,
    "contestId": 358,
    "creationTimeSeconds": 1681647127,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 358,
        "index": "C",
        "name": "Dima and Containers",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 358,
        "members": [
            {
                "handle": "lev1106"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1382715000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 7270400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nlong long n, i, a;\r\nvector<pair<long long, long long>> v;\r\nvector<string> ans[100001];\r\n\r\nint main() {\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\t//freopen(\"input.txt\", \"r\", stdin);\r\n\tcin >> n;\r\n\tfor (i = 1; i <= n; i++) {\r\n\t\tcin >> a;\r\n\t\tif (a) v.insert(lower_bound(v.begin(), v.end(), make_pair(a, i)), {a, i});\r\n\t\telse {\r\n\t\t\tif (v.size() == 0) {\r\n\t\t\t\tans[i].push_back(\"nope\");\r\n\t\t\t}\r\n\t\t\tif (v.size() > 0) {\r\n\t\t\t\tans[v[v.size() - 1].second].push_back(\"pushStack\");\r\n\t\t\t\tans[i].push_back(\"popStack\");\r\n\t\t\t}\r\n\t\t\tif (v.size() > 1) {\r\n\t\t\t\tans[v[v.size() - 2].second].push_back(\"pushQueue\");\r\n\t\t\t\tans[i].push_back(\"popQueue\");\r\n\t\t\t}\r\n\t\t\tif (v.size() > 2) {\r\n\t\t\t\tans[v[v.size() - 3].second].push_back(\"pushBack\");\r\n\t\t\t\tans[i].push_back(\"popBack\");\r\n\t\t\t}\r\n\t\t\tv.clear();\r\n\t\t}\r\n\t}\r\n\tfor (i = 1; i <= n; i++) {\r\n\t\tif (ans[i].empty()) cout << \"pushFront\";\r\n\t\telse if (ans[i][0][0] == 'n') cout << \"0\";\r\n\t\telse if (ans[i][0][1] == 'u') cout << ans[i][0];\r\n\t\telse {\r\n\t\t\tcout << ans[i].size();\r\n\t\t\tfor (auto i : ans[i]) cout << \" \" << i;\r\n\t\t}\r\n\t\tcout << \"\\n\";\r\n\t}\r\n}"
}