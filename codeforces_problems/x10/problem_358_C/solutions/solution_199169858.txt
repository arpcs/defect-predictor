{
    "id": 199169858,
    "contestId": 358,
    "creationTimeSeconds": 1679796518,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 358,
        "index": "C",
        "name": "Dima and Containers",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 358,
        "members": [
            {
                "handle": "Gamal74"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1382715000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 3788800,
    "source": "#include<bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define pp push_back\r\n#define endl '\\n'\r\n#define all(x) x.begin(),x.end()\r\n#define ld long double\r\n#define PI acos(-1)\r\n#define sin(a) sin((a)*PI/180)\r\n#define cos(a) cos((a)*PI/180)\r\n#define ones(x) __builtin_popcountll(x)\r\n//#define int ll\r\n\r\n#define Drakon  ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\nusing namespace std;\r\n\r\n\r\nunsigned long long inf = 1e10;\r\nconst double EPS = 1e-6;\r\nconst int MOD = 1000000007, N = 200005, LOG = 25, M = 2;\r\n\r\ntypedef array<array<int, M>, M> matrix;\r\n\r\nll gcd(ll x, ll y) {\r\n    return y ? gcd(y, x % y) : x;\r\n}\r\n\r\nll lcm(ll a, ll b) {\r\n    return (a * b) / __gcd(a, b);\r\n}\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    vector<int>vec(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> vec[i];\r\n    }\r\n    string ans[n];\r\n    vector<pair<int,int>>tmp;\r\n    for (int i = 0; i < n; ++i) {\r\n        if(!vec[i]){\r\n            sort(all(tmp),greater<>());\r\n            int cnt = 0;\r\n            for (int j = 0; j < tmp.size(); ++j) {\r\n                if(cnt == 0){\r\n                    ans[tmp[j].second] += \"pushStack\";\r\n                    cnt ++;\r\n                }\r\n                else if(cnt == 1){\r\n                    ans[tmp[j].second] += \"pushQueue\";\r\n                    cnt ++;\r\n                }\r\n                else if(cnt == 2){\r\n                    ans[tmp[j].second] += \"pushBack\";\r\n                    cnt ++;\r\n                }\r\n                else{\r\n                    ans[tmp[j].second] += \"pushFront\";\r\n                }\r\n            }\r\n            ans[i] += to_string(min(cnt,3));\r\n            for (int j = 0; j < min(cnt,3); ++j) {\r\n                if(!j){\r\n                    ans[i] += \" popStack\";\r\n                }\r\n                else if(j == 1){\r\n                    ans[i] += \" popQueue\";\r\n                }\r\n                else{\r\n                    ans[i] += \" popBack\";\r\n                }\r\n            }\r\n            tmp.clear();\r\n        }\r\n        else{\r\n            tmp.pp({vec[i],i});\r\n        }\r\n    }\r\n    for (int i = 0; i < tmp.size(); ++i) {\r\n        ans[tmp[i].second] += \"pushFront\";\r\n    }\r\n    for (int i = 0; i < n; ++i) {\r\n        cout << ans[i] << endl;\r\n    }\r\n}\r\n\r\nsigned main() {\r\n    Drakon\r\n    int t = 1;\r\n    //cin >> t;\r\n    while (t--) {\r\n        solve();\r\n    }\r\n}"
}