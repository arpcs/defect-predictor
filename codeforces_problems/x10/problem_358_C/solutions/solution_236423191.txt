{
    "id": 236423191,
    "contestId": 358,
    "creationTimeSeconds": 1702068714,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 358,
        "index": "C",
        "name": "Dima and Containers",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 358,
        "members": [
            {
                "handle": "goodbyepoo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1382715000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// Source: https://usaco.guide/general/io\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint main() {\r\n\tint n;\r\n\tcin >> n;\r\n\r\n\tstack<int> ballstack;\r\n\tqueue<int> queuetboys;\r\n\tdeque<int> cutedeque;\r\n\tint solution = 0;\r\n\tfor(int i = 0; i < n; i++){\r\n\t\tvector<int> cummands;\r\n\t\tint input = -1;\r\n\t\tcin >> input;\r\n\t\twhile(input != 0){\r\n\t\t\tcin >> input;\r\n\t\t\tcummands.push_back(input);\r\n\t\t}\r\n\r\n\t\tvector<int> sortedCummands = cummands;\r\n\t\tsort(sortedCummands.begin(), sortedCummands.end());\r\n\r\n\t\tfor(int j = 0; j < cummands.size(); j++){\r\n\t\t\tint x = 0;\r\n\t\t\tif(sortedCummands.size() >= 3){\r\n\t\t\t\tint index = find(sortedCummands.end()-3, sortedCummands.end(), cummands[j]);\r\n\t\t\t\tif(index = sortedCummands.end()){\r\n\t\t\t\t\tcout << \"pushBack\\n\";\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tif(x == 0){\r\n\t\t\t\t\t\tcout << \"pushStack\\n\";\r\n\t\t\t\t\t\tsolution += cummands[j];\r\n\t\t\t\t\t\tx++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(x == 1){\r\n\t\t\t\t\t\tcout << \"pushQueue\\n\";\r\n\t\t\t\t\t\tsolution += cummands[j];\r\n\t\t\t\t\t\tx++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse{\r\n\t\t\t\t\t\tcout << \"pushFront\\n\";\r\n\t\t\t\t\t\tsolution += cummands[j];\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tcout << \"3 popStack popQueue popFront\\n\";\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tif(cummands.size() == 0){\r\n\t\t\t\t\tcout << \"0\";\t\r\n\t\t\t\t}\r\n\t\t\t\telse if(cummands.size() == 1){\r\n\t\t\t\t\tsolution += cummands[0];\r\n\t\t\t\t\tcout << \"pushStack\\n\";\r\n\t\t\t\t\tcout << \"1 popStack\\n\";\r\n\t\t\t\t}\r\n\t\t\t\telse if(cummands.size() == 2){\r\n\t\t\t\t\tsolution += cummands[0];\r\n\t\t\t\t\tcout << \"pushStack\\n\";\r\n\t\t\t\t\tsolution += cummands[1];\r\n\t\t\t\t\tcout << \"pushQueue\\n\";\r\n\t\t\t\t\tcout << \"2 popStack popQueue\\n\";\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n}\r\n"
}