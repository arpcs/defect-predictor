{
    "id": 209217451,
    "contestId": 358,
    "creationTimeSeconds": 1686416530,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 358,
        "index": "C",
        "name": "Dima and Containers",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 358,
        "members": [
            {
                "handle": "Smashmallow"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1382715000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <deque>\r\n#include <stack>\r\n#include <queue>\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    // freopen(\"dima_and_containers.in\", \"r\", stdin);\r\n    // freopen(\"dima_and_containers.out\", \"w\", stdout);\r\n    int n;\r\n    cin >> n;\r\n    deque<int> deck;\r\n    stack<int> stack_obj;\r\n    queue<int> queue_obj;\r\n    int sum = 0;\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        int a;\r\n        cin >> a;\r\n        if (a == 0)\r\n        {\r\n            int num = 0;\r\n            string output;\r\n            if (!stack_obj.empty())\r\n            {\r\n                num++;\r\n                output += \"popStack \";\r\n                sum += stack_obj.top();\r\n            }\r\n\r\n            if (!queue_obj.empty())\r\n            {\r\n                num++;\r\n                output += \"popQueue \";\r\n                sum += queue_obj.back();\r\n            }\r\n\r\n            if (!deck.empty())\r\n            {\r\n                num++;\r\n                if (deck.front() > deck.back())\r\n                    output += \"popFront\";\r\n                else\r\n                    output += \"popBack\";\r\n                sum += max(deck.front(), deck.back());\r\n            }\r\n\r\n            // if (output.find_last_not_of(\" \\t\\f\\v\\n\\r\") != string::npos)\r\n            //     output = output.substr(0, output.find_last_not_of(\" \\t\\f\\v\\n\\r\") + 1);\r\n            cout << to_string(num) + \" \" + output << '\\n';\r\n            stack_obj = stack<int>();\r\n            queue_obj = queue<int>();\r\n            deck = deque<int>();\r\n        }\r\n\r\n        else\r\n        {\r\n            if (stack_obj.empty())\r\n            {\r\n                stack_obj.push(a);\r\n                cout << \"pushStack\" << '\\n';\r\n            }\r\n\r\n            else if (queue_obj.empty())\r\n            {\r\n                queue_obj.push(a);\r\n                cout << \"pushQueue\" << '\\n';\r\n            }\r\n            else if (deck.empty())\r\n            {\r\n                deck.push_front(a);\r\n                cout << \"pushFront\" << '\\n';\r\n            }\r\n\r\n            else\r\n            {\r\n                deck.push_back(a);\r\n                cout << \"pushBack\" << '\\n';\r\n            }\r\n        }\r\n    }\r\n    cout << '\\n';\r\n}"
}