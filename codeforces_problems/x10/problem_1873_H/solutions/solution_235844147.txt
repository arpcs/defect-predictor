{
    "id": 235844147,
    "contestId": 1873,
    "creationTimeSeconds": 1701779277,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "Risshun"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 47718400,
    "source": "from collections import defaultdict\r\n\r\nadj = defaultdict(list)\r\nvis = []\r\nentry_node = -1\r\npath = []\r\n\r\n\r\ndef dfs1(u, p):\r\n    global entry_node\r\n    vis[u] = True\r\n    for v in adj[u]:\r\n        if v != p and vis[v]:\r\n            entry_node = v\r\n            return True\r\n        elif v != p and not vis[v]:\r\n            if dfs1(v, u):\r\n                return True\r\n    return False\r\n\r\n\r\ndef dfs2(u):\r\n    global entry_node\r\n    vis[u] = True\r\n    distbruh = float(\"inf\")\r\n    for v in adj[u]:\r\n        if v == entry_node:\r\n            return 1\r\n        if not vis[v]:\r\n            dist = dfs2(v) + 1\r\n            distbruh = min(dist, distbruh)\r\n    return distbruh\r\n\r\n\r\ndef solve():\r\n    global adj, vis, entry_node\r\n    n, a, b = map(int, input().split())\r\n    vis = [False] * (n + 1)\r\n    for _ in range(n):\r\n        u, v = map(int, input().split())\r\n        adj[u].append(v)\r\n        adj[v].append(u)\r\n    dfs1(b, -1)\r\n    vis = [False] * (n + 1)\r\n    distMarcel, distValeriu = float(\"inf\"), 0\r\n    if entry_node == a:\r\n        distMarcel = 0\r\n    else:\r\n        distMarcel = dfs2(a)\r\n    vis = [False] * (n + 1)\r\n    if entry_node == b:\r\n        distValeriu = 0\r\n    else:\r\n        distValeriu = dfs2(b)\r\n    if distValeriu < distMarcel:\r\n        print(\"YES\")\r\n    else:\r\n        print(\"NO\")\r\n    adj = defaultdict(list)\r\n    vis = [False] * (n + 1)\r\n\r\n\r\nt = 1\r\nt = int(input())\r\nwhile t > 0:\r\n    solve()\r\n    t -= 1\r\n"
}