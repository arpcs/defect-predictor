{
    "id": 235387933,
    "contestId": 1873,
    "creationTimeSeconds": 1701523906,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "overwatch9"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 32665600,
    "source": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\nvector <vector <int>> adj;\r\nvector <bool> visited, in_cycle;\r\nvector <int> cycle;\r\nint dfs(int s, int p) {\r\n    if (visited[s])\r\n        return s;\r\n    visited[s] = true;\r\n    int ans = 0;\r\n    for (auto i : adj[s]) {\r\n        if (i == p)\r\n            continue;\r\n        int res = dfs(i, s);\r\n        if (res != 0)\r\n            cycle.push_back(s);\r\n        if (res == s)\r\n            return 0;\r\n        ans = max(ans, res);\r\n    }\r\n    return ans;\r\n}\r\nbool dfs2(int s, int p, int A) {\r\n    if (s == A)\r\n        return false;\r\n    if (in_cycle[s]) {\r\n        return true;\r\n    }\r\n    bool ans = false;\r\n    for (auto i : adj[s]) {\r\n        if (i == p)\r\n            continue;\r\n        ans |= dfs2(i, s, A);\r\n    }\r\n    return ans;\r\n}\r\nint min_dis = 1e9;\r\nint dfs3(int s, int p, int d, int goal) {\r\n    if (in_cycle[s] && goal == 0) {\r\n        min_dis = min(min_dis, d);\r\n        return s;\r\n    } else if (s == goal) {\r\n        min_dis = min(min_dis, d);\r\n        return s;\r\n    }\r\n    if (visited[s])\r\n        return 0;\r\n    visited[s] = true;\r\n    int ans = 0;\r\n    for (auto i : adj[s]) {\r\n        if (i == p)\r\n            continue;\r\n        ans = max(ans, dfs3(i, s, d+1, goal));\r\n    }\r\n    return ans;\r\n}\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int T;\r\n    cin >> T;\r\n    while (T--) {\r\n        int n, A, B;\r\n        cin >> n >> A >> B;\r\n        adj = vector <vector <int>> (n+1);\r\n        in_cycle = visited = vector <bool> (n+1);\r\n        cycle.clear();\r\n        for (int i = 0; i < n; i++) {\r\n            int a, b;\r\n            cin >> a >> b;\r\n            adj[a].push_back(b);\r\n            adj[b].push_back(a);\r\n        }\r\n        dfs(1, 1);\r\n        for (auto i : cycle)\r\n            in_cycle[i] = true;\r\n        if (A == B) {\r\n            cout << \"NO\\n\";\r\n            continue;\r\n        }\r\n        if (in_cycle[B]) {\r\n            cout << \"YES\\n\";\r\n            continue;\r\n        }\r\n        min_dis = 1e9;\r\n        fill(visited.begin(), visited.end(), false);\r\n        int pt = dfs3(B, B, 0, 0);\r\n        int d = min_dis;\r\n        fill(visited.begin(), visited.end(), false);\r\n        min_dis = 1e9;\r\n        dfs3(A, A, 0, pt);\r\n        int d2 = min_dis;\r\n        if (d2 <= d)\r\n            cout << \"NO\\n\";\r\n        else\r\n            cout << \"YES\\n\";\r\n    }\r\n}"
}