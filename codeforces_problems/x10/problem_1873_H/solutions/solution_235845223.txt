{
    "id": 235845223,
    "contestId": 1873,
    "creationTimeSeconds": 1701779775,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "AgCodstruct"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 592,
    "memoryConsumedBytes": 15462400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 200005;\r\n\r\n#define dbg(x) cout << #x << \" is \" << x << endl;\r\nvector<int> adj[N];\r\nvector<bool> vis(N);\r\n\r\nint entry_node = -1;\r\nvector<int> path;\r\n\r\nbool dfs1(int u, int p)\r\n{\r\n   \r\n   \r\n    vis[u] = true;\r\n    for (auto v : adj[u])\r\n    {\r\n      \r\n        if (v != p && vis[v])\r\n        {\r\n          \r\n            entry_node = v;\r\n            return true;\r\n        }\r\n        else if (v != p && !vis[v])\r\n        {\r\n            if (dfs1(v, u))\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n   \r\n    return false;\r\n    \r\n}\r\n\r\nint dfs2(int u)\r\n{\r\n    vis[u] = true;\r\n    int distbruh = N;\r\n    for (auto v : adj[u])\r\n    {\r\n        if (v == entry_node)\r\n        {\r\n            return 1;\r\n        }\r\n        if (!vis[v])\r\n        {\r\n            int dist = dfs2(v) + 1;\r\n            distbruh = min(dist, distbruh);\r\n        }\r\n    }\r\n    return distbruh;\r\n}\r\n\r\nvoid solve()\r\n{\r\n    int n, a, b;\r\n    cin >> n >> a >> b;\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        adj[u].push_back(v);\r\n        adj[v].push_back(u);\r\n    }\r\n    dfs1(b, -1);\r\n    vis.assign(n + 1, false);\r\n\r\n    int distMarcel = N, distValeriu = 0;\r\n\r\n    if (entry_node == a)\r\n    {\r\n        distMarcel = 0;\r\n    }\r\n    else\r\n    {\r\n        distMarcel = dfs2(a);\r\n    }\r\n    vis.assign(n + 1, false);\r\n    if (entry_node == b)\r\n    {\r\n        distValeriu = 0;\r\n    }\r\n    else\r\n    {\r\n        distValeriu = dfs2(b);\r\n    }\r\n    // dbg(entry_node)\r\n    //     dbg(distMarcel);\r\n    // dbg(distValeriu);\r\n    if (distValeriu < distMarcel)\r\n    {\r\n        cout << \"YES\" << endl;\r\n    }\r\n    else\r\n    {\r\n        cout << \"NO\" << endl;\r\n    }\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        adj[i].clear();\r\n        vis[i] = false;\r\n    }\r\n}\r\n\r\nint32_t main()\r\n{\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n}"
}