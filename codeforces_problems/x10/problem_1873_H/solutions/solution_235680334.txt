{
    "id": 235680334,
    "contestId": 1873,
    "creationTimeSeconds": 1701680272,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "OHKG"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nint pw(int a, int b){\r\n    if(b == 0){\r\n        return 1;\r\n    }else if(b%2 == 0){\r\n        auto x = pw(a, b/2);\r\n        return x*x;\r\n    }else{\r\n        return a * pw(a, b-1);\r\n    }\r\n}\r\nint gcd(int a, int b){\r\n    int x = max(a,b);\r\n    int y = min(a, b);\r\n    if(y == 0){\r\n        return x;\r\n    }else{\r\n        return gcd(x%y,y);\r\n    }\r\n}\r\nvoid dfs(int v, int prev, vector<vector<int>>& vec, vector<int>& used, vector<int>& colored){\r\n    used[v] = 1;\r\n    for(auto&x: vec[v]){\r\n        if(used[x] == 0){\r\n            int y = colored[x];\r\n            dfs(x, v, vec, used, colored);\r\n            if(y == 0 and colored[x] == 1){\r\n                colored[v] = 1;\r\n                break;\r\n            }\r\n        }else if(used[x] == 1 && x != prev){\r\n            colored[v] = 1;\r\n            break;\r\n        }\r\n    }\r\n}\r\nint dfs1(int v,vector<vector<int>>& vec, vector<int>& used,vector<int>& colored,  int& counter){\r\n    used[v] = 1;\r\n    if(colored[v] == 1){\r\n        return v;\r\n    }\r\n    for(auto&x: vec[v]){\r\n        if(used[x] == 0){\r\n            ++counter;\r\n            int fe = dfs1(x, vec, used, colored,counter);\r\n            if(fe !=-1){\r\n                return fe;\r\n            }\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nvoid dfs2(int v,vector<vector<int>>& vec, vector<int>& used,vector<int>& distance){\r\n    used[v] = 1;\r\n    for(auto&x: vec[v]){\r\n        distance[x] = min(distance[x], distance[v] + 1);\r\n        if(used[x] == 0){\r\n            dfs2(x, vec, used, distance);\r\n        }\r\n    }\r\n}\r\nvoid Solve(){\r\n    int n, a, b;\r\n    cin >> n >> a >> b;\r\n    vector<vector<int>> mat(n);\r\n    for(int i = 0;i < n; ++i){\r\n        int v1, u1;\r\n        cin >> v1 >> u1;\r\n        mat[v1 - 1].push_back(u1-1);\r\n        mat[u1-1].push_back(v1 -1);\r\n    }\r\n    vector<int> used(n);\r\n    vector<int> used1(n);\r\n    vector<int> used2(n);\r\n    vector<int> used3(n);\r\n    vector<int> colored(n);\r\n    vector<int> distance(n, INT32_MAX);\r\n    int cont = 0;\r\n    int cont2 = 0;\r\n    dfs(0, -1, mat, used, colored);\r\n    int ver = dfs1(b-1, mat, used1, colored, cont);\r\n    if(a == b){\r\n        cout << \"NO\" << endl;\r\n        return;\r\n    }\r\n    int ver2 = dfs1(a-1, mat, used3, colored, cont2);\r\n    distance[ver2] = 0;\r\n    dfs2(ver2, mat, used2, distance);\r\n    int cnt = 0;\r\n    for(int i = 0; i < n; ++i){\r\n        cnt += colored[i];\r\n    }\r\n    distance[ver] = min(distance[ver], cnt - distance[ver]) + cont2;\r\n    if(distance[ver] <= cont){\r\n        cout << \"NO\" << endl;\r\n    }else{\r\n        cout << \"YES\" << endl;\r\n    }\r\n\r\n}\r\nsigned main(){\r\n    ios::sync_with_stdio(false); cin.tie(nullptr);\r\n    int t = 0;\r\n    cin >> t;\r\n    while(t!= 0){\r\n        Solve();\r\n        --t;\r\n    }\r\n}"
}