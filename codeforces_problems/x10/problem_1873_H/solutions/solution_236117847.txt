{
    "id": 236117847,
    "contestId": 1873,
    "creationTimeSeconds": 1701894880,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "NiffSniff"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <queue>\r\n#include <bitset>\r\n#define N 200000\r\nusing namespace std;\r\n\r\nbitset <N+1> viz[N+1];\r\nint chosen[N+1], Niff, vizBFS[N+1], distA[N+1],distB[N+1];\r\nvector <int> L[N+1];\r\nint n,a,b;\r\n\r\nint dfs(int x, int ant)\r\n{\r\n    if (viz[x])\r\n    {\r\n        chosen[x] = 1;\r\n        Niff = x;\r\n        return x;\r\n    }\r\n    else\r\n    {\r\n        viz[x] = 1;\r\n        for (int y : L[x])\r\n        {\r\n            if (ant != y)\r\n            {\r\n                int ok = dfs(y,x);\r\n                if (ok)\r\n                {\r\n                    if (x != Niff)\r\n                    {\r\n                        chosen[x] = ok;\r\n                        return ok;\r\n                    }\r\n                    return 0;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\nvoid bfsMarcel()\r\n{\r\n    distA[a] = 1;\r\n    queue <int> Q;\r\n    Q.push(a);\r\n    while (!Q.empty())\r\n    {\r\n        int x = Q.front();\r\n        Q.pop();\r\n        for (int y : L[x])\r\n        {\r\n            if (distA[y] == 0)\r\n            {\r\n                distA[y] = distA[x] + 1;\r\n                Q.push(y);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint bfsValeriu()\r\n{\r\n    int k = 0;\r\n    distB[b] = 1;\r\n    queue <int> Q;\r\n    Q.push(b);\r\n    while (!Q.empty())\r\n    {\r\n        int x = Q.front();\r\n        Q.pop();\r\n        if (chosen[x] && k == 0)\r\n        {\r\n            k = x;\r\n        }\r\n        for (int y : L[x])\r\n        {\r\n            if (distB[y] == 0)\r\n            {\r\n                distB[y] = distB[x] + 1;\r\n                Q.push(y);\r\n            }\r\n        }\r\n    }\r\n    return k;\r\n}\r\nvoid solve()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int x,y;\r\n    cin >> n >> a >> b;\r\n    for (int i=1; i<=n; i++)\r\n    {\r\n        cin >> x >> y;\r\n        L[x].push_back(y);\r\n        L[y].push_back(x);\r\n    }\r\n    dfs(1,0);\r\n    bfsMarcel();\r\n    int punct = bfsValeriu();\r\n    cout << (distA[punct] > distB[punct] ? \"YES\\n\" : \"NO\\n\");\r\n    for (int i=1; i<=n; i++)\r\n    {\r\n        distA[i] = viz[i] = chosen[i] = Niff = vizBFS[i] = distB[i] = 0;\r\n        L[i].clear();\r\n    }\r\n}\r\nint main ()\r\n{\r\n    int t;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n}\r\n"
}