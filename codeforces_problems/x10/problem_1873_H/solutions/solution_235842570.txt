{
    "id": 235842570,
    "contestId": 1873,
    "creationTimeSeconds": 1701778487,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "OLOGY"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "Python 2",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 904,
    "memoryConsumedBytes": 49459200,
    "source": "import sys\r\nraw_input = iter(sys.stdin.read().splitlines()).next\r\n\r\ndef solution():\r\n    def iter_dfs(u):\r\n        lookup = [False]*n\r\n        stk = [(u, -1)]\r\n        while stk:\r\n            u, p = stk.pop()\r\n            if lookup[u]:\r\n                return u\r\n            lookup[u] = True\r\n            for v in adj[u]:\r\n                if v == p:\r\n                    continue\r\n                stk.append((v, u))\r\n        return -1\r\n\r\n    def bfs(u):\r\n        dist = [n]*n\r\n        dist[u] = d = 0\r\n        q = [u]\r\n        while q:\r\n            d += 1\r\n            new_q = []\r\n            for u in q:\r\n                for v in adj[u]:\r\n                    if dist[v] != n:\r\n                        continue\r\n                    dist[v] = d\r\n                    new_q.append(v)\r\n            q = new_q\r\n        return dist\r\n   \r\n    n, a, b = map(int, raw_input().split())\r\n    a, b = a-1, b-1\r\n    u_v = [map(lambda x: int(x)-1, raw_input().split()) for _ in xrange(n)]\r\n    adj = [[] for _ in xrange(n)]\r\n    for u, v in u_v:\r\n        adj[u].append(v)\r\n        adj[v].append(u)\r\n    v = iter_dfs(b)\r\n    dist = bfs(v)\r\n    return \"YES\" if dist[b] < dist[a] else \"NO\"\r\n\r\nfor _ in xrange(int(raw_input())):\r\n    print '%s' % solution()"
}