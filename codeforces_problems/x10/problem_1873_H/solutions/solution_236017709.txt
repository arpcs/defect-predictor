{
    "id": 236017709,
    "contestId": 1873,
    "creationTimeSeconds": 1701851681,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1873,
        "index": "H",
        "name": "Mad City",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "dfs and similar",
            "dsu",
            "games",
            "graphs",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1873,
        "members": [
            {
                "handle": "WuDengFenDeSY"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1695306900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "#include <string>\r\n#include <iostream>\r\n#include <vector>\r\n#include <queue>\r\n#include <utility>\r\n#define endl \"\\n\"\r\n\r\nusing namespace std;\r\nint n, a, b;\r\nvector<vector<int>> edge(n + 1, vector<int>(n + 1));\r\nvector<int> indeg(n + 1, 0);\r\nint mr = 0;\r\nvector<int> visit(n + 1, 0);\r\nqueue<pair<int, int>> que1;\r\n\r\nint bfs(int s) {\r\n\twhile (!que1.empty()) {\r\n\t\tque1.pop();\r\n\t}\r\n\tvisit.resize(n + 1, 0);\r\n\tque1.push(make_pair(s, 0));\r\n\tpair<int, int> x;\r\n\twhile (!que1.empty()) {\r\n\t\tx = que1.front();\r\n\t\tif (indeg[x.first] == 2) {\r\n\t\t\tmr = x.first;\r\n\t\t\treturn x.second;\r\n\t\t}\r\n\t\tque1.pop();\r\n\t\tfor (int y : edge[x.first]) {\r\n\t\t\tif (visit[y]) continue;\r\n\t\t\tque1.push(make_pair(y, x.second + 1));\r\n\t\t\tvisit[y] = 1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nint m_bfs(int s) {\r\n\twhile (!que1.empty()) {\r\n\t\tque1.pop();\r\n\t}\r\n\tvisit.resize(n + 1, 0);\r\n\tque1.push(make_pair(s, 0));\r\n\tpair<int, int> x;\r\n\twhile (!que1.empty()) {\r\n\t\tx = que1.front();\r\n\t\tif (x.first == mr) {\r\n\t\t\treturn x.second;\r\n\t\t}\r\n\t\tque1.pop();\r\n\t\tfor (int y : edge[x.first]) {\r\n\t\t\tif (visit[y]) continue;\r\n\t\t\tque1.push(make_pair(y, x.second + 1));\r\n\t\t\tvisit[y] = 1;\r\n\t\t}\r\n\t}\r\n\treturn -1;\r\n}\r\n\r\nvoid solve() {\r\n\tedge.clear();\r\n\tindeg.clear();\r\n\tmr = 0;\r\n\tcin >> n >> a >> b;\r\n\tedge.resize(n + 1, vector<int>(n + 1));\r\n\tindeg.resize(n + 1);\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tint x, y;\r\n\t\tcin >> x >> y;\r\n\t\tindeg[x]++;\r\n\t\tindeg[y]++;\r\n\t\tedge[x].push_back(y);\r\n\t\tedge[y].push_back(x);\r\n\t}\r\n\tqueue<int> que;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tif (indeg[i] == 1) {\r\n\t\t\tque.push(i);\r\n\t\t}\r\n\t}\r\n\twhile (!que.empty()) {\r\n\t\tint x = que.front();\r\n\t\tque.pop();\r\n\t\tfor (int y : edge[x]) {\r\n\t\t\tindeg[y]--;\r\n\t\t\tif (indeg[y] == 1) {\r\n\t\t\t\tque.push(y);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tint cnt = 0;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tif (indeg[i] == 2) {\r\n\t\t\tcnt++;\r\n\t\t}\r\n\t}\r\n\tif (cnt == 0) {\r\n\t\tcout << \"NO\" << endl;\r\n\t}\r\n\telse {\r\n\t\tif (indeg[b] == 2) {\r\n\t\t\tif (a != b) {\r\n\t\t\t\tcout << \"YES\" << endl;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcout << \"NO\" << endl;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tint v1 = bfs(b);\r\n\t\t\tint v2 = m_bfs(a);\r\n\t\t\tif (v1 < v2) {\r\n\t\t\t\tcout << \"YES\" << endl;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tcout << \"NO\" << endl;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tint t;\r\n\tcin >> t;\r\n\tfor (; t > 0; t--) {\r\n\t\tsolve();\r\n\t}\r\n\treturn 0;\r\n}"
}