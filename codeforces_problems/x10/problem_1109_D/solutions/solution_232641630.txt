{
    "id": 232641630,
    "contestId": 1109,
    "creationTimeSeconds": 1699884702,
    "relativeTimeSeconds": 5502,
    "problem": {
        "contestId": 1109,
        "index": "D",
        "name": "Sasha and Interesting Fact from Graph Theory",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 2400,
        "tags": [
            "brute force",
            "combinatorics",
            "dp",
            "math",
            "trees"
        ]
    },
    "author": {
        "contestId": 1109,
        "members": [
            {
                "handle": "ebi_fly"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1699879200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 16793600,
    "source": "#line 1 \"template/template.hpp\"\n#include <algorithm>\n#include <bit>\n#include <bitset>\n#include <cassert>\n#include <chrono>\n#include <climits>\n#include <cmath>\n#include <complex>\n#include <cstddef>\n#include <cstdint>\n#include <cstdlib>\n#include <cstring>\n#include <functional>\n#include <iomanip>\n#include <iostream>\n#include <limits>\n#include <map>\n#include <memory>\n#include <numbers>\n#include <numeric>\n#include <optional>\n#include <queue>\n#include <random>\n#include <ranges>\n#include <set>\n#include <stack>\n#include <string>\n#include <tuple>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n\n#define rep(i, a, n) for (int i = (int)(a); i < (int)(n); i++)\n#define rrep(i, a, n) for (int i = ((int)(n)-1); i >= (int)(a); i--)\n#define Rep(i, a, n) for (i64 i = (i64)(a); i < (i64)(n); i++)\n#define RRep(i, a, n) for (i64 i = ((i64)(n)-i64(1)); i >= (i64)(a); i--)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n\n#line 2 \"template/debug_template.hpp\"\n\n#line 4 \"template/debug_template.hpp\"\n\nnamespace ebi {\n\n#ifdef LOCAL\n#define debug(...)                                                      \\\n    std::cerr << \"LINE: \" << __LINE__ << \"  [\" << #__VA_ARGS__ << \"]:\", \\\n        debug_out(__VA_ARGS__)\n#else\n#define debug(...)\n#endif\n\nvoid debug_out() {\n    std::cerr << std::endl;\n}\n\ntemplate <typename Head, typename... Tail> void debug_out(Head h, Tail... t) {\n    std::cerr << \" \" << h;\n    if (sizeof...(t) > 0) std::cerr << \" :\";\n    debug_out(t...);\n}\n\n}  // namespace ebi\n#line 2 \"template/int_alias.hpp\"\n\n#line 4 \"template/int_alias.hpp\"\n\nnamespace ebi {\n\nusing std::size_t;\nusing i8 = std::int8_t;\nusing u8 = std::uint8_t;\nusing i16 = std::int16_t;\nusing u16 = std::uint16_t;\nusing i32 = std::int32_t;\nusing u32 = std::uint32_t;\nusing i64 = std::int64_t;\nusing u64 = std::uint64_t;\nusing i128 = __int128_t;\nusing u128 = __uint128_t;\n\n}  // namespace ebi\n#line 2 \"template/io.hpp\"\n\n#line 7 \"template/io.hpp\"\n\nnamespace ebi {\n\ntemplate <typename T1, typename T2>\nstd::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &pa) {\n    return os << pa.first << \" \" << pa.second;\n}\n\ntemplate <typename T1, typename T2>\nstd::istream &operator>>(std::istream &os, std::pair<T1, T2> &pa) {\n    return os >> pa.first >> pa.second;\n}\n\ntemplate <typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &vec) {\n    for (std::size_t i = 0; i < vec.size(); i++)\n        os << vec[i] << (i + 1 == vec.size() ? \"\" : \" \");\n    return os;\n}\n\ntemplate <typename T>\nstd::istream &operator>>(std::istream &os, std::vector<T> &vec) {\n    for (T &e : vec) std::cin >> e;\n    return os;\n}\n\ntemplate <typename T>\nstd::ostream &operator<<(std::ostream &os, const std::optional<T> &opt) {\n    if (opt) {\n        os << opt.value();\n    } else {\n        os << \"invalid value\";\n    }\n    return os;\n}\n\nvoid fast_io() {\n    std::cout << std::fixed << std::setprecision(15);\n    std::cin.tie(nullptr);\n    std::ios::sync_with_stdio(false);\n}\n\n}  // namespace ebi\n#line 2 \"template/utility.hpp\"\n\n#line 5 \"template/utility.hpp\"\n\n#line 7 \"template/utility.hpp\"\n\nnamespace ebi {\n\ntemplate <class T> inline bool chmin(T &a, T b) {\n    if (a > b) {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\ntemplate <class T> inline bool chmax(T &a, T b) {\n    if (a < b) {\n        a = b;\n        return true;\n    }\n    return false;\n}\n\ntemplate <class T> T safe_ceil(T a, T b) {\n    if (a % b == 0)\n        return a / b;\n    else if (a >= 0)\n        return (a / b) + 1;\n    else\n        return -((-a) / b);\n}\n\ntemplate <class T> T safe_floor(T a, T b) {\n    if (a % b == 0)\n        return a / b;\n    else if (a >= 0)\n        return a / b;\n    else\n        return -((-a) / b) - 1;\n}\n\nconstexpr i64 LNF = std::numeric_limits<i64>::max() / 4;\n\nconstexpr int INF = std::numeric_limits<int>::max() / 2;\n\nconst std::vector<int> dy = {1, 0, -1, 0, 1, 1, -1, -1};\nconst std::vector<int> dx = {0, 1, 0, -1, 1, -1, 1, -1};\n\n}  // namespace ebi\n#line 2 \"a.cpp\"\n\n#line 2 \"modint/modint.hpp\"\n\r\n#line 5 \"modint/modint.hpp\"\n\r\n#line 2 \"modint/base.hpp\"\n\n#include <concepts>\n#line 6 \"modint/base.hpp\"\n\nnamespace ebi {\n\ntemplate <class T>\nconcept Modint = requires(T a, T b) {\n    a + b;\n    a - b;\n    a * b;\n    a / b;\n    a.inv();\n    a.val();\n    a.pow(std::declval<long long>());\n    T::mod();\n};\n\ntemplate <Modint mint> std::istream &operator>>(std::istream &os, mint &a) {\n    long long x;\n    os >> x;\n    a = x;\n    return os;\n}\n\ntemplate <Modint mint>\nstd::ostream &operator<<(std::ostream &os, const mint &a) {\n    return os << a.val();\n}\n\n}  // namespace ebi\n#line 7 \"modint/modint.hpp\"\n\r\nnamespace ebi {\r\n\r\ntemplate <int m> struct static_modint {\r\n  private:\r\n    using modint = static_modint;\r\n\r\n  public:\r\n    static constexpr int mod() {\r\n        return m;\r\n    }\r\n\r\n    static constexpr modint raw(int v) {\r\n        modint x;\r\n        x._v = v;\r\n        return x;\r\n    }\r\n\r\n    constexpr static_modint() : _v(0) {}\r\n\r\n    constexpr static_modint(long long v) {\r\n        v %= (long long)umod();\r\n        if (v < 0) v += (long long)umod();\r\n        _v = (unsigned int)v;\r\n    }\r\n\r\n    constexpr unsigned int val() const {\r\n        return _v;\r\n    }\r\n\r\n    constexpr unsigned int value() const {\r\n        return val();\r\n    }\r\n\r\n    constexpr modint &operator++() {\r\n        _v++;\r\n        if (_v == umod()) _v = 0;\r\n        return *this;\r\n    }\r\n    constexpr modint &operator--() {\r\n        if (_v == 0) _v = umod();\r\n        _v--;\r\n        return *this;\r\n    }\r\n\r\n    constexpr modint operator++(int) {\r\n        modint res = *this;\r\n        ++*this;\r\n        return res;\r\n    }\r\n    constexpr modint operator--(int) {\r\n        modint res = *this;\r\n        --*this;\r\n        return res;\r\n    }\r\n\r\n    constexpr modint &operator+=(const modint &rhs) {\r\n        _v += rhs._v;\r\n        if (_v >= umod()) _v -= umod();\r\n        return *this;\r\n    }\r\n    constexpr modint &operator-=(const modint &rhs) {\r\n        _v -= rhs._v;\r\n        if (_v >= umod()) _v += umod();\r\n        return *this;\r\n    }\r\n    constexpr modint &operator*=(const modint &rhs) {\r\n        unsigned long long x = _v;\r\n        x *= rhs._v;\r\n        _v = (unsigned int)(x % (unsigned long long)umod());\r\n        return *this;\r\n    }\r\n    constexpr modint &operator/=(const modint &rhs) {\r\n        return *this = *this * rhs.inv();\r\n    }\r\n\r\n    constexpr modint operator+() const {\r\n        return *this;\r\n    }\r\n    constexpr modint operator-() const {\r\n        return modint() - *this;\r\n    }\r\n\r\n    constexpr modint pow(long long n) const {\r\n        assert(0 <= n);\r\n        modint x = *this, res = 1;\r\n        while (n) {\r\n            if (n & 1) res *= x;\r\n            x *= x;\r\n            n >>= 1;\r\n        }\r\n        return res;\r\n    }\r\n    constexpr modint inv() const {\r\n        assert(_v);\r\n        return pow(umod() - 2);\r\n    }\r\n\r\n    friend modint operator+(const modint &lhs, const modint &rhs) {\r\n        return modint(lhs) += rhs;\r\n    }\r\n    friend modint operator-(const modint &lhs, const modint &rhs) {\r\n        return modint(lhs) -= rhs;\r\n    }\r\n    friend modint operator*(const modint &lhs, const modint &rhs) {\r\n        return modint(lhs) *= rhs;\r\n    }\r\n\r\n    friend modint operator/(const modint &lhs, const modint &rhs) {\r\n        return modint(lhs) /= rhs;\r\n    }\r\n    friend bool operator==(const modint &lhs, const modint &rhs) {\r\n        return lhs.val() == rhs.val();\r\n    }\r\n    friend bool operator!=(const modint &lhs, const modint &rhs) {\r\n        return !(lhs == rhs);\r\n    }\r\n\r\n  private:\r\n    unsigned int _v = 0;\r\n\r\n    static constexpr unsigned int umod() {\r\n        return m;\r\n    }\r\n};\r\n\r\nusing modint998244353 = static_modint<998244353>;\r\nusing modint1000000007 = static_modint<1000000007>;\r\n\r\n}  // namespace ebi\n#line 2 \"fps/fps.hpp\"\n\n#line 7 \"fps/fps.hpp\"\n\n#line 9 \"fps/fps.hpp\"\n\nnamespace ebi {\n\ntemplate <Modint mint,\n          std::vector<mint> (*convolution)(const std::vector<mint> &,\n                                           const std::vector<mint> &)>\nstruct FormalPowerSeries : std::vector<mint> {\n  private:\n    using std::vector<mint>::vector;\n    using std::vector<mint>::vector::operator=;\n    using FPS = FormalPowerSeries;\n\n  public:\n    FormalPowerSeries(const std::vector<mint> &a) {\n        *this = a;\n    }\n\n    FPS operator+(const FPS &rhs) const noexcept {\n        return FPS(*this) += rhs;\n    }\n    FPS operator-(const FPS &rhs) const noexcept {\n        return FPS(*this) -= rhs;\n    }\n    FPS operator*(const FPS &rhs) const noexcept {\n        return FPS(*this) *= rhs;\n    }\n    FPS operator/(const FPS &rhs) const noexcept {\n        return FPS(*this) /= rhs;\n    }\n    FPS operator%(const FPS &rhs) const noexcept {\n        return FPS(*this) %= rhs;\n    }\n\n    FPS operator+(const mint &rhs) const noexcept {\n        return FPS(*this) += rhs;\n    }\n    FPS operator-(const mint &rhs) const noexcept {\n        return FPS(*this) -= rhs;\n    }\n    FPS operator*(const mint &rhs) const noexcept {\n        return FPS(*this) *= rhs;\n    }\n    FPS operator/(const mint &rhs) const noexcept {\n        return FPS(*this) /= rhs;\n    }\n\n    FPS &operator+=(const FPS &rhs) noexcept {\n        if (this->size() < rhs.size()) this->resize(rhs.size());\n        for (int i = 0; i < (int)rhs.size(); ++i) {\n            (*this)[i] += rhs[i];\n        }\n        return *this;\n    }\n\n    FPS &operator-=(const FPS &rhs) noexcept {\n        if (this->size() < rhs.size()) this->resize(rhs.size());\n        for (int i = 0; i < (int)rhs.size(); ++i) {\n            (*this)[i] -= rhs[i];\n        }\n        return *this;\n    }\n\n    FPS &operator*=(const FPS &rhs) noexcept {\n        *this = convolution(*this, rhs);\n        return *this;\n    }\n\n    FPS &operator/=(const FPS &rhs) noexcept {\n        int n = deg() - 1;\n        int m = rhs.deg() - 1;\n        if (n < m) {\n            *this = {};\n            return *this;\n        }\n        *this = (*this).rev() * rhs.rev().inv(n - m + 1);\n        (*this).resize(n - m + 1);\n        std::reverse((*this).begin(), (*this).end());\n        return *this;\n    }\n\n    FPS &operator%=(const FPS &rhs) noexcept {\n        *this -= *this / rhs * rhs;\n        shrink();\n        return *this;\n    }\n\n    FPS &operator+=(const mint &rhs) noexcept {\n        if (this->empty()) this->resize(1);\n        (*this)[0] += rhs;\n        return *this;\n    }\n\n    FPS &operator-=(const mint &rhs) noexcept {\n        if (this->empty()) this->resize(1);\n        (*this)[0] -= rhs;\n        return *this;\n    }\n\n    FPS &operator*=(const mint &rhs) noexcept {\n        for (int i = 0; i < deg(); ++i) {\n            (*this)[i] *= rhs;\n        }\n        return *this;\n    }\n    FPS &operator/=(const mint &rhs) noexcept {\n        mint inv_rhs = rhs.inv();\n        for (int i = 0; i < deg(); ++i) {\n            (*this)[i] *= inv_rhs;\n        }\n        return *this;\n    }\n\n    FPS operator>>(int d) const {\n        if (deg() <= d) return {};\n        FPS f = *this;\n        f.erase(f.begin(), f.begin() + d);\n        return f;\n    }\n\n    FPS operator<<(int d) const {\n        FPS f = *this;\n        f.insert(f.begin(), d, 0);\n        return f;\n    }\n\n    FPS operator-() const {\n        FPS g(this->size());\n        for (int i = 0; i < (int)this->size(); i++) g[i] = -(*this)[i];\n        return g;\n    }\n\n    FPS pre(int sz) const {\n        return FPS(this->begin(), this->begin() + std::min(deg(), sz));\n    }\n\n    FPS rev() const {\n        auto f = *this;\n        std::reverse(f.begin(), f.end());\n        return f;\n    }\n\n    FPS differential() const {\n        int n = deg();\n        FPS g(std::max(0, n - 1));\n        for (int i = 0; i < n - 1; i++) {\n            g[i] = (*this)[i + 1] * (i + 1);\n        }\n        return g;\n    }\n\n    FPS integral() const {\n        int n = deg();\n        FPS g(n + 1);\n        g[0] = 0;\n        if (n > 0) g[1] = 1;\n        auto mod = mint::mod();\n        for (int i = 2; i <= n; i++) g[i] = (-g[mod % i]) * (mod / i);\n        for (int i = 0; i < n; i++) g[i + 1] *= (*this)[i];\n        return g;\n    }\n\n    FPS inv(int d = -1) const {\n        int n = 1;\n        if (d < 0) d = deg();\n        FPS g(n);\n        g[0] = (*this)[0].inv();\n        while (n < d) {\n            n <<= 1;\n            g = (g * 2 - g * g * this->pre(n)).pre(n);\n        }\n        g.resize(d);\n        return g;\n    }\n\n    FPS log(int d = -1) const {\n        assert((*this)[0].val() == 1);\n        if (d < 0) d = deg();\n        return ((*this).differential() * (*this).inv(d)).pre(d - 1).integral();\n    }\n\n    FPS exp(int d = -1) const {\n        assert((*this)[0].val() == 0);\n        int n = 1;\n        if (d < 0) d = deg();\n        FPS g(n);\n        g[0] = 1;\n        while (n < d) {\n            n <<= 1;\n            g = (g * (this->pre(n) - g.log(n) + 1)).pre(n);\n        }\n        g.resize(d);\n        return g;\n    }\n\n    FPS pow(int64_t k, int d = -1) const {\n        const int n = deg();\n        if (d < 0) d = n;\n        if (k == 0) {\n            FPS f(d);\n            if (d > 0) f[0] = 1;\n            return f;\n        }\n        for (int i = 0; i < n; i++) {\n            if ((*this)[i] != 0) {\n                mint rev = (*this)[i].inv();\n                FPS f = (((*this * rev) >> i).log(d) * k).exp(d);\n                f *= (*this)[i].pow(k);\n                f = (f << (i * k)).pre(d);\n                if (f.deg() < d) f.resize(d);\n                return f;\n            }\n            if (i + 1 >= (d + k - 1) / k) break;\n        }\n        return FPS(d);\n    }\n\n    int deg() const {\n        return (*this).size();\n    }\n\n    void shrink() {\n        while ((!this->empty()) && this->back() == 0) this->pop_back();\n    }\n\n    int count_terms() const {\n        int c = 0;\n        for (int i = 0; i < deg(); i++) {\n            if ((*this)[i] != 0) c++;\n        }\n        return c;\n    }\n\n    std::optional<FPS> sqrt(int d = -1) const;\n\n    static FPS exp_x(int n) {\n        FPS f(n);\n        mint fact = 1;\n        for (int i = 1; i < n; i++) fact *= i;\n        f[n - 1] = fact.inv();\n        for (int i = n - 1; i >= 0; i--) f[i - 1] = f[i] * i;\n        return f;\n    }\n};\n\n}  // namespace ebi\n#line 2 \"math/binomial.hpp\"\n\n#line 8 \"math/binomial.hpp\"\n\n#line 10 \"math/binomial.hpp\"\n\nnamespace ebi {\n\ntemplate <Modint mint> struct Binomial {\n  private:\n    static void extend(int len = -1) {\n        int sz = (int)fact.size();\n        if (len < 0)\n            len = 2 * sz;\n        else\n            len = std::max(2 * sz, (int)std::bit_ceil(std::uint32_t(len)));\n        len = std::min(len, mint::mod());\n        assert(sz <= len);\n        fact.resize(len);\n        inv_fact.resize(len);\n        for (int i : std::views::iota(sz, len)) {\n            fact[i] = fact[i - 1] * i;\n        }\n        inv_fact[len - 1] = fact[len - 1].inv();\n        for (int i : std::views::iota(sz, len) | std::views::reverse) {\n            inv_fact[i - 1] = inv_fact[i] * i;\n        }\n    }\n\n  public:\n    Binomial() = default;\n\n    Binomial(int n) {\n        extend(n + 1);\n    }\n\n    static mint f(int n) {\n        if (n >= (int)fact.size()) [[unlikely]] {\n            extend(n + 1);\n        }\n        return fact[n];\n    }\n\n    static mint inv_f(int n) {\n        if (n >= (int)fact.size()) [[unlikely]] {\n            extend(n + 1);\n        }\n        return inv_fact[n];\n    }\n\n    static mint c(int n, int r) {\n        if (r < 0 || n < r) return 0;\n        return f(n) * inv_f(r) * inv_f(n - r);\n    }\n\n    static mint p(int n, int r) {\n        if (r < 0 || n < r) return 0;\n        return f(n) * inv_f(n - r);\n    }\n\n    static mint inv(int n) {\n        return inv_f(n) * f(n - 1);\n    }\n\n    static void reserve(int n) {\n        extend(n + 1);\n    }\n\n  private:\n    static std::vector<mint> fact, inv_fact;\n};\n\ntemplate <Modint mint>\nstd::vector<mint> Binomial<mint>::fact = std::vector<mint>(2, 1);\n\ntemplate <Modint mint>\nstd::vector<mint> Binomial<mint>::inv_fact = std::vector<mint>(2, 1);\n\n}  // namespace ebi\n#line 6 \"a.cpp\"\n\nnamespace ebi {\n\nusing mint = modint1000000007; \n\nvoid main_() {\n    int n,m,a,b;\n    std::cin >> n >> m >> a >> b;\n    Binomial<mint> binom(2000000);\n    mint ans = 0;\n    mint pow_n = mint(n).pow(n - 3);\n    mint inv_n = mint(n).inv();\n    mint pow_m = mint(m).pow(n - 2);\n    mint inv_m = mint(m).inv();\n    rep(i,0,n-1) {\n        mint ret = (2 + i) * pow_n;\n        ans += ret * pow_m * binom.p(n-2,i) * binom.c(m - 1, i);\n        pow_n *= inv_n;\n        pow_m *= inv_m;\n    }\n    std::cout << ans << '\\n';\n}\n\n}  // namespace ebi\n\nint main() {\n    ebi::fast_io();\n    int t = 1;\n    // std::cin >> t;\n    while (t--) {\n        ebi::main_();\n    }\n    return 0;\n}\n"
}