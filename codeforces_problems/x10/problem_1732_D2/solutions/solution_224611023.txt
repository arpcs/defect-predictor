{
    "id": 224611023,
    "contestId": 1732,
    "creationTimeSeconds": 1695387787,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1732,
        "index": "D2",
        "name": "Balance (Hard version)",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 2400,
        "tags": [
            "brute force",
            "data structures",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1732,
        "members": [
            {
                "handle": "wjh_coder"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1666519500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 92,
    "timeConsumedMillis": 1934,
    "memoryConsumedBytes": 61747200,
    "source": "#include<iostream>\r\n#include<string>\r\n#include<vector>\r\n#include<functional>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<queue>\r\n#include<set>\r\n#include<vector>\r\n#include<map>\r\n#include<cmath>\r\n#include<stack>\r\n#define ll long long\r\nconst int mod = 1e9 + 7;\r\n#define pii pair<int,int>\r\n#define lowbit(x) (x & (-x))\r\nusing namespace std;\r\n#define int long long\r\n\r\nint q;\r\nset <int> S;//\u9898\u76ee\u4e2d\u7684\u96c6\u5408s\r\nmap <int,set<int> >disapr,factor;\r\n//disapr\u7ef4\u62a4\u5bf9\u6bcf\u4e2ak,k\u7684\u500d\u6570\u4e2d\"\u53ef\u80fd\"\u6ca1\u51fa\u73b0\u8fc7\u7684\u6570\r\n//factor\u7ef4\u62a4\u6bcf\u4e2ax\u7684\u56e0\u6570\uff0c\u4e00\u8fb9\u4fee\u6539\u4e00\u8fb9\u7ef4\u62a4\uff0c\u53ea\u8bb0\u5f55\u6709\u7528\u7684\u5c31\u884c\r\nsigned main(){\r\n\tcin>>q;\r\n\twhile(q--){\r\n\t\tchar opt;int x;\r\n\t\tcin>>opt>>x;\r\n\t\tif(opt=='+') S.insert(x);\r\n\t\telse if(opt=='-'){\r\n\t\t\tS.erase(x);\r\n\t\t\tset <int> ::iterator it=factor[x].begin();\r\n\t\t\twhile(it!=factor[x].end()) disapr[*it].insert(x),it++;\r\n\t\t}else{\r\n\t\t\tdisapr[x].insert(x);\r\n\t\t\tint u=*disapr[x].begin();\r\n\t\t\tfactor[u].insert(x);\r\n\t\t\twhile(S.count(u)){\r\n\t\t\t\tdisapr[x].erase(u);\r\n\t\t\t\tif(disapr[x].empty()) disapr[x].insert(u+x);\r\n\t\t\t\tu=*disapr[x].begin(),factor[u].insert(x);\r\n\t\t\t}\r\n\t\t\tcout<<*disapr[x].begin()<<endl;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}