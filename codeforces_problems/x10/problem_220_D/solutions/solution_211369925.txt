{
    "id": 211369925,
    "contestId": 220,
    "creationTimeSeconds": 1687982376,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 220,
        "index": "D",
        "name": "Little Elephant and Triangle",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "geometry",
            "math"
        ]
    },
    "author": {
        "contestId": 220,
        "members": [
            {
                "handle": "maspy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1346427000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#line 1 \"/home/maspy/compro/library/my_template.hpp\"\r\n#if defined(LOCAL)\r\n#include <my_template_compiled.hpp>\r\n#else\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nusing u32 = unsigned int;\r\nusing u64 = unsigned long long;\r\nusing i128 = __int128;\r\n\r\ntemplate <class T>\r\nconstexpr T infty = 0;\r\ntemplate <>\r\nconstexpr int infty<int> = 1'000'000'000;\r\ntemplate <>\r\nconstexpr ll infty<ll> = ll(infty<int>) * infty<int> * 2;\r\ntemplate <>\r\nconstexpr u32 infty<u32> = infty<int>;\r\ntemplate <>\r\nconstexpr u64 infty<u64> = infty<ll>;\r\ntemplate <>\r\nconstexpr i128 infty<i128> = i128(infty<ll>) * infty<ll>;\r\ntemplate <>\r\nconstexpr double infty<double> = infty<ll>;\r\ntemplate <>\r\nconstexpr long double infty<long double> = infty<ll>;\r\n\r\nusing pi = pair<ll, ll>;\r\nusing vi = vector<ll>;\r\ntemplate <class T>\r\nusing vc = vector<T>;\r\ntemplate <class T>\r\nusing vvc = vector<vc<T>>;\r\ntemplate <class T>\r\nusing vvvc = vector<vvc<T>>;\r\ntemplate <class T>\r\nusing vvvvc = vector<vvvc<T>>;\r\ntemplate <class T>\r\nusing vvvvvc = vector<vvvvc<T>>;\r\ntemplate <class T>\r\nusing pq = priority_queue<T>;\r\ntemplate <class T>\r\nusing pqg = priority_queue<T, vector<T>, greater<T>>;\r\n\r\n#define vv(type, name, h, ...) \\\r\n  vector<vector<type>> name(h, vector<type>(__VA_ARGS__))\r\n#define vvv(type, name, h, w, ...)   \\\r\n  vector<vector<vector<type>>> name( \\\r\n      h, vector<vector<type>>(w, vector<type>(__VA_ARGS__)))\r\n#define vvvv(type, name, a, b, c, ...)       \\\r\n  vector<vector<vector<vector<type>>>> name( \\\r\n      a, vector<vector<vector<type>>>(       \\\r\n             b, vector<vector<type>>(c, vector<type>(__VA_ARGS__))))\r\n\r\n// https://trap.jp/post/1224/\r\n#define FOR1(a) for (ll _ = 0; _ < ll(a); ++_)\r\n#define FOR2(i, a) for (ll i = 0; i < ll(a); ++i)\r\n#define FOR3(i, a, b) for (ll i = a; i < ll(b); ++i)\r\n#define FOR4(i, a, b, c) for (ll i = a; i < ll(b); i += (c))\r\n#define FOR1_R(a) for (ll i = (a)-1; i >= ll(0); --i)\r\n#define FOR2_R(i, a) for (ll i = (a)-1; i >= ll(0); --i)\r\n#define FOR3_R(i, a, b) for (ll i = (b)-1; i >= ll(a); --i)\r\n#define overload4(a, b, c, d, e, ...) e\r\n#define overload3(a, b, c, d, ...) d\r\n#define FOR(...) overload4(__VA_ARGS__, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)\r\n#define FOR_R(...) overload3(__VA_ARGS__, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)\r\n\r\n#define FOR_subset(t, s) \\\r\n  for (ll t = (s); t >= 0; t = (t == 0 ? -1 : (t - 1) & (s)))\r\n#define all(x) x.begin(), x.end()\r\n#define len(x) ll(x.size())\r\n#define elif else if\r\n\r\n#define eb emplace_back\r\n#define mp make_pair\r\n#define mt make_tuple\r\n#define fi first\r\n#define se second\r\n\r\n#define stoi stoll\r\n\r\nint popcnt(int x) { return __builtin_popcount(x); }\r\nint popcnt(u32 x) { return __builtin_popcount(x); }\r\nint popcnt(ll x) { return __builtin_popcountll(x); }\r\nint popcnt(u64 x) { return __builtin_popcountll(x); }\r\n// (0, 1, 2, 3, 4) -> (-1, 0, 1, 1, 2)\r\nint topbit(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\r\nint topbit(u32 x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\r\nint topbit(ll x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\r\nint topbit(u64 x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\r\n// (0, 1, 2, 3, 4) -> (-1, 0, 1, 0, 2)\r\nint lowbit(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\r\nint lowbit(u32 x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\r\nint lowbit(ll x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\r\nint lowbit(u64 x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\r\n\r\ntemplate <typename T, typename U>\r\nT ceil(T x, U y) {\r\n  return (x > 0 ? (x + y - 1) / y : x / y);\r\n}\r\ntemplate <typename T, typename U>\r\nT floor(T x, U y) {\r\n  return (x > 0 ? x / y : (x - y + 1) / y);\r\n}\r\ntemplate <typename T, typename U>\r\npair<T, T> divmod(T x, U y) {\r\n  T q = floor(x, y);\r\n  return {q, x - q * y};\r\n}\r\n\r\ntemplate <typename T, typename U>\r\nT SUM(const vector<U> &A) {\r\n  T sum = 0;\r\n  for (auto &&a: A) sum += a;\r\n  return sum;\r\n}\r\n\r\n#define MIN(v) *min_element(all(v))\r\n#define MAX(v) *max_element(all(v))\r\n#define LB(c, x) distance((c).begin(), lower_bound(all(c), (x)))\r\n#define UB(c, x) distance((c).begin(), upper_bound(all(c), (x)))\r\n#define UNIQUE(x) \\\r\n  sort(all(x)), x.erase(unique(all(x)), x.end()), x.shrink_to_fit()\r\n\r\ntemplate <typename T>\r\nT POP(deque<T> &que) {\r\n  T a = que.front();\r\n  que.pop_front();\r\n  return a;\r\n}\r\ntemplate <typename T>\r\nT POP(pq<T> &que) {\r\n  T a = que.top();\r\n  que.pop();\r\n  return a;\r\n}\r\ntemplate <typename T>\r\nT POP(pqg<T> &que) {\r\n  assert(!que.empty());\r\n  T a = que.top();\r\n  que.pop();\r\n  return a;\r\n}\r\ntemplate <typename T>\r\nT POP(vc<T> &que) {\r\n  assert(!que.empty());\r\n  T a = que.back();\r\n  que.pop_back();\r\n  return a;\r\n}\r\n\r\ntemplate <typename F>\r\nll binary_search(F check, ll ok, ll ng, bool check_ok = true) {\r\n  if (check_ok) assert(check(ok));\r\n  while (abs(ok - ng) > 1) {\r\n    auto x = (ng + ok) / 2;\r\n    tie(ok, ng) = (check(x) ? mp(x, ng) : mp(ok, x));\r\n  }\r\n  return ok;\r\n}\r\ntemplate <typename F>\r\ndouble binary_search_real(F check, double ok, double ng, int iter = 100) {\r\n  FOR(iter) {\r\n    double x = (ok + ng) / 2;\r\n    tie(ok, ng) = (check(x) ? mp(x, ng) : mp(ok, x));\r\n  }\r\n  return (ok + ng) / 2;\r\n}\r\n\r\ntemplate <class T, class S>\r\ninline bool chmax(T &a, const S &b) {\r\n  return (a < b ? a = b, 1 : 0);\r\n}\r\ntemplate <class T, class S>\r\ninline bool chmin(T &a, const S &b) {\r\n  return (a > b ? a = b, 1 : 0);\r\n}\r\n\r\n// ? \u306f -1\r\nvc<int> s_to_vi(const string &S, char first_char) {\r\n  vc<int> A(S.size());\r\n  FOR(i, S.size()) { A[i] = (S[i] != '?' ? S[i] - first_char : -1); }\r\n  return A;\r\n}\r\n\r\ntemplate <typename T, typename U>\r\nvector<T> cumsum(vector<U> &A, int off = 1) {\r\n  int N = A.size();\r\n  vector<T> B(N + 1);\r\n  FOR(i, N) { B[i + 1] = B[i] + A[i]; }\r\n  if (off == 0) B.erase(B.begin());\r\n  return B;\r\n}\r\n\r\n// stable sort\r\ntemplate <typename T>\r\nvector<int> argsort(const vector<T> &A) {\r\n  vector<int> ids(len(A));\r\n  iota(all(ids), 0);\r\n  sort(all(ids),\r\n       [&](int i, int j) { return (A[i] == A[j] ? i < j : A[i] < A[j]); });\r\n  return ids;\r\n}\r\n\r\n// A[I[0]], A[I[1]], ...\r\ntemplate <typename T>\r\nvc<T> rearrange(const vc<T> &A, const vc<int> &I) {\r\n  vc<T> B(len(I));\r\n  FOR(i, len(I)) B[i] = A[I[i]];\r\n  return B;\r\n}\r\n#endif\r\n#line 1 \"/home/maspy/compro/library/other/io.hpp\"\r\n// based on yosupo's fastio\r\n#include <unistd.h>\r\n\r\nnamespace fastio {\r\n#define FASTIO\r\n// \u30af\u30e9\u30b9\u304c read(), print() \u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\r\nstruct has_write_impl {\r\n  template <class T>\r\n  static auto check(T &&x) -> decltype(x.write(), std::true_type{});\r\n\r\n  template <class T>\r\n  static auto check(...) -> std::false_type;\r\n};\r\n\r\ntemplate <class T>\r\nclass has_write : public decltype(has_write_impl::check<T>(std::declval<T>())) {\r\n};\r\n\r\nstruct has_read_impl {\r\n  template <class T>\r\n  static auto check(T &&x) -> decltype(x.read(), std::true_type{});\r\n\r\n  template <class T>\r\n  static auto check(...) -> std::false_type;\r\n};\r\n\r\ntemplate <class T>\r\nclass has_read : public decltype(has_read_impl::check<T>(std::declval<T>())) {};\r\n\r\nstruct Scanner {\r\n  FILE *fp;\r\n  char line[(1 << 15) + 1];\r\n  size_t st = 0, ed = 0;\r\n  void reread() {\r\n    memmove(line, line + st, ed - st);\r\n    ed -= st;\r\n    st = 0;\r\n    ed += fread(line + ed, 1, (1 << 15) - ed, fp);\r\n    line[ed] = '\\0';\r\n  }\r\n  bool succ() {\r\n    while (true) {\r\n      if (st == ed) {\r\n        reread();\r\n        if (st == ed) return false;\r\n      }\r\n      while (st != ed && isspace(line[st])) st++;\r\n      if (st != ed) break;\r\n    }\r\n    if (ed - st <= 50) {\r\n      bool sep = false;\r\n      for (size_t i = st; i < ed; i++) {\r\n        if (isspace(line[i])) {\r\n          sep = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!sep) reread();\r\n    }\r\n    return true;\r\n  }\r\n  template <class T, enable_if_t<is_same<T, string>::value, int> = 0>\r\n  bool read_single(T &ref) {\r\n    if (!succ()) return false;\r\n    while (true) {\r\n      size_t sz = 0;\r\n      while (st + sz < ed && !isspace(line[st + sz])) sz++;\r\n      ref.append(line + st, sz);\r\n      st += sz;\r\n      if (!sz || st != ed) break;\r\n      reread();\r\n    }\r\n    return true;\r\n  }\r\n  template <class T, enable_if_t<is_integral<T>::value, int> = 0>\r\n  bool read_single(T &ref) {\r\n    if (!succ()) return false;\r\n    bool neg = false;\r\n    if (line[st] == '-') {\r\n      neg = true;\r\n      st++;\r\n    }\r\n    ref = T(0);\r\n    while (isdigit(line[st])) { ref = 10 * ref + (line[st++] & 0xf); }\r\n    if (neg) ref = -ref;\r\n    return true;\r\n  }\r\n  template <typename T,\r\n            typename enable_if<has_read<T>::value>::type * = nullptr>\r\n  inline bool read_single(T &x) {\r\n    x.read();\r\n    return true;\r\n  }\r\n  bool read_single(double &ref) {\r\n    string s;\r\n    if (!read_single(s)) return false;\r\n    ref = std::stod(s);\r\n    return true;\r\n  }\r\n  bool read_single(char &ref) {\r\n    string s;\r\n    if (!read_single(s) || s.size() != 1) return false;\r\n    ref = s[0];\r\n    return true;\r\n  }\r\n  template <class T>\r\n  bool read_single(vector<T> &ref) {\r\n    for (auto &d: ref) {\r\n      if (!read_single(d)) return false;\r\n    }\r\n    return true;\r\n  }\r\n  template <class T, class U>\r\n  bool read_single(pair<T, U> &p) {\r\n    return (read_single(p.first) && read_single(p.second));\r\n  }\r\n  template <size_t N = 0, typename T>\r\n  void read_single_tuple(T &t) {\r\n    if constexpr (N < std::tuple_size<T>::value) {\r\n      auto &x = std::get<N>(t);\r\n      read_single(x);\r\n      read_single_tuple<N + 1>(t);\r\n    }\r\n  }\r\n  template <class... T>\r\n  bool read_single(tuple<T...> &tpl) {\r\n    read_single_tuple(tpl);\r\n    return true;\r\n  }\r\n  void read() {}\r\n  template <class H, class... T>\r\n  void read(H &h, T &... t) {\r\n    bool f = read_single(h);\r\n    assert(f);\r\n    read(t...);\r\n  }\r\n  Scanner(FILE *fp) : fp(fp) {}\r\n};\r\n\r\nstruct Printer {\r\n  Printer(FILE *_fp) : fp(_fp) {}\r\n  ~Printer() { flush(); }\r\n\r\n  static constexpr size_t SIZE = 1 << 15;\r\n  FILE *fp;\r\n  char line[SIZE], small[50];\r\n  size_t pos = 0;\r\n  void flush() {\r\n    fwrite(line, 1, pos, fp);\r\n    pos = 0;\r\n  }\r\n  void write(const char val) {\r\n    if (pos == SIZE) flush();\r\n    line[pos++] = val;\r\n  }\r\n  template <class T, enable_if_t<is_integral<T>::value, int> = 0>\r\n  void write(T val) {\r\n    if (pos > (1 << 15) - 50) flush();\r\n    if (val == 0) {\r\n      write('0');\r\n      return;\r\n    }\r\n    if (val < 0) {\r\n      write('-');\r\n      val = -val; // todo min\r\n    }\r\n    size_t len = 0;\r\n    while (val) {\r\n      small[len++] = char(0x30 | (val % 10));\r\n      val /= 10;\r\n    }\r\n    for (size_t i = 0; i < len; i++) { line[pos + i] = small[len - 1 - i]; }\r\n    pos += len;\r\n  }\r\n  void write(const string s) {\r\n    for (char c: s) write(c);\r\n  }\r\n  void write(const char *s) {\r\n    size_t len = strlen(s);\r\n    for (size_t i = 0; i < len; i++) write(s[i]);\r\n  }\r\n  void write(const double x) {\r\n    ostringstream oss;\r\n    oss << fixed << setprecision(15) << x;\r\n    string s = oss.str();\r\n    write(s);\r\n  }\r\n  void write(const long double x) {\r\n    ostringstream oss;\r\n    oss << fixed << setprecision(15) << x;\r\n    string s = oss.str();\r\n    write(s);\r\n  }\r\n  template <typename T,\r\n            typename enable_if<has_write<T>::value>::type * = nullptr>\r\n  inline void write(T x) {\r\n    x.write();\r\n  }\r\n  template <class T>\r\n  void write(const vector<T> val) {\r\n    auto n = val.size();\r\n    for (size_t i = 0; i < n; i++) {\r\n      if (i) write(' ');\r\n      write(val[i]);\r\n    }\r\n  }\r\n  template <class T, class U>\r\n  void write(const pair<T, U> val) {\r\n    write(val.first);\r\n    write(' ');\r\n    write(val.second);\r\n  }\r\n  template <size_t N = 0, typename T>\r\n  void write_tuple(const T t) {\r\n    if constexpr (N < std::tuple_size<T>::value) {\r\n      if constexpr (N > 0) { write(' '); }\r\n      const auto x = std::get<N>(t);\r\n      write(x);\r\n      write_tuple<N + 1>(t);\r\n    }\r\n  }\r\n  template <class... T>\r\n  bool write(tuple<T...> tpl) {\r\n    write_tuple(tpl);\r\n    return true;\r\n  }\r\n  template <class T, size_t S>\r\n  void write(const array<T, S> val) {\r\n    auto n = val.size();\r\n    for (size_t i = 0; i < n; i++) {\r\n      if (i) write(' ');\r\n      write(val[i]);\r\n    }\r\n  }\r\n  void write(i128 val) {\r\n    string s;\r\n    bool negative = 0;\r\n    if (val < 0) {\r\n      negative = 1;\r\n      val = -val;\r\n    }\r\n    while (val) {\r\n      s += '0' + int(val % 10);\r\n      val /= 10;\r\n    }\r\n    if (negative) s += \"-\";\r\n    reverse(all(s));\r\n    if (len(s) == 0) s = \"0\";\r\n    write(s);\r\n  }\r\n};\r\nScanner scanner = Scanner(stdin);\r\nPrinter printer = Printer(stdout);\r\nvoid flush() { printer.flush(); }\r\nvoid print() { printer.write('\\n'); }\r\ntemplate <class Head, class... Tail>\r\nvoid print(Head &&head, Tail &&... tail) {\r\n  printer.write(head);\r\n  if (sizeof...(Tail)) printer.write(' ');\r\n  print(forward<Tail>(tail)...);\r\n}\r\n\r\nvoid read() {}\r\ntemplate <class Head, class... Tail>\r\nvoid read(Head &head, Tail &... tail) {\r\n  scanner.read(head);\r\n  read(tail...);\r\n}\r\n} // namespace fastio\r\nusing fastio::print;\r\nusing fastio::flush;\r\nusing fastio::read;\r\n\r\n#define INT(...)   \\\r\n  int __VA_ARGS__; \\\r\n  read(__VA_ARGS__)\r\n#define LL(...)   \\\r\n  ll __VA_ARGS__; \\\r\n  read(__VA_ARGS__)\r\n#define STR(...)      \\\r\n  string __VA_ARGS__; \\\r\n  read(__VA_ARGS__)\r\n#define CHAR(...)   \\\r\n  char __VA_ARGS__; \\\r\n  read(__VA_ARGS__)\r\n#define DBL(...)      \\\r\n  double __VA_ARGS__; \\\r\n  read(__VA_ARGS__)\r\n\r\n#define VEC(type, name, size) \\\r\n  vector<type> name(size);    \\\r\n  read(name)\r\n#define VV(type, name, h, w)                     \\\r\n  vector<vector<type>> name(h, vector<type>(w)); \\\r\n  read(name)\r\n\r\nvoid YES(bool t = 1) { print(t ? \"YES\" : \"NO\"); }\r\nvoid NO(bool t = 1) { YES(!t); }\r\nvoid Yes(bool t = 1) { print(t ? \"Yes\" : \"No\"); }\r\nvoid No(bool t = 1) { Yes(!t); }\r\nvoid yes(bool t = 1) { print(t ? \"yes\" : \"no\"); }\r\nvoid no(bool t = 1) { yes(!t); }\r\n#line 3 \"main.cpp\"\r\n\r\n#line 2 \"/home/maspy/compro/library/mod/modint_common.hpp\"\r\n\r\nstruct has_mod_impl {\r\n  template <class T>\r\n  static auto check(T &&x) -> decltype(x.get_mod(), std::true_type{});\r\n  template <class T>\r\n  static auto check(...) -> std::false_type;\r\n};\r\n\r\ntemplate <class T>\r\nclass has_mod : public decltype(has_mod_impl::check<T>(std::declval<T>())) {};\r\n\r\ntemplate <typename mint>\r\nmint inv(int n) {\r\n  static const int mod = mint::get_mod();\r\n  static vector<mint> dat = {0, 1};\r\n  assert(0 <= n);\r\n  if (n >= mod) n %= mod;\r\n  while (len(dat) <= n) {\r\n    int k = len(dat);\r\n    int q = (mod + k - 1) / k;\r\n    dat.eb(dat[k * q - mod] * mint(q));\r\n  }\r\n  return dat[n];\r\n}\r\n\r\ntemplate <typename mint>\r\nmint fact(int n) {\r\n  static const int mod = mint::get_mod();\r\n  assert(0 <= n);\r\n  if (n >= mod) return 0;\r\n  static vector<mint> dat = {1, 1};\r\n  while (len(dat) <= n) dat.eb(dat[len(dat) - 1] * mint(len(dat)));\r\n  return dat[n];\r\n}\r\n\r\ntemplate <typename mint>\r\nmint fact_inv(int n) {\r\n  static vector<mint> dat = {1, 1};\r\n  if (n < 0) return mint(0);\r\n  while (len(dat) <= n) dat.eb(dat[len(dat) - 1] * inv<mint>(len(dat)));\r\n  return dat[n];\r\n}\r\n\r\ntemplate <class mint, class... Ts>\r\nmint fact_invs(Ts... xs) {\r\n  return (mint(1) * ... * fact_inv<mint>(xs));\r\n}\r\n\r\ntemplate <typename mint, class Head, class... Tail>\r\nmint multinomial(Head &&head, Tail &&... tail) {\r\n  return fact<mint>(head) * fact_invs<mint>(std::forward<Tail>(tail)...);\r\n}\r\n\r\ntemplate <typename mint>\r\nmint C_dense(int n, int k) {\r\n  static vvc<mint> C;\r\n  static int H = 0, W = 0;\r\n  auto calc = [&](int i, int j) -> mint {\r\n    if (i == 0) return (j == 0 ? mint(1) : mint(0));\r\n    return C[i - 1][j] + (j ? C[i - 1][j - 1] : 0);\r\n  };\r\n  if (W <= k) {\r\n    FOR(i, H) {\r\n      C[i].resize(k + 1);\r\n      FOR(j, W, k + 1) { C[i][j] = calc(i, j); }\r\n    }\r\n    W = k + 1;\r\n  }\r\n  if (H <= n) {\r\n    C.resize(n + 1);\r\n    FOR(i, H, n + 1) {\r\n      C[i].resize(W);\r\n      FOR(j, W) { C[i][j] = calc(i, j); }\r\n    }\r\n    H = n + 1;\r\n  }\r\n  return C[n][k];\r\n}\r\n\r\ntemplate <typename mint, bool large = false, bool dense = false>\r\nmint C(ll n, ll k) {\r\n  assert(n >= 0);\r\n  if (k < 0 || n < k) return 0;\r\n  if (dense) return C_dense<mint>(n, k);\r\n  if (!large) return multinomial<mint>(n, k, n - k);\r\n  k = min(k, n - k);\r\n  mint x(1);\r\n  FOR(i, k) x *= mint(n - i);\r\n  return x * fact_inv<mint>(k);\r\n}\r\n\r\ntemplate <typename mint, bool large = false>\r\nmint C_inv(ll n, ll k) {\r\n  assert(n >= 0);\r\n  assert(0 <= k && k <= n);\r\n  if (!large) return fact_inv<mint>(n) * fact<mint>(k) * fact<mint>(n - k);\r\n  return mint(1) / C<mint, 1>(n, k);\r\n}\r\n\r\n// [x^d] (1-x) ^ {-n} \u306e\u8a08\u7b97\r\ntemplate <typename mint, bool large = false, bool dense = false>\r\nmint C_negative(ll n, ll d) {\r\n  assert(n >= 0);\r\n  if (d < 0) return mint(0);\r\n  if (n == 0) { return (d == 0 ? mint(1) : mint(0)); }\r\n  return C<mint, large, dense>(n + d - 1, d);\r\n}\r\n#line 3 \"/home/maspy/compro/library/mod/modint.hpp\"\r\n\r\ntemplate <int mod>\r\nstruct modint {\r\n  static_assert(mod < (1 << 30));\r\n  int val;\r\n  constexpr modint(const ll val = 0) noexcept\r\n      : val(val >= 0 ? val % mod : (mod - (-val) % mod) % mod) {}\r\n  bool operator<(const modint &other) const {\r\n    return val < other.val;\r\n  } // To use std::map\r\n  modint &operator+=(const modint &p) {\r\n    if ((val += p.val) >= mod) val -= mod;\r\n    return *this;\r\n  }\r\n  modint &operator-=(const modint &p) {\r\n    if ((val += mod - p.val) >= mod) val -= mod;\r\n    return *this;\r\n  }\r\n  modint &operator*=(const modint &p) {\r\n    val = (int)(1LL * val * p.val % mod);\r\n    return *this;\r\n  }\r\n  modint &operator/=(const modint &p) {\r\n    *this *= p.inverse();\r\n    return *this;\r\n  }\r\n  modint operator-() const { return modint(-val); }\r\n  modint operator+(const modint &p) const { return modint(*this) += p; }\r\n  modint operator-(const modint &p) const { return modint(*this) -= p; }\r\n  modint operator*(const modint &p) const { return modint(*this) *= p; }\r\n  modint operator/(const modint &p) const { return modint(*this) /= p; }\r\n  bool operator==(const modint &p) const { return val == p.val; }\r\n  bool operator!=(const modint &p) const { return val != p.val; }\r\n  modint inverse() const {\r\n    int a = val, b = mod, u = 1, v = 0, t;\r\n    while (b > 0) {\r\n      t = a / b;\r\n      swap(a -= t * b, b), swap(u -= t * v, v);\r\n    }\r\n    return modint(u);\r\n  }\r\n  modint pow(ll n) const {\r\n    assert(n >= 0);\r\n    modint ret(1), mul(val);\r\n    while (n > 0) {\r\n      if (n & 1) ret *= mul;\r\n      mul *= mul;\r\n      n >>= 1;\r\n    }\r\n    return ret;\r\n  }\r\n#ifdef FASTIO\r\n  void write() { fastio::printer.write(val); }\r\n  void read() { fastio::scanner.read(val); }\r\n#endif\r\n  static constexpr int get_mod() { return mod; }\r\n  // (n, r), r \u306f 1 \u306e 2^n \u4e57\u6839\r\n  static constexpr pair<int, int> ntt_info() {\r\n    if (mod == 167772161) return {25, 17};\r\n    if (mod == 469762049) return {26, 30};\r\n    if (mod == 754974721) return {24, 362};\r\n    if (mod == 880803841) return {23, 211};\r\n    if (mod == 998244353) return {23, 31};\r\n    if (mod == 1045430273) return {20, 363};\r\n    if (mod == 1051721729) return {20, 330};\r\n    if (mod == 1053818881) return {20, 2789};\r\n    return {-1, -1};\r\n  }\r\n  static constexpr bool can_ntt() { return ntt_info().fi != -1; }\r\n};\r\n\r\nusing modint107 = modint<1000000007>;\r\nusing modint998 = modint<998244353>;\r\n#line 5 \"main.cpp\"\r\n\r\nusing mint = i128;\r\n\r\nvoid solve() {\r\n  LL(H, W);\r\n  ++H, ++W;\r\n\r\n  vv(mint, CNT, 2, 2);\r\n  FOR(x, H) FOR(y, W) CNT[x % 2][y % 2] += mint(1);\r\n\r\n  mint ANS = 0;\r\n  FOR(a, 2) FOR(b, 2) {\r\n    FOR(c, 2) FOR(d, 2) {\r\n      FOR(e, 2) FOR(f, 2) {\r\n        ll det = (c - a) * (f - b) + (d - b) * (e - a);\r\n        if (det % 2 == 0) ANS += CNT[a][b] * CNT[c][d] * CNT[e][f];\r\n      }\r\n    }\r\n  }\r\n  ll N = H * W;\r\n  // x,x,x\r\n  ANS -= mint(N);\r\n  // x,x,y\r\n  ANS -= mint(3) * mint(N) * mint(N - 1);\r\n\r\n  // \u305f\u3066\u3088\u3053\r\n  ANS -= mint(H) * mint(W) * mint(W - 1) * mint(W - 2);\r\n  ANS -= mint(W) * mint(H) * mint(H - 1) * mint(H - 2);\r\n\r\n  FOR(a, 1, H) FOR(b, 1, W) {\r\n    if (gcd(a, b) != 1) continue;\r\n\r\n    FOR(s, 2, (H - 1) / a + 1) FOR(t, 2, (W - 1) / b + 1) {\r\n      mint x = 6;\r\n      x *= (s - 1) * (t - 1);\r\n      x *= (H - s * a) * (W - t * b);\r\n      ANS -= x + x;\r\n    }\r\n  }\r\n  print(ANS % 1000000007);\r\n}\r\n\r\nsigned main() {\r\n  int T = 1;\r\n  // INT(T);\r\n  FOR(T) solve();\r\n  return 0;\r\n}\r\n"
}