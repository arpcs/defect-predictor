{
    "id": 206998469,
    "contestId": 220,
    "creationTimeSeconds": 1684894827,
    "relativeTimeSeconds": 6627,
    "problem": {
        "contestId": 220,
        "index": "D",
        "name": "Little Elephant and Triangle",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "geometry",
            "math"
        ]
    },
    "author": {
        "contestId": 220,
        "members": [
            {
                "handle": "physics0523"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1684888200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 61,
    "timeConsumedMillis": 1154,
    "memoryConsumedBytes": 16793600,
    "source": "// Counting Template\r\n#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define mod 1000000007\r\n#define FACSIZE 1048576\r\n\r\nlong long power(long long a,long long b){\r\n  long long x=1,y=a;\r\n  while(b>0){\r\n    if(b&1ll){\r\n      x=(x*y)%mod;\r\n    }\r\n    y=(y*y)%mod;\r\n    b>>=1;\r\n  }\r\n  return x%mod;\r\n}\r\n\r\nlong long modular_inverse(long long n){\r\n  return power(n,mod-2);\r\n}\r\n\r\nlong long factorial[FACSIZE];\r\nlong long invfact[FACSIZE];\r\n\r\nvoid cfact(){\r\n  long long i;\r\n  factorial[0]=1;\r\n  factorial[1]=1;\r\n  for(i=2;i<FACSIZE;i++){\r\n    factorial[i]=factorial[i-1]*i;\r\n    factorial[i]%=mod;\r\n  }\r\n  invfact[FACSIZE-1]=modular_inverse(factorial[FACSIZE-1]);\r\n  for(i=FACSIZE-2;i>=0;i--){\r\n    invfact[i]=invfact[i+1]*(i+1);\r\n    invfact[i]%=mod;\r\n  }\r\n}\r\n\r\nlong long calcnCr(long long n,long long k){\r\n  if(k<0 || n<k){return 0;}\r\n  return (factorial[n]*((invfact[k]*invfact[n-k])%mod))%mod;\r\n}\r\n\r\nlong long calcnPr_large(long long n,long long k){\r\n  if(k<0 || n<k){return 0;}\r\n  long long res=1;\r\n  for(long long i=n;i>n-k;i--){res*=i;res%=mod;}\r\n  return res;\r\n}\r\n\r\nlong long solve(){\r\n  // write your code here, and return the answer\r\n  long long n,m;\r\n  cin >> n >> m;\r\n  long long res=0;\r\n  vector<long long> cnt(4,0);\r\n  cnt[0]=((n+2)/2)*((m+2)/2);\r\n  cnt[1]=((n+2)/2)*((m+1)/2);\r\n  cnt[2]=((n+1)/2)*((m+2)/2);\r\n  cnt[3]=((n+1)/2)*((m+1)/2);\r\n\r\n  for(int i=0;i<4;i++){\r\n    for(int j=0;j<4;j++){\r\n      for(int k=0;k<4;k++){\r\n        int xj=(i^j);\r\n        int xk=(i^k);\r\n        int p=((xj>>1)&1);\r\n        int q=((xj)&1);\r\n        int r=((xk>>1)&1);\r\n        int s=((xk)&1);\r\n        if(((p*s-q*r)%2)==0){\r\n          map<int,int> mp;\r\n          mp[i]++;\r\n          mp[j]++;\r\n          mp[k]++;\r\n          long long del=1;\r\n          for(auto &nx : mp){\r\n            del*=calcnPr_large(cnt[nx.first],nx.second);\r\n            del%=mod;\r\n          }\r\n          res+=del;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  long long del;\r\n  del=(calcnPr_large(n+1,3)*(m+1))%mod;\r\n  res+=(mod-del);res%=mod;\r\n  del=(calcnPr_large(m+1,3)*(n+1))%mod;\r\n  res+=(mod-del);res%=mod;\r\n\r\n  for(int dx=1;dx<=n;dx++){\r\n    for(int dy=1;dy<=m;dy++){\r\n      if(gcd(dx,dy)>1){continue;}\r\n      long long pc=0;\r\n      long long cx=0,cy=0;\r\n      while(cx<=n && cy<=m){\r\n        pc++;\r\n        if(pc>=3){\r\n          del=(pc-2)*12ll;\r\n          del*=(n+1-cx);del%=mod;\r\n          del*=(m+1-cy);del%=mod;\r\n          res+=(mod-del);res%=mod;\r\n        }\r\n        cx+=dx;\r\n        cy+=dy;\r\n      }\r\n    }\r\n  }\r\n  return res%mod;\r\n}\r\n\r\nint main(){\r\n  cfact();\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n  int t=1;\r\n  // cin >> t;\r\n  while(t>0){\r\n    t--;\r\n    cout << solve()%mod << \"\\n\";\r\n  }\r\n  return 0;\r\n}\r\n"
}