{
    "id": 214431409,
    "contestId": 220,
    "creationTimeSeconds": 1689739961,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 220,
        "index": "D",
        "name": "Little Elephant and Triangle",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "geometry",
            "math"
        ]
    },
    "author": {
        "contestId": 220,
        "members": [
            {
                "handle": "Juswanth_T"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1346427000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// Juswanth T\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#pragma GCC optimize(\"O2\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#define int long long int\r\n#define fast ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n \r\nvector<pair<map<int,int>,int>> seg(1000);\r\n\r\nvoid build (int i,vector<int> &inp, int low,int high){\r\n\r\n    if(high == low){\r\n        seg[i].first[inp[low]]++;\r\n        if(inp[low] == 1) seg[i].second =1;\r\n        else seg[i].second =0;\r\n        return;\r\n    }\r\n\r\n    int mid = low + (high-low)/2;\r\n    build(2*i +1,inp,low,mid);\r\n    build(2*i +2,inp,mid+1,high);\r\n    seg[i].second = 0;\r\n\r\n    for (auto e: seg[2*i+1].first){\r\n            seg[i].first[e.first] += e.second;\r\n            if(e.first ==  seg[i].first[e.first]) seg[i].second++;\r\n    }\r\n    for (auto e: seg[2*i+2].first){\r\n            seg[i].first[e.first] += e.second;\r\n            if(e.first ==  seg[i].first[e.first]) seg[i].second++;\r\n\r\n    }\r\n    return;\r\n\r\n}\r\n\r\npair <map<int,int>,int> query(int i,int low,int high,int l,int r){\r\n\r\n    map <int,int> map1,map2,map3;\r\n    int count =0;\r\n\r\n    if(r < low || l> high) return {map1,0};\r\n    else if(l<=low && r<=high) return seg[i];\r\n    int mid = low + (high-low)/2;\r\n    map1 = query(2*i + 1,low,mid,l,r).first;\r\n    map2 = query(2*i + 2,mid+1,high,l,r).first;\r\n\r\n    for (auto e: map1){\r\n            map3[e.first] += e.second;\r\n            if(e.first == map3[e.first]) count++;\r\n    }\r\n    for (auto e: map2){\r\n            map3[e.first] += e.second;\r\n            if(e.first == map3[e.first]) count++;\r\n    }\r\n    return {map3,count};\r\n\r\n\r\n}\r\nvoid solve(){\r\n   int n,q,r,l;\r\n   cin>>n>>q;\r\n   vector<int> inp(n);\r\n   for(int i =0;i<n;i++) cin>>inp[i];\r\n   build(0,inp,0,n-1);\r\n//    for (auto i: seg[0].first){\r\n//          cout<<i.first<<\" \"<<i.second<<endl;\r\n//    }\r\n//    cout<<seg[0].second<<endl;\r\n   while(q--){\r\n       cin>>l>>r;\r\n       r--;l--;\r\n       cout<<query(0,0,n-1,l,r).second<<endl;\r\n   }\r\n\r\n    \r\n}\r\n\r\n\r\n int32_t main(){\r\n  fast;\r\n  int t;\r\n  t =1;\r\n  while(t--){\r\n    solve();\r\n   }\r\n   \r\n}\r\n "
}