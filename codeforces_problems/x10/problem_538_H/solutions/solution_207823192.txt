{
    "id": 207823192,
    "contestId": 538,
    "creationTimeSeconds": 1685429277,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 538,
        "index": "H",
        "name": "Summer Dichotomy",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3200,
        "tags": [
            "2-sat",
            "data structures",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 538,
        "members": [
            {
                "handle": "Alpha_shr_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430064000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 5632000,
    "source": "# include <bits/stdc++.h>\r\nusing namespace std;\r\nint t,T,n,m,kl[200010];\r\npair<int,int> f[100010],ed[100010],op[200010];\r\nstruct DisjointSetUnion {\r\n    struct node { int fa,sz;} f[200010];\r\n    void init_(int n) { for (int i=1;i<=n;i++) f[i].fa=0, f[i].sz=1;}\r\n    int find_(int x) { return f[x].fa ? f[x].fa=find_(f[x].fa) : x;}\r\n    void merge_(int x,int y) {\r\n        int l=find_(x),r=find_(y);\r\n        if (l==r) return;\r\n        if (f[l].sz<f[r].sz) swap(l,r);\r\n        f[l].sz+=f[r].sz, f[r].fa=l;\r\n    }\r\n} dsu;\r\npair<int,int> merge_(pair<int,int> x,pair<int,int> y) { return pair<int,int> (max(x.first,y.first),min(x.second,y.second));}\r\nbool check_in_(int x,pair<int,int> y) { return y.first<=x&&x<=y.second;}\r\nint main() {\r\n    // freopen(\"in.in\",\"r\",stdin);\r\n    // freopen(\"out.out\",\"w\",stdout);\r\n\r\n    scanf(\"%d%d%d%d\",&t,&T,&n,&m);\r\n    for (int i=1;i<=n;i++) scanf(\"%d%d\",&f[i].first,&f[i].second);\r\n    for (int i=1;i<=m;i++) scanf(\"%d%d\",&ed[i].first,&ed[i].second);\r\n\r\n    int nf=f[1].first,ns=f[1].second;\r\n    for (int i=2;i<=n;i++) nf=max(nf,f[i].first), ns=min(ns,f[i].second);\r\n\r\n    if (nf+ns<t) nf=t-ns;\r\n    else if (nf+ns>T) ns=T-nf;\r\n\r\n    dsu.init_(2*n);\r\n    for (int i=1;i<=m;i++) dsu.merge_(ed[i].first,ed[i].second+n), dsu.merge_(ed[i].first+n,ed[i].second);\r\n    for (int i=1;i<=n;i++) if (dsu.find_(i)==dsu.find_(i+n)) { printf(\"IMPOSSIBLE\\n\"); return 0;}\r\n\r\n    for (int i=1;i<=2*n;i++) op[i]=pair<int,int> (0,1e9);\r\n    for (int i=1;i<=n;i++) op[dsu.find_(i)]=merge_(op[dsu.find_(i)],f[i]);\r\n    for (int i=1;i<=n;i++) {\r\n        int x=dsu.find_(i),y=dsu.find_(i+n);\r\n        if (kl[x]) continue;\r\n        if (check_in_(nf,op[x])&&check_in_(ns,op[y])) kl[x]=1, kl[y]=2;\r\n        else if (check_in_(ns,op[x])&&check_in_(nf,op[y])) kl[x]=2, kl[y]=1;\r\n        else { printf(\"IMPOSSIBLE\\n\"); return 0;}\r\n    }\r\n    \r\n    printf(\"POSSIBLE\\n%d %d\\n\",nf,ns);\r\n    for (int i=1;i<=n;i++) printf(\"%d\",kl[dsu.find_(i)]);\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}"
}