{
    "id": 211948852,
    "contestId": 538,
    "creationTimeSeconds": 1688388233,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 538,
        "index": "H",
        "name": "Summer Dichotomy",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3200,
        "tags": [
            "2-sat",
            "data structures",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 538,
        "members": [
            {
                "handle": "nixnehc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430064000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 8192000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nconst int N=1e5+10;\r\nint t,T,n,m,l[N],r[N];\r\nstruct node\r\n{\r\n    int to,ne;\r\n}way[2*N];\r\nint head[N],idx,vis[N];\r\nbool is[N];\r\n\r\nvoid add(int from,int to)\r\n{\r\n    idx++;\r\n    way[idx].to=to;way[idx].ne=head[from];head[from]=idx;\r\n}\r\n\r\nvoid dfs(int p,int t)\r\n{\r\n    if(vis[p]!=-1 && vis[p]!=t) {puts(\"IMPOSSIBLE\");exit(0);}\r\n    if(is[p]) return;\r\n    is[p]=1;vis[p]=t;\r\n    for(int i=head[p];i!=0;i=way[i].ne)\r\n    {\r\n        int v=way[i].to;\r\n        dfs(v,t^1);\r\n    }\r\n}\r\n\r\nsigned main(void)\r\n{\r\n    scanf(\"%lld%lld\",&t,&T);\r\n    scanf(\"%lld%lld\",&n,&m);\r\n    int L=0,R=1e9;\r\n    for(int i=1;i<=n;i++) scanf(\"%lld%lld\",&l[i],&r[i]),L=max(L,l[i]),R=min(R,r[i]);\r\n    for(int i=1,u,v;i<=m;i++) scanf(\"%d%d\",&u,&v),add(u,v),add(v,u);\r\n    if(L+R<t) L=t-R;\r\n    if(L+R>T) R=T-L;\r\n    if(L<0 || R<0) {puts(\"IMPOSSIBLE\");exit(0);}\r\n    memset(vis,-1,sizeof(vis));\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        if(l[i]<=L && r[i]>=L && l[i]<=R && r[i]>=R) continue;\r\n        else if(l[i]<=L && r[i]>=L) vis[i]=0;\r\n        else if(l[i]<=R && r[i]>=R) vis[i]=1;\r\n        else {puts(\"IMPOSSIBLE\");exit(0);}\r\n    }\r\n    for(int i=1;i<=n;i++)\r\n        if(!is[i] && vis[i]!=-1) \r\n        {\r\n            dfs(i,vis[i]);\r\n        }\r\n    for(int i=1;i<=n;i++)\r\n        if(!is[i]) dfs(i,0);\r\n    puts(\"POSSIBLE\");\r\n    printf(\"%d %d\\n\",L,R);\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        if(vis[i]) printf(\"2\");\r\n        else printf(\"1\");\r\n    }\r\n    printf(\"\\n\");\r\n    \r\n    return 0;\r\n}"
}