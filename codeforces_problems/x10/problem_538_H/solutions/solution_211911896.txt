{
    "id": 211911896,
    "contestId": 538,
    "creationTimeSeconds": 1688369646,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 538,
        "index": "H",
        "name": "Summer Dichotomy",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3200,
        "tags": [
            "2-sat",
            "data structures",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 538,
        "members": [
            {
                "handle": "earthworm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430064000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 7884800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define debug(fmt, ...) \\\r\n  fprintf(stderr, \"[%d] : \" fmt \"\\n\", __LINE__, ##__VA_ARGS__)\r\nbool Mbe;\r\nusing ll = long long;\r\nconstexpr int N = 1e5 + 10;\r\nint n, m, L, R, l[N], r[N], col[N];\r\nvector<int> g[N];\r\nvoid dfs(int u) {\r\n  for (auto v : g[u]) {\r\n    if (col[v] == -1) {\r\n      col[v] = col[u] ^ 1, dfs(v);\r\n    } else if (col[u] == col[v]) {\r\n      cout << \"IMPOSSIBLE\\n\", exit(0);\r\n    }\r\n  }\r\n}\r\nbool Med;\r\nint main() {\r\n  debug(\"Mem: %.4lfMB.\", fabs(&Med - &Mbe) / 1048576);\r\n  cin.tie(0)->sync_with_stdio(0);\r\n  cin >> L >> R >> n >> m;\r\n  int mn = 1e9, mx = 0;\r\n  for (int i = 1; i <= n; ++i)\r\n    cin >> l[i] >> r[i], mn = min(mn, r[i]), mx = max(mx, l[i]);\r\n  while (m--) {\r\n    int u, v;\r\n    cin >> u >> v;\r\n    g[u].push_back(v), g[v].push_back(u);\r\n  }\r\n  if (mn + mx < L) {\r\n    mx += L - mn - mx;\r\n  } else if (mn + mx > R) {\r\n    mn -= mn + mx - R;\r\n  }\r\n  if (mn < 0 || mx < 0 || mn > R || mx > R)\r\n    return cout << \"IMPOSSIBLE\\n\", 0;\r\n  fill(col + 1, col + n + 1, -1);\r\n  for (int i = 1; i <= n; ++i) {\r\n    bool p0 = (l[i] <= mn && mn <= r[i]);\r\n    bool p1 = (l[i] <= mx && mx <= r[i]);\r\n    if (!p0 && !p1) return cout << \"IMPOSSIBLE\\n\", 0;\r\n    if (!p1) {\r\n      if (col[i] == 1) return cout << \"IMPOSSIBLE\\n\", 0;\r\n      if (col[i] == -1) col[i] = 0, dfs(i);\r\n    } else if (!p0) {\r\n      if (col[i] == 0) return cout << \"IMPOSSIBLE\\n\", 0;\r\n      if (col[i] == -1) col[i] = 1, dfs(i);\r\n    }\r\n  }\r\n  for (int i = 1; i <= n; ++i)\r\n    if (col[i] == -1) col[i] = 0, dfs(i);\r\n  cout << \"POSSIBLE\\n\";\r\n  cout << mn << ' ' << mx << '\\n';\r\n  for (int i = 1; i <= n; ++i) cout << col[i] + 1;\r\n  cout << '\\n';\r\n  return 0;\r\n}//17165745189228470366"
}