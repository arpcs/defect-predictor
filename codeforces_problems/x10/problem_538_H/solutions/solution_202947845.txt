{
    "id": 202947845,
    "contestId": 538,
    "creationTimeSeconds": 1682076564,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 538,
        "index": "H",
        "name": "Summer Dichotomy",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3200,
        "tags": [
            "2-sat",
            "data structures",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 538,
        "members": [
            {
                "handle": "Yihlaushih"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430064000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 147046400,
    "source": "#include<bits/stdc++.h>\r\n#define rep(i,x,y) for(int i=x;i<=y;++i)\r\n#define per(i,x,y) for(int i=x;i>=y;--i)\r\n#define lon long long\r\n#define mar(o) for(int E=fst[o],v=e[E].to;E;E=e[E].nxt,v=e[E].to)\r\n#define root(x) rot[x],1,inf\r\n#define lson tre[o].lv,l,mid\r\n#define rson tre[o].rv,mid+1,r\r\nusing namespace std;\r\nmt19937 rng( time(0) );\r\nconst int n7=2012345,z7=401234,m7=n7*2;\r\nstruct dino {\r\n\tint to,nxt;\r\n} e[m7];\r\nstruct golf {\r\n\tint id,l,r,L,R;\r\n} a[z7];\r\nstruct mist {\r\n\tint lv,rv;\r\n} tre[n7];\r\nint n,m,cnt,ecnt,fst[n7],t,dfn[n7],low[n7],ans[z7],lsh[n7];\r\nint top,sak[n7],in[n7],colc,col[n7],id[4][n7];\r\n\r\nint rd() {\r\n\tint shu=0;\r\n\tbool fu=0;\r\n\tchar ch=getchar();\r\n\twhile( !isdigit(ch) ) {\r\n\t\tif(ch=='-')fu=1;\r\n\t\tch=getchar();\r\n\t}\r\n\twhile( isdigit(ch) )shu=(shu<<1)+(shu<<3)+ch-'0',ch=getchar();\r\n\treturn fu?-shu:shu;\r\n}\r\n\r\nvoid edge(int p,int q) {\r\n\tecnt++;\r\n\te[ecnt]=(dino) {\r\n\t\tq,fst[p]\r\n\t};\r\n\tfst[p]=ecnt;\r\n}\r\n\r\nvoid tar(int o) {\r\n\tt++,dfn[o]=low[o]=t;\r\n\ttop++,sak[top]=o,in[o]=1;\r\n\tmar(o) {\r\n\t\tif(!dfn[v])tar(v),low[o]=min(low[o],low[v]);\r\n\t\telse if(in[v]==1)low[o]=min(low[o],dfn[v]);\r\n\t}\r\n\tif(low[o]^dfn[o])return;\r\n\tcolc++;\r\n\twhile(sak[top+1]^o) {\r\n\t\tcol[ sak[top] ]=colc;\r\n\t\tin[ sak[top] ]=0;\r\n\t\ttop--;\r\n\t}\r\n}\r\n\r\nvoid Dlsh() {\r\n\tint sz=0;\r\n\trep(i,1,n)sz++,lsh[sz]=a[i].l,sz++,lsh[sz]=a[i].r;\r\n\tsort(lsh+1,lsh+sz+1);\r\n\tsz=unique(lsh+1,lsh+sz+1)-lsh-1;\r\n\trep(i,1,n) {\r\n\t\ta[i].L=lower_bound(lsh+1,lsh+sz+1,a[i].l)-lsh;\r\n\t\ta[i].R=lower_bound(lsh+1,lsh+sz+1,a[i].r)-lsh;\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tint l0=rd(),r0=rd();\r\n\tn=rd(),m=rd(),cnt=n+n;\r\n\trep(i,1,n)a[i]=(golf) {\r\n\t\ti,rd(),rd()\r\n\t};\r\n\tDlsh();\r\n\trep(i,0,3)rep(j,1,n*2)cnt++,id[i][j]=cnt;\r\n\trep(i,0,3) {\r\n\t\tif(i<2) {\r\n\t\t\tper(j,n*2-1,1)edge(id[i][j],id[i][j+1]);\r\n\t\t} else {\r\n\t\t\trep(j,2,n*2)edge(id[i][j],id[i][j-1]);\r\n\t\t}\r\n\t}\r\n\trep(i,1,n)edge(id[0][ a[i].L ],a[i].id+n);\r\n\trep(i,1,n)edge(id[1][ a[i].L ],a[i].id);\r\n\trep(i,1,n)edge(id[2][ a[i].R ],a[i].id+n);\r\n\trep(i,1,n)edge(id[3][ a[i].R ],a[i].id);\r\n\trep(i,1,n)edge(a[i].id,id[0][ a[i].R+1 ]);\r\n\trep(i,1,n)edge(a[i].id+n,id[1][ a[i].R+1 ]);\r\n\trep(i,1,n)edge(a[i].id,id[2][ a[i].L-1 ]);\r\n\trep(i,1,n)edge(a[i].id+n,id[3][ a[i].L-1 ]);\r\n\trep(i,1,m) {\r\n\t\tint p=rd(),q=rd();\r\n\t\tedge(p,q+n),edge(p+n,q);\r\n\t\tedge(q,p+n),edge(q+n,p);\r\n\t}\r\n\trep(i,1,cnt)if(!dfn[i])tar(i);\r\n\trep(i,1,n)if(col[i]==col[i+n]) {\r\n\t\tputs(\"IMPOSSIBLE\");\r\n\t\treturn 0;\r\n\t}\r\n\tint l1=0,r1=1e9,l2=0,r2=1e9;\r\n\trep(i,1,n) {\r\n\t\tif(col[i]>col[i+n]) {\r\n\t\t\tans[i]=1,l1=max(l1,a[i].l),r1=min(r1,a[i].r);\r\n\t\t} else {\r\n\t\t\tans[i]=2,l2=max(l2,a[i].l),r2=min(r2,a[i].r);\r\n\t\t}\r\n\t}\r\n\tif(l1>r1||l2>r2||l1+l2>r0||r1+r2<l0) {assert(0);\r\n\t\tputs(\"IMPOSSIBLE\");\r\n\t\treturn 0;\r\n\t}\r\n\tputs(\"POSSIBLE\");\r\n\tif(l1+l2<l0) {\r\n\t\tint tmp=l0-l1-l2;\r\n\t\tint cst1=std::min(r1-l1,tmp);\r\n\t\ttmp-=cst1,l1+=cst1;\r\n\t\tif(tmp)l2+=tmp;\r\n\t}\r\n\tprintf(\"%d %d\\n\",l1,l2);\r\n\trep(i,1,n)printf(\"%d\",ans[i]);\r\n\treturn 0;\r\n}"
}