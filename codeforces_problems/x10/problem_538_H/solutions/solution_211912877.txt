{
    "id": 211912877,
    "contestId": 538,
    "creationTimeSeconds": 1688370169,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 538,
        "index": "H",
        "name": "Summer Dichotomy",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3200,
        "tags": [
            "2-sat",
            "data structures",
            "dfs and similar",
            "greedy"
        ]
    },
    "author": {
        "contestId": 538,
        "members": [
            {
                "handle": "AsiaticToddaliaRoot"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1430064000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 53,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 4710400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nbool memBeg;\r\nconst int maxn=1e5+5;\r\nconst int maxm=1e5+5;\r\nconst int inf=0x3f3f3f3f;\r\nint n,m,l[maxn],r[maxn];\r\nint head[maxn],to[maxm<<1],nxt[maxm<<1],tot;\r\nvoid add_edge(int u,int v) {\r\n    to[tot]=v; nxt[tot]=head[u]; head[u]=tot++;\r\n    to[tot]=u; nxt[tot]=head[v]; head[v]=tot++;\r\n}\r\nint col[maxn],stk[maxn],top,l0,r0,l1,r1;\r\nbool dfs(int root,int _col) {\r\n    col[root]=_col; stk[++top]=root;\r\n    if(_col==0) {\r\n        l0=max(l0,l[root]);\r\n        r0=min(r0,r[root]);\r\n    } else {\r\n        l1=max(l1,l[root]);\r\n        r1=min(r1,r[root]);\r\n    }\r\n    for(int i=head[root];~i;i=nxt[i]) {\r\n        if(col[to[i]]==-1) {\r\n            if(!dfs(to[i],_col^1))\r\n                return false;\r\n        } else if(col[to[i]]!=(_col^1)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nbool memEn;\r\nint main() {\r\n    fprintf(stderr,\"%.24lf\\n\",fabs(&memEn-&memBeg)/1024.0/1024.0);\r\n    int lo,hi; scanf(\"%d%d\",&lo,&hi);\r\n    scanf(\"%d%d\",&n,&m);\r\n    for(int i=1;i<=n;i++) {\r\n        scanf(\"%d%d\",&l[i],&r[i]);\r\n        head[i]=-1;\r\n    }\r\n    for(int i=1;i<=m;i++) {\r\n        int u,v; scanf(\"%d%d\",&u,&v);\r\n        add_edge(u,v);\r\n    }\r\n    int lhs=0,rhs=inf;\r\n    for(int i=1;i<=n;i++) {\r\n        lhs=max(lhs,l[i]);\r\n        rhs=min(rhs,r[i]);\r\n    }\r\n    if(lhs+rhs>hi) {\r\n        rhs-=(lhs+rhs-hi);\r\n    } else if(lhs+rhs<lo) {\r\n        lhs+=(lo-lhs-rhs);\r\n    }\r\n    for(int i=1;i<=n;i++) col[i]=-1;\r\n    for(int i=1;i<=n;i++) {\r\n        if(col[i]!=-1) continue;\r\n        l0=l1=0; r0=r1=inf; top=0;\r\n        if(!dfs(i,0)) {\r\n            puts(\"IMPOSSIBLE\"); return 0;\r\n        }\r\n        if(l0<=lhs&&lhs<=r0&&l1<=rhs&&rhs<=r1);\r\n        else if(l0<=rhs&&rhs<=r0&&l1<=lhs&&lhs<=r1) {\r\n            for(int j=1;j<=top;j++) assert(col[stk[j]]!=-1);\r\n            for(int j=1;j<=top;j++) col[stk[j]]^=1;\r\n        } else {puts(\"IMPOSSIBLE\"); return 0;}\r\n    }\r\n    puts(\"POSSIBLE\");\r\n    printf(\"%d %d\\n\",lhs,rhs);\r\n    for(int i=1;i<=n;i++)\r\n        putchar('1'+col[i]);\r\n    puts(\"\");\r\n    return 0;\r\n}\r\n//1650117692487308338"
}