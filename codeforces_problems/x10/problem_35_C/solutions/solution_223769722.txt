{
    "id": 223769722,
    "contestId": 35,
    "creationTimeSeconds": 1694979790,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 35,
        "index": "C",
        "name": "Fire Again",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "brute force",
            "dfs and similar",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 35,
        "members": [
            {
                "handle": "Youssefproof"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1287471600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 4300800,
    "source": "#include <bits/stdc++.h>\r\n#define IO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)\r\n#define ll long long\r\n#define tests int T;cin >> T;while(T--)\r\nusing namespace std;\r\nconst ll mod = 1e9 + 7;\r\nll minis = INT64_MAX;\r\nll maxis = 0;\r\nbool isFound = true;\r\n//bitset<500000001> prime;\r\n//void SieveOfEratosthenes(int n)\r\n//{\r\n//    for (int p = 2; p * p <= n; p++) {\r\n//        if (prime[p] == false) {\r\n//            for (int i = p * p; i <= n; i += p)\r\n//                prime[i] = true;\r\n//        }\r\n//    }\r\n//}\r\nll counter = 0;\r\nint dx[] = { 1,-1,0,0,-1,-1,1,1 };\r\nint dy[] = { 0,0,1,-1,-1,1,1,-1 };\r\nbool inborders(int i, int j,int rowsize,int colsize)\r\n{\r\n\treturn i >= 1 && i < rowsize && j >= 1 && j < colsize;\r\n}\r\npair<int, int>maxispair;\r\nbool isLast = false;\r\nbool vis[2005][2005] = {};\r\nvoid bfs(vector<vector<int>> &m7md, int x, int y)\r\n{\r\n\tqueue<pair<int , int>>bfss;\r\n\tbfss.push({ x,y });\r\n\tm7md[x][y] = 0;\r\n\tvis[x][y] = true;\t\t\t\t\r\n\tif (m7md[x][y] >= maxis && isLast)\r\n\t{\r\n\t\tmaxis = m7md[x][y];\r\n\t\tmaxispair = { x,y };\r\n\t}\r\n\twhile (bfss.size())\r\n\t{\r\n\t\tpair<int,int> node = bfss.front();\r\n\t\tbfss.pop();\r\n\t\tfor (int i = 0; i < 4; i++)\r\n\t\t{\r\n\t\t\tint newx = node.first + dx[i];\r\n\t\t\tint newy = node.second + dy[i];\r\n\t\t\tif (inborders(newx,newy,m7md.size(),m7md[1].size()) && !vis[newx][newy])\r\n\t\t\t{\r\n\t\t\t\tvis[newx][newy] = true;\r\n\t\t\t\tm7md[newx][newy] = min(m7md[newx][newy], (m7md[node.first][node.second] + 1));\t\t\t\r\n\t\t\t\tif (m7md[newx][newy] >= maxis && isLast)\r\n\t\t\t\t{\r\n\t\t\t\t\tmaxis = m7md[newx][newy];\r\n\t\t\t\t\tmaxispair = { newx,newy };\r\n\t\t\t\t}\r\n\t\t\t\tbfss.push({ newx,newy });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main()\r\n{\r\n\tifstream filein(\"input.txt\");\r\n\tofstream fileout(\"output.txt\");\r\n    IO;\r\n\tint n, m , k;\r\n\tfilein >> n >> m >> k;\r\n\tvector<vector<int>> trees(n+1,vector<int>(m+1,INT32_MAX));\r\n\twhile (k--)\r\n\t{\r\n\t\tint x, y;\r\n\t\tfilein >> x >> y;\r\n\t\tif (k==1)\r\n\t\t{\r\n\t\t\tisLast = true;\r\n\t\t}\r\n\t\tbfs(trees, x, y);\r\n\t\tmemset(vis, false, sizeof(vis));\r\n\t}\r\n\tfileout << maxispair.first << ' ' << maxispair.second << '\\n';\r\n}"
}