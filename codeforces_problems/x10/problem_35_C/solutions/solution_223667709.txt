{
    "id": 223667709,
    "contestId": 35,
    "creationTimeSeconds": 1694899295,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 35,
        "index": "C",
        "name": "Fire Again",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "brute force",
            "dfs and similar",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 35,
        "members": [
            {
                "handle": "Mostafa_Younis"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1287471600
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 498,
    "memoryConsumedBytes": 17203200,
    "source": "//--->#include<---------//\r\n#include <iostream>\r\n#include<bits/stdc++.h>\r\n#include<string>\r\n//--->#define<---------//\r\n# define el \"\\n\"\r\n#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define ld long double\r\n#define inf INT_MAX;\r\n#define dll double long long\r\n#define all(v)    ((v).begin()),((v).end())\r\n//#define memset(v , val)  memset(v,val ,sizeof v)\r\nusing namespace std ;\r\n//----->constntes<--------//\r\nconst int mod =1e9+7 ;\r\nconst int N =2e5;\r\n                                       //  // \" \u00d8\u00a8\u00d8\u00b3\u00d9\u0085  \u00d8\u00a7\u00d9\u0084\u00d9\u0084\u00d9\u0087  \u00d8\u00aa\u00d9\u0088\u00d9\u0083\u00d9\u0084\u00d9\u0086\u00d8\u00a7  \u00d8\u00b9\u00d9\u0084\u00d9\u008a  \u00d8\u00a7\u00d9\u0084\u00d9\u0084\u00d9\u0087 \"\r\n                                 // \"solve problem then write the code\"//\r\n\r\n\r\n//--------------------------------------------------> math and number theory <--------------------------------------------------//\r\n    // modular arthimateic\r\n    ll addMod(ll a, ll b, ll c) {\r\n        return ((a % c) + (b % c)) % c;\r\n    }\r\n\r\n    ll minusMod(ll a, ll b, ll c) {\r\n        return ((a % c) - (b % c) + c) % c;\r\n    }\r\n\r\n    ll multiMOd(ll a, ll b, ll c) {\r\n        return ((a % c) * (b % c)) % c;\r\n    }\r\n\r\n    // power\r\n    ll fastPowerIterative(ll x  ,ll n){ // x^n\r\n        ll result =1 ;\r\n        while(n>0){\r\n            if(n&1)\r\n                result*=x;\r\n            x*=x;\r\n            n/=2;\r\n        }\r\n        return result ;\r\n    }\r\n    ll fastPowerIterativeModularExponentiation(ll x ,ll n ,ll m ){\r\n        ll result =1;\r\n        while(n>0){\r\n            if(n&1)\r\n                result = multiMOd(result ,x ,m) ;// result = (result*x)%m\r\n            x = multiMOd(x,x ,m);    //(x*x)%m\r\n            n=n/2;\r\n        }\r\n        return result ;\r\n    }\r\n    //factorization\r\n    vector<ll> getNumberFactors(ll n)\r\n    {\r\n        vector<ll>factors;\r\n        for(ll i=1 ;i*i<=n ;i++)\r\n        {\r\n            if(n%i==0)\r\n            {\r\n                factors.push_back(i);\r\n                if(i*i!=n) // to avoid dublicate number like 6 if the num is 36\r\n                    factors.push_back(n/i);\r\n            }\r\n        }\r\n        return factors ;\r\n    }\r\n    vector<ll> getPrimeFactors(ll n)\r\n    {\r\n        vector<ll>primeFactors;\r\n        for(int i=2 ;i*i<=n ;i++)\r\n        {\r\n            while(n%i==0)\r\n            {\r\n                primeFactors.push_back(i);\r\n                n/=i;\r\n            }\r\n        }\r\n        if(n!=1)\r\n            primeFactors.push_back(n);\r\n        return  primeFactors;\r\n    }\r\n\r\n//------------------------------------------------------> end of math <---------------------------------------------------------//\r\n\r\n\r\n\r\n\r\n//------------------------------start---------------------------------------------//\r\nint dx[4]={0,0,-1,1};\r\nint dy[4]={-1,1,0,0};\r\nvector<vector<int>>grid;\r\nset<pair<int ,int>>visited;\r\nint n ,m ;\r\nint start;\r\nint ind =0 ;\r\nbool valid (int row , int col){\r\n    return !(row>=n || row<0 || col>=m || col<0) ;\r\n}\r\nint k=0 ,l=0 ;\r\nint val = -99;\r\nvoid bfs(int row ,int col ,int index ) {\r\n    queue<pair<int, pair<int, int>>> q;\r\n    visited.insert({row, col});\r\n    q.push({0, {row, col}});\r\n    grid[row][col] = 0;\r\n\r\n    while (!q.empty()) {\r\n        int i = q.front().first;\r\n        int r = q.front().second.first;\r\n        int c = q.front().second.second;\r\n        q.pop();\r\n\r\n        for (int j = 0; j < 4; j++) {\r\n            int x = r + dx[j];\r\n            int y = c + dy[j];\r\n\r\n            if (valid(x, y)) {\r\n                if (grid[x][y] > i + 1) {\r\n                    q.push({i + 1, {x, y}});\r\n                    grid[x][y] = min(grid[x][y], i + 1);\r\n\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n//-------------------------------end----------------------------------------------//\r\n\r\n\r\nint main() {\r\n    fast\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    cin>>n>>m;\r\n    grid.resize(n ,vector<int>(m));\r\n    for(int i=0 ;i<n ;i++){\r\n        for(int j=0 ;j<m ;j++)\r\n            grid[i][j]=100000;\r\n    }\r\n    int index=0 ;\r\n    cin>>start;\r\n    int r=0 ,c=0 ;\r\n    for(int i=0 ;i<start ;i++){\r\n        cin>>r>>c;\r\n        index++;\r\n        bfs(r-1,c-1 ,index);\r\n        visited.clear();\r\n    }\r\nll x =-1 ;\r\nll ro=0 ,co=0 ;\r\nfor(int i=0 ; i<n ;i++){\r\n    for(int j=0 ;j<m ;j++){\r\n        if(grid[i][j]>=x){\r\n            x=grid[i][j];\r\n            ro =i+1;\r\n            co=j+1;\r\n        }\r\n    }\r\n}\r\n/*for(int  i= 0 ;i<n ;i++)\r\n{\r\n    for(int j =0 ;j<m ;j++)\r\n        cout<<grid[i][j]<<\" \";\r\n    cout<<el;\r\n}*/\r\ncout<<ro<<\" \"<<co<<el;\r\n}\r\n\r\n"
}