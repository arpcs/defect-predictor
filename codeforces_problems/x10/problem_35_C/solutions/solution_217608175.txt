{
    "id": 217608175,
    "contestId": 35,
    "creationTimeSeconds": 1691415173,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 35,
        "index": "C",
        "name": "Fire Again",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1500,
        "tags": [
            "brute force",
            "dfs and similar",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 35,
        "members": [
            {
                "handle": "wildHippo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1287471600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 4198400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n//#define int long long\r\n\r\nint mdx[] = {0, 1, 0, -1};\r\nint mdy[] = {1, 0, -1, 0};\r\n\r\nconst int N = 2001, M = 2001;\r\nbool forest[N][M];\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\r\n#ifdef Clion\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"out.txt\", \"w\", stdout);\r\n#endif\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n    int n, m, k;\r\n    pair<int, int> lastBurnt;\r\n    cin >> n >> m >> k;\r\n    memset(forest, false, sizeof forest);\r\n    queue<pair<int, int>> q;\r\n    for (int i = 0; i < k; i++) {\r\n        int x, y; cin >> x >> y;\r\n        q.emplace(x, y);\r\n        forest[x][y] = true;\r\n        lastBurnt = {x , y};\r\n    }\r\n\r\n    while(!q.empty()) {\r\n        auto u = q.front();\r\n        q.pop();\r\n        auto valid = [&](int a, int b) {\r\n            return a > 0 and a <= n and b > 0 and b <= m;\r\n        };\r\n\r\n        for (int i = 0; i < 4; i++) {\r\n            int x = u.first + mdx[i];\r\n            int y = u.second + mdy[i];\r\n\r\n            if (valid(x, y) and !forest[x][y]) {\r\n                forest[x][y] = true;\r\n                q.emplace(x, y);\r\n                lastBurnt = {x, y};\r\n            }\r\n        }\r\n    }\r\n    cout << lastBurnt.first << ' ' << lastBurnt.second << '\\n';\r\n    return 0;\r\n}"
}