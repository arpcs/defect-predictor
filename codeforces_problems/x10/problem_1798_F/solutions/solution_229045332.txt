{
    "id": 229045332,
    "contestId": 1798,
    "creationTimeSeconds": 1697883331,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1798,
        "index": "F",
        "name": "Gifts from Grandfather Ahmed",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1798,
        "members": [
            {
                "handle": "muhammadhasan01"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1679841300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 59,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 112230400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 205;\r\n\r\nbool dp[N][N][N];\r\ntuple<int, int, int> par[N][N][N];\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    \r\n    int n, k;\r\n    cin >> n >> k;\r\n    vector<int> a(n);\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> a[i];\r\n    }\r\n    vector<int> s(k);\r\n    for (int i = 0; i < k; i++) {\r\n        cin >> s[i];\r\n    }\r\n    vector<int> order(k);\r\n    iota(order.begin(), order.end(), 0);\r\n    sort(order.begin(), order.end(), [&](int& i, int& j) {\r\n        return s[i] < s[j]; \r\n    });\r\n    vector<vector<int>> ans(k);\r\n    for (int id = 0; id < k - 1; id++) {\r\n        int idx = order[id];\r\n        int num = s[idx];\r\n        int len = 2 * num - 1;\r\n        vector<int> vals(len + 1);\r\n        for (int i = 1; i <= len; i++) {\r\n            vals[i] = a.back();\r\n            a.pop_back();\r\n        }\r\n        for (int i = 0; i <= len; i++) {\r\n            for (int j = 0; j <= num; j++) {\r\n                for (int r = 0; r < num; r++) {\r\n                    dp[i][j][r] = false;\r\n                }\r\n            }\r\n        }\r\n        dp[0][0][0] = true;\r\n        for (int i = 1; i <= len; i++) {\r\n            for (int j = 0; j < min(i, num); j++) {\r\n                for (int r = 0; r < num; r++) {\r\n                    if (!dp[i - 1][j][r]) {\r\n                        continue;\r\n                    }\r\n                    if (!dp[i][j][r]) {\r\n                        dp[i][j][r] = true;\r\n                        par[i][j][r] = make_tuple(i - 1, j, r);\r\n                    }\r\n                    int ci = i;\r\n                    int cj = j + 1;\r\n                    int cr = (r + vals[i]) % num;\r\n                    if (!dp[ci][cj][cr]) {\r\n                        dp[ci][cj][cr] = true;\r\n                        par[ci][cj][cr] = make_tuple(i - 1, j, r);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        int pi = -1;\r\n        for (int i = len; i >= 1; i--) {\r\n            if (dp[i][num][0]) {\r\n                pi = i;\r\n                break;\r\n            }\r\n        }\r\n        assert(pi != -1);\r\n        int pj = num;\r\n        int pr = 0;\r\n        vector<bool> taken(len + 1);\r\n        while (pi > 0) {\r\n            auto [ni, nj, nr] = par[pi][pj][pr];\r\n            if (pj == nj + 1) {\r\n                taken[pi] = true;\r\n            }\r\n            pi = ni, pj = nj, pr = nr;\r\n        }\r\n        for (int i = 1; i <= len; i++) {\r\n            if (taken[i]) {\r\n                ans[idx].emplace_back(vals[i]);\r\n            } else {\r\n                a.emplace_back(vals[i]);\r\n            }\r\n        }\r\n    }\r\n    int last = order.back();\r\n    long long sum = accumulate(a.begin(), a.end(), 0LL);\r\n    int value = s[last] - (sum % s[last]);\r\n    a.emplace_back(value);\r\n    ans[last] = a;\r\n    cout << value << '\\n';\r\n    for (int i = 0; i < k; i++) {\r\n        for (int j = 0; j < s[i]; j++) {\r\n            cout << ans[i][j] << \" \\n\"[j == s[i] - 1];\r\n        }\r\n    }\r\n    \r\n    return 0;\r\n}"
}