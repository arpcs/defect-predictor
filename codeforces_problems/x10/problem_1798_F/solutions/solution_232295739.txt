{
    "id": 232295739,
    "contestId": 1798,
    "creationTimeSeconds": 1699647322,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1798,
        "index": "F",
        "name": "Gifts from Grandfather Ahmed",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2500,
        "tags": [
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1798,
        "members": [
            {
                "handle": "15raeb"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1679841300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define INF 1000000000\r\ntypedef long long ll; \r\n\r\nusing namespace std;\r\n\r\nint N, K;\r\nint arr[201];\r\nbool used[201];\r\npair<int, int> s[201];\r\nvector<int> ans[201];\r\n\r\nvector<int> get_good_subset(vector<int> v) {\r\n    vector<int> ret;\r\n\r\n    int n = v.size();\r\n    int target_n = (n + 1)/2;\r\n    bitset<400> dp[n][target_n];\r\n\r\n    for (int i = 0; i < n; ++i) {\r\n        if (i == 0) dp[0][v[i] % target_n][i] = 1;\r\n        else {\r\n            for (int j = 0; j < target_n; ++j) {\r\n                int rem = (target_n + j - v[i] % target_n) % target_n;\r\n                dp[i][j] = dp[i-1][j];\r\n\r\n                if (dp[i-1][rem].count() < target_n && \r\n                    dp[i-1][rem].count() >= dp[i][j].count()) {\r\n\r\n                    dp[i][j] = dp[i-1][rem];\r\n                    dp[i][j][i] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    for (int j = target_n - 1; j < n; ++j) {\r\n    /* for (int j = n-1; j < n; ++j) { */\r\n        if (dp[j][0].count() == target_n) {\r\n            for (int i = 0; i < n; ++i) {\r\n                if (dp[j][0][i]) \r\n                    ret.push_back(v[i]);\r\n            }\r\n\r\n            if (accumulate(ret.begin(), ret.end(), 0) % target_n == 0) {\r\n                return ret;\r\n            }\r\n\r\n            ret.clear();\r\n            assert(false);\r\n            /* return ret; */\r\n        }\r\n    }\r\n\r\n    /* cout << \"Didn't find anything \" << n << endl; */\r\n    return ret;\r\n}\r\n\r\nint main() {\r\n    cin >> N >> K;\r\n    for (int i = 1; i <= N; i++)\r\n        cin >> arr[i];\r\n\r\n    for (int i = 1; i <= K; i++) {\r\n        cin >> s[i].first;\r\n        s[i].second = i;\r\n    }\r\n\r\n    sort(s+1, s+K+1);\r\n\r\n    for (int i = 1; i < K; ++i) {\r\n        vector<int> nums;\r\n        for (int j = 1; j <= N; ++j) {\r\n            if (!used[j] && (int) nums.size() < 2 * s[i].first - 1) {\r\n                nums.push_back(arr[j]);\r\n            }\r\n        }\r\n\r\n        auto good_set = get_good_subset(nums);\r\n        for (int j : good_set) {\r\n            for (int k = 1; k <= N; ++k) {\r\n                if (!used[k] && arr[k] == j) {\r\n                    used[k] = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        ans[s[i].second] = good_set;\r\n    }\r\n\r\n    int cur_sum = 0;\r\n    for (int i = 1; i <= N; ++i) {\r\n        if (!used[i]) {\r\n            ans[s[K].second].push_back(arr[i]);\r\n            cur_sum += arr[i];\r\n            cur_sum %= s[K].first;\r\n        }\r\n    }\r\n\r\n    int to_buy = s[K].first - cur_sum;\r\n    ans[s[K].second].push_back(to_buy);\r\n\r\n    /* cout << \"WHAT: \" << to_buy << endl; */\r\n\r\n    cout << to_buy << endl;\r\n    for (int i = 1; i <= K; ++i) {\r\n        /* cout << \"WHAT: \"; */\r\n        for (int j = 0; j < (int) ans[i].size(); ++j)\r\n            cout << ans[i][j] << \" \";\r\n        cout << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n"
}