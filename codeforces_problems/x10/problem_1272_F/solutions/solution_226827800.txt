{
    "id": 226827800,
    "contestId": 1272,
    "creationTimeSeconds": 1696573442,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1272,
        "index": "F",
        "name": "Two Bracket Sequences",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "dp",
            "strings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1272,
        "members": [
            {
                "handle": "varahamihira_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1576157700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 438476800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nstruct Dat{\r\n  int i, j;\r\n  int bal;\r\n  char c;\r\n};\r\nconst int MAX = 222;\r\nconst int INF = 1 << 29;\r\nDat from[222][222][444];\r\nint dp[222][222][444];\r\nint main(){\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(nullptr);\r\n  \r\n  string s, t;\r\n  cin >> s >> t;\r\n\r\n  const int n = s.size(), m = t.size();\r\n  for(int i = 0; i <= n; ++i)\r\n    for(int j = 0; j <= m; ++j)\r\n      for(int k = 0; k < (MAX << 1); ++k)\r\n        dp[i][j][k] = INF;\r\n  \r\n  dp[0][0][0] = 0;\r\n  for(int i = 0; i <= n; ++i)\r\n    for(int j = 0; j <= m; ++j)\r\n      for(int k = 0; k < (MAX << 1); ++k){\r\n        int ii = i + (i < n && (s[i] == '('));\r\n        int jj = j + (j < m && (t[j] == '('));\r\n        int kk = k + (k + 1 < (MAX << 1));\r\n\r\n        if(dp[ii][jj][kk] > dp[i][j][k] + 1){\r\n          dp[ii][jj][kk] = dp[i][j][k] + 1;\r\n          from[ii][jj][kk] = Dat({i ,j, k, '('});\r\n        }\r\n\r\n        if(k == 0) continue;\r\n\r\n        ii = i + (i < n && (s[i] == ')'));\r\n        jj = j + (j < m && (t[j] == ')'));\r\n        kk = k - 1;\r\n\r\n        if(dp[ii][jj][kk] > dp[i][j][k] + 1){\r\n          dp[ii][jj][kk] = dp[i][j][k] + 1;\r\n          from[ii][jj][kk] = Dat({i ,j, k, ')'});\r\n        }\r\n      }\r\n\r\n  int best_k = -1;\r\n  int best = INF;\r\n  for(int k = 0; k < (MAX << 1); ++k){\r\n    if(best > dp[n][m][k] + k){\r\n      best = dp[n][m][k] + k;\r\n      best_k = k;\r\n    }\r\n  }\r\n\r\n  string ans(best_k, ')');\r\n  int i = n, j = m, k = best_k;\r\n  while(i + j + k > 0){\r\n    auto x = from[i][j][k];\r\n    i = x.i, j = x.j, k = x.bal;\r\n    ans += x.c;\r\n  }\r\n\r\n  reverse(begin(ans), end(ans));\r\n  cout << ans << endl;\r\n  return 0;\r\n}"
}