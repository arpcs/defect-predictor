{
    "id": 217901866,
    "contestId": 1787,
    "creationTimeSeconds": 1691513735,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1787,
        "index": "C",
        "name": "Remove the Bracket",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1600,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1787,
        "members": [
            {
                "handle": "iN_siDious"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1675002900
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 217,
    "memoryConsumedBytes": 9932800,
    "source": "# Created by iN_siDious.\r\n# Copyright \u00a9 2023 iN_siDious. All rights reserved.\r\nimport sys\r\nimport random\r\nfrom math import *\r\nfrom string import ascii_lowercase\r\nfrom collections import Counter, defaultdict, deque\r\nfrom itertools import accumulate, combinations, permutations\r\nfrom heapq import heappushpop, heapify, heappop, heappush\r\nfrom bisect import bisect_left,bisect_right\r\nfrom types import GeneratorType\r\ndef bootstrap(f, stack=[]):\r\n    def wrappedfunc(*args, **kwargs):\r\n        if stack:\r\n            return f(*args, **kwargs)\r\n        else:\r\n            to = f(*args, **kwargs)\r\n            while True:\r\n                if type(to) is GeneratorType:\r\n                    stack.append(to)\r\n                    to = next(to)\r\n                else:\r\n                    stack.pop()\r\n                    if not stack:\r\n                        break\r\n                    to = stack[-1].send(to)\r\n            return to\r\n    return wrappedfunc\r\ninp = lambda: sys.stdin.buffer.readline().decode().strip()\r\nout=sys.stdout.write\r\ndef S():\r\n    return inp()\r\ndef I():\r\n    return int(inp())\r\ndef MI():\r\n    return map(int, inp().split())\r\ndef MS():\r\n    return inp().split()\r\ndef LS():\r\n    return list(inp().split())\r\ndef LI():\r\n    return list(map(int,inp().split()))\r\ndef print1(x):\r\n    return out(str(x)+\"\\n\")\r\ndef print2(x,y):\r\n    return out(str(x)+\" \"+str(y)+\"\\n\")\r\ndef print3(x,y,z):\r\n    return out(str(x)+\" \"+str(y)+\" \"+str(z)+\"\\n\")\r\ndef Query(i,j):\r\n    print3('?', i, j)\r\n    sys.stdout.flush()\r\n    qi=int(inp())\r\n    return qi\r\ndef print_arr(arr):\r\n    for num in arr:\r\n        out(str(num)+\" \")\r\n    out(str(\"\\n\"))\r\nfor _ in range(I()):\r\n    n,s=MI()\r\n    arr=LI()\r\n    if s==0: print1(0); continue;\r\n    gg=[]\r\n    memo={}\r\n    @bootstrap\r\n    def dp(idx,par):\r\n        if (idx,par) in memo: ans=memo[(idx,par)]\r\n        else:\r\n            if idx==0:\r\n                x=yield dp(idx+1,1)\r\n                y=yield dp(idx+1,0)\r\n                ans=min(x+arr[0]*gg[idx][0],y+arr[0]*gg[idx][1])\r\n            elif idx==n-2:\r\n                ans=arr[-1]*gg[idx-1][par]\r\n            else: \r\n                x=yield dp(idx+1,1)\r\n                y=yield dp(idx+1,0)\r\n                ans=min(x+gg[idx-1][par]*gg[idx][0],y+gg[idx-1][par]*gg[idx][1])\r\n            memo[(idx,par)]=ans\r\n        yield ans\r\n    for i in range(1,n-1):\r\n        if arr[i]<s:\r\n            a=0\r\n            b=arr[i]\r\n        else:\r\n            a=s\r\n            b=arr[i]-a\r\n        gg.append((a,b))\r\n    print1(dp(0,0))"
}