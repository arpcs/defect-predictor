{
    "id": 235189710,
    "contestId": 1787,
    "creationTimeSeconds": 1701419449,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1787,
        "index": "C",
        "name": "Remove the Bracket",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1600,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1787,
        "members": [
            {
                "handle": "prateeksama2003"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1675002900
    },
    "programmingLanguage": "Java 17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 204800,
    "source": "package DP;\r\n\r\nimport java.io.*;\r\nimport java.util.StringTokenizer;\r\nimport java.io.*;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.util.*;\r\npublic class RemoveBracketCF {\r\n\r\n\r\n       \r\n\r\n        static final int N = 200005;\r\n        static long[][] f = new long[N][2];\r\n        static long[] x = new long[N];\r\n        static long[] y = new long[N];\r\n        static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\r\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(System.out));\r\n        static StringTokenizer st ;\r\n\r\n        static void get() throws IOException {\r\n            st = new StringTokenizer(br.readLine());\r\n            int n = Integer.parseInt(st.nextToken()), s=Integer.parseInt(st.nextToken());\r\n            st = new StringTokenizer(br.readLine());\r\n            for (int i = 1; i <= n; i++) {\r\n                long j = Long.parseLong(st.nextToken());\r\n                if (i == 1 || i == n) {\r\n                    x[i] = y[i] = j;\r\n                } else if (j <= s) {\r\n                    x[i] = 0;\r\n                    y[i] = j;\r\n                } else {\r\n                    x[i] = s;\r\n                    y[i] = j - s;\r\n                }\r\n            }\r\n            //the 2D dp array is used here to tell that min sum upto ith pos if we take either x or y as maximum and there will be two cases for\r\n            // each of them\r\n            // i.e take min for either x[i-1] and y[i-1]\r\n            f[1][0] = f[1][1] = 0;\r\n            for (int i = 2; i <= n; i++) {\r\n                f[i][0] = Math.min(f[i-1][0] + y[i-1] * x[i], f[i-1][1] + x[i-1] * x[i]);\r\n                f[i][1] = Math.min(f[i-1][0] + y[i-1] * y[i], f[i-1][1] + x[i-1] * y[i]);\r\n            }\r\n\r\n            System.out.println(f[n][0]);\r\n\r\n\r\n        }\r\n\r\n        public static void main(String[] args) throws IOException {\r\n\r\n\r\n            int T = Integer.parseInt(br.readLine());\r\n            while (T-- > 0) {\r\n                get();\r\n            }\r\n\r\n\r\n        }\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"
}