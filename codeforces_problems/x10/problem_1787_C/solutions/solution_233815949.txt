{
    "id": 233815949,
    "contestId": 1787,
    "creationTimeSeconds": 1700658900,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1787,
        "index": "C",
        "name": "Remove the Bracket",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1600,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1787,
        "members": [
            {
                "handle": "Zhanzhe_Lee"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1675002900
    },
    "programmingLanguage": "Java 21",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 24,
    "timeConsumedMillis": 343,
    "memoryConsumedBytes": 12492800,
    "source": "\r\nimport java.io.*;\r\nimport java.util.Arrays;\r\nimport java.util.StringTokenizer;\r\n\r\npublic class Pro_1787C {\r\n\r\n    public static void solve() throws IOException{\r\n        int n = in.nextInt();\r\n        int s = in.nextInt();\r\n        int[] a = new int[n+1];\r\n        int[] mi = new int[n+1];\r\n        int[] mx = new int[n+1];\r\n        for (int i = 1; i <= n; i++) {\r\n            a[i] = in.nextInt();\r\n            if (a[i] >= 2 * s) {\r\n                mi[i] = s;\r\n                mx[i] = a[i] - s;\r\n            }else {\r\n                mi[i] = Math.max(0, a[i] - s);\r\n                mx[i] = a[i] - mi[i];\r\n            }\r\n        }\r\n        //xi * xi+1 + yi+1 * xi+2\r\n        //max(xi, yi) <= s  min(xi, yi) >= s\r\n        long[][] dp = new long[n+1][2];\r\n        dp[2][0] = (long) a[1] * mi[2]; //xuan mi\r\n        dp[2][1] = (long) a[1] * mx[2]; //xuan mx\r\n        for (int i = 3; i < n; i++) {\r\n            dp[i][0] = Math.min(dp[i-1][0] + (long) mi[i] * mx[i-1], dp[i-1][1] + (long) mi[i] * mi[i-1]);\r\n            dp[i][1] = Math.min(dp[i-1][0] + (long) mx[i] * mx[i-1], dp[i-1][1] + (long) mx[i] * mi[i-1]);\r\n        }\r\n        long ans = Math.min(dp[n-1][0] + (long) a[n] * mx[n-1], dp[n-1][1] + (long) a[n] * mi[n-1]);\r\n        out.println(ans);\r\n    }\r\n\r\n    static boolean MULTI_CASE = true;\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        if (MULTI_CASE) {\r\n            int T = in.nextInt();\r\n            for (int i = 0; i < T; ++i) {\r\n                solve();\r\n            }\r\n        } else {\r\n            solve();\r\n        }\r\n        out.close();\r\n    }\r\n\r\n    static InputReader in = new InputReader();\r\n    static PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));\r\n\r\n    static class InputReader {\r\n        private StringTokenizer st;\r\n        private BufferedReader bf;\r\n\r\n        public InputReader() {\r\n            bf = new BufferedReader(new InputStreamReader(System.in));\r\n            st = null;\r\n        }\r\n\r\n        public String next() throws IOException {\r\n            while (st == null || !st.hasMoreTokens()) {\r\n                st = new StringTokenizer(bf.readLine());\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        public String nextLine() throws IOException {\r\n            return bf.readLine();\r\n        }\r\n\r\n        public int nextInt() throws IOException {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public long nextLong() throws IOException {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        public double nextDouble() throws IOException {\r\n            return Double.parseDouble(next());\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n2 3\r\n\r\n6 6\r\n-1 1 4 5 -1 4\r\n_ _ _ _ _ _\r\n2   5 3 4 1\r\n\r\n6 7\r\n5 -1 -2 -2 -2 -2\r\n1 2 3 4 5\r\n */"
}