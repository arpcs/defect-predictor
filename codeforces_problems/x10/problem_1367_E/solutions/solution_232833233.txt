{
    "id": 232833233,
    "contestId": 1367,
    "creationTimeSeconds": 1700038430,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1367,
        "index": "E",
        "name": "Necklace Assembly",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "dfs and similar",
            "dp",
            "graphs",
            "greedy",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1367,
        "members": [
            {
                "handle": "Halcyflict"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1592318100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 25190400,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define CHECK (check ? \"Yes\" : \"No\")\r\n#define int long long\r\n#define double long double\r\n#define endl '\\n'\r\n\r\nusing namespace std;\r\nconst int N = 4e5 + 10086, M = 5e4 + 10, MOD = 1E9 + 7, mod = 998244353, INF = 2e18;\r\nconst double eps = 1e-8;\r\nint n, m, k;\r\nint dx[8] = { -1, 0, 1, 0, 1, 1, -1, -1 };\r\nint dy[8] = { 0, 1, 0, -1, 1, -1, 1, -1 };\r\nint q[N];\r\nint p[N], hh, tt;\r\nint a[N], b[N];\r\n// int e[N], h[N], ne[N], idx, w[N];\r\npair<int, int> pr[N];\r\nvector<pair<int, int>> vq;\r\nvector<int> qq;\r\nvector<pair<int, int>> g[N];\r\nint minn = INF, maxn = -INF;\r\nint lowbit(int x) { return x & -x; }\r\nint gcd(int a, int b) { return b ? gcd(b, a % b) : a; }\r\nint lcm(int a, int b) { return a / gcd(a, b) * b; }\r\nint find(int x) { if (x != p[x]) p[x] = find(p[x]); return p[x]; }\r\nlong long qmi(long long x, long long k, int mod) { long long res = 1; while (k) { if (k & 1) res = res * x % mod; x = x * x % mod; k >>= 1; } return res % mod; }\r\n// void add(int a, int b, int c) { e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx++; }\r\n\r\nchar str[N];\r\n\r\nvoid solve()\r\n{\r\n\tcin >> n >> k;\r\n\r\n\tint t = k;\r\n\tqq.clear();\r\n\tmap<char, int> g;\r\n\r\n\tcin >> (str + 1);\r\n\r\n\tfor (int i = 1; i <= n; i++)\r\n\t{\r\n\t\tg[str[i]]++;\r\n\t}\r\n\r\n\tfor (int i = 2; i <= t / i; i++)\r\n\t{\r\n\t\tif (t % i == 0)\r\n\t\t{\r\n\t\t\tqq.push_back(i);\r\n\t\t\twhile (t % i == 0) t /= i;\r\n\t\t}\r\n\t}\r\n\tif (t > 1) qq.push_back(t);\r\n\t\r\n\tqq.push_back(1);\r\n\tint maxn = 0;\r\n\tfor (int i = 0; i < qq.size(); i++)\r\n\t{\r\n\t\tfor (int j = 1; j * qq[i] <= n; j++)\r\n\t\t{\r\n\t\t\tint sum = 0;\r\n\t\t\tfor (auto e : g)\r\n\t\t\t{\r\n\t\t\t\tsum += e.second / j;\r\n\t\t\t}\r\n\t\t\tif (sum >= qq[i]) maxn = max(maxn, j * qq[i]);\r\n\t\t}\r\n\t}\r\n\r\n\tcout << maxn << endl;\r\n}\r\n\r\nsigned main()\r\n{\r\n\tstd::ios::sync_with_stdio(false);\r\n\tstd::cin.tie(0);\r\n\tstd::cout.tie(0);\r\n\r\n\tint t = 1;\r\n\tcin >> t;\r\n\r\n\twhile (t--)\r\n\t{\r\n\t\t//init();\r\n\t\tsolve();\r\n\t}\r\n}\r\n\r\n\r\n"
}