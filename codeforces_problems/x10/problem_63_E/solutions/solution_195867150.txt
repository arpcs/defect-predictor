{
    "id": 195867150,
    "contestId": 63,
    "creationTimeSeconds": 1677869739,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 63,
        "index": "E",
        "name": "Sweets Game",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "bitmasks",
            "dfs and similar",
            "dp",
            "games",
            "implementation"
        ]
    },
    "author": {
        "contestId": 63,
        "members": [
            {
                "handle": "Greenscreen23"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1298908800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 4198400,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<ll, ll> pii;\ntypedef vector<ll> vi;\n#define rep(i, a, b) for(ll i = (a); i < (b); ++i)\n#define repb(i, a, b) for(ll i = (b)-1; i >= (a); --i)\n#define all(x) begin(x),end(x)\n#define sz(x) (ll)(x).size()\n\nll downLeft(ll i) {\n    if (i < 3) {\n        return i + 3;\n    }\n    if (i < 7) {\n        return i + 4;\n    }\n    if (i < 12) {\n        return i + 4;\n    }\n    if (i < 16) {\n        return i + 3;\n    }\n    return -999;\n}\n\nll downRight(ll i) {\n    return downLeft(i) + 1;\n}\n\nll Right(ll i) {\n    return i + 1;\n}\n\nconstexpr ll valid5DownLeftPath = (1 << 2);\nconstexpr ll valid4DownLeftPath = valid5DownLeftPath | (1 << 1) | (1 << 5) | (1 << 6);\nconstexpr ll valid3DownLeftPath = valid4DownLeftPath | (1 << 0) | (1 << 4) | (1 << 9) | (1 << 10) | (1 << 11);\nconstexpr ll valid2DownLeftPath = valid3DownLeftPath | (1 << 2) | (1 << 8) | (1 << 13) | (1 << 14) | (1 << 15);\n\nconstexpr ll valid5DownRightPath = (1 << 0);\nconstexpr ll valid4DownRightPath = valid5DownRightPath | (1 << 1) | (1 << 3) | (1 << 4);\nconstexpr ll valid3DownRightPath = valid4DownRightPath | (1 << 7) | (1 << 8) | (1 << 9) | (1 << 5) | (1 << 2);\nconstexpr ll valid2DownRightPath = valid3DownRightPath | (1 << 12) | (1 << 13) | (1 << 14) | (1 << 10) | (1 << 6);\n\nconstexpr ll valid5RightPath = (1 << 7);\nconstexpr ll valid4RightPath = valid5RightPath | (1 << 3) | (1 << 8) | (1 << 12);\nconstexpr ll valid3RightPath = valid4RightPath | (1 << 0) | (1 << 4) | (1 << 9) | (1 << 13) | (1 << 16);\nconstexpr ll valid2RightPath = valid3RightPath | (1 << 1) | (1 << 5) | (1 << 10) | (1 << 14) | (1 << 17);\n\nll calc(vi& dp, ll layout) {\n    if (dp[layout] != 0) return dp[layout];\n\n    rep(i, 0, 19) {\n        if (layout & (1 << i)) {\n            ll path = (1 << i);\n            if (calc(dp, layout & ~path) == 1) {\n                return dp[layout] = 2;\n            }\n\n            if (valid2DownLeftPath & (1 << i)) {\n                path |= (1 << (downLeft(i)));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid3DownLeftPath & (1 << i)) {\n                path |= (1 << (downLeft(downLeft(i))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid4DownLeftPath & (1 << i)) {\n                path |= (1 << (downLeft(downLeft(downLeft(i)))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid5DownLeftPath & (1 << i)) {\n                path |= (1 << (downLeft(downLeft(downLeft(downLeft(i))))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            path = (1 << i);\n\n            if (valid2DownRightPath & (1 << i)) {\n                path |= (1 << (downRight(i)));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid3DownRightPath & (1 << i)) {\n                path |= (1 << (downRight(downRight(i))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid4DownRightPath & (1 << i)) {\n                path |= (1 << (downRight(downRight(downRight(i)))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid5DownRightPath & (1 << i)) {\n                path |= (1 << (downRight(downRight(downRight(downRight(i))))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            path = (1 << i);\n\n            if (valid2RightPath & (1 << i)) {\n                path |= (1 << (Right(i)));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid3RightPath & (1 << i)) {\n                path |= (1 << (Right(Right(i))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid4RightPath & (1 << i)) {\n                path |= (1 << (Right(Right(Right(i)))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n\n            if (valid5RightPath & (1 << i)) {\n                path |= (1 << (Right(Right(Right(Right(i))))));\n                if (calc(dp, layout & ~path) == 1) {\n                    return dp[layout] = 2;\n                }\n            }\n        }\n    }\n\n    return dp[layout] = 1;\n}\n\nvoid solve() {\n    /*\n    * 0: not calculated\n    * 1: start player loses\n    * 2: start player wins\n    */\n    vector<ll> dp(1 << 19, 0);\n    dp[0] = 1;\n\n    ll initialLayout = 0;\n    rep(i, 0, 19) {\n        char c; cin >> c;\n        if (c == ' ') {\n            i--; continue;\n        }\n\n        if (c == 'O') {\n            initialLayout |= (1 << i);\n        }\n    }\n    if (calc(dp, initialLayout) == 2) {\n        cout << \"Karlsson\" << endl;\n    }\n    else {\n        cout << \"Lillebror\" << endl;\n    }\n}\n\nint main() {\n    cin.tie(0)->sync_with_stdio(0);\n    cin.exceptions(cin.failbit);\n\n    // ll t; cin >> t; while (t--) solve();\n    solve();\n}\n"
}