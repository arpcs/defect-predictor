{
    "id": 172235971,
    "contestId": 51,
    "creationTimeSeconds": 1663242108,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 51,
        "index": "F",
        "name": "Caterpillar",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2800,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 51,
        "members": [
            {
                "handle": "_Tish_system"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1293552000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 6451200,
    "source": "#include <bits/stdc++.h> \r\n\r\nusing std :: cin; \r\nusing std :: cout; \r\nusing std :: vector; \r\n\r\nconstexpr int M = 1e5 + 5; \r\nconstexpr int INF = 0x3f3f3f3f; \r\n\r\ntypedef long long ll; \r\ntypedef unsigned long long ull; \r\ntypedef double db; \r\n\r\ninline int read() {\r\n\tint f = 1, s = 0; char ch = getchar(); \r\n\twhile(!isdigit(ch)) (ch == '-') && (f = -1), ch = getchar(); \r\n\twhile(isdigit(ch)) s = s * 10 + ch - '0', ch = getchar(); \r\n\treturn f * s; \r\n} \r\n\r\nnamespace Solver {\r\n\tint n, m, sign, blk, tp, sum; \r\n\tint dfn[M], low[M], stk[M], bl[M]; \r\n\tbool vis[M]; \r\n\tvector < int > adj[M], G[M], sav; \r\n\tinline void upd(int x) {\r\n        ++blk; \r\n\t    for(int y = -1; y ^ x; ) y = stk[tp --], bl[y] = blk; \r\n\t}\r\n\tinline void Tarjan(int x, int fa) {\r\n\t    vis[x] = 1, sav.push_back(x), dfn[x] = low[x] = ++sign, stk[++tp] = x; \r\n\t    for(int &y : adj[x]) {\r\n\t    \tif(y == fa) continue ; \r\n\t    \tif(!dfn[y]) {\r\n\t    \t\tTarjan(y, x), low[x] = std :: min(low[x], low[y]); \r\n\t    \t\tif(low[y] > dfn[x]) upd(y); \r\n\t\t\t} \r\n\t\t\telse low[x] = std :: min(low[x], dfn[y]); \r\n\t\t}\r\n\t\tif(!fa) upd(x); \r\n\t}\r\n\tint dp[M], mx, leaf; \r\n\tinline void dfs(int x, int fa) {\r\n\t    leaf += (G[x].size() == 1); \r\n\t    dp[x] = 1; \r\n\t    for(int &y : G[x]) {\r\n\t    \tif(y == fa) continue ; dfs(y, x); \r\n\t        mx = std :: max(mx, dp[x] + dp[y]), dp[x] = std :: max(dp[x], dp[y] + 1); \r\n\t\t}\r\n\t}\r\n\tinline void solve() {\r\n\t    leaf = mx = 0, dfs(1, 0); \r\n\t    sum += (int)(sav.size()) - mx - (leaf - 2); \r\n\t}\r\n    inline void mian() {\r\n        n = read(), m = read(); \r\n\t\tfor(int i = 1; i <= m; ++i) {\r\n\t\t\tint u = read(), v = read(); \r\n\t\t\tadj[u].emplace_back(v), adj[v].emplace_back(u); \r\n\t\t}\t\r\n\t\tsum = -1;  \r\n\t\tfor(int i = 1; i <= n; ++i) {\r\n\t\t\tif(dfn[i]) continue ; \r\n\t\t\tsav.clear(), blk = 0, Tarjan(i, 0), sum ++; \r\n\t\t\tif(blk == 1) {sum += sav.size() - 1; continue ;} \r\n\t\t\telse {\r\n\t\t\t    for(int &x : sav) \r\n\t\t\t        for(int &y : adj[x]) if(vis[y] && (bl[x] ^ bl[y])) G[bl[x]].push_back(bl[y]);\r\n\t\t\t    solve(); \r\n\t\t\t    for(int x = 1; x <= blk; ++x) G[x].clear(); \r\n\t\t\t}\r\n\t\t\tfor(int &x : sav) vis[x] = 0; sav.clear(); \r\n\t\t}\r\n\t\tcout << sum; \r\n\t} \r\n}\r\nint main() \r\n{\r\n\tSolver :: mian(); \r\n    return 0; \r\n}"
}