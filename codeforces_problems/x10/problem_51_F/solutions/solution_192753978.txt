{
    "id": 192753978,
    "contestId": 51,
    "creationTimeSeconds": 1675869071,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 51,
        "index": "F",
        "name": "Caterpillar",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2800,
        "tags": [
            "dfs and similar",
            "dp",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 51,
        "members": [
            {
                "handle": "Prince_Arthas"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1293552000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 100,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 9318400,
    "source": "// LUOGU_RID: 101737695\n#include<bits/stdc++.h>\r\n#define N 100005\r\nusing namespace std;\r\nint read(){\r\n\tint w=0,h=1;char ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){if(ch=='-')h=-h;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9'){w=w*10+ch-'0';ch=getchar();}\r\n\treturn w*h;\r\n}\r\nstruct Edge{int next,to,id;}e[N],edge[N<<1];\r\nint n,m,ans;\r\nint head[N],num;\r\nvector<int>G[N];\r\nvoid add(int u,int v,int w){edge[++num]=(Edge){head[u],v,w};head[u]=num;}\r\nnamespace Tarjan{\r\n\tint dfn[N],low[N],siz[N],bel[N],cnt,tim;bool vis[N];\r\n\tvoid tarjan(int u,int fa){\r\n\t\tdfn[u]=low[u]=++tim;\r\n\t\tfor(int i=head[u];i;i=edge[i].next){\r\n\t\t\tint v=edge[i].to,w=edge[i].id;\r\n\t\t\tif(!dfn[v]){\r\n\t\t\t\ttarjan(v,u);\r\n\t\t\t\tif(low[v]>dfn[u])vis[w]=true;\r\n\t\t\t\tlow[u]=min(low[u],low[v]);\r\n\t\t\t}\r\n\t\t\telse if(v!=fa)low[u]=min(low[u],dfn[v]);\r\n\t\t}\r\n\t}\r\n\tvoid divide(int u,int root){\r\n\t\tsiz[bel[u]=root]++;\r\n\t\tfor(int i=head[u];i;i=edge[i].next){\r\n\t\t\tint v=edge[i].to,w=edge[i].id;\r\n\t\t\tif(vis[w]||bel[v])continue;\r\n\t\t\tdivide(v,root);\r\n\t\t}\r\n\t}\r\n}\r\nnamespace Diameter{\r\n\tint dist[N],from[N];bool vis[N],on[N];\r\n\tvoid dfs(int u,int fa){\r\n\t\tif(on[u]||G[u].size()==1)ans-=Tarjan::siz[u];\r\n\t\tfor(auto v:G[u])\r\n\t\t\tif(v!=fa)dfs(v,u);\r\n\t}\r\n\tvoid bfs(int x){\r\n\t\tint l=x,r=x;\r\n\t\tqueue<int>q;q.push(x);\r\n\t\twhile(!q.empty()){\r\n\t\t\tint u=q.front();q.pop();\r\n\t\t\tfor(auto v:G[u])\r\n\t\t\t\tif(!dist[v]&&v!=x){\r\n\t\t\t\t\tdist[v]=dist[u]+1;q.push(v);\r\n\t\t\t\t\tif(dist[v]>dist[l])l=v;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tq.push(l);dist[l]=from[l]=0;vis[l]=true;\r\n\t\twhile(!q.empty()){\r\n\t\t\tint u=q.front();q.pop();\r\n\t\t\tfor(auto v:G[u])\r\n\t\t\t\tif(!vis[v]){\r\n\t\t\t\t\tvis[v]=true;\r\n\t\t\t\t\tdist[v]=dist[u]+1;\r\n\t\t\t\t\tfrom[v]=u;q.push(v);\r\n\t\t\t\t\tif(dist[v]>dist[r])r=v;\r\n\t\t\t\t}\r\n\t\t}\r\n\t\tint cur=r;\r\n\t\twhile(cur)on[cur]=true,cur=from[cur];\r\n\t\tdfs(l,0);\r\n\t}\r\n}\r\nsigned main(){\r\n\tn=read();m=read();ans=n;\r\n\tfor(int i=1,u,v;i<=m;i++){\r\n\t\tu=read(),v=read();\r\n\t\te[i].next=u,e[i].to=v;\r\n\t\tadd(u,v,i),add(v,u,i);\r\n\t}\r\n\tfor(int i=1;i<=n;i++)if(!Tarjan::dfn[i])Tarjan::tarjan(i,0);\r\n\tfor(int i=1;i<=n;i++)\r\n\t\tif(!Tarjan::bel[i])\r\n\t\t\tTarjan::divide(i,++Tarjan::cnt),ans+=Tarjan::siz[Tarjan::cnt]-1;\r\n\tfor(int i=1;i<=m;i++)\r\n\t\tif(Tarjan::vis[i]){\r\n\t\t\tG[Tarjan::bel[e[i].next]].emplace_back(Tarjan::bel[e[i].to]);\r\n\t\t\tG[Tarjan::bel[e[i].to]].emplace_back(Tarjan::bel[e[i].next]);\r\n\t\t}\r\n\tint sum=0;\r\n\tfor(int i=1;i<=Tarjan::cnt;i++)\r\n\t\tif(!Diameter::vis[i])Diameter::bfs(i),sum++;\r\n\tprintf(\"%d\\n\",ans+sum-1);\r\n\treturn 0;\r\n}"
}