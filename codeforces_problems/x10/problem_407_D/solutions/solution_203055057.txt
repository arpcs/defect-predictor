{
    "id": 203055057,
    "contestId": 407,
    "creationTimeSeconds": 1682173638,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 407,
        "index": "D",
        "name": "Largest Submatrix 3",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "dp",
            "hashing"
        ]
    },
    "author": {
        "contestId": 407,
        "members": [
            {
                "handle": "Epilogue"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1396162800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 358,
    "memoryConsumedBytes": 149299200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 410;\r\nconst int M = 2e6;\r\n\r\nmt19937 rng;\r\n\r\nint n, m;\r\nint a[N][N];\r\nint t[M], cnt;\r\nshort f[N][N];\r\nshort last[N*N][N];\r\n\r\nvoid add(int x) {\r\n    if (++t[x] == 2) cnt++;\r\n}\r\n\r\nvoid sub(int x) {\r\n    if (t[x]-- == 2) cnt--;\r\n}\r\n\r\nint Test() {\r\n    int res = 0;\r\n    for(int l = 1; l <= n; l++) {\r\n        for(int r = l; r <= n; r++) {\r\n            int j = 1;\r\n            for(int i = 1; i <= m; i++) {\r\n                for(int k = l; k <= r; k++) add(a[k][i]);\r\n                while (j <= i && cnt) {\r\n                    for(int k = l; k <= r; k++) sub(a[k][j]);\r\n                    j++;\r\n                }\r\n                if (j <= i) {\r\n                    res = max(res, (r - l + 1)*(i - j + 1));\r\n                }\r\n            }\r\n            while (j <= m) {\r\n                for(int k = l; k <= r; k++) sub(a[k][j]);\r\n                j++;\r\n            }\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nint solve() {\r\n    int res = 0;\r\n    for(int i = 1; i <= n; i++) {\r\n        for(int j = 1; j <= m; j++) {\r\n            for(int k = j; k; k--) {\r\n                f[k][j] = max({f[k][j], f[k + 1][j], f[k][j - 1], last[a[i][j]][k], last[a[i][k]][j]});\r\n                if (a[i][j] == a[i][k] && j != k) f[k][j] = i;\r\n                res = max(res, (j - k + 1)*(i - f[k][j]));\r\n            }\r\n        }\r\n        for(int j = 1; j <= m; j++) last[a[i][j]][j] = i;\r\n    }\r\n    return res;\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n    cin >> n >> m;\r\n    vector<int> X;\r\n    for(int i = 1; i <= n; i++) {\r\n        for(int j = 1; j <= m; j++) {\r\n            cin >> a[i][j];\r\n            X.push_back(a[i][j]);\r\n        }\r\n    }\r\n    sort(X.begin(), X.end());\r\n    X.resize((unique(X.begin(), X.end())) - X.begin());\r\n    for(int i = 1; i <= n; i++) {\r\n        for(int j = 1; j <= m; j++) {\r\n            a[i][j] = lower_bound(X.begin(), X.end(), a[i][j]) - X.begin();\r\n        }\r\n    }\r\n    cout << solve();\r\n\r\n    return 0 ^ 0;\r\n}\r\n// Okina Matara sitting in a wheelchair\r\n"
}