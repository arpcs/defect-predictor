{
    "id": 72607890,
    "contestId": 89,
    "creationTimeSeconds": 1583539366,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 89,
        "index": "B",
        "name": "Widget Library",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2300,
        "tags": [
            "dp",
            "expression parsing",
            "graphs",
            "implementation"
        ]
    },
    "author": {
        "contestId": 89,
        "members": [
            {
                "handle": "Nitrolanco"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1308236400
    },
    "programmingLanguage": "Java 11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Main{\r\n  public static void main(String[] args){\r\n    TreeMap<String,Widget> map = new TreeMap<String,Widget>();\r\n    FastReader s = new FastReader();\r\n    long times = s.nextInt();\r\n    for (long i = 0; i < times; i++){\r\n      String info = s.nextLine();\r\n      Traductor t = new Traductor();\r\n      t.set_input(info);\r\n      t.maker( map );\r\n\r\n    }\r\n    for (Map.Entry<String,Widget> entry : map.entrySet())\r\n    {\r\n      if (entry.getValue() instanceof VBox || entry.getValue() instanceof HBox){\r\n        entry.getValue().get_alto();\r\n        entry.getValue().get_ancho();\r\n\r\n      }\r\n    System.out.println(entry.getValue().toString());\r\n    }\r\n}\r\n\r\n}\r\n\r\n\r\nclass Widget{\r\n  long alto;\r\n  long ancho;\r\n  String nombre;\r\n\r\n  public void Widget(String a, long height, long width){\r\n    this.nombre = a;\r\n    this.ancho = height;\r\n    this.alto = width;\r\n  }\r\n  public void pack(Widget w){\r\n\r\n  }\r\n  public void set_spacing(long a){\r\n  }\r\n  public void set_border(long a){\r\n\r\n\r\n  }\r\n  @Override\r\n  public String toString(){\r\n    return nombre +\" \"+ Long.toString(this.ancho)+ \" \" + Long.toString(this.alto);\r\n  }\r\n  public void get_alto(){\r\n\r\n\r\n  }\r\n  public void get_ancho(){\r\n\r\n\r\n  }\r\n}\r\n\r\nclass HBox extends Widget\r\n{\r\n  long border = 0;\r\n  long spacing = 0;\r\n  ArrayList<Widget> packedones = new ArrayList<Widget>();\r\n  public void  HBox(String a){\r\n    this.nombre = a;\r\n  }\r\n  public void pack(Widget widgeto){\r\n    packedones.add(widgeto);\r\n  }\r\n  public void set_border(long a){\r\n    this.border = a;\r\n  }\r\n  public void set_spacing(long a){\r\n    this.spacing = a;\r\n  }\r\n  public void get_alto()\r\n  {\r\n    if (!packedones.isEmpty()){\r\n      long maxalto = 0;\r\n      for (Widget x : packedones){\r\n        if (x instanceof HBox || x instanceof VBox){\r\n          x.get_alto();\r\n        }\r\n        if (x.alto > maxalto) {\r\n          maxalto = x.alto;\r\n        }\r\n      }\r\n      this.alto = maxalto + 2 * border;\r\n    }\r\n    else {\r\n      this.alto = 0;\r\n    }\r\n  }\r\n  public void get_ancho(){\r\n    if (!packedones.isEmpty()){\r\n      long anchos = 0;\r\n      for (Widget x : packedones){\r\n        if (x instanceof HBox || x instanceof VBox){\r\n          x.get_ancho();\r\n        }\r\n        anchos += x.ancho;\r\n      }\r\n\r\n      this.ancho = anchos + 2 * border + spacing*(counter - 1) ;\r\n    }\r\n    else {\r\n      this.ancho = 0;\r\n    }\r\n\r\n  }\r\n  @Override\r\n  public String toString(){\r\n    return nombre +\" \"+ Long.toString(this.ancho)+ \" \" + Long.toString(this.alto);\r\n  }\r\n}\r\n\r\nclass VBox extends Widget\r\n{\r\n  long border = 0;\r\n  long spacing = 0;\r\n  ArrayList<Widget> packedones = new ArrayList<Widget>();\r\n  public void VBox(String a){\r\n    this.nombre = a;\r\n  }\r\n  public void pack(Widget widgeto){\r\n    packedones.add(widgeto);\r\n  }\r\n  public void set_spacing(long a){\r\n    this.spacing = a;\r\n  }\r\n  public void set_border(long a){\r\n    this.border = a;\r\n  }\r\n  public void get_ancho()\r\n  {\r\n    if (!packedones.isEmpty()){\r\n      long maxancho = 0;\r\n      for (Widget x : packedones){\r\n        if (x instanceof HBox || x instanceof VBox){\r\n          x.get_ancho();\r\n        }\r\n        if (x.ancho > maxancho) {\r\n          maxancho = x.ancho;\r\n        }\r\n      }\r\n\r\n      this.ancho = maxancho + 2 * border;\r\n    }\r\n    else {\r\n      this.ancho = 0;\r\n    }\r\n  }\r\n  public void get_alto(){\r\n    if (!packedones.isEmpty()){\r\n      long altos = 0;\r\n      for (Widget x : packedones){\r\n        if (x instanceof HBox || x instanceof VBox){\r\n          x.get_alto();\r\n        }\r\n        altos += x.alto;\r\n      }\r\n\r\n      this.alto = altos + 2 * border + spacing*(packedones.size() - 1) ;\r\n    }\r\n    else {\r\n      this.alto = 0;\r\n    }\r\n  }\r\n  @Override\r\n  public String toString(){\r\n    return nombre +\" \"+ Long.toString(this.ancho)+ \" \" + Long.toString(this.alto);\r\n  }\r\n}\r\n\r\n\r\n\r\nclass FastReader\r\n   {\r\n       BufferedReader br;\r\n       StringTokenizer st;\r\n\r\n       public FastReader()\r\n       {\r\n           br = new BufferedReader(new\r\n                    InputStreamReader(System.in));\r\n       }\r\n\r\n       String next()\r\n       {\r\n           while (st == null || !st.hasMoreElements())\r\n           {\r\n               try\r\n               {\r\n                   st = new StringTokenizer(br.readLine());\r\n               }\r\n               catch (IOException  e)\r\n               {\r\n                   e.printStackTrace();\r\n               }\r\n           }\r\n           return st.nextToken();\r\n       }\r\n\r\n       int nextInt()\r\n       {\r\n           return Integer.parseInt(next());\r\n       }\r\n\r\n       long nextLong()\r\n       {\r\n           return Long.parseLong(next());\r\n       }\r\n\r\n       double nextDouble()\r\n       {\r\n           return Double.parseDouble(next());\r\n       }\r\n\r\n       String nextLine()\r\n       {\r\n           String str = \"\";\r\n           try\r\n           {\r\n               str = br.readLine();\r\n           }\r\n           catch (IOException e)\r\n           {\r\n               e.printStackTrace();\r\n           }\r\n           return str;\r\n       }\r\n   }\r\n\r\n\r\n   class Traductor{\r\n     String input = \"\";\r\n     public void set_input (String a){\r\n       this.input = a;\r\n     }\r\n     public void maker(TreeMap <String, Widget> as){\r\n       String[] commands = this.input.split(\"[  .(),]\");\r\n       Bool a = true;\r\n       switch (commands[0]+\" \"commands){\r\n         case \"Widget\":\r\n           Widget w = new Widget();\r\n           w.Widget(commands[1],Long.parseLong(commands[2]),Long.parseLong(commands[3]));\r\n           as.put(commands[1],w);\r\n           break;\r\n\r\n         case \"VBox\":\r\n           VBox V = new VBox();\r\n           V.VBox(commands[1]);\r\n           as.put(commands[1],V);\r\n           break;\r\n\r\n\r\n         case \"HBox\":\r\n           HBox H = new HBox();\r\n           H.HBox(commands[1]);\r\n           as.put(commands[1],H);\r\n           break;\r\n\r\n         default:\r\n           a = false;\r\n         }\r\n         if (!a){\r\n           switch (commands[1]){\r\n\r\n             case \"set_border\":\r\n               long k =  Long.parseLong(commands[2]);\r\n               as.get(commands[0]).set_border(k);\r\n               break;\r\n\r\n             case \"set_spacing\":\r\n\r\n               as.get(commands[0]).set_spacing(Long.parseLong(commands[2]));\r\n               break;\r\n\r\n             case \"pack\":\r\n               as.get(commands[0]).pack(as.get(commands[2]));\r\n               break;\r\n\r\n             default:\r\n           System.out.println(\"Input incorrecto, longente nuevamente.\");\r\n           }\r\n\r\n\r\n         }\r\n\r\n     }\r\n\r\n\r\n}\r\n"
}