{
    "id": 234653112,
    "contestId": 89,
    "creationTimeSeconds": 1701135493,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 89,
        "index": "B",
        "name": "Widget Library",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2300,
        "tags": [
            "dp",
            "expression parsing",
            "graphs",
            "implementation"
        ]
    },
    "author": {
        "contestId": 89,
        "members": [
            {
                "handle": "yiyihum"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1308236400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// generated by GPT4 2023-11-28 01:38:13\n#include <bits/stdc++.h>\nusing namespace std;\n#define mp make_pair\n#define pb push_back\n#define F first\n#define S second\ntypedef long long ll;\n\nstruct Widget {\n    string name;\n    int border, spacing;\n    bool isWidget;\n    vector<Widget*> children;\n    pair<int, int> dim;\n    Widget(string name) : name(name), border(0), spacing(0), isWidget(false) {}\n};\n\nmap<string, Widget*> widgets;\n\npair<int, int> getDimension(Widget* widget) {\n    if (widget->isWidget)\n        return widget->dim;\n    if (!widget->children.size())\n        return mp(0, 0);\n    pair<int, int> dim;\n    for (Widget* child : widget->children) {\n        pair<int, int> child_dim = getDimension(child);\n        dim.F = max(dim.F, child_dim.F);\n        dim.S = max(dim.S, child_dim.S);\n    }\n    dim.F += 2 * widget->border;\n    dim.S += 2 * widget->border;\n    dim.F += (widget->children.size() - 1) * widget->spacing;\n    dim.S += (widget->children.size() - 1) * widget->spacing;\n    return dim;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        string line, name;\n        cin.ignore();\n        getline(cin, line);\n        if(line.find(\"Widget\") == 0) {\n            name = line.substr(7, line.find(\"(\") - 7);\n            int x = stoi(line.substr(line.find(\"(\") + 1, line.find(\",\") - line.find(\"(\") - 1));\n            int y = stoi(line.substr(line.find(\",\") + 1, line.find(\")\") - line.find(\",\") - 1));\n            Widget* widget = new Widget(name);\n            widget->isWidget = true;\n            widget->dim = mp(x, y);\n            widgets[name] = widget;\n        } else if(line.find(\"HBox\") == 0) {\n            name = line.substr(5);\n            widgets[name] = new Widget(name);\n        } else if(line.find(\"VBox\") == 0) {\n            name = line.substr(5);\n            widgets[name] = new Widget(name);\n        } else {\n            name = line.substr(0, line.find(\".\"));\n            if(line.find(\"pack\") != string::npos) {\n                string child_name = line.substr(line.find(\"(\") + 1, line.find(\")\") - line.find(\"(\") - 1);\n                widgets[name]->children.pb(widgets[child_name]);\n            } else if(line.find(\"set_border\") != string::npos) {\n                int x = stoi(line.substr(line.find(\"(\") + 1, line.find(\")\") - line.find(\"(\") - 1));\n                widgets[name]->border = x;\n            } else {\n                int x = stoi(line.substr(line.find(\"(\") + 1, line.find(\")\") - line.find(\"(\") - 1));\n                widgets[name]->spacing = x;\n            }\n        }\n    }\n\n    for(auto it = widgets.begin(); it != widgets.end(); it++) {\n        pair<int, int> dim = getDimension(it->S);\n        cout << it->F << \" \" << dim.F << \" \" << dim.S << \"\\n\";\n    }\n    return 0;\n}\n"
}