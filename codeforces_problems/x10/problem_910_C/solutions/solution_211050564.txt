{
    "id": 211050564,
    "contestId": 910,
    "creationTimeSeconds": 1687708803,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 910,
        "index": "C",
        "name": "Minimum Sum",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 910,
        "members": [
            {
                "handle": "siddhugarlapati"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513940700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 107,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#include <iostream>\r\n#include <string>\r\n#include <algorithm>\r\n#include <vector>\r\nusing namespace std;\r\n#define ll long long\r\n//for math u can observe something related to gcd or something related to even or odd to draw some conclusions\r\n//if your answer is lieing in a range then binary search is the best approach to solve that problem\r\n//for errors check out of bound and overflow of integers\r\n//sorting,binary search,dynamic programming,greedy are some of the most used techniques to solve the problems\r\n//until some element it is good and then next it is bad u should use binary search \r\n//to find the first good element or to find the first bad element we use binary search\r\n//if there are digits then remember that the digits are just from 0-9 so u can use two loops the same for character a-z they are just 26\r\nconst int M=998244353;\r\nconst int INF=1e9+5;\r\nvoid dfs(int currentNode,vector<vector<int>>& adj,int parent,vector<int>& ans)\r\n{\r\n    ans.push_back(currentNode);\r\n    for(int neighbour : adj[currentNode])\r\n    {\r\n        if(neighbour!=parent)\r\n        {\r\n            dfs(neighbour,adj,currentNode,ans);\r\n        }\r\n    }\r\n}\r\nll mod(ll x)\r\n{\r\n    return (((x%M)+M)%M);\r\n}\r\nll add(ll a,ll b)\r\n{\r\n    return mod(mod(a)+mod(b));\r\n}\r\nll mul(ll a,ll b)\r\n{\r\n    return mod(mod(a)*mod(b));\r\n}\r\nint sumd(ll a)\r\n{\r\n    int res=0;\r\n    while(a!=0)\r\n    {\r\n        res+=a%10;\r\n        a/=10;\r\n    }\r\n    return res;\r\n}\r\nint main() {\r\n\t// your code goes here\r\n\tint t;\r\n    t=1;\r\n\twhile(t--)\r\n\t{\r\n\t  int n;\r\n\t  cin>>n;\r\n\t  vector<int>totals(10,0);\r\n\t  vector<int>totals2(10,0);\r\n\t  vector<int>fill(10,0);\r\n\t  vector<int>dard(10,0);\r\n\t  for(int i=0;i<n;i++)\r\n\t  {\r\n\t      string s;\r\n\t      cin>>s;\r\n\t      int k=s.size();\r\n\t      int startt=pow(10,k-1);\r\n\t      for(int j=0;j<k;j++)\r\n\t      {\r\n\t          totals[s[j]-'a']+=startt;\r\n\t          startt/=10;\r\n\t          if(j==0) dard[s[j]-'a']=1;\r\n\t      }\r\n\t  }\r\n\t  for(int i=0;i<10;i++)\r\n\t  {\r\n\t      totals2[i]=totals[i];\r\n\t  }\r\n\t  int p=0;\r\n\t  int finalans=0;\r\n\t  int q=1;\r\n\t  sort(totals2.begin(),totals2.end());\r\n\t  for(int i=9;i>=0;i--)\r\n\t  {\r\n\t      for(int j=0;j<10;j++)\r\n\t      {\r\n\t          if(totals2[i]==totals[j] && fill[j]==0)\r\n\t          {\r\n\t              if(p==0 && dard[j]==0)\r\n\t              {\r\n\t                 finalans+=0;\r\n\t                 p=1;\r\n\t                 fill[j]=1;\r\n\t              }\r\n\t              else\r\n\t              {\r\n\t               finalans+=totals[j]*q;\r\n\t               q++;\r\n\t               fill[j]=1;\r\n\t              }\r\n\t          }\r\n\t      }\r\n\t  }\r\n\t  cout<<finalans<<endl;\r\n\t}\r\n\t\r\n\treturn 0;\r\n}"
}