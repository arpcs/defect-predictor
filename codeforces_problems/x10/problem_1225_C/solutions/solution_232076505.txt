{
    "id": 232076505,
    "contestId": 1225,
    "creationTimeSeconds": 1699536705,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1225,
        "index": "C",
        "name": "p-binary",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "bitmasks",
            "brute force",
            "math"
        ]
    },
    "author": {
        "contestId": 1225,
        "members": [
            {
                "handle": "andryweru"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572087900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\nint GetHighBit(int value);\nint Get_quantity_p_binary_numbers(int number_n, int number_p);\n\n\nint GetHighBit(int value){\n    if(value == 0)\n        return -1000;\n    int result = 1;\n    result <<= 30;\n    while (result > value)\n    {\n        result >>= 1;\n    }\n    return result;\n}\n\n\nint Get_quantity_p_binary_numbers(int number_n, int number_p){\n    if(number_p + 1 > number_n)\n        return-1;\n    int result = 0, current_n, current_high_bit, number_of_1;\n\n    while (number_n != 0)\n    {   \n        current_n = number_n - (1 + result) * number_p;\n        number_of_1 = 0;\n        if(current_n < 0)\n            return -1;\n        for (int i = 0; i <= result; ++i)\n        {   \n            current_high_bit = 0;\n            if((current_n == 0 && (result + 1 -i > (result +1)/2 - number_of_1)) || current_n != 0){\n                current_high_bit = GetHighBit(current_n); \n            if(current_high_bit == -1)\n            }\n            current_n -= current_high_bit;\n            if(current_high_bit == 1)\n                ++number_of_1;\n        }\n        if(current_n == 0)\n            number_n = 0;\n        ++result;\n    }\n    \n    return result;\n}\n\nint main(){\n\n    int number_n, number_p;\n    std::cin >> number_n >> number_p;\n    std::cout << Get_quantity_p_binary_numbers(number_n, number_p);\n\n\n    return 0;\n}"
}