{
    "id": 236000345,
    "contestId": 1416,
    "creationTimeSeconds": 1701841669,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1416,
        "index": "F",
        "name": "Showing Off",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3300,
        "tags": [
            "flows",
            "graph matchings",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1416,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601219100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 96,
    "timeConsumedMillis": 3868,
    "memoryConsumedBytes": 34406400,
    "source": "#include<iostream>\n#include<cstdio>\n#include<queue>\n#define N 300000\n#define M 2000000\nusing namespace std;\nconst int inf=(int)(1e9);\nconst int sx[4]={-1,1,0,0};\nconst int sy[4]={0,0,-1,1};\nconst char c[4]={'U','D','L','R'};\nint read()\n{\n\tchar c=0;\n\tint sum=0;\n\twhile (c<'0'||c>'9') c=getchar();\n\twhile ('0'<=c&&c<='9') sum=sum*10+c-'0',c=getchar();\n\treturn sum;\n}\nstruct node\n{\n\tint v,data,nxt;\n};\nnode edge[M+1];\nint T,n,m,s,t,len,p[N+1],sp[N+1],a[N+1],head[N+1],cur[N+1],depth[N+1],delta[N+1];\nbool vis[N+1];\nchar nt[N+1];\nint F(int x,int y)\n{\n\treturn (x-1)*m+y;\n}\nbool check(int x,int y)\n{\n\treturn 1<=x&&x<=n&&1<=y&&y<=m;\n}\nvoid add(int x,int y,int z)\n{\n\tedge[++len]=(node){y,z,head[x]},head[x]=len;\n\tedge[++len]=(node){x,0,head[y]},head[y]=len;\n\treturn;\n}\nbool bfs()\n{\n\tint top;\n\tqueue<int>q;\n\tfor (int i=s;i<=t;++i) depth[i]=0;\n\tq.push(s),depth[s]=1;\n\twhile (!q.empty())\n\t{\n\t\ttop=q.front(),q.pop();\n\t\tfor (int i=head[top];i>0;i=edge[i].nxt)\n\t\t\tif (edge[i].data&&!depth[edge[i].v])\n\t\t\t\tdepth[edge[i].v]=depth[top]+1,q.push(edge[i].v);\n\t}\n\treturn depth[t]>0;\n}\nint dinic(int x,int flow)\n{\n\tif (x==t) return flow;\n\tint k;\n\tfor (int &i=cur[x];i>0;i=edge[i].nxt)\n\t\tif (edge[i].data&&depth[edge[i].v]==depth[x]+1)\n\t\t{\n\t\t\tk=dinic(edge[i].v,min(flow,edge[i].data));\n\t\t\tif (k)\n\t\t\t{\n\t\t\t\tedge[i].data-=k,edge[i^1].data+=k;\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\treturn 0;\n}\nint main()\n{\n\tbool opt;\n\tint rst,res,flow,x,cnt;\n\tT=read();\n\twhile (T--)\n\t{\n\t\tn=read(),m=read(),s=0,t=((n*m)<<1)+1,len=1,rst=res=0;\n\t\tfor (int i=s;i<=t;++i) head[i]=0;\n\t\tfor (int i=1;i<=n;++i)\n\t\t\tfor (int j=1;j<=m;++j)\n\t\t\t\ta[F(i,j)]=read();\n\t\tfor (int i=1;i<=n;++i)\n\t\t\tfor (int j=1;j<=m;++j)\n\t\t\t{\n\t\t\t\topt=1;\n\t\t\t\tfor (int op=0;op<=3;++op)\n\t\t\t\t\tif (check(i+sx[op],j+sy[op]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif (a[F(i,j)]==a[F(i+sx[op],j+sy[op])]) add(F(i,j),F(i+sx[op],j+sy[op])+n*m,1);\n\t\t\t\t\t\tif (a[F(i,j)]>a[F(i+sx[op],j+sy[op])]) delta[F(i,j)]=a[F(i,j)]-a[F(i+sx[op],j+sy[op])],nt[F(i,j)]=c[op],opt=0;\n\t\t\t\t\t}\n\t\t\t\tif (opt) add(s,F(i,j),1),add(F(i,j)+n*m,t,1),rst++;\n\t\t\t\telse add(F(i,j)+n*m,F(i,j),1);\n\t\t\t}\n\t\twhile (bfs())\n\t\t{\n\t\t\tfor (int i=s;i<=t;++i) cur[i]=head[i];\n\t\t\twhile (flow=dinic(s,inf)) res+=flow;\n\t\t}\n\t\tif (res!=rst)\n\t\t{\n\t\t\tputs(\"NO\");\n\t\t\tcontinue;\n\t\t}\n\t\tfor (int i=1;i<=n*m;++i)\n\t\t{\n\t\t\tp[i]=sp[i]=vis[i]=0;\n\t\t\tfor (int j=head[i];j>0;j=edge[j].nxt)\n\t\t\t\tif (!edge[j].data&&edge[j].v>n*m&&edge[j].v-n*m!=i)\n\t\t\t\t\tsp[i]=edge[j].v-n*m;\n\t\t}\n\t\tfor (int i=1;i<=n*m;++i)\n\t\t\tif (sp[i]&&!vis[i])\n\t\t\t{\n\t\t\t\tx=i,cnt=0;\n\t\t\t\twhile (!vis[x])\n\t\t\t\t{\n\t\t\t\t\tcnt++;\n\t\t\t\t\tif (cnt&1) p[x]=sp[x],p[sp[x]]=x;\n\t\t\t\t\tvis[x]=1,x=sp[x];\n\t\t\t\t}\n\t\t\t}\n\t\tfor (int i=1;i<=n*m;++i)\n\t\t\tif (p[i])\n\t\t\t{\n\t\t\t\tif (n!=1&&p[i]==i-m) nt[i]='U';\n\t\t\t\telse if (m!=1&&p[i]==i-1) nt[i]='L';\n\t\t\t\telse if (m!=1&&p[i]==i+1) nt[i]='R';\n\t\t\t\telse nt[i]='D';\n\t\t\t\tif (i<p[i]) delta[i]=1,delta[p[i]]=a[i]-1;\n\t\t\t}\n\t\tputs(\"YES\");\n\t\tfor (int i=1;i<=n;++i)\n\t\t{\n\t\t\tfor (int j=1;j<=m;++j) printf(\"%d \",delta[F(i,j)]);\n\t\t\tputs(\"\");\n\t\t}\n\t\tfor (int i=1;i<=n;++i)\n\t\t{\n\t\t\tfor (int j=1;j<=m;++j) printf(\"%c \",nt[F(i,j)]);\n\t\t\tputs(\"\");\n\t\t}\n\t}\n\treturn 0;\n}\n\n   \t  \t\t      \t  \t\t\t\t\t\t  \t\t\t\t \t"
}