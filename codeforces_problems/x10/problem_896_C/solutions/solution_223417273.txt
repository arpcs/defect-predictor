{
    "id": 223417273,
    "contestId": 896,
    "creationTimeSeconds": 1694735465,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 896,
        "index": "C",
        "name": "Willem, Chtholly and Seniorious",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "data structures",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 896,
        "members": [
            {
                "handle": "AKIOI_Czy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1512223500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 1024000,
    "source": "// LUOGU_RID: 124734486\n#include <bits/stdc++.h>\r\n#define int long long\r\n#define init auto end = split(r + 1), begin = split(l)\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 10;\r\n\r\nint n, m, seed, vmax;\r\nint a[N];\r\nstruct sb\r\n{\r\n\tint l, r;\r\n\tmutable int x;\r\n\tbool operator < (const sb & W) const\r\n\t{\r\n\t\treturn l < W.l;\r\n\t}\r\n} ;\r\nset<sb> tree;\r\n\r\nauto split(int pos)\r\n{\r\n\tauto it = tree.lower_bound({pos, -1, 0});\r\n\tif (it != tree.end() && it -> l == pos) return it;\r\n\tit -- ;\r\n\tint l = it -> l, r = it -> r, x = it -> x;\r\n\ttree.erase(it);\r\n\ttree.insert({l, pos - 1, x});\r\n\t\r\n\treturn tree.insert({pos, r, x}).first;\r\n}\r\n\r\nvoid assign(int l, int r, int x)\r\n{\r\n\tauto end = split(r + 1), begin = split(l);\r\n\ttree.erase(begin, end);\r\n\ttree.insert({l, r, x});\r\n}\r\n\r\nvoid add(int l, int r, int x)\r\n{\r\n\tfor (init; begin != end; begin ++ ) begin -> x += x;\r\n}\r\n\r\nint rnd()\r\n{\r\n    int ret = seed;\r\n    seed = (seed * 7 + 13) % 1000000007;\r\n    return ret;\r\n}\r\n\r\nint quick_power(int a, int b, int mod)\r\n{\r\n    int res = 1;\r\n    while (b)\r\n    {\r\n        if (b & 1) (res *= a) %= mod;\r\n        (a *= a) %= mod;\r\n        b >>= 1;\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nint ask(int l, int r, int x)\r\n{\r\n    vector<pair<int, int>> v;\r\n\tfor (init; begin != end; begin ++ )\r\n        v.push_back({begin -> x, begin -> r - begin -> l + 1});\r\n    sort(v.begin(), v.end());\r\n    int idx = 0;\r\n    while (idx < v.size() && v[idx].second < x) x -= v[idx ++ ].second;\r\n\r\n    return v[idx].first;\r\n}\r\n\r\nint query(int l, int r, int x, int y)\r\n{\r\n    int res = 0;\r\n\tfor (init; begin != end; begin ++ )\r\n        (res += (1ll * quick_power(begin -> x, x, y) * (begin -> r - begin -> l + 1ll) % y)) %= y;\r\n    \r\n    return res;\r\n}\r\n\r\nsigned main()\r\n{\r\n\tcin >> n >> m >> seed >> vmax;\r\n\t\r\n\ttree.insert({1, n, 0});\r\n\tfor (int i = 1; i <= n; i ++ )\r\n\t\ta[i] = (rnd() % vmax) + 1, assign(i, i, a[i]);\r\n\r\n\tfor (int i = 1; i <= m; i ++ )\r\n\t{\r\n        int op, l, r, x, y;\r\n\t\top = (rnd() % 4) + 1;\r\n\t    l = (rnd() % n) + 1;\r\n\t    r = (rnd() % n) + 1;\r\n\t    if (l > r) swap(l, r);\r\n\t    if (op == 3) x = (rnd() % (r - l + 1)) + 1;\r\n\t    else x = (rnd() % vmax) + 1;\r\n\t    if (op == 4) y = (rnd() % vmax) + 1;\r\n        if (op == 1) add(l, r, x);\r\n        else if (op == 2) assign(l, r, x);\r\n        else if (op == 3) cout << ask(l, r, x) << '\\n';\r\n        else cout << query(l, r, x, y) << '\\n';\r\n\t}\r\n\t\r\n\treturn 0;\r\n}"
}