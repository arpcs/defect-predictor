{
    "id": 218822981,
    "contestId": 896,
    "creationTimeSeconds": 1692029606,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 896,
        "index": "C",
        "name": "Willem, Chtholly and Seniorious",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2600,
        "tags": [
            "data structures",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 896,
        "members": [
            {
                "handle": "lawsonwang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1512223500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 34,
    "timeConsumedMillis": 343,
    "memoryConsumedBytes": 16588800,
    "source": "// LUOGU_RID: 120919963\n// Code By WLS\r\n#include <bits/stdc++.h>\r\n#define int long long\r\nconst int N = 1e6 + 5;\r\nusing namespace std;\r\ninline int read() {\r\n\tint s=0, w=1;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\r\n\twhile(ch>='0'&&ch<='9') s=(s<<3)+(s<<1)+(ch^48),ch=getchar();\r\n\treturn s*w;\r\n}\r\nint qpow(int a, int b, int m) { // a ^ b % m\r\n\tint res = 1;\r\n\ta %= m;\r\n\twhile (b) {\r\n\t\tif (b & 1) res = res * a % m;\r\n\t\ta = a * a % m, b >>= 1;\r\n\t}\r\n\treturn res;\r\n}\r\nint seed;\r\nint rnd() {\r\n\tint ret = seed;\r\n\tseed = (seed * 7 + 13) % 1000000007;\r\n    return ret;\r\n}\r\nint n, m, vmax, a[N];\r\nstruct node {\r\n\tmutable int l, r, num;\r\n\tbool operator < (node rhs) const {\r\n\t\treturn l < rhs.l;\r\n\t}\r\n};\r\nset<node> s;\r\nset<node>::iterator split(int x) {\r\n\tnode tmp = (node){x};\r\n\tset<node>::iterator it = s.lower_bound(tmp);\r\n\tif (it != s.end() && it -> l == x) return it;\r\n\tit--;\r\n\tint l = it -> l, r = it -> r, num = it -> num;\r\n\ts.erase(it);\r\n\ttmp = (node){l, x - 1, num};\r\n\ts.insert(tmp);\r\n\ttmp = (node){x, r, num};\r\n\treturn s.insert(tmp).first;\r\n}\r\nvoid assign(int l, int r, int num) {\r\n\tset<node>::iterator R = split(r + 1), L = split(l);\r\n\ts.erase(L, R);\r\n\tnode tmp = {l, r, num};\r\n\ts.insert(tmp);\r\n}\r\nvoid add(int l, int r, int num) {\r\n\tset<node>::iterator R = split(r + 1), L = split(l);\r\n\tfor (set<node>::iterator it = L; it != R; it++) it -> num += num;\r\n}\r\nint query_sum(int l, int r) {\r\n\tset<node>::iterator R = split(r + 1), L = split(l);\r\n\tint sum = 0;\r\n\tfor (set<node>::iterator it = L; it != R; it++) sum += (it -> num) * (it -> r - it -> l + 1);\r\n\treturn sum;\r\n}\r\nint query_kth(int l, int r, int k) {\r\n\tset<node>::iterator R = split(r + 1), L = split(l);\r\n\tvector<pair<int, int> > t;\r\n\tfor (set<node>::iterator it = L; it != R; it++) t.push_back(make_pair(it -> num, it -> r - it -> l + 1));\r\n\tsort(t.begin(), t.end());\r\n\tfor (int i = 0; i < t.size(); i++) {\r\n\t\tk -= t[i].second;\r\n\t\tif (k <= 0) return t[i].first;\r\n\t}\r\n\treturn -1;\r\n}\r\nint query_pow_sum(int l, int r, int x, int y) {\r\n\tset<node>::iterator R = split(r + 1), L = split(l);\r\n\tint sum = 0;\r\n\tfor (set<node>::iterator it = L; it != R; it++) sum = (sum + qpow(it -> num, x, y) * (it -> r - it -> l + 1)) % y;\r\n\treturn sum;\r\n}\r\nsigned main() {\r\n\tn = read(), m = read(), seed = read(), vmax = read();\r\n\tfor (int i = 1; i <= n; i++) a[i] = rnd() % vmax + 1, s.insert((node){i, i, a[i]});\r\n\tfor (int i = 1; i <= m; i++) {\r\n\t\tint op = rnd() % 4 + 1, x, y;\r\n\t\tint l = rnd() % n + 1;\r\n\t\tint r = rnd() % n + 1;\r\n\t\tif (l > r) swap(l, r);\r\n\t\tif (op == 3) x = rnd() % (r - l + 1) + 1;\r\n\t\telse x = rnd() % vmax + 1;\r\n\t\tif (op == 4) y = rnd() % vmax + 1;\r\n\t\t\r\n\t\tif (op == 1) add(l, r, x);\r\n\t\telse if (op == 2) assign(l, r, x);\r\n\t\telse if (op == 3) printf(\"%lld\\n\", query_kth(l, r, x));\r\n\t\telse printf(\"%lld\\n\", query_pow_sum(l, r, x, y));\r\n\t}\r\n\treturn 0;\r\n}"
}