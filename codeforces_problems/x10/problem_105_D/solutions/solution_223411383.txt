{
    "id": 223411383,
    "contestId": 105,
    "creationTimeSeconds": 1694725960,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 105,
        "index": "D",
        "name": "Entertaining Geodetics",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "dsu",
            "implementation"
        ]
    },
    "author": {
        "contestId": 105,
        "members": [
            {
                "handle": "hard2kill"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1313247600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 15462400,
    "source": "\ufeff//FOR JASNAH\r\n#include <map>\r\n#include <vector>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#define maxPanel 200005\r\nusing namespace std;\r\n\r\nint currentSymbol, panelHeight, panelWidth, firstSymbolRow, firstSymbolCol, panelColors[305][305], symbolColors[305][305], iconCounts[maxPanel], spiralOrder[605][605];\r\nstruct symbol\r\n{\r\n\tint row, col, color;\r\n\tsymbol(int _row = 0, int _col = 0, int _color = 0) { row = _row, col = _col, color = _color; }\r\n\tbool operator <(const symbol& B) const { return spiralOrder[row - firstSymbolRow + panelHeight][col - firstSymbolCol + panelWidth] < spiralOrder[B.row - firstSymbolRow + panelHeight][B.col - firstSymbolCol + panelWidth]; }\r\n} destroyedSymbols[maxPanel];\r\nvector<symbol> symbolList[maxPanel];\r\nmap<int, int> colorMap;\r\n\r\nvoid init()\r\n{\r\n\tscanf(\"%d%d\", &panelHeight, &panelWidth), colorMap[0] = currentSymbol = 1;\r\n\tfor (int i = 1; i <= panelHeight; i++)\r\n\t\tfor (int j = 1, k; j <= panelWidth; j++) scanf(\"%d\", &k), panelColors[i][j] = (colorMap[k] ? colorMap[k] : colorMap[k] = ++currentSymbol), iconCounts[panelColors[i][j]]++;\r\n\tfor (int i = 1; i <= panelHeight; i++)\r\n\t\tfor (int j = 1, k; j <= panelWidth; j++)\r\n\t\t{\r\n\t\t\tscanf(\"%d\", &k);\r\n\t\t\tif (k > -1) symbolColors[i][j] = (colorMap[k] ? colorMap[k] : colorMap[k] = ++currentSymbol), symbolList[panelColors[i][j]].push_back(symbol(i, j, symbolColors[i][j]));\r\n\t\t}\r\n\tscanf(\"%d%d\", &firstSymbolRow, &firstSymbolCol), spiralOrder[panelHeight][panelWidth] = 1;\r\n\tfor (int i = 2, x = panelHeight - 1, y = panelWidth - 1, k = 1; i <= 600; i += 2, x--, y--)\r\n\t{\r\n\t\tfor (int j = 0; j < i; j++) spiralOrder[x][++y] = ++k;\r\n\t\tfor (int j = 0; j < i; j++) spiralOrder[++x][y] = ++k;\r\n\t\tfor (int j = 0; j < i; j++) spiralOrder[x][--y] = ++k;\r\n\t\tfor (int j = 0; j < i; j++) spiralOrder[--x][y] = ++k;\r\n\t}\r\n}\r\n\r\nvoid repaint()\r\n{\r\n\tlong long totalRepaints = 0;\r\n\tdestroyedSymbols[1] = symbol(firstSymbolRow, firstSymbolCol, symbolColors[firstSymbolRow][firstSymbolCol]);\r\n\tfor (int l = 1, r = 1, k = panelColors[firstSymbolRow][firstSymbolCol], u; l <= r; l++, k = u) if (k > 1 && (u = destroyedSymbols[l].color) != k && iconCounts[k])\r\n\t{\r\n\t\ticonCounts[u] += iconCounts[k], totalRepaints += iconCounts[k], iconCounts[k] = 0;\r\n\t\tfirstSymbolRow = destroyedSymbols[l].row, firstSymbolCol = destroyedSymbols[l].col, sort(symbolList[k].begin(), symbolList[k].end());\r\n\t\tfor (symbol i : symbolList[k]) destroyedSymbols[++r] = i;\r\n\t\tsymbolList[k].clear();\r\n\t}\r\n\tprintf(\"%I64d\\n\", totalRepaints);\r\n}\r\n\r\nint main()\r\n{\r\n\tinit();\r\n\trepaint();\r\n\treturn 0;\r\n}"
}