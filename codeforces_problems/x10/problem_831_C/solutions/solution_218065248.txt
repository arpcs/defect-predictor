{
    "id": 218065248,
    "contestId": 831,
    "creationTimeSeconds": 1691606016,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 831,
        "index": "C",
        "name": "Jury Marks",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms"
        ]
    },
    "author": {
        "contestId": 831,
        "members": [
            {
                "handle": "Harry_03"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499958300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n \r\n#pragma GCC optimize(\"O2\")             \r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#define fast                      \\\r\n    ios_base::sync_with_stdio(0); \\\r\n    cin.tie(NULL);                \\\r\n    cout.tie(NULL)\r\n\r\nint main()\r\n{\r\n    fast;\r\n    int n,k; cin >> n >> k;\r\n    int count,count2;\r\n    vector <int> A,B,C;\r\n    unordered_map <int,int> M;\r\n    int temp;\r\n    int ans;\r\n    unordered_set <int> S,S2;\r\n    for (int i=0;i<n;i++)\r\n    {\r\n        cin >> temp;\r\n        A.push_back(temp);\r\n    }\r\n    for (int i=0;i<k;i++)\r\n    {\r\n        cin >> temp;\r\n        M.insert(make_pair(temp,1));\r\n        B.push_back(temp);\r\n    }\r\n    int val=0;\r\n    int sum=0;\r\n    for (int i=0;i<n-k+1;i++)\r\n    {\r\n        sum=sum+A[i];\r\n        temp=i;\r\n        for (int j=0;j<k;j++)\r\n        {\r\n            count=1;\r\n            val=B[j];\r\n            C.push_back(val);\r\n            ans=val-sum;\r\n            if(S2.find(ans)!=S2.end())\r\n            break;\r\n            S2.insert(ans);\r\n            M[val]=0;\r\n            while (count<k)\r\n            {\r\n                ++i;\r\n                val=val+A[i];\r\n                if (M.find(val)!=M.end()&&M[val]!=0)\r\n                {\r\n                    M[val]=0;\r\n                    C.push_back(val);\r\n                    ++count;\r\n                }                             \r\n                if (i+k-count==n)\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n            while (C.empty()!=1)\r\n            {\r\n                M[C.back()]=1;\r\n                C.pop_back();\r\n            }\r\n            if (count==k)\r\n            {\r\n                S.insert(ans);\r\n                break;\r\n            }\r\n            i=temp;\r\n        }\r\n        i=temp;\r\n    }\r\n    cout << S.size() << \"\\n\";\r\n}"
}