{
    "id": 189482679,
    "contestId": 831,
    "creationTimeSeconds": 1673908131,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 831,
        "index": "C",
        "name": "Jury Marks",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms"
        ]
    },
    "author": {
        "contestId": 831,
        "members": [
            {
                "handle": "song_zj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1499958300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <set>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nint juryN; int PN;\r\n\r\nvector<long> juryNums; vector<long> pNums;\r\nset<long> possible_starts;\r\nset<long> finalAnswers;\r\nvector<long> diffs;\r\n\r\nset<long> subSums;\r\n\r\nint main(){\r\n    freopen(\"jury.in\", \"r\", stdin);\r\n    cin >> juryN; cin >> PN;\r\n\r\n    for(int i = 0; i < juryN; i++){\r\n        long tmp; cin >> tmp;\r\n        juryNums.push_back(tmp);\r\n    }\r\n\r\n    for(int i = 0; i < PN; i++){\r\n        long tmp; cin >> tmp;\r\n        pNums.push_back(tmp);\r\n    }\r\n\r\n    long currSum = 0;\r\n\r\n    for(long l : juryNums){\r\n        currSum +=l;\r\n        diffs.push_back(currSum);\r\n    }\r\n\r\n    for(long p : pNums){\r\n        for(long diff : diffs){\r\n            possible_starts.insert(p - diff);\r\n        }\r\n    }\r\n\r\n    for(long p : possible_starts){\r\n        for(long diff : diffs){\r\n            long sub = p + diff;\r\n            subSums.insert(sub);\r\n        }\r\n\r\n        for(int pnum : pNums){\r\n            if(find(subSums.begin(), subSums.end(), pnum) == subSums.end()){\r\n                possible_starts.erase(p);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    cout<<possible_starts.size()<<endl;;\r\n\r\n    return 0;\r\n}"
}