{
    "id": 175175980,
    "contestId": 553,
    "creationTimeSeconds": 1665255490,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 553,
        "index": "A",
        "name": "Kyoya and Colored Balls",
        "type": "PROGRAMMING",
        "points": 250.0,
        "rating": 1500,
        "tags": [
            "combinatorics",
            "dp",
            "math"
        ]
    },
    "author": {
        "contestId": 553,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1435163400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\nint Queries_palindrome(string sub){\n    int t = sub.size(); // Largo de la subtring\n    int res = 0; // Retorno\n    // Vector a ir completando para guardar los palindromos encontrados\n    vector<vector<int>> s_vect(t+1, vector<int>(t+1, 0));\n    // Ciclos for para rellenar la tabla\n    for(int i=1;i<=t;i++){\n        for(int j=0;j<t-i+1;j++){\n            if(i==1){ // Cuando se evalua un caracter siempre es palindromo y se guarda en el vector\n                s_vect[j][j] = 1;\n                res++; // Se suma al resultado\n            }\n            else if(i==2){ // Cuando solo hayan dos caracteres, es palindromo solo cuando las letras son iguales\n                if(sub[j]==sub[j+1]){\n                    s_vect[j][j+1] = 1;\n                    res++; // Se suma al resultado\n                }\n                else\n                    s_vect[j][j+1] = 0;\n            }\n            // Para cuando hayan mas caracteres, sera palindromo cuando el primer y ultimo valor sean iguales y los del medio igual sean palindromos\n            else if(sub[j]==sub[j+i-1] && s_vect[j+1][j+i-2]==1){\n                s_vect[j][j+i-1] = 1;\n                res++; // Si es palindromo le suma 1\n            }\n            else\n                s_vect[j][j+i-1] = 0;\n            }\n        }\n    return res;// Retorna el numero de palindromos encontrados\n}\n\nint main()\n{\n    // String a evaluar\n    string s;\n    cin >> s;\n\n    // Numero de queries que habran\n    int q;\n    cin>> q;\n\n    // Desde donde hasta donde llegan los queries\n    int l[q];\n    int r[q];\n\n    for(int i=0; i < q; i++){\n        cin>>l[i]>>r[i];\n    }\n\n    // Ciclo para para evaluar cada substring del string segun el query\n    for(int i = 0; i < q; i++){\n        int j = r[i] - l[i] + 1;\n        string sub = s.substr (l[i]-1,j); // Substring a evaluar\n        cout<<Queries_palindrome(sub)<<endl;\n    }\n}\n\n  \t     \t \t\t\t \t\t\t\t  \t\t \t\t \t  \t\t"
}