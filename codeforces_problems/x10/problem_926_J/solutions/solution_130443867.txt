{
    "id": 130443867,
    "contestId": 926,
    "creationTimeSeconds": 1633076617,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 926,
        "index": "J",
        "name": "Segments",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 926,
        "members": [
            {
                "handle": "FedShat"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1521300900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4300800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define all(c) c.begin(), c.end()\r\n#define rall(c) c.rbegin(), c.rend()\r\n[[maybe_unused]] constexpr int INF = (numeric_limits<int>::max()) / 2;\r\n[[maybe_unused]] constexpr long long INFLL = (numeric_limits<long long>::max()) / 2;\r\n[[maybe_unused]] constexpr __int128 INF128 = numeric_limits<__int128>::max();\r\n\r\ntemplate <class T> istream &operator>>(istream &is, vector<T> &a) {\r\n    for (auto &i : a)\r\n        is >> i;\r\n    return is;\r\n}\r\n\r\nstruct segtree {\r\n    struct item {\r\n        long long ans = 0;\r\n        int l = 0, r = 0;\r\n        item() = default;\r\n        item(long long ans, int l, int r) : ans(ans), l(l), r(r) {};\r\n    };\r\n    \r\n    vector<item> tree;\r\n    vector<int> z;\r\n    int n;\r\n    \r\n    segtree() {};\r\n    segtree(vector<int> z) : z(z) {\r\n        n = z.size();\r\n        tree.resize(4 * n);\r\n    }\r\n    \r\n    void update(int v, int l, int r, int li, int ri) {\r\n        if (li >= r || l >= ri)\r\n            return;\r\n        if (li <= l && r <= ri) {\r\n            tree[v].l = tree[v].r = tree[v].ans = 1;\r\n            return;\r\n        }\r\n        int m = (l + r) / 2;\r\n        update(2 * v + 1, l, m, li, ri);\r\n        update(2 * v + 2, m, r, li, ri);\r\n        tree[v].l = tree[2 * v + 1].l;\r\n        tree[v].r = tree[2 * v + 2].r;\r\n        tree[v].ans = tree[2 * v + 1].ans + tree[2 * v + 2].ans;\r\n        if (tree[2 * v + 1].r == 1 && tree[2 * v + 2].l == 1)\r\n            --tree[v].ans;\r\n    }\r\n    \r\n    void update(int li, int ri) {\r\n        update(0, 0, n, lower_bound(all(z), li) - z.begin(), lower_bound(all(z), ri) - z.begin());\r\n    }\r\n};\r\n\r\nint main() {\r\n    cin.tie(0)->sync_with_stdio(0);\r\n    int n;\r\n    cin >> n;\r\n    vector<pair<int, int>> q(n);\r\n    vector<int> z;\r\n    for (int i = 0; i < n; ++i) {\r\n        cin >> q[i].first >> q[i].second;\r\n        z.push_back(q[i].first);\r\n        z.push_back(q[i].second);\r\n    }\r\n    sort(all(z));\r\n    z.resize(unique(all(z)) - z.begin());\r\n    segtree t(z);\r\n    for (auto [l, r] : q) {\r\n        t.update(l, r);\r\n        cout << t.tree[0].ans << \" \";\r\n    }\r\n    // xcode mess\r\n    cout << \"\\n\";\r\n}\r\n"
}