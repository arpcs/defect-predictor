{
    "id": 158858970,
    "contestId": 926,
    "creationTimeSeconds": 1653902511,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 926,
        "index": "J",
        "name": "Segments",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 926,
        "members": [
            {
                "handle": "andy2000"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1521300900
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 623,
    "memoryConsumedBytes": 4915200,
    "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Solution {\r\n    public static void main(String[] args) throws IOException {\r\n        BufferedReader f = new BufferedReader(new InputStreamReader(System.in));\r\n        PrintWriter out = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));\r\n        StringTokenizer st;\r\n        int times = Integer.parseInt(f.readLine());\r\n        IntervalList list = new IntervalList();\r\n        while (times-- > 0) {\r\n            st = new StringTokenizer(f.readLine());\r\n            int s = Integer.parseInt(st.nextToken());\r\n            int e = Integer.parseInt(st.nextToken());\r\n            list.add(s, e);\r\n            out.println(list.size());\r\n        }\r\n        out.close();\r\n    }\r\n\r\n    static class IntervalList {\r\n        public TreeSet<Interval> set;\r\n\r\n        public IntervalList() {\r\n            set = new TreeSet<>();\r\n        }\r\n\r\n        public void add(int s, int e) {\r\n            Iterator<Interval> iter = set.tailSet(new Interval(s, s), true).iterator();\r\n            while (iter.hasNext()) {\r\n                Interval i = iter.next();\r\n                if (i.s > e)\r\n                    break;\r\n                if (i.s < s)\r\n                    s = i.s;\r\n                if (i.e > e)\r\n                    e = i.e;\r\n                iter.remove();\r\n            }\r\n            set.add(new Interval(s, e));\r\n        }\r\n\r\n        public int size() {\r\n            return set.size();\r\n        }\r\n    }\r\n\r\n    static class Interval implements Comparable<Interval> {\r\n        int s, e;\r\n\r\n        public Interval(int s, int e) {\r\n            this.s = s;\r\n            this.e = e;\r\n        }\r\n\r\n        public int compareTo(Interval i) {\r\n            return e - i.e;\r\n        }\r\n\r\n        public String toString() {\r\n            return s + \" \" + e;\r\n        }\r\n    }\r\n}"
}