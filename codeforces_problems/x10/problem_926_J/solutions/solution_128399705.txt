{
    "id": 128399705,
    "contestId": 926,
    "creationTimeSeconds": 1631259125,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 926,
        "index": "J",
        "name": "Segments",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 926,
        "members": [
            {
                "handle": "kitsunehivern"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1521300900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 10342400,
    "source": "#include <bits/stdc++.h>\r\n/// kitsune\r\nusing namespace std;\r\n\r\n#define fi first\r\n#define se second\r\n#define mp make_pair\r\n#define sz(x) (int)(x).size()\r\n#define all(x) (x).begin(), (x).end()\r\n#define rep(i, l, r) for (int i = (int)(l); i <= (int)(r); i++)\r\n#define per(i, r, l) for (int i = (int)(r); i >= (int)(l); i--)\r\n\r\ntypedef long long ll;\r\ntypedef pair <int, int> pii;\r\ntypedef pair <ll, ll> pll;\r\n\r\ntemplate <typename _Tp> bool maximize(_Tp &__a, const _Tp &__b) { if (__a < __b) { __a = __b; return true; } return false; }\r\ntemplate <typename _Tp> bool minimize(_Tp &__a, const _Tp &__b) { if (__a > __b) { __a = __b; return true; } return false; }\r\n\r\nconst int siz = 1e5 + 2;\r\nconst int SIZ = 1e6 + 2;\r\nconst int mod = 1e9 + 7;\r\nconst int maxx = 2e9;\r\nconst ll MAXX = 1e18;\r\nconst string file = \"1\";\r\n\r\n\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n//    freopen((file + \".inp\").c_str(), \"r\", stdin);\r\n//    freopen((file + \".out\").c_str(), \"w\", stdout);\r\n\r\n    int q;\r\n    cin >> q;\r\n\r\n    set <pii> seg;\r\n    while (q--) {\r\n        int l, r;\r\n        cin >> l >> r;\r\n\r\n        if (seg.empty()) {\r\n            seg.insert(mp(l, r));\r\n        } else {\r\n            auto it = seg.lower_bound(mp(l, 0));\r\n            int new_l = l, new_r = r;\r\n            if (it != seg.begin() && prev(it) -> se >= l) {\r\n                it--;\r\n                new_l = it -> fi;\r\n            }\r\n\r\n            for ( ; it != seg.end(); ) {\r\n                auto nxt_it = next(it);\r\n\r\n                if (it -> fi > r) {\r\n                    break;\r\n                } else {\r\n                    maximize(new_r, it -> se);\r\n                    seg.erase(it);\r\n                }\r\n\r\n                it = nxt_it;\r\n            }\r\n            seg.insert(mp(new_l, new_r));\r\n        }\r\n\r\n        cout << sz(seg) << \" \";\r\n    }\r\n    cout << \"\\n\";\r\n\r\n//    cerr << \"Time: \" << 1000 * clock() / CLOCKS_PER_SEC << \" ms\\n\";\r\n\r\n    return 0;\r\n}\r\n"
}