{
    "id": 224105304,
    "contestId": 571,
    "creationTimeSeconds": 1695173265,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 571,
        "index": "D",
        "name": "Campus",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 3100,
        "tags": [
            "binary search",
            "data structures",
            "dsu",
            "trees"
        ]
    },
    "author": {
        "contestId": 571,
        "members": [
            {
                "handle": "lzqy__"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1440261000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 81,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 161894400,
    "source": "// LUOGU_RID: 125271090\n#include<bits/stdc++.h>\r\n#define ll long long\r\n#define il inline\r\nusing namespace std;\r\nconst int maxn=500010;\r\nconst int N=maxn<<2;\r\nil int read(){\r\n\tint x=0;\r\n\tchar c=getchar();\r\n\tfor(;!(c>='0'&&c<='9');c=getchar());\r\n\tfor(;c>='0'&&c<='9';c=getchar())\r\n\t\tx=(x<<1)+(x<<3)+c-'0';\r\n\treturn x;\r\n}\r\nil int cread(){\r\n\tchar c=getchar();\r\n\tfor(;!(c>='A'&&c<='Z');c=getchar());\r\n\treturn c;\r\n}\r\nstruct info{\r\n\tint typ,x,y;\r\n}a[maxn];\r\nint loc1[maxn],loc2[maxn];\r\nint num1[maxn],num2[maxn];\r\nint id1[maxn],id2[maxn];\r\nvector<int>v1[maxn],v2[maxn];\r\nint cnt1,cnt2,n,m;\r\nvector<ll>dv[N];\r\nvector<int>dt[N];\r\nint d2[N];\r\nvoid Add1(int i,int l,int r,int L,int R,int x,int t){\r\n\tif(l>=L&&r<=R){\r\n\t\tif(dv[i].empty()) dv[i].push_back(x);\r\n\t\telse dv[i].push_back(dv[i][dv[i].size()-1]+x);\r\n\t\tdt[i].push_back(t);\r\n\t\treturn ;\r\n\t}int mid=l+r>>1;\r\n\tif(mid>=L) Add1(i<<1,l,mid,L,R,x,t);\r\n\tif(mid<R) Add1(i<<1|1,mid+1,r,L,R,x,t);\r\n}\r\nvoid Add2(int i,int l,int r,int L,int R,int t){\r\n\tif(l>=L&&r<=R){\r\n\t\td2[i]=t;\r\n\t\treturn ;\r\n\t}int mid=l+r>>1;\r\n\tif(mid>=L) Add2(i<<1,l,mid,L,R,t);\r\n\tif(mid<R) Add2(i<<1|1,mid+1,r,L,R,t);\r\n}\r\nll Que1(int i,int l,int r,int x,int t,ll sum=0){\r\n\tif(!dv[i].empty()){\r\n\t\tsum+=dv[i][dv[i].size()-1];\r\n\t\tif(dt[i][0]<=t)\r\n\t\t\tsum-=dv[i][upper_bound(dt[i].begin(),dt[i].end(),t)-dt[i].begin()-1];\r\n\t}\r\n\tif(l==r) return sum;\r\n\tint mid=l+r>>1;\r\n\tif(mid>=x) return Que1(i<<1,l,mid,x,t,sum);\r\n\telse return Que1(i<<1|1,mid+1,r,x,t,sum);\r\n}\r\nint Que2(int i,int l,int r,int x,int t=0){\r\n\tt=max(t,d2[i]);\r\n\tif(l==r) return t;\r\n\tint mid=l+r>>1;\r\n\tif(mid>=x) return Que2(i<<1,l,mid,x,t);\r\n\telse return Que2(i<<1|1,mid+1,r,x,t);\r\n}\r\nint Find1(int x){return id1[x]==x?x:id1[x]=Find1(id1[x]);}\r\nint Find2(int x){return id2[x]==x?x:id2[x]=Find2(id2[x]);}\r\nvoid merge1(int x,int y){\r\n\tif(v1[x].size()>v1[y].size()) swap(x,y);\r\n\tid1[Find1(x)]=Find1(y);\r\n\tfor(int i=0;i<v1[x].size();i++) \r\n\t\tv1[y].push_back(v1[x][i]);\r\n\tv1[x].clear();\r\n}\r\nvoid merge2(int x,int y){\r\n\tif(v2[x].size()>v2[y].size()) swap(x,y);\r\n\tid2[Find2(x)]=Find2(y);\r\n\tfor(int i=0;i<v2[x].size();i++)\r\n\t\tv2[y].push_back(v2[x][i]);\r\n\tv2[x].clear();\r\n}\r\nint main(){\r\n\tn=read(),m=read();\r\n\tfor(int i=1;i<=m;i++){\r\n\t\ta[i].typ=cread();\r\n\t\tif(a[i].typ=='U')\r\n\t\t\ta[i].x=read(),a[i].y=read();\r\n\t\telse if(a[i].typ=='M')\r\n\t\t\ta[i].x=read(),a[i].y=read();\r\n\t\telse a[i].x=read();\r\n\t}\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tid1[i]=id2[i]=i;\r\n\t\tv1[i].push_back(i);\r\n\t\tv2[i].push_back(i);\r\n\t}\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tif(a[i].typ=='U') merge1(Find1(a[i].y),Find1(a[i].x));\r\n\t\tif(a[i].typ=='M') merge2(Find2(a[i].y),Find2(a[i].x));\r\n\t}\r\n\tfor(int i=1;i<=n;i++)\r\n\t\tfor(int j=0;j<v1[i].size();j++)\r\n\t\t\tnum1[++cnt1]=v1[i][j],loc1[v1[i][j]]=cnt1;\r\n\tfor(int i=1;i<=n;i++)\r\n\t\tfor(int j=0;j<v2[i].size();j++)\r\n\t\t\tnum2[++cnt2]=v2[i][j],loc2[v2[i][j]]=cnt2;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tid1[i]=id2[i]=i;\r\n\t\tv1[i].clear(),v2[i].clear();\r\n\t\tv1[i].push_back(i);\r\n\t\tv2[i].push_back(i);\r\n\t}\r\n\t//for(int i=1;i<=n;i++)\r\n\t//\tprintf(\"%d \",loc1[i]);\r\n\t//printf(\"\\n\");\r\n\t//for(int i=1;i<=n;i++)\r\n\t//\tprintf(\"%d \",loc2[i]);\r\n\t//printf(\"\\n\");\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tint x=a[i].x,y=a[i].y;\r\n\t\tif(a[i].typ=='U'||a[i].typ=='A')\r\n\t\t\tx=Find1(x),y=Find1(y);\r\n\t\telse if(a[i].typ=='M'||a[i].typ=='Z')\r\n\t\t\tx=Find2(x),y=Find2(y);\r\n\t\tif(a[i].typ=='U') merge1(y,x);\r\n\t\tif(a[i].typ=='M') merge2(y,x);\r\n\t\tif(a[i].typ=='A') Add1(1,1,n,loc1[v1[x][0]],loc1[v1[x][v1[x].size()-1]],v1[x].size(),i);\r\n\t\tif(a[i].typ=='Z') Add2(1,1,n,loc2[v2[x][0]],loc2[v2[x][v2[x].size()-1]],i);\r\n\t\tif(a[i].typ=='Q') printf(\"%lld\\n\",Que1(1,1,n,loc1[x],Que2(1,1,n,loc2[x])));\r\n\t\t//if(a[i].typ=='A') printf(\"A->[%d,%d]\\n\",loc1[v1[x][0]],loc1[v1[x][v1[x].size()-1]]);\r\n\t\t//if(a[i].typ=='Z') printf(\"Z->[%d,%d]\\n\",loc2[v2[x][0]],loc2[v2[x][v2[x].size()-1]]);\r\n\t\t//if(a[i].typ=='Q') printf(\"Q->[%d,%d]\\n\",loc1[x],loc2[x]);\r\n\t}\r\n\treturn 0;\r\n}"
}