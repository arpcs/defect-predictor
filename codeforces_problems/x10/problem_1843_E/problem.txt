{
    "contestId": 1843,
    "index": "E",
    "name": "Tracking Segments",
    "type": "PROGRAMMING",
    "rating": 1600,
    "tags": [
        "binary search",
        "brute force",
        "data structures",
        "two pointers"
    ],
    "desc": {
        "title": "E. Tracking Segments",
        "statement": "<p>You are given an array $$$a$$$ consisting of $$$n$$$ zeros. You are also given a set of $$$m$$$ not necessarily different segments. Each segment is defined by two numbers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$) and represents a subarray $$$a_{l_i}, a_{l_i+1}, \\dots, a_{r_i}$$$ of the array $$$a$$$.</p><p>Let's call the segment $$$l_i, r_i$$$ <span class=\"tex-font-style-it\">beautiful</span> if the number of ones on this segment <span class=\"tex-font-style-bf\">is strictly greater</span> than the number of zeros. For example, if $$$a = [1, 0, 1, 0, 1]$$$, then the segment $$$[1, 5]$$$ is <span class=\"tex-font-style-it\">beautiful</span> (the number of ones is $$$3$$$, the number of zeros is $$$2$$$), but the segment $$$[3, 4]$$$ is not is <span class=\"tex-font-style-it\">beautiful</span> (the number of ones is $$$1$$$, the number of zeros is $$$1$$$).</p><p>You also have $$$q$$$ changes. For each change you are given the number $$$1 \\le x \\le n$$$, which means that you must assign an element $$$a_x$$$ the value $$$1$$$.</p><p>You have to find the first change after which <span class=\"tex-font-style-bf\">at least one</span> of $$$m$$$ given segments becomes <span class=\"tex-font-style-it\">beautiful</span>, or report that none of them is beautiful after processing all $$$q$$$ changes.</p>",
        "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$)\u00a0\u2014 the number of test cases.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$m$$$ ($$$1 \\le m \\le n \\le 10^5$$$)\u00a0\u2014 the size of the array $$$a$$$ and the number of segments, respectively.</p><p>Then there are $$$m$$$ lines consisting of two numbers $$$l_i$$$ and $$$r_i$$$ ($$$1 \\le l_i \\le r_i \\le n$$$)\u00a0\u2014the boundaries of the segments.</p><p>The next line contains an integer $$$q$$$ ($$$1 \\le q \\le n$$$)\u00a0\u2014 the number of changes.</p><p>The following $$$q$$$ lines each contain a single integer $$$x$$$ ($$$1 \\le x \\le n$$$)\u00a0\u2014 the index of the array element that needs to be set to $$$1$$$. It is guaranteed that indexes in queries are distinct.</p><p>It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, output one integer \u00a0\u2014 the minimum change number after which at least one of the segments will be beautiful, or $$$-1$$$ if none of the segments will be beautiful.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 1</div><div class=\"test-example-line test-example-line-even test-example-line-2\">4 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5 2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1 3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5</div><div class=\"test-example-line test-example-line-even test-example-line-4\">4</div><div class=\"test-example-line test-example-line-even test-example-line-4\">1</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">5 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 5</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1 4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">1</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2 2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1 3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">2</div><div class=\"test-example-line test-example-line-even test-example-line-6\">3</div><div class=\"test-example-line test-example-line-even test-example-line-6\">1</div>",
                "output": "\n3\n-1\n3\n3\n3\n1\n"
            }
        ],
        "note": "<p>In the first case, after first 2 changes we won't have any beautiful segments, but after the third one on a segment $$$[1; 5]$$$ there will be 3 ones and only 2 zeros, so the answer is 3.</p><p>In the second case, there won't be any beautiful segments.</p>"
    },
    "suggested_categories": [
        "array operations",
        "segment analysis",
        "subarray manipulation",
        "conditional counting",
        "range queries",
        "dynamic programming",
        "threshold analysis",
        "optimization",
        "mathematical logic",
        "data structures",
        "algorithm design",
        "counting problem",
        "iterative processing",
        "problem solving",
        "integer operations",
        "input interpretation",
        "computational complexity",
        "game theory",
        "graph theory",
        "arithmetic operations"
    ]
}