{
    "id": 227628183,
    "contestId": 1157,
    "creationTimeSeconds": 1697005467,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1157,
        "index": "F",
        "name": "Maximum Balanced Circle",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dp",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "Aslanov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556289300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 8294400,
    "source": "//Bismillahir-Rahmanir-Rahim\r\n\r\n#include <bits/stdc++.h>\r\n#pragma comment(linker, \"/stack:200000000\")\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\r\n\r\n#define pb push_back\r\n#define pii pair <int, int>\r\n#define pll pair <long long, long long>\r\n#define pld pair <long double, long double>\r\n#define ll long long\r\n#define ld long double\r\n#define x first\r\n#define y second\r\n#define all(v) v.begin(),v.end()\r\n#define sz(s) (int)s.size()\r\n#define skip continue\r\n#define bpop(x) (ll)__builtin_popcountll(x)\r\n\r\nusing namespace std;\r\n\r\nconst int N = 2e5 + 7;\r\nconst int M = 1e2 + 7;\r\nconst int MAXA = 5e4 + 7;\r\nconst int inf = 1e9 + 7;\r\nconst ll INF = 1e18 + 7;\r\nconst ll MOD = 1e9 + 7;\r\n\r\npii dir[] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\r\n\r\n#define int long long\r\n\r\n//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n\r\nbool was[N];\r\nvector <int> cur;\r\nint n, a[N], cnt[N];\r\nvoid get(int limit, int x, bool up) {\r\n    if (cnt[x])cur.pb(x), cnt[x]--, was[x] = 1;\r\n    if (up) {\r\n        if (cnt[x + 1] >= 2)get(limit, x + 1, up);\r\n        else if (cnt[x + 1] == 1)get(limit, x + 1, 0);\r\n        else {\r\n            for (int i = 1;i <= cnt[x];i++)cur.pb(x);\r\n            cnt[x] = 0;\r\n            if (x > limit)get(limit, x - 1, 0);\r\n        }\r\n    }\r\n    else {\r\n        for (int i = 1;i <= cnt[x];i++)cur.pb(x);\r\n        cnt[x] = 0;\r\n        if (x > limit)get(limit, x - 1, 0);\r\n    }\r\n}\r\nvoid solve() {\r\n    cin >> n;\r\n    for (int i = 1;i <= n;i++)cin >> a[i], cnt[a[i]]++;\r\n    vector <int> ans;\r\n    for (int x = 1;x < N;x++) {\r\n        if (was[x] || !cnt[x])skip;\r\n        get(x, x, 1);\r\n        if (sz(cur) > sz(ans))ans = cur;\r\n        cur.clear();\r\n    }\r\n    cout << sz(ans) << '\\n';\r\n    for (auto x : ans)cout << x << ' ';\r\n}\r\nsigned main() {\r\n    //srand(time(NULL));\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    //freopen(\"milkorder.in\", \"r\", stdin);\r\n    //freopen(\"milkorder.out\", \"w\", stdout);\r\n    int test = 1;\r\n    //cin >> test;\r\n    for (int i = 1;i <= test;i++) {\r\n        //cout << \"Case \" << i << \": \";\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}