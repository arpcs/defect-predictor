{
    "id": 220938110,
    "contestId": 1157,
    "creationTimeSeconds": 1693294137,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1157,
        "index": "F",
        "name": "Maximum Balanced Circle",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "constructive algorithms",
            "dp",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1157,
        "members": [
            {
                "handle": "chuquwan9964"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556289300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 4198400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nvoid solve() {\r\n\tint n;\r\n\tcin >> n;\r\n\tint nums[n];\r\n\tint cnt[200020];\r\n\tint c = 0;\r\n\tfor(int i = 0;i < n;i++) {\r\n\t\tcin >> nums[i];\r\n\t}\r\n\tsort(nums,nums + n);\r\n\tint l = 1,r = n;\r\n\tint lastL = 0,lastR = 1;\r\n\twhile(l < r) {\r\n\t\tint mid = (l + r + 1) >> 1;\r\n\t\tmemset(cnt,0,sizeof cnt);\r\n\t\tunordered_set<int> set;\r\n\t\tc = 0;\r\n\t\tfor(int i = 0;i < mid;i++) {\r\n\t\t\tcnt[nums[i]]++;\r\n\t\t\tset.emplace(nums[i]);\r\n\t\t}\r\n\t\tfor(int i = 0;i < 200020;i++) {\r\n\t\t\tif(cnt[i] == 1) c++;\r\n\t\t}\r\n\t\tbool ok = false;\r\n\t\tfor(int L = 0,R = mid;R <= n;L++,R++) {\r\n\t\t\tif(set.size() == nums[R-1] - nums[L] + 1) {\r\n\t\t\t\tint sub = 0;\r\n\t\t\t\tif(cnt[nums[L]] == 1) sub++;\r\n\t\t\t\tif(cnt[nums[R-1]] == 1) sub++;\r\n\t\t\t\tif(c == sub) {\r\n\t\t\t\t\tok = true;\r\n\t\t\t\t\tlastL = L;\r\n\t\t\t\t\tlastR = R;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tcnt[nums[L]]--;\r\n\t\t\tif(cnt[nums[L]] == 0) {\r\n\t\t\t\tc--;\r\n\t\t\t\tset.erase(nums[L]);\r\n\t\t\t}else if(cnt[nums[L]] == 1) {\r\n\t\t\t\tc++;\r\n\t\t\t}\r\n\t\t\tif(R < n) {\r\n\t\t\t\tcnt[nums[R]]++;\r\n\t\t\t\tif(cnt[nums[R]] == 1) {\r\n\t\t\t\t\tc++;\r\n\t\t\t\t\tset.emplace(nums[R]);\r\n\t\t\t\t}else if(cnt[nums[R]] == 2) {\r\n\t\t\t\t\tc--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(ok) {\r\n\t\t\tl = mid;\r\n\t\t}else {\r\n\t\t\tr = mid - 1;\r\n\t\t}\r\n\t}\r\n\tlastR--;\r\n\tcout << lastR - lastL + 1 << endl;\r\n\tmemset(cnt,0,sizeof cnt);\r\n\tfor(int i = lastL;i <= lastR;i++) {\r\n\t\tcnt[nums[i]]++;\r\n\t}\r\n\tvector<int> ans;\r\n\tfor(int i = 0;i < cnt[nums[lastL]];i++) {\r\n\t\tans.push_back(nums[lastL]);\r\n\t}\r\n\tcnt[nums[lastL]] = 0;\r\n\tfor(int j = nums[lastL] + 1;j < nums[lastR];j++) {\r\n\t\tans.push_back(j);\r\n\t\tcnt[j]--;\r\n\t}\r\n\tfor(int i = 0;i < cnt[nums[lastR]];i++) {\r\n\t\tans.push_back(nums[lastR]);\r\n\t}\r\n\tcnt[nums[lastR]] = 0;\r\n\tfor(int i = 2e5;i >= 0;i--) {\r\n\t\tif(cnt[i] > 0) {\r\n\t\t\tfor(int j = 0;j < cnt[i];j++) {\r\n\t\t\t\tans.push_back(i);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor(int a : ans) {\r\n\t\tcout << a << \" \";\r\n\t}\r\n\tcout << endl;\r\n}\r\nint main() {\r\n\tsolve();\r\n}"
}