{
    "id": 235817717,
    "contestId": 1810,
    "creationTimeSeconds": 1701766115,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1810,
        "index": "F",
        "name": "M-tree",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2800,
        "tags": [
            "data structures",
            "math",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1810,
        "members": [
            {
                "handle": "SoloRejudger"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1680273300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 58,
    "timeConsumedMillis": 451,
    "memoryConsumedBytes": 37478400,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define int long long\r\n\r\nstruct Info {\r\n    int l, r, v;\r\n    bool operator < (const Info &b) const {\r\n        return l < b.l;\r\n    }\r\n};\r\n\r\nint n, m, q;\r\nstd::set<Info> set;\r\n\r\nvoid Out() {\r\n    for(auto [l, r, v]: set) {\r\n        std::cout << l << ' ' << r << ' ' << v << std::endl;\r\n    }\r\n    std::cout << std::endl;\r\n}\r\nvoid inc(int x) {\r\n    // std::cout << \"Insert: \" << x << std::endl; \r\n    // Out();\r\n\r\n    auto it = std::prev(set.upper_bound({x, 0, 0}));\r\n    if(it->l <= x && it->r >= x) {\r\n        auto [l, r, v] = *it;\r\n        set.erase(it);\r\n        if(x > l)\r\n            set.emplace(l, x - 1, v);\r\n        if(v < m - 1) {\r\n            set.emplace(x, x, v + 1);\r\n            if(x < r) set.emplace(x + 1, r, v);\r\n        } else {\r\n            inc(r + 1);\r\n        }\r\n        \r\n    } else {\r\n        set.emplace(x, x, 1);\r\n    }\r\n}\r\n\r\nvoid del(int x) {\r\n    auto it = std::prev(set.upper_bound({x, 0, 0}));\r\n    if(it->l <= x && it->r >= x) {\r\n        auto [l, r, v] = *it;\r\n        set.erase(it);\r\n        if(l < x) set.emplace(l, x - 1, v);\r\n        if(v > 1) set.emplace(x, x, v - 1);\r\n        if(x < r) set.emplace(x + 1, r, v);\r\n    } else {\r\n        auto it2 = set.upper_bound({x, 0, 0});\r\n        auto [l, r, v] = *it2;\r\n        set.erase(it2);\r\n        set.emplace(x, l - 1, m - 1);\r\n        if(v > 1) set.emplace(l, l, v - 1);\r\n        if(l < r) set.emplace(l + 1, r, v);\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    std::cin >> n >> m >> q;\r\n\r\n    set.clear();\r\n    set.emplace(0, 0, 0);\r\n    std::vector<int> a(n);\r\n    for(int i = 0; i < n; ++i) {\r\n        std::cin >> a[i];\r\n        inc(a[i]);\r\n    }\r\n\r\n    for(int i = 0; i < q; ++i) {\r\n        int x, y;\r\n        std::cin >> x >> y;\r\n        x--;\r\n        del(a[x]);\r\n        a[x] = y;\r\n        inc(a[x]);\r\n\r\n        if(set.size() == 2) {\r\n            auto [l, r, v] = *set.rbegin();\r\n            if(l == r && v == 1) {\r\n                std::cout << l << ' ';\r\n                continue;\r\n            }      \r\n        } \r\n        std::cout << set.rbegin()->r + 1 << ' ';\r\n    }\r\n    std::cout << std::endl;\r\n}\r\n\r\nsigned main() {\r\n    std::cin.tie(nullptr) -> sync_with_stdio(false);\r\n\r\n    int t = 1;\r\n    std::cin >> t;\r\n    \r\n    while(t--) {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}"
}