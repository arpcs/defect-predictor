{
    "id": 233979091,
    "contestId": 1810,
    "creationTimeSeconds": 1700786802,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1810,
        "index": "F",
        "name": "M-tree",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2800,
        "tags": [
            "data structures",
            "math",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1810,
        "members": [
            {
                "handle": "oursaco"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1680273300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 58,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 12800000,
    "source": "#ifndef LOCAL\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#pragma GCC target(\"sse4,popcnt,abm,mmx,tune=native\")\r\n#endif\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n\r\n#define pb push_back\r\n#define ff first\r\n#define ss second\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef pair<int, int> pii;\r\ntypedef pair<ll, ll> pll;\r\ntypedef pair<ld, ld> pld;\r\n\r\nconst int INF = 1e9;\r\nconst ll LLINF = 1e18;\r\nconst int MOD = 1e9 + 7;\r\n\r\ntemplate<class K> using sset =  tree<K, null_type, less<K>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\ninline ll ceil0(ll a, ll b) {\r\n    return a / b + ((a ^ b) > 0 && a % b);\r\n}\r\n\r\nvoid setIO() {\r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n}\r\n\r\nint mx[1000005], mn[1000005];\r\nint tag[1000005];\r\nint n, m, q;\r\n\r\nvoid push_down(int cur){\r\n    if(tag[cur] == -1) return;\r\n    for(int i = cur*2 + 1; i <= cur*2 + 2; i++){\r\n        mx[i] = mn[i] = tag[cur];\r\n        tag[i] = tag[cur];\r\n    }\r\n    tag[cur] = -1;\r\n}\r\n\r\nvoid update(int l, int r, int v, int ul = 0, int ur = n + 20, int cur = 0){\r\n    if(l <= ul && ur <= r){\r\n        mx[cur] = mn[cur] = v;\r\n        tag[cur] = v;\r\n        return;\r\n    }\r\n    push_down(cur);\r\n    int mid = (ul + ur)/2;\r\n    if(l <= mid) update(l, r, v, ul, mid, cur*2 + 1);\r\n    if(r > mid) update(l, r, v, mid + 1, ur, cur*2 + 2);\r\n    mx[cur] = max(mx[cur*2 + 1], mx[cur*2 + 2]);\r\n    mn[cur] = min(mn[cur*2 + 1], mn[cur*2 + 2]);\r\n}\r\n\r\nvoid upd(int x, int v, int l = 0, int r = n + 20, int cur = 0){\r\n    if(l == r){\r\n        mx[cur] += v;\r\n        mn[cur] += v;\r\n        return;\r\n    }\r\n    push_down(cur);\r\n    int mid = (l + r)/2;\r\n    if(x <= mid) upd(x, v, l, mid, cur*2 + 1);\r\n    else upd(x, v, mid + 1, r, cur*2 + 2);\r\n    mx[cur] = max(mx[cur*2 + 1], mx[cur*2 + 2]);\r\n    mn[cur] = min(mn[cur*2 + 1], mn[cur*2 + 2]);\r\n}\r\n\r\nint query_mx(int l, int r, int ul = 0, int ur = n + 20, int cur = 0){\r\n    if(l <= ul && ur <= r) return mx[cur];\r\n    push_down(cur);\r\n    int mid = (ul + ur)/2;\r\n    if(r <= mid) return query_mx(l, r, ul, mid, cur*2 + 1);\r\n    if(l > mid) return query_mx(l, r, mid + 1, ur, cur*2 + 2);\r\n    return max(query_mx(l, r, ul, mid, cur*2 + 1), query_mx(l, r, mid + 1, ur, cur*2 + 2));\r\n}\r\n\r\nint walk_mx(int x, int ul = 0, int ur = n + 20, int cur = 0){\r\n    if(mn[cur] == m - 1) return -1;\r\n    if(ur < x) return -1;\r\n    if(ul == ur) return ul;\r\n    push_down(cur);\r\n    int mid = (ul + ur)/2;\r\n    int a = walk_mx(x, ul, mid, cur*2 + 1);\r\n    if(a != -1) return a;\r\n    return walk_mx(x, mid + 1, ur, cur*2 + 2);\r\n}\r\n\r\nint walk_mn(int x, int ul = 0, int ur = n + 20, int cur = 0){\r\n    if(mx[cur] == 0) return -1;\r\n    if(ur < x) return -1;\r\n    if(ul == ur) return ul;\r\n    push_down(cur);\r\n    int mid = (ul + ur)/2;\r\n    int a = walk_mn(x, ul, mid, cur*2 + 1);\r\n    if(a != -1) return a;\r\n    return walk_mn(x, mid + 1, ur, cur*2 + 2);\r\n}\r\n\r\nint query(int l = 0, int r = n + 20, int cur = 0){\r\n    if(mx[cur] == 0) return -1;\r\n    if(l == r) return l;\r\n    push_down(cur);\r\n    int mid = (l + r)/2;\r\n    int b = query(mid + 1, r, cur*2 + 2);\r\n    if(b != -1) return b;\r\n    return query(l, mid, cur*2 + 1);\r\n}\r\n\r\nvoid inc(int x){\r\n    int nxt = walk_mx(x);\r\n    if(x < nxt) update(x, nxt - 1, 0);\r\n    upd(nxt, 1);\r\n}\r\n\r\nvoid dec(int x){\r\n    int nxt = walk_mn(x);\r\n    if(x < nxt) update(x, nxt - 1, m - 1);\r\n    upd(nxt, -1);\r\n}\r\n\r\nint main(){\r\n    setIO();\r\n    int T;\r\n    cin >> T;\r\n    for(int tt = 1; tt <= T; tt++){\r\n        cin >> n >> m >> q;\r\n        tag[0] = mn[0] = mx[0] = 0;\r\n        int arr[n];\r\n        int ans = n;\r\n        for(int i = 0; i < n; i++){\r\n            cin >> arr[i];\r\n            inc(arr[i]);\r\n        }\r\n        for(int i = 0; i < q; i++){\r\n            int a, b;\r\n            cin >> a >> b;\r\n            a--;\r\n            dec(arr[a]);\r\n            arr[a] = b;\r\n            inc(arr[a]);\r\n            int ind = query();\r\n            int add = (query_mx(0, ind - 1) != 0 || query_mx(ind, ind) > 1);\r\n            cout << query() + add << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n}"
}