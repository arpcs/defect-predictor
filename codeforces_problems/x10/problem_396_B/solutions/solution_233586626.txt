{
    "id": 233586626,
    "contestId": 396,
    "creationTimeSeconds": 1700493676,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 396,
        "index": "B",
        "name": "On Sum of Fractions",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "tags": [
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 396,
        "members": [
            {
                "handle": "ShelpAm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1393428600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 268390400,
    "source": "// LUOGU_RID: 136141358\n#include <algorithm>\n#include <array>\n#include <cmath>\n#include <cstddef>\n#include <iostream>\n#include <ranges>\n#include <string_view>\n#include <vector>\n\nusing ::std::size_t;\n\n// constexpr bool debug{false};\n\ntemplate<size_t i, size_t j, typename value_type> using arr2\n    = std::array<std::array<value_type, j>, i>;\ntemplate<size_t i, size_t j> using arr2uz = arr2<i, j, size_t>;\ntemplate<size_t i, size_t j> using arr2ll = arr2<i, j, long long>;\ntemplate<typename value_type> using vec2_impl\n    = std::vector<std::vector<value_type>>;\ntemplate<typename value_t> class vec2 : public vec2_impl<value_t> {\npublic:\n  vec2(size_t const i, size_t const j)\n      : vec2_impl<value_t>(i, std::vector<value_t>(j))\n  {}\n};\nusing vec2uz = vec2<size_t>;\nusing vec2ll = vec2<long long>;\ntemplate<typename T> concept is_pair = requires(T t) {\n  t.first;\n  t.second;\n};\nvoid print(auto&& t)\n{\n  if constexpr (std::ranges::range<decltype(t)>) {\n    for (auto&& ele: t) {\n      print(ele);\n    }\n    std::cout << '\\n';\n  }\n  else if constexpr (is_pair<decltype(t)>) {\n    std::cout << t.first << \": \" << t.second << \", \";\n  }\n  else {\n    std::cout << t << ' ';\n  }\n}\nvoid debug(std::string_view const& sv, auto&& t)\n{\n  std::cout << sv << \": \";\n  print(t);\n}\nauto&& operator>>(auto&& is, auto&& t)\n{\n  if constexpr (std::ranges::range<decltype(t)>) {\n    for (auto&& ele: t) {\n      is >> ele;\n    }\n  }\n  else if constexpr (is_pair<decltype(t)>) {\n    is >> t.first >> t.second;\n  }\n  else {\n    is >> t;\n  }\n  return is;\n}\nvoid solve_case()\n{\n  std::array<bool, size_t(1e9) + 3> not_prime{};\n  std::vector<size_t> primes;\n  for (size_t i{2}; i != not_prime.size(); ++i) {\n    if (!not_prime[i]) {\n      primes.emplace_back(i);\n    }\n    for (auto const p: primes) {\n      if (i * p >= not_prime.size()) {\n        break;\n      }\n      not_prime[i * p] = true;\n      if (i % p == 0) {\n        break;\n      }\n    }\n  }\n\n  size_t n{};\n  std::cin >> n;\n\n  for (size_t i{}; i != n; ++i) {\n    size_t k{};\n    std::cin >> k;\n    double u = *std::ranges::lower_bound(primes, n);\n    double v = *std::ranges::upper_bound(primes, n);\n    double res{0.5 + (n - u - v + 1) / (u * v)};\n    std::cout << res << '\\n';\n  }\n}\nint main()\n{\n  std::ios::sync_with_stdio(false);\n  std::cin.tie(nullptr);\n  // std::cout.tie(nullptr);\n\n  size_t n{1};\n  // std::cin >> n;\n  for (size_t i{}; i != n; ++i) {\n    solve_case();\n  }\n  return 0;\n}\n"
}