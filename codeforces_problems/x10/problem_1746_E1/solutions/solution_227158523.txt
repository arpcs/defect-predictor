{
    "id": 227158523,
    "contestId": 1746,
    "creationTimeSeconds": 1696760296,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1746,
        "index": "E1",
        "name": "Joking (Easy Version)",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "binary search",
            "constructive algorithms",
            "interactive",
            "ternary search"
        ]
    },
    "author": {
        "contestId": 1746,
        "members": [
            {
                "handle": "__siri__"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665844500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 1433600,
    "source": "//#pragma GCC optimize(\"Ofast\", \"inline\")\r\n\r\n#include <bits/stdc++.h>\r\n#define vec std::vector < int >\r\n#define szt (int)t.size()\r\n#define szf (int)f.size()\r\n\r\nint n, i, j, k, l, cnt, dp[61][61];\r\nchar rep[4];\r\nstruct p{int t, f;} ch, c[61][61];\r\nvec t, f;\r\n\r\nvec operator + (vec a, vec b)\r\n{\r\n\ta.insert(a.end(), b.begin(), b.end());\r\n\treturn a;\r\n}\r\n\r\nint main()\r\n{\r\n\tmemset(dp, 63, sizeof dp);\r\n\r\n\tdp[0][0] = dp[0][1] = dp[1][0] = dp[1][1] = dp[0][2] = dp[2][0] = 0;\r\n\t\r\n\tfor (i = 0; i <= 60; i++)\r\n\t\tfor (j = 0; i + j <= 60; j++)\r\n\t\t\tfor (k = 0; k <= i; k++)\r\n\t\t\t\tfor (l = 0; l <= j; l++)\r\n\t\t\t\t\tif (dp[i][j] > std::max(dp[k + l][i - k], dp[i - k + j - l][k]) + 1)\r\n\t\t\t\t\t\tdp[i][j] = std::max(dp[k + l][i - k], dp[i - k + j - l][k]) + 1,\r\n\t\t\t\t\t\tc[i][j] = {k, l};\r\n\t \r\n\tstd::cin >> n;\r\n\t\r\n\tfor (i = 1; i <= n; i++)\r\n\t\tt.push_back(i);\r\n\t\r\n\twhile (szt + szf > 2 && cnt <= 82)\r\n\t{\r\n\t\tch = szt + szf <= 60 ? c[szt][szf] : p{szt / 2, szf / 2};\r\n\t\t\r\n\t\tvec t1(t.begin(), t.begin() + ch.t), \r\n\t\t\tf1(f.begin(), f.begin() + ch.f),\r\n\t\t\tt2(t.begin() + ch.t, t.end()),\r\n\t\t\tf2(f.begin() + ch.f, f.end());\r\n\r\n\t\tstd::cout << \"? \" << ch.t + ch.f << ' ';\r\n\r\n\t\tfor (auto it : t1 + f1)\r\n\t\t\tstd::cout << it << ' ';\r\n\r\n\t\tstd::cout << std::endl;\r\n\t\tcnt++;\r\n\r\n\t\tstd::cin >> rep;\r\n\r\n\t\tif (rep[0] == 'Y')\r\n\t\t\tt = t1 + f1,\r\n\t\t\tf = t2;\r\n\r\n\t\telse\r\n\t\t\tt = t2 + f2,\r\n\t\t\tf = t1;\r\n\t}\r\n\t\r\n\tfor (auto it : t + f)\r\n\t{\r\n\t\tstd::cout << \"! \" << it << std::endl;\r\n\t\tstd::cin >> rep;\r\n\r\n\t\tif (rep[1] == ')')\r\n\t\t\treturn 0;\t\r\n\t}\r\n}"
}