{
    "contestId": 1758,
    "index": "A",
    "name": "SSeeeeiinngg DDoouubbllee",
    "type": "PROGRAMMING",
    "points": 500.0,
    "rating": 800,
    "tags": [
        "constructive algorithms",
        "strings"
    ],
    "desc": {
        "title": "A. SSeeeeiinngg DDoouubbllee",
        "statement": "<p>A <span class=\"tex-font-style-it\">palindrome</span> is a string that reads the same backward as forward. For example, the strings $$$\\texttt{z}$$$, $$$\\texttt{aaa}$$$, $$$\\texttt{aba}$$$, and $$$\\texttt{abccba}$$$ are palindromes, but $$$\\texttt{codeforces}$$$ and $$$\\texttt{ab}$$$ are not.</p><p>The <span class=\"tex-font-style-it\">double</span> of a string $$$s$$$ is obtained by writing each character twice. For example, the double of $$$\\texttt{seeing}$$$ is $$$\\texttt{sseeeeiinngg}$$$.</p><p>Given a string $$$s$$$, rearrange its double to form a palindrome. Output the rearranged string. It can be proven that such a rearrangement always exists.</p>",
        "inputSpecification": "<p>The first line of input contains $$$t$$$ ($$$1 \\leq t \\leq 1000$$$)\u00a0\u2014 the number of test cases.</p><p>The only line of each test case contains a single string $$$s$$$ ($$$1 \\leq |s| \\leq 100$$$) consisting only of lowercase English letters.</p><p>Note that the sum of $$$|s|$$$ over all test cases is not bounded.</p>",
        "outputSpecification": "<p>For each test case, output a palindromic string of length $$$2 \\cdot |s|$$$ that is a rearrangement of the double of $$$s$$$.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">a</div><div class=\"test-example-line test-example-line-even test-example-line-2\">sururu</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">errorgorn</div><div class=\"test-example-line test-example-line-even test-example-line-4\">anutforajaroftuna</div>",
                "output": "\naa\nsuurruurruus\nrgnororerrerorongr\naannuuttffoorraajjaarrooffttuunnaa\n"
            }
        ],
        "note": "<p>In the first test case, the double of $$$\\texttt{a}$$$ is $$$\\texttt{aa}$$$, which is already a palindrome.</p><p>In the second test case, the double of $$$\\texttt{sururu}$$$ is $$$\\texttt{ssuurruurruu}$$$. If we move the first $$$\\texttt{s}$$$ to the end, we get $$$\\texttt{suurruurruus}$$$, which is a palindrome.</p><p>In the third test case, the double of $$$\\texttt{errorgorn}$$$ is $$$\\texttt{eerrrroorrggoorrnn}$$$. We can rearrange the characters to form $$$\\texttt{rgnororerrerorongr}$$$, which is a palindrome.</p>"
    },
    "suggested_categories": [
        "string manipulation",
        "palindrome",
        "string transformation",
        "character manipulation",
        "string reversal",
        "permutation",
        "algorithms",
        "data structures",
        "dynamic programming",
        "pattern matching",
        "combinatorics",
        "recursion",
        "backtracking",
        "greedy algorithms",
        "algorithmic thinking",
        "string parsing",
        "pattern recognition",
        "string matching",
        "problem solving",
        "coding challenges"
    ]
}