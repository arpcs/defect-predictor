{
    "id": 233007475,
    "contestId": 69,
    "creationTimeSeconds": 1700157869,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 69,
        "index": "C",
        "name": "Game",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 69,
        "members": [
            {
                "handle": "yiyihum"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1300809600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// generated by GPT4 2023-11-16 18:03:58\n#include<bits/stdc++.h>\nusing namespace std;\n\nmap<string, int> basic_artifacts;\nmap<string, map<string, int>> composite_artifacts;\nvector<map<string, int>> ally_artifacts;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n\n    int k, n, m, q;\n    cin >> k >> n >> m >> q;\n\n    ally_artifacts.resize(k);\n    string artifact;\n    for(int i = 0; i < n; i++) {\n        cin >> artifact;\n        basic_artifacts[artifact] = i;\n    }\n\n    for(int i = 0; i < m; i++) {\n        getline(cin, artifact);\n        istringstream iss(artifact);\n        string composite_artifact, part;\n        int count;\n        iss >> composite_artifact;\n        while(iss >> part >> count) {\n            composite_artifacts[composite_artifact][part] = count;\n        }\n    }\n\n    for(int i = 0; i < q; i++) {\n        int ally;\n        string artifact;\n        cin >> ally >> artifact;\n        ally--;\n\n        ally_artifacts[ally][artifact]++;\n        for(auto& composite_artifact : composite_artifacts) {\n            bool can_create = true;\n            for(auto& part : composite_artifact.second) {\n                if(ally_artifacts[ally][part.first] < part.second) {\n                    can_create = false;\n                    break;\n                }\n            }\n            if(can_create) {\n                for(auto& part : composite_artifact.second) {\n                    ally_artifacts[ally][part.first] -= part.second;\n                    if(ally_artifacts[ally][part.first] == 0) {\n                        ally_artifacts[ally].erase(part.first);\n                    }\n                }\n                ally_artifacts[ally][composite_artifact.first]++;\n                break;\n            }\n        }\n    }\n\n    for(auto& ally : ally_artifacts) {\n        cout << ally.size() << \"\\n\";\n        for(auto& artifact : ally) {\n            cout << artifact.first << \" \" << artifact.second << \"\\n\";\n        }\n    }\n\n    return 0;\n}\n"
}