{
    "id": 233615407,
    "contestId": 69,
    "creationTimeSeconds": 1700510622,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 69,
        "index": "C",
        "name": "Game",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 69,
        "members": [
            {
                "handle": "lwh_lwh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1300809600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// generated by GPT4 2023-11-21 04:03:10\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint main() {\r\n    int k, n, m, q;\r\n    cin >> k >> n >> m >> q;\r\n    map<string, int> basic;\r\n    map<int, string> rev_basic;\r\n    map<string, map<int, int>> composite;\r\n    map<int, set<string>> rev_composite;\r\n    vector<map<int, int>> ally(k+1);\r\n    for(int i=1; i<=n; i++) {\r\n        string s;\r\n        cin >> s;\r\n        basic[s] = i;\r\n        rev_basic[i] = s;\r\n    }\r\n    for(int i=1; i<=m; i++) {\r\n        string s;\r\n        getline(cin >> ws, s);\r\n        stringstream ss(s);\r\n        string name;\r\n        ss >> name;\r\n        while(ss >> s) {\r\n            int x;\r\n            ss >> x;\r\n            composite[name][basic[s]] = x;\r\n            rev_composite[basic[s]].insert(name);\r\n        }\r\n    }\r\n    while(q--) {\r\n        int a;\r\n        string s;\r\n        cin >> a >> s;\r\n        int x = basic[s];\r\n        ally[a][x]++;\r\n        for(auto& name : rev_composite[x]) {\r\n            bool can_form = true;\r\n            for(auto& p : composite[name]) {\r\n                if(ally[a][p.first] < p.second) {\r\n                    can_form = false;\r\n                    break;\r\n                }\r\n            }\r\n            if(can_form) {\r\n                for(auto& p : composite[name]) {\r\n                    ally[a][p.first] -= p.second;\r\n                }\r\n                ally[a][basic[name]]++;\r\n            }\r\n        }\r\n    }\r\n    for(int i=1; i<=k; i++) {\r\n        cout << ally[i].size() << \"\\n\";\r\n        for(auto& p : ally[i]) {\r\n            cout << rev_basic[p.first] << \" \" << p.second << \"\\n\";\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}