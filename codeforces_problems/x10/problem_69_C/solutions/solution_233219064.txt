{
    "id": 233219064,
    "contestId": 69,
    "creationTimeSeconds": 1700251479,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 69,
        "index": "C",
        "name": "Game",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 69,
        "members": [
            {
                "handle": "yimi_i"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1300809600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "// generated by GPT4 2023-11-17 20:04:37\n#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef pair<int, string> pis;\nvector<pis> owner[110];\nint cnt[110][110];\nstring basic[110];\nmap<string, int> id;\nmap<int, string> composite;\nvector<int> comp[110];\n\nint main() {\n    ios_base::sync_with_stdio(false); cin.tie(NULL);\n    int k, n, m, q;\n    cin >> k >> n >> m >> q;\n    for(int i = 1; i <= n; i++) {\n        cin >> basic[i];\n        id[basic[i]] = i;\n    }\n    for(int i = 1; i <= m; i++) {\n        string s;\n        getline(cin >> ws, s);\n        stringstream ss(s);\n        ss >> composite[i];\n        string a, b;\n        int c;\n        while(ss >> a >> c >> b) {\n            comp[i].push_back(c);\n        }\n    }\n    for(int i = 0; i < q; i++) {\n        int a;\n        string s;\n        cin >> a >> s;\n        cnt[a][id[s]]++;\n        for(int j = 1; j <= m; j++) {\n            bool ok = true;\n            for(int x : comp[j]) {\n                if(cnt[a][x] == 0) {\n                    ok = false;\n                    break;\n                }\n            }\n            if(ok) {\n                for(int x : comp[j]) {\n                    cnt[a][x]--;\n                }\n                owner[a].push_back({j, composite[j]});\n                break;\n            }\n        }\n    }\n    for(int i = 1; i <= k; i++) {\n        sort(owner[i].begin(), owner[i].end(), [&](pis a, pis b) { return a.second < b.second; });\n        cout << owner[i].size() << \"\\n\";\n        for(auto x : owner[i]) {\n            cout << x.second << \" 1\\n\";\n        }\n    }\n    return 0;\n}\n"
}