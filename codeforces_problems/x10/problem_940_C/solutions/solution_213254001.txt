{
    "id": 213254001,
    "contestId": 940,
    "creationTimeSeconds": 1689067034,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 940,
        "index": "C",
        "name": "Phone Numbers",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 940,
        "members": [
            {
                "handle": "mo_yamany"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519464900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 409600,
    "source": "#include <iostream>\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n#define ACPC ios_base::sync_with_stdio(false); cin.tie(NULL);\r\nll mod = 1e9 + 7;\r\n\r\nll FastPower(ll base, ll power) {\r\n    if (power == 0)\r\n        return 1;\r\n    ll ans = FastPower(base, power / 2);\r\n    ans *= ans;\r\n    if (power % 2)\r\n        ans *= base;\r\n    return ans;\r\n\r\n}\r\n\r\nbool isPlaindrom(string src){\r\n    string copy=src;\r\n    reverse(copy.begin(),copy.end());\r\n    return src==copy;\r\n}\r\n\r\nbool isPrime(ll v) {\r\n    if (v <= 1) return false;\r\n    if (v == 2) return true;\r\n    if (v % 2 == 0) return false;\r\n    for (int i = 3; i * i <= v; i += 2) {\r\n        if (v % i == 0) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nll LCM(ll a, ll b) {\r\n    return (a / gcd(a, b)) * b;\r\n}\r\n\r\nll getGcd(ll a, ll b) {\r\n    if (b == 0)\r\n        return a;\r\n\r\n    return getGcd(b, a % b);\r\n}\r\n\r\nbool isPowerOftwo(ll x) {\r\n    return !((x - 1) & x);\r\n}\r\n\r\nbool sorting(int l, int r) {\r\n    return l % 2 < r % 2;\r\n}\r\n\r\nll getGcdforArray(vector<ll> values,ll n){\r\n   ll g=values[0];\r\n   for(int i=1;i<n;i++)\r\n       g= getGcd(g,values[i]);\r\n   return g;\r\n}\r\n\r\nbool check(ll value){\r\n    ll t=value;\r\n    while(t>0){\r\n        int d=t%10;\r\n        if(d==0){\r\n            t/=10;\r\n            continue;\r\n        }\r\n        if(value%d!=0) return false;\r\n        t/=10;\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nvoid Solution(){\r\n    int n,k;\r\n    cin>>n>>k;\r\n    string txt;\r\n    cin>>txt;\r\n    set<char>mySet;\r\n    for(auto ch:txt){\r\n        mySet.insert(ch);\r\n    }\r\n    char minCh=*mySet.begin();\r\n    char maxCh=*mySet.rbegin();\r\n    if(n<k){\r\n        cout<<txt;\r\n        for(int i=n;i<k;i++)\r\n            cout<<minCh;\r\n        cout<<\"\\n\";\r\n        return;\r\n    }\r\n\r\n    string answer=txt;\r\n    while(n!=k){\r\n        answer.pop_back();\r\n        n--;\r\n    }\r\n    int i=answer.size()-1;\r\n    while(answer[i]==maxCh){\r\n        i--;\r\n    }\r\n    auto it=mySet.find(answer[i]);\r\n    it++;\r\n    answer[i]=*it;\r\n    for(int x=i+1;x<k;x++)\r\n        answer[x]=minCh;\r\n\r\n    cout<<answer;\r\n\r\n}\r\n\r\nint main() {\r\n    ACPC\r\n    //freopen(\"hamming.in\", \"r\", stdin);\r\n    int testcase = 1;\r\n    //cin>>testcase;\r\n    while (testcase--) {\r\n        Solution();\r\n    }\r\n}\r\n"
}