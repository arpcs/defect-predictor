{
    "id": 217612545,
    "contestId": 940,
    "creationTimeSeconds": 1691417133,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 940,
        "index": "C",
        "name": "Phone Numbers",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 940,
        "members": [
            {
                "handle": "sorgfresser"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519464900
    },
    "programmingLanguage": "Clang++20 Diagnostics",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n#include <cassert>\n\n#define rep(a, b)   for(std::size_t a = 0; a < (b); ++a)\n#define all(a)      (a).begin(),(a).end()\n#define endl        '\\n'\n#define flushout    fflush_unlocked(stdout)\n#define CEIL(a, b)   (((a) + (b) -1) / (b))\n#define sz(v)       v.size()\n\n#define USE_BUMP 0\n\n#if USE_BUMP\n#define USE_ASSERT 1\nchar buf[40 << 20];\nstd::size_t buffer_size = sizeof buf;\n\nvoid *operator new(std::size_t s) {\n#if USE_ASSERT\n    assert(s < buffer_size);\n#endif\n    return (void *) &buf[buffer_size -= s];\n}\n\nvoid operator delete(void *p) noexcept {\n    // Don't do shit.\n}\n\nvoid operator delete(void* p, long unsigned int) noexcept {\n    // Don't do shit.\n}\n\nvoid *operator new[](std::size_t s) {\n#if USE_ASSERT\n    assert(s < buffer_size);\n#endif\n    return (void *) &buf[buffer_size -= s];\n}\n\nvoid operator delete[](void *p) noexcept {\n    // Don't do shit.\n}\n\n\nvoid operator delete[](void* p, long unsigned int) noexcept {\n    // Don't do shit.\n}\n#endif\n\n\nunsigned int get_positive() {\n    unsigned int number = 0;\n    int c;\n    while ((c = getchar_unlocked()) < 48 || c > 57);\n\n    for (; c > 47 && c < 58; c = getchar_unlocked())\n        number = number * 10 + (c - 48);\n    return number;\n}\n\nlong long get_long() {\n    long long number = 0;\n    int c;\n    while ((c = getchar_unlocked()) < 48 || c > 57);\n    for (; c > 47 && c < 58; c = getchar_unlocked())\n        number = number * 10 + (c - 48);\n    return number;\n}\n\nvoid write_char(int ch) {\n    putchar_unlocked(ch);\n}\n\nvoid print_positive(unsigned int value) {\n    char chars[20];\n    int digits = 0;\n    do {\n        chars[digits++] = ((value % 10) + 0x30);\n        value /= 10;\n    } while (value && digits < 20);\n\n    while (digits > 0) {\n        putchar_unlocked(chars[--digits]);\n    }\n}\n\nvoid print_positive_long(unsigned long long value) {\n    char chars[64];\n    int digits = 0;\n    do {\n        chars[digits++] = ((value % 10) + 0x30);\n        value /= 10;\n    } while (value && digits < 64);\n\n    while (digits > 0) {\n        putchar_unlocked(chars[--digits]);\n    }\n}\n\n\nstruct HexLookup {\n    unsigned long long tab[128];\n\n    constexpr HexLookup() : tab{} {\n        tab['1'] = 1;\n        tab['2'] = 2;\n        tab['3'] = 3;\n        tab['4'] = 4;\n        tab['5'] = 5;\n        tab['6'] = 6;\n        tab['7'] = 7;\n        tab['8'] = 8;\n        tab['9'] = 9;\n        tab['a'] = 10;\n        tab['A'] = 10;\n        tab['b'] = 11;\n        tab['B'] = 11;\n        tab['c'] = 12;\n        tab['C'] = 12;\n        tab['d'] = 13;\n        tab['D'] = 13;\n        tab['e'] = 14;\n        tab['E'] = 14;\n        tab['f'] = 15;\n        tab['F'] = 15;\n    }\n\n    constexpr unsigned long long operator[](int const idx) const { return tab[(std::size_t) idx]; }\n} constexpr hexlookup;\n\nconstexpr unsigned long long hextoint(int number) {\n    return hexlookup[number];\n}\n\n\n//IMPORTANT: if modulo added, use a mod x and b mod x-1, NOT x itself\nlong long power(long long a, long long b) {\n    long long res = 1;\n    while (b) {\n        if (b & 1) {\n            res = res * a;\n        }\n        a = a * a;\n        b >>= 1;\n    }\n    return res;\n}\n\n// Usually you want to pass z_array by reference to the function.\nstd::vector<int> z_function(std::vector<int> &x, long long n) {\n    int l = 0, r = 0;\n    std::vector<int> z_array(n, 0);\n    z_array[0] = 0;\n    for (int i = 1; i < n; ++i) {\n        if (i <= r) {\n            z_array[i] = std::min(r - i + 1, z_array[i - l]);\n        }\n        while (i + z_array[i] < n && x[z_array[i]] == x[i + z_array[i]]) {\n            ++z_array[i];\n        }\n        if (i + z_array[i] - 1 > r) {\n            l = i;\n            r = i + z_array[i] - 1;\n        }\n    }\n    return z_array;\n}\n\nusing namespace std;\nusing Graph = vector<vector<int>>;\nusing ll = long long;\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.precision(10);\n\n\n    //content\n    ll n,k;\n    cin >> n >> k;\n    string s;\n    cin >> s;\n    // Charmap\n    set<char> charmap;\n    for (auto c : s) {\n        charmap.insert(c);\n    }\n\n    // Copy first k chars\n    string y = s.substr(0,min(k, n));\n    if (k > n) {\n        // Assign additional ones if k > n\n        y += string(max(0LL, k - n), *charmap.begin());\n        cout << y << endl;\n        return 0;\n    }\n\n\n    // Add +1 to the string\n    auto it = y.rbegin();\n    bool overlap = true;\n    while (it != y.rend() && overlap) {\n        overlap = false;\n        auto charmapentry = charmap.lower_bound(*it);\n        if (charmapentry == charmap.end() || charmapentry == prev(charmap.end())) {\n            overlap = true;\n            *it = *charmap.begin();\n        } else {\n            *it = *next(charmapentry);\n        }\n        ++it;\n    }\n    cout << y << endl;\n\n\n    return 0;\n}\n\n"
}