{
    "id": 223976275,
    "contestId": 940,
    "creationTimeSeconds": 1695097985,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 940,
        "index": "C",
        "name": "Phone Numbers",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "implementation",
            "strings"
        ]
    },
    "author": {
        "contestId": 940,
        "members": [
            {
                "handle": "cosmohack"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1519464900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 54,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 4403200,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n#define nl \"\\n\"; \r\n#define yes cout << \"YES\" << nl\r\n#define no cout << \"NO\" << nl\r\n#define fl(i, a, n) for (int i = a; i < n; i++)\r\n#define fll(i,a,b) for(i=a;i>=b;i--)\r\n#define F first\r\n#define S second\r\n#define pb push_back\r\n#define fast_io ios::sync_with_stdio(false); cin.tie(0);cout.tie(0);\r\n#define all(p) p.begin(), p.end()\r\n#define rall(v) v.rbegin(),v.rend()\r\n#define si             set <int>\r\n#define vi             vector <int>\r\n#define vvi            vector<vi>\r\n#define pii            pair <int, int>\r\n#define vpi            vector <pii>\r\n#define vpp            vector <pair<int, pii>>\r\n#define mii            map <int, int>\r\n#define mpi            map <pii, int>\r\n#define spi            set <pii>\r\n#define sz(x)          ((int) x.size())\r\n#define que_max        priority_queue <int>\r\n#define que_min        priority_queue <int, vi, greater<int>>\r\n#define print(a)       for(auto x : a) cout << x << ' '; cout << endl;\r\n#define print1(a)      for(auto x : a) cout << x.F << ' ' << x.S << endl;\r\n#define print2(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< ' '; cout << endl;\r\nusing namespace std;\r\nconst int N = 1e6 + 10;\r\nint a[N];\r\nconst ll INF = 1e9+7;\r\nconst ll MOD = 1e9+7;\r\nbool isPrime(ll n)\r\n{\r\n    if (n == 1)\r\n    {\r\n       return false;\r\n   }\r\n   for (ll i = 2; i * i <= n; i++)\r\n   {\r\n       if (n % i == 0)\r\n       {\r\n           return false;\r\n       }\r\n   }\r\n   return true;\r\n}\r\nll lcm(ll a, ll b)\r\n{\r\n    return (a * b) / __gcd(a, b);\r\n}\r\nll powR(ll l, ll n)\r\n{\r\n    ll res = 1;\r\n    while (n)\r\n    {\r\n        if ((n & 1) >= 1)\r\n        {\r\n            res = res * l;\r\n        }\r\n        l = l * l;\r\n        n >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\nvector<int> bfsOfGraph(int v, vector<int>adj[]){\r\n  int n, vis[n]={0};\r\n  vis[0]=1;\r\n  queue<int>q;\r\n  q.push(0);\r\n  vector<int>bfs;\r\n  while (!q.empty())\r\n  {\r\n     int node = q.front();\r\n     q.pop();\r\n     bfs.push_back(node);\r\n     for(auto it : adj[node]){\r\n         if(!vis[it]){\r\n             vis[it]=1;\r\n             q.push(it);\r\n         }\r\n     }\r\n }\r\n return bfs;\r\n}\r\n// DFS = it is implemented by the stack/Recursion\r\nvoid dfs(int node, vector<int>adj[], int vis[], vector<int>&ls){\r\n    vis[node]=1;\r\n    ls.push_back(node);\r\n    for(auto it: adj[node]){\r\n        if(!vis[it]){\r\n            dfs(it, adj, vis, ls);\r\n        }\r\n    }\r\n}\r\nint _ceil(int n,int k){\r\n   return (n+k-1)/k;\r\n}\r\nint C(int n, int k) {\r\n   int res = 1;\r\n   for (int i = n - k + 1; i <= n; ++i)\r\n   res *= i;\r\n   for (int i = 2; i <= k; ++i)\r\n   res /= i;\r\n   return res;\r\n}\r\nvoid solve(){\r\n   int n,k;cin>>n>>k;\r\n    string s;cin>>s;\r\n    set<char> st;\r\n    for(auto c:s)st.insert(c);\r\n    char small_char=*(st.begin());\r\n    if(k<=n)\r\n    {\r\n        for(int i=k-1;i>=0;i--)\r\n        {\r\n            auto next_big_char=upper_bound(st.begin(),st.end(),s[i]);\r\n            if(next_big_char!=st.end())\r\n            {\r\n                s[i]=*next_big_char;\r\n                break;\r\n            }\r\n            else {\r\n                s[i]=small_char;\r\n            }\r\n            \r\n        }\r\n    }\r\n    else {\r\n        \r\n        for(int i=s.size()-1;i<k;i++)\r\n        {\r\n            s+=small_char;\r\n        }\r\n    }\r\n    cout<<s.substr(0,k);\r\n   \r\n}\r\nint main()\r\n{\r\n    fast_io;\r\n    int t=1;\r\n    // int t;\r\n    // cin >> t;\r\n    while (t--)\r\n    {\r\n       solve();\r\n       //cerr << \"Time :\" << 1000 * ((double)clock()) / (double)CLOCKS_PER_SEC <<\"ms\"<<endl;\r\n    }\r\n}"
}