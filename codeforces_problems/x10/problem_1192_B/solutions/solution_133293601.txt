{
    "id": 133293601,
    "contestId": 1192,
    "creationTimeSeconds": 1635376798,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "B",
        "name": "Dynamic Diameter",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "data structures",
            "dfs and similar",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "krimzon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 102,
    "timeConsumedMillis": 1606,
    "memoryConsumedBytes": 105472000,
    "points": 100.0,
    "source": "#include<cstdio>\r\n#include<iostream>\r\n#include<vector>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<queue>\r\nusing namespace std;\r\n#define ll long long \r\n#define ri int\r\n#define pll pair<ll,ll>\r\nconst int MAXN=1e5+7;\r\nstruct M{\r\n    static const ll inf=1e18;\r\n    ll m[3][3];\r\n    int x,y;\r\n    void init(int X=3,int Y=3){\r\n        x=X,y=Y;\r\n        for(ri i=0;i<x;++i) for(ri j=0;j<y;++j) m[i][j]=-inf;\r\n    }\r\n    M operator*(const M &b)const{\r\n        M c;c.init(x,b.y);\r\n        for(ri i=0;i<c.x;++i) for(ri k=0;k<y;++k) for(ri j=0;j<c.y;++j)c.m[i][j]=max(c.m[i][j],m[i][k]+b.m[k][j]);\r\n        for(ri i=0;i<c.x;++i) for(ri j=0;j<c.y;++j) if(c.m[i][j]<-1e17) c.m[i][j]=-inf;\r\n        return c;\r\n    }\r\n}VVV;\r\nint n,Q;\r\nstruct segT{\r\n    M t[MAXN<<2];\r\n    #define lc u<<1\r\n    #define rc u<<1|1\r\n    #define mid (L+R>>1)\r\n    void init(){\r\n        for(ri i=1;i<=n*4;++i) t[i].init();\r\n    }\r\n    void insert(int u,const M &w,int p,int L=1,int R=n){\r\n        if(p==L&&p==R) return t[u]=w,void();\r\n        if(p<=mid) insert(lc,w,p,L,mid);\r\n        else insert(rc,w,p,mid+1,R);\r\n        t[u]=t[lc]*t[rc];\r\n    }\r\n    M query(int u,int l,int r,int L=1,int R=n){\r\n        if(l==L&&r==R) return t[u];\r\n        if(r<=mid) return query(lc,l,r,L,mid);\r\n        else if(l>mid) return query(rc,l,r,mid+1,R);\r\n        else return query(lc,l,mid,L,mid)*query(rc,mid+1,r,mid+1,R);\r\n    }\r\n}T;\r\nstruct heap{\r\n    priority_queue<ll> p,q;\r\n    int siz;\r\n    void push(ll x){p.push(x),siz++;}\r\n    void erase(ll x){q.push(x),siz--;}\r\n    ll top(){\r\n        while(!q.empty()&&p.top()==q.top()) p.pop(),q.pop();\r\n        return p.top();\r\n    }\r\n    ll rtop(){\r\n        while(!q.empty()&&p.top()==q.top()) p.pop(),q.pop();\r\n        ll res=p.top();p.pop();\r\n        while(!q.empty()&&p.top()==q.top()) p.pop(),q.pop();\r\n        ll ans=p.top();p.push(res);\r\n        return ans;\r\n    }\r\n}q[MAXN],p[MAXN];\r\nvector<pll> g[MAXN];\r\npll e[MAXN];\r\nint son[MAXN],siz[MAXN],dep[MAXN],fa[MAXN],top[MAXN],dfn[MAXN],ed[MAXN],cnt;\r\nint id[MAXN];\r\nll w[MAXN],G[MAXN][2],f[MAXN][2];\r\nM getmat(int u){\r\n    M now;now.init(3,3);\r\n    now.m[0][0]=w[u],now.m[0][2]=G[u][0]+w[u];\r\n    now.m[1][0]=G[u][0],now.m[1][1]=0,now.m[1][2]=G[u][1];\r\n    now.m[2][2]=0;\r\n    return now;\r\n}\r\nvoid dfs(int u){\r\n    son[u]=0,siz[u]=1;\r\n    for(auto E:g[u]){\r\n        int v=E.first;\r\n        if(v==fa[u]) continue;\r\n        fa[v]=u,dep[v]=dep[u]+1;w[v]=E.second;\r\n        dfs(v);\r\n        siz[u]+=siz[v];\r\n        if(siz[v]>siz[son[u]]) son[u]=v;\r\n    }\r\n}\r\nvoid dfs2(int u,int topf){\r\n    dfn[u]=++cnt;top[u]=topf;\r\n    if(son[u]) dfs2(son[u],topf),ed[u]=ed[son[u]];\r\n    else ed[u]=u;\r\n    for(auto E:g[u]){\r\n        int v=E.first;\r\n        if(v==fa[u]||v==son[u]) continue;\r\n        dfs2(v,v);\r\n        q[u].push(f[v][0]);\r\n        p[u].push(f[v][1]);\r\n    }\r\n    G[u][1]=max(q[u].top()+q[u].rtop(),p[u].top());\r\n    G[u][0]=q[u].top();\r\n    T.insert(1,getmat(u),dfn[u]);\r\n    f[u][0]=max(f[son[u]][0]+w[u],G[u][0]+w[u]);\r\n    f[u][1]=max(max(f[son[u]][1],G[u][1]),f[son[u]][0]+G[u][0]);\r\n}\r\nvoid update(int u){\r\n    T.insert(1,getmat(u),dfn[u]);\r\n    u=top[u];\r\n    int v=fa[u];\r\n    if(!v) return;\r\n    M now=T.query(1,dfn[u],dfn[ed[u]])*VVV;\r\n    q[v].erase(f[u][0]);\r\n    p[v].erase(f[u][1]);\r\n    f[u][0]=now.m[0][0];\r\n    f[u][1]=now.m[1][0];\r\n    q[v].push(f[u][0]);\r\n    p[v].push(f[u][1]);\r\n    G[v][0]=q[v].top();\r\n    G[v][1]=max(q[v].top()+q[v].rtop(),p[v].top());\r\n    update(v);\r\n}\r\nvoid modify(int u,ll W){\r\n    w[u]=W,update(u);\r\n}\r\nll query(int u){\r\n    M now=T.query(1,dfn[u],dfn[ed[u]])*VVV;\r\n    return now.m[1][0];\r\n}\r\nll F(int u){\r\n    M now=T.query(1,dfn[u],dfn[ed[u]])*VVV;\r\n    return now.m[0][0];\r\n}\r\nll lstans,mod;\r\nint main(){\r\n    // freopen(\"rand.in\",\"r\",stdin);\r\n    // freopen(\"1.out\",\"w\",stdout);\r\n    scanf(\"%d%d%lld\",&n,&Q,&mod);\r\n    T.init();\r\n    VVV.init(3,1),VVV.m[0][0]=VVV.m[1][0]=VVV.m[2][0]=0;\r\n    for(ri i=1;i<=n;++i) q[i].push(0),q[i].push(0),p[i].push(0),p[i].push(0);\r\n    for(ri i=0;i<n-1;++i){\r\n        int u,v;ll w;\r\n        scanf(\"%d%d%lld\",&u,&v,&w);\r\n        g[u].push_back((pll){v,w});\r\n        g[v].push_back((pll){u,w});\r\n        e[i]=(pll){u,v};\r\n    }\r\n    dep[1]=1,dfs(1);\r\n    dfs2(1,1);   \r\n    for(ri i=0;i<n-1;++i){\r\n        if(fa[e[i].first]==e[i].second) id[i]=e[i].first;\r\n        else id[i]=e[i].second;\r\n    }\r\n    while(Q--){\r\n        // for(ri i=1;i<=n;++i) update(i);\r\n        ll d,W;scanf(\"%lld%lld\",&d,&W);\r\n        d=(d+lstans)%(n-1),W=(W+lstans)%mod;\r\n        modify(id[d],W);\r\n        // puts(\"===\");\r\n        // printf(\"w :\"); for(ri i=1;i<=n;++i) printf(\"%4lld \",w[i]);puts(\"\");\r\n        // printf(\"f0:\"); for(ri i=1;i<=n;++i) printf(\"%4lld \",F(i));puts(\"\");\r\n        // printf(\"f1:\"); for(ri i=1;i<=n;++i) printf(\"%4lld \",query(i));puts(\"\");\r\n        // printf(\"G0:\"); for(ri i=1;i<=n;++i) printf(\"%4lld \",G[i][0]);puts(\"\");\r\n        // printf(\"G1:\"); for(ri i=1;i<=n;++i) printf(\"%4lld \",G[i][1]);puts(\"\");\r\n        // heap res=q[2];\r\n        // printf(\"%lld %lld\\n\",res.top(),res.rtop());\r\n        // puts(\"===\");\r\n        printf(\"%lld\\n\",lstans=query(1));\r\n    }\r\n}"
}