{
    "id": 219637786,
    "contestId": 1209,
    "creationTimeSeconds": 1692512828,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1209,
        "index": "H",
        "name": "Moving Walkways",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3300,
        "tags": [
            "data structures",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1209,
        "members": [
            {
                "handle": "bribritt"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1568466300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 63,
    "timeConsumedMillis": 2479,
    "memoryConsumedBytes": 45056000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define fi first\r\n#define se second\r\n#define mp make_pair\r\n#define pb push_back\r\n#define REP(i, a, b) for(int i = a; i < b; i++)\r\n#define float long double\r\nfloat start=0; multiset<pair<float,float>> pts;\r\nint32_t main(){\r\n    cout<<setprecision(69);\r\n    int n, L; cin >> n >> L;\r\n    pair<int,float> seg[2*n+1];\r\n    int x,y,prev=0; float s;\r\n    REP(i,0,n) {\r\n        cin>>x>>y>>s;\r\n        seg[i<<1]=mp(x-prev,0);\r\n        seg[i<<1 | 1]=mp(y-x,s);\r\n        prev=y;\r\n    }\r\n    seg[n<<1]=mp(L-y,0);\r\n    REP(i,0,(n<<1 | 1)) {\r\n        pts.insert(mp(1/(seg[i].se+1),(seg[i].fi/max(seg[i].se,1/(float)1000000000))+(seg[i].fi/(seg[i].se+2))));\r\n        start-=seg[i].fi/((seg[i].se+1)*(seg[i].se+2));\r\n        start+=seg[i].fi/(seg[i].se+1);\r\n        float left=seg[i].fi/(seg[i].se+2);\r\n        while(left>0) {\r\n            assert(pts.size());\r\n            auto v=*pts.begin();\r\n            if(left<v.se) {\r\n                start+=left*v.fi;\r\n                pts.erase(pts.begin());\r\n                pts.insert(mp(v.fi,v.se-left));\r\n                left=-1;\r\n            } else {\r\n                start+=v.se*v.fi;\r\n                left-=v.se;\r\n                pts.erase(pts.begin());\r\n            }\r\n        }\r\n    }\r\n    cout<<start;\r\n}"
}