{
    "id": 223217234,
    "contestId": 1295,
    "creationTimeSeconds": 1694610405,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1295,
        "index": "E",
        "name": "Permutation Separation",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "data structures",
            "divide and conquer"
        ]
    },
    "author": {
        "contestId": 1295,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1580308500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 16793600,
    "source": "#include<bits/stdc++.h>\n#define REP(i,f,l) for(int i(f);i<=l;++i)\n#define DOW(i,f,l) for(int i(f);i>=l;--i)\n#define LL long long\n#define PII pair<int,int>\nusing namespace std;\n\nnamespace IO\n{\n    inline void Read(int &a)\n    {\n        a=0;\n        int f(1);\n        char ch(getchar());\n        while((ch<'0'||ch>'9'))\n        {\n            if(ch=='-')\n            {\n                f*=-1;\n            }\n            ch=getchar();\n        }\n        while('0'<=ch&&ch<='9')\n        {\n            a=(a<<1)+(a<<3)+(ch^48);\n            ch=getchar();\n        }\n        a*=f;\n    }\n}\nusing namespace IO;\nconst int MAXN=2e5+5;\nint n;\nint p[MAXN];\nint a[MAXN];\nint app[MAXN];\nLL ans[MAXN];\nnamespace SGT\n{\n    class SegmentTree\n    {\n    public:\n        LL mi;\n        LL add;\n    }sgt[MAXN<<2];\n    #define LSON (now<<1)\n    #define RSON (now<<1|1)\n    #define MIDDLE ((left+right)>>1)\n    #define LEFT LSON,left,MIDDLE\n    #define RIGHT RSON,MIDDLE+1,right\n    #define NOW now_left,now_right\n    inline void PushUp(const int now)\n    {\n        sgt[now].mi=min(sgt[LSON].mi,sgt[RSON].mi);\n    }\n    void Build(const int now=1,const int left=1,const int right=n)\n    {\n        if(left==right)\n        {\n            sgt[now].mi=ans[left];\n            return;\n        }\n        Build(LEFT);\n        Build(RIGHT);\n        PushUp(now);\n    }\n    inline void PushDown(const int now)\n    {\n        if(sgt[now].add)\n        {\n            sgt[LSON].add+=sgt[now].add;\n            sgt[LSON].mi+=sgt[now].add;\n            sgt[RSON].add+=sgt[now].add;\n            sgt[RSON].mi+=sgt[now].add;\n            sgt[now].add=0;\n        }\n    }\n    void Updata(const int now_left,const int now_right,const int add,const int now=1,const int left=1,const int right=n)\n    {\n        if(now_right<left||right<now_left)\n        {\n            return;\n        }\n        if(now_left<=left&&right<=now_right)\n        {\n            sgt[now].mi+=add;\n            sgt[now].add+=add;\n            return;\n        }\n        PushDown(now);\n        Updata(NOW,add,LEFT);\n        Updata(NOW,add,RIGHT);\n        PushUp(now);\n    }\n    inline LL Query()\n    {\n        return sgt[1].mi;\n    }\n    void Write(const int now=1,const int left=1,const int right=n)\n    {\n        if(left==right)\n        {\n            printf(\"%lld \",sgt[now].mi);\n            if(right==n)\n            {\n                puts(\"\");\n            }\n            return;\n        }\n        PushDown(now);\n        Write(LEFT);\n        Write(RIGHT);\n    }\n    #undef LSON\n    #undef RSON\n    #undef MIDDLE\n    #undef LEFT\n    #undef RIGHT\n    #undef NOW\n}\ninline void Work()\n{\n    Read(n);\n    REP(i,1,n)\n    {\n        Read(p[i]);\n        app[p[i]]=i;\n    }\n    REP(i,1,n)\n    {\n        Read(a[i]);\n    }\n    ans[1]=(p[1]!=1)*(a[app[1]]+a[1]);\n    REP(i,2,n)\n    {\n        ans[i]=((p[1]==i)?-a[app[i]]:a[app[i]])+ans[i-1];\n    }\n    SGT::Build();\n    LL answer=min(SGT::Query(),1ll*a[1]);\n    // SGT::Write();\n    REP(i,2,n-1)\n    {\n        SGT::Updata(p[i],n,-a[i]);\n        if(p[i]^1)\n        {\n            SGT::Updata(1,p[i]-1,a[i]);\n        }\n        // if(app[i]<i)\n        // {\n        //     SGT::\n        // }\n        answer=min(answer,SGT::Query());\n        // SGT::Write();\n    }\n    printf(\"%lld\\n\",answer);\n}\nint main()\n{\n    // int t;\n    // scanf(\"%d\",&t);\n    // REP(i,1,t)\n    // {\n    Work();\n    // }\n    return 0;\n}\n\t \t\t\t    \t\t \t \t\t \t  \t \t\t\t\t   \t"
}