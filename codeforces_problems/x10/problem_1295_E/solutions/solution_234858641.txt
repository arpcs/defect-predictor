{
    "id": 234858641,
    "contestId": 1295,
    "creationTimeSeconds": 1701220222,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1295,
        "index": "E",
        "name": "Permutation Separation",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "data structures",
            "divide and conquer"
        ]
    },
    "author": {
        "contestId": 1295,
        "members": [
            {
                "handle": "Memo_Century"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1580308500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 18432000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\nusing i64 = long long;\r\n\r\ntemplate<class Info, class Tag>\r\nstruct LazySegtree {\r\n    int n;\r\n    vector<Info> info;\r\n    vector<Tag> tag;\r\n    vector<int> size;\r\n    LazySegtree() : n(0) {}\r\n    template<class T>\r\n    LazySegtree(int n_, T v_) {\r\n        init(n_, v_);\r\n    }\r\n    template<class T>\r\n    LazySegtree(vector<T> &init_) {\r\n        init(init_);\r\n    }\r\n    template<class T>\r\n    void init(int n_, T v_) {\r\n        vector<T> ini(n_, v_);\r\n        init(ini);\r\n    }\r\n    template<class T>\r\n    void init(vector<T> &init_) {\r\n        if (init_.empty()) {\r\n            return;\r\n        }\r\n        n = init_.size();\r\n        info.assign(4 * n, Info());\r\n        tag.assign(4 * n, Tag());\r\n        size.assign(4 * n, 0);\r\n        function<void(int, int, int)> build = [&](int id, int l, int r) {\r\n            size[id] = r - l + 1;\r\n            if (l == r) {\r\n                info[id] = Info(init_[l - 1]);\r\n                return;\r\n            }\r\n            int mid = (l + r) / 2;\r\n            build(2 * id, l , mid);\r\n            build(2 * id + 1, mid + 1, r);\r\n            update(id);\r\n        };\r\n        build(1, 1, n);\r\n    }\r\n\r\n    template<class T>\r\n    void change(int id, int l, int r, int pos, const T &val) {\r\n        if (l == r) {\r\n            info[id] = Info(val);\r\n        } else {\r\n            int mid = (l + r) / 2;\r\n            if (pos <= mid) {\r\n                change(2 * id, l, mid, pos, val);\r\n            } else {\r\n                change(2 * id + 1, mid + 1, r, pos, val);\r\n            } \r\n            update(id);\r\n        }\r\n    }\r\n    template<class T>\r\n    void change(int pos, const T &val) {\r\n        change(1, 1, n, pos, val);\r\n    }\r\n    void update(int id) {\r\n        info[id] = info[2 * id] + info[2 * id + 1];\r\n    }\r\n\r\n    void modify(int id, int l, int r, int ql, int qr, const Tag &val) {\r\n        if (l == ql && r == qr) {\r\n            settag(id, val);\r\n            return;\r\n        }\r\n        int mid = (l + r) / 2;\r\n        pushdown(id);\r\n        if (qr <= mid) {\r\n            modify(2 * id, l, mid, ql, qr, val);\r\n        } else if (ql > mid) {\r\n            modify(2 * id + 1, mid + 1, r, ql, qr, val);\r\n        } else {\r\n            modify(2 * id, l, mid, ql, mid, val);\r\n            modify(2 * id + 1, mid + 1, r, mid + 1, qr, val);\r\n        }\r\n        update(id);\r\n    }\r\n    void modify(int l, int r, const Tag &val) {\r\n        modify(1, 1, n, l, r, val);\r\n    }\r\n    void settag(int id, Tag t) {\r\n        info[id].val = info[id].val + t.add;\r\n        tag[id] = tag[id] + t;\r\n    }\r\n    void pushdown(int id) {\r\n        if (tag[id].add != 0) {\r\n            settag(2 * id, tag[id]);\r\n            settag(2 * id + 1, tag[id]);\r\n            tag[id] = Tag();\r\n        }\r\n    }\r\n\r\n    Info query(int id, int l, int r, int ql, int qr) {\r\n        if (l == ql && r == qr) {\r\n            return info[id];\r\n        }\r\n        int mid = (l + r) / 2;\r\n        pushdown(id);\r\n        if (qr <= mid) {\r\n            return query(2 * id, l, mid, ql, qr);\r\n        } else if (ql > mid) {\r\n            return query(2 * id + 1, mid + 1, r, ql, qr);\r\n        } else { \r\n            return query(id * 2, l, mid, ql, mid) + query(id * 2 + 1, mid + 1, r, mid + 1, qr);\r\n        }\r\n    }\r\n    Info query(int l, int r) {\r\n        return query(1, 1, n, l, r);\r\n    }\r\n};\r\n\r\nstruct Info {\r\n    i64 val;\r\n    Info() : val(0) {}\r\n    Info(int x) : val(x) {}\r\n    Info operator + (const Info &x) {\r\n        Info res;\r\n        res.val = min(val, x.val);\r\n        return res;\r\n    }\r\n};\r\n\r\nstruct Tag {\r\n    i64 add;\r\n    Tag() : add(0) {}\r\n    Tag(i64 x) : add(x) {}\r\n    Tag operator + (const Tag &x) {\r\n        Tag res;\r\n        res.add = add + x.add;\r\n        return res;\r\n    }\r\n};\r\n\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    vector<int> p(n), cost(n + 1);\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> p[i];\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        int a;\r\n        cin >> a;\r\n\r\n        cost[p[i]] = a;\r\n    }\r\n\r\n    LazySegtree<Info, Tag> seg(n + 2, 0);\r\n    for (int i = 1; i <= n; i++) {\r\n        seg.modify(i + 1, n + 2, cost[i]);\r\n    }\r\n    i64 ans = 1E18;\r\n    for (int i = 0; i < n - 1; i++) {\r\n        seg.modify(1, p[i], cost[p[i]]);\r\n        seg.modify(p[i] + 1, n + 2, -cost[p[i]]);\r\n        ans = min(ans, seg.query(1, n + 2).val);\r\n    }\r\n    cout << ans << \"\\n\";\r\n\r\n    return 0;\r\n}"
}