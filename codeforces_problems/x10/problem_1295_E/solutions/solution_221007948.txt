{
    "id": 221007948,
    "contestId": 1295,
    "creationTimeSeconds": 1693332693,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1295,
        "index": "E",
        "name": "Permutation Separation",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "data structures",
            "divide and conquer"
        ]
    },
    "author": {
        "contestId": 1295,
        "members": [
            {
                "handle": "ashanksingh1997"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1580308500
    },
    "programmingLanguage": "Java 11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 499,
    "memoryConsumedBytes": 5529600,
    "source": "import java.util.*;\r\nimport java.io.*;\r\n\r\npublic class Solution\r\n{\r\n    static class Reader {\r\n        final private int BUFFER_SIZE = 1 << 16;\r\n        private DataInputStream din;\r\n        private byte[] buffer;\r\n        private int bufferPointer, bytesRead;\r\n  \r\n        public Reader()\r\n        {\r\n            din = new DataInputStream(System.in);\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n  \r\n        public Reader(String file_name) throws IOException\r\n        {\r\n            din = new DataInputStream(\r\n                new FileInputStream(file_name));\r\n            buffer = new byte[BUFFER_SIZE];\r\n            bufferPointer = bytesRead = 0;\r\n        }\r\n  \r\n        public String readLine() throws IOException\r\n        {\r\n            byte[] buf = new byte[64]; // line length\r\n            int cnt = 0, c;\r\n            while ((c = read()) != -1) {\r\n                if (c == '\\n') {\r\n                    if (cnt != 0) {\r\n                        break;\r\n                    }\r\n                    else {\r\n                        continue;\r\n                    }\r\n                }\r\n                buf[cnt++] = (byte)c;\r\n            }\r\n            return new String(buf, 0, cnt);\r\n        }\r\n  \r\n        public int nextInt() throws IOException\r\n        {\r\n            int ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ') {\r\n                c = read();\r\n            }\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n  \r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n  \r\n        public long nextLong() throws IOException\r\n        {\r\n            long ret = 0;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n  \r\n        public double nextDouble() throws IOException\r\n        {\r\n            double ret = 0, div = 1;\r\n            byte c = read();\r\n            while (c <= ' ')\r\n                c = read();\r\n            boolean neg = (c == '-');\r\n            if (neg)\r\n                c = read();\r\n  \r\n            do {\r\n                ret = ret * 10 + c - '0';\r\n            } while ((c = read()) >= '0' && c <= '9');\r\n  \r\n            if (c == '.') {\r\n                while ((c = read()) >= '0' && c <= '9') {\r\n                    ret += (c - '0') / (div *= 10);\r\n                }\r\n            }\r\n  \r\n            if (neg)\r\n                return -ret;\r\n            return ret;\r\n        }\r\n  \r\n        private void fillBuffer() throws IOException\r\n        {\r\n            bytesRead = din.read(buffer, bufferPointer = 0,\r\n                                 BUFFER_SIZE);\r\n            if (bytesRead == -1)\r\n                buffer[0] = -1;\r\n        }\r\n  \r\n        private byte read() throws IOException\r\n        {\r\n            if (bufferPointer == bytesRead)\r\n                fillBuffer();\r\n            return buffer[bufferPointer++];\r\n        }\r\n  \r\n        public void close() throws IOException\r\n        {\r\n            if (din == null)\r\n                return;\r\n            din.close();\r\n        }\r\n    }\r\n    \r\n    public static long gcd(long a, long b)\r\n    {\r\n        if (a == 0)\r\n            return b;\r\n \r\n        return gcd(b % a, a);\r\n    }\r\n    \r\n    \r\n    static int c(int a , int b)\r\n    {\r\n        if(a%b == 0)\r\n        return a/b;\r\n        \r\n        return a/b+1;\r\n    }\r\n    \r\n    \r\n   static long calc(int i , int arr[])\r\n   {\r\n          if(arr[i] == arr[i+1])\r\n          return 0;\r\n          \r\n          int n = arr.length;\r\n          return (long)(i-0+1)*(long)(n-1-(i+1)+1);\r\n   }\r\n   \r\n   \r\n   static long pow(long a , long b, long c)\r\n   {\r\n          if(b == 0)\r\n          return 1;\r\n          \r\n          long ans = pow(a,b/2,c);\r\n          if(b%2 == 0)\r\n          return ans*ans%c;\r\n          \r\n          return ans*ans%c*a%c;\r\n   }\r\n   \r\n  static int sum(int idx , int bit[])\r\n  {\r\n         int ans = 0;\r\n         while(idx > 0)\r\n         {\r\n                ans += bit[idx];\r\n                idx -= idx&(-idx);\r\n         }\r\n         \r\n         return ans;\r\n  }\r\n  \r\n  static void update(int n , int idx , int val , int bit[])\r\n  {\r\n         while(idx <= n)\r\n         {\r\n                bit[idx] += val;\r\n                idx += idx&(-idx);\r\n         }\r\n  }\r\n  \r\n  \r\n   \r\n  static long st[] , lazy[];\r\n  static int sz;\r\n  static long min(int l , int r , int lx , int rx , int x)\r\n  {\r\n          if(lazy[x] != 0)\r\n         {\r\n                st[x] += lazy[x];\r\n                if(lx != rx)\r\n                {\r\n                       lazy[2*x+1] += lazy[x];\r\n                       lazy[2*x+2] += lazy[x];\r\n                }\r\n                lazy[x] = 0;\r\n         }\r\n         \r\n         \r\n         if(lx > r || rx < l)\r\n         return Long.MAX_VALUE;\r\n         \r\n        \r\n         \r\n         if(lx >= l && rx <= r)\r\n         {\r\n                return st[x];\r\n         }\r\n         \r\n         int mid = (lx+rx)/2;\r\n         return Math.min(min(l,r,lx,mid,2*x+1),min(l,r,mid+1,rx,2*x+2));\r\n  }\r\n  \r\n  static void update(int l , int r , long v , int lx , int rx , int x)\r\n  {\r\n          if(lazy[x] != 0)\r\n         {\r\n                st[x] += lazy[x];\r\n                if(lx != rx)\r\n                {\r\n                       lazy[2*x+1] += lazy[x];\r\n                       lazy[2*x+2] += lazy[x];\r\n                }\r\n                lazy[x] = 0;\r\n         }\r\n         \r\n         if(lx > r || rx < l)\r\n         return;\r\n         \r\n         if(lx >= l && rx <= r)\r\n         {\r\n                st[x] += v;\r\n                if(lx != rx)\r\n                {\r\n                       lazy[2*x+1] += v;\r\n                       lazy[2*x+2] += v;\r\n                }\r\n                return;\r\n         }\r\n         \r\n         int mid = (lx+rx)/2;\r\n         update(l,r,v,lx,mid,2*x+1);\r\n         update(l,r,v,mid+1,rx,2*x+2);\r\n         \r\n         st[x] = Math.min(st[2*x+1],st[2*x+2]);\r\n  }\r\n  \r\n    public static void main(String []args) throws IOException\r\n    {\r\n           Reader sc = new Reader();\r\n           int n = sc.nextInt();\r\n           int p[] = new int[n];\r\n           for(int i = 0 ; i < n ; i++)\r\n           {\r\n                  p[i] = sc.nextInt();\r\n           }\r\n           \r\n           long cost[] = new long[n+1];\r\n           for(int i = 0 ; i < n ; i++)\r\n           {\r\n                  cost[p[i]] = sc.nextLong();\r\n           }\r\n           \r\n           long ans = Long.MAX_VALUE;\r\n           int currmax = 0;\r\n           long sum = 0;\r\n           sz = 1;\r\n           while(sz < n+5)\r\n           {\r\n                  sz *= 2;\r\n           }\r\n           st = new long[2*sz];\r\n           lazy = new long[2*sz];\r\n           long ss = 0;\r\n           for(int i = 1 ; i <= n ; i++)\r\n           {\r\n                  ss += cost[i];\r\n                  update(i,i,ss,0,sz-1,0);\r\n           }\r\n           \r\n         \r\n           for(int i = 0 ; i < n-1 ; i++)\r\n           {\r\n                  currmax = Math.max(currmax,p[i]);\r\n                  sum += cost[p[i]];\r\n                  update(p[i],n,-2*cost[p[i]],0,sz-1,0);\r\n                //  System.out.println(min(1,currmax,0,sz-1,0) + \" \" + currmax);\r\n                  ans = Math.min(ans,sum+min(1,n,0,sz-1,0));\r\n                //  System.out.println(ans);\r\n           }\r\n           \r\n           System.out.println(ans);\r\n    }\r\n}"
}