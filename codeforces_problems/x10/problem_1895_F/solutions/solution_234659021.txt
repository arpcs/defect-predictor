{
    "id": 234659021,
    "contestId": 1895,
    "creationTimeSeconds": 1701142651,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1895,
        "index": "F",
        "name": "Fancy Arrays",
        "type": "PROGRAMMING",
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 1895,
        "members": [
            {
                "handle": "_mjj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1699022100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 34,
    "timeConsumedMillis": 468,
    "memoryConsumedBytes": 512000,
    "source": "// LUOGU_RID: 137239893\n#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <vector>\r\n#include <cstdio>\r\n#include <queue>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <cmath>\r\n#include <map>\r\n#include <stack>\r\n#include <sstream>\r\n#include <random>\r\n#include <ctime>\r\n#include <chrono>\r\n#include <bitset>\r\n#include <iomanip>\r\n#define ios ios::sync_with_stdio(false), cin.tie(0), cout.tie(0);\r\n#define TIME cerr << 1e3 * clock() / CLOCKS_PER_SEC << \" ms\\n\";\r\n#define debug(x) cerr << #x << \" : \" << x << '\\n'\r\n#define all(v) v.begin() , v.end()\r\n// std::mt19937 rnd(std::chrono::system_clock::now().time_since_epoch().count());\r\n\r\n#define x first\r\n#define y second\r\n#define int long long\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef pair<int , int> PII;\r\n\r\nconst int N = 100;\r\nconst int INF = 0x3f3f3f3f;\r\nconst int mod = 1e9 + 7;\r\n\r\nint read(){\r\n    int x = 0 , f = 1;\r\n    char c = getchar();\r\n    while(c < '0' || c > '9'){\r\n        if(c == '-')f = -1;\r\n        c = getchar();\r\n    }\r\n    while(c >= '0' && c <= '9'){\r\n        x = x * 10 + c - '0';\r\n        c = getchar();\r\n    }\r\n    return x * f;\r\n}\r\n\r\ntemplate <typename T> inline void write(T x) {\r\n    static int stk[100], top = 0;\r\n    if (x == 0) return (void)putchar('0');\r\n    if (x < 0) x = -x, putchar('-');\r\n    while (x) stk[++top] = x % 10, x /= 10;\r\n    while (top) putchar(stk[top--] + '0');\r\n}\r\n\r\nint n;\r\n\r\nstruct Matrix {\r\n    int v[N][N];\r\n    Matrix (int t = 0) {\r\n        memset(v, 0, sizeof v);\r\n        if (t == 1)\r\n            for (int i = 0; i < n; i++)\r\n                v[i][i] = 1;\r\n    }\r\n    Matrix operator*(const Matrix& b) const {\r\n        Matrix res;\r\n        for (int k = 0; k < n; k++)\r\n            for (int i = 0; i < n; i++)\r\n                for (int j = 0; j < n; j++)\r\n                    (res.v[i][j] += 1ll * this->v[i][k] * b.v[k][j] % mod) %= mod;\r\n        return res;\r\n    }\r\n    Matrix operator^(int b) {\r\n        Matrix res = 1, a = *this;\r\n        while (b) {\r\n            if (b & 1) res = res * a;\r\n            a = a * a;\r\n            b >>= 1;\r\n        }\r\n        return res;\r\n    }\r\n};\r\n\r\nint qmi(int a,  int b){\r\n    int res  = 1;\r\n    while(b){\r\n        if(b & 1)res = res * a % mod;\r\n        a = a * a % mod;\r\n        b >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\nvoid solve(){\r\n    Matrix a , b;\r\n    int t , x , k;\r\n    cin >> t >> x >> k;\r\n    n = x;\r\n    int res = (k + x) % mod;\r\n    res = res * qmi((2 * k + 1) % mod , t - 1) % mod;\r\n    for(int i = 0 ; i < x ; i ++)a.v[0][i] = 1;\r\n    for(int i = 0 ; i < x ; i ++){\r\n        for(int j = 0 ; j < x ; j ++)\r\n            b.v[i][j] = (abs(i - j) <= k);\r\n    }\r\n    b = b ^ (t - 1);\r\n    a = a * b;\r\n    for(int i = 0 ; i < x ; i ++)res = ((res - a.v[0][i]) % mod + mod) % mod;\r\n    cout << res << endl;\r\n}\r\n\r\nsigned main(){\r\n    // freopen(\"test.in\",\"r\",stdin);\r\n    // freopen(\"test.out\",\"w\",stdout);\r\n    int T;\r\n    cin >> T;\r\n    while(T --){\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n/* stuff you should look for\r\n * int overflow, array bounds\r\n * special cases (n=1?)\r\n * do smth instead of nothing and stay organized\r\n * WRITE STUFF DOWN\r\n * DON'T GET STUCK ON ONE APPROACH\r\n */"
}