{
    "id": 229124472,
    "contestId": 570,
    "creationTimeSeconds": 1697929720,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 570,
        "index": "D",
        "name": "Tree Requests",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 570,
        "members": [
            {
                "handle": "imann"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1439483400
    },
    "programmingLanguage": "Clang++17 Diagnostics",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <map>\n#include <set>\n#include <vector>\n\nconst int MAX_N = 500 * 1000 + 10;\n\nstd::vector<int> adj[MAX_N];\nchar letters[MAX_N];\nbool answer[MAX_N];\n\nstruct QueryValue {\n  int index;\n  int h;\n};\nstd::map<int, std::vector<QueryValue>> queries;\nstd::map<int, int> hight_letters[MAX_N];\n\nvoid dfs(int v, int parent, int hight);\nvoid merge(int v, int u);\n\nint main() {\n  std::ios::sync_with_stdio(false);\n\n  int n, m;\n  std::cin >> n >> m;\n  for (int i = 1; i < n; ++i) {\n    int parent;\n    std::cin >> parent;\n    parent--;\n    adj[i].push_back(parent);\n    adj[parent].push_back(i);\n  }\n  for (int i = 0; i < n; ++i) {\n    std::cin >> letters[i];\n  }\n  for (int i = 0; i < m; ++i) {\n    int v, h;\n    std::cin >> v >> h;\n    queries[v - 1].push_back({i, h});\n  }\n\n  dfs(0, -1, 1);\n\n  for (int i = 0; i < m; ++i) {\n    std::cout << (answer[i] ? \"Yes\" : \"No\") << std::endl;\n  }\n  return 0;\n}\n\nvoid dfs(int v, int parent, int hight) {\n  hight_letters[v][hight] ^= (1 << (letters[v] - 'a'));\n  for (auto u : adj[v]) {\n    if (u == parent) {\n      continue;\n    }\n    dfs(u, v, hight + 1);\n    merge(v, u);\n  }\n\n  for (auto q : queries[v]) {\n    int state = hight_letters[v][q.h];\n    answer[q.index] = (state & (state - 1)) == 0;\n  }\n}\n\nvoid merge(int v, int u) {\n  if (hight_letters[v].size() < hight_letters[u].size()) {\n    hight_letters[v].swap(hight_letters[u]));\n  }\n  for (auto h : hight_letters[u]) {\n    hight_letters[v][h.first] ^= h.second;\n  }\n}\n"
}