{
    "id": 223471003,
    "contestId": 570,
    "creationTimeSeconds": 1694777101,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 570,
        "index": "D",
        "name": "Tree Requests",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "bitmasks",
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 570,
        "members": [
            {
                "handle": "Jamshed11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1439483400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 686,
    "memoryConsumedBytes": 183910400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define ll long long int\r\n\r\nvoid func(ll par, ll child, ll &t, vector<vector<ll>> &a, vector<ll> &inTime, vector<ll> &outTime, vector<ll> &d){\r\n    d[child] = 1 + d[par];\r\n\r\n    t++;\r\n    inTime[child] = t;\r\n\r\n    for (auto i:a[child])\r\n    {\r\n        if(i != par){\r\n            func(child, i, t, a, inTime, outTime, d);\r\n        }\r\n    }\r\n    \r\n    t++;\r\n    outTime[child] = t;\r\n}\r\n\r\nvoid solve(){\r\n\r\n    ll n, e, qCnt;\r\n    cin >> n >> qCnt;\r\n    e = n-1; // For Tree\r\n\r\n    // For Graph;\r\n    // cin >> e; \r\n\r\n    vector<ll> p (n+1);\r\n    vector<vector<ll>> a (n+1);\r\n\r\n    for (ll i = 2; i <= n; i++)\r\n    {\r\n        cin >> p[i];\r\n        a[p[i]].push_back(i);\r\n    }\r\n    \r\n    string s;\r\n    cin >> s;\r\n\r\n    s = \"#\" + s;\r\n    \r\n    //some similarities with euler tour\r\n    vector<map<ll, array<ll, 26>>> v;//depth<map<time, array of frequencies>>\r\n    vector<ll> d (n+1);\r\n    vector<ll> inTime (n+1);\r\n    vector<ll> outTime (n+1);\r\n\r\n    ll t = 0;\r\n\r\n    func(1, 1, t, a, inTime, outTime, d);\r\n\r\n    for (ll i = 1; i <= n; i++)\r\n    {\r\n        while(d[i] >= v.size()){\r\n            map<ll, array<ll, 26>> temp;\r\n            v.push_back(temp);\r\n        }\r\n        \r\n        ll c = s[i] - 'a';\r\n\r\n        v[d[i]][inTime[i]][c] = 1;\r\n    }\r\n    \r\n    vector<array<ll, 4>> q (qCnt);///<depth of v, v, d, i>\r\n\r\n    for (ll i = 0; i < qCnt; i++)\r\n    {\r\n        cin >> q[i][1] >> q[i][2];\r\n        q[i][0] = d[q[i][0]];\r\n        q[i][3] = i;\r\n    }\r\n    \r\n    sort(q.begin(), q.end(), greater<>());\r\n\r\n    vector<bool> ans (qCnt);\r\n\r\n    for (ll i = 0; i < qCnt; i++)\r\n    {\r\n        ll u = q[i][1];\r\n        ll d = q[i][2];\r\n        ll ind = q[i][3];\r\n\r\n        if(d >= v.size()){\r\n            continue;\r\n        }\r\n\r\n        auto it = v[d].lower_bound(inTime[u]);\r\n\r\n        if(it != v[d].end()){\r\n            if(it->first <= outTime[u]){\r\n                array<ll, 26> f;\r\n                f.fill(0);\r\n\r\n                vector<ll> eraseTime;\r\n\r\n                while(it != v[d].end() && it->first <= outTime[u]){\r\n                    for (ll j = 0; j < 26; j++)\r\n                    {\r\n                        f[j] += it->second[j];\r\n                    }\r\n                    \r\n                    eraseTime.push_back(it->first);\r\n                    it++;\r\n                }\r\n\r\n                for(auto i:eraseTime){\r\n                    v[d].erase(i);\r\n                }\r\n\r\n                v[d][inTime[u]] = f;\r\n\r\n                ll cntOdd = 0;\r\n\r\n                for (ll j = 0; j < 26; j++)\r\n                {\r\n                    if(f[j] % 2 == 1){\r\n                        cntOdd++;\r\n                    }\r\n                }\r\n\r\n                if(cntOdd <= 1){\r\n                    ans[ind] = true;\r\n                }\r\n            }\r\n            else{\r\n                ans[ind] = true;\r\n            }\r\n        }\r\n        else{\r\n            ans[ind] = true;\r\n        }\r\n    }\r\n\r\n    for (ll i = 0; i < qCnt; i++)\r\n    {\r\n        if(ans[i]){\r\n            cout << \"Yes\\n\";\r\n        }\r\n        else{\r\n            cout << \"No\\n\";\r\n        }\r\n    }\r\n}\r\n\r\nint main() { \r\n    \r\n    ios_base::sync_with_stdio(false);\r\n\tcin.tie(NULL); cout.tie(NULL);\r\n\r\n    ll T = 1;\r\n    \r\n    while (T--)\r\n    {\r\n        solve();\r\n    }\r\n    \r\n    return 0;\r\n\r\n}"
}