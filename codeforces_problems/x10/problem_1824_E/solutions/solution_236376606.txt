{
    "id": 236376606,
    "contestId": 1824,
    "creationTimeSeconds": 1702048113,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1824,
        "index": "E",
        "name": "LuoTianyi and Cartridge",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3500,
        "tags": [
            "data structures",
            "trees"
        ]
    },
    "author": {
        "contestId": 1824,
        "members": [
            {
                "handle": "luogu_bot4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1683547500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 59,
    "timeConsumedMillis": 2168,
    "memoryConsumedBytes": 136294400,
    "source": "// LUOGU_RID: 138775371\n//ANMHLIJKTJIY!\r\n#pragma GCC optimize(2)\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\r\n#pragma GCC diagnostic error \"-fwhole-program\"\r\n#pragma GCC diagnostic error \"-fcse-skip-blocks\"\r\n#pragma GCC diagnostic error \"-funsafe-loop-optimizations\"\r\n#include <bits/stdc++.h>\r\n#define INF 1000000000\r\n#define LINF 1000000000000000000\r\n#define MOD 1000000007\r\n#define mod 998244353\r\n#define F first\r\n#define S second\r\n#define ll long long\r\n#define N 200010\r\nusing namespace std;\r\nstruct SegT{\r\n\tll lo[N<<2],hi[N<<2],sum[N<<2],val[N<<2];\r\n\tvoid build(ll x,ll l,ll r)\r\n\t{\r\n\t\tlo[x]=l,hi[x]=r,sum[x]=val[x]=0;\r\n\t\tif(l==r)\r\n\t\t{\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tll mid=(l+r)>>1,a=x<<1;\r\n\t\tbuild(a,l,mid);\r\n\t\tbuild(a|1,mid+1,r);\r\n\t\treturn;\r\n\t}\r\n\tvoid update(ll x,ll l,ll v)\r\n\t{\r\n\t\tll tl=lo[x],tr=hi[x];\r\n\t\tif(tl==l&&l==tr)\r\n\t\t{\r\n\t\t\tsum[x]+=v;\r\n\t\t\tval[x]=sum[x]*tl;\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tll mid=(tl+tr)>>1,a=x<<1;\r\n\t\tif(mid>=l)\r\n\t\t{\r\n\t\t\tupdate(a,l,v);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tupdate(a|1,l,v);\r\n\t\t}\r\n\t\tsum[x]=sum[a]+sum[a|1];\r\n\t\tval[x]=val[a]+val[a|1];\r\n\t\treturn;\r\n\t}\r\n\tll query(ll x,ll v)\r\n\t{\r\n\t\tif(!v)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tll tl=lo[x],tr=hi[x];\r\n\t\tif(tl==tr)\r\n\t\t{\r\n\t\t\treturn tl*min(v,sum[x]);\r\n\t\t}\r\n\t\tll a=x<<1;\r\n\t\tif(v>sum[a|1])\r\n\t\t{\r\n\t\t\treturn val[a|1]+query(a,v-sum[a|1]);\r\n\t\t}\r\n\t\treturn query(a|1,v);\r\n\t}\r\n}segtn,segte;\r\nll n,a[N],b[N],fa[N],totleaf=0,leafnum=0,totnd,toted;\r\nvector<pair<ll,pair<ll,ll> > > alled;\r\nset<pair<ll,ll> > nei[N];\r\nmultiset<ll> nds[N];\r\nll getf(ll x){return x==fa[x]?x:fa[x]=getf(fa[x]);}\r\nvoid insed(ll v)\r\n{\r\n\tsegte.update(1,v,1);\r\n\treturn;\r\n}\r\nvoid deled(ll v)\r\n{\r\n\tsegte.update(1,v,-1);\r\n\treturn;\r\n}\r\nvoid insnd(ll v)\r\n{\r\n\tsegtn.update(1,v,1);\r\n\treturn;\r\n}\r\nvoid delnd(ll v)\r\n{\r\n\tsegtn.update(1,v,-1);\r\n\treturn;\r\n}\r\nll querynd(ll v)\r\n{\r\n\treturn segtn.query(1,v);\r\n}\r\nll queryed(ll v)\r\n{\r\n\treturn segte.query(1,v);\r\n}\r\nvoid Merge(ll x,ll y)\r\n{\r\n//\tcout<<\"merge: \"<<x<<\" , \"<<y<<endl;\r\n\tx=getf(x),y=getf(y);\r\n\tif(x==y)\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\tdeled((*nei[x].lower_bound(make_pair(y,0))).S);\r\n\ttoted--;\r\n\tif(nei[x].size()==1)\r\n\t{\r\n\t\tleafnum--;\r\n\t\tif(!nds[x].empty())\r\n\t\t{\r\n\t\t\tll cval=*(--nds[x].end());\r\n\t\t\ttotleaf-=cval;\r\n\t\t\tinsnd(*(--nds[x].end()));\r\n\t\t}\r\n\t}\r\n\tif(nei[y].size()==1)\r\n\t{\r\n\t\tleafnum--;\r\n\t\tif(!nds[y].empty())\r\n\t\t{\r\n\t\t\tll cval=*(--nds[y].end());\r\n\t\t\ttotleaf-=cval;\r\n\t\t\tinsnd(*(--nds[y].end()));\r\n\t\t}\r\n\t}\r\n\tnei[x].erase(nei[x].lower_bound(make_pair(y,0)));\r\n\tnei[y].erase(nei[y].lower_bound(make_pair(x,0)));\r\n\tif(nds[x].size()>nds[y].size())\r\n\t{\r\n\t\tswap(x,y);\r\n\t}\r\n\tfor(set<pair<ll,ll> >::iterator it=nei[x].begin();it!=nei[x].end();it++)\r\n\t{\r\n\t\tnei[it->F].erase(make_pair(x,it->S));\r\n\t\tnei[it->F].insert(make_pair(y,it->S));\r\n\t\tnei[y].insert(*it);\r\n\t}\r\n\tnei[x].clear();\r\n\tfor(multiset<ll>::iterator it=nds[x].begin();it!=nds[x].end();it++)\r\n\t{\r\n\t\tnds[y].insert(*it);\r\n\t}\r\n\tnds[x].clear();\r\n\tfa[x]=y;\r\n\tif(nei[y].size()==1)\r\n\t{\r\n\t\tleafnum++;\r\n\t\tif(!nds[y].empty())\r\n\t\t{\r\n\t\t\tll cval=*(--nds[y].end());\r\n\t\t\ttotleaf+=cval;\r\n\t\t\tdelnd(cval);\r\n\t\t}\r\n\t}\r\n\treturn;\r\n}\r\nll calc()\r\n{\r\n\tll tot=min(totnd,toted+1);\r\n\tll ndnum=tot-leafnum,ednum=tot-1;\r\n//\tcout<<ndnum<<\" , \"<<ednum<<\": \"<<querynd(ndnum)<<\" , \"<<queryed(ednum)<<endl;\r\n\treturn totleaf+querynd(ndnum)+queryed(ednum);\r\n}\r\nint main(){\r\n\tll i,j,x,y,z,w;\r\n\tsegtn.build(1,1,200000);\r\n\tsegte.build(1,1,200000);\r\n\tscanf(\"%lld\",&n);\r\n\ttotnd=n,toted=n-1;\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%lld\",&a[i]);\r\n\t\talled.push_back(make_pair(a[i],make_pair(i,-1)));\r\n\t}\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%lld\",&b[i]);\r\n\t\tnds[i].insert(b[i]);\r\n\t\tinsnd(b[i]);\r\n\t}\r\n\tfor(i=1;i<n;i++)\r\n\t{\r\n\t\tscanf(\"%lld%lld%lld%lld\",&x,&y,&z,&w);\r\n\t\tx--,y--;\r\n\t\talled.push_back(make_pair(z,make_pair(x,y)));\r\n\t\tnei[x].insert(make_pair(y,w));\r\n\t\tnei[y].insert(make_pair(x,w));\r\n\t\tinsed(w);\r\n\t}\r\n\tfor(i=0;i<n;i++)\r\n\t{\r\n\t\tfa[i]=i;\r\n\t\tif(nei[i].size()==1)\r\n\t\t{\r\n\t\t\tleafnum++;\r\n\t\t\ttotleaf+=b[i];\r\n\t\t\tdelnd(b[i]);\r\n\t\t}\r\n\t}\r\n\tsort(alled.begin(),alled.end());\r\n\tll ans=0;\r\n\tfor(i=0;i<alled.size();i++)\r\n\t{\r\n\t\tans=max(ans,alled[i].F*calc());\r\n//\t\tcout<<alled[i].F<<\": \"<<calc()<<endl;\r\n\t\tif(alled[i].S.S==-1)\r\n\t\t{\r\n\t\t\ttotnd--;\r\n\t\t\tx=alled[i].S.F,y=getf(x);\r\n//\t\t\tcout<<\"erz: \"<<x<<endl;\r\n\t\t\tdelnd(b[x]);\r\n\t\t\tif(nei[y].size()==1)\r\n\t\t\t{\r\n\t\t\t\tll cval=*(--nds[y].end());\r\n\t\t\t\ttotleaf-=cval;\r\n\t\t\t\tinsnd(cval);\r\n\t\t\t}\r\n\t\t\tnds[y].erase(nds[y].lower_bound(b[x]));\r\n\t\t\tif(nei[y].size()==1)\r\n\t\t\t{\r\n\t\t\t\tif(nds[y].empty())\r\n\t\t\t\t{\r\n\t\t\t\t\tz=y;\r\n\t\t\t\t\twhile(true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tw=(*nei[z].begin()).F;\r\n\t\t\t\t\t\tMerge(z,w);\r\n\t\t\t\t\t\tw=getf(w);\r\n\t\t\t\t\t\tif(nds[w].empty()&&nei[w].size()==1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tz=w;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tll cval=*(--nds[y].end());\r\n\t\t\t\t\ttotleaf+=cval;\r\n\t\t\t\t\tdelnd(cval);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tx=alled[i].S.F,y=alled[i].S.S;\r\n\t\t\tMerge(x,y);\r\n\t\t}\r\n\t}\r\n\tprintf(\"%lld\\n\",ans);\r\n\treturn 0;\r\n}"
}