{
    "id": 218483559,
    "contestId": 793,
    "creationTimeSeconds": 1691842747,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 793,
        "index": "D",
        "name": "Presents in Bankopolis",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 793,
        "members": [
            {
                "handle": "Surver"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1492965900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 512000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#ifndef ONLINE_JUDGE\r\n#include \"algo/debug.h\"\r\n#else\r\n#define debug(...) 42\r\n#endif\r\n\r\nvoid solve(){\r\n    int n,k_;\r\n    cin>>n>>k_;\r\n    int m;\r\n    cin>>m;\r\n    vector<vector<pair<int,int>>> g(n+1);\r\n    for (int i=0;i<m;i++){\r\n        int u,v,wt;\r\n        cin>>u>>v>>wt;\r\n        g[u].push_back({v,wt});\r\n    }\r\n    int dp[k_][n+1][n+1];\r\n    int inf=(int)1e9+7;\r\n    for (int k=k_-1;k>=0;k--){\r\n        for (int curr=1;curr<=n;curr++){\r\n            for (int bound=1;bound<=n;bound++){\r\n                if (k==k_-1){\r\n                    dp[k][curr][bound]=0;\r\n                    continue;\r\n                }\r\n                dp[k][curr][bound]=inf;\r\n                if (bound<=curr){\r\n                    for (auto [node,val]:g[curr]){\r\n                        if (node>=bound && node<curr){\r\n                            dp[k][curr][bound]=min(dp[k][curr][bound],val+min(dp[k+1][node][bound],dp[k+1][node][curr-1]));\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    for (auto [node,val]:g[curr]){\r\n                        if (node<=bound && node>curr){\r\n                            dp[k][curr][bound]=min(dp[k][curr][bound],val+min(dp[k+1][node][curr+1],dp[k+1][node][bound]));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    int ans=inf;\r\n    for (int i=1;i<=n;i++){\r\n        ans=min(ans,min(dp[0][i][1],dp[0][i][n]));\r\n    }\r\n    cout<<ans<<\"\\n\";\r\n}\r\n\r\nint32_t main(){\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int t=1;\r\n    while(t--){\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}