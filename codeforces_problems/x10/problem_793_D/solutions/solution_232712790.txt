{
    "id": 232712790,
    "contestId": 793,
    "creationTimeSeconds": 1699945399,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 793,
        "index": "D",
        "name": "Presents in Bankopolis",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "dp",
            "graphs",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 793,
        "members": [
            {
                "handle": "Kevin0501"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1492965900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 43,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 5120000,
    "source": "#include <iostream>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <vector>\r\n#include <cstring>\r\nusing namespace std;\r\nconst int N = 85;\r\nconst int inf = 1e9 + 5;\r\nint n, k;\r\nint m;\r\nstruct node {\r\n    int to;\r\n    int w;\r\n};\r\nnode make(int v0, int w0) {\r\n    node res;\r\n    res.to = v0;\r\n    res.w = w0;\r\n    return res;\r\n}\r\nvector<node> g[N];\r\nint dp[N][N][N][2];//between ... and ...(non-included), need go ... steps, you are in 0-left/1-right\r\nint solve(int l, int r, int st, int ps) {\r\n    if(dp[l][r][st][ps] != -1) {\r\n        return dp[l][r][st][ps];\r\n    }\r\n    if(st == 1) {\r\n        return dp[l][r][st][ps] = 0;\r\n    }\r\n    if(l >= r - 1) {\r\n        return inf;\r\n    }\r\n    dp[l][r][st][ps] = inf;\r\n    if(ps == 0) {\r\n        for(int i = 0; i < g[l].size(); i++) {\r\n            int v = g[l][i].to;\r\n            int w = g[l][i].w;\r\n            if(l < v && v < r) {\r\n                dp[l][r][st][ps] = min(dp[l][r][st][ps], min(solve(l, v, st - 1, 1), solve(v, r, st - 1, 0)) + w);\r\n            }\r\n        }\r\n    } else {\r\n        for(int i = 0; i < g[r].size(); i++) {\r\n            int v = g[r][i].to;\r\n            int w = g[r][i].w;\r\n            if(l < v && v < r) {\r\n                dp[l][r][st][ps] = min(dp[l][r][st][ps], min(solve(l, v, st - 1, 1), solve(v, r, st - 1, 0)) + w);\r\n            }\r\n        }\r\n    }\r\n    return dp[l][r][st][ps];\r\n}\r\nint main() {\r\n    cin >> n >> k;\r\n    cin >> m;\r\n    int u, v, w;\r\n    for(int i = 1; i <= m; i++) {\r\n        cin >> u >> v >> w;\r\n        g[u].push_back(make(v, w));\r\n    }\r\n    for(int i = 1; i <= n; i++) {\r\n        g[0].push_back(make(i, 0));\r\n    }\r\n    memset(dp, -1, sizeof(dp));\r\n    int ans = solve(0, n + 1, k + 1, 0);\r\n    if(ans != inf) {\r\n        printf(\"%d\\n\", ans);\r\n    } else {\r\n        printf(\"-1\\n\");\r\n    }\r\n    return 0;\r\n}\r\n"
}