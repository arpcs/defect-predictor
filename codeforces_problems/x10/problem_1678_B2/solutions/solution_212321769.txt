{
    "id": 212321769,
    "contestId": 1678,
    "creationTimeSeconds": 1688628486,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1678,
        "index": "B2",
        "name": "Tokitsukaze and Good 01-String (hard version)",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1678,
        "members": [
            {
                "handle": "kaichisaki"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1652020500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n \r\n#define int long long int\r\n#define endl \"\\n\"\r\n#define fast ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n#define pb push_back\r\nint int_max = 9223372036854775807;\r\nint int_min = -9223372036854775807;\r\nint mod = 998244353;\r\n \r\nint bexp(int x, int n){\r\n    if(n == 0) return 1;\r\n    if(n == 1) return x;\r\n    if(n%2 == 1){\r\n        int temp = (bexp(x, (n-1)/2))%mod;\r\n        int a = (temp*temp)%mod;\r\n        return (a*x)%mod;\r\n    }\r\n    else{\r\n        int temp = (bexp(x, n/2))%mod;\r\n        return (temp*temp)%mod;\r\n    }\r\n}\r\n \r\nint ncr(int n, int r, vector<int> &factorial){\r\n    int num = factorial[n];\r\n    int den = (factorial[r]*factorial[n-r])%mod;\r\n    return (num*bexp(den, mod - 2))%mod;\r\n}\r\n \r\nint npr(int n, int r){\r\n    int ans = 1;\r\n    for(int i = n - r + 1; i<=n; i++)\r\n        ans = (ans*i)%mod;\r\n    return ans;\r\n}\r\n \r\nint find(int v, vector<int> &parent){\r\n    if(v == parent[v]) return v;\r\n    return parent[v] = find(parent[v], parent);\r\n}\r\nvoid Union(int a, int b, vector<int> &parent, vector<int> &size){\r\n    a = find(a, parent);\r\n    b = find(b, parent);\r\n    if(a == b) return;\r\n    if(size[a] < size[b]) swap(a, b);\r\n    parent[b] = a;\r\n    size[a] += size[b];\r\n}\r\n \r\nint gcd(int a, int b){\r\n    if(b > a) return gcd(b, a);\r\n    if(a%b == 0) return b;\r\n    return gcd(b, a%b);\r\n}\r\nint lcm(int a, int b){\r\n    int g = gcd(a, b);\r\n    a = a/g;\r\n    b = b/g;\r\n    return a*b*g;\r\n}\r\n \r\nint seg(vector<int> &v, int l, int r){\r\n    int ans = LLONG_MIN;\r\n    while(l <= r){\r\n        if(l%2 == 1){\r\n            ans = max(ans, v[l]);\r\n            l++;\r\n        }\r\n        if(r%2 == 0){\r\n            ans = max(ans, v[r]);\r\n            r--;\r\n        }\r\n \r\n        l /= 2;\r\n        r /= 2;\r\n    }\r\n    return ans;\r\n}\r\nint seg2(vector<int> &v, int l, int r){\r\n    int ans = LLONG_MAX;\r\n    while(l <= r){\r\n        if(l%2 == 1){\r\n            ans = min(ans, v[l]);\r\n            l++;\r\n        }\r\n        if(r%2 == 0){\r\n            ans = min(ans, v[r]);\r\n            r--;\r\n        }\r\n \r\n        l /= 2;\r\n        r /= 2;\r\n    }\r\n    return ans;\r\n}\r\nint ceil2(int a, int b) {\r\n    return (a + b - 1) / b;\r\n}\r\n\r\nint bsearch(vector<int> &v, int x){\r\n    int l = 0;\r\n    int r = v.size() - 1;\r\n    int mid = (l+r)/2;\r\n    int ans = 0;\r\n    while(l <= r){\r\n        if(v[mid] < x){\r\n            ans = mid;\r\n            l = mid + 1;\r\n        }\r\n        else r = mid - 1;\r\n        mid = (l+r)/2;\r\n    }\r\n    return ans;\r\n}\r\n\r\nint mmi(int a){\r\n    int temp = bexp(a, mod - 2);\r\n    return temp%mod;\r\n}\r\nint dfs(vector<int> adj[], vector<int> &leaves, int node, int parent){\r\n    int ans = 0;\r\n    for(int i : adj[node]){\r\n        if(i != parent)\r\n            ans += dfs(adj, leaves, i, node);\r\n    }\r\n    if(ans == 0){\r\n        leaves[node] = 1;\r\n        return 1;\r\n    }\r\n    leaves[node] = ans;\r\n    return ans;\r\n}\r\nint32_t main(){\r\n    fast\r\n    int t;\r\n    cin>>t;\r\n    while(t--){\r\n        int n; cin>>n;\r\n        string s;\r\n        cin>>s;\r\n        vector<int> v;\r\n        int count = 1;\r\n        for(int i = 1; i<n; i++){\r\n            if(s[i] == s[i-1]) count++;\r\n            else{\r\n                v.push_back(count);\r\n                count = 1;\r\n            }\r\n            if(i == n-1){\r\n                v.pb(count);\r\n                break;\r\n            }\r\n        }\r\n        vector<bool> overall(v.size(), false);\r\n        // for(int i: v) cout<<i<<\" \";\r\n        // cout<<endl;\r\n        bool flag = true;\r\n        int prev = -1;\r\n        int minmoves = 0;\r\n        vector<pair<int, int>> oto;\r\n        for(int i = 0; i<v.size(); i++){\r\n            if(v[i]%2 == 1){\r\n                if(flag){\r\n                    prev = i;\r\n                    flag = false;\r\n                }\r\n                else{\r\n                    minmoves += i - prev;\r\n                    flag = true;\r\n                    oto.pb({prev, i});\r\n                }\r\n            }\r\n            if(flag) overall[i] = true;\r\n        }\r\n        vector<bool> vis(v.size(), false);\r\n        int segments1 = v.size();\r\n        int segments2 = v.size();\r\n        for(int i = 0; i<oto.size(); i++){\r\n            int start = oto[i].first;\r\n            int end = oto[i].second;\r\n            for(int j = start; j<=end; j++){\r\n                if((v[j] == 2 || v[j] == 1) && !vis[j-1]){\r\n                    if(j == 0 || j == v.size() - 1) segments1--;\r\n                    else segments1 -= 2;\r\n                    vis[j] = true;\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        vector<bool> vis1(v.size(), false);\r\n        for(int i = 0; i<oto.size(); i++){\r\n            int start = oto[i].first;\r\n            int end = oto[i].second;\r\n            for(int j = start; j<=end; j++){\r\n                if(j == 0) continue;\r\n                if((v[j] == 2 || v[j] == 1) && !vis1[j-1]){\r\n                    if(j == 0 || j == v.size() - 1) segments2--;\r\n                    else segments2 -= 2;\r\n                    vis1[j] = true;\r\n                    j++;\r\n                }\r\n            }\r\n        } //ans\r\n        cout<<minmoves<<\" \"<<min(segments2, segments1)<<endl;\r\n    }\r\n    return 0;\r\n}"
}