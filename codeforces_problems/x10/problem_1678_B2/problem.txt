{
    "contestId": 1678,
    "index": "B2",
    "name": "Tokitsukaze and Good 01-String (hard version)",
    "type": "PROGRAMMING",
    "points": 1000.0,
    "rating": 1800,
    "tags": [
        "dp",
        "greedy",
        "implementation"
    ],
    "desc": {
        "title": "B2. Tokitsukaze and Good 01-String (hard version)",
        "statement": "<p><span class=\"tex-font-style-it\">This is the hard version of the problem. The only difference between the two versions is that the harder version asks additionally for a minimum number of subsegments.</span></p><p>Tokitsukaze has a binary string $$$s$$$ of length $$$n$$$, consisting only of zeros and ones, $$$n$$$ is <span class=\"tex-font-style-bf\">even</span>.</p><p>Now Tokitsukaze divides $$$s$$$ into <span class=\"tex-font-style-bf\">the minimum number</span> of <span class=\"tex-font-style-bf\">contiguous</span> subsegments, and for each subsegment, all bits in each subsegment are the same. After that, $$$s$$$ is considered good if the lengths of all subsegments are even.</p><p>For example, if $$$s$$$ is \"<span class=\"tex-font-style-tt\">11001111</span>\", it will be divided into \"<span class=\"tex-font-style-tt\">11</span>\", \"<span class=\"tex-font-style-tt\">00</span>\" and \"<span class=\"tex-font-style-tt\">1111</span>\". Their lengths are $$$2$$$, $$$2$$$, $$$4$$$ respectively, which are all even numbers, so \"<span class=\"tex-font-style-tt\">11001111</span>\" is good. Another example, if $$$s$$$ is \"<span class=\"tex-font-style-tt\">1110011000</span>\", it will be divided into \"<span class=\"tex-font-style-tt\">111</span>\", \"<span class=\"tex-font-style-tt\">00</span>\", \"<span class=\"tex-font-style-tt\">11</span>\" and \"<span class=\"tex-font-style-tt\">000</span>\", and their lengths are $$$3$$$, $$$2$$$, $$$2$$$, $$$3$$$. Obviously, \"<span class=\"tex-font-style-tt\">1110011000</span>\" is not good.</p><p>Tokitsukaze wants to make $$$s$$$ good by changing the values of some positions in $$$s$$$. Specifically, she can perform the operation any number of times: change the value of $$$s_i$$$ to '<span class=\"tex-font-style-tt\">0</span>' or '<span class=\"tex-font-style-tt\">1</span>' ($$$1 \\leq i \\leq n$$$). Can you tell her the minimum number of operations to make $$$s$$$ good? <span class=\"tex-font-style-bf\">Meanwhile, she also wants to know the minimum number of subsegments that $$$s$$$ can be divided into among all solutions with the minimum number of operations.</span></p>",
        "inputSpecification": "<p>The first contains a single positive integer $$$t$$$ ($$$1 \\leq t \\leq 10\\,000$$$)\u00a0\u2014 the number of test cases.</p><p>For each test case, the first line contains a single integer $$$n$$$ ($$$2 \\leq n \\leq 2 \\cdot 10^5$$$)\u00a0\u2014 the length of $$$s$$$, it is guaranteed that $$$n$$$ is even.</p><p>The second line contains a binary string $$$s$$$ of length $$$n$$$, consisting only of zeros and ones.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases does not exceed $$$2 \\cdot 10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, print a single line with two integers\u00a0\u2014 the minimum number of operations to make $$$s$$$ good, and the minimum number of subsegments that $$$s$$$ can be divided into among all solutions with the minimum number of operations.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">5</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">10</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1110011000</div><div class=\"test-example-line test-example-line-even test-example-line-2\">8</div><div class=\"test-example-line test-example-line-even test-example-line-2\">11001111</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">00</div><div class=\"test-example-line test-example-line-even test-example-line-4\">2</div><div class=\"test-example-line test-example-line-even test-example-line-4\">11</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">100110</div>",
                "output": "\n3 2\n0 3\n0 1\n0 1\n3 1\n"
            }
        ],
        "note": "<p>In the first test case, one of the ways to make $$$s$$$ good is the following.</p><p>Change $$$s_3$$$, $$$s_6$$$ and $$$s_7$$$ to '<span class=\"tex-font-style-tt\">0</span>', after that $$$s$$$ becomes \"<span class=\"tex-font-style-tt\">1100000000</span>\", it can be divided into \"<span class=\"tex-font-style-tt\">11</span>\" and \"<span class=\"tex-font-style-tt\">00000000</span>\", which lengths are $$$2$$$ and $$$8$$$ respectively, the number of subsegments of it is $$$2$$$. There are other ways to operate $$$3$$$ times to make $$$s$$$ good, such as \"<span class=\"tex-font-style-tt\">1111110000</span>\", \"<span class=\"tex-font-style-tt\">1100001100</span>\", \"<span class=\"tex-font-style-tt\">1111001100</span>\", the number of subsegments of them are $$$2$$$, $$$4$$$, $$$4$$$ respectively. It's easy to find that the minimum number of subsegments among all solutions with the minimum number of operations is $$$2$$$.</p><p>In the second, third and fourth test cases, $$$s$$$ is good initially, so no operation is required.</p>"
    }
}