{
    "contestId": 1286,
    "index": "C2",
    "name": "Madhouse (Hard version)",
    "type": "PROGRAMMING",
    "points": 1000.0,
    "rating": 2800,
    "tags": [
        "brute force",
        "constructive algorithms",
        "hashing",
        "interactive",
        "math"
    ],
    "desc": {
        "title": "C2. Madhouse (Hard version)",
        "statement": "<p><span class=\"tex-font-style-bf\">This problem is different with easy version only by constraints on total answers length</span></p><p><span class=\"tex-font-style-bf\">It is an interactive problem</span></p><p>Venya joined a tour to the madhouse, in which orderlies play with patients the following game. Orderlies pick a string $$$s$$$ of length $$$n$$$, consisting only of lowercase English letters. The player can ask two types of queries: </p><ul> <li> <span class=\"tex-font-style-tt\">? l r</span> \u2013 ask to list all substrings of $$$s[l..r]$$$. Substrings will be returned in random order, and in every substring, all characters will be randomly shuffled. </li><li> <span class=\"tex-font-style-tt\">! s</span> \u2013 guess the string picked by the orderlies. This query can be asked exactly once, after that the game will finish. If the string is guessed correctly, the player wins, otherwise he loses. </li></ul><p>The player can ask <span class=\"tex-font-style-bf\">no more than $$$3$$$ queries</span> of the first type.</p><p>To make it easier for the orderlies, there is an additional limitation: the total number of returned substrings in all queries of the first type must not exceed $$$\\left\\lceil 0.777(n+1)^2 \\right\\rceil$$$ ($$$\\lceil x \\rceil$$$ is $$$x$$$ rounded up).</p><p>Venya asked you to write a program, which will guess the string by interacting with the orderlies' program and acting by the game's rules.</p><p>Your program should immediately terminate after guessing the string using a query of the second type. In case your program guessed the string incorrectly, or it violated the game rules, it will receive verdict <span class=\"tex-font-style-tt\">Wrong answer</span>.</p><p>Note that in every test case the string is fixed beforehand and will not change during the game, which means that the interactor is not adaptive.</p>",
        "inputSpecification": "<p>First line contains number $$$n$$$ ($$$1 \\le n \\le 100$$$)\u00a0\u2014 the length of the picked string.</p>",
        "outputSpecification": null,
        "samples": [
            {
                "input": "\n4\n\na\naa\na\n\ncb\nb\nc\n\nc",
                "output": "\n? 1 2\n\n? 3 4\n\n? 4 4\n\n! aabc"
            }
        ],
        "note": null
    }
}