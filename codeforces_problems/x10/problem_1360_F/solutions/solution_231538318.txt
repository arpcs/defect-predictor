{
    "id": 231538318,
    "contestId": 1360,
    "creationTimeSeconds": 1699245125,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1360,
        "index": "F",
        "name": "Spy-string",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "bitmasks",
            "brute force",
            "constructive algorithms",
            "dp",
            "hashing",
            "strings"
        ]
    },
    "author": {
        "contestId": 1360,
        "members": [
            {
                "handle": "nooob001"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1590327300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#include <ext/pb_ds/assoc_container.hpp> \r\n#include <ext/pb_ds/tree_policy.hpp> \r\nusing namespace __gnu_pbds; \r\n#define int long long\r\n  \r\n#define ordered_set tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update> \r\n  \r\nint dp[11][1<<11];\r\nstring res;\r\n\r\nbool solve(vector<string>& arr,int ind,int mask,string s) {\r\n    int n=arr.size(), m=arr[0].length();\r\n    if(ind>=m) {\r\n        res=s;\r\n        return 1;\r\n    }\r\n    \r\n    if(dp[ind][mask]!=-1) return dp[ind][mask];\r\n    int cnt=0;\r\n    for(int i=0;i<n;i++) {\r\n        if((1<<i)&mask) cnt+=1;\r\n    }\r\n    bool ans=0;\r\n    if(cnt==0) {\r\n        for(int i=0;i<26;i++) {\r\n            int newMask=mask;\r\n            for(int j=0;j<n;j++) {\r\n                int tmp=arr[j][ind]-'a';\r\n                if(tmp!=i) {\r\n                    newMask^=(1<<j);\r\n                }\r\n            }\r\n            string t=s+string(1,i+'a');\r\n            ans=ans | solve(arr,ind+1,newMask,t);\r\n        }\r\n        return dp[ind][mask]=ans;\r\n    }\r\n    \r\n    int tmp=-1;\r\n    for(int i=0;i<n;i++) {\r\n        if((1<<i)&mask) {\r\n            if(tmp==-1)\r\n                tmp=arr[i][ind]-'a';\r\n            else {\r\n                if(tmp!=arr[i][ind]-'a') return dp[ind][mask]=0;\r\n            }\r\n        }\r\n    }\r\n    for(int i=0;i<n;i++) {\r\n        if((arr[i][ind]-'a')!=tmp) {\r\n            mask^=(1<<i);\r\n        }\r\n    }\r\n    s=s+string(1,tmp+'a');\r\n    return dp[ind][mask]=solve(arr,ind+1,mask,s);\r\n}\r\nint32_t main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    \r\n    int t;\r\n    cin>>t;\r\n    while(t--) {\r\n        int n,m;\r\n        cin>>n>>m;\r\n        vector<string> arr(n);\r\n        for(int i=0;i<n;i++) {\r\n            cin>>arr[i];\r\n        }\r\n        res=\"-1\";\r\n        memset(dp,-1,sizeof dp);\r\n        bool isAns=solve(arr,0,0,\"\");\r\n        if(isAns) cout<<res<<'\\n';\r\n        else cout<<-1<<'\\n';\r\n    }\r\n}"
}