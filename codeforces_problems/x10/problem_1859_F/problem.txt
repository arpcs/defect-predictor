{
    "contestId": 1859,
    "index": "F",
    "name": "Teleportation in Byteland",
    "type": "PROGRAMMING",
    "points": 3000.0,
    "rating": 3200,
    "tags": [
        "data structures",
        "dfs and similar",
        "divide and conquer",
        "graphs",
        "shortest paths",
        "trees"
    ],
    "desc": {
        "title": "F. Teleportation in Byteland",
        "statement": "<p>There are $$$n$$$ cities in Byteland, some of which are connected by roads, which can be traversed in any direction. The $$$i$$$-th road has its own hardness parameter $$$w_i$$$. Time spent on traversing a road with its hardness equal to $$$w_i$$$ is $$$\\lceil\\frac{w_i}{c}\\rceil$$$, where $$$c$$$ is the current driving skill.</p><p>The travel network of Byteland is a tree. In other words, between any pair of cities, there is exactly one path that passes through each city at most once.</p><p>In some cities you can visit driving courses. A single course takes $$$T$$$ time to complete, and after completing the course the driver's skill $$$c$$$ is increased by $$$2$$$ times. Notice that the time $$$T$$$ required to complete a course is the same in all cities, and courses can be completed in the same city more than once.</p><p>You need to answer the $$$q$$$ queries: what is the minimum time it takes to get from the city $$$a$$$ to city $$$b$$$ if you start the travelling with driving skill $$$c = 1$$$?</p>",
        "inputSpecification": "<p>Each test contains multiple test cases. The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases. The description of the test cases follows.</p><p>The first line of each test case contains two integers $$$n$$$ and $$$T$$$ ($$$1 \\le n \\le 10^5, 1 \\le T \\le 10^6$$$) - the number of cities and time required to complete a single driving course.</p><p>The following $$$n - 1$$$ lines each contain three integers $$$u_i$$$, $$$v_i$$$ and $$$w_i$$$ ($$$1 \\le u_i, v_i \\le n, 1 \\le w_i \\le 10^6, u_i \\neq v_i$$$), which mean that there exists a road connecting towns $$$u_i$$$ and $$$v_i$$$ with hardness equal to $$$w_i$$$ .</p><p>The next line contains a binary string $$$s$$$ of length $$$n$$$, consisting only of symbols $$$0$$$ and $$$1$$$. If $$$s_i = 1$$$ ($$$1 \\le i \\le n$$$), then you can visit driving courses in the $$$i$$$-th city. If $$$s_i = 0$$$ ($$$1 \\le i \\le n$$$), then you cannot visit driving courses in the $$$i$$$-th city.</p><p>The next line contains a single integer $$$q$$$ ($$$1 \\le q \\le 10^5$$$) \u2014 the number of queries you are required to answer.</p><p>The next $$$q$$$ lines contain two integers $$$a_j$$$, $$$b_j$$$ ($$$1 \\le a_j, b_j \\le n, 1 \\le j \\le q$$$) \u2014 the cities you are required to process in the $$$j$$$-th query.</p><p>It is guaranteed that the given graph is a tree. It is guaranteed that the sum of $$$n$$$ and the sum of $$$q$$$ over all test cases does not exceed $$$10^5$$$.</p>",
        "outputSpecification": "<p>For each query, print one integer in a separate line \u2014 the minimum time it takes to get in the corresponding query.</p>",
        "samples": [
            {
                "input": "\n2\n2 3\n1 2 1\n11\n1\n1 2\n5 3\n1 4 5\n1 3 8\n2 3 8\n4 5 10\n11001\n5\n1 5\n2 5\n5 1\n3 4\n4 2\n",
                "output": "\n1\n11\n14\n11\n13\n15\n"
            }
        ],
        "note": "<p>In the only query of the first test case, it is optimal to ignore the driving courses. Then the minimum time required is equal to the distance between vertexes $$$1$$$ and $$$2$$$, which is $$$1$$$.</p><p>In the first query of the second test case, we can spend $$$3$$$ time in city number $$$1$$$ visiting the driving courses, then go to vertex $$$5$$$. Then the minimum time required is $$$3 + \\lceil\\frac{5}{2}\\rceil + \\lceil\\frac{10}{2}\\rceil = 11$$$.</p>"
    },
    "suggested_categories": [
        "graph theory",
        "tree traversal",
        "shortest path",
        "dynamic programming",
        "network optimization",
        "algorithms",
        "data structures",
        "tree algorithms",
        "graph algorithms",
        "path finding",
        "tree data structure",
        "tree manipulation",
        "driving skills",
        "traveling salesman problem",
        "road network",
        "city traversal",
        "time complexity",
        "distance calculation",
        "skill enhancement",
        "tree optimization"
    ]
}