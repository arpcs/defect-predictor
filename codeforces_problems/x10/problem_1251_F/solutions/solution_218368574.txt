{
    "id": 218368574,
    "contestId": 1251,
    "creationTimeSeconds": 1691767792,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1251,
        "index": "F",
        "name": "Red-White Fence",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "combinatorics",
            "fft"
        ]
    },
    "author": {
        "contestId": 1251,
        "members": [
            {
                "handle": "arvindf232"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571929500
    },
    "programmingLanguage": "Kotlin 1.7",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 107,
    "timeConsumedMillis": 2605,
    "memoryConsumedBytes": 139366400,
    "source": "// 2022-03-26, Sat, 13:30 upto 13:34\r\n// 1:49 restart\r\nimport java.io.BufferedInputStream\r\nimport java.io.File\r\nimport java.io.PrintWriter\r\nimport java.util.*\r\nimport kotlin.system.measureTimeMillis\r\n\r\ninline fun TIME(f:()->Unit){\r\n    val t = measureTimeMillis(){\r\n        f()\r\n    }\r\n    println(\"$t ms\")\r\n}\r\n\r\nobject IO{\r\n    private const val BS = 1 shl 16\r\n    private const val NC = 0.toChar()\r\n    private val buf = ByteArray(BS)\r\n    private var bId = 0\r\n    private var size = 0\r\n    private var c = NC\r\n\r\n    var warningActive = true\r\n    var fakein = StringBuilder()\r\n\r\n    private var IN: BufferedInputStream = BufferedInputStream(System.`in`, BS)\r\n    val OUT: PrintWriter = PrintWriter(System.out)\r\n\r\n    private val char: Char\r\n        get() {\r\n            while (bId == size) {\r\n                size = IN.read(buf) // no need for checked exceptions\r\n                if (size == -1) return NC\r\n                bId = 0\r\n            }\r\n            return buf[bId++].toChar()\r\n        }\r\n\r\n    fun nextInt(): Int {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextLong(): Long {\r\n        var neg = false\r\n        if (c == NC) c = char\r\n        while (c < '0' || c > '9') {\r\n            if (c == '-') neg = true\r\n            c = char\r\n        }\r\n        var res = 0L\r\n        while (c in '0'..'9') {\r\n            res = (res shl 3) + (res shl 1) + (c - '0')\r\n            c = char\r\n        }\r\n        return if (neg) -res else res\r\n    }\r\n    fun nextString():String{\r\n        val ret = StringBuilder()\r\n        while (true){\r\n            c = char\r\n            if(!isWhitespace(c)){ break}\r\n        }\r\n        ret.append(c)\r\n        while (true){\r\n            c = char\r\n            if(isWhitespace(c)){ break}\r\n            ret.append(c)\r\n        }\r\n        return ret.toString()\r\n    }\r\n    fun isWhitespace(c:Char):Boolean{\r\n        return c == ' ' || c == '\\n' || c == '\\r' || c == '\\t'\r\n    }\r\n    fun rerouteInput(){\r\n        if(warningActive){\r\n            put(\"You forgot to disable tests you digital dummy!\")\r\n            println(\"You forgot to disable tests you digital dummy!\")\r\n            warningActive = false\r\n        }\r\n        val S = fakein.toString()\r\n        println(\"New Case \")\r\n        println(S.take(80))\r\n        println(\"...\")\r\n        fakein.clear()\r\n        IN = BufferedInputStream(S.byteInputStream(),BS)\r\n    }\r\n    fun takeFile(name:String){\r\n        IN = BufferedInputStream(File(name).inputStream(),BS)\r\n    }\r\n}\r\nfun put(aa:Any){ IO.OUT.println(aa)}\r\nfun done(){ IO.OUT.close() }\r\nfun share(aa:Any){\r\n    if(aa is IntArray){IO.fakein.append(aa.joinToString(\" \"))}\r\n    else if(aa is LongArray){IO.fakein.append(aa.joinToString(\" \"))}\r\n    else if(aa is List<*>){IO.fakein.append(aa.toString())}\r\n    else{IO.fakein.append(aa.toString())}\r\n    IO.fakein.append(\"\\n\")\r\n}\r\n\r\nval getint:Int get() = IO.nextInt()\r\nval getlong:Long get() = IO.nextLong()\r\nval getstr:String get() = IO.nextString()\r\nfun getline(n:Int):IntArray{\r\n    return IntArray(n){getint}\r\n}\r\nfun getlineL(n:Int):LongArray{\r\n    return LongArray(n){getlong}\r\n}\r\nfun getbinary(n:Int, asTrue:Char):BooleanArray{\r\n    val str = getstr\r\n    return BooleanArray(n){str[it] == asTrue}\r\n}\r\n\r\nval List<Char>.ret:String\r\nget() = this.joinToString(\"\")\r\nvar dmark = -1\r\ninfix fun Any.dei(a:Any){\r\n    //does not stand for anything it is just easy to type, have to be infix because kotlin does not have custom prefix operators\r\n    dmark++\r\n    var str = \"<${dmark}>   \"\r\n    debug()\r\n    if(this is String){ str += this\r\n    }else if(this is Int){ str += this.toString()\r\n    }else if(this is Long){ str += this.toString()\r\n    }else{ str += this.toString()}\r\n    if(a is List<*>){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is IntArray){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is LongArray){ println(\"$str : ${a.joinToString(\" \")}\")\r\n    }else if(a is BooleanArray){ println(\"$str :${a.map{if(it)'1' else '0'}.joinToString(\" \")}\")\r\n    }else if(a is Array<*>){\r\n        println(\"$str : \")\r\n        for(c in a){if(c is IntArray){println(c.joinToString(\" \"))}\r\n        else if(c is LongArray){println(c.joinToString(\" \"))}\r\n        else if(c is BooleanArray){println(c.map { if(it) '1' else '0' }.joinToString(\"\"))\r\n        }\r\n\r\n        }\r\n        println()\r\n    }else{ println(\"$str : $a\")\r\n    }\r\n}\r\nval just = \" \" // usage: just dei x , where x is the debug variable\r\nfun crash(){\r\n    throw Exception(\"Bad programme\")} // because assertion does not work\r\nfun assert(a:Boolean){\r\n    if(!a){\r\n        throw Exception(\"Failed Assertion\")\r\n    }}\r\nenum class solveMode {\r\n    real, rand, tc\r\n}\r\nobject solve{\r\n    var mode:solveMode = solveMode.real\r\n    var tcNum:Int = 0\r\n    var rand:()->Unit = {}\r\n    var TC:MutableMap<Int,()->Unit> = mutableMapOf()\r\n    var answersChecked = 0\r\n    var tn:Long = 0\r\n    fun cases(onecase:()->Unit){\r\n        val t = if(mode == solveMode.real){if(singleCase) 1 else getint} else if(mode == solveMode.tc){1 } else randCount\r\n        //safety checks\r\n        if(pI != 998_244_353 && pI != 1_000_000_007){\r\n            throw Exception(\"Modding a wrong prime!\")\r\n        }\r\n        if(withBruteForce){\r\n            println(\"Brute force is active\")\r\n        }\r\n\r\n        if(t == 1 && mode != solveMode.real){\r\n            tn = System.currentTimeMillis()\r\n        }\r\n        repeat(t){\r\n            if(mode == solveMode.tc){\r\n                TC[tcNum]?.let { it() }\r\n                IO.rerouteInput()\r\n            }else if(mode == solveMode.rand){\r\n                rand()\r\n                IO.rerouteInput()\r\n            }\r\n            onecase()\r\n        }\r\n        if(t == 1 && mode != solveMode.real){\r\n            val dt = System.currentTimeMillis() - tn\r\n            println(\"Time $dt ms \")\r\n        }\r\n    }\r\n    inline fun singleCase(a:solve.()->Unit){\r\n        val t = if(mode != solveMode.rand){1} else randCount\r\n        repeat(t) { a() }\r\n    }\r\n    fun rand(a:()->Unit){\r\n        this.rand = a\r\n    }\r\n    fun tc(id:Int = 0,a:()->Unit){\r\n        TC[id] = a\r\n    }\r\n    fun usetc(a:Int = 0 ){\r\n        this.tcNum = a\r\n        this.mode = solveMode.tc\r\n    }\r\n    fun userand(){\r\n        this.mode = solveMode.rand\r\n    }\r\n}\r\ninline fun<T> T.alsoBrute(cal:() -> T){\r\n    if(!withBruteForce) return\r\n    val also = cal()\r\n    if(this != also){\r\n        println(\"Checking failed: Got ${this} Brute ${also}\")\r\n        crash()\r\n    }\r\n}\r\n// 1. Modded\r\nconst val p = 998244353L\r\nconst val pI = p.toInt()\r\nfun Int.adjust():Int{ if(this >= pI){ return this  - pI }else if (this < 0){ return this + pI };return this }\r\nfun Int.snap():Int{ if(this >= pI){return this - pI} else return this}\r\ninfix fun Int.modM(b:Int):Int{ return ((this * 1L * b) % pI).toInt() }\r\ninfix fun Int.modPlus(b:Int):Int{ val ans = this + b;return if(ans >= pI) ans - pI else ans }\r\n// 2. DP initial values\r\nconst val plarge = 1_000_000_727\r\nconst val nlarge = -plarge\r\nconst val phuge = 2_727_000_000_000_000_000L\r\nconst val nhuge = -phuge\r\n// 3. conveniecen conversions\r\nval Boolean.chi:Int get() = if(this) 1 else 0 //characteristic function\r\nval Char.code :Int get() = this.toInt() -  'a'.toInt()\r\n//3. hard to write stuff\r\nfun IntArray.put(i:Int,v:Int){ this[i] = (this[i] + v).adjust() }\r\nval mint:MutableList<Int> get() = mutableListOf<Int>()\r\nval mong:MutableList<Long> get() = mutableListOf<Long>()\r\n//4. more outputs\r\nfun List<Char>.conca():String = this.joinToString(\"\")\r\nval CharArray.conca :String get() = this.joinToString(\"\")\r\nval IntArray.conca :String get() = this.joinToString(\" \")\r\n@JvmName(\"concaInt\")\r\nfun List<Int>.conca():String = this.joinToString(\" \")\r\nval LongArray.conca:String get() = this.joinToString(\" \")\r\n@JvmName(\"concaLong\")\r\nfun List<Long>.conca():String = this.joinToString(\" \")\r\n//5. Pair of ints\r\nconst val longmask = (1L shl 32) - 1\r\nfun makepair(a:Int, b:Int):Long = (a.toLong() shl 32) xor (longmask and b.toLong()) // remember positev sonly\r\nval Long.first get() = (this ushr 32).toInt()\r\nval Long.second get() = this.toInt()\r\n//6. strings\r\nval String.size get() = this.length\r\nconst val randCount = 100\r\n\r\nprivate const val radixLog = 11\r\nprivate const val radixBase = 1 shl radixLog\r\nprivate const val radixMask = radixBase - 1\r\nfun countSort(arr: IntArray, n: Int, expB: Int) {\r\n    val output = IntArray(n)\r\n    val count = IntArray(radixBase)\r\n    for(i in 0 until n) {\r\n        count[(arr[i] shr expB) and radixMask]++\r\n    }\r\n    for(i in 1 until radixBase){\r\n        count[i] += count[i - 1]\r\n    }\r\n    for(i in n-1 downTo 0 ){\r\n        output[count[(arr[i] shr expB) and radixMask] - 1] = arr[i]\r\n        count[(arr[i] shr expB) and radixMask]--\r\n    }\r\n    for(i in 0 until n){\r\n        arr[i] = output[i]\r\n    }\r\n}\r\nfun IntArray.radixsort() {\r\n    //Positives only!\r\n    val n = this.size\r\n    var b = 0\r\n    repeat(3){\r\n        countSort(this, n, b)\r\n        b += radixLog\r\n    }\r\n}\r\n\r\n\r\ninfix fun Int.divCeil(b:Int):Int{\r\n    //Positives numbers only!\r\n    if(this == 0) {\r\n        return 0\r\n    }\r\n    return (this-1)/b + 1\r\n}\r\ninfix fun Long.divCeil(b:Long):Long{\r\n    //Positives numbers only!\r\n    if(this == 0L) {\r\n        return 0\r\n    }\r\n    return (this-1)/b + 1\r\n}\r\n\r\ninfix fun Long.modM(b:Long):Long{\r\n    return (this * b) % p\r\n}\r\n//infix fun Int.modPlus(b:Int):Int{\r\n//    val ans = this + b\r\n//    return if(ans >= pI) ans - pI else ans\r\n//}\r\ninfix fun Int.modMinus(b:Int):Int{\r\n    val ans = this - b\r\n    return if(ans < 0) ans + pI else ans\r\n}\r\ninfix fun Int.modDivide(b:Int):Int{\r\n    return this modM (b.inverse())\r\n}\r\nfun Int.additiveInverse():Int{\r\n    return if(this == 0) 0 else pI - this\r\n}\r\n\r\n\r\nfun intPow(x:Int,e:Int,m:Int):Int{\r\n    var X = x\r\n    var E =e\r\n    var Y = 1\r\n    while(E > 0){\r\n        if(E % 2 == 0){\r\n            X = ((1L * X * X) % m).toInt()\r\n            E = E shr 1\r\n        }else{\r\n            Y = ((1L * X * Y) % m).toInt()\r\n            E -= 1\r\n        }\r\n    }\r\n    return Y\r\n}\r\nfun intPowEXP(x:Int,e:Long,m:Int):Int{\r\n    var X = x\r\n    var E =e\r\n    var Y = 1\r\n    while(E > 0){\r\n        if(E % 2 == 0L){\r\n            X = ((1L * X * X) % m).toInt()\r\n            E = E shr 1\r\n        }else{\r\n            Y = ((1L * X * Y) % m).toInt()\r\n            E -= 1\r\n        }\r\n    }\r\n    return Y\r\n}\r\n\r\nfun pow(x:Long,e:Long,m:Long):Long{\r\n    var X = x\r\n    var E =e\r\n    var Y = 1L\r\n    while(E > 0){\r\n        if(E % 2 == 0L){\r\n            X = (X * X) % m\r\n            E /= 2\r\n        }else{\r\n            Y = (X * Y) % m\r\n            E -= 1\r\n        }\r\n    }\r\n    return Y\r\n}\r\nfun Long.inverse():Long{\r\n    return pow(this,p-2,p)\r\n}\r\nfun Int.inverse():Int{\r\n    return intPow(this,pI-2,pI)\r\n}\r\nfun min_rem(m:Int, r:Int, c:Int):Int {\r\n    if(c < 1){\r\n        return Int.MIN_VALUE\r\n    }else if(r == 0){\r\n        return 0\r\n    }else{\r\n        val step = m % r\r\n        val mx = ((1L * c * r) /m ).toInt()\r\n        val t = max_rem(r,step,mx)\r\n        return r- t\r\n    }\r\n}\r\nfun max_rem(m:Int, r:Int, c:Int):Int {\r\n    if(r == 0|| c <= m/r){\r\n        return r * c\r\n    }else{\r\n        val step =  m % r\r\n        val mx = ((1L * (c+1) * r )/m).toInt()\r\n        val t = min_rem(r,step,mx)\r\n        return  m - t\r\n    }\r\n}\r\nfun Int.reconstruct():String{\r\n    val num = min_rem(pI,this, 10000)\r\n    val denom = (this modDivide num).inverse()\r\n    return \"$num / $denom\"\r\n}\r\n\r\n//make this int instead\r\nclass FACT{\r\n    companion object {\r\n        var store = IntArray(0)\r\n        var invStore = IntArray(0)\r\n\r\n        var slowStore:IntArray = IntArray(0)\r\n\r\n        fun preCal(upto:Int){\r\n            store = IntArray(upto+1)\r\n            invStore = IntArray(upto + 1 )\r\n            store[0] = 1\r\n            invStore[0] = 1\r\n\r\n            for(i in 1..upto) {\r\n                store[i] = store[i-1] modM i\r\n                invStore[i] = invStore[i-1] modM (i.inverse())\r\n            }\r\n        }\r\n        fun choose(n:Int,r:Int):Int{\r\n            if(r < 0 || r > n) return 0\r\n            val a = store[n]\r\n            val b = invStore[n-r]\r\n            val c = invStore[r]\r\n            return (a modM b) modM c\r\n        }\r\n\r\n        fun bigChoose(n:Int,r:Int):Int{\r\n            var ret = 1\r\n            for(i in 0 until r){\r\n                ret = ret modM (n - i)\r\n            }\r\n            ret = ret modM (invStore[r])\r\n            return ret\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nclass multiset(val st:TreeMap<Int, Int> = TreeMap()):MutableMap<Int,Int> by st {\r\n    fun addall(a:IntArray){\r\n        for(v in a) addone(v)\r\n    }\r\n    fun addall(a:List<Int>){\r\n        for(V in a) addone(V)\r\n    }\r\n    fun addone(v:Int){\r\n        st[v] = st.getOrDefault(v,0) + 1\r\n    }\r\n    fun removeone(v:Int):Boolean{\r\n        val new = st.getOrDefault(v,0) - 1\r\n        if(new == -1) return false\r\n        if(new > 0) st[v] = new else st.remove(v)\r\n        return true\r\n    }\r\n    fun pollLast():Int {\r\n        val a = st.lastKey()\r\n        removeone(a)\r\n        return a\r\n    }\r\n    fun pollFirst():Int{\r\n        val a = st.firstKey()\r\n        removeone(a)\r\n        return a\r\n    }\r\n}\r\nclass FFT {\r\n    companion object{\r\n        //        val fftmod = 7340033\r\n//        val root = 5\r\n//        val root_1 = 4404020\r\n//        val root_pw = 1 shl 20\r\n        public const val fftmod = 998244353\r\n        private const val root = 15311432\r\n        private const val root_1 = 469870224\r\n        private const val root_pw = 1 shl 23\r\n\r\n        fun calculateRoot(){\r\n            println(\"root :$root\")\r\n            //   intPow(3,7 * 17,fftmod)\r\n            println(\"root_1 : $root_1\")\r\n            //       intPow(root,fftmod -2,fftmod)\r\n        }\r\n\r\n        fun fft(a:IntArray,invert:Boolean){\r\n            val n = a.size\r\n            var j = 0\r\n\r\n\r\n            for(i in 1 until n){\r\n                var bit = n shr 1\r\n                while(j and bit > 0){\r\n                    j = j xor bit\r\n                    bit = bit shr 1\r\n                }\r\n                j = j xor bit\r\n                if(i < j){\r\n                    val temp = a[i]\r\n                    a[i] = a[j]\r\n                    a[j] = temp\r\n                }\r\n            }\r\n            var len = 2\r\n            while(len <= n){\r\n                var wlen = if(invert) root_1 else root\r\n                var i = len\r\n                while(i < root_pw){\r\n                    wlen = (1L * wlen * wlen % fftmod).toInt()\r\n                    i = i shl 1\r\n                }\r\n                i = 0\r\n                while(i < n){\r\n                    var w = 1\r\n                    for(j in 0 until len/2){\r\n                        val u = a[i+j]\r\n                        val v = (1L * a[i+j+len/2] * w % fftmod).toInt()\r\n                        a[i+j] = if(u+v < fftmod) u + v else u + v - fftmod\r\n                        a[i+j+len/2] = if(u-v >= 0) u-v else u-v+fftmod\r\n                        w = (1L * w * wlen % fftmod).toInt()\r\n                    }\r\n                    i += len\r\n                }\r\n                len = len shl 1\r\n            }\r\n            if(invert){\r\n                val n_1 = pow(n.toLong(),(fftmod-2).toLong(),fftmod.toLong())\r\n                for((i,x) in a.withIndex()){\r\n                    a[i] = (1L * x * n_1 % fftmod).toInt()\r\n                }\r\n            }\r\n        }\r\n        fun fullconvolution(at:IntArray,bt:IntArray):IntArray{\r\n            return fullconvolutionOpt(at,bt,at.size,bt.size)\r\n        }\r\n\r\n        fun fullconvolutionOpt(at:IntArray,bt:IntArray,sizeA:Int,sizeB:Int):IntArray{\r\n            // 1 shl 18 done in 77 ms\r\n            val maxSize = (sizeA + sizeB).takeHighestOneBit() * 2\r\n            val a = at.copyOf(maxSize)\r\n            val b = bt.copyOf(maxSize)\r\n            val expectedSize = at.size + bt.size - 1\r\n            fft(a,false)\r\n            fft(b,false)\r\n            val new = IntArray(maxSize)\r\n            for(i in new.indices){\r\n                new[i] = (1L * a[i] * b[i] % fftmod).toInt()\r\n            }\r\n            fft(new,true)\r\n            return new.copyOf(expectedSize)\r\n        }\r\n    }\r\n}\r\nfun debug(){}\r\nconst val withBruteForce = false\r\nconst val singleCase = true\r\nfun main(){\r\n    solve.cases{\r\n        val n = getint\r\n        val k = getint\r\n        val white = getline(n)\r\n        val st = multiset()\r\n        for(c in white){\r\n            st.addone(c)\r\n        }\r\n        val red = getline(k)\r\n        red.shuffle()\r\n        red.sort()\r\n        val get = Array(k){IntArray(0)}\r\n\r\n        var pt = -1\r\n        val vs = IntArray(st.size)\r\n        val counts = IntArray(st.size)\r\n\r\n        for((i,r) in st){\r\n            pt ++\r\n            vs[pt] = i\r\n            counts[pt] = r\r\n        }\r\n        fun solve(l:Int, r:Int):IntArray{\r\n            if(r < l){\r\n                return intArrayOf(1)\r\n            }\r\n            if(l == r){\r\n                val v = counts[l]\r\n                if(v == 1){\r\n                    return intArrayOf(1,2)\r\n                }else{\r\n                    return intArrayOf(1,2,1)\r\n                }\r\n//                    return IntArray(v+1){it+1}\r\n            }\r\n            val m = (l+r)/ 2\r\n            val left = solve(l,m)\r\n            val right = solve(m+1,r)\r\n            return FFT.fullconvolution(left,right)\r\n        }\r\n        var last:IntArray = intArrayOf(1)\r\n        var lastvalue = 0\r\n        for((i,r) in red.withIndex()){\r\n            val final = (0..st.size).first{it == st.size || vs[it] >= r} - 1\r\n//            just dei final\r\n            val new = FFT.fullconvolution(last,solve(lastvalue, final))\r\n            lastvalue = final + 1\r\n            get[i] = new\r\n            last = new\r\n//            assert(new.contentEquals(solve(0,final)))\r\n//            get[i] = solve(0,final)\r\n//            get[i] = solve(0,has.lastIndex)\r\n        }\r\n        val q = getint\r\n        repeat(q){\r\n            val ask = getint\r\n            var ret = 0\r\n            for(i in 0 until k){\r\n                val left = ask - 2 - red[i] * 2\r\n                if(left < 0) continue\r\n//                red[i] dei left\r\n                ret = ret modPlus get[i].getOrElse(left/2){0}\r\n            }\r\n            put(ret)\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n    done()\r\n}\r\n\r\n\r\n\r\n"
}