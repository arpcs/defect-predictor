{
    "id": 228664495,
    "contestId": 1251,
    "creationTimeSeconds": 1697627114,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1251,
        "index": "F",
        "name": "Red-White Fence",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "combinatorics",
            "fft"
        ]
    },
    "author": {
        "contestId": 1251,
        "members": [
            {
                "handle": "raresmihai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1571929500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 2355200,
    "source": "#pragma GCC optimize( \"Ofast,unroll-loops\" )\r\n#pragma GCC target( \"avx2,popcnt\" )\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\n#define MOD 998244353\r\n#define root 15311432\r\n#define root_1 469870224\r\n#define rootPw 8388608\r\n#define MAXN 300000\r\n#define MAXK 5\r\nusing namespace std;\r\n\r\nstruct someAux{\r\n  vector <int> v;\r\n};\r\n\r\nstatic inline void makePowerOf2(someAux& v, int& n) {\r\n  int pow;\r\n\r\n  pow = 1;\r\n  while ( pow < n ) {\r\n    pow *= 2;\r\n  }\r\n\r\n  n = pow;\r\n  while ( v.v.size() < n ) {\r\n    v.v.push_back(0);\r\n  }\r\n}\r\n\r\nstatic inline int makeMod(int val) {\r\n  val %= MOD;\r\n  if ( val < 0 ) {\r\n    val += MOD;\r\n  }\r\n\r\n  return val;\r\n}\r\n\r\nstatic inline int makeInverse(int n) {\r\n  int pow, ans;\r\n\r\n  pow = MOD - 2;\r\n  ans = 1;\r\n  while ( pow ) {\r\n    if ( pow % 2 ) {\r\n      ans = (long long) ans * n % MOD;\r\n    }\r\n\r\n    n = (long long) n * n % MOD;\r\n    pow /= 2;\r\n  }\r\n\r\n  return ans;\r\n}\r\n\r\n static inline void actualNnt(someAux& v, bool invert, int& n) {\r\n  int i, i2, bit, len, w, wLen, fftOdd, fftEven, nInv;\r\n\r\n  makePowerOf2(v, n);\r\n\r\n  i2 = 0;\r\n  for ( i = 1; i < n; i++ ) {\r\n    for ( bit = (n >> 1); i2 & bit; bit >>= 1 ) {\r\n      i2 ^= bit;\r\n    }\r\n    i2 ^= bit;\r\n\r\n    if ( i < i2 ) {\r\n      swap(v.v[i], v.v[i2]);\r\n    }\r\n  }\r\n\r\n  for ( len = 2; len <= n; len <<= 1 ) {\r\n    if ( invert ) {\r\n      wLen = root_1;\r\n    } else {\r\n      wLen = root;\r\n    }\r\n    for ( i = len; i < rootPw; i <<= 1 ) {\r\n      wLen = (long long) wLen * wLen % MOD;\r\n    }\r\n    for ( i = 0; i < n; i += len ) {\r\n      w = 1;\r\n      for ( i2 = 0; i2 < len / 2; i2++ ) {\r\n        fftEven = v.v[i + i2];\r\n        fftOdd = (long long) v.v[i + i2 + len / 2] * w % MOD;\r\n        v.v[i + i2] = fftEven + fftOdd;\r\n        if ( v.v[i + i2] >= MOD ) {\r\n          v.v[i + i2] -= MOD;\r\n        }\r\n        v.v[i + i2 + len / 2] = fftEven - fftOdd;\r\n        if ( v.v[i + i2 + len / 2] < 0 ) {\r\n          v.v[i + i2 + len / 2] += MOD;\r\n        }\r\n        w = ((long long) w * wLen) % MOD;\r\n      }\r\n    }\r\n  }\r\n\r\n  if ( invert ) {\r\n    nInv = makeInverse(n);\r\n    for ( i = 0; i < n; i++ ) {\r\n      v.v[i] = (long long) v.v[i] * nInv % MOD;\r\n    }\r\n  }\r\n}\r\n\r\nstruct info{\r\n  int freq, val;\r\n};\r\n\r\nbool comp(info a, info b) {\r\n  return a.val < b.val;\r\n}\r\n\r\ninfo v[MAXN];\r\nint vSize;\r\nint h[MAXK];\r\n\r\nstatic inline void calcFft(someAux& a, someAux& b) {\r\n  int n, i;\r\n\r\n  n = a.v.size() + b.v.size();\r\n\r\n  actualNnt(a, false, n);\r\n  actualNnt(b, false, n);\r\n\r\n  for ( i = 0; i < n; i++ ) {\r\n    a.v[i] = ((long long) a.v[i] * b.v[i]) % MOD;\r\n  }\r\n\r\n  actualNnt(a, true, n);\r\n}\r\n\r\nstatic inline void makeAns(int l, int r, someAux& ans) {\r\n  if ( l == r ) {\r\n    ans.v.clear();\r\n    ans.v.push_back(1);\r\n    ans.v.push_back(2);\r\n    if ( v[l].freq > 1 ) {\r\n      ans.v.push_back(1);\r\n    }\r\n    return;\r\n  }\r\n\r\n  someAux ansR;\r\n\r\n  ans.v.clear();\r\n\r\n  makeAns(l, (l + r) / 2, ans);\r\n  makeAns((l + r) / 2 + 1, r, ansR);\r\n\r\n  calcFft(ans, ansR);\r\n\r\n  while(ans.v.size() && ans.v.back()==0)\r\n    ans.v.pop_back();\r\n}\r\n\r\nstatic inline int readInt() {\r\n  int ans;\r\n  char ch;\r\n\r\n  ch = fgetc(stdin);\r\n  while ( !isdigit(ch) ) {\r\n    ch = fgetc(stdin);\r\n  }\r\n\r\n  ans = 0;\r\n  while ( isdigit(ch) ) {\r\n    ans = ans * 10 + ch - '0';\r\n    ch = fgetc(stdin);\r\n  }\r\n\r\n  return ans;\r\n}\r\n\r\nsomeAux ans[MAXK];\r\nsomeAux aux;\r\n\r\nint makeModFast(int val) {\r\n  if ( val > MOD ) {\r\n    val -= MOD;\r\n  }\r\n  return val;\r\n}\r\n\r\nint main() {\r\n  int n, i, k, q, i2, val, oldPos;\r\n  long long accAns;\r\n\r\n  n = readInt();\r\n  k = readInt();\r\n\r\n  for ( i = 0; i < n; i++ ) {\r\n    v[i].val = readInt();\r\n  }\r\n\r\n  for ( i = 0; i < k; i++ ) {\r\n    h[i] = readInt();\r\n  }\r\n\r\n  sort(h, h + k);\r\n  sort(v, v + n, comp);\r\n\r\n  vSize = 0;\r\n  i2 = 0;\r\n  for ( i = 0; i < n;) {\r\n    oldPos = i2;\r\n    v[vSize].val = v[i].val;\r\n    while ( i2 < n && v[i].val == v[i2].val ) {\r\n      v[vSize].freq++;\r\n      i2++;\r\n    }\r\n    vSize++;\r\n    i = i2;\r\n  }\r\n\r\n  i2 = 0;\r\n  for ( i = 0; i < k; i++ ) {\r\n    oldPos = i2;\r\n    i2++;\r\n    for (; i2 < vSize && h[i] > v[i2].val; i2++ );\r\n    i2--;\r\n\r\n    if ( i2 >= 0 ) {\r\n      if ( i2 > oldPos ) {\r\n        aux.v.clear();\r\n        makeAns(oldPos, i2 - 1, aux);\r\n        if ( i )\r\n          ans[i] = ans[i - 1];\r\n        calcFft(ans[i], aux);\r\n      }\r\n      makeAns(0, i2, ans[i]);\r\n    } else {\r\n      ans[i].v.push_back(1);\r\n    }\r\n  }\r\n\r\n  q = readInt();\r\n\r\n  for ( i2 = 0; i2 < q; i2++ ) {\r\n    val = readInt();\r\n\r\n    accAns = 0;\r\n    val /= 2;\r\n    val--;\r\n\r\n    for ( i = 0; i < k; i++ ) {\r\n      if ( val - h[i] >= 0 ) {\r\n        if ( ans[i].v.size() > val - h[i] ) {\r\n          accAns = makeModFast(accAns + ans[i].v[val - h[i]]);\r\n        }\r\n      }\r\n    }\r\n\r\n    printf(\"%lld\\n\", accAns);\r\n  }\r\n\r\n  return 0;\r\n}\r\n"
}