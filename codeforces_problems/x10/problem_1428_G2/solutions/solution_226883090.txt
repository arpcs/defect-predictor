{
    "id": 226883090,
    "contestId": 1428,
    "creationTimeSeconds": 1696600071,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1428,
        "index": "G2",
        "name": "Lucky Numbers (Hard Version)",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 3000,
        "tags": [
            "dp",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1428,
        "members": [
            {
                "handle": "MrPelf"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1602939900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "//~ while (clock()<=69*CLOCKS_PER_SEC)\r\n//~ #pragma comment(linker, \"/stack:200000000\")\r\n#pragma GCC optimize(\"O3\")\r\n//~ #pragma GCC target (\"avx2\")\r\n//~ #pragma GCC optimize(\"Ofast\")\r\n//~ #pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\r\n//~ #pragma GCC optimize(\"unroll-loops\")\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n \r\nusing namespace __gnu_pbds;\r\nusing namespace std;\r\n \r\ntemplate <typename T>\r\nusing ordered_set =\r\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n \r\n#define sim template < class c\r\n#define ris return * this\r\n#define dor > debug & operator <<\r\n#define eni(x) sim > typename \\\r\n  enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {\r\nsim > struct rge { c b, e; };\r\nsim > rge<c> range(c i, c j) { return rge<c>{i, j}; }\r\nsim > auto dud(c* x) -> decltype(cerr << *x, 0);\r\nsim > char dud(...);\r\nstruct debug {\r\n#ifdef LOCAL\r\n~debug() { cerr << endl; }\r\neni(!=) cerr << boolalpha << i; ris; }\r\neni(==) ris << range(begin(i), end(i)); }\r\nsim, class b dor(pair < b, c > d) {\r\n  ris << \"(\" << d.first << \", \" << d.second << \")\";\r\n}\r\nsim dor(rge<c> d) {\r\n  *this << \"[\";\r\n  for (auto it = d.b; it != d.e; ++it)\r\n    *this << \", \" + 2 * (it == d.b) << *it;\r\n  ris << \"]\";\r\n}\r\n#else\r\nsim dor(const c&) { ris; }\r\n#endif\r\n};\r\n#define imie(...) \" [\" << #__VA_ARGS__ \": \" << (__VA_ARGS__) << \"] \"\r\n \r\n#define shandom_ruffle random_shuffle\r\n \r\nusing ll=long long;\r\nusing pii=pair<int,int>;\r\nusing pll=pair<ll,ll>;\r\nusing vi=vector<int>;\r\nusing vll=vector<ll>;\r\nconst int nax=3007;\r\n \r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n \r\nvoid ff()\r\n{\r\n\tfflush(stdout);\r\n}\r\n \r\nint n, m;\r\n \r\nint pole;\r\n \r\nint poz[nax];\r\n \r\nint zapy;\r\n \r\nint policz()\r\n{\r\n\tint ret=0;\r\n\tfor (int i=0; i<n*m; i++)\r\n\t{\r\n\t\tint czy=1;\r\n\t\tfor (int j=0; j<n; j++)\r\n\t\t{\r\n\t\t\tint x=i-poz[j];\r\n\t\t\tx%=(n*m);\r\n\t\t\tx+=(n*m);\r\n\t\t\tx%=(n*m);\r\n\t\t\tif (x<m)\r\n\t\t\t\tczy=0;\r\n\t\t}\r\n\t\tret+=czy;\r\n\t}\r\n\treturn ret;\r\n}\r\n \r\nvoid zrob(int v, int kier)\r\n{\r\n\tzapy++;\r\n\tassert(zapy<=15000);\r\n\tprintf(\"? %d %d\\n\", v, kier);\r\n\tff();\r\n\tscanf(\"%d\", &pole);\r\n\t\r\n\t//~ poz[v]=(poz[v]+kier+n*m)%(n*m);\r\n\t//~ pole=policz();\r\n}\r\n \r\nint los(int a, int b)\r\n{\r\n\treturn a+rng()%(b-a+1);\r\n}\r\n \r\nint k;\r\nvi gru[nax];\r\n \r\nvector<pii> graf[nax];\r\n \r\nvoid kra(int a, int b, int prz)\r\n{\r\n\tprz%=(n*m);\r\n\tprz+=(n*m);\r\n\tprz%=(n*m);\r\n\tgraf[a].push_back({b, prz});\r\n\tgraf[b].push_back({a, (n*m-prz)%(n*m)});\r\n}\r\n \r\nint malew[nax];\r\n \r\nint wyn[nax];\r\nint bylo[nax];\r\n \r\nvoid dfs(int v)\r\n{\r\n\tbylo[v]=1;\r\n\tfor (pii i : graf[v])\r\n\t{\r\n\t\tif (!bylo[i.first])\r\n\t\t{\r\n\t\t\twyn[i.first]=(wyn[v]+i.second)%(n*m);\r\n\t\t\tdfs(i.first);\r\n\t\t}\r\n\t}\r\n}\r\n \r\nint main()\r\n{\r\n\tscanf(\"%d%d\", &n, &m);\r\n\t//~ for (int i=0; i<n; i++)\r\n\t\t//~ poz[i]=los(0, n*m-1);\r\n\t\t//~ poz[i]=i*m;\r\n\t//~ debug() << range(poz, poz+n);\r\n\tfor (int i=0; i<n; i++)\r\n\t{\r\n\t\tint x=los(-20, 20);\r\n\t\twhile(x)\r\n\t\t{\r\n\t\t\tzrob(i, x/abs(x));\r\n\t\t\tx-=x/abs(x);\r\n\t\t}\r\n\t}\r\n\tvi kol(n);\r\n\tiota(kol.begin(), kol.end(), 0);\r\n\tshuffle(kol.begin(), kol.end(), rng);\r\n\tfor (int i : kol)\r\n\t{\r\n\t\tint pam=pole;\r\n\t\twhile(1)\r\n\t\t{\r\n\t\t\tzrob(i, 1);\r\n\t\t\tif (pole<pam)\r\n\t\t\t{\r\n\t\t\t\tzrob(i, -1);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tpam=pole;\r\n\t\t}\r\n\t}\r\n\t//~ debug() << range(poz, poz+n);\r\n\t//~ debug() << imie(zapy);\r\n\t\r\n\tshuffle(kol.begin(), kol.end(), rng);\r\n\tfor (int i : kol)\r\n\t{\r\n\t\tint mam=0;\r\n\t\tzrob(i, 1);\r\n\t\tint pam=pole;\r\n\t\tfor (int j=0; j<k && !mam; j++)\r\n\t\t{\r\n\t\t\tint x=gru[j].back();\r\n\t\t\tzrob(x, 1);\r\n\t\t\tif (pole>=pam)\r\n\t\t\t{\r\n\t\t\t\tgru[j].push_back(i);\r\n\t\t\t\tmam=1;\r\n\t\t\t}\r\n\t\t\tzrob(x, -1);\r\n\t\t}\r\n\t\tzrob(i, -1);\r\n\t\tif (!mam)\r\n\t\t{\r\n\t\t\tgru[k].push_back(i);\r\n\t\t\tk++;\r\n\t\t}\r\n\t}\r\n\t//~ debug() << imie(k);\r\n\t//~ for (int i=0; i<k; i++)\r\n\t\t//~ debug() << gru[i];\r\n\tfor (int i=0; i<k; i++)\r\n\t\tfor (int j=1; j<(int)gru[i].size(); j++)\r\n\t\t\tkra(gru[i][0], gru[i][j], 0);\r\n\t//~ debug() << imie(zapy);\r\n\tfor (int i=0; i+1<k; i++)\r\n\t{\r\n\t\tint x=gru[i].back();\r\n\t\tint ruchy=0;\r\n\t\twhile(1)\r\n\t\t{\r\n\t\t\truchy++;\r\n\t\t\tint pam=pole;\r\n\t\t\tint oczek=pam;\r\n\t\t\tif (ruchy<=m)\r\n\t\t\t\toczek--;\r\n\t\t\tzrob(x, 1);\r\n\t\t\tif (pole==oczek)\r\n\t\t\t\tcontinue;\r\n\t\t\truchy--;\r\n\t\t\tzrob(x, -1);\r\n\t\t\tint znaj=0;\r\n\t\t\tfor (int j=0; j<k && !znaj; j++)\r\n\t\t\t{\r\n\t\t\t\tif (malew[j] || j==i)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\tpam=pole;\r\n\t\t\t\tint y=gru[j].back();\r\n\t\t\t\tzrob(y, -1);\r\n\t\t\t\tint nowe=pole;\r\n\t\t\t\tzrob(y, 1);\r\n\t\t\t\tif (nowe>=pam)\r\n\t\t\t\t{\r\n\t\t\t\t\tkra(x, y, ruchy+m);\r\n\t\t\t\t\tmalew[j]=1;\r\n\t\t\t\t\tznaj=1;\r\n\t\t\t\t\t//~ debug() << \"od \" << i << \" do \" << j << \"   \" << x << \" \" << y << \" \" << imie(ruchy) << imie(poz[x]) << imie(poz[y]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tassert(znaj);\r\n\t\t\twhile(ruchy--)\r\n\t\t\t\tzrob(x, -1);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\tdfs(0);\r\n\t//~ for (int i=0; i<n; i++)\r\n\t\t//~ debug() << i << \" \" << graf[i];\r\n\t//~ debug() << range(poz, poz+n);\r\n\tprintf(\"!\");\r\n\tfor (int i=1; i<n; i++)\r\n\t\tprintf(\" %d\", wyn[i]);\r\n\tprintf(\"\\n\");\r\n\tff();\r\n\t//~ for (int i=1; i<n; i++)\r\n\t\t//~ assert(wyn[i]==((poz[i]-poz[0]+n*m)%(n*m)));\r\n\t//~ debug() << imie(zapy);\r\n\treturn 0;\r\n}gdfgdfg"
}