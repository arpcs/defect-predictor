{
    "id": 230863495,
    "contestId": 1000,
    "creationTimeSeconds": 1698859754,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1000,
        "index": "D",
        "name": "Yet Another Problem On a Subsequence",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "combinatorics",
            "dp"
        ]
    },
    "author": {
        "contestId": 1000,
        "members": [
            {
                "handle": "ggk227"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530110100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 22,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 307200,
    "source": "// Created by: G Gautham Krishna\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n// shortforms\r\n\r\n#define pb push_back\r\n#define pf push_front\r\n#define ppb pop_back\r\n#define ppf pop_front\r\n#define all(x) (x).begin(),(x).end()\r\n#define srt(v) sort(v.begin(),v.end())\r\n#define rev(v) reverse(v.begin(),v.end())\r\n#define lb(v,x) lower_bound(v.begin(),v.end(),x)\r\n#define ub(v,x) upper_bound(v.begin(),v.end(),x)\r\n#define cpy(v2,v1) v2.assign(v1.begin(),v1.end())\r\n#define maxv(a) *max_element(a.begin(), a.end())\r\n#define minv(a) *min_element(a.begin(), a.end())\r\n#define ff first\r\n#define ss second\r\n#define endl \"\\n\"\r\n\r\n//type definitions\r\n\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\ntypedef pair<int,int> pii;\r\ntypedef pair<ll,ll> pll;\r\ntypedef vector<ll> vll;\r\n\r\n//constants\r\n\r\nconst long long int inf = 1e18;\r\nconst int mod = 998244353;\r\n#define pi 3.141592653589793238462\r\n\r\nstruct custom_hash {\r\n    static uint64_t splitmix64(uint64_t x) {\r\n        // http://xorshift.di.unimi.it/splitmix64.c\r\n        x += 0x9e3779b97f4a7c15;\r\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n        return x ^ (x >> 31);\r\n    }\r\n\r\n    size_t operator()(uint64_t x) const {\r\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n        return splitmix64(x + FIXED_RANDOM);\r\n    }\r\n};\r\n\r\n//graphs\r\n\r\n//const int N=1e5+2;\r\n//std::vector<int> vis(N,0);\r\n//std::vector<int> adj[N];\r\n\r\n// debugger\r\n\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\r\n#else\r\n#define debug(x)\r\n#endif\r\n\r\nvoid _print(ll t) {cerr << t;}\r\nvoid _print(int t) {cerr << t;}\r\nvoid _print(string t) {cerr << t;}\r\nvoid _print(char t) {cerr << t;}\r\nvoid _print(lld t) {cerr << t;}\r\nvoid _print(double t) {cerr << t;}\r\nvoid _print(ull t) {cerr << t;}\r\n\r\ntemplate <class T, class V> void _print(pair <T, V> p);\r\ntemplate <class T> void _print(vector <T> v);\r\ntemplate <class T> void _print(set <T> v);\r\ntemplate <class T, class V> void _print(map <T, V> v);\r\ntemplate <class T> void _print(multiset <T> v);\r\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\r\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(multimap <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\n\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\r\nll binexp(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return binexp(a, b - 2, b);}\r\nbool revsort(ll a, ll b) {return a > b;}\r\nll combination(ll n, ll r, ll m, vector<ll>& fact, vector<ll>& ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sievefn(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\nll getRandomNumber(ll l, ll r) {return uniform_int_distribution<ll>(l, r)(rng);} \r\n\r\nvector<ll> fact;\r\n\r\nll ncr(ll n, ll r){\r\n    return mod_div(fact[n], mod_mul(fact[r], fact[n-r], mod), mod);\r\n}\r\n\r\nint main() {\r\n#ifndef ONLINE_JUDGE\r\nfreopen(\"inputf.in\", \"r\", stdin);\r\nfreopen(\"outputf.in\", \"w\", stdout);\r\nfreopen(\"Error.txt\", \"w\", stderr);\r\nauto begin = std::chrono::high_resolution_clock::now();\r\n#endif\r\n\r\n    //fast io\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n\r\n    //main code starts here\r\n    ll n;\r\n    cin>>n;\r\n\r\n    vector<ll> v;\r\n    for(int i=0;i<n;i++){\r\n        ll k;\r\n        cin>>k;\r\n        v.pb(k);\r\n    }\r\n\r\n    fact.pb(1);\r\n    for(ll i=1;i<10000;i++){\r\n        ll cur=mod_mul(fact.back(), i, mod);\r\n        fact.pb(cur);\r\n    }\r\n\r\n    // dp[i] -> the no of subsequences that end at i\r\n    vector<ll> dp(n+1,0);\r\n\r\n    for(int i=0;i<n;i++){\r\n        debug(i)\r\n        if(v[i]>0 && n-1-i>=v[i]){\r\n            // pre is 1 because {} is also a possible subsequence\r\n            ll pre=1;\r\n            for(int j=0;j<i;j++){\r\n                pre+=dp[j];\r\n            }\r\n            debug(pre)\r\n            // to dp[j] we can add tot number of good sequences that can be made using values upto i,\r\n            // if that subsequence ends at j then we can choose v[i]-1(we have to take j) elements from j-i-1 values\r\n            // so we have to add pre*ncr(j-i-1,v[i]-1) to dp[j]  \r\n            for(int j=i+1;j<n;j++){\r\n                if(j-i>=v[i]){\r\n                    // debug(j-i-1)\r\n                    dp[j]=mod_add(dp[j], mod_mul(pre, ncr(j-i-1,v[i]-1), mod), mod);\r\n                }\r\n                debug(dp)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    ll ans=0;\r\n    for(ll ele: dp){\r\n        ans=mod_add(ans, ele, mod);\r\n    }\r\n\r\n    cout<<ans<<endl;\r\n\r\n    #ifndef ONLINE_JUDGE\r\n    auto end = std::chrono::high_resolution_clock::now();\r\n    cerr << setprecision(4) << fixed;\r\n    cerr << \"Execution time: \" << std::chrono::duration_cast<std::chrono::duration<double>>(end - begin).count() << \" seconds\" << endl;\r\n    #endif\r\n    return 0;\r\n}"
}