{
    "id": 231859635,
    "contestId": 1000,
    "creationTimeSeconds": 1699390365,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1000,
        "index": "D",
        "name": "Yet Another Problem On a Subsequence",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "combinatorics",
            "dp"
        ]
    },
    "author": {
        "contestId": 1000,
        "members": [
            {
                "handle": "__RORONOA__ZORO__"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1530110100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 22,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 4096000,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n \n/*** Optimization ***/\n#pragma GCC optimize(\"Ofast,no-stack-protector\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native\")\n#pragma GCC optimize(\"unroll-loops\")\n\n \ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\nconst int MOD = 1000000007;\nconst int MOD9=998244353;\n\n#define pb push_back\n#define mem(name, value) memset(name, value, sizeof(name))\n#define lb lower_bound\n#define ub upper_bound\n#define ppc               __builtin_popcount\n#define ppcll             __builtin_popcountll\n#define uniq(v)           (v).erase(unique(all(v)),(v).end())\n\n/*** Sorts ***/\n#define all(v) (v).begin(), (v).end()\n#define rev(v) reverse(all(v))\n#define srt(v) sort(all(v))\n#define srtGreat(v) sort(all(v), greater<ll>())\n//inline bool cmp(pll a,pll b){ if(a.ff == b.ff) return a.ss < b.ss; return a.ff < b.ff; }\n \n//BitWise Operations\nbool getBit (ll num, ll pos) { return num & (1 << pos); } // get bit right -> left\nll setBit (ll num, ll pos) { return num | (1 << pos); }\nll chearBit (ll num, ll pos) { ll mask = ~(1 << pos); return num & mask; }\nll updateBit (ll num, ll pos, bool bit1or0) { ll value = bit1or0 ? 1 : 0; ll mask = ~(1 << pos); return (num & mask) | (value << pos); }\n\n /*** Some Prints ***/\n#define en cout << '\\n';\n#define no cout << \"NO\" << '\\n';\n#define yes cout << \"YES\" << '\\n';\n#define case cout << \"Case \" << t++ << \": \";\n#define minusone cout << \"-1\" << '\\n';\n \n/*** Functions***/\nll binpow(ll a, ll b, ll m) {a %= m; ll res = 1; while (b > 0) { if (b & 1) res = res * a % m; a = a * a % m; b >>= 1;}return res;}\nll InverseMod(ll base, ll pow) { if(pow == 0) return 1; ll ans = InverseMod(base, pow / 2); ans = (ans * ans) % MOD; if(pow & 1){ return (ans * base) % MOD; } else{ return ans; } }\nbool isprime(ll num) { if(num < 2) return false; for(ll i = 2; i * i <= num; i++){ if(num % i == 0) return false; } return true; }\nll EularPHI(ll num) { double ans = num; for(ll i = 2; i * i <= num; i++){ if(num % i == 0){ while (num % i == 0) { num /= i; } ans *= (1.0 - (1.0 / (double)i)); } } if(num > 1) ans *= (1.0 - (1.0 / (double)num)); return (ll)ans; }\n \ntemplate <class T> inline T gcd(T a,T b){if(b == 0)return a; return gcd(b, a % b);}\ntemplate <class T> inline T lcm(T a,T b){return a * b / gcd<T>(a, b);}\ntemplate <class T> inline T power(T b,T p){ll ans = 1;while(p--) ans *= b; return ans;}\n \n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x<<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x);\n#endif\n\n \nvoid _print(ll t) {cerr << t;}\nvoid _print(int t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(lld t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\nvoid _print(ull t) {cerr << t;}\n \n \ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\\n\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n// void _print(pbds v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n/*---------------------------------------------------------------------------------------------------------------------------*/\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\nbool revsort(ll a, ll b) {return a > b;}\nvoid swap(int &x, int &y) {int temp = x; x = y; y = temp;}\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\nll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\n/*--------------------------------------------------------------------------------------------------------------------------*/\n//usefull in interactive qs\nint check(vector<int>a) {\n\tcout<<\"? \";\n\tfor(int i=1;i<(int)a.size();i++) cout<<a[i]<<\" \";\n\tcout<<endl;\n\tint p; cin>>p;\n\treturn p;\n}\nvector<ll>v;\nconst int N=1e3;\nint dp[N][N];\nll fun(int ind, int rem){\n    int n=v.size();\n    if(ind==n) return rem==0;\n    if(dp[ind][rem]!=-1) return dp[ind][rem];\n    \n    int pick=0,notp=0;\n    if(rem>0)\n        pick=fun(ind+1,rem-1);\n    else{\n        if(v[ind]>0 and v[ind]<n)\n            pick=fun(ind+1,v[ind]);\n    }\n    notp=fun(ind+1,rem);\n    return dp[ind][rem]=(pick+notp)%MOD9;\n}\nvoid solve(){\n    int n; cin>>n;\n    v.resize(n);\n    for(int i=0; i<n; i++) cin>>v[i];\n    mem(dp,-1);\n    cout<<fun(0,0)-1;\n}\nint main(){\n    #ifndef ONLINE_JUDGE\n        clock_t tStart = clock();\n        freopen(\"input.txt\", \"r\", stdin);\n        freopen(\"output.txt\",\"w\",stdout);\n        freopen(\"error.txt\", \"w\", stderr);\n    #endif\n\n   ios_base::sync_with_stdio(false);\n   cin.tie(NULL);\n   cout.tie(NULL);\n   cout<<fixed<<setprecision(20);\n   ll test=1;\n   // cin>>test;\n    \n    while(test--){\n        solve();\n    }\n#ifndef ONLINE_JUDGE\n    printf(\"\\nRun Time -> %.10fs\\n\", (double)(clock() - tStart) / CLOCKS_PER_SEC);\n#endif\n\nreturn 0;\n}\n/* stuff you should look for\n    * int overboolow, array bounds\n    * special cases (n=1?)\n    * do something instead of nothing and stay organized\n    * WRITE STUFF DOWN \n    * DON'T GET STUCK ON ONE APPROACH\n    * lower_bound give index of number equal to or just bigger than that number\n    * upper_bound give index of number which is just bigger than the number\n*/\n/*\n? Some basic stuff\n \n        ? Sets : Unique element container.\n            ! set<int,greater<int> > s; // to order the set in descending order\n            * To check if an element is in a set : s.count(x)\n            ! Another method to check if an element exists in a set :if(s.find(x)!=s.end()){ // condition  }\n            * Value of First Element of Set : *(s.begin())\n            * Value of Last Element of Set : *(--s.end())\n            ! To erase an element by value: s.erase(x);\n            * begin() - returns an iterator to first element of set. The value of the element can be accessed using *(s.begin())\n            * end() - Returns an iterator to the theoretical element that follows last element in the set.\n            * size() - Returns the number of elements in the set.\n            * max_size() - Returns the maximum number of elements that the set can hold.\n            * empty() - Returns whether the set is empty.\n            ! find(x) - Returns an iterator to the element \u2018x\u2019 in the set if found, else returns the iterator to end.\n            * erase(x)\u2013 Removes the value \u2018x\u2019 from the set. It erases an element by value\n            * count(x) - Returns 1 or 0 based on the element \u2018x\u2019 is present in the set or not. It's the best way to check for the presence of an element.\n            * lower_bound(x) \u2013 Returns an iterator to the first element that is equivalent to \u2018x\u2019 or definitely will not go before the element \u2018x\u2019 in the set.\n              lower_bound can also be thought as the smallest element greater than or equal to x\n            * Return reverse iterator to reverse beginning: (s.rbegin())\n            * Set to be sorted in decreasing order: set<int, greater<int> >\n            * emplace() : If the function successfully inserts the element (because no\n                    equivalent element existed already in the set), the function returns a\n                    pair of an iterator to the newly inserted element and a value of true.\n            * const bool is_in = s.find(x) != s.end(); check if an element is in the set.\n            ! myset.erase(x) #directly by value. logarithmic complexity\n            ! myset.erase(iteratortoanelement,s.end())\n            * for_each(all(s),do_something);\n            ! set<int> :: iterator it = myset.find(60);\n \n        ? Vectors\n            @ Erase elemnents by value rather than position\n            # vec.erase(remove(vec.begin(), vec.end(), 8), vec.end());\n            *\n            @ Erase duplicates in a sorted array\n            # v.erase(unique(v.begin(), v.end()), v.end());\n            *\n            @ Erase elements by position\n            # vec.erase(vec.begin() + 1);\n            vector<int> v; v.resize(n,0); // resizes the vector and initializes it too.\n            front(), back(), push_back(), pop_back()\n            * begin() - Returns an iterator pointing to the first element in the vector\n            * end() - Returns an iterator pointing to the theoretical element that follows the last element in the vector\n            * rbegin() - Returns a reverse iterator pointing to the last element in the vector (reverse beginning).\n            * rend() - Returns a reverse iterator pointing to the theoretical element preceding the first element in the vector\n            * cbegin(),cend(),crbegin(),crend()\n            * size() - Returns the number of elements in the vector.\n            * max_size() -  Returns the maximum number of elements that the vector can hold.\n            * capacity() - Returns the size of the storage space currently allocated to the vector expressed as number of elements.\n            * resize() - Resizes the container so that it contains \u2018n\u2019 elements.\n            * empty() - Returns whether the container is empty.\n            * shrink_to_fit() - Reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.\n            * reserve() - Requests that the vector capacity be at least enough to contain n elements.\n            * [i] - Returns a reference to the element at position \u2018i\u2019 in the vector\n            * at(i) - Returns a reference to the element at position \u2018i\u2019 in the vector\n            # front() - Returns a reference to the first element in the vector\n            # back() - Returns a reference to the last element in the vector\n            * data() - Returns a direct pointer to the memory array used internally by the vector to store its owned elements.\n            * assign() - It assigns new value to the vector elements by replacing old ones\n            * push_back() - It push the elements into a vector from the back\n            # pop_back() - It is used to pop or remove elements from a vector from the back.\n            ! insert() - It inserts new elements before the element at the specified position\n            * erase() - It is used to remove elements from a container from the specified position or range\n            * swap() - It is used to swap the contents of one vector with another vector of same type. Sizes may differ.\n            * clear() - It is used to remove all the elements of the vector container\n            * emplace() - It extends the container by inserting new element at position\n            * emplace_back() - It is used to insert a new element into the vector container, the new element is added to the end of the vector\n            # for (auto it = myvector.begin(); it != myvector.end(); ++it)  // normal iterator\n            # for (auto t:v)\n \n        ? Queue\n            * empty() - Returns whether the queue is empty.\n            * size() - Returns the size of the queue.\n            * emplace() - Insert a new element into the queue container, the new element is added to the end of the queue.\n            * front() - front() function returns a reference to the first element of the queue.\n            * back() - returns a reference to the last element of the queue.\n            * push(x) - adds the element \u2018x\u2019 at the end of the queue\n            * pop() - deletes the first element of the queue\n \n        ? Priority_Queue\n            ! priority_queue <int, vector<int>, greater<int>> pq; // to make a priority queue in descending order\n            * empty() - returns whether the queue is empty.\n            * size() -  returns the size of the queue.\n            # top() -  Returns a reference to the top most element of the queue\n            * push(x) - adds the element \u2018x\u2019 at the end of the queue.\n            * pop() -  deletes the first element of the queue.\n            * swap() -  swap the contents of one priority queue with another priority queue of same type and size.\n            * emplace() - insert a new element into the priority queue container, the new element is added to the top of the priority queue.\n \n        ? Deque\n            Double ended queues are sequence containers with the feature of expansion and contraction on both the ends.\n            They are similar to vectors, but are more efficient in case of insertion and deletion of elements.\n            Unlike vectors, contiguous storage allocation may not be guaranteed.\n            * insert()\n            * rbegin()\n            * rend()\n            * assign()\n            * resize()\n            * push_front()\n            * push_back()\n            * pop_front()\n            * pop_back()\n            * front()\n            * back()\n*/\n"
}