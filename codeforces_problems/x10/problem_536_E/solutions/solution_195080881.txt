{
    "id": 195080881,
    "contestId": 536,
    "creationTimeSeconds": 1677456725,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 536,
        "index": "E",
        "name": "Tavas on the Path",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3100,
        "tags": [
            "data structures",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 536,
        "members": [
            {
                "handle": "5k_sync_closer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1429029300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 101,
    "timeConsumedMillis": 982,
    "memoryConsumedBytes": 185651200,
    "source": "// LUOGU_RID: 103159514\n#include <cstdio>\r\n#include <algorithm>\r\n#define G int m = p->s + p->t >> 1\r\nusing namespace std;\r\nstruct E\r\n{\r\n    int v, w, t;\r\n} e[200050];\r\nstruct S\r\n{\r\n    int u, v, l, i;\r\n} k[100050];\r\npair<int, int> g[100050];\r\nint n, m, c, p, F[100050], K[100050], z[100050], d[100050],\r\n    f[100050], s[100050], t[100050], b[100050], h[100050];\r\nbool C(S a, S b) { return a.l < b.l; }\r\nvoid A(int u, int v, int w)\r\n{\r\n    e[++c] = {v, w, h[u]};\r\n    h[u] = c;\r\n}\r\nvoid X(int u)\r\n{\r\n    s[u] = 1;\r\n    for (int i = h[u], v; i; i = e[i].t)\r\n        if (!d[v = e[i].v])\r\n        {\r\n            f[v] = u;\r\n            d[v] = d[u] + 1;\r\n            g[v] = {e[i].w, v};\r\n            X(v);\r\n            s[u] += s[v];\r\n            if (s[v] > s[z[u]])\r\n                z[u] = v;\r\n        }\r\n}\r\nvoid Y(int u, int g)\r\n{\r\n    t[u] = g;\r\n    b[u] = ++p;\r\n    if (z[u])\r\n        Y(z[u], g);\r\n    for (int i = h[u], v; i; i = e[i].t)\r\n        if ((v = e[i].v) != z[u] && v != f[u])\r\n            Y(v, v);\r\n}\r\nstruct T\r\n{\r\n    T *l, *r;\r\n    int s, t, q, x, y, v;\r\n    T(int s, int t) : s(s), t(t) {}\r\n    void u()\r\n    {\r\n        v = l->v + r->v;\r\n        x = l->v == l->t - l->s + 1 ? l->v + r->x : l->x;\r\n        y = r->v == r->t - r->s + 1 ? r->v + l->y : r->y;\r\n        q = l->q + r->q - F[l->y] - F[r->x] + F[l->y + r->x];\r\n    }\r\n} * r;\r\nT *U(T *x, T *y)\r\n{\r\n    if (!x)\r\n        return y;\r\n    if (!y)\r\n        return x;\r\n    T *p = new T(x->s, y->t);\r\n    p->l = x;\r\n    p->r = y;\r\n    p->u();\r\n    return p;\r\n}\r\nvoid B(int s, int t, T *&p)\r\n{\r\n    p = new T(s, t);\r\n    if (s == t)\r\n        return void(p->q = F[p->x = p->y = p->v = 1]);\r\n    G;\r\n    B(s, m, p->l);\r\n    B(m + 1, t, p->r);\r\n    p->u();\r\n}\r\nvoid M(int l, T *p)\r\n{\r\n    if (p->s == p->t)\r\n        return void(p->q = p->x = p->y = p->v = 0);\r\n    G;\r\n    if (l <= m)\r\n        M(l, p->l);\r\n    else\r\n        M(l, p->r);\r\n    p->u();\r\n}\r\nT *Q(int l, int r, T *p)\r\n{\r\n    if (l <= p->s && p->t <= r)\r\n        return p;\r\n    G;\r\n    if (l <= m && r > m)\r\n        return U(Q(l, r, p->l), Q(l, r, p->r));\r\n    if (l <= m)\r\n        return Q(l, r, p->l);\r\n    if (r > m)\r\n        return Q(l, r, p->r);\r\n}\r\nint main()\r\n{\r\n    scanf(\"%d%d\", &n, &m);\r\n    for (int i = 1; i < n; ++i)\r\n        scanf(\"%d\", F + i);\r\n    for (int i = 1, u, v, w; i < n; ++i)\r\n        scanf(\"%d%d%d\", &u, &v, &w), A(u, v, w), A(v, u, w);\r\n    X(d[1] = 1);\r\n    Y(1, 1);\r\n    B(1, n, r);\r\n    sort(g + 2, g + n + 1);\r\n    for (int i = 0; i < m; ++i)\r\n        scanf(\"%d%d%d\", &k[i].u, &k[i].v, &k[i].l), k[i].i = i;\r\n    sort(k, k + m, C);\r\n    for (int i = 0, j = 1, u, v; i < m; ++i)\r\n    {\r\n        while (j < n && g[j + 1].first < k[i].l)\r\n            M(b[g[++j].second], r);\r\n        u = k[i].u;\r\n        v = k[i].v;\r\n        T *p = 0, *q = 0;\r\n        while (t[u] != t[v])\r\n        {\r\n            if (d[t[u]] > d[t[v]])\r\n                p = U(Q(b[t[u]], b[u], r), p), u = f[t[u]];\r\n            else\r\n                q = U(Q(b[t[v]], b[v], r), q), v = f[t[v]];\r\n        }\r\n        if (u != v)\r\n        {\r\n            if (d[u] > d[v])\r\n                p = U(Q(b[v] + 1, b[u], r), p);\r\n            else\r\n                q = U(Q(b[u] + 1, b[v], r), q);\r\n        }\r\n        if (p)\r\n            p = new T(*p), swap(p->x, p->y);\r\n        K[k[i].i] = U(p, q)->q;\r\n    }\r\n    for (int i = 0; i < m; ++i)\r\n        printf(\"%d\\n\", K[i]);\r\n    return 0;\r\n}"
}