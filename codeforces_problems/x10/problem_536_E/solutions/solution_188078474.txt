{
    "id": 188078474,
    "contestId": 536,
    "creationTimeSeconds": 1672931253,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 536,
        "index": "E",
        "name": "Tavas on the Path",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3100,
        "tags": [
            "data structures",
            "divide and conquer",
            "trees"
        ]
    },
    "author": {
        "contestId": 536,
        "members": [
            {
                "handle": "wangjunyong3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1429029300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 1590,
    "memoryConsumedBytes": 60928000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nconst int N = 2e5 + 10;\r\nlong long f[N];\r\nstruct Node {\r\n    int lv, rv, sum;\r\n    long long ans;\r\n};\r\nint st = 2;\r\nstruct SegmentTree {\r\n    Node w[N << 2];\r\n    inline void pushup(Node &u, Node ls, Node rs) {\r\n        u.ans = ls.ans + rs.ans - f[ls.rv] - f[rs.lv] + f[ls.rv + rs.lv];\r\n        u.sum = ls.sum + rs.sum;\r\n        if (ls.lv == ls.sum)\r\n            u.lv = ls.sum + rs.lv;\r\n        else\r\n            u.lv = ls.lv;\r\n        if (rs.rv == rs.sum)\r\n            u.rv = rs.sum + ls.rv;\r\n        else\r\n            u.rv = rs.rv;\r\n    }\r\n    inline void update(int u, int L, int R, int x) {\r\n        if (L == R) {\r\n            w[u].lv = w[u].rv = 1;\r\n            w[u].sum = 1;\r\n            w[u].ans = f[1];\r\n            return;\r\n        }\r\n        int M = L + R >> 1;\r\n        if (x <= M)\r\n            update(u << 1, L, M, x);\r\n        else\r\n            update(u << 1 | 1, M + 1, R, x);\r\n        pushup(w[u], w[u << 1], w[u << 1 | 1]);\r\n    }\r\n    void build(int u, int L, int R) {\r\n        w[u].sum = R - L + 1;\r\n        if (L == R) return;\r\n        int M = L + R >> 1;\r\n        build(u << 1, L, M), build(u << 1 | 1, M + 1, R);\r\n        pushup(w[u], w[u << 1], w[u << 1 | 1]);\r\n    }\r\n    Node query(int u, int L, int R, int l, int r) {\r\n        if (l > r) return {};\r\n        if (L >= l && R <= r) return w[u];\r\n        int M = L + R >> 1;\r\n        if (r <= M) return query(u << 1, L, M, l, r);\r\n        if (M < l) return query(u << 1 | 1, M + 1, R, l, r);\r\n        Node ans={};\r\n        pushup(ans, query(u << 1, L, M, l, r), query(u << 1 | 1, M + 1, R, l, r));\r\n        return ans;\r\n    }\r\n} seg;\r\nint n, m, dfn[N], dfncnt, siz[N], top[N], son[N], dep[N], fa[N];\r\nstruct Edge {\r\n    int next, v, w;\r\n} edge[N << 1];\r\nint h[N], cnt;\r\ninline void addedge(int u, int v, int w) { edge[++cnt] = {h[u], v, w}, h[u] = cnt; }\r\nvoid dfs1(int u) {\r\n    int v;\r\n    siz[u] = 1;\r\n    for (int i = h[u]; i; i = edge[i].next) {\r\n        v = edge[i].v;\r\n        if (v == fa[u]) continue;\r\n        fa[v] = u, dep[v] = dep[u] + 1, dfs1(v), siz[u] += siz[v];\r\n        if (siz[v] > siz[son[u]]) son[u] = v;\r\n    }\r\n}\r\nvoid dfs2(int u) {\r\n    int v;\r\n    dfn[u] = ++dfncnt;\r\n    if (son[u]) top[son[u]] = top[u], dfs2(son[u]);\r\n    for (int i = h[u]; i; i = edge[i].next) {\r\n        v = edge[i].v;\r\n        if (v == fa[u] || v == son[u]) continue;\r\n        top[v] = v, dfs2(v);\r\n    }\r\n}\r\nlong long query(int u, int v) {\r\n    int uu = u, vv = v, lca;\r\n    while (top[uu] != top[vv]) {\r\n        if (dep[top[uu]] < dep[top[vv]]) swap(uu, vv);\r\n        uu = fa[top[uu]];\r\n    }\r\n    lca = dep[uu] < dep[vv] ? uu:vv;\r\n    Node ans1 = {}, ans2 = {}, ans = {};\r\n    while (top[u] != top[lca]) {\r\n        seg.pushup(ans1, ans1, seg.query(1, st, n, dfn[top[u]], dfn[u]));\r\n        u = fa[top[u]];\r\n    }\r\n    seg.pushup(ans1, ans1, seg.query(1, st, n, dfn[lca] + 1, dfn[u]));\r\n    while (top[v] != top[lca]) {\r\n        seg.pushup(ans2, ans2, seg.query(1, st, n, dfn[top[v]], dfn[v]));\r\n        v = fa[top[v]];\r\n    }\r\n    seg.pushup(ans2, ans2, seg.query(1, st, n, dfn[lca] + 1, dfn[v]));\r\n    swap(ans1.lv, ans1.rv);\r\n    seg.pushup(ans, ans1, ans2);\r\n    return ans.ans;\r\n}\r\npair<int, pair<int, int> > upd[N];\r\npair<int, int> que[N];\r\nint uu[N], vv[N];\r\nlong long ans[N];\r\nsigned main() {\r\n    cin>>n>>m;\r\n    for (int i = 1; i < n; i++) cin>>f[i];\r\n    for (int i = 1; i < n; i++) {\r\n        cin>>upd[i].second.first>>upd[i].second.second>>upd[i].first, upd[i].first = -upd[i].first;\r\n        addedge(upd[i].second.first, upd[i].second.second, upd[i].first);\r\n        addedge(upd[i].second.second, upd[i].second.first, upd[i].first);\r\n    }\r\n    dep[1] = fa[1] = top[1] = 1;\r\n    dfs1(1), dfs2(1);\r\n    for (int i = 1; i <= m; i++) {\r\n        cin>>uu[i]>>vv[i]>>que[i].first, que[i].first = -que[i].first, que[i].second = i;\r\n    }\r\n    seg.build(1, st, n); \r\n    sort(upd + 1, upd + n), sort(que + 1, que + m + 1);\r\n    int r = 1;\r\n    for (int i = 1; i <= m; i++) {\r\n        while (r < n && upd[r].first <= que[i].first) {\r\n            int u = upd[r].second.first,\r\n                v = upd[r].second.second;\r\n            if (dep[u] > dep[v]) swap(u, v);\r\n            seg.update(1, st, n, dfn[v]);\r\n            ++r;\r\n        }\r\n        ans[que[i].second] = query(uu[que[i].second], vv[que[i].second]);\r\n    }\r\n    for (int i = 1; i <= m; i++) cout<<ans[i]<<endl;\r\n    return 0;\r\n}\r\n/*\r\n3 2\r\n-1 -10\r\n1 2 1\r\n1 3 2\r\n2 3 0\r\n2 3 10\r\n*/"
}