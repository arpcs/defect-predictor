{
    "id": 220152739,
    "contestId": 1023,
    "creationTimeSeconds": 1692882672,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1023,
        "index": "F",
        "name": "Mobile Phone Network",
        "type": "PROGRAMMING",
        "points": 3250.0,
        "rating": 2600,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1023,
        "members": [
            {
                "handle": "luogu_bot3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1534516500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 122615103\n#include <cstdio>\r\n#include <algorithm>\r\n#define int long long\r\nusing namespace std;\r\n#define re register\r\n#define ll long long\r\n#define lid (id<<1)\r\n#define rid (id<<1|1)\r\nint n,m,k;\r\nstruct node1{\r\n\tll id;\r\n\tll l;\r\n\tll r;\r\n\tll max;\r\n\tll lazy;\r\n}tr[6000001];\r\nstruct node{\r\n\tll nt;\r\n\tll to;\r\n\tll val;\r\n}e[2000001];\r\nstruct company{\r\n\tll ai;\r\n\tll bi;\r\n\tll ci;\r\n}v[2000001];\r\nint ans[3000001];\r\nint c[3000001];\r\nint book[3000001];\r\nint tot,head[3000001];\r\nint fa[3000001];\r\nint dep[3000001];\r\nint size[3000001];\r\nint son[3000001];\r\nint top[3000001];\r\nint nid[3000001];\r\nint tot1;\r\nint nw[3000001];\r\nint data[3000001];\r\ninline ll read()\r\n{\r\n\tll x=0,f=1;\r\n\tchar ch=getchar();\r\n\twhile(ch<'0'||ch>'9'){\r\n\t\tif(ch=='-')f=-1;\r\n\t\tch=getchar();\r\n\t}\r\n\twhile(ch>='0'&&ch<='9'){\r\n\t\tx=(x<<1)+(x<<3)+(ch-'0');\r\n\t\tch=getchar();\r\n\t}\r\n\treturn x*f;\r\n}\r\ninline void write(ll x)\r\n{\r\n\tif(x<0)x*=-1,putchar('-');\r\n\tif(x>9)write(x/10);\r\n\tputchar(x%10+'0');\r\n\treturn;\r\n}\r\ninline void init(ll x,ll y,ll z)\r\n{\r\n\te[++tot].nt=head[x];\r\n\te[tot].to=y;\r\n\te[tot].val=z;\r\n\thead[x]=tot;\r\n}\r\nint find(int x)\r\n{\r\n\tif(c[x]!=x)c[x]=find(c[x]);\r\n\treturn c[x];\r\n}\r\nvoid dfs1(int x,int fat)\r\n{\r\n\tfa[x]=fat;size[x]=1;\r\n\tdep[x]=dep[fat]+1;\r\n\tfor(int i=head[x];i;i=e[i].nt){\r\n\t\tint y=e[i].to;\r\n\t\tif(y==fa[x])continue;\r\n\t\tdata[y]=e[i].val;\r\n\t\tdfs1(y,x);\r\n\t\tsize[x]+=size[y];\r\n\t\tif(size[y]>size[son[x]])\r\n\t\t\tson[x]=y;\r\n\t}\r\n}\r\nvoid dfs2(int x)\r\n{\r\n\tif(son[x]){\r\n\t\tnid[son[x]]=++totw;\r\n\t\ttop[son[x]]=top[x];\r\n\t\tnw[totw]=son[x];\r\n\t\tdfs2(son[x]);\r\n\t}\r\n\tfor(int i=head[x];i;i=e[i].nt){\r\n\t\tint y=e[i].to;\r\n\t\tif(y==fa[x]||y==son[x])continue;\r\n\t\tnid[y]=++totw;\r\n\t\ttop[y]=y;\r\n\t\tnw[totw]=y;\r\n\t\tdfs2(y);\r\n\t}\r\n}\r\nvoid build(int id,int l,int r)\r\n{\r\n\tif(l==r){\r\n\t\ttr[id].max=data[nw[l]];\r\n\t\treturn;\r\n\t}\r\n\tint mid=(l+r)>>1;\r\n\tbuild(id*2,l,mid);\r\n\tbuild(id*2+1,mid+1,r);\r\n\ttr[id].max=max(tr[lid].max,tr[rid].max);\r\n}\r\nvoid pushdown(int id)\r\n{\r\n\tif(tr[id].lazy<=tr[lid].max){\r\n\t\ttr[lid].max=tr[id].lazy;\r\n\t\ttr[lid].lazy=tr[id].lazy;\r\n\t}\r\n\tif(tr[id].lazy<=tr[rid].max){\r\n\t\ttr[rid].lazy=tr[id].lazy;\r\n\t\ttr[rid].lazy=tr[id].lazy;\r\n\t}\r\n\ttr[id].lazy=0;\r\n}\r\nvoid update2(int id,int l,int r,int xl,int xr,int d)\r\n{\r\n\tif(d>tr[id].max)return;\r\n\tif(l==xl&&r==xr)\r\n\t{\r\n\t\ttr[id].max=d;\r\n\t\ttr[id].lazy=d;\r\n\t\treturn;\r\n\t}\r\n\tif(tr[id].lazy)pushdown(id);\r\n\tint mid=(l+r)>>1;\r\n\tif(xr<=mid)update2(id*2,l,mid,xl,xr,d);\r\n\telse if(xl>mid)update2(id*2+1,mid+1,r,xl,xr,d);\r\n\telse\t{\r\n\t\tupdate2(id*2,l,mid,xl,mid,d);\r\n\t\tupdate2(id*2+1,mid+1,r,mid+1,xr,d);\r\n\t}\r\n\ttr[id].max=max(tr[lid].max,tr[rid].max);\r\n\treturn;\r\n}\r\nvoid update1(int u,int v,int d)\r\n{\r\n\twhile(top[u]!=top[v])\r\n\t{\r\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\r\n\t\tupdate2(1,1,n,nid[top[u]],nid[u],d);\r\n\t\tu=fa[top[u]];\r\n\t}\r\n\tif(u==v)return;\r\n\tif(dep[u]<dep[v])swap(u,v);\r\n\tupdate2(1,1,n,nid[v]+1,nid[u],d);\r\n}\r\nint LCA(int u,int v)\r\n{\r\n\twhile(top[u]!=top[v])\r\n\t{\r\n\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\r\n\t\tu=fa[top[u]];\r\n\t}\r\n\tif(dep[u]>dep[v])return v;\r\n\treturn u;\r\n}\r\nvoid check(int id,int l,int r)\r\n{\r\n\tif(l==r){\r\n\t\tans[nw[l]]=tr[id].max;\r\n\t\treturn;\r\n\t}\r\n\tif(tr[id].lazy)pushdown(id);\r\n\tint mid=(l+r)>>1;\r\n\tcheck(id*2,l,mid);\r\n\tcheck(id*2+1,mid+1,r);\r\n}\r\nsigned main()\r\n{\r\n\tn=read();k=read();m=read();\r\n\tfor(int i=1;i<=n;i++)c[i]=i;\r\n\tfor(int i=1,x,y;i<=k;i++)\r\n\t{\r\n\t\tx=read();y=read();\r\n\t\tif(find(x)!=find(y))\r\n\t\t{\r\n\t\t\tc[find(x)]=find(y);\r\n\t\t\tinit(x,y,1e18);\r\n\t\t\tinit(y,x,1e18);\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=m;i++)\r\n\t{\r\n\t\tv[i].ai=read();v[i].bi=read();v[i].ci=read();\r\n\t\tif(find(v[i].ai)!=find(v[i].bi))\r\n\t\t{\r\n\t\t\tc[find(v[i].ai)]=find(v[i].bi);\r\n\t\t\tinit(v[i].ai,v[i].bi,0);\r\n\t\t\tinit(v[i].bi,v[i].ai,0);\r\n\t\t\tbook[i]=1;\r\n\t\t}\r\n\t}\r\n\tdfs1(1,0);\r\n\tnid[1]=++totw;\r\n\ttop[1]=1;\r\n\tnw[totw]=1;\r\n\tdfs2(1);\r\n\tbuild(1,1,n);\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tif(!book[i]){\r\n\t\t\tint lca=LCA(v[i].ai,v[i].bi);\r\n\t\t\tupdate1(v[i].ai,lca,v[i].ci);\r\n\t\t\tupdate1(v[i].bi,lca,v[i].ci);\r\n\t\t}\r\n\t}\r\n\tcheck(1,1,n);\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tif(ans[i]==1e18){\r\n\t\t\tprintf(\"-1\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\tans[i]+=ans[i-1];\r\n\t}\r\n\twrite(ans[n]);putchar('\\n');\r\n\treturn 0;\r\n}\r\n"
}