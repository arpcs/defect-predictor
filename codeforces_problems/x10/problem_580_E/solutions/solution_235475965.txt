{
    "id": 235475965,
    "contestId": 580,
    "creationTimeSeconds": 1701586065,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 580,
        "index": "E",
        "name": "Kefa and Watch",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "data structures",
            "hashing",
            "strings"
        ]
    },
    "author": {
        "contestId": 580,
        "members": [
            {
                "handle": "Killer_Jerry"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1442939400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 80,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 9728000,
    "source": "// LUOGU_RID: 138021733\n#include<bits/stdc++.h>\r\n#define ull unsigned long long\r\nusing namespace std;\r\nconst int N=1e5+10,MOD=1e9+7;\r\nchar s[N];\r\nstruct segment_tree{\r\n\t#define ls(x) (x<<1)\r\n\t#define rs(x) (x<<1|1)\r\n\tull fac[N][2],sum[N<<2];\r\n\tint ll[N<<2],rr[N<<2],lazy[N<<2];\r\n\tvoid init_fac(int x){\r\n\t\tfac[0][0]=fac[0][1]=1;\r\n\t\tfor(int i=1;i<=x;i++) fac[i][0]=(fac[i-1][0]*18)%MOD,fac[i][1]=(fac[i-1][1]*18+1)%MOD;\r\n\t}\r\n\tinline void pushup(int x){sum[x]=((sum[ls(x)]*fac[rr[rs(x)]-ll[rs(x)]+1][0]+sum[rs(x)])%MOD+MOD)%MOD;}\r\n\tinline void pushdown(int x){\r\n\t\tsum[ls(x)]=lazy[x]*fac[rr[ls(x)]-ll[ls(x)]][1]%MOD;\r\n\t\tsum[rs(x)]=lazy[x]*fac[rr[rs(x)]-ll[rs(x)]][1]%MOD;\r\n\t\tlazy[ls(x)]=lazy[rs(x)]=lazy[x];\r\n\t\tlazy[x]=-1;\r\n\t}\r\n\tvoid build(int x,int l,int r){\r\n\t\tll[x]=l,rr[x]=r,lazy[x]=-1;\r\n\t\tif(l==r) return (void)(sum[x]=s[l]-'0'+1);\r\n\t\tint mid=(ll[x]+rr[x])>>1;\r\n\t\tbuild(ls(x),l,mid),build(rs(x),mid+1,r);\r\n\t\tpushup(x);\r\n\t}\r\n\tvoid update(int x,int l,int r,int md){\r\n\t\tif(ll[x]==l&&rr[x]==r) return (void)(sum[x]=md*fac[rr[x]-ll[x]][1]%MOD,lazy[x]=md);\r\n\t\tif(lazy[x]+1) pushdown(x);\r\n\t\tint mid=(ll[x]+rr[x])>>1;\r\n\t\tif(mid>=r) update(ls(x),l,r,md);\r\n\t\telse if(mid<l) update(rs(x),l,r,md);\r\n\t\telse update(ls(x),l,mid,md),update(rs(x),mid+1,r,md);\r\n\t\tpushup(x);\r\n\t}\r\n\tull query(int x,int l,int r){\r\n\t\tif(r<l) return 0;\r\n\t\tif(ll[x]==l&&rr[x]==r) return sum[x];\r\n\t\tif(lazy[x]+1) pushdown(x);\r\n\t\tint mid=(ll[x]+rr[x])>>1;\r\n\t\tif(mid>=r) return query(ls(x),l,r);\r\n\t\telse if(mid<l) return query(rs(x),l,r);\r\n\t\telse return (query(ls(x),l,mid)*fac[r-mid][0]+query(rs(x),mid+1,r))%MOD;\r\n\t}\r\n}tree;\r\nint n,m,k,T;\r\nint main(){\r\n\tscanf(\"%d%d%d%s\",&n,&m,&k,s+1);\r\n\ttree.init_fac(n);\r\n\ttree.build(1,1,n);\r\n\tT=m+k;\r\n\tfor(int opt,l,r,x;T--;){\r\n\t\tscanf(\"%d%d%d%d\",&opt,&l,&r,&x);\r\n\t\tif(opt==1) tree.update(1,l,r,x+1);\r\n\t\telse printf(\"%s\\n\",tree.query(1,l,r-x)==tree.query(1,l+x,r)?\"YES\":\"NO\");\r\n\t}\r\n\treturn 0;\r\n}"
}