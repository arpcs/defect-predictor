{
    "id": 76252655,
    "contestId": 736,
    "creationTimeSeconds": 1586625052,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 736,
        "index": "E",
        "name": "Chess Championship",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2900,
        "tags": [
            "constructive algorithms",
            "flows",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 736,
        "members": [
            {
                "handle": "abeker"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1480264500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 72499200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int MAXN = 3e3 + 5;\r\n\r\nint N, M;\r\nint score[MAXN];\r\nint deg1[MAXN], deg2[MAXN];\r\nint tour1[MAXN][MAXN], tour2[MAXN][MAXN];\r\n\r\nvoid load() {\r\n\tscanf(\"%d%d\", &N, &M);\r\n\tfor (int i = 0; i < M; i++)\r\n\t\tscanf(\"%d\", score + N - i);\t\r\n}\r\n\r\nvoid bye() {\r\n\tputs(\"no\");\r\n\texit(0);\r\n}\r\n\r\nvoid decrease(int arr[MAXN], int mat[MAXN][MAXN], int lo, int hi, int who) {\r\n\tfor (int i = lo; i <= hi; i++) {\r\n\t\tmat[i][who] = 1;\r\n\t\tarr[i]--;\r\n\t}\r\n}\r\n\r\nvoid construct(int deg[MAXN], int result[MAXN][MAXN]) {\r\n\tfor (int i = N; i; i--) {\r\n\t\tint tmp = i - 1 - deg[i];\r\n\t\tint lft = i - tmp, rig = i - tmp;\r\n\t\twhile (lft > 1 && deg[lft] == deg[lft - 1])\r\n\t\t\tlft--;\r\n\t\twhile (rig < i - 1 && deg[rig] == deg[rig + 1])\r\n\t\t\trig++;\r\n\t\tdecrease(deg, result, rig + 1, i - 1, i);\r\n\t\tdecrease(deg, result, lft, lft + rig - i + tmp, i);\r\n\t\tfor (int j = 1; j < i; j++)\r\n\t\t\tresult[i][j] = result[j][i] ^ 1;\r\n\t}\r\n\tfor (int i = 1; i <= N; i++)\r\n\t\tfor (int j = 1; j <= N; j++)\r\n\t\t\tif (i != j)\r\n\t\t\t\tassert(result[i][j] + result[j][i] == 1);\r\n}\r\n\r\nvoid solve() {\r\n\tint tot = N * (N - 1);\r\n\tfor (int i = 0; i < M; i++)\r\n\t\ttot -= score[N - i];\r\n\tif (tot < 0)\r\n\t\tbye();\r\n\tfor (int i = 0; i < N - M; i++)\r\n\t\tscore[N - M - i] = tot / (N - M) + (i < tot % (N - M));\r\n\t\r\n\tif (score[N - M] > score[N - M + 1])\r\n\t\tbye();\r\n\t\t\r\n\tint pref = 0, odd = 0;\r\n\tfor (int i = 1; i <= N; i++) {\r\n\t\tpref += score[i];\r\n\t\tif (pref < i * (i - 1))\r\n\t\t\tbye();\r\n\t\tdeg1[i] = score[i] / 2;\r\n\t\tdeg2[i] = (score[i] + 1) / 2;\r\n\t\todd += score[i] % 2;\r\n\t\tif (odd % 2)\r\n\t\t\tswap(deg1[i], deg2[i]);\r\n\t}\r\n\t\r\n\tconstruct(deg1, tour1);\r\n\tconstruct(deg2, tour2);\r\n\t\t\r\n\tputs(\"yes\");\r\n\tfor (int i = 1; i <= N; i++) {\r\n\t\tfor (int j = 1; j <= N; j++)\r\n\t\t\tprintf(\"%c\", i == j ? 'X' : \"LDW\"[tour1[i][j] + tour2[i][j]]);\r\n\t\tputs(\"\");\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tload();\r\n\tsolve();\r\n\treturn 0;\r\n}\r\n"
}