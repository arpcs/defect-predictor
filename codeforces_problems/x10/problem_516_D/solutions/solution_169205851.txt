{
    "id": 169205851,
    "contestId": 516,
    "creationTimeSeconds": 1661064519,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 516,
        "index": "D",
        "name": "Drazil and Morning Exercise",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2800,
        "tags": [
            "dfs and similar",
            "dp",
            "dsu",
            "trees",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 516,
        "members": [
            {
                "handle": "bkifhr8"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1424190900
    },
    "programmingLanguage": "Clang++20 Diagnostics",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 6041600,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n\ninline int gi()\n{\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\tint sum = 0;\n\twhile('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\ninline ll gl()\n{\n\tchar c = getchar();\n\twhile(c < '0' || c > '9') c = getchar();\n\tll sum = 0;\n\twhile('0' <= c && c <= '9') sum = sum * 10 + c - 48, c = getchar();\n\treturn sum;\n}\n\nconst int maxn = 100005;\n\nint n, ans;\n\nstruct edge\n{\n\tint to, next, w;\n} e[maxn * 2];\nint h[maxn], tot, rt, fa[maxn], p[maxn], siz[maxn], vis[maxn];\nll dis[maxn], d[maxn];\n\ninline void add(int w, int u, int v)\n{\n\te[++tot] = (edge) {v, h[u], w}; h[u] = tot;\n\te[++tot] = (edge) {u, h[v], w}; h[v] = tot;\n}\t\t\t\t\t\t\t\t\t\t\t\t\n\nvoid dfs(int u, int fa)\n{\n\td[u] =dis[u];\n\tif (dis[u] > dis[rt]) rt = u;\n\tfor (int i = h[u], v; v = e[i].to, i; i = e[i].next)\n\t\tif (v != fa) dis[v] = dis[u] + e[i].w, dfs(v, u);\n}\n\nint find(int x)\n{\n\tif (fa[x] == x) return x;\n\treturn fa[x] = find(fa[x]);\n}\n\nvoid merge(int x, int y)\n{\n\tx = find(x); y = find(y);\n\tif (x == y) return ;\n\tif (siz[y] > siz[x]) swap(x, y);\n\tsiz[x] += siz[y]; ans = max(ans, siz[x]); fa[y] = x;\n}\n\nint main()\n{\n\tn = gi(); ++n; --n;\n\tfor (int i = 1; i < n; ++i) add(gi(), gi(), gi());\n\t\n\tdfs(1, 0);\nmemset(d,0,sizeof(d));\n\tint tmp = rt; dis[rt] = 0; rt = 0;\nmemset(d,0,sizeof(d));\n\tdfs(tmp, 0);\n\tdis[rt] = 0; \n        dfs(rt, 0);\n\n\tfor (int i = 1; i <= n; ++i) p[i] = i;\n\tsort(p + 1, p + n + 1, [](const int &a, const int &b) {return d[a] < d[b];});\n\tint q = gi();\n\tll lim;\n\twhile (q--) {\n\t\tlim = gl();\n\t\tfor (int i = 1; i <= n; ++i) fa[i] = i, siz[i] = 1, vis[i] = 0;\n\n\t\tans = 1;\n\t\tfor (int k = n, j = n; k >= 1; --k) {\n\t\t\twhile (d[p[j]] > d[p[k]] + lim) {\n\t\t\t\t--siz[find(p[j])];\n\t\t\t\t--j;\n\t\t\t}\n\t\t\tvis[p[k]] = 1;\n\t\t\tfor (int i = h[p[k]], v; v = e[i].to, i; i = e[i].next)\n\t\t\t\tif (vis[v]) merge(p[k], v);\n\t\t}\n\t\tprintf(\"%d\\n\", ans);\n\t}\n\t\n\treturn 0;\n}\n\t \t \t    \t   \t   \t \t\t \t  \t\t\t \t"
}