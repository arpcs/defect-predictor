{
    "id": 231925301,
    "contestId": 404,
    "creationTimeSeconds": 1699441781,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 404,
        "index": "E",
        "name": "Maze 1D",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2200,
        "tags": [
            "binary search",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 404,
        "members": [
            {
                "handle": "lin_jy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1395243000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 55,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 2355200,
    "source": "#include<bits/stdc++.h>\r\n\r\nstd::bitset<2000005> bit;\r\n\r\nvoid solve() {\r\n    std::string s;\r\n    std::cin >> s;\r\n    int ans = 0;\r\n    // std::list<char> ls;\r\n    // for(auto i:s) ls.push_back(i);\r\n    // if(s.back() == 'R') {\r\n    //     for(auto it = ls.begin(); it != --ls.end() && it != ls.end(); ) {\r\n    //         if(*(it) == 'R') {\r\n    //             if(*(++it) == 'L') {\r\n    //                 it = ls.erase(--it);\r\n    //                 it = ls.erase(it);\r\n    //                 if(it != ls.begin()) --it;\r\n    //             }\r\n    //         }else ++it;\r\n    //     }\r\n    //     for(auto i:ls) if(i == 'R') goto A;\r\n    //     std::cout << 0 << '\\n';\r\n    // }else {\r\n    //     for(auto it = ls.begin(); it != --ls.end() && it != ls.end(); ) {\r\n    //         if(*(it) == 'L') {\r\n    //             if(*(++it) == 'R') {\r\n    //                 it = ls.erase(--it);\r\n    //                 it = ls.erase(it);\r\n    //                 if(it != ls.begin()) --it;\r\n    //             }\r\n    //         }else ++it;\r\n    //     }\r\n    //     for(auto i:ls) if(i == 'L') goto A;\r\n    //     std::cout << 0 << '\\n';\r\n    // }\r\n    // A:;\r\n    auto check = [&](int mid) -> bool {\r\n        int pos = 0;\r\n        bit.reset();\r\n        bit[1e6] = 1;\r\n        for(int i = 0; i < s.size() - 1; ++i) {\r\n            if(s[i] == 'L' and pos - 1 != mid) --pos;\r\n            else if(s[i] == 'R' and pos + 1 != mid) ++pos;\r\n            bit[pos + 1e6] = 1;\r\n        }\r\n        if(s.back() == 'L') {\r\n            if(!bit[pos - 1 + 1e6]) return true;\r\n            else return false;\r\n        }else {\r\n            if(!bit[pos + 1 + 1e6]) return true;\r\n            else return false;\r\n        }\r\n    };\r\n    if(check(1e6 + 1)) {\r\n        std::cout << 1 << '\\n';\r\n        return ;\r\n    }\r\n    if(s.back() == 'R') {\r\n        int l = -1e6, r = -1;\r\n        while(l <= r) {\r\n            int mid = (l + r) / 2;\r\n            if(check(mid)) r = mid - 1, ans = mid;\r\n            else l = mid + 1;\r\n        }\r\n    }else {\r\n        int l = 1, r = 1e6;\r\n        while(l <= r) {\r\n            int mid = (l + r) / 2;\r\n            if(check(mid)) l = mid + 1, ans = mid;\r\n            else r = mid - 1;\r\n        }\r\n    }\r\n    if(ans == 0) std::cout << ans << '\\n';\r\n    else std::cout << std::max(1, abs(ans)) << '\\n';\r\n    return ;\r\n}\r\n\r\nint main() {\r\n    std::ios::sync_with_stdio(0);\r\n    std::cin.tie(0);\r\n    int T = 1;\r\n    //std::cin >> T;\r\n    while(T--) solve();\r\n    return 0;\r\n}"
}