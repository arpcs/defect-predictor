{
    "id": 206325799,
    "contestId": 1523,
    "creationTimeSeconds": 1684405623,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1523,
        "index": "E",
        "name": "Crypto Lights",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2600,
        "tags": [
            "combinatorics",
            "dp",
            "math",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 1523,
        "members": [
            {
                "handle": "FanRinin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1622385300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1536000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\ninline int read() {\r\n    int x = 0, f = 1; char ch = getchar();\r\n    while (!isdigit(ch)) { if (ch == '-') f = -1; ch = getchar(); }\r\n    while (isdigit(ch)) { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }\r\n    return x * f;\r\n}\r\nconst int MAXN = 100010, mod = 1e9 + 7;\r\nint Add(int x, int y) { return (x += y) >= mod ? x - mod : x; }\r\nint Sub(int x, int y) { return (x -= y) < 0 ? x + mod : x; }\r\nint Mul(int x, int y) { return 1ll * x * y % mod; }\r\nint Qpow(int a, int b) {\r\n    int base = 1;\r\n    while (b) {\r\n        if (b & 1) base = Mul(base, a);\r\n        a = Mul(a, a); b >>= 1;\r\n    }\r\n    return base;\r\n}\r\nint Inv(int x) { return Qpow(x, mod - 2); }\r\nint fac[MAXN], inv[MAXN], invfac[MAXN];\r\nvoid pre() {\r\n    fac[0] = fac[1] = inv[1] = invfac[0] = invfac[1] = 1;\r\n    for (int i = 2; i < MAXN; i++) {\r\n        fac[i] = Mul(fac[i - 1], i);\r\n        inv[i] = Mul(mod - mod / i, inv[mod % i]);\r\n        invfac[i] = Mul(invfac[i - 1], inv[i]);\r\n    }\r\n}\r\nint C(int n, int m) { \r\n    if (n < 0 or m < 0 or n < m) return 0;\r\n    return 1ll * fac[n] * invfac[m] % mod * invfac[n - m] % mod; \r\n}\r\nint T, N, K, p[MAXN];\r\nvoid solve() {\r\n    N = read(), K = read(); \r\n    int ans = 1; \r\n    for (int i = 1; i <= N; i++) {\r\n        if (N - i - (K - 2) * (i - 1) + 1 <= 0) break;\r\n        p[i] = Mul(C(N - i - (K - 2) * (i - 1) + 1, i), Inv(C(N, i)));\r\n    }\r\n    for (int i = 1; i <= N; i++) ans = Add(ans, p[i]);\r\n    printf(\"%d\\n\", ans);\r\n}\r\nint main() {\r\n    T = read(); pre();\r\n    while (T--) solve();\r\n}"
}