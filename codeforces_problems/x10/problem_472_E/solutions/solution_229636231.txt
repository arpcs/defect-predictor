{
    "id": 229636231,
    "contestId": 472,
    "creationTimeSeconds": 1698202464,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 472,
        "index": "E",
        "name": "Design Tutorial: Learn from a Game",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2800,
        "tags": [
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 472,
        "members": [
            {
                "handle": "hhoppitree"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1411918500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 39,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 2150400,
    "source": "// LUOGU_RID: 131477828\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int N = 35;\r\n\r\nint n, m, a[N][N], b[N][N], posx = -1, posy;\r\n\r\nvector< pair<int, int> > res;\r\n\r\nvoid move(int x, int y)\r\n{\r\n    swap(a[posx][posy], a[x][y]);\r\n    posx = x, posy = y;\r\n    res.push_back(make_pair(x, y));\r\n    return;\r\n}\r\n\r\nvoid go(int a, int b, int p, int q)\r\n{\r\n    while (posx != a || posy != b) {\r\n        int nxtx = posx, nxty = posy;\r\n        if (nxtx < a) {\r\n            ++nxtx;\r\n        } else if (nxtx > a) {\r\n            --nxtx;\r\n        }\r\n        if (nxty < b) {\r\n            ++nxty;\r\n        } else if (nxty > b) {\r\n            --nxty;\r\n        }\r\n        if (nxtx == p && nxty == q) {\r\n            nxtx = posx, nxty = posy;\r\n            if (nxtx < a) {\r\n                ++nxtx;\r\n            } else if (nxtx > a) {\r\n                --nxtx;\r\n            }\r\n            if ((nxtx == p && nxty == q) || (nxtx == posx && nxty == posy)) {\r\n                assert(a == p || b == q);\r\n                if (a == p) {\r\n\t\t\t\t\tnxtx = (posx > 1 ? posx - 1 : posx + 1), nxty = posy;\r\n                    if (nxty < b) {\r\n                        ++nxty;\r\n                    } else if (nxty > b) {\r\n                        --nxty;\r\n                    }\r\n                } else {\r\n                    nxtx = posx, nxty = (posy > 1 ? posy - 1 : posy + 1);\r\n                    if (nxtx < a) {\r\n                        ++nxtx;\r\n                    } else if (nxtx > a) {\r\n                        --nxtx;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        move(nxtx, nxty);\r\n    }\r\n    return;\r\n}\r\n\r\nvoid mv(int a, int b, int p, int q)\r\n{\r\n    while (a != p || b != q) {\r\n        int glx = a, gly = b;\r\n        if (glx < p) {\r\n            ++glx;\r\n        } else if (glx > p) {\r\n            --glx;\r\n        }\r\n        if (gly < q) {\r\n            ++gly;\r\n        } else if (gly > q) {\r\n            --gly;\r\n        }\r\n        go(glx, gly, a, b);\r\n        move(a, b);\r\n        a = glx, b = gly;\r\n    }\r\n    return;\r\n}\r\n\r\nsigned main()\r\n{\r\n    int flag = 1;\r\n    scanf(\"%d%d\", &n, &m);\r\n    map<int, int> M;\r\n    for (int i = 1; i <= n; ++i) {\r\n        for (int j = 1; j <= m; ++j) {\r\n            scanf(\"%d\", &a[i][j]);\r\n            ++M[a[i][j]];\r\n        }\r\n    }\r\n    for (int i = 1; i <= n; ++i) {\r\n        for (int j = 1; j <= m; ++j) {\r\n            scanf(\"%d\", &b[i][j]);\r\n            flag &= (a[i][j] == b[i][j]);\r\n            --M[b[i][j]];\r\n            if (!M[b[i][j]]) {\r\n                M.erase(b[i][j]);\r\n            }\r\n        }\r\n    }\r\n    if (flag) {\r\n        puts(\"0\");\r\n        return 0;\r\n    }\r\n    if (!M.empty()) {\r\n        puts(\"-1\");\r\n        return 0;\r\n    }\r\n    if (n == 1) {\r\n        for (int j = 1; j <= m; ++j) {\r\n            vector< pair<int, int> > now;\r\n            now.push_back(make_pair(1, j));\r\n            for (int i = j - 1; i >= 1; --i) {\r\n                now.push_back(make_pair(1, i));\r\n                swap(a[1][i], a[1][i + 1]);\r\n                int flag = 1;\r\n                for (int p = 1; p <= n; ++p) {\r\n                    for (int q = 1; q <= m; ++q) {\r\n                        flag &= a[p][q] == b[p][q];\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    printf(\"%d\\n\", now.size() - 1);\r\n                    for (int k = 0; k < now.size(); ++k) {\r\n                        printf(\"%d %d\\n\", now[k].first, now[k].second);\r\n                    }\r\n                    return 0;\r\n                }\r\n            }\r\n            for (int i = 1; i < j; ++i) {\r\n                swap(a[1][i], a[1][i + 1]);\r\n            }\r\n            now.clear();\r\n            now.push_back(make_pair(1, j));\r\n            for (int i = j + 1; i <= m; ++i) {\r\n                now.push_back(make_pair(1, i));\r\n                swap(a[1][i], a[1][i - 1]);\r\n                int flag = 1;\r\n                for (int p = 1; p <= n; ++p) {\r\n                    for (int q = 1; q <= m; ++q) {\r\n                        flag &= a[p][q] == b[p][q];\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    printf(\"%d\\n\", now.size() - 1);\r\n                    for (int k = 0; k < now.size(); ++k) {\r\n                        printf(\"%d %d\\n\", now[k].first, now[k].second);\r\n                    }\r\n                    return 0;\r\n                }\r\n            }\r\n            for (int i = m; i > j; --i) {\r\n                swap(a[1][i], a[1][i - 1]);\r\n            }\r\n        }\r\n        puts(\"-1\");\r\n        return 0;\r\n    }\r\n    if (m == 1) {\r\n        for (int i = 1; i <= n; ++i) {\r\n            vector< pair<int, int> > now;\r\n            now.push_back(make_pair(i, 1));\r\n            for (int j = i - 1; j >= 1; --j) {\r\n                now.push_back(make_pair(j, 1));\r\n                swap(a[j][1], a[j + 1][1]);\r\n                int flag = 1;\r\n                for (int p = 1; p <= n; ++p) {\r\n                    for (int q = 1; q <= m; ++q) {\r\n                        flag &= a[p][q] == b[p][q];\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    printf(\"%d\\n\", now.size() - 1);\r\n                    for (int k = 0; k < now.size(); ++k) {\r\n                        printf(\"%d %d\\n\", now[k].first, now[k].second);\r\n                    }\r\n                    return 0;\r\n                }\r\n            }\r\n            for (int j = 1; j < i; ++j) {\r\n                swap(a[j][1], a[j + 1][1]);\r\n            }\r\n            now.clear();\r\n            now.push_back(make_pair(i, 1));\r\n            for (int j = i + 1; j <= n; ++j) {\r\n                now.push_back(make_pair(j, 1));\r\n                swap(a[j][1], a[j - 1][1]);\r\n                int flag = 1;\r\n                for (int p = 1; p <= n; ++p) {\r\n                    for (int q = 1; q <= m; ++q) {\r\n                        flag &= a[p][q] == b[p][q];\r\n                    }\r\n                }\r\n                if (flag) {\r\n                    printf(\"%d\\n\", now.size() - 1);\r\n                    for (int k = 0; k < now.size(); ++k) {\r\n                        printf(\"%d %d\\n\", now[k].first, now[k].second);\r\n                    }\r\n                    return 0;\r\n                }\r\n            }\r\n            for (int j = n; j > i; --j) {\r\n                swap(a[j][1], a[j - 1][1]);\r\n            }\r\n        }\r\n        puts(\"-1\");\r\n        return 0;\r\n    }\r\n    for (int i = 1; i <= n; ++i) {\r\n        for (int j = 1; j <= m; ++j) {\r\n            if (a[i][j] == b[1][1]) {\r\n                posx = i, posy = j;\r\n                break;\r\n            }\r\n        }\r\n        if (~posx) {\r\n            break;\r\n        }\r\n    }\r\n    res.push_back(make_pair(posx, posy));\r\n    while (n >= 2 || m >= 3) {\r\n        if (n >= m) {\r\n            for (int j = 1; j <= m; ++j) {\r\n                int whx = -1, why;\r\n                for (int p = 1; p <= n; ++p) {\r\n                    for (int q = (p == n ? j : 1); q <= m; ++q) {\r\n                        if ((p != posx || q != posy) && a[p][q] == b[n][j]) {\r\n                            whx = p, why = q;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (~whx) {\r\n                        break;\r\n                    }\r\n                }\r\n                mv(whx, why, n - 1, j);\r\n                go(n - 1, (j == 1 ? j + 1 : j - 1), n - 1, j);\r\n\t\t\t\tmove(n, j);\r\n\t\t\t\tmove(n - 1, j);\r\n            }\r\n            --n;\r\n        } else {\r\n            for (int i = 1; i <= n; ++i) {\r\n                int whx = -1, why;\r\n                for (int p = 1; p <= n; ++p) {\r\n                    for (int q = 1; q < m || (q == m && p >= i); ++q) {\r\n                        if ((p != posx || q != posy) && a[p][q] == b[i][m]) {\r\n                            whx = p, why = q;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (~whx) {\r\n                        break;\r\n                    }\r\n                }\r\n                mv(whx, why, i, m - 1);\r\n                go((i == 1 ? i + 1 : i - 1), m - 1, i, m - 1);\r\n                move(i, m);\r\n                move(i, m - 1);\r\n            }\r\n            --m;\r\n        }\r\n    }\r\n    if (posx != 1 || posy != 1) {\r\n        move(1, 1);\r\n    }\r\n    printf(\"%d\\n\", res.size() - 1);\r\n    for (int i = 0; i < res.size(); ++i) {\r\n        printf(\"%d %d\\n\", res[i].first, res[i].second);\r\n    }\r\n    return 0;\r\n}"
}