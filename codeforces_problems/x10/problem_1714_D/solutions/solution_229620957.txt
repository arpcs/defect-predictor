{
    "id": 229620957,
    "contestId": 1714,
    "creationTimeSeconds": 1698180169,
    "relativeTimeSeconds": 6289,
    "problem": {
        "contestId": 1714,
        "index": "D",
        "name": "Color with Occurrences",
        "type": "PROGRAMMING",
        "rating": 1600,
        "tags": [
            "brute force",
            "data structures",
            "dp",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 1714,
        "members": [
            {
                "handle": "01210288775ham"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1698173880
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 34,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 0,
    "source": "/*\r\n   \u0635\u0644 \u0639\u0644 \u0645\u062d\u0645\u062f\r\n   if (u == Abdel-Aziz Mostafa )   love u <3 ;\r\n*/\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int  __int128\r\n#define ll long long\r\n#define ld long double\r\nconst ll sz=3*(1e5) +10;\r\nconst ll LIMIT=1e15;\r\n#define int  ll\r\n#define float double\r\n////////////////////*////////////////////////////////////\r\n#define Fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n#define input freopen(\"lazy.in\", \"r\", stdin);\r\n#define output  freopen(\"output.txt\", \"w\", stdout);\r\n//////////////////*///////////////////////////////////\r\n#define lop for (int i=0;i<n;i++)\r\n//////////////////////*////////////////////////\r\n#define  all(a) a.begin(),a.end()\r\n#define pr make_pair\r\ntypedef pair<int,int> pii ;\r\ntypedef vector<int> vi ;\r\ntypedef vector<pii>  vii ;\r\n/////////////////////*///////////////////\r\n#define pi 3.14159265358979323846264338327950288419716939937510\r\n/*\r\n * to_sort (gives u valid seq from some node\r\n * BFS = recusion by queue in dif order  ( similar not same )\r\n * at tree there is one path between 2 nodes\r\n*/\r\nvoid solve() {\r\npriority_queue<pair<int,string> >pq;\r\nstring x; cin>>x;\r\nint n=x.size(); int q; cin>>q;\r\nset<string>s;\r\n    map<string,int>mp;\r\nfor (int i=0;i<q;i++){\r\n    string y; cin>>y;\r\n    mp[y]=i+1;\r\n   s.insert(y);\r\n}\r\nvector<int> ok(n+1);\r\nvi take(n+1);\r\n\r\nvii ans;\r\nfor (int i=0;i<n;i++){\r\n    pii l_r={-1,-1};\r\n    for (int j=i;j<n;j++){ //i...j\r\n        int le=j-i+1;\r\n        string cur=x.substr(i,le);\r\n        if (s.find(cur)!=s.end()){\r\n            l_r={i,j};\r\n        }\r\n    }\r\n    if (l_r.first==-1)continue;\r\n    if (take[l_r.second])continue;\r\n    int pos=l_r.first;\r\n    for (int j=l_r.first;j<=l_r.second;j++){\r\n        if (!ok[j]){\r\n            pos=j;\r\n            break;\r\n        }\r\n    }\r\n    int idx;\r\n    pii res={-1,-1};\r\n    int cnt=0;\r\n    for ( idx=i;idx<n and cnt<1 ;idx++){\r\n        for (int j=idx;j<n;j++){\r\n            int le=j-idx+1;\r\n            string cur=x.substr(idx,le);\r\n            if (s.find(cur)!=s.end()){\r\n                pii c={j,idx};\r\n               res=max(res,c);\r\n            }\r\n        }\r\n        if (!ok[idx])cnt++;\r\n    }\r\n\r\n  // if (i==1)   cout<<res.first<<\" \"<<res.second<<\"hhh\\n\";\r\n     pii p=res;\r\n    res={p.second,p.first};\r\n    if (res.second>l_r.second)l_r=res;\r\n    for (int j=l_r.first;j<=l_r.second;j++)ok[j]=take[j]=1;\r\n   ans.push_back(l_r);\r\n}\r\nfor(int i=0;i<n;i++){\r\n    if (!ok[i]){\r\n        cout<<-1<<\"\\n\";\r\n        return;\r\n    }\r\n}\r\ncout<<ans.size()<<\"\\n\";\r\nfor (auto &[l,r]:ans){\r\n    string cur=x.substr(l,r-l+1);\r\n    cout<<mp[cur]<<\" \";\r\n    cout<<l+1<<\"\\n\";\r\n}\r\n//cout<<\"xxxxxxxxxxxxxxxxxx\\n\";\r\n}\r\nsigned main(){\r\n    Fast\r\n    int T=1;\r\n    cin>>T;\r\n    while(T--){\r\n        solve();\r\n    }\r\n}"
}