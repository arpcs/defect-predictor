{
    "contestId": 1714,
    "index": "D",
    "name": "Color with Occurrences",
    "type": "PROGRAMMING",
    "rating": 1600,
    "tags": [
        "brute force",
        "data structures",
        "dp",
        "greedy",
        "strings"
    ],
    "desc": {
        "title": "D. Color with Occurrences",
        "statement": "<p>You are given some text $$$t$$$ and a set of $$$n$$$ strings $$$s_1, s_2, \\dots, s_n$$$. </p><p>In one step, you can choose any occurrence of any string $$$s_i$$$ in the text $$$t$$$ and color the corresponding characters of the text in red. For example, if $$$t=\\texttt{bababa}$$$ and $$$s_1=\\texttt{ba}$$$, $$$s_2=\\texttt{aba}$$$, you can get $$$t=\\color{red}{\\texttt{ba}}\\texttt{baba}$$$, $$$t=\\texttt{b}\\color{red}{\\texttt{aba}}\\texttt{ba}$$$ or $$$t=\\texttt{bab}\\color{red}{\\texttt{aba}}$$$ in one step.</p><p>You want to color all the letters of the text $$$t$$$ in red. When you color a letter in red again, it stays red.</p><p>In the example above, three steps are enough:</p><ul> <li> Let's color $$$t[2 \\dots 4]=s_2=\\texttt{aba}$$$ in red, we get $$$t=\\texttt{b}\\color{red}{\\texttt{aba}}\\texttt{ba}$$$; </li><li> Let's color $$$t[1 \\dots 2]=s_1=\\texttt{ba}$$$ in red, we get $$$t=\\color{red}{\\texttt{baba}}\\texttt{ba}$$$; </li><li> Let's color $$$t[4 \\dots 6]=s_2=\\texttt{aba}$$$ in red, we get $$$t=\\color{red}{\\texttt{bababa}}$$$. </li></ul><p>Each string $$$s_i$$$ can be applied any number of times (or not at all). Occurrences for coloring can intersect arbitrarily.</p><p>Determine the minimum number of steps needed to color all letters $$$t$$$ in red and how to do it. If it is impossible to color all letters of the text $$$t$$$ in red, output <span class=\"tex-font-style-tt\">-1</span>.</p>",
        "inputSpecification": "<p>The first line of the input contains an integer $$$q$$$ ($$$1 \\le q \\le 100$$$)\u00a0\u2014the number of test cases in the test.</p><p>The descriptions of the test cases follow.</p><p>The first line of each test case contains the text $$$t$$$ ($$$1 \\le |t| \\le 100$$$), consisting only of lowercase Latin letters, where $$$|t|$$$ is the length of the text $$$t$$$.</p><p>The second line of each test case contains a single integer $$$n$$$ ($$$1 \\le n \\le 10$$$) \u2014 the number of strings in the set.</p><p>This is followed by $$$n$$$ lines, each containing a string $$$s_i$$$ ($$$1 \\le |s_i| \\le 10$$$) consisting only of lowercase Latin letters, where $$$|s_i|$$$\u00a0\u2014 the length of string $$$s_i$$$.</p>",
        "outputSpecification": "<p>For each test case, print the answer on a separate line.</p><p>If it is impossible to color all the letters of the text in red, print a single line containing the number <span class=\"tex-font-style-tt\">-1</span>.</p><p>Otherwise, on the first line, print the number $$$m$$$ \u2014 the minimum number of steps it will take to turn all the letters $$$t$$$ red.</p><p>Then in the next $$$m$$$ lines print pairs of indices: $$$w_j$$$ and $$$p_j$$$ ($$$1 \\le j \\le m$$$), which denote that the string with index $$$w_j$$$ was used as a substring to cover the occurrences starting in the text $$$t$$$ from position $$$p_j$$$. The pairs can be output in any order.</p><p>If there are several answers, output any of them.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">6</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">bababa</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">ba</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">aba</div><div class=\"test-example-line test-example-line-even test-example-line-2\">caba</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">bac</div><div class=\"test-example-line test-example-line-even test-example-line-2\">acab</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">abacabaca</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">aba</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">bac</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">aca</div><div class=\"test-example-line test-example-line-even test-example-line-4\">baca</div><div class=\"test-example-line test-example-line-even test-example-line-4\">3</div><div class=\"test-example-line test-example-line-even test-example-line-4\">a</div><div class=\"test-example-line test-example-line-even test-example-line-4\">c</div><div class=\"test-example-line test-example-line-even test-example-line-4\">b</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">codeforces</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">def</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">code</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">efo</div><div class=\"test-example-line test-example-line-odd test-example-line-5\">forces</div><div class=\"test-example-line test-example-line-even test-example-line-6\">aaaabbbbcccceeee</div><div class=\"test-example-line test-example-line-even test-example-line-6\">4</div><div class=\"test-example-line test-example-line-even test-example-line-6\">eeee</div><div class=\"test-example-line test-example-line-even test-example-line-6\">cccc</div><div class=\"test-example-line test-example-line-even test-example-line-6\">aaaa</div><div class=\"test-example-line test-example-line-even test-example-line-6\">bbbb</div>",
                "output": "\n3\n2 2\n1 1\n2 4\n-1\n4\n1 1\n2 6\n3 3\n3 7\n4\n3 1\n1 2\n2 3\n1 4\n2\n4 5\n2 1\n4\n3 1\n4 5\n2 9\n1 13"
            }
        ],
        "note": "<p>The first test case is explained in the problem statement.</p><p>In the second test case, it is impossible to color all the letters of the text in red.</p>"
    },
    "suggested_categories": [
        "string manipulation",
        "text processing",
        "pattern matching",
        "dynamic programming",
        "algorithms",
        "search algorithms",
        "combinatorial optimization",
        "graph theory",
        "backtracking",
        "optimization problems",
        "data structures",
        "sequence analysis",
        "pattern recognition",
        "computational complexity",
        "greedy algorithms",
        "parsing",
        "formal languages",
        "mathematical programming",
        "constraint satisfaction",
        "decision problems"
    ]
}