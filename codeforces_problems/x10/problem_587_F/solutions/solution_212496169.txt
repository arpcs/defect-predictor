{
    "id": 212496169,
    "contestId": 587,
    "creationTimeSeconds": 1688699789,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 587,
        "index": "F",
        "name": "Duff is Mad",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3000,
        "tags": [
            "data structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 587,
        "members": [
            {
                "handle": "Augury"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1444926600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 23449600,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ninline int read(){\r\n\tint ans=0;bool op=0;char ch=getchar();\r\n\twhile(ch<'0'||'9'<ch){if(ch=='-')op=1;ch=getchar();}\r\n\twhile('0'<=ch&&ch<='9'){ans=(ans<<1)+(ans<<3)+(ch^48);ch=getchar();}\r\n\tif(op)return -ans;\r\n\treturn ans;\r\n}\r\nconst int maxn=1e5+10;\r\nstruct Q{\r\n\tint k,l,r,ans;\r\n}qr[maxn];\r\nint B=400;\r\nint n,m;\r\nstring s[maxn];\r\nint trie[maxn][26],fail[maxn],node,pos[maxn];\r\nvector<int>tr[maxn];\r\nint dfn[maxn],hi[maxn],cd=0;\r\nvector<int>buc[maxn];\r\nstruct Blocked{\r\n\tint val[maxn];\r\n\tint bel[maxn];\r\n\tint l[400],r[400],tag[400];\r\n\tBlocked(){\r\n\t\tmemset(val,0,sizeof(val));\r\n\t\tmemset(tag,0,sizeof(tag));\r\n\t\tmemset(l,0x3f,sizeof(l));\r\n\t\tfor(int i=0;i<maxn;i++)bel[i]=i/B;\r\n\t\tfor(int i=0;i<maxn;i++)l[bel[i]]=min(l[bel[i]],i);\r\n\t\tfor(int i=0;i<maxn;i++)r[bel[i]]=i;\r\n\t}\r\n\tvoid add(int x,int v){\r\n\t\tfor(int i=x;i<=r[bel[x]];i++)val[i]+=v;\r\n\t\tfor(int i=bel[x]+1;i<=bel[n];i++)tag[i]+=v;\r\n\t}\r\n\tint query(int x){\r\n\t\treturn tag[bel[x]]+val[x];\r\n\t}\r\n}tot;\r\nvoid ins(int x){\r\n\tint now=0;\r\n\tstring c=s[x];\r\n\tfor(int i=0;i<(int)c.size();i++){\r\n\t\tif(!~trie[now][c[i]-'a'])trie[now][c[i]-'a']=++node;\r\n\t\tnow=trie[now][c[i]-'a'];\r\n\t}\r\n\tpos[x]=now;\r\n}\r\nvoid dfs(int now){\r\n\tdfn[now]=hi[now]=++cd;\r\n\tfor(int nxt:tr[now])dfs(nxt),hi[now]=hi[nxt];\r\n}\r\nvoid AC(){\r\n\tqueue<int>q;\r\n\tfail[0]=0;\r\n\tfor(int i=0;i<26;i++){\r\n\t\tif(~trie[0][i])fail[trie[0][i]]=0,q.push(trie[0][i]);\r\n\t\telse trie[0][i]=0;\r\n\t}\r\n\twhile(!q.empty()){\r\n\t\tint now=q.front();q.pop();\r\n\t\tfor(int i=0;i<26;i++){\r\n\t\t\tif(~trie[now][i])fail[trie[now][i]]=trie[fail[now]][i],q.push(trie[now][i]);\r\n\t\t\telse trie[now][i]=trie[fail[now]][i];\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=node;i++)tr[fail[i]].push_back(i);\r\n\tdfs(0);\r\n}\r\nint querystr(string c){\r\n\tint now=0,ans=0;\r\n\tans+=tot.query(dfn[0]);\r\n\tfor(int i=0;i<(int)c.size();i++){\r\n\t\tnow=trie[now][c[i]-'a'];\r\n\t\tans+=tot.query(dfn[now]);\r\n\t}\r\n\treturn ans;\r\n}\r\nvoid getans(){\r\n\tfor(int i=1;i<=n;i++){\r\n\t\ttot.add(dfn[pos[i]],1);\r\n\t\ttot.add(hi[pos[i]]+1,-1);\r\n\t\tfor(int j:buc[i]){\r\n\t\t\tif(i==qr[j].l-1)qr[j].ans-=querystr(s[qr[j].k]);\r\n\t\t\tif(i==qr[j].r)qr[j].ans+=querystr(s[qr[j].k]);\r\n\t\t}\r\n\t}\r\n}\r\nsigned main(){\r\n\tmemset(trie,-1,sizeof(trie));\r\n\tn=read(),m=read();\r\n\tB=sqrt(n);\r\n\tfor(int i=1;i<=n;i++)cin>>s[i];\r\n\tfor(int i=1;i<=n;i++)ins(i);\r\n\tAC();\r\n\tfor(int i=1;i<=m;i++){\r\n\t\tqr[i].l=read(),qr[i].r=read(),qr[i].k=read();\r\n\t\tbuc[qr[i].l-1].push_back(i);\r\n\t\tbuc[qr[i].r].push_back(i);\r\n\t}\r\n\tgetans();\r\n\tfor(int i=1;i<=m;i++)cout<<qr[i].ans<<'\\n';\r\n\treturn 0;\r\n}"
}