{
    "id": 221397305,
    "contestId": 587,
    "creationTimeSeconds": 1693537218,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 587,
        "index": "F",
        "name": "Duff is Mad",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 3000,
        "tags": [
            "data structures",
            "strings"
        ]
    },
    "author": {
        "contestId": 587,
        "members": [
            {
                "handle": "JR_wqx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1444926600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 87,
    "timeConsumedMillis": 1902,
    "memoryConsumedBytes": 77619200,
    "source": "#include<bits/stdc++.h>\r\n#pragma GCC target(\"avx\")\r\n#pragma GCC optimize(2)\r\n#pragma GCC optimize(3)\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"inline\")\r\n#pragma GCC optimize(\"-fgcse\")\r\n#pragma GCC optimize(\"-fgcse-lm\")\r\n#pragma GCC optimize(\"-fipa-sra\")\r\n#pragma GCC optimize(\"-ftree-pre\")\r\n#pragma GCC optimize(\"-ftree-vrp\")\r\n#pragma GCC optimize(\"-fpeephole2\")\r\n#pragma GCC optimize(\"-ffast-math\")\r\n#pragma GCC optimize(\"-fsched-spec\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"-falign-jumps\")\r\n#pragma GCC optimize(\"-falign-loops\")\r\n#pragma GCC optimize(\"-falign-labels\")\r\n#pragma GCC optimize(\"-fdevirtualize\")\r\n#pragma GCC optimize(\"-fcaller-saves\")\r\n#pragma GCC optimize(\"-fcrossjumping\")\r\n#pragma GCC optimize(\"-fthread-jumps\")\r\n#pragma GCC optimize(\"-funroll-loops\")\r\n#pragma GCC optimize(\"-fwhole-program\")\r\n#pragma GCC optimize(\"-freorder-blocks\")\r\n#pragma GCC optimize(\"-fschedule-insns\")\r\n#pragma GCC optimize(\"inline-functions\")\r\n#pragma GCC optimize(\"-ftree-tail-merge\")\r\n#pragma GCC optimize(\"-fschedule-insns2\")\r\n#pragma GCC optimize(\"-fstrict-aliasing\")\r\n#pragma GCC optimize(\"-fstrict-overflow\")\r\n#pragma GCC optimize(\"-falign-functions\")\r\n#pragma GCC optimize(\"-fcse-skip-blocks\")\r\n#pragma GCC optimize(\"-fcse-follow-jumps\")\r\n#pragma GCC optimize(\"-fsched-interblock\")\r\n#pragma GCC optimize(\"-fpartial-inlining\")\r\n#pragma GCC optimize(\"no-stack-protector\")\r\n#pragma GCC optimize(\"-freorder-functions\")\r\n#pragma GCC optimize(\"-findirect-inlining\")\r\n#pragma GCC optimize(\"-fhoist-adjacent-loads\")\r\n#pragma GCC optimize(\"-frerun-cse-after-loop\")\r\n#pragma GCC optimize(\"inline-small-functions\")\r\n#pragma GCC optimize(\"-finline-small-functions\")\r\n#pragma GCC optimize(\"-ftree-switch-conversion\")\r\n#pragma GCC optimize(\"-foptimize-sibling-calls\")\r\n#pragma GCC optimize(\"-fexpensive-optimizations\")\r\n#pragma GCC optimize(\"-funsafe-loop-optimizations\")\r\n#pragma GCC optimize(\"inline-functions-called-once\")\r\n#pragma GCC optimize(\"-fdelete-null-pointer-checks\")\r\nusing namespace std;\r\n#define ll long long\r\nconst int MAXN=2e5+10;\r\nbool Mbe; \r\nint n,T,B;//B=sqrt(n*log2(n))\r\nstring s[MAXN];\r\nint trie[MAXN][26],tot,cnt;\r\nstruct node{\r\n\tint sum,fail;\r\n}t[MAXN];\r\nint pos[MAXN];//\u8bb0\u5f55\u5355\u8bcdi\u7684\u672b\u5c3e\r\nint insert(string S){\r\n\tint len=S.length(),rot=0;\r\n\tfor(int i=0;i<len;i++){\r\n\t\tint c=S[i]-'a';\r\n\t\tif(!trie[rot][c])\r\n\t\t\ttrie[rot][c]=++tot;\r\n\t\trot=trie[rot][c];\r\n\t}\r\n\treturn rot;\r\n}\r\nstruct edge{\r\n    int nxt,to;\r\n}e[MAXN];\r\nint h[MAXN],tot1;\r\nint Len[MAXN];\r\nvoid ADD(int x,int y)\r\n{\r\n    e[++tot1]=(edge){h[x],y};\r\n    h[x]=tot1;\r\n}\r\nvoid build(){\r\n\tqueue<int> q;\r\n\tfor(int i=0;i<26;i++)\r\n\t\tif(trie[0][i])\r\n\t\t\tq.push(trie[0][i]);\r\n\twhile(!q.empty()){\r\n\t\tint u=q.front();\r\n\t\tq.pop();\r\n\t\tfor(int i=0;i<26;i++){\r\n\t\t\tint v=trie[u][i];\r\n\t\t\tif(v){\r\n\t\t\t\tt[v].fail=trie[t[u].fail][i];\r\n\t\t\t\tq.push(v);\r\n\t\t\t}\r\n\t\t\telse trie[u][i]=trie[t[u].fail][i];\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=tot;i++)\r\n        ADD(t[i].fail,i);\r\n}\r\nstruct Block1{\r\n\tint B,t[MAXN],c[MAXN];\r\n\tvoid clear(){\r\n\t\tmemset(t,0,sizeof(t));\r\n\t\tmemset(c,0,sizeof(c));\r\n\t}\r\n\tvoid add(int pos,int w){//O(sqrt(n))\u5e73\u8861\u590d\u6742\u5ea6 \r\n\t\twhile(pos%B!=1&&pos<=cnt) t[pos++]+=w;\r\n\t\tfor(int i=pos;i<=cnt;i+=B)\r\n\t\t\tc[(i-1)/B]+=w;\r\n\t}\r\n\tinline int query(int r){\r\n\t\tif(!r) return 0;\r\n\t\treturn t[r]+c[(r-1)/B];\r\n\t}\r\n}T1,T2;\r\nstruct mark{\r\n\tint dad,dep,maxson,siz;\r\n\tint top,dfn;\r\n}a[MAXN];\r\nstruct prob{\r\n\tint l,r,k;\r\n}temp[MAXN];\r\nvoid dfs1(int x,int fa,int dep){\r\n\ta[x].dad=fa,a[x].dep=dep;\r\n\ta[x].siz=1;\r\n\tint mx=0;\r\n\tfor(int i=h[x];i;i=e[i].nxt){\r\n        int v=e[i].to;\r\n\t\tdfs1(v,x,dep+1);\r\n\t\ta[x].siz+=a[v].siz;\r\n\t\tif(a[v].siz>mx){\r\n\t\t\tmx=a[v].siz;\r\n\t\t\ta[x].maxson=v;\r\n\t\t}\r\n\t}\r\n}\r\nvoid dfs2(int x,int top){\r\n\ta[x].top=top;\r\n\ta[x].dfn=++cnt;\r\n\tif(!a[x].maxson) return ;\r\n\tdfs2(a[x].maxson,top);\r\n\tfor(int i=h[x];i;i=e[i].nxt){\r\n        int v=e[i].to;\r\n\t\tif(v!=a[x].maxson) dfs2(v,v);\r\n\t}\r\n}\r\nvector<int> p[MAXN],q[MAXN];//\u6302\u5728\u4e0b\u6807\u4e0a\u7684\u8be2\u95ee \r\nmap<int,ll> ans[MAXN];//\u67d0\u4e2a\u5b57\u7b26\u4e32\u7684\u7b54\u6848 \r\ninline ll run(int x){\r\n\tint rot=0;\r\n    ll sum=0;\r\n\tfor(int i=0;i<Len[x];i++){\r\n\t\trot=trie[rot][s[x][i]-'a'];\r\n\t\tint pos=rot;\r\n\t\twhile(a[pos].top){\r\n\t\t\tsum+=T1.query(a[pos].dfn)-T1.query(a[a[pos].top].dfn-1);\r\n\t\t\tpos=a[a[pos].top].dad;\r\n\t\t}\r\n\t\tsum+=T1.query(a[pos].dfn);\r\n\t}\r\n\treturn sum;\r\n}\r\nvoid addtag(int x){\r\n\tint rot=0;\r\n\tfor(int i=0;i<Len[x];i++){\r\n\t\trot=trie[rot][s[x][i]-'a']; \r\n\t\tT2.add(a[rot].dfn,1);\r\n\t}\r\n}\r\nbool Med;\r\nsigned main(){\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0),cout.tie(0);\r\n\t//freopen(\"test.in\",\"r\",stdin);\r\n\t//fprintf(stderr,\"%.3lf MB\\n\",(&Mbe-&Med)/(1.0*1024*1024));\r\n\tcin>>n>>T;\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tcin>>s[i];\r\n        Len[i]=s[i].length();\r\n\t\tB=B+Len[i];\r\n\t\tpos[i]=insert(s[i]);\r\n\t}\r\n\tbuild();\r\n\tT1.B=T2.B=sqrt(tot);\r\n\tB=sqrt(B);\r\n\tdfs1(0,-1,1);\r\n\tdfs2(0,0);\r\n\tfor(int i=1;i<=T;i++){\r\n\t\tint l,r,k;\r\n\t\tcin>>l>>r>>k;\r\n\t\ttemp[i].l=l,temp[i].r=r,temp[i].k=k;\r\n\t\tif(Len[k]<=B){\r\n\t\t\tp[l-1].push_back(k);\r\n\t\t\tp[r].push_back(k);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tq[k].push_back(r);\r\n\t\t\tq[k].push_back(l-1);\r\n\t\t}\r\n\t} \r\n\t\r\n\tfor(int i=1;i<=n;i++){\r\n\t\tT1.add(a[pos[i]].dfn,1);\r\n\t\tfor(int v:p[i])\r\n\t\t\tans[v][i]=run(v);//\u67e5\u8be2v\u52300\u5728fail\u6811\u4e0a\u7684\u6743\u503c \r\n\t}\r\n\tfor(int i=1;i<=n;i++) if(Len[i]>B)\r\n    {\r\n\t\tsort(q[i].begin(),q[i].end());\r\n\t\tT2.clear();addtag(i);\r\n\t\tll sum=0,id=0;\r\n\t\tfor(int j=1;j<=n;j++){\r\n\t\t\tsum+=T2.query(a[pos[j]].dfn+a[pos[j]].siz-1)-T2.query(a[pos[j]].dfn-1);\r\n            int Size=q[i].size();\r\n\t\t\twhile(id<Size&&q[i][id]<j)\r\n\t\t\t\tid++;\r\n\t\t\tif(id<Size&&q[i][id]==j) ans[i][j]=sum;\r\n\t\t}\r\n\t}\r\n\tfor(int i=1;i<=T;i++){\r\n\t\tint l=temp[i].l,r=temp[i].r,k=temp[i].k;\r\n\t\tcout<<ans[k][r]-ans[k][l-1]<<'\\n';\r\n\t}\r\n\treturn 0;\r\n}"
}