{
    "id": 232027246,
    "contestId": 1385,
    "creationTimeSeconds": 1699512907,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1385,
        "index": "G",
        "name": "Columns Swaps",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "2-sat",
            "dfs and similar",
            "dsu",
            "graphs",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1385,
        "members": [
            {
                "handle": "TKXZ133"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1594996500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 420,
    "memoryConsumedBytes": 39014400,
    "source": "#include <algorithm>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <vector>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\nconst int N = 400400;\r\n#define inf 0x3f3f3f3f\r\n\r\nint T, n, in1;\r\nint fa[N];\r\n\r\nvector <int> p[N], q[N], pos[N], ans;\r\n\r\nint find(int x){\r\n    return fa[x] == x ? x : fa[x] = find(fa[x]);\r\n}\r\n\r\nvoid merge(int x, int y){\r\n    fa[find(x)] = find(y);\r\n}\r\n\r\nint main(){\r\n    // freopen(\"the.in\", \"r\", stdin);\r\n    // freopen(\"the.out\", \"w\", stdout);\r\n    scanf(\"%d\", &T);\r\n    while (T --) {\r\n        for (int i = 1; i <= 2 * n; i ++) \r\n            pos[i].clear(), p[i].clear(), q[i].clear();\r\n        ans.clear();\r\n        scanf(\"%d\", &n);\r\n        for (int i = 1; i <= 2 * n; i ++) fa[i] = i;\r\n        for (int i = 1; i <= n; i ++)\r\n            scanf(\"%d\", &in1), p[in1].push_back(i);\r\n        for (int i = 1; i <= n; i ++)\r\n            scanf(\"%d\", &in1), q[in1].push_back(i);\r\n        int flag = 0;\r\n        for (int i = 1; i <= n; i ++) {\r\n            if (p[i].size() + q[i].size() != 2) {flag = 1; break;}\r\n            if (p[i].size() * q[i].size() == 0) {\r\n                int x, y;\r\n                if (p[i].size() == 2) x = p[i][0], y = p[i][1];\r\n                if (q[i].size() == 2) x = q[i][0], y = q[i][1];\r\n                merge(x, y + n); merge(x + n, y);\r\n            }\r\n            else {\r\n                int x = p[i][0], y = q[i][0];\r\n                merge(x + n, y + n); merge(x, y);\r\n            }\r\n        }\r\n        if (flag == 1) {cout << \"-1\\n\"; continue;}\r\n        for (int i = 1; i <= n; i ++) pos[find(i)].push_back(i);\r\n        for (int i = 1; i <= n; i ++)   \r\n            if (pos[i].size() < pos[i + n].size())\r\n                for (auto it : pos[i]) ans.push_back(it);\r\n            else for (auto it : pos[i + n]) ans.push_back(it);\r\n        cout << ans.size() << '\\n';\r\n        for (auto it : ans) cout << it << ' '; \r\n        cout << '\\n';\r\n    }\r\n    return 0;\r\n}"
}