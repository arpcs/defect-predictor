{
    "id": 229074049,
    "contestId": 1385,
    "creationTimeSeconds": 1697897756,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1385,
        "index": "G",
        "name": "Columns Swaps",
        "type": "PROGRAMMING",
        "rating": 2300,
        "tags": [
            "2-sat",
            "dfs and similar",
            "dsu",
            "graphs",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1385,
        "members": [
            {
                "handle": "kurwa"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1594996500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 14540800,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nusing ld = long double;\r\nusing ull = unsigned long long;\r\n\r\nvector <int> g[500005];\r\nbool vis[500005];\r\nint comp[500005];\r\nvector <int> top_order;\r\n\r\nvoid top_sort(int v) {\r\n    vis[v] = true;\r\n    for (auto to : g[v]) {\r\n        if (!vis[to]) {\r\n            top_sort(to);\r\n        }\r\n    }\r\n    top_order.push_back(v);\r\n}\r\n\r\nvoid css(int v, int id) {\r\n    vis[v] = true;\r\n    comp[v] = id;\r\n    for (auto to : g[v]) {\r\n        if (!vis[to]) {\r\n            css(to, id);\r\n        }\r\n    }\r\n}\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n\r\n    for (int i = 0; i < 2 * n; i++) {\r\n        g[i].clear();\r\n        vis[i] = false;\r\n    }\r\n\r\n    vector <int> a(n), b(n);\r\n    vector <vector <int>> posA(n + 1), posB(n + 1);\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> a[i];\r\n        posA[a[i]].push_back(i);\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> b[i];\r\n        posB[b[i]].push_back(i);\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        if ((int)posA[i].size() + (int)posB[i].size() != 2) {\r\n            cout << \"-1\\n\";\r\n            return;\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if (!posA[b[i]].empty()) {\r\n            g[i].push_back(posA[b[i]][0]);\r\n        }\r\n        if (!posB[a[i]].empty()) {\r\n            g[i].push_back(posB[a[i]][0]);\r\n        }\r\n        if ((int)posA[a[i]].size() == 2) {\r\n            for (auto to : posA[a[i]]) {\r\n                if (to == i) continue;\r\n                g[i].push_back(to + n);\r\n                g[i + n].push_back(to);\r\n            }\r\n        }\r\n        if ((int)posB[b[i]].size() == 2) {\r\n            for (auto to : posB[b[i]]) {\r\n                if (to == i) continue;\r\n                g[i].push_back(to + n);\r\n                g[i + n].push_back(to);\r\n            }\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i < 2 * n; i++) {\r\n        if (!vis[i]) {\r\n            top_sort(i);\r\n        }\r\n    }\r\n\r\n    reverse(top_order.begin(), top_order.end());\r\n\r\n    for (int i = 0; i < 2 * n; i++) {\r\n        vis[i] = false;\r\n    }\r\n\r\n    int id = 0;\r\n\r\n    for (auto i : top_order) {\r\n        if (!vis[i]) {\r\n            css(i, id++);\r\n        }\r\n    }\r\n\r\n    top_order.clear();\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if (comp[i] == comp[i + n]) {\r\n            cout << \"-1\\n\";\r\n            return;\r\n        }\r\n    }\r\n\r\n    vector <int> ans;\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if (comp[i] < comp[i + n]) {\r\n            ans.push_back(i);\r\n        }\r\n    }\r\n\r\n    cout << (int)ans.size() << \"\\n\";\r\n    for (auto x : ans) {\r\n        cout << x + 1 << \" \";\r\n    }\r\n    cout << \"\\n\";\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int test;\r\n    cin >> test;\r\n\r\n    while (test--) {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}