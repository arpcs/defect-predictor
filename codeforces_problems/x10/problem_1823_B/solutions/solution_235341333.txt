{
    "id": 235341333,
    "contestId": 1823,
    "creationTimeSeconds": 1701503174,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1823,
        "index": "B",
        "name": "Sort with Step",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 900,
        "tags": [
            "brute force",
            "math",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1823,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1682606100
    },
    "programmingLanguage": "GNU C11",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <stdio.h>\n\nvoid printArray(int arr[], int n) {\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint canSortPermutation(int p[], int n, int k, int sorted_permutation[]) {\n    // \u6b65\u9aa41\uff1a\u68c0\u67e5\u662f\u5426\u5df2\u7ecf\u662f\u6309\u5347\u5e8f\u6392\u5217\n    int is_sorted = 1;\n    for (int i = 0; i < n; i++) {\n        if (p[i] != i + 1) {\n            is_sorted = 0;\n            break;\n        }\n    }\n\n    if (is_sorted) {\n        for (int i = 0; i < n; i++) {\n            sorted_permutation[i] = p[i];\n        }\n        return 1;\n    }\n\n    // \u6b65\u9aa42\uff1a\u5c1d\u8bd5\u4e00\u6b21\u521d\u6b65\u4ea4\u6362\n    for (int i = 0; i < n; i++) {\n        if (p[i] > i + 1) {\n            int j = i + k;\n            if (j < n && p[j] == i + 1) {\n                // \u627e\u5230\u53ef\u4ee5\u4ea4\u6362\u7684\u4f4d\u7f6e j\n                int temp = p[i];\n                p[i] = p[j];\n                p[j] = temp;\n\n                for (int i = 0; i < n; i++) {\n                    sorted_permutation[i] = p[i];\n                }\n                return 1;\n            }\n        }\n    }\n\n    // \u65e0\u6cd5\u901a\u8fc7\u4e00\u6b21\u521d\u6b65\u4ea4\u6362\u6392\u5e8f\n    return 0;\n}\n\nint main() {\n    int n, k;\n    printf(\"Enter the length of the permutation and k: \");\n    scanf(\"%d %d\", &n, &k);\n\n    int p[n];\n    printf(\"Enter the permutation: \");\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &p[i]);\n    }\n\n    int sorted_permutation[n];\n    int result = canSortPermutation(p, n, k, sorted_permutation);\n\n    if (result) {\n        printf(\"YES\\n\");\n        printf(\"Sorted permutation: \");\n        printArray(sorted_permutation, n);\n    } else {\n        printf(\"NO\\n\");\n    }\n\n    return 0;\n}\n\n   \t\t\t   \t\t\t    \t \t  \t \t   \t"
}