{
    "id": 231838633,
    "contestId": 768,
    "creationTimeSeconds": 1699382157,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 768,
        "index": "F",
        "name": "Barrels and boxes",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2300,
        "tags": [
            "brute force",
            "combinatorics",
            "math",
            "number theory",
            "probabilities"
        ]
    },
    "author": {
        "contestId": 768,
        "members": [
            {
                "handle": "kachhuaa"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1487606700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 72,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 819200,
    "source": "#include \"bits/stdc++.h\"\r\n\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nusing ld = long double;\r\ntemplate<class T> \r\nusing vec = vector<T>;\r\nusing vi = vec<int>;\r\nusing vl = vec<ll>;\r\nusing vd = vec<ld>;\r\nusing vvi = vec<vi>;\r\nusing vvl = vec<vl>;\r\nusing pi = pair<int, int>;\r\nusing pl = pair<ll, ll>;\r\nusing vpi = vec<pi>;\r\nusing vpl = vec<pl>;\r\ntemplate<class T> \r\nusing mxpq = priority_queue<T>;\r\ntemplate<class T> \r\nusing mnpq = priority_queue<T, vec<T>, greater<T>>;\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define acc accumulate\r\n\r\n#ifndef _COMBINATORICS_HPP_\r\n#define _COMBINATORICS_HPP_\r\n\r\nnamespace combinatorics {\r\n\r\n    // CONSTANTS\r\n    constexpr long long MOD1 = 1'000'000'007LL;\r\n    constexpr long long MOD2 = 998'244'353LL;\r\n\r\n    // BINARY EXPONENTIATION\r\n    // Source: https://cp-algorithms.com/algebra/binary-exp.html\r\n    long long power(long long a, long long p, long long M = MOD1) {\r\n        long long res = 1;\r\n        a %= M;\r\n        while (p) {\r\n            if (p & 1)\r\n                res = res * a % M;\r\n            a = a * a % M;\r\n            p >>= 1;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nusing combinatorics::power;\r\nusing combinatorics::MOD1;\r\nusing combinatorics::MOD2;\r\n\r\n#endif\r\n\r\n// #define MULTI_TESTS\r\n// #define FLOAT_PRECISION 13\r\n\r\n\r\n\r\nvoid solve(int testIdx) {\r\n    ll f, w, h;\r\n    cin >> f >> w >> h;\r\n\r\n    const ll mod = 1e9 + 7;\r\n    vl fac(100'001, 1);\r\n    for (int i = 1; i <= 100'000; ++i)\r\n        fac[i] = fac[i - 1] * i % mod;\r\n    auto ncr = [&] (ll n, ll r) {\r\n        if (n < r)\r\n            return 0LL;\r\n        return fac[n] * power(fac[r] * fac[n - r] % mod, mod - 2, mod) % mod;\r\n    };\r\n    auto snb = [&] (ll n, ll r) {\r\n        if (r == 0) {\r\n            if (n == 0)\r\n                return 1LL;\r\n            return 0LL;\r\n        }\r\n        if (n == 0)\r\n            return 1LL;\r\n        return ncr(n - 1, r - 1);\r\n    };\r\n    ll tot = 0, spec = 0;\r\n    for (ll ff = 0; ff <= f; ++ff) {\r\n        for (ll del = -1; del <= 1; ++del) {\r\n            ll ww = ff + del;\r\n            if (ww < 0 or ww > w)\r\n                continue;\r\n            tot = (tot + snb(f, ff) * snb(w, ww) % mod) % mod;\r\n            if (ff == ww)\r\n                tot = (tot + snb(f, ff) * snb(w, ww) % mod) % mod;\r\n            ll wext = w - h * ww;\r\n            if (wext < ww)\r\n                continue;\r\n            spec = (spec + snb(f, ff) * snb(wext, ww) % mod) % mod;\r\n            if (ff == ww)\r\n                spec = (spec + snb(f, ff) * snb(wext, ww) % mod) % mod;\r\n        }\r\n    }\r\n\r\n    cout << spec * power(tot, mod - 2, mod) % mod << '\\n';\r\n}\r\n\r\nvoid init() {\r\n    \r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cin.exceptions(cin.failbit);\r\n    \r\n    #ifdef FLOAT_PRECISION\r\n        cout << fixed;\r\n        cout.precision(FLOAT_PRECISION);\r\n    #endif\r\n    \r\n    init();\r\n    \r\n    int numTests = 1;\r\n    #ifdef MULTI_TESTS\r\n        cin >> numTests;\r\n    #endif\r\n    for (int testIdx = 1; testIdx <= numTests; testIdx++) {\r\n        solve(testIdx);\r\n    }\r\n    \r\n    return 0;\r\n}"
}