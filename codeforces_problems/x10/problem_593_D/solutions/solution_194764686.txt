{
    "id": 194764686,
    "contestId": 593,
    "creationTimeSeconds": 1677232297,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 593,
        "index": "D",
        "name": "Happy Tree Party",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2400,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "math",
            "trees"
        ]
    },
    "author": {
        "contestId": 593,
        "members": [
            {
                "handle": "andreystefanov"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1446655500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 22,
    "timeConsumedMillis": 764,
    "memoryConsumedBytes": 107827200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nlong long n,q,p = 0;\r\nvector<pair<long long,long long>> haha[200001];\r\nvector<long long> pos(200001);\r\nvector<long long> depth(200001);\r\nlong long bruh[200001][19];\r\nlong long banana[200001][19];\r\nvector<long long> wow(200001);\r\nvector<long long> s(200001);\r\nvector<long long> len(200001);\r\nvector<long long> top(200001);\r\nvector<pair<pair<long long,long long>,long long>> edge(0);\r\nconst long long p18 = 1000000000000000000;\r\n\r\nlong long mul(long long a, long long b) {\r\n    if(p18/b >= a) {\r\n        return a*b;\r\n    }\r\n    return p18;\r\n}\r\n\r\nvoid apple(long long a, long long b) {\r\n    banana[a][0] = b;\r\n    for(long long i = 1; i < 19; i++) {\r\n        a-=a%(1 << i);\r\n        if(a+(1 << i)-1 <= 200000) {\r\n            banana[a][i] = mul(banana[a][i-1],banana[a+(1 << (i-1))][i-1]);\r\n        }\r\n    }\r\n}\r\n\r\nlong long pear(long long l, long long r) {\r\n    long long y = 0,big = 1,al = l,ar = r;\r\n    while(l <= r) {\r\n        if(l%(1 << y) == 0 && l%(1 << (y+1)) != 0 && l+(1 << y)-1 <= ar) {\r\n            big = mul(big,banana[l][y]);\r\n            l+=(1 << y);\r\n        }\r\n        if(r < l) {\r\n            break;\r\n        }\r\n        if((r+1)%(1 << y) == 0 && (r+1)%(1 << (y+1)) != 0 && r-(1 << y)+1 >= al) {\r\n            big = mul(big,banana[r-(1 << y)+1][y]);\r\n            r-=(1 << y);\r\n        }\r\n        y++;\r\n    }\r\n    return big;\r\n}\r\n\r\nlong long dfs(long long a, long long t, long long d) {\r\n    long long sb = 1;\r\n    bruh[a][0] = t;\r\n    depth[a] = d;\r\n    for(long long i = 0; i < haha[a].size(); i++) {\r\n        if(haha[a][i].first != t) {\r\n            sb+=dfs(haha[a][i].first,a,d+1);\r\n        }\r\n    }\r\n    s[a] = sb;\r\n    return sb;\r\n}\r\n\r\nvoid dude(long long a, long long t, long long d, long long z) {\r\n    banana[p][0] = wow[a];\r\n    pos[a] = p;\r\n    p++;\r\n    len[a] = d;\r\n    top[a] = z;\r\n    long long big = 0,y = -1;\r\n    for(pair<long long,long long> v: haha[a]) {\r\n        if(v.first != t && s[v.first] > big) {\r\n            big = s[v.first];\r\n            y = v.first;\r\n        }\r\n    }\r\n    if(y != -1) {\r\n        dude(y,a,d+1,z);\r\n        for(pair<long long,long long> v: haha[a]) {\r\n            if(v.first != t && v.first != y) {\r\n                dude(v.first,a,1,a);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nlong long calc(long long a, long long b) {\r\n    long long big = 1;\r\n    while(b > 0) {\r\n        if(len[a] <= b) {\r\n            big = mul(big,pear(pos[a]-len[a]+1,pos[a]));\r\n            b-=len[a];\r\n            a = top[a];\r\n        }\r\n        else {\r\n            big = mul(big,pear(pos[a]-b+1,pos[a]));\r\n            b = 0;\r\n        }\r\n    }\r\n    return big;\r\n}\r\n\r\nlong long lca(long long a, long long b) {\r\n    if(depth[a] > depth[b]) {\r\n        swap(a,b);\r\n    }\r\n    for(long long i = 18; i >= 0; i--) {\r\n        if(depth[b]-depth[a] >= (1 << i)) {\r\n            b = bruh[b][i];\r\n        }\r\n    }\r\n    if(a == b) {\r\n        return a;\r\n    }\r\n    for(long long i = 18; i >= 0; i--) {\r\n        if(depth[a] >= (1 << i) && bruh[a][i] != bruh[b][i]) {\r\n            a = bruh[a][i];\r\n            b = bruh[b][i];\r\n        }\r\n    }\r\n    return bruh[a][0];\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    for(long long i = 0; i < 200001; i++) {\r\n        bruh[i][0] = -1;\r\n        banana[i][0] = -1;\r\n    }\r\n    cin >> n >> q;\r\n    long long a,b,c,d,y;\r\n    for(long long i = 0; i < n-1; i++) {\r\n        cin >> a >> b >> c;\r\n        edge.push_back({{a,b},c});\r\n        haha[a].push_back({b,c});\r\n        haha[b].push_back({a,c});\r\n    }\r\n    dfs(1,-1,0);\r\n    wow[1] = c;\r\n    for(long long i = 0; i < n-1; i++) {\r\n        a = edge[i].first.first;\r\n        b = edge[i].first.second;\r\n        c = edge[i].second;\r\n        if(depth[a] < depth[b]) {\r\n            swap(b,a);\r\n        }\r\n        wow[a] = c;\r\n        edge[i] = {{a,b},c};\r\n    }\r\n    dude(1,-1,1,-1);\r\n    for(long long i = 1; i < 19; i++) {\r\n        for(long long j = 1; j < 200001; j++) {\r\n            if(bruh[j][i-1] == -1) {\r\n                bruh[j][i] = -1;\r\n            }\r\n            else {\r\n                bruh[j][i] = bruh[bruh[j][i-1]][i-1];\r\n            }\r\n        }\r\n    }\r\n    for(long long i = 1; i < 19; i++) {\r\n        for(long long j = 0; j < 200001-(1 << i)+1; j+=(1 << i)) {\r\n            banana[j][i] = mul(banana[j][i-1],banana[j+(1 << (i-1))][i-1]);\r\n        }\r\n    }\r\n    for(long long i = 0; i < q; i++) {\r\n        cin >> c;\r\n        if(c == 2) {\r\n            cin >> a >> b;\r\n            a = edge[a-1].first.first;\r\n            apple(pos[a],b);\r\n        }\r\n        else {\r\n            cin >> a >> b >> y;\r\n            d = lca(a,b);\r\n            cout << y/mul(calc(a,depth[a]-depth[d]),calc(b,depth[b]-depth[d])) << \"\\n\";\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}