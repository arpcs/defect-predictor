{
    "id": 228881449,
    "contestId": 1610,
    "creationTimeSeconds": 1697782231,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1610,
        "index": "E",
        "name": "AmShZ and G.O.A.T.",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1610,
        "members": [
            {
                "handle": "ethankim8683"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1637678100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 149094400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nusing I=int;\r\nusing Lli=long long int;\r\nconst I N=2e5;\r\nconst I L=45;\r\nconst Lli MAX=1e18;\r\nLli a_arr[N];\r\nLli segs[L+1][2*N];\r\nI n;\r\nvoid upd(I t,I l,I r,Lli val){\r\n  for(l+=n,r+=n;l<r;l>>=1,r>>=1){\r\n    if(l&1)segs[t][l]=min(segs[t][l],val),l++;\r\n    if(r&1)r--,segs[t][r]=min(segs[t][r],val);\r\n  }\r\n}\r\nLli qry(I t,I i){\r\n  Lli res=MAX;\r\n  for(i+=n;i>0;i>>=1)res=min(res,segs[t][i]);\r\n  return res;\r\n}\r\nI main(){\r\n  cin.tie(0)->sync_with_stdio(0);\r\n  I t;cin>>t;\r\n  while(t--){\r\n    cin>>n;\r\n    for(I i=0;i<n;i++)cin>>a_arr[i];\r\n    for(I i=2;i<=L;i++)fill_n(segs[i],2*n,MAX);\r\n    for(I i=0;i<n;i++)segs[1][i+n]=-a_arr[i];\r\n    I res=0;\r\n    for(I i=0;i<n;i++)for(I j=1;j<=L;j++){\r\n      Lli dif=qry(j,i);\r\n      if(dif==MAX)continue;\r\n      dif+=a_arr[i],res=max(res,j);\r\n      I k=lower_bound(a_arr+i+1,a_arr+n,a_arr[i]+dif)-a_arr;\r\n      if(k<n)upd(j+1,k,n,-a_arr[i]);\r\n    }\r\n    printf(\"%i\\n\",n-res);\r\n  }\r\n}\r\n/*\r\nany triple whose median is greater than its mean is a terrible subsequence\r\n\r\nfurthermore, all terrible subsequences must contain such a triple, as taking\r\nthe at least two elements greater than the average and the at least one\r\nelement element less than the average produces one such triple triple\r\n\r\nfor no such triples to exist, each successive element must have a difference\r\nno less than the difference between the first and previous element as a triple\r\ncould otherwise be formed between those elements and the element to be added\r\n\r\nthis means that, excluding adjacent elements with difference 0, subsequences\r\ncannot exceed length 44 as the 45th Fibonacci number is greater than 1e9\r\n\r\nthus, we can use dynamic programming to find the maximum length good\r\nsubsequence\r\n*/"
}