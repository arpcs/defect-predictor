{
    "id": 216379707,
    "contestId": 964,
    "creationTimeSeconds": 1690677449,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 964,
        "index": "B",
        "name": "Messages",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "math"
        ]
    },
    "author": {
        "contestId": 964,
        "members": [
            {
                "handle": "botao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1523973900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "//\r\n// Created by bozh on 6/10/2023.\r\n//\r\n\r\n#include <bits/stdc++.h>\r\n#include <cmath>\r\n#include <limits.h>\r\n#include <algorithm>\r\n#include <sstream>\r\nusing namespace std;\r\n\r\ntypedef long long int ll;\r\n\r\nbool isPrime(int n){\r\n    for (int i = 2; i * i <= n; ++i) {\r\n        if(n % i == 0) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nclass Compare {\r\npublic:\r\n    bool operator()(pair<int,int> below, pair<int,int> above)\r\n    {\r\n        return greater<int>()(below.second, above.second);\r\n    }\r\n};\r\nint dirs[4][2] = {{0,1},{0,-1},{1,0},{-1,0}};\r\n\r\n\r\nvector<int> factorial(int n){\r\n    vector<int> ret;\r\n    for (int i = 2; i * i <= n; ++i) {\r\n        while (n % i == 0){\r\n            ret.push_back(i);\r\n            n /= i;\r\n        }\r\n    }\r\n    if(n > 1) ret.push_back(n);\r\n    return ret;\r\n}\r\n\r\nbool isPalindrome(string str){\r\n    int n = str.length();\r\n    for (int i = 0; i < n / 2; ++i) {\r\n        if(str[i] != str[n - i - 1]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvoid dfs_denerate_permutation(vector<vector<int>>& ret, vector<int> cur, int idx,int n,bool visited[]){\r\n    if(idx == n){\r\n        ret.push_back(cur);\r\n        return;\r\n    }\r\n    for (int i = 0; i < n; ++i) {\r\n        if(!visited[i]){\r\n            visited[i] = true;\r\n            cur[idx] = i;\r\n            dfs_denerate_permutation(ret, cur, idx + 1, n, visited);\r\n            visited[i] = false;\r\n        }\r\n    }\r\n}\r\n\r\nbool isCovered(int x,int y,int x1,int y1, int r){\r\n    return (x - x1) * (x - x1) + (y - y1) * (y - y1) <= r * r;\r\n}\r\n\r\nbool isOne(string bin){\r\n    return bin.length() == 1 && bin[0] == '1';\r\n}\r\n\r\nint main(){\r\n#ifdef LOCAL_DEBUG\r\n    freopen(\"debug.in\", \"r\", stdin);\r\n    freopen(\"debug.out\", \"w\", stdout);\r\n#endif\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n\r\n    int tc = 1;\r\n    //scanf(\"%d\", &tc);\r\n    for (int t = 0;t < tc;t++) {\r\n        int n,a,b,c,d;\r\n        scanf(\"%d %d %d %d %d\", &n,&a, &b, &c, &d);\r\n        int sum = a * n;\r\n        for (int i = 0; i < n; ++i) {\r\n            int cur = 0;\r\n            scanf(\"%d\", &cur);\r\n            if(b < c){\r\n                sum += (c - b) * (n - cur);\r\n            }\r\n        }\r\n        printf(\"%d\\n\", sum);\r\n        printf(\"\\n\");\r\n    }\r\n\r\n\r\n    return 0;\r\n}\r\n\r\n"
}