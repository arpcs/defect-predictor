{
    "id": 198284459,
    "contestId": 107,
    "creationTimeSeconds": 1679260725,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 107,
        "index": "A",
        "name": "Dorm Water Supply",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1400,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 107,
        "members": [
            {
                "handle": "bkifhr7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1314111600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<iostream>\n#include<string>\n#include<vector>\n#include<queue>\n#include<stack>\n#include<set>\n#include<unordered_set>\n#include<map>\n#include<algorithm>\n#include<cmath>\n#include<math.h>\n#include <iomanip> \n#include <numeric>\n\n\n\n#define hilight(x) std::cout << \"==========(\" << (x) << \")==========\\n\"\n#define line(x) std::cout << x << \"\\n\"\n#define ss(x) std::cout << x << \" \"\n#define Temp(x) ll x; cin >> x\n#define VI(x) vector<int> x\n#define VL(x) vector<ll> x\ntypedef long long ll;\n\nusing namespace std;\n\nclass house\n{\npublic:\n    int incoming = 0;\n    int inDiameter = 1000005;\n    int outgoing = 0;\n    int outDiameter = 1000005;\n\n    void connect(house& h, int d, int fromNum, int toNum)\n    {\n        this->outDiameter = d;\n        this->outgoing = toNum;\n        h.inDiameter = d;\n        h.incoming = fromNum;        \n    }\n};\n\nhouse graph[1005];\nvoid resetVisit(int visited[],int n)\n{\n    for (int i = 0; i < n; i++)\n    {\n        visited[i] = 0;\n    }\n}\nint mx = 0;\nint valMx = 0;\nint minDim = 1000005;\nvoid BFS(int s, int visited[], queue<int> &q, bool out)\n{\n    int x;\n\n    if(out)\n        x = graph[s].outgoing;\n    else\n        x = graph[s].incoming;\n    minDim = min(minDim, min(graph[s].outDiameter, graph[s].inDiameter));\n    if ( x != 0 && !visited[x])\n    {\n        visited[x] = visited[s]+1;\n        if (visited[s] + 1 > valMx)\n        {\n            mx = x;\n            valMx = visited[s] + 1;\n            q.push(x);\n        }\n    }\n    q.pop();\n    if (!q.empty())\n    {\n        BFS(q.front(),visited,q,out);\n    }\n}\nvoid sol()\n{\n    Temp(n);\n    Temp(m);\n    for (int i = 0; i < m; i++)\n    {\n        Temp(a);\n        Temp(b);\n        Temp(d);\n        graph[a].connect(graph[b], d, a, b);\n    }\n    \n    int visited[1005] = { 0 };\n    queue<int> q;\n    \n    int cnt = 0;\n    vector<vector<int>> ans;\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (!visited[i])\n        {\n            minDim = 1000005;\n\n            int vis[1005] = { 0 };\n            vis[i] = 1;\n            q.push(i);\n            mx = i;\n            valMx = 1;\n            BFS(i, vis, q, 1);\n\n            visited[mx] = 1;\n            q.push(mx);\n            int start = mx;\n            valMx = 1;\n            BFS(start, visited, q, 0);\n            int end = mx;\n\n            if ((graph[start].incoming && graph[start].outgoing) || (!graph[start].incoming && !graph[start].outgoing))\n            {\n                continue;\n            }\n            else if (graph[start].incoming)\n            {\n                swap(start, end);\n            }\n            cnt++;\n            vector<int> v;\n            v.push_back(start);\n            v.push_back(end);\n            v.push_back(minDim);\n            ans.push_back(v);\n        }\n    }\n    \n    line(cnt);\n    \n    sort(ans.begin(), ans.end());\n\n    for (vector<int> v : ans)\n    {\n        ss(v[0]);\n        ss(v[1]);\n        line(v[2]);\n    }\n}\n\nint main()\n{\n    //freopen(\"input.txt\", \"rt\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n    ios_base::sync_with_stdio(false); cin.tie(0);\n    int t = 1;\n    //cin >> t;\n    while (t--)\n    {\n        sol();\n    }\n    return 0;\n}\n\t \t\t \t      \t\t\t  \t  \t\t \t   \t\t\t"
}