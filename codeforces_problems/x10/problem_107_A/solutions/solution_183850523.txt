{
    "id": 183850523,
    "contestId": 107,
    "creationTimeSeconds": 1670170118,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 107,
        "index": "A",
        "name": "Dorm Water Supply",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1400,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 107,
        "members": [
            {
                "handle": "Escape"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1314111600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\n\n#define lp(moh,k,n) for (long long moh=k ; moh<n ; moh++)\n#define lp0(moh,n) for(long long moh=0;moh<n;moh++)\n\n#define ll long long\n#define mxint INT_MAX\n#define mnint INT_MIN\n#define it(itr) map<int,int>::iterator itr\n#define stp(n) fixed<<setprecision(n)\n// vector<vector<int>>matrix(n,vector<int>(m));\nusing namespace std;\nvoid flash(){\n    cin.tie(0);\n    cin.sync_with_stdio(0);\n    cout.tie(0);\n    cout.sync_with_stdio(0);\n}\n//------------------------------\nvector<vector<int>>adj(2000);\nbool vis[2000],point[2000]; //To determine the level of each node\nmap<pair<int,int>,int>mp;\nvector<vector<int>>vt;\nvoid bfs(int s) {\n    queue <int> q;\n    q.push(s);\n    vis[ s ] = true;\n    int minDiam=INT_MAX,p;\n    while(!q.empty())\n    {\n        p = q.front();\n        q.pop();\n        for(int i = 0;i < adj[ p ].size() ; i++)\n        {\n            if(vis[ adj[ p ][ i ] ] == false)\n            {\n                q.push(adj[ p ][ i ]);\n                vis[ adj[ p ][ i ] ] = true;\n                minDiam=min(minDiam,mp[{p,adj[ p ][ i ]}]);\n            }\n        }\n    }\n\n    if(mp[{p,s}]>0)return;\n    vt.push_back({s,p,minDiam});\n}\nvoid solve(){\n int n,p,a,b,di;\n cin>>n>>p;\n\n lp0(i,p){\n     cin>>a>>b>>di;\n     adj[a].push_back(b);\n    // adj[b].push_back(a);\n     mp[{a,b}]=di;\n    // mp[{b,a}]=di;\n    point[b]=1;\n }\n    if(p==0||n-p==0){\n        cout<<0;\n        return;\n    }\n\n lp(i,1,n+1)\n     if(adj[i].size()==1 && !vis[i] && !point[i])\n         bfs(i);\n cout<<vt.size()<<'\\n';\n lp0(i,vt.size())\n  cout<<vt[i][0]<<\" \"<<vt[i][1]<<\" \"<<vt[i][2]<<'\\n';\n}\nint main() {\n/*freopen(\"input.txt\",\"r\",stdin);\n    freopen(\"output.txt\",\"w\",stdout);*/\n    flash();\n    int t=1;\n//cin>>t;\n    while (t--){\n        solve();\n    }\n\n}\n//-----------------------------"
}