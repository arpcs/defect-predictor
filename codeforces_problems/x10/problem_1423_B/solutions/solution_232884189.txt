{
    "id": 232884189,
    "contestId": 1423,
    "creationTimeSeconds": 1700066728,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1423,
        "index": "B",
        "name": "Valuable Paper",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "flows",
            "graph matchings",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1423,
        "members": [
            {
                "handle": "leifangyuyy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601903100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// generated by GPT4 2023-11-16 00:44:56\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MAXN = 1e4 + 5;\nconst long long INF = 1e18;\nint N, M;\nvector<pair<int, int>> g[MAXN];\nlong long dist[MAXN][MAXN], match[MAXN], d[MAXN];\nbool used[MAXN], vis[MAXN];\npriority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;\n\nbool bfs() {\n    fill(d + 1, d + N + 1, INF);\n    d[0] = 0;\n    pq.push({0, 0});\n    while (!pq.empty()) {\n        int a = pq.top().second; pq.pop();\n        vis[a] = false;\n        for (auto &e : g[a]) {\n            int b = e.first, w = e.second;\n            if (d[b] > d[a] + w) {\n                d[b] = d[a] + w;\n                if (!vis[b]) {\n                    vis[b] = true;\n                    pq.push({d[b], b});\n                }\n            }\n        }\n    }\n    return d[0] < INF;\n}\n\nbool dfs(int a) {\n    used[a] = true;\n    for (auto &e : g[a]) {\n        int b = e.first, w = e.second, &m = match[b];\n        if (m == -1 || (!used[m] && d[m] == d[a] + w && dfs(m))) {\n            m = a;\n            return true;\n        }\n    }\n    return false;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cin >> N >> M;\n    for (int i = 1; i <= M; i++) {\n        int u, v, w;\n        cin >> u >> v >> w;\n        dist[u][v] = min(dist[u][v], (long long)w);\n    }\n    for (int i = 1; i <= N; i++)\n        for (int j = 1; j <= N; j++)\n            if (dist[i][j] < INF)\n                g[i].push_back({j + N, dist[i][j]});\n    fill(match + 1, match + 2 * N + 1, -1);\n    while (bfs()) {\n        fill(used + 1, used + N + 1, false);\n        for (int i = 1; i <= N; i++)\n            if (!used[i] && dfs(i))\n                break;\n    }\n    long long ans = 0;\n    for (int i = 1; i <= N; i++)\n        if (match[i + N] != -1)\n            ans = max(ans, dist[match[i + N]][i]);\n    if (ans == 0)\n        cout << -1 << '\\n';\n    else\n        cout << ans << '\\n';\n    return 0;\n}\n"
}