{
    "id": 234351938,
    "contestId": 1423,
    "creationTimeSeconds": 1700972386,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1423,
        "index": "B",
        "name": "Valuable Paper",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "flows",
            "graph matchings",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1423,
        "members": [
            {
                "handle": "lwh_lwh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601903100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 409600,
    "source": "// generated by GPT4 2023-11-26 12:19:42\r\n#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <queue>\r\n\r\n#define MAXN 10005\r\n#define INF 1e9\r\n#define pii pair<int, int>\r\n#define fi first\r\n#define se second\r\nusing namespace std;\r\n\r\nvector<pii> adj[MAXN];\r\nint dist[MAXN], match[MAXN], N, M, U[MAXN], V[MAXN], D[MAXN];\r\nbool visited[MAXN];\r\n\r\nbool bfs() {\r\n    fill(dist, dist + N + 1, INF);\r\n    queue<int> Q;\r\n    for (int u = 1; u <= N; u++)\r\n        if (!match[u]) {\r\n            dist[u] = 0;\r\n            Q.push(u);\r\n        }\r\n    while (!Q.empty()) {\r\n        int u = Q.front(); Q.pop();\r\n        if (!u) continue;\r\n        for (pii x: adj[u]) {\r\n            int v = x.fi, w = x.se;\r\n            if (dist[match[v]] > dist[u] + 1) {\r\n                dist[match[v]] = dist[u] + 1;\r\n                Q.push(match[v]);\r\n            }\r\n        }\r\n    }\r\n    return dist[0] != INF;\r\n}\r\n\r\nbool dfs(int u) {\r\n    if (!u) return true;\r\n    for (pii x: adj[u]) {\r\n        int v = x.fi, w = x.se;\r\n        if (dist[match[v]] == dist[u] + 1 && dfs(match[v])) {\r\n            match[u] = v;\r\n            match[v] = u;\r\n            return true;\r\n        }\r\n    }\r\n    dist[u] = INF;\r\n    return false;\r\n}\r\n\r\nint solve(int mid) {\r\n    fill(match, match + 2 * N + 2, 0);\r\n    for (int i = 1; i <= N; i++) adj[i].clear();\r\n    for (int i = 1; i <= M; i++)\r\n        if (D[i] <= mid) {\r\n            adj[U[i]].push_back({N + V[i], D[i]});\r\n            adj[N + V[i]].push_back({U[i], D[i]});\r\n        }\r\n    int cnt = 0;\r\n    while (bfs())\r\n        for (int u = 1; u <= N; u++)\r\n            if (!match[u] && dfs(u)) cnt++;\r\n    return cnt;\r\n}\r\n\r\nint main() {\r\n    cin >> N >> M;\r\n    for (int i = 1; i <= M; i++) cin >> U[i] >> V[i] >> D[i];\r\n    int l = 1, r = INF, ans = -1;\r\n    while (l <= r) {\r\n        int mid = l + (r - l) / 2;\r\n        if (solve(mid) == N) {\r\n            r = mid - 1;\r\n            ans = mid;\r\n        }\r\n        else l = mid + 1;\r\n    }\r\n    cout << ans << \"\\n\";\r\n}\r\n"
}