{
    "id": 209623067,
    "contestId": 1423,
    "creationTimeSeconds": 1686714107,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1423,
        "index": "B",
        "name": "Valuable Paper",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "flows",
            "graph matchings",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1423,
        "members": [
            {
                "handle": "Skywk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601903100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 2150400,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nconst int INF = 1e9;\r\nconst int MAXN = 1e4;\r\n\r\nstruct bipartite{\r\n\tbipartite() : U(0), V(0), NIL(0){}\r\n\tbipartite(int U, int V) : U(U), V(V), NIL(0){}\r\n\tint U, V;\r\n\tint pairU[MAXN+1], pairV[MAXN+1], dist[MAXN+1];\r\n\tvector<pair<int, int>> edges[MAXN+1];\r\n\tint NIL;\r\n\tint max_matching;\r\n\tint limit_cost;\r\n\tvoid add_edge(int u, int v, int w){\r\n\t\tedges[u].push_back({v, w});\r\n\t}\r\n\tbool bfs(){\r\n\t\tqueue<int> q;\r\n\t\tdist[NIL] = INF;\r\n\t\tfor(int u=1; u<=U; u++){\r\n\t\t\tif(pairU[u] == NIL){\r\n\t\t\t\tdist[u] = 0;\r\n\t\t\t\tq.push(u);\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tdist[u] = INF;\r\n\t\t\t}\r\n\t\t}\r\n\t\twhile(!q.empty()){\r\n\t\t\tauto u = q.front();\r\n\t\t\tq.pop();\r\n\r\n\t\t\tif(u != NIL){\r\n\t\t\t\tfor(auto [v, w] : edges[u]){\r\n\t\t\t\t\tif(w > limit_cost) continue;\r\n\t\t\t\t\tif(dist[pairV[v]] == INF){\r\n\t\t\t\t\t\tdist[pairV[v]] = dist[u] + 1;\r\n\t\t\t\t\t\tq.push(pairV[v]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn dist[NIL] != INF;\r\n\t}\r\n\tbool dfs(int u){\r\n\t\tif(u == NIL) return true;\r\n\t\tfor(auto [v, w] : edges[u]){\r\n\t\t\tif(w > limit_cost) continue;\r\n\t\t\tif(dist[pairV[v]] == dist[u] + 1 || pairV[v] == NIL){\r\n\t\t\t\tif(dfs(pairV[v])){\r\n\t\t\t\t\tpairU[u] = v;\r\n\t\t\t\t\tpairV[v] = u;\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tdist[u] = INF;\r\n\t\treturn false;\r\n\t}\r\n\tvoid matching(int lmt){\r\n\t\tlimit_cost = lmt;\r\n\t\tmax_matching = 0;\r\n\t\tfill(pairU + 1, pairU + U + 1, NIL);\r\n\t\tfill(pairV + 1, pairV + V + 1, NIL);\r\n\t\twhile(bfs()){\r\n\t\t\tfor(int u=1; u<=U; u++){\r\n\t\t\t\tif(pairU[u] == NIL && dfs(u))\r\n\t\t\t\t\tmax_matching++;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nbipartite graph;\r\n\r\nint main(){\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie(0); cout.tie(0);\r\n\r\n\tint N, M;\r\n\tcin>> N>> M;\r\n\r\n\tgraph.U = graph.V = N;\r\n\tfor(int i=0; i<M; i++){\r\n\t\tint u, v, w;\r\n\t\tcin>> u>> v>> w;\r\n\t\tgraph.add_edge(u, v, w);\r\n\t}\r\n\tgraph.matching(INF);\r\n\tif(graph.max_matching < N){\r\n\t\tcout<< -1;\r\n\t\treturn 0;\r\n\t}\r\n\tint l = 0, r = 1e9;\r\n\twhile(l < r){\r\n\t\tint mit = (l + r) >> 1;\r\n\t\tgraph.matching(mit);\r\n\t\tif(graph.max_matching == N){\r\n\t\t\tr = mit;\r\n\t\t}\r\n\t\telse{\r\n\t\t\tl = mit + 1;\r\n\t\t}\r\n\t}\r\n\tcout<< l;\r\n\treturn 0;\r\n}"
}