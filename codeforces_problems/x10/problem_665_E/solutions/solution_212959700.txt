{
    "id": 212959700,
    "contestId": 665,
    "creationTimeSeconds": 1688902993,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 665,
        "index": "E",
        "name": "Beautiful Subarrays",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "divide and conquer",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 665,
        "members": [
            {
                "handle": "IPRIT"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461164400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 1793,
    "memoryConsumedBytes": 277811200,
    "source": "#include <bits/stdc++.h>\n#define all(a) a.begin(), a.end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define size(a) (int)a.size()\n#define clr(arr) memset(arr, 0, sizeof(arr));\nusing namespace std;\nusing ll = long long;\nusing pi = pair<int, int>;\n\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a && (a = b, true); }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b && (a = b, true); }\n\nstruct Node {\n    int sz = 0;\n    int is_terminal = 0;\n    Node *nxt[2];\n};\n\nconst int BITS = 31;\nNode *root = new Node();\n\nvoid add(int num) {\n    Node *cur = root;\n    cur->sz++;\n    for (int i = BITS; i >= 0; --i) {\n        int bit = ((num & (1 << i)) != 0);\n        if (!cur->nxt[bit]) {\n            cur->nxt[bit] = new Node();\n        }\n        cur = cur->nxt[bit];\n        cur->sz++;\n    }\n    cur->is_terminal++;\n}\n\nll greater_than(int p, int k) {\n    ll tot = 0;\n    Node *cur = root;\n    for (int i = BITS; i >= 0; --i) {\n        int bit = ((p & (1 << i)) != 0);\n        int ki = ((k & (1 << i)) != 0);\n        if (bit == 0) {\n            if (ki == 0) {\n                tot += (!cur->nxt[1]) ? 0 : cur->nxt[1]->sz;\n                if (!cur->nxt[0]) return tot;\n                cur = cur->nxt[0];\n            } else if (ki == 1) {\n                if (!cur->nxt[1]) return tot;\n                cur = cur->nxt[1];\n            }\n        } else if (bit == 1) {\n            if (ki == 1) {\n                if (!cur->nxt[0]) return tot;\n                cur = cur->nxt[0];\n            } else if (ki == 0) {\n                tot += (!cur->nxt[0]) ? 0 : cur->nxt[0]->sz;\n                if (!cur->nxt[1]) return tot;\n                cur = cur->nxt[1];\n            }\n        }\n    }\n    return tot;\n}\n\nll equals_to(int num) {\n    Node *cur = root;\n    for (int i = BITS; i >= 0; --i) {\n        int bit = ((num & (1 << i)) != 0);\n        if (!cur->nxt[bit])\n            return 0;\n        cur = cur->nxt[bit];\n    }\n    return cur->is_terminal;\n}\n\nvoid solution() {\n    int n, k;\n    cin >> n >> k;\n    vector<int> a(n);\n    int lazy = 0;\n    ll tot = 0, my_greater = 0, my_equal = 0;\n    add(0);\n    vector<int> lazys = {0};\n    for (int &num : a) {\n        cin >> num;\n        my_greater += greater_than(lazy ^ num, k);\n        my_equal += equals_to(lazy ^ num ^ k);\n        tot += greater_than(lazy ^ num, k) + equals_to(lazy ^ num ^ k);\n        lazy ^= num;\n        add(lazy);\n        lazys.push_back(lazy);\n    }\n    cout << tot << '\\n';\n}\n\nsigned main() {\n    cin.tie(nullptr)->sync_with_stdio(false);\n#ifdef ONPC\n    freopen(\"onpc.in\", \"r\", stdin);\n    freopen(\"onpc.out\", \"w\", stdout);\n#endif\n    solution();\n#ifdef ONPC\n    cerr << endl << \"finished in \" << clock() * 1.0 / CLOCKS_PER_SEC << \" sec\" << endl;\n#endif\n}\n\n/*\n              \u2571|\u3001\n            (\u02da\u02ce \u30027\n             |\u3001\u02dc\u3035\n             \u3058\u3057\u02cd,)\u30ce\n           \u2606-pushak-\u2606\n*/\n\n/* Sun Jul 09 2023 14:43:12 GMT+0300 (Moscow Standard Time) */\n"
}