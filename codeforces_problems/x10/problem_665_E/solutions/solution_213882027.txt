{
    "id": 213882027,
    "contestId": 665,
    "creationTimeSeconds": 1689412132,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 665,
        "index": "E",
        "name": "Beautiful Subarrays",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "divide and conquer",
            "strings",
            "trees"
        ]
    },
    "author": {
        "contestId": 665,
        "members": [
            {
                "handle": "shivendra9068"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1461164400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <iostream>\r\n#include <vector>\r\nusing namespace std;\r\n\r\nclass TrieNode {\r\npublic:\r\n    vector<TrieNode*> next;\r\n    int cnt;\r\n\r\n    TrieNode() {\r\n        next = vector<TrieNode*>(2, nullptr);\r\n        cnt = 0;\r\n    }\r\n};\r\n\r\nvoid add(TrieNode* root, int num) {\r\n    TrieNode* v = root;\r\n    for (int i = 30; i >= 0; --i) {\r\n        int bit = (num >> i) & 1;\r\n        if (!v->next[bit]) {\r\n            v->next[bit] = new TrieNode();\r\n        }\r\n        v = v->next[bit];\r\n        v->cnt += 1;\r\n    }\r\n}\r\n\r\nint get(TrieNode* node) {\r\n    return (node == nullptr) ? 0 : node->cnt;\r\n}\r\n\r\nint calc(TrieNode* root, int num, int B) {\r\n    TrieNode* v = root;\r\n    int ans = 0;\r\n    int cur = 0;\r\n    for (int i = 30; i >= 0; --i) {\r\n        if (!v) {\r\n            break;\r\n        }\r\n        int b = (num >> i) & 1;\r\n        if (cur | (1 << i) >= B) {\r\n            ans += get(v->next[b ^ 1]);\r\n            v = v->next[b];\r\n        } else {\r\n            v = v->next[b ^ 1];\r\n            cur |= (1 << i);\r\n        }\r\n    }\r\n    if (cur >= B) {\r\n        ans += get(v);\r\n    }\r\n    return ans;\r\n}\r\n\r\nint solve(vector<int>& A, int B) {\r\n    TrieNode* root = new TrieNode();\r\n    add(root, 0);\r\n    int build = 0;\r\n    int ans = 0;\r\n    for (int num : A) {\r\n        build = build ^ num;\r\n        ans += calc(root, build, B);\r\n        add(root, build);\r\n    }\r\n    return ans;\r\n}\r\n\r\nint main() {\r\n    int n,k;cin>>n>>k;\r\n    vector<int> A(n);\r\n    for(int i=0;i<n;i++)cin>>A[i];\r\n    int result = solve(A, k);\r\n    cout << result << endl;\r\n    return 0;\r\n}\r\n"
}