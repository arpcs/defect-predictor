{
    "id": 233776182,
    "contestId": 600,
    "creationTimeSeconds": 1700639320,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 600,
        "index": "C",
        "name": "Make Palindrome",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "greedy",
            "strings"
        ]
    },
    "author": {
        "contestId": 600,
        "members": [
            {
                "handle": "ridgetinez"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1448636400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// changing a letter to another counts as an edit\n// moving characters doesnt count as an edit\n\n// idea: each character should have a partner.\n// odd number of characters  -> make even by omitting one of the characters and making it the middle character\n// even number of characters -> get characters with odd counts, sort lexicographically\n//                              for every odd number\n// aabcd\n// b c d\n// 1 1 1\n// b d\n// 2 1\n\n// decrease everything by one except the first char\n// increase the first char by the amount that was decreased\n\n// even number of characters => even number of odds\n// odd number of chracters => odd number of odds\n\n#include <iostream>\n#include <sstream>\n#include <string>\n\nint lettercount[26];\n\nstd::string construct_palindrome()\n{\n    std::stringstream ss;\n    int oddc = -1;\n    for (int i = 0; i < 26; i++)\n    {\n        if (oddc == -1 && lettercount[i] % 2 == 1)\n        {\n            oddc = 'a' + i;\n        }\n        ss << std::string(lettercount[i] / 2, 'a' + i);\n    }\n    auto real_part = ss.str();\n    auto mirror_part = std::string(real_part);\n    if (oddc != -1)\n    {\n        real_part.push_back(oddc);\n    }\n    std::reverse(mirror_part.begin(), mirror_part.end());\n    return real_part + mirror_part;\n}\n\nint is_palindrome()\n{\n    int seen_odd = 0;\n    for (auto i = 0; i < 26; i++)\n    {\n        if (lettercount[i] % 2 == 1)\n        {\n            if (seen_odd)\n            {\n                return 0;\n            }\n            seen_odd = 1;\n        }\n    }\n    return 1;\n}\n\nint main(void)\n{\n    std::string s;\n    std::cin >> s;\n    std::for_each(s.cbegin(), s.cend(), [](auto c)\n                  { lettercount[c - 'a']++; });\n\n    for (int i = 25; i > 0; i--)\n    {\n        if (is_palindrome())\n        {\n            break;\n        }\n        if (lettercount[i] % 2 == 1)\n        {\n            lettercount[i]--;\n            for (int j = 0; j < 25; j++)\n            {\n                if (lettercount[j] % 2 == 1)\n                {\n                    lettercount[j]++;\n                    break;\n                }\n            }\n        }\n    }\n\n    std::cout << construct_palindrome() << std::endl;\n}\n"
}