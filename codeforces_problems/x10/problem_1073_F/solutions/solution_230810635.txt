{
    "id": 230810635,
    "contestId": 1073,
    "creationTimeSeconds": 1698836566,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1073,
        "index": "F",
        "name": "Choosing Two Paths",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "dfs and similar",
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1073,
        "members": [
            {
                "handle": "xiudu123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1540478100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 14848000,
    "source": "// \u9762\u5411\u5bf9\u8c61\u9762\u5411\u541b\uff0c \u4e0d\u8d1f\u4ee3\u7801\u4e0d\u8d1f\u537f\u3002\r\n/*\r\n  When I wrote this, only God and I understood what I was doing\r\n  Now, only God knows\r\n*/\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nusing namespace __gnu_pbds;\r\nconst int RANDOM = std::chrono::high_resolution_clock::now().time_since_epoch().count();\r\nstruct chash {\r\n    int operator()(int x) const { return x ^ RANDOM; }\r\n};\r\ntemplate<typename T, typename G>\r\nusing hash = gp_hash_table<T, G, chash>;\r\n#define int long long\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\nstd::mt19937_64 myRound64(time(nullptr));\r\nstd::mt19937 myRound32(time(nullptr));\r\nvoid slove();\r\nvoid main_init();\r\nvoid solve_init();\r\n\r\n// -----------------------------\r\nint32_t main(){\r\n    std::cout << (std::setiosflags(std::ios::fixed)) << std::setprecision(12);\r\n#ifdef ONLINE_JUDGE\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr), std::cout.tie(nullptr);\r\n#else\r\n    freopen(\"XiuDu.in\", \"r\", stdin);\r\n    freopen(\"XiuDu.out\", \"w\", stdout);\r\n    int tt = clock();\r\n#endif\r\n\r\n    // ---------------------------------------------\r\n    int T = 1;\r\n//    std::cin >> T;\r\n    main_init();\r\n    while(T --){solve_init(), slove();}\r\n    // ----------------------------------------------\r\n\r\n#ifndef ONLINE_JUDGE\r\n    std::cout << \"\\nrun time = \" << clock() - tt << \"ms\" << '\\n';\r\n    std::cout << \"runId: \" << myRound32() % 100 << '\\n';\r\n    fclose(stdin), fclose(stdout);\r\n#endif\r\n\r\n    return 0;\r\n}\r\n// ----------------------------\r\n\r\nvoid main_init(){}\r\nvoid solve_init(){}\r\nvoid slove(){\r\n    int n;\r\n    std::cin >> n;\r\n    std::vector<int> adj[n + 1];\r\n    for(int i = 1, a, b; i < n; ++ i) {\r\n        std::cin >> a >> b;\r\n        adj[a].emplace_back(b);\r\n        adj[b].emplace_back(a);\r\n    }\r\n\r\n    std::pair<int, int> ans1 = {1, 1}, ans2;\r\n    std::vector<int> dist(n + 1, 2e9), pre(n + 1, 0);\r\n    std::vector<bool> st(n + 1, false);\r\n    std::function<void(int, int)> dfs = [&](int u, int ff) -> void {\r\n        dist[u] = dist[ff] + 1;\r\n        pre[u] = ff;\r\n        for(auto v : adj[u]) {\r\n            if(v == ff) continue;\r\n            dfs(v, u);\r\n        }\r\n    };\r\n    dfs(1, 0);\r\n    int s = 1;\r\n    for(int i = 1; i <= n; ++ i) {\r\n        if(dist[i] > dist[s] && adj[i].size() > 2) s = i;\r\n    }\r\n    dfs(s, 0);\r\n    int t = s;\r\n    for(int i = 1; i <= n; ++ i) {\r\n        if(dist[i] > dist[t] && adj[i].size() > 2) t = i;\r\n    }\r\n\r\n    int tt = t;\r\n    std::vector<int> vv;\r\n    while (tt) {\r\n        vv.emplace_back(tt);\r\n        st[tt] = true;\r\n        tt = pre[tt];\r\n    }\r\n\r\n\r\n    std::function<void(int, int, std::vector<std::pair<int, int> >&)> dfs2 = [&](int u, int ff, std::vector<std::pair<int, int> >& vv) -> void {\r\n        for(auto v : adj[u]) {\r\n            if(v == ff) continue;\r\n            if(st[v]) continue;\r\n            dist[v] = dist[u] + 1;\r\n            dfs2(v, u, vv);\r\n        }\r\n        if(adj[u].size() == 1 && !st[u]) vv.emplace_back(dist[u], u);\r\n    };\r\n\r\n    std::vector<std::pair<int, int> > a, b;\r\n\r\n    dfs2(s, 0, a);\r\n    dfs2(t, 0, b);\r\n    ans1.first = a[1].second;\r\n    ans1.second = b[1].second;\r\n    ans2.first = a[0].second;\r\n    ans2.second = b[0].second;\r\n\r\n    std::cout << ans1.first << ' ' << ans1.second << '\\n';\r\n    std::cout << ans2.first << ' ' << ans2.second << '\\n';\r\n}\r\n"
}