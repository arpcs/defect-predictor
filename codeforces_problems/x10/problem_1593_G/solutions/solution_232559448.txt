{
    "id": 232559448,
    "contestId": 1593,
    "creationTimeSeconds": 1699824268,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1593,
        "index": "G",
        "name": "Changing Brackets",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "data structures",
            "dp",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1593,
        "members": [
            {
                "handle": "rohitjazz199955"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1634135700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 512000,
    "source": "#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n \r\n#define forn(i,n) for(int i=0;i<n;i++)\r\n#define forn1(i,n) for(int i=1;i<=n;i++)\r\n#define in(a,n)\tfor(int i=0;i<n;i++) cin>>a[i];\r\n#define en cout << \"\\n\"\r\n#define FAST ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define f first\r\n#define s second\r\n#define sz(a) a.size()\r\n#define ins insert\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n#define pii pair<int,int>\r\n#define pi pair<int,int>\r\n#define pll pair<ll,ll>\r\n#define plll pair<ll,pair<ll,ll>>\r\n#define pli pair<ll,int>\r\n#define vi vector<int>\r\n#define vl vector<ll>\r\n#define vvi vector<vi>\r\n#define vvl vector<vl>\r\n#define vll vector<pll>\r\n#define vlll vector<plll>\r\n#define endl \"\\n\"\r\n#define ctz(n) __builtin_ctz(n)\r\n#define clz(n) __builtin_clz(n)\r\n#define parity(n) __builtin_parity(n)\r\n#define popcnt(n) __builtin_popcount(n)\r\n#define all(x) (x).begin(), (x).end()\r\n#define make_unique(x) sort(all((x))); (x).resize(unique(all((x))) - (x).begin())\r\n \r\n// random number generater\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\n#define rndm(l,r) uniform_int_distribution<int>(l,r)(rng)\r\n \r\n// get smaller/bigger value in a\r\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\r\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\r\n \r\n// constants\r\nll oo = 2e18;\r\nint inif = 1e9 + 5;\r\nll mod = 998244353;\r\nconst int MOD = 998244353;\r\nconst int N = 2e5 + 5;\r\n\r\nstruct node{\r\n\tint last = 0;\r\n\tint length = 0;\r\n\tint first = 0;\r\n};\r\n\r\n\r\nstruct Seg\r\n{\r\n\tint _n;\r\n\tvector<node> seg;\r\n\r\n\t// VISUALIZE THIS WITH BINARY TREES\r\n\r\n\tvoid type_of_tree(int i){\r\n\t\tif(seg[2*i].length == 0){\r\n\t\t\tseg[i] = seg[2*i+1];\r\n\t\t\treturn;\r\n\t\t}\r\n\t\telse if(seg[2*i+1].length == 0){\r\n\t\t\tseg[i] = seg[2*i];\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif(seg[2*i].last == seg[2*i+1].first){\r\n\t\t\tif(seg[2*i].length > seg[2*i+1].length){\r\n\t\t\t\tseg[i].length = seg[2*i].length - seg[2*i+1].length;\r\n\t\t\t\tseg[i].first = seg[2*i].first;\r\n\t\t\t\tint temp = seg[2*i].first;\r\n\t\t\t\tif(seg[i].length%2 == 0){\r\n\t\t\t\t\tseg[i].last = 1 - temp;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tseg[i].last = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(seg[2*i].length < seg[2*i+1].length){\r\n\t\t\t\tseg[i].length = seg[2*i+1].length - seg[2*i].length;\r\n\t\t\t\tseg[i].last = seg[2*i+1].last;\r\n\t\t\t\tint temp = seg[2*i+1].last;\r\n\t\t\t\tif(seg[i].length%2 == 0){\r\n\t\t\t\t\tseg[i].last = 1 - temp;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tseg[i].last = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse{\r\n\t\t\t\tseg[i].length = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tseg[i].first = seg[2*i].first;\r\n\t\t\tseg[i].last = seg[2*i+1].last;\r\n\t\t\tseg[i].length = seg[2*i].length+seg[2*i+1].length;\r\n\t\t}\t\t\t\t\t\r\n\t}\r\n\tnode return_query(node fir,node sec){\r\n\t\tnode ans;\r\n\t\tif(fir.length == 0){\r\n\t\t\tans = sec;\r\n\t\t\treturn ans;\r\n\t\t}\r\n\t\telse if(sec.length == 0){\r\n\t\t\tans = fir;\r\n\t\t\treturn ans;\r\n\t\t}\r\n\t\tif(fir.last == sec.first){\r\n\t\t\tif(fir.length > sec.length){\r\n\t\t\t\tans.length = fir.length - sec.length;\r\n\t\t\t\tans.first = fir.first;\r\n\t\t\t\tint temp = fir.first;\r\n\t\t\t\tif(ans.length%2 == 0){\r\n\t\t\t\t\tans.last = 1 - temp;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tans.last = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if(fir.length < sec.length){\r\n\t\t\t\tans.length = sec.length - fir.length;\r\n\t\t\t\tans.last = sec.last;\r\n\t\t\t\tint temp = sec.last;\r\n\t\t\t\tif(ans.length%2 == 0){\r\n\t\t\t\t\tans.last = 1 - temp;\r\n\t\t\t\t}\r\n\t\t\t\telse{\r\n\t\t\t\t\tans.last = temp;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse{\r\n\t\t\tans.first = fir.first;\r\n\t\t\tans.last = sec.last;\r\n\t\t\tans.length = fir.length+sec.length;\r\n\t\t}\r\n\t\treturn ans;\r\n\t}\r\n\r\n\tnode query(int index,int left,int right,int ql,int qr){\r\n\t\t// use for lazy tree\r\n\t\t// propogate(index,left,right);\r\n\t\tif(left > qr || right < ql) {\r\n\t\t\tnode gar;\r\n\t\t\treturn gar;\r\n\t\t}\r\n\t\tif(left >= ql && right <= qr) {\r\n\t\t\treturn seg[index];\r\n\t\t}\r\n\t\tint mid = left + (right-left) / 2;\r\n\t\treturn return_query(query(2*index,left,mid,ql,qr),query(2*index + 1,mid+1,right,ql,qr));\r\n\t}\r\n\r\n\tint build(int n,int *a){\r\n\t\t_n = 0;\r\n\t\tint ces(0);\r\n\t\twhile(_n < n){\r\n\t\t\t_n = 1<<ces;\r\n\t\t\tces++;\r\n\t\t}\r\n\r\n\t\t// note about resizing with initial value\r\n\t\tseg.resize(2*_n);\r\n\r\n\t\t// do if using lazy propogation\r\n\t\t// lazysum.resize(2*_n,0);\r\n\r\n\t\tfor(int i=0;i<n;i++){\r\n\t\t\tseg[_n + i].last = a[i];\r\n\t\t\tseg[_n + i].first = a[i];\r\n\t\t\tseg[_n + i].length = 1;\r\n\t\t}\r\n\r\n\t\tfor(int i=_n-1;i>0;i--){\r\n\t\t\ttype_of_tree(i);\r\n\t\t}\r\n\t\treturn _n-1;\r\n\t}\r\n\t\r\n};\r\n\r\nvoid solve(){\r\n\tstring s;\r\n\tcin >> s;\r\n\tint n = sz(s);\r\n\tint a[n];\r\n\tforn(i,n){\r\n\t\tif(s[i] == '(' || s[i] == ')')a[i]=1;\r\n\t\telse a[i]=0;\r\n\t}\r\n\tSeg seg;\r\n\tint _n = seg.build(n,a);\r\n\tint q;\r\n\tcin >> q;\r\n\t// seg.print();\r\n\tforn(i,q){\r\n\t\tint l,r;\r\n\t\tcin >> l >> r;\r\n\t\tl--;\r\n\t\tr--;\r\n\t\tnode ans = seg.query(1,0,_n,l,r);\r\n\t\tcout << ans.length/2 << endl;\r\n\t}\r\n\r\n}\r\n\r\nint main(){\r\n\t#ifndef ONLINE_JUDGE\r\n\t\tfreopen(\"input.txt\",\"r\",stdin);\r\n\t\tfreopen(\"1.txt\",\"w\",stdout);\t\r\n\t#endif\r\n\tFAST;\r\n\tint test = 1;\r\n\tcin >> test;\r\n\twhile(test--){\r\n\t\tsolve();\r\n\t}\t\t\r\n\treturn 0;\t\r\n}\t\t\t"
}