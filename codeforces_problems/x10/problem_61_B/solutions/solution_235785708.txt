{
    "id": 235785708,
    "contestId": 61,
    "creationTimeSeconds": 1701744324,
    "relativeTimeSeconds": 2124,
    "problem": {
        "contestId": 61,
        "index": "B",
        "name": "Hard Work",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "strings"
        ]
    },
    "author": {
        "contestId": 61,
        "members": [
            {
                "handle": "aaaaustin"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1701742200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 43,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 102400,
    "source": "// https://codeforces.com/contest/61/problem/B\r\n\r\n#include <cctype>\r\n#include <iostream>\r\n#include <memory>\r\n#include <sstream>\r\n#include <set>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nconst char sign0 = '-';\r\nconst char sign1 = ';';\r\nconst char sign2 = '_';\r\n\r\nstring normalize(string str)\r\n{\r\n    stringstream ss;\r\n    for (char c : str)\r\n    {\r\n        if (!(c == sign0 || c == sign1 || c == sign2))\r\n        {\r\n            ss << char(tolower(c));\r\n        }\r\n    }\r\n    return ss.str();\r\n}\r\n\r\nint main()\r\n{\r\n    // each str is len <= 100\r\n    // each answer is len <= 600\r\n    // case insensitive\r\n    // order doesn't matter\r\n    // ignore any sign characters\r\n    // output WA for wrong, ACC for correct\r\n    // no string input or answer is empty\r\n\r\n    string s1, s2, s3;\r\n    cin >> s1 >> s2 >> s3;\r\n\r\n    // TODO correct answer\r\n    set<string> correct_answers;\r\n    correct_answers.insert(normalize(s1) + normalize(s2) + normalize(s3));\r\n    correct_answers.insert(normalize(s1) + normalize(s3) + normalize(s2));\r\n    correct_answers.insert(normalize(s2) + normalize(s1) + normalize(s3));\r\n    correct_answers.insert(normalize(s2) + normalize(s3) + normalize(s1));\r\n    correct_answers.insert(normalize(s3) + normalize(s2) + normalize(s1));\r\n    correct_answers.insert(normalize(s3) + normalize(s1) + normalize(s2));\r\n\r\n    // n students 0..=1000\r\n    int n_students;\r\n    cin >> n_students;\r\n\r\n    vector<string> output;\r\n\r\n    // each student submits an answer. check if it's correct.\r\n    for (int i = 0; i < n_students; i++)\r\n    {\r\n        string answer;\r\n        cin >> answer;\r\n\r\n        bool is_correct = correct_answers.find(normalize(answer)) != correct_answers.end();\r\n        if (is_correct)\r\n        {\r\n            output.push_back(\"ACC\");\r\n        }\r\n        else\r\n        {\r\n            output.push_back(\"WA\");\r\n        }\r\n    }\r\n\r\n    for (string s : output)\r\n    {\r\n        cout << s << endl;\r\n    }\r\n}\r\n"
}