{
    "id": 229969347,
    "contestId": 61,
    "creationTimeSeconds": 1698390317,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 61,
        "index": "B",
        "name": "Hard Work",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "strings"
        ]
    },
    "author": {
        "contestId": 61,
        "members": [
            {
                "handle": "Nanthakumar06"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1298390400
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\n//import java.math.BigInteger;\r\nimport java.util.*;\r\npublic class Main {\r\n    static class FastReader {\r\n        BufferedReader br;\r\n        StringTokenizer st = null;\r\n        PrintWriter pw;\r\n        BufferedWriter bw;\r\n\r\n        public FastReader() {\r\n            br = new BufferedReader(\r\n                    new InputStreamReader(System.in));\r\n            pw = new PrintWriter(\r\n                    new OutputStreamWriter(System.out));\r\n            bw = new BufferedWriter(\r\n                    new OutputStreamWriter(System.out));\r\n        }\r\n\r\n        String next() {\r\n            while (st == null || !st.hasMoreElements()) {\r\n                try {\r\n                    st = new StringTokenizer(br.readLine());\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n            return st.nextToken();\r\n        }\r\n\r\n        int nextInt() {\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        long nextLong() {\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        double nextDouble() {\r\n            return Double.parseDouble(next());\r\n        }\r\n\r\n        String nextLine() {\r\n            String str = \"\";\r\n            try {\r\n                if (st != null && st.hasMoreTokens()) {\r\n                    str = st.nextToken(\"\\n\");\r\n                } else {\r\n                    str = br.readLine();\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            return str;\r\n        }\r\n\r\n        int[] nextArr(int n) {\r\n            int arr[] = new int[n];\r\n            for (int i = 0; i < n; i++) {\r\n                arr[i] = nextInt();\r\n            }\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    static int mod = (int) 1e9 + 7;\r\n\r\n    public static void main(String args[]) throws Exception {\r\n        FastReader fr = new FastReader();\r\n        String a = clear(fr.nextLine().toLowerCase());\r\n        String b = clear(fr.nextLine().toLowerCase());\r\n        String c = clear(fr.nextLine().toLowerCase());\r\n        int t = fr.nextInt();\r\n        out:\r\n        while(t-->0)\r\n        {\r\n           String check = clear(fr.nextLine().toLowerCase());\r\n           if(check.length() == a.length()+b.length()+c.length())\r\n           {\r\n              boolean ex = true;\r\n              ex &= (check.contains(a));\r\n              ex &= (check.contains(b));\r\n              ex &= (check.contains(c));\r\n              if(ex)\r\n              {\r\n                  fr.pw.println(\"ACC\");\r\n              }\r\n              else\r\n              {\r\n                  fr.pw.println(\"WA\");\r\n              }\r\n           }\r\n           else\r\n           {\r\n               fr.pw.println(\"WA\");\r\n           }\r\n        }\r\n        fr.pw.close();\r\n    }\r\n   public static String clear(String a)\r\n   {\r\n        a = a.replaceAll(\"-\",\"\");\r\n        a =a.replaceAll(\";\",\"\");\r\n        a = a.replaceAll(\"_\",\"\");\r\n        return a;\r\n   }\r\n\r\n}\r\nclass disjointSet\r\n{\r\n    int count;\r\n    ArrayList<Integer> parent,rank;\r\n    disjointSet()\r\n    {\r\n        count = 0;\r\n        parent = new ArrayList<>();\r\n        rank = new ArrayList<>();\r\n    }\r\n    void makeSet(int v)\r\n    {\r\n        parent.add(v);\r\n        rank.add(0);\r\n        count++;\r\n    }\r\n    int findSet(int v)\r\n    {\r\n        if(parent.get(v) == v)\r\n            return v;\r\n        int p = findSet(parent.get(v));\r\n        parent.set(v,p);\r\n        return p;\r\n    }\r\n    void unionSet(int a,int b)\r\n    {\r\n        int pa = findSet(a);\r\n        int pb = findSet(b);\r\n        if(pa != pb)\r\n        {\r\n            if(rank.get(pa)<rank.get(pb))\r\n            {\r\n                int t = pa;\r\n                pa = pb;\r\n                pb = t;\r\n            }\r\n            parent.set(pb,pa);\r\n            if(rank.get(pa) == rank.get(pb))\r\n            {\r\n                rank.set(pa,rank.get(pa)+1);\r\n            }\r\n            count--;\r\n        }\r\n    }\r\n    int getCount()\r\n    {\r\n        return count;\r\n    }\r\n}\r\n\r\n"
}