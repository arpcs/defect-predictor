{
    "id": 82354207,
    "contestId": 1116,
    "creationTimeSeconds": 1591151360,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1116,
        "index": "B1",
        "name": "Distinguish three-qubit states",
        "type": "PROGRAMMING",
        "tags": []
    },
    "author": {
        "contestId": 1116,
        "members": [
            {
                "handle": "ed1d1a8d"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1551459600
    },
    "programmingLanguage": "Q#",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 5120000,
    "source": "namespace Solution {\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.Arrays;\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Convert;\r\n    open Microsoft.Quantum.Diagnostics;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Logical;\r\n    open Microsoft.Quantum.Math;\r\n    open Microsoft.Quantum.Measurement;\r\n    open Microsoft.Quantum.Preparation;\r\n\r\n    operation Solve (qs : Qubit[]) : Int {\r\n        using (tmp = Qubit()) {\r\n            within {\r\n                X(tmp);\r\n            } apply {\r\n                Controlled R1([qs[1]], (4.0 * PI() / 3.0, tmp));\r\n                Controlled R1([qs[2]], (2.0 * PI() / 3.0, tmp));\r\n            }\r\n        }\r\n        CNOT(qs[1], qs[2]);\r\n        (ControlledOnInt(0, H))([qs[0]], qs[1]);\r\n        (ControlledOnInt(0, X))([qs[0]], qs[2]);\r\n\r\n        Ry(-2.0 * ArcCos(Sqrt(2.0 / 3.0)), qs[0]);\r\n\r\n        if (MeasureInteger(LittleEndian(qs)) == 0) {\r\n            return 0;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    operation test(): Unit {\r\n        mutable cnt = 0;\r\n        for (i in 1 .. 100) {\r\n            using (qs = Qubit[3]) {\r\n                let cp_0 = ComplexPolar(0.0, 0.0);\r\n                let cp_1 = ComplexPolar(1.0, 0.0);\r\n                let cp_w = ComplexPolar(1.0, 2.0 * PI() / 3.0);\r\n                let cp_w2 = ComplexPolar(1.0, 4.0 * PI() / 3.0);\r\n\r\n                PrepareArbitraryState(\r\n                    //[cp_0, cp_1, cp_w, cp_0, cp_w2],\r\n                    [cp_0, cp_1, cp_w2, cp_0, cp_w],\r\n                    LittleEndian(qs)\r\n                );\r\n\r\n                let res = Solve(qs);\r\n                if (res == 1) {\r\n                    set cnt += 1;\r\n                }\r\n                ResetAll(qs);\r\n            }\r\n        }\r\n        Message(IntAsString(cnt));\r\n\r\n        Message(\"\");\r\n        Message(\"OK\");\r\n    }\r\n}\r\n"
}