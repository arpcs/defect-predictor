{
    "id": 231311501,
    "contestId": 723,
    "creationTimeSeconds": 1699090834,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 723,
        "index": "D",
        "name": "Lakes in Berland",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 723,
        "members": [
            {
                "handle": "suryakumar120"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475494500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 409600,
    "source": "//Done by stark\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define endl \"\\n\";\r\n// #define ll long long int\r\n#define int long long\r\nusing ii = pair<int,int>;\r\nconst int maxn = 55;\r\nint n,m,k;\r\nint reqn = 0;\r\nvector<int>g[maxn];\r\nint dx[] = {0,0,1,-1};\r\nint dy[] = {1,-1,0,0};\r\nvector<string>arr;\r\nvector<int>component_size;\r\nint comp[maxn][maxn];\r\nint component_num;\r\nbool check(int x,int y){\r\n    if(x>=0 and x<n and y>=0 and y<m and arr[x][y]!='*')return true;\r\n    return false;\r\n}\r\nbool visited[maxn][maxn];\r\nvoid dfs(int x,int y){\r\n    visited[x][y] = true;\r\n    comp[x][y] = component_num;\r\n    if(x == n-1 or y == m-1 or x == 0 or y == 0){\r\n        component_size[component_num]+= 1e9;\r\n    }\r\n    else{\r\n         component_size[component_num]++;\r\n    }\r\n   \r\n    for(int k=0;k<4;k++){\r\n        int nx = x + dx[k];\r\n        int ny = y + dy[k];\r\n        if(check(nx,ny) and !visited[nx][ny]){\r\n            dfs(nx,ny);\r\n        }\r\n    }\r\n}\r\nvoid solve(){\r\n    cin>>n>>m>>k;\r\n    for(int i=0;i<n;i++){\r\n        string x;\r\n        cin>>x;\r\n        arr.push_back(x);\r\n    }\r\n    component_size.push_back(1e9);\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            if(!visited[i][j] and check(i,j)){\r\n                component_num++;\r\n                component_size.push_back(0);\r\n                dfs(i,j);\r\n                \r\n            }\r\n        }\r\n    }\r\n    vector<ii>lakes;\r\n    for(int i=0;i<=component_num;i++){\r\n        if(component_size[i]<1e9){\r\n            lakes.push_back({component_size[i],i});\r\n        }\r\n        \r\n    }\r\n    component_num = lakes.size();\r\n    sort(lakes.begin(),lakes.end());\r\n    // for(int i=0;i<n;i++){\r\n    //     for(int j=0;j<m;j++){\r\n    //         cout<<comp[i][j]<<\" \";\r\n    //     }\r\n    //     cout<<endl;\r\n    // }\r\n    int removing = component_num - k;\r\n    int number_removing_cells=0;\r\n    map<int,int>mp;\r\n    for(int i=0;i<removing;i++){\r\n        mp[lakes[i].second] = true;\r\n        // number_removing_cells += component_size[lakes[i].second];\r\n    }\r\n    \r\n    for(int i=0;i<n;i++){\r\n        for(int j= 0;j<m;j++){\r\n            if(mp[comp[i][j]] and arr[i][j]!='*'){\r\n                number_removing_cells++;\r\n            }\r\n            else{\r\n                // cout<<arr[i][j];\r\n            }\r\n        }\r\n        // cout<<endl;\r\n    }\r\n        cout<<number_removing_cells<<endl;\r\n    for(int i=0;i<n;i++){\r\n        for(int j= 0;j<m;j++){\r\n            if(mp[comp[i][j]]){\r\n                cout<<\"*\";\r\n            }\r\n            else{\r\n                cout<<arr[i][j];\r\n            }\r\n        }\r\n        cout<<endl;\r\n    }\r\n\r\n    \r\n    \r\n    \r\n\r\n    \r\n}\r\n#undef int\r\nsigned main(){\r\n  ios_base::sync_with_stdio(0);\r\ncin.tie(0); cout.tie(0);\r\n// cout<<\"came till here\"<<endl;\r\nint t;\r\n// cin>>t;\r\nt = 1;\r\nwhile(t--){\r\n  // cout<<\"came till here\"<<endl;\r\nsolve();\r\n}\r\n\r\n}"
}