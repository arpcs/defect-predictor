{
    "id": 232703022,
    "contestId": 723,
    "creationTimeSeconds": 1699937792,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 723,
        "index": "D",
        "name": "Lakes in Berland",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 723,
        "members": [
            {
                "handle": "TTue"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475494500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 204800,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <stack>\r\n#include <algorithm>\r\nusing namespace std;\r\n\r\nconst int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};\r\nconst int N = 55;\r\n\r\nint n, m, k;\r\nstring a[N];\r\nbool vis[N][N];\r\n\r\nstruct Cell\r\n{\r\n    int x, y;\r\n};\r\n\r\nvector<vector<Cell>> lakes;\r\n\r\nbool cmp(const vector<Cell> &a, const vector<Cell> &b) {\r\n    return a.size() < b.size();\r\n}\r\n\r\nvoid dfs(Cell s) {\r\n    stack<Cell> st;\r\n    vis[s.x][s.y] = 1;\r\n    st.push(s);\r\n    bool isOcean = 0;\r\n    vector<Cell> tmp;\r\n    while(!st.empty()) {\r\n        Cell u = st.top();\r\n        tmp.push_back(u);\r\n        st.pop();\r\n        if(u.x == 0 || u.y == 0 || u.x == n - 1 || u.y == m - 1)\r\n            isOcean = 1;\r\n        for(int i = 0; i < 4; i++) {\r\n            int x = u.x + dx[i], y = u.y + dy[i];\r\n            if(x >= 0 && x < n && y >= 0 && y < m && a[x][y] == '.' && !vis[x][y]) {\r\n                vis[x][y] = 1;\r\n                st.push(Cell{x, y});\r\n            }\r\n        }\r\n    }\r\n    if(!isOcean)\r\n        lakes.push_back(tmp);\r\n}\r\n\r\nint main() {\r\n    cin >> n >> m >> k;\r\n    for(int i = 0; i < n; i++)\r\n        cin >> a[i];\r\n    for(int i = 0; i < n; i++)\r\n        for(int j = 0; j < m; j++)\r\n            if(!vis[i][j] && a[i][j] == '.')\r\n                dfs(Cell{i, j});\r\n    sort(lakes.begin(), lakes.end(), cmp);\r\n    int sum_cell = 0;\r\n    for(int i = 0; i < lakes.size() - k; i++) {\r\n        sum_cell += lakes[i].size();\r\n        for (int j = 0; j < lakes[i].size(); j++) {\r\n            Cell u = lakes[i][j];\r\n            a[u.x][u.y] = '*';\r\n        }\r\n    }\r\n    cout << sum_cell << \"\\n\";\r\n    for (int i = 0; i < n; i++) {\r\n        for (int j = 0; j < m; j++)\r\n            cout << a[i][j];\r\n        cout << \"\\n\";\r\n    }\r\n    return 0;\r\n}"
}