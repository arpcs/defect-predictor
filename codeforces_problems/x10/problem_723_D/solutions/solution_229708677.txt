{
    "id": 229708677,
    "contestId": 723,
    "creationTimeSeconds": 1698244473,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 723,
        "index": "D",
        "name": "Lakes in Berland",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 723,
        "members": [
            {
                "handle": "cosmohack"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1475494500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 307200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint n,m;\r\nint k;\r\n\r\nvector<vector<char>>graph;\r\nint componentSize;\r\nbool foundOnOcean = false;\r\nvoid dfs(int i,int j,vector<vector<bool>>&vis){\r\n    if(i < 0 || j < 0 || i >= n || j >= m || vis[i][j] || graph[i][j] != '.')\r\n        return;\r\n    if(i == 0 || j == 0 || i == n-1 || j == m-1)\r\n        foundOnOcean = true;\r\n    vis[i][j] = true;\r\n    componentSize++;\r\n    dfs(i+1,j,vis);\r\n    dfs(i-1,j,vis);\r\n    dfs(i,j+1,vis);\r\n    dfs(i,j-1,vis);\r\n}\r\nint ctr;\r\nvoid dfsCLEAR(int i,int j,vector<vector<bool>>&vis){\r\n    if(i < 0 || j < 0 || i >= n || j >= m || vis[i][j] || graph[i][j] != '.')\r\n        return;\r\n    ctr++;\r\n    vis[i][j] = true;\r\n    graph[i][j] = '*';\r\n   \r\n    dfsCLEAR(i+1,j,vis);//down\r\n    dfsCLEAR(i-1,j,vis);//up\r\n    dfsCLEAR(i,j+1,vis);//right\r\n    dfsCLEAR(i,j-1,vis);//left\r\n}\r\nint main() {\r\n\r\n    cin >> n >> m >> k;\r\n\r\n    graph.resize(n,vector<char>(m));\r\n    vector<vector<bool>>vis1(n,vector<bool>(m,false));\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            cin >> graph[i][j];\r\n        }\r\n    }\r\n    multimap<int,pair<int,int>>mmp;\r\n    int currLakes = 0;\r\n    for(int i=1;i<n-1;i++){\r\n        for(int j=1;j<m-1;j++){\r\n            if(!vis1[i][j] && graph[i][j] == '.') {\r\n                //cout << i << \" AND \" << j << \" here\\n\";\r\n                dfs(i, j,vis1);\r\n                if(!foundOnOcean) {\r\n                    currLakes++;\r\n                    mmp.insert({componentSize, {i, j}});\r\n                }\r\n                foundOnOcean = false;\r\n                componentSize = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    vector<vector<bool>>vis2(n,vector<bool>(m,false));\r\n    for(auto&iter : mmp){\r\n        if(currLakes == k)\r\n            break;\r\n        int x = iter.second.first;\r\n        int y = iter.second.second;\r\n        dfsCLEAR(x,y,vis2);\r\n        //cout << endl << endl;\r\n        currLakes--;\r\n    }\r\n    cout << ctr << endl;\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            cout << graph[i][j];\r\n        }\r\n        cout << endl;\r\n    }\r\n}"
}