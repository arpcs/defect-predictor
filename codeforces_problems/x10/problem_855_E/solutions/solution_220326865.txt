{
    "id": 220326865,
    "contestId": 855,
    "creationTimeSeconds": 1692925756,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 855,
        "index": "E",
        "name": "Salazar Slytherin's Locket",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2200,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 855,
        "members": [
            {
                "handle": "zhangbaijian"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1506263700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "// LUOGU_RID: 122638978\n#include <iostream>\r\n#include <algorithm>\r\n#include <string>\r\n#include <cstring>\r\n\r\nusing namespace std;\r\n\r\nint T;\r\nint x, a, b, cnt, t[110];\r\nint f[110][2][15][2];\r\n\r\nint dfs(int now, bool lim, int d, bool zero)\r\n{\r\n    if (!now)\r\n    {\r\n        return !d;\r\n    }\r\n    if (f[now][lim][d][zero] != -1)\r\n        return f[now][lim][d][zero];\r\n    int up(lim ? t[now] : (x - 1)), res(0);\r\n    for (int i(0); i <= up; ++i)\r\n    {\r\n        if (zero && (i == 0))\r\n        {\r\n            res += dfs(now - 1, lim && (i == t[now]), d, 1);\r\n        }\r\n        else\r\n        {\r\n            res += dfs(now - 1, lim && (i == t[now]), d ^ (1 << i), 0);\r\n        }\r\n    }\r\n    f[now][lim][d][zero] = res;\r\n    return res;\r\n}\r\n\r\nint cal(int now)\r\n{\r\n    cnt = 0;\r\n    while (now)\r\n    {\r\n        t[++cnt] = now % x;\r\n        now /= x;\r\n    }\r\n    memset(f, -1, sizeof(f));\r\n    return dfs(cnt, true, 0, true);\r\n}\r\n\r\nint main()\r\n{\r\n    cin >> T;\r\n    while (T--)\r\n    {\r\n        cin >> x >> a >> b;\r\n        cout << cal(b) - cal(a - 1) << endl;\r\n    }\r\n    system(\"pause\");\r\n    return 0;\r\n}\r\n// 1  2 1 3"
}