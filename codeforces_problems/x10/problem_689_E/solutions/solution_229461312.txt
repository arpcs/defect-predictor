{
    "id": 229461312,
    "contestId": 689,
    "creationTimeSeconds": 1698081082,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 689,
        "index": "E",
        "name": "Mike and Geometry Problem",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "data structures",
            "dp",
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 689,
        "members": [
            {
                "handle": "Gaurav3478"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1467822900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 69,
    "timeConsumedMillis": 530,
    "memoryConsumedBytes": 34816000,
    "source": "#include <bits/stdc++.h>\r\n#include \"ext/pb_ds/assoc_container.hpp\"\r\n#include \"ext/pb_ds/tree_policy.hpp\"\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\ntemplate<class T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<class key, class value, class cmp = std::less<key>>\r\nusing ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\n// Debug Template, copied from Mikel_Arteta_8 (https://codeforces.com/blog/entry/68809)\r\nvoid __print(int x) {cerr << x;}\r\nvoid __print(long x) {cerr << x;}\r\nvoid __print(long long x) {cerr << x;}\r\nvoid __print(unsigned x) {cerr << x;}\r\nvoid __print(unsigned long x) {cerr << x;}\r\nvoid __print(unsigned long long x) {cerr << x;}\r\nvoid __print(float x) {cerr << x;}\r\nvoid __print(double x) {cerr << x;}\r\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\r\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\r\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\r\ntemplate<typename T, typename V>\r\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\r\ntemplate<typename T>\r\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\r\nvoid _print() {cerr << \"]\\n\";}\r\ntemplate <typename T, typename... V>\r\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\r\n#else\r\n#define debug(x...)\r\n#endif\r\n// End of debugging template\r\n\r\nusing ll = long long;\r\n#define double long double\r\n#define INF 9e18\r\nconst ll MOD = 1000000007;\r\n\r\nvector<ll> fac;\r\nll fac_N = 2e5 + 5;\r\n\r\nll binpow(ll a, ll b, ll MOD) {\r\n    a %= MOD;\r\n    ll res = 1;\r\n    while (b > 0) {\r\n        if (b & 1) {\r\n            res = (res * a) % MOD;\r\n        }\r\n        a = (a * a) % MOD;\r\n        b >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\nll nCr(ll n, ll r) {\r\n    if(r > n) {\r\n        return 0ll;\r\n    }\r\n    return (fac[n] * binpow(fac[r] * fac[n - r] % MOD, MOD - 2, MOD)) % MOD;\r\n}\r\n\r\nvoid run_case(int test_case) {\r\n    ll n, k;\r\n    cin >> n >> k;\r\n    map<ll, ll> mp;\r\n    for(int i = 0; i < n; i++) {\r\n        ll l, r;\r\n        cin >> l >> r;\r\n        mp[l]++;\r\n        mp[r + 1]--;\r\n    }\r\n\r\n    vector<ll> key_points;\r\n    for(auto [key, val]: mp) {\r\n        key_points.push_back(key);\r\n    }\r\n\r\n    ll active = 0;\r\n    ll ans = 0;\r\n    for(int i = 0; i < (int)key_points.size() - 1; i++) {\r\n        ll val = key_points[i];\r\n        active += mp[val];\r\n\r\n        ll gap = key_points[i + 1] - key_points[i];\r\n        ans = (ans + (nCr(active, k) * gap) % MOD) % MOD;\r\n    }   \r\n    cout << ans << '\\n';\r\n}\r\n\r\nint main() {    \r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    clock_t z = clock();\r\n\r\n    int num_test_cases = 1;\r\n    // cin >> num_test_cases;\r\n    fac.clear();\r\n    fac.resize(fac_N);\r\n    fac[0] = fac[1] = 1;\r\n    for(int i = 2; i <= fac_N; i++) {\r\n        fac[i] = (fac[i - 1] * i) % MOD;\r\n    }\r\n\r\n    for(int test_case = 1; test_case <= num_test_cases; test_case++) {\r\n        run_case(test_case);\r\n    }\r\n\r\n    cerr << \"Run Time : \" << ((double)(clock() - z) / CLOCKS_PER_SEC) << endl;\r\n    return 0;\r\n}"
}