{
    "id": 195013786,
    "contestId": 689,
    "creationTimeSeconds": 1677387379,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 689,
        "index": "E",
        "name": "Mike and Geometry Problem",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "data structures",
            "dp",
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 689,
        "members": [
            {
                "handle": "vkoza"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1467822900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 69,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 20275200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nusing ld = long double;\r\nusing ull = unsigned long long;\r\n\r\ntemplate <typename T> \r\nT inverse(T a, T m) {\r\n        T x = a, y = m;\r\n        T vx = 1, vy = 0;\r\n        while (x) {\r\n                T k = y / x;\r\n                y %= x;\r\n                vy -= k * vx;\r\n                swap(x, y);\r\n                swap(vx, vy);\r\n        }\r\n        assert(y == 1);\r\n        return vy < 0 ? m + vy : vy;\r\n}\r\n\r\ntemplate <int MOD_>\r\nstruct ModularInt {\r\n        static constexpr int MOD = MOD_;\r\n        int v;\r\n        ModularInt(int64_t _v = 0) : v(normalize(_v)) {};\r\n        explicit operator int() const { return v; }\r\n\r\n        friend ostream& operator << (ostream& out, const ModularInt& z) { return out << int(z); }\r\n\tfriend istream& operator >> (istream& in, ModularInt& z) { int _v; in >> _v; z = ModularInt(_v); return in; }\r\n\r\n        friend bool operator == (const ModularInt& lhs, const ModularInt& rhs) { return lhs.v == rhs.v; };\r\n        friend bool operator != (const ModularInt& lhs, const ModularInt& rhs) { return lhs.v != rhs.v; };\r\n\r\n        ModularInt inv() const {\r\n                ModularInt res;\r\n                res.v = inverse(v, MOD);\r\n                return res;\r\n        }\r\n        friend ModularInt inv(const ModularInt& z) { return z.inv(); }\r\n        ModularInt& operator += (const ModularInt& rhs) { \r\n                v += rhs.v;\r\n                if (v >= MOD) v -= MOD;\r\n                return *this;\r\n        }\r\n        ModularInt& operator -= (const ModularInt& rhs) {\r\n                v -= rhs.v;\r\n                if (v < 0) v += MOD;\r\n                return *this;\r\n        }\r\n        ModularInt& operator *= (const ModularInt& rhs) {\r\n                int64_t x = (int64_t) v * (int64_t) rhs.v;\r\n                v = normalize(x);\r\n                return *this;\r\n        }\r\n        ModularInt& operator /= (const ModularInt& rhs) {\r\n                ModularInt res = rhs.inv();\r\n                return (*this) *= res;\r\n        };\r\n        ModularInt& operator++() {\r\n                v++;\r\n                if (v == MOD) v = 0;\r\n                return v;\r\n        }\r\n        ModularInt& operator--() {\r\n                v--;\r\n                if (v == -1) v = MOD - 1;\r\n                return v;\r\n        }\r\n        friend ModularInt operator + (const ModularInt& lhs, const ModularInt& rhs) { return ModularInt(lhs.v) += rhs; }\r\n        friend ModularInt operator - (const ModularInt& lhs, const ModularInt& rhs) { return ModularInt(lhs.v) -= rhs; }\r\n        friend ModularInt operator * (const ModularInt& lhs, const ModularInt& rhs) { return ModularInt(lhs.v) *= rhs; }\r\n        friend ModularInt operator / (const ModularInt& lhs, const ModularInt& rhs) { return ModularInt(lhs.v) /= rhs; }\r\n\r\n        static int normalize(int64_t x) {\r\n                x %= MOD;\r\n                if (x < 0) x += MOD;\r\n                return x;\r\n        }\r\n};\r\n\r\ntemplate <typename T>\r\nT power(T a, long long n) {\r\n        T r = 1;\r\n        while (n) { if (n & 1) r *= a; a *= a; n >>= 1; }\r\n        return r;\r\n}\r\n\r\n// const int md = 998244353;\r\nconst int md = (int) 1e9 + 7;\r\nusing mint = ModularInt<md>;\r\n\r\nvector<mint> fact, ifact;\r\n\r\nvoid init() {\r\n        int N = 1100000;\r\n        fact = {1};\r\n        for (int i = 1; i < N; i++) fact.push_back(i * fact[i-1]);\r\n        ifact.resize(N);\r\n        ifact.back() = 1 / fact.back();\r\n        for (int i = N - 1; i > 0; i--) ifact[i-1] = i * ifact[i];\r\n}\r\n\r\nmint ncr(int n, int k){\r\n        if(k < 0 || k > n) return 0;\r\n        return fact[n] * ifact[k] * ifact[n-k];\r\n}\r\n\r\nint main() {\r\n\tios::sync_with_stdio(false), cin.tie(nullptr);\r\n\tinit();\r\n\tint n, k; cin >> n >> k;\r\n\tvector<array<int, 2>> pts;\r\n\tfor (int i = 0; i < n; i++) {\r\n\t\tint l, r; cin >> l >> r;\r\n\t\tarray<int, 2> arr1 = {l, 0}; pts.push_back(arr1);\r\n\t\tarray<int, 2> arr2 = {r, 1}; pts.push_back(arr2);\r\n\t}\r\n\tsort(pts.begin(), pts.end());\r\n\tint open = 0;\r\n\tmint ans = 0;\r\n\tfor (int i = 0; i < 2 * n; i++) {\r\n\t\tauto [x, v] = pts[i];\r\n\t\tif (v == 0) {\r\n\t\t\tans -= mint(x - 1) * ncr(open, k-1);\r\n\t\t\topen++;\r\n\t\t} else {\r\n\t\t\tans += mint(x) * ncr(open-1, k-1);\r\n\t\t\topen--;\r\n\t\t}\r\n\t}\r\n\tcout << ans << \"\\n\";\r\n\treturn 0;\r\n}"
}