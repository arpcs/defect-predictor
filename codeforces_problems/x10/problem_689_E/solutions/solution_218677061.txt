{
    "id": 218677061,
    "contestId": 689,
    "creationTimeSeconds": 1691932769,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 689,
        "index": "E",
        "name": "Mike and Geometry Problem",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "data structures",
            "dp",
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 689,
        "members": [
            {
                "handle": "chakshu2022"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1467822900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 69,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 54886400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\n\r\ntemplate<class T>\r\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;\r\ntemplate<typename T> \r\nusing ordered_multiset = tree<T, null_type,less_equal<T>, rb_tree_tag,tree_order_statistics_node_update>;\r\n \r\ntemplate<class key, class value, class cmp = std::less<key>>\r\nusing ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n// find_by_order(k)  returns iterator to kth element starting from 0;\r\n// order_of_key(k) returns count of elements strictly smaller than k;\r\n// less, less_equal, greater\r\n\r\n\r\nvoid init_code(){\r\n    #ifndef ONLINE_JUDGE\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n    freopen(\"error.txt\", \"w\", stderr);\r\n    #endif // ONLINE_JUDGE\r\n}\r\n \r\n                             // MACROS\r\ntypedef long long ll;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\ntypedef pair<int, int> pii;\r\ntypedef pair<ll, ll> pll;\r\ntypedef priority_queue<int> maxheap;\r\ntypedef priority_queue<int, vector<int>, greater<int>> minheap;\r\n\r\n#define ff first\r\n#define ss second\r\n#define pb push_back\r\n#define FOR(i, a, b)  for(ll i=a; i<=b; i++)\r\n#define FORR(i, a, b)  for(ll i=a; i>=b; i--)  \r\n#define all(v) v.begin(),v.end()\r\n#define allr(v) v.rbegin(),v.rend()\r\n#define vlb(v, x) lower_bound(all(v), x)\r\n#define vub(v, x) upper_bound(all(v), x)\r\n#define vsum(v) accumulate(all(v), 0ll)\r\n#define slb(v, x) v.lower_bound(x)\r\n#define sub(v, x) v.upper_bound(x)   \r\n#define MOD 1000000007\r\n#define MP make_pair\r\n#define gp_map gp_hash_table\r\n\r\n// Debugging\r\n#ifndef ONLINE_JUDGE\r\n#include \"debug.cpp\"\r\n#else\r\n#define dbg(x)\r\n#endif\r\n    \r\nstruct chash {\r\n    // any random-ish large odd number will do\r\n    const uint64_t C = 2713661325311;\r\n    // random 32-bit number\r\n    const uint32_t RANDOM =\r\n        chrono::steady_clock::now().time_since_epoch().count();\r\n    size_t operator()(uint64_t x) const {\r\n        // see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html\r\n        return __builtin_bswap64((x ^ RANDOM) * C);\r\n    }\r\n// gp_hash_table<key, value, chash> table;\r\n};\r\n\r\n\r\n                        // FUNCTIONS\r\nll lcm(ll a, ll b){ ll res = (a*b)/__gcd(a,b); return res; }\r\nll binpow(ll a, ll b) { ll res = 1; while (b > 0) { if (b & 1) res = res * a; a = a * a; b >>= 1; } return res;}\r\n\r\n\r\n                                // PRIMARY FUNCTION\r\n\r\n\r\nll mMul(ll a, ll b){return (a * b) % MOD;}\r\nll mBinPow(ll a, ll b) { ll res = 1; while (b > 0) { if (b & 1) res = mMul(res, a); a = mMul(a, a); b >>= 1; } return res; }\r\n\r\nconst int ncr_sz = 2e5 + 1;\r\nll fact[ncr_sz], inv[ncr_sz];\r\n\r\nvoid makeFact(){\r\n    fact[0] = 1;\r\n    for(ll i=1; i<ncr_sz; i++){\r\n        fact[i] = mMul(fact[i-1], i);\r\n        inv[i] = mBinPow(i, MOD - 2);\r\n    }\r\n}\r\n\r\nll get_inv(ll x){\r\n    if(x<ncr_sz)    return inv[x];\r\n    return mBinPow(x, MOD - 2);\r\n}\r\n\r\nll divi(ll a, ll b){\r\n    return mMul(a, get_inv(b));\r\n}\r\n\r\nll ncr(ll n, ll r){\r\n    if(n < r)   return 0;\r\n    return divi(fact[n], mMul(fact[r], fact[n-r]));\r\n}\r\n\r\n // MAIN FUNCTION\r\n    \r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(NULL);\r\n    \r\n    init_code();\r\n\r\n    int n, k;\r\n    cin >> n >> k;\r\n\r\n    makeFact();\r\n\r\n    gp_hash_table<int, int, chash> open_cnt, close_cnt;\r\n    set<int> st;\r\n    ll ans = 0;\r\n\r\n    for(int i=1; i<=n; i++){\r\n        int l, r;\r\n        cin >> l >> r;\r\n        st.insert(l);\r\n        st.insert(r);\r\n        open_cnt[l]++;\r\n        close_cnt[r]++;\r\n    }\r\n\r\n    int running_seg_cnt = 0;\r\n    int cnt[n + 1 - k];\r\n    memset(cnt, 0, sizeof(cnt));\r\n\r\n    for(auto it=st.begin(); it!=st.end();){\r\n        int pt = *it;\r\n        running_seg_cnt += open_cnt[pt];\r\n        if(running_seg_cnt >= k)\r\n        cnt[running_seg_cnt - k]++;\r\n        running_seg_cnt -= close_cnt[pt];\r\n        ++it;\r\n        if(it == st.end())  break;\r\n        int pt_cnt = *it - pt - 1;\r\n        if(running_seg_cnt >= k)\r\n            cnt[running_seg_cnt - k] += pt_cnt;\r\n\r\n    }\r\n\r\n    for(int i=0; i<n - k + 1; i++){\r\n        ans += (ncr(i + k, k) * cnt[i]) % MOD;\r\n        ans %= MOD;\r\n    }\r\n\r\n    cout << ans;\r\n\r\n    return 0;\r\n}"
}