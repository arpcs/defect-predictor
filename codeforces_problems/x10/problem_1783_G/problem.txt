{
    "contestId": 1783,
    "index": "G",
    "name": "Weighed Tree Radius",
    "type": "PROGRAMMING",
    "rating": 2800,
    "tags": [
        "data structures",
        "divide and conquer",
        "implementation",
        "trees"
    ],
    "desc": {
        "title": "G. Weighed Tree Radius",
        "statement": "<p>You are given a tree of $$$n$$$ vertices and $$$n - 1$$$ edges. The $$$i$$$-th vertex has an initial weight $$$a_i$$$.</p><p>Let the <span class=\"tex-font-style-it\">distance</span> $$$d_v(u)$$$ from vertex $$$v$$$ to vertex $$$u$$$ be the number of edges on the path from $$$v$$$ to $$$u$$$. Note that $$$d_v(u) = d_u(v)$$$ and $$$d_v(v) = 0$$$.</p><p>Let the <span class=\"tex-font-style-it\">weighted</span> distance $$$w_v(u)$$$ from $$$v$$$ to $$$u$$$ be $$$w_v(u) = d_v(u) + a_u$$$. Note that $$$w_v(v) = a_v$$$ and $$$w_v(u) \\neq w_u(v)$$$ if $$$a_u \\neq a_v$$$.</p><p>Analogically to usual distance, let's define the <span class=\"tex-font-style-it\">eccentricity</span> $$$e(v)$$$ of vertex $$$v$$$ as the greatest weighted distance from $$$v$$$ to any other vertex (including $$$v$$$ itself), or $$$e(v) = \\max\\limits_{1 \\le u \\le n}{w_v(u)}$$$.</p><p>Finally, let's define the <span class=\"tex-font-style-it\">radius</span> $$$r$$$ of the tree as the minimum eccentricity of any vertex, or $$$r = \\min\\limits_{1 \\le v \\le n}{e(v)}$$$.</p><p>You need to perform $$$m$$$ queries of the following form: </p><ul> <li> $$$v_j$$$ $$$x_j$$$\u00a0\u2014 assign $$$a_{v_j} = x_j$$$. </li></ul><p>After performing each query, print the radius $$$r$$$ of the current tree.</p>",
        "inputSpecification": "<p>The first line contains the single integer $$$n$$$ ($$$2 \\le n \\le 2 \\cdot 10^5$$$)\u00a0\u2014 the number of vertices in the tree.</p><p>The second line contains $$$n$$$ integers $$$a_1, \\dots, a_n$$$ ($$$0 \\le a_i \\le 10^6$$$)\u00a0\u2014 the initial weights of vertices.</p><p>Next $$$n - 1$$$ lines contain edges of tree. The $$$i$$$-th line contains two integers $$$u_i$$$ and $$$v_i$$$ ($$$1 \\le u_i, v_i \\le n$$$; $$$u_i \\neq v_i$$$)\u00a0\u2014 the corresponding edge. The given edges form a tree.</p><p>The next line contains the single integer $$$m$$$ ($$$1 \\le m \\le 10^5$$$)\u00a0\u2014 the number of queries.</p><p>Next $$$m$$$ lines contain queries\u00a0\u2014 one query per line. The $$$j$$$-th query contains two integers $$$v_j$$$ and $$$x_j$$$ ($$$1 \\le v_j \\le n$$$; $$$0 \\le x_j \\le 10^6$$$)\u00a0\u2014 a vertex and it's new weight.</p>",
        "outputSpecification": "<p>Print $$$m$$$ integers\u00a0\u2014 the radius $$$r$$$ of the tree after performing each query.</p>",
        "samples": [
            {
                "input": "\n6\n1 3 3 7 0 1\n2 1\n1 3\n1 4\n5 4\n4 6\n5\n4 7\n4 0\n2 5\n5 10\n5 5\n",
                "output": "\n7\n4\n5\n10\n7\n"
            }
        ],
        "note": "<p>After the first query, you have the following tree: </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/16cb3c57153b17a0962fb22ea23a08f261d5a191.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center> The marked vertex in the picture is the vertex with minimum $$$e(v)$$$, or $$$r = e(4) = 7$$$. The eccentricities of the other vertices are the following: $$$e(1) = 8$$$, $$$e(2) = 9$$$, $$$e(3) = 9$$$, $$$e(5) = 8$$$, $$$e(6) = 8$$$.<p>The tree after the second query: </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/ebddea5fec4f7d582c925e84aa6b883fb8f30d62.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center> The radius $$$r = e(1) = 4$$$.<p>After the third query, the radius $$$r = e(2) = 5$$$: </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/baf49de56913ca2bcfe77aed6f7cdcfdff4811de.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center>"
    },
    "suggested_categories": [
        "graph theory",
        "tree algorithms",
        "graph traversal",
        "data structures",
        "dynamic programming",
        "optimization",
        "algorithms",
        "mathematics",
        "queries",
        "vertex weight",
        "tree radius",
        "distance calculation",
        "eccentricity",
        "weighted distance",
        "minimum eccentricity",
        "graph representation",
        "tree visualization",
        "vertex manipulation",
        "complexity analysis",
        "coding contest"
    ]
}