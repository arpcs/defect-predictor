{
    "id": 225048801,
    "contestId": 1783,
    "creationTimeSeconds": 1695631550,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1783,
        "index": "G",
        "name": "Weighed Tree Radius",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "data structures",
            "divide and conquer",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1783,
        "members": [
            {
                "handle": "Warriors_fsy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1673188500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 826,
    "memoryConsumedBytes": 44544000,
    "source": "#include <bits/stdc++.h>\r\n#define cs const\r\n#define pb push_back\r\nusing namespace std;\r\nusing ll = long long ; \r\nusing pi = pair <int, int> ; \r\n\r\nbool cmx(int & x, int y) {\r\n    if(x < y) return x = y, 1; \r\n    return 0; \r\n}\r\ncs int N = 2e5 + 5;  \r\n\r\nint n, m;\r\nint a[N];\r\nvector <int> e[N];\r\nint mn[20][N];\r\nint in[N], dfn, d[N]; \r\n\r\nint ck(int x, int y) {\r\n    return in[x] < in[y] ? x : y;\r\n}\r\nvoid dfs(int u, int f) {\r\n    mn[0][dfn] = f; \r\n    in[u] = ++ dfn; \r\n    d[u] = d[f] + 1; \r\n    for(int v : e[u])\r\n    if(v != f) {\r\n        dfs(v, u);\r\n    }\r\n}\r\nint lca(int u, int v) {\r\n    if(u == v) return u; \r\n    u = in[u], v = in[v];\r\n    if(u > v) swap(u, v);\r\n    int x = __lg(v - u);\r\n    return ck(mn[x][u], mn[x][v - (1 << x)]);\r\n}\r\nint dist(int x, int y) {\r\n    return d[x] + d[y] - 2 * d[lca(x, y)] + a[x] + a[y];\r\n}\r\n\r\n#define mid ((l + r) >> 1)\r\npi s[N << 2];\r\nvoid pushup(int x) {\r\n    auto [a, b] = s[x << 1];\r\n    auto [c, d] = s[x << 1 | 1];\r\n    int dis = dist(a, b);\r\n    pi ans = {a, b};\r\n    if(cmx(dis, dist(a, c))) ans = {a, c};\r\n    if(cmx(dis, dist(a, d))) ans = {a, d};\r\n    if(cmx(dis, dist(b, c))) ans = {b, c};\r\n    if(cmx(dis, dist(b, d))) ans = {b, d};\r\n    if(cmx(dis, dist(c, d))) ans = {c, d};\r\n    s[x] = ans; \r\n}\r\nvoid build(int x, int l, int r) {\r\n    if(l == r) return s[x] = {l, l}, void();\r\n    build(x << 1, l, mid);\r\n    build(x << 1 | 1, mid + 1, r);\r\n    pushup(x);\r\n}\r\nvoid mdf(int x, int l, int r, int p) {\r\n    if(l == r) return;\r\n    (p <= mid) ? mdf(x << 1, l, mid, p) : mdf(x << 1 | 1, mid + 1, r, p);\r\n    pushup(x);\r\n}\r\n#undef mid\r\n\r\nvoid Main() {\r\n    cin >> n;\r\n    for(int i = 1; i <= n; i++)\r\n        scanf(\"%d\", & a[i]);\r\n    for(int i = 1, u, v; i < n; i++) {\r\n        scanf(\"%d%d\", &u, &v);\r\n        e[u].pb(v);\r\n        e[v].pb(u);\r\n    }\r\n    dfs(1, 0);\r\n    for(int i = 1; i < 20; i++)\r\n    for(int j = 1; j + (1 << i) - 1 <= n; j++)\r\n    mn[i][j] = ck(mn[i - 1][j], mn[i - 1][j + (1 << (i - 1))]);\r\n\r\n\r\n    build(1, 1, n); \r\n    \r\n    cin >> m; \r\n    while(m --) {\r\n        int x, w; \r\n        scanf(\"%d%d\", &x, &w);\r\n        a[x] = w; \r\n        mdf(1, 1, n, x);\r\n        auto [u, v] = s[1];\r\n        int d = (1 + dist(u, v)) / 2; \r\n        d = max({d, a[u], a[v]});\r\n        cout << d << '\\n';\r\n    }\r\n}\r\n\r\nint main() {\r\n    #ifdef zqj\r\n    freopen(\"1.in\",\"r\",stdin);\r\n    #endif\r\n    Main();\r\n    return 0; \r\n}"
}