{
    "id": 230435302,
    "contestId": 1783,
    "creationTimeSeconds": 1698629924,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1783,
        "index": "G",
        "name": "Weighed Tree Radius",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "data structures",
            "divide and conquer",
            "implementation",
            "trees"
        ]
    },
    "author": {
        "contestId": 1783,
        "members": [
            {
                "handle": "Sparkle_Twilight"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1673188500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 27750400,
    "source": "#include <bits/stdc++.h>\r\n#define rep(i, l, r) for(int i = (l); i <= (r); i++)\r\n#define per(i, r, l) for(int i = (r); i >= (l); i--)\r\n#define mem(a, b) memset(a, b, sizeof a)\r\n#define For(i, l, r) for(int i = (l), i##e = (r); i < i##e; i++)\r\n#define pb push_back\r\n#define eb emplace_back\r\nusing namespace std;\r\nconst int N = 2e5 + 8, M = 1 << 18;\r\nint n, m, a[N], idx, dfn[N], dep[N], c[M << 1][6];\r\nvector<int> G[N];\r\nvoid dfs(int u, int f, int d) {\r\ndfn[u] = ++idx, dep[idx] = d;\r\nc[M + idx][0] = -d * 2;\r\nc[M + idx][1] = a[u];\r\nc[M + idx][2] = d + a[u];\r\nc[M + idx][4] = a[u] - d;\r\nfor(int v : G[u]) if(v != f) dfs(v, u, d + 1);\r\n}\r\ninline void pu(int i) {\r\nint l = i * 2, r = i * 2 + 1;\r\nc[i][1] = max(c[l][1], c[r][1]);\r\nc[i][2] = max(c[l][2], c[r][2]);\r\nc[i][3] = max({c[l][3], c[r][3], c[l][2] + c[r][0]});\r\nc[i][4] = max({c[l][4], c[r][4], c[l][0] + c[r][2]});\r\nc[i][5] = max({c[l][5], c[r][5], c[l][2] + c[r][4], c[l][3] + c[r][2]});\r\n}\r\nint main() {\r\ncin.tie(0)->sync_with_stdio(0);\r\ncin >> n;\r\nrep(i, 1, n) cin >> a[i];\r\nint u, v;\r\nrep(i, 2, n) cin >> u >> v, G[u].pb(v), G[v].pb(u);\r\nmemset(c + M, 192, sizeof c / 2);\r\ndfs(1, 0, 0);\r\nper(i, M - 1, 1) c[i][0] = max(c[i * 2][0], c[i * 2 + 1][0]), pu(i);\r\ncin >> m;\r\nwhile(m--) {\r\ncin >> u >> v, u = dfn[u] + M;\r\nc[u][1] = v, c[u][2] = dep[u - M] + v, c[u][4] = v - dep[u - M];\r\nwhile(u >>= 1) pu(u);\r\ncout << max(c[1][1], c[1][5] + 3 >> 1) << '\\n';\r\n}\r\n}"
}