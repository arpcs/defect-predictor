{
    "id": 229199774,
    "contestId": 453,
    "creationTimeSeconds": 1697970435,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 453,
        "index": "C",
        "name": "Little Pony and Summer Sun Celebration",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2200,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 453,
        "members": [
            {
                "handle": "root-shafi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1406907000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 24,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 7270400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvector<int> adj[100005], ans;\r\nint arr[100005], mark[100005], o = -1;\r\n\r\nint dfs2(int v, int par) {\r\n    mark[v] = 1;\r\n    int k = 1;\r\n    ans.push_back(v);\r\n    for (int u : adj[v]) {\r\n        if (!mark[u]) {\r\n            k += dfs2(u, v);\r\n            ans.push_back(v);\r\n            k++;\r\n        }\r\n    }\r\n    if (par == -1) {\r\n        if (k % 2 != arr[v]) {\r\n            ans.pop_back();\r\n        }\r\n        return 0;\r\n    }\r\n    if (k % 2 == arr[v]) {\r\n        return 0;\r\n    }\r\n    ans.push_back(par);\r\n    ans.push_back(v);\r\n    return 1;\r\n}\r\n\r\nint k;\r\n\r\nvoid dfs1(int v) {\r\n    mark[v] = 1;\r\n    if (arr[v]) k = 1;\r\n    for (int u : adj[v]) {\r\n        if (!mark[u]) {\r\n            dfs1(u);\r\n        }\r\n    }\r\n}\r\n\r\nint main() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    for (int i = 0; i < m; i++) {\r\n        int u, v;\r\n        cin >> u >> v;\r\n        adj[v].push_back(u);\r\n        adj[u].push_back(v);\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        cin >> arr[i];\r\n    }\r\n    for (int i = 1; i <= n; i++) {\r\n        if(!mark[i]) {\r\n            k = 0;\r\n            dfs1(i);\r\n            if (k) {\r\n                if (o != -1) {\r\n                    cout << -1 << '\\n';\r\n                    return 0;\r\n                }\r\n                o = i;\r\n            }\r\n        }\r\n    }\r\n    memset(mark, 0, sizeof(mark));\r\n    if (o != -1)\r\n    dfs2(o, -1);\r\n    cout << ans.size() << '\\n';\r\n    for (int i = 0; i < ans.size(); i++) cout << ans[i] << ' ';\r\n    return 0;\r\n}"
}