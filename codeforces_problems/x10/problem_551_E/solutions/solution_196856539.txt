{
    "id": 196856539,
    "contestId": 551,
    "creationTimeSeconds": 1678479080,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 551,
        "index": "E",
        "name": "GukiZ and GukiZiana",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "binary search",
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 551,
        "members": [
            {
                "handle": "__finn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1434127500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 73,
    "timeConsumedMillis": 7472,
    "memoryConsumedBytes": 47206400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\n#pragma GCC optimize(\"O3\")\n#pragma GCC target(\"avx2\")\n\nconstexpr size_t N = 500000, K = 600;\n\nint64_t a[N], shift[N / K + 1];\nunordered_map<int64_t, set<int64_t>> s[N / K + 1];\n\nint main()\n{\n    ios_base::sync_with_stdio(0);\n    cin.tie(0);\n\n    size_t n, q;\n    cin >> n >> q;\n\n    for (size_t i = 0; i < n; i++)\n    {\n        cin >> a[i];\n        s[i / K][a[i]].insert(i);\n    }\n\n    while (q--)\n    {\n        size_t t;\n        cin >> t;\n\n        if (t == 1)\n        {\n            size_t l, r;\n            int64_t x;\n            cin >> l >> r >> x;\n            l--, r--;\n            size_t const b1 = l / K, b2 = (r + 1) / K;\n            for (size_t i = b1 + 1; i < b2; i++)\n                shift[i] += x;\n\n            for (size_t i = l; i < (b1 + 1) * K && i <= r; i++)\n            {\n                auto it = s[b1].find(a[i]);\n                it->second.erase(i);\n                if (it->second.empty())\n                    s[b1].erase(it);\n                s[b1][a[i] + x].insert(i);\n                a[i] += x;\n            }\n            if (b1 != b2)\n                for (size_t i = b2 * K; i <= r; i++)\n                {\n                    auto it = s[b2].find(a[i]);\n                    it->second.erase(i);\n                    if (it->second.empty())\n                        s[b2].erase(it);\n                    s[b2][a[i] + x].insert(i);\n                    a[i] += x;\n                }\n        }\n        else\n        {\n            int64_t y;\n            cin >> y;\n            size_t imin = SIZE_MAX;\n            for (size_t i = 0; i * K <= n; i++)\n            {\n                auto const it = s[i].find(y - shift[i]);\n                if (it != s[i].end())\n                {\n                    imin = *it->second.begin();\n                    break;\n                }\n            }\n            if (imin == SIZE_MAX)\n                cout << \"-1\\n\";\n            else\n            {\n                for (size_t i = (n - 1) / K; i <= (n - 1) / K; i--)\n                {\n                    auto const it = s[i].find(y - shift[i]);\n                    if (it != s[i].end())\n                    {\n                        cout << *(--it->second.end()) - imin << '\\n';\n                        break;\n                    }\n                }\n            }\n        }\n    }\n}"
}