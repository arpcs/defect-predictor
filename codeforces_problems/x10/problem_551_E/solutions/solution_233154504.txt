{
    "id": 233154504,
    "contestId": 551,
    "creationTimeSeconds": 1700235840,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 551,
        "index": "E",
        "name": "GukiZ and GukiZiana",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "binary search",
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 551,
        "members": [
            {
                "handle": "MOon_Or"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1434127500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 1746,
    "memoryConsumedBytes": 169779200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define fast_io ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n#define ll long long int\r\n#define F first\r\n#define S second\r\nconst int maxn = 5e5 + 10;\r\nconst int sq = 700;\r\nmap <pair<int, int> , int> le, ri;\r\nll a[maxn], num[maxn]; int n, lft, rght;\r\n\r\nvoid upd(int part){\r\n\tfor(int i = part * sq; i < min(n, (part + 1) * sq); i++){\r\n\t\tif(a[i] <= 1e9){\r\n\t\t\tle[{part, a[i]}] = 1e9, ri[{part, a[i]}] = -1;\r\n\t\t}\r\n\t}\r\n\tfor(int i = part * sq; i < min(n, (part + 1) * sq); i++){\r\n\t\tif(a[i] <= 1e9){\r\n\t\t\tle[{part, a[i]}] = min(le[{part, a[i]}], i + 1); ri[{part, a[i]}] = i + 1;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid add(){\r\n\tint l, r, x;\r\n\tcin >> l >> r >> x; l--; r--;\r\n\tif((l / sq) == (r / sq)){\r\n\t\tfor(int i = l; i <= r; i++){\r\n\t\t\tle[{l / sq, a[i]}] = 0;\r\n\t\t\ta[i] += x;\r\n\t\t}\r\n\t\tupd(l / sq);\r\n\t\treturn;\r\n\t}\r\n\tfor(int i = l; i < ((l / sq) + 1) * sq; i++){\r\n\t\tle[{l / sq, a[i]}] = 0; \r\n\t\ta[i] += x;\r\n\t}\r\n\tfor(int i = ((l / sq) + 1); i < (r / sq); i++){\r\n\t\tnum[i] += x;\r\n\t}\r\n\tfor(int i = (r / sq) * sq; i <= r; i++){\r\n\t\tri[{r / sq, a[i]}] = 0;\r\n\t\ta[i] += x;\r\n\t}\r\n\tupd(l / sq); upd(r / sq);\r\n}\r\n\r\nvoid get_ans_part(int part, int y){\r\n\tif(y < num[part])\r\n\t\treturn;\r\n\ty -= num[part];\r\n\tif(le[{part, y}] != 0){\r\n\t\tlft = min(le[{part, y}], lft); rght = max(ri[{part, y}], rght);\r\n\t}\r\n}\r\n\r\nvoid get_ans(int y){\r\n\tlft = 1e9, rght = -1;\r\n\tfor(int i = 0; i < n; i += sq){\r\n\t\tget_ans_part(i / sq, y);\r\n\t}\r\n\tif(rght == -1){\r\n\t\tcout << -1;\r\n\t\treturn;\r\n\t}\r\n\tcout << rght - lft;\r\n}\r\n\r\nint main(){\r\n\tfast_io;\r\n\tint q;\r\n\tcin >> n >> q;\r\n\tfor(int i = 0; i < n; i++){\r\n\t\tcin >> a[i];\r\n\t}\r\n\tfor(int i = 0; i < n; i += sq){\r\n\t\tupd(i / sq);\r\n\t}\r\n\tfor(int i = 0; i < q; i++){\r\n\t\tint t; cin >> t;\r\n\t\tif(t == 1){\r\n\t\t\tadd();\r\n\t\t}\r\n\t\tif(t == 2){\r\n\t\t\tint y; cin >> y;\r\n\t\t\tget_ans(y);\r\n\t\t\tcout << \"\\n\";\r\n\t\t}\r\n\t}\r\n}\r\n"
}