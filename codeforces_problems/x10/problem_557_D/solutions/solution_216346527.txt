{
    "id": 216346527,
    "contestId": 557,
    "creationTimeSeconds": 1690653152,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 557,
        "index": "D",
        "name": "Vitaly and Cycle",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "dfs and similar",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 557,
        "members": [
            {
                "handle": "tomas_fang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1435676400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\nconst int maxn = 100005;\nvector<int> g[maxn];\nint d[maxn];\nint depth[maxn];\nlong long cnt0, cnt1;\nbool dfs(int u, int dep) {\n  depth[u] = dep;\n  if (dep % 2 == 0)\n    cnt0++;\n  else\n    cnt1++;\n  int size = g[u].size();\n  int i;\n  for (i = 0; i < size; i++) {\n    int v = g[u][i];\n    if (depth[v] == -1) {\n      if (dfs(v, dep + 1))\n        return 1;\n    } else {\n      if ((depth[u] - depth[v]) % 2 == 0)\n        return 1;\n    }\n  }\n  return 0;\n}\nint main() {\n  long long n, m;\n  while (cin >> n >> m) {\n    int i, j, u, v;\n    memset(d, 0, sizeof(d));\n    for (i = 0; i < m; i++) {\n      g[i].clear();\n    }\n    for (i = 0; i < m; i++) {\n      scanf(\"%d %d\", &u, &v);\n      g[u].push_back(v);\n      g[v].push_back(u);\n      d[u]++;\n      d[v]++;\n    }\n    long long ans;\n    if (m == 0) {\n      ans = n * (n - 1) * (n - 2) / 6;\n      printf(\"3 %\n// VTZfSNbXpEdfvyTtFGbcbqDZaJvksLVgZOdvLfvLOQMJyhELxbADijWRqSecqgtBkxEubwySayNlhryLixAdDAcYCDHKwQnOeQseNtmrIGEWnSnSArdtUvMbHOuBCBna"
}