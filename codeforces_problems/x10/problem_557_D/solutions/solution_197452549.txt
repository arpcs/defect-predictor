{
    "id": 197452549,
    "contestId": 557,
    "creationTimeSeconds": 1678846932,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 557,
        "index": "D",
        "name": "Vitaly and Cycle",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "dfs and similar",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 557,
        "members": [
            {
                "handle": "DummyT"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1435676400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 2969600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nvector<int> edges[100010];\r\nbool visited[100010];\r\nint dist[100010];\r\nbool dupe[100010];\r\npriority_queue<int> totalEdge;\r\n\r\nint totalVertex;\r\nbool loop = false;\r\nint defact = 0;\r\n\r\nvoid cycleCheck(int n){\r\n\r\n    stack<int> q;\r\n    q.push(n);\r\n    // visited[n] = true;\r\n    dist[n] = 0;\r\n\r\n    while(!q.empty()){\r\n\r\n        int curr = q.top();\r\n        q.pop();\r\n        if(!visited[curr]){\r\n\r\n            visited[curr] = true;\r\n\r\n            for(int i = 0; i < edges[curr].size(); i++){\r\n\r\n                if(!visited[edges[curr][i]]){\r\n\r\n                    // visited[edges[curr][i]] = true;\r\n                    dist[edges[curr][i]] = dist[curr] + 1;\r\n                    q.push(edges[curr][i]);\r\n\r\n                }else if(dist[curr] % 2 == dist[edges[curr][i]] % 2){\r\n                    loop = true;\r\n                    break;\r\n                }else if(abs(dist[curr] - dist[edges[curr][i]]) == 3){\r\n                    defact += 2;\r\n                }\r\n                \r\n            }\r\n            if(loop) break;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nvoid oneCase(){\r\n\r\n    int cnt = 0;\r\n\r\n    while(!totalEdge.empty() && totalEdge.top() == 1){\r\n        cnt++;\r\n        totalEdge.pop();\r\n    }\r\n\r\n    cnt /= 2;\r\n\r\n    cnt *= --totalVertex / 2;\r\n    cout << 2 << \" \" << cnt << endl;\r\n\r\n}\r\n\r\nvoid solve(){\r\n\r\n    for(int i = 1; i < totalVertex; i++){\r\n        if(!visited[i]) cycleCheck(i);\r\n        if(loop) break;\r\n    }\r\n\r\n    // for(int i = 1; i <= 4; i++) cout << dist[i] << \" \";\r\n\r\n    if(loop) cout << 0 << \" \" << 1 << endl;\r\n    else{\r\n\r\n        int cnt = 0;\r\n        while(!totalEdge.empty() && totalEdge.top() > 2){\r\n            cnt += totalEdge.top() - 1;\r\n            totalEdge.pop();\r\n        }\r\n\r\n        while(!totalEdge.empty() && totalEdge.top() == 2){\r\n            cnt += 1;\r\n            totalEdge.pop();\r\n        }\r\n\r\n        cnt -= defact;\r\n\r\n        cout << 1 << \" \" << cnt << endl;\r\n\r\n    }\r\n\r\n}\r\n\r\nint main(){\r\n\r\n    memset(visited, false, sizeof(visited));\r\n    memset(dupe, false, sizeof(dupe));\r\n\r\n    int n;\r\n    cin >> totalVertex >> n;\r\n\r\n    if(n == 0){\r\n        cout << 3 << \" \" << (totalVertex * (totalVertex - 1) * (totalVertex - 2)) / 6 << endl;\r\n        return 0;\r\n    }\r\n\r\n    totalVertex++;\r\n\r\n    while(n--){\r\n\r\n        int a, b;\r\n        cin >> a >> b;\r\n        \r\n        edges[a].push_back(b);\r\n        edges[b].push_back(a);\r\n\r\n    }\r\n\r\n    for(int i = 1; i < totalVertex; i++){\r\n        totalEdge.push(edges[i].size());\r\n    }\r\n\r\n    if(totalEdge.top() == 1) oneCase();\r\n    else solve();\r\n\r\n}"
}