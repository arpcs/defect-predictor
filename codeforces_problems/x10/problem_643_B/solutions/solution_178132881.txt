{
    "id": 178132881,
    "contestId": 643,
    "creationTimeSeconds": 1666889937,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 643,
        "index": "B",
        "name": "Bear and Two Paths",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1600,
        "tags": [
            "constructive algorithms",
            "graphs"
        ]
    },
    "author": {
        "contestId": 643,
        "members": [
            {
                "handle": "kumarankur507"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1462633500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 1638400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define endl \"\\n\"\r\n#define int long long\r\n#define fori(i, k, n) for (int i = k; i < n; i++)\r\n#define vi vector<int>\r\n#define pii pair<int,int>\r\n#define sp \" \"\r\n#define pb push_back\r\n#define ff first\r\n#define ss second \r\n#define vvi vector<vector<int>>\r\nconst double EPS=1e-7;\r\nconst int N= 100007;  //(1e5+7)\r\n//starts\r\nint binexp (int x, int y)\r\n{\r\n    if (y==0) return 1;\r\n    if (y%2==0)\r\n    {\r\n        int temp=binexp(x,y/2);\r\n        return temp*temp;\r\n    }\r\n    return x*binexp(x,y/2)*binexp(x,y/2);\r\n}\r\n\r\n//DSU IMPLEMENTATION****************\r\nconst int MAX=N;\r\nint par[MAX]; //declare the parent array\r\nint rnk[MAX];\r\nvoid make_set (int n)\r\n{\r\n    fori (i,0,n){\r\n        par[i]=i; //initially we assume that each of the element is in its own set\r\n        rnk[i]=1;//since each element is in its own set, size of that set is 1\r\n    }\r\n}\r\nint find_set(int x)\r\n{\r\n    if (par[x]==x){\r\n        return x;\r\n    }\r\n    par[x]=find_set(par[x]);\r\n    return par[x];\r\n}\r\n\r\nvoid union_set(int a, int b){\r\n    int p1=find_set(a);\r\n    int p2=find_set(b);\r\n    if (p1==p2) return; //they both belong to the same set so no need to take union\r\n    if (rnk[p1]>rnk[p2]){\r\n        //always merge the smaller one with the larger one \r\n        par[p2]=p1;\r\n        //so now p1 becomes representative of the union set\r\n        rnk[p1]=rnk[p2]+rnk[p1]; //total elemnts\r\n    }\r\n    else{\r\n        par[p1]=p2;\r\n        rnk[p2]=rnk[p1]+rnk[p2];\r\n    }\r\n}\r\n//ends\r\n//vector<vi> g(N);\r\nint32_t main ()\r\n{\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n    int n,k; cin>>n>>k;\r\n    int a,b,c,d;\r\n    cin>>a>>b>>c>>d;\r\n    if (k<n+1) {\r\n    \tcout<<-1;\r\n    \treturn 0;\r\n    }\r\n    vector<bool> vis(1001, false);\r\n    cout<<a<<sp<<c<<sp;\r\n    vis[a]=vis[b]=vis[c]=vis[d]=true;\r\n    fori (i,1,n+1){\r\n    \tif (vis[i]) continue;\r\n    \tcout<<i<<sp;\r\n    }  \r\n    cout<<d<<sp<<b<<endl;\r\n    cout<<c<<sp<<a<<sp;\r\n    fori (i,1,n+1){\r\n    \tif (vis[i]) continue;\r\n    \tcout<<i<<sp;\r\n    }  \r\n    cout<<b<<sp<<d<<endl;\r\n    \r\n}\r\n"
}