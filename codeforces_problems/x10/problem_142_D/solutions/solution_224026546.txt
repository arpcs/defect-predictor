{
    "id": 224026546,
    "contestId": 142,
    "creationTimeSeconds": 1695122447,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 142,
        "index": "D",
        "name": "Help Shrek and Donkey 2",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2600,
        "tags": [
            "games"
        ]
    },
    "author": {
        "contestId": 142,
        "members": [
            {
                "handle": "ORzyzRO"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1326380700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 125217457\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define pr pair<int, int>\r\n#define pb push_back\r\n#define mid (l + r) / 2\r\n#define ls num << 1\r\n#define rs num << 1 | 1\r\n\r\nconst int N = 105;\r\n\r\nint pos[N][2], p[N], cnt[8];\r\n\r\ninline int read() {\r\n    int x = 0, m = 1;\r\n    char ch = getchar();\r\n\r\n    while (!isdigit(ch)) {\r\n        if (ch == '-') m = -1;\r\n        ch = getchar();\r\n    }\r\n\r\n    while (isdigit(ch)) {\r\n        x = x * 10 + ch - 48;\r\n        ch = getchar();\r\n    }\r\n\r\n    return x * m;\r\n}\r\n\r\ninline void write(int x) {\r\n    if (x < 0) {\r\n        putchar('-');\r\n        write(-x);\r\n        return;\r\n    }\r\n\r\n    if (x >= 10) write(x / 10);\r\n    putchar(x % 10 + 48);\r\n}\r\n\r\nsigned main() {\r\n    int n = read(), m = read(), k = read();\r\n\r\n    if (m == 1) {\r\n        puts(\"Second\");\r\n        return 0;\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        pos[i][0] = pos[i][1] = 0;\r\n        for (int j = 1; j <= m; j++) {\r\n            char ch = getchar();\r\n            while (ch != 'G' && ch != 'R' && ch != '-') ch = getchar();\r\n\r\n            if (ch == 'G') {\r\n                pos[i][0] += j;\r\n            }\r\n            if (ch == 'R') {\r\n                pos[i][1] += j;\r\n            }\r\n        }\r\n\r\n        if (pos[i][0] == 0 && pos[i][1] > 0) {\r\n            if (m > 2 || pos[i][1] <= m) p[1] = 1;\r\n        }\r\n        if (pos[i][0] > 0 && pos[i][1] == 0) {\r\n            if (m > 2 || pos[i][0] <= m) p[0] = 1;\r\n        }\r\n    }\r\n\r\n    if (p[0] && p[1]) {\r\n        puts(\"Draw\");\r\n        return 0;\r\n    }\r\n\r\n    if (p[0]) {\r\n        puts(\"First\");\r\n        return 0;\r\n    }\r\n\r\n    if (p[1]) {\r\n        puts(\"Second\");\r\n        return 0;\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++) {\r\n        if (pos[i][0] == 0 || pos[i][1] == 0) continue;\r\n        int len = abs(pos[i][0] - pos[i][1]);\r\n\r\n        for (int j = 0; j < 7; j++) {\r\n            if ((len >> j) & 1) {\r\n                cnt[j]++;\r\n            }\r\n        }\r\n    }\r\n\r\n    int P = 1;\r\n\r\n    for (int i = 0; i < 7; i++) {\r\n        if (cnt[i] % (k + 1) != 0) {\r\n            P = 0;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (P) puts(\"Second\");\r\n    else puts(\"First\");\r\n}"
}