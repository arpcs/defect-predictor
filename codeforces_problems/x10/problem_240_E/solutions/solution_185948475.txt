{
    "id": 185948475,
    "contestId": 240,
    "creationTimeSeconds": 1671453755,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 240,
        "index": "E",
        "name": "Road Repairs",
        "type": "PROGRAMMING",
        "rating": 2800,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 240,
        "members": [
            {
                "handle": "SeShaShi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1350370800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 614400,
    "source": "// #pragma GCC optimize(\"O3,unroll-loops\")\r\n// #pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n#include <bits/stdc++.h>\r\n#define int long long int\r\n#define dint long double\r\n#define endl \"\\n\"\r\n#define pii pair<int, int>\r\n#define pb push_back\r\n#define F first\r\n#define S second\r\n\r\nusing namespace std;\r\n// typedef long long ll;\r\n\r\nconst int MOD = (int)998244353;\r\nconst int MAXN = (int)1e4 + 23;\r\nconst int MAX_LOG = 17 + 1;\r\nconst int INF = (int)8e18 + 23;\r\n\r\n\r\nint n, m, t, tmp, k, v, w, u, l, s, r, mid, s1, s2, f;\r\nint arr[MAXN], repair[MAXN], seen[MAXN], dist[MAXN];\r\npriority_queue<pii, vector<pii>, greater<pii>> pq;\r\nvector<pii> adj[MAXN];\r\nvector<int> ans;\r\n\r\n\r\nvoid DFS(int v) {\r\n    seen[v] = 1;\r\n\r\n    for (auto u:adj[v]) {\r\n        if (!seen[u.F]) DFS(u.F);\r\n    }\r\n}\r\n\r\n\r\nint32_t main() {\r\n\tios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n    // freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    cin >> n >> m;\r\n\r\n    for (int i=0; i<m; i++) {\r\n        cin >> u >> v >> w;\r\n\r\n        repair[i] = w;\r\n\r\n        adj[u].pb({v, i});\r\n    }\r\n\r\n    // it could be?\r\n    DFS(1);\r\n\r\n    for (int i=1; i<=n; i++) {\r\n        if (!seen[i]) {\r\n            cout << -1;\r\n            exit(0);\r\n        }\r\n    }\r\n\r\n\r\n    queue<int> Q;\r\n    Q.push(1);\r\n    dist[1] = -1;\r\n\r\n\r\n    while (!Q.empty()) {\r\n        u = Q.front();\r\n        Q.pop();\r\n\r\n\r\n        for (auto cur:adj[u]) {\r\n            u = cur.F;\r\n\r\n            if (dist[u] == -1 || (dist[u] > 0 && repair[cur.S] == 1)) continue;\r\n\r\n\r\n            if (!repair[cur.S]) {\r\n                dist[u] = -1;\r\n            } else {\r\n                dist[u] = cur.S;\r\n            }\r\n            Q.push(u);\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    for (int i=1; i<=n; i++) {\r\n        if (dist[i] != -1) {\r\n            ans.pb(dist[i]+1);\r\n        }\r\n    }\r\n    \r\n    cout << ans.size() << endl;\r\n    for (int w:ans) cout << w << \" \";\r\n\r\n\r\n    \r\n\r\n\r\n    return 0;\r\n}"
}