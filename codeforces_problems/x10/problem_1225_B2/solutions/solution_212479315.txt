{
    "id": 212479315,
    "contestId": 1225,
    "creationTimeSeconds": 1688682650,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1225,
        "index": "B2",
        "name": "TV Subscriptions (Hard Version)",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1300,
        "tags": [
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1225,
        "members": [
            {
                "handle": "Omnilis"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572087900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n\r\n/*\r\n#include <ext/pb_ds/assoc_container.hpp>\r\nusing namespace __gnu_pbds;\r\ntemplate <class T>\r\nusing Tree = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n*/\r\n\r\n\r\n#ifdef LOCAL\r\n#include \"algo/debug.h\"\r\n#else\r\n#define debug(...) 42\r\n#endif\r\n\r\n#define rep(i, n) for (int i = 0; i < (n); ++i)\r\n#define rep1(i, n) for (int i = 1; i < (n); ++i)\r\n#define rep1n(i, n) for (int i = 1; i <= (n); ++i)\r\n#define repr(i, n) for (int i = (n) - 1; i >= 0; --i)\r\n\r\n\r\n#define fr first\r\n#define sc second\r\n#define pb push_back\r\n#define mp make_pair\r\n#define all(x) (x).begin(), (x).end()\r\n#define rall(x) (x).rbegin(), (x).rend()\r\n#define endl '\\n'\r\n\r\n \r\nusing ll = long long;\r\nusing ull = unsigned long long;\r\nusing ld = long double;\r\nusing str = string;\r\nusing pi = pair<int, int>;\r\nusing pl = pair<ll, ll>;\r\n \r\nusing vi = vector<int>;\r\nusing vl = vector<ll>;\r\nusing vpi = vector<pair<int, int>>;\r\nusing vvi = vector<vi>;\r\n \r\nint Bit(int mask, int b) { return (mask >> b) & 1; }\r\n\r\ntemplate<class T>\r\nbool ckmin(T &a, const T &b) {\r\n    if (b < a) {\r\n        a = b;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n \r\ntemplate<class T>\r\nbool ckmax(T &a, const T &b) {\r\n    if (b > a) {\r\n        a = b;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\ntemplate<int mod>\r\nstruct static_modular_int {\r\n    using mint = static_modular_int<mod>;\r\n \r\n    int value;\r\n \r\n    static_modular_int() : value(0) {}\r\n \r\n    static_modular_int(const mint &x) : value(x.value) {}\r\n \r\n    template<typename T, typename U = std::enable_if_t<std::is_integral<T>::value>>\r\n    static_modular_int(T value) : value(normalize(value, mod)) {}\r\n \r\n    template<typename T>\r\n    mint power(T degree) const {\r\n        degree = normalize(degree, mod - 1);\r\n        mint prod = 1;\r\n        mint a = *this;\r\n \r\n        for (; degree > 0; degree >>= 1, a *= a)\r\n            if (degree & 1)\r\n                prod *= a;\r\n \r\n        return prod;\r\n    }\r\n \r\n    mint inv() const {\r\n        return power(-1);\r\n    }\r\n \r\n    mint &operator=(const mint &x) {\r\n        value = x.value;\r\n        return *this;\r\n    }\r\n \r\n    mint &operator+=(const mint &x) {\r\n        value += x.value;\r\n        if (value >= mod)\r\n            value -= mod;\r\n \r\n        return *this;\r\n    }\r\n \r\n    mint &operator-=(const mint &x) {\r\n        value -= x.value;\r\n        if (value < 0)\r\n            value += mod;\r\n \r\n        return *this;\r\n    }\r\n \r\n    mint &operator*=(const mint &x) {\r\n        value = (long long) value * x.value % mod;\r\n        return *this;\r\n    }\r\n \r\n    mint &operator/=(const mint &x) {\r\n        return *this *= x.inv();\r\n    }\r\n \r\n    friend mint operator+(const mint &x, const mint &y) {\r\n        return mint(x) += y;\r\n    }\r\n \r\n    friend mint operator-(const mint &x, const mint &y) {\r\n        return mint(x) -= y;\r\n    }\r\n \r\n    friend mint operator*(const mint &x, const mint &y) {\r\n        return mint(x) *= y;\r\n    }\r\n \r\n    friend mint operator/(const mint &x, const mint &y) {\r\n        return mint(x) /= y;\r\n    }\r\n \r\n    mint &operator++() {\r\n        ++value;\r\n        if (value == mod)\r\n            value = 0;\r\n \r\n        return *this;\r\n    }\r\n \r\n    mint &operator--() {\r\n        --value;\r\n        if (value == -1)\r\n            value = mod - 1;\r\n \r\n        return *this;\r\n    }\r\n \r\n    mint operator++(int) {\r\n        mint prev = *this;\r\n        value++;\r\n        if (value == mod)\r\n            value = 0;\r\n \r\n        return prev;\r\n    }\r\n \r\n    mint operator--(int) {\r\n        mint prev = *this;\r\n        value--;\r\n        if (value == -1)\r\n            value = mod - 1;\r\n \r\n        return prev;\r\n    }\r\n \r\n    mint operator-() const {\r\n        return mint(0) - *this;\r\n    }\r\n \r\n    bool operator==(const mint &x) const {\r\n        return value == x.value;\r\n    }\r\n \r\n    bool operator!=(const mint &x) const {\r\n        return value != x.value;\r\n    }\r\n \r\n    bool operator<(const mint &x) const {\r\n        return value < x.value;\r\n    }\r\n \r\n    template<typename T>\r\n    explicit operator T() {\r\n        return value;\r\n    }\r\n \r\n    friend std::istream &operator>>(std::istream &in, mint &x) {\r\n        std::string s;\r\n        in >> s;\r\n        x = 0;\r\n        for (const auto c: s)\r\n            x = x * 10 + (c - '0');\r\n \r\n        return in;\r\n    }\r\n \r\n    friend std::ostream &operator<<(std::ostream &out, const mint &x) {\r\n        return out << x.value;\r\n    }\r\n \r\n    static int primitive_root() {\r\n        if constexpr (mod == 1'000'000'007)\r\n            return 5;\r\n \r\n        if constexpr (mod == 998'244'353)\r\n            return 3;\r\n \r\n        if constexpr (mod == 786433)\r\n            return 10;\r\n \r\n        static int root = -1;\r\n        if (root != -1)\r\n            return root;\r\n \r\n        std::vector<int> primes;\r\n        int value = mod - 1;\r\n        for (int i = 2; i * i <= value; i++)\r\n            if (value % i == 0) {\r\n                primes.push_back(i);\r\n                while (value % i == 0)\r\n                    value /= i;\r\n            }\r\n \r\n        if (value != 1)\r\n            primes.push_back(value);\r\n \r\n        for (int r = 2;; r++) {\r\n            bool ok = true;\r\n            for (auto p: primes)\r\n                if ((mint(r).power((mod - 1) / p)).value == 1) {\r\n                    ok = false;\r\n                    break;\r\n                }\r\n \r\n            if (ok)\r\n                return root = r;\r\n        }\r\n    }\r\n};\r\nconst int MOD = (int)1e9 + 7;\r\nusing mint = static_modular_int<MOD>;\r\nconst int TestCases = 1;\r\n\r\nunordered_map<int,int>used;\r\n\r\nvoid rshi(){\r\n\tused.clear();\r\n\tint n, k, d;\r\n\tcin >> n >> k >> d;\r\n\tvector<int>a(n);\r\n\tfor (int i = 0; i < n; i++){\r\n\t\tcin >> a[i];\r\n\t}\r\n\tint l = 0, r = -1;\r\n\tint ans = (int)1e9, bought = 0;\r\n\t\r\n\twhile(r < n){\r\n\t\t++r;\r\n\t\twhile(r - l + 1 > d){\r\n\t\t\tused[a[l]]--;\r\n\t\t\tif (used[a[l]] == 0)bought--;\r\n\t\t\t++l;\r\n\t\t}\r\n\t\tif (used[a[r]] == 0){\r\n\t\t\tbought++;\r\n\t\t}\r\n\t\tused[a[r]]++;\r\n\t\tif (r - l + 1 == d)ans = min(ans, bought);\r\n\t}\r\n\tcout << ans << endl;\r\n}\r\n\r\nint main(){\r\n\tios::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tint tt = 1;\r\n\tif(TestCases)cin >> tt;\r\n\twhile(tt--){\r\n\t\trshi();\r\n\t}\r\n\treturn 0;\r\n}\r\n"
}