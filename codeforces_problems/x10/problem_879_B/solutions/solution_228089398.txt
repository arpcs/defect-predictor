{
    "id": 228089398,
    "contestId": 879,
    "creationTimeSeconds": 1697232610,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 879,
        "index": "B",
        "name": "Table Tennis",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1200,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 879,
        "members": [
            {
                "handle": "vjudge1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1509029100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 43,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 16076800,
    "source": "#include <bits/stdc++.h>\n#define alaa ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define int long long\n#define el \"\\n\";\nconst int MOD = 1000000007;\nusing namespace std;\nbool Prime(int n)\n{\n    if(n==1)return false;\n    for(int i=2; i*i<=n; i++)\n    {\n        if(n%i==0) return false;\n    }\n    return true;\n}\nbool Prime_Sieves(int n)\n{\n    const int N=1e6;\n    vector<bool>isprime(N+1,true);\n    isprime[1]=false;\n\n    for(int i=2; i*i<=n; i++)\n    {\n        if(isprime[i]==false)continue;\n        for(int j=i*i; j<=n; j+=i)\n        {\n            isprime[j]=false;\n        }\n    }\n    return isprime[n];\n}\nint Number_of_Divisors(int n)\n{\n   // const int N=1e6;\n    map<int,int>mp;\n    int cnt=1;\n    vector<bool>isprime(n+1,true);\n    isprime[1]=false;\n    for(int i=2; i<=n; i++)\n    {\n        if(isprime[i]==false)continue;\n        for(int j=i*i; j<=n; j+=i)\n        {\n            isprime[j]=false;\n        }\n        while(n%i==0)\n        {\n            n/=i;\n            mp[i]++;\n        }\n        cnt*=(mp[i]+1);\n    }\n    return cnt;\n}\nint Coutn_Prime_InRange(int n)           // return the numbers of prime numbers from 1 --> n\n{\n    int cnt=0;\n    for(int i=1; i<=n; i++)\n    {\n        if(Prime(i))cnt++;\n    }\n    return cnt;\n}\nint Number_of_Factors(int n)\n{\n    vector<int>num(1000009);\n    for(int i=1; i<=n; i++)\n    {\n        for(int j=i; j<=n; j+=i)\n        {\n            num[j]++;\n        }\n    }\n    return num[n];\n}\nvector<int>Prime_Factors(int n)\n{\n    vector<int>primes;\n    for(int i=2; i*i<=n; i++)\n    {\n        while(n%i==0)\n        {\n            primes.push_back(i);\n            n/=i;\n        }\n    }\n    if(n>1)primes.push_back(n);\n    return primes;\n}\nconst int m=1e6+1;\nint freq[m], good[m];\nvoid solve()\n{\n    int n,k; cin>>n>>k;\n    map<int,int>mp;\n    deque<int>dq;\n    vector<int>v;\n    for(int i=0; i<n; i++)\n    {\n        int x; cin>>x;\n        dq.push_back(x);\n        v.push_back(x);\n    }\n    sort(v.rbegin(),v.rend());\n    int mm=v[n-1];\n    int t=v.size();\n    if(k>=n-1)\n    {\n        cout<<v[0]<<el\n        return;\n    }\n    while(true)\n    {\n        int p1=dq.front();\n        dq.pop_front();\n        int p2=dq.front();\n        dq.pop_front();\n\n        if(p1<p2)\n        {\n            mp[p2]++;\n            dq.push_front(p2);\n            dq.push_back(p1);\n            if(mp[p2]==k)break;\n        }\n        else\n        {\n            mp[p1]++;\n            dq.push_front(p1);\n            dq.push_back(p2);\n            if(mp[p1]==k)break;\n        }\n    }\n    int ans1=-1, ans2;\n    for(int i=0; i<n; i++)\n    {\n        if(mp[v[i]]>ans1)\n        {\n            ans2=v[i];\n            ans1=mp[v[i]];\n        }\n    }\n    cout<<ans2<<el\n}\nint32_t main()\n{\n    alaa\n    int t=1; \n    while(t--) solve();\n}\n\n \t\t\t\t\t\t \t\t \t \t  \t \t       \t  \t"
}