{
    "id": 226987938,
    "contestId": 300,
    "creationTimeSeconds": 1696671918,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 300,
        "index": "A",
        "name": "Array",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1100,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 300,
        "members": [
            {
                "handle": "ZeroDayOutplay"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1366903800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef vector<int> vi;\r\ntypedef vector<ll> vl;\r\ntypedef pair<int, int> pi;\r\ntypedef pair<ll, ll> pl;\r\n\r\n\r\n#define INF 1e9\r\n#define epsilon 1e-9\r\n#define PB push_back\r\n#define FOR(n) for (ll i=0; i<n; i++)\r\n\r\n\r\n\r\nvl subset;\r\nvector<vl> subsets;\r\nvl permutation;\r\nvector<vl> permutations;\r\nvector<string> str_perm;\r\nconst ll n = 3; //change it for each permutation\r\nbool chosen[n+1]; \r\n\r\n\r\n\r\nvoid generate_subset(ll from, ll to);\r\nvoid generate_Permutations();\r\nstring bit_representation(ll n);\r\nvoid str_permutation(string str, int i, int n);\r\n\r\n\r\n\r\ntemplate <typename T>\r\nT binpow(T a, T b, T m=INF) {\r\n    a %= m;\r\n    T res = 1;\r\n    while (b > 0) {\r\n        if (b & 1)\r\n            res = res * a % m;\r\n        a = a * a % m;\r\n        b >>= 1;\r\n    }\r\n    return res;\r\n}\r\n\r\n\r\ntemplate <typename T>\r\nvector<bool> bfs(vector<vector<T>> adj, T source_vertex){\r\n    T n = adj.size(); // number of nodes\r\n\r\n    queue<T> q;\r\n    vector<bool> visited(n);\r\n    vector<T> d(n), p(n);\r\n\r\n    q.push(source_vertex);\r\n    visited[source_vertex] = true;\r\n    p[source_vertex] = -1;\r\n    while (!q.empty()) {\r\n        T v = q.front();\r\n        q.pop();\r\n        for (T u : adj[v]) {\r\n            if (!visited[u]) {\r\n                visited[u] = true;\r\n                q.push(u);\r\n                d[u] = d[v] + 1;\r\n                p[u] = v;\r\n            }\r\n        }\r\n    }\r\n    return visited;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nint main(){\r\n    \r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    #ifndef ONLINE_JUDGE\r\n        freopen(\"input.txt\", \"r\", stdin);\r\n    #endif\r\n\r\n    int n, x;\r\n    cin >> n;\r\n    vector<int> neg, pos, zero;\r\n    FOR(n){\r\n        cin >> x;\r\n        if (x>0) pos.push_back(x);\r\n        else if (x<0) neg.push_back(x);\r\n        else zero.push_back(x);\r\n    }\r\n    int ln=neg.size(), lp=pos.size(), lz=zero.size();\r\n    if (lp==0){\r\n        pos.push_back(neg[ln-1]);\r\n        pos.push_back(neg[ln-2]);\r\n        lp+=2;\r\n        ln-=2;\r\n    }\r\n    if (ln%2==0){\r\n        ln--;\r\n        lz++;\r\n        zero.push_back(neg[ln-1]);\r\n    }\r\n    printf(\"%d \", ln);\r\n    for (int i=0; i<ln; i++) printf(\" %d\", neg[i]);\r\n    printf(\"\\n%d \", lp);\r\n    for (int i=0; i<lp; i++) printf(\" %d\", pos[i]);\r\n    printf(\"\\n%d \", lz);\r\n    for (int i=0; i<lz; i++) printf(\" %d\", zero[i]);\r\n    cout << endl;\r\n    return 0;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvoid generate_subset(ll from, ll to){\r\n    if (from==to+1){\r\n        subsets.PB(subset);\r\n        return;\r\n    }\r\n    subset.PB(from);\r\n    generate_subset(from+1, to);\r\n    subset.pop_back();\r\n    generate_subset(from+1, to);\r\n}\r\n\r\n\r\n\r\n\r\nvoid generate_Permutations() {\r\n    if (permutation.size() == n) {\r\n        permutations.PB(permutation);\r\n        return;\r\n    } else {\r\n        for (int i = 1; i <= n; i++) {\r\n            if (chosen[i]) continue;\r\n            chosen[i] = true;\r\n            permutation.push_back(i);\r\n            generate_Permutations();\r\n            chosen[i] = false;\r\n            permutation.pop_back();\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nstring bit_representation(ll n){\r\n    ll highest_exp = log2(n);\r\n    string ans=  \"\";\r\n    for (int i=highest_exp; i>=0; i--){\r\n        ans += (n&(1<<i)) ? \"1\" : \"0\"; \r\n    }\r\n    return ans;\r\n}\r\n\r\n\r\nll set_k_bit_to_one(ll n, ll k){\r\n    return (n | (1<<k));\r\n}\r\n\r\nll set_k_bit_to_zero(ll n, ll k){\r\n    return (n & ~(1<<k));\r\n}\r\n\r\nll invert_k_bit(ll n, ll k){\r\n    return (n ^ (1<<k));\r\n}\r\n\r\nbool is_power_of_2(ll n){\r\n    return (n & (n-1)) == 0;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nvoid str_permutation(string str, int i, int n)\r\n{\r\n    if (i == n - 1)\r\n    {\r\n        for (auto p: str_perm){\r\n            if (p == str) return;\r\n        }\r\n        str_perm.PB(str);\r\n        return;\r\n    }\r\n \r\n    for (int j = i; j < n; j++)\r\n    {\r\n        swap(str[i], str[j]);       \r\n \r\n        str_permutation(str, i + 1, n);\r\n \r\n        swap(str[i], str[j]);\r\n    }\r\n}\r\n"
}