{
    "id": 231948825,
    "contestId": 300,
    "creationTimeSeconds": 1699452355,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 300,
        "index": "A",
        "name": "Array",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1100,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 300,
        "members": [
            {
                "handle": "nonoForInfi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1366903800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define nono                 \\\r\n    ios::sync_with_stdio(0); \\\r\n    cin.tie(0);              \\\r\n    cout.tie(0);\r\nusing namespace std;\r\ntemplate <class t>\r\nclass Vector\r\n{\r\nprivate:\r\n    int sz, capacity;\r\n    t *arr;\r\n\r\npublic:\r\n    Vector()\r\n    {\r\n        capacity = 5;\r\n        sz = 0;\r\n        arr = new t[sz];\r\n    }\r\n    Vector(int siz)\r\n    {\r\n        if (siz > 0)\r\n            capacity = sz = siz, arr = new t[sz];\r\n    }\r\n    Vector(int siz, t fill)\r\n    {\r\n        if (sz > 0)\r\n        {\r\n            capacity = sz = siz, arr = new t[sz];\r\n            for (int i = 0; i < sz; ++i)\r\n            {\r\n                arr[i] = fill;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            capacity = 5;\r\n            sz = 0;\r\n            arr = new t[sz];\r\n        }\r\n    }\r\n    int Length()\r\n    {\r\n        return sz;\r\n    }\r\n    void expand()\r\n    {\r\n        t *tmp = new t[capacity * 2];\r\n        for (int i = 0; i < sz; ++i)\r\n            tmp[i] = arr[i];\r\n        delete[] arr;\r\n        arr = tmp, capacity *= 2;\r\n    }\r\n    void pushBack(t inpt)\r\n    {\r\n        if (sz == capacity)\r\n            expand();\r\n        arr[sz] = inpt;\r\n        ++sz;\r\n    }\r\n    void popBack()\r\n    {\r\n        if (sz == 0)\r\n        {\r\n            throw invalid_argument(\"the vector is empty\");\r\n        }\r\n        --sz;\r\n    }\r\n    void insertAt(int idx, int val)\r\n    {\r\n        if (idx >= sz || idx < 0)\r\n            throw invalid_argument(\"idx should be >= 0 and < length of vector\");\r\n        if (sz == capacity)\r\n            expand();\r\n        for (int i = sz; i > idx; --i)\r\n            arr[i] = arr[i - 1];\r\n        arr[idx] = val;\r\n        ++sz;\r\n    }\r\n    void deleteAt(int idx)\r\n    {\r\n        if (idx >= sz || idx < 0)\r\n            throw invalid_argument(\"idx should be >= 0 and < length of vector\");\r\n        for (int i = idx; i < sz; ++i)\r\n            arr[i] = arr[i + 1];\r\n        --sz;\r\n    }\r\n    t &At(int pos)\r\n    {\r\n        if (sz <= pos)\r\n            throw invalid_argument(\"this index doesn't exist\");\r\n        return arr[pos];\r\n    }\r\n    t &Back()\r\n    {\r\n        if (sz == 0)\r\n            throw invalid_argument(\"there is nothing to be showed\");\r\n        \r\n        return arr[sz - 1];\r\n    }\r\n    bool Empty()\r\n    {\r\n        return sz == 0;\r\n    }\r\n    void Clear()\r\n    {\r\n        delete[] arr;\r\n        capacity = 5;\r\n        sz = 0;\r\n        arr = new t[sz];\r\n    }\r\n    ~Vector(void)\r\n    {\r\n        delete[] arr;\r\n    }\r\n};\r\n\r\nint main()\r\n{\r\n    nono;\r\n    int sz, x;\r\n    cin >> sz;\r\n    Vector<int> ps, ng, zero;\r\n    while (sz--)\r\n    {\r\n        cin >> x;\r\n        if (x < 0)\r\n        {\r\n            ng.pushBack(x);\r\n        }\r\n        else if (x > 0)\r\n        {\r\n            ps.pushBack(x);\r\n        }\r\n        else\r\n        {\r\n            zero.pushBack(x);\r\n        }\r\n    }\r\n    if (ps.Empty())\r\n    {\r\n        ps.pushBack(ng.Back());\r\n        ng.popBack();\r\n        ps.pushBack(ng.Back());\r\n        ng.popBack();\r\n    }\r\n    if (ng.Length() % 2 == 0)\r\n    {\r\n        zero.pushBack(ng.Back());\r\n        ng.popBack();\r\n    }\r\n    cout << ng.Length();\r\n    for (int i = 0; i < ng.Length(); i++)\r\n    {\r\n        cout << ' ' << ng.At(i);\r\n    }\r\n    cout << '\\n'<< ps.Length();\r\n    for (int i = 0; i < ps.Length(); i++)\r\n    {\r\n        cout << ' ' << ps.At(i);\r\n    }\r\n    cout << '\\n'<< zero.Length();\r\n    for (int i = 0; i < zero.Length(); i++)\r\n    {\r\n        cout << ' ' << zero.At(i);\r\n    }\r\n    return 0;\r\n}"
}