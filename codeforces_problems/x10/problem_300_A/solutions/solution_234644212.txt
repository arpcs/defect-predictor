{
    "id": 234644212,
    "contestId": 300,
    "creationTimeSeconds": 1701122057,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 300,
        "index": "A",
        "name": "Array",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1100,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation"
        ]
    },
    "author": {
        "contestId": 300,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1366903800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint main()\n{\n    ios::sync_with_stdio(false);\n    cout.tie(nullptr);\n    cin.tie(nullptr);\n    \n    int n;\n    cin>>n;\n    vector<int> pos;\n    vector<int> neg;\n    vector<int> zeros;\n\n\n    \n    for(int i = 0; i < n;i++){\n        int x;\n        cin>>x;\n        if(x > 0){\n            pos.push_back(x);\n        }\n        else if(x<0){\n            neg.push_back(x);\n        }\n        else{\n            zeros.push_back(x);\n        }\n    }\n    if(neg.size() % 2 == 0){\n        zeros.push_back(neg.back());\n        neg.pop_back();\n    }\n    if(pos.size()==0){\n    pos.push_back(neg.back());\n    neg.pop_back();\n    pos.push_back(neg.back());\n    neg.pop_back();\n    }\n    cout<<neg.size()<<\" \";\n    for(int i = 0 ; i < neg.size();i++){\n        cout<<neg[i]<<\" \";\n    }\n    cout<<'\\n';\n    cout<<pos.size()<<\" \";\n    for(int i = 0 ; i < pos.size();i++){\n        cout<<pos[i]<<\" \";\n    }\n    cout<<'\\n';\n    cout<<zeros.size()<<\" \";\n    for(int i = 0 ; i < zeros.size();i++){\n        cout<<zeros[i]<<\" \";\n    }\n    cout<<'\\n';\n    return 0;\n}\n\nC++\n \t\t \t     \t \t\t\t    \t\t    \t\t \t\t"
}