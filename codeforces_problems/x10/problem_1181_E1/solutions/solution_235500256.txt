{
    "id": 235500256,
    "contestId": 1181,
    "creationTimeSeconds": 1701596743,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1181,
        "index": "E1",
        "name": "A Story of One Country (Easy)",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "brute force",
            "divide and conquer",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1181,
        "members": [
            {
                "handle": "ZanP"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560677700
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "#include<iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n#include <unordered_map>\r\n#define rect pair<pair<pair<int,int>,pair<int,int>>, int>\r\n#define left first.first.first\r\n#define right first.second.first\r\n#define down first.first.second\r\n#define up first.second.second\r\n#define inx second\r\n#define ll long long\r\nusing namespace std;\r\nint n;\r\nvector<rect> castles;\r\nbool sortup(rect& a, rect& b) { if (a.up == b.up) { return a.down > b.down; } return a.up > b.up; }\r\nbool sortdown(rect& a, rect& b) { if (a.down == b.down) { return a.up < b.up; } return a.down < b.down; }\r\nbool sortright(rect& a, rect& b) { if (a.right == b.right) { return a.left > b.left; } return a.right > b.right; }\r\nbool sortleft(rect& a, rect& b) { if (a.left == b.left) { return a.right > b.right; } return a.left < b.left; }\r\n\r\nbool recurs(vector<rect> & v)\r\n{\r\n\tunordered_map<int, bool> ump; for (int i = 0; i < v.size(); i++) { ump[v[i].inx] = true; }\r\n\tvector<rect> sup = v, sdown = v, sleft = v, sright = v;\r\n\tsort(sup.begin(), sup.end(), sortup);\r\n\tsort(sdown.begin(), sdown.end(), sortdown);\r\n\tsort(sleft.begin(), sleft.end(), sortleft);\r\n\tsort(sright.begin(), sright.end(), sortright);\r\n\r\n\tbool change = true;\r\n\tint n = v.size();\r\n\twhile (change)\r\n\t{\r\n\t\tif (n <= 1) { return true; }\r\n\t\tchange = false;\r\n\t\tint supdown = -1, sdownup = -1, srightleft = -1, sleftright = -1;\r\n\t\tfor (int i = 0; i < v.size(); i++)\r\n\t\t{\r\n\t\t\tif (ump[sup[i].inx])\r\n\t\t\t{\r\n\t\t\t\tif (supdown != -1 && sup[i].up <= supdown)\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<rect> for_rec;\r\n\t\t\t\t\tfor (int j = 0; j < i; j++) { if (ump[sup[j].inx]) { ump[sup[j].inx] = false; for_rec.push_back(sup[j]); } }\r\n\t\t\t\t\tif (!recurs(for_rec)) { return false; }\r\n\t\t\t\t\tchange = true;\r\n\t\t\t\t\tn -= i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif (supdown == -1)supdown = sup[i].down;\r\n\t\t\t\telse supdown = min(supdown, sup[i].down);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif (ump[sdown[i].inx])\r\n\t\t\t{\r\n\t\t\t\tif (sdownup != -1 && sdown[i].down >= sdownup)\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<rect> for_rec;\r\n\t\t\t\t\tfor (int j = 0; j < i; j++) { if (ump[sdown[j].inx]) { ump[sdown[j].inx] = false; for_rec.push_back(sup[j]); } }\r\n\t\t\t\t\tif (!recurs(for_rec)) { return false; }\r\n\t\t\t\t\tchange = true;\r\n\t\t\t\t\tn -= i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tsdownup = max(sdownup,sdown[i].up);\r\n\t\t\t}\r\n\r\n\t\t\tif (ump[sright[i].inx])\r\n\t\t\t{\r\n\t\t\t\tif (srightleft != -1 && sright[i].right <= srightleft)\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<rect> for_rec;\r\n\t\t\t\t\tfor (int j = 0; j < i; j++) { if (ump[sright[j].inx]) { ump[sright[j].inx] = false; for_rec.push_back(sright[j]); } }\r\n\t\t\t\t\tif (!recurs(for_rec)) { return false; }\r\n\t\t\t\t\tchange = true;\r\n\t\t\t\t\tn -= i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tif(srightleft == -1)srightleft = sright[i].left;\r\n\t\t\t\telse srightleft = min(sright[i].left,srightleft);\r\n\t\t\t}\r\n\r\n\t\t\tif (ump[sleft[i].inx])\r\n\t\t\t{\r\n\t\t\t\tif (sleftright != -1 && sleft[i].left >= sleftright)\r\n\t\t\t\t{\r\n\t\t\t\t\tvector<rect> for_rec;\r\n\t\t\t\t\tfor (int j = 0; j < i; j++) { if (ump[sleft[j].inx]) { ump[sleft[j].inx] = false; for_rec.push_back(sright[j]); } }\r\n\t\t\t\t\tif (!recurs(for_rec)) { return false; }\r\n\t\t\t\t\tchange = true;\r\n\t\t\t\t\tn -= i;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tsleftright = max(sleftright,sleft[i].right);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n\t\r\n}\r\nint main()\r\n{\r\n\tcin >> n;\r\n\tcastles.resize(n);\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t\tcin >> castles[i].left >> castles[i].down >> castles[i].right >> castles[i].up;\r\n\t\tcastles[i].inx = i;\r\n\t}\r\n\tcout << (recurs(castles) ? \"YES\" : \"NO\");\r\n\treturn 0;\r\n}"
}