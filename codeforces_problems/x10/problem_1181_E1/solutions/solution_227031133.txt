{
    "id": 227031133,
    "contestId": 1181,
    "creationTimeSeconds": 1696692191,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1181,
        "index": "E1",
        "name": "A Story of One Country (Easy)",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "brute force",
            "divide and conquer",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1181,
        "members": [
            {
                "handle": "Hadtsti"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560677700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 43,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 48742400,
    "source": "// LUOGU_RID: 128214068\n#include<bits/stdc++.h>\r\nusing namespace std;\r\nint n,x,y,xx,yy;\r\nstruct node \r\n{\r\n    int l,r,id;\r\n    friend bool operator <(node a,node b)\r\n\t{\r\n        if(a.l==b.l) \r\n\t\t\treturn a.id<b.id;\r\n        return a.l<b.l;\r\n    }\r\n}a[1000010][4];\r\nset<node>s[4];\r\nbool dfs(set<node> L[4]) \r\n{\r\n    if(L[0].size()<=1) \r\n\t\treturn 1;\r\n    set<node>R[4];\r\n    set<node>::iterator it[4];\r\n    int m[4];\r\n    for(int i=0;i<4;i++) \r\n\t{\r\n        it[i]=L[i].begin();\r\n        m[i]=it[i]++->r;\r\n    }\r\n    for(int i=1;i<L[0].size();i++) \r\n\t\tfor(int j=0;j<4;j++) \r\n\t\t{\r\n        \tif(it[j]->l>=m[j]) \r\n\t\t\t{\r\n\t            for(auto t=L[j].begin();t!=it[j];) \r\n\t\t\t\t{\r\n\t                int id=t++->id;\r\n\t                for(int k=0;k<4;k++)\r\n\t\t\t\t\t\tR[k].insert(a[id][k]),L[k].erase(a[id][k]);\r\n\t            }\r\n\t            return dfs(L)&&dfs(R);\r\n        \t}\r\n        \tm[j]=max(m[j],it[j]++->r);\r\n    \t}\r\n    return 0;\r\n}\r\nint main() \r\n{\r\n    scanf(\"%d\",&n);\r\n    for(int i=1;i<=n;i++)\r\n\t{\r\n        scanf(\"%d%d%d%d\",&x,&y,&xx,&yy);\r\n        a[i][0]={x,xx,i};\r\n        a[i][1]={-xx,-x,i};\r\n        a[i][2]={y,yy,i};\r\n        a[i][3]={-yy,-y,i};\r\n        for(int j=0;j<4;j++) \r\n\t\t\ts[j].insert(a[i][j]);\r\n    }\r\n    printf(dfs(s)?\"YES\":\"NO\");\r\n    return 0;\r\n}////"
}