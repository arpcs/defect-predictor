{
    "id": 228464927,
    "contestId": 1181,
    "creationTimeSeconds": 1697484044,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1181,
        "index": "E1",
        "name": "A Story of One Country (Easy)",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "brute force",
            "divide and conquer",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1181,
        "members": [
            {
                "handle": "ZanP"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560677700
    },
    "programmingLanguage": "MS C++ 2017",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\nusing namespace std;\r\n#define pii pair<int,int>\r\n#define ll long long\r\nstruct city { int xl, xr, yl, yr; city(){}; };\r\nbool sort_x(city& a, city& b)\r\n{\r\n\treturn a.xl < b.xl;\r\n}\r\nbool sort_y(city& a, city& b)\r\n{\r\n\treturn a.yl < b.yl;\r\n}\r\nint n;\r\nvector<city> citys;\r\nbool can_make(bool horizontal, int l, int r)\r\n{\r\n\tif (r - l <= 1)return true;\r\n\tif (horizontal)\r\n\t{\r\n\t\tsort(citys.begin() + l, citys.begin() + r, sort_x);\r\n\r\n\t\tint minxl = l;\r\n\t\tint maxxr = citys[l].xr;\r\n\t\tfor (int i = l; i < r; i++)\r\n\t\t{\r\n\t\t\tif (citys[i].xl >= maxxr)\r\n\t\t\t{\r\n\t\t\t\tif (!can_make(!horizontal, minxl, i))return false;\r\n\t\t\t\tminxl = i;\r\n\t\t\t}\r\n\t\t\tmaxxr = max(maxxr, citys[i].xr);\r\n\t\t}\r\n\t\tif (minxl == l) { return false; }\r\n\t\telse return can_make(!horizontal, minxl, r);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tsort(citys.begin() + l, citys.begin() + r, sort_y);\r\n\r\n\t\tint minyl = l;\r\n\t\tint maxyr = citys[l].yr;\r\n\t\tfor (int i = l; i < r; i++)\r\n\t\t{\r\n\t\t\tif (citys[i].yl >= maxyr)\r\n\t\t\t{\r\n\t\t\t\tif (!can_make(!horizontal, minyl, i))return false;\r\n\t\t\t\tminyl = i;\r\n\t\t\t}\r\n\t\t\tmaxyr = max(maxyr, citys[i].yr);\r\n\t\t}\r\n\t\tif (minyl == l) { return false; }\r\n\t\telse return can_make(!horizontal, minyl, r);\r\n\t}\r\n\treturn true;\r\n}\r\nint main()\r\n{\r\n\tios_base::sync_with_stdio(false);\r\n\tcin.tie();\r\n\tcin >> n;\r\n\tcitys.resize(n);\r\n\tfor (int i = 0; i < n; i++)\r\n\t{\r\n\t\tcin >> citys[i].xl >> citys[i].yl >> citys[i].xr >> citys[i].yr;\r\n\t}\r\n\tif (can_make(true, 0, n)) cout << \"YES\\n\";\r\n\telse cout << \"NO\\n\";\r\n\treturn 0;\r\n}"
}