{
    "id": 230018921,
    "contestId": 1779,
    "creationTimeSeconds": 1698413164,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1779,
        "index": "E",
        "name": "Anya's Simultaneous Exhibition",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "graphs",
            "greedy",
            "interactive",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1779,
        "members": [
            {
                "handle": "tengrist"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1672756500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// LUOGU_RID: 131916623\n#include <bits/stdc++.h>\n#define ALL(v) begin(v), end(v)\n\nusing i64 = int64_t;\n\nconst int kMaxN = 255;\n\nint n;\nstd::array<int, kMaxN> deg, ord;\nauto Ask(int p, const std::bitset<kMaxN> &ask) {\n  int cnt = 0;\n  for (int i = 1; i <= n; ++i) cnt += (i != p) * ask[i];\n  if (!cnt) return 0;\n  std::cout << \"? \" << p << ' ';\n  for (int i = 1; i <= n; ++i) std::cout << (i != p) * ask[i];\n  std::cout << '\\n', std::cout.flush();\n\n  int x;\n  return std::cin >> x, x;\n}\nvoid Answer(const std::bitset<kMaxN> &ans) {\n  std::cout << \"! \";\n  for (int i = 1; i <= n; ++i) std::cout << ans[i];\n  std::cout << '\\n', std::cout.flush();\n}\n\nauto main() -> int {\n  std::cin >> n;\n\n  [&]() {\n    std::bitset<kMaxN> full;\n    full.set();\n    for (int i = 1; i <= n; ++i) deg[i] = Ask(ord[i] = i, full);\n    std::sort(ord.data() + 1, ord.data() + n + 1,\n              [&](int p, int q) { return deg[p] > deg[q]; });\n  }();\n\n  int p, cnt = 0;\n  for (p = 1; p <= n; ++p) {\n    std::bitset<kMaxN> suf;\n    for (int i = p; i <= n; ++i) suf[i] = true;\n    int x = Ask(p, suf);\n    cnt += x, cnt -= p - 1 - (deg[p] - x);\n    if (cnt == p * (n - p)) break;\n  }\n  std::bitset<kMaxN> ans;\n  for (int i = 1; i <= p; ++i) ans[ord[i]] = true;\n  Answer(ans);\n\n  return 0;\n}"
}