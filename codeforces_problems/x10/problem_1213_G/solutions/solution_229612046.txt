{
    "id": 229612046,
    "contestId": 1213,
    "creationTimeSeconds": 1698173604,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "G",
        "name": "Path Queries",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "divide and conquer",
            "dsu",
            "graphs",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "LU_Hridoy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 9728000,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\nusing namespace __gnu_pbds;\r\n\r\ntemplate <typename T> using o_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntypedef long long ll;\r\n\r\nconst int MAX = 1e6+5;\r\nll res = 0;\r\nstruct DSU\r\n{\r\n#define Size 200005\r\n    int parent[Size];\r\n    int components[Size];\r\n\r\n    void build(int n)\r\n    {\r\n        for(int i=0; i<=n; i++)\r\n        {\r\n            parent[i]=i;\r\n            components[i]=1;\r\n        }\r\n    }\r\n\r\n    inline int getComponentsCount(int node)\r\n    {\r\n        return components[node];\r\n    }\r\n\r\n    inline int getRoot(int node)\r\n    {\r\n        if(parent[node]==node)\r\n            return parent[node];\r\n        return parent[node] = getRoot(parent[node]);\r\n    }\r\n\r\n    inline bool isConnected(int u,int v)\r\n    {\r\n        return getRoot(u)==getRoot(v);\r\n    }\r\n\r\n    void combine(int u,int v)\r\n    {\r\n        u = getRoot(u);\r\n        v = getRoot(v);\r\n        if(u!=v)\r\n        {\r\n            if (components[u] < components[v])\r\n                swap(u, v);\r\n            res += (1ll * components[u] * components[v]);\r\n            parent[v] = u;\r\n            components[u] += components[v];\r\n        }\r\n    }\r\n} dsu;\r\nint32_t main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<pair<int,pair<int,int>>>edges;\r\n    for(int i=1; i<n; i++)\r\n    {\r\n        int u, v, w;\r\n        cin >> u >> v >> w;\r\n        edges.push_back({w,{u,v}});\r\n    }\r\n    dsu.build(n);\r\n    sort(edges.begin(), edges.end());\r\n\r\n\r\n    vector<pair<int,int>>queries;\r\n    for(int i=0; i<m; i++)\r\n    {\r\n        int x;\r\n        cin >> x;\r\n        queries.push_back({x, i});\r\n    }\r\n    sort(queries.begin(), queries.end());\r\n\r\n    vector<ll>ans(m);\r\n    int i = 0;\r\n    for(auto it:queries)\r\n    {\r\n        int cost = it.first;\r\n        int indx = it.second;\r\n        while(i<n-1 && edges[i].first<=cost)\r\n        {\r\n            int u =edges[i].second.first;\r\n            int v = edges[i].second.second;\r\n            dsu.combine(u,v);\r\n            i++;\r\n        }\r\n        ans[indx] = res;\r\n    }\r\n    for(int i=0; i<m; i++)cout << ans[i] << \" \";\r\n    cout << \"\\n\";\r\n    return 0;\r\n}\r\n"
}