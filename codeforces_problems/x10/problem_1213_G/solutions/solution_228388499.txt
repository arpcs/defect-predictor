{
    "id": 228388499,
    "contestId": 1213,
    "creationTimeSeconds": 1697446099,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "G",
        "name": "Path Queries",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "divide and conquer",
            "dsu",
            "graphs",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "TKXZ133"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 19251200,
    "source": "#include <algorithm>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\nconst int N = 200200, W = 200000;\r\n#define inf 0x3f3f3f3f\r\n#define int long long\r\n\r\nint n, m, in1, in2, in3;\r\nint fa[N], f[N], siz[N], ans[N], q[N];\r\n\r\nstruct Edge{\r\n    int u, v, w;\r\n}e[N];\r\n\r\nint find(int x){\r\n    return fa[x] == x ? x : fa[x] = find(fa[x]);\r\n}\r\n\r\nvoid merge(int x, int y){\r\n    x = find(x), y = find(y);\r\n    if (x == y) return ;\r\n    fa[x] = y, siz[y] += siz[x];\r\n}\r\n\r\nsigned main(){\r\n    // freopen(\"the.in\", \"r\", stdin);\r\n    // freopen(\"the.out\", \"w\", stdout);\r\n    scanf(\"%lld %lld\", &n, &m);\r\n    for (int i = 1; i <= n; i ++) fa[i] = i, siz[i] = 1;\r\n    for (int i = 1; i < n; i ++) {\r\n        scanf(\"%lld %lld %lld\", &in1, &in2, &in3);\r\n        e[i] = Edge{in1, in2, in3};\r\n    }\r\n    sort(e + 1, e + n, [](Edge a, Edge b){return a.w < b.w;});\r\n    for (int i = 1; i < n; i ++) {\r\n        f[e[i].w] += siz[find(e[i].u)] * siz[find(e[i].v)];\r\n        merge(e[i].u, e[i].v);\r\n    }\r\n    int sum = 0;\r\n    for (int i = 1; i <= W; i ++)\r\n        sum += f[i], ans[i] = sum;\r\n    for (int i = 1; i <= m; i ++)\r\n        scanf(\"%lld\", &in1), cout << ans[in1] << ' ';\r\n    return 0;\r\n}"
}