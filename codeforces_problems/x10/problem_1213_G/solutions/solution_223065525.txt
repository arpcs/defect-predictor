{
    "id": 223065525,
    "contestId": 1213,
    "creationTimeSeconds": 1694512163,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "G",
        "name": "Path Queries",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "divide and conquer",
            "dsu",
            "graphs",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "huyhoangk36chv"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 6451200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define task \"CAU5\"\r\nconst int MAXN = 2e5 + 7;\r\nstruct Node\r\n{\r\n    int u, v, w;\r\n};\r\nint n, m;\r\nint par[MAXN];\r\npair <int, int> q[MAXN];\r\nNode a[MAXN];\r\nlong long re[MAXN];\r\nbool cmp(Node x, Node y)\r\n{\r\n    return (x.w < y.w);\r\n}\r\nvoid Input()\r\n{\r\n    cin >> n >> m;\r\n    n--;\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        int u, v, w;\r\n        cin >> u >> v >> w;\r\n        a[i] = {u, v, w};\r\n        par[i] = -1;\r\n    }\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        cin >> q[i].first;\r\n        q[i].second = i;\r\n    }\r\n    sort(q + 1, q + 1 + m);\r\n    sort(a + 1, a + 1 + n, cmp);\r\n}\r\nint root(int u)\r\n{\r\n    return (par[u] < 0) ? u : par[u] = root(par[u]);\r\n}\r\nlong long cur = 0;\r\nlong long cal(int t)\r\n{\r\n    return 1LL * t * (t - 1) / 2;\r\n}\r\nvoid Merge(int x, int y)\r\n{\r\n    x = root(x);\r\n    y = root(y);\r\n    if(par[x] > par[y])\r\n        swap(x, y);\r\n    cur -= cal(-par[x]);\r\n    cur -= cal(-par[y]);\r\n    par[x] += par[y];\r\n    cur += cal(-par[x]);\r\n    par[y] = x;\r\n}\r\nvoid calc(int pos)\r\n{\r\n    re[pos] = cur;\r\n    return ;\r\n}\r\nvoid solve()\r\n{\r\n    int j = 1;\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        while (a[j].w <= q[i].first && j <= n)\r\n        {\r\n            Merge(a[j].u, a[j].v);\r\n            j++;\r\n        }\r\n        calc(q[i].second);\r\n    }\r\n    for (int i = 1; i <= m; i++)\r\n        cout << re[i] << \" \";\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    freopen(task\".inp\", \"r\", stdin);\r\n    freopen(task\".out\", \"w\", stdout);\r\n    Input();\r\n    solve();\r\n    return 0;\r\n}\r\n"
}