{
    "id": 226314664,
    "contestId": 1213,
    "creationTimeSeconds": 1696258756,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "G",
        "name": "Path Queries",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "divide and conquer",
            "dsu",
            "graphs",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "Dry_day"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\n#define pb push_back\r\n#define pf push_front\r\n#define ff first\r\n#define ss second\r\n#define all(x) x.begin(),x.end()\r\n#define rall(x) x.rbegin(),x.rend()\r\nint size[200005];\r\nint parent[200005];\r\nint findPar(int node){         \r\n    if(node==parent[node])return node;\r\n    return parent[node]=findPar(parent[node]);\r\n}\r\nint sum;\r\nvoid unionBysize(int u, int v){\r\n    int pu=findPar(u);\r\n    int pv=findPar(v);\r\n    if(pu==pv)return;\r\n    int x=size[pu], y=size[pv];\r\n    sum-=(x*(x-1))/2+(y*(y-1))/2;\r\n    parent[pv]=pu;\r\n    size[pu]+=size[pv];\r\n    int tot=size[pu];\r\n    sum+=(tot*(tot-1))/2;\r\n}\r\nvoid solve(){\r\n    int n,m;\r\n    cin>>n>>m;\r\n    for(int i=1; i<=n; i++){\r\n        parent[i]=i;\r\n        size[i]=1;\r\n    }\r\n    vector<pair<int,pair<int,int>>> vect;\r\n    for(int i=0; i<n-1; i++){\r\n        int u,v,w;\r\n        cin>>u>>v>>w;\r\n        vect.pb({w,{u,v}});\r\n        vect.pb({w,{v,u}});\r\n    }\r\n    vector<int> q(m);\r\n    for(int &x:q)cin>>x;\r\n    sort(all(vect));\r\n    vector<int> ans(m+1,0);\r\n    for(auto x:vect){\r\n        int w=x.ff;\r\n        int u=x.ss.ff;\r\n        int v=x.ss.ss;\r\n        unionBysize(u,v);\r\n        ans[w]=sum;\r\n    }\r\n    for(int i=1; i<=m; i++){\r\n        ans[i]=max(ans[i], ans[i-1]);\r\n    }\r\n    for(auto x:q)cout<<ans[x]<<\" \";\r\n    cout<<endl;\r\n}\r\nint32_t main(){\r\n    int T=1;\r\n    //cin>>T;\r\n    while(T--){\r\n        solve();\r\n    }\r\n}     \r\n"
}