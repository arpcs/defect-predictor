{
    "id": 228868571,
    "contestId": 1213,
    "creationTimeSeconds": 1697769568,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "G",
        "name": "Path Queries",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "divide and conquer",
            "dsu",
            "graphs",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "Hossam_Hassan."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 234,
    "memoryConsumedBytes": 25702400,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\n#define int long long\r\n#define ppcnt __builtin_popcount\r\nusing namespace std;\r\n\r\nconst int  N =  200007 , MOD = 1e9+7 , INF = 1e16 ;\r\n\r\nclass DSU {\r\nprivate:\r\n    std::vector<int> parent;\r\n    std::vector<int> rank;\r\n    std::vector<int> size;\r\n\r\npublic:\r\n    DSU(int n) {\r\n        parent.resize(n);\r\n        rank.resize(n, 0);\r\n        size.resize(n, 1);\r\n\r\n        for (int i = 0; i < n; i++) {\r\n            parent[i] = i;  // Initialize each element as its own representative.\r\n        }\r\n    }\r\n\r\n    // Find the representative of the set containing element x.\r\n    int find(int x) {\r\n        if (parent[x] == x) {\r\n            return x;\r\n        }\r\n        return parent[x] = find(parent[x]); // Path compression.\r\n    }\r\n\r\n    // Union the sets containing elements x and y.\r\n    void unionSets(int x, int y) {\r\n        int rootX = find(x);\r\n        int rootY = find(y);\r\n\r\n        if (rootX != rootY) {\r\n            if (rank[rootX] < rank[rootY]) {\r\n                parent[rootX] = rootY;\r\n                size[rootY] += size[rootX];\r\n            } else if (rank[rootX] > rank[rootY]) {\r\n                parent[rootY] = rootX;\r\n                size[rootX] += size[rootY];\r\n            } else {\r\n                parent[rootY] = rootX;\r\n                rank[rootX]++;\r\n                size[rootX] += size[rootY];\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get the size of the set containing element x.\r\n    int getSize(int x) {\r\n        return size[find(x)];\r\n    }\r\n};\r\nvector<pair<int,pair<int,int>>>adj;\r\nvoid Solve() {\r\nint n,m;\r\ncin>>n>>m;\r\n    DSU dsu(n);\r\nfor(int i=0;i<n-1;i++)\r\n{\r\n    int u,v,c;\r\n    cin>>u>>v>>c;\r\n    u--,v--;\r\n    adj.push_back({c,{u,v}});\r\n}\r\n    sort(adj.begin(),adj.end());\r\nmap<int,int>sum;\r\nint ans=0;\r\nfor(int i=0;i<n-1;i++)\r\n{\r\n\r\n    int x=dsu.getSize(adj[i].second.first),y=dsu.getSize(adj[i].second.second);\r\n   ans-=(x*(x-1)/2);\r\n    if(dsu.find(adj[i].second.first)!=dsu.find(adj[i].second.second))\r\n        ans-=(y*(y-1)/2);\r\n\r\n\r\n    dsu.unionSets(adj[i].second.first,adj[i].second.second);\r\n//    cout<<adj[i].second.first<<\" \"<<adj[i].second.second<< \" \"<<dsu.getSize(adj[i].second.first)<<endl ;\r\n    x=dsu.getSize(adj[i].second.first);\r\n    y=dsu.getSize(adj[i].second.second);\r\n\r\n   ans+=(x*(x-1)/2);\r\n   sum[adj[i].first]=ans;\r\n\r\n}\r\nvector<int>v(N);\r\n//for(auto it:sum)\r\n//    cout<<it.first<<\" \"<<it.second<<endl;\r\n\r\nint mx=0;\r\nfor(int i=0;i<N;i++)\r\n{\r\n    if(i==0)\r\n        v[i]=sum[i];\r\n    else\r\n    v[i]=max(v[i-1],sum[i]);\r\n}\r\nfor(int i=0;i<m;i++)\r\n{\r\n    int q;\r\n    cin>>q;\r\n    cout<<v[q]<<\" \";\r\n}\r\n\r\n}\r\n\r\nint32_t main() {\r\n\r\n#ifdef ONLINE_JUDGE\r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n#endif\r\n\r\n\r\n    int t = 1, tc = 1;\r\n//    cin >> t;\r\n\r\n    while (t--) {\r\n\r\n        Solve();\r\n\r\n    }\r\n\r\n\r\n}"
}