{
    "id": 230122134,
    "contestId": 1213,
    "creationTimeSeconds": 1698475941,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1213,
        "index": "G",
        "name": "Path Queries",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "divide and conquer",
            "dsu",
            "graphs",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1213,
        "members": [
            {
                "handle": "Ahad"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1567175700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 264,
    "memoryConsumedBytes": 6451200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef int ll;\r\ntypedef pair<ll, ll> Pair;\r\n#define all(a) (a).begin(), (a).end()\r\n\r\nconst ll N = 2e5+7;\r\nll Parent[N], Size[N];\r\nll total; \r\n\r\nll find(ll v) {\r\n    if (Parent[v] == v) return v;\r\n    return Parent[v] = find(Parent[v]);\r\n}\r\n\r\nvoid Union(ll u, ll v) {\r\n    u = find(u);\r\n    v = find(v);\r\n\r\n    if (u != v) {\r\n        total += Size[u] * Size[v];\r\n        if (Size[u] < Size[v]) swap(u, v);\r\n        Parent[v] = u;\r\n        Size[u] += Size[v];\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n    ll n, m; cin >> n >> m;\r\n\r\n    pair<ll, Pair> arr[n-1];\r\n    for (auto &u : arr) cin >> u.second.first >> u.second.second >> u.first;\r\n    sort(arr, arr+(n-1));\r\n\r\n    Pair weight[m];\r\n    for (ll i = 0; i < m; i++) {\r\n        cin >> weight[i].first;\r\n        weight[i].second = i;\r\n    }\r\n    sort(weight, weight+m);\r\n\r\n    for (ll i = 1; i <= n; i++) {\r\n        Parent[i] = i;\r\n        Size[i] = 1;\r\n    }\r\n\r\n    ll i = 0, indx = 0, ans[m]{0};\r\n    while (i < n-1 and indx < m) {\r\n        if (arr[i].first <= weight[indx].first) {\r\n            Union(arr[i].second.first, arr[i].second.second);\r\n            i++;\r\n            ans[weight[indx].second] = total;\r\n        }\r\n        else {\r\n            ans[weight[indx].second] = total;\r\n            indx++;\r\n        }\r\n        \r\n    }\r\n\r\n    while (indx < m) {\r\n        ans[weight[indx].second] = total;\r\n        indx++;\r\n    }\r\n\r\n    for (auto &u : ans) cout << u << \" \";\r\n    cout << endl;\r\n\r\n    return 0;\r\n}"
}