{
    "id": 139930195,
    "contestId": 333,
    "creationTimeSeconds": 1639948969,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 333,
        "index": "C",
        "name": "Lucky Tickets",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2700,
        "tags": [
            "brute force",
            "constructive algorithms"
        ]
    },
    "author": {
        "contestId": 333,
        "members": [
            {
                "handle": "Zzif"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1374913800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 264,
    "memoryConsumedBytes": 14540800,
    "source": "#pragma GCC optimization (\"O3\")\n#pragma GCC optimization (\"unroll-loops\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\n#include <iostream>\n#include <cstdlib>\n#include <cctype>\n#include <functional>\n#include <sstream>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <ctime>\n#include <random>\n#include <chrono>\n#include <iomanip>\n#include <vector>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n#include <queue>\n#include <stack>\n#include <deque>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n\nusing ll = long long;\nusing ull = unsigned long long;\nusing db = long double;\nusing str = string;\n\n#define SZ(sp) int((sp).size())\n#define bgn(sp) (sp).begin()\n#define rbgn(sp) (sp).rbegin()\n#define all(sp) bgn(sp), (sp).end()\n#define rall(sp) rbgn(sp), (sp).rend()\n#define fi first\n#define se second\n#define mp make_pair\n#define debugLine() cout << \"\\n------------\\n\";\n\n//iterator = find_by_order(k-th); (0...n)\n// element = order_of_key(x); number of elements smaller than x\ntemplate < typename T >\nusing ordered_set = tree < T, null_type, less < T >, rb_tree_tag, tree_order_statistics_node_update >;\ntemplate < typename T >\nusing ordered_multiset = tree < T, null_type, less_equal <>, rb_tree_tag, tree_order_statistics_node_update >;\n\nconst ll MOD1 = 1e18 + 3;\nconst ll MOD2 = 1000000123;\nconst ll INF = 1e18 + 7;\nconst db EPS = 1e-7;\nconst db PI = acos((db)-1);\nconst ll N = 2, K = 2, P = 1e6 + 3, B = 900;\nmt19937 rng((unsigned int) chrono::steady_clock::now().time_since_epoch().count());\n\n#define int ll\n\nint k, n, xx;\nset < int > s;\n\nvoid dfs(int x, int z){\n    if (SZ(s) >= n) {\n        return;\n    }\n    if (!x) {\n        int y = abs(k - abs(z));\n        if(y < 10000){\n            s.insert(xx * 10000 + y);\n            s.insert(y * 10000 + xx);\n        }\n        return;\n    }\n    dfs(x / 10,z + (x % 10));\n    dfs(x / 10,z - (x % 10));\n    dfs(x / 10,z * (x % 10));\n}\n\nvoid solve(int cnt_test=0) {\n    cin >> k >> n;\n    for (int i = 0; i < 10000; ++i){\n        xx = i;\n        dfs(i / 10,i % 10);\n    }\n    for(auto it = s.begin(); n > 0; ++it, --n) {\n        printf(\"%08d\\n\", *it);\n    }\n    //cout << endl;\n}\n\nvoid precalc() {\n\n}\n\nint32_t main() {\n    //freopen(\"input.txt\", \"r\", stdin);\n    //freopen(\"output.txt\", \"w\", stdout);\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    //precalc();\n    int tt = 1;\n    //cin >> tt;\n    for (int cnt_test = 1; cnt_test <= tt; ++cnt_test) {\n        //cout << \"Case #\" << cnt_test << \":\" << endl;\n        solve(cnt_test);\n        //debugLine();\n    }\n    return 0;\n}"
}