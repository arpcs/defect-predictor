{
    "contestId": 1684,
    "index": "H",
    "name": "Hard Cut",
    "type": "PROGRAMMING",
    "points": 3250.0,
    "rating": 3400,
    "tags": [
        "constructive algorithms",
        "dfs and similar",
        "divide and conquer",
        "math"
    ],
    "desc": {
        "title": "H. Hard Cut",
        "statement": "<p>You are given a binary string $$$s$$$. You have to cut it into any number of non-intersecting substrings, so that the sum of binary integers denoted by these substrings is a power of 2. Each element of $$$s$$$ should be in exactly one substring.</p>",
        "inputSpecification": "<p>Each test contains multiple test cases. The first line contains the number of test cases $$$t$$$ ($$$1 \\le t \\le 10^5$$$). Description of the test cases follows.</p><p>Each test case contains a binary string $$$s$$$ ($$$1 \\le |s| \\le 10^6$$$).</p><p>It is guaranteed that the sum of $$$|s|$$$ over all test cases does not exceed $$$10^6$$$.</p>",
        "outputSpecification": "<p>For each test case output the answer to the problem as follows: </p><ul> <li> If the answer does not exist, output $$$-1$$$. </li><li> If the answer exists, firstly output an integer $$$k$$$\u00a0\u2014 the number of substrings in the answer. After that output $$$k$$$ non-intersecting substrings, for $$$i$$$-th substring output two integers $$$l_i, r_i$$$ ($$$1 \\le l_i, r_i \\le |s|$$$)\u00a0\u2014 the description of $$$i$$$-th substring. </li></ul><p>If there are multiple valid solutions, you can output any of them.</p>",
        "samples": [
            {
                "input": "\n4\n00000\n01101\n0111011001011\n000111100111110\n",
                "output": "\n-1\n\n3\n1 3\n4 4\n5 5\n\n8\n1 2\n3 3\n4 4\n5 6\n7 7\n8 10\n11 12\n13 13\n\n5\n1 5\n6 7\n8 11\n12 14\n15 15\n"
            }
        ],
        "note": "<p>In the first test case it is impossible to cut the string into substrings, so that the sum is a power of 2.</p><p>In the second test case such cut is valid: </p><ul> <li> $$$011_2 = 3_{10}$$$, </li><li> $$$0_2 = 0_{10}$$$, </li><li> $$$1_2 = 1_{10}$$$. </li></ul> $$$3 + 0 + 1 = 4$$$, $$$4$$$ is a power of 2."
    }
}