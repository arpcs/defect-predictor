{
    "id": 204655069,
    "contestId": 1450,
    "creationTimeSeconds": 1683311062,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1450,
        "index": "D",
        "name": "Rating Compression",
        "type": "PROGRAMMING",
        "points": 1750.0,
        "rating": 1800,
        "tags": [
            "binary search",
            "data structures",
            "greedy",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1450,
        "members": [
            {
                "handle": "nomadicjuggrnaut"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1607265300
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 19558400,
    "source": "\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.util.Arrays;\r\nimport java.util.Deque;\r\nimport java.util.HashSet;\r\nimport java.util.LinkedList;\r\n\r\npublic class RatingCompression {\r\n\r\n    static BufferedReader r = new BufferedReader(new InputStreamReader(System.in));\r\n    static PrintWriter out = new PrintWriter(System.out);\r\n\r\n    static int cnt[];\r\n\r\n    public static void main(String[] args) throws IOException {\r\n        int  t = ri();\r\n        while(t--> 0) {\r\n            int n = ri();\r\n            boolean[] ans = new boolean[n];\r\n            cnt = new int[n];\r\n            int a[] = ria();\r\n            int count = 0;\r\n            for(int i = 0; i<n; i++){\r\n                if(cnt[i]>0){\r\n                    count++;\r\n                }\r\n            }\r\n            ans[0] = count == n;\r\n            ans[n-1] = cnt[0] > 0;\r\n            int l = 0, r= n-1;\r\n            for(int i = n-1; i>0; i--) {\r\n                if(!ans[n-1]) break;\r\n                ans[i] = true;\r\n                int next= n - i - 1;\r\n                if(--cnt[next] == 0 && (a[l] == next || a[r] == next) && cnt[next+1]>0) {\r\n                    if(a[l] == next) l++;\r\n                    if(a[r] == next)r--;\r\n                    continue;\r\n                }\r\n                break;\r\n            }\r\n            for(boolean x: ans){\r\n                if(x) w('1');\r\n                else w('0');\r\n            }\r\n            lb();\r\n        }\r\n        closeOutStream();\r\n    }\r\n\r\n    private static boolean printSmaller(int a[], int k) {\r\n        Deque<Integer> q = new LinkedList<>();\r\n        int i=0;\r\n        for(i= 0; i<k; i++){\r\n            while(!q.isEmpty() && a[q.peekLast()] > a[i])\r\n                q.pollLast();\r\n            q.addLast(i);\r\n        }\r\n        HashSet<Integer> set = new HashSet<>();\r\n        int maxElements = a.length - k +1;\r\n        int thisEle;\r\n        for(; i<a.length; ++i){\r\n//            w(a[q.peekFirst()] +\" \");\r\n            thisEle = a[q.peekFirst()];\r\n            if(set.contains(thisEle) || thisEle > maxElements){\r\n                return false;\r\n            }else {\r\n                set.add(thisEle);\r\n            }\r\n            while(!q.isEmpty() && q.peekFirst() <= i-k)\r\n                q.pollFirst();\r\n            while(!q.isEmpty() && a[i] < a[q.peekLast()])\r\n                q.pollLast();\r\n            q.addLast(i);\r\n        }\r\n        thisEle = a[q.peekFirst()];\r\n        if(set.contains(thisEle) || thisEle > maxElements){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private static boolean verify(int a[], int k) {\r\n        int l =0, r = 0;\r\n        HashSet<Integer> set = new HashSet<>();\r\n        while(r-l +1 <k){\r\n            set.add(a[r++]);\r\n        }\r\n        for(; r<a.length; l++, r++) {\r\n            set.add(a[r]);\r\n            if(set.size()<k){\r\n                return false;\r\n            }\r\n            set.remove(a[l]);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static int ri() throws IOException {\r\n        return Integer.parseInt(r.readLine());\r\n    }\r\n\r\n    static int[] ria() throws IOException {\r\n        String s []= r.readLine().split(\" \");\r\n        int x[] = new int[s.length];\r\n        for(int i=0; i<s.length; i++){\r\n            x[i] = Integer.parseInt(s[i])-1;\r\n            cnt[x[i]]++;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    static void append(String s){\r\n        out.print(s);\r\n    }\r\n\r\n    static void wl(Object s){\r\n        out.println(s);\r\n    }\r\n\r\n    static void w(Object c){\r\n        out.print(c);\r\n    }\r\n\r\n    static void lb() {\r\n        out.println();\r\n    }\r\n\r\n    static void closeOutStream(){\r\n        out.close();\r\n    }\r\n}\r\n"
}