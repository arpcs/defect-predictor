{
    "id": 210257605,
    "contestId": 402,
    "creationTimeSeconds": 1687188104,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 402,
        "index": "D",
        "name": "Upgrading Array",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1800,
        "tags": [
            "dp",
            "greedy",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 402,
        "members": [
            {
                "handle": "_zzh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1394983800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 9011200,
    "source": "//#pragma GCC optimize(2)\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define endl '\\n'\r\n#define int long long\r\ntypedef pair<int,int> PII;\r\ntypedef long long LL;\r\nconst int INF=0x3f3f3f3f,mod=1e9 + 7;\r\nconst double eps=1e-6;\r\nconst double pai=acos(-1.0);\r\n//3.14159\r\ntemplate <class T = int> T read()\r\n{\r\n    T x = 0;\r\n    char ch = getchar(), f = 0;\r\n    while(ch < '0' || ch > '9') f |= (ch == '-'), ch = getchar();\r\n    while(ch >= '0' && ch <= '9')   x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar();\r\n    return f ? -x : x;\r\n}\r\ntemplate <class T = int> inline void write(T x,char ed='\\n')\r\n{\r\n    static int sta[111],tp;\r\n    if(x < 0) {\r\n        putchar('-');\r\n        x = -x;\r\n    }\r\n    if(!x){putchar('0'),putchar(ed);return;}\r\n    for(tp=0;x;x/=10)sta[++tp]=x%10;\r\n    for(;tp;putchar(sta[tp--]^48));\r\n    putchar(ed);\r\n}\r\nconst int N = 1e6 + 10;\r\nint prime[N],cnt = 0;\r\nbool st[N];\r\nmap<int,int> dp;\r\nvoid get_prime(int n)\r\n{\r\n    for(int i = 2; i <= n; i++) {\r\n        if(!st[i]) prime[++cnt] = i;\r\n        for(int j = 1; prime[j] <= n / i; j++) {\r\n            prime[i * prime[j]] = 1;\r\n            if(i % prime[j] == 0)\r\n                break;\r\n        }\r\n    }\r\n}\r\nmap<int,int> bad;\r\nint solve(int x)\r\n{\r\n    if(x == 1)\r\n        return 0;\r\n    int minn = 0;\r\n    if(dp[x])\r\n        return dp[x];\r\n    for(int i = 1; i <= cnt; i++) {\r\n        if(x % prime[i] == 0) {\r\n            minn = prime[i];\r\n            break;\r\n        }\r\n    }\r\n    if(minn == 0)\r\n    for(int j = prime[cnt] + 1; j * j <= x; j++) {\r\n        if(x % j == 0) {\r\n            minn = j;\r\n            break;\r\n        }\r\n    }\r\n    if(bad.count(minn))\r\n        return dp[x] = solve(x / minn) - 1;\r\n    else\r\n        return dp[x] = solve(x / minn) + 1;\r\n}\r\nsigned main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    get_prime(1e6);\r\n    int n,m;\r\n    cin >> n >> m;\r\n    vector<int> a(n + 1);\r\n    vector<int> p(m + 1);\r\n    for(int i = 1; i <= n; i++) {\r\n        cin >> a[i];\r\n    }\r\n    for(int i = 1; i <= m; i++) {\r\n        cin >> p[i];\r\n        bad[p[i]]++;\r\n    }\r\n    vector<int> gcd(n + 1);\r\n    int ggcd = a[1];\r\n    gcd[1] = a[1];\r\n    for(int i = 2; i <= n; i++) {\r\n        gcd[i] = __gcd(ggcd,a[i]);\r\n    }\r\n    vector<array<int,2>> event;\r\n    for(int j = 1; j <= m; j++) {\r\n        for(int i = n; i >= 1; i--) {\r\n            if((gcd[i]) % p[j] == 0) {\r\n                event.push_back({i,p[j]});\r\n            }\r\n        }\r\n    }\r\n    for(auto [r,g] : event) {\r\n        for(int i = 1; i <= r; i++) {\r\n            if(a[i] % g == 0)\r\n            a[i] /= g;\r\n        }\r\n    }\r\n    int res = 0;\r\n    for(int i = 1; i <= n; i++) {\r\n        res += solve(a[i]);\r\n    }\r\n    cout << res << endl;\r\n    return 0;\r\n}"
}