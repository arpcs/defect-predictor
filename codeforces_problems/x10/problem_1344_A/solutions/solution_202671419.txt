{
    "id": 202671419,
    "contestId": 1344,
    "creationTimeSeconds": 1681875938,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1344,
        "index": "A",
        "name": "Hilbert's Hotel",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1600,
        "tags": [
            "math",
            "number theory",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1344,
        "members": [
            {
                "handle": "qishui7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1588775700
    },
    "programmingLanguage": "Rust 2021",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 17203200,
    "source": "#[allow(unused)]\r\nuse std::collections::*;\r\nuse std::io::{BufRead, BufWriter, Write};\r\n\r\n// const MOD:i64 = 1000000000+7;\r\n#[allow(unused)]\r\npub fn solve(scan: &mut Scanner<impl BufRead>, out: &mut impl Write) {\r\n    let n = scan.token::<i64>();\r\n    let mut a = HashSet::new();\r\n    for i in 0..n {\r\n        let mut v = scan.token::<i64>();\r\n        a.insert(((v+i)%n+n)%n);\r\n    }   \r\n    if a.len() == n as usize {\r\n        writeln!(out, \"YES\").ok();\r\n    }else{\r\n        writeln!(out, \"NO\").ok();\r\n    }\r\n}\r\n\r\npub fn run(scan: &mut Scanner<impl BufRead>, out: &mut impl Write) {\r\n    let t = scan.token::<usize>();\r\n    for _ in 0..t {\r\n        solve(scan, out)\r\n    }\r\n}\r\n\r\n#[allow(unused)]\r\nfn main() {\r\n    let sin = std::io::stdin();\r\n    let scan = &mut Scanner::new(sin.lock());\r\n    let sout = std::io::stdout();\r\n    let out = &mut BufWriter::new(sout.lock());\r\n    run(scan, out);\r\n}\r\n\r\npub struct Scanner<R> {\r\n    reader: R,\r\n    buffer: Vec<String>,\r\n}\r\nimpl<R: ::std::io::BufRead> Scanner<R> {\r\n    pub fn new(reader: R) -> Self {\r\n        Self {\r\n            reader,\r\n            buffer: vec![],\r\n        }\r\n    }\r\n    pub fn token<T: ::std::str::FromStr>(&mut self) -> T {\r\n        loop {\r\n            if let Some(token) = self.buffer.pop() {\r\n                return token.parse().ok().expect(\"Failed parse\");\r\n            }\r\n            let mut input = String::new();\r\n            self.reader.read_line(&mut input).expect(\"Failed read\");\r\n            self.buffer = input.split_whitespace().rev().map(String::from).collect();\r\n        }\r\n    }\r\n    #[allow(unused)]\r\n    pub fn token_bytes(&mut self) -> Vec<u8> {\r\n        let s = self.token::<String>();\r\n        return s.as_bytes().into();\r\n    }\r\n}\r\n\r\n// https://codeforces.com/problemset/problem/1344/A\r\n// \u672c\u6a21\u677f\u7531 https://github.com/liuliangcan/play_with_python/blob/main/tools/gen_code_tool/gen_template.py \u81ea\u52a8\u751f\u6210;\u4e2d\u6587\u9898\u9762\u63cf\u8ff0\u53ef\u79fb\u6b65\r\n"
}