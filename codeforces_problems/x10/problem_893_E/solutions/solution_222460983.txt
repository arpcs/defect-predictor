{
    "id": 222460983,
    "contestId": 893,
    "creationTimeSeconds": 1694179176,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 893,
        "index": "E",
        "name": "Counting Arrays",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "combinatorics",
            "dp",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 893,
        "members": [
            {
                "handle": "grindToGM"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1511449500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 514,
    "memoryConsumedBytes": 180736000,
    "source": "# include <bits/stdc++.h>\r\n# define int long long\r\n# define endl \"\\n\"\r\n# define FIO ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)\r\nusing namespace std;\r\n \r\n \r\nint mod = 1e9+7;\r\nvector<vector<int>>dp(1e6+1,vector<int>(20));\r\n \r\n \r\nvoid fillDP(){\r\n    for(int j=1;j<20;j++)\r\n        dp[1][j]=dp[1][j-1]+1;\r\n\r\n    for(int i=2;i<=1e6;i++){\r\n        for(int j=1;j<=19;j++){\r\n            dp[i][j] = (dp[i][j-1]+dp[i-1][j]+1)%mod;\r\n        }\r\n    }\r\n}\r\n\r\n \r\n void findPFS(int n,vector<pair<int,int>>&pfs){\r\n    for(int i=2;i*i<=n;i++){\r\n        if(n%i==0){\r\n            pfs.push_back({i,1});\r\n            n/=i;\r\n            while(n%i==0){\r\n                pfs.back().second++;\r\n                n/=i;\r\n            }\r\n        }\r\n    }\r\n \r\n    if(n>1)\r\n        pfs.push_back({n,1});\r\n}\r\n \r\n \r\nint power(int a,int b){\r\n    if(b==0)\r\n        return 1;\r\n    else{\r\n        int ans = power(a,b/2);\r\n        ans=(ans*ans)%mod;\r\n        if(b%2)\r\n            ans=(ans*a)%mod;\r\n \r\n        return ans;\r\n    }\r\n}\r\n \r\n \r\nint32_t main(){\r\n    FIO;\r\n \r\n    int t;\r\n    cin>>t;\r\n\r\n    fillDP();\r\n\r\n \r\n    while(t--){\r\n        int x,y;\r\n        cin>>x>>y;\r\n \r\n        vector<pair<int,int>>pfactors;\r\n        findPFS(x,pfactors);\r\n \r\n        int ans = 1,forNegs = 1;\r\n \r\n        for(int i=0;i<pfactors.size();i++){\r\n            ans=(ans*(dp[y][pfactors[i].second]-dp[y][pfactors[i].second-1])%mod)%mod;\r\n        }\r\n \r\n        forNegs = power(2,y-1);\r\n \r\n        cout<<(ans*forNegs)%mod<<endl;\r\n    }\r\n \r\n    return 0;   \r\n \r\n}"
}