{
    "id": 207805670,
    "contestId": 441,
    "creationTimeSeconds": 1685408995,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 441,
        "index": "D",
        "name": "Valera and Swaps",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "dsu",
            "graphs",
            "implementation",
            "math",
            "string suffix structures"
        ]
    },
    "author": {
        "contestId": 441,
        "members": [
            {
                "handle": "Cegax"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1402241400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 409600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define all(c) (c).begin(), (c).end()\r\n#define rall(A) A.rbegin(),A.rend()\r\n#define pb push_back \r\n#define dbg(x) do {cerr << #x <<\" = \" << (x) << endl; } while (false)\r\ntypedef long long ll;\r\ntypedef pair<int, int> ii;\r\ntypedef vector<int> vi;\r\ntypedef vector<ii> vii;\r\n//cout << setprecision(12) << fixed;\r\n\r\n\r\n\r\nint main() {\r\n\tios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);\r\n    int n; cin >> n;\r\n    int p[n+1];\r\n    for(int i = 1; i <= n; i++)\r\n        cin >> p[i];\r\n\r\n    int m; cin >> m;\r\n\r\n    vector<bool> used(n+1, 0);\r\n\r\n    vector<vi> groups(n);\r\n    vi id(n+1, 0);\r\n\r\n    int k = 0;\r\n    int y = 0;\r\n    for(int i = 1; i <= n; i++) {\r\n        if(used[i]) continue;\r\n\r\n        int x = i;\r\n        \r\n        vi curr;\r\n\r\n        while(!used[x]) {\r\n            curr.pb(x);\r\n            used[x] = 1;\r\n            id[x] = k;\r\n\r\n            x = p[x];\r\n        }\r\n        y += (int) curr.size()-1;\r\n        groups[k++] = curr;\r\n    }\r\n\r\n    vii swaps;\r\n    while(y != m) {\r\n        if(y < m) {\r\n            y++;\r\n            for(int i = 1; i <= n; i++) {\r\n                if(id[i] != id[1]) {\r\n                    int tmp = id[i];\r\n                    swaps.pb({1, i});\r\n                    for(int j = 1; j <= n; j++) {\r\n                        if(id[j] == tmp) id[j] = id[1];\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            y--;\r\n            for(int i = 1; i <= n; i++) {\r\n                if((int) groups[id[i]].size() > 1) {\r\n                    vi tmp = groups[id[i]];\r\n                    int len = tmp.size();\r\n\r\n                    groups[id[i]].clear();\r\n\r\n                    int pos1 = -1, pos2 = -1;\r\n                    int h = n+1;\r\n\r\n                    for(int j = 0; j < len; j++) {\r\n                        if(tmp[j] == i) pos1 = j;\r\n                        else if(tmp[j] < h) {\r\n                            h = tmp[j];\r\n                            pos2 = j;\r\n                        }\r\n                    }\r\n\r\n                    swaps.pb({i, h});\r\n\r\n                    auto complete = [&](int p1, int p2, int x) {\r\n                        int it = p2 % len;\r\n\r\n\r\n                        do {\r\n                            it++;\r\n                            it %= len;\r\n\r\n                            groups[x].pb(tmp[it]);\r\n                            id[tmp[it]] = x;\r\n                        } while(it != p1);\r\n                    };\r\n\r\n                    int added1 = 0;\r\n                    for(int j = 0; j < n; j++) {\r\n                        if(groups[j].empty()) {\r\n                            if(!added1) {\r\n                                complete(pos1, pos2, j);\r\n                                added1 = true;\r\n                            }\r\n                            else {\r\n                                complete(pos2, pos1, j);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    cout << swaps.size() << \"\\n\";\r\n    for(auto e : swaps) {\r\n        cout << e.first << \" \" << e.second << \" \";\r\n    }\r\n\t\r\n    return 0;\r\n}\r\n\r\n\r\n"
}