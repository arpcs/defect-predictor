{
    "id": 228763220,
    "contestId": 441,
    "creationTimeSeconds": 1697700914,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 441,
        "index": "D",
        "name": "Valera and Swaps",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "dsu",
            "graphs",
            "implementation",
            "math",
            "string suffix structures"
        ]
    },
    "author": {
        "contestId": 441,
        "members": [
            {
                "handle": "RGB_ICPC3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1402241400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define endl '\\n'\r\n\r\nusing LL = long long;\r\nconst int MX = 3005;\r\nint cnt = 0;\r\nvector<int> v[MX];\r\n\r\nstruct DSU {\r\n    std::vector<int> f, siz;\r\n    \r\n    DSU() {}\r\n    DSU(int n) {\r\n        init(n);\r\n    }\r\n    \r\n    void init(int n) {\r\n        f.resize(n);\r\n        std::iota(f.begin(), f.end(), 0);\r\n        siz.assign(n, 1);\r\n    }\r\n    \r\n    int find(int x) {\r\n        while (x != f[x]) {\r\n            x = f[x] = f[f[x]];\r\n        }\r\n        return x;\r\n    }\r\n    \r\n    bool same(int x, int y) {\r\n        return find(x) == find(y);\r\n    }\r\n    \r\n    bool merge(int x, int y) {\r\n        x = find(x);\r\n        y = find(y);\r\n        if (x == y) {\r\n            return false;\r\n        }\r\n        siz[x] += siz[y];\r\n        f[y] = x;\r\n        return true;\r\n    }\r\n    \r\n    int size(int x) {\r\n        return siz[find(x)];\r\n    }\r\n}dsu;\r\n\r\nvoid solve() {\r\n\tint n; cin >> n;\r\n\tvector<int> a(n + 1);\r\n\tfor (int i = 1; i <= n; i++) cin >> a[i];\r\n\tvector<bool> vis(n + 1);\r\n\tdsu.init(n + 1);\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tint cur = i;\r\n\t\tif (vis[cur]) continue;\r\n\t\twhile (1) {\r\n\t\t\tif (vis[cur]) break;\r\n\t\t\tvis[cur] = 1;\r\n\t\t\tv[cnt].push_back(cur);\r\n\t\t\tcur = a[cur];\r\n\t\t}\r\n\t\tsort(v[cnt].begin(), v[cnt].end());\r\n\t\tcnt++;\r\n\t}\r\n\t\r\n\tfor (int i = 0; i < cnt; i++) for (int j = 0; j < v[i].size() - 1; j++) dsu.merge(v[i][j], v[i][j + 1]);\r\n\tint tot = 0;\r\n\tfor (int i = 0; i < cnt; i++) tot += v[i].size() - 1;\r\n\tsort(v, v + cnt, [&](vector<int> x, vector<int> y) {\r\n\t\treturn x[0] < y[0];\r\n\t});\r\n\tint m; cin >> m;\r\n\tcout << abs(tot - m) << endl;\r\n\tif (tot > m) {\r\n\t\tfor (int i = 1; i <= n; i++) {\r\n\t\t\tfor (int j = i + 1; j <= n; j++) {\r\n\t\t\t\tif (a[i] == i) break;\r\n\t\t\t\tif (tot == m) break;\r\n\t\t\t\ttot--;\r\n\t\t\t\tif (dsu.find(i) == dsu.find(j)) cout << i << ' ' << j << endl, swap(a[i], a[j]);\r\n\t\t\t}\r\n\t\t\tif (tot == m) break;\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\tfor (int i = 1; i < cnt; i++) {\r\n\t\t\tif (tot == m) break;\r\n\t\t\tcout << v[0][0] << ' ' << v[i][0] << endl;\r\n\t\t\ttot++;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nint main() {\r\n#ifndef ONLINE_JUDGE\r\n\tfreopen(\"in.txt\", \"r\", stdin);\r\n#endif\r\n\tios::sync_with_stdio(false);\r\n\tcin.tie(nullptr), cout.tie(nullptr);\r\n\r\n\tint T = 1;\r\n\twhile (T --) solve();\r\n\r\n\treturn 0;\r\n}\r\n"
}