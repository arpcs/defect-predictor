{
    "id": 223840005,
    "contestId": 1278,
    "creationTimeSeconds": 1695042107,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1278,
        "index": "C",
        "name": "Berry Jam",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1278,
        "members": [
            {
                "handle": "ashneil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1576766100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long int ll;\n\nll mod = 998244353;\npriority_queue<ll, vector<ll>, greater<ll> > minh;\npriority_queue<ll> maxh;\n\nvoid dfs(ll curr, ll par,vector<ll> adj[])\n{\n    if(adj[curr].size()==1)\n    {\n        return ;\n    }\n\n    for(int i=0;i<adj[curr].size();i++)\n    {\n        if(adj[curr][i]==par)\n            continue;\n\n        dfs(adj[curr][i],curr,adj);\n    }\n\n    return;\n}\nll gcdExtended(ll a, ll b, ll* x, ll* y)\n{\n\n\n    if (a == 0) {\n        *x = 0, *y = 1;\n        return b;\n    }\n\n\n    ll x1, y1;\n    ll gcd = gcdExtended(b % a, a, &x1, &y1);\n\n\n    *x = y1 - (b / a) * x1;\n    *y = x1;\n\n    return gcd;\n}\nll modInverse(long long int A, long long int M)\n{\n    ll x, y;\n    ll g = gcdExtended(A, M, &x, &y);\n    if (g != 1)\n        return -1;\n    else {\n\n        ll res = (x % M + M) % M;\n        return res;\n    }\n}\nvoid BuildSegTree(ll node,ll start,ll ende,vector<ll>& tree,vector<ll>& arr)\n{\n    if(start==ende){\n\ttree[node] = arr[start];\n\treturn ;\n    }\n\n    ll mid = (start+ende)/2;\n    BuildSegTree(2*node,start,mid,tree,arr);\n    BuildSegTree(2*node+1,mid+1,ende,tree,arr);\n    tree[node] = tree[2*node] + tree[2*node+1];\n    return ;\n\n}\nll querySegTree(ll node,ll start,ll ende,ll l,ll r,vector<ll>&tree)\n{\n    if(l>ende || r<start)\n\treturn 0;\n\n    if(l<=start && r>=ende){\n\treturn tree[node];\n    }\n\n    ll mid = (start+ende)/2;\n    return querySegTree(2*node,start,mid,l,r,tree) + querySegTree(2*node+1,mid+1,ende,l,r,tree);\n}\nvoid updateSegTree(ll node,ll start,ll ende,ll pos,ll val,vector<ll>& tree)\n{\n\n    if(start==ende)\n    {\n        tree[node] = val;\n        return ;\n    }\n\n    ll mid = (start+ende)/2;\n    if(pos<=mid)\n    \tupdateSegTree(2*node,start,mid,pos,val,tree);\n    else\n    \tupdateSegTree(2*node + 1,mid+1,ende,pos,val,tree);\n    tree[node] = tree[2*node] + tree[2*node+1];\n    return ;\n}\n\n\n\nint main()\n{\n        ios_base::sync_with_stdio(false);\n    \tcin.tie(NULL);\r\n\r\n    \tll t;\r\n    \tcin>>t;\r\n\r\n    \twhile(t--)\r\n        {\r\n            ll n;\r\n            cin>>n;\r\n\r\n            ll a[2*n];\r\n            for(int i=0;i<2*n;i++)\r\n            {\r\n                cin>>a[i];\r\n            }\r\n            vector<ll> ones(2*n+1,0);\r\n            vector<ll> twos(2*n+1,0);\r\n\r\n            for(int i=1;i<=2*n;i++)\r\n            {\r\n                ones[i]+=ones[i-1];\r\n                twos[i]+=twos[i-1];\r\n\r\n                if(a[i-1]==1)\r\n                    ones[i]++;\r\n                else\r\n                    twos[i]++;\r\n            }\r\n\r\n            ll ans = 2*n;\r\n            map<ll,ll> mp;\r\n            for(int i=-2*n;i<=2*n;i++)\r\n                mp[i] = -1;\r\n\r\n\r\n\r\n            for(int i=0;i<=n;i++)\r\n            {\r\n                mp[twos[i] - ones[i]] = i;\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n            for(int i=n;i<=2*n;i++)\r\n            {\r\n                ll need = twos[i] - ones[i] - (twos[2*n] - ones[2*n]);\r\n                if(mp[need]!=-1)\r\n                    ans = min(ans,i-need);\r\n\r\n\r\n            }\r\n\r\n            if(twos[2*n]==ones[2*n])\r\n                ans = 0;\r\n\r\n            cout<<ans<<endl;\r\n        }\n\n\n}\n"
}