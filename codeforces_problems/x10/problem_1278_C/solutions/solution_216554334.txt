{
    "id": 216554334,
    "contestId": 1278,
    "creationTimeSeconds": 1690794912,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1278,
        "index": "C",
        "name": "Berry Jam",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1278,
        "members": [
            {
                "handle": "LOL11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1576766100
    },
    "programmingLanguage": "Python 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 748,
    "memoryConsumedBytes": 72908800,
    "source": "import sys\r\nfrom collections import defaultdict\r\nfrom random import randrange\r\nfrom copy import copy\r\nclass dict_(dict):\r\n    RANDOM = randrange(2 ** 62)\r\n \r\n    def __init__(self, dd):\r\n        super().__init__({k ^ self.RANDOM: v for k, v in dd.items()})\r\n \r\n    def __missing__(self, key):\r\n        return 0\r\n \r\n    def __setitem__(self, key, value):\r\n        super().__setitem__(key ^ self.RANDOM, value)\r\n \r\n    def __getitem__(self, item):\r\n        return super().__getitem__(item ^ self.RANDOM)\r\n \r\n    def __contains__(self, item):\r\n        return super().__contains__(item ^ self.RANDOM)\r\n \r\n    def items(self):\r\n        for k, v in super().items():\r\n            yield (k ^ self.RANDOM, v)\r\n \r\n    def keys(self):\r\n        for k in super().keys():\r\n            yield k ^ self.RANDOM\r\n \r\n    def __repr__(self):\r\n        return '{0}'.format({k ^ self.RANDOM: v for k, v in super().items()})\r\n    \r\ninp = lambda: sys.stdin.readline().strip()\r\nlmp = lambda: list(map(int, inp().split()))\r\nmp = lambda: map(int, inp().split())\r\ninf = 10 ** 20\r\n\r\ndef main():\r\n    \r\n    n = int(inp())\r\n    a = lmp()\r\n    m = n * 2\r\n    suffk = [0] * m; suffch = [0] * m\r\n    prefk = [0] * m; prefch = [0] * m\r\n    if a[0] == 1:\r\n        prefk[0] = 1\r\n    else:\r\n        prefch[0] = 1\r\n    for i in range(1, m):\r\n        prefk[i] = prefk[i - 1]\r\n        prefch[i] = prefch[i - 1]\r\n        if a[i] == 1:\r\n            prefk[i] += 1\r\n        else:\r\n            prefch[i] += 1\r\n    if a[-1] == 1:\r\n        suffk[-1] = 1\r\n    else:\r\n        suffch[-1] = 1\r\n    for i in range(m - 2, -1, -1):\r\n        suffk[i] = suffk[i + 1]\r\n        suffch[i] = suffch[i + 1]\r\n        if a[i] == 1:\r\n            suffk[i] += 1\r\n        else:\r\n            suffch[i] += 1\r\n    dsuff = [[] for i in range(3 * m + 10)]\r\n    #dsuff = defaultdict(int)\r\n    #dpref = defaultdict(int)\r\n    for i in range(n, m):\r\n        dsuff[suffk[i] - suffch[i] + m + 1].append(i)\r\n    ans = 0\r\n    for i in range(n):\r\n        cur = prefk[i] - prefch[i]\r\n        fnd = -cur + m + 1\r\n        if dsuff[fnd] != []:\r\n            ans = max(ans, i + 1 + (m - dsuff[fnd][0]))\r\n        elif cur == 0:\r\n            ans = max(ans, i + 1)\r\n    if dsuff[m + 1] != []:\r\n        ans = max(ans, m - dsuff[m + 1][0])\r\n    print(m - ans)\r\n        \r\n    \r\n    \r\n    \r\nf = 1\r\nif f:\r\n    for _ in range(int(input())):\r\n        main()\r\nelse:\r\n    main()\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n    \r\n"
}