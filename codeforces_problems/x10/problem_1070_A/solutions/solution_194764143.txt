{
    "id": 194764143,
    "contestId": 1070,
    "creationTimeSeconds": 1677231868,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1070,
        "index": "A",
        "name": "Find a Number",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "dp",
            "graphs",
            "number theory",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 1070,
        "members": [
            {
                "handle": "Ankit_332"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1540022700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 185,
    "timeConsumedMillis": 483,
    "memoryConsumedBytes": 6348800,
    "source": "#pragma GCC optimize(\"O2\")\r\n#pragma GCC target(\"avx,avx2,fma\")\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\n#define ll     long long\r\n#define test   int _TEST; cin>>_TEST; while(_TEST--)\r\n#define ff     first\r\n#define ss     second\r\n#define pb     push_back\r\n#define ppb    pop_back\r\n#define pf     push_front\r\n#define ppf    pop_front\r\n\r\ntemplate <typename T> using Ordered_Set_Tree =\r\n        tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate <typename T> using Ordered_Multiset_Tree =\r\n        tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\ntemplate <typename A, typename B> ostream& operator<<(ostream& s, const pair<A, B>& self) {s << self.first << ' ' << self.second << ' '; return s; }\r\ntemplate <typename T> ostream& operator<<(ostream& s, const vector<T>& self) { for (auto e : self) { s << e << '\\n'; } return s; }\r\ntemplate <typename T> ostream& operator<<(ostream& s, tuple<T, T, T>& self) { s << get<0>(self) << ' ' << get<1>(self) << ' ' << get<2>(self); return s; }\r\ntemplate <typename A, typename B> istream& operator>>(istream& s, pair<A, B>& self) { s >> self.first >> self.second; return s; }\r\ntemplate <typename T> istream& operator>>(istream& s, tuple<T, T, T>& self) { s >> get<0>(self) >> get<1>(self) >> get<2>(self); return s; }\r\ntemplate <typename T> istream& operator>>(istream& s, tuple<T, T, T, T>& self) { s >> get<0>(self) >> get<1>(self) >> get<2>(self) >> get<3>(self); return s; }\r\ntemplate <typename T> istream& operator>>(istream& s, vector<T>& self) { for (size_t i = 0; i < self.size(); ++i) { s >> self[i]; } return s; }\r\n\r\n///DEBUG\r\nvoid _Print(int t) {cerr << t;}\r\nvoid _Print(string t) {cerr << t;}\r\nvoid _Print(char t) {cerr << t;}\r\nvoid _Print(long long t) {cerr << t;}\r\nvoid _Print(double t) {cerr << t;}\r\nvoid _Print(unsigned long long t) {cerr << t;}\r\n\r\ntemplate <class T, class V> void _Print(pair <T, V> &p);\r\ntemplate <class T> void _Print(list <T> &v);\r\ntemplate <class T> void _Print(vector <T> &v);\r\ntemplate <class T> void _Print(deque <T> &v);\r\ntemplate <class T, class V> void _Print(T *v, V sz);\r\ntemplate <class T, class V, class P> void _Print(T *v, V sz, P sm);\r\ntemplate <class T> void _Print(set <T> &v);\r\ntemplate <class T, class V> void _Print(map <T, V> &v);\r\ntemplate <class T> void _Print(multiset <T> &v);\r\n\r\ntemplate <class T, class V> void _Print(pair <T, V> &p) {cerr << \"{\"; _Print(p.ff); cerr << \",\"; _Print(p.ss); cerr << \"}\\n\\n\";}\r\ntemplate <class T> void _Print(list <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(vector <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(deque <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V> void _Print(T *v, V sz) {cerr << \"[ \"; for(int i=0; i<sz; i++) {_Print(v[i]); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V, class P> void _Print(T *v, V sz, P sm) {cerr << \"[\\n\"; for(int i=0; i<sz; i++) { for(int j=0; j<sm; j++) {_Print(v[i][j]); cerr << \" \";} cerr << \"\\n\";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(set <T> &v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T> void _Print(multiset <T>& v) {cerr << \"[ \"; for (T i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\ntemplate <class T, class V> void _Print(map <T, V> &v) {cerr << \"[ \"; for (auto i : v) {_Print(i); cerr << \" \";} cerr << \"]\\n\\n\";}\r\n\r\n#define debug(...) debug_out(vec_splitter(#__VA_ARGS__), 0, __LINE__, __VA_ARGS__)\r\nvector<string> vec_splitter(string s)\r\n{\r\n    s += ',';\r\n    vector<string> res;\r\n    while(!s.empty())\r\n    {\r\n        res.push_back(s.substr(0, s.find(',')));\r\n        s = s.substr(s.find(',') + 1);\r\n    }\r\n    return res;\r\n}\r\nvoid debug_out(vector<string> __attribute__ ((unused)) args, __attribute__ ((unused)) int idx, __attribute__ ((unused)) int LINE_NUM) { cerr << endl; }\r\ntemplate <typename Head, typename... Tail> void debug_out(vector<string> args, int idx, int LINE_NUM, Head H, Tail... T)\r\n{\r\n    if(idx > 0) cerr << \", \"; else cerr << \"Line(\" << LINE_NUM << \") \";\r\n    stringstream ss; ss << H;\r\n    cerr << args[idx] << \" = \" << ss.str();\r\n    debug_out(args, idx + 1, LINE_NUM, T...);\r\n}\r\n///DEBUG\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n\r\n    ///freopen(\"input.txt\", \"r\", stdin);\r\n    ///freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    int d, s;\r\n    cin>>d>>s;\r\n\r\n    vector<vector<bool>> done(d+1, vector<bool> (s+1, 0));\r\n\r\n    queue<pair<string, pair<int, int>>> qp;\r\n    // ff -> string num\r\n    // ss.ff -> num modulo d\r\n    // ss.ss -> sum of digits of num\r\n\r\n    string str = \"\";\r\n\r\n    qp.push({str, {0, 0}});\r\n\r\n    int mod, sum;\r\n\r\n    done[0][0] = 1;\r\n\r\n    while(qp.size())\r\n    {\r\n        auto e = qp.front();\r\n        qp.pop();\r\n\r\n        mod = e.ss.ff;\r\n        sum = e.ss.ss;\r\n        str = e.ff;\r\n\r\n        for(int i=0 + (str.size()==0); i<=9; i++)\r\n        {\r\n            if(sum+i > s)                       continue;\r\n            if(done[(mod*10+i)%d][sum+i])       continue;\r\n\r\n            str += (char)('0' + i);\r\n\r\n            if((mod*10+i)%d==0 && (sum+i)==s)\r\n            {\r\n                cout<<str<<\"\\n\";\r\n                exit(0);\r\n            }\r\n\r\n            qp.push({str, {(mod*10+i)%d, sum+i}});\r\n            done[(mod*10+i)%d][sum+i] = 1;\r\n\r\n            str.ppb();\r\n        }\r\n    }\r\n\r\n    cout<<-1<<\"\\n\";\r\n}\r\n"
}