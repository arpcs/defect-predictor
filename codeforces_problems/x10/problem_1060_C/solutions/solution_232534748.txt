{
    "id": 232534748,
    "contestId": 1060,
    "creationTimeSeconds": 1699805844,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1060,
        "index": "C",
        "name": "Maximum Subrectangle",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "binary search",
            "implementation",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1060,
        "members": [
            {
                "handle": "kauperwood"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1538636700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 64307200,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\nusing ld = long double;\n#define debug(x) std::cerr << __FUNCTION__ << \":\" << __LINE__ << \" \" << #x << \" = \" << x << '\\n';\nconst ll INF = 4e18;\n//#pragma GCC optimize(\"Ofast\")\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,tune=native\")\n//#pragma GCC optimize(\"unroll-loops\")\nconst ll MAXSUM = 2001;\nll get_suma(ll l, ll r, vector<ll> &pref_a){\n    return pref_a[r + 1] - pref_a[l];\n}\nll get_sumb(ll l, ll r, vector<ll> &pref_b){\n    return pref_b[r + 1] - pref_b[l];\n}void solve(){\n    ll n, m;\n    cin >> n >> m;\n    ll x;\n    vector<ll> a(n);\n    vector<ll> b(m);\n    vector<ll> pref_a(n + 1);\n    vector<ll> pref_b(m + 1);\n    for (int i = 0; i < n; i++){\n        cin >> a[i];\n    }\n    for (int i =0 ; i < n; i++){\n        pref_a[i + 1] = pref_a[i] + a[i];\n    }\n    for (int i = 0; i <m; i++){\n        cin >> b[i];\n    }\n    for (int i = 0; i < m; i++){\n        pref_b[i + 1] = pref_b[i]+b[i];\n    }\n    cin >> x;\n    vector<ll> maxi_len_with_this_sum_a(MAXSUM * MAXSUM + 1, 0);\n    vector<ll> maxi_len_with_this_sum_b(MAXSUM * MAXSUM + 1, 0);\n    for (ll len = 1; len <= n; len++){\n        for (ll j = 0; j + len - 1 < n; j++){\n            ll gs = get_suma(j, j + len - 1, pref_a);\n            maxi_len_with_this_sum_a[gs] = max(maxi_len_with_this_sum_a[gs], len);\n        }\n    }\n    for (int i = 1; i < MAXSUM; i++){\n        maxi_len_with_this_sum_a[i] = max(maxi_len_with_this_sum_a[i - 1], maxi_len_with_this_sum_a[i]);\n    }\n    for (ll len = 1; len <= m; len++){\n        for (ll j = 0; j + len - 1 < m; j++){\n            ll gs = get_sumb(j, j + len - 1, pref_b);\n            maxi_len_with_this_sum_b[gs] = max(maxi_len_with_this_sum_b[gs], len);\n        }\n    }\n    for (int i = 1; i < MAXSUM; i++){\n        maxi_len_with_this_sum_b[i] = max(maxi_len_with_this_sum_b[i - 1], maxi_len_with_this_sum_b[i]);\n    }\n    ll ans = 0;\n    for (int i = 1; i < MAXSUM; i++){\n        ans = max(ans, maxi_len_with_this_sum_a[i] * maxi_len_with_this_sum_b[min(MAXSUM*MAXSUM, x / i)]);\n    }\n    cout << ans;\n}\nint main(){\n    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n    int t;\n    //cin >> t;\n    t = 1;\n    while(t--){\n        solve();\n    }\n    return 0;\n}"
}