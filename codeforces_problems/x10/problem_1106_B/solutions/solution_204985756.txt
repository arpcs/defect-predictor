{
    "id": 204985756,
    "contestId": 1106,
    "creationTimeSeconds": 1683469922,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1106,
        "index": "B",
        "name": "Lunar New Year and Food Ordering",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1106,
        "members": [
            {
                "handle": "Hany_Jr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548938100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 64,
    "timeConsumedMillis": 530,
    "memoryConsumedBytes": 14540800,
    "source": "# pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops,fast-math,O3\")\r\n# include<bits/stdc++.h>\r\n# include <ext/rope>\r\n# define all(s) (s).begin(), (s).end()\r\n# define debug(x); cout << \"here \" << x << endl;\r\n# define returnvoid(x) return void (cout << x << endl);\r\n# define ll long long\r\n# define vc vector\r\n# define OO 1e18\r\nusing namespace __gnu_cxx;\r\nusing namespace std;\r\ntemplate < typename shap = int > istream& operator >> (istream& cin, vc < shap >& v){for (auto& x : v) cin >> x; return cin;}\r\ntemplate < typename shap = int > ostream& operator << (ostream& cout, const vc < shap >& v){for (const shap& x : v) cout << x << ' '; return cout;}\r\nint dx[4] = { 0, 0, 1, -1 };\r\nint dy[4] = { 1, -1, 0, 0 };\r\nstring let = \"abcdefghijklmnopqrstuvwxyz\";\r\nstd::mt19937_64 rng(std::chrono::system_clock::now().time_since_epoch().count());\r\nll random(ll a, ll b) { return a + rng() % (b - a + 1); }\r\nint const N = 2e5 + 10, mod = 1e9 + 7;\r\ninline void Rczm() {\r\n  int n, q;\r\n  cin >> n >> q;\r\n  vc<ll> dish(n + 1), cost(n + 1);\r\n  set<pair<ll, ll>> st;\r\n  map<ll, ll> avail;\r\n  for (int i = 1; i <= n; i++) cin >> dish[i], avail[i] = dish[i];\r\n  for (int i = 1; i <= n; i++) cin >> cost[i], st.emplace(cost[i], i);\r\n  while (q--) {\r\n    ll t, d;\r\n    cin >> t >> d;\r\n    ll answer = 0;\r\n    ll mul;\r\n    if (avail.contains(t)) {\r\n      mul = min(d, avail[t]);\r\n      answer += mul * cost[t];\r\n      d -= mul;\r\n      avail[t] -= mul;\r\n      if (!avail[t]) avail.erase(t), st.erase({cost[t], t});\r\n    }\r\n    while (st.size() and d > 0) {\r\n      auto [f, s] = *st.begin();\r\n      ll m = min(d, avail[s]);\r\n      answer += m * cost[s];\r\n      avail[s] -= m;\r\n      d -= m;\r\n      f -= m;\r\n      st.erase(st.begin());\r\n      if (!avail[s]) avail.erase(s);\r\n      else if (f) st.emplace(f, s);\r\n    }\r\n    if(d > 0)cout << 0 << endl;\r\n    else cout << answer << endl;\r\n  }\r\n}\r\nvoid inti() {\r\n  ios_base::sync_with_stdio(false), cout.tie(NULL), cin.tie(NULL);\r\n  // freopen(\"collectingofficer.in\",\"r\",stdin),freopen(\"output.txt\", \"w\", stdout);\r\n}\r\nsigned main() {\r\n  inti();\r\n  srand(time(0));\r\n  ll Whirlpool = 1, Test_case = 1;\r\n//  cin >> Whirlpool;\r\n  while (Whirlpool--) {\r\n    //cout << \"Case \" << Test_case++ << \": \";\r\n    Rczm();\r\n  }\r\n}"
}