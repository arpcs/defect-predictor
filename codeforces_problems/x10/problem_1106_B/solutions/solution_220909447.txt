{
    "id": 220909447,
    "contestId": 1106,
    "creationTimeSeconds": 1693260258,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1106,
        "index": "B",
        "name": "Lunar New Year and Food Ordering",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1106,
        "members": [
            {
                "handle": "_Heavy_showers_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548938100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 12492800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int maxn = 1e6 + 7;\r\npair<int , int> arr[maxn] = {};\r\nint can[maxn] = {};\r\n\r\nint32_t main()\r\n{\r\n    //freopen(\"main.inp\",\"r\",stdin);\r\n    //freopen(\"main.out\",\"w+\",stdout);\r\n    ios :: sync_with_stdio(false);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n    int n,q; cin >> n >> q;\r\n    // first - cost :: second - dishes\r\n    multiset <pair<int , int>> sett;\r\n    for (int i = 1; i <= n; i++) cin >> can[i];\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        cin >> arr[i].first; arr[i].second = i; sett.insert(arr[i]);\r\n    }\r\n\r\n    auto solve = [&] () -> void{\r\n        int t , d; cin >> t >> d;\r\n        if (sett.empty()) return void(cout << 0 << '\\n');\r\n        long long cost = 0;\r\n        if (can[t] > 0)\r\n        {\r\n            auto ir = sett.lower_bound(arr[t]); sett.erase(ir);\r\n            int temp = min(can[t] , d); can[t] -= temp , d -= temp , cost = cost + (long long) arr[t].first * (long long)temp ;\r\n            if (can[t] > 0) sett.insert(arr[t]);\r\n        }\r\n        while (d)\r\n        {\r\n            if (sett.empty()) return void(cout << 0 << '\\n');\r\n            auto ir = sett.begin(); sett.erase(ir);\r\n            pair<int , int> o = *ir;\r\n            int temp = min(can[o.second] , d);\r\n            can[o.second] -= temp , d -= temp , cost += (long long) o.first * (long long)temp;\r\n            if (can[o.second] > 0) sett.insert(o);\r\n        }\r\n\r\n        cout << cost << '\\n';\r\n    };\r\n\r\n    while (q--) solve();\r\n}\r\n"
}