{
    "id": 218615616,
    "contestId": 1106,
    "creationTimeSeconds": 1691892419,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1106,
        "index": "B",
        "name": "Lunar New Year and Food Ordering",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1106,
        "members": [
            {
                "handle": "SCMZUoj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548938100
    },
    "programmingLanguage": "GNU C11",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n#define Fopen freopen(\"_in.txt\",\"r\",stdin); freopen(\"_out.txt\",\"w\",stdout);\n#define LL long long\n#define ULL unsigned LL\n#define fi first\n#define se second\n#define pb push_back\n#define lson l,m,rt<<1\n#define rson m+1,r,rt<<1|1\n#define lch(x) tr[x].son[0]\n#define rch(x) tr[x].son[1]\n#define max3(a,b,c) max(a,max(b,c))\n#define min3(a,b,c) min(a,min(b,c))\ntypedef pair<int,int> pll;\nconst int inf = 0x3f3f3f3f;\nconst int _inf = 0xc0c0c0c0;\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\nconst LL _INF = 0xc0c0c0c0c0c0c0c0;\nconst LL mod =  (int)1e9+7;\nconst int N = 1e5 + 100;\nint n, m, k;\nstruct Node{\n    int d, w;\n    bool operator < (const Node & x) const{\n        if(w == x.w) return d > x.d;\n        return w > x.w;\n    }\n};\nvector<Node> in[N], out[N];\nLL dp[N][210];\nmultiset<Node> st;\nvoid Ac(){\n    for(int i = 1; i <= k; ++i){\n        int s, t, d, w;\n        scanf(\"%d%d%d%d\", &s, &t, &d, &w);\n        in[s].pb({d,w});\n        out[t].pb({d,w});\n    }\n    memset(dp, INF, sizeof dp);\n    dp[1][0] = 0;\n    for(int i = 1; i <= n; ++i){\n        for(Node & x : in[i]){\n            st.insert(x);\n        for(int j = 0; j <= m; ++j){\n            if(dp[i][j] == INF) continue;\n            dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j]);\n            if(st.empty())\n                dp[i+1][j] = min(dp[i+1][j], dp[i][j]);\n            else {\n                Node x = *st.begin();\n                dp[x.d+1][j] = min(dp[x.d+1][j], dp[i][j]+x.w);\n            }\n        }\n        for(Node &x : out[i])\n            st.erase(st.lower_bound(x));\n    }\n    LL ans = INF;\n    for(int j = 0; j <= m; ++j) ans = min(ans, dp[n+1][j]);\n    printf(\"%I64d\\n\", ans);\n}\nint main(){\n    while(~scanf(\"%d%d%d\", &n, &m, &k)){\n        Ac();\n    }\n    return 0;\n}\n \t \t \t  \t\t\t  \t   \t  \t\t\t\t\t \t \t"
}