{
    "id": 231456686,
    "contestId": 1798,
    "creationTimeSeconds": 1699185464,
    "relativeTimeSeconds": 344,
    "problem": {
        "contestId": 1798,
        "index": "A",
        "name": "Showstopper",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 800,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1798,
        "members": [
            {
                "handle": "alpha_geek"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1699185120
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\nusing namespace std;\r\n#include <cmath>\r\n#include <map>\r\n#include <utility>\r\n#include <vector>\r\n#include <iterator>\r\n#include <algorithm>\r\n#include <map>\r\n#include <unordered_map>\r\n#include <set>\r\n#include <unordered_set>\r\n#include <queue>\r\n#include <numeric>\r\n#include <stack>\r\n#include <math.h>\r\n#include <iomanip>\r\n#include <stdlib.h>\r\n#define int long long\r\n//#include <functional.h>\r\n// set.lower_bound(entity_of_set_type(=x)) gives iterator of value just greater than or equal to x if not present gives set.end()\r\n\r\n//\r\n//#include <ext/pb_ds/assoc_container.hpp>\r\n//#include <ext/pb_ds/tree_policy.hpp>\r\n//#include <functional>\r\n//#include <iostream>\r\n//using namespace __gnu_pbds;\r\n//#include <functional>              // for the function setname.order_of_key(x)\r\n//\r\n//typedef tree<int, null_type, less<int>, rb_tree_tag,\r\n//            tree_order_statistics_node_update>\r\n//    ordered_set;\r\n//\r\n\r\n\r\n#define llui int unsigned\r\n#define ld long double\r\n#define pb push_back\r\n#define ts to_string\r\n#define umap unordered_map\r\n#define popu pop_back\r\n#define all(a) a.begin(), a.end()\r\n#define FIND(x, y) binary_search(all(x), y) // returns true or false only\r\n#define inf numeric_limits<int>::max()      // the infinity\r\n// stoull() is string to ulli\r\nusing namespace std;\r\nllui factorial(llui x,llui r){\r\n   llui ans = 1;\r\n   while(x>1){\r\n       ans = ans*x;\r\n       ans = ans%r;\r\n       x--;\r\n   }\r\n   return ans;\r\n}\r\n\r\nint power(int x, int y) // to raise power resulting in large number( larger than int type)\r\n{\r\n   int temp;\r\n   if (y == 0)\r\n       return 1;\r\n   temp = power(x, y / 2);\r\n   if (y % 2 == 0.0)\r\n       return temp * temp;\r\n   else\r\n       return x * temp * temp;\r\n}\r\nint mysqrt(int x){  // gives square root only if the number is perfect square\r\n   int l = 0;\r\n   int u = 4200000000;\r\n   while(l<u){\r\n       int m = (l+u)/2;\r\n       int w = m*m;\r\n       if(w==x){\r\n           return m;\r\n       }\r\n       else if(w>x)\r\n       {\r\n           u = m -1;\r\n\r\n       }\r\n       else{\r\n           l = m+1;\r\n       }\r\n\r\n   }\r\n   if(l*l==x){\r\n       return l;\r\n   }\r\n   else return -1;\r\n}\r\n\r\nclass Compare{\r\npublic:\r\n   bool operator()(pair<int,int> a,pair<int,int> b){  // true when a < b\r\n       if(a.first <b.first){                        // while using in sort write Compare()\r\n                                                       // in priority_queue think as by defaul it is max_heap so a<b means b has higher priority\r\n           return true;\r\n       }\r\n       else if(a.first ==b.first){\r\n           return (a.second<b.second);\r\n           \r\n       }\r\n       else{\r\n           return false;\r\n       }\r\n   }\r\n};\r\n\r\n\r\n//------------------   CODE STARTS    ----------------- //\r\nvoid solve()\r\n{\r\n    int n;\r\n    cin>>n;\r\n    int a[n];\r\n    int b[n];\r\n    int maxu = 0;\r\n    int mx = 0;\r\n    for(int i = 0;i<n;i++){\r\n        cin>>a[i];\r\n        maxu = max(maxu,a[i]);\r\n    }\r\n    for(int i = 0;i<n;i++){\r\n        cin>>b[i];\r\n        maxu = max(maxu,b[i]);\r\n        mx = max(mx,min(a[i],b[i]));\r\n    }\r\n    if(maxu != a[n-1] and maxu!=b[n-1]){\r\n        cout<<\"NO\"<<endl;\r\n        return;\r\n    }\r\n    if(mx>min(a[n-1],b[n-1])) cout<<\"NO\"<<endl;\r\n    else cout<<\"YES\"<<endl;\r\n    \r\n    \r\n    \r\n}\r\nsigned main()\r\n{   ios_base::sync_with_stdio(false);\r\n   cin.tie(NULL); // remove in interaction problem\r\n \r\n    \r\n    int T;\r\n    cin>>T;\r\n    while(T--){\r\n        \r\n       solve();\r\n    \r\n       \r\n       \r\n   }\r\n   \r\n   \r\n   \r\n}\r\n\r\n\r\n\r\n   \r\n  \r\n   \r\n\r\n\r\n\r\n\r\n"
}