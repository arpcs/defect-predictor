{
    "id": 234606890,
    "contestId": 1619,
    "creationTimeSeconds": 1701098422,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1619,
        "index": "H",
        "name": "Permutation and Queries",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "brute force",
            "data structures",
            "divide and conquer",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1619,
        "members": [
            {
                "handle": "thangdz2k7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1640010900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#define ii pair <int, int>\r\n#define F first\r\n#define S second\r\n#define pb push_back\r\n\r\nusing namespace std;\r\n\r\nconst int N = 1e5 + 5;\r\n\r\nint p[N], n, q;\r\nint type[N], x[N], y[N];\r\nint used[N], pos_lt[N], ck[N];\r\nvector <int> lt[N];\r\n\r\nvoid dfs(int u, int belong){\r\n    int cnt = 0;\r\n    pos_lt[u] = 0;\r\n    used[u] = belong;\r\n    lt[belong].pb(u);\r\n    while (used[p[u]] == 0){\r\n        ++ cnt;\r\n        u = p[u];\r\n        pos_lt[u] = cnt;\r\n        used[u] = belong;\r\n        lt[belong].pb(u);\r\n    }\r\n\r\n    if (used[p[u]] == -1) ck[belong] = p[u];\r\n}\r\n\r\nvector <int> del;\r\nint visit[N], deg[N], dd[N];\r\n\r\nvoid ddd(int u, int val){\r\n    dd[u] = val;\r\n    while (dd[p[u]] == 0 and used[p[u]] != -1){\r\n        u = p[u];\r\n        dd[u] = val;\r\n    }\r\n    if (dd[p[u]] == val) used[p[u]] = -1;\r\n}\r\n\r\nint get(int pos, int val){\r\n    //cout << pos << ' ' << val << endl;\r\n    if (visit[pos] != 0) val %= (visit[pos] - val);\r\n    visit[pos] = val;\r\n    del.pb(pos);\r\n    int bel = used[pos];\r\n    int vt = pos_lt[pos];\r\n    if (val == 0) return pos;\r\n    if (used[pos] == -1) return get(p[pos], val - 1);\r\n    if (ck[bel] != 0 and lt[bel].size() - vt <= val) return get(ck[bel], val - (lt[bel].size() - vt));\r\n    return lt[bel][(vt + val) % lt[bel].size()];\r\n}\r\n\r\nvoid solve(){\r\n    cin >> n >> q;\r\n    int bl = min(q, 300);\r\n\r\n    for (int i = 1; i <= n; ++ i) cin >> p[i];\r\n    for (int i = 1; i <= q; ++ i) cin >> type[i] >> x[i] >> y[i];\r\n\r\n    for (int st = 0; st <= (q - 1) / bl; ++ st){\r\n        int be = st * bl + 1;\r\n        int ed = min(q, be + bl - 1);\r\n        for (int i = 1; i <= n; ++ i) {\r\n            used[i] = 0;\r\n            ck[i] = 0;\r\n            pos_lt[i] = 0;\r\n            deg[i] = 0;\r\n            dd[i] = 0;\r\n            lt[i].clear();\r\n        }\r\n\r\n        int cnt = 0;\r\n        int dem = 0;\r\n        for (int i = be; i <= ed; ++ i) if (type[i] == 1) used[x[i]] = -1, used[y[i]] = -1;\r\n        for (int i = 1; i <= n; ++ i) if (used[i] != -1 and dd[i] == 0) ddd(i, ++ dem);\r\n\r\n        for (int i = 1; i <= n; ++ i){\r\n            if (used[i] != -1) ++ deg[p[i]];\r\n        }\r\n\r\n        for (int i = 1; i <= n; ++ i) if (deg[i] == 0 and used[i] == 0) dfs(i, ++ cnt);\r\n\r\n        for (int i = be; i <= ed; ++ i){\r\n            if (type[i] == 1) swap(p[x[i]], p[y[i]]);\r\n            else {\r\n                del.clear();\r\n                //for (int v : lt[used[1]]) cout << v << ' ';\r\n                //cout << endl;\r\n                //cout << used[4] << endl;\r\n                cout << get(x[i], y[i]) << '\\n';\r\n                for (int v : del) visit[v] = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    solve();\r\n\r\n    return 0;\r\n}\r\n"
}