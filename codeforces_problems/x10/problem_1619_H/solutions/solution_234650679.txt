{
    "id": 234650679,
    "contestId": 1619,
    "creationTimeSeconds": 1701132125,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1619,
        "index": "H",
        "name": "Permutation and Queries",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "brute force",
            "data structures",
            "divide and conquer",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1619,
        "members": [
            {
                "handle": "N_z__"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1640010900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2560000,
    "source": "// LUOGU_RID: 137227568\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4.1,sse4.2,avx,avx2,popcnt\")\r\n#if defined(LOCAL) or not defined(LUOGU)\r\n#pragma GCC optimize(3)\r\n#pragma GCC optimize(\"Ofast,unroll-loops\")\r\n#endif\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#ifdef LOCAL\r\n#include\"dbg.h\"\r\n#else\r\n#define dbg(...) (__VA_ARGS__)\r\n#endif\r\nnamespace Fread{const int SIZE=1<<16;char buf[SIZE],*S,*T;inline char getchar(){if(S==T){T=(S=buf)+fread(buf,1,SIZE,stdin);if(S==T)return'\\n';}return *S++;}}namespace Fwrite{const int SIZE=1<<16;char buf[SIZE],*S=buf,*T=buf+SIZE;inline void flush(){fwrite(buf,1,S-buf,stdout);S=buf;}inline void putchar(char c){*S++=c;if(S==T)flush();}struct NTR{~NTR(){flush();}}ztr;}\r\n#define getchar Fread::getchar\r\n#define putchar Fwrite::putchar\r\n#define Setprecision 10\r\n#define between '\\n'\r\ntemplate<typename T>struct is_char{static constexpr bool value=(std::is_same<T,char>::value||std::is_same<T,signed char>::value||std::is_same<T,unsigned char>::value);};template<typename T>struct is_integral_ex{static constexpr bool value=(std::is_integral<T>::value||std::is_same<T,__int128>::value)&&!is_char<T>::value;};template<typename T>struct is_floating_point_ex{static constexpr bool value=std::is_floating_point<T>::value||std::is_same<T,__float128>::value;};namespace Fastio{struct Reader{template<typename T>typename std::enable_if_t<std::is_class<T>::value,Reader&>operator>>(T&x){for(auto &y:x)*this>>y;return *this;}template<typename T>typename std::enable_if_t<is_integral_ex<T>::value,Reader&>operator>>(T&x){char c=getchar();short f=1;while(c<'0'||c>'9'){if(c=='-')f*=-1;c=getchar();}x=0;while(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+(c^48);c=getchar();}x*=f;return *this;}template<typename T>typename std::enable_if_t<is_floating_point_ex<T>::value,Reader&>operator>>(T&x){char c=getchar();short f=1,s=0;x=0;T t=0;while((c<'0'||c>'9')&&c!='.'){if(c=='-')f*=-1;c=getchar();}while(c>='0'&&c<='9'&&c!='.')x=x*10+(c^48),c=getchar();if(c=='.')c=getchar();else return x*=f,*this;while(c>='0'&&c<='9')t=t*10+(c^48),s++,c=getchar();while(s--)t/=10.0;x=(x+t)*f;return*this;}template<typename T>typename std::enable_if_t<is_char<T>::value,Reader&>operator>>(T&c){c=getchar();while(c=='\\n'||c==' '||c=='\\r')c=getchar();return *this;}Reader&operator>>(char*str){int len=0;char c=getchar();while(c=='\\n'||c==' '||c=='\\r')c=getchar();while(c!='\\n'&&c!=' '&&c!='\\r')str[len++]=c,c=getchar();str[len]='\\0';return*this;}Reader&operator>>(std::string&str){str.clear();char c=getchar();while(c=='\\n'||c==' '||c=='\\r')c=getchar();while(c!='\\n'&&c!=' '&&c!='\\r')str.push_back(c),c=getchar();return*this;}Reader(){}}cin;const char endl='\\n';struct Writer{typedef __int128 mxdouble;template<typename T>typename std::enable_if_t<std::is_class<T>::value,Writer&>operator<<(T x){for(auto &y:x)*this<<y<<between;*this<<'\\n';return *this;}template<typename T>typename std::enable_if_t<is_integral_ex<T>::value,Writer&>operator<<(T x){if(x==0)return putchar('0'),*this;if(x<0)putchar('-'),x=-x;static int sta[45];int top=0;while(x)sta[++top]=x%10,x/=10;while(top)putchar(sta[top]+'0'),--top;return*this;}template<typename T>typename std::enable_if_t<is_floating_point_ex<T>::value,Writer&>operator<<(T x){if(x<0)putchar('-'),x=-x;mxdouble _=x;x-=(T)_;static int sta[45];int top=0;while(_)sta[++top]=_%10,_/=10;if(!top)putchar('0');while(top)putchar(sta[top]+'0'),--top;putchar('.');for(int i=0;i<Setprecision;i++)x*=10;_=x;while(_)sta[++top]=_%10,_/=10;for(int i=0;i<Setprecision-top;i++)putchar('0');while(top)putchar(sta[top]+'0'),--top;return*this;}template<typename T>typename std::enable_if_t<is_char<T>::value,Writer&>operator<<(T c){putchar(c);return*this;}Writer&operator<<(char*str){int cur=0;while(str[cur])putchar(str[cur++]);return *this;}Writer&operator<<(const char*str){int cur=0;while(str[cur])putchar(str[cur++]);return*this;}Writer&operator<<(std::string str){int st=0,ed=str.size();while(st<ed)putchar(str[st++]);return*this;}Writer(){}}cout;}\r\n#define cin Fastio::cin\r\n#define cout Fastio::cout\r\n#define endl Fastio::endl\r\n\r\nconstexpr int B=100;\r\nint p[200001],idp[200001],nxt[200001];\r\nmain()\r\n{\r\n\tint n,q;\r\n\tcin>>n>>q;\r\n\tfor(int x=1;x<=n;x++)\r\n\tcin>>p[x],idp[p[x]]=x;\r\n\tfor(int x=1;x<=n;x++)\r\n\t{\r\n\t\tnxt[x]=x;\r\n\t\tfor(int y=1;y<=B;y++)\r\n\t\tnxt[x]=p[nxt[x]];\r\n\t}\r\n\twhile(q--)\r\n\t{\r\n\t\tint op;\r\n\t\tcin>>op;\r\n\t\tif(op==1)\r\n\t\t{\r\n\t\t\tint u,v;\r\n\t\t\tcin>>u>>v;\r\n\t\t\tswap(idp[p[u]],idp[p[v]]);\r\n\t\t\tswap(p[u],p[v]);\r\n\t\t\tfor(int y=1;y<=B;y++)\r\n\t\t\tswap(nxt[u],nxt[v]),u=p[u],v=p[v];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tint u,v;\r\n\t\t\tcin>>u>>v;\r\n\t\t\tfor(int y=1;y<=v/B;y++)\r\n\t\t\tu=nxt[u];\r\n\t\t\tfor(int y=1;y<=v%B;y++)\r\n\t\t\tu=p[u];\r\n\t\t\tcout<<u<<endl;\r\n\t\t}\r\n\t}\r\n}"
}