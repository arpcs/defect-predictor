{
    "id": 231019679,
    "contestId": 1619,
    "creationTimeSeconds": 1698947643,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1619,
        "index": "H",
        "name": "Permutation and Queries",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "brute force",
            "data structures",
            "divide and conquer",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1619,
        "members": [
            {
                "handle": "algohary"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1640010900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 2152,
    "memoryConsumedBytes": 1638400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n\nstruct permGraph {\n    int n, S;\n    vector<int> nxt, prv, jmp;\n    permGraph(const vector<int>& p) {\n        n = p.size();\n        S = sqrtl(n);\n        nxt.assign(n, 0);\n        prv.assign(n, 0);\n        jmp.assign(n, 0);\n        for (int i = 0; i < n; i++) {\n            nxt[i] = p[i];\n            prv[p[i]] = i;\n        }\n        for (int i = 0; i < n; i++) {\n            update(i);\n        }\n    }\n\n    void swapNodes(int i, int j) {\n        prv[nxt[i]] = j, prv[nxt[j]] = i;\n        swap(nxt[i], nxt[j]);\n        update(i);\n        update(j);\n    }\n\n    void update(int i) {\n        int j = i;\n        for (int k = 0; k < S; k++) {\n            j = nxt[j];\n        }\n        jmp[i] = j;\n        for (int k = 0; k < S; k++) {\n            i = prv[i], j = prv[j];\n            jmp[i] = j;\n        }\n    }\n\n    int query(int i, int k) {\n        while (k >= S) {\n            i = jmp[i];\n            k -= S;\n        }\n        while (k--) {\n            i = nxt[i];\n        }\n        return i;\n    }\n};\n\nvoid solve() {\n    int n, q;\n    cin >> n >> q;\n    vector<int> p(n);\n    for (auto& i : p) cin >> i, i--;\n    permGraph g(p);\n    while (q--) {\n        int qt;\n        cin >> qt;\n        if (qt == 1) {\n            int x, y;\n            cin >> x >> y, x--, y--;\n            g.swapNodes(x, y);\n        } else {\n            int i, k;\n            cin >> i >> k, i--;\n            cout << g.query(i, k) + 1 << \"\\n\";\n        }\n    }\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    solve();\n}"
}