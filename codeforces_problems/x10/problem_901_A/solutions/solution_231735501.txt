{
    "id": 231735501,
    "contestId": 901,
    "creationTimeSeconds": 1699362422,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 901,
        "index": "A",
        "name": "Hashing Trees",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1500,
        "tags": [
            "constructive algorithms",
            "trees"
        ]
    },
    "author": {
        "contestId": 901,
        "members": [
            {
                "handle": "PeterCao"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513697700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 409600,
    "source": "// LUOGU_RID: 133885336\n#include<algorithm>\r\n#include<iostream>\r\n#include<cstring>\r\n#include<cstdio>\r\n#include<string>\r\n#include<cmath>\r\nusing namespace std;\r\n\r\nint read(){\r\n\tchar c = getchar(); int f = 1, a = 0;\r\n\twhile(c != '-' && (c > '9' || c < '0'))\r\n\t\tc = getchar();\r\n\tif(c == '-')\r\n\t\tf = -1, c = getchar();\r\n\twhile(c >= '0' && c <= '9')\r\n\t\ta = a * 10 + (c - '0'), c = getchar();\r\n\treturn f * a;\r\n}\r\nconst int N = 100010;\r\nint dep[N];\r\nint main(){\r\n//\tfreopen(\".in\", \"r\", stdin);\r\n//\tfreopen(\".out\", \"w\", stdout);\r\n\tint h = read(); dep[0] = 1;\r\n\tbool f = 1; int bj = 0;\r\n\tfor(int i = 1; i <= h + 1; i++){\r\n\t\tdep[i] = read();\r\n\t\tif(dep[i] != 1 && dep[i - 1] != 1 && f){\r\n\t\t\tf = 0; bj = i;\r\n\t\t}\r\n\t} if(f){\r\n\t\tcout << \"perfect\\n\";\r\n\t\treturn 0;\r\n\t} cout << \"ambiguous\\n\";\r\n\tint now = 0;\r\n\tfor(int i = 1; i <= h + 1; i++){\r\n\t\tfor(int j = 1; j <= dep[i]; j++){\r\n\t\t\tcout << now << ' ';\r\n\t\t} now += dep[i];\r\n\t} cout << '\\n'; now = 0;\r\n\tfor(int i = 1; i <= h + 1; i++){\r\n\t\tif(i == bj){\r\n\t\t\tcout << now - 1 << ' ';\r\n\t\t\tfor(int j = 1; j < dep[i]; j++){\r\n\t\t\t\tcout << now << ' ';\r\n\t\t\t} now += dep[i];\r\n\t\t} else{\r\n\t\t\tfor(int j = 1; j <= dep[i]; j++){\r\n\t\t\t\tcout << now << ' ';\r\n\t\t\t} now += dep[i];\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}"
}