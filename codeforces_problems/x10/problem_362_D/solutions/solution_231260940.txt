{
    "id": 231260940,
    "contestId": 362,
    "creationTimeSeconds": 1699060344,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "xuhaotian"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 74,
    "timeConsumedMillis": 483,
    "memoryConsumedBytes": 7987200,
    "source": "// LUOGU_RID: 133206217\n#include<bits/stdc++.h>\r\n#define int ll\r\nusing namespace std;\r\ntypedef long long ll;\r\n\r\nnamespace solution{\r\n\t\r\n\tconst int N=int(1e5)+1;\r\n\tconst int inf=1e9;\r\n\t\r\n\tstruct point{\r\n\t\tint val,fa;\r\n\t\tpoint(int _v=0,int _f=0):\r\n\t\t\tval(_v),fa(_f){;}\r\n\t\tbool operator < (const point & a) const {\r\n\t\t\treturn val>a.val;\r\n\t\t}\r\n\t};\r\n\t\r\n\tstruct edge{\r\n\t\tint u,v,w;\r\n\t}ed[N];\r\n\t\r\n\tint n,m,q,p;\r\n\tint fa[N],sum[N],l[N];\r\n\tpriority_queue<point>he;\r\n\t\r\n\tint find(int x) {return fa[x]==x?x:fa[x]=find(fa[x]);}\r\n\tbool merge(int x,int y) {bool flag=(find(x)==find(y));fa[find(x)]=find(y);return flag;}\r\n\t\r\n\tvoid work(){\r\n\t\tcin>>n>>m>>p>>q;\r\n\t\tfor(int i=1;i<=n;i++) fa[i]=i;\r\n\t\tint all=n,ans=0;\r\n\t\tfor(int i=1;i<=m;i++){\r\n\t\t\tint x,y,z;\r\n\t\t\tcin>>x>>y>>z;\r\n\t\t\tall-=!merge(x,y);\r\n\t\t\ted[i]=edge{x,y,z};\r\n\t\t}\r\n//\t\tcout<<all<<\" \"<<q<<\" \"<<p<<\"\\n\";\r\n\t\tif(all-q>p||q>all||(q==n&&m==0&&p!=0)){\r\n\t\t\tcout<<\"NO\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tcout<<\"YES\\n\";\r\n\t\tif(q==n&&m==0) return;\r\n\t\tfor(int i=1;i<=m;i++){\r\n\t\t\tsum[find(ed[i].u)]+=ed[i].w;\r\n\t\t}\r\n\t\tfor(int i=1;i<=n;i++){\r\n\t\t\tif(fa[i]==i) he.push(point(sum[i],i));\r\n\t\t}\r\n\t\twhile(all>q){\r\n\t\t\tpoint x=he.top();he.pop();\r\n\t\t\tpoint y=he.top();he.pop();\r\n\t\t\tx.val+=y.val+min(x.val+y.val+1,inf);\r\n\t\t\tmerge(find(y.fa),find(x.fa));\r\n\t\t\the.push(x);p--;all--;\r\n//\t\t\tcout<<\"\\n\";\r\n\t\t\tcout<<x.fa<<\" \"<<y.fa<<\"\\n\";\r\n//\t\t\tcout<<x.val<<\"\\n\";\r\n//\t\t\tpriority_queue<point>t;\r\n//\t\t\twhile(!he.empty())t.push(he.top()),cout<<he.top().val<<\"\\n\",he.pop();\r\n//\t\t\the=t;\r\n\t\t}\r\n\t\tfor(int i=1;i<=n;i++){\r\n\t\t\tl[find(i)]++;\r\n\t\t\tif(l[find(i)]>=2){\r\n\t\t\t\tfor(int j=1;j<i;j++){\r\n\t\t\t\t\tif(find(j)==find(i)){\r\n\t\t\t\t\t\twhile(p--) cout<<i<<\" \"<<j<<\"\\n\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n};\r\n\r\nsigned main(){\r\n\tsolution::work();\r\n\treturn 0;\r\n}"
}