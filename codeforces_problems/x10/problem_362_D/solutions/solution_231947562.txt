{
    "id": 231947562,
    "contestId": 362,
    "creationTimeSeconds": 1699451817,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "ba1234anh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 38,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 15974400,
    "source": "/** Writing something just because I hate emptiness\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2803\u2800\u2800\u2800\u2801\u2800\u2800\u28b8\u2800\u2838\u2800\u2800\u2807\u2800\u2800\u2800\u2800\u2800\u2818\u28b8\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2803\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2800\u2800\u28b8\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u28c0\u2800\u28e0\u2824\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28e7\u2800\u2800\u28b8\u2844\u28a0\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u28b8\u2847\u2800\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2809\u2819\u28c6\u2800\u2819\u2896\u2810\u2812\u2812\u2812\u2812\u2812\u2820\u2884\u2800\u2800\u28f6\u2800\u28a0\u28c0\u28e7\u28c4\u28c0\u28b8\u28c7\u28f8\u28c4\u28c0\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u28b8\u28e7\u28e0\u2837\u2844\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2838\u2800\u2800\u2808\u2887\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b1\u2864\u2836\u2892\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u281b\u283b\u28ff\u28ff\u2877\u28a4\u28c0\u2840\u2800\u28a0\u28b8\u2800\u2800\u28ff\u280b\u2800\u2838\u2801\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2880\u2800\u2800\u2800\u2808\u28a7\u2840\u2800\u2800\u28c0\u2814\u280a\u2801\u28e0\u287e\u281f\u2809\u2800\u2800\u2819\u280b\u2800\u2800\u2800\u2800\u2800\u2808\u2881\u2800\u2800\u2819\u2832\u28be\u28f8\u2800\u28b0\u2847\u2800\u2800\u28a3\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2809\u2812\u283a\u2825\u28c0\u28e0\u281e\u280b\u2800\u2800\u2840\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2808\u2846\u2800\u2800\u2800\u2800\u2819\u28a6\u285c\u2801\u2800\u2800\u2808\u2844\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u280b\u2800\u28a0\u2800\u2880\u2807\u2800\u2800\u2800\u2880\u28fc\u2800\u2800\u2800\u2800\u2800\u2800\u28b9\u28c0\u2840\u2800\u2820\u2840\u2800\u2811\u2840\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2808\u28b3\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u2803\u2800\u28a0\u2847\u2800\u28b8\u28e0\u2814\u284a\u2809\u2800\u28ff\u2800\u2804\u2800\u2800\u2800\u2800\u2800\u28e7\u2808\u2811\u2822\u28f1\u2800\u2800\u2818\u28c6\u2810\u28a0\u2807\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2809\u28e2\u28c0\u2800\u2800\u2808\u28bf\u2803\u2800\u2800\u28fe\u2807\u2800\u28fc\u2800\u28b0\u2801\u2800\u2800\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2844\u28b8\u28a3\u2800\u2840\u2808\u28a7\u2840\u2800\u2838\u2856\u288f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u285c\u2801\u2808\u2809\u2812\u28b2\u2847\u2800\u2800\u28b8\u28ff\u2800\u2800\u2847\u2800\u28fc\u2800\u2800\u28a0\u28ff\u2800\u2847\u2880\u2800\u2800\u2800\u2847\u2838\u284c\u2846\u28b0\u2800\u2838\u28e7\u2800\u2818\u28f7\u2808\u2846\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28f4\u2801\u2800\u2800\u2880\u28e4\u28fe\u2800\u2800\u2800\u28a0\u28ff\u2800\u28b0\u2847\u2800\u28ff\u2800\u2800\u28b8\u28bb\u2800\u28c7\u28b8\u2800\u2800\u2800\u2847\u2800\u2847\u2818\u2840\u2846\u2800\u28ff\u2800\u28b0\u28cf\u28e7\u2847\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u28de\u280b\u2809\u2800\u2800\u2880\u28ea\u285d\u2849\u2800\u2800\u2800\u28b8\u2847\u2800\u28b8\u28c7\u2800\u28df\u2880\u28c0\u28fe\u287c\u2824\u283f\u283c\u2824\u2824\u28fc\u28f7\u2864\u2827\u2880\u28e7\u28b8\u2844\u28b8\u28f8\u2808\u28ef\u28b8\u28b3\u2844\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2809\u28f9\u285f\u2809\u28a1\u28ff\u2803\u2847\u2800\u2800\u2800\u28b8\u28c7\u28c0\u28fc\u28f9\u28fe\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28f6\u28f6\u28e6\u28ed\u285d\u28ba\u2847\u2818\u28ff\u287c\u280b\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u28e0\u281a\u280b\u2800\u2800\u28a0\u2807\u2880\u2847\u2800\u2800\u2800\u2808\u2809\u2820\u283f\u281b\u281b\u280b\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u281b\u2803\u2808\u28a7\u2800\u2838\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2809\u28bf\u28c7\u2800\u2800\u2800\u28a0\u280b\u2880\u285e\u2847\u28e4\u2800\u2800\u2838\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\u28c4\u28c0\u2818\u2844\u2892\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2819\u28b3\u2840\u2800\u2801\u28c0\u287c\u28c7\u28e7\u287d\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2801\u28b9\u2840\u28bf\u2840\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28a7\u2874\u281a\u28eb\u2834\u28fb\u280f\u2800\u28b8\u2800\u2800\u28a7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287c\u28a3\u2840\u2823\u2840\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u28fe\u28cf\u28c9\u2861\u281e\u2881\u2864\u2802\u28f8\u2800\u2800\u28f8\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2874\u2803\u2812\u28bf\u28e6\u28c8\u28f3\u28e4\u2844\u2800\u2800\r\n\u2800\u2800\u2880\u287c\u2801\u28b8\u280b\u2880\u28ff\u28ff\u28e4\u28de\u28c1\u28c0\u28e0\u281f\u281b\u2812\u2832\u2824\u2824\u2824\u2824\u2824\u2824\u2824\u2800\u2800\u2800\u2800\u2820\u2824\u2824\u2824\u2824\u2824\u2836\u281a\u281b\u2813\u2812\u2836\u2836\u28ff\u28ff\u28fd\u281f\u2803\u2800\u2800\r\n\u28e0\u28f6\u28cb\u2800\u2800\u2808\u281b\u28bf\u28e4\u28ff\u286f\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2810\r\n----------------------------------------------------**/\r\n#include <bits/stdc++.h>\r\n#define int long long\r\n#define F first\r\n#define S second\r\n#define N 100005\r\n#define ii pair<int,int>\r\nusing namespace std;\r\nconst int MIN = 1000000000;\r\nint n, m, P, Q;\r\nvector<ii>g[N], res;\r\nmap<int, int>tick[N];\r\nbool visited[N];\r\nint t;\r\n///DSU\r\nint parent[N], sum[N];\r\npriority_queue<ii, vector<ii>, greater<ii>>q;\r\nvoid make_set()\r\n{\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        parent[i] = i;\r\n        sum[i] = 0;\r\n    }\r\n}\r\nint found(int v)\r\n{\r\n    if(v == parent[v])\r\n        return v;\r\n    return parent[v] = found(parent[v]);\r\n}\r\nvoid union_set(int a, int b, int val)\r\n{\r\n    a = found(a);\r\n    b = found(b);\r\n    if(a != b)\r\n    {\r\n        parent[b] = a;\r\n        sum[a] += sum[b] + val;\r\n    }\r\n}\r\nvoid dfs(int u)\r\n{\r\n    visited[u] = 1;\r\n    for(auto i : g[u])\r\n    {\r\n        int v = i.F;\r\n        int w = i.S;\r\n        if(tick[u][v] != 0)\r\n            continue;\r\n        t += w;\r\n        tick[u][v] = w;\r\n        tick[v][u] = w;\r\n        union_set(u, v, 0);\r\n        dfs(v);\r\n    }\r\n}\r\nvoid solve()\r\n{\r\n    cout << \"YES\\n\";\r\n    while(q.size() > Q)\r\n    {\r\n        ii top1 = q.top();\r\n        q.pop();\r\n        ii top2 = q.top();\r\n        q.pop();\r\n        int u = top1.S;\r\n        int v = top2.S;\r\n        cout << u << \" \" << v << \"\\n\";\r\n        tick[u][v]=min(MIN, sum[u] + sum[v] + 1);\r\n        tick[u][v]=min(MIN, sum[u] + sum[v] + 1);\r\n        union_set(u, v, min(MIN, sum[u] + sum[v] + 1));\r\n        int p = found(u);\r\n        q.push({sum[p], p});\r\n        P--;\r\n    }\r\n    ii res={0,0};\r\n    for(int i = 1; i <= n; i++)\r\n    {\r\n        for(int j = 1; j <= n; j++)\r\n        {\r\n            if(i == j)\r\n                continue;\r\n            if(found(i) == found(j))\r\n            {\r\n                if(tick[i][j]>tick[res.F][res.S])\r\n                {\r\n                    res.F=i;\r\n                    res.S=j;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    while(P--)\r\n        cout<<res.F<<\" \"<<res.S<<\"\\n\";\r\n}\r\nmain()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    cin >> n >> m >> P >> Q;\r\n    for(int i = 1; i <= m; i++)\r\n    {\r\n        int x, y, z;\r\n        cin >> x >> y >> z;\r\n        g[x].push_back({y, z});\r\n        g[y].push_back({x, z});\r\n    }\r\n    make_set();\r\n    for(int i = 1; i <= n; i++)\r\n        if(visited[i] == 0)\r\n        {\r\n            dfs(i);\r\n            q.push({t, i});\r\n            sum[found(i)] = t;\r\n            t = 0;\r\n        }\r\n    int qcheck = q.size();\r\n    if(qcheck < Q || qcheck - P > Q || (n == Q && m == 0 && P != 0))\r\n        return  cout << \"NO\", 0;\r\n    solve();\r\n}\r\n//9 6 2 5\r\n//1 2 2\r\n//3 2 1\r\n//4 6 20\r\n//1 3 8\r\n//7 8 3\r\n//5 7 2\r\n"
}