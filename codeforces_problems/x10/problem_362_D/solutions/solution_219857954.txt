{
    "id": 219857954,
    "contestId": 362,
    "creationTimeSeconds": 1692671955,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "pythoner713"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 74,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 9523200,
    "source": "// LUOGU_RID: 122180561\n#include<bits/stdc++.h>\r\n#define nb 100010\r\n#define mb 200010\r\n#define inf 1000000000\r\nusing namespace std;\r\n\r\nint n, m, p, q, cnt, head[mb], fa[nb];\r\nlong long w[nb];\r\nvector<pair<int, int>> ans;\r\n\r\nstruct edge{\r\n\tint to, next, val;\r\n}e[mb];\r\n\r\nvoid add_edge(int u, int v, int w){\r\n\te[++cnt].to = v;\r\n\te[cnt].val = w;\r\n\te[cnt].next = head[u];\r\n\thead[u] = cnt; \r\n}\r\n\r\nvoid DFS(int u, int f){\r\n\tfa[u] = f;\r\n\tfor(int i = head[u]; i; i = e[i].next){\r\n\t\tint v = e[i].to;\r\n\t\tw[f] += e[i].val;\r\n\t\tif(!fa[v]) DFS(v, f);\r\n\t}\r\n}\r\n\r\nint find(int x){\r\n\tif(x == fa[x]) return x;\r\n\treturn fa[x] = find(fa[x]);\r\n}\r\n\r\nvoid merge(int x, int y){\r\n\tx = find(x), y = find(y);\r\n\tif(x == y) return;\r\n\tlong long _ = min(w[x] + w[y] + 1, 1000000000ll);\r\n\tfa[x] = y, w[y] = w[x] + w[y] + _;\r\n}\r\n\r\nauto cmp = [](int x, int y){return w[find(x)] > w[find(y)];};\r\npriority_queue<int, vector<int>, decltype(cmp)> pq(cmp);\r\n\r\nint main(){\r\n    ios::sync_with_stdio(0);\r\n\tcin >> n >> m >> p >> q;\r\n\tfor(int i = 1, u, v, w; i <= m; i++){\r\n\t\tcin >> u >> v >> w;\r\n\t\tadd_edge(u, v, w);\r\n\t\tadd_edge(v, u, 0);\r\n\t}\r\n\tfor(int i = 1; i <= n; i++)\r\n\t\tif(!fa[i]) DFS(i, i);\r\n\tfor(int i = 1; i <= n; i++)\r\n\t\tif(i == find(i)) pq.push(i);\r\n\twhile(pq.size() > q){\r\n\t\tint u, v;\r\n\t\tu = pq.top(), pq.pop();\r\n\t\tv = pq.top(), pq.pop();\r\n\t\tmerge(u, v);\r\n\t\tpq.push(v);\r\n\t\tans.push_back(make_pair(u, v));\r\n\t}\r\n\tfor(int i = 1; i <= n; i++){\r\n\t\tif(i != find(i)){\r\n\t\t\twhile(ans.size() < p)\r\n\t\t\t\tans.push_back(make_pair(i, find(i)));\r\n\t\t}\r\n\t}\r\n\tif(ans.size() != p || pq.size() != q) cout << \"NO\";\r\n\telse{\r\n\t\tcout << \"YES\\n\";\r\n\t\tfor(auto e: ans){\r\n\t\t\tcout << e.first << \" \" << e.second << endl;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n}"
}