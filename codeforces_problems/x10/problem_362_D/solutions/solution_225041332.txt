{
    "id": 225041332,
    "contestId": 362,
    "creationTimeSeconds": 1695627189,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "_lzh_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 74,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 12800000,
    "source": "// LUOGU_RID: 126062349\n#include <bits/stdc++.h> \r\n#define int long long\r\nusing namespace std;\r\nconst int N = 200010, M = 1e9;\r\nint n, m, P, Q, id, h[N], fa[N], sum[N], vis[N], cnt;\r\nstruct point {\r\n\tint s, id;\r\n\tbool operator>(const point &rhs) const {\r\n\t\treturn s > rhs.s;\r\n\t}\r\n}ys[N];\r\nint find(int x) {\r\n\tif(x == fa[x]) return x;\r\n\treturn fa[x] = find(fa[x]);\r\n}\r\nvoid merge(int x, int y, int w) {\r\n\tint fx = find(x), fy = find(y);\r\n\tif(fx == fy) sum[fx] += w;\r\n\telse fa[fy] = fx, sum[fx] += (sum[fy] + w), cnt--;\r\n}\r\npriority_queue<point, vector<point>, greater<point> > q;\r\nsigned main() {\r\n\tcin >> n >> m >> P >> Q; cnt = n;\r\n\tfor(int i = 1; i <= n; i++) fa[i] = i;\r\n\tfor(int i = 1; i <= m; i++) {\r\n\t\tint u, v, w;\r\n\t\tscanf(\"%lld%lld%lld\", &u, &v, &w);\r\n\t\tmerge(u, v, w);\r\n\t}\r\n\tfor(int i = 1; i <= n; i++)\r\n\t\tif(i == find(i)) q.push((point){sum[i], i});\r\n\tif(cnt < Q || cnt - P > Q || (P > 0 && !m && Q == n)) {\r\n\t\tprintf(\"NO\\n\");\r\n\t\treturn 0;\r\n\t}\r\n\tprintf(\"YES\\n\");\r\n\t// for(int i = 1; i <= cnt; i++) if(i == find(i)) q.push(ys[i]);\r\n\twhile(cnt > Q) {\r\n\t\tpoint x = q.top(); q.pop();\r\n\t\tpoint y = q.top(); q.pop();\r\n\t\tprintf(\"%lld %lld\\n\", x.id, y.id);\r\n\t\tmerge(x.id, y.id, min(M, x.s + y.s + 1)); P--;\r\n\t\tq.push((point){sum[x.id], x.id});\r\n\t}\r\n\tfor(int i = 1; i <= n; i++) {\r\n\t\tif(i != find(i)) {\r\n\t\t\twhile(P--) printf(\"%lld %lld\\n\", i, find(i));\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n    return 0;\r\n}"
}