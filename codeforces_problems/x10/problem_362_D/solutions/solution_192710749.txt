{
    "id": 192710749,
    "contestId": 362,
    "creationTimeSeconds": 1675847240,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "wristleband"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 93,
    "memoryConsumedBytes": 4812800,
    "source": "#include <bits/stdc++.h>\r\n# define int long long\r\nusing namespace std;\r\n\r\nconst int cnst = 1e5+5;\r\n// const int mod = 1e9+7;\r\n// const int mod = 998244353;\r\nbool mutipletestcase = false;\r\n\r\nint dx[4] = {0, 0, -1, 1};\r\nint dy[4] = {1, -1, 0, 0};\r\n\r\nvoid output(int a) {\r\n    if(a == 1) cout << \"YES\" << endl;\r\n    else if(a == 0) cout << \"NO\" << endl;\r\n    return;\r\n}\r\n\r\nint par[cnst];\r\npair<int, int> cost[cnst];\r\n\r\nint find (int x) {\r\n    if(par[x] == x) return x;\r\n    return par[x] = find(par[x]);\r\n}\r\n\r\nint merge(int x, int y) {\r\n    return par[find(x)] = find(y);\r\n}\r\n\r\nvoid add(int a, int b, int c) {\r\n    pair<int, int> x = cost[find(a)];\r\n    pair<int, int> y = cost[find(b)];\r\n    if(find(a) != find(b)) {\r\n        merge(a, b);\r\n        cost[find(a)] = {x.first+y.first+c, x.second+y.second};\r\n    }\r\n    else cost[find(a)] = {cost[find(a)].first+c, cost[find(a)].second};\r\n    int z = 1e9;\r\n    cost[find(a)].first = min(z, cost[find(a)].first);\r\n    return;\r\n}\r\n\r\nvoid solve() {\r\n    cerr << \"in\" << endl;\r\n    int n, m, ro, reqreg; cin >> n >> m >> ro >> reqreg;\r\n\r\n    for(int i = 1; i<=n; i++) {\r\n        par[i] = i;\r\n        cost[i] = {0, 1};\r\n    }\r\n\r\n    for(int i = 1; i<=m; i++) {\r\n        int a, b, c; cin >> a >> b >> c;\r\n        add(a, b, c);\r\n    }\r\n\r\n    set<int> st[cnst];\r\n    priority_queue<pair<pair<int, int>, int>, vector<pair<pair<int, int>, int>>, greater<pair<pair<int, int>, int>>> pq; // fir = cost, sec = idx;\r\n\r\n    for(int i = 1; i<=n; i++) {\r\n        if(par[i] == i) pq.push({cost[i], i});\r\n    }\r\n\r\n    if(m == 0 && n == reqreg && ro != 0) {\r\n        output(0); return;\r\n    }\r\n\r\n    if(pq.size() < reqreg) {\r\n        output(0); return;\r\n    }\r\n\r\n    int extra = ro+reqreg-pq.size();\r\n    // cerr << extra <<endl;\r\n    output(1);\r\n\r\n    while(pq.size() != reqreg) {\r\n        pair<pair<int, int>, int> a = pq.top(); pq.pop();\r\n        pair<pair<int, int>, int> b = pq.top(); pq.pop();\r\n        cout << a.second << \" \" << b.second << endl;\r\n        add(a.second, b.second, a.first.first+b.first.first+1);\r\n        pq.push({cost[find(a.second)], find(a.second)});\r\n    }\r\n\r\n    while(!pq.empty()) pq.pop();\r\n\r\n    for(int i = 1; i<=n; i++) {\r\n        if(par[i] == i) pq.push({cost[i], i});\r\n        st[par[i]].insert(i);\r\n    }\r\n\r\n    if(extra > 0 && m == 0) {\r\n        cout << 1 << \" \" << 2 << endl;\r\n        add(1, 2, 1);\r\n        pq.push({cost[find(1)], find(1)});\r\n        st[find(1)].insert(1);\r\n        st[find(2)].insert(2);\r\n        extra--;\r\n    }\r\n\r\n    // while(!pq.empty()) {\r\n    //     cerr << pq.top().first.first << \" \" << pq.top().first.second << \" \" << pq.top().second << endl;\r\n    //     pq.pop();\r\n    // }\r\n\r\n        int a, b = 1, c;\r\n\r\n        while(b == 1) {\r\n            a = pq.top().first.first;\r\n            b = pq.top().first.second;\r\n            c = pq.top().second;\r\n            pq.pop();\r\n        }\r\n\r\n        vector<int> vec;\r\n\r\n        for(auto v: st[c]) {\r\n            vec.push_back(v);\r\n            if(vec.size() == 2) break;\r\n        }\r\n\r\n        while(extra--) {\r\n            cout << vec[0] << \" \" << vec[1] << endl;\r\n        }\r\n\r\n        // cerr << a << \" \" << b << \" \" << c << endl;\r\n\r\n    \r\n\r\n\r\n    // while(!pq.empty()) {\r\n    //     cerr << pq.top().first.first << \" \" << pq.top().first.second << \" \" << pq.top().second << endl;\r\n    //     pq.pop();\r\n    // }\r\n\r\n}\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false);\r\n    int t = 1; \r\n    if(mutipletestcase) cin >> t; \r\n    while(t--) solve();\r\n}"
}