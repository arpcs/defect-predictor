{
    "id": 231956878,
    "contestId": 362,
    "creationTimeSeconds": 1699456582,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "ba1234anh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n#define int long long\r\n#define F first\r\n#define S second\r\n#define N 100005\r\n#define ii pair<int,int>\r\nusing namespace std;\r\nconst long long MIN = 1000000000;\r\n\r\nint n, m, p, q, k, t;\r\nint sum[N];\r\nint parent[N], sz[N];\r\npriority_queue <ii> pq;\r\nii v;\r\nvoid make_set()\r\n{\r\n    for(int i = 1; i <= n; i++)\r\n        parent[i] = i;\r\n}\r\nint found(int i)\r\n{\r\n    if(parent[i] == i)\r\n        return i;\r\n    return found(parent[i]);\r\n}\r\n\r\nvoid union_set(int q, int w, int e)\r\n{\r\n    int x, y;\r\n    x = found(q);\r\n    y = found(w);\r\n    if(x != y)\r\n    {\r\n        if(sz[y] > sz[x])\r\n            swap(x, y);\r\n        parent[y] = x;\r\n        if(sz[y] == sz[x])\r\n            sz[x]++;\r\n    }\r\n    sum[x] += e;\r\n}\r\nmain()\r\n{\r\n    cin >> n >> m >> p >> q;\r\n    make_set();\r\n    for (int i = 1; i <=m; i++)\r\n    {\r\n        int x,y,z;\r\n        cin >> x >> y >> z;\r\n        union_set(x, y, z);\r\n        v = make_pair(q, w);\r\n    }\r\n\r\n    if (n == q && m == 0 && p > 0)\r\n    {\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n\r\n    for (int i = 1; i <= n; i++)\r\n        if (parent[i] == i)\r\n        {\r\n            k++;\r\n            pq.push(make_pair(-sum[i], i));\r\n        }\r\n\r\n    if (k < q || k - q > p)\r\n    {\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n\r\n    cout << \"YES\\n\";\r\n    while(!pq.empty() && p && k != q)\r\n    {\r\n        ii top1 = pq.top();\r\n        pq.pop();\r\n        ii top2 = pq.top();\r\n        pq.pop();\r\n        if(!v.F)\r\n            v = make_pair(top1.S, top2.S);\r\n        cout << top1.S << ' ' << top2.S << \"\\n\";\r\n        pq.push({top1.F + top2.F + max(-MIN, top1.F + top2.F - 1), top1.S});\r\n        k--;\r\n        p--;\r\n    }\r\n    if (k == q && p!=0)\r\n        for (int i = 1; i <= p; i++)\r\n            cout << v.F << ' ' << v.S << endl;\r\n}\r\n"
}