{
    "id": 192716700,
    "contestId": 362,
    "creationTimeSeconds": 1675850429,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "D",
        "name": "Fools and Foolproof Roads",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dfs and similar",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "Archaeopteryx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 74,
    "timeConsumedMillis": 701,
    "memoryConsumedBytes": 7372800,
    "source": "#include<bits/stdc++.h>\r\n#define int long long\nusing namespace std;\nconst int N=2e5+5;\nint cnt,fa[N],n,m,p,q,siz[N],fsb;\nstruct ConnectBlock\n{\nint Size,dpty;\n// int ;\nbool operator < (const ConnectBlock &b) const\n{\nreturn Size>b.Size;\n}\n};\npriority_queue<ConnectBlock> que;\nint read()\n{\nint x=0,f=1;\nchar c=getchar();\nwhile (c<'0'||c>'9')\n{\nif(c=='-') f=-1;\nc=getchar();\n}\nwhile (c>='0'&&c<='9')\n{\nx=(x<<1)+(x<<3)+(c^48);\nc=getchar();\n}\nreturn x*f;\n}\nint getfa(int x)\n{\nif(x==fa[x]) return x;\nreturn getfa(fa[x]);\n}\nvoid merge(int x,int y,int z)\n{\nint fax=getfa(x),fay=getfa(y);\nif(fax==fay) siz[fax]+=z;\nelse\n{\nfa[fay]=fax;\nsiz[fax]+=siz[fay]+z;\ncnt--;\n}\n}\nsigned main()\n{\nn=read(),m=read(),p=read(),q=read();\ncnt=n;\nfor(int i=1;i<=n;i++) fa[i]=i;\nfor(int i=1;i<=m;i++) {int x=read(),y=read(),z=read();merge(x,y,z);}\nfor(int i=1;i<=n;i++) if(i==fa[i]) que.push(ConnectBlock{siz[i],i});\nif(cnt<q || cnt-p>q || (!m && q==n && p)) puts(\"NO\"),exit(0);\nputs(\"YES\");\nwhile (cnt>q)\n{\nConnectBlock x=que.top();que.pop();\nConnectBlock y=que.top();que.pop();\nmerge(x.dpty,y.dpty,min((int)1e9,x.Size+y.Size+1));\ncout<<x.dpty<<\" \"<<y.dpty<<endl;\np--;\nque.push(ConnectBlock{siz[x.dpty],x.dpty});\n}\nfor(int i=1;i<=n;i++)\n{\nif(i!=getfa(i))\n{\nwhile(p--) cout<<i<<\" \"<<getfa(i)<<endl;\nreturn 0;\n}\n}\nreturn 0;\n}"
}