{
    "id": 216661332,
    "contestId": 903,
    "creationTimeSeconds": 1690867834,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 903,
        "index": "D",
        "name": "Almost Difference",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 903,
        "members": [
            {
                "handle": "a6z"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513091100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 110592000,
    "source": "#include <bits/stdc++.h>\r\n#include<unordered_set>\r\nusing namespace std;\r\n#define endl '\\n'\r\n#define int  long long\r\n#define ls p<<1\r\n#define rs p<<1|1\r\n#define PII pair<int,int>\r\n#define lowbit(x) (-x)&(x)\r\ntypedef  long long LL;\r\nconst int N = 2e5 + 10, inf = 0x3f3f3f3f, M = 1e9 + 7;\r\nint n;\r\nstruct node {\r\n    int l, r, v;\r\n}tr[N * 22];\r\nint root[N], idx;\r\nvoid build(int& x, int l, int r) {\r\n    x = ++idx;\r\n    if (l == r)return;\r\n    int m = l + r >> 1;\r\n    build(tr[x].l, l, m);\r\n    build(tr[x].r, m + 1, r);\r\n}\r\nvoid insert(int x, int& y, int l, int r, int v) {\r\n    y = ++idx; tr[y] = tr[x]; tr[y].v++;\r\n    if (l == r)return;\r\n    int m = l + r >> 1;\r\n    if (v <= m)insert(tr[x].l, tr[y].l, l, m, v);\r\n    else insert(tr[x].r, tr[y].r, m + 1, r, v);\r\n}\r\nint query(int x, int y, int l, int r, int v) {\r\n    if (l == r)return tr[x].v - tr[y].v;\r\n    int m = l + r >> 1;\r\n    if (v <= m)return query(tr[x].l, tr[y].l, l, m, v);\r\n    else return query(tr[x].r, tr[y].r, m + 1, r, v);\r\n}\r\nvoid solve() {\r\n    cin >> n;\r\n    int sum = 0;\r\n    vector<int>a(n + 1), na(n + 1);\r\n    for (int i = 1;i <= n;i++) {\r\n        cin >> a[i];\r\n        na[i] = a[i]; sum += a[i];\r\n    }\r\n    sort(na.begin()+1, na.end());\r\n    na.erase(unique(na.begin() + 1, na.end()), na.end());\r\n    int len = na.size();\r\n    build(root[0], 1, len);\r\n    for (int i = 1;i <= n;i++) {\r\n        a[i] = lower_bound(na.begin()+1, na.end(), a[i]) - na.begin();\r\n        insert(root[i-1], root[i], 1, len, a[i]);\r\n    }\r\n    long double ans = 0;\r\n    for (int i = 1;i <= n;i++) {\r\n        int now = na[a[i]];\r\n        ans += sum - now * (n - i + 1);\r\n        sum -= now;\r\n        int idx = lower_bound(na.begin() + 1, na.end(), now+1) - na.begin();\r\n        if (idx != len and na[idx] == now + 1) {\r\n            int v = query(root[n], root[i], 1, len, idx);\r\n            ans -= v;\r\n        }\r\n        idx = lower_bound(na.begin() + 1, na.end(), now - 1) - na.begin();\r\n        if (idx != len and na[idx] == now - 1) {\r\n            int v = query(root[n], root[i], 1, len, idx);\r\n            ans += v;\r\n        }\r\n    }\r\n    cout << fixed << setprecision(0) << ans << endl;\r\n}\r\nsigned  main()\r\n{\r\n    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n    int tt = 1;\r\n    //cin >> tt;\r\n    while (tt--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}