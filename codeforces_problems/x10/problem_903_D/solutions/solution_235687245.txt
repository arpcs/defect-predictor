{
    "id": 235687245,
    "contestId": 903,
    "creationTimeSeconds": 1701683073,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 903,
        "index": "D",
        "name": "Almost Difference",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "data structures",
            "math"
        ]
    },
    "author": {
        "contestId": 903,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513091100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 451,
    "memoryConsumedBytes": 3993600,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define all(x) x.begin(), x.end()\n\nusing vi = vector<int>;\n\nusing Long = long long;\nusing ii = pair<int, int>;\n\nconst int MAXN = 200001;\nconst int GAP = 2;\nconst int DEC = 10;\n\nint n, a[MAXN], b[MAXN];\n\nstruct FenwickTree {\n\tint N = 0;\n\tLong bit[MAXN]; \n\tint count[MAXN];\n\t\n\tvoid prepare(int n) {\n\t\tN = n; \n\t\tfill(bit, bit + 1 + N, 0);\n\t\tfill(count, count + 1 + N, 0);\n\t}\n\t\n\tvoid update(int idx, int val) {\n\t\twhile(idx <= N) {\n\t\t\tbit[idx] += val; \n\t\t\t++count[idx]; \n\t\t\tidx += (idx & -idx);\n\t\t}\n\t}\n\t\n\tpair<Long, int> op(int idx) {\n\t\tpair<Long, int> ret = make_pair(0, 0);\n\t\twhile(idx) {\n\t\t\tret.first += bit[idx];\n\t\t\tret.second += count[idx]; \n\t\t\tidx -= (idx & -idx);\n\t\t}\n\t\treturn ret;\n\t}\n\t\n\tpair<Long, int> query(int lo, int hi) {\n\t\tpair<Long, int> H = op(hi), L = op(lo - 1);\n\t\treturn make_pair(H.first - L.first, H.second - L.second);\n\t}\n} ft;\n\nvoid fast_io() {\n    ios::sync_with_stdio(false);\n    cin.tie(NULL);\n}\n\nint get_position(int val, const int P) {\n\treturn 1 + (lower_bound(b, b + P, val) - b);\n}\n\nLong solve(int val, int lo, int hi) {\n\tpair<Long, int> res = ft.query(lo, hi);\n\treturn res.first - (1LL * val * res.second);\n}\n\nvoid print(__int128 val) {\n\tvi digits;\n\tbool flag = (val < 0);\n\tif(flag) val *= -1;\n\t\n\twhile(val) { digits.pb(val % DEC), val /= DEC; }\n\treverse(all(digits));\n\t\n\tif(digits.size()) {\n\t\tif(flag) printf(\"-\");\n\t\tfor(auto v : digits) printf(\"%d\", v);\n\t}\n\telse printf(\"%d\", 0);\n\tprintf(\"\\n\");\n}\n\nint main() {\n//\tfast_io();\n//\tfreopen(\"input/903D.txt\", \"r\", stdin);\n\t\n\tcin >> n;\n\tfor(int i = 0; i < n; i++) cin >> a[i];\n\n\tmemcpy(b, a, sizeof(a));\n\tsort(b, b + n);\n\t\n\tconst int P = unique(b, b + n) - b;\n\tft.prepare(P);\n\t\n\t__int128 ans = 0;\n\tfor(int i = n - 1; i >= 0; i--) {\n\t\tint LBOUND = P - (lower_bound(b, b + P, a[i] + GAP) - b);\n\t\tint HBOUND = upper_bound(b, b + P, a[i] - GAP) - b;\n\t\tif(LBOUND) ans += solve(a[i], P - LBOUND + 1, P);\n\t\tif(HBOUND) ans += solve(a[i], 1, HBOUND);\n\t\tft.update(get_position(a[i], P), a[i]);\n\t}\n\t\n\tprint(ans);\n\treturn 0;\n}\n\n\t\t\t   \t  \t \t  \t\t\t \t\t \t\t  \t  \t \t"
}