{
    "id": 59828808,
    "contestId": 1170,
    "creationTimeSeconds": 1567285517,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "Sorting"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559054100
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.Scanner\r\nimport kotlin.math.*\r\nvar reader = Scanner(System.`in`)\r\n\r\nconst val MAXN: Int = 200007\r\n\r\nfun get_sum(l: Int, r: Int): Long{\r\n    if(l == 0){\r\n        return prefix[r]\r\n    }\r\n    return prefix[r] - prefix[l - 1]\r\n}\r\n\r\nfun get_median(l: Int, r: Int): Pair<Long, Int>{\r\n    var first: Long\r\n    if((l + r) % 2 == 1){\r\n        first = (a[(l + r) / 2] + a[(l + r + 1) / 2]) / 2\r\n    }\r\n    else{\r\n        first = a[(l + r) / 2]\r\n    }\r\n\r\n    return Pair(first, (l + r) / 2)\r\n}\r\n\r\nfun get_poss(l: Int, r: Int, k: Long): Pair<Long, Int>{\r\n    var l2: Int = l\r\n    var r2: Int = r\r\n\r\n    while(l2 != r2){\r\n        var mid: Int = (l2 + r2 + 1) / 2\r\n        var up: Long = (mid - l + 1) * a[mid] - get_sum(l, mid)\r\n\r\n        if(up <= k){\r\n            l2 = mid\r\n        }\r\n        else{\r\n            r2 = mid - 1\r\n        }\r\n    }\r\n\r\n    var up: Long = (l2 - l + 1) * a[l2] - get_sum(l, l2)\r\n    var ret: Long = a[l2] + (k - up) / (l2 - l + 1)\r\n    ret = min(ret, a[min(l2 + 1, r)])\r\n\r\n    return Pair(ret, l2)\r\n}\r\n\r\nfun calc_score(l: Int, r: Int, x: Long, idx: Int): Long{\r\n    var lvalue: Long = (idx - l + 1) * x - get_sum(l, idx)\r\n    var rvalue: Long = get_sum(idx + 1, r) - (r - idx) * x\r\n\r\n    return lvalue + rvalue\r\n}\r\n\r\nfun main(){\r\n    var n: Int = reader.nextInt()\r\n    var m: Int = reader.nextInt()\r\n    var k: Long = reader.nextLong()\r\n\r\n    var a: LongArray = LongArray(n)\r\n    var prefix: LongArray = LongArray(n)\r\n\r\n    for(i: Int in 0 until n){\r\n        a[i] = reader.nextLong()\r\n    }\r\n    a = a.sorted().toLongArray()\r\n\r\n    prefix[0] = a[0]\r\n    for(i: Int in 1 until n){\r\n        prefix[i] = a[i] + prefix[i - 1]\r\n    }\r\n\r\n    var ans: Long = 1\r\n    for(i in 0 until 18){\r\n        ans *= 10\r\n    }\r\n\r\n    for(i: Int in m - 1 until n){\r\n        var med: Pair<Long, Int> = get_median(i - m + 1, i)\r\n        var poss: Pair<Long, Int> = get_poss(i - m + 1, i, k)\r\n\r\n        if(poss.first < med.first){\r\n            med = poss\r\n        }\r\n\r\n        ans = min(ans, calc_score(i - m + 1, i, med.first, med.second))\r\n    }\r\n\r\n    println(ans)\r\n\r\n    return\r\n}"
}