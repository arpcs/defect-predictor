{
    "id": 83737303,
    "contestId": 1170,
    "creationTimeSeconds": 1592129152,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "vincentalfred"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559054100
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 390,
    "memoryConsumedBytes": 19968000,
    "source": "val N = 200_000\r\nval INF = 1_000_000_000 + 7\r\n\r\nfun main() {\r\n    val (n, m, k) = readInts()\r\n    val a = readInts().sorted()\r\n    var ans = INF.toLong() * N\r\n\r\n    val sum = LongArray(n)\r\n    for (i in 0 until n) {\r\n        sum[i] = a[i].toLong()\r\n        if (i > 0) sum[i] += sum[i-1]\r\n    }\r\n    \r\n    for (i in 0 until n-m+1) {\r\n        var l = i\r\n        var r = i + m/2\r\n        while (l < r) {\r\n            var mid = (l + r + 1) / 2\r\n            var ok = check(i, mid, a[mid], sum, k)\r\n            if (ok) {\r\n                l = mid\r\n            } else {\r\n                r = mid-1\r\n            }\r\n        }\r\n\r\n        var furthestMiddle = l\r\n\r\n        var inflateCount = furthestMiddle - i + 1\r\n        var inflateSum = inflateCount * a[furthestMiddle].toLong() - getSum(i, furthestMiddle, sum) \r\n        var deflateCount = m - inflateCount\r\n        var deflateSum = getSum(furthestMiddle+1, i+m-1, sum) - deflateCount * a[furthestMiddle].toLong()\r\n        var cur = inflateSum + deflateSum\r\n\r\n        // target pressure is between a[furthestMiddle] and a[furthestMiddle+1]\r\n        if (inflateCount < deflateCount) {\r\n            var increase = (k.toLong() - inflateSum) / inflateCount\r\n            increase = Math.min(increase, a[furthestMiddle+1].toLong()-a[furthestMiddle])\r\n            cur -= increase * deflateCount - increase * inflateCount\r\n        }\r\n\r\n        if (cur < ans) {\r\n            ans = cur\r\n        }\r\n    }\r\n\r\n    println(ans)\r\n}\r\n\r\nprivate fun getSum(l: Int, r: Int, sum: LongArray): Long {\r\n    var total: Long = sum[r]\r\n    if (l > 0) total -= sum[l-1]\r\n    return total\r\n}\r\n\r\nprivate fun check(l: Int, mid: Int, a: Int, sum: LongArray, k: Int): Boolean {\r\n    val cnt = mid - l + 1\r\n    val total = cnt * a.toLong() - getSum(l, mid, sum)\r\n    return total <= k.toLong()\r\n}\r\n\r\nprivate fun readLn() = readLine()!!\r\nprivate fun readInts() = readLn().split(\" \").map{ it.toInt() }"
}