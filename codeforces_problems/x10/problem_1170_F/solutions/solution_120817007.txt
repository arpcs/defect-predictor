{
    "id": 120817007,
    "contestId": 1170,
    "creationTimeSeconds": 1624895853,
    "relativeTimeSeconds": 4233,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "Ji_Kuai"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 67380,
        "teamName": "Emilia is the best!",
        "ghost": false,
        "startTimeSeconds": 1624891620
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 7372800,
    "source": "import java.io.*\nimport java.util.*\nimport kotlin.collections.ArrayList\nimport kotlin.collections.RandomAccess\nimport kotlin.math.*\n@JvmField val INPUT = System.`in`\n@JvmField val OUTPUT = System.out\n@JvmField val _reader = INPUT.bufferedReader()\nfun readLine(): String? = _reader.readLine()\nfun readLn() = _reader.readLine()!!\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\nfun read(): String {\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\n    return _tokenizer.nextToken()\n}\nfun readInt() = read().toInt()\nfun readDouble() = read().toDouble()\nfun readLong() = read().toLong()\nfun readStrings(n: Int) = List(n) { read() }\nfun readLines(n: Int) = List(n) { readLn() }\nfun readInts(n: Int) = List(n) { read().toInt() }\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\nfun readLongs(n: Int) = List(n) { read().toLong() }\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\nfun gcd(a: Int, b: Int) : Int = if (b == 0) a else gcd(b,a%b)\nfun gcd(a: Long, b: Long) : Long = if (b == 0L) a else gcd(b,a%b)\nfun Boolean.toInt() = if (this) 1 else 0\nval INF = 0x3f3f3f3f\nval MOD = 1000000007\nfun main() { Thread(null, {newmain()}, \"JiKuai\", 1 shl 28).start() }\nfun assert(x: Boolean) {if(!x) throw AssertionError(); }\n/***********************************************************************************************/\n\nfun newmain() {\n    var (n, m, k) = readInts(3)\n    var arr = IntArray(n + 1) { if(it > 0) readInt() else 0 }\n    arr.shuffle()\n    arr.sort()\n\n    var sum = LongArray(n + 1) { 0 }\n    for(i in 1..n)\n        sum[i] = sum[i - 1] + arr[i]\n\n    var ans = INF.toLong() * INF\n    for(i in 1..(n - m + 1)) {\n        var (l, r) = Pair(i, i + (m - 1) / 2 + 1)\n        while(l < r) {\n            var mi = (l + r) / 2\n            var s = sum[mi] - sum[i - 1]\n            if(arr[mi].toLong() * (mi - i + 1) - s <= k)\n                l = mi + 1\n            else\n                r = mi\n        }\n        l--\n        var a = arr[l].toLong() * (l - i + 1) - (sum[l] - sum[i - 1])\n        var b = sum[i + m - 1] - sum[l] - arr[l].toLong() * (i + m - l - 1)\n        //println(\"here $i $l $a $b\")\n        ans = min(ans, a + b)\n    }\n    println(ans)\n}"
}