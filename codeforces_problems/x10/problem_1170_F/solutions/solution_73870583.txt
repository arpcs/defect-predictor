{
    "id": 73870583,
    "contestId": 1170,
    "creationTimeSeconds": 1584782264,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "Spheniscine"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559054100
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 14540800,
    "source": "@file:Suppress(\"NOTHING_TO_INLINE\", \"EXPERIMENTAL_FEATURE_WARNING\", \"OVERRIDE_BY_INLINE\")\r\n\r\nimport java.io.PrintWriter\r\nimport java.util.StringTokenizer\r\nimport kotlin.math.*\r\nimport kotlin.random.Random\r\nimport kotlin.collections.sort as _sort\r\nimport kotlin.collections.sortDescending as _sortDescending\r\nimport kotlin.io.println as iprintln\r\n\r\n/** @author Spheniscine */\r\nfun main() { _writer.solve(); _writer.flush() }\r\nfun PrintWriter.solve() {\r\n    val n = readInt()\r\n    val m = readInt()\r\n    val k = readInt()\r\n\r\n    val A = readIntArray(n)\r\n    A.sort()\r\n\r\n    val S = LongArray(n+1)\r\n    for(i in 0 until n) S[i+1] = S[i] + A[i]\r\n\r\n    var ans = Long.MAX_VALUE\r\n    var j = 0\r\n    for(l in 0 .. n - m) {\r\n\r\n        while(j < l + m/2 && (j+1).let { i ->\r\n                (i - l + 1).toLong() * A[i] - (S[i+1] - S[l]) <= k\r\n            }) j++\r\n        var med = A[j].toLong()\r\n        val cnt = j - l + 1\r\n        if(j < l + m/2) {\r\n            med += (k - (cnt * med - (S[j+1] - S[l]))) / cnt\r\n        }\r\n\r\n        val cnd = cnt * med - (S[j+1] - S[l]) +\r\n                S[l+m] - S[j+1] - (m - cnt) * med\r\n        ans = min(ans, cnd)\r\n    }\r\n    println(ans)\r\n}\r\n\r\ninline fun bsFirst(first: Int, last: Int, predicate: (Int) -> Boolean): Int {\r\n    var low = first\r\n    var high = last\r\n\r\n    while (low <= high) {\r\n        val mid = low.and(high) + low.xor(high).shr(1)\r\n        if(predicate(mid)) high = mid - 1\r\n        else low = mid + 1\r\n    }\r\n    return low\r\n}\r\ninline fun IntRange.bsFirst(predicate: (Int) -> Boolean) = bsFirst(first, last, predicate)\r\n\r\ninline fun bsLast(first: Int, last: Int, predicate: (Int) -> Boolean) = bsFirst(first, last) { !predicate(it) } - 1\r\ninline fun IntRange.bsLast(predicate: (Int) -> Boolean) = bsLast(first, last, predicate)\r\n\r\n/** IO code start */\r\n//@JvmField val INPUT = File(\"input.txt\").inputStream()\r\n//@JvmField val OUTPUT = File(\"output.txt\").outputStream()\r\n@JvmField val INPUT = System.`in`\r\n@JvmField val OUTPUT = System.out\r\n\r\n@JvmField val _reader = INPUT.bufferedReader()\r\nfun readLine(): String? = _reader.readLine()\r\nfun readLn() = _reader.readLine()!!\r\n@JvmField var _tokenizer: StringTokenizer = StringTokenizer(\"\")\r\nfun read(): String {\r\n    while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return \"\", \" \")\r\n    return _tokenizer.nextToken()\r\n}\r\nfun readInt() = read().toInt()\r\nfun readDouble() = read().toDouble()\r\nfun readLong() = read().toLong()\r\nfun readStrings(n: Int) = List(n) { read() }\r\nfun readLines(n: Int) = List(n) { readLn() }\r\nfun readInts(n: Int) = List(n) { read().toInt() }\r\nfun readIntArray(n: Int) = IntArray(n) { read().toInt() }\r\nfun readDoubles(n: Int) = List(n) { read().toDouble() }\r\nfun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }\r\nfun readLongs(n: Int) = List(n) { read().toLong() }\r\nfun readLongArray(n: Int) = LongArray(n) { read().toLong() }\r\n\r\n@JvmField val _writer = PrintWriter(OUTPUT, false)\r\n\r\n/** shuffles and sort overrides to avoid quicksort attacks */\r\nprivate inline fun <T> _shuffle(rnd: Random, get: (Int) -> T, set: (Int, T) -> Unit, size: Int) {\r\n    // Fisher-Yates shuffle algorithm\r\n    for (i in size - 1 downTo 1) {\r\n        val j = rnd.nextInt(i + 1)\r\n        val temp = get(i)\r\n        set(i, get(j))\r\n        set(j, temp)\r\n    }\r\n}\r\n\r\n@JvmField var _random: Random? = null\r\nval random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }\r\n\r\nfun IntArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)\r\nfun IntArray.sort() { shuffle(); _sort() }\r\nfun IntArray.sortDescending() { shuffle(); _sortDescending() }\r\n\r\nfun LongArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)\r\nfun LongArray.sort() { shuffle(); _sort() }\r\nfun LongArray.sortDescending() { shuffle(); _sortDescending() }\r\n\r\nfun DoubleArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)\r\nfun DoubleArray.sort() { shuffle(); _sort() }\r\nfun DoubleArray.sortDescending() { shuffle(); _sortDescending() }\r\n\r\nfun CharArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)\r\ninline fun CharArray.sort() { _sort() }\r\ninline fun CharArray.sortDescending() { _sortDescending() }\r\n\r\ninline fun <T: Comparable<T>> Array<out T>.sort() = _sort()\r\ninline fun <T: Comparable<T>> Array<out T>.sortDescending() = _sortDescending()\r\ninline fun <T: Comparable<T>> MutableList<out T>.sort() = _sort()\r\ninline fun <T: Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()\r\n\r\nfun `please stop removing these imports IntelliJ`() {\r\n    iprintln(max(1, 2))\r\n}"
}