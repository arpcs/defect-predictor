{
    "id": 54892607,
    "contestId": 1170,
    "creationTimeSeconds": 1559339716,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "amelentev"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559054100
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 51,
    "timeConsumedMillis": 295,
    "memoryConsumedBytes": 12390400,
    "source": "import java.io.BufferedReader\nimport java.io.IOException\nimport java.io.InputStreamReader\nimport java.util.*\n\nfun main(args : Array<String>) {\n    class Scanner {\n        var br = BufferedReader(InputStreamReader(System.`in`))\n        var tk: StringTokenizer? = null\n\n        operator fun next(): String {\n            while (tk == null || !tk!!.hasMoreElements()) {\n                try {\n                    tk = StringTokenizer(br.readLine())\n                } catch (e: IOException) {\n                    throw RuntimeException(e)\n                }\n\n            }\n            return tk!!.nextToken()\n        }\n\n        fun nextInt() = next().toInt()\n        fun nextLong() = next().toLong()\n    }\n    val inp = Scanner()\n    val n = inp.nextInt()\n    val m = inp.nextInt()\n    val k = inp.nextLong()\n    val a = (1..n).map { inp.nextLong() }.shuffled().sorted()\n    var idx = 0\n    var below = 0L\n    var above = 0L\n    for (i in 0 until m) above += a[i]-a[0]\n    var besttime = below + above\n    for (start in 0 .. n-m) {\n        val medi = start + (m-1)/2\n        while (idx < medi) {\n            val da = a[idx+1] - a[idx]\n            val dbelow = da * (idx - start + 1)\n            if (below + dbelow <= k) {\n                below += dbelow\n                above -= da * (start + m - idx - 1)\n                idx++\n            } else break\n        }\n        //assert (k >= below)\n        besttime = if (idx < medi) {\n            val d = (k - below) / (idx - start + 1)\n            //assert(start + m - idx - 1 >= idx - start + 1)\n            minOf(besttime, below + d * (idx - start + 1) + above - d * (start + m - idx - 1))\n        } else {\n            minOf(besttime, below + above)\n        }\n        if (start + m < n) {\n            below -= a[idx] - a[start]\n            above += a[start + m] - a[idx]\n        }\n    }\n    print(besttime)\n}\n"
}