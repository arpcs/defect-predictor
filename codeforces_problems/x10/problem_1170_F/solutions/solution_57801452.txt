{
    "id": 57801452,
    "contestId": 1170,
    "creationTimeSeconds": 1564147582,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "Alan_zhou"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559054100
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "import java.util.*\r\nimport kotlin.collections.HashMap\r\n\r\nvar scanner = Scanner(System.`in`)\r\n\r\nfun readLn() = readLine()!!\r\nfun readInt() = readLn().toInt()\r\nfun readLong() = readLn().toLong()\r\nfun readStrings() = readLn().split(\" \")\r\nfun readInts() = readStrings().map { it.toInt() }\r\nfun readDoubles() = readStrings().map { it.toDouble() }\r\nfun readLongs() = readStrings().map { it.toLong() }\r\n\r\nfun main() {\r\n  val (n, m, k) = readInts()\r\n  var A = readLongs()\r\n  var a = arrayListOf <Long> ()\r\n  \r\n  a.addAll(A)\r\n  a.sort()\r\n  \r\n  var ans = (1e18).toLong()\r\n  var ans = (1e18).toLong()\r\n    var ind = 0\r\n    var above:Long = 0\r\n    var below:Long = 0\r\n    for (i in 0..m-1) above += a[i]-a[0]\r\n    for (i in 0..n-m) {\r\n        val des = i+(m-1)/2\r\n        while (ind < des) { // try to get closer to median if possible\r\n            if (below+(a[ind+1]-a[ind])*(ind+1-i) <= k) {\r\n                below += (a[ind+1]-a[ind])*(ind+1-i)\r\n                above -= (a[ind+1]-a[ind])*(i+m-1-ind) // ind+1 to i+m-1\r\n                ind ++\r\n            } else break\r\n        }\r\n        assert (k >= below)\r\n        if (ind < des) {\r\n            var oops: Long = (k-below)/(ind+1-i)\r\n            ans = minOf(ans,below+above-(i+m-1-ind)*oops+(ind+1-i)*oops)\r\n            assert(i+m-1-ind >= ind+1-i)\r\n        } else ans = minOf(ans,above+below)\r\n        if (i < n-m) {\r\n            below -= a[ind]-a[i]\r\n            above += a[i+m]-a[ind]\r\n        }\r\n    }\r\n  print(ans)\r\n}\r\n\r\n"
}