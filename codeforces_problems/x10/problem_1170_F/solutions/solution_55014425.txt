{
    "id": 55014425,
    "contestId": 1170,
    "creationTimeSeconds": 1559561991,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1170,
        "index": "F",
        "name": "Wheels",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1170,
        "members": [
            {
                "handle": "darnley"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1559054100
    },
    "programmingLanguage": "Kotlin 1.4",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 452,
    "memoryConsumedBytes": 18739200,
    "source": "fun main() {\n    val (n, m, canIncrease) = readInts()\n    val a = readInts().sorted()\n    val acc = mutableListOf(0L)\n    for (i in 0 until n) { acc.add(acc[i] + a[i]) }\n    var ans = a.sum().toLong()\n    for (left in 0..n - m) {\n        var low = a[left]\n        var high = a[left + (m - 1) / 2] + 1\n        while (low + 1 < high) {\n            val mid = (low + high) / 2\n            val index = binarySearch(a, mid, left, m)\n            val increases = (index - left) * 1L * mid - (acc[index] - acc[left])\n            if (increases <= canIncrease) {\n                low = mid\n            } else {\n                high = mid\n            }\n        }\n        val index = binarySearch(a, low, left, m)\n        val ops = (index - left) * 1L * low - (acc[index] - acc[left]) +\n                (acc[left + m] - acc[index]) - (left + m - index) * 1L * low\n        ans = minOf(ans, ops)\n    }\n    println(ans)\n}\n\nprivate fun binarySearch(array: List<Int>, value: Int, from: Int, length: Int): Int {\n    val binarySearch = array.binarySearch(value, from, from + length)\n    return if (binarySearch >= 0) binarySearch else -1 - binarySearch\n}\n\nprivate fun readLn() = readLine()!!\nprivate fun readInt() = readLn().toInt()\nprivate fun readStrings() = readLn().split(\" \")\nprivate fun readInts() = readStrings().map { it.toInt() }\n"
}