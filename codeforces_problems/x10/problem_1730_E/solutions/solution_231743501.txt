{
    "id": 231743501,
    "contestId": 1730,
    "creationTimeSeconds": 1699366077,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1730,
        "index": "E",
        "name": "Maximums and Minimums",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2700,
        "tags": [
            "combinatorics",
            "data structures",
            "divide and conquer",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1730,
        "members": [
            {
                "handle": "xjrjyy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664116500
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 29,
    "timeConsumedMillis": 1013,
    "memoryConsumedBytes": 90112000,
    "source": "// LUOGU_RID: 133902350\n#include <bits/stdc++.h>\n\nusing i64 = long long;\n\nvoid solve() {\n    int n;\n    std::cin >> n;\n\n    std::vector<int> a(n);\n    for (int i = 0; i < n; ++i) {\n        std::cin >> a[i];\n    }\n\n    auto get = [&](auto &&f) {\n        std::vector<int> lmin(n), rmin(n, n), stk;\n        stk = {-1};\n        for (int i = 0; i < n; ++i) {\n            while (stk.back() != -1 && !f(a[stk.back()], a[i])) {\n                rmin[stk.back()] = i;\n                stk.pop_back();\n            }\n            lmin[i] = stk.back();\n            stk.push_back(i);\n        }\n        if (f(0, 1)) {\n            stk = {n};\n            for (int i = n - 1; i >= 0; --i) {\n                while (stk.back() != n && !f(a[stk.back()], a[i])) {\n                    stk.pop_back();\n                }\n                rmin[i] = stk.back();\n                stk.push_back(i);\n            }\n        }\n        return std::make_pair(lmin, rmin);\n    };\n    std::vector<int> lmin(n), rmin(n), lmax(n), rmax(n, n), stk;\n    stk = {-1};\n    for (int i = 0; i < n; ++i) {\n        while (stk.back() != -1 && a[stk.back()] >= a[i]) {\n            stk.pop_back();\n        }\n        lmin[i] = stk.back();\n        stk.push_back(i);\n    }\n    stk = {n};\n    for (int i = n - 1; i >= 0; --i) {\n        while (stk.back() != n && a[stk.back()] >= a[i]) {\n            stk.pop_back();\n        }\n        rmin[i] = stk.back();\n        stk.push_back(i);\n    }\n    stk = {-1};\n    for (int i = 0; i < n; ++i) {\n        while (stk.back() != -1 && a[stk.back()] <= a[i]) {\n            rmax[stk.back()] = i;\n            stk.pop_back();\n        }\n        lmax[i] = stk.back();\n        stk.push_back(i);\n    }\n\n    const int m = *std::max_element(a.begin(), a.end());\n\n    std::vector<bool> vis(m + 1);\n    for (int i = 0; i < n; ++i) {\n        vis[a[i]] = true;\n    }\n\n    std::vector<std::vector<int>> pos(m + 1);\n    for (int i = 1; i <= m; ++i) {\n        if (vis[i]) {\n            pos[i].push_back(-1);\n        }\n    }\n    for (int i = 0; i < n; ++i) {\n        pos[a[i]].push_back(i);\n    }\n    for (int i = 1; i <= m; ++i) {\n        if (vis[i]) {\n            pos[i].push_back(n);\n        }\n    }\n\n    std::vector<std::vector<int>> factor(m + 1);\n    for (int i = 1; i <= m; ++i) {\n        if (vis[i]) {\n            for (int j = 2 * i; j <= m; j += i) {\n                if (vis[j]) {\n                    factor[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    i64 ans = 0;\n    auto calc = [&](int x, int y) {\n        return x > 0 && y > 0 ? 1ll * x * y : 0;\n    };\n    std::vector<int> cnt(m + 1);\n    for (int i = 0; i < n; ++i) {\n        for (auto v : factor[a[i]]) {\n            int j = pos[v][cnt[v]], k = pos[v][cnt[v] + 1];\n            int lij = std::max(lmax[i], j == -1 ? -1 : lmin[j]);\n            int rij = std::min(rmax[i], j == -1 ? n : rmin[j]);\n            int lik = std::max(lmax[i], k == n ? -1 : lmin[k]);\n            int rik = std::min(rmax[i], k == n ? n : rmin[k]);\n            ans += calc(j - lij, rij - i);\n            ans += calc(i - lik, rik - k);\n            ans -= calc(j - std::max(lij, lik), std::min(rij, rik) - k);\n        }\n        cnt[a[i]] += 1;\n    }\n\n    for (int l = 0, r = 0; l < n; l = r) {\n        while (r < n && a[r] == a[l]) {\n            ++r;\n        }\n        ans += 1ll * (r - l) * (r - l + 1) / 2;\n    }\n\n    std::cout << ans << \"\\n\";\n}\n\nint main() {\n    std::cin.tie(nullptr)->sync_with_stdio(false);\n\n    int t;\n    std::cin >> t;\n\n    while (t--) {\n        solve();\n    }\n\n    return 0;\n}\n"
}