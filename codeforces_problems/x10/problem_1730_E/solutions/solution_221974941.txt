{
    "id": 221974941,
    "contestId": 1730,
    "creationTimeSeconds": 1693934152,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1730,
        "index": "E",
        "name": "Maximums and Minimums",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2700,
        "tags": [
            "combinatorics",
            "data structures",
            "divide and conquer",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1730,
        "members": [
            {
                "handle": "ezdp"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1664116500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 29,
    "timeConsumedMillis": 2479,
    "memoryConsumedBytes": 168652800,
    "source": "// mrazq / obicham q taq zadacha\r\n// prashtam go tva samo, za da se uspokoq\r\n// ot tri dni samo za tova mislq\r\n// kak sum tolkova maloumen\r\n\r\n#include <bits/stdc++.h>\r\n \r\nusing namespace std;\r\n \r\nconst int N = 5e5 + 13;\r\nconst int A = 1e6 + 13;\r\n \r\nvector<int> divs[A];\r\nint a[N];\r\n \r\nint gr_lf[N], gr_rg[N];\r\nint less_lf[N], less_rg[N];\r\n \r\nvector<int> pos[A];\r\nint ind[A];\r\n \r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n \r\n    for(int i = 0; i < n; i++) {\r\n        cin >> a[i];\r\n        pos[a[i]].push_back(i);\r\n    }\r\n \r\n    {\r\n        stack<int> st;\r\n        for(int i = 0; i < n; i++) {\r\n            while(!st.empty() && a[st.top()] < a[i])\r\n                st.pop();\r\n \r\n            gr_lf[i] = (st.empty() ? -1 : st.top());\r\n            st.push(i);\r\n        }\r\n    }\r\n \r\n    {\r\n        stack<int> st;\r\n        for(int i = n - 1; i >= 0; i--) {\r\n            while(!st.empty() && a[st.top()] <= a[i])\r\n                st.pop();\r\n \r\n            gr_rg[i] = (st.empty() ? n : st.top());\r\n            st.push(i);\r\n        }\r\n    }\r\n \r\n    {\r\n        stack<int> st;\r\n        for(int i = 0; i < n; i++) {\r\n            while(!st.empty() && a[st.top()] >= a[i])\r\n                st.pop();\r\n \r\n            less_lf[i] = (st.empty() ? -1 : st.top());\r\n            st.push(i);\r\n        }\r\n    }\r\n \r\n    {\r\n        stack<int> st;\r\n        for(int i = n - 1; i >= 0; i--) {\r\n            while(!st.empty() && a[st.top()] >= a[i])\r\n                st.pop();\r\n \r\n            less_rg[i] = (st.empty() ? n : st.top());\r\n            st.push(i);\r\n        }\r\n    }\r\n \r\n    long long ans = 0;\r\n    for(int i = 0; i < n; i++) {\r\n        for(int x : divs[a[i]]) {\r\n            if(ind[x] >= 1) {\r\n                int j = pos[x][ind[x] - 1];\r\n                if(j > gr_lf[i] && less_rg[j] > i) {\r\n                    ans += (j - max(gr_lf[i], less_lf[j])) * 1ll * (min(gr_rg[i], less_rg[j]) - i);\r\n                }\r\n            }\r\n \r\n            if(ind[x] < pos[x].size()) {\r\n                int j = pos[x][ind[x]];\r\n                if(j < gr_rg[i] && less_lf[j] < i) {\r\n                    ans += (i - max({gr_lf[i], less_lf[j], ind[x] >= 1 ? pos[x][ind[x] - 1] : -1})) * 1ll * (min(gr_rg[i], less_rg[j]) - j);\r\n                }\r\n \r\n            }\r\n        }\r\n \r\n        ind[a[i]]++;\r\n    }\r\n \r\n    cout << ans << endl;\r\n \r\n    for(int i = 0; i < n; i++) {\r\n        pos[a[i]].erase(pos[a[i]].begin(), pos[a[i]].end());\r\n        gr_lf[i] = gr_rg[i] = less_lf[i] = less_rg[i] = 0;\r\n        ind[a[i]] = 0;\r\n    }\r\n}\r\n \r\nint main() {\r\n    for(int i = 1; i < A; i++) {\r\n        for(int j = i; j < A; j += i)\r\n            divs[j].push_back(i);\r\n    }\r\n \r\n    int t;\r\n    cin >> t;\r\n \r\n    while(t--)\r\n        solve();\r\n}"
}