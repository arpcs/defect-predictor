{
    "id": 231295230,
    "contestId": 582,
    "creationTimeSeconds": 1699083325,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 582,
        "index": "B",
        "name": "Once Again...",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "dp",
            "matrices"
        ]
    },
    "author": {
        "contestId": 582,
        "members": [
            {
                "handle": "butterchicken18"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1443890700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 1433600,
    "source": "#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n  \r\nusing namespace std;\r\nusing namespace chrono;\r\nusing namespace __gnu_pbds;\r\n \r\n//#define ordered_set tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>\r\n#define ordered_set tree<pair<ll,ll>, null_type,less<pair<ll, ll>>, rb_tree_tag,tree_order_statistics_node_update>\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define MOD 1000000007\r\n#define MOD1 998244353\r\n#define nline \"\\n\"\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define ff first\r\n#define ss second\r\n#define pll pair<ll,ll>\r\n#define pii pair<int,int>\r\n#define PI 3.141592653589793238462\r\n#define set_bits __builtin_popcountll\r\n#define sz(x) ((ll)(x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n\r\n#ifndef ONLINE_JUDGE\r\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\r\n#define debugs(x,n) cerr << #x <<\" \"; _print(x,n); cerr << endl;\r\n#else\r\n#define debug(x);\r\n#define debugs(x,n);\r\n#endif\r\n \r\nusing ll = long long;\r\ntypedef unsigned long long ull;\r\ntypedef long double lld;\r\n// typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key\r\n\r\nconst ll LINF = 2e18L + 5;\r\nconst int INF = 1e9 + 5;\r\n\r\n\r\nvoid _print(ll t) {cerr << t;}\r\nvoid _print(int t) {cerr << t;}\r\nvoid _print(string t) {cerr << t;}\r\nvoid _print(char t) {cerr << t;}\r\nvoid _print(lld t) {cerr << t;}\r\nvoid _print(double t) {cerr << t;}\r\nvoid _print(ull t) {cerr << t;}\r\n \r\ntemplate <class T> void _print(T p[],int n);\r\ntemplate <class T, class V> void _print(pair <T, V> p);\r\ntemplate <class T> void _print(vector <T> v);\r\ntemplate <class T> void _print(set <T> v);\r\ntemplate <class T, class V> void _print(map <T, V> v);\r\ntemplate <class T> void _print(multiset <T> v);\r\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\r\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(unordered_map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\ntemplate <class T> void _print(T p[],int n){cerr<<\"[ \";for(int i =0;i<n;i++){cerr<<p[i]<<\" \";}cerr<<\"]\";} \r\n \r\n// void _print(pbds v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\r\n \r\n/* -------------------------------------------------------------------------------------------------------------------------- - */\r\nll gcd(ll a, ll b) {if (b > a) {return gcd(b, a);} if (b == 0) {return a;} return gcd(b, a % b);}\r\nstring numberToString(ull n) {ostringstream geek; geek << n; string s = geek.str(); return s;}\r\nll stringToNumber(string s) {stringstream stream(s); ll x = 0; stream >> x; return x;}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nvoid extendgcd(ll a, ll b, ll*v) {if (b == 0) {v[0] = 1; v[1] = 0; v[2] = a; return ;} extendgcd(b, a % b, v); ll x = v[1]; v[1] = v[0] - v[1] * (a / b); v[0] = x; return;} //pass an arry of size1 3\r\nll mminv(ll a, ll b) {ll arr[3]; extendgcd(a, b, arr); return arr[0];} //for non prime b\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nbool revsort(ll a, ll b) {return a > b;}\r\nvoid swap(int &x, int &y) {int temp = x; x = y; y = temp;}\r\nll combination(ll n, ll r, ll m, ll *fact, ll *ifact) {ll val1 = fact[n]; ll val2 = ifact[n - r]; ll val3 = ifact[r]; return (((val1 * val2) % m) * val3) % m;}\r\nvoid google(int t) {cout << \"Case #\" << t << \": \";}\r\nvector<ll> sieve(int n) {int*arr = new int[n + 1](); vector<ll> vect; for (int i = 2; i <= n; i++)if (arr[i] == 0) {vect.push_back(i); for (int j = 2 * i; j <= n; j += i)arr[j] = 1;} return vect;}\r\nll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}  //only for prime m\r\nll phin(ll n) {ll number = n; if (n % 2 == 0) {number /= 2; while (n % 2 == 0) n /= 2;} for (ll i = 3; i <= sqrt(n); i += 2) {if (n % i == 0) {while (n % i == 0)n /= i; number = (number / i * (i - 1));}} if (n > 1)number = (number / n * (n - 1)) ; return number;} //O(sqrt(N))\r\nvoid yes(){cout<<\"YES\"<<nline;}\r\nvoid no(){cout<<\"NO\"<<nline;}\r\n//void calFact(){ fact[0] = 1;ifact[0] = mminvprime(1,MOD1);for(ll i = 1;i<maxN;i++){fact[i] = (fact[i-1]*i)%MOD1;ifact[i] = mminvprime(fact[i],MOD1);}}\r\n/* --------------------------------------------------------------------------------------------------------------------------* /\r\n\r\n********     *    *     *****    *****   ******   ********  \r\n*       *    *    *       *        *     *        *       * \r\n********     *    *       *        *     ****     ********\r\n*       *    *    *       *        *     *        *       * \r\n********      ****        *        *     ******   *       *\r\n\r\n\r\n*****  *    *  *****  *****   *  *  ******  **    *\r\n*      *    *    *    *       * *   *       * *   *\r\n*      ******    *    *       **    ****    *  *  *\r\n*      *    *    *    *       * *   *       *   * *\r\n*****  *    *  *****  *****   *  *  ******  *    **\r\n\r\n\r\n/*-----------------------------------------------------------------------------------------------------------------------------*/\r\nstruct Matrix {\r\n    int n;\r\n    vector<vector<ll>> a;\r\n    Matrix(int n){\r\n        this->n = n;\r\n        this->a = vector<vector<ll>>(n, vector<ll>(n, -LINF));\r\n    } \r\n\tMatrix operator *(Matrix other) {\r\n\t\tMatrix product(n);\r\n\t\tfor(int i = 0;i<n;i++) {\r\n\t\t\tfor(int j = 0;j<n;j++){\r\n\t\t\t\tfor(int k = 0;k<n;k++){\r\n\t\t\t\t\tproduct.a[i][k] = max(product.a[i][k], a[i][j] + other.a[j][k]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn product;\r\n\t}\r\n};\r\nMatrix expo_power(Matrix a, long long k) {\r\n    int n = a.n;\r\n\tMatrix res = Matrix(n);\r\n\tfor(int i = 0; i < n; ++i) {\r\n\t\tres.a[i][i] = 1;\r\n\t}\r\n\twhile(k) {\r\n\t\tif(k % 2) {\r\n\t\t\tres = res * a;\r\n\t\t}\r\n\t\tk /= 2;\r\n\t\ta = a * a;\r\n\t}\r\n\treturn res;\r\n}\r\nll lis(int s,int e,vector<ll> &v){\r\n    if(v[e] < v[s])return 0;\r\n    vector<ll> temp;\r\n    for(int i = s;i<=e;i++){\r\n        if(v[i] >= v[s])temp.push_back(v[i]);\r\n    }\r\n    // debug(temp);\r\n    vector<ll> dp(temp.size(),1);\r\n    for(int i = 0;i<temp.size();i++){\r\n        for(int j = 0;j<i;j++){\r\n            if(temp[j] <= temp[i]){\r\n                dp[i] = max(dp[i],dp[j] + 1);\r\n            }\r\n        }\r\n    }\r\n    // debug(dp);\r\n    return dp[temp.size() - 1];\r\n}\r\nconst int MAXA = 305;\r\nvoid solve(){\r\n    ll n,T;cin>>n>>T;\r\n    T--;\r\n    vector<ll> v(n);\r\n    for(int i = 0;i<n;i++)cin>>v[i];\r\n    vector<ll> *edges = new vector<ll>[MAXA];\r\n    for(int i = 0;i<n;i++){\r\n        for(int j = 0;j<n;j++){\r\n            if(v[j] <= v[i]){\r\n                edges[i].push_back(j);\r\n            }\r\n        }\r\n    }\r\n    \r\n    vector<ll> twice = v;\r\n    for(int i = 0;i<n;i++)twice.push_back(v[i]);\r\n    vector<vector<ll>> mat(2*n,vector<ll>(2*n));\r\n    for(int j = 0;j<2*n;j++){\r\n        for(int i = 0;i<j;i++){\r\n            mat[i][j] =  lis(i,j,twice);\r\n        }\r\n    }\r\n    vector<ll> dp(n,1);\r\n    for(int i = 0;i<n;i++){\r\n        for(int j = 0;j<i;j++){\r\n            if(v[j] <= v[i]){\r\n                dp[i] = max(dp[i],dp[j] + 1);\r\n            }\r\n        }\r\n    }\r\n    //debug(lis(1,4,twice));\r\n    Matrix single(n);\r\n    //for(int rep = 0;rep<T;rep++){\r\n        //vector<ll> new_dp(n,0);\r\n        for(int i = 0;i<n;i++){\r\n            for(auto j:edges[i]){\r\n                //debug(make_pair(j,i+n));\r\n                //debug(dp[j]);\r\n                //debug(mat[j][n+i]);\r\n                //new_dp[i] = max(new_dp[i],dp[j] + mat[j][n + i] - 1);\r\n                single.a[j][i] = mat[j][n+i] - 1;\r\n            }\r\n        }\r\n        //dp = new_dp; \r\n    //}\r\n    debug(dp);\r\n\r\n    Matrix answer = expo_power(single,T);\r\n    ll out = 1;\r\n    out = max(out,*max_element(dp.begin(),dp.end()));\r\n    for(int i = 0;i<n;i++){\r\n        for(int j = 0;j<n;j++){\r\n            // cout<<answer.a[i][j]<<\" \";\r\n            out = max(out,answer.a[i][j]);\r\n        }\r\n        //cout<<nline;\r\n    } \r\n    cout<<out;\r\n\r\n    \r\n\r\n}\r\nint main()\r\n{\r\n \r\n   fastio(); \r\n   int t = 1;\r\n   //calFact();\r\n   //cin>>t;\r\n   //sieve();\r\n   int testCase = 0;\r\n   while(testCase++ < t){\r\n      //google(testCase);\r\n      solve();\r\n      //cout<<nline;\r\n   }\r\n} \r\n"
}