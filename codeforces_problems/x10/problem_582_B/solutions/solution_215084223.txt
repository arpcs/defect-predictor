{
    "id": 215084223,
    "contestId": 582,
    "creationTimeSeconds": 1690048189,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 582,
        "index": "B",
        "name": "Once Again...",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "dp",
            "matrices"
        ]
    },
    "author": {
        "contestId": 582,
        "members": [
            {
                "handle": "skywalkerr."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1443890700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 48,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4096000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std ;\r\n\r\n#define ll long long\r\n#define rep(i, a, b) for (int i = (a) ; i <= (b) ; i++)\r\n#define per(i, b, a) for (int i = (b) ; i >= (a) ; i--)\r\n\r\ntemplate<class T>\r\nbool mmin(T& x, T y) {\r\n    return ((x > y) ? x = y , 1  : 0) ;\r\n}\r\ntemplate<class T>\r\nbool mmax(T& x, T y) {\r\n    return ((x < y) ? x = y , 1  : 0) ;\r\n}\r\n\r\nconst int N = 1e6 + 100  , M = 600 ;\r\n\r\nint n, a[N] , T , tree[M * 4] ;\r\n\r\nvoid upd(int i , int x , int v = 1 , int tl = 1 , int tr = 500) {\r\n    if (tl == tr) {\r\n        tree[v] = x ;\r\n    } else {\r\n        int tm = (tl + tr) / 2 ;\r\n        if (i <= tm) {\r\n            upd(i,x,v*2,tl,tm) ;\r\n        } else {\r\n            upd(i,x,v*2+1,tm+1,tr) ;\r\n        }\r\n        tree[v] = max(tree[v * 2] , tree[v * 2 + 1]) ;\r\n    }\r\n}\r\n\r\nint get(int i , int v = 1 , int tl = 1 , int tr = 500) {\r\n    if (1 > tr || i < tl) return 0 ;\r\n    if (1 <= tl && tr <= i) return tree[v] ;\r\n    int tm = (tl + tr) / 2 ;\r\n    return max(get(i,v*2,tl,tm) , get(i,v*2+1,tm+1,tr)) ;\r\n}\r\n\r\nint calc(int len) {\r\n    vector<int> dp(len + 1, 1) ;\r\n    rep(i, 1, 2000) tree[i] = 0 ;\r\n    int ans = 0 ;\r\n    rep(i, 1, len) {\r\n        mmax(dp[i] , get(a[i]) + 1) ;\r\n        upd(a[i] , dp[i]) ;\r\n        mmax(ans, dp[i]) ;\r\n    }\r\n    return ans ;\r\n}\r\n\r\nvoid solve() {\r\n    cin >> n >> T ;\r\n    rep(i, 1, n) cin >> a[i] ;\r\n    rep(i, n + 1, n * (n + 1)) a[i] = a[i - n] ;\r\n    if (T <= n) {\r\n        cout << calc(T * n) ;\r\n    } else {\r\n        T -= n ;\r\n        ll val = calc(n * n) ;\r\n        ll diff = calc(n * (n + 1)) - val ;\r\n        val += (1ll * T * diff) ;\r\n        cout << val << \"\\n\" ;\r\n    }\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false) ;\r\n    cin.tie(0) ;\r\n    #ifndef LOCAL\r\n    //freopen(\"title.txt\", \"r\", stdin) ;\r\n\t//freopen(\"title.txt\", \"w\", stdout) ;\r\n    #endif\r\n\tint t = 1 ;\r\n    //cin >> t;\r\n\twhile (t--) solve();\r\n\r\n\treturn 0;\r\n}\r\n"
}