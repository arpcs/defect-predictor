{
    "id": 225083726,
    "contestId": 1108,
    "creationTimeSeconds": 1695648173,
    "relativeTimeSeconds": 4973,
    "problem": {
        "contestId": 1108,
        "index": "E2",
        "name": "Array and Segments (Hard version)",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1108,
        "members": [
            {
                "handle": "Once_I_Liked_AGirl"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1695643200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 8192000,
    "source": "//#pragma GCC optimize (\"Ofast,unroll-loops\")\r\n//#pragma GCC target (\"avx2\")\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define notall(x) x.begin()+1,x.end()\r\n#define all(x) x.begin(),x.end()\r\n#define mul_t int _t;cin>>_t;while(_t--)\r\nconst int int_inf = 1000000100;\r\nconst ll ll_inf = 1000000000000000100;\r\n//writers\r\ntemplate<class T>\r\nvoid writeln(const T &t) {\r\n    cout << t << '\\n';\r\n}\r\ntemplate<class T, class...args>\r\nvoid writeln(const T &t, const args &...rest) {\r\n    cout << t << ' ';\r\n    writeln(rest...);\r\n}\r\ntemplate<class T1>\r\nvoid writeln(const vector<T1> &v) {\r\n    for (auto c : v)\r\n        cout << c << ' ';\r\n    cout << ' ' << '\\n';\r\n}\r\ntemplate<class T1, class T2>\r\nvoid writeln(const vector<T1> &v, T2 n) {\r\n    for (T2 i = 1; i <= n; i++)\r\n        cout << v[i] << ' ';\r\n    cout << ' ' << '\\n';\r\n}\r\ntemplate<class T1, class T2>\r\nvoid writeln(const pair<T1, T2> p) {\r\n    cout << p.first << ' ' << p.second << ' ' << '\\n';\r\n}\r\n\r\n#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\n\r\nstruct Node {\r\n    int max_val;\r\n    int min_val;\r\n    int lazy;\r\n\r\n    Node() : max_val(0), min_val(0), lazy(0) {}\r\n};\r\n\r\nclass SegmentTree {\r\nprivate:\r\n    vector<Node> tree;\r\n    vector<int> arr;\r\n\r\n    void build(int node, int start, int end) {\r\n        if (start == end) {\r\n            tree[node].max_val = arr[start];\r\n            tree[node].min_val = arr[start];\r\n            return;\r\n        }\r\n\r\n        int mid = (start + end) / 2;\r\n        build(2 * node, start, mid);\r\n        build(2 * node + 1, mid + 1, end);\r\n\r\n        tree[node].max_val = max(tree[2 * node].max_val, tree[2 * node + 1].max_val);\r\n        tree[node].min_val = min(tree[2 * node].min_val, tree[2 * node + 1].min_val);\r\n    }\r\n\r\n    void update(int node, int start, int end, int left, int right, int val) {\r\n        if (tree[node].lazy != 0) {\r\n            tree[node].max_val += tree[node].lazy;\r\n            tree[node].min_val += tree[node].lazy;\r\n\r\n            if (start != end) {\r\n                tree[2 * node].lazy += tree[node].lazy;\r\n                tree[2 * node + 1].lazy += tree[node].lazy;\r\n            }\r\n\r\n            tree[node].lazy = 0;\r\n        }\r\n\r\n        if (start > right || end < left) return;\r\n\r\n        if (start >= left && end <= right) {\r\n            tree[node].max_val += val;\r\n            tree[node].min_val += val;\r\n\r\n            if (start != end) {\r\n                tree[2 * node].lazy += val;\r\n                tree[2 * node + 1].lazy += val;\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        int mid = (start + end) / 2;\r\n        update(2 * node, start, mid, left, right, val);\r\n        update(2 * node + 1, mid + 1, end, left, right, val);\r\n\r\n        tree[node].max_val = max(tree[2 * node].max_val, tree[2 * node + 1].max_val);\r\n        tree[node].min_val = min(tree[2 * node].min_val, tree[2 * node + 1].min_val);\r\n    }\r\n\r\n    int queryMax(int node, int start, int end, int left, int right) {\r\n        if (start > right || end < left) return INT_MIN;\r\n\r\n        if (tree[node].lazy != 0) {\r\n            tree[node].max_val += tree[node].lazy;\r\n            tree[node].min_val += tree[node].lazy;\r\n\r\n            if (start != end) {\r\n                tree[2 * node].lazy += tree[node].lazy;\r\n                tree[2 * node + 1].lazy += tree[node].lazy;\r\n            }\r\n\r\n            tree[node].lazy = 0;\r\n        }\r\n\r\n        if (start >= left && end <= right) return tree[node].max_val;\r\n\r\n        int mid = (start + end) / 2;\r\n        int left_max = queryMax(2 * node, start, mid, left, right);\r\n        int right_max = queryMax(2 * node + 1, mid + 1, end, left, right);\r\n\r\n        return max(left_max, right_max);\r\n    }\r\n\r\n    int queryMin(int node, int start, int end, int left, int right) {\r\n        if (start > right || end < left) return INT_MAX;\r\n\r\n        if (tree[node].lazy != 0) {\r\n            tree[node].max_val += tree[node].lazy;\r\n            tree[node].min_val += tree[node].lazy;\r\n\r\n            if (start != end) {\r\n                tree[2 * node].lazy += tree[node].lazy;\r\n                tree[2 * node + 1].lazy += tree[node].lazy;\r\n            }\r\n\r\n            tree[node].lazy = 0;\r\n        }\r\n\r\n        if (start >= left && end <= right) return tree[node].min_val;\r\n\r\n        int mid = (start + end) / 2;\r\n        int left_min = queryMin(2 * node, start, mid, left, right);\r\n        int right_min = queryMin(2 * node + 1, mid + 1, end, left, right);\r\n\r\n        return min(left_min, right_min);\r\n    }\r\n\r\npublic:\r\n    SegmentTree(vector<int>& input) {\r\n        int n = input.size();\r\n        arr = input;\r\n        tree.resize(4 * n);\r\n        build(1, 0, n - 1);\r\n    }\r\n\r\n    void rangeUpdate(int left, int right, int val) {\r\n        update(1, 0, arr.size() - 1, left, right, val);\r\n    }\r\n\r\n    int queryMax(int left, int right) {\r\n        return queryMax(1, 0, arr.size() - 1, left, right);\r\n    }\r\n\r\n    int queryMin(int left, int right) {\r\n        return queryMin(1, 0, arr.size() - 1, left, right);\r\n    }\r\n};\r\n\r\n// int main() {\r\n//     vector<int> arr = {1, 3, 2, 4, 5};\r\n//     SegmentTree st(arr);\r\n\r\n//     st.rangeUpdate(1, 3, 2);\r\n\r\n//     cout << \"Max in range [1, 4]: \" << st.queryMax(1, 4) << endl;\r\n//     cout << \"Min in range [1, 4]: \" << st.queryMin(1, 4) << endl;\r\n\r\n//     return 0;\r\n// }\r\n\r\nvoid solve(){\r\n    int n,m;\r\n    cin>>n>>m;\r\n    vector<int>a(n);\r\n    for(auto&c:a)cin>>c;\r\n    vector<array<int,2>>b(m);\r\n    vector<vector<array<int,2>>>st(n+1),ed(n+1);\r\n    int cnt=0;\r\n    for(auto&[l,r]:b)\r\n    {\r\n        ++cnt;\r\n        cin>>l>>r,st[l].push_back({r,cnt}),ed[r].push_back({l,cnt});\r\n    }\r\n    SegmentTree tr(a);\r\n    for(auto[l,r]:b)tr.rangeUpdate(l-1,r-1,-1);\r\n    int ans=-int_inf;\r\n    set<int>ops;\r\n    for(int i=1;i<=m;i++)ops.insert(i);\r\n    ans=tr.queryMax(0,n-1)-tr.queryMin(0,n-1);\r\n    set<int>segs=ops;\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        for(auto[r,nowid]:st[i])\r\n        {\r\n            tr.rangeUpdate(i-1,r-1,1);\r\n            segs.erase(nowid);\r\n        }\r\n        int x=tr.queryMax(0,n-1)-tr.queryMin(0,n-1);\r\n        if(x>ans)ops=segs,ans=x;\r\n        for(auto[l,nowid]:ed[i])\r\n        {\r\n            tr.rangeUpdate(l-1,i-1,-1);\r\n            segs.insert(nowid);\r\n        }\r\n    }\r\n    writeln(ans);\r\n    writeln(ops.size());\r\n    for(auto c:ops)cout<<c<<' ';\r\n}\r\n\r\nsigned main(){\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    //mul_t\r\n    solve();\r\n}"
}