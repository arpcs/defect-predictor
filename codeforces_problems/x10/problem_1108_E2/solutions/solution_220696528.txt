{
    "id": 220696528,
    "contestId": 1108,
    "creationTimeSeconds": 1693135982,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1108,
        "index": "E2",
        "name": "Array and Segments (Hard version)",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1108,
        "members": [
            {
                "handle": "stcmuyi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548254100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 106,
    "timeConsumedMillis": 311,
    "memoryConsumedBytes": 10035200,
    "source": "#include<bits/stdc++.h>\r\n#define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n//#define int long long\r\n#define endl \"\\n\"\r\n#define lb(x) ((x) & (-x))\r\nusing namespace std;\r\nconst int mod = 1e9+7;\r\nconst int maxn = 1e5+10;\r\nstruct node\r\n{\r\n    int l,r,lazy,mi,mx;\r\n}tr[maxn << 2];\r\nvoid up(int i)\r\n{\r\n    tr[i].mx = max(tr[i << 1].mx,tr[i << 1 | 1].mx);\r\n    tr[i].mi = min(tr[i << 1].mi,tr[i << 1 | 1].mi);\r\n}\r\nint a[maxn];\r\nvoid build(int i,int l,int r)\r\n{\r\n    tr[i] = {l,r,0,0,0};\r\n    if(l == r)\r\n    {\r\n        tr[i].mi = tr[i].mx = a[l];\r\n        return;\r\n    }\r\n    int mid = l+r >> 1;\r\n    build(i << 1,l,mid); build(i << 1 | 1,mid+1,r);\r\n    up(i);\r\n}\r\nvoid ph(node &a,int c)\r\n{\r\n    a.lazy += c;\r\n    a.mi += c;\r\n    a.mx += c;\r\n}\r\nvoid down(int i)\r\n{\r\n    if(tr[i].lazy)\r\n    {\r\n        ph(tr[i << 1],tr[i].lazy);\r\n        ph(tr[i << 1 | 1],tr[i].lazy);\r\n        tr[i].lazy = 0;\r\n    }\r\n}\r\nvoid add(int i,int l,int r,int c)\r\n{\r\n    if(l <= tr[i].l && r >= tr[i].r)\r\n    {\r\n        ph(tr[i],c);\r\n        return;\r\n    }\r\n    down(i);\r\n    int mid = tr[i].l+tr[i].r >> 1;\r\n    if(l <= mid) add(i << 1,l,r,c);\r\n    if(r > mid) add(i << 1 | 1,l,r,c);\r\n    up(i);\r\n}\r\nint qy(int i,int k)\r\n{\r\n    if(tr[i].l == tr[i].r) return tr[i].mi;\r\n    int mid = tr[i].l+tr[i].r >> 1;\r\n    if(k <= mid) return qy(i << 1,k);\r\n    else return qy(i << 1 | 1,k);\r\n}\r\nsigned main()\r\n{\r\n    IOS;\r\n    int n,m; cin >> n >> m;\r\n    vector<int> b(n+2);\r\n    for(int i = 1; i <= n; ++i ) cin >> a[i];\r\n    build(1,1,n);\r\n    vector<pair<int,int> > v(m+1);\r\n    for(int i = 1; i <= m; ++i) cin >> v[i].first >> v[i].second;\r\n    vector<vector<int> > w;\r\n    for(int i = 1; i <= n; ++i)\r\n    {\r\n        vector<int> g;\r\n        for(int j = 1; j <= m; ++j)\r\n        {\r\n            if(v[j].first <= i && v[j].second >= i) continue;\r\n            g.push_back(j);\r\n        }\r\n        if(w.size() == 0 || w.back() != g) w.push_back(g);\r\n    }\r\n    int mx = 0,id = 0;\r\n    for(int i = 0; i < w.size(); ++i)\r\n    {\r\n        for(int &x : w[i]) add(1,v[x].first,v[x].second,-1);\r\n        if(tr[1].mx-tr[1].mi > mx)\r\n        {\r\n            mx = tr[1].mx-tr[1].mi;\r\n            id = i;\r\n        }\r\n        for(int &x : w[i]) add(1,v[x].first,v[x].second,1);\r\n    }\r\n\r\n    cout << mx << endl;\r\n    cout << w[id].size() << endl;\r\n    for(int &x : w[id]) cout << x << ' ';\r\n    cout << endl;\r\n    return 0;\r\n}\r\n"
}