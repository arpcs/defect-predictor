{
    "id": 227330348,
    "contestId": 911,
    "creationTimeSeconds": 1696857811,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 911,
        "index": "F",
        "name": "Tree Destruction",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 911,
        "members": [
            {
                "handle": "luohanning"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1514469900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 28979200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntemplate <typename T> inline void read(T &x){\r\n\tstatic char c; static bool f; f = false, x = 0;\r\n\tfor (; c > 57 || c < 48; c = getchar()) f |= c == '-';\r\n\tfor (; c >= 48 && c <= 57; c = getchar()) x = (x << 1) + (x << 3) + (c ^ 48);\r\n\tif (f) x = -x;\r\n}\r\ntemplate <typename T, typename ...Args> inline void read(T &x, Args &...args){\r\n\tread(x), read(args...);\r\n}\r\n\r\nconst int N = 2e5 + 5;\r\nint n;\r\nvector <int> e[N];\r\nint dep[N], prt[N][18], flag[N];\r\nint p1, p2, cnt, dist;\r\nstruct Answer{\r\n\tint x, y, z;\r\n}ans[N];\r\n\r\nint Lca(int u, int v){\r\n\tif(dep[u] < dep[v]) swap(u, v);\r\n\tfor (int i = 17; ~i; i--) if(dep[prt[u][i]] >= dep[v]) u = prt[u][i];\r\n\tif(u == v) return u;\r\n\tfor (int i = 17; ~i; i--) if(prt[u][i] != prt[v][i]) u = prt[u][i], v = prt[v][i];\r\n\treturn prt[u][0];\r\n}\r\n\r\nint getdis(int u, int v){\r\n\treturn dep[u] + dep[v] - 2 * dep[Lca(u, v)];\r\n}\r\n\r\nvoid dfs(int u, int fa){\r\n\tprt[u][0] = fa;\r\n\tfor (int i = 1; i <= 17; i++) prt[u][i] = prt[prt[u][i - 1]][i - 1];\r\n\tfor (auto v : e[u]) if(v != fa){\r\n\t\tdep[v] = dep[u] + 1;\r\n\t\tdfs(v, u);\r\n\t}\r\n}\r\n\r\nvoid solve(int u, int fa, int goal){\r\n\tif(flag[fa] && fa){\r\n\t\tif(getdis(u, p1) > getdis(u, p2)) goal = p1;\r\n\t\telse goal = p2;\r\n\t}\r\n\tif(flag[u]) goal = 0;\r\n\tfor (auto v : e[u]) if(v != fa){\r\n\t\tsolve(v, u, goal);\r\n\t}\r\n\tif(!flag[u]){\r\n//\t\tcout << u << \" \" << goal << \"\\n\";\r\n\t\tans[++cnt] = (Answer) {goal, u, u};\r\n\t\tdist += getdis(u, goal);\r\n\t}\r\n}\r\n\r\nsigned main()\r\n{\r\n\tread(n);\r\n\tfor (int i = 1, x, y; i < n; i++){\r\n\t\tread(x), read(y);\r\n\t\te[x].emplace_back(y);\r\n\t\te[y].emplace_back(x);\r\n\t}\r\n\t\r\n\tdfs(1, 0);\r\n\tfor (int i = 1; i <= n; i++) if(dep[i] > dep[p1]) p1 = i;\r\n\tdep[p1] = 0;\r\n\tmemset(prt, 0, sizeof(prt));\r\n\tdfs(p1, 0);\r\n\tfor (int i = 1; i <= n; i++) if(dep[i] > dep[p2]) p2 = i;\r\n\tint p = p2;\r\n\twhile(p){\r\n\t\tflag[p] = 1;\r\n\t\tp = prt[p][0];\r\n\t}\r\n\r\n\tsolve(p1, 0, 0);\r\n\t\r\n\tp = p2;\r\n\twhile(p){\r\n\t\tans[++cnt] = (Answer) {p1, p, p}; \r\n\t\tdist += getdis(p1, p);\r\n\t\tp = prt[p][0];\r\n\t}\r\n\t\r\n\tcout << dist << \"\\n\";\r\n\tfor (int i = 1; i < n; i++){\r\n\t\tcout << ans[i].x << \" \" << ans[i].y << \" \" << ans[i].z << \"\\n\"; \r\n\t}\r\n\t\t\r\n\treturn 0;\r\n}\r\n"
}