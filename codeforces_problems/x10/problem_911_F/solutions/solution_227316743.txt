{
    "id": 227316743,
    "contestId": 911,
    "creationTimeSeconds": 1696852421,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 911,
        "index": "F",
        "name": "Tree Destruction",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "graphs",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 911,
        "members": [
            {
                "handle": "sunkuangzheng"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1514469900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 93,
    "timeConsumedMillis": 327,
    "memoryConsumedBytes": 78848000,
    "source": "// LUOGU_RID: 128450669\n/**\r\n *    author: sunkuangzheng\r\n *    created: 09.10.2023 18:48:12\r\n**/\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define int long long\r\nconst int maxn = 5e5+5;\r\nint t,n,dep[maxn],dep2[maxn],fa[maxn],u,v,ff[maxn],vis[maxn],rt,sb,bs,d[maxn],dg[maxn],res1,res2;vector<int> g[maxn];\r\nvector<tuple<int,int,int>> ans1,ans2,ans;\r\nvoid dfs(int u,int fat,int &p,int *dep,int *fa){\r\n    fa[u] = fat,dep[u] = dep[fat] + 1;if(dep[u] > dep[p]) p = u;\r\n    for(int v : g[u]) if(v != fat) dfs(v,u,p,dep,fa);\r\n}int calc(vector<tuple<int,int,int>> &res){\r\n    int sm = sb,ms = sb,ans = 0;\r\n    for(int i = 1;i <= n;i ++) dg[i] = d[i] - (i != rt);queue<int> q;\r\n    for(int i = 1;i <= n;i ++) if(!dg[i] && i != sb) q.push(i);\r\n    while(q.size()){\r\n        int u = q.front();q.pop();\r\n        ans += max(dep[u],dep2[u]),res.emplace_back((dep[u] > dep2[u] ? rt : sb),u,u);\r\n        dg[fa[u]] --;if(!dg[fa[u]]) q.push(fa[u]);\r\n    }while(ms != rt) ans += dep[ms],res.emplace_back(rt,ms,ms),ms = fa[ms];\r\n    return ans;\r\n}signed main(){\r\n    ios::sync_with_stdio(0),cin.tie(0);\r\n    cin >> n,dep[0] = dep2[0] = -1;\r\n    for(int i = 1;i < n;i ++) cin >> u >> v,g[u].push_back(v),g[v].push_back(u),d[u] ++,d[v] ++;\r\n    dfs(1,0,rt,dep,fa),dfs(rt,0,sb,dep,fa),dfs(sb,0,bs,dep2,ff);\r\n    cout << calc(ans) << \"\\n\";\r\n    for(auto [u,v,w] : ans) if(u != v) cout << u << \" \" << v << \" \" << w << \"\\n\";\r\n}"
}