{
    "id": 197426676,
    "contestId": 1271,
    "creationTimeSeconds": 1678820426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1271,
        "index": "B",
        "name": "Blocks",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1300,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 1271,
        "members": [
            {
                "handle": "flexr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1576401300
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 1740800,
    "source": "import sys, math, itertools, functools, collections\r\ninput = sys.stdin.readline\r\n#sys.setrecursionlimit(10**6)\r\n\r\nrs  = lambda: input().strip()\r\nri  = lambda: int(input())\r\nrmi  = lambda: map(int, input().split())\r\nra = lambda: [int(x) for x in input().split()]\r\npa = lambda x: print (\" \".join(map(str, x)))\r\n\r\ntest_case = 1\r\n\r\n#-------- DIFFERENT WAYS TO UNSTUCK ------------ \r\n# 1. Frequency/Value domain and Pigeon Hole Principle \r\n# 2. Search from end to start instead of start to end\r\n# 3. Prefix Suffix\r\n# 4. Brute force if small input size\r\n\r\ndef solve():\r\n    L = list(s)\r\n    S = []\r\n    S1 = []\r\n    for c in L:\r\n        if c == 'W':\r\n            S.append(1)\r\n            S1.append(1)\r\n        else:\r\n            S.append(0)\r\n            S1.append(0)\r\n    \r\n    #print(S)\r\n    ans = []\r\n    ans1 = []\r\n    step = 0\r\n    step1 = 0\r\n    i = 0\r\n    \r\n    while i < len(S) - 1:\r\n        if (S[i] == 0 and S[i+1] == 1) or (S[i] == 0 and S[i+1] == 0):\r\n            S[i] ^= 1\r\n            S[i+1] ^= 1\r\n            ans.append(i+1)\r\n            step += 1\r\n        i += 1\r\n\r\n    if S.count(1) == n:\r\n        return step, ans\r\n    \r\n    i = 0\r\n    while i < len(S1) - 1:\r\n        if (S1[i] == 1 and S1[i+1] == 0) or (S1[i] == 1 and S1[i+1] == 1):\r\n            S1[i] ^= 1\r\n            S1[i+1] ^= 1\r\n            ans1.append(i+1)\r\n            step1 += 1\r\n        #print(i, S1)\r\n        i += 1\r\n    #print(S, S1)\r\n    \r\n    if S1.count(0) == n:\r\n        return step1, ans1\r\n    return -1, []\r\n\r\nfor _ in range(test_case):\r\n    n = ri()\r\n    s = rs()\r\n    x, y = solve()\r\n    print(x)\r\n    print(*y)"
}