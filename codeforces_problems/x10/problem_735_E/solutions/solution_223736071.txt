{
    "id": 223736071,
    "contestId": 735,
    "creationTimeSeconds": 1694959624,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 735,
        "index": "E",
        "name": "Ostap and Tree",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 735,
        "members": [
            {
                "handle": "Poisonnnn"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1480264500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 204800,
    "source": "// LUOGU_RID: 125052371\n#include <cstdio>\r\n#include <vector>\r\n#include <cstring>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\n#define LL long long\r\n#define rep(i, j, k) for(int i = (j); i <= (k); i ++)\r\n#define per(i, j, k) for(int i = (j); i >= (k); i --)\r\n\r\nconst int Maxn = 105;\r\nconst int Mod = 1e9 + 7;\r\n\r\nint n, k;\r\nint dp[Maxn][Maxn], f[Maxn];\r\n/*\r\ndp[u][x]\r\n\u00e5\u00bd\u0093 x <= k \u00ef\u00bc\u008c\u00e8\u00a1\u00a8\u00e7\u00a4\u00bau\u00e7\u009a\u0084\u00e5\u00ad\u0090\u00e6\u00a0\u0091\u00e9\u0087\u008c\u00e6\u009c\u0080\u00e8\u00bf\u0091\u00e7\u009a\u0084\u00e6\u009f\u0093\u00e8\u0089\u00b2\u00e7\u0082\u00b9\u00e8\u00b7\u009d\u00e7\u00a6\u00bb\u00e4\u00b8\u00bax\r\n\u00e5\u00bd\u0093 k < x <= 2k \u00ef\u00bc\u008c \u00e8\u00a1\u00a8\u00e7\u00a4\u00bau\u00e7\u009a\u0084\u00e5\u00ad\u0090\u00e6\u00a0\u0091\u00e4\u00b8\u008d\u00e7\u00ac\u00a6\u00e5\u0090\u0088\u00e8\u00a6\u0081\u00e6\u00b1\u0082\u00ef\u00bc\u008c\u00e4\u00b8\u0094\u00e6\u009c\u0080\u00e8\u00bf\u009c\u00e7\u009a\u0084\u00e9\u009d\u009e\u00e6\u00b3\u0095\u00e7\u009a\u0084\u00e7\u0082\u00b9\u00e8\u00b7\u009d\u00e7\u00a6\u00bb\u00e4\u00b8\u00bax\r\n*/\r\n\r\nvector < int > g[Maxn];\r\n\r\nvoid Add (int &x, int y) {\r\n    (x += y) >= Mod ? x - Mod : x;\r\n}\r\n\r\nvoid DP (int u, int pre) {\r\n    // printf (\"----\\n\");\r\n    dp[u][0] = dp[u][k + 1] = 1;\r\n    for (int v : g[u]) {\r\n        if (v == pre) continue;\r\n        DP (v, u);\r\n        memset (f, 0, sizeof f);\r\n        rep (i, 0, k * 2) {\r\n            rep (j, 0, k * 2) {\r\n                int tmp = i + j <= k * 2 ? min (i, j + 1) : max (i, j + 1);\r\n                Add (f[tmp], (LL) dp[u][i] * dp[v][j] % Mod);\r\n                // printf (\"%d : %d\\n\", tmp, f[tmp]);\r\n            }\r\n        }\r\n        memcpy (dp[u], f, sizeof f);\r\n    }\r\n}\r\n\r\nint main () {\r\n    // freopen (\"code.in\", \"r\", stdin);\r\n    // freopen (\"code.out\", \"w\", stdout);\r\n    scanf (\"%d %d\", &n, &k);\r\n\r\n    rep (i, 1, n - 1) {\r\n        int u, v;\r\n        scanf (\"%d %d\", &u, &v);\r\n        g[u].push_back (v);\r\n        g[v].push_back (u);\r\n    }\r\n\r\n    DP (1, 0);\r\n    \r\n    int ans = 0;\r\n    rep (i, 0, k) {\r\n        Add (ans, dp[1][i]);\r\n    }\r\n\r\n    printf (\"%d\", ans);\r\n    return 0;\r\n}"
}