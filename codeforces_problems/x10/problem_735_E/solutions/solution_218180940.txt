{
    "id": 218180940,
    "contestId": 735,
    "creationTimeSeconds": 1691679460,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 735,
        "index": "E",
        "name": "Ostap and Tree",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2500,
        "tags": [
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 735,
        "members": [
            {
                "handle": "suhaoxiangg"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1480264500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "// LUOGU_RID: 120164106\n#include<bits/stdc++.h>\r\n#define int long long\r\n#define Tree(x) for (int i = head[x]; i; i = edge[i].nxt) { int y = edge[i].to; if (y == fa) continue;\r\nusing namespace std;\r\nint read() {\r\n\tint res = 0;\r\n\tbool flag = 1;\r\n\tchar ch = getchar();\r\n\tfor (; ch > '9' or ch < '0'; ch = getchar())\r\n\t\tif (ch == '-')\r\n\t\t\tflag = 0;\r\n\tfor (; ch >= '0' and ch <= '9'; ch = getchar())\r\n\t\tres = (res << 1) + (res << 3) + ch - 48;\r\n\treturn flag ? res : ~ res + 1;\r\n}\r\nconst int N = 120, K = 50, mod = 1e9 + 7;\r\nint n, k, f[N][K], t[K], tot, x, y, head[N], ans;\r\nstruct node {\r\n\tint to, nxt;\t\r\n}edge[2 * N];\r\nvoid add(int x, int y) {\r\n\tedge[++tot] = {y, head[x]};\r\n\thead[x] = tot;\t\r\n}\r\nvoid dfs(int x, int fa) {\r\n\tf[x][0] = f[x][k + 1] = 1;\r\n\tTree(x)\r\n\t\tdfs(y, x);\r\n\t\tfor (int i = 0; i <= 2 * k; i++)\r\n\t\t\tt[i] = 0;\r\n\t\tfor (int i = 0; i <= 2 * k; i++)\r\n\t\t\tfor (int j = 0; j <= 2 * k; j++) {\r\n\t\t\t\tint tmp = (i + j <= 2 * k) ? min(i, j + 1) : max(i,j + 1);\r\n\t\t\t\tt[tmp] = (t[tmp] + f[x][i] * f[y][j] % mod) % mod;\r\n\t\t\t}\r\n\t\tfor (int i = 0; i <= 2 * k; i++)\r\n\t\t\tf[x][i] = t[i];\r\n\t}\r\n}\r\nsigned main() {\r\n\tn = read();\r\n\tk = read();\r\n\tfor (int i = 1; i < n; i++) {\r\n\t\tx = read();\r\n\t\ty = read();\r\n\t\tadd(x, y);\r\n\t\tadd(y, x);\t\r\n\t}\r\n\tdfs(1, 0);\r\n\tfor (int i = 0; i <= k; i++)\r\n\t\tans = (ans + f[1][i]) % mod;\r\n\tprintf(\"%lld\\n\", ans);\r\n\treturn 0;\r\n}"
}