{
    "id": 227626458,
    "contestId": 762,
    "creationTimeSeconds": 1697004465,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 762,
        "index": "E",
        "name": "Radio stations",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 762,
        "members": [
            {
                "handle": "uraqt"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1485354900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 69,
    "timeConsumedMillis": 639,
    "memoryConsumedBytes": 9011200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ii = pair<int, int>;\r\n \r\n#define foru(i, l, r) for(int i=(l); i<=(r); ++i)\r\n#define ford(i, l, r) for(int i=(l); i>=(r); --i)\r\n#define fore(x, v) for(auto &x : v)\r\n#define all(x) (x).begin(), (x).end()\r\n#define sz(x) (int)(x).size()\r\n\r\nvoid setIO() {\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0); cout.tie(0);\r\n\r\n  if (fopen(\"input.inp\", \"r\")) {\r\n    freopen(\"input.inp\", \"r\", stdin);\r\n    freopen(\"input.out\", \"w\", stdout);\r\n  }\r\n}\r\n\r\nconst int N = 1e5+5, F = 1e4+4;\r\nint n, m, k, bit[2][N];\r\nint px[N], pr[N], pf[N];\r\nvector<ii> freqs[F]; \r\nvector<int> cord;\r\nll ans, local;\r\n\r\nvoid modify(int t, int x, int v) {\r\n  int i = upper_bound(all(cord), x) - cord.begin();\r\n  for(; i<=m; i+=i&-i) {\r\n    bit[t][i] += v;\r\n  }\r\n}\r\n\r\nint query(int t, int x, int y) {\r\n  int l = lower_bound(all(cord), x) - cord.begin() + 1;\r\n  int r = upper_bound(all(cord), y) - cord.begin();\r\n  int ans = 0;\r\n  for(--l; l>0; l-=l&-l) ans -= bit[t][l];\r\n  for(; r>0; r-=r&-r) ans += bit[t][r];\r\n  return ans;\r\n}\r\n\r\nint main() {\r\n  setIO();\r\n\r\n  cin >> n >> k;\r\n  foru(i, 1, n) {\r\n    cin >> px[i] >> pr[i] >> pf[i];\r\n    cord.push_back(px[i]);\r\n    freqs[pf[i]].emplace_back(-pr[i], i);\r\n  }\r\n\r\n  sort(all(cord));\r\n  cord.resize(unique(all(cord)) - cord.begin());\r\n  m = sz(cord);\r\n\r\n  set<ii> hold;\r\n  foru(i, 1, 10000) {\r\n    local = 0;\r\n\r\n    if (!freqs[i].empty()) {\r\n      fore(x, freqs[i]) {\r\n        hold.insert(x);\r\n      }\r\n\r\n      fore(x, hold) {\r\n        if (pf[x.second] == i) {\r\n          local += query(0, px[x.second] + x.first, px[x.second] - x.first);\r\n          local += query(1, px[x.second] + x.first, px[x.second] - x.first);\r\n          modify(1, px[x.second], 1);\r\n        }\r\n        else {\r\n          local += query(1, px[x.second] + x.first, px[x.second] - x.first);\r\n          modify(0, px[x.second], 1);\r\n        }\r\n      }\r\n\r\n      fore(x, hold) {\r\n        if (pf[x.second] == i) modify(1, px[x.second], -1);\r\n        else modify(0, px[x.second], -1);\r\n      }\r\n    }\r\n\r\n    if (i >= k+1) {\r\n      fore(x, freqs[i-k])\r\n        hold.erase(x);\r\n    }\r\n\r\n    ans += local;\r\n  }\r\n\r\n  cout << ans;\r\n}"
}