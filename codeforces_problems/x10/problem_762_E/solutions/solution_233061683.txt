{
    "id": 233061683,
    "contestId": 762,
    "creationTimeSeconds": 1700211773,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 762,
        "index": "E",
        "name": "Radio stations",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "binary search",
            "data structures"
        ]
    },
    "author": {
        "contestId": 762,
        "members": [
            {
                "handle": "lsj2009"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1485354900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 60,
    "timeConsumedMillis": 1777,
    "memoryConsumedBytes": 266035200,
    "source": "// LUOGU_RID: 135555845\n//111\r\n#include<bits/stdc++.h> //let me pass it , please/kel\r\n#pragma GCC optimize(2)\r\nusing namespace std;\r\nconst int N=3e5+1,M=1e5+1;\r\nint t[N],l[M],r[M],p[M],len;\r\ninline int get_id(int x) {\r\n\treturn lower_bound(t+1,t+len+1,x)-t;\r\n}\r\nstruct node {\r\n\tint x,r,val;\r\n\tbool operator < (const node &tmp) const {\r\n\t\treturn val<tmp.val;\r\n\t}\r\n}; node a[M];\r\nstruct BITANDSGT {\r\n\tstruct node {\r\n\t\tint lson,rson,val;\r\n\t}; node tree[N/10*336];\r\n\tint p;\r\n\tstack<int> s;\r\n\tinline int new_node() {\r\n\t\tif(!s.empty()) {\r\n\t\t\tint tmp=s.top(); s.pop(); tree[tmp]={0,0,0}; return tmp;\r\n\t\t}\r\n\t\treturn ++p;\r\n\t}\r\n\tinline void del_node(int &k) {\r\n\t\ts.push(k); k=0;\r\n\t}\r\n\tvoid update_sub(int &k,const int& l,const int& r,const int& qx,const int& val) {\r\n\t\tif(!k)\r\n\t\t\tk=new_node();\r\n\t\ttree[k].val+=val;\r\n\t\tif(l==r)\r\n\t\t\treturn;\r\n\t\tint mid=(l+r)>>1;\r\n\t\tif(qx<=mid)\r\n\t\t\tupdate_sub(tree[k].lson,l,mid,qx,val);\r\n\t\tif(qx>=mid+1)\r\n\t\t\tupdate_sub(tree[k].rson,mid+1,r,qx,val);\r\n\t\tif(tree[k].val==0)\r\n\t\t\tdel_node(k);\r\n\t}\r\n\tint query_sub(const int& k,const int& l,const int& r,const int& ql,const int& qr) {\r\n\t\tif(!tree[k].val)\r\n\t\t\treturn 0;\r\n\t\tif(ql<=l&&r<=qr)\r\n\t\t\treturn tree[k].val;\r\n\t\tint mid=(l+r)>>1,res=0;\r\n\t\tif(ql<=mid)\r\n\t\t\tres+=query_sub(tree[k].lson,l,mid,ql,qr);\r\n\t\tif(qr>=mid+1)\r\n\t\t\tres+=query_sub(tree[k].rson,mid+1,r,ql,qr);\r\n\t\treturn res;\r\n\t}\r\n\tint c[N];\r\n\tinline void update(int x,int y,int k) {\r\n\t\twhile(x<=len)\r\n\t\t\tupdate_sub(c[x],1,len,y,k),x+=x&-x;\r\n\t}\r\n\tinline int query(int x,int l,int r) {\r\n\t\tint res=0;\r\n\t\twhile(x)\r\n\t\t\tres+=query_sub(c[x],1,len,l,r),x-=x&-x;\r\n\t\treturn res;\r\n\t}\r\n\tinline int query(int xl,int xr,int l,int r) {\r\n\t\tif(xl>xr||l>r)\r\n\t\t\treturn 0;\r\n\t\treturn query(xr,l,r)-query(xl-1,l,r);\r\n\t}\r\n}; BITANDSGT T,T1;\r\nnamespace IO {\r\n\tchar Is[(1<<21)+10],Os[(1<<21)+10];\r\n\tint Ipt,Opt;\r\n\tinline char gc() {\r\n\t\tif(Ipt==1<<21)\r\n\t\t\tIpt=0;\r\n\t\tif(!Ipt)\r\n\t\t\tIs[fread(Is,1,1<<21,stdin)]=0;\r\n\t\treturn Is[Ipt++];\r\n\t}\r\n\tinline void flush() {\r\n\t\tfwrite(Os,1,Opt,stdout);\r\n\t\tOpt=0;\r\n\t}\r\n\tinline void pc(char x) {\r\n\t\tif(Opt==1<<21)\r\n\t\t\tflush();\r\n\t\tOs[Opt++]=x;\r\n\t}\r\n\tinline int read() {\r\n\t\tint x=0; char ch=gc();\r\n\t\twhile(ch<'0'||ch>'9')\r\n\t\t\tch=gc();\r\n\t\twhile(ch<='9'&&ch>='0')\r\n\t\t\tx=x*10+ch-'0',ch=gc();\r\n\t\treturn x;\r\n\t}\r\n}\r\nusing IO::read;\r\nvoid solve() {\r\n\tint n=read(),k=read();\r\n\tfor(int i=1;i<=n;++i) {\r\n\t\ta[i].x=read(); a[i].r=read(); a[i].val=read();\r\n\t\tt[++len]=a[i].x-a[i].r;\r\n\t\tt[++len]=a[i].x;\r\n\t\tt[++len]=a[i].x+a[i].r;\r\n\t}\r\n\tstable_sort(a+1,a+n+1);\r\n\tstable_sort(t+1,t+len+1);\r\n\tlen=unique(t+1,t+len+1)-t-1;\r\n\tint j=1;\r\n\tlong long res=0;\r\n\tfor(int i=1;i<=n;++i) {\r\n\t\tl[i]=get_id(a[i].x-a[i].r);\r\n\t\tp[i]=get_id(a[i].x);\r\n\t\tr[i]=get_id(a[i].x+a[i].r);\r\n\t\twhile(a[i].val-a[j].val>k) {\r\n\t\t\tT.update(p[j],r[j],-1);\r\n\t\t\tT1.update(p[j],l[j],-1);\r\n\t\t\t++j;\r\n\t\t}\r\n\t\tif(i-j<=1000) {\r\n\t\t\tfor(int k=j;k<i;++k)\r\n\t\t\t\tres+=(p[k]<=p[i]&&r[k]>=p[i]&&p[k]>=l[i])||(p[k]>=p[i]&&r[i]>=p[k]&&p[i]>=l[k]);\r\n\t\t} else\r\n\t\t\tres+=T.query(l[i],p[i]-1,p[i],len)+T1.query(p[i],r[i],1,p[i]);\r\n\t\tif(i!=n) {\r\n\t\t\tT.update(p[i],r[i],1);\r\n\t\t\tT1.update(p[i],l[i],1);\r\n\t\t}\r\n\t}\r\n\tprintf(\"%lld\\n\",res);\r\n}\r\nsigned main() {\r\n\tsolve();\r\n\treturn 0;\r\n}"
}