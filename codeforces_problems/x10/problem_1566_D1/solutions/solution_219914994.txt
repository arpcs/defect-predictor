{
    "id": 219914994,
    "contestId": 1566,
    "creationTimeSeconds": 1692709655,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1566,
        "index": "D1",
        "name": "Seating Arrangements (easy version) ",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1100,
        "tags": [
            "data structures",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1566,
        "members": [
            {
                "handle": "jeeva_24"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631457300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 0,
    "source": "// AUTHOR: JEEVA_24\r\n#include<bits/stdc++.h>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\n#define ll long long\r\n#define vvll vector<vector<ll>>\r\n#define all(v) v.begin(),v.end()\r\n#define vvc vector<vector<char>>\r\n#define vss vector<string>\r\n#define emp emplace\r\n#define pb push_back\r\n#define ff first \r\n#define dsj DisjointSet \r\n#define sz(p) p.size() \r\n#define ss second \r\n#define pf push_front\r\n#define pqmin priority_queue<ll,vll,greater<ll>>\r\n#define pqmax priority_queue<ll>\r\n#define dq deque\r\n#define setcount(n) __builtin_popcountll(n)\r\n#define llmn LONG_LONG_MIN\r\n#define llmx LONG_LONG_MAX\r\n#define umll unordered_map<ll>\r\n#define mll map<ll,ll>\r\n#define sll set<ll>\r\n#define usll unordered_set<ll>\r\n#define vll vector<ll> \r\n#define vpll vector<pair<ll,ll>> \r\n#define vvcc vector<vector<char>> \r\n#define vppl vector<pair<pll,ll>> \r\n#define pll pair<ll,ll> \r\n#define mk make_pair\r\n#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\r\n#define fr(i,a,b) for(ll i=a;i<b;++i)\r\n#define rev(i,a,b) for(ll i=a;i>=b;--i)\r\n#define tr(it,m) for(auto it:m)\r\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\r\n \r\nconst int M=1e9+7;\r\nlong long mod(long long x)\r\n{\r\nreturn ((x%M + M)%M);\r\n}\r\nlong long add(long long a, long long b)\r\n{\r\nreturn mod(mod(a)+mod(b));\r\n}\r\nlong long mul(long long a, long long b)\r\n{\r\nreturn mod(mod(a)*mod(b));\r\n}\r\n \r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nll mod_div(ll a, ll b) {a = a % M; b = b % M; return mul(a, mminvprime(b, M));}\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\nvoid print(vll& v,ll n){fr(i,0,n) cout<<v[i]<<' ';}\r\n// intersection of two points\r\npll intersect(pll p1,pll p2){return mk(max(p1.ff,p2.ff),min(p1.ss,p2.ss));}\r\n// checking the validity of a point in a grid\r\nbool valid(ll r,ll c,ll i,ll j)\r\n{\r\nreturn (i>=0&&i<r&&j>=0&&j<c);\r\n}\r\nvvll move4={{0,1},{1,0},{-1,0},{0,-1}};\r\nvvll move8={{0,1},{1,0},{-1,0},{0,-1},{1,1},{-1,-1},{1,-1},{-1,1}};\r\nll exp(ll a,ll b)\r\n{\r\nif(b==0) return 1;\r\nif(a==0||a==1) return a;\r\nll ans=exp(a,b/2);\r\nif(b%2==0) return ans*ans;\r\nreturn a*ans*ans;\r\n}\r\nvoid primefact(ll n,vll& v)\r\n{\r\nll temp=2;\r\nwhile(temp<=sqrtl(n))\r\n{\r\nwhile(n%temp==0)\r\n{\r\nn=n/temp;\r\nv.pb(temp);\r\n}\r\n++temp;\r\n}\r\nif(n>1) v.pb(n);\r\n}\r\nll power(ll x, ll y, ll p=M)\r\n{\r\nlong long res = 1;\r\nx = x % p;\r\nwhile (y > 0)\r\n{\r\nif (y & 1)\r\nres = (res * x) % p;\r\ny = (y/2);\r\nx = (x * x) % p;\r\n}\r\nreturn res;\r\n}\r\nll modInverse(ll n, ll p=M)\r\n{\r\nreturn power(n, p - 2, p);\r\n}\r\nll nCr(ll n,ll r, ll p=M)\r\n{\r\nif (n < r) return 0;\r\nif (r == 0) return 1;\r\nvll fac(n+1);\r\nfac[0] = 1;\r\nfr(i,1,n+1)\r\nfac[i] = (fac[i - 1] * i) % p;\r\nreturn (fac[n] * modInverse(fac[r], p) % p * modInverse(fac[n - r], p) % p) % p;\r\n}\r\nbool cmp(pll& p1,pll& p2)\r\n{\r\n  if(p1.ff<p2.ff) return true;\r\n  if(p1.ff==p2.ff) return p1.ss>p2.ss;\r\n  return false;\r\n}\r\n/*--------------------------------- end of template-------------------------------------*/\r\nbool solve()\r\n{\r\n ll n,m;\r\n cin>>n>>m;\r\n vpll v(n*m);\r\n fr(i,0,n*m) {cin>>v[i].ff;v[i].ss=i;}\r\n sort(all(v));\r\n ll ans=0;\r\n fr(i,0,n*m)\r\n {\r\n   // for each i we know that row mates are the ones \r\n   fr(j,i-i%m,i)\r\n   {\r\n      if(v[j].ff!=v[i].ff&&v[j].ss<v[i].ss) ans++;\r\n   }\r\n }\r\n cout<<ans<<'\\n';\r\n return true;\r\n}\r\nint main()\r\n{\r\nfastio;\r\n \r\nll T;\r\n \r\ncin>>T;\r\n \r\nwhile(T--)\r\n{\r\nbool ans=solve();\r\nif(ans)\r\n{\r\n//cout<< \r\n}\r\nelse\r\n{\r\n//cout<< \r\n}\r\n}\r\nreturn 0;\r\n}\r\n// Cool facts I know in CP: \r\n// 1. bitwise xor of numbers from 4k*(4k+1)*(4k+2)*(4k+3) is always 0\r\n// 2. numbers of 10^9 have approximelteyl 2000 ways to reprent them as a product of 2 num\r\n// 3. sum of XOR of all subsequnece in an array of len n is 2^(n-1)*(OR of all elements)\r\n// 4. reminder when x is divided by 2 power k is same as x&(1<<k-1)\r\n// 5. for any two co-prime integers m and n the greatest integer that cannot be written of form am+bn is mn-m-n\r\n// 6. distance between nodes a and b is depth(a)+depth(b)-2*depth(c) where c is lca of a and b"
}