{
    "id": 221049595,
    "contestId": 1566,
    "creationTimeSeconds": 1693377833,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1566,
        "index": "D1",
        "name": "Seating Arrangements (easy version) ",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1100,
        "tags": [
            "data structures",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1566,
        "members": [
            {
                "handle": "DeadFox"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631457300
    },
    "programmingLanguage": "Rust 2021",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 16,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 512000,
    "source": "struct Scanner<R> {\n    reader: R,\n    line: Vec<u8>,\n    ptr: usize\n\n}\n\nimpl<R: std::io::BufRead> Scanner<R> {\n    fn new(reader: R) -> Self {\n        Self{reader, line: vec![], ptr: 0}\n    }\n\n    fn scan<T: std::str::FromStr>(&mut self) -> T {\n        loop {\n            while self.ptr < self.line.len() && self.line[self.ptr].is_ascii_whitespace() {\n                self.ptr += 1;\n            }\n            if self.ptr != self.line.len() {\n                let start = self.ptr;\n                while self.ptr < self.line.len() && !self.line[self.ptr].is_ascii_whitespace() {\n                    self.ptr += 1;\n                }\n                return std::str::from_utf8(&self.line[start..self.ptr]).unwrap().parse().ok().\n                    expect(\"parse error\");\n            }\n            self.line.clear();\n            self.reader.read_until(b'\\n', &mut self.line).expect(\"read error\");\n            self.ptr = 0;\n        }\n    }\n\n}\n\nfn solve<R: std::io::BufRead, W: std::io::Write>(scanner: &mut Scanner<R>, writer: &mut W) {\n    let n: usize = scanner.scan();\n    let m: usize = scanner.scan();\n    let mut a: Vec<(usize, usize)> = (0..n * m).map(|i| (scanner.scan(), i)).collect();\n    a.sort_unstable();\n    let mut order = std::collections::BTreeMap::new();\n    for i in (0..n).rev() {\n        for j in 0..m {\n            order.entry(a[i * m + j].0).or_insert(Vec::new()).push((i, j));\n        }\n    }\n    a.sort_unstable_by(|l, r| l.1.cmp(&r.1));\n    let mut used = vec![false; n * m];\n    let mut result = 0;\n    for (a, _) in a {\n        let (i, j) = order.get_mut(&a).unwrap().pop().unwrap();\n        used[i * m + j] = true;\n        for t in 0..j {\n            if used[i * m + t] {\n                result += 1;\n            }\n        }\n    }\n    writeln!(writer, \"{}\", result).unwrap();\n}\n\nfn main() {\n    let (stdin, stdout) = (std::io::stdin(), std::io::stdout());\n    let mut writer = std::io::BufWriter::new(stdout.lock());\n    let mut scanner = Scanner::new(stdin.lock());\n    let tests: usize = scanner.scan();\n    for _ in 0..tests {\n        solve(&mut scanner, &mut writer);\n    }\n}\n"
}