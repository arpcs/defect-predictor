{
    "id": 232221623,
    "contestId": 1566,
    "creationTimeSeconds": 1699619153,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1566,
        "index": "D1",
        "name": "Seating Arrangements (easy version) ",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1100,
        "tags": [
            "data structures",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1566,
        "members": [
            {
                "handle": "sid15_30"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631457300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "// Problem: D. In Love\r\n// Contest: Codeforces - Codeforces Round 905 (Div. 3)\r\n// URL: https://codeforces.com/problemset/problem/1883/D\r\n// Memory Limit: 256 MB\r\n// Time Limit: 2000 ms\r\n// \r\n// Powered by CP Editor (https://cpeditor.org)\r\n\r\n#include<bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp> \r\n#include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\ntypedef tree<<int>, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key\r\n//For multiset change less to less_equal and for reverse order change less to greater\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef unordered_map<ll,ll> umpp;\r\ntypedef map<ll,ll> mpp;\r\ntypedef vector<pair<ll,ll>> vp;\r\ntypedef vector<ll> vl;\r\ntypedef vector<vector<ll>> vv;\r\ntypedef vector<set<ll>> vs;\r\n#define perm(p) next_permutation(p.begin(),p.end());\r\n#define rperm(p) prev_permutation(p.begin(),p.end());\r\ntypedef vector<ll> vi;\r\ntypedef vector<vector<ll>> vvi;\r\ntypedef map<ll,ll> mip;\r\nconst ll N=1e5+10;\r\nconst ll mod=1e9+7;\r\nconst ll inf=1e9+10;\r\n#define rsort(v) sort(v.rbegin(),v.rend());\r\n#define fsort(v) sort(v.begin(),v.end());\r\n#define pb(x) push_back(x);\r\n#define fastio ios_base::sync_with_stdio(false); cin.tie(NULL); \r\n#define test ll t; cin>>t; while(t--)\r\nvector<ll>g[N];\r\nvector<bool>vis(N+1,false),viss(N+1,false);\r\nvoid dfs(ll vertex)\r\n{\r\n//take action on vertex just after entering the vertex\r\nif(vis[vertex])\r\nreturn;\r\nvis[vertex]=true;\r\nfor(ll child:g[vertex])\r\n{\r\n//take action on child just after enetering the child\r\ndfs(child);\r\n//take action on child just before exitting the child\r\n}\r\n//take action on vertex just before exitting the vertex\r\n}\r\nll Binexp(ll a, ll b){\r\nif(b==0){\r\nreturn 1;\r\n}\r\nif(b%2==0){\r\n//change mod if required\r\nreturn ((Binexp(a,b/2)%mod) * (Binexp(a,b/2)%mod))%mod;\r\n}\r\nelse{\r\nreturn ((a%mod) * (Binexp(a,b/2)%mod) * (Binexp(a,b/2)%mod)%mod);\r\n}\r\n}\r\nbool is_prime(ll n){\r\nif(n==1){\r\nreturn 0;\r\n}\r\nbool b = true;\r\nfor(ll i=2;i*i<=n;i++){\r\nif(n%i==0){\r\nb = false;\r\nbreak;\r\n}\r\n}\r\nreturn b;\r\n}\r\nvector<bool> isPrime(N,1);\r\nvector<ll> lp(N,0),hp(N,0);\r\nvector<ll> prime_factors;\r\nvoid sieve(){\r\nisPrime[0]=isPrime[1]=false;\r\nfor(ll i=2;i<N;i++){\r\nif(isPrime[i]==true){\r\nlp[i]=i;\r\nhp[i]=i;\r\nfor(ll j=2*i;j<N;j += i){\r\nisPrime[j]=false;\r\nhp[j]=i;\r\nif(lp[j]==0){\r\nlp[j]=i;\r\n}\r\n}\r\n}\r\n}\r\n}\r\nvector<ll> primefactors(ll n){\r\nvector<ll> prime_factors;\r\nwhile(n>1){\r\nll prime_factor=hp[n];\r\nwhile(n%prime_factor==0){\r\nn /= prime_factor;\r\nprime_factors.push_back(prime_factor);\r\n}\r\n}\r\nreturn prime_factors;\r\n}\r\n// whenever doing modular subtraction , do it like- (x%mod-y%mod+mod)%mod\r\nint main()\r\n{\r\n\ttest\r\n\t{\r\n\t\tint n,m;\r\n\t\tcin>>n>>m;\r\n\t\tll ans=0;\r\n\t\tpbds s;\r\n\t\tfor(int i=1;i<=m;i++)\r\n\t\t{\r\n\t\t\tint x;\r\n\t\t\tcin>>x;\r\n\t\t\ts.insert(x);\r\n\t\t\tans+=s.order_of_key(x);\r\n\t\t}\r\n\t\tcout<<ans<<endl;\r\n\t}\r\n}"
}