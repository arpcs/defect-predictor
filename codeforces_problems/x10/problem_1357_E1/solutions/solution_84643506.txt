{
    "id": 84643506,
    "contestId": 1357,
    "creationTimeSeconds": 1592814486,
    "relativeTimeSeconds": 232086,
    "problem": {
        "contestId": 1357,
        "index": "E1",
        "name": "Power of quantum Fourier transform",
        "type": "PROGRAMMING",
        "tags": []
    },
    "author": {
        "contestId": 1357,
        "members": [
            {
                "handle": "amir_e"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1592582400
    },
    "programmingLanguage": "Q#",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 0,
    "source": "\ufeffnamespace Solution {\r\n\r\n    open Microsoft.Quantum.Canon;\r\n    open Microsoft.Quantum.Intrinsic;\r\n    open Microsoft.Quantum.Arithmetic;\r\n    open Microsoft.Quantum.Convert;\r\n    open Microsoft.Quantum.Math;\r\n\r\n    function GCD(a : Int, b : Int) : Int {\r\n        // Everything divides 0  \r\n       if (a == 0) {\r\n           return b; \r\n\t   }\r\n\t   if (b == 0) {\r\n           return a;\r\n\t   }\r\n   \r\n        // base case \r\n\t\tif (a == b) {\r\n            return a;\r\n\t\t}\r\n   \r\n        // a is greater \r\n        if (a > b) {\r\n            return GCD(a-b, b); \r\n\t\t}\r\n\r\n        return GCD(a, b-a);\r\n\t}\r\n\r\n    operation Solve (p : Int, inputRegister : LittleEndian) : Unit is Adj+Ctl {\r\n        body (...) {\r\n            let n = Length(inputRegister!);\r\n            let N = PowI(2, n);\r\n\r\n            let gcd = GCD(n - 1, N);\r\n            //Message($\"GCD = {gcd}\");\r\n\r\n            let pReduced = p % N / gcd;\r\n            //let pReduced = p % Length(inputRegister!);\r\n            let qftP = OperationPowCA(QFTLE, pReduced);\r\n            qftP(inputRegister);\r\n            //for (i in 1..pReduced) {\r\n                //QFTLE(inputRegister);\r\n\t\t\t//}\r\n        }\r\n\r\n        //controlled (controls, ...) {\r\n            //let qftCP = OperationPow(Controlled QFTLE, p);\r\n            //qftCP(controls, inputRegister);\r\n\t\t//}\r\n\r\n        //adjoint {\r\n            //let qftAP = OperationPow(Adjoint QFTLE, p);\r\n            //qftAP(inputRegister);\r\n\t\t//}\r\n\r\n        //controlled adjoint (controls, ...) {\r\n            //let qftCAP = OperationPow(Controlled Adjoint QFTLE, p);\r\n            //qftCAP(controls, inputRegister);\r\n\t\t//}\r\n    }\r\n}\r\n"
}