{
    "id": 229876538,
    "contestId": 1799,
    "creationTimeSeconds": 1698328080,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1799,
        "index": "D2",
        "name": "Hot Start Up (hard version)",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dp"
        ]
    },
    "author": {
        "contestId": 1799,
        "members": [
            {
                "handle": "einekleine17"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1677508500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 498,
    "memoryConsumedBytes": 31232000,
    "source": "#include<bits/stdc++.h>\r\n\r\n\r\n#ifdef DEBUG\r\n#include \"debug.h\"\r\n#else\r\n#define debug(...) 42\r\n#endif \r\n\r\n\r\ntypedef long long ll;\r\nconst ll inf=1e18;\r\ntemplate<typename T> struct SegmentTree{\r\n    struct Info{\r\n        T len,lazy;\r\n        Info():lazy(0),len(inf){}\r\n        Info(T x):lazy(0),len(0){}\r\n        Info(T la,T length):lazy(la),len(length){}\r\n\r\n        Info operator+(const Info &b) const {\r\n            return Info(0,std::min(len,b.len));\r\n        }\r\n    };\r\n    \r\n    int n;\r\n    std::vector<Info>tr;\r\n    SegmentTree():tr{0}{}\r\n    explicit SegmentTree(int _n):n(_n){tr.resize((n<<2)+5);}\r\n\r\n    void pushup(int u){\r\n        tr[u]=tr[u<<1]+tr[u<<1|1];\r\n    }\r\n\r\n    void pushdown(int u,int l,int r){\r\n        if(tr[u].lazy){\r\n            int m=l+r>>1;\r\n            modify(u<<1,l,m,l,m,tr[u].lazy);\r\n            modify(u<<1|1,m+1,r,m+1,r,tr[u].lazy);\r\n            tr[u].lazy=0;\r\n        }\r\n    }\r\n\r\n    void build(int u,int l,int r,std::vector<T> &w){\r\n        if(l==r){\r\n            tr[u]=Info(0,w[l-1]);\r\n            return;\r\n        }\r\n        int mid=l+r>>1;\r\n        build(u<<1,l,mid,w);build(u<<1|1,mid+1,r,w);\r\n        pushup(u);\r\n    }\r\n    \r\n    void build(std::vector<T> &w){build(1,1,n,w);}\r\n\r\n    void modify(int u,int l,int r,int L,int R,T d){\r\n        if(l>=L&&r<=R){\r\n            tr[u].lazy+=d;\r\n            tr[u].len+=d;\r\n            return;\r\n        }\r\n        pushdown(u,l,r);\r\n        int mid=l+r>>1;\r\n        if(L<=mid) modify(u<<1,l,mid,L,R,d);\r\n        if(mid<R) modify(u<<1|1,mid+1,r,L,R,d);\r\n        pushup(u);\r\n    }\r\n\r\n    void modify(int l,int r,T d){modify(1,1,n,l,r,d);}\r\n\r\n    void modify1(int u,int l,int r,int L,int R,T d){\r\n        if(l>=L&&r<=R){\r\n            tr[u].len=d;\r\n            return;\r\n        }\r\n        pushdown(u,l,r);\r\n        int mid=l+r>>1;\r\n        if(L<=mid) modify1(u<<1,l,mid,L,R,d);\r\n        if(mid<R) modify1(u<<1|1,mid+1,r,L,R,d);\r\n        pushup(u);\r\n    }\r\n\r\n    void modify1(int l,int r,T d){modify1(1,1,n,l,r,d);}\r\n\r\n    Info query(int u,int l,int r,int L,int R){\r\n        if(l>R||r<L) return Info();\r\n        if(l>=L&&r<=R) return tr[u];\r\n        pushdown(u,l,r);\r\n        int mid=l+r>>1;\r\n        return query(u<<1,l,mid,L,R)+query(u<<1|1,mid+1,r,L,R);\r\n    }\r\n\r\n    Info query(int l,int r){return query(1,1,n,l,r);}\r\n\r\n};\r\ntypedef SegmentTree<long long> seg;\r\nvoid solve(){\r\n    ll n,m;\r\n    std::cin>>n>>m;\r\n    std::vector<ll>tasks(n),hot(m),cold(m),vis(m);\r\n    for(auto &x:tasks) std::cin>>x,--x;\r\n    for(auto &x:cold) std::cin>>x;\r\n    for(auto &x:hot) std::cin>>x;\r\n    std::vector<ll>w(m,inf);\r\n    w[tasks[0]]=cold[tasks[0]];\r\n    seg tr(m);\r\n    tr.build(w);\r\n    vis[tasks[0]]=1;\r\n    for(int i=1;i<n;++i){\r\n        if(tasks[i]==tasks[i-1]) tr.modify(1,m,hot[tasks[i]]);\r\n        else{\r\n            ll min=tr.query(1,m).len;\r\n            ll ti1=tr.query(tasks[i]+1,tasks[i]+1).len;\r\n            ll ti2=tr.query(tasks[i-1]+1,tasks[i-1]+1).len;\r\n            tr.modify(1,m,cold[tasks[i]]);\r\n            if(vis[tasks[i]]){\r\n                tr.modify1(tasks[i]+1,tasks[i]+1,std::min(ti1+hot[tasks[i]],min+cold[tasks[i]]));\r\n                tr.modify1(tasks[i-1]+1,tasks[i-1]+1,std::min(ti1+hot[tasks[i]],ti2+cold[tasks[i]]));\r\n            }else{\r\n                tr.modify1(tasks[i]+1,tasks[i]+1,min+cold[tasks[i]]);\r\n            }\r\n        }\r\n        vis[tasks[i]]=1;\r\n    }\r\n    std::cout<<tr.query(1,m).len<<'\\n';\r\n}\r\nint main(){\r\n    // freopen(\"in.txt\",\"r\",stdin);freopen(\"out.txt\",\"w\",stdout);\r\n    // std::cout<<std::fixed<<std::setprecision(10);\r\n    std::ios::sync_with_stdio(false);\r\n    std::cin.tie(nullptr);std::cout.tie(nullptr);\r\n    int _=1;\r\n    std::cin>>_;\r\n    for(int i=1;i<=_;++i){\r\n        solve();\r\n        // std::cout<<(solve()?\"Yes\":\"No\")<<'\\n';\r\n    }\r\n    return 0;\r\n}"
}