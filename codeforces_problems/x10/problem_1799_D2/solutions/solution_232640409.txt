{
    "id": 232640409,
    "contestId": 1799,
    "creationTimeSeconds": 1699884130,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1799,
        "index": "D2",
        "name": "Hot Start Up (hard version)",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 2100,
        "tags": [
            "data structures",
            "dp"
        ]
    },
    "author": {
        "contestId": 1799,
        "members": [
            {
                "handle": "Hojstyer"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1677508500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 343,
    "memoryConsumedBytes": 22835200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\n\r\nvoid solve()\r\n{\r\n    int n, k;\r\n    cin >> n >> k;\r\n    vector<int> a(n + 1);\r\n    for (int i = 1; i <= n; i++)\r\n        cin >> a[i];\r\n    vector<int> cold(k + 1), hot(k + 1);\r\n    for (int i = 1; i <= k; i++)\r\n        cin >> cold[i];\r\n    for (int i = 1; i <= k; i++)\r\n        cin >> hot[i];\r\n\r\n    vector<ll> tree((k << 2) + 1, 1e15), add((k << 2) + 1);\r\n    function<void(int)> push_up = [&](int u)\r\n    {\r\n        tree[u] = min(tree[u << 1], tree[u << 1 | 1]);\r\n    };\r\n\r\n    function<void(int)> push_down = [&](int u)\r\n    {\r\n        if (!add[u])\r\n            return;\r\n        tree[u << 1] += add[u];\r\n        tree[u << 1 | 1] += add[u];\r\n        add[u << 1] += add[u];\r\n        add[u << 1 | 1] += add[u];\r\n        add[u] = 0;\r\n    };\r\n\r\n    function<void(int, int, int, int, ll)> update = [&](int l, int r, int u, int x, ll c)\r\n    {\r\n        if (l == r)\r\n        {\r\n            tree[u] = min(tree[u], c);\r\n            return;\r\n        }\r\n        push_down(u);\r\n        if (x <= (l + r >> 1))\r\n            update(l, l + r >> 1, u << 1, x, c);\r\n        else\r\n            update((l + r >> 1) + 1, r, u << 1 | 1, x, c);\r\n        push_up(u);\r\n    };\r\n\r\n    function<void(int, int, int, int, int, ll)> update_add = [&](int l, int r, int u, int a, int b, ll c)\r\n    {\r\n        if (a <= l && b >= r)\r\n        {\r\n            tree[u] += c;\r\n            add[u] += c;\r\n            return;\r\n        }\r\n        push_down(u);\r\n        if (a <= (l + r >> 1))\r\n            update_add(l, l + r >> 1, u << 1, a, b, c);\r\n        if (b > (l + r >> 1))\r\n            update_add((l + r >> 1) + 1, r, u << 1 | 1, a, b, c);\r\n        push_up(u);\r\n    };\r\n\r\n    function<ll(int, int, int, int, int)> query = [&](int l, int r, int u, int a, int b)\r\n    {\r\n        if (a <= l && b >= r)\r\n            return tree[u];\r\n        push_down(u);\r\n        ll ans = 1e18;\r\n        if (a <= (l + r >> 1))\r\n            ans = min(ans, query(l, l + r >> 1, u << 1, a, b));\r\n        if (b > (l + r >> 1))\r\n            ans = min(ans, query((l + r >> 1) + 1, r, u << 1 | 1, a, b));\r\n        return ans;\r\n    };\r\n\r\n    update(1, k, 1, a[1], cold[a[1]]);\r\n    for (int i = 2; i <= n; i++)\r\n    {\r\n        ll tmp = 1e18;\r\n        tmp = min(tmp, query(1, k, 1, 1, k) + cold[a[i]]);\r\n        tmp = min(tmp, query(1, k, 1, a[i], a[i]) + hot[a[i]]);\r\n\r\n        if (a[i] == a[i - 1])\r\n            update_add(1, k, 1, 1, k, hot[a[i]]);\r\n        else\r\n            update_add(1, k, 1, 1, k, cold[a[i]]);\r\n        update(1, k, 1, a[i - 1], tmp);\r\n    }\r\n    cout << query(1, k, 1, 1, k) << '\\n';\r\n}\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0), cout.tie(0);\r\n\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--)\r\n    {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}