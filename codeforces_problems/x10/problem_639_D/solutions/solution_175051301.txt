{
    "id": 175051301,
    "contestId": 639,
    "creationTimeSeconds": 1665174938,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 639,
        "index": "D",
        "name": "Bear and Contribution",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2400,
        "tags": [
            "data structures",
            "greedy",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 639,
        "members": [
            {
                "handle": "jagoodek"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1459182900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 3174400,
    "source": "#include <bits/stdc++.h>\n\ntypedef long long ll;\n#define FOR(i, n) for(int i = 0; i < n; i++)\nusing namespace std;\n\nvector<ll> v;\nvector<ll> curr[5];\nint n, k, b, c;\nll tmp, goal, cost, diff, minCost, indexToDelete, costToDelete;\n\nll getCost(ll number) {\n    ll diff = goal - number;\n    ll ans = 0;\n    if(5*c > b) {\n        return diff/5 * b + diff % 5 * c;\n    }\n    return diff * c;\n}\n\nint main() {\n    scanf(\"%d%d%d%d\", &n, &k, &b, &c);\n\n    FOR(i, n) {\n        scanf(\"%lld\", &tmp);\n        v.push_back(tmp);\n    }\n    sort(v.begin(), v.end());\n    \n    minCost = LLONG_MAX;\n    \n    FOR(i, 5) {\n        FOR(j, 5) {\n            curr[i].clear();\n        }\n\n        goal = v[k-1];\n        while(abs(goal % 5) != i)\n            goal++;\n\n        cost = 0;\n\n        FOR(j, k) {\n            curr[abs(v[j]%5)].push_back(v[j]);\n            cost += getCost(v[j]);\n        }\n        minCost = min(cost, minCost);\n        for(int j = k; j < n; j++) {\n\n            if(v[j] > goal) {\n                ll toAdd = v[j] - goal;\n                while(toAdd % 5 != 0) {\n                    toAdd++;\n                }\n                if(5*c > b) {\n                    cost += toAdd / 5 * b * k;\n                } else {\n                    cost += toAdd * c;\n                }\n\n                goal += toAdd;\n            }\n\n            cost += getCost(v[j]);\n            curr[abs(v[j]%5)].push_back(v[j]);\n\n            indexToDelete = 0;\n            costToDelete = -1;\n\n            FOR(l, 5) {\n                if(curr[l].empty())\n                    continue;\n                if(getCost(curr[l].front()) > costToDelete) {\n                    indexToDelete = l;\n                    costToDelete = getCost(curr[l].front());\n                }\n            }\n\n            curr[indexToDelete].erase(curr[indexToDelete].begin());\n            cost -= costToDelete;\n\n            minCost = min(minCost, cost);\n        }\n        \n    }\n    printf(\"%lld\", minCost);\n    return 0;\n    \n\n}"
}