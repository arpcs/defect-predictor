{
    "id": 233414772,
    "contestId": 914,
    "creationTimeSeconds": 1700394600,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 914,
        "index": "G",
        "name": "Sum the Fibonacci",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 2600,
        "tags": [
            "bitmasks",
            "divide and conquer",
            "dp",
            "fft",
            "math"
        ]
    },
    "author": {
        "contestId": 914,
        "members": [
            {
                "handle": "Badint"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1516462500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 170,
    "timeConsumedMillis": 1154,
    "memoryConsumedBytes": 3993600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// clang-format off\r\ntemplate <typename T, typename = void> struct is_iterable : false_type {};template <typename T>struct is_iterable<    T, void_t<decltype(begin(declval<T>())), decltype(end(declval<T>()))>>    : true_type {};template <typename T>typename enable_if<is_iterable<T>::value && !is_same<T, string>::value,ostream &>::type operator<<(ostream &cout, T const &v);template <typename A, typename B>ostream &operator<<(ostream &cout, pair<A, B> const &p) {  return cout << \"(\" << p.first << \", \" << p.second << \")\";}template <typename T>typename enable_if<is_iterable<T>::value && !is_same<T, string>::value, ostream &>::type operator<<(ostream &cout, T const &v) {  cout << \"[\";  for (auto it = v.begin(); it != v.end();) {cout << *it; if (++it != v.end()) cout << \", \";  } return cout << \"]\";}\r\n\r\n#ifdef LOCAL\r\n  void dbg_out() { cout << endl; } template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) { cout << ' ' << H; dbg_out(T...); }\r\n  #define debug(...) cout << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\r\n#else\r\n  #define debug(...) \"zzz\"\r\n#endif\r\n// clang-format on\r\n\r\nusing ll = long long;\r\nusing ld = long double;\r\nusing pii = pair<ll, ll>;\r\n\r\n#define all(x) x.begin(), x.end()\r\n#define mp make_pair\r\n#define pb push_back\r\n#define f first\r\n#define s second\r\n\r\nconst ll MOD = 1e9 + 7;\r\nstruct mint {\r\n  int x;\r\n  mint() : x(0) {}\r\n  template <class T> mint(T value) : x(value % MOD) {\r\n    if (x < 0)\r\n      x += MOD;\r\n  }\r\n  mint &operator+=(const mint &oth) {\r\n    x += oth.x;\r\n    if (x >= MOD)\r\n      x -= MOD;\r\n    return *this;\r\n  }\r\n  mint &operator-=(const mint &oth) {\r\n    x -= oth.x;\r\n    if (x < 0)\r\n      x += MOD;\r\n    return *this;\r\n  }\r\n  mint &operator*=(const mint &oth) {\r\n    x = (long long)x * oth.x % MOD;\r\n    return *this;\r\n  }\r\n  friend mint operator+(mint l, const mint &r) { return l += r; }\r\n  friend mint operator-(mint l, const mint &r) { return l -= r; }\r\n  friend mint operator*(mint l, const mint &r) { return l *= r; }\r\n  mint &operator--() {\r\n    if (--x == -1)\r\n      x = MOD - 1;\r\n    return *this;\r\n  }\r\n  mint &operator++() {\r\n    if (++x == MOD)\r\n      x = 0;\r\n    return *this;\r\n  }\r\n  mint operator--(int) {\r\n    mint temp = *this;\r\n    --*this;\r\n    return temp;\r\n  }\r\n  mint operator++(int) {\r\n    mint temp = *this;\r\n    ++*this;\r\n    return temp;\r\n  }\r\n  mint operator-() const { return 0 - *this; }\r\n  mint operator+() const { return *this; }\r\n  friend bool operator==(const mint &l, const mint &r) { return l.x == r.x; }\r\n  friend bool operator!=(const mint &l, const mint &r) { return l.x != r.x; }\r\n  friend ostream &operator<<(ostream &out, const mint &a) { return out << a.x; }\r\n  mint pow(long long e = MOD - 2) const {\r\n    mint ans = 1, b = *this;\r\n    while (e > 0) {\r\n      if (e % 2 == 1) {\r\n        ans *= b;\r\n      }\r\n      b *= b;\r\n      e /= 2;\r\n    }\r\n    return ans;\r\n  }\r\n};\r\n\r\ntemplate <typename T, enable_if_t<is_unsigned_v<T>> * = nullptr>\r\nconstexpr int bit_width(T x) noexcept {\r\n  if (x == 0)\r\n    return 0;\r\n  else\r\n    return sizeof(unsigned long long) * CHAR_BIT - __builtin_clzll(x);\r\n};\r\n\r\ntemplate <typename T, enable_if_t<is_unsigned_v<T>> * = nullptr>\r\nconstexpr bool has_single_bit(T x) noexcept {\r\n  if (x == 0)\r\n    return false;\r\n  else\r\n    return (x & (x - 1)) == 0;\r\n};\r\n\r\ntemplate <typename T, enable_if_t<is_unsigned_v<T>> * = nullptr>\r\nconstexpr int popcount(T x) noexcept {\r\n  return __builtin_popcountll(x);\r\n};\r\n\r\nint check_pow2_and_log(size_t x) {\r\n  assert(has_single_bit(x));\r\n  return bit_width(x) - 1;\r\n}\r\n\r\nenum struct TransformDirection { NORMAL, INVERSE };\r\n\r\ntemplate <typename T, TransformDirection Dir = TransformDirection::NORMAL>\r\nvoid hadamard_transform(vector<T> &a) {\r\n  int w = check_pow2_and_log(a.size());\r\n  size_t n = a.size();\r\n  for (int b = 0; b < w; b++) {\r\n    size_t l = size_t(1) << b;\r\n    for (size_t i = 0; i < n; i += l * 2)\r\n      for (size_t j = i; j < i + l; j++) {\r\n        T tmp = a[j];\r\n        a[j] += a[j + l];\r\n        a[j + l] = tmp - a[j + l];\r\n      }\r\n  }\r\n  if (Dir == TransformDirection::INVERSE) {\r\n    T inv_size = T(1) * mint(n).pow();\r\n    for (size_t i = 0; i < n; i++)\r\n      a[i] *= inv_size;\r\n  }\r\n}\r\n\r\ntemplate <typename T> void xor_convolution(vector<T> &a, vector<T> &b) {\r\n  assert(a.size() == b.size());\r\n  hadamard_transform(a);\r\n  hadamard_transform(b);\r\n  for (size_t i = 0; i < a.size(); i++)\r\n    a[i] *= b[i];\r\n  hadamard_transform<T, TransformDirection::INVERSE>(a);\r\n}\r\n\r\nvoid solve() {\r\n  // open\r\n\r\n  constexpr int B = 17;\r\n  vector<mint> fib(1 << B), f(1 << B);\r\n\r\n  int n;\r\n  cin >> n;\r\n  while (n--) {\r\n    int x;\r\n    cin >> x;\r\n    f[x]++;\r\n  }\r\n\r\n  fib[0] = 0, fib[1] = 1;\r\n  for (int i = 2; i < (1 << B); i++)\r\n    fib[i] = fib[i - 1] + fib[i - 2];\r\n\r\n  auto xor_conv = f;\r\n  auto f_copy = f;\r\n  xor_convolution(xor_conv, f_copy);\r\n  auto by_itself = f;\r\n\r\n  vector<mint> subset_conv(1 << B, 0);\r\n  for (int i = 0; i < (1 << B); i++) {\r\n    for (int j = i; j >= 0; j = (j - 1) & i) {\r\n      subset_conv[i] += f[j] * f[i ^ j];\r\n      if (j == 0)\r\n        break;\r\n    }\r\n  }\r\n\r\n  for (int i = 0; i < (1 << B); i++) {\r\n    xor_conv[i] *= fib[i];\r\n    by_itself[i] *= fib[i];\r\n    subset_conv[i] *= fib[i];\r\n  }\r\n\r\n  vector<mint> res(1 << B);\r\n  {\r\n    // and convolution\r\n    reverse(all(xor_conv));\r\n    reverse(all(by_itself));\r\n    reverse(all(subset_conv));\r\n\r\n    // zeta transform\r\n    for (int i = 0; i < B; i++) {\r\n      for (int msk = 0; msk < (1 << B); msk++) {\r\n        if (msk >> i & 1) {\r\n          xor_conv[msk] += xor_conv[msk ^ (1 << i)];\r\n          by_itself[msk] += by_itself[msk ^ (1 << i)];\r\n          subset_conv[msk] += subset_conv[msk ^ (1 << i)];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (int msk = 0; msk < (1 << B); msk++) {\r\n      res[msk] = xor_conv[msk] * by_itself[msk] * subset_conv[msk];\r\n    }\r\n\r\n    for (int i = B - 1; i >= 0; i--) {\r\n      for (int msk = (1 << B) - 1; msk >= 0; msk--) {\r\n        if (msk >> i & 1) {\r\n          res[msk] -= res[msk ^ (1 << i)];\r\n        }\r\n      }\r\n    }\r\n\r\n    reverse(all(res));\r\n  }\r\n\r\n  mint ans = 0;\r\n  for (int msk = 0; msk < (1 << B); msk++) {\r\n    if (__builtin_popcountll(msk) == 1) {\r\n      ans += res[msk];\r\n    }\r\n  }\r\n  cout << ans << '\\n';\r\n}\r\n\r\nint main() {\r\n  cin.tie(0)->sync_with_stdio(false);\r\n\r\n  ll T = 1;\r\n  // cin >> T;\r\n  for (int t = 0; t < T; t++)\r\n    solve();\r\n\r\n  cout.flush();\r\n  return 0;\r\n}"
}