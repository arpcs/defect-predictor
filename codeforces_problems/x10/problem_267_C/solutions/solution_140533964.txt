{
    "id": 140533964,
    "contestId": 267,
    "creationTimeSeconds": 1640400354,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 267,
        "index": "C",
        "name": "Berland Traffic",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2700,
        "tags": [
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 267,
        "members": [
            {
                "handle": "Superluobo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1358002800
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 18,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "#include <iostream>\r\n#include <cmath>\r\n#include <cstdio>\r\n#include <algorithm>\r\n#include <cstring>\r\n#include <cctype>\r\n#include <vector>\r\nusing std::cin;\r\nusing std::cout;\r\nusing std::endl;\r\nusing std::cerr;\r\n\r\nconst int maxn = 110;\r\nconst double eps = 1e-20;\r\n\r\nint e[maxn][maxn], n, m;\r\n\r\ninline double change(double x) { return x < eps ? eps : x; }\r\n\r\ndouble a[maxn][maxn];\r\ndouble root[maxn];\r\n\r\nvoid guass()\r\n{\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        for (int j = 1; j <= n; j++)\r\n        {\r\n            if (i == j)\r\n                continue;\r\n            if (a[i][i] == 0)\r\n                continue;\r\n            double d = a[j][i] / a[i][i];\r\n            for (int k = i; k <= n + 1; k++)\r\n            {\r\n                a[j][k] -= a[i][k] * d;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 1; i <= n; i++)\r\n        if (fabs(a[i][i]) > eps)\r\n            root[i] = a[i][n + 1] / a[i][i];\r\n/*    \r\n    for (int i = 1; i <= n; i++)\r\n        cout << root[i] << \" \";\r\n    cout << endl;\r\n*/   \r\n}\r\n\r\nstruct edge\r\n{\r\n    int x, y;\r\n    double cap;\r\n};\r\nstd::vector<edge> edges;\r\n\r\ninline void add(int x, int y, double cap)\r\n{\r\n    edges.push_back({x, y, cap});\r\n    if (x != 1 && x < n)\r\n        a[x][x]--, a[x][y]++;\r\n    if (y != 1 && y < n)\r\n        a[y][y]--, a[y][x]++;\r\n}\r\n    \r\nint main()\r\n{\r\n    cin >> n >> m;\r\n    memset(root, 1, sizeof(root));\r\n    double c;\r\n    for (int i = 1, x, y; i <= m; i++)\r\n        cin >> x >> y >> c, add(x, y, c);\r\n    a[1][n + 1] = 1, a[n][n + 1] = n + 1, a[1][1] = 1, a[n][n] = 1;\r\n    guass();\r\n    /*\r\n    puts(\"matrix:\");\r\n    for (int i = 1; i <= n; i++, cout << endl)\r\n        for (int j = 1; j <= n + 1; j++)\r\n            cout << a[i][j] << \" \";\r\n            */\r\n    double mul = 1e18;\r\n    int flag = 0;\r\n    for (auto k : edges)\r\n    {\r\n        if (fabs(root[k.y] - root[k.x]) < eps)\r\n            continue;\r\n        mul = std::min(mul, 1.0 * k.cap / fabs(root[k.y] - root[k.x])), flag = 1;\r\n    }\r\n    if (!flag)\r\n        mul = 0;\r\n    //cout << mul << endl;\r\n    for (int i = 1; i <= n; i++)\r\n        root[i] *= mul;\r\n    double sum = 0;\r\n    for (auto k : edges)\r\n        if (k.x == n || k.y == n)\r\n            sum += fabs(root[k.y] - root[k.x]);\r\n    printf(\"%lf\\n\", sum);\r\n    for (auto k : edges)\r\n        printf(\"%lf\\n\", root[k.y] - root[k.x]);\r\n}"
}