{
    "id": 192709546,
    "contestId": 267,
    "creationTimeSeconds": 1675846650,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 267,
        "index": "C",
        "name": "Berland Traffic",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2700,
        "tags": [
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 267,
        "members": [
            {
                "handle": "Archaeopteryx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1358002800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 32,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 409600,
    "source": "// LUOGU_RID: 96274866\n#pragma GCC optimize(3)\n#pragma GCC optimize(2)\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\")\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int maxn=110;\nconst double eps=1e-8;\n\nint e[maxn][maxn],n,m;\n\ninline double change(double x) { return x<eps?eps:x; }\n\ndouble a[maxn][maxn];\ndouble root[maxn];\n\nvoid guass()\n{\nfor (int i=1;i<=n;i++)\n{\nfor (int j=1;j<=n;j++)\n{\nif (i==j)\ncontinue;\nif (fabs(a[i][i])<eps)\ncontinue;\ndouble d=a[j][i]/a[i][i];\nfor (int k=i;k<=n+1;k++)\na[j][k]-=a[i][k]*d;\n}\n}\nfor (int i=1;i<=n;i++)\nif (fabs(a[i][i])>eps)\nroot[i]=a[i][n+1]/a[i][i];\n}\n\nstruct edge\n{\nint x,y;\ndouble cap;\n};\nvector<edge> edges;\n\ninline void add(int x,int y,double cap)\n{\nedges.push_back({x,y,cap});\nif (x!=1&&x<n)\na[x][x]--,a[x][y]++;\nif (y!=1&&y<n)\na[y][y]--,a[y][x]++;\n}\n\nint main()\n{\nscanf(\"%d%d\",&n,&m);\ndouble c;\nfor (int i=1,x,y;i<=m;i++)\n{\nscanf(\"%d%d%lf\",&x,&y,&c);\nadd(x,y,c);\n}\na[1][n+1]=1,a[n][n+1]=n+1,a[1][1]=1,a[n][n]=1;\nguass();\ndouble mul=1e18;\nint flag=0;\nfor (auto k:edges)\n{\nif (fabs(root[k.y]-root[k.x])<eps)\ncontinue;\nmul=min(mul,1.0*k.cap/fabs(root[k.y]-root[k.x])),flag=1;\n}\nif (!flag)\nmul=0;\nfor (int i=1;i<=n;i++)\nroot[i]*=mul;\ndouble sum=0;\nfor (auto k:edges)\nif (k.x==n||k.y==n)\nsum+=fabs(root[k.y]-root[k.x]);\nprintf(\"%lf\\n\",sum);\nfor (auto k:edges)\nprintf(\"%lf\\n\",root[k.y]-root[k.x]);\n}"
}