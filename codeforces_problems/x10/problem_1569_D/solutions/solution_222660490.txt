{
    "id": 222660490,
    "contestId": 1569,
    "creationTimeSeconds": 1694313034,
    "relativeTimeSeconds": 2134,
    "problem": {
        "contestId": 1569,
        "index": "D",
        "name": "Inconvenient Pairs",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "SmartTB"
            },
            {
                "handle": "Tobo"
            }
        ],
        "participantType": "VIRTUAL",
        "teamId": 137009,
        "teamName": "\u4f60\u662f\u90a3\u4e48\u5927\u7684\u732a",
        "ghost": false,
        "startTimeSeconds": 1694310900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 373,
    "memoryConsumedBytes": 72704000,
    "source": "#include <bits/stdc++.h>\r\nusing i64 = long long;\r\nusing namespace std;\r\nconst int N = 1e6 + 5;\r\n// const int M = 2e6 + 5;\r\nconst int mod = 998244353;\r\n// const int mod = 1000000007;\r\n\r\nint n, m, k, col[N], row[N];\r\ni64 sum[N];\r\nvector<int> a[N], b[N];\r\nvoid solve()\r\n{\r\n    i64 ans = 0;\r\n    cin >> n >> m >> k;\r\n    for (int i = 1; i <= n; i++)\r\n        cin >> col[i], a[col[i]].clear();\r\n    for (int i = 1; i <= m; i++)\r\n        cin >> row[i], b[row[i]].clear();\r\n    for (int i = 1; i <= k; i++)\r\n    {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        a[x].push_back(y);\r\n        b[y].push_back(x);\r\n    }\r\n    for (int i = 1; i <= n; i++)\r\n        sort(a[col[i]].begin(), a[col[i]].end());\r\n    for (int i = 1; i <= m; i++)\r\n        sort(b[row[i]].begin(), b[row[i]].end());\r\n    int now = 0, cnt = 0;\r\n    i64 tmp = 0;\r\n    col[0] = -1, col[n + 1] = 1e9;\r\n    for (int i = 1; i <= m; i++)\r\n    {\r\n        int r = row[i];\r\n        cnt = 0;\r\n        now = 0;\r\n        tmp = 0;\r\n        while (cnt < b[r].size())\r\n        {\r\n            if (b[r][cnt] >= col[now + 1])\r\n            {\r\n                sum[col[now]] += tmp, ans -= tmp * (tmp - 1) / 2;\r\n                tmp = 0;\r\n                int pos = upper_bound(col, col + 2 + n, b[r][cnt]) - col;\r\n                now = pos - 1;\r\n            }\r\n            if (b[r][cnt] > col[now])\r\n                tmp++;\r\n            cnt++;\r\n        }\r\n        sum[col[now]] += tmp, ans -= tmp * (tmp - 1) / 2;\r\n    }\r\n    for (int i = 0; i <= n; i++)\r\n        ans += sum[col[i]] * (sum[col[i]] - 1) / 2, sum[col[i]] = 0;\r\n    row[0] = -1, row[m + 1] = 1e9;\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        int r = col[i];\r\n        cnt = 0;\r\n        now = 0;\r\n        tmp = 0;\r\n        while (cnt < a[r].size())\r\n        {\r\n            if (a[r][cnt] >= row[now + 1])\r\n            {\r\n                sum[row[now]] += tmp, ans -= tmp * (tmp - 1) / 2;\r\n                tmp = 0;\r\n                int pos = upper_bound(row, row + 2 + m, a[r][cnt]) - row;\r\n                now = pos - 1;\r\n            }\r\n            if (a[r][cnt] > row[now])\r\n                tmp++;\r\n            cnt++;\r\n        }\r\n        sum[row[now]] += tmp, ans -= tmp * (tmp - 1) / 2;\r\n    }\r\n    for (int i = 0; i <= m; i++)\r\n        ans += sum[row[i]] * (sum[row[i]] - 1) / 2, sum[row[i]] = 0;\r\n    cout << ans << '\\n';\r\n}\r\nsigned main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int t = 1;\r\n    cin >> t;\r\n    while (t--)\r\n        solve();\r\n}"
}