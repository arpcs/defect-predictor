{
    "id": 230117742,
    "contestId": 1569,
    "creationTimeSeconds": 1698474109,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1569,
        "index": "D",
        "name": "Inconvenient Pairs",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "data structures",
            "implementation",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1569,
        "members": [
            {
                "handle": "Kyrizer_W"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1631111700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 1044,
    "memoryConsumedBytes": 6348800,
    "source": "#include<iostream>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<map>\r\n#include<vector>\r\n#include<set>\r\n#include<queue>\r\n#include<stack>\r\n#define lowbit(x) ((x) & (-x))\r\n#define PI acos(-1)\r\n#define el \"\\n\"\r\n#define inf 0x3f3f3f3f\r\nusing namespace std;\r\nusing ll = long long;\r\nusing PII = pair<int, int>;\r\nconst int N = 2e5 + 10;\r\nconst int mod = 1e9 + 7;\r\n\r\nint a[N], b[N];\r\n\r\nstruct node {\r\n    int x, y;\r\n};\r\n\r\nnode p[N];\r\n\r\nbool cmp1(node a, node b) {\r\n    return a.x < b.x;\r\n}\r\n\r\nbool cmp2(node a, node b) {\r\n    return a.y < b.y;\r\n}\r\n\r\nmap<int, int> mp; \r\n\r\nvoid solve() {\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    for (int i = 1; i <= n; i ++) {\r\n        cin >> a[i];\r\n    }\r\n    for (int i = 1; i <= m; i ++) {\r\n        cin >> b[i];\r\n    }\r\n    sort(a + 1, a + 1 + n);\r\n    sort(b + 1, b + 1 + m);\r\n    for (int i = 1; i <= k; i ++) {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        // cout << \"(\" << x << \",\" << y << \")\" << el;\r\n        p[i] = {x, y};\r\n    }\r\n    sort(p + 1, p + 1 + k, cmp1);\r\n    int now = 1, res = 0;\r\n    for (int i = 1; i <= n; i ++) {\r\n        mp.clear();\r\n        int sum = 0;\r\n        while (now <= k && p[now].x <= a[i]) {\r\n            // cout << p[now].x << \" \" << p[now].y << el;\r\n            if (p[now].x == a[i]) {now ++; continue;} \r\n            mp[p[now].y] ++;\r\n            sum ++;\r\n            now ++;\r\n        }\r\n        int ans = 0;\r\n        // cout << \"mp:\" << mp.size() << el;\r\n        for (auto [x, y] : mp) {\r\n            ans = ans + y * (sum - y);\r\n            sum -= y;\r\n        }\r\n        // cout << ans << el;\r\n        res += ans;\r\n    }\r\n    // cout << res << el;\r\n    sort(p + 1, p + 1 + k, cmp2);\r\n    now = 1;\r\n    for (int i = 1; i <= m; i ++) {\r\n        mp.clear();\r\n        int sum = 0;\r\n        while (now <= k && p[now].y <= b[i]) {\r\n            // cout << p[now].x << \" \" << p[now].y << el;\r\n            if (p[now].y == b[i]) {now ++; continue;} \r\n            mp[p[now].x] ++;\r\n            sum ++;\r\n            now ++;\r\n        }\r\n        int ans = 0;\r\n        for (auto [x, y] : mp) {\r\n            ans = ans + y * (sum - y);\r\n            sum -= y;\r\n        }\r\n        // cout << ans << el;\r\n        res += ans;\r\n    }\r\n    cout << res << el;\r\n}\r\n\r\nint main() {\r\n\r\n    // ios::sync_with_stdio(false);\r\n    // cin.tie(0);\r\n    \r\n    int T;\r\n    cin >> T;\r\n    while (T--) {\r\n        solve();\r\n    }\r\n    \r\n    return 0;\r\n}\r\n\r\n/* stuff you should look for\r\n* int overflow, array bounds\r\n* special cases (n=1?)\r\n* do smth instead of nothing and stay organized\r\n* WRITE STUFF DOWN\r\n* DON'T GET STUCK ON ONE APPROACH\r\n*/"
}