{
    "id": 166319294,
    "contestId": 335,
    "creationTimeSeconds": 1659254225,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 335,
        "index": "B",
        "name": "Palindrome",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 335,
        "members": [
            {
                "handle": "Litini"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1375549200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 60,
    "memoryConsumedBytes": 79872000,
    "source": "#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N = 99 * 26 + 2, C = 26;\n\nstring s, ans;\nint n, cnt[C], dp[N][N];\npair<int, int> par[N][N];\n\nvoid read_input() {\n    cin >> s;\n    n = s.size();\n}\n\nvoid check() {\n    for (char c: s)\n        if (++cnt[c - 'a'] > 99) {\n            for (int i = 0; i ^ 100; i++)\n                cout << c;\n            exit(0);\n        }\n}\n\nvoid solve() {\n    for (int i = 0; i ^ n; i++)\n        dp[par[i][i + 1].first = i][par[i][i + 1].second = i + 1] = 1;\n    for (int len = 2; len <= n; len++)\n        for (int l = 0, r = l + len; l + len <= n; r = ++l + len) {\n            if (s[l] == s[r - 1])\n                dp[l][r] = dp[par[l][r].first = l + 1][par[l][r].second = r - 1] + 2;\n            if (dp[l][r] < dp[l + 1][r])\n                dp[l][r] = dp[par[l][r].first = l + 1][par[l][r].second = r];\n            if (dp[l][r] < dp[l][r - 1])\n                dp[l][r] = dp[par[l][r].first = l][par[l][r].second = r - 1];\n        }\n}\n\nvoid get_ans() {\n    string res = \"\";\n    int l = 0, r = n;\n    while (l + 1 < r) {\n        if (par[l][r].first == l + 1 && par[l][r].second == r - 1)\n            res += s[l];\n        pair<int, int> tmp = par[l][r];\n        l = tmp.first;\n        r = tmp.second;\n    }\n    ans += res;\n    if (l < r)\n        ans += s[l];\n    reverse(res.begin(), res.end());\n    ans += res;\n    cout << (ans.size() > 100? ans.substr(0, 50) + ans.substr(n - 50): ans);\n}\n\nint main() {\n    read_input(), check(), solve(), get_ans();\n}\n"
}