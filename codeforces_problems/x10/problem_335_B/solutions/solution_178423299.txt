{
    "id": 178423299,
    "contestId": 335,
    "creationTimeSeconds": 1667058025,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 335,
        "index": "B",
        "name": "Palindrome",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1900,
        "tags": [
            "constructive algorithms",
            "dp"
        ]
    },
    "author": {
        "contestId": 335,
        "members": [
            {
                "handle": "bacheye_NASA"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1375549200
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 1433600,
    "source": "// =======> Lost in the dark, but I'll never be alone <======= //\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n#define pb push_back\r\n#define pii pair<int, int>\r\n//  true = 1   |\r\n//  false = 0  |\r\n//  LCM(a,b) = a*b / GCD(a,b)\r\n//  string substr (size_t pos, size_t len)\r\n//  find : find a string\r\n//  a<<1 : left shift (*2)\r\n//  a>>1 : right shift (/2)\r\nconst ll N = 5e4 + 10, mod = 998244353, INF = 9e18;\r\n\r\nstring s, t, u, ans;\r\nint l, r, n;\r\nstring dp[N];\r\n\r\nint main()\r\n{\r\n    ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n    //freopen(\"closing.in\", \"r\", stdin);\r\n    //freopen(\"closing.out\", \"w\", stdout);\r\n    cin >> s;\r\n    n = s.size();\r\n    for(int i = 0; i < n; i++)\r\n    {\r\n        dp[i] = s[i];\r\n    }\r\n    for(int i = n - 1; i >= 0; i--)\r\n    {\r\n        t = \"\";\r\n        //cout << \"Start :\" << i << '\\n';\r\n        for(int j = i + 1; j < n; j++)\r\n        {\r\n            u = t;\r\n            t = dp[j];\r\n            //cout << dp[j] << \"1\\n\";\r\n            if(s[i] == s[j])\r\n            {\r\n                dp[j] = s[i] + u + s[j];\r\n            }\r\n            //cout << dp[j] << \"2\\n\";\r\n            if(dp[j].size() >= 100)\r\n            {\r\n                cout << dp[j];\r\n                return 0;\r\n            }\r\n            if(dp[j].size() < dp[j - 1].size())\r\n                dp[j] = dp[j - 1];\r\n            //cout << dp[j] << \"3\\n\";\r\n        }\r\n    }\r\n    cout << dp[n - 1];\r\n}\r\n"
}