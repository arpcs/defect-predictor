{
    "id": 173055888,
    "contestId": 436,
    "creationTimeSeconds": 1663848301,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 436,
        "index": "A",
        "name": "Feed with Candy",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "greedy"
        ]
    },
    "author": {
        "contestId": 436,
        "members": [
            {
                "handle": "stolis"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1402673400
    },
    "programmingLanguage": "Java 8",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 60,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 0,
    "source": "import java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.Comparator;\r\nimport java.util.List;\r\nimport java.util.NavigableSet;\r\nimport java.util.Scanner;\r\nimport java.util.TreeSet;\r\n\r\npublic class A436 {\r\n\r\n    public static void main(String[] args) {\r\n        Scanner in = new Scanner(System.in);\r\n        int N = in.nextInt();\r\n        int X = in.nextInt();\r\n        List<Candy>[] lists = new List[2];\r\n        for (int i=0; i<2; i++) {\r\n            lists[i] = new ArrayList<>();\r\n        }\r\n        for (int n=0; n<N; n++) {\r\n            int type = in.nextInt();\r\n            int height = in.nextInt();\r\n            int mass = in.nextInt();\r\n            lists[type].add(new Candy(n, height, mass));\r\n        }\r\n        for (int i=0; i<2; i++) {\r\n            Collections.sort(lists[i], new Comparator<Candy>() {\r\n                @Override\r\n                public int compare(Candy c1, Candy c2) {\r\n                    return c1.height - c2.height;\r\n                }\r\n            });\r\n        }\r\n        int answer = Math.max(solve(X, 0, lists), solve(X, 1, lists));\r\n        System.out.println(answer);\r\n    }\r\n\r\n    private static int solve(int mass, int type, List<Candy>[] lists) {\r\n        NavigableSet<Candy>[] sets = new NavigableSet[2];\r\n        for (int i=0; i<2; i++) {\r\n            sets[i] = new TreeSet<>(new Comparator<Candy>() {\r\n                @Override\r\n                public int compare(Candy c1, Candy c2) {\r\n                    int diff = c2.mass - c1.mass;\r\n                    return (diff == 0) ? (c1.id - c2.id) : diff;\r\n                }\r\n            });\r\n        }\r\n        int result = 0;\r\n        int[] idx = new int[2];\r\n        while (true) {\r\n            while (idx[type] < lists[type].size()) {\r\n                Candy c = lists[type].get(idx[type]);\r\n                if (c.height <= mass) {\r\n                    sets[type].add(c);\r\n                    idx[type]++;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            if (sets[type].isEmpty()) {\r\n                break;\r\n            }\r\n            Candy c = sets[type].pollFirst();\r\n            result++;\r\n            mass += c.mass;\r\n            type = 1-type;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static class Candy {\r\n        int id;\r\n        int height;\r\n        int mass;\r\n        \r\n        Candy(int id, int height, int mass) {\r\n            this.id = id;\r\n            this.height = height;\r\n            this.mass = mass;\r\n        }\r\n    }\r\n\r\n}\r\n"
}