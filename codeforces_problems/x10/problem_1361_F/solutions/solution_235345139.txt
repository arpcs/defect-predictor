{
    "id": 235345139,
    "contestId": 1361,
    "creationTimeSeconds": 1701504486,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1361,
        "index": "F",
        "name": "Johnny and New Toy",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3300,
        "tags": [
            "data structures",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1361,
        "members": [
            {
                "handle": "TYpeWriting"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1591281300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 5038,
    "memoryConsumedBytes": 979763200,
    "source": "// LUOGU_RID: 137858247\n#include <bits/stdc++.h>\r\n#define il inline\r\n#define re register\r\n#define ll long long\r\n#define ull unsigned ll\r\n#define pii pair<int, int>\r\n#define fi first\r\n#define se second\r\n#define eb emplace_back\r\nusing namespace std;\r\n#define N 400005\r\n#define M 200\r\nint n, m, a[N], fa[N], son[N][2], Rt; ll F[N], inv[N], ns[N];\r\nil int solve(int l, int r) {\r\n  if(l == r) {F[r] = 0; return r;} int mid = l + 1;\r\n  for(re int i = l + 1; i <= r; i += 2) if(a[i] < a[mid]) mid = i;\r\n  son[mid][0] = solve(l, mid - 1), son[mid][1] = solve(mid + 1, r);\r\n  fa[son[mid][0]] = fa[son[mid][1]] = mid;\r\n  F[mid] = (r - mid + 1) / 2 * (mid - l + 1) / 2; return mid;\r\n}\r\nint cnt, rt[N], ls[N * M], rs[N * M], s[N * M];\r\nil void add(int x, int w, int &i, int l, int r) {\r\n  if(!i) i = ++cnt; s[i] += w; if(l == r) return ; int mid = l + r >> 1;\r\n  if(mid >= x) add(x, w, ls[i], l, mid); else add(x, w, rs[i], mid + 1, r);\r\n}\r\nil int query(int el, int er, int i, int l, int r) {\r\n  if(!i) return 0; if(l >= el && r <= er) return s[i]; int mid = l + r >> 1, ns = 0;\r\n  if(mid >= el) ns += query(el, er, ls[i], l, mid); if(mid < er) ns += query(el, er, rs[i], mid + 1, r); return ns;\r\n}\r\nil void pushup(int x) {ns[x] = ns[son[x][0]] + ns[son[x][1]] + min(inv[x], F[x] - inv[x]);}\r\nil void upd(int x, int w) {\r\n  int v = a[x];\r\n  while(x != Rt) {\r\n    int f = fa[x];\r\n    if(x == son[f][1]) inv[f] += w * query(v, n, rt[son[f][0]], 1, n);\r\n    else inv[f] += w * query(1, v, rt[son[f][1]], 1, n);\r\n    add(v, w, rt[x], 1, n), pushup(x = f);\r\n  }\r\n}\r\nint main() {\r\n  ios::sync_with_stdio(0);\r\n  cin.tie(0), cout.tie(0);\r\n  cin >> n;\r\n  for(re int i = 1; i <= n; ++i) cin >> a[i * 2 - 1];\r\n  for(re int i = 1; i < n; ++i) cin >> a[i * 2];\r\n  Rt = solve(1, n * 2 - 1);\r\n  for(re int i = 1; i <= n; ++i) upd(i * 2 - 1, 1);\r\n  cin >> m;\r\n  while(m--) {\r\n    int x, y; cin >> x >> y, x = x * 2 - 1, y = y * 2 - 1;\r\n    upd(x, -1), upd(y, -1), swap(a[x], a[y]), upd(x, 1), upd(y, 1), cout << ns[Rt] << \"\\n\";\r\n  }\r\n  cerr << 1.0 * clock() / CLOCKS_PER_SEC;\r\n  return 0;\r\n}"
}