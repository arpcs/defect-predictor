{
    "id": 234351299,
    "contestId": 1187,
    "creationTimeSeconds": 1700971795,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1187,
        "index": "D",
        "name": "Subarray Sorting",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1187,
        "members": [
            {
                "handle": "aajayagh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561905900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 14438400,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define rep(i,a,b) for(auto i=a;i<b;i++)\r\n#define ll long long\r\n#define double long double\r\n#define ii pair<int,int>\r\n#define iii pair<int,ii>\r\n#define fi first\r\n#define se second\r\n#define all(x) begin(x), end(x)\r\n#define file freopen(\"sinh1.inp\",\"r\",stdin);freopen(\"sinh1.out\",\"w\",stdout);\r\n#define sz(x) (int)(x).size()\r\n#define endl \"\\n\"\r\n#define fast ios_base::sync_with_stdio(0); cin.tie(0); cin.tie(0);\r\nint k,n,m,j,maxi=0, T;\r\nconst int minn=-1e9-1;\r\nconst int mod=1e9 + 7;\r\nconst int inf=1e9;\r\nconst int MxN=3e5+5;\r\nstring s2,s1;\r\nint dx[] = {1, -1, 0, 0};\r\nint dy[] = {0, 0, -1, 1};\r\nvector<int> g[MxN];\r\nint a[MxN], b[MxN], st[MxN * 4];\r\n\r\nvoid build(int id, int l, int r){\r\n    if(l == r){\r\n        st[id] = a[l];\r\n        return;\r\n    }\r\n    int mid = (l + r)/2;\r\n    build(id * 2, l, mid);\r\n    build(id * 2 + 1, mid + 1, r);\r\n    st[id] = min(st[id * 2], st[id * 2 + 1]);\r\n}\r\n\r\nint get(int id, int l, int r, int u, int v){\r\n    if(l > v || r < u) return 1e9;\r\n    if(l >= u && r <= v) return st[id];\r\n    int mid = (l + r)/2;\r\n    return min(get(id * 2, l, mid, u, v), get(id * 2 + 1, mid + 1, r, u, v));\r\n}\r\n\r\nvoid upd(int id, int l, int r, int i, int val){\r\n    if(l > i || r < i) return;\r\n    if(l == r){\r\n        st[id] = val;\r\n        return;\r\n    }\r\n    int mid = (l + r)/2;\r\n    upd(id * 2, l, mid, i, val);\r\n    upd(id * 2 + 1, mid + 1, r, i, val);\r\n    st[id] = min(st[id * 2], st[id * 2 + 1]);\r\n}\r\n\r\nint walk(int id, int l, int r, int i, int idx){\r\n    if(st[id] > i) return -1;\r\n    if(l == r){\r\n        if(st[id] != i) return -1;\r\n        if(l < idx) return -1;\r\n        return l;\r\n    }\r\n    int mid = (l + r)/2;\r\n    int res = -1;\r\n    if(st[id * 2] <= i && mid >= idx) res = walk(id * 2, l, mid, i, idx);\r\n    if(res == -1){\r\n        return walk(id * 2 + 1, mid + 1, r, i, idx);\r\n    }\r\n    return res;\r\n}\r\n\r\nvoid solve(){\r\n    cin >> n;\r\n    for(int i = 1; i <= n; i++){\r\n        cin >> a[i];\r\n    }\r\n    for(int i = n; i >= 1; i--){\r\n        g[a[i]].push_back(i);\r\n    }\r\n    for(int i = 1; i <= n; i++){\r\n        cin >> b[i];\r\n    }\r\n    build(1, 1, n);\r\n    for(int i = 1; i <= n; i++){\r\n        if(g[b[i]].size() == 0 || g[b[i]].back() < i){\r\n            cout << \"NO\" << endl;\r\n            return;\r\n        }\r\n        int x = g[b[i]].back();\r\n        g[b[i]].pop_back();\r\n        int mn = get(1, 1, n, i, x);\r\n        if(mn < b[i]){\r\n            cout << \"NO\" << endl;\r\n            return;\r\n        }\r\n        upd(1, 1, n, x, a[x - 1]);\r\n        a[x] = a[x - 1];\r\n    }\r\n    cout << \"YES\" << endl;\r\n}\r\nmain(){\r\n    fast\r\n    //setIO(\"HINHVUONG\")\r\n// freopen(\"ADN.inp\",\"r\",stdin);freopen(\"ADN.out\",\"w\",stdout);\r\n    int test;\r\n    test = 1;\r\n    cin >> test;\r\n    while(test --)\r\n    solve();\r\n    return 0;\r\n}\r\n"
}