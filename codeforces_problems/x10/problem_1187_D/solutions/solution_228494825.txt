{
    "id": 228494825,
    "contestId": 1187,
    "creationTimeSeconds": 1697519642,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1187,
        "index": "D",
        "name": "Subarray Sorting",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1187,
        "members": [
            {
                "handle": "Kuzizia"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561905900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 173,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 201011200,
    "source": "// LUOGU_RID: 129891608\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=3e5+10;\nint n,a[N],b[N],cnt[N],pos[N];\nqueue<int> q[N];\n#define ls u<<1\n#define rs u<<1|1\nconst int INF=0x7f7f7f7f;\nstruct Node{\n    int l,r;\n    int minn;\n}tr[N<<2];\nvoid pushup(int u){\n    tr[u].minn=min(tr[ls].minn,tr[rs].minn);\n}\nvoid build(int u,int l,int r){\n    if(l==r){\n        tr[u]={l,r,a[r]};\n        return;\n    }\n    tr[u]={l,r};\n    int mid=(l+r)>>1;\n    build(ls,l,mid),build(rs,mid+1,r);\n    pushup(u);\n}\nint query(int u,int l,int r){\n    if(tr[u].l>=l && tr[u].r<=r){\n        return tr[u].minn;\n    }\n    int mid=(tr[u].l+tr[u].r)>>1;\n    if(r<=mid) return query(ls,l,r);\n    else if(l>mid) return query(rs,l,r);\n    else{\n        int left=query(ls,l,r);\n        int right=query(rs,l,r);\n        return min(left,right);\n    }\n}\nvoid change(int u,int x,int v){\n    if(tr[u].l==tr[u].r){\n        tr[u].minn=v;\n        return;\n    }\n    int mid=(tr[u].l+tr[u].r)>>1;\n    if(x<=mid) change(ls,x,v);\n    else change(rs,x,v);\n    pushup(u);\n}\nvoid solve(){\n    cin>>n;\n    fill(cnt+1,cnt+1+n,0);\n    for(int i=1;i<=n;++i){\n        cin>>a[i];\n        cnt[a[i]]++;\n    }\n    for(int i=1;i<=n;++i){\n        cin>>b[i];\n        cnt[b[i]]--;\n    }\n    a[0]=a[n+1]=b[0]=b[n+1]=0;\n    for(int i=1;i<=n;++i){\n        if(!cnt[i]) continue;\n        cout<<\"NO\\n\";\n        return;\n    }\n    for(int i=1;i<=n;++i){\n        q[a[i]].push(i);\n    }\n    for(int i=1;i<=n;++i){\n        pos[i]=q[b[i]].front();\n        q[b[i]].pop();\n    }\n    build(1,1,n);\n    for(int i=1;i<=n;++i){\n        if(query(1,1,pos[i])!=b[i]){\n            cout<<\"NO\\n\";\n            return;\n        }\n        change(1,pos[i],INF);\n    }\n    cout<<\"YES\\n\";\n}\nsigned main(){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    int TestCase=1;\n    cin>>TestCase;\n    while(TestCase--){\n        solve();\n    }\n    return 0;\n}"
}