{
    "id": 231319540,
    "contestId": 1187,
    "creationTimeSeconds": 1699094887,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1187,
        "index": "D",
        "name": "Subarray Sorting",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "data structures",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1187,
        "members": [
            {
                "handle": "ZSR_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1561905900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 173,
    "timeConsumedMillis": 1107,
    "memoryConsumedBytes": 201011200,
    "source": "// LUOGU_RID: 133350041\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=3e5+10;\r\nint T,n;\r\nint cnt[N],a[N],b[N],pos[N];\r\nqueue<int> q[N];\r\nstruct Tree{\r\n    int l,r;\r\n    int minx;\r\n}tr[N<<2];\r\ninline void pushup(int p)\r\n{\r\n    tr[p].minx=min(tr[p<<1].minx,tr[p<<1|1].minx);\r\n}\r\nvoid build(int p,int inl,int inr)\r\n{\r\n    tr[p]={inl,inr};\r\n    if (inl==inr)\r\n    {\r\n        tr[p].minx=a[inl];\r\n        return;\r\n    }\r\n    int mid=inl+inr>>1;\r\n    build(p<<1,inl,mid);\r\n    build(p<<1|1,mid+1,inr);\r\n    pushup(p);\r\n}\r\nvoid modify(int p,int x)\r\n{\r\n    if (tr[p].l==tr[p].r)\r\n    {\r\n        tr[p].minx=0x3f3f3f3f;\r\n        return;\r\n    }\r\n    int mid=tr[p].l+tr[p].r>>1;\r\n    if (x<=mid) modify(p<<1,x);\r\n    else modify(p<<1|1,x);\r\n    pushup(p);\r\n}\r\nint query(int p,int x,int y)\r\n{\r\n    if (x<=tr[p].l&&tr[p].r<=y) return tr[p].minx;\r\n    int mid=tr[p].l+tr[p].r>>1;\r\n    int res=0x3f3f3f3f;\r\n    if (x<=mid) res=min(res,query(p<<1,x,y));\r\n    if (y>mid) res=min(res,query(p<<1|1,x,y));\r\n    return res;\r\n}\r\nint main()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cin>>T;\r\n    while (T--)\r\n    {\r\n        cin>>n;\r\n        for (int i=1;i<=n;++i) cnt[i]=0;\r\n        for (int i=1;i<=n;++i)\r\n        {\r\n            cin>>a[i];\r\n            ++cnt[a[i]];\r\n        }\r\n        for (int i=1;i<=n;++i)\r\n        {\r\n            cin>>b[i];\r\n            --cnt[b[i]];\r\n        }\r\n        bool flag=true;\r\n        for (int i=1;i<=n;++i) \r\n        {\r\n            if (cnt[i]) \r\n            {\r\n                flag=false;\r\n                break;\r\n            }\r\n        }\r\n        if (!flag)\r\n        {\r\n            cout<<\"NO\"<<endl;\r\n            continue;\r\n        }\r\n        for (int i=1;i<=n;++i) q[a[i]].push(i);\r\n        for (int i=1;i<=n;++i) pos[i]=q[b[i]].front(),q[b[i]].pop();\r\n        build(1,1,n);\r\n        for (int i=1;i<=n;++i)\r\n        {\r\n            if (query(1,1,pos[i])!=b[i]) \r\n            {\r\n                flag=false;\r\n                break;\r\n            }\r\n            modify(1,pos[i]);\r\n        }\r\n        if (!flag) cout<<\"NO\"<<endl;\r\n        else cout<<\"YES\"<<endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}