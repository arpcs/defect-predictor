{
    "id": 214541233,
    "contestId": 1032,
    "creationTimeSeconds": 1689802921,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1032,
        "index": "D",
        "name": "Barcelonian Distance",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1032,
        "members": [
            {
                "handle": "Abo_alzeek"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542557100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include<bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n\r\ntypedef long double T;\r\n\r\nstruct pt {\r\n    T x,y;\r\n\r\n    pt(T x, T y): x(x), y(y) {}\r\n    pt(): x(0), y(0) {}\r\n\r\n    pt operator+(pt p) {return {x+p.x, y+p.y};}\r\n    pt operator-(pt p) {return {x-p.x, y-p.y};}\r\n    pt operator*(T d) {return {x*d, y*d};}\r\n    pt operator/(T d) {return {x/d, y/d};} // only for floating-point\r\n};\r\n\r\nT cross(pt v, pt w) {return v.x*w.y - v.y*w.x;}\r\n\r\nstruct Line {\r\n    pt v; T c;\r\n\r\n    // From direction vector v and offset c\r\n    Line(pt v, T c) : v(v), c(c) {}\r\n\r\n    // From equation ax+by=c\r\n    Line(T a, T b, T c) : v({b,-a}), c(c) {}\r\n\r\n    // From points P and Q\r\n    Line(pt p, pt q) : v(q-p), c(cross(v,p)) {}\r\n\r\n    T side(pt p) {return cross(v,p)-c;}\r\n\r\n    pt operator^(Line l) {\r\n        pt out(-2e9, -1);\r\n        long double d = cross(this->v, l.v);\r\n\r\n        if (d == 0) return out;\r\n        out = (l.v * this->c - this->v * l.c) / d; // requires floating-point coordinates\r\n        return out;\r\n    }\r\n\r\n};\r\n\r\nint a, b, c;\r\n\r\nT calcDist(pt p1, pt p2) {\r\n    T ret = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);\r\n    ret = sqrt(ret);\r\n    return ret;\r\n}\r\n\r\nvoid solution() {\r\n    cin >> a >> b >> c;\r\n    Line L(a, b, -c);\r\n    pt beg, tar;\r\n    cin >> beg.x >> beg.y >> tar.x >> tar.y;\r\n\r\n    vector<pt> srcs, tars;\r\n\r\n    long double ans = abs(beg.x - tar.x) + abs(beg.y - tar.y);\r\n\r\n    pt p1 = {-1, 0}, p2 = {0, -1};\r\n    Line l1(beg, beg + p1);\r\n    srcs.push_back( l1 ^ L );\r\n\r\n    l1 = Line(beg, beg + p2);\r\n    srcs.push_back( l1 ^ L );\r\n\r\n    l1 = Line(tar, tar + p1);\r\n    tars.push_back( l1 ^ L );\r\n\r\n    l1 = Line(tar, tar + p2);\r\n    tars.push_back( l1 ^ L );\r\n\r\n\r\n    T temp = 0;\r\n    for(int i = 0;i < srcs.size();i++) {\r\n        if(srcs[i].x == -2e9) continue;\r\n        for(int j = 0;j < tars.size();j++) {\r\n            if(tars[j].x == -2e9) continue;\r\n\r\n            temp = calcDist(beg, srcs[i]) + calcDist(srcs[i], tars[j]) + calcDist(tars[j], tar);\r\n            ans = min(ans, temp);\r\n        }\r\n    }\r\n\r\n\r\n    cout << fixed << setprecision(10) << ans << '\\n';\r\n}\r\n\r\n/*\r\n\r\n*/\r\n\r\nbool inter(Line l1, Line l2, pt &out) {\r\n    long double d = cross(l1.v, l2.v);\r\n    if (d == 0) return false;\r\n\r\n    out = (l2.v*l1.c - l1.v*l2.c) / d; // requires floating-point coordinates\r\n    return true;\r\n}\r\n\r\n\r\nint main() {\r\n    //freopen(\"samples.txt\", \"r\", stdin);\r\n    ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);\r\n\r\n    int t = 1;\r\n//    cin >> t;\r\n    while(t--) {\r\n        solution();\r\n    }\r\n    return 0;\r\n}\r\n"
}