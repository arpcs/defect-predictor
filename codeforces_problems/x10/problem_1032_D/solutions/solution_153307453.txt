{
    "id": 153307453,
    "contestId": 1032,
    "creationTimeSeconds": 1649601590,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1032,
        "index": "D",
        "name": "Barcelonian Distance",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1032,
        "members": [
            {
                "handle": "bnu2020"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542557100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long double ld;\r\ntypedef long long   ll;\r\n\r\nld K(ld a){return a*a;}\r\n\r\nstruct P{\r\n  ld x, y;\r\n  void read() { cin >> x >> y; }\r\n  P  operator + (P b)  { return P{x+b.x, y+b.y}; }\r\n  P  operator - (P b)  { return P{x-b.x, y-b.y}; }\r\n  P  operator * (ll m) { return P{x*m, y*m};     }\r\n  ld operator * (P  b) { return x*b.y - y*b.x;   }\r\n  int operator == (P b){ return x==b.x && y==b.y;}\r\n  ld dot(P b)          { return x*b.x + y*b.y;   }\r\n  ld len()             { return sqrt(K(x)+K(y)); }\r\n  P  lenTo(ld to)      { return *this*(to/len());}\r\n  ld dist(P & b)       { return (*this-b).len(); }\r\n};\r\n\r\nint main() {\r\n  int a,b,c;\r\n  scanf(\"%d %d %d\",&a,&b,&c);\r\n  P A,B; A.read(); B.read();\r\n  ld ans = abs(A.x-B.x) + abs(A.y-B.y);\r\n  ld xa  = -(c+b*A.y)/(ld)a;\r\n  ld xb  = -(c+b*B.y)/(ld)a;\r\n  ld ya  = -(c+a*A.x)/(ld)b;\r\n  ld yb  = -(c+a*B.x)/(ld)b;\r\n  P a1 = {xa,A.y};\r\n  P a2 = {A.x,ya};\r\n  P b1 = {xb,B.y};\r\n  P b2 = {B.x,yb};\r\n  ans = min(ans,A.dist(a1)+a1.dist(b1)+b1.dist(B));\r\n  ans = min(ans,A.dist(a1)+a1.dist(b2)+b2.dist(B));\r\n  ans = min(ans,A.dist(a2)+a2.dist(b1)+b1.dist(B));\r\n  ans = min(ans,A.dist(a2)+a2.dist(b2)+b2.dist(B));\r\n  printf(\"%.10f\\n\",(double)ans);\r\n}\r\n"
}