{
    "id": 226837332,
    "contestId": 1032,
    "creationTimeSeconds": 1696577781,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1032,
        "index": "D",
        "name": "Barcelonian Distance",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1032,
        "members": [
            {
                "handle": "lAMaLOSER"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542557100
    },
    "programmingLanguage": "C# 10",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "using System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Scanner;\r\nusing System.Numerics;\r\nusing System.Geometry2D;\r\nusing System.Collections.Generic;\r\n\r\npublic class Program{ \r\n    public static void Main(){\r\n        Scanner sc = new Scanner();\r\n        #if !DEBUG\r\n        System.Console.SetOut(new System.IO.StreamWriter(\r\n            System.Console.OpenStandardOutput()\r\n        ) { AutoFlush = true });\r\n        #endif\r\n        \r\n        // int t = sc.i32();\r\n        int t = 1;\r\n        for(int i = 0; i < t; i++){\r\n            Solve();    \r\n        }\r\n        System.Console.Out.Flush();\r\n    }\r\n\r\n    const double eps = 1e-8;\r\n    const int N = (int)1e6 + 1;\r\n\r\n    public static void Solve(){\r\n        Scanner sc = new Scanner();\r\n        double a = sc.lf64(), b = sc.lf64(), c = sc.lf64();\r\n        double x1 = sc.lf64(), y1 = sc.lf64(), x2 = sc.lf64(), y2 = sc.lf64();\r\n\r\n        Point p = new Point();\r\n        if(y1 < y2){\r\n            (x1, y1, x2, y2) = (x2, y2, x1, y1);\r\n        }\r\n\r\n        double x3 = (-c - b * y1) / a, x4 = (-c - b * y2) / a;\r\n        double y3 = (-c - a * x2) / b, y4 = (-c - a * x1) / b;\r\n        Point s1 = new Point(x3, y1), s2 = new Point(x2, y3);\r\n        Point s3 = new Point(x1, y4), s4 = new Point(x4, y2);\r\n        \r\n        double ysy = Math.Abs(x3 - x1) + Math.Abs(y3 - y2) + p.GetLen(s1 - s2);\r\n        double uwu = Math.Abs(x4 - x2) + Math.Abs(y4 - y1) + p.GetLen(s3 - s4);\r\n        double qwq = Math.Abs(y2 - y1) + Math.Abs(x2 - x1);\r\n        Console.WriteLine(Math.Min(ysy, Math.Min(qwq, uwu)));\r\n    }\r\n}\r\n\r\nnamespace System.Geometry2D{\r\n    class Point{\r\n        public double x, y;\r\n        const double eps = 1e-6;\r\n        \r\n        public Point(){}\r\n        public Point(double x, double y){\r\n            this.x = x;\r\n            this.y = y;\r\n        }\r\n\r\n        public static Point operator+ (Point a, Point b){\r\n            return new Point(a.x + b.x, a.y + b.y);\r\n        }\r\n\r\n        public static Point operator- (Point a, Point b){\r\n            return new Point(a.x - b.x, a.y - b.y);\r\n        }\r\n\r\n        public static Point operator* (Point a, double t){\r\n            return new Point(a.x * t, a.y * t);\r\n        }\r\n\r\n        public static Point operator/ (Point a, double t){\r\n            return new Point(a.x / t, a.y / t);\r\n        }\r\n\r\n        public int Sign(double x){\r\n            if(Math.Abs(x) < eps) return 0;\r\n            if(x < 0) return -1;\r\n            return 1;\r\n        }\r\n\r\n        public bool Cmp(double x, double y){\r\n            if(Math.Abs(x - y) < eps) return false;\r\n            if(x < y) return false;\r\n            return true;\r\n        }\r\n\r\n        public bool Cmp(Point a, Point b){\r\n            return Cmp(a.x, b.x) && Cmp(a.y, b.y);\r\n        }\r\n        \r\n        public double Dot(Point a, Point b){\r\n            return a.x * b.x + a.y * b.y;\r\n        }\r\n\r\n        public double Cross(Point a, Point b){\r\n            return a.x * b.y - a.y * b.x;\r\n        }\r\n\r\n        public double GetLen(Point a){\r\n            return Math.Sqrt(Dot(a, a));\r\n        }\r\n\r\n        public double GetAngle(Point a, Point b){\r\n            return Math.Acos(Dot(a, b)) / GetLen(a) / GetLen(b);\r\n        }\r\n\r\n        public double Area(Point a, Point b, Point c){\r\n            return Cross(b - a, c - a);\r\n        }\r\n\r\n        public Point Rotate(Point a, double angle){\r\n            double dx = a.x * Math.Cos(angle) + a.y * Math.Sin(angle);\r\n            double dy = -a.x * Math.Sin(angle) + a.y * Math.Cos(angle);\r\n            return new Point(dx, dy);\r\n        }\r\n\r\n        public Point Intersect(Point p, Point v, Point q, Point w){\r\n            Point u = p - q;\r\n            double t = Cross(w, u) / Cross(v, w);\r\n            return p + v * t;\r\n        }\r\n\r\n        public double LineDist(Point a, Point b, Point p){\r\n            Point u = p - a, v = b - a;\r\n            return Math.Abs(Cross(u, v)) / GetLen(u);\r\n        }\r\n\r\n        public double SegDist(Point a, Point b, Point p){\r\n            if(Cmp(a, b)) return GetLen(p - a);\r\n            Point u = b - a, v = p - a, w = p - b;\r\n            if(Sign(Dot(u, v)) < 0) return GetLen(v);\r\n            if(Sign(Dot(u, w)) > 0) return GetLen(w);\r\n            return LineDist(a, b, p);\r\n        }\r\n\r\n        public Point Projection(Point a, Point b, Point p){\r\n            Point v = b - a;\r\n            return a + v * Dot(v, p - a) / GetLen(v);\r\n        }\r\n\r\n        public bool OnSegment(Point a, Point b, Point p){\r\n            bool u = Sign(Cross(p - a, p - b)) == 0;\r\n            bool v = Sign(Dot(p - a, p - b)) <= 0;\r\n            return u && v;\r\n        }\r\n\r\n        public bool SegIntersection(Point a1, Point a2, Point b1, Point b2){\r\n            double c1 = Cross(a2 - a1, b1 - a1), c2 = Cross(a2 - a1, b2 - a1);\r\n            double c3 = Cross(b2 - b1, a2 - b1), c4 = Cross(b2 - b1, a1 - b1);\r\n            return Sign(c1) * Sign(c2) <= 0 && Sign(c3) * Sign(c4) <= 0;\r\n        }\r\n    }\r\n}\r\n\r\nnamespace System.Scanner{\r\n    using E = System.Decimal;\r\n    using S = System.String;\r\n    using D = System.Double;\r\n    using T = System.Int32;\r\n    using L = System.Int64;\r\n    using C = System.Char;\r\n  \r\n    class Scanner{\r\n        private S[] line;\r\n        private T index;\r\n        private const C separator = ' ';\r\n        \r\n        public Scanner(){\r\n            line = new S[0];\r\n            index = 0;\r\n        }\r\n        \r\n        public S Next(){\r\n            if(index >= line.Length){\r\n                S s;\r\n                do{\r\n                    s = Console.ReadLine();\r\n                } while (s.Length == 0);\r\n                line = s.Split(separator);\r\n                index = 0;\r\n            }\r\n            return line[index++];\r\n        }\r\n        \r\n        public S ReadLine(){\r\n            index = line.Length;\r\n            return Console.ReadLine();\r\n        }\r\n        \r\n        public C Char() => Next()[0];\r\n        public T i32() => T.Parse(Next());\r\n        public L i64() => L.Parse(Next());\r\n        public D lf64() => D.Parse(Next());\r\n        public E lf128() => E.Parse(Next());\r\n        \r\n        public S[] Array(){\r\n            S s = Console.ReadLine();\r\n            line = s.Length == 0 ? new S[0] : s.Split(separator);\r\n            index = line.Length;\r\n            return line;\r\n        }\r\n        \r\n        public C[] Achar() => Next().ToCharArray();\r\n        public T[] Ai32() => Array().Select(T.Parse).ToArray();\r\n        public L[] Ai64() => Array().Select(L.Parse).ToArray();\r\n        public D[] Alf64() => Array().Select(D.Parse).ToArray();\r\n        public E[] Alf128() => Array().Select(E.Parse).ToArray();\r\n        \r\n        public void No(){ Console.WriteLine(\"NO\"); }\r\n        public void Yes(){ Console.WriteLine(\"YES\"); }\r\n    }\r\n}"
}