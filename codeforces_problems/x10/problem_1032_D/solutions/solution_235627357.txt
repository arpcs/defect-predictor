{
    "id": 235627357,
    "contestId": 1032,
    "creationTimeSeconds": 1701631776,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1032,
        "index": "D",
        "name": "Barcelonian Distance",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1900,
        "tags": [
            "geometry",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1032,
        "members": [
            {
                "handle": "fsi."
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1542557100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 21,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include<iostream>\n#include<algorithm>\n#include<iomanip>\n#include<vector>\n#include<map>\n#include<climits>\n#include<cmath>\n#include<unordered_map>\n#include<queue>\nusing namespace std;\nlong double disketras_algo(unordered_map<long double,vector<pair<long double,double>>>&G,long double source,long double destination,long double total_nodes){\n    priority_queue<pair<double,long double>,vector<pair<double,long double>>,greater<pair<double,long double>>>pq;\n    for(auto x:G[source]){\n        pq.push(make_pair(x.second,x.first));\n    }\n    vector<double>dis(total_nodes,INT_MAX);\n    dis[source]=0;\n    while(!pq.empty()){\n        long double node=pq.top().second;\n        long double dist_node=pq.top().first;\n        //cout<<dist_node<<\" \";\n        pq.pop();\n        if(dist_node<dis[node]){\n            dis[node]=dist_node;\n            for(auto x:G[node]){\n                if(x.second+dist_node<dis[x.first]){\n                    pq.push(make_pair(x.second+dist_node,x.first));\n                }\n            }\n        }\n    }\n    //cout<<\"The calcualted destination distance is \"<<dis[destination]<<endl;\n    return dis[destination];\n}\nlong double distance(long double x1,long double y1,long double x2, long double y2){\n    long double distance=abs(x1-x2)*abs(x1-x2)+abs(y1-y2)*abs(y1-y2);\n    //cout<< sqrt(distance)<<endl;\n    return sqrt(distance);\n}\nvoid addEdge(unordered_map<long double,vector<pair<long double,double>>>&G,long double node1,long double node2,long double x1,long double y1,long double x2,long double y2){\n    G[node1].push_back(make_pair(node2,distance(x1,y1,x2,y2)));\n    G[node2].push_back(make_pair(node1,distance(x1,y1,x2,y2)));\n}\nvoid f(){\n    long double a,b,c;cin>>a>>b>>c;\n    long double x1,y1,x2,y2;cin>>x1>>y1>>x2>>y2;\n    unordered_map<long double,vector<pair<long double,double>>>G;\n    G[1].push_back(make_pair(2,distance(x1,y1,x2,y1)));\n    G[2].push_back(make_pair(4,distance(x2,y1,x2,y2)));\n    G[4].push_back(make_pair(3,distance(x2,y2,x1,y2)));\n    G[3].push_back(make_pair(1,distance(x1,y2,x1,y1)));\n\n    G[2].push_back(make_pair(1,distance(x1,y1,x2,y1)));\n    G[4].push_back(make_pair(2,distance(x2,y1,x2,y2)));\n    G[3].push_back(make_pair(4,distance(x2,y2,x1,y2)));\n    G[1].push_back(make_pair(3,distance(x1,y2,x1,y1)));\n\n    pair<long double,long double> p1;\n    pair<long double,long double> p2;\n    double y=(double)(-1*(c+(double)a*x1)/(double)b);\n    if((y>=y1 and y<=y2) or (y>=y2 and y<=y1)){\n       p1=make_pair(x1,y);\n    }\n    y=(-1*(c+(long long)a*x2)/(double)b);\n    if((y>=y1 and y<=y2) or (y>=y2 and y<=y1)){\n       p2=make_pair(x2,y);\n    }\n\n    pair<long  double,long  double> p3;\n    pair<long  double,long  double> p4;\n    double x=(-1*(c+(long long )b*y1)/(double)a);\n    if((x>=x1 and x<=x2) or (x>=x2 and x<=x1)){\n       p3=make_pair(x,y1);\n    }\n    x=(-1*(c+(long long)b*y2)/(double)a);\n    if((x>=x1 and x<=x2) or (x>=x2 and x<=x1)){\n       p4=make_pair(x,y2);\n    }\n    // cout<<p1.first<<\" \"<<p1.second<<endl;\n    // cout<<p2.first<<\" \"<<p2.second<<endl;\n    // cout<<p3.first<<\" \"<<p3.second<<endl;\n    // cout<<p4.first<<\" \"<<p4.second<<endl;\n    pair<long double,pair<long double,long double>>ed_1;\n    pair<long double,pair<long double,long double>>ed_2;\n    if(p1!=pair<long double,long double >{}){\n        y=p1.second;\n        addEdge(G,1,5,x1,y1,x1,y);\n        addEdge(G,5,3,x1,y2,x1,y);\n        ed_1=make_pair(5,make_pair(x1,y));\n    }\n    if(p2!=pair<long double,long double>{}){\n        y=p2.second;\n        addEdge(G,2,6,x2,y1,x2,y);\n        addEdge(G,4,6,x2,y2,x2,y);\n        if(ed_1==pair<long double,pair<long double,long double>>{}){\n            ed_1=make_pair(6,make_pair(x2,y));\n        }\n        else{\n            ed_2=make_pair(6,make_pair(x2,y));\n        }\n    }\n    if(p3!=pair<long double,long double>{}){\n        x=p3.first;\n        addEdge(G,1,7,x1,y1,x,y1);\n        addEdge(G,2,7,x2,y1,x,y1);\n        if(ed_1==pair<long double,pair<long double,long double>>{}){\n            ed_1=make_pair(7,make_pair(x,y1));\n        }\n        else{\n            ed_2=make_pair(7,make_pair(x,y1));\n        }\n    }\n    if(p4!=pair<long double,long double>{}){\n        x=p4.first;\n        addEdge(G,3,8,x1,y2,x,y2);\n        addEdge(G,4,8,x2,y2,x,y2);\n        if(ed_1==pair<long double,pair<long double,long double>>{}){\n            ed_1=make_pair(8,make_pair(x,y2));\n        }\n        else{\n            ed_2=make_pair(8,make_pair(x,y2));\n        }\n    }\n    //cout<<\"Prlong doubleing the ed_values \"<<ed_1.second.first<<\" \"<<ed_1.second.second<<\" and it is node \"<<ed_1.first<<endl;\n    //cout<<\"Prlong doubleing the ed_values \"<<ed_2.second.first<<\" \"<<ed_2.second.second<<\" and it is node \"<<ed_2.first<<endl;\n    addEdge(G,ed_1.first,ed_2.first,ed_1.second.first,ed_1.second.second,ed_2.second.first,ed_2.second.second);\n    long double source=1;\n    long double destination=4;\n    cout<<setprecision(15)<<(disketras_algo(G,source,destination,9))<<endl;\n    // for(auto x:G){\n    //     for(auto y:x.second){\n    //         cout<<x.first<<\"-\"<<y.first<<\"::\"<<y.second<<endl;\n    //     }\n    // }\n}\n\n int main(){\n    // freopen(\"input.txt\", \"r\", stdin);\n    // freopen(\"output.txt\", \"w\", stdout);\n    // long double t;cin>>t;\n    // while(t--){\n    //     f();\n    // }\n    f();\n}"
}