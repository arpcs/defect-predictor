{
    "id": 233605757,
    "contestId": 1389,
    "creationTimeSeconds": 1700503762,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1389,
        "index": "C",
        "name": "Good String",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "brute force",
            "dp",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1389,
        "members": [
            {
                "handle": "DarkShadoww"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1596033300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 9,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 16588800,
    "source": "#include<bits/stdc++.h>\r\n\r\nusing namespace std;\r\n// TYPEDEFS\r\ntypedef pair<int,int> pi;\r\ntypedef long long ll;\r\ntypedef vector<vector<int>> vvi;\r\ntypedef vector<int> vi;\r\ntypedef unordered_map<int,int> umi;\r\n\r\n// DEFINES\r\n#define f(i,k,n) for(int i=k;i<n;i++)\r\n#define pb push_back\r\n#define all(x) x.begin(),x.end()\r\n#define invec(v,n) for(int i=0;i<n;i++)cin>>v[i];\r\n\r\n// VALUES\r\nconst int MOD = 1e9+7;\r\nconst ll inf=1e18;\r\nconst int mxn=1e6+10,mod=1e9+7;\r\nconst double eps=1e-8;\r\nll a[mxn],dp[mxn];\r\n// FUNCTIONS\r\nvoid fast()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n}\r\n\r\n\r\nvoid solve(){\r\nstring s;\r\ncin>>s;\r\nint a=0;\r\nf(i,0,10)\r\n    f(j,0,10){\r\n    int l = 0 ,c = i;\r\n    f(k,0,s.size()){\r\n        if(s[k] == c+'0'){\r\n            l++;\r\n            c = (c==i)?j:i;\r\n        }\r\n    }\r\n    if(i!=j && (l&1)) --l;\r\n    a = max(a,l);\r\n    }\r\ncout<<s.size()-a<<endl;\r\n\r\n}\r\n\r\nint main(){fast();\r\nint t=1;cin>>t; while(t--)solve(); return 0;}\r\n\r\n\r\n\r\n\r\n/*\r\nRough Work\r\n=============================\r\n 4 1 2\r\n\r\n==============================\r\n*/"
}