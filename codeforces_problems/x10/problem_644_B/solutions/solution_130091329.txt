{
    "id": 130091329,
    "contestId": 644,
    "creationTimeSeconds": 1632834737,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 644,
        "index": "B",
        "name": "Processing Queries",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1700,
        "tags": [
            "*special",
            "constructive algorithms",
            "data structures",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 644,
        "members": [
            {
                "handle": "Reisen_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1458118800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 37683200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll long long\r\n#define FAST ios::sync_with_stdio(false)\r\n#define inf 0x3f3f3f3f\r\n#define rep(i,a,b) for(int i=a;i<=b;i++)\r\nconst int N=2e6+7;\r\nconst int M=1e3+7;\r\nstruct node\r\n{\r\n    ll t,d;\r\n}e[N];\r\nint main(){\r\n    int n,b;\r\n    queue<ll>q,qs;\r\n    scanf(\"%d%d\",&n,&b);\r\n    rep(i,1,n){\r\n        scanf(\"%lld%lld\",&e[i].t,&e[i].d);\r\n    }\r\n    ll st=e[1].t;\r\n    int num=0;\r\n    rep(i,1,n){\r\n        while(q.size()&&q.front()<=e[i].t){\r\n            printf(\"%lld \",q.front());\r\n            num++;\r\n            while (qs.front()==num+1){\r\n                qs.pop();\r\n                printf(\"-1 \");\r\n                num++;\r\n            }\r\n            q.pop();\r\n        }\r\n        if(q.size()<=b){\r\n            q.push(st+e[i].d);\r\n            st+=e[i].d;\r\n        }else{\r\n            qs.push(i);\r\n        }\r\n    }\r\n    while (q.size()){\r\n        printf(\"%lld \",q.front());\r\n        num++;\r\n        while (qs.front()==num+1){\r\n            qs.pop();\r\n            printf(\"-1 \");\r\n            num++;\r\n        }\r\n        q.pop();\r\n    }\r\n    return 0;\r\n}"
}