{
    "contestId": 1549,
    "index": "B",
    "name": "Gregor and the Pawn Game",
    "type": "PROGRAMMING",
    "points": 750.0,
    "rating": 800,
    "tags": [
        "dfs and similar",
        "dp",
        "flows",
        "graph matchings",
        "graphs",
        "greedy",
        "implementation"
    ],
    "desc": {
        "title": "B. Gregor and the Pawn Game",
        "statement": "<p>There is a chessboard of size $$$n$$$ by $$$n$$$. The square in the $$$i$$$-th row from top and $$$j$$$-th column from the left is labelled $$$(i,j)$$$.</p><p>Currently, Gregor has some pawns in the $$$n$$$-th row. There are also enemy pawns in the $$$1$$$-st row. On one turn, Gregor moves one of <span class=\"tex-font-style-bf\">his</span> pawns. A pawn can move one square up (from $$$(i,j)$$$ to $$$(i-1,j)$$$) if there is no pawn in the destination square. Additionally, a pawn can move one square diagonally up (from $$$(i,j)$$$ to either $$$(i-1,j-1)$$$ or $$$(i-1,j+1)$$$) if and only if there is an enemy pawn in that square. The enemy pawn is also removed.</p><p>Gregor wants to know what is the maximum number of his pawns that can reach row $$$1$$$?</p><p>Note that only Gregor takes turns in this game, and <span class=\"tex-font-style-bf\">the enemy pawns never move</span>. Also, when Gregor's pawn reaches row $$$1$$$, it is stuck and cannot make any further moves.</p>",
        "inputSpecification": "<p>The first line of the input contains one integer $$$t$$$ ($$$1\\le t\\le 2\\cdot 10^4$$$) \u2014 the number of test cases. Then $$$t$$$ test cases follow.</p><p>Each test case consists of three lines. The first line contains a single integer $$$n$$$ ($$$2\\le n\\le 2\\cdot{10}^{5}$$$) \u2014 the size of the chessboard.</p><p>The second line consists of a string of binary digits of length $$$n$$$, where a $$$1$$$ in the $$$i$$$-th position corresponds to an enemy pawn in the $$$i$$$-th cell from the left, and $$$0$$$ corresponds to an empty cell.</p><p>The third line consists of a string of binary digits of length $$$n$$$, where a $$$1$$$ in the $$$i$$$-th position corresponds to a Gregor's pawn in the $$$i$$$-th cell from the left, and $$$0$$$ corresponds to an empty cell.</p><p>It is guaranteed that the sum of $$$n$$$ across all test cases is less than $$$2\\cdot{10}^{5}$$$.</p>",
        "outputSpecification": "<p>For each test case, print one integer: the <span class=\"tex-font-style-bf\">maximum</span> number of Gregor's pawns which can reach the $$$1$$$-st row.</p>",
        "samples": [
            {
                "input": "\n4\n3\n000\n111\n4\n1111\n1111\n3\n010\n010\n5\n11001\n00000\n",
                "output": "\n3\n4\n0\n0\n"
            }
        ],
        "note": "<p>In the first example, Gregor can simply advance all $$$3$$$ of his pawns forward. Thus, the answer is $$$3$$$.</p><p>In the second example, Gregor can guarantee that all $$$4$$$ of his pawns reach the enemy row, by following the colored paths as demonstrated in the diagram below. Remember, only Gregor takes turns in this \"game\"!</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/5dbd9e96aeedcca2acd1fc9a09d25f4f7f4fd27b.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"302px\"/> </center><p>In the third example, Gregor's only pawn is stuck behind the enemy pawn, and cannot reach the end.</p><p>In the fourth example, Gregor has no pawns, so the answer is clearly $$$0$$$.</p>"
    }
}