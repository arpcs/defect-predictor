{
    "id": 226420498,
    "contestId": 1549,
    "creationTimeSeconds": 1696328159,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1549,
        "index": "B",
        "name": "Gregor and the Pawn Game",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 800,
        "tags": [
            "dfs and similar",
            "dp",
            "flows",
            "graph matchings",
            "graphs",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1549,
        "members": [
            {
                "handle": "Debayon619"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1627828500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 3481600,
    "source": "#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\n#include<vector>\r\n\r\nusing namespace std;\r\n\r\nint main(){\r\n    int n;\r\n    scanf(\"%d\",&n);\r\n    for(int j=0;j<n;j++){\r\n        int size=0;\r\n        scanf(\"%d\",&size);\r\n        char *ep=NULL;\r\n        char *gp=NULL;\r\n        ep = (char *)malloc(size*sizeof(char));\r\n        gp = (char *)malloc(size*sizeof(char));\r\n        // int *enemy_pawns = (int *)malloc(size*sizeof(int));\r\n        // int *gregor_pawns = (int *)malloc(size*sizeof(int));\r\n        std::vector<int> en_p;\r\n        std::vector<int> gr_p;\r\n\r\n        scanf(\"%s\",ep);\r\n        scanf(\"%s\",gp);\r\n    \r\n        for(int i=0;i<size;i++){\r\n            // *(enemy_pawns+i)=ep[i]-48;\r\n            en_p.push_back(ep[i]-48);\r\n        }\r\n        for(int i=0;i<size;i++){\r\n            // *(gregor_pawns+i)=gp[i]-48;\r\n            gr_p.push_back(gp[i]-48);\r\n        }\r\n        \r\n        //--------LOGIC--------\r\n        int count=0;\r\n        for(int i=0;i<size;i++){\r\n            if(gr_p[i]!=0){\r\n                if(i-1>=0 && en_p[i-1]==1){\r\n                    en_p[i-1]=-1;\r\n                    count++;\r\n                }\r\n                else if(en_p[i]==0){\r\n                    en_p[i]=-1;\r\n                    count++;\r\n                }\r\n                else if(i+1<size && en_p[i+1]==1){\r\n                    en_p[i+1]=-1;\r\n                    count++;\r\n                }\r\n            }    \r\n        }\r\n        // free(enemy_pawns);\r\n        // free(gregor_pawns);\r\n        printf(\"\\n%d\",count);\r\n        //--------LOGIC--------\r\n    }\r\n    return 0;\r\n}\r\n"
}