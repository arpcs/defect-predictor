{
    "id": 225253240,
    "contestId": 1268,
    "creationTimeSeconds": 1695729944,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1268,
        "index": "D",
        "name": "Invertation in Tournament",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 3200,
        "tags": [
            "brute force",
            "divide and conquer",
            "graphs",
            "math"
        ]
    },
    "author": {
        "contestId": 1268,
        "members": [
            {
                "handle": "yaoxi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1576926300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 123,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 4096000,
    "source": "// LUOGU_RID: 126229720\n#include <bits/stdc++.h>\nusing namespace std;\n#define debug(fmt, ...) \\\n  fprintf(stderr, \"[%d] : \" fmt \"\\n\", __LINE__, ##__VA_ARGS__)\nbool Mbe;\nusing ll = long long;\nconstexpr int N = 2e3 + 10;\nint n, id[N], deg[N];\nbool g[N][N];\nvoid flip_single(int it) {\n  deg[it] = n - deg[it] - 1;\n  for (int i = 1; i <= n; ++i) {\n    if (i == it) continue;\n    deg[i] -= g[i][it], g[i][it] ^= 1, g[it][i] ^= 1, deg[i] += g[i][it];\n  }\n  sort(id + 1, id + n + 1, [&](int p, int q) { return deg[p] < deg[q]; });\n}\nbool check(const vector<int>& rev) {\n  bool ret = true;\n  for (auto it : rev) flip_single(it);\n  for (int i = 1, s = 0, t = 0; i < n; ++i)\n    s += deg[id[i]], t += i - 1, ret &= s != t;\n  for (auto it : rev) flip_single(it);\n  return ret;\n}\nbool Med;\nint main() {\n  // debug(\"Mem: %.4lfMB.\", fabs(&Med - &Mbe) / 1048576);\n  cin.tie(0)->sync_with_stdio(0);\n  cin >> n;\n  for (int i = 1; i <= n; ++i) {\n    string str;\n    cin >> str;\n    for (int j = 1; j <= n; ++j) g[i][j] = str[j - 1] - '0', deg[i] += g[i][j];\n  }\n  iota(id + 1, id + n + 1, 1);\n  sort(id + 1, id + n + 1, [&](int p, int q) { return deg[p] < deg[q]; });\n  if (check({})) return cout << \"0 1\\n\", 0;\n  int ans = -1, num = 0;\n  for (int i = 1; i <= n; ++i) if (check({i})) ++num;\n  if (num) return cout << \"1 \" << num << '\\n', 0;\n  for (int s = 0; s < (1 << n); ++s) {\n    vector<int> msk;\n    for (int i = 0; i < n; ++i) if (s >> i & 1) msk.push_back(i + 1);\n    if (check(msk)) {\n      int pc = __builtin_popcount(s);\n      if (ans == -1 || pc < ans) {\n        ans = pc, num = 1;\n      } else if (pc == ans) {\n        ++num;\n      }\n    }\n  }\n  if (ans == -1) return cout << ans << '\\n', 0;\n  for (int i = 1; i <= ans; ++i) num *= i;\n  cout << ans << ' ' << num << '\\n';\n  return 0;\n}"
}