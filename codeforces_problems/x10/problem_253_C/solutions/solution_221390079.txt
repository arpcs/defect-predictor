{
    "id": 221390079,
    "contestId": 253,
    "creationTimeSeconds": 1693527475,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 253,
        "index": "C",
        "name": "Text Editor",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1600,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths"
        ]
    },
    "author": {
        "contestId": 253,
        "members": [
            {
                "handle": "omar2017"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1354960800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n\r\n#define PI 3.14159265359\r\n\r\n#define OMAR ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n\r\n#define yes cout << \"YES\" << endl\r\n#define  no cout << \"NO\" << endl\r\n\r\n#define endl '\\n'\r\n\r\ntypedef long long ll;\r\n\r\n\r\nqueue<pair<int, int>>q;\r\nset<pair<int, int>> visited;\r\n//vector<int> parent(1e5,  -1);\r\n\r\nbool isVisited(pair<int, int> pos){\r\n    if(visited.find(pos) != visited.end())\r\n        return true;\r\n    return false;\r\n}\r\n\r\nint main(){\r\n    OMAR;\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    int n;\r\n    cin >> n;\r\n\r\n    int lastPos[n+1];\r\n\r\n    for(int i = 1;i <= n; i++){\r\n        cin >> lastPos[i];\r\n        lastPos[i]++;\r\n    }\r\n\r\n    int r1, c1, r2, c2;\r\n    cin >> r1 >> c1 >> r2 >> c2;\r\n\r\n    int ans = 1e6;\r\n\r\n    for(int i = 1;i <= min(r1, r2); i++){\r\n        int minLine = c1;\r\n        for(int j = i;j <= max(r1, r2); j++){\r\n            minLine = min(minLine, lastPos[j]);\r\n        }\r\n        int len = abs(i - min(r1, r2))*2 + abs(r1 - r2) + abs(minLine - c2);\r\n        ans  = min(ans, len);\r\n    }\r\n\r\n    for(int i = n;i >= max(r1, r2) + 1; i--){\r\n        int minLine = c1;\r\n        for(int j = i;j >= min(r1, r2); j--){\r\n            minLine = min(minLine, lastPos[j]);\r\n        }\r\n        int len = (i - max(r1, r2))*2 + abs(r2 - r1) + abs(minLine - c2);\r\n        ans = min(ans, len);\r\n    }\r\n\r\n    cout << ans << endl;\r\n\r\n}\r\n"
}