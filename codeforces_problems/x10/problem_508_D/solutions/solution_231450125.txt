{
    "id": 231450125,
    "contestId": 508,
    "creationTimeSeconds": 1699181773,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 508,
        "index": "D",
        "name": "Tanya and Password",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 508,
        "members": [
            {
                "handle": "dmgal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422376200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 529,
    "memoryConsumedBytes": 47001600,
    "source": "#include <bits/stdc++.h>\n\nusing std::cin;\nusing std::cout;\n\nusing std::vector;\nusing std::string;\n\nusing std::swap;\nusing std::abs;\n\nusing ll = long long;\nusing ull = unsigned long long;\nusing pint = std::pair<int,int>;\nusing pl = std::pair<ll, ll>;\nusing pc = std::pair<char, char>;\n\n/*\nstd::ifstream in(\"avia.in\");\nstd::ofstream out(\"avia.out\");\n*/\n\nstd::map<pc, std::multiset<pc>> gr;\nstd::map<pc, std::multiset<pc>> rgr;\nstd::map<pc, int> was;\n\nvector<pc> estrings;\n\nvoid dfs(pc t){\n    was[t]=1;\n\n    for(pc j: gr[t]){\n        if(was[j]) continue;\n        dfs(j);\n    }\n}\n\nvoid euler(pc t){\n    while(gr[t].size()){\n        pc j = *gr[t].begin();\n        gr[t].erase(gr[t].begin());\n        euler(j);\n    }\n    estrings.push_back(t);\n};\n\nvoid solve(){\n\n    int n; cin >> n;\n\n    vector<string> a(n);\n\n    for(int i=0;i<n;++i){\n        cin >> a[i];\n    }\n\n    vector<pc> strings;\n\n    for(int i=0;i<n;++i){\n        if(gr.find({a[i][0],a[i][1]})==gr.end()){\n            gr[{a[i][0],a[i][1]}]=std::multiset<pc>();\n            rgr[{a[i][0],a[i][1]}]=std::multiset<pc>();\n            strings.push_back({a[i][0],a[i][1]});\n        }\n        if(gr.find({a[i][1],a[i][2]})==gr.end()){\n            gr[{a[i][1],a[i][2]}]=std::multiset<pc>();\n            rgr[{a[i][1],a[i][2]}]=std::multiset<pc>();\n            strings.push_back({a[i][1],a[i][2]});\n\n        }\n        gr[{a[i][0],a[i][1]}].insert({a[i][1],a[i][2]});\n        rgr[{a[i][1],a[i][2]}].insert({a[i][0],a[i][1]});\n    }\n\n    int odd=0;\n    pc start = {a[0][0], a[0][1]};\n    pc end = {a[0][0], a[0][1]};\n\n    bool flag=false;\n\n    for(pc & ch: strings){\n        if(gr[ch].size()!=rgr[ch].size()){\n            ++odd;\n            if(abs(int(gr[ch].size())-int(rgr[ch].size()))>1){\n                flag=true;\n                break;\n            }\n            if(gr[ch].size()>rgr[ch].size()){\n                start=ch;\n            }\n            else{\n                end=ch;\n            }\n        }\n        was[ch]=0;\n    }\n\n    dfs(start);\n\n    for(pc & ch: strings){\n        if(was[ch]==0){\n            flag=true;\n            break;\n        }\n    }\n\n    if(flag or odd>2){\n        cout << \"NO\";\n        return;\n    }\n\n    euler(start);\n\n    std::reverse(estrings.begin(), estrings.end());\n\n    cout << \"YES\\n\";\n\n    cout << estrings[0].first;\n    for(int i=0;i<estrings.size();++i){\n        cout << estrings[i].second;\n    }\n\n\n}\n\nint main() {\n\n    std::ios_base::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n\n    solve();\n\n}"
}