{
    "id": 232295746,
    "contestId": 508,
    "creationTimeSeconds": 1699647326,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 508,
        "index": "D",
        "name": "Tanya and Password",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 508,
        "members": [
            {
                "handle": "VAntonuk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1422376200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 44,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 85811200,
    "source": "//#pragma GCC optimize(\"Ofast,unroll-loops\")\r\n//#pragma GCC target(\"avx2\")\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nusing ll = long long;\r\nconst ll nMax = 1e6 + 228, mod = 1e9 + 7;\r\nusing num = ll;\r\nmultiset<int> g[nMax];\r\nint in[nMax], out[nMax];\r\nint s[nMax];\r\nvector<int> order;\r\nvoid dfs(int v) {\r\n    while (g[v].size()) {\r\n        auto u = *g[v].begin();\r\n        g[v].erase(g[v].begin());\r\n        dfs(u);\r\n    }\r\n    order.push_back(v);\r\n}\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n    for (int i = 0; i < n; i++) {\r\n        string s;\r\n        cin >> s;\r\n        g[s[0] * 128 + s[1]].insert(s[1] * 128 + s[2]);\r\n        in[s[1] * 128 + s[2]]++;\r\n        out[s[0] * 128 + s[1]]++;\r\n    }\r\n    bool inT = false, outT = false;\r\n    for (int i = 0; i < nMax; i++) {\r\n        if (in[i] == out[i])continue;\r\n        if (in[i] + 1 == out[i]) {\r\n            if (inT) {\r\n                cout << \"NO\";\r\n                return;\r\n            }\r\n            inT = true;\r\n            continue;\r\n        }\r\n        if (out[i] + 1 == in[i]) {\r\n            if (outT) {\r\n                cout << \"NO\";\r\n                return;\r\n            }\r\n            outT = true;\r\n            continue;\r\n        }\r\n        cout << \"NO\";\r\n        return;\r\n    }\r\n    for (int i = 0; i < nMax; i++) {\r\n        if (!out[i])continue;\r\n        if (out[i] < in[i])continue;\r\n        if (in[i] < out[i] || !inT) {\r\n            dfs(i);\r\n            break;\r\n        }\r\n    }\r\n    if (order.size() != n + 1) {\r\n        cout << \"NO\\n\";\r\n        return;\r\n    }\r\n    cout << \"YES\\n\";\r\n\r\n    reverse(order.begin(), order.end());\r\n    cout << char(order.front() / 128);\r\n    for (int i = 0; i < order.size(); i++) {\r\n        // cout << char(order[i] / 30 + 'a');\r\n        cout << char(order[i] % 128);\r\n    }\r\n}\r\n\r\nsigned main() {\r\n#ifdef VANT\r\n#ifdef FILE_TEST\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n#else\r\n    setvbuf(stdout, NULL, _IONBF, 0);\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n#endif\r\n    int q = 1;\r\n    //cin >> q;\r\n    while (q--) {\r\n        solve();\r\n        // cout << endl;\r\n    }\r\n    return 0;\r\n}\r\n"
}