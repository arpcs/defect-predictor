{
    "id": 232950009,
    "contestId": 61,
    "creationTimeSeconds": 1700129155,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 61,
        "index": "D",
        "name": "Eternal Victory",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1800,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 61,
        "members": [
            {
                "handle": "yasaswini0703"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1298390400
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "import heapq\r\n\r\ndef find_minimal_travel(n, roads):\r\n    graph = {i: [] for i in range(1, n + 1)}\r\n\r\n    for road in roads:\r\n        x, y, w = road\r\n        graph[x].append((y, w))\r\n        graph[y].append((x, w))\r\n\r\n    visited = set()\r\n    min_heap = [(0, 1)]  # (distance, city)\r\n    total_distance = 0\r\n\r\n    while min_heap:\r\n        distance, current_city = heapq.heappop(min_heap)\r\n\r\n        if current_city not in visited:\r\n            visited.add(current_city)\r\n            total_distance += distance\r\n\r\n            for neighbor, neighbor_distance in graph[current_city]:\r\n                heapq.heappush(min_heap, (neighbor_distance, neighbor))\r\n\r\n    return total_distance\r\n\r\n# Input\r\nn = int(input())\r\nroads = []\r\nfor _ in range(n - 1):\r\n    road = list(map(int, input().split()))\r\n    roads.append(road)\r\n\r\n# Output\r\nresult = find_minimal_travel(n, roads)\r\nprint(result)"
}