{
    "id": 230404311,
    "contestId": 61,
    "creationTimeSeconds": 1698600994,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 61,
        "index": "D",
        "name": "Eternal Victory",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1800,
        "tags": [
            "dfs and similar",
            "graphs",
            "greedy",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 61,
        "members": [
            {
                "handle": "abaitc"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1298390400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 56,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 4915200,
    "source": "#include <iostream>\r\n#include <vector>\r\n\r\nusing namespace std;\r\nint n;\r\nconst int N_MAX = 1e5+5;\r\ntypedef long long ll;\r\ntypedef pair<int, int> pii; // first one is node, second one is length\r\nvector<pii> adj[N_MAX];\r\nll dist[N_MAX]; // the dist of u to 1\r\n// dfs is goint to calcaulate the longest branch\r\nvoid dfs(int u, int pa) {\r\n  ll lb = 0;\r\n  for(auto p : adj[u]) { // get all neiborhours\r\n    int v = p.first, w = p.second;\r\n    if(v != pa) { // skip the parent\r\n      dfs(v, u); // dfs first, calculate the branch first\r\n      lb = max(lb, dist[v] + w);\r\n    }\r\n  }\r\n  dist[u] = lb;\r\n}\r\n\r\nint main()\r\n{\r\n  cin >> n;\r\n  ll tot = 0;\r\n  for(int i=0; i<n-1; i++) {\r\n    int x, y, w;\r\n    cin >> x >> y >> w;\r\n    adj[x].push_back({y, w});\r\n    adj[y].push_back({x, w});\r\n    tot += w;\r\n  }\r\n  dist[1] = 0; // you are starting from 1\r\n  dfs(1, -1);\r\n  cout << tot * 2 - dist[1] << endl;\r\n}"
}