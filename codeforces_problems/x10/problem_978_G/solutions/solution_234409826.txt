{
    "id": 234409826,
    "contestId": 978,
    "creationTimeSeconds": 1700999781,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 978,
        "index": "G",
        "name": "Petya's Exams",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "greedy",
            "implementation",
            "sortings"
        ]
    },
    "author": {
        "contestId": 978,
        "members": [
            {
                "handle": "wcpeter"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1526202300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 77,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <cstdio> \r\n#include <vector>\r\n#include <algorithm>\r\n\r\nstruct sdc\r\n{\r\n    int start;\r\n    int end;\r\n    int arr;\r\n    int latestStart;\r\n    int index;\r\n};\r\n\r\nsdc exam[128];\r\n\r\nint main()\r\n{\r\n    int n, m;\r\n    scanf(\"%d %d\", &n, &m);\r\n\r\n    std::vector<int> arranges;\r\n\r\n    for (int i = 0; i < m; i++)\r\n    {\r\n        int s, d, c;\r\n        scanf(\"%d %d %d\", &exam[i].start, &exam[i].end, &exam[i].arr);\r\n        exam[i].latestStart = exam[i].end - exam[i].arr;\r\n        exam[i].index = i + 1;\r\n    }\r\n\r\n    std::sort(&exam[0], &exam[m], [](const sdc& a, const sdc& b) { return a.latestStart < b.latestStart; });\r\n\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        bool rest = true;\r\n\r\n        for (int j = 0; j < m; j++)\r\n        {\r\n            if (i == exam[j].end)\r\n            {\r\n                if (exam[j].arr > 0)\r\n                {\r\n                    printf(\"-1\");\r\n                    return 0;\r\n                }\r\n\r\n                if (exam[j].arr == 0)\r\n                {\r\n                    arranges.push_back(m + 1);\r\n                    rest = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rest)\r\n        {\r\n            for (int j = 0; j < m; j++)\r\n            {\r\n                if (i >= exam[j].start && i < exam[j].end)\r\n                {\r\n                    if (exam[j].arr == 0)\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    exam[j].arr--;\r\n                    exam[j].latestStart++;\r\n                    arranges.push_back(exam[j].index);\r\n                    rest = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (rest)\r\n        {\r\n            arranges.push_back(0);\r\n        }\r\n\r\n        std::sort(&exam[0], &exam[m], [](const sdc &a, const sdc &b) { return a.latestStart < b.latestStart; });\r\n    }\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d \", arranges[i]);\r\n    }\r\n    \r\n    return 0;\r\n}\r\n"
}