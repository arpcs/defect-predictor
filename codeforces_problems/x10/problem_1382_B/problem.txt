{
    "contestId": 1382,
    "index": "B",
    "name": "Sequential Nim",
    "type": "PROGRAMMING",
    "points": 1250.0,
    "rating": 1100,
    "tags": [
        "dp",
        "games"
    ],
    "desc": {
        "title": "B. Sequential Nim",
        "statement": "<p>There are $$$n$$$ piles of stones, where the $$$i$$$-th pile has $$$a_i$$$ stones. Two people play a game, where they take alternating turns removing stones.</p><p>In a move, a player may remove a positive number of stones from the <span class=\"tex-font-style-bf\">first non-empty pile</span> (the pile with the minimal index, that has at least one stone). The first player who cannot make a move (because all piles are empty) loses the game. If both players play optimally, determine the winner of the game.</p>",
        "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1\\le t\\le 1000$$$) \u00a0\u2014 the number of test cases. Next $$$2t$$$ lines contain descriptions of test cases.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$1\\le n\\le 10^5$$$) \u00a0\u2014 the number of piles.</p><p>The second line of each test case contains $$$n$$$ integers $$$a_1,\\ldots,a_n$$$ ($$$1\\le a_i\\le 10^9$$$) \u00a0\u2014 $$$a_i$$$ is equal to the number of stones in the $$$i$$$-th pile.</p><p>It is guaranteed that the sum of $$$n$$$ for all test cases does not exceed $$$10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, if the player who makes the first move will win, output \"<span class=\"tex-font-style-tt\">First</span>\". Otherwise, output \"<span class=\"tex-font-style-tt\">Second</span>\".</p>",
        "samples": [
            {
                "input": "\n7\n3\n2 5 4\n8\n1 1 1 1 1 1 1 1\n6\n1 2 3 4 5 6\n6\n1 1 2 1 2 2\n1\n1000000000\n5\n1 2 2 1 1\n3\n1 1 1\n",
                "output": "\nFirst\nSecond\nSecond\nFirst\nFirst\nSecond\nFirst\n"
            }
        ],
        "note": "<p>In the first test case, the first player will win the game. His winning strategy is: </p><ol> <li> The first player should take the stones from the first pile. He will take $$$1$$$ stone. The numbers of stones in piles will be $$$[1, 5, 4]$$$. </li><li> The second player should take the stones from the first pile. He will take $$$1$$$ stone because he can't take any other number of stones. The numbers of stones in piles will be $$$[0, 5, 4]$$$. </li><li> The first player should take the stones from the second pile because the first pile is empty. He will take $$$4$$$ stones. The numbers of stones in piles will be $$$[0, 1, 4]$$$. </li><li> The second player should take the stones from the second pile because the first pile is empty. He will take $$$1$$$ stone because he can't take any other number of stones. The numbers of stones in piles will be $$$[0, 0, 4]$$$. </li><li> The first player should take the stones from the third pile because the first and second piles are empty. He will take $$$4$$$ stones. The numbers of stones in piles will be $$$[0, 0, 0]$$$. </li><li> The second player will lose the game because all piles will be empty. </li></ol>"
    }
}