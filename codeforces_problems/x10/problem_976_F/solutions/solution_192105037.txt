{
    "id": 192105037,
    "contestId": 976,
    "creationTimeSeconds": 1675490606,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 976,
        "index": "F",
        "name": "Minimal k-covering",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 976,
        "members": [
            {
                "handle": "Dr_Gilbert"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1525099200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 26214400,
    "source": "#include <bits/stdc++.h>\r\n#define pb push_back\r\n#define INF 0x3f3f3f3f\r\nusing namespace std;\r\nconst int N=2e5+5;\r\nint n1,n2,m,v[N],w[N],nxt[N],head[N],id[N],cnt=1,de[N],S,T;\r\nint mindegree=0x3f3f3f3f,X[N],Y[N],dep[N],vis[N],cur[N];\r\nvector<int>ans[N];\r\nvoid add(int a,int b,int c,int d) {\r\nv[++cnt]=b;\r\nw[cnt]=c;\r\nid[cnt]=d;\r\nnxt[cnt]=head[a];\r\nhead[a]=cnt;\r\n}\r\nint bfs() {\r\nmemset(dep,0x3f,sizeof(dep));\r\nfor(int i=S;i<=T;i++)cur[i]=head[i];\r\nqueue<int>q;q.push(S);dep[S]=0;\r\nwhile(!q.empty()) {\r\nint c=q.front();q.pop();vis[c]=0;\r\nfor(int i=head[c];i;i=nxt[i]) {\r\nif(dep[v[i]]>dep[c]+1&&w[i]) {\r\ndep[v[i]]=dep[c]+1;\r\nif(!vis[v[i]]) {\r\nq.push(v[i]);\r\nvis[v[i]]=1;\r\n}\r\n}\r\n}\r\n}\r\nif(dep[T]==INF)return 0;\r\nreturn 1;\r\n}\r\nint dfs(int x,int limit) {\r\nif(x==T || !limit) return limit;\r\nint flow=0,rlow;\r\nfor(int i=cur[x];i;i=nxt[i]) {\r\ncur[x]=i;\r\nif(dep[v[i]]==dep[x]+1 && w[i]) {\r\nif(rlow=dfs(v[i],min(w[i],limit))) {\r\nflow+=rlow;\r\nlimit-=rlow;\r\nw[i]-=rlow;\r\nw[i^1]+=rlow;\r\nif(!limit)break;\r\n}\r\n}\r\n}\r\nreturn flow;\r\n}\r\nvoid Dinic() {\r\nint maxflow=0;\r\nwhile(bfs()) maxflow+=dfs(S,INF);\r\n}\r\nint main() {\r\ncin >> n1 >> n2 >> m;\r\nfor(int i=1;i<=m;i++) cin >> X[i] >> Y[i],de[X[i]]++,de[Y[i]+n1]++;\r\nS=0;T=n1+n2+1;\r\nfor(int i=1;i<=n1+n2;i++) mindegree=min(mindegree,de[i]);\r\nfor(int i=1;i<=m;i++) add(X[i],Y[i]+n1,1,i),add(Y[i]+n1,X[i],0,i);\r\nfor(int i=1;i<=n1;i++) add(S,i,de[i]-mindegree,0),add(i,S,0,0);\r\nfor(int i=1;i<=n2;i++) add(i+n1,T,de[i+n1]-mindegree,0),add(T,i+n1,0,0);\r\nfor(int i=mindegree;i>=0;i--) {\r\nDinic();\r\nfor(int j=1;j<=n1;j++)for(int k=head[j];k;k=nxt[k]) if(w[k]&&id[k])\r\nans[i].pb(id[k]);\r\nfor(int j=head[S];j;j=nxt[j]) w[j]++;\r\nfor(int j=head[T];j;j=nxt[j]) w[j^1]++;\r\n}\r\nfor(int i=0;i<=mindegree;i++) {\r\nint siz=ans[i].size();\r\ncout << siz << \" \";\r\nfor(int j=0;j<siz;j++) cout << ans[i][j] << \" \";\r\ncout << endl;\r\n}\r\nreturn 0;\r\n}\r\n"
}