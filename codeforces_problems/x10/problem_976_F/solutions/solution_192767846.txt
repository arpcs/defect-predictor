{
    "id": 192767846,
    "contestId": 976,
    "creationTimeSeconds": 1675875475,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 976,
        "index": "F",
        "name": "Minimal k-covering",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 976,
        "members": [
            {
                "handle": "Archaeopteryx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1525099200
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 33,
    "timeConsumedMillis": 561,
    "memoryConsumedBytes": 77312000,
    "source": "// LUOGU_RID: 93405036\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=400005,M=4000005;\nint fir[N],nxt[M],to[M],val[M],dep[N],tot=1;\ninline void add(int u,int v,int w,int ww=0){\n// cout<<u<<' '<<v<<' '<<w<<'\\n';\nnxt[++tot]=fir[u],to[fir[u]=tot]=v,val[tot]=w;\nnxt[++tot]=fir[v],to[fir[v]=tot]=u,val[tot]=ww;\n}\nint s,t;\nbool bfs(){\nmemset(dep,0,sizeof dep);\nqueue<int>q;q.push(s);dep[s]=1;\nwhile(!q.empty()){\nint p=q.front();q.pop();\nfor(int i=fir[p];i;i=nxt[i]){\nif(!dep[to[i]]&&val[i]) dep[to[i]]=dep[p]+1,q.push(to[i]);\n}\n}\nreturn dep[t];\n}\nint dfs(int p,int res){\nif(p==t) return res;\nint fl=0;\nfor(int i=fir[p];i&&res;i=nxt[i]){\nif(dep[to[i]]==dep[p]+1&&val[i]){\nint z=dfs(to[i],min(res,val[i]));\nfl+=z,res-=z,val[i]-=z,val[i^1]+=z;\n}\n}\nif(fl==0) dep[p]=0;\nreturn fl;\n}\nint dg[N],ans[N];\nvector<int> e[N];\nint id[N];\nint main(){\n// freopen(\"A.out\",\"w\",stdout);\nstd::ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);\nint n,m,k;cin>>n>>m>>k;\ns=0,t=n+m+1;\nvector<int> v;\nfor(int i=1;i<=k;i++){\nint u,v;cin>>u>>v;\nid[i]=tot+1;\nadd(u,v+n,1);\ndg[u]++,dg[v+n]++;\n}\nint mind=1e9;\nfor(int i=1;i<=n+m;i++) mind=min(mind,dg[i]);\nfor(int i=1;i<=n;i++) add(s,i,dg[i]-mind);\nfor(int i=1;i<=m;i++) add(i+n,t,dg[i+n]-mind);\nfor(int i=mind;i>=0;i--){\nans[i]=ans[i+1];\nwhile(bfs()) ans[i]+=dfs(s,1e9);\nfor(int j=1;j<=k;j++) if(val[id[j]]) e[i].push_back(j);\nif(!i) break;\nfor(int i=fir[s];i;i=nxt[i]) val[i]++;\nfor(int i=fir[t];i;i=nxt[i]) val[i^1]++;\n}\nfor(int i=0;i<=mind;i++){\ncout<<k-ans[i]<<' ';\nfor(auto as:e[i]) cout<<as<<' ';cout<<'\\n';\n}\n}"
}