{
    "id": 232057810,
    "contestId": 1540,
    "creationTimeSeconds": 1699528998,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1540,
        "index": "E",
        "name": "Tasty Dishes",
        "type": "PROGRAMMING",
        "points": 3500.0,
        "rating": 3500,
        "tags": [
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 1540,
        "members": [
            {
                "handle": "duranga116"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1624635300
    },
    "programmingLanguage": "Python 3",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 102400,
    "source": "MOD = 10**9 + 7\n\n# Step 1: Parse the input\nn = int(input())\na = [0] + list(map(int, input().split()))\ncopy_info = [[] for _ in range(n+1)]\nfor i in range(1, n+1):\n    copy_info[i] = set(map(int, input().split()[1:]))\nq = int(input())\n\n# Step 2: Initialize dp array\ndp = [[0] * 1001 for _ in range(n+1)]\nfor i in range(1, n+1):\n    dp[i][0] = a[i]\n\n# Step 3: Handle type 2 queries\nfor _ in range(q):\n    query = input().split()\n    if query[0] == '1':\n        k, l, r = map(int, query[1:])\n        # Step 4: Process type 1 queries using dynamic programming\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                for copied_chef in copy_info[i]:\n                    dp[i][j] = (dp[i][j] + dp[copied_chef][j-1]) % MOD\n                dp[i][j] = (i * dp[i][j]) % MOD\n        # Output the tastiness value modulo 10^9 + 7\n        print(sum(dp[i][k] for i in range(l, r+1)) % MOD)\n    elif query[0] == '2':\n        i, x = map(int, query[1:])\n        # Update dp array for the corresponding chef\n        for j in range(1, 1001):\n            dp[i][j] = (dp[i][j] + x * dp[i][j-1]) % MOD\n\n"
}