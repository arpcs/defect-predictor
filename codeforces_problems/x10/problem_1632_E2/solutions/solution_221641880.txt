{
    "id": 221641880,
    "contestId": 1632,
    "creationTimeSeconds": 1693723649,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1632,
        "index": "E2",
        "name": "Distance Tree (hard version)",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "dfs and similar",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1632,
        "members": [
            {
                "handle": "kimoyami"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1643553300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 69734400,
    "source": "#include <bits/stdc++.h>\n\nvoid solve(){\n    int n;\n    std::cin >> n;\n    std::vector adj(n + 1, std::vector<int>());\n    for (int i = 1; i < n; i += 1){\n        int u, v;\n        std::cin >> u >> v;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    std::vector<int> dep(n + 1);\n    std::vector event(n + 1, std::vector<int>());\n    std::function<int(int, int) > dfs = [&](int u, int fa) {\n        int mx = 0;\n        for (auto v : adj[u]) {\n            if(v == fa) continue;\n            dep[v] = dep[u] + 1;\n            int x = dfs(v, u) + 1;\n            event[std::min(mx + dep[u], x + dep[u])].emplace_back(x + mx);\n            mx = std::max(mx, x);\n        }\n        return mx;\n    };\n    int ans = dfs(1, 0);\n    std::vector<int> res(n + 1);\n    int j = n;\n    while(j >= 1 and event[j].empty()) j -= 1;\n    int cur = 0;\n    for (int i = n; i >= 1; i -= 1) {\n        while (j >= 1 and (cur + 1) / 2 + i <= j) {\n            ans = std::max((cur + 1) / 2 + i, j);\n            for (auto x : event[j]) {\n                cur = std::max(cur, x);\n            }\n            j -= 1;\n        }\n        //std::cerr << i << \" \" << j << \" \" << cur << \"\\n\";\n        res[i] = std::max((cur + 1) / 2 + i, j);\n        res[i] = std::min(res[i], ans);\n    }\n    for (int i = 1; i <= n; i += 1){\n        std::cout << res[i] << \" \\n\"[i == n];\n    }\n}\n\nint main(){\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n    int T;\n    std::cin >> T;\n    while(T--) {\n        solve();\n    }\n    return 0;\n}"
}