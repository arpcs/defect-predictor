{
    "id": 227778074,
    "contestId": 1632,
    "creationTimeSeconds": 1697099238,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1632,
        "index": "E2",
        "name": "Distance Tree (hard version)",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "dfs and similar",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1632,
        "members": [
            {
                "handle": "Eon_Starlight"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1643553300
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 10854400,
    "source": "// LUOGU_RID: 128914827\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\ntypedef unsigned UN;\r\ntypedef double DB;\r\n//--------------------//\r\nconst int N = 3e5 + 5, M = 6e5 + 5;\r\n\r\nint n;\r\nstruct Edge {\r\n    int to, nex;\r\n}edge[M];\r\nint tot, head[N];\r\nvoid add(int from, int to) {\r\n    edge[++tot] = {to, head[from]};\r\n    head[from] = tot;\r\n}\r\n\r\nint dep[N], mxd1[N], mxd2[N], mxl[N];\r\nvoid DFS(int now, int fa) {\r\n    dep[now] = dep[fa] + 1, mxd1[now] = dep[now], mxd2[now] = 0;\r\n    for (int to, i = head[now]; i; i = edge[i].nex) {\r\n        to = edge[i].to;\r\n        if (to == fa)\r\n            continue;\r\n        DFS(to, now);\r\n        if (mxd1[to] > mxd1[now])\r\n            mxd2[now] = mxd1[now], mxd1[now] = mxd1[to];\r\n        else if (mxd1[to] > mxd2[now])\r\n            mxd2[now] = mxd1[to];\r\n    }\r\n    if(mxd2[now])\r\n        mxl[mxd2[now]] = max(mxl[mxd2[now]], mxd1[now] + mxd2[now] - 2 * dep[now]);\r\n}\r\n//--------------------//\r\nint main() {\r\n    dep[0] = -1;\r\n    int T; scanf(\"%d\", &T);\r\n    while (T--) {\r\n        memset(head, 0, sizeof(head)), memset(mxl, 0, sizeof(mxl)), tot = 0;\r\n        scanf(\"%d\", &n);\r\n        for (int x, y, i = 1; i < n; i++)\r\n            scanf(\"%d%d\", &x, &y), add(x, y), add(y, x);\r\n        DFS(1, 0);\r\n        for (int i = n - 1; i > 0; i--)\r\n            mxl[i] = max(mxl[i], mxl[i + 1]);\r\n        for (int ans = 0, i = 1; i < n; i++) {\r\n            while (ans < mxd1[1] && (mxl[ans + 1] + 1) / 2 + i > ans)\r\n                ans++;\r\n            printf(\"%d \", ans);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return 0;\r\n}"
}