{
    "id": 236299737,
    "contestId": 1632,
    "creationTimeSeconds": 1702021396,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1632,
        "index": "E2",
        "name": "Distance Tree (hard version)",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2700,
        "tags": [
            "binary search",
            "dfs and similar",
            "shortest paths",
            "trees"
        ]
    },
    "author": {
        "contestId": 1632,
        "members": [
            {
                "handle": "sakurasonic"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1643553300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 54067200,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 3e5;\r\nconst int inf = 2e9;\r\nvector <int> e[N];\r\nint ans[N];\r\nint mxdpth1[N],mxdpth2[N];\r\nvoid dfs(int node,int p,int d){\r\n    if(node != 0 && e[node].size() == 1){\r\n        ///leaf\r\n        mxdpth2[node] = d;\r\n        mxdpth1[node] = d;\r\n    }else{\r\n        mxdpth1[node] = d;\r\n        mxdpth2[node] = d;\r\n        for(auto i:e[node]){\r\n            if(i == p)continue;\r\n            dfs(i,node,d + 1);\r\n            if(mxdpth1[node] < mxdpth1[i]){\r\n                mxdpth2[node] = mxdpth1[node];\r\n                mxdpth1[node] = mxdpth1[i];\r\n            }else if(mxdpth2[node] < mxdpth1[i]){\r\n                mxdpth2[node] = mxdpth1[i];\r\n            }\r\n        }\r\n    }\r\n    //cout<<node<<' '<<mxdpth1[node]<<' '<<mxdpth2[node]<<' '<<d<<'\\n';\r\n    int nr = min(mxdpth1[node],mxdpth2[node]);\r\n    if(nr != -inf){\r\n        ans[nr - 1] = min(ans[nr - 1],nr - 1 - (mxdpth2[node] + mxdpth1[node] - 2*d + 1)/2);\r\n    }else{\r\n        ans[mxdpth1[node] - 1] = min(ans[mxdpth1[node] - 1],mxdpth1[node] - 1);\r\n    }\r\n    ///for a specific dpth we find max x necessary to use it\r\n}\r\nvoid solve(){\r\n    int n;\r\n    cin>>n;\r\n    for(int i = 0;i < n - 1;i++){\r\n        int u,w;\r\n        cin>>u>>w;\r\n        u--;w--;\r\n        e[u].push_back(w);\r\n        e[w].push_back(u);\r\n    }\r\n    for(int i = 0;i < n;i++){\r\n        ans[i] = inf;\r\n    }\r\n    dfs(0,-1,0);\r\n    for(int i = n - 2;i >= 0;i--){\r\n        if(ans[i + 1] == inf)continue;\r\n        ans[i] = min(ans[i],ans[i + 1] - 1);\r\n    }\r\n    int pt = 0;\r\n    for(int i = 0;i < n;i++){\r\n        while(pt < n && ans[pt] <= i){\r\n            pt++;\r\n        }\r\n        cout<<pt<<' ';\r\n    }\r\n    cout<<'\\n';\r\n    for(int i = 0;i < n;i++){\r\n        e[i].clear();\r\n        //cout<<ans[i]<<' ';\r\n    }\r\n    //cout<<'\\n';\r\n}\r\nint main(){\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    int t;\r\n    cin>>t;\r\n    while(t--)solve();\r\n    return 0;\r\n}\r\n"
}