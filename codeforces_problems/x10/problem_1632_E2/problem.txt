{
    "contestId": 1632,
    "index": "E2",
    "name": "Distance Tree (hard version)",
    "type": "PROGRAMMING",
    "points": 1500.0,
    "rating": 2700,
    "tags": [
        "binary search",
        "dfs and similar",
        "shortest paths",
        "trees"
    ],
    "desc": {
        "title": "E2. Distance Tree (hard version)",
        "statement": "<p><span class=\"tex-font-style-bf\">This version of the problem differs from the previous one only in the constraint on $$$n$$$</span>.</p><p>A tree is a connected undirected graph without cycles. A weighted tree has a weight assigned to each edge. The distance between two vertices is the minimum sum of weights on the path connecting them.</p><p>You are given a weighted tree with $$$n$$$ vertices, each edge has a weight of $$$1$$$. Denote $$$d(v)$$$ as the distance between vertex $$$1$$$ and vertex $$$v$$$.</p><p>Let $$$f(x)$$$ be the minimum possible value of $$$\\max\\limits_{1 \\leq v \\leq n} \\ {d(v)}$$$ if you can temporarily add an edge with weight $$$x$$$ between any two vertices $$$a$$$ and $$$b$$$ $$$(1 \\le a, b \\le n)$$$. Note that after this operation, the graph is no longer a tree.</p><p>For each integer $$$x$$$ from $$$1$$$ to $$$n$$$, find $$$f(x)$$$.</p>",
        "inputSpecification": "<p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 10^4$$$) \u2014 the number of test cases.</p><p>The first line of each test case contains a single integer $$$n$$$ ($$$2 \\le n \\le 3 \\cdot 10^5$$$).</p><p>Each of the next $$$n\u22121$$$ lines contains two integers $$$u$$$ and $$$v$$$ ($$$1 \\le u,v \\le n$$$) indicating that there is an edge between vertices $$$u$$$ and $$$v$$$. It is guaranteed that the given edges form a tree.</p><p>It is guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$3 \\cdot 10^5$$$.</p>",
        "outputSpecification": "<p>For each test case, print $$$n$$$ integers in a single line, $$$x$$$-th of which is equal to $$$f(x)$$$ for all $$$x$$$ from $$$1$$$ to $$$n$$$.</p>",
        "samples": [
            {
                "input": "<div class=\"test-example-line test-example-line-even test-example-line-0\">3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">4</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">2 3</div><div class=\"test-example-line test-example-line-odd test-example-line-1\">1 4</div><div class=\"test-example-line test-example-line-even test-example-line-2\">2</div><div class=\"test-example-line test-example-line-even test-example-line-2\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">7</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 2</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">1 3</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 4</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 5</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">3 6</div><div class=\"test-example-line test-example-line-odd test-example-line-3\">5 7</div>",
                "output": "\n1 2 2 2 \n1 1 \n2 2 3 3 3 3 3 \n"
            }
        ],
        "note": "<center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/cefe7d25ebc0ecc4f36b3caf11a40e42b9dbdcad.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center> In the first testcase: <ul> <li> For $$$x = 1$$$, we can an edge between vertices $$$1$$$ and $$$3$$$, then $$$d(1) = 0$$$ and $$$d(2) = d(3) = d(4) = 1$$$, so $$$f(1) = 1$$$. </li><li> For $$$x \\ge 2$$$, no matter which edge we add, $$$d(1) = 0$$$, $$$d(2) = d(4) = 1$$$ and $$$d(3) = 2$$$, so $$$f(x) = 2$$$. </li></ul>"
    }
}