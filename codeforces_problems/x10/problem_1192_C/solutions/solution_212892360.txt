{
    "id": 212892360,
    "contestId": 1192,
    "creationTimeSeconds": 1688853165,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1192,
        "index": "C",
        "name": "Cubeword",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "brute force",
            "dp",
            "meet-in-the-middle"
        ]
    },
    "author": {
        "contestId": 1192,
        "members": [
            {
                "handle": "tomas_fang"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1564063500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 90,
    "timeConsumedMillis": 1075,
    "memoryConsumedBytes": 12288000,
    "points": 100.0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 62;\nconst int mod = 998244353;\n\nint dp[N][N][N], way[10][N][N];\nunordered_map<string, bool> mp;\n\nint dict(char a) {\n  if (isalpha(a)) {\n    if (isupper(a))\n      return a - 'A';\n    return a - 'a' + 26;\n  }\n  return a - '0' + 52;\n}\n\nvoid adding(int &a, int b) {\n  if ((a += b) >= mod)\n    a -= mod;\n}\n\nint add(int a, int b) {\n  return ((a += b) >= mod) ? a - mod : a;\n}\n\nint mul(int a, int b) {\n  return a * 1ll * b % mod;\n}\n\nint play(int i, int j, int k) {\n  int mx = max(max(i, j), k);\n  int mi = min(min(i, j), k);\n  return dp[mx][i ^ j ^ k ^ mx ^ mi][mi];\n}\n\nvoid solve() {\n  int n;\n  scanf(\"%d\", &n);\n\n  for (int i = 1; i <= n; ++i) {\n    char s[10];\n    scanf(\" %s\", s);\n    int len = strlen(s) - 1;\n\n    if (mp[s] == false) {\n      way[len][dict(s[0])][dict(s[len])]++;\n      mp[s] = true;\n    }\n\n    reverse(s, s + len + 1);\n\n    if (mp[s] == false) {\n      way[len][dict(s[0])][dict(s[len])]++;\n      mp[s] = true;\n    }\n  }\n\n  int ans = 0;\n\n  for (int L = 2; L <= 9; ++L) {\n    for (int i = 0; i <= 61; ++i) {\n      for (int j = 0; j <= i; ++j) {\n        for (int k = 0; k <= j; ++k) {\n          dp[i][j][k] = 0;\n\n          for (int l = 0; l <= 61; ++l) {\n            int a = (way[L][i][l] * 1ll * way[L][j][l] * way[L][k][l]) % mod;\n            adding(dp[i][j][k], a);\n          }\n        }\n      }\n    }\n\n    for (int i = 0; i <= 61; ++i) {\n      for (int j = 0; j <= i; ++j) {\n        for (int k = 0; k <= 61; ++k) {\n          for (int l = 0; l <= k; ++l) {\n            int a = mul(mul(play(i, k, l), play(j, l, k)),\n                        mul(play(i, j, k), play(i, l, j)));\n\n            if (k != l)\n              adding(a, a);\n\n            if (i != j)\n              adding(a, a);\n\n            adding(ans, a);\n          }\n        }\n      }\n    }\n  }\n\n  printf(\"%d\\n\", ans);\n}\n\nint main() {\n  solve();\n  return 0;\n}\n// mKlNwtOxyuZXpzsbedOwMwInTiBtBsVcfyqaundcrLGZvvORTOpIIfrXGAojHSRWCZNNfHNZsAoLocovAvpgolcixUqfQubppLBqTViDKFOxhviQjDqoUgnaCgkrxhvO"
}