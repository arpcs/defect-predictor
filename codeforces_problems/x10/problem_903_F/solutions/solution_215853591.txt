{
    "id": 215853591,
    "contestId": 903,
    "creationTimeSeconds": 1690453486,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 903,
        "index": "F",
        "name": "Clear The Matrix",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 903,
        "members": [
            {
                "handle": "confused_boi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513091100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 249,
    "memoryConsumedBytes": 66560000,
    "source": "#include <bits/stdc++.h>\n\n#define forn(i, n) for (int i = 0; i < int(n); i++)\n\nusing namespace std;\n\nconst int N = 1000 + 13;\nconst int M = 1 << 12;\nconst int INF = int(1e9);\n\nint dp[N][4][M];\nint n;\nint a[4];\nstring f[4];\n\nint main() {\n    cin >> n;\n    forn(i, 4)\n        cin >> a[i];\n    forn(i, 4){\n        cin >> f[i];\n        f[i] += \"....\";\n    }\n    \n    n += 4;\n    \n    forn(i, n + 1) forn(j, 4) forn(k, M) dp[i][j][k] = INF;\n    dp[2][3][0] = 0;\n    \n    forn(i, n) forn(j, 4) forn(mask, M){\n        int st = i * 4 + j - 11;\n        int ni = st / 4;\n        int nj = st % 4;\n        \n        if (st < 0)\n            continue;\n        \n        if (n - ni >= 4 && nj == 0){\n            dp[i + 1][3][M - 1] = min(dp[i + 1][3][M - 1], dp[i][j][mask] + a[3]);\n        }\n        \n        if ((mask & 1) || f[nj][ni] == '.'){\n            int _ni = (i * 4 + j + 1) / 4;\n            int _nj = (i * 4 + j + 1) % 4;\n            \n            dp[_ni][_nj][mask >> 1] = min(dp[_ni][_nj][mask >> 1], dp[i][j][mask]);\n        }\n        \n        for (int t = 1; t <= min(min(n - ni, 4 - nj), 3); ++t){\n            int nmask = mask;\n            int len = (1 << t) - 1;\n            forn(pos, t)\n                nmask |= (len << (4 * pos));\n            \n            dp[i][j][nmask] = min(dp[i][j][nmask], dp[i][j][mask] + a[t - 1]);\n        }\n    }\n    \n    printf(\"%d\\n\", dp[n][0][0]);\n}"
}