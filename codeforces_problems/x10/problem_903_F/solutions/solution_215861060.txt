{
    "id": 215861060,
    "contestId": 903,
    "creationTimeSeconds": 1690457213,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 903,
        "index": "F",
        "name": "Clear The Matrix",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 903,
        "members": [
            {
                "handle": "confused_boi"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513091100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 66560000,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAX_N = 1000 + 13;\nconst int MAX_MASK = 1 << 12;\nconst int INF = int(1e9);\n\nint dp[MAX_N][4][MAX_MASK];\nint mosaicWidth;                // Width of the mosaic\nint tileCosts[4];               // Cost of wooden tiles for sizes 1x1, 2x2, 3x3, and 4x4\nstring mosaic[4];               // Mosaic represented as a 4xN matrix\n\nint main() {\n    cin >> mosaicWidth;\n    for (int i = 0; i < 4; i++)\n        cin >> tileCosts[i];\n    for (int i = 0; i < 4; i++) {\n        cin >> mosaic[i];\n        mosaic[i] += \"....\";    // Extend each row with 4 extra columns filled with dots\n    }\n\n    mosaicWidth += 4;           // Increase the mosaic width by 4 to account for added columns\n\n    // Initialize the dynamic programming table to infinity\n    for (int i = 0; i < mosaicWidth + 1; i++)\n        for (int j = 0; j < 4; j++)\n            for (int mask = 0; mask < MAX_MASK; mask++)\n                dp[i][j][mask] = INF;\n    \n    dp[2][3][0] = 0;    // Base case: minimum cost for the first 4x2 part of the mosaic\n\n    // Dynamic Programming\n    for (int i = 0; i < mosaicWidth; i++)\n        for (int j = 0; j < 4; j++)\n            for (int mask = 0; mask < MAX_MASK; mask++) {\n                int startPos = i * 4 + j - 11;\n                int ni = startPos / 4;   // Calculate the row index in the extended mosaic\n                int nj = startPos % 4;   // Calculate the column index in the extended mosaic\n\n                if (startPos < 0)\n                    continue;   // Skip positions that are outside the original mosaic\n\n                // Check if a 4x4 tile can be placed at the end of the row and update the cost\n                if (mosaicWidth - ni >= 4 && nj == 0) {\n                    dp[i + 1][3][MAX_MASK - 1] = min(dp[i + 1][3][MAX_MASK - 1], dp[i][j][mask] + tileCosts[3]);\n                }\n\n                // Check if a tile is horizontally adjacent to a '.', and update the cost accordingly\n                if ((mask & 1) || mosaic[nj][ni] == '.') {\n                    int next_ni = (i * 4 + j + 1) / 4;   // Calculate the next row index in the extended mosaic\n                    int next_nj = (i * 4 + j + 1) % 4;   // Calculate the next column index in the extended mosaic\n\n                    dp[next_ni][next_nj][mask >> 1] = min(dp[next_ni][next_nj][mask >> 1], dp[i][j][mask]);\n                }\n\n                // Consider using larger tiles (up to 3x3) to cover multiple pixels simultaneously\n                for (int t = 1; t <= min(min(mosaicWidth - ni, 4 - nj), 3); ++t) {\n                    int newMask = mask;\n                    int len = (1 << t) - 1;\n                    for (int pos = 0; pos < t; pos++)\n                        newMask |= (len << (4 * pos));\n\n                    dp[i][j][newMask] = min(dp[i][j][newMask], dp[i][j][mask] + tileCosts[t - 1]);\n                }\n            }\n\n    cout << dp[mosaicWidth][0][0] << '\\n';    // Output the minimum cost to cover the entire mosaic\n    return 0;\n}"
}