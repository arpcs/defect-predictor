{
    "id": 228926072,
    "contestId": 903,
    "creationTimeSeconds": 1697807659,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 903,
        "index": "F",
        "name": "Clear The Matrix",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "bitmasks",
            "dp"
        ]
    },
    "author": {
        "contestId": 903,
        "members": [
            {
                "handle": "zavodil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1513091100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 46,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 16588800,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <cmath>\r\n#include <cstring>\r\n#include <algorithm>\r\nusing namespace std;\r\nconst int MAXN = 1010;\r\nconst int INF = 1000000007;\r\nconst double PI = acos(-1.0);\r\nint f[MAXN][1 << 12];\r\nbool x[4][MAXN];\r\nvoid update(int &A, int B) {\r\n    if (A == -1) A = B; else A = min(A, B);\r\n}\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    int N, A, B, C, D;\r\n    cin >> N >> A >> B >> C >> D;\r\n    for (int i = 0; i < 4; ++i) {\r\n        string Q;\r\n        cin >> Q;\r\n        for (int j = 0; j < N; ++j) x[i][j] = (Q[j] == '*');\r\n    }\r\n    N += 3;\r\n    memset(f, -1, sizeof(f));\r\n    int temp = 0;\r\n    for (int i = 0; i < 3; ++i) {\r\n        for (int j = 0; j < 4; ++j) {\r\n            if (x[j][i]) temp |= (1 << (i * 4 + j));\r\n        }\r\n    }\r\n    f[2][temp] = 0;\r\n    for (int i = 2; i < N; ++i) {\r\n        for (int j = 0; j < (1 << 12); ++j) {\r\n            if (f[i][j] == -1) continue;\r\n            temp = 0;\r\n            for (int k = 0; k < 4; ++k) {\r\n                if (x[k][i + 1]) temp |= (1 << k);\r\n            }\r\n            update(f[i + 1][0], f[i][j] + D);\r\n            update(f[i + 1][temp << 8], f[i][j] + C + C);\r\n            update(f[i + 1][((j & 2048) >> 4) + (temp << 8)], f[i][j] + B + C);\r\n            if (j & 8) {\r\n                update(f[i + 1][((j & 2176) >> 4) + (temp << 8)], f[i][j] + A + C);\r\n            } else {\r\n                update(f[i + 1][((j & 2176) >> 4) + (temp << 8)], f[i][j] + C);\r\n            }\r\n            update(f[i + 1][((j & 256) >> 4) + (temp << 8)], f[i][j] + B + C);\r\n            if (j & 1) {\r\n                update(f[i + 1][((j & 272) >> 4) + (temp << 8)], f[i][j] + A + C);\r\n            } else {\r\n                update(f[i + 1][((j & 272) >> 4) + (temp << 8)], f[i][j] + C);\r\n            }\r\n            update(f[i + 1][((j & 3840) >> 4) + (temp << 8)], f[i][j] + B + B);\r\n            update(f[i + 1][((j & 3968) >> 4) + (temp << 8)], f[i][j] + B + B + __builtin_popcount(j & 8) * A);\r\n            update(f[i + 1][((j & 4032) >> 4) + (temp << 8)], f[i][j] + B + __builtin_popcount(j & 12) * A);\r\n            update(f[i + 1][((j & 3856) >> 4) + (temp << 8)], f[i][j] + B + B + __builtin_popcount(j & 1) * A);\r\n            update(f[i + 1][((j & 3984) >> 4) + (temp << 8)], f[i][j] + B + __builtin_popcount(j & 9) * A);\r\n            update(f[i + 1][((j & 3888) >> 4) + (temp << 8)], f[i][j] + B + __builtin_popcount(j & 3) * A);\r\n            int xx = (j & 15);\r\n            update(f[i + 1][(j >> 4) + (temp << 8)], f[i][j] + __builtin_popcount(xx) * A);\r\n        }\r\n    }\r\n    cout << f[N][0] << endl;\r\n    return 0;\r\n}/*1697807659.3663707*/"
}