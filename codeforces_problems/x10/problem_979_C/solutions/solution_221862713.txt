{
    "id": 221862713,
    "contestId": 979,
    "creationTimeSeconds": 1693855726,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 979,
        "index": "C",
        "name": "Kuro and Walking Route",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 979,
        "members": [
            {
                "handle": "TechSavvyAmit"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1526308500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 71,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 30515200,
    "source": "/*\r\n\u281b\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u2877\u28b6\u28e6\u28f6\u28f6\u28e4\u28e4\u28e4\u28c0\u2800\u2800\u2800       \u28c0\u28e4\u28e4\u28e4\u28e4\u28c0\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u2840\u2800   \u2800\u28f4\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u2800\u2800\r\n\u2800\u2800\u2800\u2809\u2809\u2809\u2819\u283b\u28ff\u28ff\u283f\u283f\u281b\u281b\u281b\u283b\u28ff\u28ff\u28c7\u2800   \u28fc\u28ff\u28ff\u2809\u2809\u2809\u2809\u284f\u2809\u28ff\u28ff\u28e7\u2800\r\n\u2800\u2800\u28a4\u28c0\u28c0\u28c0\u2800\u2800\u28b8\u28f7\u2844\u2800\u28c1\u28c0\u28e4\u28f4\u28ff\u28ff\u28ff\u28c6   \u28ff\u28ff\u287f\u2800\u2800\u2800\u2800 \u2847\u2800\u28ff\u28ff\u28ff\u2800\r\n\u2800\u2800\u2800\u2800\u2839\u280f\u2800\u2800\u2800\u28ff\u28e7\u2800\u2839\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u28ff    \u28bb\u28ff\u28e7\u28e4\u28e4\u2844\u2800\u28e7\u28e4\u28ff\u28ff\u285f\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u281b\u283f\u2807\u2880\u28fc\u28ff\u28ff\u281b\u28af\u287f\u285f    \u2800\u283b\u28ff\u28ff\u28ff\u28ff\u28fe\u28ff\u28ff\u28ff\u281f\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2826\u2834\u28bf\u28bf\u28ff\u287f\u2837\u2800\u28ff\u2800    \u2800\u2800   \u2809\u281b\u281b\u281b\u281b\u2809\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28f7\u28f6\u28f6\u28e4\u28e4\u28e4\u28e4\u28e4\u28f6\u28e6\u2803\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2890\u28ff\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u283b\u28bf\u28ff\u28ff\u28ff\u28ff\u281f\u2801\r\n */\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = signed long long;\r\nusing db = long double;\r\n\r\n// pairs\r\nusing pi = pair<int, int>;\r\nusing pl = pair<ll, ll>;\r\nusing pd = pair<db, db>;\r\n#define mp make_pair\r\n\r\n// vectors\r\nusing vi = vector<int>;\r\nusing vl = vector<ll>;\r\nusing vb = vector<bool>;\r\nusing vvb = vector<vb>;\r\nusing vvi = vector<vi>;\r\nusing vvl = vector<vl>;\r\nusing vpi = vector<pi>;\r\nusing vpl = vector<pl>;\r\nusing vvpi = vector<vpi>;\r\nusing vvpl = vector<vpl>;\r\n#define all(x) begin(x), x.end()\r\n#define ins insert\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define ft front()\r\n#define bk back()\r\n\r\n//Map and Sets\r\nusing mpi = map<int,int>;\r\nusing mpl = map<ll,ll>;\r\nusing si = set<int>;\r\nusing sl = set<ll>;\r\n\r\n// loops\r\n#define FOR(i, a, b) for (int i = (a); i <= (b); ++i)\r\n#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)\r\n#define each(a, x) for (auto &a : x)\r\n\r\n// miscellaneous\r\n#define print(x) cout << x << '\\n'\r\n#define pprint(x) cout << x << ' '\r\nconst ll MOD = 1e9 + 7;\r\n\r\nvvi g; vi childs, parent;\r\nint n, flo, bee, v1, v2, cnt =0 , v, t, temp;\r\n\r\nint dfs_bee(int vertex, int par)\r\n{\r\n    each(a,g[vertex]) if(a!=par)\r\n    {\r\n        parent[a] = vertex;\r\n        childs[vertex] += dfs_bee(a,vertex);\r\n    }\r\n    return childs[vertex];\r\n}\r\n\r\nint dfs(int vertex, int par)\r\n{\r\n    int c=1;\r\n    each(a,g[vertex]) if(a!=par) c += dfs(a,vertex);\r\n    return c;\r\n}\r\n\r\n\r\nint main() \r\n{\r\n    ios::sync_with_stdio(false), cin.tie(0);\r\n\r\n    cin >> n >> flo >> bee;\r\n    g.resize(n+1); childs.resize(n+1,1); parent.resize(n+1,-1); \r\n    FOR(i,1,n-1) {cin >> v1 >> v2; g[v1].pb(v2); g[v2].pb(v1);}\r\n    dfs_bee(bee,-1);\r\n    v=parent[flo];\r\n    while (v!=bee) {cnt++; if(parent[v]==bee) t = v; v=parent[v];}\r\n    if(t && cnt) temp = dfs(bee,t);\r\n    ll ans = (n-childs[flo])*1LL*childs[flo] + (n-childs[flo])*1LL*(n-childs[flo]-1) + childs[flo]*1LL*(childs[flo]-1);\r\n    if(temp) ans += childs[flo]*1LL*(n-childs[flo]-temp);\r\n    print(ans);\r\n}"
}