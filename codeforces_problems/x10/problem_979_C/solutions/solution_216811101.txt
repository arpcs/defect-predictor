{
    "id": 216811101,
    "contestId": 979,
    "creationTimeSeconds": 1690961836,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 979,
        "index": "C",
        "name": "Kuro and Walking Route",
        "type": "PROGRAMMING",
        "points": 1250.0,
        "rating": 1600,
        "tags": [
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 979,
        "members": [
            {
                "handle": "snakks"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1526308500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 4403200,
    "source": "/* Himanshu Mishra */\r\n#include<bits/stdc++.h>\r\n\r\n//pbds related\r\n#include <ext/pb_ds/assoc_container.hpp> // Common file\r\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n\r\ntypedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;\r\n//X.order_of_key(d) -> number of elements less than d in X\r\n//*X.find_by_order(d) -> number at index d in X\r\n\r\n#define ll long long\r\n#define int long long\r\n#define ull unsigned long long\r\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\r\n#define MOD 1000000007\r\n#define MOD1 998244353\r\n#define INF 1e18\r\n#define nline \"\\n\"\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define mp make_pair\r\n#define ff first\r\n#define ss second\r\n#define PIE 3.141592653589793238462\r\n#define set_bits __builtin_popcountll\r\n#define sz(x) ((int)(x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#define infinity INT_MAX\r\n\r\nvector<vector<int>> edges(2e5);\r\nint parent = -1;\r\nint f, b;\r\nvoid dfs(int u, int p) {\r\n    if (u == b) {\r\n        parent = p;\r\n    }\r\n    for (auto v : edges[u]) {\r\n        if (v != p) {\r\n            dfs(v, u);\r\n        }\r\n    }\r\n}\r\n\r\nvector<int> subtree(2e5, 0);\r\nvoid dfs2(int u, int p) {\r\n\r\n    subtree[u] = 1;\r\n    for (auto v : edges[u]) {\r\n        if (v == p) continue;\r\n        dfs2(v, u);\r\n        subtree[u] += subtree[v];\r\n    }\r\n\r\n}\r\n\r\nvoid dfs3(int u, int p) {\r\n    if (u == f) {\r\n        parent = p;\r\n    }\r\n    for (auto v : edges[u]) {\r\n        if (v != p) {\r\n            dfs3(v, u);\r\n        }\r\n    }\r\n}\r\n\r\nvoid test_case() {\r\n    int n;\r\n    cin >> n;\r\n\r\n    cin >> f >> b;\r\n    f--, b--;\r\n    for (int i = 0; i < n - 1; i++) {\r\n        int x, y;\r\n        cin >> x >> y;\r\n        x--, y--;\r\n        edges[x].pb(y);\r\n        edges[y].pb(x);\r\n    }\r\n    dfs(f, -1);\r\n    dfs2(b, parent);\r\n    int nodesInSubtreeOfb = subtree[b];\r\n    dfs3(b, -1);\r\n    dfs2(f, parent);\r\n    int x = subtree[f];\r\n    int ans = n * (n - 1);\r\n    ans -= (nodesInSubtreeOfb * x);\r\n\r\n    // cout << nodesInSubtreeOfb << '\\n';\r\n    cout << ans << '\\n';\r\n}\r\n\r\n\r\n\r\nint32_t main() {\r\n    fastio();\r\n    cout << fixed << setprecision(9);\r\n\r\n\r\n    // sieve();\r\n    // precompute();\r\n    int t = 1;\r\n    // cin >> t;\r\n    for (int i = 1; i <= t; i++)   {\r\n        //Case #1: 0\r\n        test_case();\r\n    }\r\n\r\n    return 0;\r\n}"
}