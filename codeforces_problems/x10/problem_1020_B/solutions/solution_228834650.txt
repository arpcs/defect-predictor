{
    "id": 228834650,
    "contestId": 1020,
    "creationTimeSeconds": 1697734418,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1020,
        "index": "B",
        "name": "Badge",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 1000,
        "tags": [
            "brute force",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1020,
        "members": [
            {
                "handle": "SansPapyrus683"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1533994500
    },
    "programmingLanguage": "Java 11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 27,
    "timeConsumedMillis": 187,
    "memoryConsumedBytes": 0,
    "source": "import java.io.*;\r\nimport java.util.*;\r\n\r\npublic class Badge {\r\n\tpublic static int[] p;\r\n    public static int[] ans;\r\n\tpublic static boolean in_cycle;\r\n\r\n\tpublic static void dfs(int n) {\r\n\t\tif (ans[n] != -2) {\r\n\t\t\t// found a cycle!\r\n\t\t\tif (ans[n] == -1) {\r\n\t\t\t\tin_cycle = true;\r\n\t\t\t\tans[n] = n;\r\n\t\t\t}\r\n\t\t\treturn;  // either way, this one's already been processed\r\n\t\t}\r\n\t\t\r\n        ans[n] = -1;  // set a marker for our dfs\r\n\t\t\r\n        dfs(p[n]);\r\n\t\tif (ans[n] != -1) {\r\n            in_cycle = false;\r\n        } else {\r\n            ans[n] = in_cycle ? n : ans[p[n]];\r\n        }\r\n\t}\r\n\r\n\tpublic static void main(String[] args) throws IOException {\r\n\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\r\n\t\t\r\n\t\tint n = Integer.parseInt(reader.readLine());\r\n\t\tp = new int[n];\r\n        StringTokenizer st = new StringTokenizer(reader.readLine());\r\n\t\tfor (int i = 0; i < n; i++) {\r\n            p[i] = Integer.parseInt(st.nextToken()) - 1;\r\n        }\r\n\t\treader.close();\r\n\r\n        ans = new int[n];\r\n        Arrays.fill(ans, -2);  // -2 is our initial no-answer value\r\n\t\tfor (int i = 0; i < n; i++) {\r\n            // in_cycle is always reset to false at the end of each DFS\r\n            dfs(i);\r\n        }\r\n\r\n\t\tfor (int i = 0; i < n - 1; i++) {\r\n\t\t\tSystem.out.print((ans[i] + 1) + \" \");\r\n\t\t}\r\n        System.out.println(ans[n - 1] + 1);\r\n\t}\r\n}\r\n"
}