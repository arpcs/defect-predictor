{
    "id": 228863029,
    "contestId": 349,
    "creationTimeSeconds": 1697760294,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 349,
        "index": "B",
        "name": "Color the Fence",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1700,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 349,
        "members": [
            {
                "handle": "miminguci"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1380295800
    },
    "programmingLanguage": "Java 17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 310,
    "memoryConsumedBytes": 17305600,
    "source": "import java.io.*;\r\nimport java.math.BigInteger;\r\nimport java.util.*;\r\nimport java.lang.*;\r\n\r\nimport static java.lang.Math.*;\r\n\r\npublic class template {\r\n    static class InputReader {\r\n        BufferedReader reader;\r\n        StringTokenizer tokenizer;\r\n\r\n        public InputReader(InputStream stream) {\r\n            reader = new BufferedReader(new InputStreamReader(stream), 32768);\r\n            tokenizer = null;\r\n        }\r\n\r\n        String next() { // reads in the next string\r\n            while (tokenizer == null || !tokenizer.hasMoreTokens()) {\r\n                try {\r\n                    tokenizer = new StringTokenizer(reader.readLine());\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n            return tokenizer.nextToken();\r\n        }\r\n\r\n        public int nextInt() { // reads in the next int\r\n            return Integer.parseInt(next());\r\n        }\r\n\r\n        public long nextLong() { // reads in the next long\r\n            return Long.parseLong(next());\r\n        }\r\n\r\n        public double nextDouble() { // reads in the next double\r\n            return Double.parseDouble(next());\r\n        }\r\n    }\r\n\r\n    static InputReader r = new InputReader(System.in);\r\n    static PrintWriter pw = new PrintWriter(System.out);\r\n\r\n\r\n    public static int lower_bound(ArrayList<Integer> ar, int k) {\r\n        int s = 0;\r\n        int e = ar.size();\r\n        while (s != e) {\r\n            int mid = s + e >> 1;\r\n            if (ar.get(mid) < k) {\r\n                s = mid + 1;\r\n            } else {\r\n                e = mid;\r\n            }\r\n        }\r\n        if (s == ar.size()) {\r\n            return -1;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    public static int upper_bound(ArrayList<Integer> ar, int k) {\r\n        int s = 0;\r\n        int e = ar.size();\r\n        while (s != e) {\r\n            int mid = s + e >> 1;\r\n            if (ar.get(mid) <= k) {\r\n                s = mid + 1;\r\n            } else {\r\n                e = mid;\r\n            }\r\n        }\r\n        if (s == ar.size()) {\r\n            return -1;\r\n        }\r\n        return s;\r\n    }\r\n\r\n    static int bit(long n, int i) {\r\n        return (int) ((n >> i) & 1);\r\n    }\r\n\r\n    static boolean isPowerOfTwo(long n) {\r\n\r\n        return (n >= 1) && (!((n & (n - 1)) >= 1));\r\n    }\r\n\r\n    static boolean isPrime(long n) {\r\n        if (n <= 1) return false;\r\n        if (n <= 3) return true;\r\n\r\n        if (n % 2 == 0 || n % 3 == 0) return false;\r\n\r\n        for (long i = 5; i * i <= n; i = i + 6)\r\n            if (n % i == 0 || n % (i + 2) == 0)\r\n                return false;\r\n\r\n        return true;\r\n    }\r\n\r\n    public static class Pair<F, SC> implements Comparable {\r\n        public F First;\r\n        public SC Second;\r\n\r\n        public Pair(F first, SC second) {\r\n            First = first;\r\n            Second = second;\r\n        }\r\n\r\n        public F getFirst() {\r\n            return First;\r\n        }\r\n\r\n        public void setFirst(F first) {\r\n            First = first;\r\n        }\r\n\r\n        public SC getSecond() {\r\n            return Second;\r\n        }\r\n\r\n        public void setSecond(SC second) {\r\n            Second = second;\r\n        }\r\n\r\n        @Override\r\n        public int compareTo(Object o) {\r\n            if ((int) this.getFirst() - (int) ((Pair) o).getFirst() != 0) {\r\n                if ((int) this.getFirst() - (int) ((Pair) o).getFirst() > 0) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            } else {\r\n                if ((int) this.getSecond() - (int) ((Pair) o).getSecond() > 0) {\r\n                    return 1;\r\n                } else {\r\n                    if ((int) this.getSecond() - (int) ((Pair) o).getSecond() == 0) {\r\n                        return 0;\r\n                    } else {\r\n                        return -1;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public static boolean isPalindrome(String s) {\r\n        if (s.length() == 1) {\r\n            return true;\r\n        } else {\r\n            int n = s.length();\r\n            for (int i = 0; i < n / 2; i++) {\r\n                if (s.charAt(i) != s.charAt(n - 1 - i)) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    public static long gcd(long a, long b) {\r\n        if (b == 0)\r\n            return a;\r\n        return gcd(b, a % b);\r\n    }\r\n\r\n    public static long lcm(long a, long b) {\r\n        return (a / gcd(a, b)) * b;\r\n    }\r\n\r\n    static long sum(long from, long to) {\r\n        if(from>to){\r\n            return 0l;\r\n        }\r\n        if (from == to) {\r\n            return from;\r\n        }\r\n        if ((to - from + 1) % 2 == 0) {\r\n            return (to + from) * ((to - from + 1) / 2);\r\n        } else {\r\n            return (to + from) * ((to - from + 1) / 2) + (to + from) / 2;\r\n        }\r\n    }\r\n\r\n    private static final int MAXN = (int) 1e6;\r\n\r\n    private static final long MOD = 998244353;\r\n    private static long[] fac = new long[MAXN + 1];\r\n    private static long[] inv = new long[MAXN + 1];\r\n    private static long exp(long x, long n, long m) {\r\n        x %= m;  // note: m * m must be less than 2^63 to avoid ll overflow\r\n        long res = 1;\r\n        while (n > 0) {\r\n            if (n % 2 == 1) {\r\n                res = res * x % m;\r\n            }\r\n            x = x * x % m;\r\n            n /= 2;\r\n        }\r\n        return res;\r\n    }\r\n\r\n    private static void factorial(long p) {\r\n        fac[0] = 1;\r\n        for (int i = 1; i <= MAXN; i++) {\r\n            fac[i] = fac[i - 1] * i % p;\r\n        }\r\n    }\r\n\r\n    private static void inverses(long p) {\r\n        inv[MAXN] = exp(fac[MAXN], p - 2, p);\r\n        for (int i = MAXN; i >= 1; i--) {\r\n            inv[i - 1] = inv[i] * i % p;\r\n        }\r\n    }\r\n\r\n    private static long choose(long n, long r, long p) {\r\n        return fac[(int) n] * inv[(int) r] % p * inv[(int) (n - r)] % p;\r\n    }\r\n\r\n    public static void solve(){\r\n        long v=r.nextLong();\r\n        long[] a=new long[10];\r\n        for(int i=1; i<=9; i++)a[i]=r.nextLong();\r\n        int minn=9;\r\n        for(int i=9; i>=1; i--){\r\n            if(a[i]<a[minn])minn=i;\r\n        }\r\n        if(v<a[minn]){\r\n            pw.print(-1);\r\n            return;\r\n        }\r\n        if(v%a[minn]==0){\r\n            for(int i=1; i<=v/a[minn]; i++){\r\n                pw.print(minn);\r\n            }\r\n            return;\r\n        }\r\n        long remain=v%a[minn];\r\n        int[] ans=new int[(int)(v/a[minn])+1];\r\n        for(int i=1; i<=v/a[minn]; i++)ans[i]=minn;\r\n        int now=1;\r\n        for(int i=9; i>minn; i--){\r\n            int cnt=(int)(remain/(i-minn));\r\n            remain-=cnt*(i-minn);\r\n            while(cnt>0 && now<=ans.length-1){\r\n                ans[now]=i;\r\n                cnt--;\r\n                ++now;\r\n            }\r\n            if(remain==0 || now>ans.length-1)break;\r\n        }\r\n        for(int i=1; i<ans.length-1; i++){\r\n            pw.print(ans[i]);\r\n        }\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n//        int t = r.nextInt();\r\n//        while ((t--) > 0) {\r\n            solve();\r\n//        }\r\n        pw.close(); // flushes the output once printing is done\r\n    }\r\n}\r\n\r\n"
}