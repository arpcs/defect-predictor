{
    "id": 235998699,
    "contestId": 349,
    "creationTimeSeconds": 1701840363,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 349,
        "index": "B",
        "name": "Color the Fence",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1700,
        "tags": [
            "data structures",
            "dp",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 349,
        "members": [
            {
                "handle": "Ray_P0312"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1380295800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 35,
    "timeConsumedMillis": 122,
    "memoryConsumedBytes": 3993600,
    "source": "#include <bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\n \r\n #define MAXN 1000007\r\n \r\n// stores smallest prime factor for every number\r\nint spf[MAXN];\r\n \r\n// Calculating SPF (Smallest Prime Factor) for every\r\n// number till MAXN.\r\n// Time Complexity : O(nloglogn)\r\nbool sortbyCond(const pair<int, int>& a,\r\n                const pair<int, int>& b)\r\n{\r\n    if (a.first != b.first)\r\n        return (a.first < b.first);\r\n    else\r\n       return (a.second > b.second);\r\n}\r\nvoid sieve()\r\n{\r\n    spf[1] = 1;\r\n    for (int i = 2; i < MAXN; i++)\r\n \r\n        // marking smallest prime factor for every\r\n        // number to be itself.\r\n        spf[i] = i;\r\n \r\n    // separately marking spf for every even\r\n    // number as 2\r\n    for (int i = 4; i < MAXN; i += 2)\r\n        spf[i] = 2;\r\n \r\n    for (int i = 3; i * i < MAXN; i++) {\r\n        // checking if i is prime\r\n        if (spf[i] == i) {\r\n            // marking SPF for all numbers divisible by i\r\n            for (int j = i * i; j < MAXN; j += i)\r\n \r\n                // marking spf[j] if it is not\r\n                // previously marked\r\n                if (spf[j] == j)\r\n                    spf[j] = i;\r\n        }\r\n    }\r\n}\r\n \r\n// A O(log n) function returning primefactorization\r\n// by dividing by smallest prime factor at every step\r\nvector<int> getFactorization(int x)\r\n{\r\n    vector<int> ret;\r\n    while (x != 1) {\r\n        ret.push_back(spf[x]);\r\n        x = x / spf[x];\r\n    }\r\n    return ret;\r\n} \r\n\r\nll fact(ll x){\r\n    ll y=x;\r\n    ll cnt=1;\r\n    while(y--){\r\n        cnt=cnt*x;\r\n       // cnt=cnt%998244353;\r\n        x--;\r\n    }\r\n    return cnt;\r\n}\r\n /*ifstream inFile;  \r\n    ofstream outFile;\r\n    inFile.open(\"input.txt\");\r\n    outFile.open(\"output.txt\");\r\n    int n;\r\n    inFile >> n;\r\n    outFile<<n;*/\r\n \r\nvoid solve() {\r\n  /*   map<int,int>mp;\r\n    for(int i=0;i<n;i++){\r\n    vector<int>v =  getFactorization(a[i]);\r\n    for(int j=0;j<v.size();j++){\r\n        mp[v[j]]++;\r\n    }\r\n    }*/\r\n int v;\r\n cin>>v;\r\n int a[10];\r\n int x=1e6;\r\n for(int i=1;i<10;i++){\r\n     cin>>a[i];\r\n     x=min(x,a[i]);\r\n }\r\n if(x>v){\r\n     cout<<-1<<endl;\r\n }\r\n else{\r\n     int l=v/x;\r\n     \r\n     for(int i=1;i<=l;i++){\r\n         for(int j=9;j>=1;j--){\r\n             if((v-a[j])/x==l-i&&v>=a[j]){\r\n                 cout<<j;\r\n                 v=v-a[j];\r\n             }\r\n         }\r\n     }\r\n     cout<<endl;\r\n }\r\n \r\n}\r\n \r\nint main() {\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n \r\n    int t=1;\r\n   // cin >> t;\r\n    while (t--)\r\n        solve();\r\n}"
}