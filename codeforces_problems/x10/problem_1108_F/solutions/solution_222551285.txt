{
    "id": 222551285,
    "contestId": 1108,
    "creationTimeSeconds": 1694242126,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1108,
        "index": "F",
        "name": "MST Unification",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "binary search",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1108,
        "members": [
            {
                "handle": "SugarDadGG"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548254100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 25,
    "timeConsumedMillis": 155,
    "memoryConsumedBytes": 21606400,
    "source": "//#pragma GCC optimize(\"Ofast,no-stack-protector,unroll-loops\", \"omit-frame-poller\", \"inline\")\r\n//#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,fma,tune=native\")\r\n\r\n#include <bits/stdc++.h>\r\n\r\n#define int long long\r\nusing namespace std;\r\nstruct edge {\r\n    int u, v, w;\r\n};\r\n\r\nbool cmp(edge a, edge b) {\r\n    return a.w < b.w;\r\n}\r\n\r\nvector<int> par;\r\n\r\nint get_par(int v) {\r\n    if (v == par[v])return v;\r\n    return par[v] = get_par(par[v]);\r\n}\r\n\r\nvoid unite(int u, int v) {\r\n    u = get_par(u);\r\n    v = get_par(v);\r\n    par[u] = v;\r\n}\r\n\r\nbool in_one_comp(int u, int v) {\r\n    return get_par(u) == get_par(v);\r\n}\r\n\r\nvoid solve() {\r\n    int n, m;\r\n    cin >> n >> m;\r\n    vector<edge> E(m);\r\n    par.resize(n);\r\n    for (int i = 0; i < n; ++i) {\r\n        par[i] = i;\r\n    }\r\n    for (int i = 0; i < m; ++i) {\r\n        int u, v, w;\r\n        cin >> u >> v >> w;\r\n        u--;\r\n        v--;\r\n        E[i] = {u, v, w};\r\n    }\r\n    sort(E.begin(), E.end(), cmp);\r\n    vector<bool> used(m, false);\r\n    int sum = 0;\r\n    for (int i = 0; i < m; ++i) {\r\n        if (!in_one_comp(E[i].u, E[i].v)) {\r\n            sum += E[i].w;\r\n            unite(E[i].u, E[i].v);\r\n            used[i] = true;\r\n        }\r\n    }\r\n    map<int, int> mp;\r\n    for (int i = 0; i < m; ++i) {\r\n        if (!used[i]) {\r\n            mp[E[i].w]++;\r\n        }\r\n    }\r\n    int ans = 0;\r\n    set<int> y;\r\n    for (int i = 0; i < m; ++i) {\r\n        if (used[i]) {\r\n            if (!y.count(E[i].w)) {\r\n                ans += mp[E[i].w];\r\n                y.insert(E[i].w);\r\n            }\r\n        }\r\n    }\r\n    cout << ans;\r\n}\r\n\r\n\r\nsigned main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    int _ = 1;\r\n    //cin >> _;\r\n    while (_--) {\r\n        solve();\r\n    }\r\n    return 0;\r\n}"
}