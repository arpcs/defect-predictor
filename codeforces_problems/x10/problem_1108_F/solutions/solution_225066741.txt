{
    "id": 225066741,
    "contestId": 1108,
    "creationTimeSeconds": 1695641204,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1108,
        "index": "F",
        "name": "MST Unification",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "binary search",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1108,
        "members": [
            {
                "handle": "Killer_az"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548254100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 873,
    "memoryConsumedBytes": 4505600,
    "source": "// LUOGU_RID: 126093624\n#include <bits/stdc++.h>\nusing namespace std;\n\n#define fore(i, l, r)        for (int i = (l); i <= (r); ++i)\n#define ford(i, r, l)        for (int i = (r); i >= (l); --i)\n#define foret(i, x, y, pl)   for (int i = (x); i <= (y); i += (pl))\n#define fornt(i, x, y, pl)   for (int i = (x); i != (y); i += (pl))\n#define forlk(i, x, nx)      for (int i = (x); i; i = nx)\n#define forlink(i, x, y, nx) for (int i = (x); i != (y); i = (nx))\n\n#ifdef __GNUC__\n    #define MEM(c, x, sz) __builtin_memset(c, x, sz)\n    #define Sqrt(x)       __builtin_sqrt(x)\n#else\n    #define MEM(c, x, sz) memset(c, x, sz)\n    #define Sqrt(x)       sqrt(x)\n#endif\n#define lowbit(x)                       ((x) & (-(x)))\n#define Pow2(x)                         ((x) * (x))\n#define Pow3(x)                         ((x) * (x) * (x))\n#define Pow4(x)                         (Pow2(x) * Pow2(x))\n#define Pow8(x)                         (Pow4(x) * Pow4(x))\n\n#define Euclid2(x1, y1, x2, y2)         (Sqrt(Pow2(x1 - x2) + Pow2(y1 - y2)))\n#define Euclid3(x1, y1, z1, x2, y2, z2) (Sqrt(Pow2(x1 - x2) + Pow2(y1 - y2) + Pow2(z1 - z2)))\n\n#define Max(x, y)                       (x = ((x) > (y) ? (x) : (y)))\n#define Min(x, y)                       (x = ((x) < (y) ? (x) : (y)))\n#define Whether(x, y, z)                ((x) == (y) ? (z) : (x))\n\n#define UPINF                           numeric_limits<int>::max()\n#define inf                             0x3f3f3f3f\n#define lnf                             0x3f3f3f3f3f3f3f3f\n\n#define nil                             void(0)\n#define IfThen(x, y)                    ((x) ? y : nil)\n#define ObjEq(x, y)                     (memcmp((const char *)(&x), (const char *)(&y), sizeof(x)) == 0)\n\n#define forret(x, opt, ret)                                                                                            \\\n    for (x) { opt; }                                                                                                   \\\n    return ret\n\n#if __cplusplus >= 202002L\n    #define IfUnlikely(x) if (x) [[unlikely]]\n    #define IfLikely(x)   if (x) [[likely]]\n#else\n    #define IfUnlikely(x) if (__builtin_expect(!!(x), 0))\n    #define IfLikely(x)   if (__builtin_expect(!!(x), 1))\n#endif\n\ntypedef long long ll;\ntypedef pair<int, int> pir;\ntypedef pair<ll, ll> plr;\n\nconst int MAXN = 200010;\nconst int MAXM = 200010;\n\nint n, m;\n\nstruct Edge\n{\n    int u, v, w;\n    bool operator<(const Edge &o) const { return w < o.w; }\n} e[MAXN];\n\nint fa[MAXN];\n\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\n\nsigned main()\n{\n\n    cin >> n >> m;\n    fore(i, 1, n) fa[i] = i;\n    fore(i, 1, m) cin >> e[i].u >> e[i].v >> e[i].w;\n\n    sort(e + 1, e + m + 1);\n\n    int last = 0;\n    int ans = 0;\n    fore(i, 1, m)\n    {\n        int j = i;\n        while(e[j + 1].w == e[i].w) ++j;\n#define u e[k].u\n#define v e[k].v\n#define w e[k].w\n        fore(k, i, j) if(find(u) != find(v)) ans++;\n        fore(k, i, j) if(find(u) != find(v)) ans--, fa[find(u)] = find(v);\n        i = j;\n    }\n    cout << ans << endl;\n\n    return 0;\n}"
}