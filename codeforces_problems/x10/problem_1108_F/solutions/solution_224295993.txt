{
    "id": 224295993,
    "contestId": 1108,
    "creationTimeSeconds": 1695300034,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1108,
        "index": "F",
        "name": "MST Unification",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "binary search",
            "dsu",
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1108,
        "members": [
            {
                "handle": "Coder2020HCY"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1548254100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 171,
    "memoryConsumedBytes": 10444800,
    "source": "// LUOGU_RID: 125474243\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int N = 2e5 + 205;\r\n\r\nint n, m, f[N], egs, ans, tag[N];\r\nstruct edge {\r\n    int u, v, w;\r\n}e[N]; int e_sz;\r\n\r\nbool cmp(edge u, edge v) {\r\n    return u.w < v.w;\r\n}\r\n\r\nint getf(int x) {\r\n    return f[x] == x ? x : (f[x] = getf(f[x]));\r\n}\r\n\r\nbool merge(int u, int v) {\r\n    int f1 = getf(u), f2 = getf(v);\r\n    if(f1 == f2)\r\n        return 0;\r\n    f[f1] = f2;\r\n    return 1;\r\n}\r\n\r\nbool check(int u, int v) {\r\n    int f1 = getf(u), f2 = getf(v);\r\n    if(f1 == f2)\r\n        return 0;\r\n    return 1;\r\n}\r\n\r\nint main() {\r\n    scanf(\"%d%d\", &n, &m);\r\n    for(int i = 1; i <= n; i++)\r\n        f[i] = i;\r\n    for(int i = 1; i <= m; i++) {\r\n        int u, v, w;\r\n        scanf(\"%d%d%d\", &u, &v, &w);\r\n        e[++e_sz].u = u, e[e_sz].v = v, e[e_sz].w = w;\r\n    }\r\n    stable_sort(e + 1, e + m + 1, cmp);\r\n    for(int i = 1; egs < n - 1 && i <= m; i++) {\r\n        int p = i;\r\n        while(e[p + 1].w == e[i].w && p + 1 <= m)\r\n            ++p;\r\n        for(int j = i; j <= p; j++) {\r\n            if(check(e[j].u, e[j].v))\r\n                tag[j] = 1;\r\n            else\r\n                tag[j] = 0;\r\n        }\r\n        for(int j = i; j <= p; j++) {\r\n            if(tag[j])\r\n                if(!merge(e[j].u, e[j].v))\r\n                    ++ans;\r\n        }\r\n        i = p;\r\n    }\r\n    printf(\"%d\\n\", ans);\r\n    return 0;\r\n}"
}