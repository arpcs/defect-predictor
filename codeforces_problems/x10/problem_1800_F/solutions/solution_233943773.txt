{
    "id": 233943773,
    "contestId": 1800,
    "creationTimeSeconds": 1700756702,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1800,
        "index": "F",
        "name": "Dasha and Nightmares",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "bitmasks",
            "hashing",
            "meet-in-the-middle",
            "strings"
        ]
    },
    "author": {
        "contestId": 1800,
        "members": [
            {
                "handle": "ZDTSN"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1677767700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <unordered_set>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nint convertToInt(bool array[]){\r\n    int answer = 0;\r\n\r\n    for (int i = 0; i < 26; i++){\r\n        if (array[i]){\r\n            answer += 1<<i;\r\n        }\r\n    }\r\n\r\n    return answer;\r\n}\r\n\r\nint search1(int v, int right, int indices[], int values[]){\r\n    int left = 0;\r\n    int middle;\r\n\r\n    while (left <= right){\r\n        middle = (left+right)/2;\r\n\r\n        if (values[indices[middle]] > v){\r\n            right = middle-1;\r\n        }\r\n        else if (values[indices[middle]] < v){\r\n            left = middle+1;\r\n        }\r\n        else{\r\n            return middle;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nint main()\r\n{\r\n    int n, v1, v2, z1, z2, o1, o2, ind, answer = 0;\r\n    cin >> n;\r\n    bool chari[26];\r\n    bool chars[26];\r\n    char c;\r\n    int evenodd[n];\r\n    int yesno[n];\r\n    int indices[n];\r\n    unordered_set<int> zero;\r\n    int max1 = (1 << 26) - 1;\r\n    cin.get(c);\r\n\r\n    for (int i = 0; i < 26; i++){\r\n        zero.insert(max1-(1<<i));\r\n    }\r\n\r\n    for (int i = 0; i < n; i++){\r\n        indices[i] = i;\r\n        for (int j = 0; j < 26; j++){\r\n            chari[j] = false;\r\n            chars[j] = false;\r\n        }\r\n        c = '1';\r\n        while (cin.get(c) && c != '\\n'){\r\n            chari[c-'a'] |= true;\r\n            if (chars[c-'a']){\r\n                chars[c-'a'] = false;\r\n            }\r\n            else{\r\n                chars[c-'a'] = true;\r\n            }\r\n        }\r\n\r\n        yesno[i] = convertToInt(chari);\r\n        evenodd[i] = convertToInt(chars);\r\n    }\r\n\r\n    sort(indices, indices+n, [&evenodd](int i1, int i2){\r\n         return evenodd[i1] < evenodd[i2];\r\n    });\r\n\r\n    for (int i = 0; i < n; i++){\r\n        v1 = evenodd[i];\r\n        z1 = yesno[i];\r\n        for (const auto& element : zero) {\r\n            o1 = v1^element;\r\n\r\n            ind = search1(o1, n, indices, evenodd);\r\n\r\n            if (ind == -1){\r\n                continue;\r\n            }\r\n\r\n            o2 = z1 | yesno[indices[ind]];\r\n\r\n            if (o2 != max1){\r\n                answer++;\r\n            }\r\n\r\n            for (int j = ind+1; j < n; j++){\r\n                v2 = indices[j];\r\n\r\n                if (evenodd[v2] != o1){\r\n                    break;\r\n                }\r\n\r\n                o2 = z1 | yesno[j];\r\n\r\n                if (o2 != max1){\r\n                    answer++;\r\n                }\r\n            }\r\n\r\n            for (int j = ind-1; j > -1; j--){\r\n                v2 = indices[j];\r\n\r\n                if (evenodd[v2] != o1){\r\n                    break;\r\n                }\r\n\r\n                o2 = z1 | yesno[j];\r\n\r\n                if (o2 != max1){\r\n                    answer++;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    answer = answer/2;\r\n    cout << answer;\r\n    return 0;\r\n}\r\n"
}