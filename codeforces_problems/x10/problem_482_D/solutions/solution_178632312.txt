{
    "id": 178632312,
    "contestId": 482,
    "creationTimeSeconds": 1667177339,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 482,
        "index": "D",
        "name": "Random Function and Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "combinatorics",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 482,
        "members": [
            {
                "handle": "for_sx_e_1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1414170000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 90,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 13414400,
    "source": "// LUOGU_RID: 92306933\n#include<algorithm>\r\n#include<cstdio>\r\n#include<vector>\r\nconst int maxn=1e5+5;\r\nconst int mod=1e9+7;\r\nstd::vector<int>son[maxn];\r\nint cho[maxn][2],all[maxn][2][2];//all doesn't calculate x in.\r\nvoid decide(int x){\r\n\tcho[x][1]=all[x][0][0]=all[x][0][1]=1;\r\n\tfor(int v:son[x]){\r\n\t\tdecide(v);\r\n\t\tint zer=cho[x][0],one=cho[x][1];\r\n\t\t(cho[x][0]+=(1ll*zer*cho[v][0]%mod+1ll*one*cho[v][1]%mod)%mod)%=mod;\r\n\t\t(cho[x][1]+=(1ll*zer*cho[v][1]%mod+1ll*one*cho[v][0]%mod)%mod)%=mod;\r\n\t\tint zz=all[x][0][0],zo=all[x][0][1],oo=all[x][1][1];\r\n\t\t(all[x][0][0]+=1ll*zz*cho[v][0]%mod)%=mod;\r\n\t\t(all[x][0][1]+=1ll*oo*cho[v][1]%mod)%=mod;\r\n\t\t(all[x][1][1]+=1ll*zo*cho[v][1]%mod)%=mod;\r\n\t}\r\n\tcho[x][0]=((2*cho[x][0]-all[x][1][1])%mod+mod)%mod;//since we now calculate x in.\r\n\tcho[x][1]=((2*cho[x][1]-all[x][0][0])%mod+mod)%mod;\r\n\treturn;\r\n}\r\nint t;\r\nint n;\r\nsigned main(){\r\n//\tscanf(\"%d\",&t);\r\n\tt=1;\r\n\tfor(int wc=1;wc<=t;wc++){\r\n\t\tscanf(\"%d\",&n);\r\n\t\tfor(int i=1;i<=n;i++)son[i].clear();\r\n\t\tfor(int i=2;i<=n;i++){\r\n\t\t\tint fa;\r\n\t\t\tscanf(\"%d\",&fa);\r\n\t\t\tson[fa].push_back(i);\r\n\t\t}\r\n\t\tdecide(1);\r\n\t\tprintf(\"%d\\n\",(cho[1][0]+cho[1][1])%mod);\r\n\t}\r\n\treturn 0;\r\n}\r\n//namespace burningContract"
}