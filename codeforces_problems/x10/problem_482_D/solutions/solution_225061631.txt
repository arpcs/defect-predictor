{
    "id": 225061631,
    "contestId": 482,
    "creationTimeSeconds": 1695638917,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 482,
        "index": "D",
        "name": "Random Function and Tree",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "combinatorics",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 482,
        "members": [
            {
                "handle": "wsday"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1414170000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 90,
    "timeConsumedMillis": 109,
    "memoryConsumedBytes": 18432000,
    "source": "// LUOGU_RID: 126086800\n#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define pb push_back\r\nconst int N = 1e5+5,mod = 1e9+7;\r\nint n;\r\nvector<int>e[N];\r\nll f[N][2];\r\nvoid dfs(int u)\r\n{\r\n    int ty = e[u].size()&1;\r\n    f[u][0] = 0;\r\n    f[u][1] = 1;\r\n    for(auto v:e[u])\r\n    {\r\n        dfs(v);\r\n        ll v0 = (f[u][0]*f[v][0] + f[u][1]*f[v][1])%mod,v1 = (f[u][0]*f[v][1] + f[u][1]*f[v][0])%mod;\r\n        f[u][0] = v0,f[u][1] = v1;\r\n    }\r\n    f[u][0] = f[u][0]*2%mod;\r\n    f[u][1] = f[u][1]*2%mod;//\u5de6\u53f3\u4e24\u8fb9\r\n    ll val = 1;\r\n    for(auto v:e[u]) val = val*f[v][0]%mod;\r\n    f[u][1] = (f[u][1] + mod - val)%mod;//\u4e24\u904d\u76f8\u540c:\u51680\r\n    ll vec[2] = {1,0};\r\n    for(auto v:e[u])\r\n    {\r\n        ll v0 = (vec[0]+vec[1]*f[v][1])%mod,v1 = (vec[1]+vec[0]*f[v][1])%mod;\r\n        vec[0] = v0,vec[1] = v1;\r\n    }\r\n    f[u][0] = (f[u][0] + mod - vec[1])%mod;//\u51681\r\n    f[u][0] = (f[u][0] + 1)%mod;\r\n}\r\nint main()\r\n{\r\n    scanf(\"%d\",&n);\r\n    for(int i = 2,p;i <= n;i++)\r\n    {\r\n        scanf(\"%d\",&p);\r\n        e[p].pb(i);\r\n    }\r\n    dfs(1);\r\n    printf(\"%lld\\n\",(f[1][0] + f[1][1] + mod - 1)%mod);\r\n    return 0;\r\n}"
}