{
    "id": 169383939,
    "contestId": 392,
    "creationTimeSeconds": 1661220379,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 392,
        "index": "C",
        "name": "Yet Another Number Sequence",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "tags": [
            "combinatorics",
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 392,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1392728400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 64,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 819200,
    "source": "#include <iostream>\n#include <string.h>\n#include <stdio.h>\n \nusing namespace std;\ntypedef long long LL;\nconst int N = 105;\nconst int M = 45;\nconst LL MOD = 1000000007;\n \nLL C[M][M];\n \nstruct Matrix\n{\n    LL m[N][N];\n};\n \nMatrix A,I;\n \nvoid Init()\n{\n    for(int i=0;i<M;i++)\n    {\n        C[i][0] = C[i][i] = 1;\n        if(i == 0) continue;\n        for(int j=1;j<=i;j++)\n            C[i][j] = (C[i-1][j] % MOD + C[i-1][j-1] % MOD) % MOD;\n    }\n}\n \nvoid InitMatrix(int k)\n{\n    int n = 2 * k + 3;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n            I.m[i][j] = (i == j);\n    }\n    A.m[0][0] = 1;\n    for(int i=1;i<n;i++)\n    {\n        if(i <= k + 1)\n            A.m[0][i] = C[k][k+1-i];\n        else\n            A.m[0][i] = A.m[0][i-k-1];\n    }\n    for(int i=1;i<n;i++)\n        A.m[i][0] = 0;\n    for(int i=1;i<n;i++)\n    {\n        if(i <= k + 1)\n        {\n            for(int j=1;j<n;j++)\n            {\n                if(j < i) A.m[i][j] = 0;\n                else\n                {\n                    if(j <= k + 1)\n                        A.m[i][j] = C[k+1-i][k+1-j];\n                    else\n                        A.m[i][j] = A.m[i][j-k-1];\n                }\n            }\n        }\n        else\n        {\n            for(int j=1;j<n;j++)\n            {\n                if(j < i - k - 1) A.m[i][j] = 0;\n                else\n                {\n                    if(j <= k + 1)\n                        A.m[i][j] = A.m[i-k-1][j];\n                    else\n                        A.m[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n \nMatrix multi(Matrix a,Matrix b,int n) \n{\n    Matrix c;\n    for(int i=0;i<n;i++)\n    {\n        for(int j=0;j<n;j++)\n        {\n            c.m[i][j] = 0;\n            for(int k=0;k<n;k++)\n            {\n                c.m[i][j] += a.m[i][k] * b.m[k][j] % MOD;\n                c.m[i][j] %= MOD;\n            }\n        }\n    }\n    return c;\n}\n \nMatrix power(Matrix A,int n,LL k)\n{\n    Matrix ans = I, p = A;\n    while(k)\n    {\n        if(k & 1 )\n        {\n            ans = multi(ans,p,n);\n            k--;\n        }\n        k >>= 1;\n        p = multi(p,p,n);\n    }\n    return ans;\n}\n \nint main()\n{\n    Init();\n    LL n;\n    int k;\n    while(cin>>n>>k)\n    {\n        InitMatrix(k);\n        Matrix t = power(A,2*k+3,n-1);\n        LL ans =0;\n        for(int i=0;i<2*k+3;i++)\n        {\n            ans += t.m[0][i];\n            ans %= MOD;\n        }\n        cout<<ans<<endl;\n    }\n    return 0;\n}\n\t    \t  \t \t \t\t\t\t\t\t   \t  \t    \t"
}