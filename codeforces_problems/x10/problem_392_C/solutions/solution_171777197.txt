{
    "id": 171777197,
    "contestId": 392,
    "creationTimeSeconds": 1662961979,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 392,
        "index": "C",
        "name": "Yet Another Number Sequence",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "tags": [
            "combinatorics",
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 392,
        "members": [
            {
                "handle": "luogu_bot2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1392728400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 64,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <cmath>\r\n#define ll long long\r\nusing namespace std;\r\n\r\nconst int Mx = 51, Mod = 1e9 + 7;\r\nconst int Inv2 = (Mod + 1) >> 1;\r\n\r\nll FastPow(ll a, ll b){\r\n\tll res = 1;\r\n\twhile(b){\r\n\t\tif(b & 1) res = res * a % Mod;\r\n\t\tb >>= 1, a = a * a % Mod;\r\n\t}\r\n\treturn res;\r\n}\r\n\r\nconst int Sqi = 5;\r\n\r\nstruct NTC{ // Number Theory Complex\r\n\tll a, b; // a + bi\r\n\tNTC(ll x = 0, ll y = 0){ a = x, b = y;}\r\n\tconst NTC Inv(){\r\n\t\tll d = FastPow((a * a - b * b % Mod * Sqi) % Mod, Mod - 2);\r\n\t\treturn (NTC){ a * d % Mod, -b * d % Mod};\r\n\t}\r\n\tconst NTC Conj(){ return (NTC){ a, -b};}\r\n\tNTC operator + (const NTC x) const { return (NTC){(a + x.a) % Mod, (b + x.b) % Mod};}\r\n\tNTC operator - (const NTC x) const { return (NTC){(a - x.a) % Mod, (b - x.b) % Mod};}\r\n\tNTC operator * (const NTC x) const { return (NTC){ (a * x.a + b * x.b % Mod * Sqi) % Mod, \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t    (b * x.a + a * x.b) % Mod};}\r\n\tNTC operator / (NTC x) { return (*this) * x.Inv();}\r\n\tNTC operator + (const ll x) const { return (NTC){(a + x) % Mod, b};}\r\n\tNTC operator - (const ll x) const { return (NTC){(a - x) % Mod, b};}\r\n\tNTC operator * (const ll x) const { return (NTC){ a * (x % Mod) % Mod, b * (x % Mod) % Mod};}\r\n\tvoid Print(){ printf(\"%lld + %lld i\\n\", a, b);}\r\n};\r\n\r\nNTC FastPowNTC(NTC a, ll b){\r\n\tNTC res(1);\r\n\twhile(b){\r\n\t\tif(b & 1) res = res * a;\r\n\t\tb >>= 1, a = a * a;\r\n\t}\r\n\treturn res;\r\n}\r\n\r\nll Frac[Mx], Infs[Mx];\r\n\r\nNTC I[Mx];\r\n\r\nNTC Phi(Inv2, Inv2), Miu(Inv2, -Inv2);\r\n\r\nll n; int k;\r\n\r\nll C(int n, int m){ return Frac[n] * Infs[m] % Mod * Infs[n - m] % Mod;}\r\n\r\nNTC Compute(NTC t){\r\n\tNTC it = (t - 1).Inv(), tn = FastPowNTC(t, n + 1);\r\n\tI[0] = (tn - t) * it;\r\n\tll pn = n % Mod, ptn = pn;\r\n\tfor(int i = 1; i <= k; ++i){\r\n\t\tI[i] = tn * ptn;\r\n\t\tptn = ptn * pn % Mod;\r\n\t\tfor(int j = 0; j < i; ++j){\r\n\t\t\tif((i - j) & 1) I[i] = I[i] - I[j] * C(i, j);\r\n\t\t\telse I[i] = I[i] + I[j] * C(i, j);\r\n\t\t}\r\n\t\tI[i] = I[i] * it;\r\n\t}\r\n\treturn I[k];\r\n}\r\n\r\nvoid Init(){\r\n\tFrac[0] = 1;\r\n\tfor(int i = 1; i < Mx; ++i) Frac[i] = Frac[i - 1] * i % Mod;\r\n\tInfs[Mx - 1] = FastPow(Frac[Mx - 1], Mod - 2);\r\n\tfor(int i = Mx - 1; i >= 1; --i) Infs[i - 1] = Infs[i] * i % Mod;\r\n}\r\n\r\nNTC BaoliCompute(NTC t){\r\n\tNTC res;\r\n\tfor(int i = 1; i <= n; ++i){\r\n\t\tres = res + FastPowNTC(t, i) * FastPow(i, k);\r\n\t}\r\n\treturn res;\r\n}\r\n\r\nint main(){\r\n\tInit();\r\n\tscanf(\"%lld %d\", &n, &k);\r\n\tNTC Ant = Phi * Compute(Phi) - Miu * Compute(Miu);\r\n\tll Ans = Ant.b;\r\n\tif(Ans < 0) Ans += Mod;\r\n\tprintf(\"%lld\", Ans);\r\n\treturn 0;\r\n}"
}