{
    "id": 86201195,
    "contestId": 392,
    "creationTimeSeconds": 1594126074,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 392,
        "index": "C",
        "name": "Yet Another Number Sequence",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "tags": [
            "combinatorics",
            "math",
            "matrices"
        ]
    },
    "author": {
        "contestId": 392,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1392728400
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 64,
    "timeConsumedMillis": 670,
    "memoryConsumedBytes": 4505600,
    "source": "#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst long long mod = 1e9 + 7;\nlong long n, k;\nlong long c[50][50];\nstruct matrix\n{\n    long long m[85][85];\n};\nvoid init(){\n    for(int i = 0; i <= 41; ++i)\n        c[i][0] = c[i][i] = 1;\n    for(int i = 1; i <= 41; ++i)\n        for(int j = 1; j < i; ++j)\n        c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod;\n}\nmatrix mul(matrix a, matrix b)\n{\n    matrix temp;\n    for(int i = 0; i < 2 * k + 3; i++)\n    {\n        for(int j = 0; j < 2 * k + 3; j++)\n        {\n            temp.m[i][j] = 0;\n        }\n    }\n    for(int i = 0; i < 2 * k + 3; i++)\n    {\n        for(int j = 0; j < 2 * k + 3; j++)\n        {\n            for(int h = 0; h < 2 * k + 3; h++)\n            {\n                temp.m[i][j] = (temp.m[i][j] + (a.m[i][h] * b.m[h][j]) % mod) % mod;\n            }\n        }\n    }\n    return temp;\n}\nmatrix qpow(matrix a, long long xx)\n{\n    matrix ans;\n    for(int i = 0; i < 2 * k + 3; i++)\n    {\n        for(int j = 0; j < 2 * k + 3; j++)\n        {\n            if(i == j)\n                ans.m[i][j] = 1;\n            else\n                ans.m[i][j] = 0;\n        }\n    }\n    while(xx)\n    {\n        if(xx & 1)\n        {\n            ans = mul(ans, a);\n        }\n        a = mul(a, a);\n        xx /= 2;\n    }\n    return ans;\n}\nlong long qqpow(long long a, long long b)\n{\n    long long res = 1;\n    while(b)\n    {\n        if(b & 1)\n        {\n            res *= a;\n            res %= mod;\n        }\n        a *= a;\n        a %= mod;\n        b /= 2;\n    }\n    return res;\n}\nint main()\n{\n    scanf(\"%lld%lld\", &n, &k);\n    if(n == 1)\n    {\n        cout << 1 << endl;\n    }\n    else\n    {\n        init();\n        matrix res;\n        for(int i = 0; i < 2 * k + 3; i++)\n        {\n            for(int j = 0;j < 2 * k + 3; j++)\n            {\n                res.m[i][j] = 0;\n            }\n        }\n        res.m[0][0] = 1, res.m[0][2 * k + 2] = 1;\n        for(int i = k; i >= 0; i--)\n        {\n            res.m[k + 1 - i][2 * k + 2 - i] = 1;\n        }\n        for(int i = 0; i <= k; i++)\n        {\n            for(int j = 0; j <= i; j++)\n            {\n                res.m[k + 2 + i][1 + j] = (c[i][j] * qqpow(2, i - j)) % mod;\n            }\n        }\n        for(int i = 0; i <= k ; i++)\n        {\n            for(int j = 0; j <= i; j++)\n            {\n                res.m[k + 2 + i][1 + k + 1 + j] = c[i][j];\n            }\n        }\n        /*for(int i = 0; i < 2 * k + 3; i++)\n        {\n            for(int j = 0;j < 2 * k + 3; j++)\n            {\n                cout << res.m[i][j] << \" \";\n            }\n            cout << endl;\n        }*/\n        res = qpow(res, n - 1);\n        /*for(int i = 0; i < 2 * k + 3; i++)\n        {\n            for(int j = 0;j < 2 * k + 3; j++)\n            {\n                cout << res.m[i][j] << \" \";\n            }\n            cout << endl;\n        }*/\n        long long ans[105];\n        ans[0] = 1, ans[1] = 1;\n        for(int i = 2; i < k + 2; i++)\n        {\n            ans[i] = 1;\n        }\n        ans[k + 2] = 2;\n        for(int i = k + 3; i < 2 * k + 3; i++)\n        {\n            ans[i] = ans[i - 1] * 2;\n            ans[i] %= mod;\n        }\n        //for(int i = 0; i < 2 * k + 3; i++)\n        //{\n        //    cout << ans[i] << endl;\n        //}\n        long long aans = 0;\n        for(int i = 0; i < 2 * k + 3; i++)\n        {\n            aans = aans + res.m[0][i] * ans[i];\n            aans %= mod;\n        }\n        cout << aans % mod << endl;\n    }\n}\n\n\t\t  \t \t    \t       \t\t \t\t\t\t   \t"
}