{
    "id": 138470154,
    "contestId": 85,
    "creationTimeSeconds": 1638985000,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 85,
        "index": "D",
        "name": "Sum of Medians",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2300,
        "tags": [
            "binary search",
            "brute force",
            "data structures",
            "implementation"
        ]
    },
    "author": {
        "contestId": 85,
        "members": [
            {
                "handle": "payar00"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1305903600
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\n#define ll unsigned long long\r\n#define pi (4*atan(1.0))\r\n#define eps 1e-14\r\n#define bug(x)  cout<<\"bug\"<<x<<endl;\r\nconst int N=2e5+,M=1e6+,inf=1e9+;\r\nconst ll INF=1e18+,mod=;\r\nint n,tree[N];\r\nint lowbit(int x)\r\n{\r\n    return x&-x;\r\n}\r\nvoid update(int x,int c)\r\n{\r\n    while(x<1e5+)\r\n    {\r\n        tree[x]+=c;\r\n        x+=lowbit(x);\r\n    }\r\n}\r\nint getsum(int x)\r\n{\r\n    int sum=;\r\n    while(x>)\r\n    {\r\n        sum+=tree[x];\r\n        x-=lowbit(x);\r\n    }\r\n    return sum;\r\n}\r\nstruct is\r\n{\r\n    int lazy;\r\n    ll ans[];\r\n}a[N<<];\r\nll temp[];\r\nvoid pushup(int pos)\r\n{\r\n    for(int i=;i<;i++)\r\n        a[pos].ans[i]=a[pos<<].ans[i]+a[pos<<|].ans[i];\r\n}\r\nvoid change(int pos,int x)\r\n{\r\n    x=(x%+)%;\r\n    int ji=;\r\n    for(int i=;i<;i++)\r\n        temp[i]=a[pos].ans[i];\r\n    for(int i=x;i<;i++)\r\n        a[pos].ans[i]=temp[ji++];\r\n    for(int i=;i<x;i++)\r\n        a[pos].ans[i]=temp[ji++];\r\n}\r\nvoid pushdown(int pos)\r\n{\r\n    if(a[pos].lazy)\r\n    {\r\n        a[pos<<].lazy+=a[pos].lazy;\r\n        a[pos<<|].lazy+=a[pos].lazy;\r\n        change(pos<<,a[pos].lazy);\r\n        change(pos<<|,a[pos].lazy);\r\n        a[pos].lazy=;\r\n    }\r\n}\r\nvoid build(int l,int r,int pos)\r\n{\r\n    a[pos].lazy=;\r\n    memset(a[pos].ans,,sizeof(a[pos].ans));\r\n    if(l==r)return;\r\n    int mid=(l+r)>>;\r\n    build(l,mid,pos<<);\r\n    build(mid+,r,pos<<|);\r\n}\r\nvoid update(int L,int R,int c,int l,int r,int pos)\r\n{\r\n    if(L<=l&&r<=R)\r\n    {\r\n        a[pos].lazy+=c;\r\n        change(pos,c);\r\n        return;\r\n    }\r\n    pushdown(pos);\r\n    int mid=(l+r)>>;\r\n    if(L<=mid)\r\n        update(L,R,c,l,mid,pos<<);\r\n    if(R>mid)\r\n        update(L,R,c,mid+,r,pos<<|);\r\n    pushup(pos);\r\n}\r\nvoid point(int p,int k,int c,int l,int r,int pos)\r\n{\r\n    if(l==r)\r\n    {\r\n        a[pos].ans[k]+=c;\r\n        return;\r\n    }\r\n    pushdown(pos);\r\n    int mid=(l+r)>>;\r\n    if(p<=mid)\r\n        point(p,k,c,l,mid,pos<<);\r\n    else\r\n        point(p,k,c,mid+,r,pos<<|);\r\n    pushup(pos);\r\n}\r\nchar str[N][];\r\nint b[N];\r\nint s[N],cnt;\r\nint getpos(int x)\r\n{\r\n    int pos=lower_bound(s+,s++cnt,x)-s;\r\n    return pos;\r\n}\r\nint main()\r\n{\r\n    int n;\r\n    scanf(\"%d\",&n);\r\n    for(int i=;i<=n;i++)\r\n    {\r\n        scanf(\"%s\",str[i]);\r\n        if(str[i][]=='a'||str[i][]=='d')\r\n        {\r\n            scanf(\"%d\",&b[i]);\r\n            s[++cnt]=b[i];\r\n        }\r\n    }\r\n    sort(s+,s++cnt);\r\n    cnt=max(,cnt);\r\n    build(,cnt,);\r\n    for(int i=;i<=n;i++)\r\n    {\r\n        //cout<<str[i]<<endl;\r\n        if(str[i][]=='a')\r\n        {\r\n            int x=getpos(b[i]);\r\n            int now=getsum(x-);\r\n            now%=;\r\n            //cout<<x<<\" \"<<now<<\" \"<<b[i]<<endl;\r\n            update(x,);\r\n            update(x+,cnt,,,cnt,);\r\n            point(x,now,b[i],,cnt,);\r\n        }\r\n        else if(str[i][]=='d')\r\n        {\r\n            int x=getpos(b[i]);\r\n            int now=getsum(x-);\r\n            now%=;\r\n            update(x,-);\r\n            point(x,now,-b[i],,cnt,);\r\n            update(x+,cnt,-,,cnt,);\r\n        }\r\n        else\r\n            printf(\"%lld\\n\",a[].ans[]);\r\n        //printf(\"%lld\\n\",a[1].ans[2]);\r\n    }\r\n    return ;\r\n}"
}