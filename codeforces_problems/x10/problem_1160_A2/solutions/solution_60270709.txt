{
    "id": 60270709,
    "contestId": 1160,
    "creationTimeSeconds": 1567956144,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1160,
        "index": "A2",
        "name": "Collaboration",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1160,
        "members": [
            {
                "handle": "74TrAkToR"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556614800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "PARTIAL",
    "testset": "TESTS2",
    "passedTestCount": 1000,
    "timeConsumedMillis": 4523,
    "memoryConsumedBytes": 48844800,
    "points": 13554.484,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint dp[2005][2005];\r\nint opt[2005][2005];\r\nint gett[2005][2005];\r\nvector < vector < int > > Q;\r\nint X, Y;\r\nvector < string > out[10];\r\n\r\nvoid dfs(int l, int r) {\r\n    if (dp[l][r] == 0) return;\r\n    if (dp[l][r] == gett[l][r]) {\r\n        //cout << \"OK\" << endl;\r\n        int cnt = 0, timer = 0;\r\n        for (int tmp = 1; tmp <= 7; ++tmp) out[tmp] = {};\r\n        for (int j = l; j <= r; ++j) {\r\n            //cout << j << endl;\r\n            if (j == l) {\r\n                //cout << Q[j][3] << endl;\r\n                int dist = abs(Q[j][0] - X) + abs(Q[j][1] - Y);\r\n                timer = max(0, Q[j][4] - dist);\r\n                string cur = \"start \";\r\n                cur += to_string(timer);\r\n                cur += \" 1\";\r\n                for (int z = 1; z <= Q[j][3]; ++z) out[z].push_back(cur);\r\n                cur = \"arrive \";\r\n                timer += dist;\r\n                cur += to_string(timer);\r\n                cur += \" \";\r\n                cur += to_string(Q[j][6]);\r\n                for (int z = 1; z <= Q[j][3]; ++z) out[z].push_back(cur);\r\n                cur = \"work \";\r\n                cur += to_string(timer);\r\n                timer += Q[j][2];\r\n                cur += \" \";\r\n                cur += to_string(timer);\r\n                cur += \" \";\r\n                cur += to_string(Q[j][6]);\r\n                for (int z = 1; z <= Q[j][3]; ++z) out[z].push_back(cur);\r\n                cnt = Q[j][3];\r\n                //cout << \"OK\" << endl;\r\n            }\r\n            else {\r\n                int dist = abs(Q[j][0] - Q[j - 1][0]) + abs(Q[j][1] - Q[j - 1][1]);\r\n                timer = max(timer + dist, Q[j][4]);\r\n                string cur = \"arrive \";\r\n                cur += to_string(timer);\r\n                cur += \" \";\r\n                cur += to_string(Q[j][6]);\r\n                for (int z = 1; z <= cnt; ++z) out[z].push_back(cur);\r\n                int dist1 = abs(X - Q[j][0]) + abs(Y - Q[j][1]);\r\n                for (int z = 1; z <= Q[j][3] - cnt; ++z) {\r\n                    cur = \"start \";\r\n                    cur += to_string(timer - dist1);\r\n                    cur += \" 1\";\r\n                    out[z + cnt].push_back(cur);\r\n                    cur = \"arrive \";\r\n                    cur += to_string(timer);\r\n                    cur += \" \";\r\n                    cur += to_string(Q[j][6]);\r\n                    out[z + cnt].push_back(cur);\r\n                }\r\n                cnt = max(cnt, Q[j][3]);\r\n                cur = \"work \";\r\n                cur += to_string(timer);\r\n                cur += \" \";\r\n                timer += Q[j][2];\r\n                cur += to_string(timer);\r\n                cur += \" \";\r\n                cur += to_string(Q[j][6]);\r\n                for (int z = 1; z <= Q[j][3]; ++z) out[z].push_back(cur);\r\n            }\r\n        }\r\n        //cout << \"OK\" << endl;\r\n        for (int j = 1; j <= cnt; ++j) {\r\n            int dist = abs(X - Q[r][0]) + abs(Y - Q[r][1]);\r\n            string cur = \"arrive \";\r\n            timer += dist;\r\n            cur += to_string(timer);\r\n            timer -= dist;\r\n            cur += \" 1\";\r\n            out[j].push_back(cur);\r\n            out[j].push_back(\"end\");\r\n            for (auto key : out[j]) cout << key << '\\n';\r\n        }\r\n    }\r\n    else {\r\n        dfs(l, opt[l][r]);\r\n        dfs(opt[l][r] + 1, r);\r\n    }\r\n}\r\n\r\nmain() {\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int n, x, y, d, p, l, h;\r\n    cin >> n;\r\n    for (int i = 1; i <= n; ++i) {\r\n        cin >> x >> y >> d >> p >> l >> h;\r\n        if (i == 1) X = x, Y = y;\r\n        else Q.push_back({x, y, d, p, l, h, i});\r\n    }\r\n    sort(Q.begin(), Q.end(), [](vector < int > a, vector < int > b) {\r\n        return a < b;\r\n    });\r\n    n--;\r\n    //cout << \"OK\" << endl;\r\n    for (int i = 0; i < n; ++i) {\r\n        int sum = 0, cnt = 0, timer;\r\n        for (int j = i; j < n; ++j) {\r\n            if (j == i) {\r\n                int dist = abs(X - Q[i][0]) + abs(Y - Q[i][1]);\r\n                if (max(dist, Q[i][4]) + Q[i][2] > Q[i][5]) break;\r\n                cnt = Q[i][3];\r\n                sum -= (dist + Q[i][2] - Q[i][2] * (Q[i][3] + 5)) * cnt;\r\n                gett[i][j] = sum - cnt * dist;\r\n                timer = max(Q[i][4], dist) + Q[i][2];\r\n            }\r\n            else {\r\n                int dist = abs(Q[j][0] - Q[j - 1][0]) + abs(Q[j][1] - Q[j - 1][1]), dist1 = abs(X - Q[j][0]) + abs(Y - Q[j][1]);\r\n                if (max(dist + timer, Q[j][4]) + Q[j][2] > Q[j][5]) break;\r\n                sum -= (cnt * dist + max(0, Q[j][3] - cnt) * dist1 + max(cnt, Q[j][3]) * Q[j][2]);\r\n                sum += (Q[j][2] * Q[j][3] * (Q[j][3] + 5));\r\n                timer = max(dist + timer, Q[j][4]) + Q[j][2];\r\n                cnt = max(cnt, Q[j][3]);\r\n                gett[i][j] = sum - cnt * dist1;\r\n            }\r\n            gett[i][j] -= cnt * 240;\r\n        }\r\n    }\r\n    /*for (int i = 0; i < n; ++i) {\r\n        if (gett[i][i] > 0) {\r\n            for (int z = Q[i][3]; z >= 1; --z) {\r\n                d = abs(X - Q[i][0]) + abs(Y - Q[i][1]);\r\n                int timer = max(0, Q[i][4] - d);\r\n                cout << \"start\" << \" \" << timer << \" 1\" << '\\n';\r\n                timer += d;\r\n                cout << \"arrive \" << timer << \" \" << Q[i][6] << '\\n';\r\n                cout << \"work \" << timer << \" \" << timer + Q[i][2] << \" \" << Q[i][6] << '\\n';\r\n                timer += Q[i][2];\r\n                timer += d;\r\n                cout << \"arrive \" << timer << \" 1\" << '\\n';\r\n                cout << \"end\" << '\\n';\r\n            }\r\n        }\r\n    }\r\n    return 0;*/\r\n    //cout << \"OK\" << endl;\r\n    for (int len = 1; len <= n; ++len) {\r\n        for (int i = 0; i + len - 1 < n; ++i) {\r\n            int j = i + len - 1;\r\n            dp[i][j] = max(dp[i][j], gett[i][j]);\r\n            for (int mid = i; mid < j; ++mid) {\r\n                int x = dp[i][mid] + dp[mid + 1][j];\r\n                if (x > dp[i][j]) {\r\n                    dp[i][j] = x;\r\n                    opt[i][j] = mid;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    int summa = 0;\r\n    for (int i = 0; i < n; ++i) summa = summa + max(0, gett[i][i]);\r\n    dfs(0, n - 1);\r\n    //cout << \"OK\" << endl;\r\n    //cout << dp[0][n - 1] << endl;\r\n    return 0;\r\n}\r\n"
}