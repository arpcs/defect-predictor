{
    "id": 60028624,
    "contestId": 1160,
    "creationTimeSeconds": 1567608498,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1160,
        "index": "A2",
        "name": "Collaboration",
        "type": "PROGRAMMING",
        "tags": [
            "*special"
        ]
    },
    "author": {
        "contestId": 1160,
        "members": [
            {
                "handle": "Mlxa"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1556614800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS2",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing ll = long long;\n#define long ll\n#define all(x) begin(x), end(x)\nusing namespace std;\n\nmt19937 rnd;\n\nconst int N = 2002;\nconst int P = 7;\n\nstruct location {\n\tint x;\t// x coord \t[0, 100]\n\tint y;  // y coord \t[0, 100]\n\tint d;  // duration\t[5, 30]\n\tint p;  // peoples \t[1, 7]\n\tint l;\t// min st \t[200, 800]\n\tint h;\t// max fn \t[200, 800]\n\tint profit() {\n\t\treturn d * p * (p + 5);\n\t}\n};\n\nint n;\nlocation arr[N];\nbool used[N];\n\nint distance(location a, location b) {\n\treturn abs(a.x - b.x) + abs(a.y - b.y);\n}\n\nint distance(int i, int j) {\n\treturn distance(arr[i], arr[j]);\n}\n\nvector<pair<int, int>> answer[P];\n// {time, place}\n\nint profit = 0;\n\n\n\nint main() {\n#ifdef LC\n    assert(freopen(\"input.txt\", \"r\", stdin));\n    assert(freopen(\"output.txt\", \"w\", stdout));\n#endif\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cin >> n;\n    for (int i = 1; i <= n; ++i) {\n\t\tcin >> arr[i].x >> arr[i].y >> arr[i].d >> arr[i].p >> arr[i].l >> arr[i].h;\n\t}\n\t\n\tint timer = 0;\n\tint pos = 1;\n\twhile (1) {\n\t\tint j = -1;\n\t\tint f = 0;\n\t\tfor (int i = 2; i <= n; ++i) {\n\t\t\tint t = max(timer + distance(pos, j), arr[j].l);\n\t\t\tint e = t + arr[i].d;\n\t\t\tif (used[i] || !(arr[i].p <= P && e <= arr[i].h)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint cost = arr[i].profit() - P * (t + arr[i].d - timer);\n\t\t\tif (rnd() % 100 < 99) {\n\t\t\t\tf = cost;\n\t\t\t\tj = i;\n\t\t\t}\n\t\t}\n\t\tif (j == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tused[j] = true;\n\t\ttimer = max(timer + distance(pos, j), arr[j].l);\n\t\tfor (int i = 0; i < arr[j].p; ++i) {\n\t\t\tanswer[i].emplace_back(timer, j);\n\t\t}\n\t\ttimer += arr[j].d;\n\t}\n\t\n\tassert(profit == 0);\n\tfor (int i = 0; i < P; ++i) {\n\t\tif (answer[i].empty()) {\n\t\t\tcontinue;\n\t\t}\n\t\tauto pa = answer[i][0];\n\t\tprofit -= 240;\n\t\tint started = pa.first - distance(1, pa.second);\n\t\tcout << \"start \" << started << \" 1\" << endl;\n\t\tfor (auto p : answer[i]) {\n\t\t\tlocation l = arr[p.second];\n\t\t\tcout << \"arrive \" << p.first << \" \" << p.second << endl;\n\t\t\tcout << \"work \" << p.first << \" \" << p.first + l.d << \" \" << p.second << endl;\n\t\t\tprofit += l.d * (l.p + 5);\n\t\t}\n\t\tpa = answer[i].back();\n\t\tlocation l = arr[pa.second];\n\t\tint finished = pa.first + l.d + distance(pa.second, 1);\n\t\tcout << \"arrive \" << finished << \" 1\" << endl;\n\t\tcout << \"end\" << endl;\n\t\tprofit -= finished - started;\n\t}\n\t\n\t\n#ifdef LC\n\tofstream res(\"profit.txt\");\n\tres << profit << endl;\n\tres.close();\n#endif\n    return 0;\n}\n"
}