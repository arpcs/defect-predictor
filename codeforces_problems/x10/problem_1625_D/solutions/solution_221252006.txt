{
    "id": 221252006,
    "contestId": 1625,
    "creationTimeSeconds": 1693478918,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1625,
        "index": "D",
        "name": "Binary Spiders",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "data structures",
            "implementation",
            "math",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1625,
        "members": [
            {
                "handle": "Bharath_1729"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1641989100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 108,
    "timeConsumedMillis": 1014,
    "memoryConsumedBytes": 197427200,
    "source": "#include <bits/stdc++.h>\r\n\r\n#define int long long\r\n\r\nusing namespace std;\r\n\r\nconst int N = 2e5 + 1;\r\nconst int mod = 1e9 + 7;\r\nconst int INF = 1e18;\r\n\r\n\r\nclass TrieNode{\r\npublic:\r\n    TrieNode *child[2];\r\n    \r\n    TrieNode(){\r\n        this->child[0] = NULL; //for 0 bit \r\n        this->child[1] = NULL; //for 1 bit\r\n    }\r\n};\r\n\r\nclass Solution {\r\n    TrieNode *newNode;\r\n    \r\n    void insert(int x){   //to insert each element into the Trie\r\n        TrieNode *t = newNode;\r\n        bitset<32> bs(x);\r\n        \r\n        for(int j=31; j>=0; j--){\r\n            if(!t->child[bs[j]]) t->child[bs[j]] = new TrieNode(); //start from the MSB =, move to LSB using bitset\r\n            t = t->child[bs[j]];\r\n        }    \r\n    }\r\n    \r\npublic:\r\n    pair<int,int> findMaximumXOR(vector<int>& nums) {\r\n        newNode = new TrieNode();\r\n        for(auto &n : nums) insert(n); //insert all the elements into the Trie\r\n        \r\n        int ans=-1; //Stores the maximum XOR possible so far\r\n        int a;\r\n        int b;\r\n        for(auto n : nums){\r\n\r\n            int temp = maxXOR(n);\r\n\r\n            if(temp>ans)\r\n            {\r\n                ans = temp;\r\n                a = n;\r\n                b = n^temp;\r\n            }\r\n        }\r\n        return {a,b};\r\n    }\r\n    \r\n    int maxXOR(int n){\r\n        TrieNode *t = newNode;\r\n        bitset<32> bs(n);\r\n        int ans=0; \r\n        for(int j=31; j>=0; j--){\r\n            if(t->child[!bs[j]]) ans += (1<<j), t = t->child[!bs[j]]; //Since 1^0 = 1 & 1^1 = 0, 0^0 = 0\r\n           \r\n            else t = t->child[bs[j]];\r\n        }\r\n        return ans;\r\n    }\r\n};\r\n\r\nvoid solve()\r\n{\r\n    int n,k;\r\n    cin>>n>>k;\r\n\r\n    vector<int>a(n);\r\n    \r\n    for(int i=0;i<n;i++)\r\n    {\r\n        cin>>a[i];\r\n    }\r\n\r\n    if(k==0)\r\n    {\r\n        cout<<n<<endl;\r\n        for(int i=0;i<n;i++)\r\n        {\r\n            cout<<i+1<<\" \";\r\n        }\r\n        return;\r\n    }\r\n\r\n    map<int,vector<int>>m;\r\n\r\n    for(int i=30;i>=0;i--)\r\n    {\r\n        if((1<<i)&k)\r\n        {\r\n            for(int j=0;j<n;j++)\r\n            {\r\n                int mask = a[j] & ((1<<i+1)-1);\r\n                m[a[j]-mask].push_back(mask);\r\n            }\r\n            break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    set<int>s1;\r\n\r\n    for(auto i:m)\r\n    {\r\n        Solution s;\r\n        auto x = s.findMaximumXOR(i.second);\r\n\r\n        if((x.first^x.second)>=k)\r\n        {\r\n            s1.insert(i.first+x.first);\r\n            s1.insert(i.first+x.second);\r\n        }\r\n        else if(i.first>0)\r\n        {\r\n            s1.insert(i.first+i.second[0]);\r\n        }\r\n    }\r\n\r\n    vector<int>ans;\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        if(s1.count(a[i])) {ans.push_back(i+1);s1.erase(a[i]);}\r\n    }\r\n\r\n    cout<<(ans.size()?(int)ans.size():-1)<<endl;\r\n\r\n    for(auto i:ans)\r\n    {\r\n        cout<<i<<\" \";\r\n    }\r\n}\r\n\r\nint32_t main()\r\n{\r\n\r\n    ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);\r\n\r\n    int t = 1;\r\n    // cin >> t;\r\n\r\n    for (int i = 1; i <= t; i++)\r\n    {\r\n        solve();\r\n    }\r\n\r\n    return 0;\r\n}"
}