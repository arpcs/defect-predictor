{
    "id": 218066850,
    "contestId": 1625,
    "creationTimeSeconds": 1691606906,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1625,
        "index": "D",
        "name": "Binary Spiders",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2300,
        "tags": [
            "bitmasks",
            "data structures",
            "implementation",
            "math",
            "sortings",
            "trees"
        ]
    },
    "author": {
        "contestId": 1625,
        "members": [
            {
                "handle": "ibrm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1641989100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 109,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 177356800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing i64 = long long;\r\n\r\nint main(){\r\n      ios::sync_with_stdio(false);\r\n      cin.tie(nullptr);\r\n\r\n      int n, k;\r\n      cin >> n >> k;\r\n      vector<pair<int,int>> a(n);\r\n      for(int i = 0;i < n;i++){\r\n         cin >> a[i].first;\r\n         a[i].second = i;\r\n      }\r\n      if(k == 0){\r\n         cout << n << \"\\n\";\r\n         for(int i = 1;i <= n;i++)cout << i << \" \";\r\n         return 0;\r\n      }\r\n     \r\n      sort(a.begin(),a.end());\r\n\r\n      vector<int> back_adj(n, -1),dp(n);\r\n\r\n      int cnt = 1;\r\n\r\n      vector<pair<int,int>> val(n * 35,{0,-1});\r\n      vector<array<int,2>> trie(n * 35);\r\n      for(int i = 0;i < n;i++){\r\n         int node = 0; \r\n\r\n         pair<int,int> mx = {0,-1};\r\n         int nk = k; \r\n         for(int bit = 29;bit >= 0;bit--){\r\n            if((nk & (1 << bit)) != 0){\r\n               if(((a[i].first & (1 << bit)) != 0)){\r\n                  if(trie[node][0] != 0){\r\n                     node = trie[node][0];\r\n                  }\r\n                  else break;\r\n               } else {\r\n                  if(trie[node][1] != 0){\r\n                     node = trie[node][1];\r\n                  }\r\n                  else break;\r\n               }\r\n               nk ^= (1 << bit);\r\n               if(nk == 0){\r\n                  mx = max(val[node],mx);                        \r\n                  break;\r\n               }\r\n               continue;\r\n            }\r\n            if((nk & (1 << bit)) == 0 && ((a[i].first & (1 << bit)) != 0) ){\r\n               if(trie[node][0] != 0)mx = max(val[trie[node][0]],mx);\r\n               if(trie[node][1] != 0){\r\n                  node = trie[node][1];\r\n               }\r\n               else break;\r\n            }\r\n            if((nk & (1 << bit)) == 0 && ((a[i].first & (1 << bit)) == 0) ){\r\n               if(trie[node][1] != 0)mx = max(val[trie[node][1]],mx);\r\n               if(trie[node][0] != 0){\r\n                  node = trie[node][0];\r\n               }\r\n               else break;\r\n            }\r\n         }\r\n         back_adj[a[i].second] = mx.second;\r\n         dp[a[i].second] = mx.first + 1;\r\n         node = 0;\r\n         for(int bit = 29;bit >= 0;bit--){\r\n             int cur_bit = bool(a[i].first & (1 << bit)); \r\n             if(trie[node][cur_bit] == 0){\r\n               trie[node][cur_bit] = cnt++;\r\n             }\r\n             node = trie[node][cur_bit];\r\n             val[node] = max(val[node],{mx.first + 1, a[i].second});\r\n         }\r\n      }\r\n\r\n      int mx = max_element(dp.begin(),dp.end()) - dp.begin();\r\n\r\n      if(dp[mx] < 2){\r\n         cout <<  \"-1\\n\";\r\n         return 0;\r\n      }\r\n      vector<int> res;\r\n      int u = back_adj[mx];\r\n      res.push_back(mx);\r\n      while(u != -1){\r\n         res.push_back(u);\r\n         u = back_adj[u];\r\n      }\r\n\r\n      sort(res.begin(),res.end());\r\n      cout << dp[mx] << \"\\n\";\r\n      for(auto x : res)cout << x + 1 << \" \"; \r\n     \r\n\r\n      return 0;\r\n}\r\n/* stuff you should look for\r\n * int overflow, array bounds\r\n * special cases (n=1?)\r\n * do smth instead of nothing and stay organized\r\n * WRITE STUFF DOWN\r\n * DON'T GET STUCK ON ONE APPROACH\r\n */\r\n\r\n"
}