{
    "id": 177986107,
    "contestId": 603,
    "creationTimeSeconds": 1666785302,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 603,
        "index": "A",
        "name": "Alternative Thinking",
        "type": "PROGRAMMING",
        "points": 500.0,
        "rating": 1600,
        "tags": [
            "dp",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 603,
        "members": [
            {
                "handle": "_zadicus_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1448984100
    },
    "programmingLanguage": "Python 3",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 716800,
    "source": "from functools import lru_cache\r\ndef getIntegerInputs():\r\n    return map(int, input().split())\r\n\r\ndef getListInput():\r\n    return list(map(int, input().split()))\r\n\r\n@lru_cache\r\ndef findLargestSub(i, bits, n):\r\n    _ret = 0\r\n    if i >= n:\r\n        return 0\r\n    for j in range(i+1, n):\r\n        if bits[i] == '1' and bits[j] == '0' or bits[i] == '0' and bits[j] == '1':\r\n            _ret = max(findLargestSub(j, bits, n), _ret)\r\n        \r\n    return _ret + 1\r\n   \r\ndef solve():\r\n    n = int(input())\r\n    bits = input()\r\n    print(min(findLargestSub(0, bits, n) + 2, n)) \r\n    \r\ndef findLPS(s):\r\n    n = len(s)\r\n    i, j = 0, 1\r\n    LPS = [0] * n\r\n    while j < n:\r\n        if s[i] == s[j]:\r\n            LPS[j] = i + 1\r\n            i += 1\r\n            j += 1\r\n        elif i == 0: \r\n            LPS[j] = 0\r\n            j += 1\r\n        else:\r\n            i = LPS[i-1]\r\n    return LPS\r\n            \r\nif __name__ == \"__main__\":\r\n    solve()\r\n    \r\n"
}