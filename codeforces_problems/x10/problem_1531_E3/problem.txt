{
    "contestId": 1531,
    "index": "E3",
    "name": "\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c",
    "type": "PROGRAMMING",
    "tags": [
        "*special",
        "binary search"
    ],
    "desc": {
        "title": "E3. \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c",
        "statement": "<p>\u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python: </p><pre class=\"lstlisting\"><code class=\"prettyprint\">def sort(a):<br/>  n = len(a)<br/>  b = [0 for i in range(n)]<br/>  log = []<br/><br/>  def mergeSort(l, r):<br/>    if r - l &lt;= 1:<br/>      return<br/>    m = (l + r) &gt;&gt; 1<br/>    mergeSort(l, m)<br/>    mergeSort(m, r)<br/>    i, j, k = l, m, l<br/>    while i &lt; m and j &lt; r:<br/>      if a[i] &lt; a[j]:<br/>        log.append('0')<br/>        b[k] = a[i]<br/>        i += 1<br/>      else:<br/>        log.append('1')<br/>        b[k] = a[j]<br/>        j += 1<br/>      k += 1<br/>    while i &lt; m:<br/>      b[k] = a[i]<br/>      i += 1<br/>      k += 1<br/>    while j &lt; r:<br/>      b[k] = a[j]<br/>      j += 1<br/>      k += 1<br/>    for p in range(l, r):<br/>      a[p] = b[p]<br/><br/>  mergeSort(0, n)<br/>  return \"\".join(log)<br/></code></pre><p>\u041a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u044d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435\u00a0\u2014 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438.</p><p>\u0421\u0442\u0430\u0440\u0448\u0438\u0439 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u0412\u0430\u0441\u044f \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043b \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 $$$a$$$ (\u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 $$$n$$$ \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 $$$1$$$ \u0434\u043e $$$n$$$), \u0434\u0430\u043b \u0435\u0451 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <span class=\"tex-font-style-tt\">sort</span> \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043d\u0430 \u0432\u044b\u0445\u043e\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 $$$s$$$. \u041d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0434\u0435\u043d\u044c \u0441\u0442\u0440\u043e\u043a\u0443 $$$s$$$ \u0412\u0430\u0441\u044f \u043d\u0430\u0448\u0451\u043b, \u0430 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 $$$a$$$ \u043f\u043e\u0442\u0435\u0440\u044f\u043b\u0430\u0441\u044c. </p><p>\u0412\u0430\u0441\u044f \u0445\u043e\u0447\u0435\u0442 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0443 $$$a$$$ \u0442\u0430\u043a\u0443\u044e, \u0447\u0442\u043e \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <span class=\"tex-font-style-tt\">sort</span> \u043e\u0442 \u043d\u0435\u0451 \u0434\u0430\u0441\u0442 \u0442\u0443 \u0436\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 $$$s$$$. \u041f\u043e\u043c\u043e\u0433\u0438\u0442\u0435 \u0435\u043c\u0443!</p>",
        "inputSpecification": "<p>\u0412\u0432\u043e\u0434 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0435\u043f\u0443\u0441\u0442\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 $$$s$$$, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0443\u044e \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 <span class=\"tex-font-style-tt\">0</span> \u0438 <span class=\"tex-font-style-tt\">1</span>. </p><p><span class=\"tex-font-style-bf\">\u0412 \u044d\u0442\u043e\u0439 \u0432\u0435\u0440\u0441\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438</span> \u0434\u043b\u044f \u043b\u044e\u0431\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u0434\u043b\u0438\u043d\u044b \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 $$$10^5$$$, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0430\u044f \u0443\u0441\u043b\u043e\u0432\u0438\u044e. \u0422\u0435\u043c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435, \u0432\u0430\u0448 \u043e\u0442\u0432\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u0443\u044e \u0434\u043b\u0438\u043d\u0443, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u044e\u0449\u0443\u044e $$$10^5$$$.</p>",
        "outputSpecification": "<p>\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e $$$n$$$\u00a0\u2014 \u0434\u043b\u0438\u043d\u0443 \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.</p><p>\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 $$$n$$$ \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b $$$a_0, a_1, \\ldots, a_{n-1}$$$ ($$$1 \\le a_i \\le n$$$)\u00a0\u2014 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438.</p><p>\u0415\u0441\u043b\u0438 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043e\u0442\u0432\u0435\u0442\u0430, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445.</p>",
        "samples": [
            {
                "input": "<code class=\"prettyprint\">def sort(a):<br/>  n = len(a)<br/>  b = [0 for i in range(n)]<br/>  log = []<br/><br/>  def mergeSort(l, r):<br/>    if r - l &lt;= 1:<br/>      return<br/>    m = (l + r) &gt;&gt; 1<br/>    mergeSort(l, m)<br/>    mergeSort(m, r)<br/>    i, j, k = l, m, l<br/>    while i &lt; m and j &lt; r:<br/>      if a[i] &lt; a[j]:<br/>        log.append('0')<br/>        b[k] = a[i]<br/>        i += 1<br/>      else:<br/>        log.append('1')<br/>        b[k] = a[j]<br/>        j += 1<br/>      k += 1<br/>    while i &lt; m:<br/>      b[k] = a[i]<br/>      i += 1<br/>      k += 1<br/>    while j &lt; r:<br/>      b[k] = a[j]<br/>      j += 1<br/>      k += 1<br/>    for p in range(l, r):<br/>      a[p] = b[p]<br/><br/>  mergeSort(0, n)<br/>  return \"\".join(log)<br/></code>",
                "output": "\n00000000000000000000000000000000\n"
            },
            {
                "input": "\n16\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\n",
                "output": "\n11111111111111111111111111111111\n"
            },
            {
                "input": "\n16\n16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n",
                "output": "\n101011010001100100011011001111011000011110010\n"
            }
        ],
        "note": null
    }
}