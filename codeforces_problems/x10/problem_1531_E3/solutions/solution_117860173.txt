{
    "id": 117860173,
    "contestId": 1531,
    "creationTimeSeconds": 1622372818,
    "relativeTimeSeconds": 526018,
    "problem": {
        "contestId": 1531,
        "index": "E3",
        "name": "\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search"
        ]
    },
    "author": {
        "contestId": 1531,
        "members": [
            {
                "handle": "strizh78"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1621846800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 512000,
    "source": "//\r\n//  main.cpp\r\n//  E\r\n//\r\n//  Created by \u0425\u0430\u0439\u043a\u043e\u0432\u0430 \u0421\u0432\u0435\u0442\u043b\u0430\u043d\u0430 on 30.05.2021.\r\n//\r\n\r\n#include <iostream>\r\n#include <string>\r\n#include <vector>\r\n#include <cmath>\r\n#include <queue>\r\n#include <set>\r\n#include <map>\r\n#include <algorithm>\r\n#include <stack>\r\n#include <deque>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define mp make_pair\r\n#define all(a) a.begin(), a.end()\r\n#define frn(i, n) for (int i = 0; i < (int)(n); i++)\r\n#define frd(i, n) for (ll i = (ll)(n - 1); i >= 0; i--)\r\n#define frs(it, n) for(auto it = n.begin(); it != n.end(); it++)\r\n#define frab(i, a, b) for(ll i = a; i < b; i++)\r\n\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\ntypedef unsigned long long ull;\r\n\r\nconst ll LINF = 1e18;\r\nconst int INF = 1e9;\r\nconst int M = 1e9 + 7;\r\nconst double EPS = 1e-9;\r\n\r\nusing namespace std;\r\n\r\nvector<pair<ll, ll>> a;\r\nvector<pair<ll, ll>> b;\r\n\r\nstring s;\r\n\r\nll n;\r\nll realSize = 0;\r\nll logSize = 0;\r\nbool isGood = true;\r\n\r\nvoid mergeSort(ll l, ll r) {\r\n    if (!isGood)\r\n        return;\r\n    if (logSize >= s.size()) {\r\n        isGood = false;\r\n        return;\r\n    }\r\n    if (r - l <= 1) {\r\n        realSize = max(realSize, l + 1);\r\n        a[l].second = 0;\r\n        return;\r\n    }\r\n    \r\n    ll m = (l + r) >> 1;\r\n    mergeSort(l, m);\r\n    if (logSize >= s.size()) {\r\n        isGood = false;\r\n        return;\r\n    }\r\n    if (!isGood)\r\n        return;\r\n    mergeSort(m, r);\r\n    if (!isGood)\r\n        return;\r\n    \r\n    ll i = l, j = m, k = l;\r\n    while (i < m && j < r) {\r\n        if (logSize >= s.size()) {\r\n            isGood = false;\r\n            return;\r\n        }\r\n        if (s[logSize] == '0') { // a[i] < a[j]\r\n            if (a[i].second >= a[j].second) {\r\n                ll delta = a[i].second - a[j].second + 1;\r\n                frab (it, j, r) {\r\n                    a[it].second += delta;\r\n                }\r\n            }\r\n            b[k] = a[i];\r\n            i++;\r\n        } else { // a[i] >= a[j]\r\n            if (a[i].second <= a[j].second) {\r\n                ll delta = a[j].second - a[i].second + 1;\r\n                frab (it, i, m) {\r\n                    a[it].second += delta;\r\n                }\r\n            }\r\n            b[k] = a[j];\r\n            j++;\r\n        }\r\n        logSize++;\r\n        k++;\r\n    }\r\n    \r\n    while (i < m) {\r\n        b[k] = a[i];\r\n        i++;\r\n        k++;\r\n    }\r\n    while (j < r) {\r\n        b[k] = a[j];\r\n        j++;\r\n        k++;\r\n    }\r\n    frab (p, l, r) {\r\n        a[p] = b[p];\r\n    }\r\n    return;\r\n}\r\n\r\nint main(int argc, const char * argv[]) {\r\n    std::ios_base::sync_with_stdio(0);\r\n\r\n    cin >> s;\r\n    n = pow(2, 1 + ceil(log2(s.size())));\r\n    a.resize(n);\r\n    b.resize(n);\r\n    \r\n    frn (i, n) {\r\n        a[i] = mp(i, -1);\r\n    }\r\n    mergeSort(0, n);\r\n    \r\n    if (isGood == false)\r\n        frn (i, n) {\r\n            a[i] = mp(i, -1);\r\n        }\r\n    \r\n    ll curSize = realSize;\r\n    ll ind = 0;\r\n    ll size_ = s.size();\r\n    ll thr = 1e3 + 1;\r\n    int max_ = min (size_, thr);\r\n    while (isGood == false || logSize != s.size()) {\r\n        isGood = true;\r\n        realSize = 0;\r\n        logSize = 0;\r\n        \r\n        frn (i, curSize) {\r\n            a[i] = mp(i, -1);\r\n        }\r\n        \r\n        mergeSort(0, curSize - ind);\r\n        ind++;\r\n        \r\n        if (ind >= curSize || ind >= thr || ind > size_)\r\n            break;\r\n    }\r\n    \r\n    curSize = n;\r\n    ind = 0;\r\n    while (isGood == false || logSize != s.size()) {\r\n        isGood = true;\r\n        realSize = 0;\r\n        logSize = 0;\r\n        \r\n        frn (i, curSize) {\r\n            a[i] = mp(i, -1);\r\n        }\r\n        \r\n        mergeSort(0, curSize + ind);\r\n        ind++;\r\n        \r\n        if (ind >= curSize || ind >= thr || ind > size_)\r\n            break;\r\n    }\r\n    \r\n    vector<ll> ans(realSize);\r\n    frn (i, realSize) {\r\n        if (a[i].second != -1) {\r\n            ans[a[i].first] = a[i].second;\r\n        }\r\n    }\r\n    cout << realSize << '\\n';\r\n    frn (i, realSize) {\r\n        cout << ans[i] + 1 << ' ';\r\n    }\r\n    return 0;\r\n}\r\n"
}