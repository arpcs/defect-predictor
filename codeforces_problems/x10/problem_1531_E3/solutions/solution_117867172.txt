{
    "id": 117867172,
    "contestId": 1531,
    "creationTimeSeconds": 1622378512,
    "relativeTimeSeconds": 531712,
    "problem": {
        "contestId": 1531,
        "index": "E3",
        "name": "\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c",
        "type": "PROGRAMMING",
        "tags": [
            "*special",
            "binary search"
        ]
    },
    "author": {
        "contestId": 1531,
        "members": [
            {
                "handle": "gogagum"
            }
        ],
        "participantType": "CONTESTANT",
        "ghost": false,
        "startTimeSeconds": 1621846800
    },
    "programmingLanguage": "PyPy 3",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 140,
    "timeConsumedMillis": 1107,
    "memoryConsumedBytes": 15155200,
    "source": "def backSort(n, rule):\r\n    b = [0 for i in range(n)]\r\n    a = [i + 1 for i in range(n)]\r\n    \r\n    def executeMerges(l, r, t):\r\n        if r - l <= 1:\r\n            return t\r\n        m = (l + r) >> 1\r\n        t = executeMerges(l, m, t)\r\n        if t < 0:\r\n            return t\r\n        t = executeMerges(m, r, t)\r\n        if t < 0:\r\n            return t\r\n        i, j, k = l, m, l\r\n        zerosNum = 0\r\n        onesNum = 0\r\n        while zerosNum < m - l and onesNum < r - m:\r\n            if t == len(rule):\r\n                return -1\r\n            if rule[t] == '0':\r\n                b[k] = a[i]\r\n                i += 1\r\n                zerosNum += 1\r\n            else:\r\n                b[k] = a[j]\r\n                j += 1\r\n                onesNum += 1\r\n            k += 1\r\n            t += 1\r\n        while i < m:\r\n            b[k] = a[i]\r\n            i += 1\r\n            k += 1\r\n        while j < r:\r\n            b[k] = a[j]\r\n            j += 1\r\n            k += 1\r\n        for p in range(l, r):\r\n            a[p] = b[p]\r\n            \r\n        return t\r\n            \r\n    res = executeMerges(0, n, 0)\r\n    \r\n    if res < len(rule) and res >= 0:\r\n        return [], -2\r\n    \r\n    if res == -1:\r\n        return [], -1\r\n    \r\n    # \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u043a A - \u0440\u0435\u0448\u0435\u043d\u0438\u0435\r\n    ans = [0 for i in range(len(a))]\r\n    for i in range(len(a)):\r\n        ans[a[i] - 1] = i + 1\r\n    return ans, res\r\n \r\nrule = input()\r\n \r\nl = 1\r\nr = 200000\r\n \r\nwhile r - l > 1:\r\n    m = (r + l) // 2\r\n    ans, res = backSort(m, rule)\r\n    if res > 0:\r\n       print(m)\r\n       for i in ans:\r\n           print(i, end = ' ') \r\n       print()\r\n       break\r\n    if res == -2:\r\n        l = m\r\n    if res == -1:\r\n        r = m\r\n \r\nans, res = backSort(l, rule)\r\nif res > 0:\r\n    print(l)\r\n    for i in ans:\r\n       print(i, end = ' ') \r\n    print()"
}