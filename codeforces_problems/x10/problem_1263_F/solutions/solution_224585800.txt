{
    "id": 224585800,
    "contestId": 1263,
    "creationTimeSeconds": 1695376209,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1263,
        "index": "F",
        "name": "Economic Difficulties",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2400,
        "tags": [
            "data structures",
            "dfs and similar",
            "dp",
            "flows",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 1263,
        "members": [
            {
                "handle": "ImALAS"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1575038100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 181,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 32563200,
    "source": "#include <bits/stdc++.h>\r\n#define pb emplace_back\r\n#define fir first\r\n#define sec second\r\n\r\nusing i64 = long long;\r\nusing pii = std::pair<int, int>;\r\n\r\nconstexpr int maxn = 2e3 + 5;\r\nint n, a, b;\r\nstd::vector<int> G[2][maxn];\r\n\r\nvoid chkmin(int& x, int y) { if(y < x) x = y; return ; }\r\nvoid chkmax(int& x, int y) { if(y > x) x = y; return ; }\r\n\r\nint L[2][maxn], R[2][maxn], val[2][maxn][maxn], f[maxn], sz[2][maxn];\r\n\r\nvoid dfs(int idx, int u) {\r\n\tif(u != 1) sz[idx][u] = 1;\r\n\tfor(auto& v : G[idx][u]) {\r\n\t\tdfs(idx, v); sz[idx][u] += sz[idx][v];\r\n\t\tchkmin(L[idx][u], L[idx][v]);\r\n\t\tchkmax(R[idx][u], R[idx][v]);\r\n\t}\r\n\tchkmax(val[idx][L[idx][u]][R[idx][u]], sz[idx][u]);\r\n\treturn ;\r\n}\r\n\r\nint main() {\r\n\tscanf(\"%d\", &n);\r\n\tfor(int idx : {0, 1}) {\r\n\t\tscanf(\"%d\", &a);\r\n\t\tfor(int i = 1;i <= a;++ i)\r\n\t\t\tL[idx][i] = a + 1, R[idx][i] = 0;\r\n\t\tfor(int i = 2;i <= a;++ i) {\r\n\t\t\tint x; scanf(\"%d\", &x);\r\n\t\t\tG[idx][x].pb(i);\r\n\t\t}\r\n\t\tfor(int i = 1;i <= n;++ i) {\r\n\t\t\tint x; scanf(\"%d\", &x);\r\n\t\t\tL[idx][x] = R[idx][x] = i;\r\n\t\t}\r\n\t\tdfs(idx, 1);\r\n\t}\r\n\tfor(int i = 1;i <= n;++ i)\r\n\t\tfor(int j = 0;j < i;++ j)\r\n\t\t\tchkmax(f[i], f[j] + std::max(val[0][j + 1][i], val[1][j + 1][i]));\r\n\tprintf(\"%d\\n\", f[n]);\r\n\treturn 0;\r\n}"
}