{
    "id": 228494224,
    "contestId": 1582,
    "creationTimeSeconds": 1697519174,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1582,
        "index": "F2",
        "name": "Korney Korneevich and XOR (hard version)",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "brute force",
            "dp",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1582,
        "members": [
            {
                "handle": "power_verse"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1635069900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "// Author: Nishant ^o^\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define yes        \\\r\n    cout << \"YES\"; \\\r\n    nl\r\n#define no        \\\r\n    cout << \"NO\"; \\\r\n    nl\r\n\r\n#define ll long long\r\n#define ld long double\r\nconst ll M = 1e9 + 7;\r\nconst ll M1 = 998244353;\r\nconst ll inf = 1e18 + 10;\r\nconst ll inf_ = -1e18 - 10;\r\nll max(ll x, ll y) { return x > y ? x : y; }\r\nll min(ll x, ll y) { return x < y ? x : y; }\r\nll gcd(ll x, ll y)\r\n{\r\n    if (y == 0)\r\n        return x;\r\n    return gcd(y, x % y);\r\n}\r\nll lcm(ll x, ll y) { return x * y / gcd(x, y); }\r\n#define bp __builtin_popcountll\r\n#define bclz __builtin_clzll\r\n#define bctz __builtin_ctzll\r\n\r\n#define f(i, m, n) for (ll i = (ll)m; i < (ll)n; i++)\r\n#define f_(i, n, m) for (ll i = (ll)n; i >= (ll)m; i--)\r\n#define fa(i, x) for (auto i : x)\r\n#define vll vector<ll>\r\n#define vvll vector<vll>\r\n#define vb vector<bool>\r\n#define vvb vector<vb>\r\n#define pll pair<ll, ll>\r\n#define ff first\r\n#define ss second\r\n#define vpll vector<pll>\r\n#define all(x) x.begin(), x.end()\r\n\r\n#define um unordered_map\r\n#define us unordered_set\r\n#define ms multiset\r\n#define pqllMaxHeap priority_queue<ll>\r\n#define pqllMinHeap priority_queue<ll, vector<ll>, greater<ll>>\r\n#define pqpll priority_queue<pll, vector<pll>, greater<pll>>\r\n#define pq(x) priority_queue<x, vector<x>, greater<x>>\r\n#define ub upper_bound\r\n#define lb lower_bound\r\n\r\n#define pb push_back\r\n#define acc accumulate\r\n#define in insert\r\n#define clr clear\r\n#define nl cout << \"\\n\";\r\n\r\n/*\r\n\r\n1. Think Greedy\r\n2. Think Brute Force\r\n3. Think solution in reverse order\r\n4. Think DP [ check constraints carefully ]\r\n5. Check base cases for DP and prove solution for Greedy\r\n6. Think Graph\r\n7. Think Divide & Conquer\r\n8. Think Binary Search\r\n9. Think constructive \r\n10. Two Pointers, Sliding Window\r\n\r\n*/\r\nll maxn = (1 << 13);\r\nvoid solve()\r\n{\r\n    //CODE HERE\r\n    ll n;\r\n    cin >> n;\r\n    vll done(maxn, -1);\r\n    ll res = 1;\r\n    done[0] = 0;\r\n    us<ll> pres;\r\n    pres.in(0);\r\n    f(i, 0, n)\r\n    {\r\n        ll x;\r\n        cin >> x;\r\n        fa(prevXorr, pres)\r\n        {\r\n            if (done[prevXorr] >= x)\r\n                continue;\r\n            ll newXorr = prevXorr ^ x;\r\n            if (done[newXorr] == -1)\r\n            {\r\n                done[newXorr] = x;\r\n                pres.in(newXorr);\r\n                res++;\r\n            }\r\n            else\r\n            {\r\n                done[newXorr] = min(done[newXorr], x);\r\n            }\r\n        }\r\n    }\r\n    cout << res;\r\n    nl\r\n            f(i, 0, maxn) if (done[i] != -1) cout\r\n        << i << \" \";\r\n    nl\r\n}\r\nsigned main()\r\n{\r\n\r\n#ifndef ONLINE_JUDGE\r\n    if (fopen(\"input.txt\", \"r\"))\r\n    {\r\n        freopen(\"input.txt\", \"r\", stdin);\r\n        freopen(\"output.txt\", \"w\", stdout);\r\n    }\r\n#endif\r\n    ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n    srand(chrono::high_resolution_clock::now().time_since_epoch().count());\r\n    ll no_of_testcases = 1;\r\n    f(curr_testcase, 1, no_of_testcases + 1)\r\n    {\r\n        solve();\r\n    }\r\n}"
}