{
    "id": 201397092,
    "contestId": 213,
    "creationTimeSeconds": 1680996201,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 213,
        "index": "B",
        "name": "Numbers",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1900,
        "tags": [
            "combinatorics",
            "dp"
        ]
    },
    "author": {
        "contestId": 213,
        "members": [
            {
                "handle": "sberens"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1343662200
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 91,
    "timeConsumedMillis": 310,
    "memoryConsumedBytes": 22118400,
    "source": "#include <bits/stdc++.h>\n\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace __gnu_pbds;\ntemplate<typename K> using hset = gp_hash_table<K, null_type>;\ntemplate<typename K, typename V> using hmap = gp_hash_table<K, V>;\n\n\nusing namespace std;\n\n#define all(x) (x).begin(), (x).end()\n#define pb push_back\n#define eb emplace_back\n\ntemplate<typename T>\nvoid smin(T &x, T y) {\n    x = min(x, y);\n}\n\ntemplate<typename T>\nvoid smax(T &x, T y) {\n    x = max(x, y);\n}\n\ntemplate<typename T>\nT c2(T x) {\n    return x * (x - 1) / 2;\n}\n\ntemplate<typename T>\nT sq(T x) {\n    return x * x;\n}\n\n#define FOR(i, a, b) for (ll i = (a); i < (b); ++i)\n#define F0R(i, a) FOR(i,0,a)\n#define ROF(i, a, b) for (ll i = (b)-1; i >= (a); --i)\n#define R0F(i, a) ROF(i,0,a)\n\nusing ll = long long;\nusing ld = long double;\n\ntemplate<typename T>\nusing vv = vector<vector<T>>;\n\nusing vi = vector<ll>;\nusing ii = array<ll, 2>;\nusing vii = vector<ii>;\nusing vvi = vv<ll>;\n\ntemplate<typename T>\nusing minq = priority_queue<T, vector<T>, greater<T>>;\ntemplate<typename T>\nusing maxq = priority_queue<T>;\n\ntemplate<typename T>\nusing oset = tree<T, null_type, less<>, rb_tree_tag, tree_order_statistics_node_update>;\n\nconst ll M = 1000000007;\nconst ll infll = M * M;\n\nvoid io() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n}\n\nvoid io(string name) {\n    freopen((name + \".in\").c_str(), \"r\", stdin);\n    freopen((name + \".out\").c_str(), \"w\", stdout);\n    io();\n}\n\ntemplate<ll M>\nstruct modint {\n\n    static ll _reduce(ll n) {\n        constexpr static ll b = -1ull / M;\n        ll r = n - (ll) (__uint128_t(b) * n >> 64) * M;\n        return r >= M ? r - M : r;\n    }\n\n    static ll _pow(ll n, ll k) {\n        ll r = 1;\n        for (; k > 0; k >>= 1, n = _reduce(n * n))\n            if (k & 1) r = _reduce(r * n);\n        return r;\n    }\n\n    ll v;\n\n    modint(ll n = 0) : v(_reduce(n)) { v += (M & (0 - (v < 0))); }\n\n    friend string to_string(const modint n) { return to_string(n.v); }\n\n    friend istream &operator>>(istream &i, modint &n) { return i >> n.v; }\n\n    friend ostream &operator<<(ostream &o, const modint n) { return o << n.v; }\n\n    template<typename T>\n    explicit operator T() { return T(v); }\n\n    friend bool operator==(const modint n, const modint m) { return n.v == m.v; }\n\n    friend bool operator!=(const modint n, const modint m) { return n.v != m.v; }\n\n    friend bool operator<(const modint n, const modint m) { return n.v < m.v; }\n\n    friend bool operator<=(const modint n, const modint m) { return n.v <= m.v; }\n\n    friend bool operator>(const modint n, const modint m) { return n.v > m.v; }\n\n    friend bool operator>=(const modint n, const modint m) { return n.v >= m.v; }\n\n    modint &operator+=(const modint n) {\n        v += n.v;\n        v -= (M & (0 - (v >= M)));\n        return *this;\n    }\n\n    modint &operator-=(const modint n) {\n        v -= n.v;\n        v += (M & (0 - (v < 0)));\n        return *this;\n    }\n\n    modint &operator*=(const modint n) {\n        v = _reduce(v * n.v);\n        return *this;\n    }\n\n    modint &operator/=(const modint n) {\n        v = _reduce(v * _pow(n.v, M - 2));\n        return *this;\n    }\n\n    friend modint operator+(const modint n, const modint m) { return modint(n) += m; }\n\n    friend modint operator-(const modint n, const modint m) { return modint(n) -= m; }\n\n    friend modint operator*(const modint n, const modint m) { return modint(n) *= m; }\n\n    friend modint operator/(const modint n, const modint m) { return modint(n) /= m; }\n\n    modint &operator++() { return *this += 1; }\n\n    modint &operator--() { return *this -= 1; }\n\n    modint operator++(int) {\n        modint t = *this;\n        return *this += 1, t;\n    }\n\n    modint operator--(int) {\n        modint t = *this;\n        return *this -= 1, t;\n    }\n\n    modint operator+() { return *this; }\n\n    modint operator-() { return modint(0) -= *this; }\n\n    // O(logk) modular exponentiation\n    modint pow(const ll k) const {\n        return k < 0 ? _pow(v, M - 1 - (-k % (M - 1))) : _pow(v, k);\n    }\n\n    modint inv() const { return _pow(v, M - 2); }\n};\n\nusing mi = modint<M>;\nusing vmi = vector<mi>;\n\ntemplate<typename T = mi>\nvector<T> p_fact(int n) {\n    vector<T> res{1};\n    FOR(i, 1, n + 1) res.pb(res.back() * i);\n    return res;\n}\n\ntemplate<typename T = mi>\nvector<T> p_fact_inv(int n) {\n    vector<T> res{1};\n    FOR(i, 1, n + 1) res.pb(res.back() * T(i).inv());\n    return res;\n}\n\ntemplate<typename T = mi>\nT C(int n, int k) {\n    static auto f = p_fact<T>(1e6);\n    static auto fi = p_fact_inv<T>(1e6);\n    return k > n ? 0 : f[n] * fi[k] * fi[n - k];\n}\n\ntemplate<typename T = mi>\nT stars_bars(int n, int k) {\n    return C<T>(k + n - 1, n - 1);\n}\n\n\nint main() {\n    io();\n    ll n;\n    cin >> n;\n    vi a(10);\n    F0R(i, 10) {\n        cin >> a[i];\n    }\n    ll z = a[0];\n    a.erase(a.begin());\n    vv<mi> dp(10, vmi(n+1));\n    dp[0][0] = 1;\n    F0R(i, 9) {\n        F0R(d, n+1) {\n            FOR(j, a[i], n+1 - d) {\n                dp[i + 1][d + j] += dp[i][d] * C(d + j, j);\n            }\n        }\n    }\n    mi res;\n    FOR(j, z, n+1) {\n        FOR(d, max(1ll, j), n+1) {\n            res += dp.back()[d - j] * C(d - 1, j);\n        }\n    }\n    cout << res << '\\n';\n}"
}