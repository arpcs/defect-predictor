{
    "id": 227742331,
    "contestId": 1181,
    "creationTimeSeconds": 1697069792,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1181,
        "index": "C",
        "name": "Flag",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1900,
        "tags": [
            "brute force",
            "combinatorics",
            "dp",
            "implementation"
        ]
    },
    "author": {
        "contestId": 1181,
        "members": [
            {
                "handle": "TKXZ133"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1560677700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 23,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 30310400,
    "source": "#include <algorithm>\r\n#include <iostream>\r\n#include <cstring>\r\n#include <cstdio>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\nconst int N = 1100;\r\n#define inf 0x3f3f3f3f\r\n#define ls (p << 1)\r\n#define rs (p << 1 | 1)\r\n#define mid ((l + r) >> 1)\r\ntypedef long long ll;\r\n\r\nint n, m;\r\nint rlen[N][N], dlen[N][N], inp[N];\r\nll ans;\r\n\r\nchar mp[N][N];\r\n\r\nstruct ST{\r\n    int a[N << 2];\r\n    void build(int p, int l, int r){\r\n        if (l == r) return a[p] = inp[l], void();\r\n        build(ls, l, mid); build(rs, mid + 1, r);\r\n        a[p] = min(a[ls], a[rs]);\r\n    }\r\n    int ask(int p, int l, int r, int x, int y){\r\n        if (x <= l && r <= y) return a[p];\r\n        if (y <= mid) return ask(ls, l, mid, x, y);\r\n        if (x > mid) return ask(rs, mid + 1, r, x, y);\r\n        return min(ask(ls, l, mid, x, y), ask(rs, mid + 1, r, x, y));\r\n    }\r\n}tree[N];\r\n\r\nint main(){\r\n    // freopen(\"the.in\", \"r\", stdin);\r\n    // freopen(\"the.out\", \"w\", stdout);\r\n    scanf(\"%d %d\", &n, &m);\r\n    for (int i = 1; i <= n; i ++) \r\n        scanf(\"%s\", mp[i] + 1);\r\n    for (int i = 1; i <= n; i ++)\r\n        for (int j = m; j >= 1; j --) {\r\n            if (mp[i][j] != mp[i][j + 1]) rlen[i][j] = 1;\r\n            else rlen[i][j] = rlen[i][j + 1] + 1;\r\n        }\r\n    for (int i = n; i >= 1; i --)\r\n        for (int j = 1; j <= m; j ++) {\r\n            if (mp[i][j] != mp[i + 1][j]) dlen[i][j] = 1;\r\n            else dlen[i][j] = dlen[i + 1][j] + 1;\r\n        }\r\n    for (int i = 1; i <= m; i ++) {\r\n        for (int j = 1; j <= n; j ++)\r\n            inp[j] = rlen[j][i];\r\n        tree[i].build(1, 1, n);\r\n    }\r\n    for (int i = 1; i <= n; i ++)\r\n        for (int j = 1; j <= m; j ++) {\r\n            int t = dlen[i][j], i2 = i + t, i3 = i + 2 * t, i4 = i + 3 * t;\r\n            if (i4 <= n + 1 && mp[i2][j] != mp[i][j] && dlen[i2][j] == t && mp[i3][j] != mp[i2][j] && dlen[i3][j] >= t) {\r\n                int s = tree[j].ask(1, 1, n, i, i + 3 * t - 1);\r\n                ans += s;\r\n            }\r\n        }\r\n    cout << ans << '\\n';\r\n    return 0;\r\n}"
}