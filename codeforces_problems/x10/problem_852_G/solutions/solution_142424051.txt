{
    "id": 142424051,
    "contestId": 852,
    "creationTimeSeconds": 1641958537,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 852,
        "index": "G",
        "name": "Bathroom terminal",
        "type": "PROGRAMMING",
        "rating": 1700,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 852,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1504432800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 2764800,
    "source": "#include <iostream>\n#include <string>\n#include <cstdio>\n#include <cmath>\n#include <algorithm>\n#include <list>\n#include <vector>\n#include <cstring>\n#include <map>\n#include <utility>\nusing namespace std;\nint tree[100005][6] = {0};\nchar dic[5]={'a','b','c','d','e'};\nstring s;\nint colour[100005]={0};\nvector<string> tot;\nvector<int> ress;\nlong long k=1;\nvoid insert_tree(string s){\n    int len=s.size();\n    long long p=0;\n    for(int i=0;i<len;i++){\n        int c=s[i]-'a';\n        if(tree[p][c]==0){\n            tree[p][c]=k;\n            k++;\n        }\n        p=tree[p][c];\n    }\n    colour[p]=1;\n}\nbool search(string s){\n    int len=s.size();\n    int p=0;\n    for(int i=0;i<len;i++){   \n            int c = s[i] - 'a';\n            if (tree[p][c] == 0)\n                return false;\n            p = tree[p][c];\n        }   \n    return colour[p]==1;\n}\nvoid prepare1(string s,int p){\n    int len=s.size();\n    for(int i=0;i<len;i++){\n        if(s[i]=='?'){\n            for(int j=0;j<5;j++){\n                s[i]=dic[j];\n                tot.push_back(s);\n            }\n            s.erase(s.begin() + i);\n            tot.push_back(s);\n            break;\n        }\n    }\n}\nvoid prepare2(string s,int p){\n    int len = s.size();\n    for(int i=0;i<len;i++){\n        if(s[i]=='?'){\n            for (int j = 0; j < 5; j++)\n            {\n                s[i] = dic[j];\n                prepare1(s,i);\n            }\n            s.erase(s.begin() + i);\n            prepare1(s,i);\n            break;\n        }\n    }\n}\nvoid prepare3(string s,int p){\n    int len = s.size();\n    for (int i = 0; i < len; i++)\n    {\n        if (s[i] == '?')\n        {\n            for (int j = 0; j < 5; j++)\n            {\n                s[i] = dic[j];\n                prepare2(s, i);\n            }\n            s.erase(s.begin() + i);\n            prepare2(s, i);\n            break;\n        }\n    }\n}\nint main()\n{\n    int n,m;\n    bool flag;\n    cin>>n>>m;\n    for(int i=0;i<n;i++){\n        cin>>s;\n        insert_tree(s);\n    }\n    for(int i=0;i<m;i++){\n        cin>>s;\n        int numw=0;\n        int len=s.size();\n        for(int i=0;i<len;i++){\n            if(s[i]=='?'){\n                numw++;\n            }\n            };\n            if(numw==0) tot.push_back(s);\n            else if(numw==1) prepare1(s,0);\n            else if (numw == 2)prepare2(s, 0);\n            else if (numw == 3) prepare3(s, 0);\n        \n        // for (int i = 0; i < tot.size(); i++)\n        // {\n        //     cout<<tot[i]<<endl;\n        // }\n        int result = 0;\n        for (int i = 0; i < tot.size(); i++)\n        {\n            if (search(tot[i])) result++;\n        }\n        ress.push_back(result);\n        tot.clear();\n    }\n    for(int i=0;i<m-1;i++){\n        printf(\"%d\\n\",ress[i]);\n    }\n    printf(\"%d\", ress[m-1]);\n    return 0;\n}\n \t\t \t\t\t \t\t\t \t   \t\t   \t  \t \t"
}