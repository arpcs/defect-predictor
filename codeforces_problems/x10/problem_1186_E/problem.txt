{
    "contestId": 1186,
    "index": "E",
    "name": "Vus the Cossack and a Field",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2500,
    "tags": [
        "divide and conquer",
        "implementation",
        "math"
    ],
    "desc": {
        "title": "E. Vus the Cossack and a Field",
        "statement": "<p>Vus the Cossack has a field with dimensions $$$n \\times m$$$, which consists of \"<span class=\"tex-font-style-tt\">0</span>\" and \"<span class=\"tex-font-style-tt\">1</span>\". He is building an infinite field from this field. He is doing this in this way:</p><ol><li> He takes the current field and finds a new inverted field. In other words, the new field will contain \"<span class=\"tex-font-style-tt\">1</span>\" only there, where \"<span class=\"tex-font-style-tt\">0</span>\" was in the current field, and \"<span class=\"tex-font-style-tt\">0</span>\" there, where \"<span class=\"tex-font-style-tt\">1</span>\" was.</li><li> To the current field, he adds the inverted field to the right. </li><li> To the current field, he adds the inverted field to the bottom. </li><li> To the current field, he adds the current field to the bottom right. </li><li> He repeats it.</li></ol><p>For example, if the initial field was:</p><center> $$$\\begin{matrix} 1 &amp; 0 &amp; \\\\ 1 &amp; 1 &amp; \\\\ \\end{matrix}$$$ </center><p>After the first iteration, the field will be like this:</p><center> $$$\\begin{matrix} 1 &amp; 0 &amp; 0 &amp; 1 \\\\ 1 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 \\\\ \\end{matrix}$$$ </center><p>After the second iteration, the field will be like this:</p><center> $$$\\begin{matrix} 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\\\ 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 1 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 0 &amp; 1 &amp; 1 &amp; 1 &amp; 1 &amp; 0 &amp; 0 \\\\ 1 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 1 &amp; 1 &amp; 0 \\\\ 1 &amp; 1 &amp; 0&amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 1 \\\\ \\end{matrix}$$$ </center><p>And so on...</p><p>Let's numerate lines from top to bottom from $$$1$$$ to infinity, and columns from left to right from $$$1$$$ to infinity. We call the submatrix $$$(x_1, y_1, x_2, y_2)$$$ all numbers that have coordinates $$$(x, y)$$$ such that $$$x_1 \\leq x \\leq x_2$$$ and $$$y_1 \\leq y \\leq y_2$$$.</p><p>The Cossack needs sometimes to find the sum of all the numbers in submatrices. Since he is pretty busy right now, he is asking you to find the answers!</p>",
        "inputSpecification": "<p>The first line contains three integers $$$n$$$, $$$m$$$, $$$q$$$ ($$$1 \\leq n, m \\leq 1\\,000$$$, $$$1 \\leq q \\leq 10^5$$$)\u00a0\u2014 the dimensions of the initial matrix and the number of queries.</p><p>Each of the next $$$n$$$ lines contains $$$m$$$ characters $$$c_{ij}$$$ ($$$0 \\leq c_{ij} \\leq 1$$$)\u00a0\u2014 the characters in the matrix.</p><p>Each of the next $$$q$$$ lines contains four integers $$$x_1$$$, $$$y_1$$$, $$$x_2$$$, $$$y_2$$$ ($$$1 \\leq x_1 \\leq x_2 \\leq 10^9$$$, $$$1 \\leq y_1 \\leq y_2 \\leq 10^9$$$)\u00a0\u2014 the coordinates of the upper left cell and bottom right cell, between which you need to find the sum of all numbers.</p>",
        "outputSpecification": "<p>For each query, print the answer.</p>",
        "samples": [
            {
                "input": "\n2 2 5\n10\n11\n1 1 8 8\n2 4 5 6\n1 2 7 8\n3 3 6 8\n5 6 7 8\n",
                "output": "\n32\n5\n25\n14\n4\n"
            },
            {
                "input": "\n2 3 7\n100\n101\n4 12 5 17\n5 4 9 4\n1 4 13 18\n12 1 14 9\n3 10 7 18\n3 15 12 17\n8 6 8 12\n",
                "output": "\n6\n3\n98\n13\n22\n15\n3\n"
            }
        ],
        "note": "<p>The first example is explained in the legend.</p>"
    },
    "suggested_categories": [
        "algorithm",
        "matrix operations",
        "infinite fields",
        "iterative processes",
        "query processing",
        "numerical computation",
        "pattern generation",
        "mathematical modeling",
        "dynamic programming",
        "data structures",
        "efficient solutions",
        "complexity analysis",
        "grid computing",
        "recursive functions",
        "bitwise operations",
        "simulation",
        "combinatorial optimization",
        "graphical representation",
        "pattern recognition",
        "computational geometry"
    ]
}