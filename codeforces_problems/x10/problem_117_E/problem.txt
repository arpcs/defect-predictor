{
    "contestId": 117,
    "index": "E",
    "name": "Tree or not Tree",
    "type": "PROGRAMMING",
    "points": 2500.0,
    "rating": 2900,
    "tags": [
        "data structures",
        "divide and conquer",
        "implementation",
        "trees"
    ],
    "desc": {
        "title": "E. Tree or not Tree",
        "statement": "<p>You are given an undirected connected graph <span class=\"tex-span\"><i>G</i></span> consisting of <span class=\"tex-span\"><i>n</i></span> vertexes and <span class=\"tex-span\"><i>n</i></span> edges. <span class=\"tex-span\"><i>G</i></span> contains no self-loops or multiple edges. Let each edge has two states: on and off. Initially all edges are switched off.</p><p>You are also given <span class=\"tex-span\"><i>m</i></span> queries represented as <span class=\"tex-span\">(<i>v</i>,\u2009<i>u</i>)</span> \u2014 change the state of all edges on the shortest path from vertex <span class=\"tex-span\"><i>v</i></span> to vertex <span class=\"tex-span\"><i>u</i></span> in graph <span class=\"tex-span\"><i>G</i></span>. If there are several such paths, the lexicographically minimal one is chosen. More formally, let us consider all shortest paths from vertex <span class=\"tex-span\"><i>v</i></span> to vertex <span class=\"tex-span\"><i>u</i></span> as the sequences of vertexes <span class=\"tex-span\"><i>v</i>,\u2009<i>v</i><sub class=\"lower-index\">1</sub>,\u2009<i>v</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>u</i></span>. Among such sequences we choose the lexicographically minimal one.</p><p>After each query you should tell how many connected components has the graph whose vertexes coincide with the vertexes of graph <span class=\"tex-span\"><i>G</i></span> and edges coincide with the switched on edges of graph <span class=\"tex-span\"><i>G</i></span>.</p>",
        "inputSpecification": "<p>The first line contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">3\u2009\u2264\u2009<i>n</i>\u2009\u2264\u200910<sup class=\"upper-index\">5</sup></span>, <span class=\"tex-span\">1\u2009\u2264\u2009<i>m</i>\u2009\u2264\u200910<sup class=\"upper-index\">5</sup></span>). Then <span class=\"tex-span\"><i>n</i></span> lines describe the graph edges as <span class=\"tex-span\"><i>a</i></span> <span class=\"tex-span\"><i>b</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i>,\u2009<i>b</i>\u2009\u2264\u2009<i>n</i></span>). Next <span class=\"tex-span\"><i>m</i></span> lines contain the queries as <span class=\"tex-span\"><i>v</i></span> <span class=\"tex-span\"><i>u</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>v</i>,\u2009<i>u</i>\u2009\u2264\u2009<i>n</i></span>). </p><p>It is guaranteed that the graph is connected, does not have any self-loops or multiple edges.</p>",
        "outputSpecification": "<p>Print <span class=\"tex-span\"><i>m</i></span> lines, each containing one integer \u2014 the query results.</p>",
        "samples": [
            {
                "input": "5 2<br/>2 1<br/>4 3<br/>2 4<br/>2 5<br/>4 1<br/>5 4<br/>1 5<br/>",
                "output": "3<br/>3<br/>"
            },
            {
                "input": "6 2<br/>4 6<br/>4 3<br/>1 2<br/>6 5<br/>1 5<br/>1 4<br/>2 5<br/>2 6<br/>",
                "output": "4<br/>3<br/>"
            }
        ],
        "note": "<p>Let's consider the first sample. We'll highlight the switched on edges blue on the image. </p><ul><li> <p>The graph before applying any operations. No graph edges are switched on, that's why there initially are 5 connected components. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/2c7aa638136542ed6824b69dab748a209dff230e.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"189px\"/> </center></li><li> <p>The graph after query <span class=\"tex-span\"><i>v</i>\u2009=\u20095,\u2009<i>u</i>\u2009=\u20094</span>. We can see that the graph has three components if we only consider the switched on edges. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/82154b187d99628a1ca850f392ca593733308b5f.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"189px\"/> </center></li><li> <p>The graph after query <span class=\"tex-span\"><i>v</i>\u2009=\u20091,\u2009<i>u</i>\u2009=\u20095</span>. We can see that the graph has three components if we only consider the switched on edges. </p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/e763d608f728113f2041c6be20cfe56b34f8df63.png\" style=\"max-width: 100.0%;max-height: 100.0%;\" width=\"189px\"/> </center></li></ul><p>Lexicographical comparison of two sequences of equal length of <span class=\"tex-span\"><i>k</i></span> numbers should be done as follows. Sequence <span class=\"tex-span\"><i>x</i></span> is lexicographically less than sequence <span class=\"tex-span\"><i>y</i></span> if exists such <span class=\"tex-span\"><i>i</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>i</i>\u2009\u2264\u2009<i>k</i></span>), so that <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>i</i></sub>\u2009&lt;\u2009<i>y</i><sub class=\"lower-index\"><i>i</i></sub></span>, and for any <span class=\"tex-span\"><i>j</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>j</i>\u2009&lt;\u2009<i>i</i></span>) <span class=\"tex-span\"><i>x</i><sub class=\"lower-index\"><i>j</i></sub>\u2009=\u2009<i>y</i><sub class=\"lower-index\"><i>j</i></sub></span>.</p>"
    },
    "suggested_categories": [
        "graph theory",
        "shortest path",
        "connected components",
        "edge state",
        "lexicographical comparison",
        "query processing",
        "undirected graph",
        "connected graph",
        "graph edges",
        "switched on edges",
        "graph vertexes",
        "algorithm design",
        "data structures",
        "graph visualization",
        "pathfinding",
        "network analysis",
        "mathematical sequences",
        "graph connectivity",
        "algorithm complexity",
        "graph traversal"
    ]
}