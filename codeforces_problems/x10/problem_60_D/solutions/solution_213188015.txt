{
    "id": 213188015,
    "contestId": 60,
    "creationTimeSeconds": 1689025786,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 60,
        "index": "D",
        "name": "Savior",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "brute force",
            "dsu",
            "math"
        ]
    },
    "author": {
        "contestId": 60,
        "members": [
            {
                "handle": "ziche"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1298131200
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 40,
    "timeConsumedMillis": 1558,
    "memoryConsumedBytes": 90214400,
    "source": "#include <algorithm>\n#include <cassert>\n#include <cmath>\n#include <cstdlib>\n#include <cstring>\n#include <fstream>\n#include <iostream>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <vector>\n#define nmax 15000000\n#define inf 10000010\nusing namespace std;\nbool t[nmax];\nbool used[nmax];\nint p[nmax];\nint get(int x) {\n  if (p[x] == -1)\n    return x;\n  return (p[x] = get(p[x]));\n}\nvoid unite(int i1, int j1) {\n  int i = get(i1);\n  int j = get(j1);\n  if (i != j) {\n    if (i > j)\n      p[i] = j;\n    else\n      p[j] = i;\n  }\n}\nvoid add_edge(int k1, int k2) {\n  if (t[k1] && t[k2]) {\n    if (k1 < inf && k2 < inf)\n      unite(k1, k2);\n  }\n}\nint n;\nint gcd(int a, int b) {\n  if (a == 0)\n    return b;\n  if (b == 0)\n    return a;\n  return gcd(b, a % b);\n}\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  cout.tie(NULL);\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    int w = 0;\n    cin >> w;\n    t[w] = 1;\n  }\n  for (int i = 0; i < nmax; i++)\n    p[i] = -1;\n  for (int i = 1; i * i < nmax; i++)\n    for (int j = 1; j <= i && (j * j + i * i < nmax); j++)\n      if (gcd(i, j) == 1 && (i + j) % 2 == 1) {\n        int k1 = i * i - j * j;\n        int k2 = 2 * i * j;\n        int k3 = i * i + j * j;\n        for (int k = 1; (k * k1) < nmax && (k * k2) < nmax && (k * k3) < nmax;\n             k++) {\n          add_edge(k1, k2);\n          add_edge(k2, k3);\n          add_edge(k3, k1);\n        }\n      }\n  int ans = 0;\n  for (int i = 0; i < nmax; i++)\n    if (p[i] == -1 && t[i])\n      ans++;\n  cout << ans << \"\\n\";\n  return 0;\n}\n// JNfrbjQQAxBzSpiAvychblTKaSIccePFEjjffdnsNXGkUEDWFWYsoRZyITvIhkBcgyOsHzykalyFZtQnCjcMqdaxApvnQJZncHSNjERTePCoTOpqRYPXFdxVVyUDexWt"
}