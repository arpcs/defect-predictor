{
    "id": 220098144,
    "contestId": 765,
    "creationTimeSeconds": 1692845390,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 765,
        "index": "F",
        "name": "Souvenirs",
        "type": "PROGRAMMING",
        "points": 3250.0,
        "rating": 3100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 765,
        "members": [
            {
                "handle": "2020hejianxing"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1487059500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 467,
    "memoryConsumedBytes": 21606400,
    "source": "// LUOGU_RID: 122508988\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n#define lowbit(x) x & (-x)\r\nconst int N = 300005, INF = 1e9 + 7;\r\nint n, q, a[N], tr[N], mx[N << 2], tot = 0, lc[N << 2], rc[N << 2], ans[N], root = 0;\r\nstruct QR {\r\n\tint l, r, id;\r\n\tbool operator< (const QR &T) const { return r < T.r; }\r\n} qr[N];\r\ninline void upd(int x, int val) { for (; x; x -= lowbit(x)) tr[x] = min(tr[x], val); }\r\ninline int gsum(int x) {\r\n\tint sum = INF;\r\n\tfor (; x <= n; x += lowbit(x)) sum = min(sum, tr[x]);\r\n\treturn sum;\r\n}\r\ninline void update(int &rt, int x, int y, int pos, int val) {\r\n\tif (!rt) rt = ++tot;\r\n\tif (x == y) { mx[rt] = val; return; }\r\n\tint mid = x + y >> 1;\r\n\tif (pos <= mid) update(lc[rt], x, mid, pos, val), mx[rt] = max(mx[rt], mx[lc[rt]]);\r\n\telse update(rc[rt], mid + 1, y, pos, val), mx[rt] = max(mx[rt], mx[rc[rt]]);\r\n}\r\ninline int query(int rt, int x, int y, int l, int r) {\r\n\tif (!rt || x > r || y < l) return 0;\r\n\tif (l <= x && y <= r) return mx[rt];\r\n\tint mid = x + y >> 1;\r\n\treturn max(query(lc[rt], x, mid, l, r), query(rc[rt], mid + 1, y, l, r));\r\n}\r\nvoid solve() {\r\n\tmemset(tr, 0x3f, sizeof(tr)), memset(lc, 0, sizeof(lc)), memset(rc, 0, sizeof(rc)), memset(mx, 0, sizeof(mx)), tot = root = 0;\r\n\tfor (int i = 1, j = 1; i <= n; i++) {\r\n\t\tint x = query(root, 1, INF, a[i], INF);\r\n\t\twhile (x && a[x] != a[i]) upd(x, a[x] - a[i]), x = query(root, 1, INF, a[i], a[i] + a[x] >> 1);\r\n\t\tif (a[x] == a[i]) upd(x, 0);\r\n\t\twhile (j <= q && qr[j].r == i) ans[qr[j].id] = min(ans[qr[j].id], gsum(qr[j].l)), j++;\r\n\t\tupdate(root, 1, INF, a[i], i);\r\n\t}\r\n}\r\ninline int read() {\r\n\tint sum = 0;\r\n\tchar c = getchar();\r\n\twhile (c < '0' || c > '9') c = getchar();\r\n\twhile (c >= '0' && c <= '9') sum = (sum << 3) + (sum << 1) + (c ^ 48), c = getchar();\r\n\treturn sum;\r\n}\r\nint main() {\r\n\tn = read();\r\n\tfor (int i = 1; i <= n; i++) a[i] = read();\r\n\tq = read();\r\n\tfor (int i = 1; i <= q; i++) qr[i].l = read(), qr[i].r = read(), qr[i].id = i;\r\n\tsort(qr + 1, qr + q + 1), memset(ans, 0x3f, sizeof(ans));\r\n\tsolve();\r\n\tfor (int i = 1; i <= n; i++) a[i] = INF - a[i];\r\n\tsolve();\r\n\tfor (int i = 1; i <= q; i++) printf(\"%d\\n\", ans[i]);\r\n\treturn 0;\r\n}"
}