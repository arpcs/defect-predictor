{
    "id": 211429575,
    "contestId": 765,
    "creationTimeSeconds": 1688042508,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 765,
        "index": "F",
        "name": "Souvenirs",
        "type": "PROGRAMMING",
        "points": 3250.0,
        "rating": 3100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 765,
        "members": [
            {
                "handle": "tzy_tmy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1487059500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst unsigned int N = 1e5 + 1, M = 3e5 + 1, LEN = 300, LIM = 10000;\r\nstruct que\r\n{\r\n    unsigned int id, l, r;\r\n}q[M];\r\nstruct arr\r\n{\r\n    int id, num;\r\n}c[N];\r\nstruct chain\r\n{\r\n    unsigned int pre, nxt;\r\n}ch[N], ch2[N];\r\nchar buf[1 << 20], *_now = buf, *_end = buf;\r\n#define getchar() (_now == _end && (_end = (_now = buf) + fread(buf, 1, 1 << 20, stdin), _now == _end) ? EOF : *_now++)\r\nunsigned int cnt[N], cnt2[N], bel[N], L[N], R[N], ans[M], a[N], b[10010], v[256][10010];\r\nunsigned int n, m, cntq;\r\ninline unsigned int read()\r\n{\r\n    register unsigned int r = 0, c = getchar();\r\n    while (!isdigit(c)) c = getchar();\r\n    while (isdigit(c)) r = (r << 1) + (r << 3) + (c ^ 48), c = getchar();\r\n    return r;\r\n}\r\ninline unsigned int Min(unsigned int x, unsigned int y) \r\n{\r\n    return x > y ? y : x;\r\n}\r\ninline unsigned int chk(unsigned int x)\r\n{\r\n    return x > 1e5 ? 1e5 : x;\r\n}\r\nunsigned int bf(unsigned int x, unsigned int y)\r\n{\r\n    register unsigned int op, len = y - x + 1, id = 0;\r\n    memcpy(b + 1, a + x, len * sizeof(unsigned int));\r\n    for (unsigned int j = 0; j < 256; ++j) v[j][0] = 0;\r\n    for (unsigned int j = 1; j <= len; ++j) \r\n    {\r\n        op = b[j] & 255;\r\n        v[op][++v[op][0]] = b[j];\r\n    }\r\n    for (unsigned int j = 0; j < 256; ++j) for (int k = 1; k <= v[j][0]; ++k) b[++id] = v[j][k]; \r\n    for (unsigned int j = 0; j < 256; ++j) v[j][0] = 0;\r\n    for (unsigned int j = 1; j <= len; ++j) \r\n    {\r\n        op = (b[j] >> 8) & 255;\r\n        v[op][++v[op][0]] = b[j];\r\n    }\r\n    id = 0;\r\n    for (unsigned int j = 0; j < 256; ++j) for (int k = 1; k <= v[j][0]; ++k) b[++id] = v[j][k]; \r\n    for (unsigned int j = 0; j < 256; ++j) v[j][0] = 0;\r\n    for (unsigned int j = 1; j <= len; ++j) \r\n    {\r\n        op = (b[j] >> 16) & 255;\r\n        v[op][++v[op][0]] = b[j];\r\n    }\r\n    id = 0;\r\n    for (unsigned int j = 0; j < 256; ++j) for (int k = 1; k <= v[j][0]; ++k) b[++id] = v[j][k]; \r\n    for (unsigned int j = 0; j < 256; ++j) v[j][0] = 0;\r\n    for (unsigned int j = 1; j <= len; ++j) \r\n    {\r\n        op = (b[j] >> 24) & 255;\r\n        v[op][++v[op][0]] = b[j];\r\n    }\r\n    id = 0;\r\n    for (unsigned int j = 0; j < 256; ++j) for (int k = 1; k <= v[j][0]; ++k) b[++id] = v[j][k]; \r\n    unsigned int ret = 1000000000;\r\n    for (unsigned int i = 1; i < len; ++i) ret = Min(ret, b[i + 1] - b[i]);\r\n    return ret;\r\n}\r\ninline bool cmp(que a, que b)\r\n{\r\n    return bel[a.l] == bel[b.l] ? a.r > b.r : a.l < b.l;\r\n}\r\ninline bool cmp2(arr a, arr b)\r\n{\r\n    return a.num < b.num;   \r\n}\r\ninline void del(int x)\r\n{\r\n    if (ch[x].pre && ch[x].nxt) ++cnt[chk(a[ch[x].nxt] - a[ch[x].pre])], --cnt[chk(a[x] - a[ch[x].pre])], --cnt[chk(a[ch[x].nxt] - a[x])], ch[ch[x].pre].nxt = ch[x].nxt, ch[ch[x].nxt].pre = ch[x].pre;\r\n    else if (ch[x].pre) --cnt[chk(a[x] - a[ch[x].pre])], ch[ch[x].pre].nxt = 0;\r\n    else if (ch[x].nxt) --cnt[chk(a[ch[x].nxt] - a[x])], ch[ch[x].nxt].pre = 0;\r\n}\r\ninline void add(int x)\r\n{\r\n    if (ch[x].pre && ch[x].nxt) --cnt[chk(a[ch[x].nxt] - a[ch[x].pre])], ++cnt[chk(a[x] - a[ch[x].pre])], ++cnt[chk(a[ch[x].nxt] - a[x])];\r\n    else if (ch[x].pre) ++cnt[chk(a[x] - a[ch[x].pre])]; \r\n    else if (ch[x].nxt) ++cnt[chk(a[ch[x].nxt] - a[x])]; \r\n    ch[ch[x].nxt].pre = x, ch[ch[x].pre].nxt = x;\r\n}\r\nunsigned int get_answer()\r\n{\r\n    for (unsigned int i = 0; ; ++i) if (cnt[i]) return i;\r\n}\r\nvoid write(unsigned int x)\r\n{\r\n    if (x > 9) write(x / 10);\r\n    putchar(x % 10 ^ '0');\r\n}\r\nint main()\r\n{\r\n    // freopen(\".in\", \"r\", stdin);\r\n    // freopen(\".out\", \"w\", stdout);\r\n    // int st = clock();\r\n    n = read();\r\n    // int tot = 0, st = clock();\r\n    for (unsigned int i = 1; i <= n; ++i) c[i].num = a[i] = read(); \r\n    m = read();\r\n    for (unsigned int i = 1; i <= m; ++i) \r\n    {\r\n        unsigned int left = read(), right = read();\r\n        if (right - left <= LIM) \r\n        {\r\n            ans[i] = bf(left, right);\r\n            // ++tot;\r\n            // if (n == 100) cout << left << ' ' << right << endl;\r\n        }\r\n        else q[++cntq] = {i, left, right};\r\n    } \r\n    // printf(\"%.3lf\\n\", (clock() - st) * 1.0 / CLOCKS_PER_SEC);\r\n    register unsigned int SIZE = n * sizeof(chain);\r\n    unsigned int bl = (n - 1) / LEN + 1;\r\n\tfor (unsigned int i = 1; i <= n; ++i) bel[i] = (i - 1) / LEN + 1;\r\n    for (unsigned int i = 1; i <= bl; ++i) L[i] = R[i - 1] + 1, R[i] = i * LEN;\r\n    R[bl] = n;\r\n    for (int i = 1; i <= n; ++i) ch2[c[i].id].pre = c[i - 1].id, ch2[c[i].id].nxt = c[i + 1].id;\r\n    ch2[n].pre = n - 1;  \r\n    sort(c + 1, c + n + 1, cmp);\r\n    for (int i = 1; i < n; ++i) ++cnt[chk(c[i + 1].num - c[i].num)];\r\n    memcpy(cnt2, cnt, sizeof cnt);\r\n    sort(q + 1, q + cntq + 1, cmp);\r\n    register unsigned int l = 1, r = n;\r\n    for (register unsigned int block = 1, now = 1; block <= bl && now <= cntq; ++block)\r\n    {\r\n        if (bel[q[now].l] == block)\r\n        { \r\n            memcpy(ch + 1, ch2 + 1, SIZE);\r\n            memcpy(cnt, cnt2, sizeof cnt2);\r\n            l = 1, r = n;\r\n            while (l < L[block]) del(l++); \r\n            while (bel[q[now].l] == block)\r\n            {\r\n                while (r > q[now].r) del(r--);\r\n                while (l < q[now].l) del(l++);\r\n                ans[q[now].id] = get_answer();  \r\n                // ++tot;\r\n                // if ((clock() - st) * 1.0 / CLOCKS_PER_SEC > 3.99) exit(tot);          \r\n                while (l > L[block]) add(--l);\r\n                ++now; \r\n            }\r\n        }   \r\n    }\r\n    // // int st = clock();\r\n    for (unsigned int i = 1; i <= m; ++i) write(ans[i]), putchar('\\n');\r\n    // printf(\"%.3lf\\n\", (clock() - st) * 1.0 / CLOCKS_PER_SEC);\r\n    return 0;\r\n}"
}