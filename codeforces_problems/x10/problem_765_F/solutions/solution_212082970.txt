{
    "id": 212082970,
    "contestId": 765,
    "creationTimeSeconds": 1688475386,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 765,
        "index": "F",
        "name": "Souvenirs",
        "type": "PROGRAMMING",
        "points": 3250.0,
        "rating": 3100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 765,
        "members": [
            {
                "handle": "MCCF"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1487059500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 112947200,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nconst int maxn = 200005, maxm = 1000005, inf = 0x3f3f3f3f, lim = inf;\r\nstruct Que {\r\n\tint l, r, id;\r\n\tbool operator< (Que t) const { return r < t.r; }\r\n} q[maxm];\r\nint a[maxn], ans[maxm];\r\nint n, m;\r\nnamespace Tv {\r\n#define mid ((l + r) >> 1)\r\nint t[maxn * 20], ls[maxn * 20], tot, rs[maxn * 20];\r\nvoid insert(int &p, int l, int r, int i, int x) {\r\n\tif (!p) p = ++tot;\r\n\tt[p] = max(t[p], x);\r\n\tif (l == r) return;\r\n\tif (i <= mid) insert(ls[p], l, mid, i, x);\r\n\telse insert(rs[p], mid + 1, r, i, x);\r\n}\r\nint query(int p, int l, int r, int ql, int qr) {\r\n\tif (!p || ql > qr || l > qr || r < ql) return 0;\r\n\tif (l >= ql && r <= qr) return t[p];\r\n\treturn max(query(ls[p], l, mid, ql, qr), query(rs[p], mid + 1, r, ql, qr));\r\n}\r\n}\r\nnamespace Ts {\r\n\tint t[maxn * 20], ls[maxn * 20], tot, rs[maxn * 20];\r\n\tinline void init() {\r\n\t\tmemset(t, 0x3f, sizeof(t));\r\n\t}\r\n\tvoid insert(int &p, int l, int r, int i, int x) {\r\n\t\tif (!p) p = ++tot;\r\n\t\tt[p] = min(t[p], x);\r\n\t\tif (l == r) return;\r\n\t\tif (i <= mid) insert(ls[p], l, mid, i, x);\r\n\t\telse insert(rs[p], mid + 1, r, i, x);\r\n\t}\r\n\tint query(int p, int l, int r, int ql, int qr) {\r\n\t\tif (!p || ql > qr || l > qr || r < ql) return inf;\r\n\t\tif (l >= ql && r <= qr) return t[p];\r\n\t\treturn min(query(ls[p], l, mid, ql, qr), query(rs[p], mid + 1, r, ql, qr));\r\n\t}\r\n#undef mid\r\n}\r\nint tv, ts;\r\nsigned main() {\r\n\tmt19937 rnd(time(0));\r\n\tscanf(\"%d\", &n);\r\n//\tfor (int i = 1; i <= n; ++i) scanf(\"%d\", a + i);\r\n\tfor (int i = 1; i <= n; ++i) a[i] = rnd() % 1000000000;\r\n\tscanf(\"%d\", &m);\r\n//\tfor (int i = 1; i <= m; ++i) scanf(\"%d%d\", &q[i].l, &q[i].r), q[i].id = i;\r\n\tfor (int i = 1; i <= m; ++i) q[i].l = rnd() % (n / 2) + 1, q[i].r = rnd() % (n - q[i].l + 1) + q[i].l, q[i].id = i;\r\n\tsort(q + 1, q + 1 + m);\r\n\tTs::init();\r\n\tfor (int j = 1, r = 1; r <= n; ++r) {\r\n\t\tint k = Tv::query(tv, 0, lim, a[r], lim);\r\n\t\twhile (k) {\r\n\t\t\tTs::insert(ts, 1, n, k, a[k] - a[r]);\r\n//\t\t\tcout << k << \" \" << a[k] - a[r] << endl;\r\n\t\t\tif (a[k] == a[r]) break;\r\n//\t\t\tcout << (a[k] + a[r]) / 2 << endl;\r\n\t\t\tk = Tv::query(tv, 0, lim, a[r], (a[k] + a[r]) / 2);\r\n\t\t}\r\n\t\tk = Tv::query(tv, 0, lim, 0, a[r]);\r\n\t\twhile (k) {\r\n\t\t\tTs::insert(ts, 1, n, k, a[r] - a[k]);\r\n\t\t\tif (a[k] == a[r]) break;\r\n\t\t\tk = Tv::query(tv, 0, lim, (a[k] + a[r] + 1) / 2, a[r]);\r\n\t\t}\r\n\t\tTv::insert(tv, 0, lim, a[r], r);\r\n//\t\tcout << r <<endl;\r\n//\t\tcout << endl;\r\n\t\twhile (j <= m && q[j].r <= r) ans[q[j].id] = Ts::query(ts, 1, n, q[j].l, r), ++j;\r\n\t}\r\n//\tfor (int i = 1; i <= m; ++i) printf(\"%d\\n\", ans[i]);\r\n\treturn 0;\r\n}"
}