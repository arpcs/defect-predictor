{
    "id": 232796625,
    "contestId": 765,
    "creationTimeSeconds": 1699991679,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 765,
        "index": "F",
        "name": "Souvenirs",
        "type": "PROGRAMMING",
        "points": 3250.0,
        "rating": 3100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 765,
        "members": [
            {
                "handle": "Mtaylor"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1487059500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 23040000,
    "source": "// Mtaylor\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define pb push_back\r\n#define fi first\r\n#define se second\r\n#define mp make_pair\r\n#define endl '\\n';\r\n#define sz(x) ((int)(x).size())\r\n#define all(x) (x).begin(), (x).end()\r\n#define rall(x) (x).rbegin(), (x).rend()\r\nvoid dbg_out() { cerr << endl; }\r\ntemplate <typename Head, typename... Tail>\r\nvoid dbg_out(Head H, Tail... T) {\r\n    cerr << ' ' << H;\r\n    dbg_out(T...);\r\n}\r\n#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)\r\ntypedef long long ll;\r\nconst int N = 3e5 + 5;\r\nstruct Compressor {\r\n    vector<ll> values;\r\n    int n;\r\n    void init() {\r\n        values.clear();\r\n        n = 0;\r\n    }\r\n    void add(ll x) { values.pb(x); }\r\n    void run() {\r\n        sort(all(values));\r\n        values.resize(unique(all(values)) - values.begin());\r\n        n = values.size();\r\n    }\r\n    int compress(ll x) { return lower_bound(all(values), x) - values.begin(); }\r\n    int greatestSmallerThanOrEqual(ll x) {\r\n        return (upper_bound(all(values), x) - values.begin()) - 1;\r\n    }\r\n    int greaterThanOrEqual(ll x) {\r\n        return (lower_bound(all(values), x) - values.begin());\r\n    }\r\n    ll decompress(int p) { return values[p]; }\r\n} compressor;\r\n\r\nint n, a[N];\r\nint m, l[N], r[N];\r\nint qans[N];\r\n\r\nint treeMax[4 * N];\r\nint treeMin[4 * N];\r\nint lazyMin[4 * N];\r\nvoid updateMaxPos(int p, int val) {\r\n    for (treeMax[p += compressor.n] = max(treeMax[p], val); p >>= 1;)\r\n        treeMax[p] = max(treeMax[p << 1], treeMax[p << 1 | 1]);\r\n}\r\n\r\nint queryMaxPos(int l, int r) {\r\n    int res = -1;\r\n    for (l += compressor.n, r += compressor.n; l < r; l >>= 1, r >>= 1) {\r\n        if (l & 1) res = max(res, treeMax[l++]);\r\n        if (r & 1) res = max(res, treeMax[--r]);\r\n    }\r\n    return res;\r\n}\r\n\r\nvoid upd_lazy(int id, int ns, int ne) {\r\n    if (lazyMin[id] > 1e9) {\r\n        return;\r\n    }\r\n    treeMin[id] = min(treeMin[id], lazyMin[id]);\r\n    if (ns != ne) {\r\n        int l = 2 * id + 1;\r\n        int r = l + 1;\r\n        lazyMin[l] = min(lazyMin[l], lazyMin[id]);\r\n        lazyMin[r] = min(lazyMin[r], lazyMin[id]);\r\n    }\r\n    lazyMin[id] = 5 + (1e9);\r\n}\r\n\r\nvoid updateMin(int qs, int qe, int val, int id = 0, int ns = 0,\r\n               int ne = n - 1) {\r\n    upd_lazy(id, ns, ne);\r\n    if (qs > ne || ns > qe) {\r\n        return;\r\n    }\r\n    if (qs <= ns && qe >= ne) {\r\n        lazyMin[id] = min(lazyMin[id], val);\r\n        upd_lazy(id, ns, ne);\r\n        return;\r\n    }\r\n    int l = 2 * id + 1;\r\n    int r = l + 1;\r\n    int md = ns + (ne - ns) / 2;\r\n    updateMin(qs, qe, val, l, ns, md);\r\n    updateMin(qs, qe, val, r, md + 1, ne);\r\n    treeMin[id] = min(treeMin[l], treeMin[r]);\r\n}\r\n\r\nint queryMin(int qs, int qe, int id = 0, int ns = 0, int ne = n - 1) {\r\n    upd_lazy(id, ns, ne);\r\n    if (qs > ne || qe < ns) return 1e9;\r\n    if (qs <= ns && qe >= ne) {\r\n        return treeMin[id];\r\n    }\r\n    int l = 2 * id + 1;\r\n    int r = l + 1;\r\n    int md = ns + (ne - ns) / 2;\r\n    return min(queryMin(qs, qe, l, ns, md), queryMin(qs, qe, r, md + 1, ne));\r\n}\r\n\r\nvector<int> qu[N];\r\n\r\nvoid process(int i, int x) {\r\n    {\r\n        int cur = compressor.n;\r\n        while (cur != x) {\r\n            int idx = queryMaxPos(x, cur - 1);\r\n            if (idx == -1) {\r\n                break;\r\n            }\r\n\r\n            updateMin(0, idx,\r\n                      compressor.decompress(a[idx]) - compressor.decompress(x));\r\n            cur = a[idx];\r\n        }\r\n    }\r\n    {\r\n        int cur = -1;\r\n        while (cur != x) {\r\n            int idx = queryMaxPos(cur + 1, x);\r\n            if (idx == -1) {\r\n                break;\r\n            }\r\n            updateMin(0, idx,\r\n                      compressor.decompress(x) - compressor.decompress(a[idx]));\r\n            cur = a[idx];\r\n        }\r\n    }\r\n\r\n    updateMaxPos(x, i);\r\n}\r\n\r\nvoid test_case() {\r\n    memset(treeMax, -1, sizeof(treeMax));\r\n    cin >> n;\r\n    compressor.init();\r\n    for (int i = 0; i < n; i++) {\r\n        cin >> a[i];\r\n        compressor.add(a[i]);\r\n    }\r\n    for (int i = 0; i < 4 * n; i++) {\r\n        treeMin[i] = 1e9;\r\n        lazyMin[i] = 5 + (1e9);\r\n    }\r\n    compressor.run();\r\n    for (int i = 0; i < n; i++) {\r\n        a[i] = compressor.compress(a[i]);\r\n    }\r\n    cin >> m;\r\n    for (int i = 0; i < m; i++) {\r\n        cin >> l[i] >> r[i];\r\n        --l[i], --r[i];\r\n        qu[r[i]].pb(i);\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        process(i, a[i]);\r\n        for (auto &id : qu[i]) {\r\n            qans[id] = queryMin(l[id], r[id]);\r\n        }\r\n    }\r\n    for (int i = 0; i < m; i++) {\r\n        cout << qans[i] << \"\\n\";\r\n    }\r\n}\r\n\r\nint main() {\r\n    // freopen(\"input.txt\", \"r\", stdin);\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    int T = 1;\r\n    while (T--) {\r\n        test_case();\r\n    }\r\n    return 0;\r\n}\r\n"
}