{
    "id": 217536559,
    "contestId": 765,
    "creationTimeSeconds": 1691381727,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 765,
        "index": "F",
        "name": "Souvenirs",
        "type": "PROGRAMMING",
        "points": 3250.0,
        "rating": 3100,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 765,
        "members": [
            {
                "handle": "Lambent_Light"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1487059500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 6,
    "timeConsumedMillis": 2636,
    "memoryConsumedBytes": 6860800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 1e5, M = 3e5;\r\nstruct que {\r\n    int id, l, r;\r\n}q[M + 5];\r\nint n, m, a[N + 5], len, blk[N + 5], ans[M + 5];\r\nmultiset<int> s;\r\nbool cmp(que a, que b) {\r\n    if (blk[a.l] == blk[b.l]) return a.r < b.r;\r\n    return blk[a.l] < blk[b.l];\r\n}\r\nint solve(int l, int r) {\r\n    vector<int> b;\r\n    for (int i = l; i <= r; i++) b.push_back(a[i]);\r\n    sort(b.begin(), b.end());\r\n    int res = 0x7fffffff;\r\n    for (int i = 1; i < b.size(); i++)\r\n        res = min(res, b[i] - b[i - 1]);\r\n    return res;\r\n}\r\nint main() {\r\n    ios::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cin >> n;\r\n    len = sqrt(1.0 * n);\r\n    for (int i = 1; i <= n; i++) \r\n        cin >> a[i], blk[i] = (i - 1) / len + 1;\r\n    cin >> m;\r\n    for (int i = 1; i <= m; i++)\r\n        q[i].id = i, cin >> q[i].l >> q[i].r;\r\n    sort(q + 1, q + m + 1, cmp);\r\n    for (int i = 1, now = 1; i <= blk[n]; i++) {\r\n        int mid = min(n, i * len), l = mid + 1, r = mid, res = 0x7fffffff, rres;\r\n        s.clear();\r\n        while (blk[q[now].l] == i) {\r\n            if (blk[q[now].r] == i) ans[q[now].id] = solve(q[now].l, q[now].r);\r\n            else {\r\n                while (r < q[now].r) {\r\n                    r += 1;\r\n                    if (s.find(a[r]) != s.end()) res = 0;\r\n                    s.insert(a[r]);\r\n                    multiset<int>::iterator it1 = s.find(a[r]), it2 = it1, it3 = it1;\r\n                    it3++;\r\n                    if (it3 != s.end()) res = min(res, *it3 - *it1);\r\n                    if (it1 != s.begin()) it2--, res = min(res, *it1 - *it2);\r\n                }\r\n                rres = res;\r\n                while (l > q[now].l) {\r\n                    l -= 1;\r\n                    if (s.find(a[l]) != s.end()) res = 0;\r\n                    s.insert(a[l]);\r\n                    multiset<int>::iterator it1 = s.find(a[l]), it2 = it1, it3 = it1;\r\n                    it3++;\r\n                    if (it3 != s.end()) res = min(res, *it3 - *it1);\r\n                    if (it1 != s.begin()) it2--, res = min(res, *it1 - *it2);\r\n                }\r\n                ans[q[now].id] = res;\r\n                while (l <= mid) {\r\n                    multiset<int>::iterator it = s.find(a[l]);\r\n                    s.erase(*it);\r\n                    l += 1;\r\n                }\r\n                res = rres;\r\n            }\r\n            now += 1;\r\n        }\r\n    }\r\n    for (int i = 1; i <= m; i++) cout << ans[i] << '\\n';\r\n    return 0;\r\n}"
}