{
    "id": 214627810,
    "contestId": 1178,
    "creationTimeSeconds": 1689862154,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1178,
        "index": "H",
        "name": "Stock Exchange",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "binary search",
            "flows",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1178,
        "members": [
            {
                "handle": "ETO_leader"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1563636900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 137,
    "timeConsumedMillis": 1560,
    "memoryConsumedBytes": 3072000,
    "source": "#include<bits/stdc++.h>\r\n#define cir(i,a,b) for(int i=a;i<b;++i)\r\nusing namespace std;\r\nusing lint=long long;\r\nconst int _dinf=1e9+7;\r\ntemplate<typename T,T _inf>\r\nclass graph{\r\nprivate:\r\n    vector<T> D;\r\n    vector<bool> inq;\r\n    struct edge{int v,rid;T f,w;};\r\n    vector<vector<edge>> G;\r\n    vector<int> fx,fid;\r\n    bool spfa(int s,int t){\r\n        queue<int> q;q.push(s);\r\n        fill(D.begin(),D.end(),_inf);\r\n        D[s]=0;fx[s]=-1;\r\n        vector<bool> vis(G.size());\r\n        while(!q.empty()){\r\n            auto u=q.front();q.pop();\r\n            inq[u]=false;vis[u]=true;\r\n            for(auto&[v,rid,f,w]:G[u]) if(f>0){\r\n                if(D[u]+w>=D[v]) continue;\r\n                fx[v]=u;D[v]=D[u]+w;\r\n                fid[v]=G[v][rid].rid;\r\n                if(!inq[v]) q.push(v);\r\n            }\r\n        }\r\n        return vis[t];\r\n    }\r\n    T getflow(int s,int t){\r\n        int u=t;T flow=_inf;\r\n        while(u!=s){\r\n            flow=min(flow,G[fx[u]][fid[u]].f);\r\n            u=fx[u];\r\n        }\r\n        return flow;\r\n    }\r\n    auto max_flow(int s,int t){\r\n        T resw=0,flw=0;\r\n        while(spfa(s,t)){\r\n            int u=t;T flow=getflow(s,t);\r\n            while(u!=s){\r\n                G[fx[u]][fid[u]].f-=flow;\r\n                G[u][G[fx[u]][fid[u]].rid].f+=flow;\r\n                u=fx[u];\r\n            }\r\n            resw+=D[t]*flow;\r\n        }\r\n        return make_pair(resw,flw);\r\n    }\r\npublic:\r\n    void insert(int u,int v,T fw=_inf,T w=0){\r\n        G[u].push_back({v,(int)(G[v].size()),fw,w});\r\n        G[v].push_back({u,(int)(G[u].size()-1),0,-w});\r\n    }\r\n    T max_flow_size(int s,int t){\r\n        return max_flow(s,t).first;\r\n    }\r\n    graph(int _n):\r\n        fid(_n),G(_n),fx(_n),inq(_n),D(_n){}\r\n};\r\nconst lint _inf=1e9+7;\r\nstruct stock{\r\n    lint a,b;bool str;int id;\r\n    lint price(lint d) const{return a*d+b;}\r\n};\r\nvector<stock> st;\r\nvoid build_graph(int n,lint ans,graph<lint,_inf>&G){\r\n    const int s=0,t=n*7+1;\r\n    auto getid=[&](int x,int row){\r\n        ++x;\r\n        if(!row) return x;\r\n        if(row==3) return n*5+x;\r\n        return n*2*(row-1)+n+x;\r\n    };\r\n    cir(i,0,n) G.insert(s,getid(i,0),1);\r\n    int lp=0;\r\n    for(auto&i:st){\r\n        if(lp) G.insert(getid(i.id,1),lp);\r\n        if(i.str){\r\n            G.insert(getid(i.id,0),getid(i.id,2),_inf,1);\r\n            G.insert(getid(i.id,0),getid(i.id,1),_inf,1);\r\n        }\r\n        lp=getid(i.id,1);\r\n    }\r\n    cir(i,0,n*2){\r\n        G.insert(getid(i,1),getid(i,2),_inf,1);\r\n        if(!st[i].str)\r\n            G.insert(getid(st[i].id,1),getid(st[i].id,3));\r\n    }\r\n    sort(st.begin(),st.end(),[&](stock&a,stock&b){\r\n        return a.price(ans)==b.price(ans)?\r\n        a.str:a.price(ans)>b.price(ans);});\r\n    lp=0;\r\n    for(auto&i:st){\r\n        if(lp)\r\n            G.insert(lp,getid(i.id,2));\r\n        if(!i.str)\r\n            G.insert(getid(i.id,2),getid(i.id,3));\r\n        lp=getid(i.id,2);\r\n    }\r\n    cir(i,n,n*2) G.insert(getid(i,3),t,1);\r\n}\r\nint main(){\r\n    ios::sync_with_stdio(false),cin.tie(0);\r\n    int n;cin>>n;st.resize(n*2);\r\n    cir(i,0,n*2){\r\n        cin>>st[i].a>>st[i].b;\r\n        st[i].str=(i<n);st[i].id=i;\r\n    }\r\n    sort(st.begin(),st.end(),[](stock&a,stock&b){\r\n        return a.price(0)==b.price(0)?\r\n        (!a.str):a.price(0)<b.price(0);});\r\n    lint l=0,r=_dinf,ans=-1;\r\n    while(r>=l){\r\n        const int mid=(l+r)/2;\r\n        [&](){\r\n            lint mx=0;auto stx=st;\r\n            queue<lint> pr;\r\n            for(auto&i:stx){\r\n                mx=max(mx,i.price(mid));\r\n                if(i.str) pr.push(mx);\r\n            }\r\n            sort(stx.begin(),stx.end(),[&](stock&a,stock&b){\r\n                return a.price(mid)==b.price(mid)?\r\n                a.str:a.price(mid)<b.price(mid);});\r\n            for(auto&i:stx){\r\n                if(!i.str){\r\n                    if(pr.front()<i.price(mid))\r\n                        return false;\r\n                    pr.pop();\r\n                }\r\n            }\r\n            return true;\r\n        }()?(r=mid-1),(ans=mid):(l=mid+1);\r\n    }\r\n    const int s=0,t=n*7+1;\r\n    if(ans<0) exit((cout<<\"-1\\n\",0));\r\n    graph<lint,_inf> G(n*7+2);\r\n    build_graph(n,ans,G);\r\n    cout<<ans<<' '<<G.max_flow_size(s,t)<<'\\n';\r\n    return 0;\r\n}"
}