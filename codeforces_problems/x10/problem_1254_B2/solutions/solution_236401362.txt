{
    "id": 236401362,
    "contestId": 1254,
    "creationTimeSeconds": 1702057194,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1254,
        "index": "B2",
        "name": "Send Boxes to Alice (Hard Version)",
        "type": "PROGRAMMING",
        "points": 750.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "greedy",
            "math",
            "number theory",
            "ternary search",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1254,
        "members": [
            {
                "handle": "ethankim8683"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1574174100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 90,
    "timeConsumedMillis": 421,
    "memoryConsumedBytes": 59494400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nusing I=int;\r\nusing Lli=long long int;\r\nconst I N=1e6;\r\nconst Lli MAX=1e18;\r\nI a_arr[N];\r\nvector<Lli>prms;\r\nI tmps[N];\r\nvector<pair<Lli,I>>curs;\r\nI main(){\r\n  cin.tie(0)->sync_with_stdio(0);\r\n  I n;cin>>n;\r\n  for(I i=0;i<n;i++)cin>>a_arr[i];\r\n  Lli sum=accumulate(a_arr,a_arr+n,0ll);\r\n  for(Lli i=2;i*i<=sum;i++){\r\n    if(sum%i==0){\r\n      prms.push_back(i);\r\n      while(sum%i==0){\r\n        sum/=i;\r\n      }\r\n    }\r\n  }\r\n  if(sum>1){\r\n    prms.push_back(sum);\r\n  }\r\n  auto slv=[&](Lli k){\r\n    copy_n(a_arr,n,tmps);\r\n    Lli cur1=0,res=0;\r\n    for(I i=0;i<n;){\r\n      if(cur1==0){\r\n        tmps[i]%=k;\r\n      }\r\n      Lli dif1=min(cur1+tmps[i],k)-cur1;\r\n      curs.push_back({dif1,i});\r\n      cur1+=dif1;\r\n      if(cur1==k){\r\n        Lli cur2=0;\r\n        I med;\r\n        for(auto[dif2,j]:curs){\r\n          cur2+=dif2;\r\n          if(cur2>k/2){\r\n            med=j;\r\n            break;\r\n          }\r\n        }\r\n        for(auto[dif2,j]:curs){\r\n          res+=dif2*abs(j-med);\r\n        }\r\n        curs.clear();\r\n        cur1=0;\r\n      }\r\n      tmps[i]-=dif1;\r\n      if(tmps[i]==0){\r\n        i++;\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n  Lli res=MAX;\r\n  for(auto k:prms){\r\n    res=min(res,slv(k));\r\n  }\r\n  if(res==MAX){\r\n    printf(\"-1\\n\");\r\n  }else{\r\n    printf(\"%lli\\n\",res);\r\n  }\r\n}\r\n/*\r\nall k must divide sum(a), so we can complete search all prime divisors of\r\nsum(a) the minimum number of operations required\r\n\r\nbetween k candies, the index of the box requiring the least operations to\r\ngather them into one box is the median of the candies' boxes' indices\r\n*/"
}