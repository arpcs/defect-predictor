{
    "contestId": 1832,
    "index": "D1",
    "name": "Red-Blue Operations (Easy Version)",
    "type": "PROGRAMMING",
    "rating": 2100,
    "tags": [
        "binary search",
        "greedy",
        "implementation",
        "math"
    ],
    "desc": {
        "title": "D1. Red-Blue Operations (Easy Version)",
        "statement": "<p><span class=\"tex-font-style-bf\">The only difference between easy and hard versions is the maximum values of $$$n$$$ and $$$q$$$</span>.</p><p>You are given an array, consisting of $$$n$$$ integers. Initially, all elements are red.</p><p>You can apply the following operation to the array multiple times. During the $$$i$$$-th operation, you select an element of the array; then: </p><ul> <li> if the element is red, it increases by $$$i$$$ and becomes blue; </li><li> if the element is blue, it decreases by $$$i$$$ and becomes red. </li></ul><p>The operations are numbered from $$$1$$$, i.\u2009e. during the first operation some element is changed by $$$1$$$ and so on.</p><p>You are asked $$$q$$$ queries of the following form: </p><ul> <li> given an integer $$$k$$$, what can the largest minimum in the array be if you apply <span class=\"tex-font-style-bf\">exactly</span> $$$k$$$ operations to it? </li></ul><p>Note that the operations don't affect the array between queries, all queries are asked on the initial array $$$a$$$.</p>",
        "inputSpecification": "<p>The first line contains two integers $$$n$$$ and $$$q$$$ ($$$1 \\le n, q \\le 1000$$$)\u00a0\u2014 the number of elements in the array and the number of queries.</p><p>The second line contains $$$n$$$ integers $$$a_1, a_2, \\dots, a_n$$$ ($$$1 \\le a_i \\le 10^9$$$).</p><p>The third line contains $$$q$$$ integers $$$k_1, k_2, \\dots, k_q$$$ ($$$1 \\le k_j \\le 10^9$$$).</p>",
        "outputSpecification": "<p>For each query, print a single integer\u00a0\u2014 the largest minimum that the array can have after you apply <span class=\"tex-font-style-bf\">exactly</span> $$$k$$$ operations to it.</p>",
        "samples": [
            {
                "input": "\n4 10\n5 2 8 4\n1 2 3 4 5 6 7 8 9 10\n",
                "output": "\n3 4 5 6 7 8 8 10 8 12\n"
            },
            {
                "input": "\n5 10\n5 2 8 4 4\n1 2 3 4 5 6 7 8 9 10\n",
                "output": "\n3 4 5 6 7 8 9 8 11 8\n"
            },
            {
                "input": "\n2 5\n2 3\n10 6 8 1 3\n",
                "output": "\n10 7 8 3 3\n"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "array operations",
        "element manipulation",
        "integer operations",
        "query processing",
        "dynamic programming",
        "mathematical logic",
        "array transformation",
        "algorithm design",
        "conditional operations",
        "data transformation",
        "integer sequences",
        "number theory",
        "condition testing",
        "array queries",
        "operation efficiency",
        "numerical analysis",
        "iterative problem solving",
        "algebraic transformations",
        "problem solving",
        "integer ranges"
    ]
}