{
    "id": 230325823,
    "contestId": 1832,
    "creationTimeSeconds": 1698563852,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1832,
        "index": "D1",
        "name": "Red-Blue Operations (Easy Version)",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "binary search",
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1832,
        "members": [
            {
                "handle": "dbsic211"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1683902100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 3993600,
    "source": "#include \"bits/stdc++.h\"\r\nusing namespace std;\r\n#define int long long\r\n#define double long double\r\nconst int MAXN = 5e5 + 10;\r\nconst int MOD = 998244353;\r\nmt19937_64 rng((int)std::chrono::steady_clock::now().time_since_epoch().count());\r\nint rnd(int x, int y) {\r\n  int u = uniform_int_distribution<int>(x, y)(rng); return u;\r\n}\r\nint bm(int b, int p) {\r\n  if(p==0) return 1 % MOD;\r\n  int r = bm(b, p >> 1);\r\n  if(p&1) return (((r*r) % MOD) * b) % MOD;\r\n  return (r*r) % MOD;\r\n}\r\nint inv(int b) { \r\n  return bm(b, MOD-2);\r\n}\r\nint fastlog(int x) {\r\n  return (x == 0 ? -1 : 64 - __builtin_clzll(x) - 1);\r\n}\r\nvoid printcase(int i) { cout << \"Case #\" << i << \": \"; }\r\nstatic void run_with_stack_size(void (*func)(void), size_t stsize) {\r\n  char *stack, *send;\r\n  stack = (char *)malloc(stsize);\r\n  send = stack + stsize - 16;\r\n  send = (char *)((uintptr_t)send / 16 * 16);\r\n  asm volatile(\r\n    \"mov %%rsp, (%0)\\n\"\r\n    \"mov %0, %%rsp\\n\"\r\n    :\r\n    : \"r\"(send));\r\n  func();\r\n  asm volatile(\"mov (%0), %%rsp\\n\" : : \"r\"(send));\r\n  free(stack);\r\n}\r\nint bit[MAXN];\r\nvoid add(int x, int v) {\r\n  for(;x<MAXN;x+=x&-x) bit[x] += v;\r\n}\r\nint sum(int x) {\r\n  int s = 0;\r\n  for(;x;x-=x&-x) s += bit[x];\r\n  return s;\r\n}\r\nvoid solve(int tc) {\r\n  int n, q;\r\n  cin >> n >> q;\r\n  int a[n+1];\r\n  for(int i=1; i<=n; i++) cin >> a[i];\r\n  sort(a+1, a+n+1);\r\n  while(q--) {\r\n    int k;\r\n    cin >> k;\r\n    if(n == 1) {\r\n      if(k % 2 == 0) cout << a[1] - k / 2 << '\\n';\r\n      else cout << a[1] + k / 2 + 1 << '\\n';\r\n      continue;\r\n    }\r\n    int lb = 0, rb = 2e9;\r\n    if((k-n) % 2 == 1) rb = a[n];\r\n    while(lb < rb) {\r\n      int mid = (lb + rb + 1) >> 1;\r\n      int d[n+1];\r\n      for(int i=1; i<=n; i++) d[i] = mid - a[i];\r\n      int r[n+1];\r\n      for(int i=1; i<=n; i++) r[i] = max(0ll, k-i+1) - d[i];\r\n      int bruh = 0;\r\n      for(int i=1; i<=n; i++) bruh += r[i];\r\n      bool can = 1;\r\n      for(int i=1; i<=n; i++) can &= (r[i] >= 0);\r\n      if(can && bruh >= (k - n) / 2) lb = mid;\r\n      else rb = mid - 1;\r\n    }\r\n    cout << lb << \" \";\r\n  }\r\n  cout << \"\\n\";\r\n}\r\nvoid uwu() {\r\n  ios::sync_with_stdio(0); cin.tie(0);\r\n  int t = 1; //cin >> t;\r\n  for(int i=1; i<=t; i++) solve(i);\r\n}\r\nint32_t main() {\r\n  #ifdef ONLINE_JUDGE\r\n  uwu();\r\n  #endif\r\n  #ifndef ONLINE_JUDGE\r\n  run_with_stack_size(uwu, 1024 * 1024 * 1024); // run with a 1 GiB stack\r\n  #endif\r\n}\r\n/*\r\ng++ A.cpp -std=c++17 -O2 -o A\r\n./A < input.txt\r\n*/"
}