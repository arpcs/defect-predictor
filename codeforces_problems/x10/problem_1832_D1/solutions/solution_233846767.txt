{
    "id": 233846767,
    "contestId": 1832,
    "creationTimeSeconds": 1700674426,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1832,
        "index": "D1",
        "name": "Red-Blue Operations (Easy Version)",
        "type": "PROGRAMMING",
        "rating": 2100,
        "tags": [
            "binary search",
            "greedy",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 1832,
        "members": [
            {
                "handle": "rana2001shubham"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1683902100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 103,
    "timeConsumedMillis": 140,
    "memoryConsumedBytes": 102400,
    "source": "#include <functional>\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC target(\"avx,avx2,fma\")\n\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int, int> pi;\ntypedef long double ld;\n\n/***************************************************************************************/\n// access keywords\n#define ff first\n#define ss second\n#define pb push_back\n#define inf INT_MAX\n#define INF 1e18\n#define MP make_pair\n\ntemplate <class T> void print(T x) { cerr << x; }\ntemplate <class T, class V> void print(pair<T, V> x) {\n  print(x.ff);\n  cerr << ':';\n  print(x.ss);\n}\ntemplate <class T> void print(vector<T> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T> void print(set<T> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T> void print(set<T, greater<T>> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T> void print(multiset<T> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T> void print(multiset<T, greater<T>> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T> void print(unordered_set<T> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T, class V> void print(vector<pair<T, V>> &a) {\n  cerr << '[' << ' ';\n  for (auto x : a) {\n    print(x.ff);\n    cerr << \":\";\n    print(x.ss);\n    cerr << ' ';\n  }\n  cerr << ']';\n}\ntemplate <class T, class V> void print(map<T, V> &a) {\n  cerr << \"[ \";\n  for (auto i : a) {\n    print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\ntemplate <class T, class V> void print(unordered_map<T, V> &a) {\n  cerr << \"[ \";\n  for (auto i : a) {\n    print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\ntemplate <class T> void print(vector<vector<T>> &a) {\n  cerr << \"[ \";\n  for (auto i : a) {\n    print(i);\n    cerr << \" \";\n  }\n  cerr << \"]\";\n}\nvoid newErrLine() { cerr << endl; }\n// #define MP make_pair\n// //\n// ***********************************************************************************\n#define REP(i, a, b) for (ll i = a; i <= b; i++)\n#define REV_REP(i, a, b) for (ll i = a; i >= b; i--)\n#define inputVectori(v)                                                        \\\n  for (auto &x : v)                                                            \\\n    cin >> x;\n#define printVectori(v)                                                        \\\n  for (auto &x : v)                                                            \\\n    cout << x << \" \";\n#define all(a) a.begin(), a.end()\n\n#define say(x) cout << x << \" \"\n#define sayN(x) cout << x << \"\\n\"\n/*****Remember inbuilt c++ functions*************************/\n\n// next_permutation(), __builtin_popcount()\n/***********************************************************/\nconst ll mod = 1e9 + 7;\n\ninline void newLine() { cerr << \"\\n\"; }\nvoid checkjudge() {\n#ifndef ONLINE_JUDGE\n  freopen(\"input.txt\", \"r\", stdin);\n  freopen(\"output.txt\", \"w\", stdout);\n  freopen(\"error.txt\", \"w\", stderr);\n#endif\n}\n\nvector<ll> factorial;\nll dsq(int a, int b, int c, int d) {\n  return ((a - c) * (a - c) + (b - d) * (b - d));\n}\n\nll binaryExp(ll x, ll y) {\n  ll res = 1;\n  while (y) {\n    if (y & 1)\n      res = (res * x) % mod;\n    y >>= 1;\n    x = (x * x) % mod;\n  }\n  return res;\n}\n\nll nCr(ll n, ll r) {\n  if (n < r)\n    return 0;\n  ll fac1 = factorial[n];\n  ll fac2 = binaryExp(factorial[n - r], mod - 2);\n  ll fac3 = binaryExp(factorial[r], mod - 2);\n  ll ans = (fac1 * fac2) % mod;\n  ans = (ans * fac3) % mod;\n  return ans;\n}\n\nvoid generateFactorial(int n) {\n  factorial.pb(1);\n  REP(i, 1, n) { factorial.pb((factorial.back() * i) % mod); }\n}\n\nll lcm(ll x, ll y) { return (x * y) / __gcd(x, y); }\n\n/*****************************************************************************************************************\n */\n\nvoid preprocess() {}\n\nvoid getFactors(ll n, vector<ll> &factors) {\n\n  for (ll i = 1; i < n; i++) {\n    if (n % i == 0) {\n      factors.pb(i);\n    }\n  }\n}\n\nbool check(ll mid , vector<ll> v , ll k) {\n\n  ll greaterCnt = 0;\n  for (auto &x : v) {\n    if (!k) break;\n    if (x < mid) x += k--;\n    else greaterCnt++;\n  }\n\n\n\n  if (*min_element(all(v)) < mid ) return 0;\n\n\n  ll totalDifference = 0;\n\n  for (auto &x : v) {\n    ll contri =  x - mid;\n    totalDifference += (contri);\n  }\n\n  if (k & 1) return greaterCnt >= 1;\n\n  if (greaterCnt  > 1) return true;\n\n  return 2 * totalDifference >= k;\n\n\n\n}\n\nvoid solve() {\n\n  ll n , q; cin >> n >> q;\n\n  vector<ll> v(n);\n  inputVectori(v);\n\n  vector<ll> queries(q);\n  inputVectori(queries);\n\n  sort(all(v));\n\n\n\n\n  for (auto k : queries) {\n\n    ll l = -1e12 , h = 1e12;\n\n    ll ans =  - 1e12;\n    while (l <= h) {\n      ll mid = (l + h) / 2;\n      bool can = check(mid ,  v , k );\n      if (can) {\n        ans = mid;\n        l = mid + 1;\n\n      } else {\n        h  = mid - 1;\n      }\n    }\n\n    cout << ans << \" \";\n\n  }\n\n\n\n\n}\n\nint32_t main() {\n\n  checkjudge();\n  preprocess();\n\n  int t = 1;\n\n  // cin >> t;\n  for (ll z = 1; z <= t; z++) {\n    // cout << \"Case \" << t << \":\";\n    // if (z == 9)\n    solve();\n    // solve2();\n  }\n  /*************************************************************************************/\n  return 0;\n}\n// 6 , 5 , 4 , 2\n\n// HARE KRISHNA\n/*\n* QUICK MISTAKES\n*1. If you cant solve an equation, just make sure you derive a generalised\n*realtion between those two equations.\n2. Beware of double comparisons, always do them in integers if posisble . Like\navoid taking root\n* */\n"
}