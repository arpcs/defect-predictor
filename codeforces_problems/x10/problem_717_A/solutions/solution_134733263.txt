{
    "id": 134733263,
    "contestId": 717,
    "creationTimeSeconds": 1636444297,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 717,
        "index": "A",
        "name": "Festival Organization",
        "type": "PROGRAMMING",
        "rating": 2900,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 717,
        "members": [
            {
                "handle": "KyuushuKyuuhai"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1473584400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 80,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 1945600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nconst int N = 205,P = 1000000007;\r\nusing ll = long long;\r\nll qpow(ll a,ll b)\r\n{\r\n    ll ret = 1;\r\n    while (b)\r\n    {\r\n        if (b & 1) ret = ret * a % P;\r\n        a = a * a % P;b >>= 1;\r\n    }\r\n    return ret;\r\n}\r\nstruct Complex { ll r,i; };\r\ninline Complex operator+ (const Complex &a,const Complex &b) {return {(a.r + b.r) % P,(a.i + b.i) % P};}\r\ninline Complex operator- (const Complex &a,const Complex &b) {return {(a.r + P - b.r) % P,(a.i + P - b.i) % P};}\r\ninline Complex operator* (const Complex &a,ll b) {return {a.r * b % P,a.i * b % P};}\r\ninline Complex conj(Complex a) {return {a.r,(P - a.i) % P};}\r\ninline Complex operator* (const Complex &a,const Complex &b)\r\n{return {(a.r * b.r + a.i * b.i * 5) % P,(a.r * b.i + a.i * b.r) % P};}\r\ninline Complex operator/ (const Complex &a,ll b) {return a * qpow(b,P - 2);}\r\ninline Complex operator/ (const Complex &a,const Complex &b)\r\n{return a * conj(b) / ((b.r * b.r - 5 * b.i * b.i % P + P) % P);}\r\nComplex qpow(Complex a,ll b)\r\n{\r\n    Complex ret = {1,0};\r\n    while (b)\r\n    {\r\n        if (b & 1) ret = ret * a;\r\n        a = a * a;b >>= 1;\r\n    }\r\n    return ret;\r\n}\r\ninline Complex get(Complex x,ll n) {return (qpow(x,n + 1) - x) / (x - Complex{1,0});}\r\ninline Complex calc(Complex x,ll l,ll r)\r\n{if (x.r == 1 && x.i == 0) return x * (r - l + 1);else return get(x,r) - get(x,l - 1);}\r\nll fac[N],inv[N],S[N][N],C[N][N];\r\nint kk;ll l,r;\r\nll solve()\r\n{\r\n    Complex A = {0,inv[5]},B = {0,P - inv[5]},X = {inv[2],inv[2]},Y = {inv[2],P - inv[2]},ret = {0,0};\r\n    for (int i = 0;i <= kk;i++)\r\n    {\r\n        Complex cur = {0,0};\r\n        for (int j = 0;j <= i;j++)\r\n            cur = (cur + qpow(A,j) * qpow(B,i - j) * calc(qpow(X,j) * qpow(Y,i - j),l,r) * C[i][j]);\r\n        cur = cur * S[kk][i];ret = ret + cur;\r\n    }\r\n    assert(!ret.i);return ret.r * qpow(fac[kk],P - 2) % P;\r\n}\r\nint main ()\r\n{\r\n    ios::sync_with_stdio(false);\r\n    fac[0] = fac[1] = inv[1] = 1;\r\n    for (int i = 2;i < N;i++) fac[i] = fac[i - 1] * i % P,inv[i] = inv[P % i] * (P - P / i) % P;\r\n    C[0][0] = S[0][0] = 1;\r\n    for (int i = 1;i < N;i++)\r\n    {\r\n        C[i][0] = 1;\r\n        for (int j = 1;j <= i;j++) C[i][j] = (C[i - 1][j] + C[i - 1][j - 1]) % P;\r\n    }\r\n    for (int i = 0;i < N - 1;i++)\r\n        for (int j = 1;j <= i + 1;j++) S[i + 1][j] = (S[i][j - 1] - i * S[i][j] % P + P) % P;\r\n    cin >> kk >> l >> r;l += 2;r += 2;cout << solve() << endl;\r\n    return 0;\r\n}"
}