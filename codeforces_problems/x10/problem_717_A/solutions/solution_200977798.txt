{
    "id": 200977798,
    "contestId": 717,
    "creationTimeSeconds": 1680787185,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 717,
        "index": "A",
        "name": "Festival Organization",
        "type": "PROGRAMMING",
        "rating": 2900,
        "tags": [
            "combinatorics",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 717,
        "members": [
            {
                "handle": "chappy1"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1473584400
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 80,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 716800,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int N=305,mod=1e9+7;\r\nstruct Complex{ll x,y;};\r\ninline ll qpow(ll a,ll b){\r\n\tll ans=1;\r\n\tfor(;b;b>>=1,a=a*a%mod)if(b&1)ans=ans*a%mod;\r\n\treturn ans;\r\n}\r\nconst Complex X1={qpow(2,mod-2),qpow(2,mod-2)},X2={qpow(2,mod-2),mod-qpow(2,mod-2)};\r\nint k;ll l,r,s[N][N],fac[N],inv[N],Inv[N];Complex ans;\r\ninline Complex operator * (Complex x,ll y){return{x.x*y%mod,x.y*y%mod};}\r\ninline Complex operator + (Complex x,Complex y){return{(x.x+y.x)%mod,(x.y+y.y)%mod};}\r\ninline Complex operator - (Complex x,Complex y){return{(x.x-y.x+mod)%mod,(x.y-y.y+mod)%mod};}\r\ninline Complex operator * (Complex x,Complex y){return{(x.x*y.x+5*x.y*y.y)%mod,(x.x*y.y+x.y*y.x)%mod};}\r\ninline Complex operator / (Complex x,Complex y){\r\n\tComplex z=y;if(z.y!=0)z.y=mod-z.y;\r\n\treturn x*z*qpow((y.x*y.x%mod-5*y.y*y.y%mod+mod)%mod,mod-2);\r\n}\r\ninline Complex cpow(Complex a,ll b){\r\n\tComplex ans={1,0};\r\n\tfor(;b;b>>=1,a=a*a)if(b&1)ans=ans*a;\r\n\treturn ans;\r\n}\r\ninline void precalc(int n){\r\n\tfac[0]=inv[0]=Inv[0]=fac[1]=inv[1]=Inv[1]=1;\r\n\tfor(int i=2;i<=n;++i)\r\n\t\tfac[i]=fac[i-1]*i%mod,\r\n\t\tInv[i]=(mod-mod/i)*Inv[mod%i]%mod,\r\n\t\tinv[i]=inv[i-1]*Inv[i]%mod;\r\n}\r\ninline ll C(int n,int m){return fac[n]*inv[m]%mod*inv[n-m]%mod;}\r\ninline Complex SF(ll n,int k){\r\n\tComplex res={0,0};\r\n\tfor(int i=0;i<=k;++i){\r\n\t\tComplex co=cpow(X1,i)*cpow(X2,k-i),oc;\r\n\t\tif(co.x==1&&co.y==0)oc=co*n*C(k,i);\r\n\t\telse oc=co*(cpow(co,n)-(Complex){1,0})/(co-(Complex){1,0})*C(k,i);\r\n\t\tif((k-i)&1)res=res-oc;else res=res+oc;\r\n\t}\r\n\treturn res;\r\n}\r\nint main(){\r\n\tprecalc(N-1);\r\n\tscanf(\"%d%lld%lld\",&k,&l,&r),l+=2,r+=2,s[0][0]=1;\r\n\tfor(int i=1;i<=k;++i)\r\n\t\tfor(int j=1;j<=i;++j)\r\n\t\t\ts[i][j]=(s[i-1][j-1]+s[i-1][j]*(i-1))%mod;\r\n\tfor(int i=0;i<=k;++i){\r\n\t\tComplex F=(SF(r,i)-SF(l-1,i))*s[k][i]*cpow({0,qpow(5,mod-2)},i);\r\n\t\tif((k-i)&1)ans=ans-F;else ans=ans+F;\r\n\t}\r\n\treturn printf(\"%lld\\n\",ans.x*inv[k]%mod),0;\r\n}"
}