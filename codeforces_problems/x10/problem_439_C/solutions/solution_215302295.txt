{
    "id": 215302295,
    "contestId": 439,
    "creationTimeSeconds": 1690175183,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 439,
        "index": "C",
        "name": "Devu and Partitioning of the Array",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 439,
        "members": [
            {
                "handle": "lO_ol"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1401895800
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 512000,
    "source": "#ifdef Home\r\n#define _GLIBCXX_DEBUG\r\n#endif // Home\r\n\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n\r\nmain() {\r\n#ifdef Home\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif // Home\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0);\r\n\r\n    int n, k, cnt_odd, cnt_even;\r\n    cin >> n >> k >> cnt_even;\r\n    cnt_odd = k - cnt_even;\r\n    queue < int > odd, even;\r\n    for(int tmp; n --> 0;) {\r\n        cin >> tmp;\r\n        tmp&1 ? odd.push(tmp) : even.push(tmp);\r\n    }\r\n    if(odd.size() < cnt_odd || (odd.size() - cnt_odd)&1 || even.size() + (odd.size() - cnt_odd) / 2 < cnt_even) {\r\n        cout << \"NO\\n\";\r\n        return 0;\r\n    }\r\n    cout << \"YES\\n\";\r\n    for(; cnt_odd > 1; -- cnt_odd) {\r\n        cout << \"1 \" << odd.front() << '\\n';\r\n        odd.pop();\r\n    }\r\n    if(!cnt_even) {\r\n        cout << odd.size() + even.size() << ' ';\r\n        for(; !odd.empty(); cout << odd.front() << ' ', odd.pop());\r\n        for(; !even.empty(); cout << even.front() << ' ', even.pop());\r\n        return 0;\r\n    }\r\n    if(cnt_odd) {\r\n        cout << \"1 \" << odd.front() << '\\n';\r\n        odd.pop();\r\n        -- cnt_odd;\r\n    }\r\n    for(; !odd.empty() && cnt_even > 1; odd.pop()) {\r\n        cout << \"2 \" << odd.front() << ' ';\r\n        odd.pop();\r\n        cout << odd.front() << '\\n';\r\n        -- cnt_even;\r\n    }\r\n    for(; cnt_even > 1; -- cnt_even) {\r\n        cout << \"1 \" << even.front() << '\\n';\r\n        even.pop();\r\n    }\r\n    if(cnt_even || cnt_odd) {\r\n        cout << odd.size() + even.size() << ' ';\r\n        for(; !odd.empty(); cout << odd.front() << ' ', odd.pop());\r\n        for(; !even.empty(); cout << even.front() << ' ', even.pop());\r\n    }\r\n}\r\n"
}