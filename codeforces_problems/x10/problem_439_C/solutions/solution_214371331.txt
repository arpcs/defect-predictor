{
    "id": 214371331,
    "contestId": 439,
    "creationTimeSeconds": 1689692698,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 439,
        "index": "C",
        "name": "Devu and Partitioning of the Array",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 439,
        "members": [
            {
                "handle": "shmax_"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1401895800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 75,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 7782400,
    "source": "/*\r\n * powered by ANDRIY POPYK\r\n * in honor of DASHA LOBAS and SEGMENT DECOMPOSITION and N^(log(N))\r\n*/\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp>\r\n\r\n//#pragma GCC optimize(\"O3\")\r\n//#pragma GCC target(\"avx,avx2,fma\")\r\n//#pragma GCC optimization (\"unroll-loops\")\r\n//#pragma GCC target(\"avx,avx2,sse,sse2,sse3,sse4,popcnt\")\r\n\r\nusing namespace std;\r\nusing namespace __gnu_pbds;\r\n#define int long long\r\n#define float long double\r\n#define elif else if\r\n#define endl \"\\n\"\r\n#define mod 1000000007\r\n#define pi acos(-1)\r\n#define eps 0.000000001\r\n#define inf 1000000000000\r\n#define FIXED(a) cout << fixed << setprecision(a)\r\n#define all(x) x.begin(), x.end()\r\n#define rall(x) x.rbegin(), x.rend()\r\n#define time_init auto start = std::chrono::high_resolution_clock::now()\r\n#define time_report auto end = std::chrono::high_resolution_clock::now(); std::cout << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << \" ms\" << endl\r\n#define debug(x) { cerr << #x << \" = \" << x << endl; }\r\n#define len(x) (int)x.size()\r\n#define sqr(x) ((x) * (x))\r\n#define cube(x) ((x) * (x) * (x))\r\n#define bit(x, i) (((x) >> (i)) & 1)\r\n#define set_bit(x, i) ((x) | (1LL << (i)))\r\n#define clear_bit(x, i) ((x) & (~(1LL << (i))))\r\n#define toggle_bit(x, i) ((x) ^ (1LL << (i)))\r\n#define low_bit(x) ((x) & (-(x)))\r\n#define count_bit(x) __builtin_popcountll(x)\r\n#define srt(x) sort(all(x))\r\n#define rsrt(x) sort(rall(x))\r\n\r\ntemplate<typename T> using min_heap = priority_queue<T, vector<T>, greater<T>>;\r\ntemplate<typename T> using max_heap = priority_queue<T, vector<T>, less<T>>;\r\ntemplate<typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<typename T> using ordered_multiset = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\r\ntemplate<typename T> using matrix = vector<vector<T>>;\r\ntemplate<typename T> using graph = vector<vector<T>>;\r\n\r\ntemplate<typename T>\r\nvector<T> vect(int n, T val) {\r\n    return vector<T>(n, val);\r\n}\r\n\r\ntemplate<typename T>\r\nvector<vector<T>> vect(int n, int m, T val) {\r\n    return vector<vector<T>>(n, vector<T>(m, val));\r\n}\r\n\r\ntemplate<typename T>\r\nvector<vector<vector<T>>> vect(int n, int m, int k, T val) {\r\n    return vector<vector<vector<T>>>(n, vector<vector<T>>(m, vector<T>(k, val)));\r\n}\r\n\r\ntemplate<typename T>\r\nvector<vector<vector<vector<T>>>> vect(int n, int m, int k, int l, T val) {\r\n    return vector<vector<vector<vector<T>>>>(n, vector<vector<vector<T>>>(m, vector<vector<T>>(k, vector<T>(l, val))));\r\n}\r\n\r\n\r\ntemplate<typename T>\r\nmatrix<T> new_matrix(int n, int m, T val) {\r\n    return matrix<T>(n, vector<T>(m, val));\r\n}\r\n\r\ntemplate<typename T>\r\ngraph<T> new_graph(int n) {\r\n    return graph<T>(n);\r\n}\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(nullptr);\r\n    cout.tie(nullptr);\r\n    int n, k, p;\r\n    cin >> n >> k >> p;\r\n    vector<int> chet;\r\n    vector<int> nechet;\r\n    int sum = 0;\r\n    for (int i = 0; i < n; ++i) {\r\n        int x;\r\n        cin >> x;\r\n        sum += x;\r\n        if (x % 2 == 0) {\r\n            chet.push_back(x);\r\n        } else {\r\n            nechet.push_back(x);\r\n        }\r\n    }\r\n    if ((k - p) % 2 != sum % 2) {\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n    if (len(nechet) < k - p) {\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n\r\n    vector<vector<int>> ans;\r\n    for (int i = 0; i < k - p; i++) {\r\n        ans.push_back({nechet.back()});\r\n        nechet.pop_back();\r\n    }\r\n    if (p == 0) {\r\n        while (len(nechet) > 0) {\r\n            ans.back().push_back(nechet.back());\r\n            nechet.pop_back();\r\n        }\r\n        while (len(chet) > 0) {\r\n            ans.back().push_back(chet.back());\r\n            chet.pop_back();\r\n        }\r\n        cout << \"YES\" << endl;\r\n        for (auto &i : ans) {\r\n            cout << len(i) << \" \";\r\n            for (auto &j : i) {\r\n                cout << j << \" \";\r\n            }\r\n            cout << endl;\r\n        }\r\n        return 0;\r\n    }\r\n    int need = p;\r\n    while (len(nechet) > 1) {\r\n        if (need == 1)\r\n            break;\r\n        int first = nechet.back();\r\n        nechet.pop_back();\r\n        int second = nechet.back();\r\n        nechet.pop_back();\r\n        ans.push_back({first, second});\r\n        need--;\r\n    }\r\n\r\n    while (need != 1) {\r\n        if (len(chet) == 0) {\r\n            cout << \"NO\" << endl;\r\n            return 0;\r\n        }\r\n        ans.push_back({chet.back()});\r\n        chet.pop_back();\r\n        need--;\r\n    }\r\n    vector<int> last;\r\n    while (len(nechet) > 0) {\r\n        last.push_back(nechet.back());\r\n        nechet.pop_back();\r\n    }\r\n    while (len(chet) > 0) {\r\n        last.push_back(chet.back());\r\n        chet.pop_back();\r\n    }\r\n    if (len(last) == 0) {\r\n        cout << \"NO\" << endl;\r\n        return 0;\r\n    }\r\n    ans.push_back(last);\r\n    cout << \"YES\" << endl;\r\n    for (auto i: ans) {\r\n        cout << len(i) << \" \";\r\n        for (auto j: i) {\r\n            cout << j << \" \";\r\n        }\r\n        cout << endl;\r\n    }\r\n\r\n}"
}