{
    "id": 223765731,
    "contestId": 439,
    "creationTimeSeconds": 1694976802,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 439,
        "index": "C",
        "name": "Devu and Partitioning of the Array",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 439,
        "members": [
            {
                "handle": "huukietphong"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1401895800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 57,
    "timeConsumedMillis": 108,
    "memoryConsumedBytes": 2457600,
    "source": "#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2\")\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define mydick long long\r\n#define inp \"INP.INPUT\"\r\n#define out \"OUT.OUTPUT\"\r\n#define int long long\r\n#define ll long long \r\n#define db long double\r\n#define pb push_back\r\n#define pii pair<int,int>\r\n#define fi first\r\n#define se second\r\n#define fill(a,b) memset(a,b,sizeof(a))\r\nint n,k,p,a[100005],odd[100005],even[100005];\r\nvoid execute(){\r\n\tcin >> n >> k >> p;\r\n\tint cnt_odd = 0 ,cnt_even = 0;\r\n\tfor(int i = 1;i <= n;i++){\r\n\t\tcin >> a[i];\r\n\t\tif(a[i] % 2) odd[++cnt_odd] = a[i];\r\n\t\telse even[++cnt_even] = a[i];\r\n\t}\r\n\tint odd_sum = k-p;\r\n\tif(cnt_odd < odd_sum){\r\n\t\tcout << \"NO\";\r\n\t\treturn;\r\n\t}\r\n\tif((cnt_odd - odd_sum) % 2){\r\n\t\tcout << \"NO\";\r\n\t\treturn;\r\n\t}\r\n\tif(cnt_even+(cnt_odd - odd_sum)/2 < p){\r\n\t\tcout << \"NO\";\r\n\t\treturn;\r\n\t}\r\n\tif(p == 0){\r\n\t\tif(cnt_even > 0){\r\n\t\t\tcout << \"NO\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tcout << \"YES\\n\";\r\n\t\tfor(int i = 1;i < odd_sum;i++) cout <<\"1 \"<<odd[i] << \"\\n\";\r\n\t\tcout << cnt_odd - odd_sum+1 << \" \";\r\n\t\tfor(int i = cnt_odd-odd_sum;i <= cnt_odd;i++) cout << odd[i] << \" \";\r\n\t}\r\n\tcout << \"YES \\n\";\r\n\tint cnt = 0,cur_len=0,r;\r\n\tif(cnt_even >= p && p != 0){\t\r\n\t    int m = m=(cnt_even)/p;\r\n\t    for(int i = 1;i <= m*(p-1);i++){\r\n\t\t    if(cur_len == 0) cout <<m << \" \";\r\n\t\t    cout<<even[i] << \" \";\r\n\t       \tcur_len++;\r\n\t\t    if(cur_len == m){\r\n\t\t\tcur_len = 0;\r\n\t\t\tcout << \"\\n\";\r\n\t\t\t}\r\n\t\t}\r\n\t\tr = cnt_even-m*(p-1);\r\n\t\tcout << r + (cnt_odd-odd_sum) << \" \";\r\n\t    for(int i = cnt_even-r+1;i <= cnt_even;i++) cout << even[i] << \" \";\r\n\t    for(int i = 1;i <= (cnt_odd-odd_sum);i++) cout << odd[i] << \" \";\r\n\t    cout << \"\\n\";\r\n\t    for(int i = (cnt_odd-odd_sum+1);i <= cnt_odd;i++){\r\n\t\t\tcout << \"1 \" << odd[i] << \"\\n\";\r\n\t    }\r\n\t    return;\r\n    } \r\n\tfor(int i = 1;i <= odd_sum;i++) cout << \"1 \" << odd[i] << \"\\n\";\r\n\tfor(int i = 1;i <= cnt_even;i++) cout << \"1 \" << even[i] << \"\\n\";\r\n\tr = cnt_odd - odd_sum;\r\n\tp-=cnt_even;   \r\n\tfor(int i = 1;i <= 2*(p-1);i+=2){\r\n\t\tcout << \"2 \" << odd[i+odd_sum] << \" \" << odd[i+1+odd_sum] << \"\\n\";\r\n\t}\r\n\tr-= 2*(p-1);\r\n\tif(r == 0) return;\r\n\tcout << r << \" \";\r\n\tfor(int i = cnt_odd-r+1;i <= cnt_odd;i++) cout << odd[i] << \" \";\r\n}\r\nsigned main() {\r\n\t#ifdef FILE\r\n    freopen(inp, \"r\", stdin);\r\n    freopen(out, \"w\", stdout);\r\n    #endif\t\r\n    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);\r\n    int t = 1;\r\n    //cin >> t;\r\n    while(t--){\r\n    \texecute();\t\r\n    \tcout << \"\\n\";\t\r\n\t}\r\n}"
}