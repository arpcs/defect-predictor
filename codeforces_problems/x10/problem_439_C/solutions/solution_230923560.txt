{
    "id": 230923560,
    "contestId": 439,
    "creationTimeSeconds": 1698906315,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 439,
        "index": "C",
        "name": "Devu and Partitioning of the Array",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1700,
        "tags": [
            "brute force",
            "constructive algorithms",
            "implementation",
            "number theory"
        ]
    },
    "author": {
        "contestId": 439,
        "members": [
            {
                "handle": "LLM2k23"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1401895800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <algorithm>\r\n\r\nint main() {\r\n    int n, k, p;\r\n    std::cin >> n >> k >> p;\r\n\r\n    std::vector<int> a(n);\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        std::cin >> a[i];\r\n    }\r\n\r\n    std::vector<int> odd, even;\r\n\r\n    for (int i = 0; i < n; i++) {\r\n        if (a[i] % 2 == 0) {\r\n            even.push_back(a[i]);\r\n        } else {\r\n            odd.push_back(a[i]);\r\n        }\r\n    }\r\n\r\n    if (odd.size() < k - p) {\r\n        std::cout << \"NO\" << std::endl;\r\n    } else {\r\n        std::cout << \"YES\" << std::endl;\r\n\r\n        for (int i = 0; i < k - p; i++) {\r\n            std::cout << \"1 \" << odd.back() << std::endl;\r\n            odd.pop_back();\r\n        }\r\n\r\n        for (int i = 0; i < p - 1; i++) {\r\n            std::cout << \"1 \" << even.back() << std::endl;\r\n            even.pop_back();\r\n        }\r\n\r\n        int remaining_parts = k - p + 1;\r\n\r\n        while (!odd.empty() && remaining_parts > 0) {\r\n            int part_size = std::min(remaining_parts, int(odd.size()));\r\n            std::cout << part_size << \" \";\r\n            for (int j = 0; j < part_size; j++) {\r\n                std::cout << odd.back() << \" \";\r\n                odd.pop_back();\r\n            }\r\n            std::cout << std::endl;\r\n            remaining_parts--;\r\n        }\r\n\r\n        while (!even.empty()) {\r\n            std::cout << \"1 \" << even.back() << std::endl;\r\n            even.pop_back();\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
}