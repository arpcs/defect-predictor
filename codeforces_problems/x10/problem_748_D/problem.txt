{
    "contestId": 748,
    "index": "D",
    "name": "Santa Claus and a Palindrome",
    "type": "PROGRAMMING",
    "points": 2000.0,
    "rating": 2100,
    "tags": [
        "constructive algorithms",
        "data structures",
        "greedy"
    ],
    "desc": {
        "title": "D. Santa Claus and a Palindrome",
        "statement": "<p>Santa Claus likes palindromes very much. There was his birthday recently. <span class=\"tex-span\"><i>k</i></span> of his friends came to him to congratulate him, and each of them presented to him a string <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> having the same length <span class=\"tex-span\"><i>n</i></span>. We denote the beauty of the <span class=\"tex-span\"><i>i</i></span>-th string by <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>. It can happen that <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> is negative\u00a0\u2014 that means that Santa doesn't find this string beautiful at all.</p><p>Santa Claus is crazy about palindromes. He is thinking about the following question: what is the maximum possible total beauty of a palindrome which can be obtained by concatenating some (possibly all) of the strings he has? Each present can be used at most once. Note that all strings have <span class=\"tex-font-style-bf\">the same length</span> <span class=\"tex-span\"><i>n</i></span>.</p><p>Recall that a palindrome is a string that doesn't change after one reverses it.</p><p>Since the empty string is a palindrome too, the answer can't be negative. Even if all <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>'s are negative, Santa can obtain the empty string.</p>",
        "inputSpecification": "<p>The first line contains two positive integers <span class=\"tex-span\"><i>k</i></span> and <span class=\"tex-span\"><i>n</i></span> divided by space and denoting the number of Santa friends and the length of every string they've presented, respectively (<span class=\"tex-span\">1\u2009\u2264\u2009<i>k</i>,\u2009<i>n</i>\u2009\u2264\u2009100\u2009000</span>; <span class=\"tex-span\"><i>n</i>\u00b7<i>k</i>\u00a0\u2009\u2264\u2009100\u2009000</span>).</p><p><span class=\"tex-span\"><i>k</i></span> lines follow. The <span class=\"tex-span\"><i>i</i></span>-th of them contains the string <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> and its beauty <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> (<span class=\"tex-span\">\u2009-\u200910\u2009000\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u200910\u2009000</span>). The string consists of <span class=\"tex-span\"><i>n</i></span> lowercase English letters, and its beauty is integer. Some of strings may coincide. Also, equal strings can have different beauties.</p>",
        "outputSpecification": "<p>In the only line print the required maximum possible beauty.</p>",
        "samples": [
            {
                "input": "7 3<br/>abb 2<br/>aaa -3<br/>bba -1<br/>zyz -4<br/>abb 5<br/>aaa 7<br/>xyx 4<br/>",
                "output": "12<br/>"
            },
            {
                "input": "3 1<br/>a 1<br/>a 2<br/>a 3<br/>",
                "output": "6<br/>"
            },
            {
                "input": "2 5<br/>abcde 10000<br/>abcde 10000<br/>",
                "output": "0<br/>"
            }
        ],
        "note": "<p>In the first example Santa can obtain <span class=\"tex-font-style-tt\">abbaaaxyxaaabba</span> by concatenating strings <span class=\"tex-span\">5</span>, <span class=\"tex-span\">2</span>, <span class=\"tex-span\">7</span>, <span class=\"tex-span\">6</span> and <span class=\"tex-span\">3</span> (in this order).</p>"
    }
}