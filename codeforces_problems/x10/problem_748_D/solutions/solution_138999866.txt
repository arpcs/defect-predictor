{
    "id": 138999866,
    "contestId": 748,
    "creationTimeSeconds": 1639409368,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 748,
        "index": "D",
        "name": "Santa Claus and a Palindrome",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ]
    },
    "author": {
        "contestId": 748,
        "members": [
            {
                "handle": "BrokenBlade"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1482656700
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 36454400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define FOR(i, a, b) for(int i = a; i <= b; i++)\r\n#define REP(i, a, b) for(int i = a; i >= b; i--)\r\n#define x first\r\n#define y second\r\n\r\ntypedef long long ll;\r\ntypedef pair <int, int> ii;\r\n\r\nconst int N = 2e5 + 5;\r\nconst int inf = 2e9 + 5;\r\nconst int mode = 1e9 + 7;\r\n\r\nvector <int> g[N];\r\n\r\nint n, m, root, node = 0;\r\nstring s[N];\r\nint a[N], mid[N], f[N], t[N];\r\n\r\nint child[N][30];\r\nint cnt[N];\r\n\r\nint addnode() {return ++node;}\r\nvoid add(string s, int val) {\r\n    int r = root;\r\n    for(auto c : s) {\r\n        int k = c - 'a';\r\n        if(child[r][k] == 0)\r\n            child[r][k] = addnode();\r\n        r = child[r][k];\r\n    }\r\n    g[r].push_back(val);\r\n}   \r\n\r\nint get(string s) {\r\n    int r = root;\r\n    for(auto c : s) {\r\n        int k = c - 'a';\r\n        if(child[r][k] == 0) return -1;\r\n        r = child[r][k];\r\n    }\r\n    return r;\r\n}\r\n \r\nvoid ProblemSolving() {\r\n    cin >> n >> m;\r\n    FOR(i, 1, n) cin >> s[i] >> a[i];\r\n    root = addnode();\r\n    FOR(i, 1, n) add(s[i], a[i]);\r\n    sort(s + 1, s + n + 1);\r\n    n = unique(s + 1, s + n + 1) - s - 1;\r\n    FOR(i, 1, n) {\r\n        int x = get(s[i]);\r\n        sort(g[x].begin(), g[x].end());\r\n    }\r\n    int lr = 0;\r\n    FOR(i, 1, n) {\r\n        string rev = s[i];\r\n        reverse(rev.begin(), rev.end());\r\n        if(get(rev) == -1) continue;\r\n        if(s[i] != rev) {\r\n            int u = get(s[i]), v = get(rev);\r\n            while(!g[u].empty() && !g[v].empty()) {\r\n                int x = g[u].back(); g[u].pop_back();\r\n                int y = g[v].back(); g[v].pop_back();\r\n                lr = max(lr, lr + x + y);\r\n            }\r\n        }\r\n    }\r\n    FOR(i, 1, n) {\r\n        string rev = s[i];\r\n        reverse(rev.begin(), rev.end());\r\n        if(s[i] == rev) {\r\n            int u = get(s[i]);\r\n            while(g[u].size() > 1) {\r\n                int x = g[u].back(); g[u].pop_back();\r\n                int y = g[u].back(); g[u].pop_back();\r\n                t[i] = max(t[i], t[i] + x + y);\r\n                if(x + y >= 0) \r\n                    mid[i] = max(mid[i], -y);\r\n            }\r\n            if(g[u].size()) mid[i] = max(mid[i], g[u].back());\r\n        }\r\n        f[i] = f[i - 1] + t[i];\r\n    }\r\n    int ans = 0, h = 0;\r\n    REP(i, n, 1) {\r\n        string rev = s[i];\r\n        reverse(rev.begin(), rev.end());\r\n        ans = max(ans, f[i] + mid[i] + h + lr);\r\n        h += t[i];\r\n    }\r\n    cout << ans << '\\n';\r\n}\r\n\r\nint main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n\r\n    //freopen(\"a.inp\", \"r\", stdin);\r\n    ProblemSolving();\r\n}"
}