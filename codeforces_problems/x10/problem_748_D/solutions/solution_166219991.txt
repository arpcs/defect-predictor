{
    "id": 166219991,
    "contestId": 748,
    "creationTimeSeconds": 1659180821,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 748,
        "index": "D",
        "name": "Santa Claus and a Palindrome",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ]
    },
    "author": {
        "contestId": 748,
        "members": [
            {
                "handle": "vjudge3"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1482656700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "COMPILATION_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\n#include <cstring>\n#include <string>\n#include <queue>\n#include <vector>\n#include <map>\n#include <algorithm>\n#define N 100010\n#define LL long long \n#define inf 0x3f3f3f3f\nusing namespace std ;\n map<string, int> mapp;\n vector<int> v1[N],v2[N];\n bool solve( string str) { //Judge whether it is a palindrome string for ( int i = 0 , j = str .length()- 1 ; i <j; i++,\n        j--) {\n    if (str[i] != str[j])\n             return false ;\n    }\n    return true ;\n}\nbool cmp( int a, int b) {\n     return a> b;\n}\nint main() {\n     cin .sync_with_stdio( false );\n     int n, m;\n     string str;\n     int num, ans;\n     while ( cin >> n >> m) {\n        ans = 0 ;\n         for ( int i = 0 ; i <n; i++) {\n             cin >> str >> num;\n             if (mapp.find(str) == mapp.end()) {\n                mapp[str] = ans;\n                if (solve(str)) {\n                    v1[ans++].push_back(num);\n                }\n                else {\n                    v2[ans++].push_back(num);\n                }\n            }\n            else {\n                 if (solve(str)) {\n                    v1[mapp[str]].push_back(num);\n                }\n                else {\n                    v2[mapp[str]].push_back(num);\n                }\n            }\n        }\n        for ( int i = 0 ; i <ans; i++) {\n             if (v1[i].size()> 1 ) {\n                sort(v1[i].begin(), v1[i].end(), cmp);\n            }\n            if (v2[i].size()> 1 ) {\n                sort(v2[i].begin(), v2[i].end(), cmp);\n            }\n        }\n        int cnt = 0 ;\n         int size;\n        num = 0 ;\n         for ( map<string, int> ::iterator it = mapp.begin(); it != mapp.end(); it++) {\n            str = it->first;\n            int a = mapp[str];\n            reverse(str.begin(), str.end()); //becomes a symmetric string of str \n            if (mapp.find(str) != mapp.end()) {\n                 int b = mapp[str];\n                 if ( a == b) { //is the for ( int i = 1 ; i <v1[a].size(); i += 2 ) {\n                         int kk = v1[a][i] + v1[a ][i- 1 ];\n                         if (kk <= 0 ) {\n                    \n                            num = max(num, v1[a][i- 1 ]);\n                             break ;\n                        } //If it is negative this time, compare the value of the previous string with the value of the best center string \n                        if (v1[a][i] < 0 ) { //If this time the value of the next string If it is a negative number, take the value of the next string and compare it with the value of the best center string (because it is the largest, so if the best center string can also be the originally added string, don\u2019t do both sides but do the center String, so add the value lost by his two symmetrical strings)\n                            num = max(num, -v1[a][i]);\n                        }\n                        cnt += kk;\n                    }\n                    if (v1[a].size()% 2 ) {\n                        num = max(num, v1[a][v1[a].size()- 1 ]);\n                    } //If there is remaining, you can make the center string\n                    v1[a].clear();\n                }\n                else {\n                     for ( int i = 0 ; i <v2[a].size() && i <v2[b].size(); i++) {\n                         int kk = v2[a][i] + v2[b][ i];\n                         if (kk <= 0 ) { //If the value is negative, discard it\n                            break ;\n                        }\n                        cnt += kk;\n                    }\n                    v2[a].clear();\n                    v2[b].clear();\n                }\n            }\n        }\n        cout << cnt + num << endl;\n    }\n    return 0 ;\n}\n \t\t\t  \t \t \t  \t \t    \t  \t\t\t\t \t \t"
}