{
    "id": 145053425,
    "contestId": 748,
    "creationTimeSeconds": 1643904253,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 748,
        "index": "D",
        "name": "Santa Claus and a Palindrome",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "data structures",
            "greedy"
        ]
    },
    "author": {
        "contestId": 748,
        "members": [
            {
                "handle": "somolibu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1482656700
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 62,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 12902400,
    "source": "#define _CRT_SECURE_NO_WARNINGS\r\n\r\n#include <bits/stdc++.h>\r\n\r\n#define TASK \"\"\r\n\r\nusing namespace std;\r\n\r\ntypedef long long ll;\r\ntypedef long double ld;\r\n#define all(x) (x).begin(),(x).end()\r\n#define sz(x) ((long long)(x).size())\r\n#define elif else if\r\nconst ld eps = 1e-9;\r\nconst ll inf = numeric_limits<ll>::max() / 2 - 1;\r\nconst ll mod = 1000000007;\r\nconst ll maxn = 223456;\r\n\r\nvector<pair<string, ll>> mas;\r\nmap<string, multiset<ll>> mp;\r\n\r\nbool ispal(string s) {\r\n    for (int i = 0; i < s.size(); ++i) {\r\n        if (s[i] != s[s.size() - 1 - i]) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\ninline int run() {\r\n    ll k, n;\r\n    cin >> k >> n;\r\n    mas.resize(k);\r\n    for (int i = 0; i < k; ++i) {\r\n        string s;\r\n        ll t;\r\n        cin >> s >> t;\r\n        mas.push_back(make_pair(s, t));\r\n        mp[s].insert(t);\r\n    }\r\n    ll ans = 0;\r\n    ll minbadpal = 0;\r\n    ll mybestalonemid = 0;\r\n    for (auto &i : mp) {\r\n        if (ispal(i.first)) {\r\n            while (i.second.size() >= 2 && (*i.second.rbegin() + *++i.second.rbegin() > 0)) {\r\n                ans += *i.second.rbegin() + *++i.second.rbegin();\r\n                minbadpal = min(minbadpal, *++i.second.rbegin());\r\n                i.second.erase(--i.second.end());\r\n                i.second.erase(--i.second.end());\r\n            }\r\n            if (!i.second.empty()) {\r\n                mybestalonemid = max(mybestalonemid, *i.second.rbegin());\r\n            }\r\n        } else {\r\n            string s = i.first;\r\n            reverse(s.begin(), s.end());\r\n            while (!i.second.empty() && !mp[s].empty() && *i.second.rbegin() + *mp[s].rbegin() > 0) {\r\n                ans += *i.second.rbegin() + *mp[s].rbegin();\r\n                i.second.erase(i.second.find(*i.second.rbegin()));\r\n                mp[s].erase(mp[s].find(*mp[s].rbegin()));\r\n            }\r\n        }\r\n    }\r\n    cout << max(ans + mybestalonemid, ans - minbadpal);\r\n    return 0;\r\n}\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n#ifdef LOCAL\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n#else\r\n    if (strlen(TASK) > 0) {\r\n        freopen(TASK\".in\", \"r\", stdin);\r\n        freopen(TASK\".out\", \"w\", stdout);\r\n    }\r\n#endif\r\n    run();\r\n    return 0;\r\n}"
}