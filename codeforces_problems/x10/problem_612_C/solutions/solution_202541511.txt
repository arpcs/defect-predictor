{
    "id": 202541511,
    "contestId": 612,
    "creationTimeSeconds": 1681767316,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 612,
        "index": "C",
        "name": "Replace To Make Regular Bracket Sequence",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "data structures",
            "expression parsing",
            "math"
        ]
    },
    "author": {
        "contestId": 612,
        "members": [
            {
                "handle": "abd-alrzaq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1451055600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 52,
    "timeConsumedMillis": 170,
    "memoryConsumedBytes": 3993600,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nbool right(char first){\r\nreturn first=='[' || first=='{' ||first=='(' || first=='<';}\r\nbool l(char top){\r\n  return top!=']'||top!='}'||top!='>' ||top!=')';}\r\nint main()\r\n{\r\n    string n;\r\n    cin>>n;\r\n    int result=0;\r\n    stack<char>sequence;\r\n    sequence.push(n[0]);\r\n    for(int i=1;i<n.size();i++){\r\nchar y=n[i];\r\n///special case\r\n    if(sequence.empty()){\r\n    sequence.push(y);}\r\n           else if(!sequence.empty() && !right(sequence.top())){\r\n                    break;\r\n                    }\r\n            else if(right(y)){\r\n        sequence.push(y);\r\n    }\r\n            else {\r\n                if(((y==']'&& sequence.top()!='[' &&y!=sequence.top()) || (y=='}' &&sequence.top()!='{' &&y!=sequence.top()) ||(y=='>' &&sequence.top()!='<' &&y!=sequence.top() )||(y==')' &&sequence.top()!='(' &&y!=sequence.top()) ) ){\r\n        sequence.pop();\r\n        result++;\r\n    }\r\n            else if((y==']'&& sequence.top()=='[') || (y=='}' &&sequence.top()=='{') ||(y=='>' &&sequence.top()=='<' )||(y==')' &&sequence.top()=='(')){\r\nsequence.pop();\r\n}\r\n    }\r\n    }\r\nif(sequence.empty())\r\ncout<<result;\r\nelse{\r\n    cout<<\"Impossible\";\r\n}\r\n}\r\n"
}