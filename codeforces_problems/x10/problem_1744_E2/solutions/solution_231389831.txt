{
    "id": 231389831,
    "contestId": 1744,
    "creationTimeSeconds": 1699129925,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "NourEldinAhmed"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 1,
    "timeConsumedMillis": 31,
    "memoryConsumedBytes": 11673600,
    "source": "//\r\n// Free Palestine\r\n\r\n#include <bits/stdc++.h>\r\n#define all(x) (x).begin(), (x).end()\r\n#define rall(x) (x).rbegin(), (x).rend()\r\n#define endl '\\n'\r\n#define yes cout << \"YES\\n\";\r\n#define no cout << \"NO\\n\";\r\n#define fr(n) for(ll i = 0 ; i < n ; i++)\r\n#define frj(n) for(ll j = 0 ; j < n ; j++)\r\n#define ll long long\r\n#define files    freopen(\"input.txt\", \"r\", stdin); freopen(\"output.txt\", \"w\", stdout);\r\n#define code_of_thrones ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);  \r\n\r\nusing namespace std;\r\n\r\nconst unsigned ll N = 2e6 + 5;\r\n\r\nvoid primeFactors(ll n){\r\n    vector<ll> primes;\r\n    for(ll i = 2; i*i <= n; i++){\r\n        if(n % i == 0){\r\n            primes.push_back(i);\r\n            while(n % i == 0)\r\n                n/= i;\r\n        }\r\n    }\r\n    if(n != 1)\r\n        primes.push_back(n);\r\n}\r\n\r\nbool prime[N+1];\r\nvector<int> primes;\r\n\r\nvoid sieve(){\r\n    memset(prime, true, sizeof(prime));\r\n    prime[2] = true;\r\n    for(int p = 2; p <= N; p++){\r\n        if(prime[p]){\r\n            primes.push_back(p);\r\n            for (int i = p * 2; i <= N; i += p){\r\n                prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nint spf[N];\r\nvoid sieveSPF(){\r\n    fr(N)\r\n        spf[i] = i;\r\n\r\n    for(int p = 2; p < N; p++){\r\n        if(spf[p] == p){\r\n            for(int i = p * 2; i <= N; i+= p)\r\n                if(spf[i] == i)\r\n                    spf[i] = p;\r\n        }\r\n    }\r\n}\r\n\r\nmap<ll, int> factorization;\r\n\r\nvoid factorize(ll x){\r\n    for(auto p : primes){\r\n        if(p * p > x)\r\n            break;\r\n        \r\n        while(x%p == 0){\r\n            factorization[p]++;\r\n            x/=p;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nll fastPowRec(ll a, ll b){\r\n    if(b == 0)\r\n        return 1;\r\n\r\n    ll res = fastPowRec(a, b/2);\r\n    if(b%2)\r\n        return res * res * a;\r\n    else\r\n        return res * res;\r\n}\r\n\r\nll fastPow(ll a, ll b){\r\n    ll res = 1;\r\n    while (b > 0)\r\n    {\r\n        if(b&1)\r\n            res = a * res;\r\n\r\n        a = a * a;\r\n        b/=2;\r\n    }\r\n    return res;\r\n}\r\n\r\nvector<pair<int, int>> vFc;\r\nvector<int> divisors;\r\nvoid getDivisors(int ind, ll div){\r\n    if(ind == vFc.size()){\r\n        divisors.push_back(div);\r\n        return;\r\n    }\r\n    \r\n    for(int i = 0; i <= vFc[ind].second; i++){\r\n        getDivisors(ind+1, div);\r\n        div*= vFc[ind].first;\r\n    }\r\n}\r\n\r\nvoid solve(){\r\n    factorization.clear();\r\n    divisors.clear();\r\n    vFc.clear();\r\n    ll a, b, c, d;\r\n    cin >> a >> b >> c >> d;\r\n    factorize(a);\r\n    factorize(b);\r\n    for(auto it : factorization)\r\n        vFc.push_back({it.first, it.second});\r\n\r\n    getDivisors(0, 1);\r\n\r\n    for(auto div : divisors){\r\n        ll x = div, y = a*b/x;\r\n        x = ((a+x)/x) * x, y = (b+y)/y * y;\r\n        if(x <= c && y <= d){\r\n            cout << x << ' ' << y << endl;\r\n            return;\r\n        } \r\n    }\r\n    cout << \"-1 -1\\n\";\r\n}\r\n\r\nint main(){\r\n    code_of_thrones\r\n    #ifndef ONLINE_JUDGE\r\n        files\r\n    #endif\r\n    sieve();\r\n\r\n    int t;\r\n    cin >> t;\r\n    while(t--)\r\n        solve();\r\n\r\n    return 0;\r\n}"
}