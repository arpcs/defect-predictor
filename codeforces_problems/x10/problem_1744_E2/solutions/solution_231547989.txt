{
    "id": 231547989,
    "contestId": 1744,
    "creationTimeSeconds": 1699253873,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "aasmaangupta"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\nconst int mod = 1e9 + 7;\n#define ll long long\n#define endl '\\n'\n#define prDouble(x) cout << fixed << setprecision(10) << x\n// vector<vector<int>>graph;\n// vector<bool>visited;\n// vector<int>level;\n// int bfs(ll x,ll b) {\n//     queue<int> q;\n//     visited[x] = true;\n//     q.push(x);\n//     level[x]=0;\n//     while(!q.empty()) {\n//         x = q.front();\n//         q.pop();\n//         int n = graph[x].size();\n//         for(int i=0; i<n; i++) {\n//             if(!visited[graph[x][i]]) {\n//                 visited[graph[x][i]]=true;\n//                 level[graph[x][i]]=level[x]+1;\n//                 if(graph[x][i]==b){\n//                     return level[b];\n//                 }\n//                 q.push(graph[x][i]);\n//             }\n//         }\n\n//     }\n//     return -1;\n// }\nvoid __print(int x) { cerr << x; }\nvoid __print(long x) { cerr << x; }\nvoid __print(long long x) { cerr << x; }\nvoid __print(unsigned x) { cerr << x; }\nvoid __print(unsigned long x) { cerr << x; }\nvoid __print(unsigned long long x) { cerr << x; }\nvoid __print(float x) { cerr << x; }\nvoid __print(double x) { cerr << x; }\nvoid __print(long double x) { cerr << x; }\nvoid __print(char x) { cerr << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cerr << (x ? \"true\" : \"false\"); }\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x)\n{\n   cerr << '{';\n   __print(x.first);\n   cerr << ',';\n   __print(x.second);\n   cerr << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x)\n{\n   int f = 0;\n   cerr << '{';\n   for (auto &i : x)\n      cerr << (f++ ? \",\" : \"\"), __print(i);\n   cerr << \"}\";\n}\nvoid _print() { cerr << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v)\n{\n   __print(t);\n   if (sizeof...(v))\n      cerr << \", \";\n   _print(v...);\n}\n#ifndef ONLINE_JUDGE\n#define debug(x...)              \\\n   cerr << \"[\" << #x << \"] = [\"; \\\n   _print(x)\n#else\n#define debug(x...)\n#endif\nstruct DSU\n{\n   ll n;\n   vector<ll> parent;\n   vector<ll> size;\n   DSU(ll n)\n   {\n      size.assign(n + 1, 1);\n      parent.resize(n + 1);\n      for (ll i = 1; i < n + 1; i++)\n         parent[i] = i;\n   }\n   ll find(ll x)\n   {\n      if (parent[x] == x)\n         return x;\n      else\n      {\n         return find(parent[x]);\n      }\n   }\n   void merge(ll a, ll b)\n   {\n      a = find(a);\n      b = find(b);\n      if (size[a] < size[b])\n         swap(a, b);\n      parent[b] = a;\n      size[a] += size[b];\n   }\n};\nvector<pair<ll, ll>> vp;\nvoid prime(ll n)\n{\n   for (ll i = 2; i * i <= n; i++)\n   {\n      if (n % i == 0)\n      {\n         ll cnt = 0;\n         while (n % i == 0)\n         {\n            cnt++;\n            n /= i;\n         }\n         vp.push_back({i, cnt});\n      }\n   }\n   if (n != 1)\n      vp.push_back({n, 1});\n}\nvector<ll> Div(int n) \n{ \n    // Note that this loop runs till square root \n    vector<ll>temp;\n    for (int i=1; i<=sqrt(n); i++) \n    { \n        if (n%i == 0) \n        { \n            // If divisors are equal, print only one \n            if (n/i == i) \n                temp.push_back(i);\n  \n            else{\n               temp.push_back(i);temp.push_back(n/i);\n            }// Otherwise print both \n        } \n    } \n    return temp;\n} \n  \nint main()\n{\n\n   ios_base ::sync_with_stdio(false);\n   cin.tie(NULL);\n   cout.tie(NULL);\n   ll t;\n   cin >> t;\n   while (t--)\n   {\n      ll a,b,c,d; cin >> a >> b >> c >> d;\n      ll num = a*b;\n      bool flag = false;\n      vector<ll>v1,v2;\n      v1 = Div(a);v2 = Div(b);\n      ll a1 =-1,a2=-1;\n      // debug(v1);debug(v2);\n      for(ll i = 0;i<v1.size();i++){\n         for(ll j =0;j<v2.size();j++){\n            ll temp = v1[i]*v2[j];\n            if(temp<=a){\n               temp = a*2;\n            }\n            if(temp>c)continue;\n            ll req = num/(__gcd(temp,num));\n            if(req>d)continue;\n            if(req>b){\n               a1 = temp;a2 = req;\n               flag = true;\n               break;\n            }\n            if((d/req)*req>b){\n               a1 = temp;a2 = req*(d/req);\n               flag = true;\n               break;\n            }\n         }\n         if(flag)break;\n      }\n      if(a1==-1){\n        ll temp = a+1;\n        \n            ll req = num/(__gcd(temp,num));\n            if(req>b){\n               a1 = temp;a2 = req;\n            }\n            else if((d/req)*req>b){\n               a1 = temp;a2 = req*(d/req);\n            } \n      }\n      cout<<a1<<\" \"<<a2<<endl;\n\n   }\n}\n"
}