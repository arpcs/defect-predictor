{
    "id": 231074911,
    "contestId": 1744,
    "creationTimeSeconds": 1698994066,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "littlegirl112"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ld = long double;\r\ntypedef vector<ll> vl;\r\ntypedef vector<vl> vvl;\r\nvoid solve();\r\nint main() {\r\n    cin.tie(nullptr);\r\n    ios::sync_with_stdio(false);\r\n    cout << fixed << setprecision(20);\r\n    ll t = 1;\r\n    cin >> t;\r\n    for (int i = 1; i <= t; i++) solve();\r\n    return 0;\r\n}\r\nvoid solve() {\r\n    ll a, b, c, d;\r\n    cin >> a >> b >> c >> d;\r\n    map<ll, ll> mp;\r\n    auto add = [&](ll x) {\r\n        for (ll i = 2; i * i <= x; i++) {\r\n            if (x % i == 0) {\r\n                while (x % i == 0) {\r\n                    x /= i;\r\n                    mp[i]++;\r\n                }\r\n            }\r\n        }\r\n        if (x > 1) mp[x]++;\r\n    };\r\n    add(a), add(b);\r\n    using P = pair<ll, ll>;\r\n    vector<P> v;\r\n    for (auto [x, y] : mp) v.push_back({x, y});\r\n    ll nv = v.size();\r\n    bool ok = false;\r\n    auto dfs = [&](auto self, vector<P>& l, vector<P>& r, ll pos) -> void {\r\n        if (ok) return;\r\n        if (pos == nv) {\r\n            ll ta = 1, tb = 1;\r\n            for (auto [x, y] : l) {\r\n                for (ll i = 0; i < y; i++) ta *= x;\r\n            }\r\n            for (auto [x, y] : r) {\r\n                for (ll i = 0; i < y; i++) tb *= x;\r\n            }\r\n            if (ta > c || tb > d) return;\r\n            ll ka = a / ta + 1, kb = b / tb + 1;\r\n            if (ka * ta <= c && kb * tb <= d) {\r\n                cout << ka * ta << \" \" << kb * tb << endl;\r\n                ok = true;\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n        for (int i = 0; i <= v[pos].second; i++) {\r\n            l.push_back({v[pos].first, i});\r\n            r.push_back({v[pos].first, v[pos].second - i});\r\n            self(self, l, r, pos + 1);\r\n            l.pop_back();\r\n            r.pop_back();\r\n        }\r\n    };\r\n    vector<P> l, r;\r\n    dfs(dfs, l, r, 0);\r\n    if (!ok) cout << -1 << \" \" << -1 << endl;\r\n}"
}