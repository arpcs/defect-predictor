{
    "id": 236123805,
    "contestId": 1744,
    "creationTimeSeconds": 1701900281,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "EvenToWorldFinal"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 26,
    "timeConsumedMillis": 343,
    "memoryConsumedBytes": 25395200,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\nconstexpr int MX = 1e9;\r\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\r\ninline int rnd() { return rng() % MX; }\r\n\r\nint main() {\r\n\r\n    int T; scanf(\"%d\", &T);\r\n    while (T--) {\r\n        int a, b, c, d;\r\n        scanf(\"%d%d%d%d\", &a, &b, &c, &d);\r\n        vector < int > div_a, div_b;\r\n        vector < LL > divs;\r\n        for (int dv = 1; dv * dv <= a; ++dv)\r\n            if (a % dv == 0) {\r\n                div_a.emplace_back(dv);\r\n                if (dv * dv != a) div_a.emplace_back(a / dv);\r\n            }\r\n        for (int dv = 1; dv * dv <= b; ++dv)\r\n            if (b % dv == 0) {\r\n                div_b.emplace_back(dv);\r\n                if (d * d != b) div_b.emplace_back(b / dv);\r\n            }\r\n        for (int x : div_a)\r\n            for (int y : div_b)\r\n                divs.emplace_back(1LL * x * y);\r\n        bool found = false;\r\n        for (int dv : divs) {\r\n            LL x = dv, y = 1LL * a * b / dv;\r\n            x = 1LL * x * (a / x + 1);\r\n            if (a < x && x <= c) {\r\n                y = 1LL * y * (b / y + 1);\r\n                if (b < y && y <= d) {\r\n                    found = true;\r\n                    printf(\"%lld %lld\\n\", x, y);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (!found) \r\n            printf(\"-1 -1\\n\");\r\n    }\r\n    return 0;\r\n}"
}