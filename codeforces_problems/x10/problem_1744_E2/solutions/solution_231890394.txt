{
    "id": 231890394,
    "contestId": 1744,
    "creationTimeSeconds": 1699423894,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "3m_ur"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 16076800,
    "source": "#include \"bits/stdc++.h\"\r\n\r\n/**\r\n * Author: omar walied \r\n * Description: hey there i love you <3\r\n**/\r\n\r\nusing namespace std;\r\n\r\n#define N         '\\n'\r\n#define int        long long\r\n#define inf       (2e18)\r\n#define fc(n)     fixed<<setprecision(n)\r\n#define all(v)    v.begin(),v.end()\r\n#define rall(v)   v.rbegin(),v.rend()\r\n// #pragma GCC optimize(\"Ofast,unroll-loops\")\r\n// #pragma GCC target(\"avx2,popcnt,lzcnt,abm,bmi,bmi2,fma,tune=native\")\r\n\r\nconst int nax=2e6;\r\nvector<int>primes;\r\nint spf[nax];\r\nvoid Spf(){\r\n\tfor(int i=1;i<=nax;i++)\r\n\t\tspf[i]=i;\r\n\tfor(int i=2;i<=nax;i++){\r\n\t\tif(spf[i]==i){\r\n\t\t\tprimes.push_back(i);\r\n\t\t\tfor(int j=i;j<=nax;j+=i){\r\n\t\t\t\tif(spf[j]==j)\r\n\t\t\t\t\tspf[j]=i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\nmap<int,int>pfactors;\r\nvector<pair<int,int>>pf;\r\nvector<int>divs;\r\nvoid factorization(int n){\r\n\tfor(auto &it:primes){\r\n\t\tif(it*it>n)\r\n\t\t\tbreak;\r\n\t\twhile(n%it==0)\r\n\t\t\tn/=it,pfactors[it]++;\r\n\t}\r\n\tif(n!=1)\r\n\t\tpfactors[n]++;\r\n}\r\n\r\nvoid getdiv(int ind,int div){\r\n\tif(ind==pf.size()){\r\n\t\tdivs.push_back(div);\r\n\t\treturn;\r\n\t}\r\n\tfor(int i=0;i<=pf[ind].second;i++)\r\n\t\tgetdiv(ind+1,div),div*=pf[ind].first;\r\n}\r\n\r\nvoid testcases(){\r\n\tpfactors.clear();\r\n\tpf.clear();\r\n\tdivs.clear();\r\n\tint a,b,c,d;\r\n\tcin>>a>>b>>c>>d;\r\n\tfactorization(a);\r\n\tfactorization(b);\r\n\tfor(auto &it:pfactors)\r\n\t\tpf.push_back({it.first,it.second});\r\n\tgetdiv(0,1);\r\n\t// cout<<divs.size()<<N;\r\n\tfor(auto &it:divs){\r\n\t\tint x=it,y=(a*b)/x;\r\n\t\tx=((a+x)/x)*x,y=((y+b)/y)*y;\r\n\t\tif(x<=c&&y<=d){\r\n\t\t\tcout<<x<<\" \"<<y<<N;\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tcout<<-1<<\" \"<<-1<<N;\r\n}\t\r\n\r\nint32_t main()\r\n{ios_base::sync_with_stdio(0),cout.tie(0),cin.tie(0);\r\n\r\nSpf();\r\nint tt=1;\r\ncin>>tt;\r\nfor(int tc=1;tc<=tt;tc++){\r\n\t// cout<<\"Case #\"<<tc<<\": \";\r\n\ttestcases();\r\n}\r\n\r\nreturn 0;\r\n}"
}