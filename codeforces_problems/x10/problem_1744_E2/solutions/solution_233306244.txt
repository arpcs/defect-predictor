{
    "id": 233306244,
    "contestId": 1744,
    "creationTimeSeconds": 1700317991,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "bkifhr8"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 296,
    "memoryConsumedBytes": 102400,
    "source": "//E2. Divisible Numbers (hard version)\n/*\n \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645 \u0627\u0644\u062d\u0645\u062f \u0644\u0644\u0647 \u0631\u0628 \u0627\u0644\u0639\u0627\u0644\u0645\u064a\u0646 \u0648\u0627\u0644\u0635\u0644\u0627\u0647 \u0648\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u0649 \u0627\u0634\u0631\u0641 \u0627\u0644\u0645\u0631\u0633\u0644\u064a\u0646 \u0648\u062e\u0627\u062a\u0645 \u0627\u0644\u0646\u0628\u064a\u064a\u0646 \u0648\u0631\u062d\u0645\u0647 \u0627\u0644\u0644\u0647 \u0644\u0644\u0639\u0627\u0644\u0645\u064a\u0646 \u0633\u064a\u062f\u0646\u0627 \u0645\u062d\u0645\u062f \u0648\u0639\u0644\u0649 \u0627\u0644\u0647 \u0648\u0635\u062d\u0628\u0647 \u0627\u062c\u0645\u0639\u064a\u0646 .\n */\n#include <iostream>\n#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <utility>\n#include <map>\n#include <set>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <iomanip>\n#include <cstring>\n#include <numeric>\n#pragma GCC target(\"popcnt\")\n#pragma GCC optimize(\"-Ofast\")\n#pragma GCC optimize(\"-ffast-math\")\n#pragma GCC optimize(\"-funroll-loops\")\n#pragma GCC optimize(\"-funroll-all-loops,-fpeel-loops,-funswitch-loops\")\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native\")\n#define ll long long\n#define ull unsigned long long\n#define pll pair<ll,ll>\n#define pii pair<int,int>\n#define Ahmed_Bahy ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n#define Num_of_Digits(n) ((int)log10(n) + 1)\n#define PI 3.1415926535897932384626433832795\n#define MOD 1000000007\n#define popcount(x) __builtin_popcount(x)\n#define clz(x) __builtin_clz(x)\n#define ctz(x) __builtin_ctz(x)\n#define popcountll(x) __builtin_popcountll(x)\n#define clzll(x) __builtin_clzll(x)\n#define ctzll(x) __builtin_ctzll(x)\n#define lg(x) 31-clz(x)\n#define lgll(x) 63-clzll(x)\n#define all(v) v.begin(),v.end()\nconst int dr[8] = {0, 0, 1, -1, 1, 1, -1, -1};\nconst int dc[8] = {1, -1, 0, 0, 1, -1, 1, -1};\nusing namespace std;\nconst int N=1e6+5,INF=1e9;\nconst ll OO=1e18;\nconst double ESP=1e-12;\nll tc=1;\nvector<ll> get_divisors(ll n)\n{\n    vector<ll>divisors;\n    for(ll i=1;i*i<=n;i++)\n    {\n        if(n%i==0)\n        {\n            divisors.push_back(i);\n            if(i!=n/i)\n                divisors.push_back(n/i);\n        }\n    }\n    sort(divisors.begin(),divisors.end());\n    return divisors;\n}\nvoid solve()\n{\n    ll a,b,c,d;cin>>a>>b>>c>>d;\n    vector<ll>A_divs=get_divisors(a),B_divs=get_divisors(b);\n    for(auto x:A_divs)\n        for(auto y:B_divs){\n            ll z=x*y;\n            ll one = z, two= a*b/one;\n            one = ((a+one)/one) * one;\n            two = (b+two)/two * two;\n            if(one<=c && two<=d)return void (cout<<one<<\" \"<<two<<\"\\n\");\n        }\n    cout<<\"-1 -1\\n\";\n}\nint main()\n{\n    Ahmed_Bahy\n    cin>>tc;\n    while(tc--)\n        solve();\n}\n\t  \t  \t\t\t\t\t\t\t \t \t\t\t   \t\t\t\t \t\t\t"
}