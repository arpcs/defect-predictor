{
    "id": 233258497,
    "contestId": 1744,
    "creationTimeSeconds": 1700291831,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1744,
        "index": "E2",
        "name": "Divisible Numbers (hard version)",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "brute force",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1744,
        "members": [
            {
                "handle": "Bugs_Bunney"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1665930900
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 68,
    "timeConsumedMillis": 78,
    "memoryConsumedBytes": 36761600,
    "source": "//E2. Divisible Numbers (hard version)\r\n/*\r\n \u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645 \u0627\u0644\u062d\u0645\u062f \u0644\u0644\u0647 \u0631\u0628 \u0627\u0644\u0639\u0627\u0644\u0645\u064a\u0646 \u0648\u0627\u0644\u0635\u0644\u0627\u0647 \u0648\u0627\u0644\u0633\u0644\u0627\u0645 \u0639\u0644\u0649 \u0627\u0634\u0631\u0641 \u0627\u0644\u0645\u0631\u0633\u0644\u064a\u0646 \u0648\u062e\u0627\u062a\u0645 \u0627\u0644\u0646\u0628\u064a\u064a\u0646 \u0648\u0631\u062d\u0645\u0647 \u0627\u0644\u0644\u0647 \u0644\u0644\u0639\u0627\u0644\u0645\u064a\u0646 \u0633\u064a\u062f\u0646\u0627 \u0645\u062d\u0645\u062f \u0648\u0639\u0644\u0649 \u0627\u0644\u0647 \u0648\u0635\u062d\u0628\u0647 \u0627\u062c\u0645\u0639\u064a\u0646 .\r\n */\r\n#include <iostream>\r\n#include <vector>\r\n#include <cmath>\r\n#include <algorithm>\r\n#include <utility>\r\n#include <map>\r\n#include <set>\r\n#include <queue>\r\n#include <stack>\r\n#include <bitset>\r\n#include <iomanip>\r\n#include <cstring>\r\n#include <numeric>\r\n#pragma GCC target(\"popcnt\")\r\n#pragma GCC optimize(\"-Ofast\")\r\n#pragma GCC optimize(\"-ffast-math\")\r\n#pragma GCC optimize(\"-funroll-loops\")\r\n#pragma GCC optimize(\"-funroll-all-loops,-fpeel-loops,-funswitch-loops\")\r\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,sse4.2,popcnt,abm,mmx,avx2,tune=native\")\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define pll pair<ll,ll>\r\n#define pii pair<int,int>\r\n#define Ahmed_Bahy ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\r\n#define Num_of_Digits(n) ((int)log10(n) + 1)\r\n#define PI 3.1415926535897932384626433832795\r\n#define MOD 1000000007\r\n#define popcount(x) __builtin_popcount(x)\r\n#define clz(x) __builtin_clz(x)\r\n#define ctz(x) __builtin_ctz(x)\r\n#define popcountll(x) __builtin_popcountll(x)\r\n#define clzll(x) __builtin_clzll(x)\r\n#define ctzll(x) __builtin_ctzll(x)\r\n#define lg(x) 31-clz(x)\r\n#define lgll(x) 63-clzll(x)\r\n#define all(v) v.begin(),v.end()\r\nconst int dr[8] = {0, 0, 1, -1, 1, 1, -1, -1};\r\nconst int dc[8] = {1, -1, 0, 0, 1, -1, 1, -1};\r\nusing namespace std;\r\nconst int N=2e6+5,INF=1e9;\r\nconst ll OO=1e18;\r\nconst double ESP=1e-12;\r\nll tc=1;\r\nll spf[N],prime[N+1];\r\nvector<ll> primes;\r\nvoid sieve(){\r\n    memset(prime, true, sizeof(prime));\r\n    prime[2] = true;\r\n    for(int p = 2; p <= N; p++){\r\n        if(prime[p]){\r\n            primes.push_back(p);\r\n            for (int i = p * 2; i <= N; i += p){\r\n                prime[i] = false;\r\n            }\r\n        }\r\n    }\r\n}\r\nvoid sieveSPF(){\r\n    for (ll i = 0; i < N; i++)\r\n        spf[i] = i;\r\n    for (ll i = 2; i * i < N; i++) {\r\n        if (spf[i] == i) {\r\n            for (ll j = i + i; j < N; j += i)\r\n                spf[j] = min(spf[j], i);\r\n        }\r\n    }\r\n}\r\nmap<ll,ll>factorization,mp;\r\nvector<pll>vfactorization;\r\nvector<ll>divisors;\r\nvoid factorize(ll x){\r\n    for(auto p:primes){\r\n        if(p*p>x)break;\r\n        while(x%p==0){\r\n            factorization[p]++;\r\n            x/=p;\r\n        }\r\n    }\r\n    if(x!=1)\r\n        factorization[x]++;\r\n}\r\nvoid getDivisors(ll ind,ll cur){\r\n    if(ind==vfactorization.size()){\r\n        divisors.push_back(cur);\r\n        return;\r\n    }\r\n    for(int i=0;i<=vfactorization[ind].second;i++){\r\n        getDivisors(ind+1,cur);\r\n        cur*=vfactorization[ind].first;\r\n    }\r\n}\r\nvoid solve()\r\n{\r\n    ll a,b,c,d;cin>>a>>b>>c>>d;\r\n    factorization.clear();\r\n    divisors.clear();\r\n    vfactorization.clear();\r\n    factorize(a);\r\n    factorize(b);\r\n    vfactorization=vector<pll>();\r\n    for(auto [x,y]:factorization)\r\n        vfactorization.push_back({x,y});\r\n    getDivisors(0,1);\r\n    for(auto i:divisors){\r\n        ll x = i, y = a*b/x;\r\n        x = ((a+x)/x) * x;\r\n        y = (b+y)/y * y;\r\n        if(x<=c && y<=d)return void (cout<<x<<\" \"<<y<<\"\\n\");\r\n    }\r\n    cout<<\"-1 -1\\n\";\r\n}\r\nint main()\r\n{\r\n    sieve();\r\n    Ahmed_Bahy\r\n    cin>>tc;\r\n    while(tc--)\r\n        solve();\r\n}\r\n\r\n"
}