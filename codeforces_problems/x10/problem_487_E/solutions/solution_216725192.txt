{
    "id": 216725192,
    "contestId": 487,
    "creationTimeSeconds": 1690900395,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 487,
        "index": "E",
        "name": "Tourists",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3200,
        "tags": [
            "data structures",
            "dfs and similar",
            "graphs",
            "trees"
        ]
    },
    "author": {
        "contestId": 487,
        "members": [
            {
                "handle": "cyrxdzj"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1416590400
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 33792000,
    "source": "// LUOGU_RID: 118518601\n// Author: cyrxdzj\r\n// Problem: Tourists\r\n// Contest: Luogu\r\n// URL: https://www.luogu.com.cn/problem/CF487E\r\n// Memory Limit: 250 MB\r\n// Time Limit: 2000 ms\r\n// \r\n// Powered by CP Editor (https://cpeditor.org)\r\n\r\n#include<cstdio>\r\n#include<set>\r\n#include<stack>\r\nusing namespace std;\r\n//#define DBG\r\nint n,m,q;\r\nlong long w[100005];//\u5706\u70b9\u7684\u70b9\u6743\r\nmultiset<long long>w2[100005];//\u5706\u65b9\u6811\u4e2d\u65b9\u70b9\u7684\u70b9\u6743\r\n//\u57fa\u672c\u56fe\u8bba\r\nstruct Edge\r\n{\r\n    int to,next;\r\n}edge[400005][2];//\u4e00\u4e2a\u5b58\u666e\u901a\u56fe\uff0c\u53e6\u4e00\u4e2a\u5b58\u5706\u65b9\u6811\r\nint edge_cnt[2];\r\nint head[200005][2];\r\nint dfn[200005];\r\nint low[200005];\r\nint now_dfn;\r\nint point_cnt;\r\nstack<int>st;\r\nbool in_stack[100005];\r\nvoid add_edge(int u,int v,int id)\r\n{\r\n    edge[++edge_cnt[id]][id].to=v;\r\n    edge[edge_cnt[id]][id].next=head[u][id];\r\n    head[u][id]=edge_cnt[id];\r\n    #ifdef DBG\r\n    if(id==1)\r\n    {\r\n        printf(\"Add edge %d %d\\n\",u,v);\r\n    }\r\n    #endif\r\n}\r\nvoid build_tree(int u)//\u6784\u5efa\u5706\u65b9\u6811\r\n{\r\n    dfn[u]=++now_dfn;\r\n    low[u]=dfn[u];\r\n    st.push(u);\r\n    in_stack[u]=true;\r\n    for(int i=head[u][0];i;i=edge[i][0].next)\r\n    {\r\n        int v=edge[i][0].to;\r\n        if(dfn[v]==0)\r\n        {\r\n            build_tree(v);\r\n            low[u]=min(low[u],low[v]);\r\n            if(low[v]==dfn[u])\r\n            {\r\n                point_cnt++;\r\n                while(!st.empty())\r\n                {\r\n                    int x=st.top();\r\n                    add_edge(x,point_cnt,1);\r\n                    add_edge(point_cnt,x,1);\r\n                    st.pop();\r\n                    if(x==v)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n                add_edge(u,point_cnt,1);\r\n                add_edge(point_cnt,u,1);\r\n            }\r\n        }\r\n        else if(in_stack[v])\r\n        {\r\n            low[u]=min(low[u],dfn[v]);\r\n        }\r\n    }\r\n}\r\n//\u7ebf\u6bb5\u6811\r\nstruct Tree\r\n{\r\n    int l,r;\r\n    long long minx;\r\n}tree[1000005];\r\nvoid update(int o)\r\n{\r\n    tree[o].minx=min(tree[o<<1].minx,tree[o<<1|1].minx);\r\n}\r\nvoid build(int o,int l,int r)\r\n{\r\n    tree[o].l=l;\r\n    tree[o].r=r;\r\n    if(l==r)\r\n    {\r\n        return;\r\n    }\r\n    int mid=(l+r)>>1;\r\n    build(o<<1,l,mid);\r\n    build(o<<1|1,mid+1,r);\r\n    update(o);\r\n}\r\nvoid change(int o,int x,long long v)\r\n{\r\n    if(tree[o].l==x&&tree[o].r==x)\r\n    {\r\n        tree[o].minx=v;\r\n        return;\r\n    }\r\n    int mid=(tree[o].l+tree[o].r)>>1;\r\n    if(mid>=x)\r\n    {\r\n        change(o<<1,x,v);\r\n    }\r\n    else\r\n    {\r\n        change(o<<1|1,x,v);\r\n    }\r\n    update(o);\r\n}\r\nlong long query(int o,int l,int r)\r\n{\r\n    if(tree[o].l==l&&tree[o].r==r)\r\n    {\r\n        return tree[o].minx;\r\n    }\r\n    int mid=(tree[o].l+tree[o].r)>>1;\r\n    if(mid>=r)\r\n    {\r\n        return query(o<<1,l,r);\r\n    }\r\n    else if(mid<l)\r\n    {\r\n        return query(o<<1|1,l,r);\r\n    }\r\n    else\r\n    {\r\n        return min(query(o<<1,l,mid),query(o<<1|1,mid+1,r));\r\n    }\r\n}\r\n//\u6811\u94fe\u5256\u5206\r\nint fa[200005];//\u5706\u65b9\u6811\u7684\u7236\u4eb2\u4fe1\u606f\r\nint sz[200005];\r\nint dep[200005];\r\nint hson[200005];\r\nint top[200005];\r\nint id[200005];\r\nint id_cnt;\r\nvoid get_hson(int u,int f)\r\n{\r\n    #ifdef DBG\r\n    printf(\"Get hson %d %d\\n\",u,f);\r\n    fflush(stdout);\r\n    #endif\r\n    fa[u]=f;\r\n    dep[u]=dep[f]+1;\r\n    sz[u]=1;\r\n    for(int i=head[u][1];i;i=edge[i][1].next)\r\n    {\r\n        int v=edge[i][1].to;\r\n        if(v==f)\r\n        {\r\n            continue;\r\n        }\r\n        get_hson(v,u);\r\n        sz[u]+=sz[v];\r\n        if(sz[v]>sz[hson[u]])\r\n        {\r\n            hson[u]=v;\r\n        }\r\n    }\r\n}\r\nvoid build_chain(int u,int t)\r\n{\r\n    #ifdef DBG\r\n    printf(\"Build chain %d %d\\n\",u,t);\r\n    fflush(stdout);\r\n    #endif\r\n    id[u]=++id_cnt;\r\n    top[u]=t;\r\n    if(hson[u])\r\n    {\r\n        build_chain(hson[u],t);\r\n        for(int i=head[u][1];i;i=edge[i][1].next)\r\n        {\r\n            int v=edge[i][1].to;\r\n            if(v!=fa[u]&&v!=hson[u])\r\n            {\r\n                #ifdef DBG\r\n                if(v==4)\r\n                {\r\n                    printf(\"u %d v %d fa[u] %d\\n\",u,v,fa[u]);\r\n                }\r\n                #endif\r\n                build_chain(v,v);\r\n            }\r\n        }\r\n    }\r\n}\r\nint lca(int u,int v)\r\n{\r\n    while(top[u]!=top[v])\r\n    {\r\n        if(dep[top[u]]>dep[top[v]])\r\n        {\r\n            u=fa[top[u]];\r\n        }\r\n        else\r\n        {\r\n            v=fa[top[v]];\r\n        }\r\n    }\r\n    if(dep[u]>dep[v])\r\n    {\r\n        return v;\r\n    }\r\n    else\r\n    {\r\n        return u;\r\n    }\r\n}\r\nlong long query_ans(int u,int v)\r\n{\r\n    int f=lca(u,v);\r\n    #ifdef DBG\r\n    printf(\"u %d v %d lca %d\\n\",u,v,f);\r\n    #endif\r\n    long long ans=0x3fffffffffffffff;\r\n    if(f>n)\r\n    {\r\n        ans=w[fa[f]];\r\n    }\r\n    while(top[u]!=top[f])\r\n    {\r\n        ans=min(ans,query(1,id[top[u]],id[u]));\r\n        u=fa[top[u]];\r\n    }\r\n    ans=min(ans,query(1,id[f],id[u]));\r\n    while(top[v]!=top[f])\r\n    {\r\n        ans=min(ans,query(1,id[top[v]],id[v]));\r\n        v=fa[top[v]];\r\n    }\r\n    ans=min(ans,query(1,id[f],id[v]));\r\n    return ans;\r\n}\r\nint main()\r\n{\r\n    scanf(\"%d%d%d\",&n,&m,&q);\r\n    point_cnt=n;\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        scanf(\"%lld\",&w[i]);\r\n    }\r\n    for(int i=1,u,v;i<=m;i++)\r\n    {\r\n        scanf(\"%d%d\",&u,&v);\r\n        add_edge(u,v,0);\r\n        add_edge(v,u,0);\r\n    }\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        if(dfn[i]==0)\r\n        {\r\n            build_tree(i);\r\n        }\r\n    }\r\n    get_hson(1,0);//\u6811\u94fe\u5256\u5206\r\n    build_chain(1,1);\r\n    #ifdef DBG\r\n    for(int i=1;i<=point_cnt;i++)\r\n    {\r\n        printf(\"Point %d dep %d id %d top %d\\n\",i,dep[i],id[i],top[i]);\r\n    }\r\n    #endif\r\n    build(1,1,point_cnt);\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        if(fa[i]!=0)\r\n        {\r\n            w2[fa[i]-n].insert(w[i]);\r\n        }\r\n    }\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        change(1,id[i],w[i]);\r\n    }\r\n    for(int i=n+1;i<=point_cnt;i++)\r\n    {\r\n        change(1,id[i],*(w2[i-n].begin()));\r\n    }\r\n    #ifdef DBG\r\n    for(int i=1;i<=point_cnt;i++)\r\n    {\r\n        printf(\"Point %d weight %lld\\n\",i,query(1,id[i],id[i]));\r\n    }\r\n    #endif\r\n    while(q--)\r\n    {\r\n        char op[3];\r\n        scanf(\"%s\",&op);\r\n        if(op[0]=='A')\r\n        {\r\n            int a,b;\r\n            scanf(\"%d%d\",&a,&b);\r\n            printf(\"%lld\\n\",query_ans(a,b));\r\n        }\r\n        else\r\n        {\r\n            int a;\r\n            long long v;\r\n            scanf(\"%d%lld\",&a,&v);\r\n            change(1,id[a],v);\r\n            w2[fa[a]-n].erase(w[a]);\r\n            w[a]=v;\r\n            w2[fa[a]-n].insert(w[a]);\r\n            change(1,id[fa[a]],*(w2[fa[a]-n].begin()));\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
}