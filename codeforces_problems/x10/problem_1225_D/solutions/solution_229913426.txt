{
    "id": 229913426,
    "contestId": 1225,
    "creationTimeSeconds": 1698342490,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1225,
        "index": "D",
        "name": "Power Products",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 1800,
        "tags": [
            "hashing",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1225,
        "members": [
            {
                "handle": "adarsh-sgh"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1572087900
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 14,
    "timeConsumedMillis": 280,
    "memoryConsumedBytes": 11571200,
    "source": "#ifdef LOCAL\r\n#include \"adarsh/base.hpp\"\r\n#else\r\n#include <bits/stdc++.h>\r\n// #include <ext/pb_ds/assoc_container.hpp>\r\n// #include <ext/pb_ds/tree_policy.hpp>\r\nusing namespace std;\r\n// using namespace __gnu_pbds;\r\n#define dbg(...) 42;\r\n#endif\r\n\r\n#define int long long\r\n#define all(v) begin(v), end(v)\r\n#define vin vector<int> v(n);\r\n\r\nconstexpr int INF = 1e18, MOD = 1e9 + 7;\r\n\r\ntemplate<typename T>\r\nistream& operator>>(istream& istream, vector<T>& v) { for (auto& it : v) cin >> it; return istream; }\r\ntemplate <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>\r\nostream& operator<<(ostream& os, const T_container& v) { string l; for (const T& x : v) os << l << x, l = \" \"; return os << '\\n'; };\r\n\r\ntemplate <typename T> void printBinary(T n) { for (int i = sizeof(T) * 8 - 1; i >= 0; i--) { cout << ((n >> i) & 1); } cout << endl; }\r\n\r\ntemplate <typename T>T roundup(T a, T b) { return(a / b + ((a ^ b) > 0 && a % b)); }\r\nstruct custom_hash {\r\n  static uint64_t splitmix64(uint64_t x) {\r\n    // http://xorshift.di.unimi.it/splitmix64.c\r\n    x += 0x9e3779b97f4a7c15;\r\n    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\r\n    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\r\n    return x ^ (x >> 31);\r\n  }\r\n\r\n  size_t operator()(uint64_t x) const {\r\n    static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\r\n    return splitmix64(x + FIXED_RANDOM);\r\n  }\r\n};\r\n// GNU PBDS (Number of elements less than k, kth element of set)\r\n// typedef tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_set; /* Ordered Set */\r\n// typedef tree<int, null_type,less_equal<int>, rb_tree_tag,tree_order_statistics_node_update> ordered_multiset; /* Ordered MultiSet */\r\n// void oms_erase(ordered_multiset &t, int v) {int rank = t.order_of_key(v); ordered_multiset::iterator it = t.find_by_order(rank); t.erase(it);}\r\n\r\n/*\r\n\r\n*/\r\n\r\nmap<int, int> factors(int n, int k) {\r\n  // vector<int>ans(k);\r\n  map<int, int>ans;\r\n  for (int i = 2;i * i <= n;i++) {\r\n    int cnt = 0;\r\n    while (n % i == 0) {\r\n      n /= i;\r\n      cnt++;\r\n    }\r\n    cnt %= k;\r\n    if (cnt)ans[i] = cnt;\r\n  }\r\n  if (n > 1)ans[n]++;\r\n  return ans;\r\n}\r\n\r\nvoid solve() {\r\n  int n, k;\r\n  cin >> n >> k;\r\n  vector<int>v(n);\r\n  cin >> v;\r\n  map<map<int, int>, int>mp;\r\n  int ans = 0;\r\n  for (auto& x : v) {\r\n    auto f = factors(x, k);\r\n    dbg(x, f);\r\n    auto antif = f;\r\n    for (auto& [x, y] : antif) {\r\n      assert(y);\r\n      y = k - y;\r\n    }\r\n    if (mp.count(antif))ans += mp[antif];\r\n    mp[f]++;\r\n  }\r\n  dbg(mp);\r\n  cout << ans;\r\n}//solve\r\n\r\nint32_t main() {\r\n  ios::sync_with_stdio(false); cin.tie(nullptr);\r\n\r\n  int testcases = 1;\r\n  //  cin >> testcases;\r\n\r\n  while (testcases--) {\r\n    // cout <<\r\n    solve(); cout << '\\n';\r\n  }//testcases\r\n  cout << endl;\r\n\r\n  return 0;\r\n}//main\r\n"
}