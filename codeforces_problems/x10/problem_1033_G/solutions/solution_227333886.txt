{
    "id": 227333886,
    "contestId": 1033,
    "creationTimeSeconds": 1696859161,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1033,
        "index": "G",
        "name": "Chip Game",
        "type": "PROGRAMMING",
        "points": 4000.0,
        "rating": 3500,
        "tags": [
            "games"
        ]
    },
    "author": {
        "contestId": 1033,
        "members": [
            {
                "handle": "yh2021shx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1538931900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "/*******************************\r\n| Author:  DE_aemmprty\r\n| Problem: Chip Game\r\n| Contest: Luogu\r\n| URL:     https://www.luogu.com.cn/problem/CF1033G\r\n| When:    2023-10-09 21:35:12\r\n| \r\n| Memory:  250 MB\r\n| Time:    5000 ms\r\n*******************************/\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\nint read() {\r\n    char c = getchar();\r\n    int x = 0, p = 1;\r\n    while ((c < '0' || c > '9') && c != '-') c = getchar();\r\n    if (c == '-') p = -1, c = getchar();\r\n    while (c >= '0' && c <= '9')\r\n        x = (x << 1) + (x << 3) + (c ^ 48), c = getchar();\r\n    return x * p;\r\n}\r\n\r\nconst int N = 107;\r\nconst int M = 1e5 + 7;\r\n\r\nint n, m;\r\nint v[N], w[N];\r\n\r\nvoid solve() {\r\n    n = read(), m = read();\r\n    for (int i = 1; i <= n; i ++)\r\n        v[i] = read();\r\n\r\n    long long ansp = 0, ansq = 0, ans = 0;\r\n    for (int s = 2; s <= (m << 1); s ++) {\r\n        for (int i = 1; i <= n; i ++)\r\n            w[i] = v[i] % s;\r\n\r\n        sort(w + 1, w + n + 1);\r\n        w[n + 1] = s - 1;\r\n        for (int i = 0; i <= n; i ++) {\r\n            int l = w[i] + 1;\r\n            int r = min(m, w[i + 1]);\r\n            int m = n - i;\r\n            if (m & 1) {\r\n                l = max(l, (w[n - 1] / 2) + 1);\r\n                ansp += max(0, min(r, s - l) - max(l, s - r) + 1);\r\n            } else {\r\n                l = max(l, (w[n] / 2) + 1);\r\n                ansq += max(0, min(r, s - l) - max(l, s - r) + 1);\r\n            }\r\n        }\r\n    }\r\n    ans = 1ll * m * m - ansp - ansq;\r\n    printf(\"%lld %lld %lld %lld\\n\", ans / 2, ans / 2, ansp, ansq);\r\n}\r\n\r\nsigned main() {\r\n    int t = 1;\r\n    while (t --) solve();\r\n    return 0;\r\n}"
}