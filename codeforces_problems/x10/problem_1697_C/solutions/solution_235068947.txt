{
    "id": 235068947,
    "contestId": 1697,
    "creationTimeSeconds": 1701356088,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1697,
        "index": "C",
        "name": "awoo's Favorite Problem",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "strings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1697,
        "members": [
            {
                "handle": "lokeshkatre_11"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1655044500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 77,
    "memoryConsumedBytes": 2150400,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <map>\r\n#include <stack>\r\n#include <set>\r\n#include <vector>\r\n#include <queue>\r\n#include <cmath>\r\n#include <string>\r\n#include <list>\r\n#include <utility>\r\n#include <unordered_map>\r\n#include <unordered_set>\r\n#include <cstring>\r\n#include <iomanip>\r\n#include <numeric>\r\n// #include<ext/pb_ds/assoc_container.hpp>\r\n// #include<ext/pb_ds/tree_policy.hpp>\r\n\r\n#define ull unsigned long long\r\n#define ll long long\r\n#define vi vector<int>\r\n#define vvi vector<vector<int>>\r\n#define vs vector<string>\r\n#define vll vector<ll>\r\n#define vvl vector<vector<ll>>\r\n#define vpi vector<pair<int, int>>\r\n#define vpl vector<pair<ll, ll>>\r\n#define vs vector<string>\r\n#define nline \"\\n\"\r\n#define f(r, n, i) for (ll i = r; i <= n; i++)\r\n\r\n// Lokesh katre\r\nusing namespace std;\r\n// using namespace  chrono;\r\n// using namespace _gnu_pbds;\r\nconst int M = 998244353;\r\n\r\n// ll add(ll x, ll y, ll c)\r\n// {\r\n// \tll ans = ((x % c) + (y % c)) % c;\r\n// \tif (ans < 0)\r\n// \t\tans += c;\r\n// \treturn ans;\r\n// }\r\n\r\n// ll sub(ll x, ll y, ll c)\r\n// {\r\n// \tll ans = ((x % c) - (y % c)) % c;\r\n// \tif (ans < 0)\r\n// \t\tans += c;\r\n// \treturn ans;\r\n// }\r\n// const int N = 1e6 + 4;\r\n// vector<ll> fact(N + 1, 1);\r\n\r\n// void factorial()\r\n// {\r\n// \tfor (int i = 1; i <= N; i++)\r\n// \t{\r\n// \t\tfact[i] = (fact[i - 1] * i) % M;\r\n// \t}\r\n// }\r\n\r\nll pwr(ll x, ll y, ll p = M)\r\n{\r\n\tif (y == 0)\r\n\t\treturn 1;\r\n\tll res = pwr(x, y / 2) % p;\r\n\tres = (res * res) % p;\r\n\tif (y % 2 == 1)\r\n\t{\r\n\t\tres = (res * x) % p;\r\n\t}\r\n\treturn res;\r\n}\r\nll mod_inv(ll a, ll m = M)\r\n{\r\n\treturn pwr(a, m - 2);\r\n}\r\n\r\n// ll mod_div(ll a, ll b, ll m = M)\r\n// {\r\n// \treturn (a * mod_inv(b)) % m;\r\n// }\r\n// ll ncr(ll n, ll r, ll m=M){\r\n//     if(r<0 || r>n || n<0) return 0;\r\n// \treturn mod_div(fact[n],(fact[n-r]*fact[r])%m);\r\n// }\r\n// const ll N = 2e6;\r\n\r\n// vector<bool> prime_sieve(N, 1);\r\n// void prime()\r\n// {\r\n// \tprime_sieve[1] = prime_sieve[0] = 0;\r\n// \tfor (ll i = 2; i * i <= N; i++)\r\n// \t{\r\n// \t\tif (prime_sieve[i])\r\n// \t\t{\r\n// \t\t\tfor (ll j = i * i; j < N; j += i)\r\n// \t\t\t\tprime_sieve[j] = 0;\r\n// \t\t}\r\n// \t}\r\n// // }\r\n\r\nll gcd(ll a, ll b)\r\n{\r\n\twhile (b != 0)\r\n\t{\r\n\t\tll temp = b;\r\n\t\tb = a % b;\r\n\t\ta = temp;\r\n\t}\r\n\treturn a;\r\n}\r\n\r\n// const ll N = 1e7 + 7;\r\n// vll spf(N, -1);\r\n// void spf_find()\r\n// {\r\n// \tfor (ll i = 2; i < N; i++)\r\n// \t{\r\n// \t\tif (spf[i] == -1)\r\n// \t\t{\r\n// \t\t\tfor (ll j = i; j < N; j += i)\r\n// \t\t\t\tif (spf[j] == -1)\r\n// \t\t\t\t\tspf[j] = i;\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\n// ll get_hash(string const &s)\r\n// {\r\n// \tll ans = 0;\r\n// \tfor (ll i = 0; i < s.size(); i++)\r\n// \t{\r\n// \t\tans = (ans + ((s[i] - 'a' + 1) * pwr(31, i)) % M) % M;\r\n// \t}\r\n// \treturn ans;\r\n// }\r\n// Lokesh Katre\r\n\r\n// class DisjointSet\r\n// {\r\n// public:\r\n// \tvector<int> rank, parent, size, depth;\r\n// \tDisjointSet(int n, vector<vector<int>> &mat)\r\n// \t{\r\n// \t\trank.resize(n + 1, 0);\r\n// \t\tparent.resize(n + 1);\r\n// \t\tsize.resize(n + 1, 1);\r\n// \t\tdepth.resize(n + 1);\r\n// \t\tfor (int i = 0; i < n; i++)\r\n// \t\t{\r\n// \t\t\tparent[i] = i;\r\n// \t\t}\r\n// \t\tint m = mat[0].size();\r\n// \t\tfor (int i = 0; i < mat.size(); i++)\r\n// \t\t{\r\n// \t\t\tfor (int j = 0; j < m; j++)\r\n// \t\t\t{\r\n// \t\t\t\tdepth[i * m + j] = mat[i][j];\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n\r\n// \tint findParent(int u)\r\n// \t{\r\n// \t\tif (parent[u] == u)\r\n// \t\t\treturn u;\r\n// \t\treturn parent[u] = findParent(parent[u]);\r\n// \t}\r\n\r\n// \tvoid UnionByRank(int u, int v)\r\n// \t{\r\n// \t\tint parent1 = findParent(u);\r\n// \t\tint parent2 = findParent(v);\r\n// \t\tif (parent1 != parent2)\r\n// \t\t{\r\n// \t\t\tif (rank[parent1] > rank[parent2])\r\n// \t\t\t{\r\n// \t\t\t\tparent[parent2] = parent1;\r\n// \t\t\t\tdepth[parent1] += depth[parent2];\r\n// \t\t\t}\r\n// \t\t\telse if (rank[parent1] < rank[parent2])\r\n// \t\t\t{\r\n// \t\t\t\tparent[parent1] = parent2;\r\n// \t\t\t\tdepth[parent2] += depth[parent1];\r\n// \t\t\t}\r\n// \t\t\telse\r\n// \t\t\t{\r\n// \t\t\t\tparent[parent2] = parent1;\r\n// \t\t\t\tdepth[parent1] += depth[parent2];\r\n// \t\t\t\trank[parent1]++;\r\n// \t\t\t}\r\n// \t\t}\r\n// \t}\r\n// };\r\n\r\nvoid solve()\r\n{\r\n\tint n;\r\n\tcin>>n;\r\n\tstring s,t;\r\n\tcin>>s>>t;\r\n\tstring a,c;\r\n\tfor(int i=0; i<n; i++){\r\n\t\tif(s[i]!='b') a.push_back(s[i]);\r\n\t\tif(t[i]!='b') c.push_back(t[i]);\r\n\t}\r\n\tif(a.size()!=c.size()){\r\n\t\tcout<<\"NO\\n\";\r\n\t\treturn;\r\n\t}\r\n\r\n\tfor(int i=0; i<a.size(); i++){\r\n\t\tif(a[i]!=c[i]){\r\n\t\t\tcout<<\"NO\\n\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tvi idx_sc,idx_tc,idx_sa,idx_ta;\r\n\tfor(int i=0; i<n; i++){\r\n\t\tif(s[i]=='a') idx_sa.push_back(i);\r\n\t\tif(s[i]=='c') idx_sc.push_back(i);\r\n\t\tif(t[i]=='a') idx_ta.push_back(i);\r\n\t\tif(t[i]=='c') idx_tc.push_back(i);\r\n\t}\r\n\r\n\tfor(int i=0; i<idx_sa.size(); i++){\r\n\t\tif(idx_sa[i]>idx_ta[i]){\r\n\t\t\tcout<<\"NO\\n\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\tfor(int i=0; i<idx_sc.size(); i++){\r\n\t\tif(idx_sc[i]<idx_tc[i]){\r\n\t\t\tcout<<\"NO\\n\";\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\tcout<<\"YES\\n\";\r\n}\r\n\r\nint main()\r\n{\r\n\tint test;\r\n\tcin >> test;\r\n\t// // factorial();\r\n\t// prime();\r\n\t// spf_find();\r\n\twhile (test--)\r\n\t{\r\n\t\tsolve();\r\n\t}\r\n\treturn 0;\r\n}"
}