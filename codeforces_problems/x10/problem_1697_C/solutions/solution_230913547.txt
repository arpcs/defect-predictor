{
    "id": 230913547,
    "contestId": 1697,
    "creationTimeSeconds": 1698898821,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1697,
        "index": "C",
        "name": "awoo's Favorite Problem",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "strings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1697,
        "members": [
            {
                "handle": "Dragnee_007"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1655044500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 28,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 819200,
    "source": "#include <iostream>\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define pb push_back\r\n#define mp make_pair\r\n#define ll long long\r\n#define lld long double\r\n#define ull unsigned long long\r\n#define ff first\r\n#define ss second\r\n#define all(x) x.begin(), x.end()\r\n#define rep(i,start,end) for(i = start; start < end ? i < end : i > end; start < end ? i += 1 : i -= 1)\r\n#define endl \"\\n\"\r\n#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)\r\n\r\n\r\nconst int MAX_N = 1e5;\r\nconst int mod = 1e9+7;\r\n\r\ninline ll gcd(ll a, ll b) {ll r; while (b) {r = a % b; a = b; b = r;} return a;}\r\ninline ll lcm(ll a, ll b) {return a / gcd(a, b) * b;}\r\n\r\n\r\nbool cmp(pair<ull,ull> x, pair<ull,ull> y) {\r\n    if(x.ss != y.ss) return (x.ss > y.ss); // descresing order of 2nd elt\r\n    else return (x.ff < y.ff); // incresing order of 1st elt\r\n}\r\n\r\nvoid solve() {\r\n    int n;\r\n    cin >> n;\r\n\r\n    string s,t;\r\n    cin >> s >> t;\r\n\r\n    int sFreq[26] = {0}, tFreq[26]={0};\r\n    for(auto &ch: s) sFreq[ch-'a']++;\r\n    for(auto &ch: t) tFreq[ch-'a']++;\r\n\r\n    bool isCharCountSame = true;\r\n    for(int i = 0; i < 26; i++) \r\n        if(sFreq[i] != tFreq[i]) {\r\n            isCharCountSame = false;\r\n            break;\r\n        }\r\n    \r\n    if(!isCharCountSame) {\r\n        cout << \"NO\";\r\n        return;\r\n    }\r\n\r\n    string ss=\"\", tt=\"\";\r\n    for(auto &ch: s) {\r\n        if(ch != 'b') ss += ch;\r\n    }\r\n\r\n    for(auto &ch: t)\r\n        if(ch != 'b') tt += ch;\r\n\r\n    if(ss != tt) {\r\n        cout << \"NO\";\r\n        return;\r\n    }\r\n    // cout << ss << \" \" << tt;\r\n\r\n    bool isAPosCorrect = true;\r\n    int si = 0, ti = 0;\r\n    while(si < n && ti < n) {\r\n\r\n        while(si < n && s[si] != 'a') si++;\r\n        \r\n        while(ti < n && t[ti] != 'a') ti++;\r\n\r\n        if(si > ti) {\r\n            isAPosCorrect = false;\r\n            break;\r\n        }\r\n        si++;\r\n        ti++;\r\n    }\r\n\r\n    if(!isAPosCorrect) {\r\n        cout << \"NO\";\r\n        return;\r\n    }\r\n\r\n    bool isCPosCorrect = true;\r\n    si = n-1, ti = n-1;\r\n    while(si >= 0 && ti >= 0) {\r\n\r\n        while(si >= 0 && s[si] != 'c') si--;\r\n        \r\n        while(ti >=0 && t[ti] != 'c') ti--;\r\n\r\n        if(si < ti) {\r\n            isCPosCorrect = false;\r\n            break;\r\n        }\r\n        si--;\r\n        ti--;\r\n    }\r\n\r\n    if(!isCPosCorrect) {\r\n        cout << \"NO\";\r\n        return;\r\n    }\r\n\r\n    cout << \"YES\";\r\n}\r\nint main() {\r\n    // your code goes here\r\n    fast;\r\n    #ifndef ONLINE_JUDGE\r\n        freopen(\"../../../input.txt\", \"r\", stdin);\r\n        freopen(\"../../../output.txt\", \"w\", stdout);\r\n        freopen(\"../../../error.txt\", \"w\", stderr);\r\n    #endif\r\n    \r\n    ll t = 1;\r\n    cin >> t;\r\n    \r\n    while(t--) {\r\n        solve();\r\n        \r\n        if(t > 0) cout << endl;\r\n    }\r\n    cout<<fixed<<setprecision(10);\r\n    cerr<<\"Time:\"<<1000*((double)clock())/(double)CLOCKS_PER_SEC<<\"ms\\n\";    \r\n    return 0;\r\n}"
}