{
    "id": 228280901,
    "contestId": 1697,
    "creationTimeSeconds": 1697366003,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1697,
        "index": "C",
        "name": "awoo's Favorite Problem",
        "type": "PROGRAMMING",
        "rating": 1400,
        "tags": [
            "binary search",
            "constructive algorithms",
            "data structures",
            "greedy",
            "implementation",
            "strings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1697,
        "members": [
            {
                "handle": "sahil_sahil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1655044500
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n#include <cmath>\r\n#define ll long long int\r\n#define inf  1e17\r\n#define dl  long double\r\n#define MOD 998244353\r\nusing namespace std;\r\n#define debug(x) cout << #x << \" ---> \" << x << endl;\r\nconst unsigned long long  N = 1e6+1;\r\nconst unsigned int mod = 1e9+7;\r\n//----------------------------------------------------------------------------------------------------------------------------------------------------------------------------//\r\nbool isPrime(ll n){if(n<=1)return false;if(n<=3)return true;if(n%2==0||n%3==0)return false;for(int i=5;i*i<=n;i=i+6)if(n%i==0||n%(i+2)==0)return false;return true;}\r\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\r\nll moduloinverseprime(ll a, ll b) {return expo(a, b - 2, b);}\r\nll moduloaddition(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}\r\nll modulomultiply(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}\r\nll modulosubstraction(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}\r\nll modulodivison(ll a, ll b, ll m) {a = a % m; b = b % m; return (modulomultiply(a, moduloinverseprime(b, m), m) + m) % m;}  //only for prime m\r\nbool isPowerOfTwo(ll n){if(n==0)return false;return (ceil(log2(n)) == floor(log2(n)));}\r\n \r\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------//\r\nbool customSort(const pair<char, ll> &a, const pair<char, ll> &b) {\r\n    // Sort in ascending order of the first element\r\n    if (a.first < b.first) {\r\n        return true;\r\n     } \r\n    //    else if (a.first == b.first) {\r\n    //     // If the first elements are equal, sort in descending order of the second element\r\n    //     return a.second > b.second;\r\n    // }\r\n    // return false;\r\n}\r\n\r\n\r\nbool custom(const pair<char, int> &a, const pair<char, int> &b) {\r\n    // Sort in ascending order of the first element\r\n    if (a.second > b.second) {\r\n        return true;\r\n     } \r\n    //    else if (a.first == b.first) {\r\n    //     // If the first elements are equal, sort in descending order of the second element\r\n    //     return a.second > b.second;\r\n    // }\r\n    // return false;\r\n}\r\n\r\n// good segment technique for tp\r\n// only for posituve numbers\r\n// int i=0;\r\n// int j=0;\r\n// ll sum=0;\r\n// int ans=0;\r\n// while(j<n)\r\n// { \r\n//     sum+=arr[j];\r\n//     while(i<=n && sum>k){\r\n//       sum-=a[i];\r\n//        i++;\r\n//     }\r\n//     ans=max(ans,j-i+1);\r\n//     j++;\r\n// }\r\n\r\n// vector<ll>fac(N,0);\r\n\r\n// void fun()\r\n// {\r\n//     fac[0]=1;\r\n//     for(ll i=1;i<N;i++){\r\n//       fac[i]=(i%mod*fac[i-1]%mod)%mod; \r\n//     }\r\n// }\r\n\r\n\r\n// ll n,k; cin >> n >> k;\r\n//       vector<ll>v(n);\r\n//       for(int i=0;i<n;i++){\r\n//           cin >> v[i];\r\n//       }\r\n\r\n//       int mxsum = 0;\r\n     \r\n//       for(int i=0;i<k;i++){\r\n//          mxsum+=v[i];\r\n//       }\r\n\r\n//       int sum=mxsum;\r\n\r\n//       for(int end=k;end<n;end++){\r\n//          int old_start=end-k;\r\n//          // adding a new value\r\n//          sum+=v[end];\r\n//          // removing a old value from starting\r\n//          sum-=v[old_start];\r\n\r\n//          mxsum=max(mxsum,sum);\r\n//       }\r\n\r\n//       cout << mxsum << endl;\r\n\r\n// ll n,k; cin >> n >> k;\r\n//       vector<ll>v(n);\r\n//       for(int i=0;i<n;i++){\r\n//           cin >> v[i];\r\n//       }\r\n//       int mxsum=0;\r\n//       int sum=0;\r\n//       for(int idx=0;idx<n;i++){\r\n//          int new_end=idx;\r\n//          int old_end=idx-k;\r\n         \r\n//          // adding a  new element to the window \r\n//          sum+=v[new_end];\r\n\r\n//          // remove the old element from the window if the size > k\r\n//          if(old_end>=0){\r\n//            sum-=v[old_end];\r\n//          }\r\n\r\n//          // update the maximum sum if the window size >=k\r\n//          if(new_end>=k-1){\r\n//             mxsum=max(mxsum,sum);\r\n//          }\r\n//       }  50 min se start \r\n\r\n \r\n \r\n \r\n\r\n\r\nint main()\r\n{   \r\n\r\n     ll t; cin >> t;\r\n     while(t--){\r\n            ll n,m; cin >> n >> m;\r\n            vector<string>name(n);\r\n            for(int i=0;i<n;i++){\r\n                 cin >> name[i];\r\n            }\r\n            map<char,int>ma;\r\n            for(int i=0;i<m;i++){\r\n                char ch; cin >> ch;\r\n                ma[ch]++;\r\n            }\r\n            vector<int>v(26,0);\r\n            for(int i=0;i<26;i++){\r\n                 cin >>v[i]; \r\n            }\r\n\r\n            vector<int>count_name(n,0);\r\n            for(int i=0;i<n;i++){\r\n               string temp=name[i];\r\n               int sum=0;\r\n               for(int j=0;j<temp.size();j++){\r\n                   sum+=v[temp[j]-'a'];\r\n               }\r\n               count_name[i]=sum;\r\n            }\r\n\r\n\r\n            sort(count_name.begin(),count_name.end(),greater<int>());\r\n            cout << count_name[0]+count_name[1] << endl;\r\n\r\n            \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     }           \r\n                 \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n "
}