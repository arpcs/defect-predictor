{
    "id": 231317319,
    "contestId": 26,
    "creationTimeSeconds": 1699093751,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 26,
        "index": "C",
        "name": "Parquet",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 26,
        "members": [
            {
                "handle": "only2000-2900"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1281970800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\r\n#include<ext/pb_ds/assoc_container.hpp>\r\n#include<ext/pb_ds/tree_policy.hpp>\r\ntemplate<class T, class _Cmp = std::less<T>>\r\nusing ordered_set = __gnu_pbds::tree<T, __gnu_pbds::null_type, _Cmp, __gnu_pbds::rb_tree_tag, __gnu_pbds::tree_order_statistics_node_update>;\r\n#ifdef LOCAL\r\n#include \"debug.hpp\"\r\n#else \r\n#define debug(...) \r\n#endif\r\nusing namespace std;\r\nusing ll = long long;\r\nusing ld = long double;\r\n\r\nbool solve(vector<vector<char>> &res, int n, int m, int a, int b, int c){\r\n    a -= a & 1;\r\n    b -= b & 1;\r\n    for (int i = 0; i < n; i++){\r\n        for (int j = 0; j < m; j++){\r\n            if (res[i][j]) continue;\r\n            char toUse = 'a';\r\n            while (true){\r\n                bool found = false;\r\n                for (int di = -1; di <= 2; di++){\r\n                    for (int dj = -1; dj <= 2; dj++){\r\n                        if (i + di < 0 || j + dj < 0 || i + di >= res.size() || j + dj >= res[0].size()) continue;\r\n                        if (res[i + di][j + dj] == toUse){\r\n                            toUse++;\r\n                            found = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (!found) break;\r\n            }\r\n            if (i + 1 < n && j + 1 < m && c > 0){\r\n                res[i][j] = toUse;\r\n                res[i + 1][j] = toUse;\r\n                res[i][j + 1] = toUse;\r\n                res[i + 1][j + 1] = toUse;\r\n                c--;\r\n            }\r\n            else if (i + 1 < n && b > 0){\r\n                res[i][j] = toUse;\r\n                res[i + 1][j] = toUse;\r\n                b--;\r\n            }\r\n            else if (j + 1 < m && a > 0){\r\n                res[i][j] = toUse;\r\n                res[i][j + 1] = toUse;\r\n                a--;\r\n            }\r\n            else {\r\n                cerr << i << \" \" << j << \" \" << a << \" \" << b << \" \" << c << \"\\n\";\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    for (auto v: res){\r\n        for (char c: v) cout << c;\r\n        cout << \"\\n\";\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n\r\n    int n, m, a, b, c;\r\n    cin >> n >> m >> a >> b >> c;\r\n    vector<vector<char>> res(n, vector<char>(m));\r\n    if (n & 1){\r\n        if (m & 1) cout << \"IMPOSSIBLE\\n\";\r\n        else if (2 * a < m) cout << \"IMPOSSIBLE\\n\";\r\n        else{\r\n            for (int j = 0; j < m; j++) res[n - 1][j] = 'a' + (j % 4 >= 2);\r\n            a -= m >> 1;\r\n            if (!solve(res, n - 1, m, a, b, c)) cout << \"IMPOSSIBLE\\n\";\r\n        }\r\n    }    \r\n    else if (m & 1){\r\n        if (2 * b < n) cout << \"IMPOSSIBLE\\n\";\r\n        else{\r\n            for (int i = 0; i < n; i++) res[i][m - 1] = 'a' + (i % 4 >= 2);\r\n            b -= n >> 1;\r\n            if (!solve(res, n, m - 1, a, b, c)) cout << \"IMPOSSIBLE\\n\";\r\n        }\r\n    }\r\n    else if (!solve(res, n, m, a, b, c)) cout << \"IMPOSSIBLE\\n\";\r\n\r\n    return 0;\r\n}"
}