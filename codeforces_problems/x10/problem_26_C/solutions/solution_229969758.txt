{
    "id": 229969758,
    "contestId": 26,
    "creationTimeSeconds": 1698390515,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 26,
        "index": "C",
        "name": "Parquet",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 26,
        "members": [
            {
                "handle": "zavodil"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1281970800
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nvector<pair<int, int>> moves = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n\nsigned main() {\n    int n, m, a, b, c;\n    cin >> n >> m >> a >> b >> c;\n    vector<string> res(n, string(m, ' '));\n    function<bool(int, int)> valid = [&](int x, int y) {\n        return x > -1 && x < n && y > -1 && y < m;\n    };\n    function<char(int, int, int, int)> getLetter = [&](int x, int y, int dx, int dy) {\n        vector<bool> used(26, false);\n        for (int i = x; i <= x + dx; i++) {\n            for (int j = y; j <= y + dy; j++) {\n                for (auto _ : moves) {\n                    int di = _.first, dj = _.second;\n                    int ni = di + i, nj = dj + j;\n                    if (valid(ni, nj) && res[ni][nj] != ' ') {\n                        used[res[ni][nj] - 'a'] = true;\n                    }\n                }\n            }\n        }\n        for (int i = 0; i < 26; i++) {\n            if (!used[i]) {\n                return i + 'a';\n            }\n        }\n        return 0;\n    };\n    if (n % 2 && m % 2) {\n        cout << \"IMPOSSIBLE\\n\";\n        return 0;\n    } else if (n % 2) {\n        if (a < m / 2) {\n            cout << \"IMPOSSIBLE\\n\";\n            return 0;\n        }\n        a -= m / 2;\n        for (int j = 0; j < m; j += 2) {\n            res[n - 1][j] = res[n - 1][j + 1] = getLetter(n - 1, j, 0, 1);\n        }\n    } else if (m % 2) {\n        if (b < n / 2) {\n            cout << \"IMPOSSIBLE\\n\";\n            return 0;\n        }\n        b -= n / 2;\n        for (int i = 0; i < n; i += 2) {\n            res[i][m - 1] = res[i + 1][m - 1] = getLetter(i, m - 1, 1, 0);\n        }\n    }\n    for (int i = 0; i < n - 1; i += 2) {\n        for (int j = 0; j < m - 1; j += 2) {\n            if (c > 0) {\n                c -= 1;\n                res[i][j] = res[i + 1][j] = res[i][j + 1] = res[i + 1][j + 1] = getLetter(i, j, 1, 1);\n            } else if (a > 1) {\n                a -= 2;\n                res[i][j] = res[i][j + 1] = getLetter(i, j, 0, 1);\n                res[i + 1][j] = res[i + 1][j + 1] = getLetter(i + 1, j, 0, 1);\n            } else if (b > 1) {\n                b -= 2;\n                res[i][j] = res[i + 1][j] = getLetter(i, j, 1, 0);\n                res[i][j + 1] = res[i + 1][j + 1] = getLetter(i, j + 1, 1, 0);\n            } else {\n                cout << \"IMPOSSIBLE\\n\";\n                return 0;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        cout << res[i] << \"\\n\";\n    }\n}/*1698390514.931901*/"
}