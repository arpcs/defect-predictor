{
    "id": 229978545,
    "contestId": 26,
    "creationTimeSeconds": 1698394970,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 26,
        "index": "C",
        "name": "Parquet",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2000,
        "tags": [
            "combinatorics",
            "constructive algorithms",
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 26,
        "members": [
            {
                "handle": "blojoy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1281970800
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 67,
    "timeConsumedMillis": 30,
    "memoryConsumedBytes": 204800,
    "source": "\r\n#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nvector<pair<int, int>> moves = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\r\n\r\nsigned main() {\r\n    int n, m, a, b, c;\r\n    cin >> n >> m >> a >> b >> c;\r\n    vector<string> res(n, string(m, ' '));\r\n    function<bool(int, int)> valid = [&](int x, int y) {\r\n        return x > -1 && x < n && y > -1 && y < m;\r\n    };\r\n    function<char(int, int, int, int)> getLetter = [&](int x, int y, int dx, int dy) {\r\n        vector<bool> used(26, false);\r\n        for (int i = x; i <= x + dx; i++) {\r\n            for (int j = y; j <= y + dy; j++) {\r\n                for (auto _ : moves) {\r\n                    int di = _.first, dj = _.second;\r\n                    int ni = di + i, nj = dj + j;\r\n                    if (valid(ni, nj) && res[ni][nj] != ' ') {\r\n                        used[res[ni][nj] - 'a'] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        for (int i = 0; i < 26; i++) {\r\n            if (!used[i]) {\r\n                return i + 'a';\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    if (n % 2 && m % 2) {\r\n        cout << \"IMPOSSIBLE\\n\";\r\n        return 0;\r\n    } else if (n % 2) {\r\n        if (a < m / 2) {\r\n            cout << \"IMPOSSIBLE\\n\";\r\n            return 0;\r\n        }\r\n        a -= m / 2;\r\n        for (int j = 0; j < m; j += 2) {\r\n            res[n - 1][j] = res[n - 1][j + 1] = getLetter(n - 1, j, 0, 1);\r\n        }\r\n    } else if (m % 2) {\r\n        if (b < n / 2) {\r\n            cout << \"IMPOSSIBLE\\n\";\r\n            return 0;\r\n        }\r\n        b -= n / 2;\r\n        for (int i = 0; i < n; i += 2) {\r\n            res[i][m - 1] = res[i + 1][m - 1] = getLetter(i, m - 1, 1, 0);\r\n        }\r\n    }\r\n    for (int i = 0; i < n - 1; i += 2) {\r\n        for (int j = 0; j < m - 1; j += 2) {\r\n            if (c > 0) {\r\n                c -= 1;\r\n                res[i][j] = res[i + 1][j] = res[i][j + 1] = res[i + 1][j + 1] = getLetter(i, j, 1, 1);\r\n            } else if (a > 1) {\r\n                a -= 2;\r\n                res[i][j] = res[i][j + 1] = getLetter(i, j, 0, 1);\r\n                res[i + 1][j] = res[i + 1][j + 1] = getLetter(i + 1, j, 0, 1);\r\n            } else if (b > 1) {\r\n                b -= 2;\r\n                res[i][j] = res[i + 1][j] = getLetter(i, j, 1, 0);\r\n                res[i][j + 1] = res[i + 1][j + 1] = getLetter(i, j + 1, 1, 0);\r\n            } else {\r\n                cout << \"IMPOSSIBLE\\n\";\r\n                return 0;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < n; i++) {\r\n        cout << res[i] << \"\\n\";\r\n    }\r\n}\r\n"
}