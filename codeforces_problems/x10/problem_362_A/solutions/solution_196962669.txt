{
    "id": 196962669,
    "contestId": 362,
    "creationTimeSeconds": 1678553739,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 362,
        "index": "A",
        "name": "Two Semiknights Meet",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1500,
        "tags": [
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 362,
        "members": [
            {
                "handle": "Mnesy"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1384443000
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 45,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define endl \"\\n\"\r\n#define int long long\r\n\r\nsigned main() {\r\n    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\r\n#ifdef Clion\r\n    freopen(\"input.txt\", \"r\", stdin);\r\n    freopen(\"output.txt\", \"w\", stdout);\r\n#endif\r\n    int t;\r\n    cin >> t;\r\n    int kdx[] = {-2, -2, +2, +2};\r\n    int kdy[] = {-2, +2, -2, +2};\r\n    while (t--) {\r\n        vector<pair<int, int>> knights;\r\n        vector<vector<char>> grid(8, vector<char>(8));\r\n        for (int i = 0; i < 8; i++) {\r\n            for (int j = 0; j < 8; j++) {\r\n                cin >> grid[i][j];\r\n                if (grid[i][j] == 'K')\r\n                    knights.emplace_back(i, j);\r\n            }\r\n        }\r\n        auto bfs = [&](int x, int y, vector<vector<int>> &dis) {\r\n            queue<pair<int, int>> q;\r\n            q.push({x, y});\r\n            dis[x][y] = 0;\r\n            while (!q.empty()) {\r\n                auto u = q.front();\r\n                q.pop();\r\n                for (int i = 0; i < 4; i++) {\r\n                    int dx = kdx[i] + u.first;\r\n                    int dy = kdy[i] + u.second;\r\n                    if (dx >= 0 and dx < 8 and dy >= 0 and dy < 8 and dis[dx][dy] == -1) {\r\n                        dis[dx][dy] = dis[u.first][u.second] + 1;\r\n                        q.push({dx, dy});\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        vector<vector<int>> dis1(8, vector<int>(8, -1)), dis2(8, vector<int>(8, -1));\r\n        bfs(knights[0].first, knights[0].second, dis1);\r\n        bfs(knights[1].first, knights[1].second, dis2);\r\n        bool flag = false;\r\n        for (int i = 0; i < 8; i++)\r\n            for (int j = 0; j < 8; j++)\r\n                if (dis1[i][j] != -1 and dis1[i][j] % 2 == dis2[i][j] % 2 and grid[i][j] != '#')\r\n                    flag = true;\r\n        cout << ((flag) ? \"YES\" : \"NO\") << endl;\r\n    }\r\n}"
}