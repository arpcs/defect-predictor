{
    "contestId": 696,
    "index": "D",
    "name": "Legen...",
    "type": "PROGRAMMING",
    "points": 2000.0,
    "rating": 2500,
    "tags": [
        "data structures",
        "dp",
        "matrices",
        "strings"
    ],
    "desc": {
        "title": "D. Legen...",
        "statement": "<p>Barney was hanging out with Nora for a while and now he thinks he may have feelings for her. Barney wants to send her a cheesy text message and wants to make her as happy as possible.</p><center> <img class=\"tex-graphics\" src=\"https://espresso.codeforces.com/8f46aea607995d59b7beaacbbe891c451bd38e17.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/> </center><p>Initially, happiness level of Nora is <span class=\"tex-span\">0</span>. Nora loves some pickup lines like \"I'm falling for you\" and stuff. Totally, she knows <span class=\"tex-span\"><i>n</i></span> pickup lines, each consisting only of lowercase English letters, also some of them may be equal (in writing, but different in pronouncing or meaning though). Every time Nora sees <span class=\"tex-span\"><i>i</i></span>-th pickup line as a <span class=\"tex-font-style-bf\">consecutive subsequence</span> of Barney's text message her happiness level increases by <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span>. These substrings may overlap, for example, Nora will see the pickup line <span class=\"tex-font-style-tt\">aa</span> twice and the pickup line <span class=\"tex-font-style-tt\">ab</span> once in text message <span class=\"tex-font-style-tt\">aaab</span>.</p><p>Due to texting app limits, Barney's text may have up to <span class=\"tex-span\"><i>l</i></span> characters.</p><p>Barney asked you to help him make Nora as much happy as possible, it's gonna be legen...</p>",
        "inputSpecification": "<p>The first line of input contains two integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>l</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>n</i>\u2009\u2264\u2009200,\u20091\u2009\u2264\u2009<i>l</i>\u2009\u2264\u200910<sup class=\"upper-index\">14</sup></span>)\u00a0\u2014 the number of pickup lines and the maximum length of Barney's text.</p><p>The second line contains <span class=\"tex-span\"><i>n</i></span> integers <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\">1</sub>,\u2009<i>a</i><sub class=\"lower-index\">2</sub>,\u2009...,\u2009<i>a</i><sub class=\"lower-index\"><i>n</i></sub></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>a</i><sub class=\"lower-index\"><i>i</i></sub>\u2009\u2264\u2009100</span>), meaning that Nora's happiness level increases by <span class=\"tex-span\"><i>a</i><sub class=\"lower-index\"><i>i</i></sub></span> after every time seeing <span class=\"tex-span\"><i>i</i></span>-th pickup line.</p><p>The next <span class=\"tex-span\"><i>n</i></span> lines contain the pickup lines. <span class=\"tex-span\"><i>i</i></span>-th of them contains a single string <span class=\"tex-span\"><i>s</i><sub class=\"lower-index\"><i>i</i></sub></span> consisting of only English lowercase letter. Summary length of all pickup lines does not exceed <span class=\"tex-span\">200</span>.</p><p><span class=\"tex-font-style-bf\">All strings are not empty</span>.</p>",
        "outputSpecification": "<p>Print the only integer\u00a0\u2014 the maximum possible value of Nora's happiness level after reading Barney's text.</p>",
        "samples": [
            {
                "input": "3 6<br/>3 2 1<br/>heart<br/>earth<br/>art<br/>",
                "output": "6<br/>"
            },
            {
                "input": "3 6<br/>3 2 8<br/>heart<br/>earth<br/>art<br/>",
                "output": "16<br/>"
            }
        ],
        "note": "<p>An optimal answer for the first sample case is <span class=\"tex-font-style-tt\">hearth</span> containing each pickup line exactly once.</p><p>An optimal answer for the second sample case is <span class=\"tex-font-style-tt\">artart</span>.</p>"
    },
    "suggested_categories": [
        "string manipulation",
        "dynamic programming",
        "algorithm design",
        "text processing",
        "pattern matching",
        "substring search",
        "optimization",
        "happiness maximization",
        "greedy algorithms",
        "computational efficiency",
        "data structures",
        "pattern recognition",
        "sequence analysis",
        "combinatorial optimization",
        "language processing",
        "text analysis",
        "search algorithms",
        "problem solving",
        "algorithmic complexity",
        "mathematical modeling"
    ]
}