{
    "id": 128243912,
    "contestId": 696,
    "creationTimeSeconds": 1631114014,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 696,
        "index": "D",
        "name": "Legen...",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "data structures",
            "dp",
            "matrices",
            "strings"
        ]
    },
    "author": {
        "contestId": 696,
        "members": [
            {
                "handle": "jiawenzhuo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1468514100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 5324800,
    "source": "#include <cstdio>\r\n#include <queue>\r\n#include <cstring>\r\nusing namespace std;\r\n#define LL long long\r\nconst int N = 210;\r\ninline LL max(LL x, LL y) {return x > y ? x : y;}\r\nstruct Matrix {\r\n\tLL a[N][N]; int n, m;\r\n\tMatrix operator * (const Matrix &rhs) {\r\n\t\tMatrix ret; ret.n = n; ret.m = rhs.m;\r\n\t\tfor(register int i = 0; i <= n; ++i)\r\n\t\t\tfor(register int j = 0; j <= rhs.m; ++j) {\r\n\t\t\t\tret.a[i][j] = -1;\r\n\t\t\t\tfor(register int k = 0; k <= m; ++k)\r\n\t\t\t\t\tif(a[i][k] > -1 && rhs.a[k][j] > -1)\r\n\t\t\t\t\t\tret.a[i][j] = max(ret.a[i][j], a[i][k] + rhs.a[k][j]);\r\n\t\t\t}\r\n\t\treturn ret;\r\n\t}\r\n}A, B;\r\nchar str[N]; bool vis[N]; LL T;\r\nint ch[N][26], last[N], fail[N], a[N], val[N], sum[N], n, node;\r\ninline void getFail() {\r\n\tqueue<int> que;\r\n\tfor(register int i = 0; i < 26; ++i) {\r\n\t\tint u = ch[0][i];\r\n\t\tif(u) {que.push(u); last[u] = fail[u] = 0;}\r\n\t}\r\n\twhile(!que.empty()) {\r\n\t\tint u = que.front(); que.pop();\r\n\t\tfor(register int i = 0; i < 26; ++i) {\r\n\t\t\tint v = ch[u][i];\r\n\t\t\tif(!v) {ch[u][i] = ch[fail[u]][i]; continue;}\r\n\t\t\tque.push(v);\r\n\t\t\tfail[v] = ch[fail[u]][i];\r\n\t\t\tlast[v] = val[fail[v]] ? fail[v] : last[fail[v]];\r\n\t\t\tsum[v] = sum[last[v]] + val[v];\r\n\t\t}\r\n\t}\r\n}\r\nint main() {\r\n//\tfreopen(\"input.in\", \"r\", stdin);\r\n//\tfreopen(\"output.out\", \"w\", stdout);\r\n\tscanf(\"%d %lld\", &n, &T);\r\n\tfor(register int i = 1; i <= n; ++i) scanf(\"%d\", &a[i]);\r\n\tfor(register int i = 1; i <= n; ++i) {\r\n\t\tscanf(\"%s\", str); int k = strlen(str);\r\n\t\tint u = 0;\r\n\t\tfor(register int j = 0; j < k; ++j) {\r\n\t\t\tif(!ch[u][str[j] - 'a']) ch[u][str[j] - 'a'] = ++node;\r\n\t\t\tu = ch[u][str[j] - 'a'];\r\n\t\t}\r\n\t\tval[u] += a[i];\r\n\t}\r\n\tgetFail();\r\n\tA.n = A.m = node;\r\n\tB.n = B.m = node;\r\n\tfor(register int i = 0; i <= node; ++i)\r\n\t\tfor(register int j = 0; j <= node; ++j)\r\n\t\t\tif(i != j) B.a[i][j] = -1;\r\n\tfor(register int u = 0; u <= node; ++u) {\r\n\t\tmemset(vis, false, sizeof(vis));\r\n\t\tfor(register int i = 0; i < 26; ++i) {\r\n\t\t\tA.a[u][ch[u][i]] = sum[ch[u][i]];\r\n\t\t\tvis[ch[u][i]] = true;\r\n\t\t}\r\n\t\tfor(register int i = 0; i <= node; ++i)\r\n\t\t\tif(!vis[i]) A.a[u][i] = -1;\r\n\t}\r\n\twhile(T) {\r\n\t\tif(T & 1) B = B * A;\r\n\t\tA = A * A;\r\n\t\tT >>= 1;\r\n\t}\r\n\tLL ans = 0;\r\n\tfor(register int i = 0; i <= node; ++i) ans = max(ans, B.a[0][i]);\r\n\tprintf(\"%lld\", ans);\r\n\treturn 0;\r\n}"
}