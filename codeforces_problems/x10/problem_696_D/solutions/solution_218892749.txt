{
    "id": 218892749,
    "contestId": 696,
    "creationTimeSeconds": 1692087024,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 696,
        "index": "D",
        "name": "Legen...",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2500,
        "tags": [
            "data structures",
            "dp",
            "matrices",
            "strings"
        ]
    },
    "author": {
        "contestId": 696,
        "members": [
            {
                "handle": "bai_hong123"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1468514100
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 42,
    "timeConsumedMillis": 733,
    "memoryConsumedBytes": 2764800,
    "source": "// LUOGU_RID: 121026865\n#include<bits/stdc++.h>\r\n#define ll long long\r\nusing namespace std;\r\nstruct node{ int fail,son[27],s; } t[1005];\r\nint n,v[205],cnt; ll L,res; char a[205];\r\ninline ll max(const ll &x,const ll &y){ return x>y ? x:y; }\r\nstruct marix{\r\n\tll mat[205][205];\r\n\tmarix(){ memset(mat,0xc0,sizeof(mat)); }\r\n\tinline void init(){ for (int i=1;i<=200;i++) mat[i][i]=0; }\r\n\tmarix operator * (const marix &tmp) const{\r\n\t\tmarix res; \r\n\t\tfor (register int i=1;i<=200;i++)\r\n\t\tfor (register int k=1;k<=200;k++)\r\n\t\tfor (register int j=1;j<=200;j++)\r\n\t\t\tres.mat[i][j]=max(res.mat[i][j],mat[i][k]+tmp.mat[k][j]);\r\n\t\treturn res;\r\n\t}\r\n} A,B;\r\nvoid insert(int dvl){\r\n\tint u=0,l=strlen(a);\r\n\tfor (int i=0;i<l;i++){\r\n\t\tint pl=a[i]-'a';\r\n\t\tif (!t[u].son[pl]) t[u].son[pl]=++cnt;\r\n\t\tu=t[u].son[pl];\r\n\t} t[u].s+=dvl;\r\n}\r\nvoid getfail(){\r\n\tqueue<int> q;\r\n\tt[0].fail=0;\r\n\tfor (int i=0;i<26;i++)\r\n\t\tif (t[0].son[i]){\r\n\t\t\tt[t[0].son[i]].fail=0;\r\n\t\t\tq.push(t[0].son[i]);\r\n\t\t}\r\n\twhile (!q.empty()){\r\n\t\tint u=q.front(); q.pop();\r\n\t\tfor (int i=0;i<26;i++)\r\n\t\t\tif (t[u].son[i]){\r\n\t\t\t\tt[t[u].son[i]].fail=t[t[u].fail].son[i];\r\n\t\t\t\tq.push(t[u].son[i]);\r\n\t\t\t} else t[u].son[i]=t[t[u].fail].son[i];\r\n\t\tt[u].s+=t[t[u].fail].s;\r\n\t}\r\n}\r\nmarix kkk(marix a,ll b){\r\n\tmarix res; res.init();\r\n\twhile (b){\r\n\t\tif (b&1) res=res*a;\r\n\t\tb>>=1; a=a*a;\r\n\t} return res;\r\n}\r\nint main(){\r\n\tscanf(\"%d%lld\",&n,&L);\r\n\tfor (int i=1;i<=n;i++)\r\n\t\tscanf(\"%d\",&v[i]);\r\n\tfor (int i=1;i<=n;i++)\r\n\t\tscanf(\"%s\",a),insert(v[i]);\r\n\tgetfail(); \r\n\tfor (int i=0;i<=cnt;i++)\r\n\t\tfor (int j=0;j<26;j++)\r\n\t\t\tB.mat[i+1][t[i].son[j]+1]=max(B.mat[i+1][t[i].son[j]+1],(ll)t[t[i].son[j]].s);\r\n\tA.mat[1][1]=0;\r\n\tA=A*kkk(B,L);\r\n\tfor (int i=1;i<=cnt+1;i++)\r\n\t\tres=max(res,A.mat[1][i]);\r\n\tprintf(\"%lld\",res); \r\n\treturn 0;\r\n}\r\n/*\r\n3 6\r\n3 2 1\r\nheart\r\nearth\r\nart\r\n*/"
}