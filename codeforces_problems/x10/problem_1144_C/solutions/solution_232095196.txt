{
    "id": 232095196,
    "contestId": 1144,
    "creationTimeSeconds": 1699544834,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1144,
        "index": "C",
        "name": "Two Shuffled Sequences",
        "type": "PROGRAMMING",
        "rating": 1000,
        "tags": [
            "constructive algorithms",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1144,
        "members": [
            {
                "handle": "vjudge5"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1554041100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 1638400,
    "source": "#include <bits/stdc++.h>\n#define Eng_Abdulla          \\\n    ios::sync_with_stdio(0); \\\n    cin.tie(0);\n#define ON(n, k) ((n) | (1 << k))\n// n is number and k is postion i need to make it on\n// cout << ON(5,1) from right\n// sheft left << x.2(pow)n\n// sheft rite >> x /2(pow)n\n// 1>>n ==   1/2 pow n\n// l<<n  == 1 *2(pow n)\n#define OFF(n, k) ((n) & ~(1 << k))\n#define is_ON(n, k) (((n) >> (k)) & 1)\n// #define is_ON_OR_OFF(n, k)((n) & (1ll<<(k))) up is more productive as overflow but we can make 1ll as 64 bit\n#define ll long long\n#define ull unsigned long long\n#define dd double\n#define ld long double\n#define PQ priority_queue\n#define pii pair<int, int>\n#define pll pair<ll, ll>\n#define S second\n#define F first\n#define MP make_pair\n#define endl \"\\n\"\n#define PI 3.14159265\nusing namespace std;\nconst int sz = 1e3 + 10;\nconst int OO = 0x3f3f3f3f;\n\nvoid init_code()\n{\n    Eng_Abdulla;\n#ifndef ONLINE_JUDGE\n    freopen(\"input.txt\", \"r\", stdin);\n    freopen(\"outpot.txt\", \"w\", stdout);\n#endif\n}\n\nbool isPrime(ll n)\n{\n    if (n <= 1)\n        return false;\n    if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (ll i = 5; i * i <= n; i += 6)\n    {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n    }\n    return true;\n}\n\nll fastPower(ll base, ll power)\n{\n    if (power == 0)\n    {\n        return 1;\n    }\n\n    if (power == 0)\n    {\n        return base;\n    }\n\n    int ans = fastPower(base, power / 2); // add if need to moduls\n                                          // 2^8 = 2^4 * 2^4\n    ans = (1ll * ans * ans);              // add\n\n    if (power % 2 == 1)\n    {\n        ans = (1ll * ans * base); //%a\n    }\n    // 2^10\n    // 2^5\n    // 2^2\n    return ans;\n}\nll clear_bit(ll num, ll postion)\n{\n    // 1,0 be 0\n    return (num & ~(1 << postion));\n    // 10010\n    //~00010 == 11101\n    // 10000\n}\ninline int getbit(int num, int idx)\n{\n    return ((num >> idx) & 1);\n}\ninline int set_bit01(int num, int postion)\n{\n    // 0 to 1\n    return (num | (1 << postion));\n    // 10010\n    // 10001\n    // 10011\n}\ninline int set_bit10(int num, int postion)\n{\n    // 1 to 0\n    return num & ~(1 << postion);\n}\nll flib(ll num, ll postion)\n{\n    // 0 be 1\n    // 1 be 0\n    return (num ^ (1 << postion));\n    // 10010\n    // 00010\n    // 10000\n}\nll change_first_bit1(ll num)\n{ // strip lowest first bet\n    // 1 to 0 first bit one from right to left\n    return (num & (num - 1));\n    // num =  10000000000\n    // num-1 = 0111111111\n    // &\n    // = 00000000000\n}\n\nll value_first_bit1(ll num)\n{\n    return (num & ~(num - 1));\n}\nll lowest_set_bit(ll num)\n{\n    return (num & (-num));\n    //-num two's complement\n    // 10010\n    // 01110\n    // 00010\n}\n\nll gcd(ll a, ll b)\n{\n    if (b == 0)\n        return a;\n    return gcd(b, a % b);\n}\n\nll lcm(ll a, ll b)\n{\n    return ((a * b) / gcd(a, b));\n}\n\nstring DecimalToBinary1(ll n)\n{\n    if (n == 0)\n    {\n        return \"0\";\n    }\n    string binary = \"\";\n    while (n)\n    {\n        binary += to_string(n % 2);\n        n /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\n\nstring DecimalToBinary2(ll n)\n{\n\n    string binary = \"\";\n    for (int i = 31; i >= 0; i--)\n    {\n        binary += to_string(is_ON(n, i));\n    }\n\n    return binary;\n}\n\nint twoPower(int x)\n{\n    return 1 << x;\n    // more faster\n    // As sheft operation which listem at computer hardware all of\n    // logical operator\n}\nll check_num_is_power_of2(ll num)\n{\n    if (num == 0)\n        return 0;\n    return (!(num & num - 1));\n    // 1000\n    // 0111\n    // 0000\n    // or __builtin_popcount(n)\n}\nint __log2(int n)\n{\n    int log = 0;\n    while (n)\n        n = (n >> 1);\n    // n >>= 1\n    // shift right /2\n    {\n        ++log;\n    }\n    return log;\n}\ninline bool isodd(int x)\n{\n    return x & 1;\n}\nll sum_0_to_n(ll n)\n{\n    return (n) * (n + 1) / 2;\n}\n\nint main()\n{\n    // init_code();\n    Eng_Abdulla;\n\n    ll a;\n    cin >> a;\n    ll arr[a];\n    ll m = 200005;\n    ll freq[m] = {};\n    int counter = 0;\n    int counter2 = 0;\n    for (int i = 0; i < a; ++i)\n    {\n        cin >> arr[i];\n        freq[arr[i]]++;\n    }\n\n    for (int i = 0; i < m; ++i)\n    {\n        if (freq[i] > 2)\n        {\n            cout << \"NO\";\n            return 0;\n        }\n    }\n    cout << \"YES\\n\";\n    for (int i = 0; i < m; ++i)\n    {\n        if (freq[i] == 2)\n        {\n            counter++;\n            counter2++;\n        }\n        else if (freq[i] == 1)\n        {\n            counter2++;\n        }\n    }\n    cout << counter << endl;\n    for (int i = 0; i < m; ++i)\n    {\n        if (freq[i] == 2)\n        {\n            cout << i << \" \"<< endl;\n        }\n        freq[i]--;\n    }\n    cout << counter2 << endl;\n    for (int i = 200000; i >= 0; i--)\n    {\n        if (freq[i] > 0)\n        {\n            cout << i << \" \";\n        }\n    }\n}\n\n\t\t  \t  \t\t\t \t   \t\t \t\t \t\t\t   \t \t\t"
}