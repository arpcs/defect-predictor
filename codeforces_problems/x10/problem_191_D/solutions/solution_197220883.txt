{
    "id": 197220883,
    "contestId": 191,
    "creationTimeSeconds": 1678704044,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 191,
        "index": "D",
        "name": "Metro Scheme",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 191,
        "members": [
            {
                "handle": "1l2u3o"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338132600
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 61,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 18841600,
    "source": "// LUOGU_RID: 104607399\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntemplate<class T>void Rd(T &x) {\r\n  char c; bool f(1);\r\n  while (!isdigit(c = getchar())) f = c != '-';\r\n  x = T(c ^ 48);\r\n  while (isdigit(c = getchar())) x = x * 10 + (c ^ 48);\r\n  x = f ? x : -x;\r\n}\r\ntemplate<class A,class...B>void Rd(A &x,B&...y) { Rd(x), Rd(y...);}\r\n#define meow(...) fprintf(stderr, __VA_ARGS__)\r\n\r\nnamespace solution {\r\n  constexpr int N(1e5);\r\n  int n, m, dfn[N + 5], low[N + 5], cnt_d, deg[N + 5];\r\n  int head[N + 5], cnt_e(1), cnt_ecc, ecc[N + 5];\r\n  struct E { int v, nx; } e[N * 4 + 5];\r\n  bool bri[N * 4 + 5];\r\n  vector<int> vec[N + 5];\r\n\r\n  void Adde(int u, int v) {\r\n    e[++cnt_e] = E{v, head[u]}, head[u] = cnt_e, ++deg[v];\r\n  }\r\n\r\n  #define Go(u) for (int i(head[u]), v; v = e[i].v, i; i = e[i].nx) \r\n\r\n  void Tarjan(int u, int pre) {\r\n    dfn[u] = low[u] = ++cnt_d;\r\n    Go(u)\r\n      if (!dfn[v]) {\r\n        Tarjan(v, u), low[u] = min(low[u], low[v]);\r\n        if (low[v] > dfn[u]) bri[i] = bri[i ^ 1] = 1;\r\n      }\r\n      else if (v != pre) low[u] = min(low[u], dfn[v]);\r\n  }\r\n\r\n  void Dfs(int u, int col) {\r\n    vec[ecc[u] = col].push_back(u);\r\n    Go(u) if (!bri[i] && !ecc[v]) Dfs(v, col);\r\n  }\r\n  void work() {\r\n    Rd(n, m);\r\n    if (!m) return printf(\"0 0\"), void();\r\n    for (int i(1), u, v; i <= m; ++i) Rd(u, v), Adde(u, v), Adde(v, u);\r\n    for (int i(1); i <= n; ++i) if (!dfn[i]) Tarjan(i, 0);\r\n    for (int i(1); i <= n; ++i) if (!ecc[i]) Dfs(i, ++cnt_ecc);\r\n    if (cnt_ecc == 1) return printf(\"1 %d\\n\", m), void();\r\n    int ans(1);\r\n    for (int i(1); i <= n; ++i) ans += deg[i] & 1;\r\n    ans >>= 1;\r\n    for (int i(1); i <= cnt_ecc; ++i) {\r\n      int cnt(0);\r\n      for (auto j : vec[i]) cnt += deg[j] >= 3;\r\n      if (vec[i].size() != 1 && cnt <= 1) ++ans;\r\n    }\r\n    printf(\"%d %d\", ans, m);\r\n  }\r\n}\r\n\r\nint _(1);\r\nvoid file() {\r\n  // freopen(\".in\", \"r\", stdin);\r\n  // freopen(\".out\", \"w\", stdout);\r\n}\r\nvoid clear() {\r\n  using namespace solution;\r\n  if (!_) return ;\r\n}\r\n\r\nint main() {\r\n  for (file(); _--; ) solution::work(), clear();\r\n}"
}