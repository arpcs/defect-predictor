{
    "id": 197178448,
    "contestId": 191,
    "creationTimeSeconds": 1678677873,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 191,
        "index": "D",
        "name": "Metro Scheme",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2700,
        "tags": [
            "graphs",
            "greedy"
        ]
    },
    "author": {
        "contestId": 191,
        "members": [
            {
                "handle": "ExplodingKonjac"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1338132600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 61,
    "timeConsumedMillis": 186,
    "memoryConsumedBytes": 19558400,
    "source": "// LUOGU_RID: 104574374\n#include <bits/stdc++.h>\nusing namespace std;\n//#define OPENIOBUF\n\nnamespace FastIO\n{\n\nclass FastIOBase\n{\n protected:\n#ifdef OPENIOBUF\n\tstatic const int BUFSIZE=1<<22;\n\tchar buf[BUFSIZE+1];\n\tint buf_p=0;\n#endif\n\tFILE *target;\n public:\n#ifdef OPENIOBUF\n\tvirtual void flush()=0;\n#endif\n\tFastIOBase(FILE *f): target(f){}\n\t~FastIOBase()=default;\n};\n\nclass FastOutput: public FastIOBase\n{\n#ifdef OPENIOBUF\n public:\n\tinline void flush()\n\t\t{ fwrite(buf,1,buf_p,target),buf_p=0; }\n#endif\n protected:\n\tinline void __putc(char x)\n\t{\n#ifdef OPENIOBUF\n\t\tif(buf[buf_p++]=x,buf_p==BUFSIZE)flush();\n#else\n\t\tputc(x,target);\n#endif\n\t}\n\ttemplate<typename T>\n\tinline void __write(T x)\n\t{\n\t\tstatic char stk[64],*top;top=stk;\n\t\tif(x<0) return __putc('-'),__write(-x);\n\t\tdo *(top++)=x%10,x/=10; while(x);\n\t\tfor(;top!=stk;__putc(*(--top)+'0'));\n\t}\n public:\n\tFastOutput(FILE *f=stdout): FastIOBase(f){}\n#ifdef OPENIOBUF\n\tinline void setTarget(FILE *f) { this->flush(),target=f; }\n\t~FastOutput(){ flush(); }\n#else\n\tinline void setTarget(FILE *f) { target=f; }\n#endif\n\ttemplate<typename ...T>\n\tinline void writesp(const T &...x)\n\t\t{ initializer_list<int>{(this->operator<<(x),__putc(' '),0)...}; }\n\ttemplate<typename ...T>\n\tinline void writeln(const T &...x)\n\t\t{ initializer_list<int>{(this->operator<<(x),__putc('\\n'),0)...}; }\n\tinline FastOutput &operator <<(char x)\n\t\t{ return __putc(x),*this; }\n\tinline FastOutput &operator <<(const char *s)\n\t\t{ for(;*s;__putc(*(s++)));return *this; }\n\tinline FastOutput &operator <<(const string &s)\n\t\t{ return (*this)<<s.c_str(); }\n\ttemplate<typename T,typename=typename enable_if<is_integral<T>::value>::type>\n\tinline FastOutput &operator <<(const T &x)\n\t\t{ return __write(x),*this; }\n}qout;\n\nclass FastInput: public FastIOBase\n{\n#ifdef OPENIOBUF\n public:\n\tinline void flush()\n\t\t{ buf[fread(buf,1,BUFSIZE,target)]='\\0',buf_p=0; }\n#endif\n protected:\n\tinline char __getc()\n\t{\n#ifdef OPENIOBUF\n\t\tif(buf_p==BUFSIZE) flush();\n\t\treturn buf[buf_p++];\n#else\n\t\treturn getc(target);\n#endif\n\t}\n public:\n#ifdef OPENIOBUF\n\tFastInput(FILE *f=stdin): FastIOBase(f){ buf_p=BUFSIZE; }\n\tinline void setTarget(FILE *f) { this->flush(),target=f; }\n#else\n\tFastInput(FILE *f=stdin): FastIOBase(f){}\n\tinline void setTarget(FILE *f) { target=f; }\n#endif\n\tinline char getchar() { return __getc(); }\n\ttemplate<typename ...T>\n\tinline void read(T &...x)\n\t\t{ initializer_list<int>{(this->operator>>(x),0)...}; }\n\tinline FastInput &operator >>(char &x)\n\t\t{ while(isspace(x=__getc()));return *this; }\n\ttemplate<typename T,typename=typename enable_if<is_integral<T>::value>::type>\n\tinline FastInput &operator >>(T &x)\n\t{\n\t\tstatic char ch,sym;x=sym=0;\n\t\twhile(isspace(ch=__getc()));\n\t\tif(ch=='-') sym=1,ch=__getc();\n\t\tfor(;isdigit(ch);x=(x<<1)+(x<<3)+(ch^48),ch=__getc());\n\t\treturn sym?x=-x:x,*this;\n\t}\n\tinline FastInput &operator >>(char *s)\n\t{\n\t\twhile(isspace(*s=__getc()));\n\t\tfor(;!isspace(*s) && *s && ~*s;*(++s)=__getc());\n\t\treturn *s='\\0',*this;\n\t}\n\tinline FastInput &operator >>(string &s)\n\t{\n\t\tchar str_buf[(1<<8)+1],*p=str_buf;\n\t\tchar *const buf_end=str_buf+(1<<8);\n\t\twhile(isspace(*p=__getc()));\n\t\tfor(s.clear(),p++;;p=str_buf)\n\t\t{\n\t\t\tfor(;p!=buf_end && !isspace(*p=__getc()) && *p && ~*p;p++);\n\t\t\t*p='\\0',s.append(str_buf);\n\t\t\tif(p!=buf_end) break;\n\t\t}\n\t\treturn *this;\n\t}\n}qin;\n\n} // namespace FastIO\nusing namespace FastIO;\n\nusing LL=long long;\nusing LD=long double;\nusing UI=unsigned int;\nusing ULL=unsigned long long;\n\n#ifndef DADALZY\n#define FILEIO(file) freopen(file\".in\",\"r\",stdin),freopen(file\".out\",\"w\",stdout)\n#else\n#define FILEIO(file)\n#endif\n\nint n,m,ans,deg[100005];\nvector<int> g[100005];\nint tot,top,nn,dfn[100005],low[100005],st[100005];\nbool vis[100005];\nvector<int> c[100005];\nvoid tarjan(int u,int fa=0)\n{\n\tdfn[u]=low[u]=++tot;\n\tst[++top]=u,vis[u]=true;\n\tfor(auto &v: g[u])\n\t{\n\t\tif(v==fa) continue;\n\t\tif(!dfn[v]) tarjan(v,u),low[u]=min(low[u],low[v]);\n\t\telse if(vis[v]) low[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u])\n\t{\n\t\tint x,y=++nn;\n\t\tdo x=st[top--],vis[x]=false,c[y].push_back(x);\n\t\twhile(x!=u);\n\t}\n}\nint main()\n{\n\tqin>>n>>m;\n\tif(!m) return qout<<0<<' '<<m<<'\\n',0;\n\tfor(int i=1,u,v;i<=m;i++)\n\t{\n\t\tqin>>u>>v,deg[u]++,deg[v]++;\n\t\tg[u].push_back(v);\n\t\tg[v].push_back(u);\n\t}\n\tfor(int i=1;i<=n;i++) if(!dfn[i]) tarjan(i);\n\tif(nn==1) return qout<<1<<' '<<m<<'\\n',0;\n\tfor(int i=1;i<=n;i++) ans+=(deg[i]&1);\n\tans>>=1;\n\tfor(int i=1;i<=nn;i++)\n\t{\n\t\tif(c[i].size()==1) continue;\n\t\tint cnt=0;\n\t\tfor(auto &u: c[i]) cnt+=(deg[u]>=3);\n\t\tans+=(cnt<2);\n\t}\n\tqout<<ans<<' '<<m<<'\\n';\n\treturn 0;\n}"
}