{
    "id": 1402898,
    "contestId": 100,
    "creationTimeSeconds": 1332585779,
    "relativeTimeSeconds": 10079,
    "problem": {
        "contestId": 100,
        "index": "J",
        "name": "Interval Coloring",
        "type": "PROGRAMMING",
        "rating": 2400,
        "tags": [
            "*special",
            "greedy",
            "math"
        ]
    },
    "author": {
        "contestId": 100,
        "members": [
            {
                "handle": "Orfest"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1332575700
    },
    "programmingLanguage": "Pike",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 130,
    "memoryConsumedBytes": 6758400,
    "source": "int main() {\n  int n = (int)Stdio.stdin->gets();\n  array(string) a = allocate(n);\n  array(mixed) b = allocate(n);\n  for (int i = 0; i < n; i++) {\n    a[i] = Stdio.stdin->gets();\n    int j =1;\n    for (;a[i][j]!=',';j++);\n    int l = sizeof(a[i]);\n    b[i]=allocate(4);\n    b[i][0]=(int)a[i][ 1..(j-1) ];\n    b[i][1]=(int)a[i][ (j+1)..(l-2) ];\n    if (a[i][0]=='(')b[i][2]=0;\n    else b[i][2]=1;\n    if (a[i][l-1]==')')b[i][3]=0;\n    else b[i][3]=1;\n  }\n  array(int) connected = allocate(n*n);\n  for (int i = 0; i < n; i++) {\n    for (int j = 0; j < n; j++) {\n      connected[i*n+j]=0;\n    }\n  }\n  for (int i = 0; i < n; i++) {\n    for (int j = i+1; j < n; j++) {\n      if (b[i][1]<b[j][0]) continue;\n      if (b[j][1]<b[j][0]) continue;\n      int q = 0;\n      if (b[i][1] > b[j][0] && b[i][1] < b[j][1]) q = 1;\n      if (b[i][0] > b[j][0] && b[i][0] < b[j][1]) q = 1;\n      if (b[j][1] > b[i][0] && b[j][1] < b[i][1]) q = 1;\n      if (b[j][0] > b[i][0] && b[j][0] < b[i][1]) q = 1;\n      if (b[i][1]==b[j][0]&&b[i][3]==1&&b[j][2]==1)q=1;\n      if (b[j][1]==b[i][0]&&b[j][3]==1&&b[i][2]==1)q=1;\n      if (q==0)continue;\n      connected[i*n+j]=connected[j*n+i]=1;\n    }\n  }\n  int mx = 1;\n  for (int i = 0; i < n; i++) {\n    int cur = 0;\n    for (int j = 0; j < n; j++) if (j != i) {\n      if (connected[i*n+j]) {\n        cur++;\n      }\n    }\n    mx = max(mx,cur);\n  }\n  write(\"%d\\n\",mx);\n  return 0;\n}\n"
}