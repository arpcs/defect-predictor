{
    "id": 232561976,
    "contestId": 702,
    "creationTimeSeconds": 1699827734,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 702,
        "index": "B",
        "name": "Powers of Two",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "brute force",
            "data structures",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 702,
        "members": [
            {
                "handle": "bkifhr6"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1469804400
    },
    "programmingLanguage": "Clang++17 Diagnostics",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 13,
    "timeConsumedMillis": 2947,
    "memoryConsumedBytes": 8806400,
    "source": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nint main()\n{\n    int size, ele;\n    cin >> size;\n    vector<int> l(size);\n\n    for (int i = 0; i < size; i++)\n    {\n        cin >> l[i];\n    }\n\n    unordered_map<int, int> frequency;\n    int count = 0;\n\n    for (int i = 0; i < size; i++)\n    {\n        int curr = l[i];\n\n        for (int j = 0; j < 31; j++)\n        {\n            int target = (1 << j) - curr;\n\n            // Check if the target exists in the frequency map\n            if (frequency.find(target) != frequency.end())\n            {\n                count += frequency[target];\n            }\n        }\n\n        // Increment the frequency of the current element\n        frequency[curr]++;\n    }\n\n    cout << count;\n\n    return 0;\n}\n\n\t    \t  \t \t\t   \t \t\t  \t  \t \t\t\t\t"
}