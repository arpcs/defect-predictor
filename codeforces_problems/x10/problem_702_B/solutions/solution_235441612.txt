{
    "id": 235441612,
    "contestId": 702,
    "creationTimeSeconds": 1701549872,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 702,
        "index": "B",
        "name": "Powers of Two",
        "type": "PROGRAMMING",
        "rating": 1500,
        "tags": [
            "brute force",
            "data structures",
            "implementation",
            "math"
        ]
    },
    "author": {
        "contestId": 702,
        "members": [
            {
                "handle": "vjudge2"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1469804400
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 43,
    "timeConsumedMillis": 374,
    "memoryConsumedBytes": 5734400,
    "source": "#include <iostream>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nlong long countPairs(const vector<long long>& arr) {\n    unordered_map<long long, long long> freq;\n    long long count = 0;\n\n    // Count the occurrences of each element\n    for (long long num : arr) {\n        freq[num]++;\n    }\n\n    // Check for pairs whose sum is a power of 2\n    for (long long num : arr) {\n        for (long long i = 0; i <= 30; i++) {\n            long long target = (1 << i) - num;\n\n            if (freq.count(target)) {\n                count += freq[target];\n                if (target == num) {\n                    count--; // Subtract the pair with the same element\n                }\n            }\n        }\n    }\n\n    return count / 2; // Divide by 2 to account for unordered pairs\n}\n\nint main() {\n    long long n;\n    cin >> n;\n\n    vector<long long> arr(n);\n\n    for (long long i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    long long pairCount = countPairs(arr);\n    cout << pairCount << endl;\n\n    return 0;\n}\n  \t \t\t   \t\t \t\t \t\t  \t \t\t\t \t   \t"
}