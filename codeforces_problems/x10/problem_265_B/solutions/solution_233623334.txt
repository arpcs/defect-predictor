{
    "id": 233623334,
    "contestId": 265,
    "creationTimeSeconds": 1700518816,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 265,
        "index": "B",
        "name": "Roadside Trees (Simplified Edition)",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1000,
        "tags": [
            "greedy",
            "implementation"
        ]
    },
    "author": {
        "contestId": 265,
        "members": [
            {
                "handle": "maximka228"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1358686800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 62,
    "memoryConsumedBytes": 819200,
    "source": "// @maximka228\r\n#include \"bits/stdc++.h\"\r\n \r\n#pragma GCC optimize(\"O3\") // the most \"agressive\" optimization\r\n#pragma GCC optimize(\"Ofast\")\r\n#pragma GCC optimize(\"unroll-loops\")\r\n#pragma GCC optimize(\"fast-math\")\r\n \r\nconst int64_t MODULO = 1000000007;\r\nconst double PI = 3.14159265359;\r\nconst std::string ENDL = \"\\n\";\r\n \r\n// Hints:\r\n// 1) Interval tasks solution ways: 1) prefix sum 2) segment tree 3) idea/constructive\r\n// 2) If the condition of the problem mentions 1) only 2 choices (for example, a problem about numbers consisting only of the digits 4 and 7) 2) any power of two (2, 4, 8 ...), then this is a bitmask problem.\r\n// 3) Subsequences (array, string and so on) tasks solution ways: 1) DP 2) prefix sum 3) two pointers\r\n\r\nint main() {\r\n    //freopen(\"input.txt\", \"r\", stdin);\r\n    //freopen(\"output.txt\", \"w\", stdout);\r\n    \r\n    std::ios_base::sync_with_stdio(0);\r\n    std::cin.tie(0);\r\n    \r\n    int64_t n;\r\n    std::cin >> n;\r\n    \r\n    std::vector<int64_t> heights(n);\r\n    for (int64_t i = 0; i < n; ++i) {\r\n        std::cin >> heights[i];\r\n    }\r\n    \r\n    int64_t ans = 0, current_level = 0;\r\n    \r\n    for (int64_t i = 0; i < n; ++i) {\r\n        int64_t height = heights[i];\r\n        \r\n        ans += height - current_level + 1;\r\n        \r\n        if (i == n - 1) {\r\n            break;\r\n        }\r\n        \r\n        int64_t next_height = heights[i + 1];\r\n        \r\n        if (next_height >= height) {\r\n            current_level = height;\r\n        } else {\r\n            current_level = next_height;\r\n            ans += height - next_height;\r\n        }\r\n        \r\n        ans++;\r\n    }\r\n    \r\n    std::cout << ans << ENDL;\r\n}\r\n"
}