{
    "id": 197396234,
    "contestId": 883,
    "creationTimeSeconds": 1678807831,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 883,
        "index": "L",
        "name": "Berland.Taxi",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 883,
        "members": [
            {
                "handle": "2000032182"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1508573100
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 90,
    "timeConsumedMillis": 826,
    "memoryConsumedBytes": 27340800,
    "source": "#include <cstring>\r\n#include <algorithm>\r\n#include <cstdio>\r\n#include <queue>\r\n#include <utility>\r\n#include <cstdlib>\r\n#include <cassert>\r\n \r\nusing namespace std;\r\ntypedef long long ll;\r\nconst int MAXN = 200010;\r\nconst int INF = 0x3f3f3f3f;\r\nint _w;\r\n \r\nint n, k, m, x[MAXN], a[MAXN], b[MAXN];\r\nll t[MAXN];\r\n \r\nnamespace SGT {\r\n    int sumv[MAXN<<2], ql, qr, qv;\r\n    void _add( int o, int L, int R ) {\r\n        sumv[o] += qv;\r\n        if( L == R ) return;\r\n        int M = (L+R)/2, lc = o<<1, rc = lc|1;\r\n        if( ql <= M ) _add(lc, L, M);\r\n        else _add(rc, M+1, R);\r\n    }\r\n    void add( int p, int v ) {\r\n        ql = p, qv = v;\r\n        _add(1, 1, n);\r\n    }\r\n    void _queryl( int o, int L, int R ) {\r\n        if( L >= ql && R <= qr ) {\r\n            if( !sumv[o] ) return;\r\n            while( L != R ) {\r\n                int M = (L+R)/2, lc = o<<1, rc = lc|1;\r\n                if( sumv[lc] ) o = lc, R = M;\r\n                else o = rc, L = M+1;\r\n            }\r\n            qv = L;\r\n        } else {\r\n            int M = (L+R)/2, lc = o<<1, rc = lc|1;\r\n            if( ql <= M && !qv ) _queryl(lc, L, M);\r\n            if( qr > M && !qv ) _queryl(rc, M+1, R);\r\n        }\r\n    }\r\n    int queryl( int l, int r ) {\r\n        ql = l, qr = r, qv = 0;\r\n        _queryl(1, 1, n);\r\n        return qv;\r\n    }\r\n    void _queryr( int o, int L, int R ) {\r\n        if( L >= ql && R <= qr ) {\r\n            if( !sumv[o] ) return;\r\n            while( L < R ) {\r\n                int M = (L+R)/2, lc = o<<1, rc = lc|1;\r\n                if( sumv[rc] ) o = rc, L = M+1;\r\n                else o = lc, R = M;\r\n            }\r\n            qv = L;\r\n        } else {\r\n            int M = (L+R)/2, lc = o<<1, rc = lc|1;\r\n            if( qr > M && !qv ) _queryr(rc, M+1, R);\r\n            if( ql <= M && !qv ) _queryr(lc, L, M);\r\n        }\r\n    }\r\n    int queryr( int l, int r ) {\r\n        ql = l, qr = r, qv = 0;\r\n        _queryr(1, 1, n);\r\n        return qv;\r\n    }\r\n}\r\n \r\nstruct Node {\r\n    ll t;\r\n    int id;\r\n    Node() {}\r\n    Node( ll t, int id ):\r\n        t(t), id(id) {}\r\n    bool operator<( const Node &rhs ) const {\r\n        return t == rhs.t ? id > rhs.id : t > rhs.t;\r\n    }\r\n};\r\npriority_queue<Node> pq[MAXN], evt;\r\n \r\nvoid prelude() {\r\n    for( int i = 1; i <= k; ++i ) {\r\n        pq[x[i]].push( Node(0, i) );\r\n        SGT::add(x[i], 1);\r\n    }\r\n}\r\n \r\nvoid run( ll t ) {\r\n    while( !evt.empty() && evt.top().t <= t ) {\r\n        Node car = evt.top(); evt.pop();\r\n        SGT::add(x[car.id], 1);\r\n        // printf( \"car.id = %d, x[id] = %d\\n\", car.id, x[car.id] );\r\n        pq[x[car.id]].push(car);\r\n    }\r\n}\r\nint use( int pos ) {\r\n    Node car = pq[pos].top(); pq[pos].pop();\r\n    SGT::add(pos, -1);\r\n    return car.id;\r\n}\r\nint freecar( int pos ) {\r\n    if( !SGT::sumv[1] ) return 0;\r\n    int left = SGT::queryr(1, pos);\r\n    int right = SGT::queryl(pos, n);\r\n    // printf( \"left = %d, right = %d\\n\", left, right );\r\n    if( !left ) left = -INF;\r\n    if( !right ) right = INF;\r\n    if( left == right ) {\r\n        return use(left);\r\n    } else if( pos-left < right-pos ) {\r\n        return use(left);\r\n    } else if( right-pos < pos-left ) {\r\n        return use(right);\r\n    } else {\r\n        Node cl = pq[left].top(), cr = pq[right].top();\r\n        if( cl.t == cr.t ) {\r\n            if( cl.id < cr.id ) {\r\n                return use(left);\r\n            } else {\r\n                return use(right);\r\n            }\r\n        } else if( cl.t < cr.t ) {\r\n            return use(left);\r\n        } else {\r\n            return use(right);\r\n        }\r\n    }\r\n}\r\nvoid solve() {\r\n    ll now = 0;\r\n    for( int i = 0; i < m; ++i ) {\r\n        now = max(now, t[i]);\r\n        run(now);\r\n        int car = freecar( a[i] );\r\n        // printf( \"now = %lld, car = %d\\n\", now, car );\r\n        if( !car ) {\r\n            now = max(now, evt.top().t);\r\n            run(now);\r\n            // printf( \"now = %lld, car = %d\\n\", now, car );\r\n            car = freecar( a[i] );\r\n        }\r\n        // printf( \"now = %lld, car = %d\\n\", now, car );\r\n        printf( \"%d %lld\\n\", car, now - t[i] + abs(x[car] - a[i]) );\r\n        evt.push( Node(now + abs(x[car] - a[i]) + abs(a[i] - b[i]), car) );\r\n        x[car] = b[i];\r\n    }\r\n}\r\n \r\nint main() {\r\n    _w = scanf( \"%d%d%d\", &n, &k, &m );\r\n    for( int i = 1; i <= k; ++i )\r\n        _w = scanf( \"%d\", x+i );\r\n    for( int i = 0; i < m; ++i )\r\n        _w = scanf( \"%lld%d%d\", t+i, a+i, b+i );\r\n    prelude(), solve();\r\n    return 0;\r\n}"
}