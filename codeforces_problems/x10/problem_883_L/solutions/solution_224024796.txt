{
    "id": 224024796,
    "contestId": 883,
    "creationTimeSeconds": 1695121594,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 883,
        "index": "L",
        "name": "Berland.Taxi",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 883,
        "members": [
            {
                "handle": "propane"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1508573100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 8,
    "timeConsumedMillis": 265,
    "memoryConsumedBytes": 20480000,
    "source": "#include<iostream>\r\n#include<cstring>\r\n#include<vector>\r\n#include<queue>\r\n#include<set>\r\n#include<map>\r\nusing namespace std;\r\nusing LL = long long;\r\n\r\nint main(){\r\n\r\n#ifdef LOCAL\r\n    freopen(\"data.in\", \"r\", stdin);\r\n    freopen(\"data.out\", \"w\", stdout);\r\n#endif\r\n\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    ios::sync_with_stdio(0);\r\n\r\n    int n, k, m;\r\n    cin >> n >> k >> m;\r\n    map<LL, set<pair<LL, int> > > mp;\r\n    for(int i = 1; i <= k; i++){\r\n        int x;\r\n        cin >> x;\r\n        mp[0].insert({x, i});\r\n    }\r\n    while(m--){\r\n        LL t; int x, y;\r\n        cin >> t >> x >> y;\r\n        auto &s = mp.begin()->second;\r\n        {\r\n            int pos = 1e9, id = -1;\r\n            auto it = s.lower_bound({x, 0});\r\n            if (it != s.end()){\r\n                tie(pos, id) = *it;\r\n            }\r\n            if (it != s.begin()){\r\n                LL tt = prev(it)->first;\r\n                auto it1 = s.lower_bound({tt, 0});\r\n                if (x - it1->first < pos - x || (x - it1->first == pos - x && it1->second < id)){\r\n                    tie(pos, id) = *it1;\r\n                }\r\n            }\r\n            s.erase({pos, id});\r\n            LL tt = max(t, mp.begin()->first) + abs(pos - x);\r\n            cout << id << ' ' << tt - t << '\\n';\r\n            tt += abs(y - x);\r\n            mp[tt].insert({y, id});\r\n        }\r\n\r\n        while(!mp.empty() && mp.begin()->second.empty()){\r\n            mp.erase(mp.begin());\r\n        }\r\n    }\r\n\r\n}"
}