{
    "id": 192759523,
    "contestId": 883,
    "creationTimeSeconds": 1675871639,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 883,
        "index": "L",
        "name": "Berland.Taxi",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 883,
        "members": [
            {
                "handle": "Archaeopteryx"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1508573100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 90,
    "timeConsumedMillis": 842,
    "memoryConsumedBytes": 22630400,
    "source": "#include \"bits/stdc++.h\"\r\n#define _CRT_SECURE_NO_WARNINGS\n#define int long long\n#define pii pair<int, int>\n#define f first\n#define s second\n#define all(x) (x).begin(), (x).end()\n\nusing namespace std;\n\nusing tri = tuple<int, int, int>;\n\nsigned main() {\nios_base::sync_with_stdio(0);\ncin.tie(0);\nint n, k, m;\ncin >> n >> k >> m;\nset<tri> available;\nvector<tri>cars(k + 1);\nfor(int i = 1; i <= k; i++){\nint x;\ncin >> x;\navailable.insert({x, 0, i});\ncars[i] = {x, 0, i};\n}\npriority_queue<tri, vector<tri>, greater<tri>> moving;\nwhile(m--){\nint time, from, to;\ncin >> time >> from >> to;\nint old_time = time;\nwhile((!moving.empty() && get<0>(moving.top()) <= time) || available.empty()){\nauto [stopped, house, index] = moving.top();\ntime = max(time, stopped);\nmoving.pop();\navailable.insert({house, stopped, index});\ncars[index] = {house, stopped, index};\n}\nauto it = available.upper_bound(tri{from, -1, -1});\ntri car = {1e12, 1e12, 1e12};\nif(it != available.end()) {\nauto [house, since, index] = *it;\ncar = min(car, tri{abs(from - house), since, index});\n}\nif(it != available.begin()){\nit--;\nauto [house, since, index] = *available.lower_bound({get<0>(*it), -1, -1});\ncar = min(car, tri{abs(from - house), since, index});\n}\nauto [time_to_get, since, index] = car;\n/*cerr << \"chosen car: \" << time_to_get << ' ' << since << ' ' << index << '\\n';\ncerr << \"all available: \\n\";\nfor(auto [qq, ww, ee]: available){\ncerr << qq << ' ' << ww << ' ' << ee << '\\n';\n} */\navailable.erase(cars[index]);\nint elapsed = time_to_get + max(0LL, since - old_time);\nmoving.push({old_time + elapsed + abs(to - from), to, index});\n//cerr << \"answer: \";\ncout << index << ' ' << elapsed << '\\n';\n}\n}"
}