{
    "id": 190239527,
    "contestId": 883,
    "creationTimeSeconds": 1674494348,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 883,
        "index": "L",
        "name": "Berland.Taxi",
        "type": "PROGRAMMING",
        "rating": 2500,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 883,
        "members": [
            {
                "handle": "kIee"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1508573100
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 5,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\ntypedef long long int ll;\r\ntypedef pair<int,int> pii;\r\ntypedef pair<ll,ll> pll;\r\ntypedef long double ld;\r\n//#define mp make_pair\r\n#define pb push_back\r\n#define vi vector<ll>\r\n#define vii vector<pair<ll,ll>>\r\n#define ti tuple<ll,ll,ll>\r\n#define tii tuple<ll,ll,ll,ll,ll>\r\n#define pqi priority_queue<ll>\r\n#define dqi deque<int>\r\n#define si set<ll>\r\n#define ff first \r\n#define ss second\r\n#define rep(i,a,b) for(ll i=(a); i<(b); i++)\r\n#define repd(i,a,b) for(ll i=(a)-1; i!=(b)-1; i--)\r\n#define all(x) x.begin(),x.end()\r\n#define nl '\\n'\r\n#define cma <<','<<\r\nll mod = 998244353;\r\nll inf = 1e18;\r\nconst ll maxn = 5005;\r\n\r\nauto cmp = [](ti a, ti b){\r\n\tll a1,a2,a3,b1,b2,b3;\r\n\tif(a2!=b2) return a2 < b2;\r\n\telse if(a1!=b1) return a1<b1;\r\n\telse return a3<b3;\r\n};\r\n\r\nint main(){\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\t\r\n\tmultiset<ti> s;  //place, time, index\r\n\tpriority_queue<ti, vector<ti>, decltype(cmp) > q(cmp);  \r\n\t\r\n\tll n,k,m; cin >> n >> k >> m;\r\n\trep(i,1,k+1){\r\n\t\tll x; cin >> x;\r\n\t\ts.insert({x,0,i});\r\n\t}\r\n\twhile(m--){\r\n\t\tll t,st,ed; cin >> t >> st >> ed;\r\n\t\tll id;\r\n\t\twhile(!q.empty() && t >= get<1>(q.top())){\r\n\t\t\ts.insert(q.top());\r\n\t\t\tq.pop();\r\n\t\t}\r\n\t\tll wait = 0;\r\n\t\tif(s.empty()){\r\n\t\t\tll nextt = get<1>(q.top());\r\n\t\t//\tcout << nextt << nl;\r\n\t\t\twait = nextt - t;\r\n\t\t\tt = nextt;\r\n\t\t}\r\n\t\twhile(!q.empty() && t >= get<1>(q.top())){\r\n\t\t\ts.insert(q.top());\r\n\t\t\tq.pop();\r\n\t\t}\r\n\t\t\r\n\t\tauto it = s.lower_bound({st,0,0});\r\n\t\tif(it == s.end()){\r\n\t\t//\tcout << \"nothing back\";\r\n\t\t\tit--;\r\n\t\t\tll waitplace = get<0>(*it);\r\n\t\t\tit = s.lower_bound({waitplace,0,0});\r\n\t\t\tti taxi = *it;\r\n\t\t\tid = get<2>(taxi);\r\n\t\t\twait += abs(waitplace - st);\r\n\t\t\tcout << id << ' ' << wait << nl;\r\n\t\t\ts.erase(it);\r\n\t\t\tq.push({ed,t+wait+abs(ed-st),id});\r\n\t\t}else{\r\n\t\t\tll place1,t1,i1;\r\n\t\t\ttie(place1,t1,i1) = *it;\r\n\t\t\tif(it == s.begin()){\r\n\t\t\t//\tcout << \"nothing in front\";\r\n\t\t\t\twait += abs(place1 - st);\r\n\t\t\t\tcout << i1 << ' ' << wait << nl;\t\r\n\t\t\t\ts.erase(it);\r\n\t\t\t\tq.push({ed, t + wait + abs(ed-st), i1});\r\n\t\t\t}else{\r\n\t\t\t\tit--;\r\n\t\t\t\tll place2 = get<0>(*it);\r\n\t\t\t\tit = s.lower_bound({place2,0,0});\r\n\t\t\t\tll t2,i2;\r\n\t\t\t\ttie(place2,t2,i2) = *it;\r\n\t\t\t\t\r\n\t\t\t\tti taxi;\r\n\t\t\t\tif(abs(place2 - st) < abs(place1 - st)){\r\n\t\t\t\t\ttaxi = {place2,t2,i2};\r\n\t\t\t\t}else if(abs(place1-st) < abs(place2-st)){\r\n\t\t\t\t\ttaxi = {place1,t1,i1};\r\n\t\t\t\t}else if(t1 < t2){\r\n\t\t\t\t\ttaxi = {place1,t1,i1};\r\n\t\t\t\t}else if(t2 < t1){\r\n\t\t\t\t\ttaxi = {place2,t2,i2};\r\n\t\t\t\t}else if(i1 < i2){\r\n\t\t\t\t\ttaxi = {place1,t1,i1};\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttaxi = {place2,t2,i2};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\twait += abs(get<0>(taxi) - st);\r\n\t\t\t\tcout << get<2>(taxi) << ' ' << wait << nl;\r\n\t\t\t\ts.erase(s.find(taxi));\r\n\t\t\t\tq.push({ed, t + wait + abs(st-ed), get<2>(taxi)});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t\r\n}\r\n\r\n/*\r\n10 1 5\r\n3\r\n5 2 8\r\n9 10 3\r\n11 2 1\r\n16 8 4\r\n21 3 2\r\n\r\n\r\n*/"
}