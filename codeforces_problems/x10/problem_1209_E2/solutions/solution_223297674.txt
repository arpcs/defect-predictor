{
    "id": 223297674,
    "contestId": 1209,
    "creationTimeSeconds": 1694665518,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1209,
        "index": "E2",
        "name": "Rotate Columns (hard version)",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2500,
        "tags": [
            "bitmasks",
            "dp",
            "greedy",
            "sortings"
        ]
    },
    "author": {
        "contestId": 1209,
        "members": [
            {
                "handle": "misorin"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1568466300
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 37,
    "timeConsumedMillis": 2027,
    "memoryConsumedBytes": 35020800,
    "source": "import heapq\r\nimport sys, os, io\r\ninput = io.BytesIO(os.read(0, os.fstat(0).st_size)).readline\r\n\r\ndef get_root(s):\r\n    v = []\r\n    while not s == root[s]:\r\n        v.append(s)\r\n        s = root[s]\r\n    for i in v:\r\n        root[i] = s\r\n    return s\r\n\r\ndef unite(s, t):\r\n    s, t = get_root(s), get_root(t)\r\n    if s == t:\r\n        return\r\n    if rank[s] < rank[t]:\r\n        s, t = t, s\r\n    if rank[s] == rank[t]:\r\n        rank[s] += 1\r\n    root[t] = s\r\n    size[s] += size[t]\r\n    return\r\n\r\ndef same(s, t):\r\n    return True if get_root(s) == get_root(t) else False\r\n\r\ndef get_size(s):\r\n    return size[get_root(s)]\r\n\r\ndef f(u, v):\r\n    return u * m + v\r\n\r\nt = int(input())\r\nans = []\r\npow2 = [1]\r\nfor _ in range(12):\r\n    pow2.append(2 * pow2[-1])\r\ninf = pow(10, 9) + 1\r\ng0 = [0]\r\nfor i in range(1, 12):\r\n    g0 = g0 + [i] + g0\r\nnx0 = [[]]\r\ns00 = [[]]\r\nfor n in range(1, 13):\r\n    l = pow2[n]\r\n    nx, s0 = [], [0] * (l + 1)\r\n    for i in range(l):\r\n        x = []\r\n        for j in range(n):\r\n            if not i & pow2[j]:\r\n                x.append(pow2[j])\r\n        k = i\r\n        for j in range(pow2[len(x)] - 1):\r\n            k ^= x[g0[j]]\r\n            nx.append(k)\r\n        s0[i + 1] = len(nx)\r\n    nx0.append(nx)\r\n    s00.append(s0)\r\nfor _ in range(t):\r\n    n, m = map(int, input().split())\r\n    l = pow2[n]\r\n    root = [i for i in range(l)]\r\n    rank = [1 for _ in range(l)]\r\n    size = [1 for _ in range(l)]\r\n    visit = [0] * l\r\n    for i in range(1, l):\r\n        if visit[i]:\r\n            continue\r\n        j = i\r\n        while not visit[j]:\r\n            visit[j] = 1\r\n            unite(i, j)\r\n            j = (j >> 1) ^ ((j & 1) << (n - 1))\r\n    a = [[] for _ in range(m)]\r\n    for _ in range(n):\r\n        a0 = list(map(int, input().split()))\r\n        for i in range(m):\r\n            a[i].append(a0[i])\r\n    h = [-f(max(a[i]), i) for i in range(m)]\r\n    heapq.heapify(h)\r\n    dp = [0] * l\r\n    nx, s0 = nx0[n], s00[n]\r\n    for _ in range(min(n, m)):\r\n        i = -heapq.heappop(h) % m\r\n        ai = a[i]\r\n        ma = [0] * l\r\n        k, s = 0, 0\r\n        for j in range(l - 1):\r\n            u = g0[j]\r\n            s += ai[u] if not k & pow2[u] else -ai[u]\r\n            k ^= pow2[u]\r\n            ma[get_root(k)] = max(ma[get_root(k)], s)\r\n        for j in range(1, l):\r\n            ma[j] = ma[get_root(j)]\r\n        for u in range(l - 1, -1, -1):\r\n            for j in range(s0[u], s0[u + 1]):\r\n                v = nx[j]\r\n                dp[v] = max(dp[v], dp[u] + ma[u ^ v])\r\n    ans0 = dp[-1]\r\n    ans.append(ans0)\r\nsys.stdout.write(\"\\n\".join(map(str, ans)))"
}