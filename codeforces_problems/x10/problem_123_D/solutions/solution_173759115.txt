{
    "id": 173759115,
    "contestId": 123,
    "creationTimeSeconds": 1664317595,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 123,
        "index": "D",
        "name": "String",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2300,
        "tags": [
            "string suffix structures"
        ]
    },
    "author": {
        "contestId": 123,
        "members": [
            {
                "handle": "Isaacgyq"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1320333000
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 36352000,
    "source": "#include <iostream>\r\n#include <algorithm>\r\n#include <cstring>\r\n\r\nusing namespace std;\r\n\r\ntypedef long long LL;\r\n\r\nconst int N = 200010;\r\n\r\nstring str;\r\nint tot = 1, last = 1;\r\nstruct Node {\r\n    int len, fa;\r\n    int ch[26];\r\n} node[N];\r\nLL f[N], res;\r\nint h[N], ne[N], e[N], idx;\r\n\r\nvoid add(int a, int b) {\r\n    ne[idx] = h[a], e[idx] = b, h[a] = idx ++;\r\n}\r\n\r\nvoid extend(int c) {\r\n    int p = last, np = last = ++ tot;\r\n    node[np].len = node[p].len + 1;\r\n    f[np] = 1;\r\n    for (; p && !node[p].ch[c]; p = node[p].fa) node[p].ch[c] = np;\r\n    if (!p) node[np].fa = 1;\r\n    else {\r\n        int q = node[p].ch[c];\r\n        if (node[q].len == node[p].len + 1) node[np].fa = q;\r\n        else {\r\n            int nq = ++ tot;\r\n            node[nq] = node[q], node[nq].len = node[p].len + 1;\r\n            node[np].fa = node[q].fa = nq;\r\n            for (; p && node[p].ch[c] == q; p = node[p].fa) node[p].ch[c] = nq;\r\n        }\r\n    }\r\n}\r\n\r\nvoid dfs(int u) {\r\n    for (int i = h[u]; i != -1; i = ne[i]) {\r\n        int j = e[i];\r\n        dfs(j);\r\n        f[u] += f[j];\r\n    }\r\n}\r\n\r\nvoid get_ans(int u) {\r\n    if (u != 1) {\r\n        LL cnt = node[u].len - node[node[u].fa].len;\r\n        res += cnt * ((f[u] + 1) * f[u]) / 2;\r\n    }\r\n    for (int i = h[u]; i != -1; i = ne[i]) {\r\n        int j = e[i];\r\n        get_ans(j);\r\n    }\r\n}\r\n\r\nint main() {\r\n    cin >> str;\r\n    for (int i = 0; i < str.size(); i ++) extend(str[i] - 'a');\r\n    memset(h, -1, sizeof(h));\r\n    for (int i = 2; i <= tot; i ++) add(node[i].fa, i);\r\n    dfs(1);\r\n    get_ans(1);\r\n    cout << res << endl;\r\n    \r\n    return 0;\r\n}"
}