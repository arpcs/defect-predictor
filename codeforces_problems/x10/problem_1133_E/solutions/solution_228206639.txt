{
    "id": 228206639,
    "contestId": 1133,
    "creationTimeSeconds": 1697306067,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1133,
        "index": "E",
        "name": "K Balanced Teams",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "dp",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1133,
        "members": [
            {
                "handle": "Sumitsingh7"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1551971100
    },
    "programmingLanguage": "Java 8",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 10,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 5734400,
    "source": "//package com.example.demo2;\r\n\r\n//import jdk.jshell.spi.SPIResolutionException;\r\n//2212069 sumit\r\n// Har_Har_Mahadev ;\r\n\r\nimport java.net.NetworkInterface;\r\nimport java.util.*;\r\nimport java.lang.*;\r\nimport java.util.HashMap;\r\nimport java.lang.Long;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.*;\r\nimport java.util.StringTokenizer;\r\n//import jdk.jshell.spi.SPIResolutionException;\r\nimport static java.lang.Math.*;\r\n\r\n/*****************************************************************************************************************/\r\n/*\r\n                                        $,  $,     ,\r\n                                        \"ss.$ss. .s'\r\n                                ,     .ss$$$$$$$$$$s,\r\n                                $. s$$$$$$$$$$$$$$`$$Ss\r\n                                \"$$$$$$$$$$$$$$$$$$o$$$       ,\r\n                               s$$$$$$$$$$$$$$$$$$$$$$$$s,  ,s\r\n                              s$$$$$$$$$\"$$$$$$\"\"\"\"$$$$$$\"$$$$$,\r\n                              s$$$$$$$$$$s\"\"$$$$ssssss\"$$$$$$$$\"\r\n                             s$$$$$$$$$$'         `\"\"\"ss\"$\"$s\"\"\r\n                             s$$$$$$$$$$,              `\"\"\"\"\"$  .s$$s\r\n                             s$$$$$$$$$$$$s,...               `s$$'  `\r\n                         `ssss$$$$$$$$$$$$$$$$$$$$####s.     .$$\"$.   , s-\r\n                           `\"\"\"\"$$$$$$$$$$$$$$$$$$$$#####$$$$$$\"     $.$'\r\n                                 \"$$$$$$$$$$$$$$$$$$$$$####s\"\"     .$$$|\r\n                                  \"$$$$$$$$$$$$$$$$$$$$$$$$##s    .$$\" $\r\n                                   $$\"\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\"   `\r\n                                  $$\"  \"$\"$$$$$$$$$$$$$$$$$$$$S\"\"\"\"'\r\n                             ,   ,\"     '  $$$$$$$$$$$$$$$$####s\r\n                             $.          .s$$$$$$$$$$$$$$$$$####\"\r\n                 ,           \"$s.   ..ssS$$$$$$$$$$$$$$$$$$$####\"\r\n                 $           .$$$S$$$$$$$$$$$$$$$$$$$$$$$$#####\"\r\n                 Ss     ..sS$$$$$$$$$$$$$$$$$$$$$$$$$$$######\"\"\r\n                  \"$$sS$$$$$$$$$$$$$$$$$$$$$$$$$$$########\"\r\n           ,      s$$$$$$$$$$$$$$$$$$$$$$$$#########\"\"'\r\n           $    s$$$$$$$$$$$$$$$$$$$$$#######\"\"'      s'         ,\r\n           $$..$$$$$$$$$$$$$$$$$$######\"'       ....,$$....    ,$\r\n            \"$$$$$$$$$$$$$$$######\"' ,     .sS$$$$$$$$$$$$$$$$s$$\r\n              $$$$$$$$$$$$#####\"     $, .s$$$$$$$$$$$$$$$$$$$$$$$$s.\r\n   )          $$$$$$$$$$$#####'      `$$$$$$$$$###########$$$$$$$$$$$.\r\n  ((          $$$$$$$$$$$#####       $$$$$$$$###\"       \"####$$$$$$$$$$\r\n  ) \\         $$$$$$$$$$$$####.     $$$$$$###\"             \"###$$$$$$$$$   s'\r\n (   )        $$$$$$$$$$$$$####.   $$$$$###\"                ####$$$$$$$$s$$'\r\n )  ( (       $$\"$$$$$$$$$$$#####.$$$$$###'                 .###$$$$$$$$$$\"\r\n (  )  )   _,$\"   $$$$$$$$$$$$######.$$##'                .###$$$$$$$$$$\r\n ) (  ( \\.         \"$$$$$$$$$$$$$#######,,,.          ..####$$$$$$$$$$$\"\r\n(   )$ )  )        ,$$$$$$$$$$$$$$$$$$####################$$$$$$$$$$$\"\r\n(   ($$  ( \\     _sS\"  `\"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$S$$,\r\n )  )$$$s ) )  .      .   `$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\"'  `$$\r\n  (   $$$Ss/  .$,    .$,,s$$$$$$##S$$$$$$$$$$$$$$$$$$$$$$$$S\"\"        '\r\n    \\)_$$$$$$$$$$$$$$$$$$$$$$$##\"  $$        `$$.        `$$.\r\n        `\"S$$$$$$$$$$$$$$$$$#\"      $          `$          `$\r\n            `\"\"\"\"\"\"\"\"\"\"\"\"\"'         '           '           '\r\n*/\r\n/*****************************************************************************************************************/\r\npublic class Main{\r\n    static int MoD = 1000000007;\r\n    static long MAXN= (long) (1e6+1000);\r\n    static long fact[]=new long[(int) (MAXN+1)];\r\n    /*****************************************************************************************************************/\r\n    static class FastReader{BufferedReader br;StringTokenizer st;public FastReader(){br = new BufferedReader(new InputStreamReader(System.in));}String next(){while (st == null || !st.hasMoreElements()) {try {st = new StringTokenizer(br.readLine());}catch (IOException e){e.printStackTrace();}}return st.nextToken();}int nextInt(){ return Integer.parseInt(next());}long nextLong(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}String nextLine(){String str = \"\";try{if(st.hasMoreTokens()){str = st.nextToken(\"\\n\");}else{str = br.readLine();}}catch (IOException e) {e.printStackTrace();}return str;}\r\n\r\n        public int[] readIntArray(int n,int s,int e) {\r\n            int[] ar = new int[n];\r\n            for(int i=s; i<e; ++i)\r\n                ar[i]=se.nextInt();\r\n            return ar;}\r\n        public long[] readIntArrayLONG(int n,int s,int e) {\r\n            long[] ar = new long[n];\r\n            for(int i=s; i<e; ++i)\r\n                ar[i]=se.nextLong();\r\n            return ar;}\r\n\r\n        int[][] next2DInt(int n, int m,int s,int e) {\r\n            int[][] arr = new int[n][];\r\n            for (int i = s; i < e; i++) {\r\n                arr[i] = se.readIntArray(m,0,m);\r\n            }\r\n            return arr;}\r\n        long[][] next2DLong(int n, int m,int s,int e) {\r\n            long[][] arr = new long[n][];\r\n            for (int i = s; i < e; i++) {\r\n                arr[i] = se.readIntArrayLONG(m,0,m);\r\n            }\r\n            return arr;}\r\n        List<Long> asLongList() throws IOException {\r\n            List<Long> list = new ArrayList<>();\r\n            String s = se.next();\r\n            String[] str = s.split(\" \");\r\n            for (String string : str) {\r\n                list.add(Long.parseLong(string));\r\n            }\r\n            return list;\r\n        }\r\n        List<Integer> asIntList() throws IOException {\r\n            List<Integer> list = new ArrayList<>();\r\n            String s = se.next();\r\n            String[] str = s.split(\" \");\r\n            for (String string : str) {\r\n                list.add(Integer.parseInt(string));\r\n            }\r\n            return list;\r\n        }\r\n    }\r\n    static class Reader { final private int BUFFER_SIZE = 1 << 16;private DataInputStream din;private byte[] buffer;private int bufferPointer, bytesRead;public Reader() {din = new DataInputStream(System.in);buffer = new byte[BUFFER_SIZE];bufferPointer = bytesRead = 0;}public Reader(String file_name) throws IOException {din = new DataInputStream(new FileInputStream(file_name));buffer = new byte[BUFFER_SIZE];bufferPointer = bytesRead = 0;}public String readLine() throws IOException {byte[] buf = new byte[64];int cnt = 0, c;while ((c = read()) != -1) {if (c == '\\n') break;buf[cnt++] = (byte) c;}return new String(buf, 0, cnt);}public int nextInt() throws IOException {int ret = 0;byte c = read();while (c <= ' ') c = read();boolean neg = (c == '-');if (neg) c = read();do {ret = ret * 10 + c - '0';} while ((c = read()) >= '0' && c <= '9');if (neg) return -ret;return ret;}public long nextLong() throws IOException {long ret = 0;byte c = read();while (c <= ' ') c = read();boolean neg = (c == '-');if (neg) c = read();do {ret = ret * 10L + c - '0';} while ((c = read()) >= '0' && c <= '9');if (neg) return -ret;return ret;}public double nextDouble() throws IOException {double ret = 0, div = 1;byte c = read();while (c <= ' ') c = read();boolean neg = (c == '-');if (neg) c = read();do {ret = ret * 10 + c - '0';} while ((c = read()) >= '0' && c <= '9');if (c == '.') while ((c = read()) >= '0' && c <= '9') ret += (c - '0') / (div *= 10);if (neg) return -ret;return ret;}private void fillBuffer() throws IOException {bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);if (bytesRead == -1) buffer[0] = -1;}private byte read() throws IOException {if (bufferPointer == bytesRead) fillBuffer();return buffer[bufferPointer++];}public char[] next() throws IOException {StringBuilder sb = new StringBuilder();byte c;while ((c = read()) <= ' ') ;do {sb.append((char) c);} while ((c = read()) > ' ');return sb.toString().toCharArray();}public int nextInt2() throws IOException {int ret = 0;byte c = read();while (c <= ' ') c = read();boolean neg = (c == '-');if (neg) c = read();do {ret = ret * 10 + c - '0';} while ((c = read()) >= '0' && c <= '9');if (neg) return -ret;return ret;}public void close() throws IOException {if (din == null) return;din.close();}\r\n\r\n        public int[] readIntArray(int n,int se,int e)throws IOException {\r\n            int[] ar = new int[n];\r\n            for(int i=se; i<e; ++i)\r\n                ar[i]=s.nextInt();\r\n            return ar;}\r\n        public long[] readIntArrayLONG(int n, int se, int e)throws IOException {\r\n            long[] ar = new long[n];\r\n            for(int i=se; i<e; ++i)\r\n                ar[i]=s.nextLong();\r\n            return ar;}\r\n\r\n        int[][] next2DInt(int n, int m,int se,int e)throws IOException {\r\n            int[][] arr = new int[n][];\r\n            for (int i = se; i < e; i++) {\r\n                arr[i] = s.readIntArray(m,0,m);\r\n            }\r\n            return arr;}\r\n        long[][] next2DLong(int n, int m, int se, int e)throws IOException {\r\n            long[][] arr = new long[n][];\r\n            for (int i = se; i < e; i++) {\r\n                arr[i] = s.readIntArrayLONG(m,0,m);\r\n            }\r\n            return arr;}\r\n        List<Long> asLongList(int n) throws IOException {\r\n            List<Long> list = new ArrayList<>();\r\n            for (int i=0;i<n;i++) {\r\n                list.add(s.nextLong());\r\n            }\r\n            return list;\r\n        }\r\n        List<Integer> asIntList(int n) throws IOException {\r\n            List<Integer> list = new ArrayList<>();\r\n            for (int i=0;i<n;i++) {\r\n                list.add(s.nextInt());\r\n            }\r\n            return list;}\r\n    }\r\n    public static long gcd(long a, long b) {if (b==0) return a;return gcd(b,a%b);}\r\n    public static long LCM(long u, long v) {return (u / gcd(u, v)) * v;}\r\n    public static void debugL(long[] a,long s){for(long i=s;i<a.length;i++){System.out.print(a[(int) i]+\" \");}}\r\n    public static void debugI(int[] a,long s){for(long i=s;i<a.length;i++){System.out.print(a[(int) i]+\" \");}}\r\n    public static long smallestDivisor(long n){if (n % 2 == 0) return 2;for (long i = 3; i * i <= n; i += 1) {if (n % i == 0) return i;}return n;}\r\n    public static long max4(long a, long b, long c, long d) {if (a >= b && a >= c && a >= d) return a;else if (b >= a && b >= c && b >= d) return b;else if (c >= a && c >= b && c >= d) return c;else if (d >= b && d >= c && d >= a) return d;return a;}\r\n    public static boolean checkString(String s1, String s2) {char[] tempArrays1=s1.toCharArray();Arrays.sort(tempArrays1);String sortedS1=new String(tempArrays1);char[] tempArrays2=s2.toCharArray();Arrays.sort(tempArrays2);String sortedS2=new String(tempArrays2);if(sortedS1.equals(sortedS2)){return true;}return false;}\r\n    public static long[] minSUMofPROC(long n,int c){long[] arr =new long[c];long k=1;long x=0;for (int i = 0; i<10; i++){arr[i]=1;}while (k<n){long ok=arr[(int) (x%10)];k=k/ok;arr[(int) (x%10)]++;ok++;k=k*ok;x++;}return  arr;}\r\n    public static String powwerSTR(String str,long n){String res=\"\";if(n%2==0){res = str;n--;}while(n>0){if(n%2==1){res=res+str;n--;}else{res =res+res;n=n/2;}}return res;}\r\n    public static boolean isPalindrome(String s) {StringBuilder sb=new StringBuilder(s);if(sb.reverse().toString().equals(s)){return true;}return false;}\r\n    public static long nCr(int n,int k){long ans=1L;k=k>n-k?n-k:k;for( int j=1;j<=k;j++,n--){if(n%j==0){ans*=n/j;}else{if(ans%j==0){ans=ans/j*n;}else{ans=(ans*n)/j;}}}return ans;}\r\n    public static long sumofarray(int[] arr){long n=arr.length;long sum=0;for(long i = 0; i<n; i++){sum+=arr[(int) i];}return sum;}\r\n    public static long power(long x, long y, long p) {long res = 1;x = x % p;while (y > 0){if (y % 2 == 1) res = (res * x) % p;y = y >> 1;x = (x * x) % p;}return res;}\r\n    public static long max3(long a,long b,long c){{if (a >= b && a >= c) return a;else if (b >= a && b >= c ) return b;else if (c >= b) return c;return a;}}\r\n    public static long getAdd(long x) {long m1 = 10, m2 = 0;while(x > 0) {long y = x % 10;x /= 10;m1 = Math.min(m1, y);m2 = Math.max(m2, y);}return m1 * m2;}\r\n    public static void sieve_of_erantothenes() {fact[1] = 1;for (long i = 2; i <= MAXN; i++) fact[(int) i] = i;for (long i = 4; i <= MAXN; i += 2) fact[(int) i] = 2;for (long i = 3; i * i <= MAXN; i++){if (fact[(int) i] == i){for (long j = i * i; j <= MAXN; j += i) if (fact[(int) j] == j) fact[(int) j] = i;}}}\r\n    public static long factorial(long n) {if (n == 0)return 1;return n*factorial(n-1);}\r\n    public static String SUMofDigits(String str){long n=0;for(int i=0;i<str.length();i++){n+= str.charAt(i)-'0';}String temp= String.valueOf(n);return temp;}\r\n    public static long SumOfDigits (long num) {long sum = 0;while (num > 0) {long d = num % 10;sum += d;num /= 10;}return sum;}\r\n    public static long numOF_2(long n){long ans=0;while (n%2==0){n=n/2;ans++;}return ans;}\r\n    public static ArrayList<Long> trial_division2(long n) {ArrayList<Long> factorization = new ArrayList<Long>();while (n % 2 == 0) {factorization.add(2L);n /= 2;}for (long d = 3; d * d <= n; d += 2) {while (n % d == 0) {factorization.add(d);n /= d;}}if (n > 1) factorization.add(n);return factorization;}\r\n    public static HashSet<Long> trial_division2SET(long n) {HashSet<Long> factorization = new HashSet<>();while (n % 2 == 0) {factorization.add(2L);n /= 2;}for (long d = 3; d * d <= n; d += 2) {while (n % d == 0) {factorization.add(d);n /= d;}}if (n > 1) factorization.add(n);return factorization;}\r\n    public static  long binpow(long  a, long  b,  long m) {a %= m;long res = 1;while (b > 0) {if ((b & 1)==1) res = res * a % m;a = a * a % m;b >>= 1;}return res%m;}\r\n    public static long binaryExponentiation(long a, long n) {if(n==0) {return 1;}if(n==1) {return a;}long val = binaryExponentiation(a,n/2);val = (val*val)%MoD;val = (val*binaryExponentiation(a, n%2))%MoD;return val;}\r\n\r\n    public static String reverseString(String str) {StringBuilder sb = new StringBuilder(str);return sb.reverse().toString();}\r\n\r\n//    public static int lower_bound(long val,int start,long []arr){int low = start;int high = arr.length-1;int ans = -1;while(low<=high){int mid = (low+high)/2;if(arr[mid]>=val){high = mid - 1;ans  = mid;}else{low = mid + 1;}}return ans;}\r\n//    public static int upper_bound(long val,int start,long []arr){int low = start;int high = arr.length-1;int ans = -1;while(low<=high){int mid = (low+high)/2;if(arr[mid]<=val){low = mid + 1;ans  = mid;}else{high = mid - 1;}}return ans;}\r\n\r\n    public static Long getMin(long[] arr, int n) {return (Long) Arrays.stream(arr).min().getAsLong();}\r\n    public static Long getMax(long[] arr, int n) {return (Long) Arrays.stream(arr).max().getAsLong();}\r\n    public static void fill(int[][]arr) {for(int i=0;i<arr.length;i++) {for(int j=0;j<arr[0].length;j++) arr[i][j]=-1;}}\r\n    private static boolean Sqrt(long x){long a=(long)Math.sqrt(x);return a*a==x;}\r\n\r\n    public static HashMap<Long, Integer> map_prime_factors(long n) {HashMap<Long, Integer> map = new HashMap<>();while (n % 2 == 0) {map.put(2L, map.getOrDefault(2L, 0) + 1);n /= 2L;}for (long i = 3; i <= Math.sqrt(n); i++) {while (n % i == 0) {map.put(i, map.getOrDefault(i, 0) + 1);n /= i;}}if (n > 2) {map.put(n, map.getOrDefault(n, 0) + 1);}return map;}\r\n    public static String DecimalToBinary(long num) {String str = \"\";while (num > 0) {if ((num & 1) == 1){str += '1';} else{str += '0';}num >>= 1;}return str;}\r\n\r\n    public static void println(long c) {out.println(c);}\r\n    public static void print(long c)   {out.print(c);}\r\n    public static void print(int c) \t{out.print(c);}\r\n    public static void println(int x) \t{out.println(x);}\r\n    public static void print(String s) {out.print(s);}\r\n    public static void println(String s){out.println(s);}\r\n    public static void println(boolean b){out.println(b);}\r\n    public static void println(int[][]arr) {for(int i=0;i<arr.length;i++) {for(int j=0;j<=i;j++)print(arr[i][j]+\" \"); println(\"\");}}\r\n    public static void println(long[][]arr) {for(int i=0;i<arr.length;i++) {for(int j=0;j<arr[0].length;j++) print(arr[i][j]+\" \"); print(\"\\n\");}}\r\n    public static void println(int[]arr){for(int i=0;i<arr.length;i++)print(arr[i]+\" \");print(\"\\n\");}\r\n    public static void println(ArrayList<Integer> list1){for(int i = 0; i< list1.size(); i++)print(list1.get(i)+\" \");print(\"\\n\");}\r\n    public static void println1(ArrayList<Integer> list){for(int i = 0; i< list.size(); i++)print(list.get(i)+\" \");print(\"\\n\");}\r\n    public static void println(long[]arr){ for(int i=0;i<arr.length;i++) print(arr[i]+\" \");print(\"\\n\"); }\r\n    public static void println(char x) {out.println(x);}\r\n    public static long[]inputArray(int n){ long[]arr=new long[n];for(int i=0;i<n;i++)arr[i]=in.nextInt();return arr;}\r\n    public static InputStream inputStream = System.in;\r\n    public static OutputStream outputStream = System.out;\r\n    public static InputReader in = new InputReader(inputStream);\r\n    public static PrintWriter out = new PrintWriter(outputStream);\r\n\r\n    public static class InputReader { private InputStream stream;private byte[] inbuf = new byte[1024];private int start= 0;private int end = 0;public InputReader(InputStream stream) {this.stream = stream;}private int readByte() {if (start == -1) throw new UnknownError();if (end >= start) {end= 0;try {start= stream.read(inbuf);} catch (IOException e) {throw new UnknownError();}if (start<= 0) return -1;}return inbuf[end++];}private boolean isSpaceChar(int c) {return !(c >= 33 && c <= 126);}private int skip() {int b;while ((b = readByte()) != -1 && isSpaceChar(b)) ;return b;}public String next() {int b = skip();StringBuilder sb = new StringBuilder();while (!(isSpaceChar(b))) { /* when nextLine, (isSpaceChar(b) && b != ' ')*/sb.appendCodePoint(b);b = readByte();}return sb.toString();}public int nextInt() {int num = 0, b;boolean minus = false;while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;if (b == '-') {minus = true;b = readByte();}while (true) {if (b >= '0' && b <= '9') {num = num * 10 + (b - '0');} else {return minus ? -num : num;}b = readByte();}}public long nextLong() {long num = 0;int b;boolean minus = false;while ((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-')) ;if (b == '-') {minus = true;b = readByte();}while (true) {if (b >= '0' && b <= '9') {num = num * 10 + (b - '0');} else {return minus ? -num : num;}b = readByte();}}}\r\n\r\n    /*****************************************************************************************************************/\r\n\r\n    public long[] findRemoved(int[] nums1, int[] nums2, int[] nums3) {int Xor = findXor(nums2);return new long[]{Xor ^ findXor(nums1), Xor ^ findXor(nums3)};}\r\n    public int findXor(int[] nums) {int xor = 0;for (long num : nums) xor ^= num;return xor;}\r\n\r\n    /* --------- Apply k Permutations on a sequence ------------\r\n       TC : nLog(k)                                               */\r\n    private static long[] permute(long[] sequence, long[] permutation, long k) {while (k > 0) {if ((k & 1) == 1) {sequence = applyPermute(sequence, permutation);}permutation = applyPermute(permutation, permutation);k >>= 1;}return sequence;}\r\n    private static long[] applyPermute(long[] sequence, long[] permutation) {\r\n        long[] newSequence = new long[sequence.length];\r\n        for (int i = 1; i < sequence.length; i++) {\r\n            newSequence[i] = sequence[(int) permutation[i]]; // newSequence[permutation[i]] = sequence[i]; Acc. to given Question\r\n        }return newSequence;}\r\n\r\n    /* --------- Apply k Permutations on a sequence ------------\r\n           TC : nLog(k)                                               */\r\n\r\n    public static int upper__bound(long[] arr,int low, int high, long target){int n = arr.length;int mid = 0;while (low < high && low != n){mid = low + (high - low) / 2;if(target >= arr[mid]) {low = mid + 1;} else {high = mid;}}return low;}\r\n    public static int lower__bound(long[] arr, int low, int high, long key) {int mid;while (low < high) {mid = low + (high - low) / 2;if (key <= arr[mid]) {high = mid;} else {low = mid + 1;}}if (low < arr.length && arr[low] < key) {low++;}return low;}\r\n\r\n    public static void sort(int[] a) {\r\n        int n = a.length;\r\n        for (int i = 0; i < n; i++) {int id = (int) (random() * n);int t = a[i];a[i] = a[id];a[id] = t;}\r\n        Arrays.sort(a);}\r\n    public static void sort(long[] a) {\r\n        int n = a.length;\r\n        for (int i = 0; i < n; i++) {int id = (int) (random() * n);long t = a[i];a[i] = a[id];a[id] = t;}\r\n        Arrays.sort(a);}\r\n    public static void sort(int[] a, Comparator<Integer> cmp) {\r\n        int n = a.length;\r\n        Integer[] arr = new Integer[n];\r\n        for(int i = 0; i < n; i++) arr[i] = a[i];\r\n        Arrays.sort(arr, cmp);\r\n        for(int i = 0; i < n; i++) a[i] = arr[i];}\r\n    public static void sort(long[] a, Comparator<Long> cmp) {\r\n        int n = a.length;\r\n        Long[] arr = new Long[n];\r\n        for(int i = 0; i < n; i++) arr[i] = a[i];\r\n        Arrays.sort(arr, cmp);\r\n        for(int i = 0; i < n; i++) a[i] = arr[i];}\r\n\r\n    public static boolean check_pow_2(long n){long t= n&(n-1);if(t==0&&n!=0){return true;}return false;}\r\n    public static long countUnsetBits(long n) {long x = n;n |= n >> 1;n |= n >> 2;n |= n >> 4;n |= n >> 8;n |= n >> 16;return Integer.bitCount((int) (x^ n));}\r\n    public static long countSetBits(long n) {long count = 0;while (n > 0) {n &= (n - 1);count++;}return count;}\r\n\r\n    public static boolean chekstringsubsq(String str,String ans){String tmp=\"\";int l=0;for(int i=0;i<str.length()&&l<ans.length();i++){if(str.charAt(i)==ans.charAt(l)){tmp+= ans.charAt(l);l++;}}if(ans.equals(tmp))return false;return true;}\r\n    public static long gcdec(long a, long b, long[] x, long[] y) {if (b == 0) {x[0] = 1;y[0] = 0;return a;}long[] x1 = new long[1];long[] y1 = new long[1];long d = gcdec(b, a % b, x1, y1);x[0] = y1[0];y[0] = x1[0] - y1[0] * (a / b);return d;}\r\n    public static void coprime_1_to_n(long n) {long[] phi = new long[(int) (n+1)];for (long i = 0; i <= n; i++) phi[(int) i] = i;for (long i = 2; i <= n; i++) {if (phi[(int)i] == i) {for (long j = i; j <= n; j += i) phi[(int)j] -= phi[(int)j] / i;}}}\r\n    public static long base_2log(long N) {long result = (int)(Math.log(N) / Math.log(2));return result;}\r\n    public static void shuffleArray(int[] array) {int index;Random random = new Random();for (int i = array.length - 1; i > 0; i--) {index = random.nextInt(i + 1);if (index != i) {array[index] ^= array[i];array[i] ^= array[index];array[index] ^= array[i];}}}\r\n    public static long subarrayXor(int[] arr, int n, long m) {HashMap<Long, Integer> HashTable = new HashMap<>();HashTable.put(0L, 1);int count = 0;long curSum = 0;for (int i = 0; i < n; i++) {curSum ^= arr[i];if (HashTable.containsKey(curSum ^ m)) count += HashTable.get(curSum ^ m);if (!HashTable.containsKey(curSum)) HashTable.put(curSum, 0);HashTable.put(curSum, HashTable.get(curSum) + 1);}return (count);}\r\n    public static void reverseArray(int[] a) {int n = a.length;int arr[] = new int[n];for (int i = 0; i < n; i++) arr[i] = a[n - i - 1];for (int i = 0; i < n; i++) a[i] = arr[i];}\r\n    public static void reverseArray(long[] a) {int n = a.length;long arr[] = new long[n];for (int i = 0; i < n; i++) arr[i] = a[n - i - 1];for (int i = 0; i < n; i++) a[i] = arr[i];}\r\n    public static long sumOfMaximumOfSubsets(Long[] arr, int N,long mm) {Arrays.sort(arr, Collections.reverseOrder());long sum = arr[0]%=mm;for (int i = 1; i < N; i++) {sum = 2 * sum + arr[i];sum%=mm;}return sum%=mm;}\r\n\r\n    /*****************************************************************************************************************/\r\n    static ArrayList<Integer>[] tree;\r\n    //    for (int i = 0; i < 26; i++) {\r\n//        tree[i] = new ArrayList<Integer>();\r\n//    }\r\n    static int[] seq;\r\n    static FastReader se = new FastReader();\r\n    static Reader s=new Reader();\r\n    static HashSet<Long> set=new HashSet<>();\r\n    static boolean[][] vis;\r\n    static int value;\r\n    public  static int dfs(int n,int m,int row,int col,int arr[][]){\r\n        if (row>n || row<0 || col>m || col<0 || arr[row][col]==0 || vis[row][col]) return 0;\r\n        vis[row][col] =true;\r\n        value++;\r\n        value+= dfs(n,m,(row+1),col,arr);\r\n        value+=dfs(n,m,(row-1),col,arr);\r\n        value+=dfs(n,m,row,(col+1),arr);\r\n        value+= dfs(n,m,row,(col-1),arr);\r\n        value+= dfs(n,m,(row+1),(col+1),arr);\r\n        value+=dfs(n,m,(row-1),(col-1),arr);\r\n        value+=dfs(n,m,(row-1),(col+1),arr);\r\n        value+= dfs(n,m,(row+1),(col-1),arr);\r\n        return value;\r\n    }\r\n    static long Me= 998244353;\r\n\r\n    public static void swap(int i, int j, char[] nums) {\r\n        char t = nums[i];\r\n        nums[i] = nums[j];\r\n        nums[j] = t;}\r\n    static long[][] dp;\r\n    static long[][][] cp;\r\n    static int stat1,stat2;\r\n    // static int end1,end2;\r\n    public static long subsetSumUtil(int ind, int target,int[] arr,int n){\r\n        if(ind == 0){\r\n            if(target==arr[0])return arr[0];\r\n            return Integer.MIN_VALUE;}\r\n        if(dp[ind][target]!=-1) return dp[ind][target];\r\n        long notTaken = subsetSumUtil(ind-1,target,arr,n);\r\n        long taken = arr[ind]+subsetSumUtil(ind-1, (int) (target^arr[ind]),arr,n);\r\n        dp[ind][target]=Math.max(notTaken,taken);\r\n        return dp[ind][target];\r\n    }\r\n    public static long lcsUtil(String s1, String s2, int ind1, int ind2){\r\n        if(ind1<0 || ind2<0) return 0;\r\n        if(dp[ind1][ind2]!=-1) return dp[ind1][ind2];\r\n        if(s1.charAt(ind1) == s2.charAt(ind2)) return dp[ind1][ind2] = 1 + lcsUtil(s1,s2,ind1-1,ind2-1);\r\n        else return dp[ind1][ind2] = Math.max(lcsUtil(s1, s2, ind1, ind2 - 1),lcsUtil(s1, s2, ind1 - 1, ind2));\r\n    }\r\n    static int[] fib;\r\n    static int lcsubstring(String s1, String s2){\r\n        int n = s1.length();\r\n        int m = s2.length();\r\n        int[][] dp=new int[n+1][m+1];\r\n        int ans = 0;\r\n        for(int i=1;i<=n;i++){\r\n            for(int j=1;j<=m;j++){\r\n                if(s1.charAt(i-1)==s2.charAt(j-1)){int val = 1 + dp[i-1][j-1];dp[i][j] = val;ans = Math.max(ans,val);} else dp[i][j] = 0;\r\n            }}return ans;}\r\n//    public static long stock(int ind,int st,int n,int arr[]){\r\n//        if(ind==n)return 0;\r\n//        if(dp[ind][st]!=-1)return dp[ind][st];\r\n//        if(st==1){\r\n//            return dp[ind][st]=Math.max(-arr[ind]+stock(ind+1,0,n,arr),stock(ind+1,1,n,arr));\r\n//        }else return dp[ind][st]=Math.max(arr[ind]+stock(ind+1,1,n,arr),stock(ind+1,0,n,arr));\r\n//    }\r\n    public static int getAns(int[] arr, int n,  int ind, int prev_index,int[][] dp){\r\n        if(ind == n) return 0;\r\n        if(dp[ind][prev_index+1]!=-1) return dp[ind][prev_index+1];\r\n\r\n        int notTake = getAns(arr, n, ind + 1, prev_index, dp);\r\n        int take = 0;\r\n        if(prev_index == -1 || (arr[ind] > arr[prev_index]&&arr[ind]%arr[prev_index]==0)){\r\n            take = 1 + getAns(arr,n,ind+1,ind,dp);\r\n        }\r\n        return dp[ind][prev_index+1] = Math.max(notTake,take);}\r\n\r\n    static class Num implements Comparable<Num> {\r\n        int p;\r\n        int[] pr;\r\n        public Num(int[] arr, int x) {\r\n            pr = arr;\r\n            p = x;\r\n        }\r\n        public int compareTo(Num n) {\r\n            if (p == n.p) {\r\n                for (int i = 0; i < pr.length; i++) {\r\n                    if (pr[i] != n.pr[i])\r\n                        return pr[i] - n.pr[i];\r\n                }\r\n            }\r\n            return p - n.p;\r\n        }}\r\n    public static class Tree<T> extends TreeSet<T> {\r\n        public Tree() {\r\n            super();\r\n        }\r\n    }\r\n    static long vp[];\r\n    public static long stick(int ind,long[] arr,int cou,long prev,int n,int k){\r\n        if(ind>=n||cou>=k)return 0;\r\n        if(dp[ind][cou]!=-1)return dp[ind][cou];\r\n        long nottake=stick(ind+1,arr,cou+1,prev,n,k);\r\n        int ans=0;\r\n        for(int i=ind;i<n;i++){\r\n            if(arr[i]-arr[ind]<=5)ans++;\r\n        }\r\n        long take= ans+stick(ind+ans,arr,cou+1,prev,n,k);\r\n        return dp[ind][cou]=Math.max(nottake,take);\r\n    }\r\n\r\n    public static void main(String[] args) throws Exception{\r\n//        sieve_of_erantothenes();\r\n//        Reader s = new Reader();\r\n        int Te = 1;\r\n//        Te = s.nextInt();\r\n        superOuter:\r\n        while(Te-- >0) {\r\n            int n=s.nextInt();int k=s.nextInt();long[]arr=s.readIntArrayLONG(n,0,n);sort(arr);\r\n            dp=new long[n][k+1];\r\n            for(int i=0;i<n;i++)Arrays.fill(dp[i],-1);\r\n            long ans=stick(0,arr,0,0,n,k);\r\n            System.out.println(ans);\r\n\r\n\r\n\r\n            out.flush();\r\n        }\r\n\r\n        out.close();\r\n    }}\r\n\r\n/*****************************************************************************************************************/\r\n\r\nclass Model<T,U> { T val;U ind;Model(T val,U ind) {this.val=val;this.ind=ind;}T getFirst() {return val;}U getSecond() {return ind;}}\r\n//PriorityQueue<Model<Integer,Integer>> pq=new PriorityQueue<>((a,b)->b.val-a.val);\r\n\r\nclass Pair<T, U> { T a;U b;Pair(T a,U b) {this.a=a;this.b=b;}T getFirst() {return a;}U getSecond() {return b;}}\r\nclass Triplet<T,U,V>{ T a;U b;V c;Triplet(T a,U b,V c){this.a = a;this.b = b;this.c = c;}T getFirst() {return a;}U getSecond() {return b;} V getThird(){return c;}}\r\n\r\nclass MultiSet<T> { HashMap<T, Integer> fre;TreeSet<T> set;int size;public MultiSet() {set = new TreeSet<>();fre = new HashMap<>();size = 0;}public void add(T elem) {if (fre.get(elem) == null || fre.get(elem) == 0) {fre.put(elem, 0);set.add(elem);}fre.put(elem, fre.get(elem) + 1);size++;}public void remove(T elem) {fre.put(elem, fre.get(elem) - 1);if (fre.get(elem) == 0) {set.remove(elem);}size--;}public boolean contains(T elem) {return set.contains(elem);}}\r\n\r\n// check that kth bit is set is to n&(2^k) if(0)no:yes;\r\n// check jth bit if(((x >>j) & 1) == 1);\r\n// to togle kth bit n^(2<<k);\r\n// n%(2<<k)== n&(2<<k-1);\r\n// swap x and y -> x=x^y;y=x^y;x=x^y;\r\n// x= a^b^x; if x==a,change it to b;\r\n// a+b==(a^b)+2*(a&b);\r\n// a+b==(a|b)+(a&b);\r\n// fermi theorem (a^p)%p=a;and (a^(p-1))%p=1 ; where p is prime and gcd(a,p)==1;\r\n/*\r\n    private static class StringLengthComparator implements Comparator<String> {\r\n        @Override\r\n        public int compare(String a, String b) {\r\n            return a.length() - b.length();\r\n        }\r\n     }\r\n    Arrays.sort(arr, new StringLengthComparator());\r\n\r\n    PriorityQueue<pair> q = new PriorityQueue<>(new Comparator<pair>() {\r\n                @Override\r\n                public int compare(pair o1, pair o2) {\r\n                    if (o1.x > o2.x) {\r\n                        return 1;\r\n                    } else if (o1.x < o2.x) {\r\n                        return -1;\r\n                    } else {\r\n                        if (o1.y > o2.y) {\r\n                            return -1;\r\n                        } else if (o1.y < o2.y) {\r\n                            return 1;\r\n                        } else {\r\n                            return 0;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n */\r\n"
}