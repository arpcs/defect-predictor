{
    "id": 227515753,
    "contestId": 1133,
    "creationTimeSeconds": 1696933346,
    "relativeTimeSeconds": 446,
    "problem": {
        "contestId": 1133,
        "index": "E",
        "name": "K Balanced Teams",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "dp",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1133,
        "members": [
            {
                "handle": "its_not"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1696932900
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <iostream>\r\n#include <vector>\r\n#include <unordered_map>\r\n\r\nint findCompromisedSubarrays(std::vector<int>& arr) {\r\n    int count = 0;\r\n    std::unordered_map<int, int> seen;\r\n\r\n    for (int num : arr) {\r\n        std::unordered_map<int, int> new_seen;\r\n\r\n        for (const auto& entry : seen) {\r\n            int index = entry.first;\r\n            int value = entry.second;\r\n            int newValue = value | num;\r\n\r\n            if (seen.count(newValue)) {\r\n                count += seen.count(newValue);\r\n            }\r\n\r\n            new_seen[index] = newValue;\r\n        }\r\n\r\n        new_seen[arr.size()] = num;\r\n        seen = new_seen;\r\n    }\r\n\r\n    return count;\r\n}\r\n\r\nint main() {\r\n    std::vector<int> arr = {3, 4, 7, 6};\r\n    int result = findCompromisedSubarrays(arr);\r\n    std::cout << result << std::endl; // Output: 4\r\n\r\n    return 0;\r\n}\r\n"
}