{
    "id": 227739258,
    "contestId": 1133,
    "creationTimeSeconds": 1697063369,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1133,
        "index": "E",
        "name": "K Balanced Teams",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "dp",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1133,
        "members": [
            {
                "handle": "ambuj21"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1551971100
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 83,
    "timeConsumedMillis": 248,
    "memoryConsumedBytes": 200192000,
    "source": "// Pragmas\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2\")\r\n\r\n// header files\r\n#include <bits/stdc++.h>\r\n#include <ext/pb_ds/assoc_container.hpp> // for pbds\r\n#include <ext/pb_ds/tree_policy.hpp>\r\n\r\n// namespace\r\nusing namespace std;\r\nusing namespace chrono;\r\nusing namespace __gnu_pbds;\r\n\r\n/* ordered set*/\r\ntemplate <class T, class cmp = less_equal<T>>\r\nusing ordered_set = tree<T, null_type, cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n\r\n/* ordered map*/\r\ntemplate <class key, class value, class cmp = less_equal<key>>\r\nusing ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;\r\n/* find_by_order(k)  returns iterator to kth element starting from 0;\r\n * order_of_key(k) returns count of elements strictly smaller than k;*/\r\n\r\n/* min heap*/\r\ntemplate <class T>\r\nusing min_heap = priority_queue<T, vector<T>, greater<T>>;\r\ntemplate <class T>\r\nusing max_heap = priority_queue<T>;\r\n\r\n// Constants\r\n#define PI 3.1415926535\r\n#define INF 4e18\r\n#define EPS 1e-9\r\n#define MOD 1000000007\r\n\r\n// Aliases\r\nusing ll = long long int;\r\nusing ull = unsigned long long int;\r\nusing ld = long double;\r\n\r\n// macros\r\n#define int long long\r\n#define all(s) s.begin(), s.end()\r\n#define pb push_back\r\n#define ppb pop_back\r\n#define eb emplace_back\r\n#define ppc __builtin_popcount\r\n#define parity(x) __builtin_parity(x) // gives true for odd and false for even\r\n#define ppcll __builtin_popcountll\r\n#define msb(x) 63 - __builtin_clzll(x) // gives the most significant bit of the number\r\n#define sz(x) (int)x.size()\r\n#define F first\r\n#define acc accumulate\r\n#define S second\r\n#define amax(a, b) a = max(a, b)\r\n#define amin(a, b) a = min(a, b)\r\n#define getunique(v)                                  \\\r\n    {                                                 \\\r\n        sort(v.begin(), v.end());                     \\\r\n        v.erase(unique(v.begin(), v.end()), v.end()); \\\r\n    }\r\n#define kickstart(x)                 \\\r\n    {                                \\\r\n        cout << \"Case #\" << x << \":\" \\\r\n             << \" \";                 \\\r\n    }\r\n#define hi cout << \"hi\" << endl\r\n\r\n// Operator overloads\r\ntemplate <typename T1, typename T2> // cin >> pair<T1, T2>\r\nistream &operator>>(istream &istream, pair<T1, T2> &p)\r\n{\r\n    return (istream >> p.first >> p.second);\r\n}\r\n\r\ntemplate <typename T> // cin >> vector<T>\r\nistream &operator>>(istream &istream, vector<T> &v)\r\n{\r\n    for (auto &it : v)\r\n        cin >> it;\r\n    return istream;\r\n}\r\n\r\ntemplate <typename T1, typename T2> // cout << pair<T1, T2>\r\nostream &operator<<(ostream &ostream, const pair<T1, T2> &p)\r\n{\r\n    return (ostream << p.first << \" \" << p.second);\r\n}\r\ntemplate <typename T> // cout << vector<T>\r\nostream &operator<<(ostream &ostream, const vector<T> &c)\r\n{\r\n    for (auto &it : c)\r\n        cout << it << \" \";\r\n    return ostream;\r\n}\r\nvector<pair<int, int>> dir = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};\r\n\r\n/* ----------------------------------Things get better by time, hope for the best-----------------*/\r\nvoid solve(int testcase)\r\n{\r\n    // kickstart(testcase);\r\n    // debug(testcase);\r\n    int n, K;\r\n    cin >> n >> K;\r\n    vector<int> a(n);\r\n    cin >> a;\r\n    sort(all(a));\r\n    vector<int> prev(n);\r\n    for (int i = 0, j = 0; i < n; i++)\r\n    {\r\n        while (j <= i && a[i] - a[j] > 5)\r\n        {\r\n            j++;\r\n        }\r\n        prev[i] = j;\r\n    }\r\n    int dp[n + 1][K + 1];\r\n    memset(dp, 0, sizeof(dp));\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        for (int j = 1; j <= K; j++)\r\n        {\r\n            if (!i)\r\n            {\r\n                dp[i][j] = 1;\r\n            }\r\n            else\r\n            {\r\n                amax(dp[i][j], dp[i - 1][j]);\r\n                amax(dp[i][j],i-prev[i]+1+(prev[i]-1>=0?dp[prev[i]-1][j-1]:0ll));\r\n            }\r\n        }\r\n    }\r\n    cout << dp[n - 1][K] << endl;\r\n}\r\n\r\nint32_t main()\r\n{\r\n    // freopen(\"input.txt\", \"r\", stdin);\r\n    // freopen(\"output.txt\", \"w\", stdout);\r\n\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(NULL);\r\n    cout.tie(NULL);\r\n    cout << fixed << setprecision(25);\r\n    cerr << fixed << setprecision(10);\r\n    auto start = std::chrono::high_resolution_clock::now();\r\n    int n = 1;\r\n    // cin >> n;\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n        solve(i);\r\n    }\r\n    auto stop = std::chrono::high_resolution_clock::now();\r\n    auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start);\r\n    // cerr << \"Time taken : \" << ((long double)duration.count())/((long double) 1e9) <<\"s \"<< endl;\r\n    return 0;\r\n}\r\n"
}