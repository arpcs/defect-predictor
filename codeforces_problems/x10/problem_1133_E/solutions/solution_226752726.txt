{
    "id": 226752726,
    "contestId": 1133,
    "creationTimeSeconds": 1696516753,
    "relativeTimeSeconds": 2593,
    "problem": {
        "contestId": 1133,
        "index": "E",
        "name": "K Balanced Teams",
        "type": "PROGRAMMING",
        "rating": 1800,
        "tags": [
            "dp",
            "sortings",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1133,
        "members": [
            {
                "handle": "zronghui"
            }
        ],
        "participantType": "VIRTUAL",
        "ghost": false,
        "startTimeSeconds": 1696514160
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 15,
    "timeConsumedMillis": 202,
    "memoryConsumedBytes": 20684800,
    "source": "from random import getrandbits, randrange\r\nfrom string import ascii_lowercase, ascii_uppercase\r\nimport sys\r\nfrom math import ceil, floor, sqrt, pi, factorial, gcd, log, log10, log2, inf, cos, sin\r\nfrom copy import deepcopy, copy\r\nfrom collections import Counter, deque, defaultdict\r\nfrom heapq import heapify, heappop, heappush\r\nfrom itertools import (\r\n    accumulate,\r\n    product,\r\n    combinations,\r\n    combinations_with_replacement,\r\n    permutations,\r\n)\r\nfrom bisect import bisect, bisect_left, bisect_right\r\nfrom functools import lru_cache, reduce\r\nfrom decimal import Decimal, getcontext\r\nfrom typing import List, Tuple, Optional\r\n\r\n\r\ninf = float(\"inf\")\r\n\r\n\r\ndef ceil_div(a, b):\r\n    return (a + b - 1) // b\r\n\r\n\r\ndef isqrt(x):\r\n    return int(sqrt(x))\r\n\r\n\r\ndef int1(s):\r\n    return int(s) - 1\r\n\r\n\r\nimport sys\r\nimport os\r\nfrom io import BytesIO, IOBase\r\n\r\nBUFSIZE = 8192\r\n\r\n\r\nclass FastIO(IOBase):\r\n    newlines = 0\r\n\r\n    def __init__(self, file):\r\n        self._fd = file.fileno()\r\n        self.buffer = BytesIO()\r\n        self.writable = \"x\" in file.mode or \"r\" not in file.mode\r\n        self.write = self.buffer.write if self.writable else None\r\n\r\n    def read(self):\r\n        while True:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            if not b:\r\n                break\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines = 0\r\n        return self.buffer.read()\r\n\r\n    def readline(self):\r\n        while self.newlines == 0:\r\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\r\n            self.newlines = b.count(b\"\\n\") + (not b)\r\n            ptr = self.buffer.tell()\r\n            self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr)\r\n        self.newlines -= 1\r\n        return self.buffer.readline()\r\n\r\n    def flush(self):\r\n        if self.writable:\r\n            os.write(self._fd, self.buffer.getvalue())\r\n            self.buffer.truncate(0), self.buffer.seek(0)\r\n\r\n\r\nclass IOWrapper(IOBase):\r\n    def __init__(self, file):\r\n        self.buffer = FastIO(file)\r\n        self.flush = self.buffer.flush\r\n        self.writable = self.buffer.writable\r\n        self.write = lambda s: self.buffer.write(s.encode(\"ascii\"))\r\n        self.read = lambda: self.buffer.read().decode(\"ascii\")\r\n        self.readline = lambda: self.buffer.readline().decode(\"ascii\")\r\n\r\n\r\nsys.stdin, sys.stdout = IOWrapper(sys.stdin), IOWrapper(sys.stdout)\r\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\r\n\r\nprint = lambda *args, end=\"\\n\", sep=\" \": sys.stdout.write(\r\n    sep.join(map(str, args)) + end\r\n)\r\n\r\n\r\ndef I():\r\n    return input()\r\n\r\n\r\ndef II():\r\n    return int(input())\r\n\r\n\r\ndef MII():\r\n    return map(int, input().split())\r\n\r\n\r\ndef LI():\r\n    return list(input().split())\r\n\r\n\r\ndef LII():\r\n    return list(map(int, input().split()))\r\n\r\n\r\ndef GMI():\r\n    return map(lambda x: int(x) - 1, input().split())\r\n\r\n\r\ndef LGMI():\r\n    return list(map(lambda x: int(x) - 1, input().split()))\r\n\r\n\r\ndef yes(res):\r\n    return print(\"Yes\" if res else \"No\")\r\n\r\n\r\ndef YES(res):\r\n    return print(\"YES\" if res else \"NO\")\r\n\r\n\r\nclass Debug:\r\n    def __init__(self, debug=False):\r\n        self.debug = debug\r\n\r\n    def get_ic(self):\r\n        if self.debug:\r\n            from icecream import ic\r\n\r\n            return ic\r\n        else:\r\n            return lambda *args, **kwargs: ...\r\n\r\n\r\nfrom collections import deque\r\n\r\n\r\nclass SWAG:\r\n    def __init__(self, func, e):\r\n        self.af = deque()\r\n        self.ab = deque()\r\n        self.b = deque()\r\n        self.e = e\r\n        self.func = func\r\n\r\n    def push(self, x):\r\n        b = self.b\r\n        ab = self.ab\r\n\r\n        b.append(x)\r\n        if not ab:\r\n            ab.append(x)\r\n        else:\r\n            ab.append(self.func(x, ab[-1]))\r\n\r\n    def pop(self):\r\n        af = self.af\r\n        b = self.b\r\n        ab = self.ab\r\n        if not af:\r\n            while b:\r\n                ab.pop()\r\n                v = b.pop()\r\n                if not af:\r\n                    af.appendleft(v)\r\n                else:\r\n                    af.appendleft(self.func(v, af[0]))\r\n        if af:\r\n            af.popleft()\r\n\r\n    def get_sum(self):\r\n        res = self.e\r\n        if self.af:\r\n            res = self.func(res, self.af[0])\r\n        if self.ab:\r\n            res = self.func(res, self.ab[-1])\r\n        return res\r\n\r\n\r\nic = Debug(False).get_ic()\r\n\r\nn, k = MII()\r\n\r\ndp = [[0] * (k + 1) for _ in range(n + 1)]\r\na = LII()\r\na.sort()\r\n\r\nres = 0\r\nsi = SWAG(min, inf)\r\nsx = SWAG(max, -inf)\r\nl = 0\r\nfor r in range(n):\r\n    dp[r + 1] = dp[r][:]\r\n    si.push(a[r])\r\n    sx.push(a[r])\r\n    while l <= r and sx.get_sum() - si.get_sum() > 5:\r\n        si.pop()\r\n        sx.pop()\r\n        l += 1\r\n\r\n    cur = r - l + 1\r\n    for j in range(min(k - 1, l) + 1):\r\n        dp[r + 1][j + 1] = max(dp[r + 1][j + 1], dp[r][j] + cur)\r\n        res = max(res, dp[r + 1][j + 1])\r\nprint(res)\r\n"
}