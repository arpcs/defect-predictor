{
    "id": 224282977,
    "contestId": 793,
    "creationTimeSeconds": 1695293823,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 793,
        "index": "E",
        "name": "Problem of offices",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2900,
        "tags": [
            "constructive algorithms",
            "dfs and similar",
            "dp",
            "trees"
        ]
    },
    "author": {
        "contestId": 793,
        "members": [
            {
                "handle": "zhangmj2008"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1492965900
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 0,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\ntypedef long long ll; typedef unsigned long long ull;\r\nconst int inf = 1e9; const ll llnf = 4e18;\r\n\r\ntemplate< class Tp > void chkmax( Tp &x , Tp y ) { x = max( x , y ); }\r\ntemplate< class Tp > void chkmin( Tp &x , Tp y ) { x = min( x , y ); }\r\n\r\nvoid solve( ) {\r\n\t// \u95ee\u662f\u5426\u5b58\u5728 eps[i] \u2208 { -1 , 1 } \u4f7f\u5f97 sum S[i] eps[i] \u2208 [ l , r ]\r\n\t// \u4fdd\u8bc1 S[i] >= 1 \u4e14 sum S[i] <= 5000\r\n\tauto fit = [&] ( vector< int > S , int l , int r ) -> bool {\r\n\t\tconstexpr int sumS = 5000;\r\n\t\tbitset< 2 * sumS > f; f.set( 0 + sumS , true ); for( int s : S ) f = ( f << s ) | ( f >> s );\r\n\t\tfor( int i = l; i <= r; i ++ ) if( abs( i ) <= sumS && f[i + sumS] ) return true;\r\n\t\treturn false;\r\n\t} ;\r\n\r\n\tint n; cin >> n;\r\n\tint a , b , c , d; cin >> a >> b >> c >> d;\r\n\tvector< int > par( n + 1 ); for( int i = 2; i <= n; i ++ ) cin >> par[i];\r\n\r\n\twhile( par[a] != 1 ) a = par[a];\r\n\twhile( par[b] != 1 ) b = par[b];\r\n\twhile( par[c] != 1 ) c = par[c];\r\n\twhile( par[d] != 1 ) d = par[d];\r\n\r\n\tvector< int > leaf( n + 1 ); fill( leaf.begin( ) + 1 , leaf.begin( ) + n + 1 , true ); for( int i = 2; i <= n; i ++ ) leaf[par[i]] = false;\r\n\tvector< int > S = leaf; for( int i = n; i >= 2; i -- ) S[par[i]] += S[i];\r\n\r\n\tif( ( S[a] + S[b] + S[c] + S[d] ) % 2 != 0 || S[1] % 2 != 0 ) return cout << \"NO\\n\" , void( );\r\n\r\n\tvector< int > fS;\r\n\tfor( int i = 2; i <= n; i ++ ) if( par[i] == 1 && i != a && i != b && i != c && i != d ) fS.emplace_back( S[i] );\r\n\r\n\tif( !fit( fS , -S[a] - S[b] + S[c] - S[d] , S[a] + S[b] + S[c] - S[d] ) ) return cout << \"NO\\n\" , void( );\r\n\tif( !fit( fS , -S[a] + S[b] - S[c] - S[d] , -S[a] + S[b] + S[c] + S[d] ) ) return cout << \"NO\\n\" , void( );\r\n\treturn cout << \"YES\\n\" , void( );\r\n}\r\n\r\nint main( ) {\r\n\tios::sync_with_stdio( 0 ), cin.tie( 0 ), cout.tie( 0 );\r\n\tint T = 1; while( T -- ) solve( ); return 0;\r\n}"
}