{
    "id": 222889250,
    "contestId": 1481,
    "creationTimeSeconds": 1694432119,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1481,
        "index": "F",
        "name": "AB Tree",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 3100,
        "tags": [
            "dp",
            "greedy",
            "trees"
        ]
    },
    "author": {
        "contestId": 1481,
        "members": [
            {
                "handle": "Xtttttr"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1612535700
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 0,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 11366400,
    "source": "#include<bits/stdc++.h>\r\nusing namespace std;\r\nconst int N=100501;\r\nint n,m;\r\nint fa[N],dep[N],cnt[N],ccnt[N],mxd,id[N],tot,val[N];\r\nbitset<N>f[333];\r\nvector<int>hav[N],q[N];\r\nvector<int>e[N];\r\nbool leaf[N];\r\ninline void add_edge(int x,int y){e[x].push_back(y);}\r\ninline void dfs(int x){\r\n    dep[x]=dep[fa[x]]+1;\r\n    cnt[dep[x]]++;\r\n    q[dep[x]].push_back(x);\r\n    mxd=max(mxd,dep[x]);\r\n    for(auto y:e[x]){\r\n        dfs(y);\r\n        leaf[x]=1;\r\n    }\r\n}\r\nbool ans[N],vis[N];\r\npair<int,int> nxt[N];\r\nint main(){\r\n    ios::sync_with_stdio(false);cin.tie(0),cout.tie(0);\r\n    cin>>n>>m;\r\n    for(int i=2;i<=n;i++){\r\n        cin>>fa[i];\r\n        add_edge(fa[i],i);\r\n    }\r\n    dfs(1);\r\n    for(int i=1;i<=mxd;i++){\r\n        if(!id[cnt[i]])id[cnt[i]]=++tot,val[tot]=cnt[i];\r\n        hav[id[cnt[i]]].push_back(i);\r\n    }\r\n    f[0][0]=1;\r\n    for(int i=1;i<=tot;i++){\r\n        f[i]=f[i-1];\r\n        int res=hav[i].size();\r\n        for(int j=1;j<=res;j<<=1){\r\n            bitset<N>d=(f[i]|(f[i]<<(j*val[i])))^f[i];\r\n            for(int k=d._Find_first();k^d.size();k=d._Find_next(k))nxt[k]=make_pair(val[i],j);\r\n            f[i]|=(f[i]<<(j*val[i]));\r\n            res-=j;\r\n        }\r\n        if(res){\r\n            bitset<N>d=(f[i]|(f[i]<<(res*val[i])))^f[i];\r\n            for(int k=d._Find_first();k^d.size();k=d._Find_next(k))nxt[k]=make_pair(val[i],res);\r\n            f[i]=f[i]|(f[i]<<(res*val[i]));\r\n        }\r\n    }\r\n    if(f[tot][m]){\r\n        vector<int>cur;\r\n        int x=m;\r\n        while(x>0){\r\n            for(int i=nxt[x].second;i;i--)cur.push_back(id[nxt[x].first]);\r\n            cout<<x<<\" \"<<nxt[x].first<<\" \"<<nxt[x].second<<endl;\r\n            x-=nxt[x].first*nxt[x].second;\r\n        }\r\n        for(auto i:cur){\r\n            vis[hav[i].back()]=1;\r\n            hav[i].pop_back();\r\n        }\r\n        cout<<mxd<<endl;\r\n        for(int i=1;i<=n;i++)cout<<(char)(!vis[dep[i]]+'a');cout<<endl;\r\n        return 0;\r\n    }\r\n    int x=m,y=n-m;\r\n    bool flag=0;\r\n    for(int i=1;i<=mxd;i++){\r\n        sort(q[i].begin(),q[i].end(),[=](const int &x,const int &y){return leaf[x]>leaf[y];});\r\n        if(x<y)swap(x,y),flag^=1;\r\n        for(auto j:q[i]){\r\n            ans[j]=flag;x--;\r\n            if(!x)swap(x,y),flag^=1;\r\n        }\r\n    }\r\n    cout<<mxd+1<<endl;\r\n    for(int i=1;i<=n;i++)cout<<(char)(ans[i]+'a');\r\n    cout<<endl;\r\n    return 0;\r\n}"
}