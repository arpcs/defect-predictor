{
    "id": 145670087,
    "contestId": 250,
    "creationTimeSeconds": 1644337416,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 250,
        "index": "E",
        "name": "Mad Joe",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2000,
        "tags": [
            "brute force"
        ]
    },
    "author": {
        "contestId": 250,
        "members": [
            {
                "handle": "bonk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1353938400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 46,
    "memoryConsumedBytes": 1024000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\nusing ll = long long;\r\n\r\nconst int N = 105;\r\nconst int M = 10005;\r\nconst int R = 1, L = -1;\r\n\r\nchar grid[N][M];\r\nint n, m;\r\nll curH = 1, curD = R, curPos = 0, lastL = 1, lastR = 1;\r\nll ans = -1;\r\n\r\nbool valid(ll x, ll y){\r\n    return (y >= 1 && y <= m && grid[x][y] == '.');\r\n}\r\n\r\nvoid solve(){\r\n    while(curH < n){\r\n        while(valid(curH, curPos + curD)){          //selama belum ketemu brick/concrete wall\r\n            bool fall = false;\r\n            curPos += curD;\r\n            ans++;\r\n\r\n            while(grid[curH + 1][curPos] == '.'){\r\n                fall = true;\r\n                curH++;\r\n                ans++;\r\n                if(curH == n){\r\n                    cout << ans << endl;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if(fall){\r\n                lastL = lastR = curPos;\r\n                continue;\r\n            }\r\n\r\n            if(curD == R) lastR = curPos;\r\n            else lastL = curPos;\r\n        }\r\n\r\n        ans++;  \r\n\r\n        if(grid[curH][curPos + curD] == '+'){\r\n            grid[curH][curPos + curD] = '.';\r\n        } \r\n\r\n        if(curD == R){\r\n            curPos = lastL;\r\n            curD = L;\r\n        } else{\r\n            curPos = lastR;\r\n            curD = R;\r\n        }\r\n\r\n        ans += (lastR - lastL);\r\n        if(grid[curH][lastL - 1] == '#' && grid[curH][lastR + 1] == '#'){\r\n            cout << \"Never\" << endl;\r\n            return;\r\n        }\r\n    }\r\n\r\n    cout << ans << endl;\r\n}\r\n\r\nvoid init(){\r\n    for(int i = 0; i < N; i++){\r\n        for(int j = 0; j < M; j++){\r\n            grid[i][j] = '#';\r\n        }\r\n    }\r\n}\r\n\r\nint main(){\r\n    ios_base::sync_with_stdio(0); cin.tie(0);\r\n    init();\r\n    cin >> n >> m;\r\n\r\n    for(int i = 1; i <= n; i++){\r\n        for(int j = 1; j <= m; j++){\r\n            cin >> grid[i][j];\r\n        }\r\n    }\r\n\r\n    solve();\r\n\r\n    return 0;\r\n}"
}