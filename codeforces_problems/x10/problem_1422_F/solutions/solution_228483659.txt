{
    "id": 228483659,
    "contestId": 1422,
    "creationTimeSeconds": 1697508550,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1422,
        "index": "F",
        "name": "Boring Queries",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2700,
        "tags": [
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1422,
        "members": [
            {
                "handle": "Epilogue"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601827500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 436,
    "memoryConsumedBytes": 305664000,
    "source": "#include <bits/stdc++.h>\r\n#define rep(i, l, r) for(int i = l; i <= r; i++)\r\n#define rep2(i, l, r) for(int i = l; i >= r; i--)\r\n#define fi first\r\n#define se second\r\n#define bit(i, x) (x >> i & 1)\r\nconst int N = 2e5 + 3;\r\nconst int mod = 1e9 + 7;\r\nusing namespace std;\r\nint n, a[N];\r\nint q;\r\npair<int, int> qq[N];\r\nstruct node{\r\n    int l, r, v, u;\r\n    node(int _l = 0, int _r = 0, int _v = 1, int _u = 1) {\r\n        l = _l, r = _r, v = _v, u = _u;\r\n    }\r\n} st[(int)1e7];\r\nint cnt;\r\nint ver[N], nver;\r\nint L[N];\r\nint pw(int x, int y) {\r\n    int s = 1;\r\n    while (y) {\r\n        if (y & 1) s = (1ll*s*x) % mod;\r\n        x = (1ll*x*x) % mod;\r\n        y >>= 1;\r\n    }\r\n    return s;\r\n}\r\nint mul(int x, int y) {\r\n    return (1ll*x*y) % mod;\r\n}\r\nvoid refine(int id) {\r\n    st[id] = (1ll*st[st[id].l].v*st[st[id].r].v) % mod;\r\n}\r\nint build(int l, int r) {\r\n    if (l == r) {\r\n        st[++cnt] = node(0, 0, 1, 1);\r\n        return cnt;\r\n    }\r\n    int mid = (l + r) >> 1;\r\n    int cur = ++cnt;\r\n    st[cur].l = build(l, mid);\r\n    st[cur].r = build(mid + 1, r);\r\n    st[cur].v = 1;\r\n    st[cur].u = 1;\r\n    return cur;\r\n}\r\nint update(int id, int l, int r, int u, int v, int x) {\r\n    int cur = ++cnt;\r\n    st[cur] = st[id];\r\n    st[cur].v = mul(st[cur].v, pw(x, min(r, v) - max(l, u) + 1));\r\n    if (l >= u && r <= v) {\r\n        st[cur].u = mul(st[cur].u, x);\r\n//        cout << cur << \" \";\r\n        return cur;\r\n    }\r\n    int mid = (l + r) >> 1;\r\n    if (mid >= u) {\r\n        st[cur].l = update(st[id].l, l, mid, u, v, x);\r\n    }\r\n    if (mid + 1 <= v) {\r\n        st[cur].r = update(st[id].r, mid + 1, r, u, v, x);\r\n    }\r\n    return cur;\r\n}\r\nint query(int id, int l, int r, int u, int v) {\r\n\r\n    if (l >= u && r <= v) {\r\n        return st[id].v;\r\n    }\r\n    int ans = pw(st[id].u, min(r, v) - max(l, u) + 1);\r\n//    cout << st[id].u << \" \";\r\n    int mid = (l + r) >> 1;\r\n\r\n    if (mid >= u && st[id].l) ans = mul(ans, query(st[id].l, l, mid, u, v));\r\n    if (mid + 1 <= v && st[id].r) ans = mul(ans, query(st[id].r, mid + 1, r, u, v));\r\n    return ans;\r\n}\r\nvoid update(int u, int v, int x) {\r\n    nver++;\r\n    ver[nver] = update(ver[nver - 1], 1, n, u, v, x);\r\n}\r\nint p[N];\r\nstack<pair<int, int>> stk[N];\r\nvoid Sieve() {\r\n    rep(i, 2, N - 1) p[i] = i;\r\n    rep(i, 2, N - 1) {\r\n        if (i == p[i]) {\r\n            for(int j = 2*i; j < N; j+=i) {\r\n                p[j] = min(p[j], i);\r\n            }\r\n        }\r\n    }\r\n}\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n\r\n    cin >> n;\r\n    rep(i, 1, n) cin >> a[i];\r\n\r\n    cin >> q;\r\n    rep(i, 1, q) {\r\n        int x, y; cin >> x >> y;\r\n        qq[i] = {x, y};\r\n    }\r\n\r\n    Sieve();\r\n    ver[0] = build(1, n);\r\n    rep(i, 2, N - 1) stk[i].push({0, 0});\r\n    rep(i, 1, n) {\r\n        int x = a[i];\r\n        while (x != 1) {\r\n            int d = p[x], cnt = 0;\r\n            while (x % d == 0) x /= d, cnt++;\r\n//            if ((int)stk[d].size() == 1) {\r\n//                update(1, i, pw(d, cnt));\r\n//            }\r\n//            else {\r\n                if (stk[d].top().se != i - 1) stk[d].push({0, i - 1});\r\n                while ((int)stk[d].size() > 1 && cnt > stk[d].top().fi) {\r\n                    pair<int, int> top = stk[d].top();\r\n                    stk[d].pop();\r\n                    update(stk[d].top().se + 1, top.se, pw(d, cnt - top.fi));\r\n                }\r\n                update(i, i, pw(d, cnt));\r\n//            }\r\n\r\n            stk[d].push({cnt, i});\r\n\r\n        }\r\n        L[i] = ver[nver];\r\n    }\r\n\r\n    int last = 0;\r\n    rep(i, 1, q) {\r\n        int l = qq[i].fi, r = qq[i].se;\r\n        l = (l + last) % n + 1;\r\n        r = (r + last) % n + 1;\r\n        if (l > r) swap(l, r);\r\n        last = query(L[r], 1, n, l, l);\r\n        cout << last << \"\\n\";\r\n    }\r\n\r\n//    rep(i, 1, n) cout << query(L[10], 1, n, i, i) << \" \";\r\n\r\n    return 0 ^ 0;\r\n}\r\n// Identify Thief O_O\r\n"
}