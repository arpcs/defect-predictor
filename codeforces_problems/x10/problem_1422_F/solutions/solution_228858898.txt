{
    "id": 228858898,
    "contestId": 1422,
    "creationTimeSeconds": 1697752077,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1422,
        "index": "F",
        "name": "Boring Queries",
        "type": "PROGRAMMING",
        "points": 2750.0,
        "rating": 2700,
        "tags": [
            "data structures",
            "math",
            "number theory"
        ]
    },
    "author": {
        "contestId": 1422,
        "members": [
            {
                "handle": "Ertugrul28"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1601827500
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 50,
    "timeConsumedMillis": 1793,
    "memoryConsumedBytes": 216576000,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n\r\n//#define int long long \r\n\r\n\r\nconst int N = 2e5 + 7, mod = 1e9 + 7;\r\n\r\n\r\nint pow(int a, int b, int mod, int r = 1) {\r\n\tfor(int i = b; i; i >>= 1, a = (1LL * a * a) % mod) if(i & 1) r = (1LL * r * a) % mod;\r\n\treturn r;\r\n}\r\n\r\n\r\nint a[N], prv_occ[N];\r\n\r\n\r\nstruct RMQ {\r\n        vector <int> t;\r\n        int n;\r\n        RMQ() : n(N) {\r\n                t.resize(N << 1, 0);\r\n        }\r\n        void modify(int p, int v) {\r\n                for(t[p += n] = v; p > 1; p >>= 1) t[p >> 1] = max(t[p], t[p ^ 1]);\r\n        }\r\n        int query(int l, int r) { int res = 0;\r\n                for(l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {\r\n                        if(l & 1) res = max(res, t[l++]);\r\n                        if(r & 1) res = max(res, t[--r]);\r\n                }\r\n                return res;\r\n        }\r\n}ST[88];\r\n\r\n\r\n\r\nstruct Node {\r\n        int l, r, val;\r\n        Node() : l(0), r(0), val(1) {}\r\n}t[N * 30];\r\n\r\nint ptr, root[N], arr[N];\r\n\r\nvoid add(int cur, int ex, int l, int r, int pos, int val) {\r\n        t[cur] = t[ex];\r\n        if(l == r) {\r\n                t[cur].val = val;\r\n                return;\r\n        }\r\n\r\n        int mid = (l + r) >> 1;\r\n        if(pos <= mid) add(t[cur].l = ++ptr, t[ex].l, l, mid, pos, val);\r\n        else           add(t[cur].r = ++ptr, t[ex].r, mid + 1, r, pos, val);\r\n\r\n        t[cur].val = (1LL * t[t[cur].l].val * t[t[cur].r].val) % mod;\r\n}\r\n\r\nint query(int cur, int l, int r, int L, int R) {\r\n        if(l > R || r < L) return 1;\r\n        if(l >= L && r <= R) return t[cur].val;\r\n        int mid = (l + r) >> 1;\r\n        return (1LL * query(t[cur].l, l, mid, L, R) * query(t[cur].r, mid + 1, r, L, R)) % mod;\r\n}\r\n\r\n\r\nvector <int> small_prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449};\r\n\r\nint32_t main() {\r\n\tios_base :: sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n\tint n; cin >> n;\r\n\tfor(int i = 1; i <= n; i++) {\r\n\t\tcin >> a[i];\r\n\t\tfor(int j = 0; j < small_prime.size(); j++) {\r\n\t\t\tint cc = 0;\r\n\t\t\twhile(a[i] % small_prime[j] == 0) {\r\n\t\t\t\t++cc;\r\n\t\t\t\ta[i] /= small_prime[j];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(cc) ST[j].modify(i, cc);\r\n\t\t}\r\n\t\troot[i] = root[i - 1];\r\n\t\tif(a[i] > 1) {\r\n\t\t\tif(prv_occ[a[i]]) {\r\n\t\t\t\tint kk = ++ptr;\r\n\t\t\t\tadd(kk, root[i], 1, n, prv_occ[a[i]], 1);\r\n\t\t\t\tint zz = ++ptr;\r\n\t\t\t\tadd(zz, kk, 1, n, i, a[i]);\r\n\t\t\t\troot[i] = zz;\r\n\t\t\t} else {\r\n\t\t\t\tint kk = ++ptr;\r\n\t\t\t\tadd(kk, root[i], 1, n, i, a[i]);\r\n\t\t\t\troot[i] = kk;\r\n\t\t\t}\r\n\t\t\tprv_occ[a[i]] = i;\r\n\t\t}\r\n\t}\r\n\r\n\tint last = 0, q; cin >> q;\r\n\r\n\tfor(int i = 1; i <= q; i++) {\r\n\t\tint l, r; cin >> l >> r;\r\n\t\tl = (l + last) % n + 1, r = (r + last) % n + 1;\r\n\t\tif(l > r) swap(l, r);\r\n\t\tint ans = 1;\r\n\t\tfor(int j = 0; j < small_prime.size(); j++) {\r\n\t\t\tans = 1LL * ans * pow(small_prime[j], ST[j].query(l, r), mod) % mod;\r\n\t\t}\r\n\t\tans = 1LL * ans * query(root[r], 1, n, l, r) % mod;\r\n\t\tlast = ans;\r\n\t\tcout << ans << \"\\n\";\r\n\t}\r\n}"
}