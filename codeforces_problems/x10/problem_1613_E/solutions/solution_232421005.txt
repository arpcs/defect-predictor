{
    "id": 232421005,
    "contestId": 1613,
    "creationTimeSeconds": 1699726006,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1613,
        "index": "E",
        "name": "Crazy Robot",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1613,
        "members": [
            {
                "handle": "nicolexu"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1638369300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\nint dr[] = {-1, 0, 1, 0}, dc[] = {0, 1, 0, -1};\r\n\r\nint main() {\r\n\tint t; cin >> t;\r\n\twhile(t--) {\r\n\t\tint n, m;\r\n\t\tcin >> n >> m;\r\n\t\tint sr = 0, sc = 0;\r\n\t\tvector<vector<int>> grid(n, vector<int>(m));\r\n\t\tvector<vector<bool>> visited(n, vector<bool>(m));\r\n\t\t\r\n\t\tfor(int i = 0; i < n; i++) {\r\n\t\t\tstring l; cin >> l;\r\n\t\t\tfor(int j = 0; j < m; j++) {\r\n\t\t\t\tif(l[j] == 'L') {\r\n\t\t\t\t\tsr = i; \r\n\t\t\t\t\tsc = j;\r\n\t\t\t\t} else if(l[j] == '#') {\r\n\t\t\t\t\tgrid[i][j] = -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tdeque<pair<int, int>> toVisit;\r\n\t\tfor(int k = 0; k < 4; k++) {\r\n\t\t\tint nr = sr + dr[k];\r\n\t\t\tint nc = sc + dc[k];\r\n\t\t\t\r\n\t\t\tif(nr < 0 || nr >= n || nc < 0 || nc >= m || grid[nr][nc] == -1) continue;\r\n\t\t\ttoVisit.push_back({nr, nc});\r\n\t\t}\r\n\t\t\r\n\t\twhile(!toVisit.empty()) {\r\n\t\t\tpair<int, int> curr = toVisit.front();\r\n\t\t\ttoVisit.pop_front();\r\n\t\t\tint r = curr.first, c = curr.second;\r\n\t\t\tif(visited[r][c]) continue;\r\n\t\t\tvisited[r][c] = true;\r\n\t\t\t\r\n\t\t\tint dir = 0;\r\n\t\t\tfor(int k = 0; k < 4; k++) {\r\n\t\t\t\tint nr = r + dr[k];\r\n\t\t\t\tint nc = c + dc[k];\r\n\t\t\t\t\r\n\t\t\t\tif(nr < 0 || nr >= n || nc < 0 || nc >= m || grid[nr][nc] < 0) continue;\r\n\t\t\t\tdir++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(dir <= 2) grid[r][c] = 1;\r\n\t\t\telse {\r\n\t\t\t\tgrid[r][c] = -2;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(int k = 0; k < 4; k++) {\r\n\t\t\t\tint nr = r + dr[k];\r\n\t\t\t\tint nc = c + dc[k];\r\n\t\t\t\t\r\n\t\t\t\tif(nr < 0 || nr >= n || nc < 0 || nc >= m || visited[nr][nc] || grid[nr][nc] == -1) continue;\r\n\t\t\t\ttoVisit.push_back({nr, nc});\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tfor(int i = 0; i < n; i++) {\r\n\t\t\tfor(int j = 0; j < m; j++) {\r\n\t\t\t\tif(i == sr && j == sc) cout << 'L';\r\n\t\t\t\telse if(grid[i][j] == 1) cout << '+';\r\n\t\t\t\telse if(grid[i][j] == -1) cout << '#';\r\n\t\t\t\telse cout << '.';\r\n\t\t\t}\r\n\t\t\tcout << endl;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n"
}