{
    "id": 233891652,
    "contestId": 1613,
    "creationTimeSeconds": 1700734090,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1613,
        "index": "E",
        "name": "Crazy Robot",
        "type": "PROGRAMMING",
        "rating": 2000,
        "tags": [
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 1613,
        "members": [
            {
                "handle": "kjhhjki"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1638369300
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 272076800,
    "source": "#include <bits/stdc++.h>\r\n#define For(i, a, b) for (i32 i = (a), endi = (b); i <= endi; ++i)\r\n#define foR(i, a, b) for (i32 i = (a), endi = (b); i >= endi; --i)\r\n#define ForE(i, u) for (i32 i = head[u]; i; i = e[i].nxt)\r\nusing namespace std;\r\n\r\nusing i32 = int;\r\nusing u32 = unsigned int;\r\nusing i64 = long long;\r\nusing u64 = unsigned long long;\r\nusing f64 = long double;\r\nusing pii = pair<i32,i32>;\r\nusing pll = pair<i64,i64>;\r\n\r\nconst i32 MAXN = 1e6+6;\r\nconst i32 INF = 0x7fffffff;\r\n\r\nstruct edge { i32 to,nxt; } e[MAXN<<1];\r\ni32 tot, head[MAXN];\r\nvoid add_edge(i32 u, i32 v) { e[++tot] = {v,head[u]}; head[u] = tot; } \r\n\r\nstruct Query { i32 op, v, x; } qry[MAXN];\r\n\r\ni32 n,m,q,u,v;\r\ni64 a[MAXN], ans[MAXN];\r\ni32 T, dfn[MAXN], in[MAXN], out[MAXN];\r\nstring s[MAXN];\r\nvector<bool> vis[MAXN];\r\npii L;\r\nvoid dfs(i32 i, i32 j)\r\n{\r\n    i32 cnt = 0;\r\n    if(j && (s[i][j-1] == '.')) ++cnt;\r\n    if(i && (s[i-1][j] == '.')) ++cnt;\r\n    if(j < m-1 && (s[i][j+1] == '.')) ++cnt;\r\n    if(i < n-1 && (s[i+1][j] == '.')) ++cnt;\r\n    if(cnt <= 1 && s[i][j] != 'L') s[i][j] = '+', vis[i][j] = 1;\r\n    else if(cnt >= 2 && s[i][j] != 'L') return;\r\n    if(j && !vis[i][j-1] && (s[i][j-1] == '.')) dfs(i,j-1);\r\n    if(i && !vis[i-1][j] && (s[i-1][j] == '.')) dfs(i-1,j);\r\n    if(j < m-1 && !vis[i][j+1] && (s[i][j+1] == '.')) dfs(i,j+1);\r\n    if(i < n-1 && !vis[i+1][j] && (s[i+1][j] == '.')) dfs(i+1,j);\r\n}\r\nvoid solve()\r\n{\r\n    cin >> n >> m;\r\n    For(i,0,n-1) cin >> s[i], vis[i].clear(), vis[i].resize(m);\r\n    For(i,0,n-1) \r\n    {\r\n        i32 f = 0;\r\n        For(j,0,m-1)\r\n            if(s[i][j] == 'L') \r\n            { f = 1; L = pii(i,j);  break; }\r\n        if(f) break;\r\n    }\r\n    vis[L.first][L.second] = 1;\r\n    dfs(L.first, L.second);\r\n    For(i,0,n-1) cout << s[i] << '\\n';\r\n}\r\ni32 main()\r\n{\r\n    ios::sync_with_stdio(0);\r\n    cin.tie(0); cout.tie(0);\r\n    i32 T;\r\n    cin >> T;\r\n    while(T--) solve();\r\n    return 0;\r\n}"
}