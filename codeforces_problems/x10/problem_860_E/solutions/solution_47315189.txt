{
    "id": 47315189,
    "contestId": 860,
    "creationTimeSeconds": 1545358319,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 860,
        "index": "E",
        "name": "Arkady and a Nobody-men",
        "type": "PROGRAMMING",
        "points": 2250.0,
        "rating": 2700,
        "tags": [
            "data structures",
            "dfs and similar",
            "trees"
        ]
    },
    "author": {
        "contestId": 860,
        "members": [
            {
                "handle": "tianyi_luo"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1505653500
    },
    "programmingLanguage": "GNU C++11",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 36,
    "timeConsumedMillis": 1263,
    "memoryConsumedBytes": 88268800,
    "source": "#include<iostream>\r\n#include<cstdio>\r\n#include<algorithm>\r\n#include<cstring>\r\n#include<cmath>\r\n#include<set>\r\n#include<map>\r\n#include<queue>\r\nusing namespace std;\r\ntypedef long long ll;\r\n#define sqr(x) ((x)*(x))\r\n#define mp make_pair\r\nconst int N=500005;\r\nvector<int> v[N];\r\nll tree[N<<2],ans[N],c2[N];\r\nint nedge,c1[N],wson[N],ed[N<<1],nextt[N<<1],son[N],lazy[N<<2],peo[N],deep[N],ti,n,pos[N],father[N],in[N],top[N];\r\nvoid aedge(int a,int b){\r\n    nextt[++nedge]=son[a]; son[a]=nedge; ed[nedge]=b;\r\n}\r\n#define lowbit(i) i&-i\r\ninline void add(int x,int v){\r\n\tll xx=(ll)(x-1)*v;\r\n    for(int i=x;i<=n;i+=lowbit(i)) c1[i]+=v,c2[i]+=xx;\r\n}\r\ninline ll getsum(ll pos){\r\n    ll ret1=0,ret2=0;\r\n    for(int i=pos;i;i-=lowbit(i)){ret1+=c1[i]; ret2-=c2[i];}\r\n    return ret1*pos+ret2;\r\n}\r\ninline void Add(int l,int r){\r\n\tadd(l,1); add(r+1,-1);\r\n}\r\ninline ll ask(int l,int r){\r\n\treturn getsum(r)-getsum(l-1);\r\n}\r\nvoid dfs1(int p){\r\n    peo[p]=1; wson[p]=-1;\r\n    for(int i=son[p];i;i=nextt[i]){\r\n        deep[ed[i]]=deep[p]+1; father[ed[i]]=p;\r\n        dfs1(ed[i]); peo[p]+=peo[ed[i]];\r\n        if(wson[p]==-1||peo[ed[i]]>peo[wson[p]])wson[p]=ed[i];\r\n    }\r\n}\r\nvoid dfs2(int p){\r\n    pos[in[p]=++ti]=p;\r\n    if(p==wson[father[p]])top[p]=top[father[p]]; else top[p]=p;\r\n    if(wson[p]!=-1)dfs2(wson[p]);\r\n    for(int i=son[p];i;i=nextt[i])if(ed[i]!=wson[p])dfs2(ed[i]);\r\n}\r\nvoid init(int s){\r\n    nedge=deep[s]=ti=0; dfs1(s); dfs2(s); \r\n}\r\nvoid update(int pos){\r\n\tfor(int i=pos;i;i=father[top[i]]){\r\n\t\tAdd(in[top[i]],in[i]);\r\n\t}\r\n}\r\nll get(int pos){\r\n\tll ans=0;\r\n\tfor(int i=pos;i;i=father[top[i]]){\r\n\t\tans+=ask(in[top[i]],in[i]);\r\n\t}\r\n\treturn ans;\r\n}\r\ninline char gc(){\r\n    static char buf[100000],*p1=buf,*p2=buf;\r\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\r\n}\r\n#define getchar gc\r\ninline int read(){\r\n    int x = 0; char ch = getchar(); bool positive = 1;\r\n    for (; !isdigit(ch); ch = getchar())\tif (ch == '-')\tpositive = 0;\r\n    for (; isdigit(ch); ch = getchar())\tx = x * 10 + ch - '0';\r\n    return positive ? x : -x;\r\n}\r\ninline void write(ll a){\r\n    if(a>=10)write(a/10);\r\n    putchar('0'+a%10);\r\n}\r\ninline void writeln(ll a){\r\n    if(a<0){\r\n    \ta=-a; putchar('-');\r\n    }\r\n    write(a); puts(\"\");\r\n}\r\nsigned main(){\r\n\tn=read(); int gen;\r\n\tfor(int i=1;i<=n;i++)father[i]=read();\r\n\tfor(int i=1;i<=n;i++)if(father[i])aedge(father[i],i); else gen=i;\r\n\tinit(gen);\r\n\tfor(int i=1;i<=n;i++)v[deep[i]].push_back(i);\r\n\tfor(int i=0;i<n;i++){\r\n\t\tfor(unsigned j=0;j<v[i].size();j++)update(v[i][j]);\r\n\t\t//cout<<get(2)<<endl;\r\n\t\tfor(unsigned j=0;j<v[i].size();j++)ans[v[i][j]]=get(v[i][j])-deep[v[i][j]]-1;\r\n\t}\r\n\tfor(int i=1;i<=n;i++){\r\n\t\twrite(ans[i]); putchar(' ');\r\n\t}\r\n}"
}