{
    "contestId": 1612,
    "index": "B",
    "name": "Special Permutation",
    "type": "PROGRAMMING",
    "rating": 900,
    "tags": [
        "constructive algorithms",
        "greedy"
    ],
    "desc": {
        "title": "B. Special Permutation",
        "statement": "<p>A permutation of length $$$n$$$ is an array $$$p=[p_1,p_2,\\dots, p_n]$$$ which contains every integer from $$$1$$$ to $$$n$$$ (inclusive) exactly once. For example, $$$p=[4, 2, 6, 5, 3, 1]$$$ is a permutation of length $$$6$$$.</p><p>You are given three integers $$$n$$$, $$$a$$$ and $$$b$$$, where $$$n$$$ is an even number. Print any permutation of length $$$n$$$ that the minimum among <span class=\"tex-font-style-bf\">all its elements of the left half</span> equals $$$a$$$ and the maximum among <span class=\"tex-font-style-bf\">all its elements of the right half</span> equals $$$b$$$. Print <span class=\"tex-font-style-tt\">-1</span> if no such permutation exists.</p>",
        "inputSpecification": "<p>The first line of the input contains one integer $$$t$$$ ($$$1 \\le t \\le 1000$$$), the number of test cases in the test. The following $$$t$$$ lines contain test case descriptions.</p><p>Each test case description contains three integers $$$n$$$, $$$a$$$, $$$b$$$ ($$$2 \\le n \\le 100$$$; $$$1 \\le a,b \\le n$$$; $$$a \\ne b$$$), where $$$n$$$ is an even number (i.e. $$$n \\bmod 2 = 0$$$).</p>",
        "outputSpecification": "<p>For each test case, print a single line containing any suitable permutation. Print <span class=\"tex-font-style-tt\">-1</span> no such permutation exists. If there are multiple answers, print any of them.</p>",
        "samples": [
            {
                "input": "\n7\n6 2 5\n6 1 3\n6 4 3\n4 2 4\n10 5 3\n2 1 2\n2 2 1\n",
                "output": "\n4 2 6 5 3 1\n-1\n6 4 5 1 3 2 \n3 2 4 1 \n-1\n1 2 \n2 1 \n"
            }
        ],
        "note": null
    },
    "category_evaluation": {
        "mathematics": 10,
        "dynamic programming": 5,
        "bit manipulation": 2,
        "greedy": 40,
        "brute force": 20,
        "graphs": 5,
        "sortings": 9,
        "search": 10,
        "trees": 2,
        "strings": 3,
        "number theory": 5,
        "combinatorics": 5,
        "two pointers": 2,
        "geometry": 1,
        "shortest paths": 3,
        "divide and conquer": 3,
        "probabilities": 2,
        "data structures": 10,
        "game theory": 2,
        "2d, 3d": 1,
        "recursive": 2,
        "well-commented": 40,
        "self-documenting": 30,
        "complex": 10,
        "readable": 40,
        "well-named": 50,
        "efficient": 20,
        "reusable": 15,
        "documented": 35,
        "good error-handling": 10,
        "good solution": 50,
        "compilation error": 5,
        "runtime error": 3
    }
}