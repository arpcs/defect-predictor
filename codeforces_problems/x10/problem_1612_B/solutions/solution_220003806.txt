{
    "id": 220003806,
    "contestId": 1612,
    "creationTimeSeconds": 1692778075,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1612,
        "index": "B",
        "name": "Special Permutation",
        "type": "PROGRAMMING",
        "rating": 900,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 1612,
        "members": [
            {
                "handle": "vjudge4"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1637573700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 7,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 0,
    "source": "#include<bits/stdc++.h>\n#define int long long\n#define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)\n#define endl '\\n'\n\nusing namespace std;\nconst int N=1e5+10;\n\nvector<string>ve,ans;\nstack<int> s;\nset<int> st;\nmap<int,int> ma;\nsigned main()\n{\n    IOS;\n    int t;\n    cin>>t;\n    while(t--)\n    {\n        int n;\n        int a,b;\n        map<int,int> ma;\n        cin>>n>>a>>b;\n        vector<int> ans;\n        ans.push_back(a);\n        if(a>b)\n        {\n            for(int i=a+1; i<=n; i++)\n            {\n                ans.push_back(i);\n                ma[i]++;\n            }\n            if(ans.size()!=n/2)\n            {\n                cout << -1 <<endl;\n            }\n            else\n            {\n                if(b!=a-1){\n                    cout << -1 <<endl;\n                }\n                else\n               {\n                    for(int i=1; i<a; i++)\n                {\n                    ans.push_back(i);\n                }\n                for(int i=0; i<=n-1; i++)\n                {\n                    cout << ans[i] <<' ';\n                }\n                cout << endl;\n\n               }\n            }\n        }\n        else\n        {\n            ma[a]++;\n            for(int i=b+1; i<=n; i++)\n            {\n                ans.push_back(i);\n                ma[i]++;\n            }\n            if(ans.size()>n/2)\n            {\n                cout << -1 <<endl;\n            }\n            else\n            {\n                for(int i=a+1; i<b; i++)\n                {\n                    if(ans.size()==n/2)\n                    {\n                        break;\n                    }\n                    ans.push_back(i);\n                    ma[i]++;\n                }\n                if(ans.size()!=n/2)\n                {\n                    cout << -1 <<endl;\n                }\n                else\n                {\n                    for(int i=1; i<=n; i++)\n                    {\n                        if(ma[i]==0)\n                        {\n                            ans.push_back(i);\n                        }\n                    }\n                    for(int i=0; i<=n-1; i++)\n                    {\n                        cout << ans[i] <<' ';\n                    }\n                    cout << endl;\n                }\n            }\n        }\n    }\n    return 0;\n}\n\n\t\t \t\t\t   \t\t \t \t \t \t  \t \t\t\t   \t\t",
    "defect_evaluation_v4": {
        "good solution": 70,
        "wrong solution": 30,
        "compilation error": 0,
        "runtime error": 0
    },
    "category_evaluation": {
        "mathematics": 0,
        "dynamic programming": 0,
        "bit manipulation": 0,
        "greedy": 24,
        "brute force": 0,
        "graphs": 0,
        "sortings": 0,
        "search": 0,
        "trees": 0,
        "strings": 0,
        "number theory": 0,
        "combinatorics": 0,
        "two pointers": 0,
        "geometry": 0,
        "shortest paths": 0,
        "divide and conquer": 0,
        "probabilities": 0,
        "data structures": 0,
        "game theory": 0,
        "2d, 3d": 0,
        "recursive": 0,
        "well-commented": 8,
        "self-documenting": 6,
        "complex": 0,
        "readable": 10,
        "well-named": 6,
        "efficient": 9,
        "reusable": 4,
        "documented": 6,
        "good error-handling": 0,
        "good solution": 0,
        "compilation error": 0,
        "runtime error": 0
    }
}