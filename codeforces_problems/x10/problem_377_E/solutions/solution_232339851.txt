{
    "id": 232339851,
    "contestId": 377,
    "creationTimeSeconds": 1699689879,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 377,
        "index": "E",
        "name": "Cookie Clicker",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 2800,
        "tags": [
            "dp",
            "geometry"
        ]
    },
    "author": {
        "contestId": 377,
        "members": [
            {
                "handle": "406"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1388331000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 12,
    "timeConsumedMillis": 124,
    "memoryConsumedBytes": 7372800,
    "source": "//besmellah\n#include <bits/stdc++.h>\n#define int long long\n#define FOR(i, a, b) for (int i = (a); i < (b); ++i)\nusing namespace std;\nusing ar = array<int, 2>;\n\nconst int N = 2e5 + 5;\nconst long long INF = 1ll << 60;\n\nvector<pair<int, ar>> hull;\nint n, s;\n\nint isect(ar X, ar Y) {\n       int m = X[0] - Y[0], b = Y[1] - X[1]; \n       if (m == 0) return -INF;\n       return b > 0 ? (b + m - 1) / m : b / m;\n}\n\nvoid add(ar L) {\n       while (hull.size()) {\n                int x = isect(L, hull.back().second);\n                if (x <= hull.back().first)\n                        hull.pop_back();\n                else {\n                        hull.push_back({x, L});\n                        return;\n                }\n       }\n       hull.push_back({-INF, L});\n}\n\nint mult(int x, int y) {\n        int lg = __lg(x) + __lg(y);\n        if (lg >= 60) return INF;\n        return x * y;\n}\n\nint get(int x) {\n        int id = lower_bound(hull.begin(), hull.end(), pair<int, ar>{x, {INF, INF}}) - hull.begin() - 1;\n        return mult(hull[id].second[0], x) + hull[id].second[1];\n}\n\nsigned main() {\n        ios::sync_with_stdio(false);\n        cin.tie(nullptr); \n        vector<ar> V;\n        cin >> n >> s;\n        FOR(i, 0, n) {\n                int c, v;\n                cin >> v >> c;\n                V.push_back({v, c});\n        }\n        sort(V.begin(), V.end());\n        add({0, 0});\n\n        for (auto [v, c]: V) {\n                int l = -1, r = c + 1; \n                while (r - l > 1) {\n                        int m = l + r >> 1;\n                        if (get(m) >= c) r = m;\n                        else l = m;\n                }\n                //r = time\n                int cur = get(r); //dp[time]\n                add({v, cur - v * r - c});\n        }\n        int l = -1, r = s + 1;\n        while (r - l > 1) {\n                int m = l + r >> 1;\n                if (get(m) >= s) r = m;\n                else l = m;\n        }\n        cout << r << '\\n';\n        return 0;\n}\n"
}