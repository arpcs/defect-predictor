{
    "contestId": 364,
    "index": "C",
    "name": "Beautiful Set",
    "type": "PROGRAMMING",
    "points": 1500.0,
    "rating": 2300,
    "tags": [
        "brute force",
        "number theory"
    ],
    "desc": {
        "title": "C. Beautiful Set",
        "statement": "<p>We'll call a set of positive integers <span class=\"tex-span\"><i>a</i></span> beautiful if the following condition fulfills: for any prime <span class=\"tex-span\"><i>p</i></span>, if <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/60a03c36680044f0bf831aad4ee38c0e4e5fea90.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>, then <img align=\"middle\" class=\"tex-formula\" src=\"https://espresso.codeforces.com/6c79564a80ed73bfd97a34135be5692a1cd5936e.png\" style=\"max-width: 100.0%;max-height: 100.0%;\"/>. In other words, if one number from the set is divisible by prime <span class=\"tex-span\"><i>p</i></span>, then at least half of numbers from the set is divisible by <span class=\"tex-span\"><i>p</i></span>.</p><p>Your task is to find any beautiful set, where the number of elements is equal to <span class=\"tex-span\"><i>k</i></span> and each element doesn't exceed <span class=\"tex-span\">2<i>k</i><sup class=\"upper-index\">2</sup></span>.</p>",
        "inputSpecification": "<p>The first line contains integer <span class=\"tex-span\"><i>k</i></span> (<span class=\"tex-span\">10\u2009\u2264\u2009<i>k</i>\u2009\u2264\u20095000</span>) that shows how many numbers the required beautiful set should have.</p>",
        "outputSpecification": "<p>In the first line print <span class=\"tex-span\"><i>k</i></span> space-separated integers that are a beautiful set. If there are multiple such sets, you are allowed to print any of them.</p>",
        "samples": [
            {
                "input": "10<br/>",
                "output": "16 18 24 27 36 48 54 72 108 144 <br/>"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "number theory",
        "prime numbers",
        "set theory",
        "divisibility",
        "combinatorics",
        "mathematics",
        "algorithms",
        "optimization",
        "data structures",
        "logic",
        "constraints",
        "proof techniques",
        "recursion",
        "dynamic programming",
        "complexity analysis",
        "greedy algorithms",
        "integer sets",
        "number set construction",
        "algorithmic thinking",
        "problem solving"
    ]
}