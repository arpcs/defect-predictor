{
    "id": 224007807,
    "contestId": 1830,
    "creationTimeSeconds": 1695112446,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1830,
        "index": "B",
        "name": "The BOSS Can Count Pairs",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "math"
        ]
    },
    "author": {
        "contestId": 1830,
        "members": [
            {
                "handle": "F.R.S"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1685284500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 20,
    "timeConsumedMillis": 2964,
    "memoryConsumedBytes": 13004800,
    "source": "#include <iostream>\r\n#include <map>\r\n#include <cmath>\r\n\r\nusing namespace std;\r\n\r\n#define ll long long\r\n\r\nconst int maxN = 2e5+5;\r\nint t, n;\r\n\r\nstruct s{\r\n    int a, b;\r\n}s[maxN];\r\n\r\nint main(){\r\n    ios::sync_with_stdio(false);\r\n    cin.tie();\r\n    cin >> t;\r\n    while (t--){\r\n        cin >> n;\r\n        for (int i = 1; i <= n; ++i) cin >> s[i].a;\r\n        for (int i = 1; i <= n; ++i) cin >> s[i].b;\r\n//        sort(s+1, s+n+1, [] (struct s& x, struct s&y){return x.a < y.a;});\r\n        map<int, int> q[n+1];\r\n        for (int i = 1; i <= n; ++i) {\r\n            auto k = q[s[i].a].find(s[i].b);\r\n            if (k == q[s[i].a].end()) q[s[i].a].insert({s[i].b, 1});\r\n            else k->second++;\r\n        }\r\n        ll ans = 0;\r\n        for (int i = 1; i <= n; ++i) {\r\n            if (q[i].empty()) continue;\r\n            if (q[i].size() >= 2 || q[i].begin()->second >= 2){\r\n                if ((ll)i*i > 2*n) break;\r\n                int s1 = i*i;\r\n                for (auto k:q[i]) {\r\n                    if (s1 == 2*k.first){\r\n                        if (k.second >= 2) ans += (ll)k.second*(k.second-1);\r\n                    }else{\r\n                        auto j = q[i].find(s1-k.first);\r\n                        if (j == q[i].end()) continue;\r\n                        ans += (ll)k.second*j->second;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        ans /= 2;\r\n        for (int i = 1; i <= sqrt(2*n); ++i) {\r\n            if (q[i].empty()) continue;\r\n            for (int j = i+1; j <= n; ++j) {\r\n                if ((ll)i*j > 2*n) break;\r\n                if (q[j].empty()) continue;\r\n                int s1 = i*j;\r\n                if (q[i].size() <= q[j].size()){\r\n                    for (auto k:q[i]) {\r\n                        auto l = q[j].find(s1-k.first);\r\n                        if (l == q[j].end()) continue;\r\n                        ans += (ll)l->second*k.second;\r\n                    }\r\n                }else{\r\n                    for (auto k:q[j]) {\r\n                        auto l = q[i].find(s1-k.first);\r\n                        if (l == q[i].end()) continue;\r\n                        ans += (ll)l->second*k.second;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        cout << ans << \"\\n\";\r\n    }\r\n    return 0;\r\n}"
}