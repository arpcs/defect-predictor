{
    "id": 225581925,
    "contestId": 1830,
    "creationTimeSeconds": 1695861469,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1830,
        "index": "B",
        "name": "The BOSS Can Count Pairs",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 2000,
        "tags": [
            "brute force",
            "math"
        ]
    },
    "author": {
        "contestId": 1830,
        "members": [
            {
                "handle": "Nicolas125841"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1685284500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 2588,
    "memoryConsumedBytes": 27955200,
    "source": "#include <bits/stdc++.h>\r\n#include <bits/extc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define rep(i, a, b) for(int i = a; i < (b); ++i)\r\n#define all(x) begin(x), end(x)\r\n#define sz(x) (int)(x).size()\r\ntypedef long long ll;\r\ntypedef pair<int, int> pii;\r\ntypedef vector<int> vi;\r\n\r\n// To use most b i ts rather than jus t the lowest ones :\r\nstruct chash { // large odd number for C\r\nconst uint64_t C = ll(4e18 * acos(0)) | 71;\r\nll operator()(ll x) const { return __builtin_bswap64(x*C); }\r\n};\r\n\r\nint cap = 633;\r\n\r\nint main() {\r\n    cin.tie(0)->sync_with_stdio(0);\r\n\r\n    int t;\r\n    cin >> t;\r\n\r\n    while(t--){\r\n        int n;\r\n        cin >> n;\r\n\r\n        vi a(n), b(n);\r\n        for(int i = 0; i < n; i++)\r\n            cin >> a[i];\r\n\r\n        for(int i = 0; i < n; i++)\r\n            cin >> b[i];\r\n\r\n        vector<array<ll, 2>> p;\r\n        for(int i = 0; i < n; i++)\r\n            p.push_back({a[i], b[i]});\r\n\r\n        sort(all(p));\r\n\r\n        ll count = 0;\r\n        vector<ll> ids, offs;\r\n        vector<__gnu_pbds::gp_hash_table<ll,ll,chash>> counts;\r\n\r\n        for(int i = 0; i < n; i++){\r\n            if(ids.empty() || ids.back() != p[i][0]){\r\n                for(int j = 0; j < ids.size(); j++){\r\n                    offs[j] += (p[i][0] - ids.back()) * ids[j]; \r\n\r\n                    if(counts[j].find(-p[i][1] + offs[j]) != counts[j].end())\r\n                        count += counts[j][-p[i][1] + offs[j]];\r\n                }\r\n\r\n                if(p[i][0] < cap){\r\n                    ids.push_back(p[i][0]);\r\n                    offs.push_back(0);\r\n                    counts.push_back(__gnu_pbds::gp_hash_table<ll,ll,chash>({},{},{},{},{1<<0}));\r\n\r\n                    ++counts.back()[p[i][1] - p[i][0] * p[i][0]];\r\n                }\r\n            }else{\r\n                for(int j = 0; j < ids.size(); j++) \r\n                    if(counts[j].find(-p[i][1] + offs[j]) != counts[j].end())\r\n                        count += counts[j][-p[i][1] + offs[j]];\r\n\r\n                ++counts.back()[p[i][1] - p[i][0] * p[i][0]];\r\n            }\r\n        }\r\n    \r\n        cout << count << \"\\n\";   \r\n    }\r\n}"
}