{
    "id": 225675215,
    "contestId": 727,
    "creationTimeSeconds": 1695915319,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 727,
        "index": "D",
        "name": "T-shirts Distribution",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 1800,
        "tags": [
            "constructive algorithms",
            "flows",
            "greedy"
        ]
    },
    "author": {
        "contestId": 727,
        "members": [
            {
                "handle": "GuilhermeCdM"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1476522300
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 125,
    "timeConsumedMillis": 233,
    "memoryConsumedBytes": 61132800,
    "source": "#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define VMAX 100010\r\n#define S 100008\r\n#define T 100009\r\n#define INF 1000000000\r\n#define fi first\r\n#define se second\r\n#define pb push_back\r\n#define endl '\\n'\r\n\r\ntypedef long long ll;\r\n\r\ntypedef struct Edge\r\n{\r\n\r\n\tll u, v, w, used;\r\n\r\n}Ed;\r\n\r\nvector< Ed > edges;\r\nvector< ll > grafo[VMAX];\r\n\r\nll dist[VMAX];\r\n\r\nll ult[VMAX];\r\n\r\nvoid addEdge(ll u, ll v, ll w1, ll w2)\r\n{\r\n\r\n\tgrafo[u].pb(edges.size());\r\n\tedges.pb({u, v, w1, 0});\r\n\r\n\tgrafo[v].pb(edges.size());\r\n\tedges.pb({v, u, w2, 0});\r\n\t\r\n\treturn;\r\n\r\n}\r\n\r\nvoid removeEdge()\r\n{\r\n\r\n\tll u = edges.back().u;\r\n\tll v = edges.back().v;\r\n\t\r\n\tgrafo[u].pop_back();\r\n\tedges.pop_back();\r\n\t\r\n\tgrafo[v].pop_back();\r\n\tedges.pop_back();\r\n\t\r\n\treturn;\r\n\r\n}\r\n\r\nbool BFS()\r\n{\r\n\t\r\n\tmemset(dist, -1, sizeof dist);\r\n\t\r\n\tll u;\r\n\t\r\n\tEd ed;\r\n\t\r\n\tqueue< ll > fila;\r\n\t\r\n\tdist[S] = 0;\r\n\tfila.push(S);\r\n\t\r\n\twhile(fila.empty() == false)\r\n\t{\r\n\t\r\n\t\tu = fila.front();\r\n\t\tfila.pop();\r\n\t\t\r\n\t\tfor(auto id : grafo[u])\r\n\t\t{\r\n\t\t\r\n\t\t\ted = edges[id];\r\n\t\t\t\r\n\t\t\tif(ed.w - ed.used == 0) continue;\r\n\t\t\t\r\n\t\t\tif(dist[ed.v] == -1)\r\n\t\t\t{\r\n\t\t\t\r\n\t\t\t\tdist[ed.v] = dist[ed.u] + 1;\r\n\t\t\t\tfila.push(ed.v);\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\treturn (dist[T] != -1);\r\n\r\n}\r\n\r\nll DFS(ll u, ll me)\r\n{\r\n\r\n\tif(u == T) return me;\r\n\t\r\n\tll id, x;\r\n\t\r\n\tEd ed;\r\n\t\r\n\tfor(ll& i = ult[u];i < grafo[u].size();i++)\r\n\t{\r\n\t\r\n\t\tid = grafo[u][i];\r\n\t\ted = edges[id];\r\n\t\r\n\t\tif(ed.w - ed.used == 0) continue;\r\n\t\tif(dist[ed.v] != dist[ed.u] + 1) continue;\r\n\t\t\r\n\t\tx = DFS(ed.v, min(me, ed.w - ed.used));\r\n\t\t\r\n\t\tif(x == 0) continue;\r\n\t\t\r\n\t\tedges[id].used += x;\r\n\t\tedges[id ^ 1].used -= x;\r\n\t\t\r\n\t\treturn x;\r\n\t\r\n\t}\r\n\t\r\n\treturn 0;\r\n\r\n}\r\n\r\nll maxFlow()\r\n{\r\n\r\n\tll x, flow = 0;\r\n\r\n\twhile(BFS() == true)\r\n\t{\r\n\t\r\n\t\tmemset(ult, 0, sizeof ult);\r\n\t\t\r\n\t\tdo\r\n\t\t{\r\n\t\t\r\n\t\t\tx = DFS(S, INF);\r\n\t\t\t\r\n\t\t\tflow += x;\r\n\t\t\r\n\t\t}while(x != 0);\r\n\t\r\n\t}\r\n\t\r\n\treturn flow;\r\n\t\r\n}\r\n\r\nint main()\r\n{\r\n\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n\tcout.tie(0);\r\n\t\r\n\tll n, w, i;\r\n\t\r\n\tstring s, t; \r\n\t\r\n\tmap< string, ll > id;\r\n\tmap< ll, string > iid;\r\n\t\r\n\tid[\"S\"]   \t= 100001;\r\n\tid[\"M\"]   \t= 100002;\r\n\tid[\"L\"]   \t= 100003;\r\n\tid[\"XL\"]  \t= 100004;\r\n\tid[\"XXL\"] \t= 100005;\r\n\tid[\"XXXL\"]\t= 100006;\r\n\t\r\n\tiid[100001] = \"S\";\r\n\tiid[100002] = \"M\";\r\n\tiid[100003] = \"L\";\r\n\tiid[100004] = \"XL\";\r\n\tiid[100005] = \"XXL\";\r\n\tiid[100006] = \"XXXL\";\r\n\t\r\n\tfor(i = 100001;i <= 100006;i++)\r\n\t{\r\n\t\r\n\t\tcin >> w;\r\n\t\t\r\n\t\taddEdge(i, T, w, 0);\r\n\t\r\n\t}\r\n\t\r\n\tcin >> n;\r\n\t\r\n\tfor(i = 1;i <= n;i++)\r\n\t{\r\n\t\t\r\n\t\taddEdge(S, i, 1, 0);\r\n\t\r\n\t\tcin >> s;\r\n\t\ts.pb(',');\r\n\t\t\r\n\t\tt.clear();\r\n\t\t\r\n\t\tfor(auto ch : s)\r\n\t\t{\r\n\t\t\r\n\t\t\tif(ch == ',')\r\n\t\t\t{\r\n\t\t\t\r\n\t\t\t\taddEdge(i, id[t], 1, 0);\r\n\t\t\t\t\r\n\t\t\t\tt.clear();\r\n\t\t\t\r\n\t\t\t}else\r\n\t\t\t{\r\n\t\t\t\r\n\t\t\t\tt.pb(ch);\r\n\t\t\t\r\n\t\t\t}\r\n\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\tif(maxFlow() != n)\r\n\t{\r\n\t\r\n\t\tcout << \"NO\" << endl;\r\n\t\t\r\n\t\treturn 0; \r\n\t\r\n\t}\r\n\t\r\n\tcout << \"YES\" << endl;\r\n\t\r\n\tfor(i = 1;i <= n;i++)\r\n\t{\r\n\t\r\n\t\tfor(auto id : grafo[i])\r\n\t\t{\r\n\t\t\r\n\t\t\tif(edges[id].used == 1)\r\n\t\t\t\tcout << iid[edges[id].v] << endl;\r\n\t\t\r\n\t\t}\r\n\t\r\n\t}\r\n\t\r\n\treturn 0;\r\n\r\n}"
}