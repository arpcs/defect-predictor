{
    "id": 197170570,
    "contestId": 252,
    "creationTimeSeconds": 1678667138,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 252,
        "index": "B",
        "name": "Unsorting Array",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "brute force",
            "sortings"
        ]
    },
    "author": {
        "contestId": 252,
        "members": [
            {
                "handle": "SriniV"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1354807800
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 58,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 8806400,
    "source": "#include <bits/stdc++.h>\ntypedef long long ll;\ntypedef long double ld;\nusing namespace std;\n\nsize_t hF(pair<int , int> a){\n\treturn (a.first + a.second)*(a.first + a.second + 1)/2 + a.second;\n}\nvoid setIO(string name = \"\") {\n\tcin.tie(0)->sync_with_stdio(0);\n\tif (name.size()) {\n\t\tfreopen((name + \".in\").c_str(), \"r\", stdin);\n\t\tfreopen((name + \".out\").c_str(), \"w\", stdout);\n\t}\n}\n\n/*\n * Case 1 : 3+ Unique Elements\n * \t\t\tPut any middle number in front or back -> if already in both places swap any 2 elements\n * Case 2 : 2 Unique Elements: Edge: Middle is largest and length 3 -> Impossible\n * \t\t\t\tElse match the two ends of the array -> If alread matched ( swap any 2 middle elements ) \n * Case 3 : 1 Element -> Impossible\n * \t\t\t\n */\nint n , arr[(int)1e5] , temp[(int)1e5];\nint main(){\n\tsetIO();\n\tcin >> n;\n\tunordered_map<int , vector<int>  > nums;\n\tfor(int i = 0 ; i<n;i++){\n\t\tcin >> arr[i];\n\t\ttemp[i] = arr[i];\n\t\tnums[arr[i]].push_back(i);\n\t}\n\tsort(temp , temp+n);\n\tif(nums.size()>=3){\n\t\t// both are extremes\n\t\tif((arr[0]==temp[0] || arr[0] == temp[n-1]) &&(arr[n-1]==temp[n-1] || arr[n-1] == temp[0]) ){\n\t\t\tint pointer = 1;\n\t\t\twhile(arr[pointer++]==arr[0]);\n\t\t\tcout << 1 << \" \" << pointer+1;\n\t\t\treturn 0;\n\t\t} else if((arr[0]==temp[0] || arr[0] == temp[n-1])){\n\t\t\tint pointer = 1;\n\t\t\twhile(arr[pointer++]==arr[0]);\n\t\t\tcout << 1 << \" \" << pointer+1;\n\t\t\treturn 0;\n\t\t}else if((arr[n-1]==temp[0] || arr[n-1] == temp[n-1])){\n\t\t\tint pointer = n-1;\n\t\t\twhile(arr[pointer--]==arr[n-1]);\n\t\t\tcout << n << \" \" << pointer+1;\n\t\t\treturn 0;\n\t\t}/* Both are! extremes */ else {\n\t\t\tint pointer = 1;\n\t\t\twhile(arr[pointer++]==arr[0]);\n\t\t\tcout << 1 << \" \" << pointer;\n\t\t\treturn 0;\n\t\t}\n\t} else if(nums.size()>=2 && n!=2){\n\t\tif(n==3 && arr[0]==arr[2])cout << -1;\n\t\telse {\n\t\t\tif(arr[0]==arr[n-1]){\n\t\t\t\tint pointer = 2;\n\t\t\t\twhile(arr[pointer++]==arr[1]);\n\t\t\t\tcout << 2 << \" \" << pointer;\n\t\t\t} else {\n\t\t\t\tint pointer = 1;\n\t\t\t\twhile(arr[pointer++]==arr[0]);\n\t\t\t\tcout << pointer-1 << \" \" << pointer;\n\t\t\t}\t\n\t\t}\n\t} else {\n\t\tcout << -1;\n\t}\n}\n"
}