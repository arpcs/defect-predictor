{
    "id": 217514328,
    "contestId": 350,
    "creationTimeSeconds": 1691358747,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 350,
        "index": "E",
        "name": "Wrong Floyd",
        "type": "PROGRAMMING",
        "points": 3000.0,
        "rating": 2200,
        "tags": [
            "brute force",
            "constructive algorithms",
            "dfs and similar",
            "graphs"
        ]
    },
    "author": {
        "contestId": 350,
        "members": [
            {
                "handle": "Noobish_Monk"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1380641400
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 15,
    "memoryConsumedBytes": 2048000,
    "source": "#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n\r\n#define all(x) (x).begin(), (x).end()\r\n#define rall(x) (x).rbegin(), (x).rend()\r\n#define ff first\r\n#define ss second\r\n#define ll long long\r\n#define ull unsigned long long\r\n#define ui unsigned int\r\n#define pb push_back\r\n#define eb emplace_back\r\n#define ppb pop_back\r\n#define pf push_front\r\n#define ppf pop_front\r\n#define mp make_pair\r\n#define ld long double\r\n#define uset unordered_set\r\n#define umap unordered_map\r\n#define umset unordered_multiset\r\n#define ummap unordered_multimap\r\n#define pii pair<int, int>\r\n#define pil pair<int, long long>\r\n#define pli pair<long long, int>\r\n#define pll pair<long long, long long>\r\n#define bint __int128\r\n\r\n#pragma GCC optimize(\"O3,unroll-loops\")\r\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\r\n\r\nconst int N = 300;\r\nint pr[N], rk[N];\r\n\r\nint get(int a) {\r\n    return pr[a] = (pr[a] == a ? a : get(pr[a]));\r\n}\r\n\r\nbool unite(int a, int b) {\r\n    a = get(a);\r\n    b = get(b);\r\n    if (a == b)\r\n        return false;\r\n    if (rk[a] < rk[b])\r\n        swap(a, b);\r\n    rk[a] += rk[b];\r\n    pr[b] = a;\r\n    return true;\r\n}\r\n\r\ninline void solve() {\r\n    int n, m, k;\r\n    cin >> n >> m >> k;\r\n    for (int i = 0; i < n; i++) {\r\n        pr[i] = i;\r\n        rk[i] = 1;\r\n    }\r\n    vector<int> a(k);\r\n    vector<bool> used(n);\r\n    for (int i = 0; i < k; i++) {\r\n        cin >> a[i];\r\n        a[i]--;\r\n        used[a[i]] = true;\r\n    }\r\n    if (k == n) {\r\n        cout << -1 << '\\n';\r\n        return;\r\n    }\r\n    int c = 0;\r\n    while (used[c])\r\n        c++;\r\n    int v1 = a[0];\r\n    bool ban[n][n];\r\n    memset(ban, false, sizeof ban);\r\n    for (int v = 0; v < n; v++)\r\n        ban[v][v] = true;\r\n    for (int i : a)\r\n        ban[v1][i] = ban[i][v1] = true;\r\n    vector<pii> edges;\r\n    for (int v = 0; v < n; v++)\r\n        for (int u = v + 1; u < n; u++)\r\n            if (!ban[v][u])\r\n                edges.eb(v, u);\r\n    vector<pii> ans, rest;\r\n    for (auto [v, u] : edges) {\r\n        if (unite(v, u))\r\n            ans.eb(v, u);\r\n        else\r\n            rest.eb(v, u);\r\n    }\r\n    for (auto [v, u] : rest)\r\n        if (edges.size() < m)\r\n            edges.eb(v, u);\r\n    if (edges.size() < m) {\r\n        cout << -1 << '\\n';\r\n        return;\r\n    }\r\n    assert(edges.size() == m);\r\n    for (auto [v, u] : edges)\r\n        cout << v + 1 << ' ' << u + 1 << '\\n';\r\n}\r\n\r\nsigned main() {\r\n#ifndef DEBUG\r\n    std::ios_base::sync_with_stdio(0);\r\n    std::cin.tie(0);\r\n    std::cout.tie(0);\r\n#endif\r\n    int tt = 1;\r\n#ifdef DEBUG\r\n    std::cin >> tt;\r\n#endif\r\n    while (tt--) {\r\n#ifdef DEBUG\r\n        std::cout << \"Test case#\\n\";\r\n#endif\r\n        solve();\r\n    }\r\n    return 0;\r\n}\r\n"
}