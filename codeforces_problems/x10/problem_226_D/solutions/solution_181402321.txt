{
    "id": 181402321,
    "contestId": 226,
    "creationTimeSeconds": 1668767889,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 226,
        "index": "D",
        "name": "The table",
        "type": "PROGRAMMING",
        "points": 2000.0,
        "rating": 2100,
        "tags": [
            "constructive algorithms",
            "greedy"
        ]
    },
    "author": {
        "contestId": 226,
        "members": [
            {
                "handle": "bkifhr10"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1348500600
    },
    "programmingLanguage": "GNU C++17 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 92,
    "memoryConsumedBytes": 102400,
    "source": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int mx = 110;\nint a[mx][mx];\nint r[mx], c[mx], p[mx], q[mx];\nvoid print(int *a, int n) {\n\tvector<int> v;\n\tfor (int i = 0; i < n; i++) if (a[i]) v.push_back(i + 1);\n\tcout << v.size();\n\tfor (int x : v) cout << ' ' << x ;\n\tcout << '\\n';\n}\nint32_t main() {\n\tios_base::sync_with_stdio(0); cin.tie(0);\n\n\tint n, m; cin >> n >> m;\n\tfor (int i = 0; i < n; i++) {\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tcin >> a[i][j];\n\t\t\tr[i] += a[i][j];\n\t\t\tc[j] += a[i][j];\n\t\t}\n\t}\n\tint magic = 1000000;\n\twhile (magic--) {\n\t\tint cnt = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (r[i] < 0) {\n\t\t\t\tcnt++;\n\t\t\t\tp[i] ^= 1;\n\t\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\t\tc[j] -= a[i][j];\n\t\t\t\t\ta[i][j] = -a[i][j];\n\t\t\t\t\tc[j] += a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int j = 0; j < m; j++) {\n\t\t\tif (c[j] < 0) {\n\t\t\t\tcnt++;\n\t\t\t\tq[j] ^= 1;\n\t\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\t\tr[i] -= a[i][j];\n\t\t\t\t\ta[i][j] = -a[i][j];\n\t\t\t\t\tr[i] += a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (cnt == 0) break;\n\t}\n\tprint(p, n);\n\tprint(q, m);\n\treturn 0;\n}\n\t\t \t \t       \t\t\t\t\t   \t\t\t\t  \t\t\t"
}