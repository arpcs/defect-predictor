{
    "id": 229931090,
    "contestId": 1548,
    "creationTimeSeconds": 1698352700,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1548,
        "index": "B",
        "name": "Integers Have Friends",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "math",
            "number theory",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1548,
        "members": [
            {
                "handle": "Prabhxs"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1627828500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 1606,
    "memoryConsumedBytes": 10137600,
    "source": "/*\r\nYou have the right to work only but never to its fruits.\r\nLet not the fruits of action be your motive, nor let your attachment be to inaction.\r\n*/\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#define all(v) v.begin(), v.end()\r\n#define ll long long\r\n#define wishOneDay ios_base::sync_with_stdio(false);cin.tie(nullptr);\r\n#define endl '\\n';\r\n\r\nstruct segmenttree {\r\n    ll n;\r\n    vector<ll> st;\r\n \r\n    void init(ll _n) {\r\n        this->n = _n;\r\n        st.resize(4 * n, 0);\r\n    }\r\n \r\n    ll comb(ll a, ll b)\r\n    {\r\n        return __gcd(a, b);\r\n    }\r\n \r\n    void build(ll start, ll ending, ll node, vector<ll> &v) {\r\n        if (start == ending) {\r\n            st[node] = v[start]; return;\r\n        }\r\n \r\n        ll mid = (start + ending) / 2;\r\n \r\n        build(start, mid, 2 * node + 1, v);\r\n \r\n        build(mid + 1, ending, 2 * node + 2, v);\r\n \r\n        st[node] = comb(st[node * 2 + 1], st[node * 2 + 2]);\r\n    }\r\n \r\n    ll query(ll start, ll ending, ll l, ll r, ll node) {\r\n \r\n        if (start > r || ending < l) {\r\n            return 0;\r\n        }\r\n \r\n        if (start >= l && ending <= r) {\r\n            return st[node];\r\n        }\r\n \r\n        ll mid = (start + ending) / 2;\r\n \r\n        ll q1 = query(start, mid, l, r, 2 * node + 1);\r\n        ll q2 = query(mid + 1, ending, l, r, 2 * node + 2);\r\n \r\n        return comb(q1, q2);\r\n    }\r\n \r\n    void build(vector<ll> &v) {\r\n        build(0, n - 1, 0, v);\r\n    }\r\n \r\n    ll query(ll l, ll r) {\r\n        return query(0, n - 1, l, r, 0);\r\n    }\r\n};\r\n\r\nvoid solve(){\r\n    ll n;\r\n    cin >> n;\r\n    vector<ll> arr(n);\r\n    for(auto &a : arr)\r\n        cin >> a;\r\n    if( n == 1 ){\r\n        cout << 1;\r\n        return;\r\n    }else if( n == 2 ){\r\n        if( (arr[0] % 2 == arr[1] % 2) || __gcd(arr[0], arr[1]) != 1 ){\r\n            cout << 2;\r\n        }else{\r\n            cout << 1;\r\n        }\r\n        return;\r\n    }\r\n    vector<ll> nArr;\r\n    for(ll i = 0; i < n - 1; i++)\r\n        nArr.push_back(abs(arr[i + 1] - arr[i]));\r\n    n -= 1;\r\n    segmenttree st;\r\n    st.init(n);\r\n    st.build(nArr);\r\n    auto isPos = [&](ll len){\r\n        bool flag = 0;\r\n        for(int i = 0; i < n - len + 1; i++){\r\n            flag |= (st.query(i, i + len - 1) != 1);\r\n        }\r\n        return flag;\r\n    };\r\n    ll low = 0, high = n, mxLen = 0;\r\n    while( low <= high ){\r\n        ll mid = low + high;\r\n        mid /= 2;\r\n        if( isPos(mid) ){\r\n            mxLen = max(mxLen, 1ll);\r\n            low = mid + 1, mxLen = max(mid, mxLen);\r\n        }else{\r\n            high = mid - 1;\r\n        }\r\n    }\r\n    cout << mxLen + 1;\r\n}\r\n\r\nint main(){\r\n\r\n    wishOneDay\r\n\r\n    ll tc = 1;\r\n    cin >> tc;\r\n    while( tc-- ) solve(), cout << endl;\r\n    return 0;\r\n\r\n}"
}