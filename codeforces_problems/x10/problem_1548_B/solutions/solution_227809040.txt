{
    "id": 227809040,
    "contestId": 1548,
    "creationTimeSeconds": 1697113599,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1548,
        "index": "B",
        "name": "Integers Have Friends",
        "type": "PROGRAMMING",
        "points": 1000.0,
        "rating": 1800,
        "tags": [
            "binary search",
            "data structures",
            "divide and conquer",
            "math",
            "number theory",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1548,
        "members": [
            {
                "handle": "skahl15"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1627828500
    },
    "programmingLanguage": "GNU C++17",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 57,
    "timeConsumedMillis": 1809,
    "memoryConsumedBytes": 22425600,
    "source": "#include <bits/stdc++.h>\r\n//#include <ext/pb_ds/assoc_container.hpp>\r\n//#include <ext/pb_ds/tree_policy.hpp>\r\n#define ll long long\r\n#define se second\r\n#define f first\r\n#define ld long double\r\n#define pb push_back\r\nusing namespace std;\r\n//using namespace __gnu_pbds;\r\n//#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\r\nld pi=3.14159265358979323846;\r\nll oo=1e9+7;\r\nll mul(ll x,ll y)\r\n{\r\n    return ((x%oo)*(y%oo))%oo;\r\n}\r\nll add(ll x,ll y)\r\n{\r\n    return ((x%oo)+(y%oo))%oo;\r\n}\r\nll sub(ll x,ll y)\r\n{\r\n    return ((x%oo)-(y%oo)+oo)%oo;\r\n}\r\nll fast_pow(ll x,ll y)\r\n{\r\n    if(y==0)return 1;\r\n    if(y==1)return x;\r\n    ll ret=1;\r\n    ret=fast_pow(x,y/2);\r\n    ret=mul(ret,ret);\r\n    if(y%2==1)ret=mul(ret,x);\r\n    return ret;\r\n}\r\nll fact[2000200];\r\nvoid factorial()\r\n{\r\n    fact[0]=1;\r\n    for(int i=1; i<=1000000; i++)\r\n    {\r\n        fact[i]=mul(fact[i-1],i);\r\n    }\r\n}/*\r\nll com(ll n,ll k)\r\n{\r\n    return mul(fact[n],fast_pow(mul(fact[k],fact[n-k]),oo-2));\r\n}*/\r\nll calculate_inverse(ll x)\r\n{\r\n    return fast_pow(x,oo-2);\r\n}\r\nll n_choose_k(ll n,ll k)\r\n{\r\n    if(k<0)return 0;\r\n    ll ret=1;\r\n    ret=fact[n];\r\n    ret=mul(ret,calculate_inverse(fact[k]));\r\n    ret=mul(ret,calculate_inverse(fact[n-k]));\r\n    return ret;\r\n}\r\nll gcd(ll x,ll y)\r\n{\r\n    if(x<y)swap(x,y);\r\n    if(y==0)return x;\r\n    return gcd(y,x%y);\r\n}\r\nll df[200200];\r\nll n;\r\nll a[200200];\r\nll seg[400400];\r\nvoid update(int in,int l,int r,int need)\r\n{\r\n    if(l>need)return;\r\n    if(r<need)return;\r\n    if(l==r)\r\n    {\r\n        seg[in]=df[need];\r\n        return;\r\n    }\r\n    int mid;\r\n    mid=l+r;\r\n    mid/=2;\r\n    update(in+1,l,mid,need);\r\n    update(in+2*(mid-l+1),mid+1,r,need);\r\n    seg[in]=gcd(seg[in+1],seg[in+2*(mid-l+1)]);\r\n}\r\nll get_ans(int in,int l,int r,int need_l,int need_r)\r\n{\r\n    if(r<need_l)return 0;\r\n    if(l>need_r)return 0;\r\n    if(l>=need_l&&r<=need_r)return seg[in];\r\n    int mid;\r\n    mid=l+r;\r\n    mid/=2;\r\n    return gcd(get_ans(in+1,l,mid,need_l,need_r),get_ans(in+2*(mid-l+1),mid+1,r,need_l,need_r));\r\n}\r\nvoid test_case()\r\n{\r\n    cin>>n;\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        cin>>a[i];\r\n    }\r\n    for(int i=1;i<n;i++)\r\n    {\r\n        df[i]=abs(a[i+1]-a[i]);\r\n        update(1,1,n-1,i);\r\n    }\r\n    int ans=0;\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        int l=i;\r\n        int r=n-1;\r\n        if(ans>=r-i+1)break;\r\n        while(l<=r)\r\n        {\r\n            int mid;\r\n            mid=l+r;\r\n            mid/=2;\r\n            ll g=get_ans(1,1,n-1,i,mid);\r\n            if(g==1)\r\n            {\r\n                r=mid-1;\r\n            }\r\n            else\r\n            {\r\n                l=mid+1;\r\n                ans=max(ans,mid-i+1);\r\n            }\r\n        }\r\n    }\r\n    cout<<ans+1<<endl;\r\n}\r\n\r\nint main()\r\n{\r\n    ios_base::sync_with_stdio(false);\r\n    cin.tie(0);\r\n    cout.tie(0);\r\n    factorial();\r\n    /*freopen(\"back_in_black_chapter_1_input.txt\",\"r\",stdin);\r\n    freopen(\"solution.txt\",\"w\",stdout);*/\r\n    int t=1;\r\n    cin>>t;\r\n    while(t--)\r\n    {\r\n        test_case();\r\n    }\r\n    return 0;\r\n}\r\n\r\n\r\n\r\n\r\n"
}