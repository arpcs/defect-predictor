{
    "id": 235783773,
    "contestId": 11,
    "creationTimeSeconds": 1701741754,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 11,
        "index": "C",
        "name": "How Many Squares?",
        "type": "PROGRAMMING",
        "rating": 2200,
        "tags": [
            "implementation"
        ]
    },
    "author": {
        "contestId": 11,
        "members": [
            {
                "handle": "w54mmm"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1272294000
    },
    "programmingLanguage": "PyPy 3-64",
    "verdict": "RUNTIME_ERROR",
    "testset": "TESTS",
    "passedTestCount": 4,
    "timeConsumedMillis": 156,
    "memoryConsumedBytes": 2764800,
    "source": "def chk1(s, l, r, flag):\r\n\tpool1 = set(s[l: r + 1]) if flag else {s[l], s[r]}\r\n\tpool0 = {s[l + 1], s[r - 1]} if flag == False and r != l + 1 else set() | {'0' if l == 0 else s[l - 1], '0' if r == len(s) - 1 else s[r + 1]}\r\n\treturn pool1 == {'1'} and pool0 == {'0'}\r\n\r\ndef chk2(s, i):\r\n\tcnt = int(s[i])\r\n\tif i != 0 and s[i - 1] == '1':\r\n\t\tres = -1\r\n\t\tcnt += 1\r\n\tif i != len(s) - 1 and s[i + 1] == '1':\r\n\t\tres = 1\r\n\t\tcnt += 1\r\n\tif cnt != 1:\r\n\t\treturn 0\r\n\treturn res\r\n\r\nt = int(input())\r\nfor _ in range(t):\r\n\tn, m = [int(x) for x in input().split(' ')]\r\n\tres = 0\r\n\t#side length must be at least 2, so the 2 types do not overlap\r\n\tvalid1 = [] #type1 square, [l, r, min row[)]\r\n\tvalid2 = [] #type2 square, [l, r, expand flag]\r\n\tpending = [] #full square found, waiting to check if there is foreign 1 in the next row\r\n\tlast = '0' * m\r\n\tfor i in range(n):\r\n\t\tcur = input()\r\n\t\tcur1 = []\r\n\t\tcur2 = []\r\n\t\tfor l, r in pending: #check pending full square\r\n\t\t\tif set(cur[max(l - 1, 0): min(r + 2, m)]) == {'0'}:\r\n\t\t\t\tres += 1\r\n\t\tpending.clear()\r\n\t\tfor l, r, r0 in valid1: #check type1 square\r\n\t\t\tif i - r0 == r - l: #cur should be last row\r\n\t\t\t\tif chk1(cur, l, r, True):\r\n\t\t\t\t\tpending.append([l, r])\r\n\t\t\telif chk1(cur, l, r, False):\r\n\t\t\t\tcur1.append([l, r, r0])\r\n\t\tfor l, r, flag in valid2: #check type2 square\r\n\t\t\tif l == r and cur[l - 1] == cur[l + 1] == '1':\r\n\t\t\t\tcur2.append([l - 1, r + 1, True])\r\n\t\t\telse:\r\n\t\t\t\tnl = chk2(cur, l)\r\n\t\t\t\tnr = chk2(cur, r)\r\n\t\t\t\tif nl == 1 and nr == -1:\r\n\t\t\t\t\tif l + 1 == r - 1:\r\n\t\t\t\t\t\tpending.append([l + 1, l + 1])\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tcur2.append([l + 1, r - 1, False])\r\n\t\t\t\tif nl == -1 and nr == 1 and flag:\r\n\t\t\t\t\tcur2.append([l - 1, r + 1, True])\r\n\t\tj = 0 #find new valid square starting from current row\r\n\t\twhile j < m:\r\n\t\t\twhile j < m and cur[j] == '0':\r\n\t\t\t\tj += 1\r\n\t\t\tl = j\r\n\t\t\twhile j < m and cur[j] == '1':\r\n\t\t\t\tj += 1\r\n\t\t\tif j - l == 1: #only 1 consecutive 1, valid type2 if not at column 0 or m - 1\r\n\t\t\t\tif l not in {0, m - 1} and set(last[l - 1: l + 2]) == {'0'}:\r\n\t\t\t\t\tcur2.append([l, l, True])\r\n\t\t\telif l != m: #more than 1 consecutive 1, valid type1\r\n\t\t\t\tif set(last[max(0, l - 1): min(j + 1, m)]) == {'0'}:\r\n\t\t\t\t\tcur1.append([l, j - 1, i])\r\n\t\tlast = cur\r\n\t\tvalid1 = cur1\r\n\t\tvalid2 = cur2\r\n\tprint(res + len(pending))"
}