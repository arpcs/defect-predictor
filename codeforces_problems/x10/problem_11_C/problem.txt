{
    "contestId": 11,
    "index": "C",
    "name": "How Many Squares?",
    "type": "PROGRAMMING",
    "rating": 2200,
    "tags": [
        "implementation"
    ],
    "desc": {
        "title": "C. How Many Squares?",
        "statement": "<p>You are given a 0-1 rectangular matrix. What is the number of squares in it? A square is a solid square frame (border) with linewidth equal to 1. A square should be at least <span class=\"tex-span\">2\u2009\u00d7\u20092</span>. We are only interested in two types of squares: </p><ol> <li> squares with each side parallel to a side of the matrix; </li><li> squares with each side parallel to a diagonal of the matrix. </li></ol><pre class=\"verbatim\"><br/>For example the following matrix contains only one square of the first type: <br/>0000000 <br/>0111100 <br/>0100100 <br/>0100100 <br/>0111100<br/></pre><pre class=\"verbatim\"><br/>The following matrix contains only one square of the second type:<br/>0000000<br/>0010000<br/>0101000<br/>0010000<br/>0000000<br/></pre><p>Regardless of type, a square must contain at least one <span class=\"tex-font-style-tt\">1</span> and can't touch (by side or corner) any foreign <span class=\"tex-font-style-tt\">1</span>. Of course, the lengths of the sides of each square should be equal.</p><p>How many squares are in the given matrix?</p>",
        "inputSpecification": "<p>The first line contains integer <span class=\"tex-span\"><i>t</i></span> (<span class=\"tex-span\">1\u2009\u2264\u2009<i>t</i>\u2009\u2264\u200910000</span>), where <span class=\"tex-span\"><i>t</i></span> is the number of test cases in the input. Then test cases follow. Each case starts with a line containing integers <span class=\"tex-span\"><i>n</i></span> and <span class=\"tex-span\"><i>m</i></span> (<span class=\"tex-span\">2\u2009\u2264\u2009<i>n</i>,\u2009<i>m</i>\u2009\u2264\u2009250</span>), where <span class=\"tex-span\"><i>n</i></span> is the number of rows and <span class=\"tex-span\"><i>m</i></span> is the number of columns. The following <span class=\"tex-span\"><i>n</i></span> lines contain <span class=\"tex-span\"><i>m</i></span> characters each (<span class=\"tex-font-style-tt\">0</span> or <span class=\"tex-font-style-tt\">1</span>).</p><p>The total number of characters in all test cases doesn't exceed <span class=\"tex-span\">10<sup class=\"upper-index\">6</sup></span> for any input file.</p>",
        "outputSpecification": "<p>You should output exactly <span class=\"tex-span\"><i>t</i></span> lines, with the answer to the <span class=\"tex-span\"><i>i</i></span>-th test case on the <span class=\"tex-span\"><i>i</i></span>-th line.</p>",
        "samples": [
            {
                "input": "<br/>For example the following matrix contains only one square of the first type: <br/>0000000 <br/>0111100 <br/>0100100 <br/>0100100 <br/>0111100<br/>",
                "output": "<br/>The following matrix contains only one square of the second type:<br/>0000000<br/>0010000<br/>0101000<br/>0010000<br/>0000000<br/>"
            },
            {
                "input": "2<br/>8 8<br/>00010001<br/>00101000<br/>01000100<br/>10000010<br/>01000100<br/>00101000<br/>11010011<br/>11000011<br/>10 10<br/>1111111000<br/>1000001000<br/>1011001000<br/>1011001010<br/>1000001101<br/>1001001010<br/>1010101000<br/>1001001000<br/>1000001000<br/>1111111000<br/>",
                "output": "1<br/>2<br/>"
            },
            {
                "input": "1<br/>12 11<br/>11111111111<br/>10000000001<br/>10111111101<br/>10100000101<br/>10101100101<br/>10101100101<br/>10100000101<br/>10100000101<br/>10111111101<br/>10000000001<br/>11111111111<br/>00000000000<br/>",
                "output": "3<br/>"
            }
        ],
        "note": null
    },
    "suggested_categories": [
        "computational geometry",
        "matrix operations",
        "pattern recognition",
        "binary representation",
        "algorithms",
        "dynamic programming",
        "graph theory",
        "mathematical logic",
        "data structures",
        "geometric shapes and figures",
        "pattern matching",
        "optimization",
        "combinatorics",
        "numerical analysis",
        "problem solving",
        "spatial algorithms",
        "complexity theory",
        "set theory",
        "logic and reasoning",
        "mathematical algorithms"
    ]
}