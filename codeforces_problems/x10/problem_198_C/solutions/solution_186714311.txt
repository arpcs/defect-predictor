{
    "id": 186714311,
    "contestId": 198,
    "creationTimeSeconds": 1672018190,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 198,
        "index": "C",
        "name": "Delivering Carcinogen",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "geometry"
        ]
    },
    "author": {
        "contestId": 198,
        "members": [
            {
                "handle": "Tony2_CF"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1340379000
    },
    "programmingLanguage": "GNU C++14",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 3,
    "timeConsumedMillis": 0,
    "memoryConsumedBytes": 102400,
    "source": "// LUOGU_RID: 98028235\n#include <bits/stdc++.h>\r\n#define endl '\\n'\r\nusing namespace std;\r\nconst double eps = 1e-8, pi = acos(-1);\r\ndouble vp, v, r;\r\nstruct point{\r\n\tdouble x, y;\r\n\tpoint() : x(0), y(0) {}\r\n\tpoint(double x, double y) : x(x), y(y) {}\r\n\tdouble abs() const{return sqrt(x * x + y * y);}\r\n\tdouble angle() const{return atan2(y, x);}\r\n\tfriend point operator + (const point &a, const point &b){return point(a.x + b.x, a.y + b.y);}\r\n\tfriend point operator - (const point &a, const point &b){return point(a.x - b.x, a.y - b.y);}\r\n\tfriend double operator * (const point &a, const point &b){return a.x * b.y - a.y * b.x;}\r\n\tfriend point operator * (const point &a, const double &k){return point(a.x * k, a.y * k);}\r\n\tfriend point operator / (const point &a, const double &k){return point(a.x / k, a.y / k);}\r\n}p, s;\r\npoint turn(const point &p, const double &ang){\r\n\treturn point(p.x * cos(ang) - p.y * sin(ang), p.x * sin(ang) + p.y * cos(ang));\r\n}\r\npoint turn1(const point &p, double dis){\r\n\tdouble c = pi * p.abs() * 2;\r\n\tdis = dis - floor(dis / c) * c;\r\n\treturn turn(p, dis / p.abs());\r\n}\r\ndouble dis2(const point &p1, const point &p2){\r\n\treturn min(abs(p1.angle() - p2.angle()), 2 * pi - abs(p1.angle() - p2.angle())) * p1.abs();\r\n}\r\ndouble calc(point e){\r\n\t//s -> e\r\n\tif (abs(e * s) / (e - s).abs() >= r) return (e - s).abs();\r\n\telse{\r\n\t\tpoint ps = s * r / s.abs(), pe = e * r / e.abs();\r\n\t\tdouble as = acos(r / s.abs()), ae = acos(r / e.abs());\r\n\t\tdouble res1 = dis2(turn(ps, as), turn(pe, -ae));\r\n\t\tdouble res2 = dis2(turn(ps, -as), turn(pe, ae));\r\n\t\treturn min(res1, res2) + sqrt(s.abs() * s.abs() - r * r) + sqrt(e.abs() * e.abs() - r * r);\r\n\t}\r\n}\r\nint main(){\r\n\tios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\r\n//\tfreopen(\"in.txt\", \"r\", stdin);\r\n//\tfreopen(\"out.txt\", \"w\", stdout);\r\n\tcin >> p.x >> p.y >> vp;\r\n\tcin >> s.x >> s.y >> v >> r;\r\n\tdouble l = 0, r = 1e8, mid, ans;\r\n\twhile (abs(r - l) > eps){\r\n\t\tmid = (l + r) / 2;\r\n\t\tif (calc(turn1(p, mid * vp)) <= mid * v)\r\n\t\t\tans = mid, r = mid;\r\n\t\telse l = mid;\r\n\t}\r\n\tcout << fixed << setprecision(8) << ans;\r\n\treturn 0;\r\n}"
}