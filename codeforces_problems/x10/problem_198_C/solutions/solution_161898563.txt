{
    "id": 161898563,
    "contestId": 198,
    "creationTimeSeconds": 1656281428,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 198,
        "index": "C",
        "name": "Delivering Carcinogen",
        "type": "PROGRAMMING",
        "points": 1500.0,
        "rating": 2400,
        "tags": [
            "binary search",
            "geometry"
        ]
    },
    "author": {
        "contestId": 198,
        "members": [
            {
                "handle": "Sakuyalove"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1340379000
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "WRONG_ANSWER",
    "testset": "TESTS",
    "passedTestCount": 2,
    "timeConsumedMillis": 560,
    "memoryConsumedBytes": 1228800,
    "source": "#ifdef ONLINE_JUDGE\r\n#pragma GCC optimize(\"O3\")\r\n#pragma GCC target(\"avx2\")\r\n#endif\r\n\r\n#include<bits/stdc++.h>\r\nusing namespace std;\r\n\r\n// #define double long double\r\n#define pdd pair<double, double>\r\n#define mp make_pair\r\n#define x first\r\n#define y second\r\n\r\nconst double pi = acos(-1.0);\r\nconst int D = 1e6;\r\nconst double der = 2 * pi / D;\r\nconst double dder = der / D;\r\nconst double ddder = dder / D;\r\n\r\ndouble xp, yp, vp;\r\ndouble xt, yt, vt, r;\r\ndouble ans = 1e18;\r\ndouble anst = 0;\r\n\r\ndouble db(double xx) {\r\n  return xx * xx;\r\n}\r\n\r\ndouble ac(double x) {\r\n  x = min(x, (double)1.0);\r\n  x = max(x, (double)-1.0);\r\n  return acos(x);\r\n}\r\n\r\ndouble b2, sb, b, ab;\r\n\r\ndouble dis(double xx, double yy) {\r\n  double da = db(xt - xx) + db(yt - yy);\r\n  if (da < 1e-10) return 0;\r\n  double l = ((xt - xx) * xt + (yt - yy) * yt) / da;\r\n  double X = l * xx + (1.0 - l) * xt;\r\n  double Y = l * yy + (1.0 - l) * yt;\r\n  if (l < 0 || l > 1 || db(X) + db(Y) >= db(r)) return sqrt(da);\r\n  double c2 = db(xx) + db(yy);\r\n  double c = sqrt(c2);\r\n  double cc = (b * b + c * c - da) / (2.0 * b * c);\r\n  double a = ac(cc) - ab - ac(r / c);\r\n  return sb + sqrt(c2 - r * r) + a * r;\r\n}\r\n\r\nvoid solve() {\r\n  cin >> xp >> yp >> vp;\r\n  cin >> xt >> yt >> vt >> r;\r\n  vp /= sqrt(xp * xp + yp * yp);\r\n  b2 = db(xt) + db(yt);\r\n  b = sqrt(b2);\r\n  ab = ac(r / b);\r\n  sb = sqrt(b2 - r * r);\r\n  for (int i = 0; i < D; i++) {\r\n    double ru = i * der, Cos = cos(ru), Sin = sin(ru);\r\n    double xx = xp * Cos - yp * Sin;\r\n    double yy = xp * Sin + yp * Cos;\r\n    double t = dis(xx, yy) / vt;\r\n    double rs = vp * t;\r\n    rs = rs - (int)(rs / (2 * pi)) * 2 * pi;\r\n    double dr = ru - rs < 0 ? ru + 2 * pi - rs : ru - rs;\r\n    double dt = dr / vp;\r\n    if (t + dt < ans) {\r\n      anst = i;\r\n      ans = t + dt;\r\n    }\r\n  }\r\n  int anstt = 0;\r\n  for (int i = -D / 2; i <= D / 2; i++) {\r\n    double ru = anst * der + i * dder, Cos = cos(ru), Sin = sin(ru);\r\n    double xx = xp * Cos - yp * Sin;\r\n    double yy = xp * Sin + yp * Cos;\r\n    double t = dis(xx, yy) / vt;\r\n    double rs = vp * t;\r\n    rs = rs - (int)(rs / (2 * pi)) * 2 * pi;\r\n    double dr = ru - rs < 0 ? ru + 2 * pi - rs : ru - rs;\r\n    double dt = dr / vp;\r\n    if (t + dt < ans) {\r\n      ans = t + dt;\r\n      anstt = i;\r\n    }\r\n  }\r\n  for (int i = -D / 2; i <= D / 2; i++) {\r\n    double ru = anst * der + anstt * dder + i * ddder, Cos = cos(ru), Sin = sin(ru);\r\n    double xx = xp * Cos - yp * Sin;\r\n    double yy = xp * Sin + yp * Cos;\r\n    double t = dis(xx, yy) / vt;\r\n    double rs = vp * t;\r\n    rs = rs - (int)(rs / (2 * pi)) * 2 * pi;\r\n    double dr = ru - rs < 0 ? ru + 2 * pi - rs : ru - rs;\r\n    double dt = dr / vp;\r\n    ans = min(ans, t + dt);\r\n  }\r\n  cout << fixed << setprecision(10) << ans << endl;\r\n  return ;\r\n}\r\n\r\nsigned main() {\r\n  #ifdef Sakuyalove\r\n    freopen(\"in.in\", \"r\", stdin);\r\n    freopen(\"out.out\", \"w\", stdout);\r\n  #endif\r\n  ios::sync_with_stdio(false);\r\n  cin.tie(0);\r\n  cout.tie(0);\r\n  int T = 1;\r\n  // cin >> T;\r\n  while (T--) solve();\r\n  return 0;\r\n}"
}