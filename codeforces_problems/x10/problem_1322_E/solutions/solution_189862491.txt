{
    "id": 189862491,
    "contestId": 1322,
    "creationTimeSeconds": 1674231481,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1322,
        "index": "E",
        "name": "Median Mountain Range",
        "type": "PROGRAMMING",
        "points": 2500.0,
        "rating": 3300,
        "tags": [
            "data structures"
        ]
    },
    "author": {
        "contestId": 1322,
        "members": [
            {
                "handle": "SanguineChameleon"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1583573700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 146,
    "timeConsumedMillis": 1684,
    "memoryConsumedBytes": 58675200,
    "source": "// BEGIN BOILERPLATE CODE\r\n\r\n#include <bits/stdc++.h>\r\nusing namespace std;\r\n\r\n#ifdef KAMIRULEZ\r\n\tconst bool kami_loc = true;\r\n\tconst long long kami_seed = 69420;\r\n#else\r\n\tconst bool kami_loc = false;\r\n\tconst long long kami_seed = chrono::steady_clock::now().time_since_epoch().count();\r\n#endif\r\n\r\nconst string kami_fi = \"kamirulez.inp\";\r\nconst string kami_fo = \"kamirulez.out\";\r\nmt19937_64 kami_gen(kami_seed);\r\n\r\nlong long rand_range(long long rmin, long long rmax) {\r\n\tuniform_int_distribution<long long> rdist(rmin, rmax);\r\n\treturn rdist(kami_gen);\r\n}\r\n\r\nlong double rand_real(long double rmin, long double rmax) {\r\n\tuniform_real_distribution<long double> rdist(rmin, rmax);\r\n\treturn rdist(kami_gen);\r\n}\r\n\r\nvoid file_io(string fi, string fo) {\r\n\tif (fi != \"\" && (!kami_loc || fi == kami_fi)) {\r\n\t\tfreopen(fi.c_str(), \"r\", stdin);\r\n\t}\r\n\tif (fo != \"\" && (!kami_loc || fo == kami_fo)) {\r\n\t\tfreopen(fo.c_str(), \"w\", stdout);\r\n\t}\r\n}\r\n\r\nvoid set_up() {\r\n\tif (kami_loc) {\r\n\t\tfile_io(kami_fi, kami_fo);\r\n\t}\r\n\tios_base::sync_with_stdio(0);\r\n\tcin.tie(0);\r\n}\r\n\r\nvoid just_do_it();\r\n\r\nvoid just_exec_it() {\r\n\tif (kami_loc) {\r\n\t\tauto pstart = chrono::steady_clock::now();\r\n\t\tjust_do_it();\r\n\t\tauto pend = chrono::steady_clock::now();\r\n\t\tlong long ptime = chrono::duration_cast<chrono::milliseconds>(pend - pstart).count();\r\n\t\tstring bar(50, '=');\r\n\t\tcout << '\\n' << bar << '\\n';\r\n\t\tcout << \"Time: \" << ptime << \" ms\" << '\\n';\r\n\t}\r\n\telse {\r\n\t\tjust_do_it();\r\n\t}\r\n}\r\n\r\nint main() {\r\n\tset_up();\r\n\tjust_exec_it();\r\n\treturn 0;\r\n}\r\n\r\n// END BOILERPLATE CODE\r\n\r\n// BEGIN MAIN CODE\r\n\r\nconst int ms = 5e5 + 20;\r\nconst int inf = 1e9 + 20;\r\nint a[ms];\r\npair<int, int> p[ms];\r\nint b[ms];\r\nint res[ms];\r\nint pos;\r\n\r\nvoid fix(int &lt, int &rt) {\r\n\tif (lt == 0) {\r\n\t\tlt = -inf;\r\n\t\trt = inf;\r\n\t}\r\n\telse if (b[lt] == 1 && b[rt] == 1) {\r\n\t\tlt = -inf;\r\n\t\trt = inf;\r\n\t}\r\n\telse if (b[lt] == 2 && b[rt] == 1) {\r\n\t\trt = (lt + rt) / 2;\r\n\t}\r\n\telse if (b[lt] == 1 && b[rt] == 2) {\r\n\t\tlt = (lt + rt) / 2 + 1;\r\n\t}\r\n}\r\n\r\nvoid inter(int &l1, int &r1, int l2, int r2) {\r\n\tif (l1 > r1 || l2 == -inf) {\r\n\t\treturn;\r\n\t}\r\n\tif (l1 <= min(r1, l2 - 1)) {\r\n\t\tr1 = min(r1, l2 - 1);\r\n\t}\r\n\telse if (max(l1, r2 + 1) <= r1) {\r\n\t\tl1 = max(l1, r2 + 1);\r\n\t}\r\n\telse {\r\n\t\tl1 = inf;\r\n\t\tr1 = -inf;\r\n\t}\r\n}\r\n\r\nvoid update(int l1, int r1, int l2, int r2, int l3, int r3, int val) {\r\n\tfix(l1, r1);\r\n\tif (l1 == -inf) {\r\n\t\treturn;\r\n\t}\r\n\tb[pos] = 1;\r\n\tfix(l2, r2);\r\n\tfix(l3, r3);\r\n\tb[pos] = 2;\r\n\tinter(l1, r1, l2, r2);\r\n\tinter(l1, r1, l3, r3);\r\n\tfor (int i = l1; i <= r1; i++) {\r\n\t\tif (res[i] != -1) {\r\n\t\t\texit(0);\r\n\t\t}\r\n\t\tres[i] = val;\r\n\t}\r\n}\r\n\r\nvoid just_do_it() {\r\n\tint n;\r\n\tcin >> n;\r\n\tset<pair<int, int>> s;\r\n\tmultiset<int> len;\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tcin >> a[i];\r\n\t\tp[i] = {a[i], i};\r\n\t\tb[i] = 1;\r\n\t\tres[i] = -1;\r\n\t\ts.insert({i, i});\r\n\t\tlen.insert(1);\r\n\t}\r\n\tint mx = 1;\r\n\tsort(p + 1, p + n + 1, greater<>());\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tint val = p[i].first;\r\n\t\tpos = p[i].second;\r\n\t\tauto it = prev(s.upper_bound({pos, 1e9 + 20}));\r\n\t\tint l2 = (*it).first;\r\n\t\tint r2 = (*it).second;\r\n\t\tint l1 = (l2 == 1 ? -1 : prev(it)->first);\r\n\t\tint r1 = (l2 == 1 ? -1 : prev(it)->second);\r\n\t\tint l3 = (r2 == n ? -1 : next(it)->first);\r\n\t\tint r3 = (r2 == n ? -1 : next(it)->second);\r\n\t\tb[pos] = 2;\r\n\t\tif (l2 == r2 && l2 > 1 && r2 < n) {\r\n\t\t\tupdate(l1, r3, l1, r1, l3, r3, val);\r\n\t\t\ts.erase({l1, r1});\r\n\t\t\tlen.erase(len.find(r1 - l1 + 1));\r\n\t\t\ts.erase({l2, r2});\r\n\t\t\tlen.erase(len.find(r2 - l2 + 1));\r\n\t\t\ts.erase({l3, r3});\r\n\t\t\tlen.erase(len.find(r3 - l3 + 1));\r\n\t\t\ts.insert({l1, r3});\r\n\t\t\tlen.insert(r3 - l1 + 1);\r\n\t\t}\r\n\t\telse {\r\n\t\t\ts.erase({l2, r2});\r\n\t\t\tlen.erase(len.find(r2 - l2 + 1));\r\n\t\t\tif (pos > l2) {\r\n\t\t\t\tupdate(l2, pos - 1, l2, r2, 0, 0, val);\r\n\t\t\t\ts.insert({l2, pos - 1});\r\n\t\t\t\tlen.insert(pos - l2);\r\n\t\t\t}\r\n\t\t\tif (pos < r2) {\r\n\t\t\t\tupdate(pos + 1, r2, l2, r2, 0, 0, val);\r\n\t\t\t\ts.insert({pos + 1, r2});\r\n\t\t\t\tlen.insert(r2 - pos);\r\n\t\t\t}\r\n\t\t\tif (pos == l2 && l2 > 1) {\r\n\t\t\t\tupdate(l1, pos, l1, r1, 0, 0, val);\r\n\t\t\t\ts.erase({l1, r1});\r\n\t\t\t\tlen.erase(len.find(r1 - l1 + 1));\r\n\t\t\t\ts.insert({l1, pos});\r\n\t\t\t\tlen.insert(pos - l1 + 1);\r\n\t\t\t}\r\n\t\t\telse if (pos == r2 && r2 < n) {\r\n\t\t\t\tupdate(pos, r3, l3, r3, 0, 0, val);\r\n\t\t\t\ts.erase({l3, r3});\r\n\t\t\t\tlen.erase(len.find(r3 - l3 + 1));\r\n\t\t\t\ts.insert({pos, r3});\r\n\t\t\t\tlen.insert(r3 - pos + 1);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tupdate(pos, pos, l2, r2, 0, 0, val);\r\n\t\t\t\ts.insert({pos, pos});\r\n\t\t\t\tlen.insert(1);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (val != p[i + 1].first) {\r\n\t\t\tmx = max(mx, *len.rbegin());\r\n\t\t}\r\n\t}\r\n\tcout << (mx - 1) / 2 << '\\n';\r\n\tfor (int i = 1; i <= n; i++) {\r\n\t\tcout << res[i] << \" \";\r\n\t}\r\n}\r\n\r\n// END MAIN CODE"
}