{
    "id": 227677956,
    "contestId": 1463,
    "creationTimeSeconds": 1697028285,
    "relativeTimeSeconds": 2147483647,
    "problem": {
        "contestId": 1463,
        "index": "D",
        "name": "Pairs",
        "type": "PROGRAMMING",
        "rating": 1900,
        "tags": [
            "binary search",
            "constructive algorithms",
            "greedy",
            "two pointers"
        ]
    },
    "author": {
        "contestId": 1463,
        "members": [
            {
                "handle": "MiNOcean"
            }
        ],
        "participantType": "PRACTICE",
        "ghost": false,
        "startTimeSeconds": 1608215700
    },
    "programmingLanguage": "GNU C++20 (64)",
    "verdict": "OK",
    "testset": "TESTS",
    "passedTestCount": 11,
    "timeConsumedMillis": 61,
    "memoryConsumedBytes": 6758400,
    "source": "#include<bits/stdc++.h>\r\n\r\n#define ll long long\r\n#define ri int\r\nusing namespace std;\r\n\r\ninline ll read() {\r\n    char ch;\r\n    ll f = 1;\r\n    while ((ch = getchar()) < '0' || ch > '9')\r\n        if (ch == '-')f = -1;\r\n    ll res = ch - 48;\r\n    while ((ch = getchar()) >= '0' && ch <= '9')\r\n        res = res * 10 + ch - 48;\r\n    return res * f;\r\n}\r\n\r\nconst int maxn = 2e5 + 5;\r\nll T, n;\r\nll a[maxn], b[maxn], c[maxn], d[maxn];\r\nbool vis[maxn * 2];\r\n\r\nint main() {\r\n    T = read();\r\n    while (T--) {\r\n        n = read();\r\n        for (ri i = 1; i <= n; i++) {\r\n            a[i] = read();\r\n            vis[a[i]] = 1;\r\n        }\r\n        ll cnt = 0;\r\n        for (ri i = 1; i <= 2 * n; i++) {\r\n            if (!vis[i])b[++cnt] = i;\r\n        }\r\n        ll l = 1, res = 1e18;\r\n        c[0] = 1e18;\r\n        for (ri i = 1; i <= n; i++) {\r\n            while (l <= n && b[l] < a[i])l++;\r\n            ll x = n - l + 1;\r\n            c[i] = min(c[i - 1], x - 1 + i);\r\n            d[i] = n - x + n - i;\r\n        }\r\n        ll suf = 1e18, ans = 0;\r\n        for (ri i = n; i >= 1; i--) {\r\n            suf = min(suf, d[i]);\r\n            if (c[i - 1] >= i - 1 && suf >= n - i + 1) {\r\n                ans++;\r\n            }\r\n        }\r\n        if (c[n] >= n)ans++;\r\n        printf(\"%lld\\n\", ans++);\r\n        for (ri i = 1; i <= 2 * n; i++)\r\n            vis[i] = 0;\r\n    }\r\n    return 0;\r\n}\r\n"
}